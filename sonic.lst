00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            		include	"Equates.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =FFFFFF90                  HBlankRAM	=	$FFFFFF90		; word	; jmp $00000000
00000000 =FFFFFF92                  HBlankRout	=	HBlankRAM+$02		; long	; ''
00000000 =FFFFFF96                  VBlankRAM	=	HBlankRout+$04		; word	; jmp $00000000
00000000 =FFFFFF98                  VBlankRout	=	VBlankRAM+$02		; long	; ''
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000018                  Z80E_Read = $18 
00000000 =000000DD                  x = $DD 
00000000 =000000FD                  y = $FD 
00000000 =00000000                  ldin = $0 
00000000 =00000000                  deci = $0 
00000000 =00000000                  inci = $0 
00000000 =00000000                  M_Read = $0 
00000000 =00000000                  M_CapPCM = $0 
00000000 =00000000                  M_Flush01 = $0 
00000000 =00000000                  M_Flush02 = $0 
00000000 =00000000                  M_Revert01 = $0 
00000000 =00000000                  M_Revert02 = $0 
00000000 =00000000                  M_Wrap = $0 
00000000 =00000000                  M_WrapCondition = $0 
00000000 =00000000                  Z80_Start = $0 
00000000 =00000010                  Z80_Stack = $10 
00000000 =00000010                  BreakLate = $10 
00000000 =00000028                  PCM1_ResetJmp = $28 
00000000 =00000030                  PCM2_ResetJmp = $30 
00000000 =00000038                  BreakVBlank = $38 
00000000 =00000040                  BVB_Check = $40 
00000000 =00000046                  BreakPrep = $46 
00000000 =00000063                  BreakDMA = $63 
00000000 =00000074                  BDMA_NoExchange = $74 
00000000 =00000082                  BDMA_NoFixVolume = $82 
00000000 =00000083                  BDMA_NoFixFlush = $83 
00000000 =00000084                  BDMA_ReadSet = $84 
00000000 =00000084                  BreakBank = $84 
00000000 =00000090                  BDMA_NoMax = $90 
00000000 =0000009A                  BDMA_FlushLoop = $9A 
00000000 =0000009A                  Z80_VBlank2 = $9A 
00000000 =0000009E                  BDMA_Flush02 = $9E 
00000000 =000000B3                  Z80_VBlank1 = $B3 
00000000 =000000B7                  BDMA_Flush01 = $B7 
00000000 =00000107                  BDMA_NoRestore = $107 
00000000 =00000107                  YM_FlushTimer = $107 
00000000 =00000116                  YMF_Buff1 = $116 
00000000 =00000120                  YM_Flush = $120 
00000000 =00000123                  YMF_NextByte = $123 
00000000 =00000142                  Z80_DelayYM1 = $142 
00000000 =00000169                  Z80_DelayYM2 = $169 
00000000 =00000189                  YMF_Finish02 = $189 
00000000 =0000018E                  Z80_DelayYM3 = $18E 
00000000 =00000192                  YMF_Finish01 = $192 
00000000 =00000197                  Z80_DelayYM4 = $197 
00000000 =0000019B                  PCM_Flush_exx = $19B 
00000000 =0000019C                  PCM_Flush = $19C 
00000000 =0000019F                  PCM_NextByte = $19F 
00000000 =000001B3                  Z80_DelayEnd1 = $1B3 
00000000 =000001B5                  YMF_Enter02 = $1B5 
00000000 =000001CC                  Z80_DelayEnd2 = $1CC 
00000000 =000001CE                  YMF_Enter01 = $1CE 
00000000 =000001F6                  YMF_SetBuff1 = $1F6 
00000000 =00000202                  VB_PCM1_VolOK = $202 
00000000 =0000020C                  VB_PCM2_VolOK = $20C 
00000000 =0000020D                  PCM_VolChangeDel = $20D 
00000000 =00000218                  PCM1_VolumeNext = $218 
00000000 =0000021D                  PCM2_VolumeNext = $21D 
00000000 =00000222                  PCM_VolChangeNo = $222 
00000000 =00000229                  Z80_Int1 = $229 
00000000 =0000022D                  Z80_Init = $22D 
00000000 =00000291                  CatchUp = $291 
00000000 =00000292                  CatchUp_Exx = $292 
00000000 =000002A6                  Z80_Int2 = $2A6 
00000000 =000002A7                  PCM1_MuteRet = $2A7 
00000000 =000002AC                  Int1_nop = $2AC 
00000000 =000002AD                  PCM1_Switch = $2AD 
00000000 =000002B8                  PCM1_OverflwCur = $2B8 
00000000 =000002C1                  PCM1_OverflwDiv = $2C1 
00000000 =000002DF                  Int1_lda = $2DF 
00000000 =000002E4                  PCM1_PrepRet = $2E4 
00000000 =000002E4                  PCM1_SampCur = $2E4 
00000000 =000002E7                  PCM1_Buffer = $2E7 
00000000 =000002EA                  PCM1_PitchQuo = $2EA 
00000000 =000002ED                  PCM1_PitchDiv = $2ED 
00000000 =000002F0                  PCM1_PitchCur = $2F0 
00000000 =000002F2                  PCM1_PreInst01 = $2F2 
00000000 =000002F7                  PCM1_PreInst02 = $2F7 
00000000 =000002FC                  PCM1_PreInst03 = $2FC 
00000000 =00000318                  PCM1_PreInst04 = $318 
00000000 =0000031D                  PCM1_PreInst05 = $31D 
00000000 =00000322                  PCM1_PreInst06 = $322 
00000000 =00000327                  PCM1_PreInst07 = $327 
00000000 =00000343                  PCM1_PreInst08 = $343 
00000000 =00000348                  PCM1_PreInst09 = $348 
00000000 =0000034D                  PCM1_PreInst0A = $34D 
00000000 =00000352                  PCM1_PreInst0B = $352 
00000000 =00000357                  PCM1_PreInst0C = $357 
00000000 =00000373                  PCM1_PreInst0D = $373 
00000000 =00000378                  PCM1_PreInst0E = $378 
00000000 =0000037D                  PCM1_PreInst0F = $37D 
00000000 =00000382                  PCM1_PreInst10 = $382 
00000000 =0000039E                  PCM1_PreInst11 = $39E 
00000000 =000003A3                  PCM1_PreInst12 = $3A3 
00000000 =000003A8                  PCM1_PreInst13 = $3A8 
00000000 =000003AD                  PCM1_PreInst14 = $3AD 
00000000 =000003B2                  PCM1_PreInst15 = $3B2 
00000000 =000003CE                  PCM1_PreInst16 = $3CE 
00000000 =000003D3                  PCM1_PreInst17 = $3D3 
00000000 =000003D8                  PCM1_PreInst18 = $3D8 
00000000 =00000403                  PCM2_MuteRet = $403 
00000000 =00000408                  Int2_nop = $408 
00000000 =00000409                  PCM2_Switch = $409 
00000000 =00000414                  PCM2_OverflwCur = $414 
00000000 =00000432                  PCM2_OverflwDiv = $432 
00000000 =0000043B                  Int2_lda = $43B 
00000000 =00000440                  PCM2_PrepRet = $440 
00000000 =00000440                  PCM2_SampCur = $440 
00000000 =00000443                  PCM2_Buffer = $443 
00000000 =00000446                  PCM2_PitchQuo = $446 
00000000 =00000449                  PCM2_PitchDiv = $449 
00000000 =0000044C                  PCM2_PitchCur = $44C 
00000000 =0000044E                  PCM2_PreInst01 = $44E 
00000000 =0000046A                  PCM2_PreInst02 = $46A 
00000000 =0000046F                  PCM2_PreInst03 = $46F 
00000000 =00000474                  PCM2_PreInst04 = $474 
00000000 =00000479                  PCM2_PreInst05 = $479 
00000000 =0000047E                  PCM2_PreInst06 = $47E 
00000000 =0000049A                  PCM2_PreInst07 = $49A 
00000000 =0000049F                  PCM2_PreInst08 = $49F 
00000000 =000004A4                  PCM2_PreInst09 = $4A4 
00000000 =000004A9                  PCM2_PreInst0A = $4A9 
00000000 =000004C5                  PCM2_PreInst0B = $4C5 
00000000 =000004CA                  PCM2_PreInst0C = $4CA 
00000000 =000004CF                  PCM2_PreInst0D = $4CF 
00000000 =000004D4                  PCM2_PreInst0E = $4D4 
00000000 =000004D9                  PCM2_PreInst0F = $4D9 
00000000 =000004F5                  PCM2_PreInst10 = $4F5 
00000000 =000004FA                  PCM2_PreInst11 = $4FA 
00000000 =000004FF                  PCM2_PreInst12 = $4FF 
00000000 =00000504                  PCM2_PreInst13 = $504 
00000000 =00000520                  PCM2_PreInst14 = $520 
00000000 =00000525                  PCM2_PreInst15 = $525 
00000000 =0000052A                  PCM2_PreInst16 = $52A 
00000000 =0000052F                  PCM2_PreInst17 = $52F 
00000000 =00000534                  PCM2_PreInst18 = $534 
00000000 =0000055F                  UPD1_Buffer = $55F 
00000000 =00000565                  UPD1_SampCur = $565 
00000000 =0000056B                  UPD1_PitchCur = $56B 
00000000 =000005A3                  PCM_BuffNoReset = $5A3 
00000000 =000005A4                  PCM1_ChangeBank = $5A4 
00000000 =000005BB                  PCM1_IgnoreBank = $5BB 
00000000 =000005BB                  PCM2_ChangeBank = $5BB 
00000000 =000005D2                  PCM2_IgnoreBank = $5D2 
00000000 =000005D2                  PCM1_ChangePitch = $5D2 
00000000 =000005DC                  PCM1_PitchHigh = $5DC 
00000000 =000005E7                  PCM1_PitchLow = $5E7 
00000000 =00000603                  PCM1_IgnorePitch = $603 
00000000 =00000603                  PCM2_ChangePitch = $603 
00000000 =0000060D                  PCM2_PitchHigh = $60D 
00000000 =00000618                  PCM2_PitchLow = $618 
00000000 =00000634                  PCM2_IgnorePitch = $634 
00000000 =00000634                  PCM_ChangeVolume = $634 
00000000 =00000641                  PCM1_Volume = $641 
00000000 =00000646                  PCM2_Volume = $646 
00000000 =0000064B                  PCM_VolumeAlter = $64B 
00000000 =0000064E                  PCM_VolumeRet = $64E 
00000000 =0000064E                  PCM1_NewRET = $64E 
00000000 =00000651                  PCM2_NewRET = $651 
00000000 =00000654                  PCM_NoUpdate = $654 
00000000 =0000066A                  CU_ValidDist = $66A 
00000000 =0000066F                  CU_Flush = $66F 
00000000 =00000673                  FL_NextByte = $673 
00000000 =00000687                  Z80_Flush1 = $687 
00000000 =000006A1                  Z80_Flush2 = $6A1 
00000000 =000006BC                  PCM1_Mute = $6BC 
00000000 =000006CE                  PCM1_Normal = $6CE 
00000000 =000006D4                  PCM1_Reverse = $6D4 
00000000 =000006ED                  PCM1_PrepReset = $6ED 
00000000 =000006FC                  PCM1_PrepCount = $6FC 
00000000 =0000070A                  PCM1_PrepLoc = $70A 
00000000 =0000072E                  Int1_jp = $72E 
00000000 =00000731                  PCM1_Reset = $731 
00000000 =00000745                  PCM1_ValueAdd = $745 
00000000 =00000770                  Int1_ldhl = $770 
00000000 =00000782                  PCM1_ResInst = $782 
00000000 =00000787                  PCM1_ResSamp = $787 
00000000 =0000078A                  PCM1_ResBuff = $78A 
00000000 =0000078D                  PCM1_ResDiv = $78D 
00000000 =00000790                  PCM1_ResPitCur = $790 
00000000 =00000794                  PCM1_ResQuo = $794 
00000000 =00000797                  PCM1_ResJump = $797 
00000000 =0000079A                  PCM1_NewSample = $79A 
00000000 =000007AA                  PCM1_NewNormal = $7AA 
00000000 =000007B0                  PCM1_NewReverse = $7B0 
00000000 =000007C7                  PCM2_Mute = $7C7 
00000000 =000007D9                  PCM2_Normal = $7D9 
00000000 =000007DF                  PCM2_Reverse = $7DF 
00000000 =000007F8                  PCM2_PrepReset = $7F8 
00000000 =00000807                  PCM2_PrepCount = $807 
00000000 =00000815                  PCM2_PrepLoc = $815 
00000000 =00000824                  Int2_jp = $824 
00000000 =00000827                  PCM2_Reset = $827 
00000000 =0000083B                  PCM2_ValueAdd = $83B 
00000000 =00000866                  Int2_ldhl = $866 
00000000 =00000878                  PCM2_ResInst = $878 
00000000 =0000087D                  PCM2_ResSamp = $87D 
00000000 =00000880                  PCM2_ResBuff = $880 
00000000 =00000883                  PCM2_ResDiv = $883 
00000000 =00000886                  PCM2_ResPitCur = $886 
00000000 =0000088A                  PCM2_ResQuo = $88A 
00000000 =0000088D                  PCM2_ResJump = $88D 
00000000 =00000890                  PCM2_NewSample = $890 
00000000 =000008A0                  PCM2_NewNormal = $8A0 
00000000 =000008A6                  PCM2_NewReverse = $8A6 
00000000 =00000A00                  PCM_Volume1 = $A00 
00000000 =00000B00                  PCM_Volume2 = $B00 
00000000 =00000C00                  PCM1_PrepTable = $C00 
00000000 =00000C30                  PCM2_PrepTable = $C30 
00000000 =00000C60                  PCM1_BankCur = $C60 
00000000 =00000C61                  PCM2_BankCur = $C61 
00000000 =00000C62                  MuteSample = $C62 
00000000 =00000C64                  MuteBank = $C64 
00000000 =00000C65                  MuteSample_Rev = $C65 
00000000 =00000C67                  MuteBank_Rev = $C67 
00000000 =00000C68                  YM_Buffer = $C68 
00000000 =00000C69                  PCM1_Sample = $C69 
00000000 =00000C6B                  PCM1_Bank = $C6B 
00000000 =00000C6C                  PCM1_Sample_Rev = $C6C 
00000000 =00000C6E                  PCM1_Bank_Rev = $C6E 
00000000 =00000C6F                  PCM1_SampleNext = $C6F 
00000000 =00000C71                  PCM1_BankNext = $C71 
00000000 =00000C72                  PCM1_SampleNext_Rev = $C72 
00000000 =00000C74                  PCM1_BankNext_Rev = $C74 
00000000 =00000C75                  PCM2_Sample = $C75 
00000000 =00000C77                  PCM2_Bank = $C77 
00000000 =00000C78                  PCM2_Sample_Rev = $C78 
00000000 =00000C7A                  PCM2_Bank_Rev = $C7A 
00000000 =00000C7B                  PCM2_SampleNext = $C7B 
00000000 =00000C7D                  PCM2_BankNext = $C7D 
00000000 =00000C7E                  PCM2_SampleNext_Rev = $C7E 
00000000 =00000C80                  PCM2_BankNext_Rev = $C80 
00000000 =00000CB0                  PCM_Buffer1 = $CB0 
00000000 =00000EB0                  PCM_Buffer2 = $EB0 
00000000 =00001000                  YM_Buffer1 = $1000 
00000000 =00001400                  YM_Buffer2 = $1400 
00000000 =00001800                  PCM_OverflwCalc = $1800 
00000000 =00001A00                  PCM_VolumeControl = $1A00 
00000000 =00001A06                  PCM1_VolumeNew = $1A06 
00000000 =00001A08                  PCM1_VolumeCur = $1A08 
00000000 =00001A13                  PCM1_VolTimer = $1A13 
00000000 =00001A1B                  PCM1_NoVolume = $1A1B 
00000000 =00001A1B                  PCM2_VolumeNew = $1A1B 
00000000 =00001A1D                  PCM2_VolumeCur = $1A1D 
00000000 =00001A28                  PCM2_VolTimer = $1A28 
00000000 =00001A30                  PCM2_NoVolume = $1A30 
00000000 =00001A35                  SwitchVolume = $1A35 
00000000 =00001A38                  SV_VolumeBank = $1A38 
00000000 =00001A55                  SV_NoMute = $1A55 
00000000 =00001A5A                  SV_LoadVolume = $1A5A 
00000000 =00001A6E                  SV_Flush = $1A6E 
00000000 =00001A91                  SVF_NoMute = $1A91 
00000000 =00001A96                  SVF_LoadVolume = $1A96 
00000000 =00001AAB                  SVF_StartVolume = $1AAB 
00000000 =00001AFC                  SwitchBank = $1AFC 
00000000 =00001B03                  SetBank = $1B03 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000 =000007A0                  torsoart = $7A0 ($C tiles)
00000000 =000007AC                  headart = $7AC ($14 tiles)
00000000 =00000798                  hairart = $798 (8 tiles)
00000000 =000006BA                  ringart = $6BA ($E tiles)
00000000 =00000568                  pointsart = $568 (9 tiles)
00000000 =00000571                  lamppostart = $571 ($A tiles)
00000000                            
00000000 =0000022D                  ssringart = $22D ($E tiles)
00000000                            
00000000 =FFFFF5C0                  SonimeSST = $FFFFF5C0
00000000 =FFFFFFF9                  v_ssangleprev = $FFFFFFF9
00000000 =FFFFF601                  FromSEGA = $FFFFF601
00000000                            
00000000 =00000000                  sonime_headtimer = 0
00000000 =00000002                  sonime_headx = 2
00000000 =00000003                  sonime_heady = 3
00000000 =00000004                  sonime_routine = 4
00000000 =00000005                  sonime_routine2 = 5
00000000 =00000006                  sonime_headx2 = 6
00000000 =00000007                  sonime_headx3 = 7
00000000 =00000009                  sonime_hairx = 9
00000000 =0000000A                  sonime_heady2 = $A
00000000 =0000000B                  sonime_heady3 = $B
00000000 =0000000D                  sonime_hairy = $D
00000000 =0000000E                  sonime_face = $E
00000000 =0000000F                  sonime_faceold = $F
00000000 =00000010                  sonime_facetimer = $10
00000000 =00000012                  sonime_ear = $12
00000000 =00000013                  sonime_earold = $13
00000000 =00000014                  sonime_eartimer = $14
00000000 =00000016                  sonime_torsox = $16
00000000 =00000017                  sonime_movein = $17
00000000 =00000018                  sonime_waittimer = $18
00000000 =00000019                  sonime_waittimer2 = $19
00000000 =00000020                  sonime_pausetimer = $20
00000000 =00000022                  sonime_airtimer = $22
00000000                            
00000000 =00000000                  face_neutrall = 0
00000000 =00000001                  face_blink = 1
00000000 =00000002                  face_neutrallm = 2
00000000 =00000003                  face_neutralm = 3
00000000 =00000004                  face_neutralr = 4
00000000 =00000005                  face_frustrated = 5
00000000 =00000006                  face_surprised = 6
00000000 =00000007                  face_happy = 7
00000000 =00000008                  face_confused = 8
00000000 =00000009                  face_meltdown = 9
00000000 =0000000A                  face_panic = $A
00000000 =0000000B                  face_impatient = $B
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            ResetZ80	macro
00000000                            		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00000000                            		endm
00000000                            
00000000                            NeglectZ80	macro
00000000                            		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- DMA to (a6) containing C00004 ---
00000000                            
00000000                            DMA:		macro	Size, Source, Destination
00000000                            		move.l	#(((((Size/$02)<<$08)&$FF0000)+((Size/$02)&$FF))+$94009300),(a6)
00000000                            		move.l	#((((((Source&$FFFFFF)/$02)<<$08)&$FF0000)+(((Source&$FFFFFF)/$02)&$FF))+$96009500),(a6)
00000000                            		move.l	#(((((Source&$FFFFFF)/$02)&$7F0000)+$97000000)+((Destination>>$10)&$FFFF)),(a6)
00000000                            		move.w	#((Destination&$FF7F)|$80),(a6)
00000000                            		endm
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample, SampleRev, SampleLoop, SampleLoopRev
00000000                            		dc.b	((Sample)&$FF)
00000000                            		dc.b	((((Sample)>>$08)&$7F)|$80)
00000000                            		dc.b	(((Sample)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleRev)-1)&$FF)
00000000                            		dc.b	(((((SampleRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleRev)-1)&$7F8000)>>$0F)
00000000                            		dc.b	((SampleLoop)&$FF)
00000000                            		dc.b	((((SampleLoop)>>$08)&$7F)|$80)
00000000                            		dc.b	(((SampleLoop)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleLoopRev)-1)&$FF)
00000000                            		dc.b	(((((SampleLoopRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleLoopRev)-1)&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            	; --- End marker for PCM samples ---
00000000                            
00000000                            EndMarker	macro
00000000                            		dcb.b	Z80E_Read*(($1000+$100)/$100),$00
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            PlayPCM2	macro	Sample
00000000                            		move.l	a0,-(sp)
00000000                            		move.l	a1,-(sp)
00000000                            		lea (Sample).l,a0 ; load sample pointers
00000000                            		lea ($A00C75).l,a1 ; load PCM2 pointers
00000000                            		move.w #$0100,($A11100).l ; request Z80 stop (ON)
00000000                            		btst.b #$00,($A11100).l ; has the Z80 stopped yet?
00000000                            		bne.s *-$08 ; if not, branch
00000000                            		move.b #1,($A0060E).l ; set pitch quotient
00000000                            		move.b #0,($A00619).l ; set pitch fraction
00000000                            		move.b #%11010010,($A00603).l ; set request
00000000                            		move.b (a0)+,(a1)+ ; set address of sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b #%11011010,($A00651).l ; set request
00000000                            		move.w #$0000,($A11100).l ; request Z80 stop (OFF)
00000000                            		move.l	(sp)+,a1
00000000                            		move.l	(sp)+,a0
00000000                            		endm
00000000                            
00000000 =000001FF                  Max_Rings = 511 ; default. maximum number possible is 759
00000000 =00000400                  Rings_Space = (Max_Rings+1)*2
00000000                            
00000000 =FFFF8000                  Object_Respawn_Table = $FFFF8000
00000000 =FFFFFE2A                  Camera_X_pos_last = $FFFFFE2A
00000000 =FFFFF76E                  Camera_Y_pos_last = $FFFFF76E
00000000                            
00000000 =FFFF8300                  Ring_Positions = $FFFF8300
00000000 =FFFF8700                  Ring_start_addr_ROM = Ring_Positions+Rings_Space
00000000 =FFFF8704                  Ring_end_addr_ROM = Ring_Positions+Rings_Space+4
00000000 =FFFF8708                  Ring_start_addr_RAM = Ring_Positions+Rings_Space+8
00000000 =FFFF870A                  Perfect_rings_left = Ring_Positions+Rings_Space+$A
00000000 =FFFF870C                  Rings_manager_routine = Ring_Positions+Rings_Space+$C
00000000 =FFFF870D                  Level_started_flag = Ring_Positions+Rings_Space+$D
00000000 =FFFF870E                  Ring_consumption_table = Ring_Positions+Rings_Space+$E
00000000 =00000014                  respawn_index = $14	
00000000                            
00000000 =FFFFF60E                  v_pocketbottom = $FFFFF60E
00000000 =FFFFF610                  v_pocketx = $FFFFF610
00000000 =FFFFF612                  f_insidepocket = $FFFFF612
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6	
00000000                            	
00000000 =00000001                  Yes		=	1
00000000 =00000000                  No		=	0
00000000                            
00000000 =00000000                  MUTEDAC		=	No
00000000 =00000000                  MUTEFM		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 5654 5542 4552 2049 4E20+  Title_Local:	dc.b 'VTUBER IN SONIC 1                               ' ; Domestic name
00000150 5654 5542 4552 2049 4E20+  Title_Int:	dc.b 'VTUBER IN SONIC 1                               ' ; International name
00000180 474D 2030 3030 3034 3034+  Serial:					dc.b "GM 00004049-01" ; Serial/version number (Rev01)
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E                            
0000030E                            loc_348:
0000030E 2CC7                       		move.l	d7,(a6)+
00000310 51CE FFFC                  		dbf	d6,loc_348
00000314 1039 00A1 0001             		move.b	($A10001).l,d0
0000031A 0200 00C0                  		andi.b	#$C0,d0
0000031E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000322 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000032A                            
0000032A                            GameInit:
0000032A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000330 7E00                       		moveq	#0,d7
00000332 3C3C 3F7F                  		move.w	#$3F7F,d6
00000336                            
00000336                            GameClrRAM:
00000336 2CC7                       		move.l	d7,(a6)+
00000338 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000033C 6100 0000                  		bsr.w	VDPSetupGame
00000340 6100 0000                  		bsr.w	SoundDriverLoad
00000344 6100 0000                  		bsr.w	JoypadInit
00000348 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000034E                            
0000034E 41FA 0000                  		lea	GML_Int(pc),a0				; load interrupt list
00000352 3258                       		movea.w	(a0)+,a1				; load dump address
00000354 22D8                       		move.l	(a0)+,(a1)+				; jmp $0000
00000356 22D8                       		move.l	(a0)+,(a1)+				; $0000 jmp
00000358 22D8                       		move.l	(a0)+,(a1)+				; $00000000
0000035A                            
0000035A                            MainGameLoop:
0000035A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000035E 0240 001C                  		andi.w	#$1C,d0
00000362 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000366 60F2                       		bra.s	MainGameLoop
00000368                            
00000368 FF90                       GML_Int:	dc.w	HBlankRAM&$FFFF
0000036A 4EF9 0000 0000             		jmp	PalToCRAM
00000370 4EF9 0000 0000             		jmp	loc_B10
00000376                            
00000376 4E73                       NullBlank:	rte
00000378                            
00000378                            ; ===========================================================================
00000378                            ; ---------------------------------------------------------------------------
00000378                            ; Main game mode array
00000378                            ; ---------------------------------------------------------------------------
00000378                            
00000378                            GameModeArray:
00000378 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000037C                            ; ===========================================================================
0000037C 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000380                            ; ===========================================================================
00000380 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000384                            ; ===========================================================================
00000384 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000388                            ; ===========================================================================
00000388 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
0000038C                            ; ===========================================================================
0000038C 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
00000390                            ; ===========================================================================
00000390 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
00000394                            ; ===========================================================================
00000394 6000 0000                  		bra.w	Credits		; Credits ($1C)
00000398                            ; ===========================================================================
00000398 4E75                       		rts	
0000039A                            ; ===========================================================================
0000039A                            
0000039A                            loc_43A:
0000039A 46FC 2700                  		move	#$2700,sr
0000039E 544F                       		addq.w	#2,sp
000003A0 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003A4 544F                       		addq.w	#2,sp
000003A6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003AC 6100 0000                  		bsr.w	ShowErrorMsg
000003B0 202F 0002                  		move.l	2(sp),d0
000003B4 6100 0000                  		bsr.w	sub_5BA
000003B8 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003BC 6100 0000                  		bsr.w	sub_5BA
000003C0 6000                       		bra.s	loc_478
000003C2                            ; ===========================================================================
000003C2                            
000003C2                            loc_462:
000003C2 46FC 2700                  		move	#$2700,sr
000003C6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003CC 6100 0000                  		bsr.w	ShowErrorMsg
000003D0 202F 0002                  		move.l	2(sp),d0
000003D4 6100 0000                  		bsr.w	sub_5BA
000003D8                            
000003D8                            loc_478:
000003D8 6100 0000                  		bsr.w	ErrorWaitForC
000003DC 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000003E2 46FC 2300                  		move	#$2300,sr
000003E6 4E73                       		rte	
000003E8                            
000003E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000003E8                            
000003E8                            
000003E8                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000003E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000003EE 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000003F8 41F9 0000 0000             		lea	(Art_Text).l,a0
000003FE 323C 027F                  		move.w	#$27F,d1
00000402                            
00000402                            Error_LoadGfx:
00000402 3C98                       		move.w	(a0)+,(a6)
00000404 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000408 7000                       		moveq	#0,d0		; clear	d0
0000040A 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000040E 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000412 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000416 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000420 7212                       		moveq	#$12,d1		; number of characters
00000422                            
00000422                            Error_LoopChars:
00000422 7000                       		moveq	#0,d0
00000424 1018                       		move.b	(a0)+,d0
00000426 0640 0790                  		addi.w	#$790,d0
0000042A 3C80                       		move.w	d0,(a6)
0000042C 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000430 4E75                       		rts	
00000432                            ; End of function ShowErrorMsg
00000432                            
00000432                            ; ===========================================================================
00000432 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000436 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000043A 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000043E 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000442 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000446 0000                       		dc.w asc_5A6-ErrorText
00000448 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000045B 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000046E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000481 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000494 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004A7 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004BA 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
000004CD 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000004E0 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000004F3 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000506 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
0000051A 00                         		even
0000051A                            
0000051A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000051A                            
0000051A                            
0000051A                            sub_5BA:				; XREF: loc_43A; loc_462
0000051A 3CBC 07CA                  		move.w	#$7CA,(a6)
0000051E 7407                       		moveq	#7,d2
00000520                            
00000520                            loc_5C0:
00000520 E998                       		rol.l	#4,d0
00000522 6100                       		bsr.s	sub_5CA
00000524 51CA FFFA                  		dbf	d2,loc_5C0
00000528 4E75                       		rts	
0000052A                            ; End of function sub_5BA
0000052A                            
0000052A                            
0000052A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000052A                            
0000052A                            
0000052A                            sub_5CA:				; XREF: sub_5BA
0000052A 3200                       		move.w	d0,d1
0000052C 0241 000F                  		andi.w	#$F,d1
00000530 0C41 000A                  		cmpi.w	#$A,d1
00000534 6500                       		bcs.s	loc_5D8
00000536 5E41                       		addq.w	#7,d1
00000538                            
00000538                            loc_5D8:
00000538 0641 07C0                  		addi.w	#$7C0,d1
0000053C 3C81                       		move.w	d1,(a6)
0000053E 4E75                       		rts	
00000540                            ; End of function sub_5CA
00000540                            
00000540                            
00000540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000540                            
00000540                            
00000540                            ErrorWaitForC:				; XREF: loc_478
00000540 6100 0000                  		bsr.w	ReadJoypads
00000544 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000054A 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000054E 4E75                       		rts	
00000550                            ; End of function ErrorWaitForC
00000550                            
00000550                            ; ===========================================================================
00000550                            
00000550                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000A70                            		even
00000A70                            
00000A70                            ; ===========================================================================
00000A70                            
00000A70                            DetectPAL:
00000A70 4EB9 0000 0000             		jsr	(sub_71B4C).l
00000A76 0839 0006 00A1 0001        		btst    #6,($A10001).l
00000A7E 6700 0000                  		beq.w   @ret
00000A82 5238 FFBF                  		addq.b  #1,($FFFFFFBF).w
00000A86 0C38 0005 FFBF             		cmpi.b  #5,($FFFFFFBF).w
00000A8C 6500                       		blo.s   @ret
00000A8E 4238 FFBF                  		clr.b   ($FFFFFFBF).w
00000A92 4EB9 0000 0000             		jsr	sub_71B4C
00000A98                            @ret
00000A98 4E75                       		rts
00000A9A                            ; End of function DetectPAL
00000A9A                            
00000A9A                            loc_B10:				; XREF: Vectors
00000A9A 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000A9E 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AA2 6700                       		beq.s	loc_B88
00000AA4 3039 00C0 0004             		move.w	($C00004).l,d0
00000AAA 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AB4 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000ABC 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AC2 6700                       		beq.s	loc_B42
00000AC4 303C 0700                  		move.w	#$700,d0
00000AC8                            
00000AC8                            loc_B3E:
00000AC8 51C8 FFFE                  		dbf	d0,loc_B3E
00000ACC                            
00000ACC                            loc_B42:
00000ACC 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AD0 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AD6 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000ADC 0240 003E                  		andi.w	#$3E,d0
00000AE0 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AE4 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AE8                            
00000AE8                            loc_B5E:				; XREF: loc_B88
00000AE8 4EB9 0000 0A70             		jsr		(DetectPAL).l
00000AEE                            
00000AEE                            loc_B64:				; XREF: loc_D50
00000AEE 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000AF2 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000AF6 4E73                       		rte	
00000AF8                            ; ===========================================================================
00000AF8 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000AFC 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B00 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B04 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B08 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B0C 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B10 0000                       		dc.w loc_E72-off_B6E
00000B12                            ; ===========================================================================
00000B12                            
00000B12                            loc_B88:				; XREF: loc_B10; off_B6E
00000B12 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B18 6700                       		beq.s	loc_B9A
00000B1A 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B20 6600 FFC6                  		bne.w	loc_B5E
00000B24                            
00000B24                            loc_B9A:
00000B24 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B2A 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B2E 3039 00C0 0004             		move.w	($C00004).l,d0
00000B34 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B3A 6700                       		beq.s	loc_BBA
00000B3C 303C 0700                  		move.w	#$700,d0
00000B40                            
00000B40                            loc_BB6:
00000B40 51C8 FFFE                  		dbf	d0,loc_BB6
00000B44                            
00000B44                            loc_BBA:
00000B44 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B4A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B4E 6600                       		bne.s	loc_BFE
00000B50 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B56 3ABC 8C81                  		move.w	#$8C81,(a5)
00000B5A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B60 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B66 3ABC 977F                  		move.w	#$977F,(a5)
00000B6A 3ABC C000                  		move.w	#$C000,(a5)
00000B6E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B78 6000                       		bra.s	loc_C22
00000B7A                            ; ===========================================================================
00000B7A                            
00000B7A                            loc_BFE:				; XREF: loc_BC8
00000B7A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B80 3ABC 8C89                  		move.w	#$8C89,(a5)
00000B84 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B8A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B90 3ABC 977F                  		move.w	#$977F,(a5)
00000B94 3ABC C000                  		move.w	#$C000,(a5)
00000B98 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BA2                            
00000BA2                            loc_C22:				; XREF: loc_BC8
00000BA2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BA6 6000 FF40                  		bra.w	loc_B5E
00000BAA                            ; ===========================================================================
00000BAA                            
00000BAA                            loc_C32:				; XREF: off_B6E
00000BAA 6100 0000                  		bsr.w	sub_106E
00000BAE                            
00000BAE                            loc_C36:				; XREF: off_B6E
00000BAE 4A78 F614                  		tst.w	($FFFFF614).w
00000BB2 6700 0000                  		beq.w	locret_C42
00000BB6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BBA                            
00000BBA                            locret_C42:
00000BBA 4E75                       		rts	
00000BBC                            ; ===========================================================================
00000BBC                            
00000BBC                            loc_C44:				; XREF: off_B6E
00000BBC 6100 0000                  		bsr.w	sub_106E
00000BC0 6100 0000                  		bsr.w	sub_6886
00000BC4 6100 0000                  		bsr.w	sub_1642
00000BC8 4A78 F614                  		tst.w	($FFFFF614).w
00000BCC 6700 0000                  		beq.w	locret_C5C
00000BD0 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BD4                            
00000BD4                            locret_C5C:
00000BD4 4E75                       		rts	
00000BD6                            ; ===========================================================================
00000BD6                            
00000BD6                            loc_C5E:				; XREF: off_B6E
00000BD6 6100 0000                  		bsr.w	sub_106E
00000BDA 4E75                       		rts
00000BDC                            
00000BDC                            ; Return:
00000BDC 6100 0000                  		bsr.w	ReadJoypads
00000BE0 4E75                       		rts	
00000BE2                            ; ===========================================================================
00000BE2                            
00000BE2                            loc_C64:				; XREF: off_B6E
00000BE2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000BE8 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000BEC                            
00000BEC                            loc_C6E:				; XREF: off_B6E
00000BEC 6100 0000                  		bsr.w	ReadJoypads
00000BF0 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BF4 6600                       		bne.s	loc_CB0
00000BF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BFC 3ABC 8C81                  		move.w	#$8C81,(a5)
00000C00 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C06 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C0C 3ABC 977F                  		move.w	#$977F,(a5)
00000C10 3ABC C000                  		move.w	#$C000,(a5)
00000C14 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C1E 6000                       		bra.s	loc_CD4
00000C20                            ; ===========================================================================
00000C20                            
00000C20                            loc_CB0:				; XREF: loc_C76
00000C20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C26 3ABC 8C89                  		move.w	#$8C89,(a5)
00000C2A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C30 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C36 3ABC 977F                  		move.w	#$977F,(a5)
00000C3A 3ABC C000                  		move.w	#$C000,(a5)
00000C3E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C44 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C48                            
00000C48                            loc_CD4:				; XREF: loc_C76
00000C48 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C4C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C52 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C58 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C5E 3ABC 977F                  		move.w	#$977F,(a5)
00000C62 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C66 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C6C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C70 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C76 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000C7C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000C82 3ABC 977F                  		move.w	#$977F,(a5)
00000C86 3ABC 7800                  		move.w	#$7800,(a5)
00000C8A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C90 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C94 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000C9A                            
00000C9A                            loc_D50:
00000C9A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000CA0 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000CA6 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000CAC 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000CB2 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000CB8 6400                       		bcc.s	Demo_Time
00000CBA 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CC0 588F                       		addq.l	#4,sp
00000CC2 6000 FE2A                  		bra.w	loc_B64
00000CC6                            
00000CC6                            ; ---------------------------------------------------------------------------
00000CC6                            ; Subroutine to	run a demo for an amount of time
00000CC6                            ; ---------------------------------------------------------------------------
00000CC6                            
00000CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CC6                            
00000CC6                            
00000CC6                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000CC6 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CCA 4EB9 0000 0000             		jsr	AniArt_Load
00000CD0 4EB9 0000 0000             		jsr	HudUpdate
00000CD6 6100 0000                  		bsr.w	sub_165E
00000CDA 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000CDE 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000CE2 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000CE6                            
00000CE6                            Demo_TimeEnd:
00000CE6 4E75                       		rts	
00000CE8                            ; End of function Demo_Time
00000CE8                            
00000CE8                            ; ===========================================================================
00000CE8                            
00000CE8                            loc_DA6:				; XREF: off_B6E
00000CE8 6100 0000                  		bsr.w	ReadJoypads
00000CEC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CF2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CF8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000CFE 3ABC 977F                  		move.w	#$977F,(a5)
00000D02 3ABC C000                  		move.w	#$C000,(a5)
00000D06 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D0C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D10 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D16 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D1C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D22 3ABC 977F                  		move.w	#$977F,(a5)
00000D26 3ABC 7800                  		move.w	#$7800,(a5)
00000D2A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D30 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D3A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D40 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D46 3ABC 977F                  		move.w	#$977F,(a5)
00000D4A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D4E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D58 6100 0000                  		bsr.w	PalCycle_SS
00000D5C 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D62                            
00000D62                            loc_E64:
00000D62 0C38 0060 F625             		cmpi.b	#96,($FFFFF625).w
00000D68 6400                       		bcc.s	@update
00000D6A 6000 0000                  		bra.w	locret_E70
00000D6E                            
00000D6E                            	@update:
00000D6E 4EB9 0000 0000             		jsr	SS_LoadWalls
00000D74 4A78 F614                  		tst.w	($FFFFF614).w
00000D78 6700 0000                  		beq.w	locret_E70
00000D7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000D80                            
00000D80                            locret_E70:
00000D80 4E75                       		rts	
00000D82                            ; ===========================================================================
00000D82                            
00000D82                            loc_E72:				; XREF: off_B6E
00000D82 6100 0000                  		bsr.w	ReadJoypads
00000D86 4A38 F64E                  		tst.b	($FFFFF64E).w
00000D8A 6600                       		bne.s	loc_EB4
00000D8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D92 3ABC 8C81                  		move.w	#$8C81,(a5)
00000D96 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D9C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DA2 3ABC 977F                  		move.w	#$977F,(a5)
00000DA6 3ABC C000                  		move.w	#$C000,(a5)
00000DAA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DB0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DB4 6000                       		bra.s	loc_ED8
00000DB6                            ; ===========================================================================
00000DB6                            
00000DB6                            loc_EB4:				; XREF: loc_E7A
00000DB6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DBC 3ABC 8C89                  		move.w	#$8C89,(a5)
00000DC0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCC 3ABC 977F                  		move.w	#$977F,(a5)
00000DD0 3ABC C000                  		move.w	#$C000,(a5)
00000DD4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DDE                            
00000DDE                            loc_ED8:				; XREF: loc_E7A
00000DDE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000DE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DEE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DF4                            
00000DF4                            loc_EEE:
00000DF4 3ABC 977F                  		move.w	#$977F,(a5)
00000DF8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DFC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E06 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E12 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E18 3ABC 977F                  		move.w	#$977F,(a5)
00000E1C 3ABC 7800                  		move.w	#$7800,(a5)
00000E20 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E26 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E2A 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E30                            
00000E30                            loc_F54:
00000E30 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E36 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E3C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E42 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E48 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E4C 4EB9 0000 0000             		jsr	AniArt_Load
00000E52 4EB9 0000 0000             		jsr	HudUpdate
00000E58 6100 0000                  		bsr.w	sub_1642
00000E5C 4E75                       		rts	
00000E5E                            ; ===========================================================================
00000E5E                            
00000E5E                            loc_F8A:				; XREF: off_B6E
00000E5E 6100 0000                  		bsr.w	sub_106E
00000E62 5238 F628                  		addq.b	#1,($FFFFF628).w
00000E66 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000E6C 4E75                       		rts	
00000E6E                            ; ===========================================================================
00000E6E                            
00000E6E                            loc_F9A:				; XREF: off_B6E
00000E6E 6100 0000                  		bsr.w	sub_106E
00000E72 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E76 6000 0000                  		bra.w	sub_1642
00000E7A                            ; ===========================================================================
00000E7A                            
00000E7A                            loc_FA6:				; XREF: off_B6E
00000E7A 6100 0000                  		bsr.w	ReadJoypads
00000E7E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E84 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E8A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E90 3ABC 977F                  		move.w	#$977F,(a5)
00000E94 3ABC C000                  		move.w	#$C000,(a5)
00000E98 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA8 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000EAE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000EB4 3ABC 977F                  		move.w	#$977F,(a5)
00000EB8 3ABC 7800                  		move.w	#$7800,(a5)
00000EBC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ECC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000ED2 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000ED8 3ABC 977F                  		move.w	#$977F,(a5)
00000EDC 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EE0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EE6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EEA 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000EF0                            
00000EF0                            loc_1060:
00000EF0 4A78 F614                  		tst.w	($FFFFF614).w
00000EF4 6700 0000                  		beq.w	locret_106C
00000EF8 5378 F614                  		subq.w	#1,($FFFFF614).w
00000EFC                            
00000EFC                            locret_106C:
00000EFC 4E75                       		rts	
00000EFE                            
00000EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000EFE                            
00000EFE                            
00000EFE                            sub_106E:				; XREF: loc_C32; et al
00000EFE 6100 0000                  		bsr.w	ReadJoypads
00000F02 4A38 F64E                  		tst.b	($FFFFF64E).w
00000F06 6600                       		bne.s	loc_10B0
00000F08 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F0E 3ABC 8C81                  		move.w	#$8C81,(a5)
00000F12 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F18 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F1E 3ABC 977F                  		move.w	#$977F,(a5)
00000F22 3ABC C000                  		move.w	#$C000,(a5)
00000F26 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F2C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F30                            
00000F30                            PAL1_LOAD:
00000F30 6000                       		bra.s	loc_10D4
00000F32                            ; ===========================================================================
00000F32                            
00000F32                            loc_10B0:
00000F32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F38 3ABC 8C89                  		move.w	#$8C89,(a5)
00000F3C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F42 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F48 3ABC 977F                  		move.w	#$977F,(a5)
00000F4C 3ABC C000                  		move.w	#$C000,(a5)
00000F50 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F56 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F5A                            loc_10D4:
00000F5A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F60 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F66 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F6C 3ABC 977F                  		move.w	#$977F,(a5)
00000F70 3ABC 7800                  		move.w	#$7800,(a5)
00000F74 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F7A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F7E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F84 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F8A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F90 3ABC 977F                  		move.w	#$977F,(a5)
00000F94 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F98 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FA2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000FA8 4E75                       		rts	
00000FAA                            ; End of function sub_106E
00000FAA                            
00000FAA                            ; ---------------------------------------------------------------------------
00000FAA                            ; Subroutine to	move pallets from the RAM to CRAM
00000FAA                            ; ---------------------------------------------------------------------------
00000FAA                            
00000FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FAA                            
00000FAA                            
00000FAA                            PalToCRAM:
00000FAA 46FC 2700                  		move	#$2700,sr
00000FAE 4A78 F644                  		tst.w	($FFFFF644).w
00000FB2 6700                       		beq.s	locret_119C
00000FB4 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000FBA 2F08                       		move.l	a0,-(sp)
00000FBC 41F9 00C0 0004             		lea	($C00004).l,a0
00000FC2 30BC 8C89                  		move.w	#$8C89,(a0)
00000FC6 30BC 8ADF                  		move.w	#$8ADF,(a0)
00000FCA 205F                       		move.l	(sp)+,a0
00000FCC 4A38 F64F                  		tst.b	($FFFFF64F).w
00000FD0 6600                       		bne.s	loc_119E
00000FD2                            
00000FD2                            locret_119C:
00000FD2 4E73                       		rte	
00000FD4                            ; ===========================================================================
00000FD4                            
00000FD4                            loc_119E:				; XREF: PalToCRAM
00000FD4 4238 F64F                  		clr.b	($FFFFF64F).w
00000FD8 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000FDC 6100 FCE8                  		bsr.w	Demo_Time
00000FE0 4EB9 0000 0A70             		jsr		(DetectPAL).l
00000FE6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000FEA 4E73                       		rte	
00000FEC                            ; End of function PalToCRAM
00000FEC                            
00000FEC                            ; ---------------------------------------------------------------------------
00000FEC                            ; Subroutine to	initialise joypads
00000FEC                            ; ---------------------------------------------------------------------------
00000FEC                            
00000FEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FEC                            
00000FEC                            
00000FEC                            JoypadInit:				; XREF: GameClrRAM
00000FEC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FF4                            
00000FF4                            Joypad_WaitZ80:
00000FF4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00000FFC 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00000FFE 7040                       		moveq	#$40,d0
00001000 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001006 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
0000100C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001012 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000101A 4E75                       		rts	
0000101C                            ; End of function JoypadInit
0000101C                            
0000101C                            ; ---------------------------------------------------------------------------
0000101C                            ; Subroutine to	read joypad input, and send it to the RAM
0000101C                            ; ---------------------------------------------------------------------------
0000101C                            
0000101C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000101C                            
0000101C                            
0000101C                            ReadJoypads:
0000101C 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001020 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001026 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001028 5449                       		addq.w	#2,a1		; do the second	joypad
0000102A                            
0000102A                            Joypad_Read:
0000102A 12BC 0000                  		move.b	#0,(a1)
0000102E 4E71                       		nop	
00001030 4E71                       		nop	
00001032 1011                       		move.b	(a1),d0
00001034 E508                       		lsl.b	#2,d0
00001036 0200 00C0                  		andi.b	#$C0,d0
0000103A 12BC 0040                  		move.b	#$40,(a1)
0000103E 4E71                       		nop	
00001040 4E71                       		nop	
00001042 1211                       		move.b	(a1),d1
00001044 0201 003F                  		andi.b	#$3F,d1
00001048 8001                       		or.b	d1,d0
0000104A 4600                       		not.b	d0
0000104C 1210                       		move.b	(a0),d1
0000104E B101                       		eor.b	d0,d1
00001050 10C0                       		move.b	d0,(a0)+
00001052 C200                       		and.b	d0,d1
00001054 10C1                       		move.b	d1,(a0)+
00001056 4E75                       		rts	
00001058                            ; End of function ReadJoypads
00001058                            
00001058                            
00001058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001058                            
00001058                            
00001058                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001058 41F9 00C0 0004             		lea	($C00004).l,a0
0000105E 43F9 00C0 0000             		lea	($C00000).l,a1
00001064 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000106A 7E12                       		moveq	#$12,d7
0000106C                            
0000106C                            VDP_Loop:
0000106C 309A                       		move.w	(a2)+,(a0)
0000106E 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001072                            
00001072 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001078 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000107C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001082 7000                       		moveq	#0,d0
00001084 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000108E 3E3C 003F                  		move.w	#$3F,d7
00001092                            
00001092                            VDP_ClrCRAM:
00001092 3280                       		move.w	d0,(a1)
00001094 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001098                            
00001098 42B8 F616                  		clr.l	($FFFFF616).w
0000109C 42B8 F61A                  		clr.l	($FFFFF61A).w
000010A0 2F01                       		move.l	d1,-(sp)
000010A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010A8 3ABC 8F01                  		move.w	#$8F01,(a5)
000010AC 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000010B2 3ABC 9780                  		move.w	#$9780,(a5)
000010B6 2ABC 4000 0080             		move.l	#$40000080,(a5)
000010BC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000010C4                            
000010C4                            loc_128E:
000010C4 3215                       		move.w	(a5),d1
000010C6 0801 0001                  		btst	#1,d1
000010CA 66F8                       		bne.s	loc_128E
000010CC                            
000010CC 3ABC 8F02                  		move.w	#$8F02,(a5)
000010D0 221F                       		move.l	(sp)+,d1
000010D2 4E75                       		rts	
000010D4                            ; End of function VDPSetupGame
000010D4                            
000010D4                            ; ===========================================================================
000010D4 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000010DC 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000010E4 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000010EC 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000010F4 9001 9100 9200             		dc.w $9001, $9100, $9200
000010FA                            
000010FA                            ; ---------------------------------------------------------------------------
000010FA                            ; Subroutine to	clear the screen
000010FA                            ; ---------------------------------------------------------------------------
000010FA                            
000010FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010FA                            
000010FA                            
000010FA                            ClearScreen:
000010FA 4BF9 00C0 0004             		lea	($C00004).l,a5
00001100 3ABC 8F01                  		move.w	#$8F01,(a5)
00001104 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000110A 3ABC 9780                  		move.w	#$9780,(a5)
0000110E 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001114 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000111C                            
0000111C                            loc_12E6:
0000111C 3215                       		move.w	(a5),d1
0000111E 0801 0001                  		btst	#1,d1
00001122 66F8                       		bne.s	loc_12E6
00001124                            
00001124 3ABC 8F02                  		move.w	#$8F02,(a5)
00001128 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001132 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001138 3ABC 9780                  		move.w	#$9780,(a5)
0000113C 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001142 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000114A                            
0000114A                            loc_1314:
0000114A 3215                       		move.w	(a5),d1
0000114C 0801 0001                  		btst	#1,d1
00001150 66F8                       		bne.s	loc_1314
00001152                            
00001152 3ABC 8F02                  		move.w	#$8F02,(a5)
00001156 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000115E 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001166 43F8 F838                  		lea	($FFFFF838).w,a1
0000116A 7000                       		moveq	#0,d0
0000116C 323C 0092                  		move.w	#$92,d1
00001170                            
00001170                            loc_133A:
00001170 22C0                       		move.l	d0,(a1)+
00001172 51C9 FFFC                  		dbf	d1,loc_133A
00001176                            
00001176 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000117A 7000                       		moveq	#0,d0
0000117C 323C 0100                  		move.w	#$100,d1
00001180                            
00001180                            loc_134A:
00001180 22C0                       		move.l	d0,(a1)+
00001182 51C9 FFFC                  		dbf	d1,loc_134A
00001186 4E75                       		rts	
00001188                            ; End of function ClearScreen
00001188                            
00001188                            ; ---------------------------------------------------------------------------
00001188                            ; Subroutine to	load the sound driver
00001188                            ; ---------------------------------------------------------------------------
00001188                            
00001188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001188                            
00001188                            
00001188                            SoundDriverLoad:
00001188 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
0000118E 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
00001194 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
00001198 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
000011A0 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
000011A8 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
000011B0 66F6                       		bne.s	*-$08					; if not, branch
000011B2                            
000011B2                            SM_LoadZ80:
000011B2 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
000011B4 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
000011B8 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
000011BE 43F9 00A0 0C62             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
000011C4 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
000011C6 12D8                       		move.b	(a0)+,(a1)+				; ''
000011C8 12D8                       		move.b	(a0)+,(a1)+				; ''
000011CA 12D8                       		move.b	(a0)+,(a1)+				; CHG: copy "reverse" pointer over into Z80
000011CC 12D8                       		move.b	(a0)+,(a1)+				; ''
000011CE 12D8                       		move.b	(a0)+,(a1)+				; ''
000011D0 43F9 00A0 1A38             		lea	($A00000+SV_VolumeBank).l,a1		; load volume bank address write routine
000011D6 12FC 0000                  		move.b 	#$74|((PCM_Volumes>>$0F)&1),(a1)+	; write "ld  (hl),?" instructions
000011DA 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$10)&1),(a1)+	; ''
000011DE 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$11)&1),(a1)+	; ''
000011E2 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$12)&1),(a1)+	; ''
000011E6 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$13)&1),(a1)+	; ''
000011EA 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$14)&1),(a1)+	; ''
000011EE 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$15)&1),(a1)+	; ''
000011F2 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$16)&1),(a1)+	; ''
000011F6 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$17)&1),(a1)+	; ''
000011FA 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00001202 727F                       		moveq	#$7F,d1					; set repeat times
00001204 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
00001208 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00001210 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00001218 4E75                       		rts						; return
0000121A                            ; End of function SoundDriverLoad
0000121A                            
0000121A                            ; ---------------------------------------------------------------------------
0000121A                            ; Subroutine to	play a sound or	music track
0000121A                            ; ---------------------------------------------------------------------------
0000121A                            
0000121A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000121A                            
0000121A                            
0000121A                            PlaySound:
0000121A 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000121E 4E75                       		rts	
00001220                            ; End of function PlaySound
00001220                            
00001220                            ; ---------------------------------------------------------------------------
00001220                            ; Subroutine to	play a special sound/music (E0-E4)
00001220                            ;
00001220                            ; E0 - Fade out
00001220                            ; E1 - Sega
00001220                            ; E2 - Speed up
00001220                            ; E3 - Normal speed
00001220                            ; E4 - Stop
00001220                            ; ---------------------------------------------------------------------------
00001220                            
00001220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001220                            
00001220                            
00001220                            PlaySound_Special:
00001220 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001224 4E75                       		rts	
00001226                            ; End of function PlaySound_Special
00001226                            
00001226                            ; ===========================================================================
00001226                            ; ---------------------------------------------------------------------------
00001226                            ; Unused sound/music subroutine
00001226                            ; ---------------------------------------------------------------------------
00001226                            
00001226                            PlaySound_Unk:
00001226 11C0 F00C                  		move.b	d0,($FFFFF00C).w
0000122A 4E75                       		rts	
0000122C                            
0000122C                            ; ---------------------------------------------------------------------------
0000122C                            ; Subroutine to	pause the game
0000122C                            ; ---------------------------------------------------------------------------
0000122C                            
0000122C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000122C                            
0000122C                            
0000122C                            PauseGame:				; XREF: Level_MainLoop; et al
0000122C 4E71                       		nop	
0000122E 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001232 6700 0000                  		beq.w	Unpause		; if not, branch
00001236 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
0000123A 6600                       		bne.s	loc_13BE	; if yes, branch
0000123C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001242 6700 0000                  		beq.w	Pause_DoNothing	; if not, branch
00001246                            
00001246                            loc_13BE:
00001246 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000124C 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001252                            
00001252                            loc_13CA:
00001252 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001258 6100 0000                  		bsr.w	DelayProgram
0000125C 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001260 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001262 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001268 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000126A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001270 4E71                       		nop	
00001272 6000                       		bra.s	loc_1404
00001274                            ; ===========================================================================
00001274                            
00001274                            Pause_ChkBC:				; XREF: PauseGame
00001274 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
0000127A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000127C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001282 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001284                            
00001284                            Pause_ChkStart:				; XREF: PauseGame
00001284 4A78 F5E0                  		tst.w	(SonimeSST+sonime_pausetimer).w
00001288 6600                       		bne.s	@waitlonger
0000128A 11FC 0001 F5CE             		move.b	#face_blink,(SonimeSST+sonime_face).w
00001290 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00001296 6000                       		bra.s	@cont
00001298                            
00001298                            	@waitlonger:
00001298 5378 F5E0                  		subi.w	#1,(SonimeSST+sonime_pausetimer).w
0000129C                            
0000129C                            	@cont:
0000129C 41F8 D000                  		lea	($FFFFD000).w,a0 ; a0=object
000012A0 7000                       		moveq	#0,d0
000012A2 7E7F                       		moveq	#$7F,d7 ; run the first $80 objects out of levels
000012A4 4EB9 0000 0000             		jsr		loc_D368
000012AA 4EB9 0000 0000             		jsr		BuildSprites
000012B0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000012B6 6600                       		bne.s	@notss
000012B8 4EB9 0000 0000             		jsr	SS_ShowLayout
000012BE                            
000012BE                            	@notss:
000012BE 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000012C4 678C                       		beq.s	loc_13CA	; if not, branch
000012C6 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
000012CC                            
000012CC                            loc_1404:				; XREF: PauseGame
000012CC 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012D2                            
000012D2                            Unpause:				; XREF: PauseGame
000012D2 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000012D8                            
000012D8                            Pause_DoNothing:			; XREF: PauseGame
000012D8 4E75                       		rts	
000012DA                            ; ===========================================================================
000012DA                            
000012DA                            Pause_SlowMo:				; XREF: PauseGame
000012DA 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000012E0 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012E6 4E75                       		rts	
000012E8                            ; End of function PauseGame
000012E8                            
000012E8                            ; ---------------------------------------------------------------------------
000012E8                            ; Subroutine to	display	patterns via the VDP
000012E8                            ; ---------------------------------------------------------------------------
000012E8                            
000012E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012E8                            
000012E8                            
000012E8                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000012E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000012EE 283C 0080 0000             		move.l	#$800000,d4
000012F4                            
000012F4                            loc_142C:
000012F4 2D40 0004                  		move.l	d0,4(a6)
000012F8 3601                       		move.w	d1,d3
000012FA                            
000012FA                            loc_1432:
000012FA 3C99                       		move.w	(a1)+,(a6)
000012FC 51CB FFFC                  		dbf	d3,loc_1432
00001300 D084                       		add.l	d4,d0
00001302 51CA FFF0                  		dbf	d2,loc_142C
00001306 4E75                       		rts	
00001308                            ; End of function ShowVDPGraphics
00001308                            
00001308                            ; ==============================================================================
00001308                            ; ------------------------------------------------------------------------------
00001308                            ; Nemesis decompression routine
00001308                            ; ------------------------------------------------------------------------------
00001308                            ; Optimized by vladikcomper
00001308                            ; ------------------------------------------------------------------------------
00001308                             
00001308                            NemDec_RAM:
00001308 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
0000130C 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
00001310 6000                           bra.s   NemDec_Main
00001312                             
00001312                            ; ------------------------------------------------------------------------------
00001312                            NemDec:
00001312 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001316 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
0000131C 47FA 0000                      lea NemDec_WriteRowToVDP(pc),a3
00001320                             
00001320                            NemDec_Main:
00001320 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001324 3418                           move.w  (a0)+,d2        ; get number of patterns
00001326 6A00                           bpl.s   @0          ; are we in Mode 0?
00001328 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
0000132C E74A                       @0  lsl.w   #3,d2
0000132E 3A42                           movea.w d2,a5
00001330 7607                           moveq   #7,d3
00001332 7400                           moveq   #0,d2
00001334 7800                           moveq   #0,d4
00001336 6100 0000                      bsr.w   NemDec4
0000133A 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
0000133C E145                           asl.w   #8,d5           ; shift up by a byte
0000133E 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
00001340 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001344 6100                           bsr.s   NemDec2
00001346 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
0000134A 4E75                           rts
0000134C                             
0000134C                            ; ---------------------------------------------------------------------------
0000134C                            ; Part of the Nemesis decompressor, processes the actual compressed data
0000134C                            ; ---------------------------------------------------------------------------
0000134C                             
0000134C                            NemDec2:
0000134C 3E06                           move.w  d6,d7
0000134E 5147                           subq.w  #8,d7           ; get shift value
00001350 3205                           move.w  d5,d1
00001352 EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001354 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001358 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
0000135A 0241 00FF                      andi.w  #$FF,d1
0000135E D241                           add.w   d1,d1
00001360 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
00001364 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001368 6400                           bcc.s   @0          ; if not, branch
0000136A 5046                           addq.w  #8,d6
0000136C E145                           asl.w   #8,d5
0000136E 1A18                           move.b  (a0)+,d5        ; read next byte
00001370 1231 1001                  @0  move.b  1(a1,d1.w),d1
00001374 3001                           move.w  d1,d0
00001376 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000137A 0240 00F0                      andi.w  #$F0,d0
0000137E                             
0000137E                            NemDec_GetRepeatCount:
0000137E E848                           lsr.w   #4,d0           ; get repeat count
00001380                             
00001380                            NemDec_WritePixel:
00001380 E98C                           lsl.l   #4,d4           ; shift up by a nybble
00001382 8801                           or.b    d1,d4           ; write pixel
00001384 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001388 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
0000138A                            ; ---------------------------------------------------------------------------
0000138A                             
0000138A                            NemDec3:
0000138A 7800                           moveq   #0,d4           ; reset row
0000138C 7607                           moveq   #7,d3           ; reset nybble counter
0000138E                             
0000138E                            NemDec_WritePixelLoop:
0000138E 51C8 FFF0                      dbf d0,NemDec_WritePixel
00001392 60B8                           bra.s   NemDec2
00001394                            ; ---------------------------------------------------------------------------
00001394                             
00001394                            NemDec_InlineData:
00001394 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001396 0C46 0009                      cmpi.w  #9,d6
0000139A 6400                           bcc.s   @0
0000139C 5046                           addq.w  #8,d6
0000139E E145                           asl.w   #8,d5
000013A0 1A18                           move.b  (a0)+,d5
000013A2 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013A4 3205                           move.w  d5,d1
000013A6 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013A8 3001                           move.w  d1,d0
000013AA 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013AE 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013B2 0C46 0009                      cmpi.w  #9,d6
000013B6 64C6                           bcc.s   NemDec_GetRepeatCount
000013B8 5046                           addq.w  #8,d6
000013BA E145                           asl.w   #8,d5
000013BC 1A18                           move.b  (a0)+,d5
000013BE 60BE                           bra.s   NemDec_GetRepeatCount
000013C0                             
000013C0                            ; ---------------------------------------------------------------------------
000013C0                            ; Subroutines to output decompressed entry
000013C0                            ; Selected depending on current decompression mode
000013C0                            ; ---------------------------------------------------------------------------
000013C0                             
000013C0                            NemDec_WriteRowToVDP:
000013C0                            loc_1502:
000013C0 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013C2 534D                           subq.w  #1,a5
000013C4 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013C6 66C2                           bne.s   NemDec3         ; if not, branch
000013C8 4E75                           rts
000013CA                            ; ---------------------------------------------------------------------------
000013CA                             
000013CA                            NemDec_WriteRowToVDP_XOR:
000013CA B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013CC 2882                           move.l  d2,(a4)         ; and write the result
000013CE 534D                           subq.w  #1,a5
000013D0 380D                           move.w  a5,d4
000013D2 66B6                           bne.s   NemDec3
000013D4 4E75                           rts
000013D6                            ; ---------------------------------------------------------------------------
000013D6                             
000013D6                            NemDec_WriteRowToRAM:
000013D6 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013D8 534D                           subq.w  #1,a5
000013DA 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013DC 66AC                           bne.s   NemDec3         ; if not, branch
000013DE 4E75                           rts
000013E0                            ; ---------------------------------------------------------------------------
000013E0                             
000013E0                            NemDec_WriteRowToRAM_XOR:
000013E0 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013E2 28C2                           move.l  d2,(a4)+        ; and write the result
000013E4 534D                           subq.w  #1,a5
000013E6 380D                           move.w  a5,d4
000013E8 66A0                           bne.s   NemDec3
000013EA 4E75                           rts
000013EC                             
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013EC                            ; ---------------------------------------------------------------------------
000013EC                             
000013EC                            NemDec4:
000013EC 1018                           move.b  (a0)+,d0        ; read first byte
000013EE                             
000013EE                            @ChkEnd:
000013EE 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013F2 6600                           bne.s   @NewPalIndex        ; if not, branch
000013F4 4E75                           rts
000013F6                            ; ---------------------------------------------------------------------------
000013F6                             
000013F6                            @NewPalIndex:
000013F6 3E00                           move.w  d0,d7
000013F8                             
000013F8                            @ItemLoop:
000013F8 1018                           move.b  (a0)+,d0        ; read next byte
000013FA 6BF2                           bmi.s   @ChkEnd         ; ~~
000013FC 1200                           move.b  d0,d1
000013FE 0247 000F                      andi.w  #$F,d7          ; get palette index
00001402 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001406 8E41                           or.w    d1,d7           ; combine the two
00001408 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
0000140C 1200                           move.b  d0,d1
0000140E E149                           lsl.w   #8,d1
00001410 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
00001412 7208                           moveq   #8,d1
00001414 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001416 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001418 1018                           move.b  (a0)+,d0        ; get code
0000141A D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
0000141C 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
00001420 60D6                           bra.s   @ItemLoop       ; repeat
00001422                            ; ---------------------------------------------------------------------------
00001422                             
00001422                            @ItemShortCode:
00001422 1018                           move.b  (a0)+,d0        ; get code
00001424 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001426 D040                           add.w   d0,d0           ; get index into code table
00001428 7A01                           moveq   #1,d5
0000142A E36D                           lsl.w   d1,d5
0000142C 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000142E 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
00001432                             
00001432                            @ItemShortCodeLoop:
00001432 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001434 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001438 60BE                           bra.s   @ItemLoop
0000143A                            
0000143A                            ; ===============================================================
0000143A                            ; ---------------------------------------------------------------
0000143A                            ; uncompressed art to VRAM loader
0000143A                            ; ---------------------------------------------------------------
0000143A                            ; INPUT:
0000143A                            ;       a0      - Source Offset
0000143A                            ;   d0  - length in tiles
0000143A                            ; ---------------------------------------------------------------
0000143A                            LoadUncArt:
0000143A 46FC 2700                          move    #$2700,sr   ; disable interrupts
0000143E 4DF9 00C0 0000                     lea $C00000.l,a6    ; get VDP data port
00001444                             
00001444                            LoadArt_Loop:
00001444 2C98                               move.l  (a0)+,(a6)  ; transfer 4 bytes
00001446 2C98                               move.l  (a0)+,(a6)  ; transfer 4 more bytes
00001448 2C98                               move.l  (a0)+,(a6)  ; and so on and so forth
0000144A 2C98                               move.l  (a0)+,(a6)  ;
0000144C 2C98                               move.l  (a0)+,(a6)  ;
0000144E 2C98                               move.l  (a0)+,(a6)  ;
00001450 2C98                               move.l  (a0)+,(a6)  ; in total transfer 32 bytes
00001452 2C98                               move.l  (a0)+,(a6)  ; which is 1 full tile
00001454                             
00001454 51C8 FFEE                          dbf d0, LoadArt_Loop; loop until d0 = 0
00001458 46FC 2300                          move    #$2300,sr   ; enable interrupts
0000145C 4E75                               rts	
0000145E                            
0000145E                            ; ---------------------------------------------------------------------------
0000145E                            ; Subroutine to	load pattern load cues
0000145E                            ; ---------------------------------------------------------------------------
0000145E                            
0000145E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000145E                            
0000145E                            
0000145E                            LoadPLC:
0000145E 48E7 0060                  		movem.l	a1-a2,-(sp)
00001462 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001468 D040                       		add.w	d0,d0
0000146A 3031 0000                  		move.w	(a1,d0.w),d0
0000146E 43F1 0000                  		lea	(a1,d0.w),a1
00001472 45F8 F680                  		lea	($FFFFF680).w,a2
00001476                            
00001476                            loc_1598:
00001476 4A92                       		tst.l	(a2)
00001478 6700                       		beq.s	loc_15A0
0000147A 5C4A                       		addq.w	#6,a2
0000147C 60F8                       		bra.s	loc_1598
0000147E                            ; ===========================================================================
0000147E                            
0000147E                            loc_15A0:				; XREF: LoadPLC
0000147E 3019                       		move.w	(a1)+,d0
00001480 6B00                       		bmi.s	loc_15AC
00001482                            
00001482                            loc_15A4:
00001482 24D9                       		move.l	(a1)+,(a2)+
00001484 34D9                       		move.w	(a1)+,(a2)+
00001486 51C8 FFFA                  		dbf	d0,loc_15A4
0000148A                            
0000148A                            loc_15AC:
0000148A 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000148E 4E75                       		rts	
00001490                            ; End of function LoadPLC
00001490                            
00001490                            
00001490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001490                            
00001490                            
00001490                            LoadPLC2:
00001490 48E7 0060                  		movem.l	a1-a2,-(sp)
00001494 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000149A D040                       		add.w	d0,d0
0000149C 3031 0000                  		move.w	(a1,d0.w),d0
000014A0 43F1 0000                  		lea	(a1,d0.w),a1
000014A4 6100                       		bsr.s	ClearPLC
000014A6 45F8 F680                  		lea	($FFFFF680).w,a2
000014AA 3019                       		move.w	(a1)+,d0
000014AC 6B00                       		bmi.s	loc_15D8
000014AE                            
000014AE                            loc_15D0:
000014AE 24D9                       		move.l	(a1)+,(a2)+
000014B0 34D9                       		move.w	(a1)+,(a2)+
000014B2 51C8 FFFA                  		dbf	d0,loc_15D0
000014B6                            
000014B6                            loc_15D8:
000014B6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000014BA 4E75                       		rts	
000014BC                            ; End of function LoadPLC2
000014BC                            
000014BC                            ; ---------------------------------------------------------------------------
000014BC                            ; Subroutine to	clear the pattern load cues
000014BC                            ; ---------------------------------------------------------------------------
000014BC                            
000014BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014BC                            
000014BC                            
000014BC                            ClearPLC:				; XREF: LoadPLC2
000014BC 45F8 F680                  		lea	($FFFFF680).w,a2
000014C0 701F                       		moveq	#$1F,d0
000014C2                            
000014C2                            ClearPLC_Loop:
000014C2 429A                       		clr.l	(a2)+
000014C4 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000014C8 4E75                       		rts	
000014CA                            ; End of function ClearPLC
000014CA                            
000014CA                            ; ---------------------------------------------------------------------------
000014CA                            ; Subroutine to	use graphics listed in a pattern load cue
000014CA                            ; ---------------------------------------------------------------------------
000014CA                            
000014CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014CA                            
000014CA                            
000014CA                            RunPLC_RAM:				; XREF: Pal_FadeTo
000014CA 4AB8 F680                  		tst.l	($FFFFF680).w
000014CE 6700                       		beq.s	locret_1640
000014D0 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000014D4 6600                       		bne.s	locret_1640
000014D6 2078 F680                  		movea.l	($FFFFF680).w,a0
000014DA 47F9 0000 13C0             		lea	(loc_1502).l,a3
000014E0 43F8 AA00                  		lea	($FFFFAA00).w,a1
000014E4 3418                       		move.w	(a0)+,d2
000014E6 6A00                       		bpl.s	loc_160E
000014E8 D6FC 000A                  		adda.w	#$A,a3
000014EC                            
000014EC                            loc_160E:
000014EC 0242 7FFF                  		andi.w	#$7FFF,d2
000014F0 6100 FEFA                  		bsr.w	NemDec4
000014F4 1A18                       		move.b	(a0)+,d5
000014F6 E145                       		asl.w	#8,d5
000014F8 1A18                       		move.b	(a0)+,d5
000014FA 7C10                       		moveq	#$10,d6
000014FC 7000                       		moveq	#0,d0
000014FE 21C8 F680                  		move.l	a0,($FFFFF680).w
00001502 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001506 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000150A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000150E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001512 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001516 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000151A 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000151E                            		
0000151E                            locret_1640:
0000151E 4E75                       		rts	
00001520                            ; End of function RunPLC_RAM
00001520                            
00001520                            
00001520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001520                            
00001520                            
00001520                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001520 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001524 6700 0000                  		beq.w	locret_16DA
00001528 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000152E 7000                       		moveq	#0,d0
00001530 3038 F684                  		move.w	($FFFFF684).w,d0
00001534 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000153A 6000                       		bra.s	loc_1676
0000153C                            ; End of function sub_1642
0000153C                            
0000153C                            
0000153C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000153C                            
0000153C                            
0000153C                            sub_165E:				; XREF: Demo_Time
0000153C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001540 6700                       		beq.s	locret_16DA
00001542 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001548 7000                       		moveq	#0,d0
0000154A 3038 F684                  		move.w	($FFFFF684).w,d0
0000154E 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001554                            
00001554                            loc_1676:				; XREF: sub_1642
00001554 49F9 00C0 0004             		lea	($C00004).l,a4
0000155A E588                       		lsl.l	#2,d0
0000155C E448                       		lsr.w	#2,d0
0000155E 0040 4000                  		ori.w	#$4000,d0
00001562 4840                       		swap	d0
00001564 2880                       		move.l	d0,(a4)
00001566 594C                       		subq.w	#4,a4
00001568 2078 F680                  		movea.l	($FFFFF680).w,a0
0000156C 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001570 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001574 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001578 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000157C 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001580 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001584 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001588                            
00001588                            loc_16AA:				; XREF: sub_165E
00001588 3A7C 0008                  		movea.w	#8,a5
0000158C 6100 FDFC                  		bsr.w	NemDec3
00001590 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001594 6700                       		beq.s	loc_16DC
00001596 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000159A 66EC                       		bne.s	loc_16AA
0000159C 21C8 F680                  		move.l	a0,($FFFFF680).w
000015A0 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000015A4 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000015A8 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000015AC 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000015B0 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000015B4 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000015B8                            
000015B8                            locret_16DA:				; XREF: sub_1642
000015B8 4E75                       		rts	
000015BA                            ; ===========================================================================
000015BA                            
000015BA                            loc_16DC:				; XREF: sub_165E
000015BA 41F8 F680                  		lea	($FFFFF680).w,a0
000015BE 7015                       		moveq	#$15,d0
000015C0                            
000015C0                            loc_16E2:				; XREF: sub_165E
000015C0 20E8 0006                  		move.l	6(a0),(a0)+
000015C4 51C8 FFFA                  		dbf	d0,loc_16E2
000015C8 4E75                       		rts	
000015CA                            ; End of function sub_165E
000015CA                            
000015CA                            ; ---------------------------------------------------------------------------
000015CA                            ; Subroutine to	execute	the pattern load cue
000015CA                            ; ---------------------------------------------------------------------------
000015CA                            
000015CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CA                            
000015CA                            
000015CA                            RunPLC_ROM:
000015CA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000015D0 D040                       		add.w	d0,d0
000015D2 3031 0000                  		move.w	(a1,d0.w),d0
000015D6 43F1 0000                  		lea	(a1,d0.w),a1
000015DA 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000015DC                            
000015DC                            RunPLC_Loop:
000015DC 2059                       		movea.l	(a1)+,a0	; get art pointer
000015DE 7000                       		moveq	#0,d0
000015E0 3019                       		move.w	(a1)+,d0	; get VRAM address
000015E2 E588                       		lsl.l	#2,d0		; divide address by $20
000015E4 E448                       		lsr.w	#2,d0
000015E6 0040 4000                  		ori.w	#$4000,d0
000015EA 4840                       		swap	d0
000015EC 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000015F2 6100 FD1E                  		bsr.w	NemDec		; decompress
000015F6 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000015FA 4E75                       		rts	
000015FC                            ; End of function RunPLC_ROM
000015FC                            
000015FC                            ; ---------------------------------------------------------------------------
000015FC                            ; Enigma decompression algorithm
000015FC                            ; ---------------------------------------------------------------------------
000015FC                            
000015FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015FC                            
000015FC                            
000015FC                            EniDec:
000015FC 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001600 3640                       		movea.w	d0,a3
00001602 1018                       		move.b	(a0)+,d0
00001604 4880                       		ext.w	d0
00001606 3A40                       		movea.w	d0,a5
00001608 1818                       		move.b	(a0)+,d4
0000160A E70C                       		lsl.b	#3,d4
0000160C 3458                       		movea.w	(a0)+,a2
0000160E D4CB                       		adda.w	a3,a2
00001610 3858                       		movea.w	(a0)+,a4
00001612 D8CB                       		adda.w	a3,a4
00001614 1A18                       		move.b	(a0)+,d5
00001616 E145                       		asl.w	#8,d5
00001618 1A18                       		move.b	(a0)+,d5
0000161A 7C10                       		moveq	#$10,d6
0000161C                            
0000161C                            loc_173E:				; XREF: loc_1768
0000161C 7007                       		moveq	#7,d0
0000161E 3E06                       		move.w	d6,d7
00001620 9E40                       		sub.w	d0,d7
00001622 3205                       		move.w	d5,d1
00001624 EE69                       		lsr.w	d7,d1
00001626 0241 007F                  		andi.w	#$7F,d1
0000162A 3401                       		move.w	d1,d2
0000162C 0C41 0040                  		cmpi.w	#$40,d1
00001630 6400                       		bcc.s	loc_1758
00001632 7006                       		moveq	#6,d0
00001634 E24A                       		lsr.w	#1,d2
00001636                            
00001636                            loc_1758:
00001636 6100 0000                  		bsr.w	sub_188C
0000163A 0242 000F                  		andi.w	#$F,d2
0000163E E849                       		lsr.w	#4,d1
00001640 D241                       		add.w	d1,d1
00001642 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001646                            ; End of function EniDec
00001646                            
00001646                            ; ===========================================================================
00001646                            
00001646                            loc_1768:				; XREF: loc_17B4
00001646 32CA                       		move.w	a2,(a1)+
00001648 524A                       		addq.w	#1,a2
0000164A 51CA FFFA                  		dbf	d2,loc_1768
0000164E 60CC                       		bra.s	loc_173E
00001650                            ; ===========================================================================
00001650                            
00001650                            loc_1772:				; XREF: loc_17B4
00001650 32CC                       		move.w	a4,(a1)+
00001652 51CA FFFC                  		dbf	d2,loc_1772
00001656 60C4                       		bra.s	loc_173E
00001658                            ; ===========================================================================
00001658                            
00001658                            loc_177A:				; XREF: loc_17B4
00001658 6100 0000                  		bsr.w	loc_17DC
0000165C                            
0000165C                            loc_177E:
0000165C 32C1                       		move.w	d1,(a1)+
0000165E 51CA FFFC                  		dbf	d2,loc_177E
00001662 60B8                       		bra.s	loc_173E
00001664                            ; ===========================================================================
00001664                            
00001664                            loc_1786:				; XREF: loc_17B4
00001664 6100 0000                  		bsr.w	loc_17DC
00001668                            
00001668                            loc_178A:
00001668 32C1                       		move.w	d1,(a1)+
0000166A 5241                       		addq.w	#1,d1
0000166C 51CA FFFA                  		dbf	d2,loc_178A
00001670 60AA                       		bra.s	loc_173E
00001672                            ; ===========================================================================
00001672                            
00001672                            loc_1794:				; XREF: loc_17B4
00001672 6100 0000                  		bsr.w	loc_17DC
00001676                            
00001676                            loc_1798:
00001676 32C1                       		move.w	d1,(a1)+
00001678 5341                       		subq.w	#1,d1
0000167A 51CA FFFA                  		dbf	d2,loc_1798
0000167E 609C                       		bra.s	loc_173E
00001680                            ; ===========================================================================
00001680                            
00001680                            loc_17A2:				; XREF: loc_17B4
00001680 0C42 000F                  		cmpi.w	#$F,d2
00001684 6700                       		beq.s	loc_17C4
00001686                            
00001686                            loc_17A8:
00001686 6100 0000                  		bsr.w	loc_17DC
0000168A 32C1                       		move.w	d1,(a1)+
0000168C 51CA FFF8                  		dbf	d2,loc_17A8
00001690 608A                       		bra.s	loc_173E
00001692                            ; ===========================================================================
00001692                            
00001692                            loc_17B4:				; XREF: EniDec
00001692 60B2                       		bra.s	loc_1768
00001694                            ; ===========================================================================
00001694 60B0                       		bra.s	loc_1768
00001696                            ; ===========================================================================
00001696 60B8                       		bra.s	loc_1772
00001698                            ; ===========================================================================
00001698 60B6                       		bra.s	loc_1772
0000169A                            ; ===========================================================================
0000169A 60BC                       		bra.s	loc_177A
0000169C                            ; ===========================================================================
0000169C 60C6                       		bra.s	loc_1786
0000169E                            ; ===========================================================================
0000169E 60D2                       		bra.s	loc_1794
000016A0                            ; ===========================================================================
000016A0 60DE                       		bra.s	loc_17A2
000016A2                            ; ===========================================================================
000016A2                            
000016A2                            loc_17C4:				; XREF: loc_17A2
000016A2 5348                       		subq.w	#1,a0
000016A4 0C46 0010                  		cmpi.w	#$10,d6
000016A8 6600                       		bne.s	loc_17CE
000016AA 5348                       		subq.w	#1,a0
000016AC                            
000016AC                            loc_17CE:
000016AC 3008                       		move.w	a0,d0
000016AE E248                       		lsr.w	#1,d0
000016B0 6400                       		bcc.s	loc_17D6
000016B2 5248                       		addq.w	#1,a0
000016B4                            
000016B4                            loc_17D6:
000016B4 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000016B8 4E75                       		rts	
000016BA                            ; ===========================================================================
000016BA                            
000016BA                            loc_17DC:				; XREF: loc_17A2
000016BA 360B                       		move.w	a3,d3
000016BC 1204                       		move.b	d4,d1
000016BE D201                       		add.b	d1,d1
000016C0 6400                       		bcc.s	loc_17EE
000016C2 5346                       		subq.w	#1,d6
000016C4 0D05                       		btst	d6,d5
000016C6 6700                       		beq.s	loc_17EE
000016C8 0043 8000                  		ori.w	#-$8000,d3
000016CC                            
000016CC                            loc_17EE:
000016CC D201                       		add.b	d1,d1
000016CE 6400                       		bcc.s	loc_17FC
000016D0 5346                       		subq.w	#1,d6
000016D2 0D05                       		btst	d6,d5
000016D4 6700                       		beq.s	loc_17FC
000016D6 0643 4000                  		addi.w	#$4000,d3
000016DA                            
000016DA                            loc_17FC:
000016DA D201                       		add.b	d1,d1
000016DC 6400                       		bcc.s	loc_180A
000016DE 5346                       		subq.w	#1,d6
000016E0 0D05                       		btst	d6,d5
000016E2 6700                       		beq.s	loc_180A
000016E4 0643 2000                  		addi.w	#$2000,d3
000016E8                            
000016E8                            loc_180A:
000016E8 D201                       		add.b	d1,d1
000016EA 6400                       		bcc.s	loc_1818
000016EC 5346                       		subq.w	#1,d6
000016EE 0D05                       		btst	d6,d5
000016F0 6700                       		beq.s	loc_1818
000016F2 0043 1000                  		ori.w	#$1000,d3
000016F6                            
000016F6                            loc_1818:
000016F6 D201                       		add.b	d1,d1
000016F8 6400                       		bcc.s	loc_1826
000016FA 5346                       		subq.w	#1,d6
000016FC 0D05                       		btst	d6,d5
000016FE 6700                       		beq.s	loc_1826
00001700 0043 0800                  		ori.w	#$800,d3
00001704                            
00001704                            loc_1826:
00001704 3205                       		move.w	d5,d1
00001706 3E06                       		move.w	d6,d7
00001708 9E4D                       		sub.w	a5,d7
0000170A 6400                       		bcc.s	loc_1856
0000170C 3C07                       		move.w	d7,d6
0000170E 0646 0010                  		addi.w	#$10,d6
00001712 4447                       		neg.w	d7
00001714 EF69                       		lsl.w	d7,d1
00001716 1A10                       		move.b	(a0),d5
00001718 EF3D                       		rol.b	d7,d5
0000171A DE47                       		add.w	d7,d7
0000171C CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001720 D245                       		add.w	d5,d1
00001722                            
00001722                            loc_1844:				; XREF: loc_1868
00001722 300D                       		move.w	a5,d0
00001724 D040                       		add.w	d0,d0
00001726 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000172A D243                       		add.w	d3,d1
0000172C 1A18                       		move.b	(a0)+,d5
0000172E E14D                       		lsl.w	#8,d5
00001730 1A18                       		move.b	(a0)+,d5
00001732 4E75                       		rts	
00001734                            ; ===========================================================================
00001734                            
00001734                            loc_1856:				; XREF: loc_1826
00001734 6700                       		beq.s	loc_1868
00001736 EE69                       		lsr.w	d7,d1
00001738 300D                       		move.w	a5,d0
0000173A D040                       		add.w	d0,d0
0000173C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001740 D243                       		add.w	d3,d1
00001742 300D                       		move.w	a5,d0
00001744 6000                       		bra.s	sub_188C
00001746                            ; ===========================================================================
00001746                            
00001746                            loc_1868:				; XREF: loc_1856
00001746 7C10                       		moveq	#$10,d6
00001748                            
00001748                            loc_186A:
00001748 60D8                       		bra.s	loc_1844
0000174A                            ; ===========================================================================
0000174A 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001760 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000176A                            
0000176A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176A                            
0000176A                            
0000176A                            sub_188C:				; XREF: EniDec
0000176A 9C40                       		sub.w	d0,d6
0000176C 0C46 0009                  		cmpi.w	#9,d6
00001770 6400                       		bcc.s	locret_189A
00001772 5046                       		addq.w	#8,d6
00001774 E145                       		asl.w	#8,d5
00001776 1A18                       		move.b	(a0)+,d5
00001778                            
00001778                            locret_189A:
00001778 4E75                       		rts	
0000177A                            ; End of function sub_188C
0000177A                            
0000177A                            ; ===========================================================================
0000177A                            ; ---------------------------------------------------------------------------
0000177A                            ; Kosinski decompression routine
0000177A                            ;
0000177A                            ; Created by vladikcomper
0000177A                            ; Special thanks to flamewing and MarkeyJester
0000177A                            ; ---------------------------------------------------------------------------
0000177A                             
0000177A                            _Kos_RunBitStream macro
0000177A                                dbf d2,@skip\@
0000177A                                moveq   #7,d2
0000177A                                move.b  d1,d0
0000177A                                swap    d3
0000177A                                bpl.s   @skip\@
0000177A                                move.b  (a0)+,d0            ; get desc. bitfield
0000177A                                move.b  (a0)+,d1            ;
0000177A                                move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
0000177A                                move.b  (a4,d1.w),d1            ;
0000177A                            @skip\@
0000177A                                endm
0000177A                            ; ---------------------------------------------------------------------------
0000177A                             
0000177A                            KosDec:
0000177A 7E07                           moveq   #7,d7
0000177C 7000                           moveq   #0,d0
0000177E 7200                           moveq   #0,d1
00001780 49FA 0000                      lea KosDec_ByteMap(pc),a4
00001784 1018                           move.b  (a0)+,d0            ; get desc field low-byte
00001786 1218                           move.b  (a0)+,d1            ; get desc field hi-byte
00001788 1034 0000                      move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
0000178C 1234 1000                      move.b  (a4,d1.w),d1            ;
00001790 7407                           moveq   #7,d2               ; set repeat count to 8
00001792 76FF                           moveq   #-1,d3              ; d3 will be desc field switcher
00001794 4243                           clr.w   d3              ;
00001796 6000                           bra.s   KosDec_FetchNewCode
00001798                             
00001798                            KosDec_FetchCodeLoop:
00001798                                ; code 1 (Uncompressed byte)
00001798 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017B0 12D8                           move.b  (a0)+,(a1)+
000017B2                             
000017B2                            KosDec_FetchNewCode:
000017B2 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017B4 65E2                           bcs.s   KosDec_FetchCodeLoop        ; if code = 0, branch
000017B6                             
000017B6                                ; codes 00 and 01
000017B6 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017CE 7800                           moveq   #0,d4               ; d4 will contain copy count
000017D0 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017D2 6500                           bcs.s   KosDec_Code_01
000017D4                             
000017D4                                ; code 00 (Dictionary ref. short)
000017D4 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017EC D000                           add.b   d0,d0               ; get a bit from the bitstream
000017EE D944                           addx.w  d4,d4
000017F0 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001808 D000                           add.b   d0,d0               ; get a bit from the bitstream
0000180A D944                           addx.w  d4,d4
0000180C 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001824 7AFF                           moveq   #-1,d5
00001826 1A18                           move.b  (a0)+,d5            ; d5 = displacement
00001828                             
00001828                            KosDec_StreamCopy:
00001828 47F1 5000                      lea (a1,d5),a3
0000182C 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
0000182E                             
0000182E                            KosDec_copy:
0000182E 12DB                           move.b  (a3)+,(a1)+
00001830 51CC FFFC                      dbf d4,KosDec_copy
00001834 6000 FF7C                      bra.w   KosDec_FetchNewCode
00001838                            ; ---------------------------------------------------------------------------
00001838                            KosDec_Code_01:
00001838                                ; code 01 (Dictionary ref. long / special)
00001838 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001850 1C18                           move.b  (a0)+,d6            ; d6 = %LLLLLLLL
00001852 1818                           move.b  (a0)+,d4            ; d4 = %HHHHHCCC
00001854 7AFF                           moveq   #-1,d5
00001856 1A04                           move.b  d4,d5               ; d5 = %11111111 HHHHHCCC
00001858 EB4D                           lsl.w   #5,d5               ; d5 = %111HHHHH CCC00000
0000185A 1A06                           move.b  d6,d5               ; d5 = %111HHHHH LLLLLLLL
0000185C C847                           and.w   d7,d4               ; d4 = %00000CCC
0000185E 66C8                           bne.s   KosDec_StreamCopy       ; if CCC=0, branch
00001860                             
00001860                                ; special mode (extended counter)
00001860 1818                           move.b  (a0)+,d4            ; read cnt
00001862 6700                           beq.s   KosDec_Quit         ; if cnt=0, quit decompression
00001864 5304                           subq.b  #1,d4
00001866 6700 FF4A                      beq.w   KosDec_FetchNewCode     ; if cnt=1, fetch a new code
0000186A                             
0000186A 47F1 5000                      lea (a1,d5),a3
0000186E 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
00001870 3C04                           move.w  d4,d6
00001872 4646                           not.w   d6
00001874 CC47                           and.w   d7,d6
00001876 DC46                           add.w   d6,d6
00001878 E64C                           lsr.w   #3,d4
0000187A 4EFB 6000                      jmp KosDec_largecopy(pc,d6.w)
0000187E                             
0000187E                            KosDec_largecopy:
0000187E                                rept 8
0000187E                                move.b  (a3)+,(a1)+
0000187E 12DB 12DB 12DB 12DB 12DB+      endr
0000188E 51CC FFEE                      dbf d4,KosDec_largecopy
00001892 6000 FF1E                      bra.w   KosDec_FetchNewCode
00001896                             
00001896                            KosDec_Quit:
00001896 4E75                           rts
00001898                             
00001898                            ; ---------------------------------------------------------------------------
00001898                            ; A look-up table to invert bits order in desc. field bytes
00001898                            ; ---------------------------------------------------------------------------
00001898                             
00001898                            KosDec_ByteMap:
00001898 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
000018A8 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
000018B8 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
000018C8 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
000018D8 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
000018E8 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
000018F8 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001908 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001918 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001928 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001938 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001948 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001958 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001968 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001978 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001988 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001998                             
00001998                            ; ===========================================================================
00001998                            
00001998                            ; ---------------------------------------------------------------------------
00001998                            ; Pallet cycling routine loading subroutine
00001998                            ; ---------------------------------------------------------------------------
00001998                            
00001998                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001998                            
00001998                            
00001998                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001998 7400                       		moveq	#0,d2
0000199A 7000                       		moveq	#0,d0
0000199C 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
000019A0 D040                       		add.w	d0,d0		; multiply by 2
000019A2 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
000019A6 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
000019AA                            ; End of function PalCycle_Load
000019AA                            
000019AA                            ; ===========================================================================
000019AA                            ; ---------------------------------------------------------------------------
000019AA                            ; Pallet cycling routines
000019AA                            ; ---------------------------------------------------------------------------
000019AA 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
000019AC 0000                       		dc.w PalCycle_LZ-PalCycle
000019AE 0000                       		dc.w PalCycle_MZ-PalCycle
000019B0 0000                       		dc.w PalCycle_SLZ-PalCycle
000019B2 0000                       		dc.w PalCycle_SYZ-PalCycle
000019B4 0000                       		dc.w PalCycle_SBZ-PalCycle
000019B6 0000                       		dc.w PalCycle_GHZ-PalCycle
000019B8                            
000019B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019B8                            
000019B8                            
000019B8                            PalCycle_Title:				; XREF: TitleScreen
000019B8 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
000019BE 6000                       		bra.s	loc_196A
000019C0                            ; ===========================================================================
000019C0                            
000019C0                            PalCycle_GHZ:				; XREF: PalCycle
000019C0 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
000019C6                            
000019C6                            loc_196A:				; XREF: PalCycle_Title
000019C6 5378 F634                  		subq.w	#1,($FFFFF634).w
000019CA 6A00                       		bpl.s	locret_1990
000019CC 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000019D2 3038 F632                  		move.w	($FFFFF632).w,d0
000019D6 5278 F632                  		addq.w	#1,($FFFFF632).w
000019DA 0240 0003                  		andi.w	#3,d0
000019DE E748                       		lsl.w	#3,d0
000019E0 43F8 FB50                  		lea	($FFFFFB50).w,a1
000019E4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019E8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019EC                            
000019EC                            locret_1990:
000019EC 4E75                       		rts	
000019EE                            ; End of function PalCycle_Title
000019EE                            
000019EE                            
000019EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019EE                            
000019EE                            
000019EE                            PalCycle_LZ:				; XREF: PalCycle
000019EE 5378 F634                  		subq.w	#1,($FFFFF634).w
000019F2 6A00                       		bpl.s	loc_19D8
000019F4 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000019FA 3038 F632                  		move.w	($FFFFF632).w,d0
000019FE 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A02 0240 0003                  		andi.w	#3,d0
00001A06 E748                       		lsl.w	#3,d0
00001A08 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001A0E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001A14 6600                       		bne.s	loc_19C0
00001A16 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001A1C                            
00001A1C                            loc_19C0:
00001A1C 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A24 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A28 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001A2C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A30 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A34                            
00001A34                            loc_19D8:
00001A34 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001A38 0240 0007                  		andi.w	#7,d0
00001A3C 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001A40 6700                       		beq.s	locret_1A3A
00001A42 7201                       		moveq	#1,d1
00001A44 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001A48 6700                       		beq.s	loc_19F0
00001A4A 4441                       		neg.w	d1
00001A4C                            
00001A4C                            loc_19F0:
00001A4C 3038 F650                  		move.w	($FFFFF650).w,d0
00001A50 0240 0003                  		andi.w	#3,d0
00001A54 D041                       		add.w	d1,d0
00001A56 0C40 0003                  		cmpi.w	#3,d0
00001A5A 6500                       		bcs.s	loc_1A0A
00001A5C 3200                       		move.w	d0,d1
00001A5E 7000                       		moveq	#0,d0
00001A60 4A41                       		tst.w	d1
00001A62 6A00                       		bpl.s	loc_1A0A
00001A64 7002                       		moveq	#2,d0
00001A66                            
00001A66                            loc_1A0A:
00001A66 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A6A D040                       		add.w	d0,d0
00001A6C 3200                       		move.w	d0,d1
00001A6E D040                       		add.w	d0,d0
00001A70 D041                       		add.w	d1,d0
00001A72 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A78 43F8 FB78                  		lea	($FFFFFB78).w,a1
00001A7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A84 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A8A 43F8 FAF8                  		lea	($FFFFFAF8).w,a1
00001A8E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A92 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A96                            
00001A96                            locret_1A3A:
00001A96 4E75                       		rts	
00001A98                            ; End of function PalCycle_LZ
00001A98                            
00001A98                            ; ===========================================================================
00001A98 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001AA0                            ; ===========================================================================
00001AA0                            
00001AA0                            PalCycle_MZ:				; XREF: PalCycle
00001AA0 4E75                       		rts	
00001AA2                            
00001AA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA2                            
00001AA2                            
00001AA2                            PalCycle_SLZ:				; XREF: PalCycle
00001AA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AA6 6A00                       		bpl.s	locret_1A80
00001AA8 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001AAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001AB2 5240                       		addq.w	#1,d0
00001AB4 0C40 0006                  		cmpi.w	#6,d0
00001AB8 6500                       		bcs.s	loc_1A60
00001ABA 7000                       		moveq	#0,d0
00001ABC                            
00001ABC                            loc_1A60:
00001ABC 31C0 F632                  		move.w	d0,($FFFFF632).w
00001AC0 3200                       		move.w	d0,d1
00001AC2 D241                       		add.w	d1,d1
00001AC4 D041                       		add.w	d1,d0
00001AC6 D040                       		add.w	d0,d0
00001AC8 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001ACE 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001AD2 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001AD6 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001ADC                            
00001ADC                            locret_1A80:
00001ADC 4E75                       		rts	
00001ADE                            ; End of function PalCycle_SLZ
00001ADE                            
00001ADE                            
00001ADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ADE                            
00001ADE                            
00001ADE                            PalCycle_SYZ:				; XREF: PalCycle
00001ADE 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AE2 6A00                       		bpl.s	locret_1AC6
00001AE4 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AEA 3038 F632                  		move.w	($FFFFF632).w,d0
00001AEE 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AF2 0240 0003                  		andi.w	#3,d0
00001AF6 E548                       		lsl.w	#2,d0
00001AF8 3200                       		move.w	d0,d1
00001AFA D040                       		add.w	d0,d0
00001AFC 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001B02 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001B06 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B0A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B0E 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001B14 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001B18 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001B1C 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001B22                            
00001B22                            locret_1AC6:
00001B22 4E75                       		rts	
00001B24                            ; End of function PalCycle_SYZ
00001B24                            
00001B24                            
00001B24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B24                            
00001B24                            
00001B24                            PalCycle_SBZ:				; XREF: PalCycle
00001B24 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001B2A 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B2E 6700                       		beq.s	loc_1ADA
00001B30 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B36                            
00001B36                            loc_1ADA:
00001B36 43F8 F650                  		lea	($FFFFF650).w,a1
00001B3A 321A                       		move.w	(a2)+,d1
00001B3C                            
00001B3C                            loc_1AE0:
00001B3C 5311                       		subq.b	#1,(a1)
00001B3E 6B00                       		bmi.s	loc_1AEA
00001B40 5489                       		addq.l	#2,a1
00001B42 5C8A                       		addq.l	#6,a2
00001B44 6000                       		bra.s	loc_1B06
00001B46                            ; ===========================================================================
00001B46                            
00001B46                            loc_1AEA:				; XREF: PalCycle_SBZ
00001B46 12DA                       		move.b	(a2)+,(a1)+
00001B48 1011                       		move.b	(a1),d0
00001B4A 5200                       		addq.b	#1,d0
00001B4C B01A                       		cmp.b	(a2)+,d0
00001B4E 6500                       		bcs.s	loc_1AF6
00001B50 7000                       		moveq	#0,d0
00001B52                            
00001B52                            loc_1AF6:
00001B52 12C0                       		move.b	d0,(a1)+
00001B54 0240 000F                  		andi.w	#$F,d0
00001B58 D040                       		add.w	d0,d0
00001B5A 305A                       		movea.w	(a2)+,a0
00001B5C 365A                       		movea.w	(a2)+,a3
00001B5E 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B62                            
00001B62                            loc_1B06:				; XREF: PalCycle_SBZ
00001B62 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B6A 6A00                       		bpl.s	locret_1B64
00001B6C 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B72 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B78 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B7C 6700                       		beq.s	loc_1B2E
00001B7E 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B84 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B8A                            
00001B8A                            loc_1B2E:
00001B8A 72FF                       		moveq	#-1,d1
00001B8C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B90 6700                       		beq.s	loc_1B38
00001B92 4441                       		neg.w	d1
00001B94                            
00001B94                            loc_1B38:
00001B94 3038 F632                  		move.w	($FFFFF632).w,d0
00001B98 0240 0003                  		andi.w	#3,d0
00001B9C D041                       		add.w	d1,d0
00001B9E 0C40 0003                  		cmpi.w	#3,d0
00001BA2 6500                       		bcs.s	loc_1B52
00001BA4 3200                       		move.w	d0,d1
00001BA6 7000                       		moveq	#0,d0
00001BA8 4A41                       		tst.w	d1
00001BAA 6A00                       		bpl.s	loc_1B52
00001BAC 7002                       		moveq	#2,d0
00001BAE                            
00001BAE                            loc_1B52:
00001BAE 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BB2 D040                       		add.w	d0,d0
00001BB4 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001BB8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BBC 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BC0                            
00001BC0                            locret_1B64:
00001BC0 4E75                       		rts	
00001BC2                            ; End of function PalCycle_SBZ
00001BC2                            
00001BC2                            ; ===========================================================================
00001BC2                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001BE2                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001C02                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001C22                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001C34                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001C46                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001CAE                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001CD2                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001CF2                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001D02                            
00001D02                            Pal_SBZCycList:
00001D02                            	include "_inc\SBZ pallet script 1.asm"
00001D02                            ; ---------------------------------------------------------------------------
00001D02                            ; Scrap Brain Zone 1 pallet cycling script
00001D02                            ; ---------------------------------------------------------------------------
00001D02 0008                       	dc.w 8			; number of entries - 1
00001D04 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001D06 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001D08 FB50                       	dc.w $FB50		; RAM address
00001D0A 0D08                       	dc.b $D, 8
00001D0C 0000                       	dc.w Pal_SBZCyc2
00001D0E FB52                       	dc.w $FB52
00001D10 0E08                       	dc.b $E, 8
00001D12 0000                       	dc.w Pal_SBZCyc3
00001D14 FB6E                       	dc.w $FB6E
00001D16 0B08                       	dc.b $B, 8
00001D18 0000                       	dc.w Pal_SBZCyc5
00001D1A FB70                       	dc.w $FB70
00001D1C 0708                       	dc.b 7,	8
00001D1E 0000                       	dc.w Pal_SBZCyc6
00001D20 FB72                       	dc.w $FB72
00001D22 1C10                       	dc.b $1C, $10
00001D24 0000                       	dc.w Pal_SBZCyc7
00001D26 FB7E                       	dc.w $FB7E
00001D28 0303                       	dc.b 3,	3
00001D2A 0000                       	dc.w Pal_SBZCyc8
00001D2C FB78                       	dc.w $FB78
00001D2E 0303                       	dc.b 3,	3
00001D30 0000                       	dc.w Pal_SBZCyc8+2
00001D32 FB7A                       	dc.w $FB7A
00001D34 0303                       	dc.b 3,	3
00001D36 0000                       	dc.w Pal_SBZCyc8+4
00001D38 FB7C                       	dc.w $FB7C
00001D3A                            	even
00001D3A                            	even
00001D3A                            
00001D3A                            Pal_SBZCycList2:
00001D3A                            	include "_inc\SBZ pallet script 2.asm"
00001D3A                            ; ---------------------------------------------------------------------------
00001D3A                            ; Scrap Brain Zone 2 pallet cycling script
00001D3A                            ; ---------------------------------------------------------------------------
00001D3A 0006                       	dc.w 6
00001D3C 0708                       	dc.b 7,	8
00001D3E 0000                       	dc.w Pal_SBZCyc1
00001D40 FB50                       	dc.w $FB50
00001D42 0D08                       	dc.b $D, 8
00001D44 0000                       	dc.w Pal_SBZCyc2
00001D46 FB52                       	dc.w $FB52
00001D48 0908                       	dc.b 9,	8
00001D4A 0000                       	dc.w Pal_SBZCyc9
00001D4C FB70                       	dc.w $FB70
00001D4E 0708                       	dc.b 7,	8
00001D50 0000                       	dc.w Pal_SBZCyc6
00001D52 FB72                       	dc.w $FB72
00001D54 0303                       	dc.b 3,	3
00001D56 0000                       	dc.w Pal_SBZCyc8
00001D58 FB78                       	dc.w $FB78
00001D5A 0303                       	dc.b 3,	3
00001D5C 0000                       	dc.w Pal_SBZCyc8+2
00001D5E FB7A                       	dc.w $FB7A
00001D60 0303                       	dc.b 3,	3
00001D62 0000                       	dc.w Pal_SBZCyc8+4
00001D64 FB7C                       	dc.w $FB7C
00001D66                            	even
00001D66                            	even
00001D66                            
00001D66                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D76                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D86                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D96                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001DA2                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001DB2                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001DC2                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001DE2                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001DEC                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DFC                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001E08                            ; ---------------------------------------------------------------------------
00001E08                            ; Subroutine to	fade out and fade in
00001E08                            ; ---------------------------------------------------------------------------
00001E08                            
00001E08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E08                            
00001E08                            
00001E08                            Pal_FadeTo:
00001E08 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001E0E                            
00001E0E                            Pal_FadeTo2:
00001E0E 7000                       		moveq	#0,d0
00001E10 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E14 1038 F626                  		move.b	($FFFFF626).w,d0
00001E18 D0C0                       		adda.w	d0,a0
00001E1A 7200                       		moveq	#0,d1
00001E1C 1038 F627                  		move.b	($FFFFF627).w,d0
00001E20                            
00001E20                            Pal_ToBlack:
00001E20 30C1                       		move.w	d1,(a0)+
00001E22 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001E26                            
00001E26 383C 0015                  		move.w	#$15,d4
00001E2A                            
00001E2A                            loc_1DCE:
00001E2A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E30 6100 0000                  		bsr.w	DelayProgram
00001E34 6100                       		bsr.s	Pal_FadeIn
00001E36 6100 F692                  		bsr.w	RunPLC_RAM
00001E3A 51CC FFEE                  		dbf	d4,loc_1DCE
00001E3E 4E75                       		rts	
00001E40                            ; End of function Pal_FadeTo
00001E40                            
00001E40                            ; ---------------------------------------------------------------------------
00001E40                            ; Pallet fade-in subroutine
00001E40                            ; ---------------------------------------------------------------------------
00001E40                            
00001E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E40                            
00001E40                            
00001E40                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001E40 7000                       		moveq	#0,d0
00001E42 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E46 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001E4A 1038 F626                  		move.b	($FFFFF626).w,d0
00001E4E D0C0                       		adda.w	d0,a0
00001E50 D2C0                       		adda.w	d0,a1
00001E52 1038 F627                  		move.b	($FFFFF627).w,d0
00001E56                            
00001E56                            loc_1DFA:
00001E56 6100                       		bsr.s	Pal_AddColor
00001E58 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E5C                            
00001E5C                            locret_1E24:
00001E5C 4E75                       		rts	
00001E5E                            ; End of function Pal_FadeIn
00001E5E                            
00001E5E                            
00001E5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E5E                            
00001E5E                            
00001E5E                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E5E 3419                       		move.w	(a1)+,d2
00001E60 3610                       		move.w	(a0),d3
00001E62 B642                       		cmp.w	d2,d3
00001E64 6700                       		beq.s	loc_1E4E
00001E66 3203                       		move.w	d3,d1
00001E68 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E6C B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E6E 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E70 30C1                       		move.w	d1,(a0)+	; update pallet
00001E72 4E75                       		rts	
00001E74                            ; ===========================================================================
00001E74                            
00001E74                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E74 3203                       		move.w	d3,d1
00001E76 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E7A B242                       		cmp.w	d2,d1
00001E7C 6200                       		bhi.s	Pal_AddRed
00001E7E 30C1                       		move.w	d1,(a0)+	; update pallet
00001E80 4E75                       		rts	
00001E82                            ; ===========================================================================
00001E82                            
00001E82                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E82 5458                       		addq.w	#2,(a0)+	; increase red value
00001E84 4E75                       		rts	
00001E86                            ; ===========================================================================
00001E86                            
00001E86                            loc_1E4E:				; XREF: Pal_AddColor
00001E86 5448                       		addq.w	#2,a0
00001E88 4E75                       		rts	
00001E8A                            ; End of function Pal_AddColor
00001E8A                            
00001E8A                            
00001E8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E8A                            
00001E8A                            
00001E8A                            Pal_FadeFrom:
00001E8A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001E90                            
00001E90                            Pal_FadeFrom2:
00001E90 383C 0015                  		move.w	#$15,d4
00001E94                            
00001E94                            loc_1E5C:
00001E94 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E9A 6100 0000                  		bsr.w	DelayProgram
00001E9E 6100                       		bsr.s	Pal_FadeOut
00001EA0 6100 F628                  		bsr.w	RunPLC_RAM
00001EA4 51CC FFEE                  		dbf	d4,loc_1E5C
00001EA8 4E75                       		rts	
00001EAA                            ; End of function Pal_FadeFrom
00001EAA                            
00001EAA                            ; ---------------------------------------------------------------------------
00001EAA                            ; Pallet fade-out subroutine
00001EAA                            ; ---------------------------------------------------------------------------
00001EAA                            
00001EAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EAA                            
00001EAA                            
00001EAA                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001EAA 7000                       		moveq	#0,d0
00001EAC 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EB0 1038 F626                  		move.b	($FFFFF626).w,d0
00001EB4 D0C0                       		adda.w	d0,a0
00001EB6 1038 F627                  		move.b	($FFFFF627).w,d0
00001EBA                            
00001EBA                            loc_1E82:
00001EBA 6100                       		bsr.s	Pal_DecColor
00001EBC 51C8 FFFC                  		dbf	d0,loc_1E82
00001EC0                            
00001EC0 7000                       		moveq	#0,d0
00001EC2 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001EC6 1038 F626                  		move.b	($FFFFF626).w,d0
00001ECA D0C0                       		adda.w	d0,a0
00001ECC 1038 F627                  		move.b	($FFFFF627).w,d0
00001ED0                            
00001ED0                            loc_1E98:
00001ED0 6100                       		bsr.s	Pal_DecColor
00001ED2 51C8 FFFC                  		dbf	d0,loc_1E98
00001ED6 4E75                       		rts	
00001ED8                            ; End of function Pal_FadeOut
00001ED8                            
00001ED8                            
00001ED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED8                            
00001ED8                            
00001ED8                            Pal_DecColor:				; XREF: Pal_FadeOut
00001ED8 3410                       		move.w	(a0),d2
00001EDA 6700                       		beq.s	loc_1ECC
00001EDC 3202                       		move.w	d2,d1
00001EDE 0241 000E                  		andi.w	#$E,d1
00001EE2 6700                       		beq.s	Pal_DecGreen
00001EE4 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EE6 4E75                       		rts	
00001EE8                            ; ===========================================================================
00001EE8                            
00001EE8                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EE8 3202                       		move.w	d2,d1
00001EEA 0241 00E0                  		andi.w	#$E0,d1
00001EEE 6700                       		beq.s	Pal_DecBlue
00001EF0 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001EF4 4E75                       		rts	
00001EF6                            ; ===========================================================================
00001EF6                            
00001EF6                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001EF6 3202                       		move.w	d2,d1
00001EF8 0241 0E00                  		andi.w	#$E00,d1
00001EFC 6700                       		beq.s	loc_1ECC
00001EFE 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001F02 4E75                       		rts	
00001F04                            ; ===========================================================================
00001F04                            
00001F04                            loc_1ECC:				; XREF: Pal_DecColor
00001F04 5448                       		addq.w	#2,a0
00001F06 4E75                       		rts	
00001F08                            ; End of function Pal_DecColor
00001F08                            
00001F08                            ; ---------------------------------------------------------------------------
00001F08                            ; Subroutine to	fill the pallet	with white (special stage)
00001F08                            ; ---------------------------------------------------------------------------
00001F08                            
00001F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F08                            
00001F08                            
00001F08                            Pal_MakeWhite:				; XREF: SpecialStage
00001F08 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001F0E 7000                       		moveq	#0,d0
00001F10 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F14 1038 F626                  		move.b	($FFFFF626).w,d0
00001F18 D0C0                       		adda.w	d0,a0
00001F1A 323C 0EEE                  		move.w	#$EEE,d1
00001F1E 1038 F627                  		move.b	($FFFFF627).w,d0
00001F22                            
00001F22                            PalWhite_Loop:
00001F22 30C1                       		move.w	d1,(a0)+
00001F24 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001F28 383C 0015                  		move.w	#$15,d4
00001F2C                            
00001F2C                            loc_1EF4:
00001F2C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F32 6100 0000                  		bsr.w	DelayProgram
00001F36 6100                       		bsr.s	Pal_WhiteToBlack
00001F38 6100 F590                  		bsr.w	RunPLC_RAM
00001F3C 51CC FFEE                  		dbf	d4,loc_1EF4
00001F40 4E75                       		rts	
00001F42                            ; End of function Pal_MakeWhite
00001F42                            
00001F42                            
00001F42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F42                            
00001F42                            
00001F42                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F42 7000                       		moveq	#0,d0
00001F44 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F48 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F4C 1038 F626                  		move.b	($FFFFF626).w,d0
00001F50 D0C0                       		adda.w	d0,a0
00001F52 D2C0                       		adda.w	d0,a1
00001F54 1038 F627                  		move.b	($FFFFF627).w,d0
00001F58                            
00001F58                            loc_1F20:
00001F58 6100                       		bsr.s	Pal_DecColor2
00001F5A 51C8 FFFC                  		dbf	d0,loc_1F20
00001F5E                            
00001F5E                            locret_1F4A:
00001F5E 4E75                       		rts	
00001F60                            ; End of function Pal_WhiteToBlack
00001F60                            
00001F60                            
00001F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F60                            
00001F60                            
00001F60                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F60 3419                       		move.w	(a1)+,d2
00001F62 3610                       		move.w	(a0),d3
00001F64 B642                       		cmp.w	d2,d3
00001F66 6700                       		beq.s	loc_1F78
00001F68 3203                       		move.w	d3,d1
00001F6A 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F6E 6500                       		bcs.s	loc_1F64
00001F70 B242                       		cmp.w	d2,d1
00001F72 6500                       		bcs.s	loc_1F64
00001F74 30C1                       		move.w	d1,(a0)+
00001F76 4E75                       		rts	
00001F78                            ; ===========================================================================
00001F78                            
00001F78                            loc_1F64:				; XREF: Pal_DecColor2
00001F78 3203                       		move.w	d3,d1
00001F7A 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F7E 6500                       		bcs.s	loc_1F74
00001F80 B242                       		cmp.w	d2,d1
00001F82 6500                       		bcs.s	loc_1F74
00001F84 30C1                       		move.w	d1,(a0)+
00001F86 4E75                       		rts	
00001F88                            ; ===========================================================================
00001F88                            
00001F88                            loc_1F74:				; XREF: loc_1F64
00001F88 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F8A 4E75                       		rts	
00001F8C                            ; ===========================================================================
00001F8C                            
00001F8C                            loc_1F78:				; XREF: Pal_DecColor2
00001F8C 5448                       		addq.w	#2,a0
00001F8E 4E75                       		rts	
00001F90                            ; End of function Pal_DecColor2
00001F90                            
00001F90                            ; ---------------------------------------------------------------------------
00001F90                            ; Subroutine to	make a white flash when	you enter a special stage
00001F90                            ; ---------------------------------------------------------------------------
00001F90                            
00001F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F90                            
00001F90                            
00001F90                            Pal_MakeFlash:				; XREF: SpecialStage
00001F90 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001F96 383C 0015                  		move.w	#$15,d4
00001F9A                            
00001F9A                            loc_1F86:
00001F9A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FA0 6100 0000                  		bsr.w	DelayProgram
00001FA4 6100                       		bsr.s	Pal_ToWhite
00001FA6 6100 F522                  		bsr.w	RunPLC_RAM
00001FAA 51CC FFEE                  		dbf	d4,loc_1F86
00001FAE 4E75                       		rts	
00001FB0                            ; End of function Pal_MakeFlash
00001FB0                            
00001FB0                            
00001FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB0                            
00001FB0                            
00001FB0                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001FB0 7000                       		moveq	#0,d0
00001FB2 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB6 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBA D0C0                       		adda.w	d0,a0
00001FBC 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC0                            
00001FC0                            loc_1FAC:
00001FC0 6100                       		bsr.s	Pal_AddColor2
00001FC2 51C8 FFFC                  		dbf	d0,loc_1FAC
00001FC6 7000                       		moveq	#0,d0
00001FC8 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FCC 1038 F626                  		move.b	($FFFFF626).w,d0
00001FD0 D0C0                       		adda.w	d0,a0
00001FD2 1038 F627                  		move.b	($FFFFF627).w,d0
00001FD6                            
00001FD6                            loc_1FC2:
00001FD6 6100                       		bsr.s	Pal_AddColor2
00001FD8 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FDC 4E75                       		rts	
00001FDE                            ; End of function Pal_ToWhite
00001FDE                            
00001FDE                            
00001FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FDE                            
00001FDE                            
00001FDE                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FDE 3410                       		move.w	(a0),d2
00001FE0 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FE4 6700                       		beq.s	loc_2006
00001FE6 3202                       		move.w	d2,d1
00001FE8 0241 000E                  		andi.w	#$E,d1
00001FEC 0C41 000E                  		cmpi.w	#$E,d1
00001FF0 6700                       		beq.s	loc_1FE2
00001FF2 5458                       		addq.w	#2,(a0)+	; increase red value
00001FF4 4E75                       		rts	
00001FF6                            ; ===========================================================================
00001FF6                            
00001FF6                            loc_1FE2:				; XREF: Pal_AddColor2
00001FF6 3202                       		move.w	d2,d1
00001FF8 0241 00E0                  		andi.w	#$E0,d1
00001FFC 0C41 00E0                  		cmpi.w	#$E0,d1
00002000 6700                       		beq.s	loc_1FF4
00002002 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002006 4E75                       		rts	
00002008                            ; ===========================================================================
00002008                            
00002008                            loc_1FF4:				; XREF: loc_1FE2
00002008 3202                       		move.w	d2,d1
0000200A 0241 0E00                  		andi.w	#$E00,d1
0000200E 0C41 0E00                  		cmpi.w	#$E00,d1
00002012 6700                       		beq.s	loc_2006
00002014 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002018 4E75                       		rts	
0000201A                            ; ===========================================================================
0000201A                            
0000201A                            loc_2006:				; XREF: Pal_AddColor2
0000201A 5448                       		addq.w	#2,a0
0000201C 4E75                       		rts	
0000201E                            ; End of function Pal_AddColor2
0000201E                            
0000201E                            ; ---------------------------------------------------------------------------
0000201E                            ; Pallet cycling routine - Sega	logo
0000201E                            ; ---------------------------------------------------------------------------
0000201E                            
0000201E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000201E                            
0000201E                            
0000201E                            PalCycle_Sega:				; XREF: SegaScreen
0000201E 4A38 F635                  		tst.b	($FFFFF635).w
00002022 6600                       		bne.s	loc_206A
00002024 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002028 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000202E 7205                       		moveq	#5,d1
00002030 3038 F632                  		move.w	($FFFFF632).w,d0
00002034                            
00002034                            loc_2020:
00002034 6A00                       		bpl.s	loc_202A
00002036 5448                       		addq.w	#2,a0
00002038 5341                       		subq.w	#1,d1
0000203A 5440                       		addq.w	#2,d0
0000203C 60F6                       		bra.s	loc_2020
0000203E                            ; ===========================================================================
0000203E                            
0000203E                            loc_202A:				; XREF: PalCycle_Sega
0000203E 3400                       		move.w	d0,d2
00002040 0242 001E                  		andi.w	#$1E,d2
00002044 6600                       		bne.s	loc_2034
00002046 5440                       		addq.w	#2,d0
00002048                            
00002048                            loc_2034:
00002048 0C40 0060                  		cmpi.w	#$60,d0
0000204C 6400                       		bcc.s	loc_203E
0000204E 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002052                            
00002052                            loc_203E:
00002052 5440                       		addq.w	#2,d0
00002054 51C9 FFE8                  		dbf	d1,loc_202A
00002058 3038 F632                  		move.w	($FFFFF632).w,d0
0000205C 5440                       		addq.w	#2,d0
0000205E 3400                       		move.w	d0,d2
00002060 0242 001E                  		andi.w	#$1E,d2
00002064 6600                       		bne.s	loc_2054
00002066 5440                       		addq.w	#2,d0
00002068                            
00002068                            loc_2054:
00002068 0C40 0064                  		cmpi.w	#$64,d0
0000206C 6D00                       		blt.s	loc_2062
0000206E 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002074 70F4                       		moveq	#-$C,d0
00002076                            
00002076                            loc_2062:
00002076 31C0 F632                  		move.w	d0,($FFFFF632).w
0000207A 7001                       		moveq	#1,d0
0000207C 4E75                       		rts	
0000207E                            ; ===========================================================================
0000207E                            
0000207E                            loc_206A:				; XREF: loc_202A
0000207E 5338 F634                  		subq.b	#1,($FFFFF634).w
00002082 6A00                       		bpl.s	loc_20BC
00002084 11FC 0004 F634             		move.b	#4,($FFFFF634).w
0000208A 3038 F632                  		move.w	($FFFFF632).w,d0
0000208E 0640 000C                  		addi.w	#$C,d0
00002092 0C40 0030                  		cmpi.w	#$30,d0
00002096 6500                       		bcs.s	loc_2088
00002098 7000                       		moveq	#0,d0
0000209A 4E75                       		rts	
0000209C                            ; ===========================================================================
0000209C                            
0000209C                            loc_2088:				; XREF: loc_206A
0000209C 31C0 F632                  		move.w	d0,($FFFFF632).w
000020A0 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000020A6 41F0 0000                  		lea	(a0,d0.w),a0
000020AA 43F8 FB04                  		lea	($FFFFFB04).w,a1
000020AE 22D8                       		move.l	(a0)+,(a1)+
000020B0 22D8                       		move.l	(a0)+,(a1)+
000020B2 3298                       		move.w	(a0)+,(a1)
000020B4 43F8 FB20                  		lea	($FFFFFB20).w,a1
000020B8 7000                       		moveq	#0,d0
000020BA 722C                       		moveq	#$2C,d1
000020BC                            
000020BC                            loc_20A8:
000020BC 3400                       		move.w	d0,d2
000020BE 0242 001E                  		andi.w	#$1E,d2
000020C2 6600                       		bne.s	loc_20B2
000020C4 5440                       		addq.w	#2,d0
000020C6                            
000020C6                            loc_20B2:
000020C6 3390 0000                  		move.w	(a0),(a1,d0.w)
000020CA 5440                       		addq.w	#2,d0
000020CC 51C9 FFEE                  		dbf	d1,loc_20A8
000020D0                            
000020D0                            loc_20BC:
000020D0 7001                       		moveq	#1,d0
000020D2 4E75                       		rts	
000020D4                            ; End of function PalCycle_Sega
000020D4                            
000020D4                            ; ===========================================================================
000020D4                            
000020D4                            Pal_Sega1:	incbin	pallet\sega1.bin
000020E0                            Pal_Sega2:	incbin	pallet\sega2.bin
00002110                            
00002110                            ; ---------------------------------------------------------------------------
00002110                            ; Subroutines to load pallets
00002110                            ; ---------------------------------------------------------------------------
00002110                            
00002110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002110                            
00002110                            
00002110                            PalLoad1:
00002110 43F9 0000 0000             		lea	(PalPointers).l,a1
00002116 E748                       		lsl.w	#3,d0
00002118 D2C0                       		adda.w	d0,a1
0000211A 2459                       		movea.l	(a1)+,a2
0000211C 3659                       		movea.w	(a1)+,a3
0000211E D6FC 0080                  		adda.w	#$80,a3
00002122 3E19                       		move.w	(a1)+,d7
00002124                            
00002124                            loc_2110:
00002124 26DA                       		move.l	(a2)+,(a3)+
00002126 51CF FFFC                  		dbf	d7,loc_2110
0000212A 4E75                       		rts	
0000212C                            ; End of function PalLoad1
0000212C                            
0000212C                            
0000212C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212C                            
0000212C                            
0000212C                            PalLoad2:
0000212C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002132 E748                       		lsl.w	#3,d0
00002134 D2C0                       		adda.w	d0,a1
00002136 2459                       		movea.l	(a1)+,a2
00002138 3659                       		movea.w	(a1)+,a3
0000213A 3E19                       		move.w	(a1)+,d7
0000213C                            
0000213C                            loc_2128:
0000213C 26DA                       		move.l	(a2)+,(a3)+
0000213E 51CF FFFC                  		dbf	d7,loc_2128
00002142 4E75                       		rts	
00002144                            ; End of function PalLoad2
00002144                            
00002144                            ; ---------------------------------------------------------------------------
00002144                            ; Underwater pallet loading subroutine
00002144                            ; ---------------------------------------------------------------------------
00002144                            
00002144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002144                            
00002144                            
00002144                            PalLoad3_Water:
00002144 43F9 0000 0000             		lea	(PalPointers).l,a1
0000214A E748                       		lsl.w	#3,d0
0000214C D2C0                       		adda.w	d0,a1
0000214E 2459                       		movea.l	(a1)+,a2
00002150 3659                       		movea.w	(a1)+,a3
00002152 96FC 0080                  		suba.w	#$80,a3
00002156 3E19                       		move.w	(a1)+,d7
00002158                            
00002158                            loc_2144:
00002158 26DA                       		move.l	(a2)+,(a3)+
0000215A 51CF FFFC                  		dbf	d7,loc_2144
0000215E 4E75                       		rts	
00002160                            ; End of function PalLoad3_Water
00002160                            
00002160                            
00002160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002160                            
00002160                            
00002160                            PalLoad4_Water:
00002160 43F9 0000 0000             		lea	(PalPointers).l,a1
00002166 E748                       		lsl.w	#3,d0
00002168 D2C0                       		adda.w	d0,a1
0000216A 2459                       		movea.l	(a1)+,a2
0000216C 3659                       		movea.w	(a1)+,a3
0000216E 96FC 0100                  		suba.w	#$100,a3
00002172 3E19                       		move.w	(a1)+,d7
00002174                            
00002174                            loc_2160:
00002174 26DA                       		move.l	(a2)+,(a3)+
00002176 51CF FFFC                  		dbf	d7,loc_2160
0000217A 4E75                       		rts	
0000217C                            ; End of function PalLoad4_Water
0000217C                            
0000217C                            ; ===========================================================================
0000217C                            ; ---------------------------------------------------------------------------
0000217C                            ; Pallet pointers
0000217C                            ; ---------------------------------------------------------------------------
0000217C                            PalPointers:
0000217C                            	include "_inc\Pallet pointers.asm"
0000217C                            ; ---------------------------------------------------------------------------
0000217C                            ; Pallet pointers
0000217C                            ; ---------------------------------------------------------------------------
0000217C 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002180 FB00                       	dc.w $FB00		; RAM address
00002182 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002184 0000 0000                  	dc.l Pal_Title
00002188 FB00                       	dc.w $FB00
0000218A 001F                       	dc.w $1F
0000218C 0000 0000                  	dc.l Pal_LevelSel
00002190 FB00                       	dc.w $FB00
00002192 001F                       	dc.w $1F
00002194 0000 0000                  	dc.l Pal_Sonic
00002198 FB00                       	dc.w $FB00
0000219A 0007                       	dc.w 7
0000219C 0000 0000                  	dc.l Pal_GHZ
000021A0 FB20                       	dc.w $FB20
000021A2 0017                       	dc.w $17
000021A4 0000 0000                  	dc.l Pal_LZ
000021A8 FB20                       	dc.w $FB20
000021AA 0017                       	dc.w $17
000021AC 0000 0000                  	dc.l Pal_MZ
000021B0 FB20                       	dc.w $FB20
000021B2 0017                       	dc.w $17
000021B4 0000 0000                  	dc.l Pal_SLZ
000021B8 FB20                       	dc.w $FB20
000021BA 0017                       	dc.w $17
000021BC 0000 0000                  	dc.l Pal_SYZ
000021C0 FB20                       	dc.w $FB20
000021C2 0017                       	dc.w $17
000021C4 0000 0000                  	dc.l Pal_SBZ1
000021C8 FB20                       	dc.w $FB20
000021CA 0017                       	dc.w $17
000021CC 0000 0000                  	dc.l Pal_Special
000021D0 FB00                       	dc.w $FB00
000021D2 001F                       	dc.w $1F
000021D4 0000 0000                  	dc.l Pal_LZWater
000021D8 FB00                       	dc.w $FB00
000021DA 001F                       	dc.w $1F
000021DC 0000 0000                  	dc.l Pal_SBZ3
000021E0 FB20                       	dc.w $FB20
000021E2 0017                       	dc.w $17
000021E4 0000 0000                  	dc.l Pal_SBZ3Water
000021E8 FB00                       	dc.w $FB00
000021EA 001F                       	dc.w $1F
000021EC 0000 0000                  	dc.l Pal_SBZ2
000021F0 FB20                       	dc.w $FB20
000021F2 0017                       	dc.w $17
000021F4 0000 0000                  	dc.l Pal_LZSonWater
000021F8 FB00                       	dc.w $FB00
000021FA 0007                       	dc.w 7
000021FC 0000 0000                  	dc.l Pal_SBZ3SonWat
00002200 FB00                       	dc.w $FB00
00002202 0007                       	dc.w 7
00002204 0000 0000                  	dc.l Pal_SpeResult
00002208 FB00                       	dc.w $FB00
0000220A 001F                       	dc.w $1F
0000220C 0000 0000                  	dc.l Pal_SpeContinue
00002210 FB00                       	dc.w $FB00
00002212 000F                       	dc.w $F
00002214 0000 0000                  	dc.l Pal_Ending
00002218 FB00                       	dc.w $FB00
0000221A 001F                       	dc.w $1F
0000221C 0000 0000                  	dc.l Pal_Sonic
00002220 FB20                       	dc.w $FB20
00002222 0007                       	dc.w 7
00002222 0007                       	dc.w 7
00002224                            
00002224                            ; ---------------------------------------------------------------------------
00002224                            ; Pallet data
00002224                            ; ---------------------------------------------------------------------------
00002224                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000022A4                            Pal_Title:	incbin	pallet\title.bin
00002324                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000023A4                            Pal_Sonic:	incbin	pallet\sonic.bin
000023C4                            Pal_GHZ:	incbin	pallet\ghz.bin
00002424                            Pal_LZ:		incbin	pallet\lz.bin
00002484                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002504                            Pal_MZ:		incbin	pallet\mz.bin
00002564                            Pal_SLZ:	incbin	pallet\slz.bin
000025C4                            Pal_SYZ:	incbin	pallet\syz.bin
00002624                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002684                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026E4                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002764                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000027C4                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002844                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002864                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002884                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002904                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002944                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000029C4                            
000029C4                            ; ---------------------------------------------------------------------------
000029C4                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000029C4                            ; ---------------------------------------------------------------------------
000029C4                            
000029C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029C4                            
000029C4                            WaitVBlank:
000029C4                            DelayProgram:				; XREF: PauseGame
000029C4 46FC 2300                  		move	#$2300,sr
000029C8                            
000029C8                            loc_29AC:
000029C8 4A38 F62A                  		tst.b	($FFFFF62A).w
000029CC 66FA                       		bne.s	loc_29AC
000029CE 4E75                       		rts	
000029D0                            ; End of function DelayProgram
000029D0                            
000029D0                            ; ---------------------------------------------------------------------------
000029D0                            ; Subroutine to	generate a pseudo-random number	in d0
000029D0                            ; ---------------------------------------------------------------------------
000029D0                            
000029D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029D0                            
000029D0                            
000029D0                            RandomNumber:
000029D0 2238 F636                  		move.l	($FFFFF636).w,d1
000029D4 6600                       		bne.s	loc_29C0
000029D6 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029DC                            
000029DC                            loc_29C0:
000029DC 2001                       		move.l	d1,d0
000029DE E581                       		asl.l	#2,d1
000029E0 D280                       		add.l	d0,d1
000029E2 E781                       		asl.l	#3,d1
000029E4 D280                       		add.l	d0,d1
000029E6 3001                       		move.w	d1,d0
000029E8 4841                       		swap	d1
000029EA D041                       		add.w	d1,d0
000029EC 3200                       		move.w	d0,d1
000029EE 4841                       		swap	d1
000029F0 21C1 F636                  		move.l	d1,($FFFFF636).w
000029F4 4E75                       		rts	
000029F6                            ; End of function RandomNumber
000029F6                            
000029F6                            
000029F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029F6                            
000029F6                            
000029F6                            CalcSine:
000029F6 0240 00FF                          andi.w  #$FF,d0
000029FA 5040                               addq.w  #8,d0
000029FC D040                               add.w   d0,d0
000029FE 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00002A02 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00002A06 4E75                               rts
00002A08                            ; End of function CalcSine
00002A08                            
00002A08                            ; ===========================================================================
00002A08                            
00002A08                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002C88                            
00002C88                            ; ===========================================================================
00002C88 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C8C 3200                       		move.w	d0,d1
00002C8E 4841                       		swap	d1
00002C90 7000                       		moveq	#0,d0
00002C92 3200                       		move.w	d0,d1
00002C94 7407                       		moveq	#7,d2
00002C96                            
00002C96                            loc_2C80:
00002C96 E599                       		rol.l	#2,d1
00002C98 D040                       		add.w	d0,d0
00002C9A 5240                       		addq.w	#1,d0
00002C9C 9240                       		sub.w	d0,d1
00002C9E 6400                       		bcc.s	loc_2C9A
00002CA0 D240                       		add.w	d0,d1
00002CA2 5340                       		subq.w	#1,d0
00002CA4 51CA FFF0                  		dbf	d2,loc_2C80
00002CA8 E248                       		lsr.w	#1,d0
00002CAA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002CAE 4E75                       		rts	
00002CB0                            ; ===========================================================================
00002CB0                            
00002CB0                            loc_2C9A:
00002CB0 5240                       		addq.w	#1,d0
00002CB2 51CA FFE2                  		dbf	d2,loc_2C80
00002CB6 E248                       		lsr.w	#1,d0
00002CB8 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002CBC 4E75                       		rts	
00002CBE                            
00002CBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CBE                            
00002CBE                            
00002CBE                            CalcAngle:
00002CBE 48E7 1800                  		movem.l	d3-d4,-(sp)
00002CC2 7600                       		moveq	#0,d3
00002CC4 7800                       		moveq	#0,d4
00002CC6 3601                       		move.w	d1,d3
00002CC8 3802                       		move.w	d2,d4
00002CCA 8843                       		or.w	d3,d4
00002CCC 6700                       		beq.s	loc_2D04
00002CCE 3802                       		move.w	d2,d4
00002CD0 4A43                       		tst.w	d3
00002CD2 6A00 0000                  		bpl.w	loc_2CC2
00002CD6 4443                       		neg.w	d3
00002CD8                            
00002CD8                            loc_2CC2:
00002CD8 4A44                       		tst.w	d4
00002CDA 6A00 0000                  		bpl.w	loc_2CCA
00002CDE 4444                       		neg.w	d4
00002CE0                            
00002CE0                            loc_2CCA:
00002CE0 B843                       		cmp.w	d3,d4
00002CE2 6400 0000                  		bcc.w	loc_2CDC
00002CE6 E18C                       		lsl.l	#8,d4
00002CE8 88C3                       		divu.w	d3,d4
00002CEA 7000                       		moveq	#0,d0
00002CEC 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CF0 6000                       		bra.s	loc_2CE6
00002CF2                            ; ===========================================================================
00002CF2                            
00002CF2                            loc_2CDC:				; XREF: CalcAngle
00002CF2 E18B                       		lsl.l	#8,d3
00002CF4 86C4                       		divu.w	d4,d3
00002CF6 7040                       		moveq	#$40,d0
00002CF8 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CFC                            
00002CFC                            loc_2CE6:
00002CFC 4A41                       		tst.w	d1
00002CFE 6A00 0000                  		bpl.w	loc_2CF2
00002D02 4440                       		neg.w	d0
00002D04 0640 0080                  		addi.w	#$80,d0
00002D08                            
00002D08                            loc_2CF2:
00002D08 4A42                       		tst.w	d2
00002D0A 6A00 0000                  		bpl.w	loc_2CFE
00002D0E 4440                       		neg.w	d0
00002D10 0640 0100                  		addi.w	#$100,d0
00002D14                            
00002D14                            loc_2CFE:
00002D14 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D18 4E75                       		rts	
00002D1A                            ; ===========================================================================
00002D1A                            
00002D1A                            loc_2D04:				; XREF: CalcAngle
00002D1A 303C 0040                  		move.w	#$40,d0
00002D1E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D22 4E75                       		rts	
00002D24                            ; End of function CalcAngle
00002D24                            
00002D24                            ; ===========================================================================
00002D24                            
00002D24                            Angle_Data:	incbin	misc\angles.bin
00002E26                            
00002E26                            ; ===========================================================================
00002E26                            
00002E26                            ; ---------------------------------------------------------------------------
00002E26                            ; Sega screen
00002E26                            ; ---------------------------------------------------------------------------
00002E26                            
00002E26                            SegaScreen:				; XREF: GameModeArray
00002E26 103C 00E4                  		move.b	#$E4,d0
00002E2A 6100 E3F4                  		bsr.w	PlaySound_Special ; stop music
00002E2E 6100 E68C                  		bsr.w	ClearPLC
00002E32 6100 F056                  		bsr.w	Pal_FadeFrom
00002E36 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E3C 3CBC 8004                  		move.w	#$8004,(a6)
00002E40 3CBC 8230                  		move.w	#$8230,(a6)
00002E44 3CBC 8407                  		move.w	#$8407,(a6)
00002E48 3CBC 8700                  		move.w	#$8700,(a6)
00002E4C 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E50 4238 F64E                  		clr.b	($FFFFF64E).w
00002E54 46FC 2700                  		move	#$2700,sr
00002E58 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E5C 0200 00BF                  		andi.b	#$BF,d0
00002E60 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E66 6100 E292                  		bsr.w	ClearScreen
00002E6A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E74 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E7A 6100 E496                  		bsr.w	NemDec
00002E7E 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E84 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E8A 303C 0000                  		move.w	#0,d0
00002E8E 6100 E76C                  		bsr.w	EniDec
00002E92 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E98 203C 6510 0003             		move.l	#$65100003,d0
00002E9E 7217                       		moveq	#$17,d1
00002EA0 7407                       		moveq	#7,d2
00002EA2 6100 E444                  		bsr.w	ShowVDPGraphics
00002EA6 43F9 00FF 0180             		lea	($FF0180).l,a1
00002EAC 203C 4000 0003             		move.l	#$40000003,d0
00002EB2 7227                       		moveq	#$27,d1
00002EB4 741B                       		moveq	#$1B,d2
00002EB6 6100 E430                  		bsr.w	ShowVDPGraphics
00002EBA 7000                       		moveq	#0,d0
00002EBC 6100 F26E                  		bsr.w	PalLoad2	; load Sega logo pallet
00002EC0 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002EC6 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002ECC 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002ED2 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002ED8 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00002EDE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EE2 0000 0040                  		ori.b	#$40,d0
00002EE6 33C0 00C0 0004             		move.w	d0,($C00004).l
00002EEC                            
00002EEC                            Sega_WaitPallet:
00002EEC 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EF2 6100 FAD0                  		bsr.w	DelayProgram
00002EF6 6100 F126                  		bsr.w	PalCycle_Sega
00002EFA 66F0                       		bne.s	Sega_WaitPallet
00002EFC                            
00002EFC 103C 00E1                  		move.b	#$E1,d0
00002F00 6100 E31E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002F04 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002F0A 6100 FAB8                  		bsr.w	DelayProgram
00002F0E 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002F14                            
00002F14                            Sega_WaitEnd:
00002F14 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002F1A 6100 FAA8                  		bsr.w	DelayProgram
00002F1E 4A78 F614                  		tst.w	($FFFFF614).w
00002F22 6700                       		beq.s	Sega_GotoTitle
00002F24 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F2A 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F2C                            
00002F2C                            Sega_GotoTitle:
00002F2C 11FC 0001 F601             		move.b	#1,(FromSEGA).w
00002F32 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F38 103C 00E4                  		move.b	#$E4,d0
00002F3C 6100 E2E2                  		bsr.w	PlaySound_Special ; stop music
00002F40 6100 E57A                  		bsr.w	ClearPLC
00002F44 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002F4A 6100 EF44                  		bsr.w	Pal_FadeFrom2
00002F4E 46FC 2700                  		move	#$2700,sr
00002F52 6100 E234                  		bsr.w	SoundDriverLoad
00002F56 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F5C 3CBC 8004                  		move.w	#$8004,(a6)
00002F60 3CBC 8230                  		move.w	#$8230,(a6)
00002F64 3CBC 8407                  		move.w	#$8407,(a6)
00002F68 3CBC 9001                  		move.w	#$9001,(a6)
00002F6C 3CBC 9200                  		move.w	#$9200,(a6)
00002F70 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F74 3CBC 8720                  		move.w	#$8720,(a6)
00002F78 4238 F64E                  		clr.b	($FFFFF64E).w
00002F7C 6100 E17C                  		bsr.w	ClearScreen
00002F80 4EB9 0000 0000             		jsr SHC2021
00002F86 6000                       		bra.s	TitleSkip
00002F88                            ; ===========================================================================
00002F88                            
00002F88                            ; ---------------------------------------------------------------------------
00002F88                            ; Title	screen
00002F88                            ; ---------------------------------------------------------------------------
00002F88                            
00002F88                            TitleScreen:				; XREF: GameModeArray
00002F88 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00002F8E 103C 00E4                  		move.b	#$E4,d0
00002F92 6100 E28C                  		bsr.w	PlaySound_Special ; stop music
00002F96 6100 E524                  		bsr.w	ClearPLC
00002F9A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002FA0 6100 EEEE                  		bsr.w	Pal_FadeFrom2
00002FA4 46FC 2700                  		move	#$2700,sr
00002FA8 6100 E1DE                  		bsr.w	SoundDriverLoad
00002FAC 4DF9 00C0 0004             		lea	($C00004).l,a6
00002FB2 3CBC 8004                  		move.w	#$8004,(a6)
00002FB6 3CBC 8230                  		move.w	#$8230,(a6)
00002FBA 3CBC 8407                  		move.w	#$8407,(a6)
00002FBE 3CBC 9001                  		move.w	#$9001,(a6)
00002FC2 3CBC 9200                  		move.w	#$9200,(a6)
00002FC6 3CBC 8B03                  		move.w	#$8B03,(a6)
00002FCA 3CBC 8720                  		move.w	#$8720,(a6)
00002FCE 4238 F64E                  		clr.b	($FFFFF64E).w
00002FD2 6100 E126                  		bsr.w	ClearScreen
00002FD6                            
00002FD6                            TitleSkip:
00002FD6 43F8 D000                  		lea	($FFFFD000).w,a1
00002FDA 7000                       		moveq	#0,d0
00002FDC 323C 07FF                  		move.w	#$7FF,d1
00002FE0                            
00002FE0                            Title_ClrObjRam:
00002FE0 22C0                       		move.l	d0,(a1)+
00002FE2 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002FE6                            
00002FE6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002FF0 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002FF6 6100 E31A                  		bsr.w	NemDec
00002FFA 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003004 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000300A 6100 E306                  		bsr.w	NemDec
0000300E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003014 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000301A 303C 0000                  		move.w	#0,d0
0000301E 6100 E5DC                  		bsr.w	EniDec
00003022 43F9 00FF 0000             		lea	($FF0000).l,a1
00003028 203C 4000 0003             		move.l	#$40000003,d0
0000302E 7227                       		moveq	#$27,d1
00003030 741B                       		moveq	#$1B,d2
00003032 6100 E2B4                  		bsr.w	ShowVDPGraphics
00003036                            
00003036 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000303A 7000                       		moveq	#0,d0
0000303C 323C 001F                  		move.w	#$1F,d1
00003040                            
00003040                            Title_ClrPallet:
00003040 22C0                       		move.l	d0,(a1)+
00003042 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003046                            
00003046 7014                       		moveq	#$14,d0		; load Sonic's pallet
00003048 6100 F0C6                  		bsr.w	PalLoad1
0000304C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003052 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00003058 4EB9 0000 0000             		jsr	ObjectsLoad
0000305E 4EB9 0000 0000             		jsr	BuildSprites
00003064 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000306A 4A38 F601                  		tst.b	(FromSEGA).w
0000306E 6700 0000                  		beq.w	@skip
00003072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003078                            
00003078                            	@skip:
00003078 6100 ED94                  		bsr.w	Pal_FadeTo2
0000307C 46FC 2700                  		move	#$2700,sr
00003080 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000308A 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003090 6100 E280                  		bsr.w	NemDec
00003094 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000309E 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000030A4 6100 E26C                  		bsr.w	NemDec
000030A8 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000030B2 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000030B8 6100 E258                  		bsr.w	NemDec
000030BC 4DF9 00C0 0000             		lea	($C00000).l,a6
000030C2 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000030CA 4BF9 0000 0550             		lea	(Art_Text).l,a5
000030D0 323C 028F                  		move.w	#$28F,d1
000030D4                            
000030D4                            Title_LoadText:
000030D4 3C9D                       		move.w	(a5)+,(a6)
000030D6 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000030DA                            
000030DA 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000030E0 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000030E6 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000030EC 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000030F2 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000030F8 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000030FE 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00003104 6100 0000                  		bsr.w	LevelSizeLoad
00003108 6100 0000                  		bsr.w	DeformBgLayer
0000310C 43F8 B000                  		lea	($FFFFB000).w,a1
00003110 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003116 303C 0000                  		move.w	#0,d0
0000311A 6100 E4E0                  		bsr.w	EniDec
0000311E 6100 0000                  		bsr.w	LevelLayoutLoad
00003122 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003128 4A38 F601                  		tst.b	(FromSEGA).w
0000312C 6700                       		beq.s	@notSEGA
0000312E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003134                            
00003134                            	@notSEGA:
00003134 6100 ED5A                  		bsr.w	Pal_FadeFrom2
00003138 46FC 2700                  		move	#$2700,sr
0000313C 6100 DFBC                  		bsr.w	ClearScreen
00003140 4BF9 00C0 0004             		lea	($C00004).l,a5
00003146 4DF9 00C0 0000             		lea	($C00000).l,a6
0000314C 47F8 F708                  		lea	($FFFFF708).w,a3
00003150 49F8 A440                  		lea	($FFFFA440).w,a4
00003154 343C 6000                  		move.w	#$6000,d2
00003158 6100 0000                  		bsr.w	LoadTilesFromStart2
0000315C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003162 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003168 303C 0000                  		move.w	#0,d0
0000316C 6100 E48E                  		bsr.w	EniDec
00003170 43F9 00FF 0000             		lea	($FF0000).l,a1
00003176 203C 4206 0003             		move.l	#$42060003,d0
0000317C 7221                       		moveq	#$21,d1
0000317E 7415                       		moveq	#$15,d2
00003180 6100 E166                  		bsr.w	ShowVDPGraphics
00003184 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000318E 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003194 6100 E17C                  		bsr.w	NemDec
00003198 7001                       		moveq	#1,d0		; load title screen pallet
0000319A 6100 EF74                  		bsr.w	PalLoad1
0000319E 103C 008A                  		move.b	#$8A,d0		; play title screen music
000031A2 6100 E07C                  		bsr.w	PlaySound_Special
000031A6 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000031AC                            		;move.b	#1,($FFFFFFE1).w ; enable slow-mo mode
000031AC 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000031B2 43F8 D080                  		lea	($FFFFD080).w,a1
000031B6 7000                       		moveq	#0,d0
000031B8 323C 0007                  		move.w	#7,d1
000031BC                            
000031BC                            Title_ClrObjRam2:
000031BC 22C0                       		move.l	d0,(a1)+
000031BE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000031C2                            
000031C2 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000031C8 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000031CE 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000031D4 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000031DA 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000031E0 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000031E6 4EB9 0000 0000             		jsr	ObjectsLoad
000031EC 6100 0000                  		bsr.w	DeformBgLayer
000031F0 4EB9 0000 0000             		jsr	BuildSprites
000031F6 7000                       		moveq	#0,d0
000031F8 6100 E296                  		bsr.w	LoadPLC2
000031FC 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003202 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003208 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000320C 0000 0040                  		ori.b	#$40,d0
00003210 33C0 00C0 0004             		move.w	d0,($C00004).l
00003216 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000321C 4A38 F601                  		tst.b	(FromSEGA).w
00003220 6700                       		beq.s	@notSEGA
00003222 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003228 11FC 0000 F5C4             		move.b	#0,(SonimeSST+sonime_routine).w
0000322E 11FC 0000 F601             		move.b	#0,(FromSEGA).w
00003234                            
00003234                            	@notSEGA:
00003234 6100 EBD8                  		bsr.w	Pal_FadeTo2
00003238                            
00003238                            loc_317C:
00003238 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000323E 6100 F784                  		bsr.w	DelayProgram
00003242 4EB9 0000 0000             		jsr	ObjectsLoad
00003248 6100 0000                  		bsr.w	DeformBgLayer
0000324C 4EB9 0000 0000             		jsr	BuildSprites
00003252 6100 E764                  		bsr.w	PalCycle_Title
00003256 6100 E272                  		bsr.w	RunPLC_RAM
0000325A 3038 D008                  		move.w	($FFFFD008).w,d0
0000325E 5440                       		addq.w	#2,d0
00003260 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003264 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003268 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000326A 6000 FD1C                  		bra.w	TitleScreen
0000326E                            ; ===========================================================================
0000326E                            
0000326E                            Title_ChkRegion:
0000326E 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003272 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003274 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000327A 6000                       		bra.s	Title_EnterCheat
0000327C                            ; ===========================================================================
0000327C                            
0000327C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000327C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003282                            
00003282                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003282 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003286 D0C0                       		adda.w	d0,a0
00003288 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000328C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003290 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003292 6600                       		bne.s	loc_3210	; if not, branch
00003294 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003298 4A00                       		tst.b	d0
0000329A 6600                       		bne.s	Title_CountC
0000329C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000032A0 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000032A4 E249                       		lsr.w	#1,d1
000032A6 0241 0003                  		andi.w	#3,d1
000032AA 6700                       		beq.s	Title_PlayRing
000032AC 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000032B0 6A00                       		bpl.s	Title_PlayRing
000032B2 7201                       		moveq	#1,d1
000032B4 1181 1001                  		move.b	d1,1(a0,d1.w)
000032B8                            
000032B8                            Title_PlayRing:
000032B8 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000032BE 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000032C2 6100 DF5C                  		bsr.w	PlaySound_Special
000032C6 6000                       		bra.s	Title_CountC
000032C8                            ; ===========================================================================
000032C8                            
000032C8                            loc_3210:				; XREF: Title_EnterCheat
000032C8 4A00                       		tst.b	d0
000032CA 6700                       		beq.s	Title_CountC
000032CC 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000032D2 6700                       		beq.s	Title_CountC
000032D4 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000032DA                            
000032DA                            Title_CountC:
000032DA 1038 F605                  		move.b	($FFFFF605).w,d0
000032DE 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000032E2 6700                       		beq.s	loc_3230	; if not, branch
000032E4 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000032E8                            
000032E8                            loc_3230:
000032E8 4A78 F614                  		tst.w	($FFFFF614).w
000032EC 6700 0000                  		beq.w	Demo
000032F0 0838 0005 F605             		btst	#5,($FFFFF605).w	; has C been pressed?
000032F6 6700                       		beq.s	Title_StartCheck		; if not, branch
000032F8 33FC 0100 00A1 1100        		move.w #$0100,($A11100).l ; request Z80 stop (ON)
00003300 0839 0000 00A1 1100        		btst.b #$00,($A11100).l ; has the Z80 stopped yet?
00003308 66F6                       		bne.s *-$08 ; if not, branch
0000330A 0879 0007 00A0 0647        		bchg #7,($A00647).l ; set volume
00003312 13FC 00DA 00A0 0651        		move.b #%11011010,($A00651).l ; set request
0000331A 33FC 0000 00A1 1100        		move.w #$0000,($A11100).l ; request Z80 stop (OFF)
00003322 103C 00B5                  		move.b	#$B5,d0
00003326 6100 DEF8                  		bsr.w	PlaySound_Special
0000332A                            
0000332A                            Title_StartCheck:
0000332A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003330 6700 FF06                  		beq.w	loc_317C	; if not, branch
00003334                            
00003334                            Title_ChkLevSel:
00003334 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003338 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000333C 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003342 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003346 7002                       		moveq	#2,d0
00003348 6100 EDE2                  		bsr.w	PalLoad2	; load level select pallet
0000334C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003350 7000                       		moveq	#0,d0
00003352 323C 00DF                  		move.w	#$DF,d1
00003356                            
00003356                            Title_ClrScroll:
00003356 22C0                       		move.l	d0,(a1)+
00003358 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000335C                            
0000335C 21C0 F616                  		move.l	d0,($FFFFF616).w
00003360 46FC 2700                  		move	#$2700,sr
00003364 4DF9 00C0 0000             		lea	($C00000).l,a6
0000336A 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003374 323C 03FF                  		move.w	#$3FF,d1
00003378                            
00003378                            Title_ClrVram:
00003378 2C80                       		move.l	d0,(a6)
0000337A 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000337E                            
0000337E 6100 0000                  		bsr.w	LevSelTextLoad
00003382                            
00003382                            ; ---------------------------------------------------------------------------
00003382                            ; Level	Select
00003382                            ; ---------------------------------------------------------------------------
00003382                            
00003382                            LevelSelect:
00003382 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003388 6100 F63A                  		bsr.w	DelayProgram
0000338C 4EB9 0000 0000             		jsr		BuildSprites
00003392 6100 0000                  		bsr.w	LevSelControls
00003396 6100 E132                  		bsr.w	RunPLC_RAM
0000339A 4AB8 F680                  		tst.l	($FFFFF680).w
0000339E 66E2                       		bne.s	LevelSelect
000033A0 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000033A6 67DA                       		beq.s	LevelSelect	; if not, branch
000033A8 3038 FF82                  		move.w	($FFFFFF82).w,d0
000033AC 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000033B0 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000033B2 3038 FF84                  		move.w	($FFFFFF84).w,d0
000033B6 0640 0080                  		addi.w	#$80,d0
000033BA 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000033BE 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000033C0 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000033C4 6700                       		beq.s	LevSel_Ending	; if yes, branch
000033C6 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000033CA 6700                       		beq.s	LevSel_Credits	; if yes, branch
000033CC                            
000033CC                            LevSel_NoCheat:
000033CC 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
000033D0 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000033D2 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000033D6 65AA                       		bcs.s	LevelSelect	; if yes, branch
000033D8                            
000033D8                            LevSel_PlaySnd:
000033D8 6100 DE46                  		bsr.w	PlaySound_Special
000033DC 60A4                       		bra.s	LevelSelect
000033DE                            ; ===========================================================================
000033DE                            
000033DE                            LevSel_Ending:				; XREF: LevelSelect
000033DE 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000033E4 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000033EA                            	;	move.b	#0,($FFFFFE57).w ; clear emeralds
000033EA 4E75                       		rts	
000033EC                            ; ===========================================================================
000033EC                            
000033EC                            LevSel_Credits:				; XREF: LevelSelect
000033EC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000033F2 103C 0091                  		move.b	#$91,d0
000033F6 6100 DE28                  		bsr.w	PlaySound_Special ; play credits music
000033FA 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003400 4E75                       		rts	
00003402                            ; ===========================================================================
00003402                            
00003402                            LevSel_Level_SS:			; XREF: LevelSelect
00003402 D040                       		add.w	d0,d0
00003404 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003408 6B00 FF78                  		bmi.w	LevelSelect
0000340C 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003410 6600                       		bne.s	LevSel_Level	; if not, branch
00003412 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003418 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000341C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003422 7000                       		moveq	#0,d0
00003424 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003428 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000342C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003430 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003434                            	;	move.l	#$00010203,($FFFFFE58).w ; clear emeralds
00003434                            	;	move.l	#$04050000,($FFFFFE5C).w ; clear emeralds
00003434 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)	
0000343C 4E75                       		rts	
0000343E                            ; ===========================================================================
0000343E                            ; ---------------------------------------------------------------------------
0000343E                            ; Level	select - level pointers
0000343E                            ; ---------------------------------------------------------------------------
0000343E                            LSelectPointers:
0000343E                            		incbin	misc\ls_point.bin
00003468                            		even
00003468                            
00003468                            LevSel_Level:				; XREF: LevSel_Level_SS
00003468 0240 3FFF                  		andi.w	#$3FFF,d0
0000346C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003470                            
00003470                            PlayLevel:				; XREF: ROM:00003246j ...
00003470 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003476 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000347C 7000                       		moveq	#0,d0
0000347E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003482 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003486 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000348A 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000348E 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003492                            	;	move.l	#$01020304,($FFFFFE58).w ; clear emeralds
00003492                            	;	move.l	#$05000000,($FFFFFE5C).w ; clear emeralds
00003492 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003496 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
0000349E 103C 00E0                  		move.b	#$E0,d0
000034A2 6100 DD7C                  		bsr.w	PlaySound_Special ; fade out music
000034A6 4E75                       		rts	
000034A8                            ; ===========================================================================
000034A8                            ; ---------------------------------------------------------------------------
000034A8                            ; Level	select codes
000034A8                            ; ---------------------------------------------------------------------------
000034A8                            LevelSelectCode_J:
000034A8                            		incbin	misc\ls_jcode.bin
000034AE                            		even
000034AE                            
000034AE                            LevelSelectCode_US:
000034AE                            		incbin	misc\ls_ucode.bin
000034B4                            		even
000034B4                            ; ===========================================================================
000034B4                            
000034B4                            ; ---------------------------------------------------------------------------
000034B4                            ; Demo mode
000034B4                            ; ---------------------------------------------------------------------------
000034B4                            
000034B4                            Demo:					; XREF: TitleScreen
000034B4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000034BA                            
000034BA                            loc_33B6:				; XREF: loc_33E4
000034BA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000034C0 6100 F502                  		bsr.w	DelayProgram
000034C4 6100 0000                  		bsr.w	DeformBgLayer
000034C8 6100 E4CE                  		bsr.w	PalCycle_Load
000034CC 6100 DFFC                  		bsr.w	RunPLC_RAM
000034D0 3038 D008                  		move.w	($FFFFD008).w,d0
000034D4 5440                       		addq.w	#2,d0
000034D6 31C0 D008                  		move.w	d0,($FFFFD008).w
000034DA 0C40 1C00                  		cmpi.w	#$1C00,d0
000034DE 6500                       		bcs.s	loc_33E4
000034E0 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 0
000034E6 4E75                       		rts	
000034E8                            ; ===========================================================================
000034E8                            
000034E8                            loc_33E4:				; XREF: Demo
000034E8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000034EE 6600 FE44                  		bne.w	Title_ChkLevSel	; if yes, branch
000034F2 4A78 F614                  		tst.w	($FFFFF614).w
000034F6 6600 FFC2                  		bne.w	loc_33B6
000034FA 103C 00E0                  		move.b	#$E0,d0
000034FE 6100 DD20                  		bsr.w	PlaySound_Special ; fade out music
00003502 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003506 0240 0007                  		andi.w	#7,d0
0000350A D040                       		add.w	d0,d0
0000350C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003510 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003514 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003518 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000351E 6500                       		bcs.s	loc_3422	; if yes, branch
00003520 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003526                            
00003526                            loc_3422:
00003526 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
0000352C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003532 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003536 6600                       		bne.s	Demo_Level	; if not, branch
00003538 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000353E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003542 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003546                            
00003546                            Demo_Level:
00003546 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000354C 7000                       		moveq	#0,d0
0000354E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003552 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003556 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000355A 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)		
00003562 4E75                       		rts	
00003564                            ; ===========================================================================
00003564                            ; ---------------------------------------------------------------------------
00003564                            ; Levels used in demos
00003564                            ; ---------------------------------------------------------------------------
00003564                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000356C                            		even
0000356C                            
0000356C                            ; ---------------------------------------------------------------------------
0000356C                            ; Subroutine to	change what you're selecting in the level select
0000356C                            ; ---------------------------------------------------------------------------
0000356C                            
0000356C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000356C                            
0000356C                            
0000356C                            LevSelControls:				; XREF: LevelSelect
0000356C 1238 F605                  		move.b	($FFFFF605).w,d1
00003570 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003574 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003576 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000357A 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000357C                            
0000357C                            LevSel_UpDown:
0000357C 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003582 1238 F604                  		move.b	($FFFFF604).w,d1
00003586 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000358A 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000358C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003590 0801 0000                  		btst	#0,d1		; is up	pressed?
00003594 6700                       		beq.s	LevSel_Down	; if not, branch
00003596 5340                       		subq.w	#1,d0		; move up 1 selection
00003598 6400                       		bcc.s	LevSel_Down
0000359A 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000359C                            
0000359C                            LevSel_Down:
0000359C 0801 0001                  		btst	#1,d1		; is down pressed?
000035A0 6700                       		beq.s	LevSel_Refresh	; if not, branch
000035A2 5240                       		addq.w	#1,d0		; move down 1 selection
000035A4 0C40 0015                  		cmpi.w	#$15,d0
000035A8 6500                       		bcs.s	LevSel_Refresh
000035AA 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000035AC                            
000035AC                            LevSel_Refresh:
000035AC 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
000035B0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000035B4 4E75                       		rts	
000035B6                            ; ===========================================================================
000035B6                            
000035B6                            LevSel_SndTest:				; XREF: LevSelControls
000035B6 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
000035BC 6600                       		bne.s	LevSel_NoMove	; if not, branch
000035BE 1238 F605                  		move.b	($FFFFF605).w,d1
000035C2 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000035C6 6700                       		beq.s	LevSel_NoMove	; if not, branch
000035C8 3038 FF84                  		move.w	($FFFFFF84).w,d0
000035CC 0801 0002                  		btst	#2,d1		; is left pressed?
000035D0 6700                       		beq.s	LevSel_Right	; if not, branch
000035D2 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000035D4 6400                       		bcc.s	LevSel_Right
000035D6 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000035D8                            
000035D8                            LevSel_Right:
000035D8 0801 0003                  		btst	#3,d1		; is right pressed?
000035DC 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000035DE 5240                       		addq.w	#1,d0		; add 1	to sound test
000035E0 0C40 0050                  		cmpi.w	#$50,d0
000035E4 6500                       		bcs.s	LevSel_Refresh2
000035E6 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000035E8                            
000035E8                            LevSel_Refresh2:
000035E8 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000035EC 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000035F0                            
000035F0                            LevSel_NoMove:
000035F0 4E75                       		rts	
000035F2                            ; End of function LevSelControls
000035F2                            
000035F2                            ; ---------------------------------------------------------------------------
000035F2                            ; Subroutine to load level select text
000035F2                            ; ---------------------------------------------------------------------------
000035F2                            
000035F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000035F2                            
000035F2                            
000035F2                            LevSelTextLoad:				; XREF: TitleScreen
000035F2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000035F8 4DF9 00C0 0000             		lea	($C00000).l,a6
000035FE 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00003604 363C E680                  		move.w	#$E680,d3	; VRAM setting
00003608 7214                       		moveq	#$14,d1		; number of lines of text
0000360A                            
0000360A                            loc_34FE:				; XREF: LevSelTextLoad+26j
0000360A 2D44 0004                  		move.l	d4,4(a6)
0000360E 6100 0000                  		bsr.w	LevSel_ChgLine
00003612 0684 0080 0000             		addi.l	#$800000,d4
00003618 51C9 FFF0                  		dbf	d1,loc_34FE
0000361C 7000                       		moveq	#0,d0
0000361E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003622 3200                       		move.w	d0,d1
00003624 283C 6210 0003             		move.l	#$62100003,d4
0000362A EF48                       		lsl.w	#7,d0
0000362C 4840                       		swap	d0
0000362E D880                       		add.l	d0,d4
00003630 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003636 E749                       		lsl.w	#3,d1
00003638 3001                       		move.w	d1,d0
0000363A D241                       		add.w	d1,d1
0000363C D240                       		add.w	d0,d1
0000363E D2C1                       		adda.w	d1,a1
00003640 363C C680                  		move.w	#$C680,d3
00003644 2D44 0004                  		move.l	d4,4(a6)
00003648 6100 0000                  		bsr.w	LevSel_ChgLine
0000364C 363C E680                  		move.w	#$E680,d3
00003650 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003656 6600                       		bne.s	loc_3550
00003658 363C C680                  		move.w	#$C680,d3
0000365C                            
0000365C                            loc_3550:
0000365C 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003666 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000366A 0640 0080                  		addi.w	#$80,d0
0000366E                            
0000366E                            DRAWNUMBER:
0000366E 1400                       		move.b	d0,d2
00003670 E808                       		lsr.b	#4,d0
00003672 6100 0000                  		bsr.w	LevSel_ChgSnd
00003676 1002                       		move.b	d2,d0
00003678 6100 0000                  		bsr.w	LevSel_ChgSnd
0000367C 4E75                       		rts	
0000367E                            ; End of function LevSelTextLoad
0000367E                            
0000367E                            
0000367E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000367E                            
0000367E                            
0000367E                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000367E 0240 000F                  		andi.w	#$F,d0
00003682 0C00 000A                  		cmpi.b	#$A,d0
00003686 6500                       		bcs.s	loc_3580
00003688 5E00                       		addi.b	#7,d0
0000368A                            
0000368A                            loc_3580:
0000368A D043                       		add.w	d3,d0
0000368C 3C80                       		move.w	d0,(a6)
0000368E 4E75                       		rts	
00003690                            ; End of function LevSel_ChgSnd
00003690                            
00003690                            
00003690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003690                            
00003690                            
00003690                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003690 7417                       		moveq	#$17,d2		; number of characters per line
00003692                            
00003692                            loc_3588:
00003692 7000                       		moveq	#0,d0
00003694 1019                       		move.b	(a1)+,d0
00003696 6A00                       		bpl.s	loc_3598
00003698 3CBC 0000                  		move.w	#0,(a6)
0000369C 51CA FFF4                  		dbf	d2,loc_3588
000036A0 4E75                       		rts	
000036A2                            ; ===========================================================================
000036A2                            
000036A2                            loc_3598:				; XREF: LevSel_ChgLine
000036A2 D043                       		add.w	d3,d0
000036A4 3C80                       		move.w	d0,(a6)
000036A6 51CA FFEA                  		dbf	d2,loc_3588
000036AA 4E75                       		rts	
000036AC                            ; End of function LevSel_ChgLine
000036AC                            
000036AC                            ; ===========================================================================
000036AC                            ; ---------------------------------------------------------------------------
000036AC                            ; Level	select menu text
000036AC                            ; ---------------------------------------------------------------------------
000036AC                            LevelMenuText:	incbin	misc\menutext.bin
000038A4                            		even
000038A4                            ; ---------------------------------------------------------------------------
000038A4                            ; Music	playlist
000038A4                            ; ---------------------------------------------------------------------------
000038A4                            MusicList:	incbin	misc\muslist1.bin
000038AC                            		even
000038AC                            ; ===========================================================================
000038AC                            
000038AC                            ; ---------------------------------------------------------------------------
000038AC                            ; Level
000038AC                            ; ---------------------------------------------------------------------------
000038AC                            
000038AC                            Level:					; XREF: GameModeArray
000038AC 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000038B2 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
000038B8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038BC 6B00                       		bmi.s	loc_37B6
000038BE 103C 00E0                  		move.b	#$E0,d0
000038C2 6100 D95C                  		bsr.w	PlaySound_Special ; fade out music
000038C6                            
000038C6                            loc_37B6:
000038C6 6100 DBF4                  		bsr.w	ClearPLC
000038CA 6100 E5BE                  		bsr.w	Pal_FadeFrom
000038CE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038D2 6B00                       		bmi.s	Level_ClrRam
000038D4 46FC 2700                  		move	#$2700,sr
000038D8 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
000038E2 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
000038E8 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
000038EE 4EB8 143A                          jsr LoadUncArt          ; load uncompressed art
000038F2 46FC 2300                  		move	#$2300,sr
000038F6 7000                       		moveq	#0,d0
000038F8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000038FC E948                       		lsl.w	#4,d0
000038FE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003904 45F2 0000                  		lea	(a2,d0.w),a2
00003908 7000                       		moveq	#0,d0
0000390A 1012                       		move.b	(a2),d0
0000390C 6700                       		beq.s	loc_37FC
0000390E 6100 DB4E                  		bsr.w	LoadPLC		; load level patterns
00003912                            
00003912                            loc_37FC:
00003912 7001                       		moveq	#1,d0
00003914 6100 DB48                  		bsr.w	LoadPLC		; load standard	patterns
00003918                            
00003918                            Level_ClrRam:
00003918 43F8 D000                  		lea	($FFFFD000).w,a1
0000391C 7000                       		moveq	#0,d0
0000391E 323C 07FF                  		move.w	#$7FF,d1
00003922                            
00003922                            Level_ClrObjRam:
00003922 22C0                       		move.l	d0,(a1)+
00003924 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003928                            
00003928 43F8 F628                  		lea	($FFFFF628).w,a1
0000392C 7000                       		moveq	#0,d0
0000392E 323C 0015                  		move.w	#$15,d1
00003932                            
00003932                            Level_ClrVars:
00003932 22C0                       		move.l	d0,(a1)+
00003934 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003938                            
00003938 43F8 F700                  		lea	($FFFFF700).w,a1
0000393C 7000                       		moveq	#0,d0
0000393E 323C 003F                  		move.w	#$3F,d1
00003942                            
00003942                            Level_ClrVars2:
00003942 22C0                       		move.l	d0,(a1)+
00003944 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003948                            
00003948 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000394C 7000                       		moveq	#0,d0
0000394E 323C 0047                  		move.w	#$47,d1
00003952                            
00003952                            Level_ClrVars3:
00003952 22C0                       		move.l	d0,(a1)+
00003954 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003958 46FC 2700                  		move	#$2700,sr
0000395C 6100 D79C                  		bsr.w	ClearScreen
00003960 4DF9 00C0 0004             		lea	($C00004).l,a6
00003966 3CBC 8B03                  		move.w	#$8B03,(a6)
0000396A 3CBC 8230                  		move.w	#$8230,(a6)
0000396E 3CBC 8407                  		move.w	#$8407,(a6)
00003972 3CBC 857C                  		move.w	#$857C,(a6)
00003976 3CBC 9001                  		move.w	#$9001,(a6)
0000397A 3CBC 8004                  		move.w	#$8004,(a6)
0000397E 3CBC 8720                  		move.w	#$8720,(a6)
00003982 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003988 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000398C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003992 6600                       		bne.s	Level_LoadPal	; if not, branch
00003994 3CBC 8014                  		move.w	#$8014,(a6)
00003998 7000                       		moveq	#0,d0
0000399A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000399E D040                       		add.w	d0,d0
000039A0 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000039A6 3031 0000                  		move.w	(a1,d0.w),d0
000039AA 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
000039AE 31C0 F648                  		move.w	d0,($FFFFF648).w
000039B2 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000039B6 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000039BA 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000039BE 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000039C4                            
000039C4                            Level_LoadPal:
000039C4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000039CA 46FC 2300                  		move	#$2300,sr
000039CE 7003                       		moveq	#3,d0
000039D0 6100 E75A                  		bsr.w	PalLoad2	; load Sonic's pallet line
000039D4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000039DA 6600                       		bne.s	Level_GetBgm	; if not, branch
000039DC 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000039DE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000039E4 6600                       		bne.s	Level_WaterPal	; if not, branch
000039E6 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000039E8                            
000039E8                            Level_WaterPal:
000039E8 6100 E75A                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000039EC 4A38 FE30                  		tst.b	($FFFFFE30).w
000039F0 6700                       		beq.s	Level_GetBgm
000039F2 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000039F8                            
000039F8                            Level_GetBgm:
000039F8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000039FC 6B00                       		bmi.s	loc_3946
000039FE 7000                       		moveq	#0,d0
00003A00 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A04 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
00003A0A 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
00003A0C 7005                       		moveq	#5,d0		; move 5 to d0
00003A0E                            
00003A0E                            Level_BgmNotLZ4:
00003A0E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00003A14 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003A16 7006                       		moveq	#6,d0		; move 6 to d0
00003A18                            
00003A18                            Level_PlayBgm:
00003A18                            ;		lea	(MusicList).l,a1 ; load	music playlist
00003A18                            ;		move.b	(a1,d0.w),d0	; add d0 to a1
00003A18                            ;		bsr.w	PlaySound	; play music
00003A18 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003A1E                            
00003A1E                            Level_TtlCard:
00003A1E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003A24 6100 EF9E                  		bsr.w	DelayProgram
00003A28 4EB9 0000 0000             		jsr	ObjectsLoad
00003A2E 4EB9 0000 0000             		jsr	BuildSprites
00003A34 6100 DA94                  		bsr.w	RunPLC_RAM
00003A38 3038 D108                  		move.w	($FFFFD108).w,d0
00003A3C B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003A40 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003A42 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003A46 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003A48 4EB9 0000 0000             		jsr	Hud_Base
00003A4E                            
00003A4E                            loc_3946:
00003A4E 7003                       		moveq	#3,d0
00003A50 6100 E6BE                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003A54 6100 0000                  		bsr.w	LevelSizeLoad
00003A58 6100 0000                  		bsr.w	DeformBgLayer
00003A5C 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003A62 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
00003A66 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003A6A 6100 0000                  		bsr.w	LoadTilesFromStart
00003A6E 4EB9 0000 0000             		jsr	FloorLog_Unk
00003A74 6100 0000                  		bsr.w	ColIndexLoad
00003A78 6100 0000                  		bsr.w	LZWaterEffects
00003A7C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003A82 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A86 6B00                       		bmi.s	Level_ChkDebug
00003A88 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003A8E 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
00003A94                            		
00003A94                            Level_ChkDebug:
00003A94 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003A98 6700                       		beq.s	Level_ChkWater	; if not, branch
00003A9A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003AA0 6700                       		beq.s	Level_ChkWater	; if not, branch
00003AA2 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003AA8                            
00003AA8                            Level_ChkWater:
00003AA8 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003AAE 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003AB4 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00003ABA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003AC0 6600                       		bne.s	Level_LoadObj	; if not, branch
00003AC2 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003AC8 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003ACE 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003AD4 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003ADA                            
00003ADA                            Level_LoadObj:
00003ADA 4EB9 0000 0000             		jsr	ObjPosLoad
00003AE0 11FC 0000 870C             		move.b	#0,(Rings_manager_routine).w
00003AE6 4EB9 0000 0000             		jsr	RingsManager				
00003AEC 4EB9 0000 0000             		jsr	ObjectsLoad
00003AF2 4EB9 0000 0000             		jsr	BuildSprites
00003AF8 7000                       		moveq	#0,d0
00003AFA 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003AFE 6600                       		bne.s	loc_39E8	; if yes, branch
00003B00 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003B04 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003B08 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003B0C                            
00003B0C                            loc_39E8:
00003B0C 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003B10 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003B14 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003B18 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003B1C 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00003B20 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003B24 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003B28 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003B2C 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00003B30 6100 0000                  		bsr.w	OscillateNumInit
00003B34 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003B3A 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003B40 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003B46 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003B4C 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003B52 7000                       		moveq	#0,d0
00003B54 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B58 E548                       		lsl.w	#2,d0
00003B5A 2271 0000                  		movea.l	(a1,d0.w),a1
00003B5E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B62 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003B64 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003B6A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003B6E 5340                       		subq.w	#1,d0
00003B70 E548                       		lsl.w	#2,d0
00003B72 2271 0000                  		movea.l	(a1,d0.w),a1
00003B76                            
00003B76                            Level_Demo:
00003B76 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003B7C 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003B80 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003B86 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B8A 6A00                       		bpl.s	Level_ChkWaterPal
00003B8C 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003B92 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003B98 6600                       		bne.s	Level_ChkWaterPal
00003B9A 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003BA0                            
00003BA0                            Level_ChkWaterPal:
00003BA0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003BA6 6600                       		bne.s	Level_Delay	; if not, branch
00003BA8 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003BAA 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003BB0 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003BB2 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003BB4                            
00003BB4                            Level_WaterPal2:
00003BB4 6100 E5AA                  		bsr.w	PalLoad4_Water
00003BB8                            
00003BB8                            Level_Delay:
00003BB8 323C 0003                  		move.w	#3,d1
00003BBC                            
00003BBC                            Level_DelayLoop:
00003BBC 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003BC2 6100 EE00                  		bsr.w	DelayProgram
00003BC6 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003BCA                            
00003BCA 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003BD0 6100 E23C                  		bsr.w	Pal_FadeTo2
00003BD4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003BD8 6B00                       		bmi.s	Level_ClrCardArt
00003BDA 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003BDE 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003BE2 5838 D124                  		addq.b	#4,($FFFFD124).w
00003BE6 5838 D164                  		addq.b	#4,($FFFFD164).w
00003BEA 6000                       		bra.s	Level_StartGame
00003BEC                            ; ===========================================================================
00003BEC                            
00003BEC                            Level_ClrCardArt:
00003BEC 7002                       		moveq	#2,d0
00003BEE 4EB9 0000 145E             		jsr	(LoadPLC).l	; load explosion patterns
00003BF4 7000                       		moveq	#0,d0
00003BF6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003BFA 0640 0015                  		addi.w	#$15,d0
00003BFE 4EB9 0000 145E             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003C04                            
00003C04                            Level_StartGame:
00003C04 11FC 0001 870D             		move.b	#1,(Level_started_flag).w
00003C0A 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003C10                            
00003C10                            ; ---------------------------------------------------------------------------
00003C10                            ; Main level loop (when	all title card and loading sequences are finished)
00003C10                            ; ---------------------------------------------------------------------------
00003C10                            
00003C10                            Level_MainLoop:
00003C10 6100 D61A                  		bsr.w	PauseGame
00003C14 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003C1A 6100 EDA8                  		bsr.w	DelayProgram
00003C1E 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003C22 6100 0000                  		bsr.w	MoveSonicInDemo
00003C26 6100 0000                  		bsr.w	LZWaterEffects
00003C2A 4EB9 0000 0000             		jsr	ObjectsLoad
00003C30 4A78 FE08                  		tst.w	($FFFFFE08).w
00003C34 6600                       		bne.s	loc_3B10
00003C36 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003C3C 6400                       		bcc.s	loc_3B14
00003C3E                            
00003C3E                            loc_3B10:
00003C3E 6100 0000                  		bsr.w	DeformBgLayer
00003C42                            
00003C42                            loc_3B14:
00003C42 4EB9 0000 0000             		jsr	BuildSprites
00003C48 4EB9 0000 0000             		jsr	ObjPosLoad
00003C4E 4EB9 0000 0000             		jsr	RingsManager
00003C54 6100 DD42                  		bsr.w	PalCycle_Load
00003C58 6100 D870                  		bsr.w	RunPLC_RAM
00003C5C 6100 0000                  		bsr.w	OscillateNumDo
00003C60 6100 0000                  		bsr.w	ChangeRingFrame
00003C64 6100 0000                  		bsr.w	SignpostArtLoad
00003C68 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C6E 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003C70 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003C74 6600 FC36                  		bne.w	Level		; if yes, branch
00003C78 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003C7E 6700 FF90                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003C82 4E75                       		rts	
00003C84                            ; ===========================================================================
00003C84                            
00003C84                            Level_ChkDemo:				; XREF: Level_MainLoop
00003C84 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003C88 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003C8A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003C8E 6700                       		beq.s	Level_EndDemo	; if not, branch
00003C90 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C96 6700 FF78                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003C9A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003CA0 4E75                       		rts	
00003CA2                            ; ===========================================================================
00003CA2                            
00003CA2                            Level_EndDemo:				; XREF: Level_ChkDemo
00003CA2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003CA8 6600                       		bne.s	loc_3B88	; if not, branch
00003CAA 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003CB0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003CB4 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003CB6 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003CBC                            
00003CBC                            loc_3B88:
00003CBC 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003CC2 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003CC8 4278 F794                  		clr.w	($FFFFF794).w
00003CCC                            
00003CCC                            loc_3B98:
00003CCC 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003CD2 6100 ECF0                  		bsr.w	DelayProgram
00003CD6 6100 0000                  		bsr.w	MoveSonicInDemo
00003CDA 4EB9 0000 0000             		jsr	ObjectsLoad
00003CE0 4EB9 0000 0000             		jsr	BuildSprites
00003CE6 4EB9 0000 0000             		jsr	ObjPosLoad
00003CEC 5378 F794                  		subq.w	#1,($FFFFF794).w
00003CF0 6A00                       		bpl.s	loc_3BC8
00003CF2 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003CF8 6100 E1B0                  		bsr.w	Pal_FadeOut
00003CFC                            
00003CFC                            loc_3BC8:
00003CFC 4A78 F614                  		tst.w	($FFFFF614).w
00003D00 66CA                       		bne.s	loc_3B98
00003D02 4E75                       		rts	
00003D04                            ; ===========================================================================
00003D04                            ; ---------------------------------------------------------------------------
00003D04                            ; Subroutine to	do special water effects in Labyrinth Zone
00003D04                            ; ---------------------------------------------------------------------------
00003D04                            
00003D04                            LZWaterEffects:				; XREF: Level
00003D04 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003D0A 6600                       		bne.s	locret_3C28	; if not, branch
00003D0C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003D12 6400                       		bcc.s	LZMoveWater
00003D14 6100 0000                  		bsr.w	LZWindTunnels
00003D18 6100 0000                  		bsr.w	LZWaterSlides
00003D1C 6100 0000                  		bsr.w	LZDynamicWater
00003D20                            
00003D20                            LZMoveWater:
00003D20 4238 F64E                  		clr.b	($FFFFF64E).w
00003D24 7000                       		moveq	#0,d0
00003D26 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003D2A E248                       		lsr.w	#1,d0
00003D2C D078 F648                  		add.w	($FFFFF648).w,d0
00003D30 31C0 F646                  		move.w	d0,($FFFFF646).w
00003D34 3038 F646                  		move.w	($FFFFF646).w,d0
00003D38 9078 F704                  		sub.w	($FFFFF704).w,d0
00003D3C 6400                       		bcc.s	loc_3C1A
00003D3E 4A40                       		tst.w	d0
00003D40 6A00                       		bpl.s	loc_3C1A
00003D42 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003D48 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003D4E                            
00003D4E                            loc_3C1A:
00003D4E 0C40 00DF                  		cmpi.w	#$DF,d0
00003D52 6500                       		bcs.s	loc_3C24
00003D54 303C 00DF                  		move.w	#$DF,d0
00003D58                            
00003D58                            loc_3C24:
00003D58 11C0 F625                  		move.b	d0,($FFFFF625).w
00003D5C                            
00003D5C                            locret_3C28:
00003D5C 4E75                       		rts	
00003D5E                            ; ===========================================================================
00003D5E                            ; ---------------------------------------------------------------------------
00003D5E                            ; Labyrinth default water heights
00003D5E                            ; ---------------------------------------------------------------------------
00003D5E                            WaterHeight:	incbin	misc\lz_heigh.bin
00003D66                            		even
00003D66                            ; ===========================================================================
00003D66                            
00003D66                            ; ---------------------------------------------------------------------------
00003D66                            ; Labyrinth dynamic water routines
00003D66                            ; ---------------------------------------------------------------------------
00003D66                            
00003D66                            LZDynamicWater:				; XREF: LZWaterEffects
00003D66 7000                       		moveq	#0,d0
00003D68 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D6C D040                       		add.w	d0,d0
00003D6E 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003D72 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003D76 7200                       		moveq	#0,d1
00003D78 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003D7C 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003D80 9078 F648                  		sub.w	($FFFFF648).w,d0
00003D84 6700                       		beq.s	locret_3C5A
00003D86 6400                       		bcc.s	loc_3C56
00003D88 4441                       		neg.w	d1
00003D8A                            
00003D8A                            loc_3C56:
00003D8A D378 F648                  		add.w	d1,($FFFFF648).w
00003D8E                            
00003D8E                            locret_3C5A:
00003D8E 4E75                       		rts	
00003D90                            ; ===========================================================================
00003D90 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003D92 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003D94 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003D96 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003D98                            ; ===========================================================================
00003D98                            
00003D98                            DynWater_LZ1:				; XREF: DynWater_Index
00003D98 3038 F700                  		move.w	($FFFFF700).w,d0
00003D9C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003DA0 6600                       		bne.s	loc_3CD0
00003DA2 323C 00B8                  		move.w	#$B8,d1
00003DA6 0C40 0600                  		cmpi.w	#$600,d0
00003DAA 6500                       		bcs.s	loc_3CB4
00003DAC 323C 0108                  		move.w	#$108,d1
00003DB0 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003DB6 6500                       		bcs.s	loc_3CBA
00003DB8 0C40 0C00                  		cmpi.w	#$C00,d0
00003DBC 6500                       		bcs.s	loc_3CB4
00003DBE 323C 0318                  		move.w	#$318,d1
00003DC2 0C40 1080                  		cmpi.w	#$1080,d0
00003DC6 6500                       		bcs.s	loc_3CB4
00003DC8 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003DCE 323C 05C8                  		move.w	#$5C8,d1
00003DD2 0C40 1380                  		cmpi.w	#$1380,d0
00003DD6 6500                       		bcs.s	loc_3CB4
00003DD8 323C 03A8                  		move.w	#$3A8,d1
00003DDC B278 F648                  		cmp.w	($FFFFF648).w,d1
00003DE0 6600                       		bne.s	loc_3CB4
00003DE2 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003DE8                            
00003DE8                            loc_3CB4:
00003DE8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DEC 4E75                       		rts	
00003DEE                            ; ===========================================================================
00003DEE                            
00003DEE                            loc_3CBA:				; XREF: DynWater_LZ1
00003DEE 0C40 0C80                  		cmpi.w	#$C80,d0
00003DF2 65F4                       		bcs.s	loc_3CB4
00003DF4 323C 00E8                  		move.w	#$E8,d1
00003DF8 0C40 1500                  		cmpi.w	#$1500,d0
00003DFC 65EA                       		bcs.s	loc_3CB4
00003DFE 323C 0108                  		move.w	#$108,d1
00003E02 60E4                       		bra.s	loc_3CB4
00003E04                            ; ===========================================================================
00003E04                            
00003E04                            loc_3CD0:				; XREF: DynWater_LZ1
00003E04 5302                       		subq.b	#1,d2
00003E06 6600                       		bne.s	locret_3CF4
00003E08 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003E0E 6400                       		bcc.s	locret_3CF4
00003E10 323C 03A8                  		move.w	#$3A8,d1
00003E14 0C40 1300                  		cmpi.w	#$1300,d0
00003E18 6500                       		bcs.s	loc_3CF0
00003E1A 323C 0108                  		move.w	#$108,d1
00003E1E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003E24                            
00003E24                            loc_3CF0:
00003E24 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E28                            
00003E28                            locret_3CF4:
00003E28 4E75                       		rts	
00003E2A                            ; ===========================================================================
00003E2A                            
00003E2A                            DynWater_LZ2:				; XREF: DynWater_Index
00003E2A 3038 F700                  		move.w	($FFFFF700).w,d0
00003E2E 323C 0328                  		move.w	#$328,d1
00003E32 0C40 0500                  		cmpi.w	#$500,d0
00003E36 6500                       		bcs.s	loc_3D12
00003E38 323C 03C8                  		move.w	#$3C8,d1
00003E3C 0C40 0B00                  		cmpi.w	#$B00,d0
00003E40 6500                       		bcs.s	loc_3D12
00003E42 323C 0428                  		move.w	#$428,d1
00003E46                            
00003E46                            loc_3D12:
00003E46 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E4A 4E75                       		rts	
00003E4C                            ; ===========================================================================
00003E4C                            
00003E4C                            DynWater_LZ3:				; XREF: DynWater_Index
00003E4C 3038 F700                  		move.w	($FFFFF700).w,d0
00003E50 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003E54 6600                       		bne.s	loc_3D5E
00003E56 323C 0900                  		move.w	#$900,d1
00003E5A 0C40 0600                  		cmpi.w	#$600,d0
00003E5E 6500                       		bcs.s	loc_3D54
00003E60 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003E66 6500                       		bcs.s	loc_3D54
00003E68 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003E6E 6400                       		bcc.s	loc_3D54
00003E70 323C 04C8                  		move.w	#$4C8,d1
00003E74 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003E7A 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003E80 303C 00B7                  		move.w	#$B7,d0
00003E84 6100 D39A                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003E88                            
00003E88                            loc_3D54:
00003E88 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E8C 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E90 4E75                       		rts	
00003E92                            ; ===========================================================================
00003E92                            
00003E92                            loc_3D5E:				; XREF: DynWater_LZ3
00003E92 5302                       		subq.b	#1,d2
00003E94 6600                       		bne.s	loc_3DA8
00003E96 323C 04C8                  		move.w	#$4C8,d1
00003E9A 0C40 0770                  		cmpi.w	#$770,d0
00003E9E 6500                       		bcs.s	loc_3DA2
00003EA0 323C 0308                  		move.w	#$308,d1
00003EA4 0C40 1400                  		cmpi.w	#$1400,d0
00003EA8 6500                       		bcs.s	loc_3DA2
00003EAA 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003EB0 6700                       		beq.s	loc_3D8E
00003EB2 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003EB8 6400                       		bcc.s	loc_3D8E
00003EBA 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003EC0 6400                       		bcc.s	loc_3DA2
00003EC2                            
00003EC2                            loc_3D8E:
00003EC2 323C 0508                  		move.w	#$508,d1
00003EC6 31C1 F648                  		move.w	d1,($FFFFF648).w
00003ECA 0C40 1770                  		cmpi.w	#$1770,d0
00003ECE 6500                       		bcs.s	loc_3DA2
00003ED0 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003ED6                            
00003ED6                            loc_3DA2:
00003ED6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003EDA 4E75                       		rts	
00003EDC                            ; ===========================================================================
00003EDC                            
00003EDC                            loc_3DA8:
00003EDC 5302                       		subq.b	#1,d2
00003EDE 6600                       		bne.s	loc_3DD2
00003EE0 323C 0508                  		move.w	#$508,d1
00003EE4 0C40 1860                  		cmpi.w	#$1860,d0
00003EE8 6500                       		bcs.s	loc_3DCC
00003EEA 323C 0188                  		move.w	#$188,d1
00003EEE 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003EF2 6400                       		bcc.s	loc_3DC6
00003EF4 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003EF8 6600                       		bne.s	loc_3DCC
00003EFA                            
00003EFA                            loc_3DC6:
00003EFA 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003F00                            
00003F00                            loc_3DCC:
00003F00 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F04 4E75                       		rts	
00003F06                            ; ===========================================================================
00003F06                            
00003F06                            loc_3DD2:
00003F06 5302                       		subq.b	#1,d2
00003F08 6600                       		bne.s	loc_3E0E
00003F0A 323C 0188                  		move.w	#$188,d1
00003F0E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003F12 6500                       		bcs.s	loc_3E04
00003F14 323C 0900                  		move.w	#$900,d1
00003F18 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003F1C 6500                       		bcs.s	loc_3E04
00003F1E 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003F24 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003F2A 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003F30 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003F36 4E75                       		rts	
00003F38                            ; ===========================================================================
00003F38                            
00003F38                            loc_3E04:
00003F38 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F3C 31C1 F648                  		move.w	d1,($FFFFF648).w
00003F40 4E75                       		rts	
00003F42                            ; ===========================================================================
00003F42                            
00003F42                            loc_3E0E:
00003F42 0C40 1E00                  		cmpi.w	#$1E00,d0
00003F46 6500                       		bcs.s	locret_3E1A
00003F48 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003F4E                            
00003F4E                            locret_3E1A:
00003F4E 4E75                       		rts	
00003F50                            ; ===========================================================================
00003F50                            
00003F50                            DynWater_SBZ3:				; XREF: DynWater_Index
00003F50 323C 0228                  		move.w	#$228,d1
00003F54 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003F5A 6500                       		bcs.s	loc_3E2C
00003F5C 323C 04C8                  		move.w	#$4C8,d1
00003F60                            
00003F60                            loc_3E2C:
00003F60 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F64 4E75                       		rts
00003F66                            
00003F66                            ; ---------------------------------------------------------------------------
00003F66                            ; Labyrinth Zone "wind tunnels"	subroutine
00003F66                            ; ---------------------------------------------------------------------------
00003F66                            
00003F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F66                            
00003F66                            
00003F66                            LZWindTunnels:				; XREF: LZWaterEffects
00003F66 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003F6A 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003F6E 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003F74 7000                       		moveq	#0,d0
00003F76 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F7A E748                       		lsl.w	#3,d0
00003F7C D4C0                       		adda.w	d0,a2
00003F7E 7200                       		moveq	#0,d1
00003F80 4A38 FE11                  		tst.b	($FFFFFE11).w
00003F84 6600                       		bne.s	loc_3E56
00003F86 7201                       		moveq	#1,d1
00003F88 514A                       		subq.w	#8,a2
00003F8A                            
00003F8A                            loc_3E56:
00003F8A 43F8 D000                  		lea	($FFFFD000).w,a1
00003F8E                            
00003F8E                            LZWind_Loop:
00003F8E 3029 0008                  		move.w	8(a1),d0
00003F92 B052                       		cmp.w	(a2),d0
00003F94 6500 0000                  		bcs.w	loc_3EF4
00003F98 B06A 0004                  		cmp.w	4(a2),d0
00003F9C 6400 0000                  		bcc.w	loc_3EF4
00003FA0 3429 000C                  		move.w	$C(a1),d2
00003FA4 B46A 0002                  		cmp.w	2(a2),d2
00003FA8 6500                       		bcs.s	loc_3EF4
00003FAA B46A 0006                  		cmp.w	6(a2),d2
00003FAE 6400                       		bcc.s	loc_3EF4
00003FB0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003FB4 0200 003F                  		andi.b	#$3F,d0
00003FB8 6600                       		bne.s	loc_3E90
00003FBA 303C 00D0                  		move.w	#$D0,d0
00003FBE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003FC4                            
00003FC4                            loc_3E90:
00003FC4 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003FC8 6600 0000                  		bne.w	locret_3F0A
00003FCC 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003FD2 6400                       		bcc.s	loc_3F06
00003FD4 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003FDA 0440 0080                  		subi.w	#$80,d0
00003FDE B052                       		cmp.w	(a2),d0
00003FE0 6400                       		bcc.s	LZWind_Move
00003FE2 7002                       		moveq	#2,d0
00003FE4 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003FEA 6600                       		bne.s	loc_3EBA
00003FEC 4440                       		neg.w	d0
00003FEE                            
00003FEE                            loc_3EBA:
00003FEE D169 000C                  		add.w	d0,$C(a1)
00003FF2                            
00003FF2                            LZWind_Move:
00003FF2 5869 0008                  		addq.w	#4,8(a1)
00003FF6 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003FFC 337C 0000 0012             		move.w	#0,$12(a1)
00004002 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004008 08E9 0001 0022             		bset	#1,$22(a1)
0000400E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004014 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004016 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000401A                            
0000401A                            LZWind_MoveDown:
0000401A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004020 6700                       		beq.s	locret_3EF2	; if not, branch
00004022 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004026                            
00004026                            locret_3EF2:
00004026 4E75                       		rts	
00004028                            ; ===========================================================================
00004028                            
00004028                            loc_3EF4:				; XREF: LZWindTunnels
00004028 504A                       		addq.w	#8,a2
0000402A 51C9 FF62                  		dbf	d1,LZWind_Loop
0000402E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004032 6700                       		beq.s	locret_3F0A
00004034 137C 0000 001C             		move.b	#0,$1C(a1)
0000403A                            
0000403A                            loc_3F06:
0000403A 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000403E                            
0000403E                            locret_3F0A:
0000403E 4E75                       		rts	
00004040                            ; End of function LZWindTunnels
00004040                            
00004040                            ; ===========================================================================
00004040 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004048 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $AA0
0000405A 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004068                            					; XREF: LZWindTunnels
00004068                            		even
00004068                            
00004068                            ; ---------------------------------------------------------------------------
00004068                            ; Labyrinth Zone water slide subroutine
00004068                            ; ---------------------------------------------------------------------------
00004068                            
00004068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004068                            
00004068                            
00004068                            LZWaterSlides:				; XREF: LZWaterEffects
00004068 43F8 D000                  		lea	($FFFFD000).w,a1
0000406C 0829 0001 0022             		btst	#1,$22(a1)
00004072 6600                       		bne.s	loc_3F6A
00004074 3029 000C                  		move.w	$C(a1),d0
00004078 E248                       		lsr.w	#1,d0
0000407A 0240 0380                  		andi.w	#$380,d0
0000407E 1229 0008                  		move.b	8(a1),d1
00004082 0241 007F                  		andi.w	#$7F,d1
00004086 D041                       		add.w	d1,d0
00004088 45F8 A400                  		lea	($FFFFA400).w,a2
0000408C 1032 0000                  		move.b	(a2,d0.w),d0
00004090 45FA 0000                  		lea	byte_3FCF(pc),a2
00004094 7206                       		moveq	#6,d1
00004096                            
00004096                            loc_3F62:
00004096 B022                       		cmp.b	-(a2),d0
00004098 57C9 FFFC                  		dbeq	d1,loc_3F62
0000409C 6700                       		beq.s	LZSlide_Move
0000409E                            
0000409E                            loc_3F6A:
0000409E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000040A2 6700                       		beq.s	locret_3F7A
000040A4 337C 0005 003E             		move.w	#5,$3E(a1)
000040AA 4238 F7CA                  		clr.b	($FFFFF7CA).w
000040AE                            
000040AE                            locret_3F7A:
000040AE 4E75                       		rts	
000040B0                            ; ===========================================================================
000040B0                            
000040B0                            LZSlide_Move:				; XREF: LZWaterSlides
000040B0 0C41 0003                  		cmpi.w	#3,d1
000040B4 6400                       		bcc.s	loc_3F84
000040B6 4E71                       		nop	
000040B8                            
000040B8                            loc_3F84:
000040B8 08A9 0000 0022             		bclr	#0,$22(a1)
000040BE 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000040C2 1340 0020                  		move.b	d0,$20(a1)
000040C6 6A00                       		bpl.s	loc_3F9A
000040C8 08E9 0000 0022             		bset	#0,$22(a1)
000040CE                            
000040CE                            loc_3F9A:
000040CE 4229 0021                  		clr.b	$21(a1)
000040D2 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000040D8 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000040DE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000040E2 0200 001F                  		andi.b	#$1F,d0
000040E6 6600                       		bne.s	locret_3FBE
000040E8 303C 00D0                  		move.w	#$D0,d0
000040EC 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play water sound
000040F2                            
000040F2                            locret_3FBE:
000040F2 4E75                       		rts	
000040F4                            ; End of function LZWaterSlides
000040F4                            
000040F4                            ; ===========================================================================
000040F4 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004103 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004104                            		even
00004104                            
00004104                            ; ---------------------------------------------------------------------------
00004104                            ; Subroutine to	move Sonic in demo mode
00004104                            ; ---------------------------------------------------------------------------
00004104                            
00004104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004104                            
00004104                            
00004104                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004104 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004108 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000410A 4E75                       		rts	
0000410C                            ; ===========================================================================
0000410C                            
0000410C                            ; This is an unused subroutine for recording a demo
0000410C                            
0000410C                            MoveDemo_Record:
0000410C 43F9 0008 0000             		lea	($80000).l,a1
00004112 3038 F790                  		move.w	($FFFFF790).w,d0
00004116 D2C0                       		adda.w	d0,a1
00004118 1038 F604                  		move.b	($FFFFF604).w,d0
0000411C B011                       		cmp.b	(a1),d0
0000411E 6600                       		bne.s	loc_3FFA
00004120 5229 0001                  		addq.b	#1,1(a1)
00004124 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000412A 6700                       		beq.s	loc_3FFA
0000412C 4E75                       		rts	
0000412E                            ; ===========================================================================
0000412E                            
0000412E                            loc_3FFA:				; XREF: MoveDemo_Record
0000412E 1340 0002                  		move.b	d0,2(a1)
00004132 137C 0000 0003             		move.b	#0,3(a1)
00004138 5478 F790                  		addq.w	#2,($FFFFF790).w
0000413C 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004142 4E75                       		rts	
00004144                            ; ===========================================================================
00004144                            
00004144                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004144 4A38 F604                  		tst.b	($FFFFF604).w
00004148 6A00                       		bpl.s	loc_4022
0000414A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000414E 6B00                       		bmi.s	loc_4022
00004150 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004156                            
00004156                            loc_4022:
00004156 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000415C 7000                       		moveq	#0,d0
0000415E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004162 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004168 6600                       		bne.s	loc_4038
0000416A 7006                       		moveq	#6,d0
0000416C                            
0000416C                            loc_4038:
0000416C E548                       		lsl.w	#2,d0
0000416E 2271 0000                  		movea.l	(a1,d0.w),a1
00004172 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004176 6A00                       		bpl.s	loc_4056
00004178 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000417E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004182 5340                       		subq.w	#1,d0
00004184 E548                       		lsl.w	#2,d0
00004186 2271 0000                  		movea.l	(a1,d0.w),a1
0000418A                            
0000418A                            loc_4056:
0000418A 3038 F790                  		move.w	($FFFFF790).w,d0
0000418E D2C0                       		adda.w	d0,a1
00004190 1011                       		move.b	(a1),d0
00004192 41F8 F604                  		lea	($FFFFF604).w,a0
00004196 1200                       		move.b	d0,d1
00004198 1428 FFFE                  		move.b	-2(a0),d2
0000419C B500                       		eor.b	d2,d0
0000419E 10C1                       		move.b	d1,(a0)+
000041A0 C001                       		and.b	d1,d0
000041A2 10C0                       		move.b	d0,(a0)+
000041A4 5338 F792                  		subq.b	#1,($FFFFF792).w
000041A8 6400                       		bcc.s	locret_407E
000041AA 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000041B0 5478 F790                  		addq.w	#2,($FFFFF790).w
000041B4                            
000041B4                            locret_407E:
000041B4 4E75                       		rts	
000041B6                            ; End of function MoveSonicInDemo
000041B6                            
000041B6                            ; ===========================================================================
000041B6                            ; ---------------------------------------------------------------------------
000041B6                            ; Demo sequence	pointers
000041B6                            ; ---------------------------------------------------------------------------
000041B6                            Demo_Index:
000041B6                            	include "_inc\Demo pointers for intro.asm"
000041B6                            ; ---------------------------------------------------------------------------
000041B6                            ; Demo sequence	pointers
000041B6                            ; ---------------------------------------------------------------------------
000041B6 0000 0000                  	dc.l Demo_GHZ
000041BA 0000 0000                  	dc.l Demo_GHZ
000041BE 0000 0000                  	dc.l Demo_MZ
000041C2 0000 0000                  	dc.l Demo_MZ
000041C6 0000 0000                  	dc.l Demo_SYZ
000041CA 0000 0000                  	dc.l Demo_SYZ
000041CE 0000 0000                  	dc.l Demo_SS
000041D2 0000 0000                  	dc.l Demo_SS
000041D2 0000 0000                  	dc.l Demo_SS
000041D6                            
000041D6                            Demo_EndIndex:
000041D6                            	include "_inc\Demo pointers for ending.asm"
000041D6                            ; ---------------------------------------------------------------------------
000041D6                            ; Demo (ending) sequence pointers
000041D6                            ; ---------------------------------------------------------------------------
000041D6 0000 0000                  	dc.l Demo_EndGHZ1
000041DA 0000 0000                  	dc.l Demo_EndMZ
000041DE 0000 0000                  	dc.l Demo_EndSYZ
000041E2 0000 0000                  	dc.l Demo_EndLZ
000041E6 0000 0000                  	dc.l Demo_EndSLZ
000041EA 0000 0000                  	dc.l Demo_EndSBZ1
000041EE 0000 0000                  	dc.l Demo_EndSBZ2
000041F2 0000 0000                  	dc.l Demo_EndGHZ2
000041F2 0000 0000                  	dc.l Demo_EndGHZ2
000041F6                            
000041F6 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004206 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004216 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004226                            		even
00004226                            
00004226                            ; ---------------------------------------------------------------------------
00004226                            ; Collision index loading subroutine
00004226                            ; ---------------------------------------------------------------------------
00004226                            
00004226                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004226                            
00004226                            
00004226                            ColIndexLoad:				; XREF: Level
00004226 7000                       		moveq	#0,d0
00004228 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000422C E548                       		lsl.w	#2,d0
0000422E 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004234 4E75                       		rts	
00004236                            ; End of function ColIndexLoad
00004236                            
00004236                            ; ===========================================================================
00004236                            ; ---------------------------------------------------------------------------
00004236                            ; Collision index pointers
00004236                            ; ---------------------------------------------------------------------------
00004236                            ColPointers:
00004236                            	include "_inc\Collision index pointers.asm"
00004236                            ; ---------------------------------------------------------------------------
00004236                            ; Collision index pointers
00004236                            ; ---------------------------------------------------------------------------
00004236 0000 0000                  	dc.l Col_GHZ
0000423A 0000 0000                  	dc.l Col_LZ
0000423E 0000 0000                  	dc.l Col_MZ
00004242 0000 0000                  	dc.l Col_SLZ
00004246 0000 0000                  	dc.l Col_SYZ
0000424A 0000 0000                  	dc.l Col_SBZ
0000424A 0000 0000                  	dc.l Col_SBZ
0000424E                            
0000424E                            ; ---------------------------------------------------------------------------
0000424E                            ; Oscillating number subroutine
0000424E                            ; ---------------------------------------------------------------------------
0000424E                            
0000424E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000424E                            
0000424E                            
0000424E                            OscillateNumInit:			; XREF: Level
0000424E 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004252 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004258 7220                       		moveq	#$20,d1
0000425A                            
0000425A                            Osc_Loop:
0000425A 32DA                       		move.w	(a2)+,(a1)+
0000425C 51C9 FFFC                  		dbf	d1,Osc_Loop
00004260 4E75                       		rts	
00004262                            ; End of function OscillateNumInit
00004262                            
00004262                            ; ===========================================================================
00004262 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004266 0000 0080                  		dc.w 0,	$80
0000426A 0000 0080                  		dc.w 0,	$80
0000426E 0000 0080                  		dc.w 0,	$80
00004272 0000 0080                  		dc.w 0,	$80
00004276 0000 0080                  		dc.w 0,	$80
0000427A 0000 0080                  		dc.w 0,	$80
0000427E 0000 0080                  		dc.w 0,	$80
00004282 0000 0080                  		dc.w 0,	$80
00004286 0000 50F0                  		dc.w 0,	$50F0
0000428A 011E 2080                  		dc.w $11E, $2080
0000428E 00B4 3080                  		dc.w $B4, $3080
00004292 010E 5080                  		dc.w $10E, $5080
00004296 01C2 7080                  		dc.w $1C2, $7080
0000429A 0276 0080                  		dc.w $276, $80
0000429E 0000 0080                  		dc.w 0,	$80
000042A2 0000                       		dc.w 0
000042A4                            		even
000042A4                            
000042A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042A4                            
000042A4                            
000042A4                            OscillateNumDo:				; XREF: Level
000042A4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000042AA 6400                       		bcc.s	locret_41C4
000042AC 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000042B0 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000042B6 3619                       		move.w	(a1)+,d3
000042B8 720F                       		moveq	#$F,d1
000042BA                            
000042BA                            loc_4184:
000042BA 341A                       		move.w	(a2)+,d2
000042BC 381A                       		move.w	(a2)+,d4
000042BE 0303                       		btst	d1,d3
000042C0 6600                       		bne.s	loc_41A4
000042C2 3029 0002                  		move.w	2(a1),d0
000042C6 D042                       		add.w	d2,d0
000042C8 3340 0002                  		move.w	d0,2(a1)
000042CC D151                       		add.w	d0,0(a1)
000042CE B811                       		cmp.b	0(a1),d4
000042D0 6200                       		bhi.s	loc_41BA
000042D2 03C3                       		bset	d1,d3
000042D4 6000                       		bra.s	loc_41BA
000042D6                            ; ===========================================================================
000042D6                            
000042D6                            loc_41A4:				; XREF: OscillateNumDo
000042D6 3029 0002                  		move.w	2(a1),d0
000042DA 9042                       		sub.w	d2,d0
000042DC 3340 0002                  		move.w	d0,2(a1)
000042E0 D151                       		add.w	d0,0(a1)
000042E2 B811                       		cmp.b	0(a1),d4
000042E4 6300                       		bls.s	loc_41BA
000042E6 0383                       		bclr	d1,d3
000042E8                            
000042E8                            loc_41BA:
000042E8 5849                       		addq.w	#4,a1
000042EA 51C9 FFCE                  		dbf	d1,loc_4184
000042EE 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000042F2                            
000042F2                            locret_41C4:
000042F2 4E75                       		rts	
000042F4                            ; End of function OscillateNumDo
000042F4                            
000042F4                            ; ===========================================================================
000042F4 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000042F8 0002 0018                  		dc.w 2,	$18
000042FC 0002 0020                  		dc.w 2,	$20
00004300 0002 0030                  		dc.w 2,	$30
00004304 0004 0020                  		dc.w 4,	$20
00004308 0008 0008                  		dc.w 8,	8
0000430C 0008 0040                  		dc.w 8,	$40
00004310 0004 0040                  		dc.w 4,	$40
00004314 0002 0050                  		dc.w 2,	$50
00004318 0002 0050                  		dc.w 2,	$50
0000431C 0002 0020                  		dc.w 2,	$20
00004320 0003 0030                  		dc.w 3,	$30
00004324 0005 0050                  		dc.w 5,	$50
00004328 0007 0070                  		dc.w 7,	$70
0000432C 0002 0010                  		dc.w 2,	$10
00004330 0002 0010                  		dc.w 2,	$10
00004334                            		even
00004334                            
00004334                            ; ---------------------------------------------------------------------------
00004334                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004334                            ; ---------------------------------------------------------------------------
00004334                            
00004334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004334                            
00004334                            
00004334                            ChangeRingFrame:			; XREF: Level
00004334 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004338 6A00                       		bpl.s	loc_421C
0000433A 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004340 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004344 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000434A                            
0000434A                            loc_421C:
0000434A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000434E 6A00                       		bpl.s	loc_4232
00004350 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004356 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0000435A 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004360                            
00004360                            loc_4232:
00004360 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004364 6A00                       		bpl.s	loc_4250
00004366 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000436C 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004370 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004376 6500                       		bcs.s	loc_4250
00004378 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000437E                            
0000437E                            loc_4250:
0000437E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004382 6700                       		beq.s	locret_4272
00004384 7000                       		moveq	#0,d0
00004386 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000438A D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000438E 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004392 EF58                       		rol.w	#7,d0
00004394 0240 0003                  		andi.w	#3,d0
00004398 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
0000439C 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000043A0                            
000043A0                            locret_4272:
000043A0 4E75                       		rts	
000043A2                            ; End of function ChangeRingFrame
000043A2                            
000043A2                            ; ---------------------------------------------------------------------------
000043A2                            ; End-of-act signpost pattern loading subroutine
000043A2                            ; ---------------------------------------------------------------------------
000043A2                            
000043A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000043A2                            
000043A2                            
000043A2                            SignpostArtLoad:			; XREF: Level
000043A2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000043A6 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000043AA 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000043B0 6700                       		beq.s	Signpost_Exit	; if yes, branch
000043B2 3038 F700                  		move.w	($FFFFF700).w,d0
000043B6 3238 F72A                  		move.w	($FFFFF72A).w,d1
000043BA 0441 0100                  		subi.w	#$100,d1
000043BE B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000043C0 6D00                       		blt.s	Signpost_Exit	; if not, branch
000043C2 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000043C6 6700                       		beq.s	Signpost_Exit
000043C8 B278 F728                  		cmp.w	($FFFFF728).w,d1
000043CC 6700                       		beq.s	Signpost_Exit
000043CE 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000043D2 7012                       		moveq	#$12,d0
000043D4 6000 D0BA                  		bra.w	LoadPLC2	; load signpost	patterns
000043D8                            ; ===========================================================================
000043D8                            
000043D8                            Signpost_Exit:
000043D8 4E75                       		rts	
000043DA                            ; End of function SignpostArtLoad
000043DA                            
000043DA                            ; ===========================================================================
000043DA                            Demo_GHZ:	incbin	demodata\i_ghz.bin
0000445A                            Demo_MZ:	incbin	demodata\i_mz.bin
0000458A                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000460A                            Demo_SS:	incbin	demodata\i_ss.bin
0000470A                            ; ===========================================================================
0000470A                            
0000470A                            ; ---------------------------------------------------------------------------
0000470A                            ; Special Stage
0000470A                            ; ---------------------------------------------------------------------------
0000470A                            
0000470A                            SpecialStage:				; XREF: GameModeArray
0000470A 303C 00CA                  		move.w	#$CA,d0
0000470E 6100 CB10                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004712 4EB9 0000 0000             		jsr	BuildSprites
00004718 6100 D876                  		bsr.w	Pal_MakeFlash
0000471C 46FC 2700                  		move	#$2700,sr
00004720 4DF9 00C0 0004             		lea	($C00004).l,a6
00004726 3CBC 8B03                  		move.w	#$8B03,(a6)
0000472A 3CBC 8004                  		move.w	#$8004,(a6)
0000472E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004734 3CBC 9011                  		move.w	#$9011,(a6)
00004738 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000473C 0200 00BF                  		andi.b	#$BF,d0
00004740 33C0 00C0 0004             		move.w	d0,($C00004).l
00004746 6100 C9B2                  		bsr.w	ClearScreen
0000474A 46FC 2300                  		move	#$2300,sr
0000474E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004754 3ABC 8F01                  		move.w	#$8F01,(a5)
00004758 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000475E 3ABC 9780                  		move.w	#$9780,(a5)
00004762 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004768 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004770                            
00004770                            loc_463C:
00004770 3215                       		move.w	(a5),d1
00004772 0801 0001                  		btst	#1,d1
00004776 66F8                       		bne.s	loc_463C
00004778 3ABC 8F02                  		move.w	#$8F02,(a5)
0000477C 6100 0000                  		bsr.w	SS_BGLoad
00004780 7014                       		moveq	#$14,d0
00004782 6100 CE46                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004786                            
00004786 43F8 D000                  		lea	($FFFFD000).w,a1
0000478A 7000                       		moveq	#0,d0
0000478C 323C 07FF                  		move.w	#$7FF,d1
00004790                            
00004790                            SS_ClrObjRam:
00004790 22C0                       		move.l	d0,(a1)+
00004792 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004796                            
00004796 43F8 F700                  		lea	($FFFFF700).w,a1
0000479A 7000                       		moveq	#0,d0
0000479C 323C 003F                  		move.w	#$3F,d1
000047A0                            
000047A0                            SS_ClrRam:
000047A0 22C0                       		move.l	d0,(a1)+
000047A2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000047A6                            
000047A6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000047AA 7000                       		moveq	#0,d0
000047AC 323C 0027                  		move.w	#$27,d1
000047B0                            
000047B0                            SS_ClrRam2:
000047B0 22C0                       		move.l	d0,(a1)+
000047B2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000047B6                            
000047B6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000047BA 7000                       		moveq	#0,d0
000047BC 323C 007F                  		move.w	#$7F,d1
000047C0                            
000047C0                            SS_ClrNemRam:
000047C0 22C0                       		move.l	d0,(a1)+
000047C2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000047C6 4238 F64E                  		clr.b	($FFFFF64E).w
000047CA 4278 FE02                  		clr.w	($FFFFFE02).w
000047CE 700A                       		moveq	#$A,d0
000047D0 6100 D93E                  		bsr.w	PalLoad1	; load special stage pallet
000047D4 4EB9 0000 0000             		jsr	SS_Load
000047DA 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
000047E0 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000047E8 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000047F0 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000047F6 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
000047FC 6100 0000                  		bsr.w	PalCycle_SS
00004800 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w		
00004804 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004808 11FC 00FF FFF9             		move.b	#$FF,(v_ssangleprev).w	; fill previous angle with obviously false value to force an update
0000480E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004814 303C 0089                  		move.w	#$89,d0
00004818 6100 CA00                  		bsr.w	PlaySound	; play special stage BG	music
0000481C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004822 43F9 0000 41B6             		lea	(Demo_Index).l,a1
00004828 7006                       		moveq	#6,d0
0000482A E548                       		lsl.w	#2,d0
0000482C 2271 0000                  		movea.l	(a1,d0.w),a1
00004830 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004836 5338 F792                  		subq.b	#1,($FFFFF792).w
0000483A 4278 FE20                  		clr.w	($FFFFFE20).w
0000483E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004842 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004848 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000484E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004852 6700                       		beq.s	SS_NoDebug	; if not, branch
00004854 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000485A 6700                       		beq.s	SS_NoDebug	; if not, branch
0000485C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004862                            
00004862                            SS_NoDebug:
00004862 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004866 0000 0040                  		ori.b	#$40,d0
0000486A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004870 6100 D696                  		bsr.w	Pal_MakeWhite
00004874                            
00004874                            ; ---------------------------------------------------------------------------
00004874                            ; Main Special Stage loop
00004874                            ; ---------------------------------------------------------------------------
00004874                            
00004874                            SS_MainLoop:
00004874 6100 C9B6                  		bsr.w	PauseGame
00004878 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000487E 6100 E144                  		bsr.w	DelayProgram
00004882 6100 F880                  		bsr.w	MoveSonicInDemo
00004886 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000488C 4EB9 0000 0000             		jsr	ObjectsLoad
00004892 4EB9 0000 0000             		jsr	BuildSprites
00004898 4EB9 0000 0000             		jsr	SS_ShowLayout
0000489E 6100 0000                  		bsr.w	SS_BGAnimate
000048A2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000048A6 6700                       		beq.s	SS_ChkEnd	; if not, branch
000048A8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000048AC 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000048B0                            
000048B0                            SS_ChkEnd:
000048B0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
000048B6 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000048BA                            
000048BA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000048BE 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000048C2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000048C8 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000048CE 6500                       		bcs.s	SS_End		; if not, branch
000048D0 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000048D4                            
000048D4                            SS_End:
000048D4 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000048DA 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000048E0 4278 F794                  		clr.w	($FFFFF794).w
000048E4                            
000048E4                            SS_EndLoop:
000048E4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000048EA 6100 E0D8                  		bsr.w	DelayProgram
000048EE 6100 F814                  		bsr.w	MoveSonicInDemo
000048F2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000048F8 4EB9 0000 0000             		jsr	ObjectsLoad
000048FE 4EB9 0000 0000             		jsr	BuildSprites
00004904 4EB9 0000 0000             		jsr	SS_ShowLayout
0000490A 6100 0000                  		bsr.w	SS_BGAnimate
0000490E 5378 F794                  		subq.w	#1,($FFFFF794).w
00004912 6A00                       		bpl.s	loc_47D4
00004914 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000491A 6100 D694                  		bsr.w	Pal_ToWhite
0000491E                            
0000491E                            loc_47D4:
0000491E 4A78 F614                  		tst.w	($FFFFF614).w
00004922 66C0                       		bne.s	SS_EndLoop
00004924                            
00004924 46FC 2700                  		move	#$2700,sr
00004928 4DF9 00C0 0004             		lea	($C00004).l,a6
0000492E 3CBC 8230                  		move.w	#$8230,(a6)
00004932 3CBC 8407                  		move.w	#$8407,(a6)
00004936 3CBC 9001                  		move.w	#$9001,(a6)
0000493A 6100 C7BE                  		bsr.w	ClearScreen
0000493E 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00004948 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
0000494E 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
00004954 4EB8 143A                          jsr LoadUncArt          ; load uncompressed art
00004958 4EB9 0000 0000             		jsr	Hud_Base
0000495E 46FC 2300                  		move	#$2300,sr
00004962 7011                       		moveq	#$11,d0
00004964 6100 D7C6                  		bsr.w	PalLoad2	; load results screen pallet
00004968 7000                       		moveq	#0,d0
0000496A 6100 CB24                  		bsr.w	LoadPLC2
0000496E 701B                       		moveq	#$1B,d0
00004970 6100 CAEC                  		bsr.w	LoadPLC		; load results screen patterns
00004974 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000497A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004980 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004984 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004988 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000498C 303C 008E                  		move.w	#$8E,d0
00004990 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004996 43F8 D000                  		lea	($FFFFD000).w,a1
0000499A 7000                       		moveq	#0,d0
0000499C 323C 07FF                  		move.w	#$7FF,d1
000049A0                            
000049A0                            SS_EndClrObjRam:
000049A0 22C0                       		move.l	d0,(a1)+
000049A2 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000049A6                            
000049A6 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
000049AC                            
000049AC                            SS_NormalExit:
000049AC 6100 C87E                  		bsr.w	PauseGame
000049B0 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000049B6 6100 E00C                  		bsr.w	DelayProgram
000049BA 4EB9 0000 0000             		jsr	ObjectsLoad
000049C0 4EB9 0000 0000             		jsr	BuildSprites
000049C6 6100 CB02                  		bsr.w	RunPLC_RAM
000049CA 4A78 FE02                  		tst.w	($FFFFFE02).w
000049CE 67DC                       		beq.s	SS_NormalExit
000049D0 4AB8 F680                  		tst.l	($FFFFF680).w
000049D4 66D6                       		bne.s	SS_NormalExit
000049D6 303C 00CA                  		move.w	#$CA,d0
000049DA 6100 C844                  		bsr.w	PlaySound_Special ; play special stage exit sound
000049DE 6100 D5B0                  		bsr.w	Pal_MakeFlash
000049E2 4E75                       		rts	
000049E4                            ; ===========================================================================
000049E4                            
000049E4                            SS_ToSegaScreen:
000049E4 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000049EA 4E75                       		rts
000049EC                            
000049EC                            ; ---------------------------------------------------------------------------
000049EC                            ; Special stage	background loading subroutine
000049EC                            ; ---------------------------------------------------------------------------
000049EC                            
000049EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000049EC                            
000049EC                            
000049EC                            SS_BGLoad:				; XREF: SpecialStage
000049EC 43F9 00FF 0000             		lea	($FF0000).l,a1
000049F2 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000049F8 303C 4051                  		move.w	#$4051,d0
000049FC 6100 CBFE                  		bsr.w	EniDec
00004A00 263C 5000 0001             		move.l	#$50000001,d3
00004A06 45F9 00FF 0080             		lea	($FF0080).l,a2
00004A0C 7E06                       		moveq	#6,d7
00004A0E                            
00004A0E                            loc_48BE:
00004A0E 2003                       		move.l	d3,d0
00004A10 7C03                       		moveq	#3,d6
00004A12 7800                       		moveq	#0,d4
00004A14 0C47 0003                  		cmpi.w	#3,d7
00004A18 6400                       		bcc.s	loc_48CC
00004A1A 7801                       		moveq	#1,d4
00004A1C                            
00004A1C                            loc_48CC:
00004A1C 7A07                       		moveq	#7,d5
00004A1E                            
00004A1E                            loc_48CE:
00004A1E 224A                       		movea.l	a2,a1
00004A20 0A04 0001                  		eori.b	#1,d4
00004A24 6600                       		bne.s	loc_48E2
00004A26 0C47 0006                  		cmpi.w	#6,d7
00004A2A 6600                       		bne.s	loc_48F2
00004A2C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A32                            
00004A32                            loc_48E2:
00004A32 48E7 F800                  		movem.l	d0-d4,-(sp)
00004A36 7207                       		moveq	#7,d1
00004A38 7407                       		moveq	#7,d2
00004A3A 6100 C8AC                  		bsr.w	ShowVDPGraphics
00004A3E 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004A42                            
00004A42                            loc_48F2:
00004A42 0680 0010 0000             		addi.l	#$100000,d0
00004A48 51CD FFD4                  		dbf	d5,loc_48CE
00004A4C 0680 0380 0000             		addi.l	#$3800000,d0
00004A52 0A04 0001                  		eori.b	#1,d4
00004A56 51CE FFC4                  		dbf	d6,loc_48CC
00004A5A 0683 1000 0000             		addi.l	#$10000000,d3
00004A60 6A00                       		bpl.s	loc_491C
00004A62 4843                       		swap	d3
00004A64 0683 0000 C000             		addi.l	#$C000,d3
00004A6A 4843                       		swap	d3
00004A6C                            
00004A6C                            loc_491C:
00004A6C D4FC 0080                  		adda.w	#$80,a2
00004A70 51CF FF9C                  		dbf	d7,loc_48BE
00004A74 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A7A 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004A80 303C 4000                  		move.w	#$4000,d0
00004A84 6100 CB76                  		bsr.w	EniDec
00004A88 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A8E 203C 4000 0003             		move.l	#$40000003,d0
00004A94 723F                       		moveq	#$3F,d1
00004A96 741F                       		moveq	#$1F,d2
00004A98 6100 C84E                  		bsr.w	ShowVDPGraphics
00004A9C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004AA2 203C 5000 0003             		move.l	#$50000003,d0
00004AA8 723F                       		moveq	#$3F,d1
00004AAA 743F                       		moveq	#$3F,d2
00004AAC 6100 C83A                  		bsr.w	ShowVDPGraphics
00004AB0 4E75                       		rts	
00004AB2                            ; End of function SS_BGLoad
00004AB2                            
00004AB2                            ; ---------------------------------------------------------------------------
00004AB2                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00004AB2                            ; to be issued the next time ProcessDMAQueue is called.
00004AB2                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00004AB2                            ; by issuing the commands (this subroutine DOES check for overflow)
00004AB2                            ; ---------------------------------------------------------------------------
00004AB2                            ; In case you wish to use this queue system outside of the spin dash, this is the
00004AB2                            ; registers in which it expects data in:
00004AB2                            ; d1.l: Address to data (In 68k address space)
00004AB2                            ; d2.w: Destination in VRAM
00004AB2                            ; d3.w: Length of data
00004AB2                            ; ---------------------------------------------------------------------------
00004AB2                            
00004AB2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004AB2                            
00004AB2                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00004AB2                            QueueDMATransfer:
00004AB2 2278 C8FC                  		movea.l ($FFFFC8FC).w,a1
00004AB6 B2FC C8FC                  		cmpa.w #$C8FC,a1
00004ABA 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004ABC                            
00004ABC                            ; piece together some VDP commands and store them for later...
00004ABC 303C 9300                  		move.w #$9300,d0 ; command to specify DMA transfer length & $00FF
00004AC0 1003                       		move.b d3,d0
00004AC2 32C0                       		move.w d0,(a1)+ ; store command
00004AC4                            
00004AC4 303C 9400                  		move.w #$9400,d0 ; command to specify DMA transfer length & $FF00
00004AC8 E04B                       		lsr.w #8,d3
00004ACA 1003                       		move.b d3,d0
00004ACC 32C0                       		move.w d0,(a1)+ ; store command
00004ACE                            
00004ACE 303C 9500                  		move.w #$9500,d0 ; command to specify source address & $0001FE
00004AD2 E289                       		lsr.l #1,d1
00004AD4 1001                       		move.b d1,d0
00004AD6 32C0                       		move.w d0,(a1)+ ; store command
00004AD8                            
00004AD8 303C 9600                  		move.w #$9600,d0 ; command to specify source address & $01FE00
00004ADC E089                       		lsr.l #8,d1
00004ADE 1001                       		move.b d1,d0
00004AE0 32C0                       		move.w d0,(a1)+ ; store command
00004AE2                            
00004AE2 303C 9700                  		move.w #$9700,d0 ; command to specify source address & $FE0000
00004AE6 E089                       		lsr.l #8,d1
00004AE8 1001                       		move.b d1,d0
00004AEA 32C0                       		move.w d0,(a1)+ ; store command
00004AEC                            
00004AEC 0282 0000 FFFF             		andi.l #$FFFF,d2 ; command to specify destination address and begin DMA
00004AF2 E58A                       		lsl.l #2,d2
00004AF4 E44A                       		lsr.w #2,d2
00004AF6 4842                       		swap d2
00004AF8 0082 4000 0080             		ori.l #$40000080,d2 ; set bits to specify VRAM transfer
00004AFE 22C2                       		move.l d2,(a1)+ ; store command
00004B00                            
00004B00 21C9 C8FC                  		move.l a1,($FFFFC8FC).w ; set the next free slot address
00004B04 B2FC C8FC                  		cmpa.w #$C8FC,a1
00004B08 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004B0A 32BC 0000                  		move.w #0,(a1) ; put a stop token at the end of the used part of the buffer
00004B0E                            ; return_14AA:
00004B0E                            QueueDMATransfer_Done:
00004B0E 4E75                       		rts
00004B10                            ; End of function QueueDMATransfer
00004B10                            
00004B10                            ; ---------------------------------------------------------------------------
00004B10                            ; Subroutine for issuing all VDP commands that were queued
00004B10                            ; (by earlier calls to QueueDMATransfer)
00004B10                            ; Resets the queue when it's done
00004B10                            ; ---------------------------------------------------------------------------
00004B10                            
00004B10                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004B10                            
00004B10                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00004B10                            ProcessDMAQueue:
00004B10 4BF9 00C0 0004             		lea ($C00004).l,a5
00004B16 43F8 C800                  		lea ($FFFFC800).w,a1
00004B1A                            ; loc_14B6:
00004B1A                            ProcessDMAQueue_Loop:
00004B1A 3019                       		move.w (a1)+,d0
00004B1C 6700                       		beq.s ProcessDMAQueue_Done ; branch if we reached a stop token
00004B1E                            		; issue a set of VDP commands...
00004B1E 3A80                       		move.w d0,(a5) ; transfer length
00004B20 3A99                       		move.w (a1)+,(a5) ; transfer length
00004B22 3A99                       		move.w (a1)+,(a5) ; source address
00004B24 3A99                       		move.w (a1)+,(a5) ; source address
00004B26 3A99                       		move.w (a1)+,(a5) ; source address
00004B28 3A99                       		move.w (a1)+,(a5) ; destination
00004B2A 3A99                       		move.w (a1)+,(a5) ; destination
00004B2C B2FC C8FC                  		cmpa.w #$C8FC,a1
00004B30 66E8                       		bne.s ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00004B32                            ; loc_14CE:
00004B32                            ProcessDMAQueue_Done:
00004B32 31FC 0000 C800             		move.w #0,($FFFFC800).w
00004B38 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
00004B40 4E75                       		rts
00004B42                            ; End of function ProcessDMAQueue
00004B42                            
00004B42                            ; ---------------------------------------------------------------------------
00004B42                            ; Pallet cycling routine - special stage
00004B42                            ; ---------------------------------------------------------------------------
00004B42                            
00004B42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B42                            
00004B42                            
00004B42                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004B42 4A78 F63A                  		tst.w	($FFFFF63A).w
00004B46 6600                       		bne.s	locret_49E6
00004B48 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004B4C 6A00                       		bpl.s	locret_49E6
00004B4E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B54 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004B58 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004B5C 0240 001F                  		andi.w	#$1F,d0
00004B60 E548                       		lsl.w	#2,d0
00004B62 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004B68 D0C0                       		adda.w	d0,a0
00004B6A 1018                       		move.b	(a0)+,d0
00004B6C 6A00                       		bpl.s	loc_4992
00004B6E 303C 01FF                  		move.w	#$1FF,d0
00004B72                            
00004B72                            loc_4992:
00004B72 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004B76 7000                       		moveq	#0,d0
00004B78 1018                       		move.b	(a0)+,d0
00004B7A 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004B7E 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004B84 43F1 0000                  		lea	(a1,d0.w),a1
00004B88 303C 8200                  		move.w	#-$7E00,d0
00004B8C 1019                       		move.b	(a1)+,d0
00004B8E 3C80                       		move.w	d0,(a6)
00004B90 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004B94 303C 8400                  		move.w	#-$7C00,d0
00004B98 1018                       		move.b	(a0)+,d0
00004B9A 3C80                       		move.w	d0,(a6)
00004B9C 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004BA6 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004BAE 7000                       		moveq	#0,d0
00004BB0 1018                       		move.b	(a0)+,d0
00004BB2 6B00                       		bmi.s	loc_49E8
00004BB4 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004BBA D2C0                       		adda.w	d0,a1
00004BBC 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004BC0 24D9                       		move.l	(a1)+,(a2)+
00004BC2 24D9                       		move.l	(a1)+,(a2)+
00004BC4 24D9                       		move.l	(a1)+,(a2)+
00004BC6                            
00004BC6                            locret_49E6:
00004BC6 4E75                       		rts	
00004BC8                            ; ===========================================================================
00004BC8                            
00004BC8                            loc_49E8:				; XREF: PalCycle_SS
00004BC8 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004BCC 0C40 008A                  		cmpi.w	#$8A,d0
00004BD0 6500                       		bcs.s	loc_49F4
00004BD2 5241                       		addq.w	#1,d1
00004BD4                            
00004BD4                            loc_49F4:
00004BD4 C2FC 002A                  		mulu.w	#$2A,d1
00004BD8 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004BDE D2C1                       		adda.w	d1,a1
00004BE0 0240 007F                  		andi.w	#$7F,d0
00004BE4 0880 0000                  		bclr	#0,d0
00004BE8 6700                       		beq.s	loc_4A18
00004BEA 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004BEE 24D1                       		move.l	(a1),(a2)+
00004BF0 24E9 0004                  		move.l	4(a1),(a2)+
00004BF4 24E9 0008                  		move.l	8(a1),(a2)+
00004BF8                            
00004BF8                            loc_4A18:
00004BF8 D2FC 000C                  		adda.w	#$C,a1
00004BFC 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004C00 0C40 000A                  		cmpi.w	#$A,d0
00004C04 6500                       		bcs.s	loc_4A2E
00004C06 0440 000A                  		subi.w	#$A,d0
00004C0A 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004C0E                            
00004C0E                            loc_4A2E:
00004C0E 3200                       		move.w	d0,d1
00004C10 D040                       		add.w	d0,d0
00004C12 D041                       		add.w	d1,d0
00004C14 D2C0                       		adda.w	d0,a1
00004C16 24D9                       		move.l	(a1)+,(a2)+
00004C18 34D9                       		move.w	(a1)+,(a2)+
00004C1A 4E75                       		rts	
00004C1C                            ; End of function PalCycle_SS
00004C1C                            
00004C1C                            ; ===========================================================================
00004C1C 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004C2C                            					; XREF: PalCycle_SS
00004C2C 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004C3C 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004C4C FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004C5C 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004C6C 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004C7C 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004C8C FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004C9C                            		even
00004C9C 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004CAA                            					; XREF: PalCycle_SS
00004CAA                            		even
00004CAA                            
00004CAA                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004CF2                            		even
00004CF2                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004DC4                            		even
00004DC4                            
00004DC4                            ; ---------------------------------------------------------------------------
00004DC4                            ; Subroutine to	make the special stage background animated
00004DC4                            ; ---------------------------------------------------------------------------
00004DC4                            
00004DC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DC4                            
00004DC4                            
00004DC4                            SS_BGAnimate:				; XREF: SpecialStage
00004DC4 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004DC8 6600                       		bne.s	loc_4BF6
00004DCA 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004DD0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004DD6                            
00004DD6                            loc_4BF6:
00004DD6 0C40 0008                  		cmpi.w	#8,d0
00004DDA 6400                       		bcc.s	loc_4C4E
00004DDC 0C40 0006                  		cmpi.w	#6,d0
00004DE0 6600                       		bne.s	loc_4C10
00004DE2 5278 F718                  		addq.w	#1,($FFFFF718).w
00004DE6 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004DEA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004DF0                            
00004DF0                            loc_4C10:
00004DF0 7000                       		moveq	#0,d0
00004DF2 3038 F708                  		move.w	($FFFFF708).w,d0
00004DF6 4440                       		neg.w	d0
00004DF8 4840                       		swap	d0
00004DFA 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004E00 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004E04 7609                       		moveq	#9,d3
00004E06                            
00004E06                            loc_4C26:
00004E06 302B 0002                  		move.w	2(a3),d0
00004E0A 6100 DBEA                  		bsr.w	CalcSine
00004E0E 7400                       		moveq	#0,d2
00004E10 1419                       		move.b	(a1)+,d2
00004E12 C1C2                       		muls.w	d2,d0
00004E14 E080                       		asr.l	#8,d0
00004E16 36C0                       		move.w	d0,(a3)+
00004E18 1419                       		move.b	(a1)+,d2
00004E1A 4882                       		ext.w	d2
00004E1C D55B                       		add.w	d2,(a3)+
00004E1E 51CB FFE6                  		dbf	d3,loc_4C26
00004E22 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004E26 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004E2C 6000                       		bra.s	loc_4C7E
00004E2E                            ; ===========================================================================
00004E2E                            
00004E2E                            loc_4C4E:				; XREF: SS_BGAnimate
00004E2E 0C40 000C                  		cmpi.w	#$C,d0
00004E32 6600                       		bne.s	loc_4C74
00004E34 5378 F718                  		subq.w	#1,($FFFFF718).w
00004E38 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004E3C 243C 0001 8000             		move.l	#$18000,d2
00004E42 7206                       		moveq	#6,d1
00004E44                            
00004E44                            loc_4C64:
00004E44 2013                       		move.l	(a3),d0
00004E46 9082                       		sub.l	d2,d0
00004E48 26C0                       		move.l	d0,(a3)+
00004E4A 0482 0000 2000             		subi.l	#$2000,d2
00004E50 51C9 FFF2                  		dbf	d1,loc_4C64
00004E54                            
00004E54                            loc_4C74:
00004E54 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004E58 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004E5E                            
00004E5E                            loc_4C7E:
00004E5E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004E62 3038 F718                  		move.w	($FFFFF718).w,d0
00004E66 4440                       		neg.w	d0
00004E68 4840                       		swap	d0
00004E6A 7600                       		moveq	#0,d3
00004E6C 161A                       		move.b	(a2)+,d3
00004E6E 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004E72 4442                       		neg.w	d2
00004E74 0242 00FF                  		andi.w	#$FF,d2
00004E78 E54A                       		lsl.w	#2,d2
00004E7A                            
00004E7A                            loc_4C9A:
00004E7A 301B                       		move.w	(a3)+,d0
00004E7C 544B                       		addq.w	#2,a3
00004E7E 7200                       		moveq	#0,d1
00004E80 121A                       		move.b	(a2)+,d1
00004E82 5341                       		subq.w	#1,d1
00004E84                            
00004E84                            loc_4CA4:
00004E84 2380 2000                  		move.l	d0,(a1,d2.w)
00004E88 5842                       		addq.w	#4,d2
00004E8A 0242 03FC                  		andi.w	#$3FC,d2
00004E8E 51C9 FFF4                  		dbf	d1,loc_4CA4
00004E92 51CB FFE6                  		dbf	d3,loc_4C9A
00004E96 4E75                       		rts	
00004E98                            ; End of function SS_BGAnimate
00004E98                            
00004E98                            ; ===========================================================================
00004E98 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004EA4                            		even
00004EA4 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004EAC                            		even
00004EAC 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004EC0                            		even
00004EC0                            					; XREF: SS_BGAnimate
00004EC0                            ; ===========================================================================
00004EC0                            
00004EC0                            ; ---------------------------------------------------------------------------
00004EC0                            ; Continue screen
00004EC0                            ; ---------------------------------------------------------------------------
00004EC0                            
00004EC0                            ContinueScreen:				; XREF: GameModeArray
00004EC0 6100 CFC8                  		bsr.w	Pal_FadeFrom
00004EC4 46FC 2700                  		move	#$2700,sr
00004EC8 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004ECC 0200 00BF                  		andi.b	#$BF,d0
00004ED0 33C0 00C0 0004             		move.w	d0,($C00004).l
00004ED6 4DF9 00C0 0004             		lea	($C00004).l,a6
00004EDC 3CBC 8004                  		move.w	#$8004,(a6)
00004EE0 3CBC 8700                  		move.w	#$8700,(a6)
00004EE4 6100 C214                  		bsr.w	ClearScreen
00004EE8 43F8 D000                  		lea	($FFFFD000).w,a1
00004EEC 7000                       		moveq	#0,d0
00004EEE 323C 07FF                  		move.w	#$7FF,d1
00004EF2                            
00004EF2                            Cont_ClrObjRam:
00004EF2 22C0                       		move.l	d0,(a1)+
00004EF4 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004EF8                            
00004EF8 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00004F02 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00004F08 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
00004F0E 4EB8 143A                          jsr LoadUncArt          ; load uncompressed art
00004F12 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004F1C 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004F22 6100 C3EE                  		bsr.w	NemDec
00004F26 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004F30 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004F36 6100 C3DA                  		bsr.w	NemDec
00004F3A 720A                       		moveq	#10,d1
00004F3C 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004F42 7012                       		moveq	#$12,d0
00004F44 6100 D1CA                  		bsr.w	PalLoad1	; load continue	screen pallet
00004F48 103C 0090                  		move.b	#$90,d0
00004F4C 6100 C2CC                  		bsr.w	PlaySound	; play continue	music
00004F50 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004F56 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00004F5C 42B8 F700                  		clr.l	($FFFFF700).w
00004F60 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004F68 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004F6E 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004F74 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004F7A 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004F80 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004F86 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004F8C 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004F92 11FC 0000 FFD0             		move.b    #0,($FFFFFFD0).w
00004F98 4EB9 0000 0000             		jsr	ObjectsLoad
00004F9E 4EB9 0000 0000             		jsr	BuildSprites
00004FA4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004FA8 0000 0040                  		ori.b	#$40,d0
00004FAC 33C0 00C0 0004             		move.w	d0,($C00004).l
00004FB2 6100 CE54                  		bsr.w	Pal_FadeTo
00004FB6                            
00004FB6                            ; ---------------------------------------------------------------------------
00004FB6                            ; Continue screen main loop
00004FB6                            ; ---------------------------------------------------------------------------
00004FB6                            
00004FB6                            Cont_MainLoop:
00004FB6 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004FBC 6100 DA06                  		bsr.w	DelayProgram
00004FC0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004FC6 6400                       		bcc.s	loc_4DF2
00004FC8 46FC 2700                  		move	#$2700,sr
00004FCC 3238 F614                  		move.w	($FFFFF614).w,d1
00004FD0 82FC 003C                  		divu.w	#$3C,d1
00004FD4 0281 0000 000F             		andi.l	#$F,d1
00004FDA 4EB9 0000 0000             		jsr	ContScrCounter
00004FE0 46FC 2300                  		move	#$2300,sr
00004FE4                            
00004FE4                            loc_4DF2:
00004FE4 4EB9 0000 0000             		jsr	ObjectsLoad
00004FEA 4EB9 0000 0000             		jsr	BuildSprites
00004FF0 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004FF6 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004FF8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004FFE 64B6                       		bcc.s	Cont_MainLoop
00005000 0C78 0100 F614             		cmpi.w	#$100,($FFFFF614).w
00005006 6E00 FFAE                  		bgt.w	Cont_MainLoop
0000500A 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00005010 0C78 0040 F614             		cmpi.w	#$40,($FFFFF614).w
00005016 6E00 FF9E                  		bgt.w	Cont_MainLoop
0000501A 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
00005020 4A78 F614                  		tst.w	($FFFFF614).w
00005024 6600 FF90                  		bne.w	Cont_MainLoop
00005028 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
0000502E 4E75                       		rts	
00005030                            ; ===========================================================================
00005030                            
00005030                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005030 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005036 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000503C 7000                       		moveq	#0,d0
0000503E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005042 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005046 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000504A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000504E 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005052 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
0000505A 4E75                       		rts	
0000505C                            ; ===========================================================================
0000505C                            
0000505C                            ; ---------------------------------------------------------------------------
0000505C                            ; Object 80 - Continue screen elements
0000505C                            ; ---------------------------------------------------------------------------
0000505C                            
0000505C                            Obj80:					; XREF: Obj_Index
0000505C 7000                       		moveq	#0,d0
0000505E 1028 0024                  		move.b	$24(a0),d0
00005062 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005066 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000506A                            ; ===========================================================================
0000506A 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000506C 0000                       		dc.w Obj80_Display-Obj80_Index
0000506E 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005070 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005072                            ; ===========================================================================
00005072                            
00005072                            Obj80_Main:				; XREF: Obj80_Index
00005072 5428 0024                  		addq.b	#2,$24(a0)
00005076 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000507E 317C 8500 0002             		move.w	#$8500,2(a0)
00005084 117C 0000 0001             		move.b	#0,1(a0)
0000508A 117C 003C 0019             		move.b	#$3C,$19(a0)
00005090 317C 0120 0008             		move.w	#$120,8(a0)
00005096 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000509C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000050A2                            
000050A2                            Obj80_Display:				; XREF: Obj80_Index
000050A2 4EF9 0000 0000             		jmp	DisplaySprite
000050A8                            ; ===========================================================================
000050A8                            Obj80_MiniSonicPos:
000050A8 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000050BA 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000050C6                            ; ===========================================================================
000050C6                            
000050C6                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000050C6 2248                       		movea.l	a0,a1
000050C8 45F9 0000 50A8             		lea	(Obj80_MiniSonicPos).l,a2
000050CE 7200                       		moveq	#0,d1
000050D0 1238 FE18                  		move.b	($FFFFFE18).w,d1
000050D4 5501                       		subq.b	#2,d1
000050D6 6400                       		bcc.s	loc_4EC4
000050D8 4EF9 0000 0000             		jmp	DeleteObject
000050DE                            ; ===========================================================================
000050DE                            
000050DE                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000050DE 7601                       		moveq	#1,d3
000050E0 0C01 000E                  		cmpi.b	#$E,d1
000050E4 6500                       		bcs.s	loc_4ED0
000050E6 7600                       		moveq	#0,d3
000050E8 720E                       		moveq	#$E,d1
000050EA                            
000050EA                            loc_4ED0:
000050EA 1401                       		move.b	d1,d2
000050EC 0202 0001                  		andi.b	#1,d2
000050F0                            
000050F0                            Obj80_MiniSonLoop:
000050F0 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000050F4 335A 0008                  		move.w	(a2)+,8(a1)
000050F8 4A02                       		tst.b	d2
000050FA 6700                       		beq.s	loc_4EEA
000050FC 0469 000A 0008             		subi.w	#$A,8(a1)
00005102                            
00005102                            loc_4EEA:
00005102 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005108 137C 0006 001A             		move.b	#6,$1A(a1)
0000510E 137C 0006 0024             		move.b	#6,$24(a1)
00005114 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000511C 337C 8551 0002             		move.w	#$8551,2(a1)
00005122 137C 0000 0001             		move.b	#0,1(a1)
00005128 43E9 0040                  		lea	$40(a1),a1
0000512C 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005130 43E9 FFC0                  		lea	-$40(a1),a1
00005134 1343 0028                  		move.b	d3,$28(a1)
00005138                            
00005138                            Obj80_ChkType:				; XREF: Obj80_Index
00005138 4A28 0028                  		tst.b	$28(a0)
0000513C 6700                       		beq.s	loc_4F40
0000513E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005144 6500                       		bcs.s	loc_4F40
00005146 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000514A 0200 0001                  		andi.b	#1,d0
0000514E 6600                       		bne.s	loc_4F40
00005150 4A78 D010                  		tst.w	($FFFFD010).w
00005154 6600                       		bne.s	Obj80_Delete
00005156 4E75                       		rts	
00005158                            ; ===========================================================================
00005158                            
00005158                            loc_4F40:				; XREF: Obj80_ChkType
00005158 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000515C 0200 000F                  		andi.b	#$F,d0
00005160 6600                       		bne.s	Obj80_Display2
00005162 0868 0000 001A             		bchg	#0,$1A(a0)
00005168                            
00005168                            Obj80_Display2:
00005168 4EF9 0000 0000             		jmp	DisplaySprite
0000516E                            ; ===========================================================================
0000516E                            
0000516E                            Obj80_Delete:				; XREF: Obj80_ChkType
0000516E 4EF9 0000 0000             		jmp	DeleteObject
00005174                            ; ===========================================================================
00005174                            
00005174                            ; ---------------------------------------------------------------------------
00005174                            ; Object 81 - Sonic on the continue screen
00005174                            ; ---------------------------------------------------------------------------
00005174                            
00005174                            Obj81:					; XREF: Obj_Index
00005174 7000                       		moveq	#0,d0
00005176 1028 0024                  		move.b	$24(a0),d0
0000517A 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
0000517E 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005182 4EF9 0000 0000             		jmp	DisplaySprite
00005188                            ; ===========================================================================
00005188 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000518A 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000518C 0000                       		dc.w Obj81_Animate-Obj81_Index
0000518E 0000                       		dc.w Obj81_Run-Obj81_Index
00005190                            ; ===========================================================================
00005190                            
00005190                            Obj81_Main:				; XREF: Obj81_Index
00005190 5428 0024                  		addq.b	#2,$24(a0)
00005194 317C 00A0 0008             		move.w	#$A0,8(a0)
0000519A 317C 00C0 000C             		move.w	#$C0,$C(a0)
000051A0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000051A8 317C 0780 0002             		move.w	#$780,2(a0)
000051AE 117C 0004 0001             		move.b	#4,1(a0)
000051B4 117C 0002 0018             		move.b	#2,$18(a0)
000051BA 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000051C0 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000051C6                            
000051C6                            Obj81_ChkLand:				; XREF: Obj81_Index
000051C6 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000051CC 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000051CE 5428 0024                  		addq.b	#2,$24(a0)
000051D2 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000051D6 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000051DE 317C 8500 0002             		move.w	#$8500,2(a0)
000051E4 117C 0000 001C             		move.b	#0,$1C(a0)
000051EA 6000                       		bra.s	Obj81_Animate
000051EC                            ; ===========================================================================
000051EC                            
000051EC                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000051EC 4EB9 0000 0000             		jsr	SpeedToPos
000051F2 4EB9 0000 0000             		jsr	Sonic_Animate
000051F8 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000051FE                            ; ===========================================================================
000051FE                            
000051FE                            Obj81_Animate:				; XREF: Obj81_Index
000051FE 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005202 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005204 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000520A 4EF9 0000 0000             		jmp	AnimateSprite
00005210                            ; ===========================================================================
00005210                            
00005210                            Obj81_GetUp:				; XREF: Obj81_Animate
00005210 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00005216 5428 0024                  		addq.b	#2,$24(a0)
0000521A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005222 317C 0780 0002             		move.w	#$780,2(a0)
00005228 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000522E 4268 0020                  		clr.w	$20(a0)
00005232 5168 000C                  		subq.w	#8,$C(a0)
00005236 103C 00E0                  		move.b	#$E0,d0
0000523A 6100 BFE4                  		bsr.w	PlaySound_Special ; fade out music
0000523E                            
0000523E                            Obj81_Run:				; XREF: Obj81_Index
0000523E 0C68 0800 0020             		cmpi.w	#$800,$20(a0)	; check	Sonic's "run speed" (not moving)
00005244 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005246 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
0000524C 6000                       		bra.s	Obj81_ShowRun
0000524E                            ; ===========================================================================
0000524E                            
0000524E                            Obj81_AddSpeed:				; XREF: Obj81_Run
0000524E 0668 0020 0020             		addi.w	#$20,$20(a0)	; increase "run	speed"
00005254                            
00005254                            Obj81_ShowRun:				; XREF: Obj81_Run
00005254 4EB9 0000 0000             		jsr	SpeedToPos
0000525A 4EB9 0000 0000             		jsr	Sonic_Animate
00005260 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005266                            ; ===========================================================================
00005266                            Ani_obj81:
00005266                            	include "_anim\obj81.asm"
00005266                            ; ---------------------------------------------------------------------------
00005266                            ; Animation script - Sonic on the continue screen
00005266                            ; ---------------------------------------------------------------------------
00005266 0000                       		dc.w byte_504A-Ani_obj81
00005268 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005274 00                         		even
00005274 00                         		even
00005274                            
00005274                            ; ---------------------------------------------------------------------------
00005274                            ; Sprite mappings - Continue screen
00005274                            ; ---------------------------------------------------------------------------
00005274                            Map_obj80:
00005274                            	include "_maps\obj80.asm"
00005274                            ; ---------------------------------------------------------------------------
00005274                            ; Sprite mappings - Continue screen
00005274                            ; ---------------------------------------------------------------------------
00005274 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005278 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
0000527C 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005280 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005284 0B                         byte_5066:	dc.b $B
00005285 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000528A F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
0000528F F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005294 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005299 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
0000529E F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000052A3 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000052A8 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000052AD 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000052B2 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000052B7 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000052BC 03                         byte_509E:	dc.b 3
000052BD 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000052C2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052C7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052CC 03                         byte_50AE:	dc.b 3
000052CD 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000052D2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052D7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052DC 03                         byte_50BE:	dc.b 3
000052DD 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000052E2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052E7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052EC 02                         byte_50CE:	dc.b 2
000052ED 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000052F2 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000052F7 01                         byte_50D9:	dc.b 1
000052F8 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000052FD 01                         byte_50DF:	dc.b 1
000052FE 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005304 00                         		even
00005304 00                         		even
00005304                            
00005304                            ; ===========================================================================
00005304                            ; ---------------------------------------------------------------------------
00005304                            ; Ending sequence in Green Hill	Zone
00005304                            ; ---------------------------------------------------------------------------
00005304                            
00005304                            EndingSequence:				; XREF: GameModeArray
00005304 103C 00E4                  		move.b	#$E4,d0
00005308 6100 BF16                  		bsr.w	PlaySound_Special ; stop music
0000530C 6100 CB7C                  		bsr.w	Pal_FadeFrom
00005310 43F8 D000                  		lea	($FFFFD000).w,a1
00005314 7000                       		moveq	#0,d0
00005316 323C 07FF                  		move.w	#$7FF,d1
0000531A                            
0000531A                            End_ClrObjRam:
0000531A 22C0                       		move.l	d0,(a1)+
0000531C 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005320                            
00005320 43F8 F628                  		lea	($FFFFF628).w,a1
00005324 7000                       		moveq	#0,d0
00005326 323C 0015                  		move.w	#$15,d1
0000532A                            
0000532A                            End_ClrRam:
0000532A 22C0                       		move.l	d0,(a1)+
0000532C 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005330                            
00005330 43F8 F700                  		lea	($FFFFF700).w,a1
00005334 7000                       		moveq	#0,d0
00005336 323C 003F                  		move.w	#$3F,d1
0000533A                            
0000533A                            End_ClrRam2:
0000533A 22C0                       		move.l	d0,(a1)+
0000533C 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005340                            
00005340 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005344 7000                       		moveq	#0,d0
00005346 323C 0047                  		move.w	#$47,d1
0000534A                            
0000534A                            End_ClrRam3:
0000534A 22C0                       		move.l	d0,(a1)+
0000534C 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005350                            
00005350 46FC 2700                  		move	#$2700,sr
00005354 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005358 33C0 00C0 0004             		move.w	d0,($C00004).l
0000535E 6100 BD9A                  		bsr.w	ClearScreen
00005362 4DF9 00C0 0004             		lea	($C00004).l,a6
00005368 3CBC 8B03                  		move.w	#$8B03,(a6)
0000536C 3CBC 8230                  		move.w	#$8230,(a6)
00005370 3CBC 8407                  		move.w	#$8407,(a6)
00005374 3CBC 857C                  		move.w	#$857C,(a6)
00005378 3CBC 9001                  		move.w	#$9001,(a6)
0000537C 3CBC 8004                  		move.w	#$8004,(a6)
00005380 3CBC 8720                  		move.w	#$8720,(a6)
00005384 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000538A 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000538E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005394 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
0000539A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000053A0 6700                       		beq.s	End_LoadData	; if yes, branch
000053A2 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000053A8                            
000053A8                            End_LoadData:
000053A8 701C                       		moveq	#$1C,d0
000053AA 6100 C21E                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000053AE 4EB9 0000 0000             		jsr	Hud_Base
000053B4 6100 0000                  		bsr.w	LevelSizeLoad
000053B8 6100 0000                  		bsr.w	DeformBgLayer
000053BC 08F8 0002 F754             		bset	#2,($FFFFF754).w
000053C2 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
000053C6 6100 0000                  		bsr.w	MainLoadBlockLoad
000053CA 6100 0000                  		bsr.w	LoadTilesFromStart
000053CE 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000053D6 46FC 2300                  		move	#$2300,sr
000053DA 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000053E0 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000053E4 6100 C394                  		bsr.w	KosDec
000053E8 7003                       		moveq	#3,d0
000053EA 6100 CD24                  		bsr.w	PalLoad1	; load Sonic's pallet
000053EE 303C 008B                  		move.w	#$8B,d0
000053F2 6100 BE26                  		bsr.w	PlaySound	; play ending sequence music
000053F6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000053FC 6700                       		beq.s	End_LoadSonic	; if not, branch
000053FE 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005404                            
00005404                            End_LoadSonic:
00005404 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000540A 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005410 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005416 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000541C 31FC F800 D020             		move.w	#$F800,($FFFFD020).w ; set Sonic's speed
00005422 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005428 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
0000542E 4EB9 0000 0000             		jsr	ObjPosLoad
00005434 4EB9 0000 0000             		jsr	ObjectsLoad
0000543A 4EB9 0000 0000             		jsr	BuildSprites
00005440 7000                       		moveq	#0,d0
00005442 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005446 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000544A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000544E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005452 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005456 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000545A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000545E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005462 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005466 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000546A 6100 EDE2                  		bsr.w	OscillateNumInit
0000546E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005474 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000547A 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005480 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005486 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000548C 6100 D536                  		bsr.w	DelayProgram
00005490 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005494 0000 0040                  		ori.b	#$40,d0
00005498 33C0 00C0 0004             		move.w	d0,($C00004).l
0000549E 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000054A4 6100 C962                  		bsr.w	Pal_FadeTo
000054A8                            
000054A8                            ; ---------------------------------------------------------------------------
000054A8                            ; Main ending sequence loop
000054A8                            ; ---------------------------------------------------------------------------
000054A8                            
000054A8                            End_MainLoop:
000054A8 6100 BD82                  		bsr.w	PauseGame
000054AC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000054B2 6100 D510                  		bsr.w	DelayProgram
000054B6 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000054BA 6100 0000                  		bsr.w	End_MoveSonic
000054BE 4EB9 0000 0000             		jsr	ObjectsLoad
000054C4 6100 0000                  		bsr.w	DeformBgLayer
000054C8 4EB9 0000 0000             		jsr	BuildSprites
000054CE 4EB9 0000 0000             		jsr	ObjPosLoad
000054D4 6100 C4C2                  		bsr.w	PalCycle_Load
000054D8 6100 EDCA                  		bsr.w	OscillateNumDo
000054DC 6100 EE56                  		bsr.w	ChangeRingFrame
000054E0 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000054E6 6700                       		beq.s	loc_52DA	; if yes, branch
000054E8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000054EE 103C 0091                  		move.b	#$91,d0
000054F2 6100 BD2C                  		bsr.w	PlaySound_Special ; play credits music
000054F6 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000054FC 4E75                       		rts	
000054FE                            ; ===========================================================================
000054FE                            
000054FE                            loc_52DA:
000054FE 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005502 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005506                            
00005506 4278 FE02                  		clr.w	($FFFFFE02).w
0000550A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00005510 4278 F794                  		clr.w	($FFFFF794).w
00005514                            
00005514                            End_AllEmlds:				; XREF: loc_5334
00005514 6100 BD16                  		bsr.w	PauseGame
00005518 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000551E 6100 D4A4                  		bsr.w	DelayProgram
00005522 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005526 6100 0000                  		bsr.w	End_MoveSonic
0000552A 4EB9 0000 0000             		jsr	ObjectsLoad
00005530 6100 0000                  		bsr.w	DeformBgLayer
00005534 4EB9 0000 0000             		jsr	BuildSprites
0000553A 4EB9 0000 0000             		jsr	ObjPosLoad
00005540 6100 ED62                  		bsr.w	OscillateNumDo
00005544 6100 EDEE                  		bsr.w	ChangeRingFrame
00005548 5378 F794                  		subq.w	#1,($FFFFF794).w
0000554C 6A00                       		bpl.s	loc_5334
0000554E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005554 6100 CA5A                  		bsr.w	Pal_ToWhite
00005558                            
00005558                            loc_5334:
00005558 4A78 FE02                  		tst.w	($FFFFFE02).w
0000555C 6700 FFB6                  		beq.w	End_AllEmlds
00005560 4278 FE02                  		clr.w	($FFFFFE02).w
00005564 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000556A 4BF9 00C0 0004             		lea	($C00004).l,a5
00005570 4DF9 00C0 0000             		lea	($C00000).l,a6
00005576 47F8 F700                  		lea	($FFFFF700).w,a3
0000557A 49F8 A400                  		lea	($FFFFA400).w,a4
0000557E 343C 4000                  		move.w	#$4000,d2
00005582 6100 0000                  		bsr.w	LoadTilesFromStart2
00005586 7013                       		moveq	#$13,d0
00005588 6100 CB86                  		bsr.w	PalLoad1	; load ending pallet
0000558C 6100 C97A                  		bsr.w	Pal_MakeWhite
00005590 6000 FF16                  		bra.w	End_MainLoop
00005594                            
00005594                            ; ---------------------------------------------------------------------------
00005594                            ; Subroutine controlling Sonic on the ending sequence
00005594                            ; ---------------------------------------------------------------------------
00005594                            
00005594                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005594                            
00005594                            
00005594                            End_MoveSonic:				; XREF: End_MainLoop
00005594 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005598 6600                       		bne.s	End_MoveSonic2
0000559A 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000055A0 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000055A2 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000055A6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000055AC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000055B2 4E75                       		rts	
000055B4                            ; ===========================================================================
000055B4                            
000055B4                            End_MoveSonic2:				; XREF: End_MoveSonic
000055B4 5500                       		subq.b	#2,d0
000055B6 6600                       		bne.s	End_MoveSonic3
000055B8 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000055BE 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000055C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000055C4 7000                       		moveq	#0,d0
000055C6 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000055CA 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000055CE 31C0 D020                  		move.w	d0,($FFFFD020).w
000055D2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000055D8 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000055DE 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000055E4 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000055EA 4E75                       		rts	
000055EC                            ; ===========================================================================
000055EC                            
000055EC                            End_MoveSonic3:				; XREF: End_MoveSonic
000055EC 5500                       		subq.b	#2,d0
000055EE 6600                       		bne.s	End_MoveSonExit
000055F0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000055F4 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000055FA 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005600 4278 D024                  		clr.w	($FFFFD024).w
00005604                            
00005604                            End_MoveSonExit:
00005604 4E75                       		rts	
00005606                            ; End of function End_MoveSonic
00005606                            
00005606                            ; ===========================================================================
00005606                            ; ---------------------------------------------------------------------------
00005606                            ; Object 87 - Sonic on ending sequence
00005606                            ; ---------------------------------------------------------------------------
00005606                            
00005606                            Obj87:					; XREF: Obj_Index
00005606 7000                       		moveq	#0,d0
00005608 1028 0025                  		move.b	$25(a0),d0
0000560C 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005610 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005614 4EF9 0000 0000             		jmp	DisplaySprite
0000561A                            ; ===========================================================================
0000561A 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000561E 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005622 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005626 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000562A 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000562E                            ; ===========================================================================
0000562E                            
0000562E                            Obj87_Main:				; XREF: Obj87_Index
0000562E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005634 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005636 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000563C 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005642 4E75                       		rts	
00005644                            ; ===========================================================================
00005644                            
00005644                            Obj87_Main2:				; XREF: Obj87_Main
00005644 5428 0025                  		addq.b	#2,$25(a0)
00005648 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005650 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005656 117C 0004 0001             		move.b	#4,1(a0)
0000565C 4228 0022                  		clr.b	$22(a0)
00005660 117C 0002 0018             		move.b	#2,$18(a0)
00005666 117C 0000 001A             		move.b	#0,$1A(a0)
0000566C 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005672                            
00005672                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005672 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005676 6600                       		bne.s	Obj87_Wait
00005678 5428 0025                  		addq.b	#2,$25(a0)
0000567C 317C 0001 001C             		move.w	#1,$1C(a0)
00005682 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005688                            
00005688                            Obj87_Wait:
00005688 4E75                       		rts	
0000568A                            ; ===========================================================================
0000568A                            
0000568A                            Obj87_LookUp:				; XREF: Obj87_Index
0000568A 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005692 6600                       		bne.s	locret_5480
00005694 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000569A 317C 005A 0030             		move.w	#$5A,$30(a0)
000056A0 5428 0025                  		addq.b	#2,$25(a0)
000056A4                            
000056A4                            locret_5480:
000056A4 4E75                       		rts	
000056A6                            ; ===========================================================================
000056A6                            
000056A6                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000056A6 5368 0030                  		subq.w	#1,$30(a0)
000056AA 6600                       		bne.s	Obj87_Wait2
000056AC 43F8 D400                  		lea	($FFFFD400).w,a1
000056B0 323C 00FF                  		move.w	#$FF,d1
000056B4                            
000056B4                            Obj87_ClrLoop:
000056B4 4299                       		clr.l	(a1)+
000056B6 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000056BA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000056C0 5428 0025                  		addq.b	#2,$25(a0)
000056C4 117C 0001 001C             		move.b	#1,$1C(a0)
000056CA 317C 003C 0030             		move.w	#$3C,$30(a0)
000056D0                            
000056D0                            Obj87_Wait2:
000056D0 4E75                       		rts	
000056D2                            ; ===========================================================================
000056D2                            
000056D2                            Obj87_MakeLogo:				; XREF: Obj87_Index
000056D2 5368 0030                  		subq.w	#1,$30(a0)
000056D6 6600                       		bne.s	Obj87_Wait3
000056D8 5428 0025                  		addq.b	#2,$25(a0)
000056DC 317C 00B4 0030             		move.w	#$B4,$30(a0)
000056E2 117C 0002 001C             		move.b	#2,$1C(a0)
000056E8 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000056EE                            
000056EE                            Obj87_Wait3:
000056EE 4E75                       		rts	
000056F0                            ; ===========================================================================
000056F0                            
000056F0                            Obj87_Animate:				; XREF: Obj87_Index
000056F0 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000056F6 4EF9 0000 0000             		jmp	AnimateSprite
000056FC                            ; ===========================================================================
000056FC                            
000056FC                            Obj87_Leap:				; XREF: Obj87_Index
000056FC 5368 0030                  		subq.w	#1,$30(a0)
00005700 6600                       		bne.s	Obj87_Wait4
00005702 5428 0025                  		addq.b	#2,$25(a0)
00005706 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000570E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005714 117C 0004 0001             		move.b	#4,1(a0)
0000571A 4228 0022                  		clr.b	$22(a0)
0000571E 117C 0002 0018             		move.b	#2,$18(a0)
00005724 117C 0005 001A             		move.b	#5,$1A(a0)
0000572A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005730 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005736 60B8                       		bra.s	Obj87_Animate
00005738                            ; ===========================================================================
00005738                            
00005738                            Obj87_Wait4:				; XREF: Obj87_Leap
00005738 4E75                       		rts	
0000573A                            ; ===========================================================================
0000573A                            Ani_obj87:
0000573A                            	include "_anim\obj87.asm"
0000573A                            ; ---------------------------------------------------------------------------
0000573A                            ; Animation script - Sonic on the ending sequence
0000573A                            ; ---------------------------------------------------------------------------
0000573A 0000                       		dc.w byte_551C-Ani_obj87
0000573C 0000                       		dc.w byte_552A-Ani_obj87
0000573E 0000                       		dc.w byte_5534-Ani_obj87
00005740 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000574E 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005758 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005760                            		even
00005760                            		even
00005760                            
00005760                            ; ===========================================================================
00005760                            ; ---------------------------------------------------------------------------
00005760                            ; Object 88 - chaos emeralds on	the ending sequence
00005760                            ; ---------------------------------------------------------------------------
00005760                            
00005760                            Obj88:					; XREF: Obj_Index
00005760 7000                       		moveq	#0,d0
00005762 1028 0024                  		move.b	$24(a0),d0
00005766 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000576A 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000576E 4EF9 0000 0000             		jmp	DisplaySprite
00005774                            ; ===========================================================================
00005774 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005776 0000                       		dc.w Obj88_Move-Obj88_Index
00005778                            ; ===========================================================================
00005778                            
00005778                            Obj88_Main:				; XREF: Obj88_Index
00005778 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000577E 6700                       		beq.s	Obj88_Main2
00005780 588F                       		addq.l	#4,sp
00005782 4E75                       		rts	
00005784                            ; ===========================================================================
00005784                            
00005784                            Obj88_Main2:				; XREF: Obj88_Main
00005784 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000578A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005790 2248                       		movea.l	a0,a1
00005792 7600                       		moveq	#0,d3
00005794 7401                       		moveq	#1,d2
00005796 7205                       		moveq	#5,d1
00005798                            
00005798                            Obj88_MainLoop:
00005798 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000579C 5429 0024                  		addq.b	#2,$24(a1)
000057A0 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000057A8 337C 03C5 0002             		move.w	#$3C5,2(a1)
000057AE 137C 0004 0001             		move.b	#4,1(a1)
000057B4 137C 0001 0018             		move.b	#1,$18(a1)
000057BA 3368 0008 0038             		move.w	8(a0),$38(a1)
000057C0 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000057C6 1342 001C                  		move.b	d2,$1C(a1)
000057CA 1342 001A                  		move.b	d2,$1A(a1)
000057CE 5202                       		addq.b	#1,d2
000057D0 1343 0026                  		move.b	d3,$26(a1)
000057D4 0603 002A                  		addi.b	#$2A,d3
000057D8 43E9 0040                  		lea	$40(a1),a1
000057DC 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000057E0                            
000057E0                            Obj88_Move:				; XREF: Obj88_Index
000057E0 3028 003E                  		move.w	$3E(a0),d0
000057E4 D168 0026                  		add.w	d0,$26(a0)
000057E8 1028 0026                  		move.b	$26(a0),d0
000057EC 4EB9 0000 29F6             		jsr	(CalcSine).l
000057F2 7800                       		moveq	#0,d4
000057F4 1828 003C                  		move.b	$3C(a0),d4
000057F8 C3C4                       		muls.w	d4,d1
000057FA E081                       		asr.l	#8,d1
000057FC C1C4                       		muls.w	d4,d0
000057FE E080                       		asr.l	#8,d0
00005800 D268 0038                  		add.w	$38(a0),d1
00005804 D068 003A                  		add.w	$3A(a0),d0
00005808 3141 0008                  		move.w	d1,8(a0)
0000580C 3140 000C                  		move.w	d0,$C(a0)
00005810 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005816 6700                       		beq.s	loc_55FA
00005818 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000581E                            
0000581E                            loc_55FA:
0000581E 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005824 6700                       		beq.s	loc_5608
00005826 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000582C                            
0000582C                            loc_5608:
0000582C 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005832 6700                       		beq.s	locret_5614
00005834 5368 003A                  		subq.w	#1,$3A(a0)
00005838                            
00005838                            locret_5614:
00005838 4E75                       		rts	
0000583A                            ; ===========================================================================
0000583A                            ; ---------------------------------------------------------------------------
0000583A                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000583A                            ; ---------------------------------------------------------------------------
0000583A                            
0000583A                            Obj89:					; XREF: Obj_Index
0000583A 7000                       		moveq	#0,d0
0000583C 1028 0024                  		move.b	$24(a0),d0
00005840 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005844 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005848                            ; ===========================================================================
00005848 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000584A 0000                       		dc.w Obj89_Move-Obj89_Index
0000584C 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000584E                            ; ===========================================================================
0000584E                            
0000584E                            Obj89_Main:				; XREF: Obj89_Index
0000584E 5428 0024                  		addq.b	#2,$24(a0)
00005852 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005858 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000585E 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005866 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000586C 117C 0000 0001             		move.b	#0,1(a0)
00005872 117C 0000 0018             		move.b	#0,$18(a0)
00005878                            
00005878                            Obj89_Move:				; XREF: Obj89_Index
00005878 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000587E 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005880 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005886 4EF9 0000 0000             		jmp	DisplaySprite
0000588C                            ; ===========================================================================
0000588C                            
0000588C                            Obj89_Delay:				; XREF: Obj89_Move
0000588C 5428 0024                  		addq.b	#2,$24(a0)
00005890 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005896                            
00005896                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005896 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000589A 6A00                       		bpl.s	Obj89_Display
0000589C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000058A2                            
000058A2                            Obj89_Display:
000058A2 4EF9 0000 0000             		jmp	(DisplaySprite).l
000058A8                            ; ===========================================================================
000058A8                            ; ---------------------------------------------------------------------------
000058A8                            ; Sprite mappings - Sonic on the ending	sequence
000058A8                            ; ---------------------------------------------------------------------------
000058A8                            Map_obj87:
000058A8                            	include "_maps\obj87.asm"
000058A8                            ; ---------------------------------------------------------------------------
000058A8                            ; Sprite mappings - Sonic on the ending	sequence
000058A8                            ; ---------------------------------------------------------------------------
000058A8 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000058AC 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000058B0 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000058B4 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000058B8 02                         byte_5690:	dc.b 2
000058B9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000058BE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000058C3 03                         byte_569B:	dc.b 3
000058C4 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000058C9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000058CE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000058D3 02                         byte_56AB:	dc.b 2
000058D4 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000058D9 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000058DE 02                         byte_56B6:	dc.b 2
000058DF EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000058E4 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000058E9 02                         byte_56C1:	dc.b 2
000058EA EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000058EF FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000058F4 03                         byte_56CC:	dc.b 3
000058F5 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000058FA EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000058FF 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005904 07                         byte_56DC:	dc.b 7
00005905 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
0000590A BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
0000590F BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005914 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005919 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000591E E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005923 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005928 18                         byte_5700:	dc.b $18
00005929 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000592E 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005933 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005938 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000593D A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005942 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005947 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000594C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005951 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005956 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000595B A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005960 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005965 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000596A B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000596F B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005974 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005979 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000597E D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005983 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005988 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000598D D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005992 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005997 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000599C F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000059A2 00                         		even
000059A2 00                         		even
000059A2                            
000059A2                            ; ---------------------------------------------------------------------------
000059A2                            ; Sprite mappings - chaos emeralds on the ending sequence
000059A2                            ; ---------------------------------------------------------------------------
000059A2                            Map_obj88:
000059A2                            	include "_maps\obj88.asm"
000059A2                            ; ---------------------------------------------------------------------------
000059A2                            ; Sprite mappings - chaos emeralds on the ending sequence
000059A2                            ; ---------------------------------------------------------------------------
000059A2 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000059A6 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000059AA 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000059AE 0000                       		dc.w byte_57AC-Map_obj88
000059B0 01                         byte_5788:	dc.b 1
000059B1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000059B6 01                         byte_578E:	dc.b 1
000059B7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000059BC 01                         byte_5794:	dc.b 1
000059BD F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000059C2 01                         byte_579A:	dc.b 1
000059C3 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000059C8 01                         byte_57A0:	dc.b 1
000059C9 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000059CE 01                         byte_57A6:	dc.b 1
000059CF F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000059D4 01                         byte_57AC:	dc.b 1
000059D5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000059DA                            		even
000059DA                            		even
000059DA                            
000059DA                            ; ---------------------------------------------------------------------------
000059DA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000059DA                            ; ---------------------------------------------------------------------------
000059DA                            Map_obj89:
000059DA                            	include "_maps\obj89.asm"
000059DA                            ; ---------------------------------------------------------------------------
000059DA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000059DA                            ; ---------------------------------------------------------------------------
000059DA 0000                       		dc.w byte_57B4-Map_obj89
000059DC 03                         byte_57B4:	dc.b 3
000059DD F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000059E2 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000059E7 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000059EC                            		even
000059EC                            		even
000059EC                            
000059EC                            ; ===========================================================================
000059EC                            ; ---------------------------------------------------------------------------
000059EC                            ; Credits ending sequence
000059EC                            ; ---------------------------------------------------------------------------
000059EC                            
000059EC                            Credits:				; XREF: GameModeArray
000059EC 6100 BACE                  		bsr.w	ClearPLC
000059F0 6100 C498                  		bsr.w	Pal_FadeFrom
000059F4 4DF9 00C0 0004             		lea	($C00004).l,a6
000059FA 3CBC 8004                  		move.w	#$8004,(a6)
000059FE 3CBC 8230                  		move.w	#$8230,(a6)
00005A02 3CBC 8407                  		move.w	#$8407,(a6)
00005A06 3CBC 9001                  		move.w	#$9001,(a6)
00005A0A 3CBC 9200                  		move.w	#$9200,(a6)
00005A0E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005A12 3CBC 8720                  		move.w	#$8720,(a6)
00005A16 4238 F64E                  		clr.b	($FFFFF64E).w
00005A1A 6100 B6DE                  		bsr.w	ClearScreen
00005A1E 43F8 D000                  		lea	($FFFFD000).w,a1
00005A22 7000                       		moveq	#0,d0
00005A24 323C 07FF                  		move.w	#$7FF,d1
00005A28                            
00005A28                            Cred_ClrObjRam:
00005A28 22C0                       		move.l	d0,(a1)+
00005A2A 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005A2E                            
00005A2E 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005A38 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005A3E 6100 B8D2                  		bsr.w	NemDec
00005A42 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005A46 7000                       		moveq	#0,d0
00005A48 323C 001F                  		move.w	#$1F,d1
00005A4C                            
00005A4C                            Cred_ClrPallet:
00005A4C 22C0                       		move.l	d0,(a1)+
00005A4E 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005A52                            
00005A52 7014                       		moveq	#$14,d0
00005A54 6100 C6BA                  		bsr.w	PalLoad1	; load Sonic's pallet
00005A58 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005A5E 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
00005A64 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00005A6A 4EB9 0000 0000             		jsr	ObjectsLoad
00005A70 4EB9 0000 0000             		jsr	BuildSprites
00005A76 6100 0000                  		bsr.w	EndingDemoLoad
00005A7A 7000                       		moveq	#0,d0
00005A7C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A80 E948                       		lsl.w	#4,d0
00005A82 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005A88 45F2 0000                  		lea	(a2,d0.w),a2
00005A8C 7000                       		moveq	#0,d0
00005A8E 1012                       		move.b	(a2),d0
00005A90 6700                       		beq.s	loc_5862
00005A92 6100 B9CA                  		bsr.w	LoadPLC		; load level patterns
00005A96                            
00005A96                            loc_5862:
00005A96 7001                       		moveq	#1,d0
00005A98 6100 B9C4                  		bsr.w	LoadPLC		; load standard	level patterns
00005A9C 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005AA2 6100 C364                  		bsr.w	Pal_FadeTo
00005AA6                            
00005AA6                            Cred_WaitLoop:
00005AA6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005AAC 6100 CF16                  		bsr.w	DelayProgram
00005AB0 6100 BA18                  		bsr.w	RunPLC_RAM
00005AB4 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005AB8 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005ABA 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005ABE 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005AC0 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005AC6 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005ACA 4E75                       		rts	
00005ACC                            
00005ACC                            ; ---------------------------------------------------------------------------
00005ACC                            ; Ending sequence demo loading subroutine
00005ACC                            ; ---------------------------------------------------------------------------
00005ACC                            
00005ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005ACC                            
00005ACC                            
00005ACC                            EndingDemoLoad:				; XREF: Credits
00005ACC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005AD0 0240 000F                  		andi.w	#$F,d0
00005AD4 D040                       		add.w	d0,d0
00005AD6 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005ADA 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005ADE 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005AE2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005AE8 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005AEA 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005AF0 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005AF6 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005AFC 7000                       		moveq	#0,d0
00005AFE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005B02 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005B06 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005B0A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005B0E 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005B14 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005B16 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005B1C 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005B20 303C 0008                  		move.w	#8,d0
00005B24                            
00005B24                            EndDemo_LampLoad:
00005B24 24D9                       		move.l	(a1)+,(a2)+
00005B26 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005B2A                            
00005B2A                            EndDemo_Exit:
00005B2A 4E75                       		rts	
00005B2C                            ; End of function EndingDemoLoad
00005B2C                            
00005B2C                            ; ===========================================================================
00005B2C                            ; ---------------------------------------------------------------------------
00005B2C                            ; Levels used in the end sequence demos
00005B2C                            ; ---------------------------------------------------------------------------
00005B2C                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005B3C                            
00005B3C                            ; ---------------------------------------------------------------------------
00005B3C                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005B3C                            ; ---------------------------------------------------------------------------
00005B3C                            EndDemo_LampVar:
00005B3C 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005B3E 0A00 062C 000D             		dc.w $A00, $62C, $D
00005B44 0000 0000                  		dc.l 0
00005B48 0000                       		dc.b 0,	0
00005B4A 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005B5E 0101                       		dc.b 1,	1
00005B60                            ; ===========================================================================
00005B60                            ; ---------------------------------------------------------------------------
00005B60                            ; "TRY AGAIN" and "END"	screens
00005B60                            ; ---------------------------------------------------------------------------
00005B60                            
00005B60                            TryAgainEnd:				; XREF: Credits
00005B60 6100 B95A                  		bsr.w	ClearPLC
00005B64 6100 C324                  		bsr.w	Pal_FadeFrom
00005B68 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B6E 3CBC 8004                  		move.w	#$8004,(a6)
00005B72 3CBC 8230                  		move.w	#$8230,(a6)
00005B76 3CBC 8407                  		move.w	#$8407,(a6)
00005B7A 3CBC 9001                  		move.w	#$9001,(a6)
00005B7E 3CBC 9200                  		move.w	#$9200,(a6)
00005B82 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B86 3CBC 8720                  		move.w	#$8720,(a6)
00005B8A 4238 F64E                  		clr.b	($FFFFF64E).w
00005B8E 6100 B56A                  		bsr.w	ClearScreen
00005B92 43F8 D000                  		lea	($FFFFD000).w,a1
00005B96 7000                       		moveq	#0,d0
00005B98 323C 07FF                  		move.w	#$7FF,d1
00005B9C                            
00005B9C                            TryAg_ClrObjRam:
00005B9C 22C0                       		move.l	d0,(a1)+
00005B9E 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005BA2                            
00005BA2 701D                       		moveq	#$1D,d0
00005BA4 6100 BA24                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005BA8 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005BAC 7000                       		moveq	#0,d0
00005BAE 323C 001F                  		move.w	#$1F,d1
00005BB2                            
00005BB2                            TryAg_ClrPallet:
00005BB2 22C0                       		move.l	d0,(a1)+
00005BB4 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005BB8                            
00005BB8 7013                       		moveq	#$13,d0
00005BBA 6100 C554                  		bsr.w	PalLoad1	; load ending pallet
00005BBE 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005BC2 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005BC8 4EB9 0000 0000             		jsr	ObjectsLoad
00005BCE 4EB9 0000 0000             		jsr	BuildSprites
00005BD4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005BDA 6100 C22C                  		bsr.w	Pal_FadeTo
00005BDE                            
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            ; "TRY AGAIN" and "END"	screen main loop
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            TryAg_MainLoop:
00005BDE 6100 B64C                  		bsr.w	PauseGame
00005BE2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005BE8 6100 CDDA                  		bsr.w	DelayProgram
00005BEC 4EB9 0000 0000             		jsr	ObjectsLoad
00005BF2 4EB9 0000 0000             		jsr	BuildSprites
00005BF8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005BFE 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005C00 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005C04 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005C06 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005C0C 67D0                       		beq.s	TryAg_MainLoop
00005C0E                            
00005C0E                            TryAg_Exit:
00005C0E 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00005C14 4E75                       		rts	
00005C16                            
00005C16                            ; ===========================================================================
00005C16                            ; ---------------------------------------------------------------------------
00005C16                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005C16                            ; ---------------------------------------------------------------------------
00005C16                            
00005C16                            Obj8B:					; XREF: Obj_Index
00005C16 7000                       		moveq	#0,d0
00005C18 1028 0024                  		move.b	$24(a0),d0
00005C1C 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005C20 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005C24 4EF9 0000 0000             		jmp	DisplaySprite
00005C2A                            ; ===========================================================================
00005C2A 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005C2C 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005C2E 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005C30 0000                       		dc.w loc_5A8E-Obj8B_Index
00005C32                            ; ===========================================================================
00005C32                            
00005C32                            Obj8B_Main:				; XREF: Obj8B_Index
00005C32 5428 0024                  		addq.b	#2,$24(a0)
00005C36 317C 0120 0008             		move.w	#$120,8(a0)
00005C3C 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005C42 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005C4A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005C50 117C 0000 0001             		move.b	#0,1(a0)
00005C56 117C 0002 0018             		move.b	#2,$18(a0)
00005C5C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005C62 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00005C68 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005C6E 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005C70 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00005C76 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005C7C 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005C82 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005C88 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005C8E                            
00005C8E                            Obj8B_Animate:				; XREF: Obj8B_Index
00005C8E 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005C94 4EF9 0000 0000             		jmp	AnimateSprite
00005C9A                            ; ===========================================================================
00005C9A                            
00005C9A                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005C9A 5428 0024                  		addq.b	#2,$24(a0)
00005C9E 7002                       		moveq	#2,d0
00005CA0 0828 0000 001C             		btst	#0,$1C(a0)
00005CA6 6700                       		beq.s	loc_5A6A
00005CA8 4440                       		neg.w	d0
00005CAA                            
00005CAA                            loc_5A6A:
00005CAA 43F8 D800                  		lea	($FFFFD800).w,a1
00005CAE 7205                       		moveq	#5,d1
00005CB0                            
00005CB0                            loc_5A70:
00005CB0 1340 003E                  		move.b	d0,$3E(a1)
00005CB4 3400                       		move.w	d0,d2
00005CB6 E742                       		asl.w	#3,d2
00005CB8 D529 0026                  		add.b	d2,$26(a1)
00005CBC 43E9 0040                  		lea	$40(a1),a1
00005CC0 51C9 FFEE                  		dbf	d1,loc_5A70
00005CC4 5228 001A                  		addq.b	#1,$1A(a0)
00005CC8 317C 0070 0030             		move.w	#112,$30(a0)
00005CCE                            
00005CCE                            loc_5A8E:				; XREF: Obj8B_Index
00005CCE 5368 0030                  		subq.w	#1,$30(a0)
00005CD2 6A00                       		bpl.s	locret_5AA0
00005CD4 0868 0000 001C             		bchg	#0,$1C(a0)
00005CDA 117C 0002 0024             		move.b	#2,$24(a0)
00005CE0                            
00005CE0                            locret_5AA0:
00005CE0 4E75                       		rts	
00005CE2                            ; ===========================================================================
00005CE2                            Ani_obj8B:
00005CE2                            	include "_anim\obj8B.asm"
00005CE2                            ; ---------------------------------------------------------------------------
00005CE2                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005CE2                            ; ---------------------------------------------------------------------------
00005CE2 0000                       		dc.w byte_5AA8-Ani_obj8B
00005CE4 0000                       		dc.w byte_5AAC-Ani_obj8B
00005CE6 0000                       		dc.w byte_5AB0-Ani_obj8B
00005CE8 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005CEC 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005CF0 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005D02                            		even
00005D02                            		even
00005D02                            
00005D02                            ; ===========================================================================
00005D02                            ; ---------------------------------------------------------------------------
00005D02                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005D02                            ; ---------------------------------------------------------------------------
00005D02                            
00005D02                            Obj8C:					; XREF: Obj_Index
00005D02 7000                       		moveq	#0,d0
00005D04 1028 0024                  		move.b	$24(a0),d0
00005D08 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005D0C 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005D10 4EF9 0000 0000             		jmp	DisplaySprite
00005D16                            ; ===========================================================================
00005D16 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005D18 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005D1A                            ; ===========================================================================
00005D1A                            
00005D1A                            Obj8C_Main:				; XREF: Obj8C_Index
00005D1A 2248                       		movea.l	a0,a1
00005D1C 7400                       		moveq	#0,d2
00005D1E 7600                       		moveq	#0,d3
00005D20 7205                       		moveq	#5,d1
00005D22 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005D26                            
00005D26                            Obj8C_MakeEms:				; XREF: loc_5B42
00005D26 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005D2A 5429 0024                  		addq.b	#2,$24(a1)
00005D2E 237C 0000 59A2 0004        		move.l	#Map_obj88,4(a1)
00005D36 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005D3C 137C 0000 0001             		move.b	#0,1(a1)
00005D42 137C 0001 0018             		move.b	#1,$18(a1)
00005D48 337C 0104 0008             		move.w	#$104,8(a1)
00005D4E 337C 0120 0038             		move.w	#$120,$38(a1)
00005D54 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005D5A 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005D60 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005D66 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005D6A                            
00005D6A                            Obj8C_ChkEms:
00005D6A 7000                       		moveq	#0,d0
00005D6C 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005D70 5340                       		subq.w	#1,d0
00005D72 6500                       		bcs.s	loc_5B42
00005D74                            
00005D74                            Obj8C_ChkEmLoop:
00005D74 B433 0000                  		cmp.b	(a3,d0.w),d2
00005D78 6600                       		bne.s	loc_5B3E
00005D7A 5202                       		addq.b	#1,d2
00005D7C 60EC                       		bra.s	Obj8C_ChkEms
00005D7E                            ; ===========================================================================
00005D7E                            
00005D7E                            loc_5B3E:
00005D7E 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005D82                            
00005D82                            loc_5B42:
00005D82 1342 001A                  		move.b	d2,$1A(a1)
00005D86 5229 001A                  		addq.b	#1,$1A(a1)
00005D8A 5202                       		addq.b	#1,d2
00005D8C 137C 0080 0026             		move.b	#$80,$26(a1)
00005D92 1343 001E                  		move.b	d3,$1E(a1)
00005D96 1343 001F                  		move.b	d3,$1F(a1)
00005D9A 0643 000A                  		addi.w	#$A,d3
00005D9E 43E9 0040                  		lea	$40(a1),a1
00005DA2 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005DA6                            
00005DA6                            Obj8C_Move:				; XREF: Obj8C_Index
00005DA6 4A68 003E                  		tst.w	$3E(a0)
00005DAA 6700                       		beq.s	locret_5BBA
00005DAC 4A28 001E                  		tst.b	$1E(a0)
00005DB0 6700                       		beq.s	loc_5B78
00005DB2 5328 001E                  		subq.b	#1,$1E(a0)
00005DB6 6600                       		bne.s	loc_5B80
00005DB8                            
00005DB8                            loc_5B78:
00005DB8 3028 003E                  		move.w	$3E(a0),d0
00005DBC D168 0026                  		add.w	d0,$26(a0)
00005DC0                            
00005DC0                            loc_5B80:
00005DC0 1028 0026                  		move.b	$26(a0),d0
00005DC4 6700                       		beq.s	loc_5B8C
00005DC6 0C00 0080                  		cmpi.b	#$80,d0
00005DCA 6600                       		bne.s	loc_5B96
00005DCC                            
00005DCC                            loc_5B8C:
00005DCC 4268 003E                  		clr.w	$3E(a0)
00005DD0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005DD6                            
00005DD6                            loc_5B96:
00005DD6 4EB9 0000 29F6             		jsr	(CalcSine).l
00005DDC 7800                       		moveq	#0,d4
00005DDE 1828 003C                  		move.b	$3C(a0),d4
00005DE2 C3C4                       		muls.w	d4,d1
00005DE4 E081                       		asr.l	#8,d1
00005DE6 C1C4                       		muls.w	d4,d0
00005DE8 E080                       		asr.l	#8,d0
00005DEA D268 0038                  		add.w	$38(a0),d1
00005DEE D068 003A                  		add.w	$3A(a0),d0
00005DF2 3141 0008                  		move.w	d1,8(a0)
00005DF6 3140 000A                  		move.w	d0,$A(a0)
00005DFA                            
00005DFA                            locret_5BBA:
00005DFA 4E75                       		rts	
00005DFC                            ; ===========================================================================
00005DFC                            ; ---------------------------------------------------------------------------
00005DFC                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005DFC                            ; ---------------------------------------------------------------------------
00005DFC                            Map_obj8B:
00005DFC                            	include "_maps\obj8B.asm"
00005DFC                            ; ---------------------------------------------------------------------------
00005DFC                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005DFC                            ; ---------------------------------------------------------------------------
00005DFC 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005E00 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005E04 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005E08 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005E0C 08                         byte_5BCC:	dc.b 8
00005E0D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005E12 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005E17 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005E1C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005E21 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E26 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E2B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E30 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E35 08                         byte_5BF5:	dc.b 8
00005E36 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005E3B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005E40 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005E45 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005E4A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005E4F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005E54 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E59 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E5E 08                         byte_5C1E:	dc.b 8
00005E5F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005E64 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005E69 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005E6E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005E73 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E78 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E7D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E82 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E87 08                         byte_5C47:	dc.b 8
00005E88 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005E8D F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005E92 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005E97 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005E9C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005EA1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005EA6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005EAB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005EB0 0C                         byte_5C70:	dc.b $C
00005EB1 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005EB6 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005EBB 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005EC0 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005EC5 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005ECA F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005ECF 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005ED4 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005ED9 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005EDE 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005EE3 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005EE8 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005EED 0A                         byte_5CAD:	dc.b $A
00005EEE D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005EF3 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005EF8 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005EFD D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005F02 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005F07 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005F0C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005F11 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005F16 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005F1B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005F20 0A                         byte_5CE0:	dc.b $A
00005F21 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005F26 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005F2B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005F30 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005F35 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005F3A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005F3F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005F44 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005F49 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005F4E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005F53 0C                         byte_5D13:	dc.b $C
00005F54 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005F59 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005F5E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005F63 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005F68 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005F6D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005F72 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005F77 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005F7C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005F81 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005F86 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005F8B 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005F90                            		even
00005F90                            		even
00005F90                            
00005F90                            ; ---------------------------------------------------------------------------
00005F90                            ; Ending sequence demos
00005F90                            ; ---------------------------------------------------------------------------
00005F90                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005FBE                            		even
00005FBE                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005FFE                            		even
00005FFE                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000602E                            		even
0000602E                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000605E                            		even
0000605E                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000607E                            		even
0000607E                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000609E                            		even
0000609E                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000060CE                            		even
000060CE                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000060FE                            		even
000060FE                            
000060FE                            ; ---------------------------------------------------------------------------
000060FE                            ; Subroutine to	load level boundaries and start	locations
000060FE                            ; ---------------------------------------------------------------------------
000060FE                            
000060FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000060FE                            
000060FE                            
000060FE                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000060FE 7000                       		moveq	#0,d0
00006100 11C0 F740                  		move.b	d0,($FFFFF740).w
00006104 11C0 F741                  		move.b	d0,($FFFFF741).w
00006108 11C0 F746                  		move.b	d0,($FFFFF746).w
0000610C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006110 11C0 F742                  		move.b	d0,($FFFFF742).w
00006114 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006118 ED08                       		lsl.b	#6,d0
0000611A E848                       		lsr.w	#4,d0
0000611C 3200                       		move.w	d0,d1
0000611E D040                       		add.w	d0,d0
00006120 D041                       		add.w	d1,d0
00006122 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006126 3018                       		move.w	(a0)+,d0
00006128 31C0 F730                  		move.w	d0,($FFFFF730).w
0000612C 2018                       		move.l	(a0)+,d0
0000612E 21C0 F728                  		move.l	d0,($FFFFF728).w
00006132 21C0 F720                  		move.l	d0,($FFFFF720).w
00006136 2018                       		move.l	(a0)+,d0
00006138 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000613C 21C0 F724                  		move.l	d0,($FFFFF724).w
00006140 3038 F728                  		move.w	($FFFFF728).w,d0
00006144 0640 0240                  		addi.w	#$240,d0
00006148 31C0 F732                  		move.w	d0,($FFFFF732).w
0000614C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006152 3018                       		move.w	(a0)+,d0
00006154 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006158 6000 0000                  		bra.w	LevSz_ChkLamp
0000615C                            ; ===========================================================================
0000615C                            ; ---------------------------------------------------------------------------
0000615C                            ; Level size array and ending start location array
0000615C                            ; ---------------------------------------------------------------------------
0000615C                            LevelSizeArray:	incbin	misc\lvl_size.bin
000062AC                            		even
000062AC                            
000062AC                            EndingStLocArray:
000062AC                            		incbin	misc\sloc_end.bin
000062CC                            		even
000062CC                            
000062CC                            ; ===========================================================================
000062CC                            
000062CC                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000062CC 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000062D0 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000062D2 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000062D8 3238 D008                  		move.w	($FFFFD008).w,d1
000062DC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000062E0 6000                       		bra.s	loc_60D0
000062E2                            ; ===========================================================================
000062E2                            
000062E2                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000062E2 3038 FE10                  		move.w	($FFFFFE10).w,d0
000062E6 ED08                       		lsl.b	#6,d0
000062E8 E848                       		lsr.w	#4,d0
000062EA 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000062EE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000062F2 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000062F4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000062F8 5340                       		subq.w	#1,d0
000062FA E548                       		lsl.w	#2,d0
000062FC 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006300                            
00006300                            LevSz_SonicPos:
00006300 7200                       		moveq	#0,d1
00006302 3219                       		move.w	(a1)+,d1
00006304 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006308 7000                       		moveq	#0,d0
0000630A 3011                       		move.w	(a1),d0
0000630C 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006310                            
00006310                            loc_60D0:				; XREF: LevSz_ChkLamp
00006310 0441 00A0                  		subi.w	#$A0,d1
00006314 6400                       		bcc.s	loc_60D8
00006316 7200                       		moveq	#0,d1
00006318                            
00006318                            loc_60D8:
00006318 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000631C B242                       		cmp.w	d2,d1
0000631E 6500                       		bcs.s	loc_60E2
00006320 3202                       		move.w	d2,d1
00006322                            
00006322                            loc_60E2:
00006322 31C1 F700                  		move.w	d1,($FFFFF700).w
00006326 0440 0060                  		subi.w	#$60,d0
0000632A 6400                       		bcc.s	loc_60EE
0000632C 7000                       		moveq	#0,d0
0000632E                            
0000632E                            loc_60EE:
0000632E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006332 6D00                       		blt.s	loc_60F8
00006334 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006338                            
00006338                            loc_60F8:
00006338 31C0 F704                  		move.w	d0,($FFFFF704).w
0000633C 6100 0000                  		bsr.w	BgScrollSpeed
00006340 7000                       		moveq	#0,d0
00006342 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006346 E508                       		lsl.b	#2,d0
00006348 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000634E 6000 0000                  		bra.w	LevSz_Unk
00006352                            ; ===========================================================================
00006352                            ; ---------------------------------------------------------------------------
00006352                            ; Sonic	start location array
00006352                            ; ---------------------------------------------------------------------------
00006352                            StartLocArray:	incbin	misc\sloc_lev.bin
000063C2                            		even
000063C2                            
000063C2                            ; ---------------------------------------------------------------------------
000063C2                            ; Which	256x256	tiles contain loops or roll-tunnels
000063C2                            ; ---------------------------------------------------------------------------
000063C2                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000063C2                            ; loop,	loop, tunnel, tunnel
000063C2                            ; ---------------------------------------------------------------------------
000063C2                            LoopTileNums:	incbin	misc\loopnums.bin
000063DE                            		even
000063DE                            
000063DE                            ; ===========================================================================
000063DE                            
000063DE                            LevSz_Unk:				; XREF: LevelSizeLoad
000063DE 7000                       		moveq	#0,d0
000063E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000063E4 E748                       		lsl.w	#3,d0
000063E6 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000063EA 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000063EE 24D9                       		move.l	(a1)+,(a2)+
000063F0 24D9                       		move.l	(a1)+,(a2)+
000063F2 4E75                       		rts	
000063F4                            ; End of function LevelSizeLoad
000063F4                            
000063F4                            ; ===========================================================================
000063F4 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000063FC 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006404 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000640C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006414 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000641C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006424 0070 0100 0100 0100        		dc.l $700100, $1000100
0000642C                            
0000642C                            ; ---------------------------------------------------------------------------
0000642C                            ; Subroutine to	set scroll speed of some backgrounds
0000642C                            ; ---------------------------------------------------------------------------
0000642C                            
0000642C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000642C                            
0000642C                            
0000642C                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000642C 4A38 FE30                  		tst.b	($FFFFFE30).w
00006430 6600                       		bne.s	loc_6206
00006432 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006436 31C0 F714                  		move.w	d0,($FFFFF714).w
0000643A 31C1 F708                  		move.w	d1,($FFFFF708).w
0000643E 31C1 F710                  		move.w	d1,($FFFFF710).w
00006442 31C1 F718                  		move.w	d1,($FFFFF718).w
00006446                            
00006446                            loc_6206:
00006446 7400                       		moveq	#0,d2
00006448 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000644C D442                       		add.w	d2,d2
0000644E 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006452 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006456                            ; End of function BgScrollSpeed
00006456                            
00006456                            ; ===========================================================================
00006456 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000645A 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000645E 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006462 0000                       		dc.w BgScroll_End-BgScroll_Index
00006464                            ; ===========================================================================
00006464                            
00006464                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006464 42B8 F708                  		clr.l	($FFFFF708).w
00006468 42B8 F70C                  		clr.l	($FFFFF70C).w
0000646C 42B8 F714                  		clr.l	($FFFFF714).w
00006470 42B8 F71C                  		clr.l	($FFFFF71C).w
00006474 45F8 A800                  		lea	($FFFFA800).w,a2
00006478 429A                       		clr.l	(a2)+
0000647A 429A                       		clr.l	(a2)+
0000647C 429A                       		clr.l	(a2)+
0000647E 4E75                       		rts 
00006480                            ; ===========================================================================
00006480                            
00006480                            BgScroll_LZ:				; XREF: BgScroll_Index
00006480 E280                       		asr.l	#1,d0
00006482 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006486 4E75                       		rts	
00006488                            ; ===========================================================================
00006488                            
00006488                            BgScroll_MZ:				; XREF: BgScroll_Index
00006488 4E75                       		rts	
0000648A                            ; ===========================================================================
0000648A                            
0000648A                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000648A E280                       		asr.l	#1,d0
0000648C 0640 00C0                  		addi.w	#$C0,d0
00006490 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006494 42B8 F708                  		clr.l	($FFFFF708).w
00006498 4E75                       		rts	
0000649A                            ; ===========================================================================
0000649A                            
0000649A                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000649A E980                       		asl.l	#4,d0
0000649C 2400                       		move.l	d0,d2
0000649E E380                       		asl.l	#1,d0
000064A0 D082                       		add.l	d2,d0
000064A2 E080                       		asr.l	#8,d0
000064A4 5240                       		addq.w	#1,d0
000064A6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000064AA 42B8 F708                  		clr.l	($FFFFF708).w
000064AE 4E75                       		rts	
000064B0                            ; ===========================================================================
000064B0                            
000064B0                            BgScroll_SBZ:				; XREF: BgScroll_Index
000064B0 0240 07F8                  		andi.w	#$7F8,d0
000064B4 E640                       		asr.w	#3,d0
000064B6 5240                       		addq.w	#1,d0
000064B8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000064BC 4E75                       		rts	
000064BE                            ; ===========================================================================
000064BE                            
000064BE                            BgScroll_End:				; XREF: BgScroll_Index
000064BE 3038 F700                  		move.w	($FFFFF700).w,d0
000064C2 E240                       		asr.w	#1,d0
000064C4 31C0 F708                  		move.w	d0,($FFFFF708).w
000064C8 31C0 F710                  		move.w	d0,($FFFFF710).w
000064CC E440                       		asr.w	#2,d0
000064CE 3200                       		move.w	d0,d1
000064D0 D040                       		add.w	d0,d0
000064D2 D041                       		add.w	d1,d0
000064D4 31C0 F718                  		move.w	d0,($FFFFF718).w
000064D8 42B8 F70C                  		clr.l	($FFFFF70C).w
000064DC 42B8 F714                  		clr.l	($FFFFF714).w
000064E0 42B8 F71C                  		clr.l	($FFFFF71C).w
000064E4 45F8 A800                  		lea	($FFFFA800).w,a2
000064E8 429A                       		clr.l	(a2)+
000064EA 429A                       		clr.l	(a2)+
000064EC 429A                       		clr.l	(a2)+
000064EE 4E75                       		rts
000064F0                            
000064F0                            ; ---------------------------------------------------------------------------
000064F0                            ; Background layer deformation subroutines
000064F0                            ; ---------------------------------------------------------------------------
000064F0                            
000064F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064F0                            
000064F0                            
000064F0                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000064F0 4A38 F744                  		tst.b	($FFFFF744).w
000064F4 6700                       		beq.s	loc_628E
000064F6 4E75                       		rts	
000064F8                            ; ===========================================================================
000064F8                            
000064F8                            loc_628E:
000064F8 4278 F754                  		clr.w	($FFFFF754).w
000064FC 4278 F756                  		clr.w	($FFFFF756).w
00006500 4278 F758                  		clr.w	($FFFFF758).w
00006504 4278 F75A                  		clr.w	($FFFFF75A).w
00006508 6100 0000                  		bsr.w	ScrollHoriz
0000650C 6100 0000                  		bsr.w	ScrollVertical
00006510 6100 0000                  		bsr.w	DynScrResizeLoad
00006514 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000651A 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006520 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006526 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000652C 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006532 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006538 7000                       		moveq	#0,d0
0000653A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000653E D040                       		add.w	d0,d0
00006540 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006544 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006548                            ; End of function DeformBgLayer
00006548                            
00006548                            ; ===========================================================================
00006548                            ; ---------------------------------------------------------------------------
00006548                            ; Offset index for background layer deformation	code
00006548                            ; ---------------------------------------------------------------------------
00006548 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000654C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006550 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006554 0000                       		dc.w Deform_GHZ-Deform_Index
00006556                            ; ---------------------------------------------------------------------------
00006556                            ; Green	Hill Zone background layer deformation code
00006556                            ; ---------------------------------------------------------------------------
00006556                            
00006556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006556                            
00006556                            
00006556                            Deform_GHZ:
00006556 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000655A 48C4                       		ext.l	d4
0000655C EB84                       		asl.l	#5,d4
0000655E 2204                       		move.l	d4,d1
00006560 E384                       		asl.l	#1,d4
00006562 D881                       		add.l	d1,d4
00006564 7C00                       		moveq	#0,d6
00006566 6100 0000                  		bsr.w	ScrollBlock6
0000656A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000656E 48C4                       		ext.l	d4
00006570 EF84                       		asl.l	#7,d4
00006572 7C00                       		moveq	#0,d6
00006574 6100 0000                  		bsr.w	ScrollBlock5
00006578 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000657C 3038 F704                  		move.w	($FFFFF704).w,d0
00006580 0240 07FF                  		andi.w	#$7FF,d0
00006584 EA48                       		lsr.w	#5,d0
00006586 4440                       		neg.w	d0
00006588 0640 0020                  		addi.w	#$20,d0	; ' '
0000658C 6A00                       		bpl.s	Deform_GHZ_1
0000658E 7000                       		moveq	#0,d0
00006590                            
00006590                            Deform_GHZ_1:				; XREF: Deform_GHZ
00006590 3800                       		move.w	d0,d4
00006592 31C0 F618                  		move.w	d0,($FFFFF618).w
00006596 3038 F700                  		move.w	($FFFFF700).w,d0
0000659A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000065A0 6600                       		bne.s	Deform_GHZ_2
000065A2 7000                       		moveq	#0,d0
000065A4                            
000065A4                            Deform_GHZ_2:				; XREF: Deform_GHZ
000065A4 4440                       		neg.w	d0
000065A6 4840                       		swap	d0
000065A8 45F8 A800                  		lea	($FFFFA800).w,a2
000065AC 069A 0001 0000             		addi.l	#$10000,(a2)+
000065B2 069A 0000 C000             		addi.l	#$C000,(a2)+
000065B8 069A 0000 8000             		addi.l	#$8000,(a2)+
000065BE 3038 A800                  		move.w	($FFFFA800).w,d0
000065C2 D078 F718                  		add.w	($FFFFF718).w,d0
000065C6 4440                       		neg.w	d0
000065C8 323C 001F                  		move.w	#$1F,d1
000065CC 9244                       		sub.w	d4,d1
000065CE 6500                       		bcs.s	Deform_GHZ_4
000065D0                            
000065D0                            Deform_GHZ_3:				; XREF: Deform_GHZ
000065D0 22C0                       		move.l	d0,(a1)+
000065D2 51C9 FFFC                  		dbf	d1,Deform_GHZ_3
000065D6                            
000065D6                            Deform_GHZ_4:				; XREF: Deform_GHZ
000065D6 3038 A804                  		move.w	($FFFFA804).w,d0
000065DA D078 F718                  		add.w	($FFFFF718).w,d0
000065DE 4440                       		neg.w	d0
000065E0 323C 000F                  		move.w	#$F,d1
000065E4                            
000065E4                            Deform_GHZ_5:				; XREF: Deform_GHZ
000065E4 22C0                       		move.l	d0,(a1)+
000065E6 51C9 FFFC                  		dbf	d1,Deform_GHZ_5
000065EA 3038 A808                  		move.w	($FFFFA808).w,d0
000065EE D078 F718                  		add.w	($FFFFF718).w,d0
000065F2 4440                       		neg.w	d0
000065F4 323C 000F                  		move.w	#$F,d1
000065F8                            
000065F8                            Deform_GHZ_6:				; XREF: Deform_GHZ
000065F8 22C0                       		move.l	d0,(a1)+
000065FA 51C9 FFFC                  		dbf	d1,Deform_GHZ_6
000065FE 323C 002F                  		move.w	#$2F,d1	; '/'
00006602 3038 F718                  		move.w	($FFFFF718).w,d0
00006606 4440                       		neg.w	d0
00006608                            
00006608                            Deform_GHZ_7:				; XREF: Deform_GHZ
00006608 22C0                       		move.l	d0,(a1)+
0000660A 51C9 FFFC                  		dbf	d1,Deform_GHZ_7
0000660E 323C 0027                  		move.w	#$27,d1	; '''
00006612 3038 F710                  		move.w	($FFFFF710).w,d0
00006616 4440                       		neg.w	d0
00006618                            
00006618                            Deform_GHZ_8:				; XREF: Deform_GHZ
00006618 22C0                       		move.l	d0,(a1)+
0000661A 51C9 FFFC                  		dbf	d1,Deform_GHZ_8
0000661E 3038 F710                  		move.w	($FFFFF710).w,d0
00006622 3438 F700                  		move.w	($FFFFF700).w,d2
00006626 9440                       		sub.w	d0,d2
00006628 48C2                       		ext.l	d2
0000662A E182                       		asl.l	#8,d2
0000662C 85FC 0068                  		divs.w	#$68,d2	; 'h'
00006630 48C2                       		ext.l	d2
00006632 E182                       		asl.l	#8,d2
00006634 7600                       		moveq	#0,d3
00006636 3600                       		move.w	d0,d3
00006638 323C 0047                  		move.w	#$47,d1	; 'G'
0000663C D244                       		add.w	d4,d1
0000663E                            
0000663E                            Deform_GHZ_9:				; XREF: Deform_GHZ
0000663E 3003                       		move.w	d3,d0
00006640 4440                       		neg.w	d0
00006642 22C0                       		move.l	d0,(a1)+
00006644 4843                       		swap	d3
00006646 D682                       		add.l	d2,d3
00006648 4843                       		swap	d3
0000664A 51C9 FFF2                  		dbf	d1,Deform_GHZ_9
0000664E 4E75                       		rts	
00006650                            ; End of function Deform_GHZ
00006650                            
00006650                            ; ===========================================================================
00006650                            ; ---------------------------------------------------------------------------
00006650                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
00006650                            ; ---------------------------------------------------------------------------
00006650                            
00006650                            Deform_LZ:
00006650 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
00006652 3838 F73A                  		move.w	($FFFFF73A).w,d4			; load horizontal movement distance (Since last frame)
00006656 48C4                       		ext.l	d4					; extend to long-word signed
00006658 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
0000665A 3A38 F73C                  		move.w	($FFFFF73C).w,d5			; load vertical movement distance (Since last frame)
0000665E 48C5                       		ext.l	d5					; extend to long-word signed
00006660 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
00006662 6100 0000                  		bsr.w	ScrollBlock1				; adjust BG scroll positions (and set draw code direction flags)
00006666 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w		; set BG V-scroll position
0000666C 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load H-scroll buffer
00006670 3038 F700                  		move.w	($FFFFF700).w,d0			; load FG X position
00006674 4440                       		neg.w	d0					; reverse
00006676 4840                       		swap	d0					; send to upper word
00006678 3038 F708                  		move.w	($FFFFF708).w,d0			; load BG X position
0000667C 4440                       		neg.w	d0					; reverse
0000667E 7600                       		moveq	#$00,d3					; clear d3
00006680 1638 F7D8                  		move.b	($FFFFF7D8).w,d3			; load wave-scroll timer
00006684 0678 0080 F7D8             		addi.w	#$0080,($FFFFF7D8).w			; increase wave-scroll timer
0000668A 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
0000668E 3238 F646                  		move.w	($FFFFF646).w,d1			; load water line position
00006692 9278 F704                  		sub.w	($FFFFF704).w,d1			; minus FG Y position
00006696 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
00006698 B242                       		cmp.w	d2,d1					; is the water line below the screen?
0000669A 6F00                       		ble.s	DLZ_NoWater				; if not, branch
0000669C 3202                       		move.w	d2,d1					; set at maximum
0000669E                            
0000669E                            DLZ_NoWater:
0000669E 9441                       		sub.w	d1,d2					; subtract from water-line count
000066A0 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
000066A2 5301                       		subq.b	#$01,d1					; decrease above water count
000066A4 6500                       		bcs.s	DLZ_Water				; if finished, branch
000066A6                            
000066A6                            DLZ_Above:
000066A6 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
000066A8 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
000066AC                            
000066AC                            DLZ_Water:
000066AC 5302                       		subq.b	#$01,d2					; decrease below water count
000066AE 6500                       		bcs.s	DLZ_Finish				; if finished, branch
000066B0 3200                       		move.w	d0,d1					; copy BG position back to d1
000066B2 4840                       		swap	d0					; move FG position back to lower word in d0
000066B4 3803                       		move.w	d3,d4					; copy sroll timer for BG use
000066B6 D638 F705                  		add.b	($FFFFF704+$01).w,d3			; add FG Y position
000066BA D838 F70D                  		add.b	($FFFFF70C+$01).w,d4			; add BG Y position
000066BE D643                       		add.w	d3,d3					; multiply by word size (2)
000066C0 D844                       		add.w	d4,d4					; ''
000066C2 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
000066C8 D6C4                       		adda.w	d4,a3					; advance to correct starting point
000066CA 1813                       		move.b	(a3),d4					; get current position byte
000066CC E404                       		asr.b	#$02,d4					; get only the position bits
000066CE 4884                       		ext.w	d4					; extend to word
000066D0 D244                       		add.w	d4,d1					; adjust BG's current position
000066D2 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
000066D6 1812                       		move.b	(a2),d4					; get current position byte
000066D8 E404                       		asr.b	#$02,d4					; get only the position bits
000066DA 4884                       		ext.w	d4					; extend to word
000066DC D044                       		add.w	d4,d0					; adjust FG's current position
000066DE                            
000066DE                            DLZ_Below:
000066DE D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
000066E0 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
000066E2 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
000066E4 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
000066E6 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
000066EA                            
000066EA                            DLZ_Finish:
000066EA 4E75                       		rts						; return
000066EC                            
000066EC                            ; ---------------------------------------------------------------------------
000066EC                            ; Scroll data for the FG
000066EC                            ; ---------------------------------------------------------------------------
000066EC                            
000066EC                            DLZ_WaveFG:
000066EC                            		rept	$02
000066EC                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC 0001 0400 0401 0800 0801+  		endr
00006AEC                            
00006AEC                            ; ---------------------------------------------------------------------------
00006AEC                            ; Scroll data for the BG
00006AEC                            ; ---------------------------------------------------------------------------
00006AEC                            
00006AEC                            DLZ_WaveBG:	rept	$04
00006AEC                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
00006AEC                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
00006AEC                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
00006AEC                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
00006AEC                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
00006AEC                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
00006AEC                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
00006AEC                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
00006AEC FC01 0000 0000 0000 0000+  		endr
00006EEC                            
00006EEC                            ; ===========================================================================
00006EEC                            
00006EEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EEC                            
00006EEC                            
00006EEC                            Deform_MZ:
00006EEC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EF0 48C4                       		ext.l	d4
00006EF2 ED84                       		asl.l	#6,d4
00006EF4 2204                       		move.l	d4,d1
00006EF6 E384                       		asl.l	#1,d4
00006EF8 D881                       		add.l	d1,d4
00006EFA 7C02                       		moveq	#2,d6
00006EFC 6100 0000                  		bsr.w	ScrollBlock4
00006F00 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F04 48C4                       		ext.l	d4
00006F06 ED84                       		asl.l	#6,d4
00006F08 7C06                       		moveq	#6,d6
00006F0A 6100 0000                  		bsr.w	ScrollBlock6
00006F0E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F12 48C4                       		ext.l	d4
00006F14 EF84                       		asl.l	#7,d4
00006F16 7C04                       		moveq	#4,d6
00006F18 6100 0000                  		bsr.w	ScrollBlock5
00006F1C 303C 0200                  		move.w	#$200,d0
00006F20 3238 F704                  		move.w	($FFFFF704).w,d1
00006F24 0441 01C8                  		subi.w	#$1C8,d1
00006F28 6500                       		bcs.s	Deform_MZ_1
00006F2A 3401                       		move.w	d1,d2
00006F2C D241                       		add.w	d1,d1
00006F2E D242                       		add.w	d2,d1
00006F30 E441                       		asr.w	#2,d1
00006F32 D041                       		add.w	d1,d0
00006F34                            
00006F34                            Deform_MZ_1:				; XREF: Deform_MZ
00006F34 31C0 F714                  		move.w	d0,($FFFFF714).w
00006F38 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00006F3C 6100 0000                  		bsr.w	ScrollBlock3
00006F40 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006F46 1038 F756                  		move.b	($FFFFF756).w,d0
00006F4A 8038 F758                  		or.b	($FFFFF758).w,d0
00006F4E 8138 F75A                  		or.b	d0,($FFFFF75A).w
00006F52 4238 F756                  		clr.b	($FFFFF756).w
00006F56 4238 F758                  		clr.b	($FFFFF758).w
00006F5A 43F8 A800                  		lea	($FFFFA800).w,a1
00006F5E 3438 F700                  		move.w	($FFFFF700).w,d2
00006F62 4442                       		neg.w	d2
00006F64 3002                       		move.w	d2,d0
00006F66 E440                       		asr.w	#2,d0
00006F68 9042                       		sub.w	d2,d0
00006F6A 48C0                       		ext.l	d0
00006F6C E780                       		asl.l	#3,d0
00006F6E 81FC 0005                  		divs.w	#5,d0
00006F72 48C0                       		ext.l	d0
00006F74 E980                       		asl.l	#4,d0
00006F76 E180                       		asl.l	#8,d0
00006F78 7600                       		moveq	#0,d3
00006F7A 3602                       		move.w	d2,d3
00006F7C E243                       		asr.w	#1,d3
00006F7E 323C 0004                  		move.w	#4,d1
00006F82                            
00006F82                            Deform_MZ_2:				; XREF: Deform_MZ
00006F82 32C3                       		move.w	d3,(a1)+
00006F84 4843                       		swap	d3
00006F86 D680                       		add.l	d0,d3
00006F88 4843                       		swap	d3
00006F8A 51C9 FFF6                  		dbf	d1,Deform_MZ_2
00006F8E 3038 F718                  		move.w	($FFFFF718).w,d0
00006F92 4440                       		neg.w	d0
00006F94 323C 0001                  		move.w	#1,d1
00006F98                            
00006F98                            Deform_MZ_3:				; XREF: Deform_MZ
00006F98 32C0                       		move.w	d0,(a1)+
00006F9A 51C9 FFFC                  		dbf	d1,Deform_MZ_3
00006F9E 3038 F710                  		move.w	($FFFFF710).w,d0
00006FA2 4440                       		neg.w	d0
00006FA4 323C 0008                  		move.w	#8,d1
00006FA8                            
00006FA8                            Deform_MZ_4:				; XREF: Deform_MZ
00006FA8 32C0                       		move.w	d0,(a1)+
00006FAA 51C9 FFFC                  		dbf	d1,Deform_MZ_4
00006FAE 3038 F708                  		move.w	($FFFFF708).w,d0
00006FB2 4440                       		neg.w	d0
00006FB4 323C 000F                  		move.w	#$F,d1
00006FB8                            
00006FB8                            Deform_MZ_5:				; XREF: Deform_MZ
00006FB8 32C0                       		move.w	d0,(a1)+
00006FBA 51C9 FFFC                  		dbf	d1,Deform_MZ_5
00006FBE 45F8 A800                  		lea	($FFFFA800).w,a2
00006FC2 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006FC6 0440 0200                  		subi.w	#$200,d0
00006FCA 3400                       		move.w	d0,d2
00006FCC 0C40 0100                  		cmpi.w	#$100,d0
00006FD0 6500                       		bcs.s	Deform_MZ_6
00006FD2 303C 0100                  		move.w	#$100,d0
00006FD6                            
00006FD6                            Deform_MZ_6:				; XREF: Deform_MZ
00006FD6 0240 01F0                  		andi.w	#$1F0,d0
00006FDA E648                       		lsr.w	#3,d0
00006FDC 45F2 0000                  		lea	(a2,d0.w),a2
00006FE0 6000 0000                  		bra.w	Deform_All
00006FE4                            ; ===========================================================================
00006FE4                            
00006FE4                            Deform_SLZ:
00006FE4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006FE8 48C5                       		ext.l	d5
00006FEA EF85                       		asl.l	#7,d5
00006FEC 6100 0000                  		bsr.w	ScrollBlock2
00006FF0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FF6 43F8 A800                  		lea	($FFFFA800).w,a1
00006FFA 3438 F700                  		move.w	($FFFFF700).w,d2
00006FFE 4442                       		neg.w	d2
00007000 3002                       		move.w	d2,d0
00007002 E640                       		asr.w	#3,d0
00007004 9042                       		sub.w	d2,d0
00007006 48C0                       		ext.l	d0
00007008 E980                       		asl.l	#4,d0
0000700A 81FC 001C                  		divs.w	#$1C,d0
0000700E 48C0                       		ext.l	d0
00007010 E980                       		asl.l	#4,d0
00007012 E180                       		asl.l	#8,d0
00007014 7600                       		moveq	#0,d3
00007016 3602                       		move.w	d2,d3
00007018 323C 001B                  		move.w	#$1B,d1
0000701C                            
0000701C                            Deform_SLZ_1:				; XREF: Deform_MZ
0000701C 32C3                       		move.w	d3,(a1)+
0000701E 4843                       		swap	d3
00007020 D680                       		add.l	d0,d3
00007022 4843                       		swap	d3
00007024 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
00007028 3002                       		move.w	d2,d0
0000702A E640                       		asr.w	#3,d0
0000702C 3200                       		move.w	d0,d1
0000702E E241                       		asr.w	#1,d1
00007030 D041                       		add.w	d1,d0
00007032 323C 0004                  		move.w	#4,d1
00007036                            
00007036                            Deform_SLZ_2:				; XREF: Deform_MZ
00007036 32C0                       		move.w	d0,(a1)+
00007038 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
0000703C 3002                       		move.w	d2,d0
0000703E E440                       		asr.w	#2,d0
00007040 323C 0004                  		move.w	#4,d1
00007044                            
00007044                            Deform_SLZ_3:				; XREF: Deform_MZ
00007044 32C0                       		move.w	d0,(a1)+
00007046 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
0000704A 3002                       		move.w	d2,d0
0000704C E240                       		asr.w	#1,d0
0000704E 323C 001D                  		move.w	#$1D,d1
00007052                            
00007052                            Deform_SLZ_4:				; XREF: Deform_MZ
00007052 32C0                       		move.w	d0,(a1)+
00007054 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
00007058 45F8 A800                  		lea	($FFFFA800).w,a2
0000705C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007060 3400                       		move.w	d0,d2
00007062 0440 00C0                  		subi.w	#$C0,d0	; 'À'
00007066 0240 03F0                  		andi.w	#$3F0,d0
0000706A E648                       		lsr.w	#3,d0
0000706C 45F2 0000                  		lea	(a2,d0.w),a2
00007070                            
00007070                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
00007070 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007074 323C 000E                  		move.w	#$E,d1
00007078 3038 F700                  		move.w	($FFFFF700).w,d0
0000707C 4440                       		neg.w	d0
0000707E 4840                       		swap	d0
00007080 0242 000F                  		andi.w	#$F,d2
00007084 D442                       		add.w	d2,d2
00007086 301A                       		move.w	(a2)+,d0
00007088 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
0000708C                            ; End of function Deform_MZ
0000708C                            
0000708C                            ; ===========================================================================
0000708C                            
0000708C                            Deform_All_1:				; XREF: Deform_All
0000708C 301A                       		move.w	(a2)+,d0
0000708E                            
0000708E                            Deform_All_2:
0000708E 22C0                       		move.l	d0,(a1)+
00007090 22C0                       		move.l	d0,(a1)+
00007092 22C0                       		move.l	d0,(a1)+
00007094 22C0                       		move.l	d0,(a1)+
00007096 22C0                       		move.l	d0,(a1)+
00007098 22C0                       		move.l	d0,(a1)+
0000709A 22C0                       		move.l	d0,(a1)+
0000709C 22C0                       		move.l	d0,(a1)+
0000709E 22C0                       		move.l	d0,(a1)+
000070A0 22C0                       		move.l	d0,(a1)+
000070A2 22C0                       		move.l	d0,(a1)+
000070A4 22C0                       		move.l	d0,(a1)+
000070A6 22C0                       		move.l	d0,(a1)+
000070A8 22C0                       		move.l	d0,(a1)+
000070AA 22C0                       		move.l	d0,(a1)+
000070AC 22C0                       		move.l	d0,(a1)+
000070AE 51C9 FFDC                  		dbf	d1,Deform_All_1
000070B2 4E75                       		rts	
000070B4                            
000070B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B4                            
000070B4                            
000070B4                            Deform_SYZ:
000070B4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000070B8 48C5                       		ext.l	d5
000070BA E985                       		asl.l	#4,d5
000070BC 2205                       		move.l	d5,d1
000070BE E385                       		asl.l	#1,d5
000070C0 DA81                       		add.l	d1,d5
000070C2 6100 0000                  		bsr.w	ScrollBlock2
000070C6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000070CC 43F8 A800                  		lea	($FFFFA800).w,a1
000070D0 3438 F700                  		move.w	($FFFFF700).w,d2
000070D4 4442                       		neg.w	d2
000070D6 3002                       		move.w	d2,d0
000070D8 E640                       		asr.w	#3,d0
000070DA 9042                       		sub.w	d2,d0
000070DC 48C0                       		ext.l	d0
000070DE E780                       		asl.l	#3,d0
000070E0 81FC 0008                  		divs.w	#8,d0
000070E4 48C0                       		ext.l	d0
000070E6 E980                       		asl.l	#4,d0
000070E8 E180                       		asl.l	#8,d0
000070EA 7600                       		moveq	#0,d3
000070EC 3602                       		move.w	d2,d3
000070EE E243                       		asr.w	#1,d3
000070F0 323C 0007                  		move.w	#7,d1
000070F4                            
000070F4                            Deform_SYZ_1:				; XREF: Deform_SYZ
000070F4 32C3                       		move.w	d3,(a1)+
000070F6 4843                       		swap	d3
000070F8 D680                       		add.l	d0,d3
000070FA 4843                       		swap	d3
000070FC 51C9 FFF6                  		dbf	d1,Deform_SYZ_1
00007100 3002                       		move.w	d2,d0
00007102 E640                       		asr.w	#3,d0
00007104 323C 0004                  		move.w	#4,d1
00007108                            
00007108                            Deform_SYZ_2:				; XREF: Deform_SYZ
00007108 32C0                       		move.w	d0,(a1)+
0000710A 51C9 FFFC                  		dbf	d1,Deform_SYZ_2
0000710E 3002                       		move.w	d2,d0
00007110 E440                       		asr.w	#2,d0
00007112 323C 0005                  		move.w	#5,d1
00007116                            
00007116                            Deform_SYZ_3:				; XREF: Deform_SYZ
00007116 32C0                       		move.w	d0,(a1)+
00007118 51C9 FFFC                  		dbf	d1,Deform_SYZ_3
0000711C 3002                       		move.w	d2,d0
0000711E 3202                       		move.w	d2,d1
00007120 E241                       		asr.w	#1,d1
00007122 9041                       		sub.w	d1,d0
00007124 48C0                       		ext.l	d0
00007126 E980                       		asl.l	#4,d0
00007128 81FC 000E                  		divs.w	#$E,d0
0000712C 48C0                       		ext.l	d0
0000712E E980                       		asl.l	#4,d0
00007130 E180                       		asl.l	#8,d0
00007132 7600                       		moveq	#0,d3
00007134 3602                       		move.w	d2,d3
00007136 E243                       		asr.w	#1,d3
00007138 323C 000D                  		move.w	#$D,d1
0000713C                            
0000713C                            Deform_SYZ_4:				; XREF: Deform_SYZ
0000713C 32C3                       		move.w	d3,(a1)+
0000713E 4843                       		swap	d3
00007140 D680                       		add.l	d0,d3
00007142 4843                       		swap	d3
00007144 51C9 FFF6                  		dbf	d1,Deform_SYZ_4
00007148 45F8 A800                  		lea	($FFFFA800).w,a2
0000714C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007150 3400                       		move.w	d0,d2
00007152 0240 01F0                  		andi.w	#$1F0,d0
00007156 E648                       		lsr.w	#3,d0
00007158 45F2 0000                  		lea	(a2,d0.w),a2
0000715C 6000 FF12                  		bra.w	Deform_All
00007160                            ; End of function Deform_SYZ
00007160                            
00007160                            
00007160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007160                            
00007160                            
00007160                            Deform_SBZ:
00007160 4A38 FE11                  		tst.b	($FFFFFE11).w
00007164 6600 0000                  		bne.w	Deform_SBZ_Act2
00007168 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000716C 48C4                       		ext.l	d4
0000716E EF84                       		asl.l	#7,d4
00007170 7C02                       		moveq	#2,d6
00007172 6100 0000                  		bsr.w	ScrollBlock4
00007176 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000717A 48C4                       		ext.l	d4
0000717C ED84                       		asl.l	#6,d4
0000717E 7C06                       		moveq	#6,d6
00007180 6100 0000                  		bsr.w	ScrollBlock6
00007184 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007188 48C4                       		ext.l	d4
0000718A EB84                       		asl.l	#5,d4
0000718C 2204                       		move.l	d4,d1
0000718E E384                       		asl.l	#1,d4
00007190 D881                       		add.l	d1,d4
00007192 7C04                       		moveq	#4,d6
00007194 6100 0000                  		bsr.w	ScrollBlock5
00007198 7800                       		moveq	#0,d4
0000719A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000719E 48C5                       		ext.l	d5
000071A0 EB85                       		asl.l	#5,d5
000071A2 6100 0000                  		bsr.w	ScrollBlock1_2
000071A6 3038 F70C                  		move.w	($FFFFF70C).w,d0
000071AA 31C0 F714                  		move.w	d0,($FFFFF714).w
000071AE 31C0 F71C                  		move.w	d0,($FFFFF71C).w
000071B2 31C0 F618                  		move.w	d0,($FFFFF618).w
000071B6 1038 F756                  		move.b	($FFFFF756).w,d0
000071BA 8038 F75A                  		or.b	($FFFFF75A).w,d0
000071BE 8138 F758                  		or.b	d0,($FFFFF758).w
000071C2 4238 F756                  		clr.b	($FFFFF756).w
000071C6 4238 F75A                  		clr.b	($FFFFF75A).w
000071CA 43F8 A800                  		lea	($FFFFA800).w,a1
000071CE 3438 F700                  		move.w	($FFFFF700).w,d2
000071D2 4442                       		neg.w	d2
000071D4 E442                       		asr.w	#2,d2
000071D6 3002                       		move.w	d2,d0
000071D8 E240                       		asr.w	#1,d0
000071DA 9042                       		sub.w	d2,d0
000071DC 48C0                       		ext.l	d0
000071DE E780                       		asl.l	#3,d0
000071E0 81FC 0004                  		divs.w	#4,d0
000071E4 48C0                       		ext.l	d0
000071E6 E980                       		asl.l	#4,d0
000071E8 E180                       		asl.l	#8,d0
000071EA 7600                       		moveq	#0,d3
000071EC 3602                       		move.w	d2,d3
000071EE 323C 0003                  		move.w	#3,d1
000071F2                            
000071F2                            Deform_SBZ_1:				; XREF: Deform_SBZ
000071F2 32C3                       		move.w	d3,(a1)+
000071F4 4843                       		swap	d3
000071F6 D680                       		add.l	d0,d3
000071F8 4843                       		swap	d3
000071FA 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
000071FE 3038 F718                  		move.w	($FFFFF718).w,d0
00007202 4440                       		neg.w	d0
00007204 323C 0009                  		move.w	#9,d1
00007208                            
00007208                            Deform_SBZ_2:				; XREF: Deform_SBZ
00007208 32C0                       		move.w	d0,(a1)+
0000720A 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
0000720E 3038 F710                  		move.w	($FFFFF710).w,d0
00007212 4440                       		neg.w	d0
00007214 323C 0006                  		move.w	#6,d1
00007218                            
00007218                            Deform_SBZ_3:				; XREF: Deform_SBZ
00007218 32C0                       		move.w	d0,(a1)+
0000721A 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
0000721E 3038 F708                  		move.w	($FFFFF708).w,d0
00007222 4440                       		neg.w	d0
00007224 323C 000A                  		move.w	#$A,d1
00007228                            
00007228                            Deform_SBZ_4:				; XREF: Deform_SBZ
00007228 32C0                       		move.w	d0,(a1)+
0000722A 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
0000722E 45F8 A800                  		lea	($FFFFA800).w,a2
00007232 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007236 3400                       		move.w	d0,d2
00007238 0240 01F0                  		andi.w	#$1F0,d0
0000723C E648                       		lsr.w	#3,d0
0000723E 45F2 0000                  		lea	(a2,d0.w),a2
00007242 6000 FE2C                  		bra.w	Deform_All
00007246                            ; ===========================================================================
00007246                            
00007246                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
00007246 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000724A 48C4                       		ext.l	d4
0000724C ED84                       		asl.l	#6,d4
0000724E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007252 48C5                       		ext.l	d5
00007254 EB85                       		asl.l	#5,d5
00007256 6100 0000                  		bsr.w	ScrollBlock1
0000725A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007260 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007264 323C 00DF                  		move.w	#$DF,d1	; 'ß'
00007268 3038 F700                  		move.w	($FFFFF700).w,d0
0000726C 4440                       		neg.w	d0
0000726E 4840                       		swap	d0
00007270 3038 F708                  		move.w	($FFFFF708).w,d0
00007274 4440                       		neg.w	d0
00007276                            
00007276                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
00007276 22C0                       		move.l	d0,(a1)+
00007278 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
0000727C 4E75                       		rts	
0000727E                            ; End of function Deform_SBZ
0000727E                            
0000727E                            ; ---------------------------------------------------------------------------
0000727E                            ; Subroutine to	scroll the level horizontally as Sonic moves
0000727E                            ; ---------------------------------------------------------------------------
0000727E                            
0000727E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000727E                            
0000727E                            
0000727E                            ScrollHoriz:				; XREF: DeformBgLayer
0000727E 3838 F700                  		move.w	($FFFFF700).w,d4
00007282 6100                       		bsr.s	ScrollHoriz2
00007284 3038 F700                  		move.w	($FFFFF700).w,d0
00007288 0240 0010                  		andi.w	#$10,d0
0000728C 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007290 B300                       		eor.b	d1,d0
00007292 6600                       		bne.s	locret_65B0
00007294 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000729A 3038 F700                  		move.w	($FFFFF700).w,d0
0000729E 9044                       		sub.w	d4,d0
000072A0 6A00                       		bpl.s	loc_65AA
000072A2 08F8 0002 F754             		bset	#2,($FFFFF754).w
000072A8 4E75                       		rts	
000072AA                            ; ===========================================================================
000072AA                            
000072AA                            loc_65AA:
000072AA 08F8 0003 F754             		bset	#3,($FFFFF754).w
000072B0                            
000072B0                            locret_65B0:
000072B0 4E75                       		rts	
000072B2                            ; End of function ScrollHoriz
000072B2                            
000072B2                            
000072B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072B2                            
000072B2                            
000072B2                            ScrollHoriz2:				; XREF: ScrollHoriz
000072B2 3038 D008                  		move.w	($FFFFD008).w,d0
000072B6 9078 F700                  		sub.w	($FFFFF700).w,d0
000072BA 0440 0090                  		subi.w	#$90,d0
000072BE 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
000072C0 0440 0010                  		subi.w	#$10,d0
000072C4 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
000072C6 4278 F73A                  		clr.w	($FFFFF73A).w
000072CA 4E75                       		rts
000072CC                            ; ===========================================================================
000072CC                            
000072CC                            loc_65CC:
000072CC 0C40 0010                  		cmpi.w	#$10,d0
000072D0 6500                       		bcs.s	loc_65D6
000072D2 303C 0010                  		move.w	#$10,d0
000072D6                            
000072D6                            loc_65D6:
000072D6 D078 F700                  		add.w	($FFFFF700).w,d0
000072DA B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000072DE 6D00                       		blt.s	loc_65E4
000072E0 3038 F72A                  		move.w	($FFFFF72A).w,d0
000072E4                            
000072E4                            loc_65E4:
000072E4 3200                       		move.w	d0,d1
000072E6 9278 F700                  		sub.w	($FFFFF700).w,d1
000072EA E141                       		asl.w	#8,d1
000072EC 31C0 F700                  		move.w	d0,($FFFFF700).w
000072F0 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000072F4 4E75                       		rts	
000072F6                            ; ===========================================================================
000072F6                            
000072F6                            loc_65F6:				; XREF: ScrollHoriz2
000072F6 D078 F700                  		add.w	($FFFFF700).w,d0
000072FA B078 F728                  		cmp.w	($FFFFF728).w,d0
000072FE 6EE4                       		bgt.s	loc_65E4
00007300 3038 F728                  		move.w	($FFFFF728).w,d0
00007304 60DE                       		bra.s	loc_65E4
00007306                            ; End of function ScrollHoriz2
00007306                            
00007306                            ; ===========================================================================
00007306 4A40                       		tst.w	d0
00007308 6A00                       		bpl.s	loc_6610
0000730A 303C FFFE                  		move.w	#-2,d0
0000730E 60E6                       		bra.s	loc_65F6
00007310                            ; ===========================================================================
00007310                            
00007310                            loc_6610:
00007310 303C 0002                  		move.w	#2,d0
00007314 60B6                       		bra.s	loc_65CC
00007316                            
00007316                            ; ---------------------------------------------------------------------------
00007316                            ; Subroutine to	scroll the level vertically as Sonic moves
00007316                            ; ---------------------------------------------------------------------------
00007316                            
00007316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007316                            
00007316                            
00007316                            ScrollVertical:				; XREF: DeformBgLayer
00007316 7200                       		moveq	#0,d1
00007318 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000731C 9078 F704                  		sub.w	($FFFFF704).w,d0
00007320 0838 0002 D022             		btst	#2,($FFFFD022).w
00007326 6700                       		beq.s	loc_662A
00007328 5B40                       		subq.w	#5,d0
0000732A                            
0000732A                            loc_662A:
0000732A 0838 0001 D022             		btst	#1,($FFFFD022).w
00007330 6700                       		beq.s	loc_664A
00007332 0640 0020                  		addi.w	#$20,d0
00007336 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000733A 6500                       		bcs.s	loc_6696
0000733C 0440 0040                  		subi.w	#$40,d0
00007340 6400                       		bcc.s	loc_6696
00007342 4A38 F75C                  		tst.b	($FFFFF75C).w
00007346 6600                       		bne.s	loc_66A8
00007348 6000                       		bra.s	loc_6656
0000734A                            ; ===========================================================================
0000734A                            
0000734A                            loc_664A:
0000734A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000734E 6600                       		bne.s	loc_665C
00007350 4A38 F75C                  		tst.b	($FFFFF75C).w
00007354 6600                       		bne.s	loc_66A8
00007356                            
00007356                            loc_6656:
00007356 4278 F73C                  		clr.w	($FFFFF73C).w
0000735A 4E75                       		rts	
0000735C                            ; ===========================================================================
0000735C                            
0000735C                            loc_665C:
0000735C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007362 6600                       		bne.s	loc_6684
00007364 3238 D020                  		move.w	($FFFFD020).w,d1
00007368 6A00                       		bpl.s	loc_666C
0000736A 4441                       		neg.w	d1
0000736C                            
0000736C                            loc_666C:
0000736C 0C41 0800                  		cmpi.w	#$800,d1
00007370 6400                       		bcc.s	loc_6696
00007372 323C 0600                  		move.w	#$600,d1
00007376 0C40 0006                  		cmpi.w	#6,d0
0000737A 6E00                       		bgt.s	loc_66F6
0000737C 0C40 FFFA                  		cmpi.w	#-6,d0
00007380 6D00                       		blt.s	loc_66C0
00007382 6000                       		bra.s	loc_66AE
00007384                            ; ===========================================================================
00007384                            
00007384                            loc_6684:
00007384 323C 0200                  		move.w	#$200,d1
00007388 0C40 0002                  		cmpi.w	#2,d0
0000738C 6E00                       		bgt.s	loc_66F6
0000738E 0C40 FFFE                  		cmpi.w	#-2,d0
00007392 6D00                       		blt.s	loc_66C0
00007394 6000                       		bra.s	loc_66AE
00007396                            ; ===========================================================================
00007396                            
00007396                            loc_6696:
00007396 323C 1000                  		move.w	#$1000,d1
0000739A 0C40 0010                  		cmpi.w	#$10,d0
0000739E 6E00                       		bgt.s	loc_66F6
000073A0 0C40 FFF0                  		cmpi.w	#-$10,d0
000073A4 6D00                       		blt.s	loc_66C0
000073A6 6000                       		bra.s	loc_66AE
000073A8                            ; ===========================================================================
000073A8                            
000073A8                            loc_66A8:
000073A8 7000                       		moveq	#0,d0
000073AA 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000073AE                            
000073AE                            loc_66AE:
000073AE 7200                       		moveq	#0,d1
000073B0 3200                       		move.w	d0,d1
000073B2 D278 F704                  		add.w	($FFFFF704).w,d1
000073B6 4A40                       		tst.w	d0
000073B8 6A00 0000                  		bpl.w	loc_6700
000073BC 6000 0000                  		bra.w	loc_66CC
000073C0                            ; ===========================================================================
000073C0                            
000073C0                            loc_66C0:
000073C0 4441                       		neg.w	d1
000073C2 48C1                       		ext.l	d1
000073C4 E181                       		asl.l	#8,d1
000073C6 D2B8 F704                  		add.l	($FFFFF704).w,d1
000073CA 4841                       		swap	d1
000073CC                            
000073CC                            loc_66CC:
000073CC B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000073D0 6E00                       		bgt.s	loc_6724
000073D2 0C41 FF00                  		cmpi.w	#-$100,d1
000073D6 6E00                       		bgt.s	loc_66F0
000073D8 0241 07FF                  		andi.w	#$7FF,d1
000073DC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000073E2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000073E8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000073EE 6000                       		bra.s	loc_6724
000073F0                            ; ===========================================================================
000073F0                            
000073F0                            loc_66F0:
000073F0 3238 F72C                  		move.w	($FFFFF72C).w,d1
000073F4 6000                       		bra.s	loc_6724
000073F6                            ; ===========================================================================
000073F6                            
000073F6                            loc_66F6:
000073F6 48C1                       		ext.l	d1
000073F8 E181                       		asl.l	#8,d1
000073FA D2B8 F704                  		add.l	($FFFFF704).w,d1
000073FE 4841                       		swap	d1
00007400                            
00007400                            loc_6700:
00007400 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00007404 6D00                       		blt.s	loc_6724
00007406 0441 0800                  		subi.w	#$800,d1
0000740A 6500                       		bcs.s	loc_6720
0000740C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007412 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00007418 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000741E 6000                       		bra.s	loc_6724
00007420                            ; ===========================================================================
00007420                            
00007420                            loc_6720:
00007420 3238 F72E                  		move.w	($FFFFF72E).w,d1
00007424                            
00007424                            loc_6724:
00007424 3838 F704                  		move.w	($FFFFF704).w,d4
00007428 4841                       		swap	d1
0000742A 2601                       		move.l	d1,d3
0000742C 96B8 F704                  		sub.l	($FFFFF704).w,d3
00007430 E09B                       		ror.l	#8,d3
00007432 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00007436 21C1 F704                  		move.l	d1,($FFFFF704).w
0000743A 3038 F704                  		move.w	($FFFFF704).w,d0
0000743E 0240 0010                  		andi.w	#$10,d0
00007442 1238 F74B                  		move.b	($FFFFF74B).w,d1
00007446 B300                       		eor.b	d1,d0
00007448 6600                       		bne.s	locret_6766
0000744A 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007450 3038 F704                  		move.w	($FFFFF704).w,d0
00007454 9044                       		sub.w	d4,d0
00007456 6A00                       		bpl.s	loc_6760
00007458 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000745E 4E75                       		rts	
00007460                            ; ===========================================================================
00007460                            
00007460                            loc_6760:
00007460 08F8 0001 F754             		bset	#1,($FFFFF754).w
00007466                            
00007466                            locret_6766:
00007466 4E75                       		rts	
00007468                            ; End of function ScrollVertical
00007468                            
00007468                            
00007468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007468                            
00007468                            
00007468                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
00007468 2438 F708                  		move.l	($FFFFF708).w,d2
0000746C 2002                       		move.l	d2,d0
0000746E D084                       		add.l	d4,d0
00007470 21C0 F708                  		move.l	d0,($FFFFF708).w
00007474 2200                       		move.l	d0,d1
00007476 4841                       		swap	d1
00007478 0241 0010                  		andi.w	#$10,d1
0000747C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007480 B701                       		eor.b	d3,d1
00007482 6600                       		bne.s	ScrollBlock1_2
00007484 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000748A 9082                       		sub.l	d2,d0
0000748C 6A00                       		bpl.s	ScrollBlock1_1
0000748E 08F8 0002 F756             		bset	#2,($FFFFF756).w
00007494 6000                       		bra.s	ScrollBlock1_2
00007496                            ; ===========================================================================
00007496                            
00007496                            ScrollBlock1_1:				; XREF: ScrollBlock1
00007496 08F8 0003 F756             		bset	#3,($FFFFF756).w
0000749C                            
0000749C                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
0000749C 2638 F70C                  		move.l	($FFFFF70C).w,d3
000074A0 2003                       		move.l	d3,d0
000074A2 D085                       		add.l	d5,d0
000074A4 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000074A8 2200                       		move.l	d0,d1
000074AA 4841                       		swap	d1
000074AC 0241 0010                  		andi.w	#$10,d1
000074B0 1438 F74D                  		move.b	($FFFFF74D).w,d2
000074B4 B501                       		eor.b	d2,d1
000074B6 6600                       		bne.s	ScrollBlock1_End
000074B8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000074BE 9083                       		sub.l	d3,d0
000074C0 6A00                       		bpl.s	ScrollBlock1_3
000074C2 08F8 0000 F756             		bset	#0,($FFFFF756).w
000074C8 4E75                       		rts	
000074CA                            ; ===========================================================================
000074CA                            
000074CA                            ScrollBlock1_3:				; XREF: ScrollBlock1
000074CA 08F8 0001 F756             		bset	#1,($FFFFF756).w
000074D0                            
000074D0                            ScrollBlock1_End:			; XREF: ScrollBlock1
000074D0 4E75                       		rts	
000074D2                            ; End of function ScrollBlock1
000074D2                            
000074D2                            
000074D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074D2                            
000074D2                            
000074D2                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
000074D2 2638 F70C                  		move.l	($FFFFF70C).w,d3
000074D6 2003                       		move.l	d3,d0
000074D8 D085                       		add.l	d5,d0
000074DA 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000074DE 2200                       		move.l	d0,d1
000074E0 4841                       		swap	d1
000074E2 0241 0010                  		andi.w	#$10,d1
000074E6 1438 F74D                  		move.b	($FFFFF74D).w,d2
000074EA B501                       		eor.b	d2,d1
000074EC 6600                       		bne.s	ScrollBlock2_End
000074EE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000074F4 9083                       		sub.l	d3,d0
000074F6 6A00                       		bpl.s	ScrollBlock2_1
000074F8 08F8 0004 F756             		bset	#4,($FFFFF756).w
000074FE 4E75                       		rts	
00007500                            ; ===========================================================================
00007500                            
00007500                            ScrollBlock2_1:				; XREF: ScrollBlock2
00007500 08F8 0005 F756             		bset	#5,($FFFFF756).w
00007506                            
00007506                            ScrollBlock2_End:			; XREF: ScrollBlock2
00007506 4E75                       		rts	
00007508                            ; End of function ScrollBlock2
00007508                            
00007508                            
00007508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007508                            
00007508                            
00007508                            ScrollBlock3:				; XREF: Deform_MZ
00007508 3638 F70C                  		move.w	($FFFFF70C).w,d3
0000750C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007510 3200                       		move.w	d0,d1
00007512 0241 0010                  		andi.w	#$10,d1
00007516 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000751A B501                       		eor.b	d2,d1
0000751C 6600                       		bne.s	ScrollBlock3_End
0000751E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007524 9043                       		sub.w	d3,d0
00007526 6A00                       		bpl.s	ScrollBlock3_1
00007528 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000752E 4E75                       		rts	
00007530                            ; ===========================================================================
00007530                            
00007530                            ScrollBlock3_1:				; XREF: ScrollBlock3
00007530 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007536                            
00007536                            ScrollBlock3_End:			; XREF: ScrollBlock3
00007536 4E75                       		rts	
00007538                            ; End of function ScrollBlock3
00007538                            
00007538                            
00007538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007538                            
00007538                            
00007538                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
00007538 2438 F708                  		move.l	($FFFFF708).w,d2
0000753C 2002                       		move.l	d2,d0
0000753E D084                       		add.l	d4,d0
00007540 21C0 F708                  		move.l	d0,($FFFFF708).w
00007544 2200                       		move.l	d0,d1
00007546 4841                       		swap	d1
00007548 0241 0010                  		andi.w	#$10,d1
0000754C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007550 B701                       		eor.b	d3,d1
00007552 6600                       		bne.s	ScrollBlock4_End
00007554 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000755A 9082                       		sub.l	d2,d0
0000755C 6A00                       		bpl.s	ScrollBlock4_1
0000755E 0DF8 F756                  		bset	d6,($FFFFF756).w
00007562 6000                       		bra.s	ScrollBlock4_End
00007564                            ; ===========================================================================
00007564                            
00007564                            ScrollBlock4_1:				; XREF: ScrollBlock4
00007564 5206                       		addq.b	#1,d6
00007566 0DF8 F756                  		bset	d6,($FFFFF756).w
0000756A                            
0000756A                            ScrollBlock4_End:			; XREF: ScrollBlock4
0000756A 4E75                       		rts	
0000756C                            ; End of function ScrollBlock4
0000756C                            
0000756C                            
0000756C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000756C                            
0000756C                            
0000756C                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
0000756C 2438 F710                  		move.l	($FFFFF710).w,d2
00007570 2002                       		move.l	d2,d0
00007572 D084                       		add.l	d4,d0
00007574 21C0 F710                  		move.l	d0,($FFFFF710).w
00007578 2200                       		move.l	d0,d1
0000757A 4841                       		swap	d1
0000757C 0241 0010                  		andi.w	#$10,d1
00007580 1638 F74E                  		move.b	($FFFFF74E).w,d3
00007584 B701                       		eor.b	d3,d1
00007586 6600                       		bne.s	ScrollBlock5_End
00007588 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000758E 9082                       		sub.l	d2,d0
00007590 6A00                       		bpl.s	ScrollBlock5_1
00007592 0DF8 F758                  		bset	d6,($FFFFF758).w
00007596 6000                       		bra.s	ScrollBlock5_End
00007598                            ; ===========================================================================
00007598                            
00007598                            ScrollBlock5_1:				; XREF: ScrollBlock5
00007598 5206                       		addq.b	#1,d6
0000759A 0DF8 F758                  		bset	d6,($FFFFF758).w
0000759E                            
0000759E                            ScrollBlock5_End:			; XREF: ScrollBlock5
0000759E 4E75                       		rts	
000075A0                            ; End of function ScrollBlock5
000075A0                            
000075A0                            
000075A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075A0                            
000075A0                            
000075A0                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
000075A0 2438 F718                  		move.l	($FFFFF718).w,d2
000075A4 2002                       		move.l	d2,d0
000075A6 D084                       		add.l	d4,d0
000075A8 21C0 F718                  		move.l	d0,($FFFFF718).w
000075AC 2200                       		move.l	d0,d1
000075AE 4841                       		swap	d1
000075B0 0241 0010                  		andi.w	#$10,d1
000075B4 1638 F750                  		move.b	($FFFFF750).w,d3
000075B8 B701                       		eor.b	d3,d1
000075BA 6600                       		bne.s	ScrollBlock6_End
000075BC 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
000075C2 9082                       		sub.l	d2,d0
000075C4 6A00                       		bpl.s	ScrollBlock6_1
000075C6 0DF8 F75A                  		bset	d6,($FFFFF75A).w
000075CA 6000                       		bra.s	ScrollBlock6_End
000075CC                            ; ===========================================================================
000075CC                            
000075CC                            ScrollBlock6_1:				; XREF: ScrollBlock6
000075CC 5206                       		addq.b	#1,d6
000075CE 0DF8 F75A                  		bset	d6,($FFFFF75A).w
000075D2                            
000075D2                            ScrollBlock6_End:			; XREF: ScrollBlock6
000075D2 4E75                       		rts	
000075D4                            ; End of function ScrollBlock6
000075D4                            
000075D4                            
000075D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075D4                            
000075D4                            
000075D4                            sub_6886:		
000075D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000075DA 4DF9 00C0 0000             		lea	($C00000).l,a6
000075E0 45F8 F756                  		lea	($FFFFF756).w,a2
000075E4 47F8 F708                  		lea	($FFFFF708).w,a3
000075E8 49F8 A440                  		lea	($FFFFA440).w,a4
000075EC 343C 6000                  		move.w	#$6000,d2
000075F0 6100 0000                  		bsr.w	sub_6D0A
000075F4 45F8 F758                  		lea	($FFFFF758).w,a2
000075F8 47F8 F710                  		lea	($FFFFF710).w,a3
000075FC 6000 0000                  		bra.w	sub_6DA6
00007600                            ; End of function sub_6886
00007600                            
00007600                            ; ---------------------------------------------------------------------------
00007600                            ; Subroutine to	display	correct	tiles as you move
00007600                            ; ---------------------------------------------------------------------------
00007600                            
00007600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007600                            
00007600                            
00007600                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007600 4BF9 00C0 0004             		lea	($C00004).l,a5
00007606 4DF9 00C0 0000             		lea	($C00000).l,a6
0000760C 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007610 47F8 FF18                  		lea	($FFFFFF18).w,a3
00007614 49F8 A440                  		lea	($FFFFA440).w,a4
00007618 343C 6000                  		move.w	#$6000,d2
0000761C 6100 0000                  		bsr.w	sub_6D0A
00007620 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007624 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007628 6100 0000                  		bsr.w	sub_6DA6
0000762C 45F8 FF36                  		lea	($FFFFFF36).w,a2
00007630 47F8 FF28                  		lea	($FFFFFF28).w,a3
00007634 6100 0000                  		bsr.w	sub_6EA4
00007638 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000763C 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007640 49F8 A400                  		lea	($FFFFA400).w,a4
00007644 343C 4000                  		move.w	#$4000,d2
00007648 4A38 F745                  		tst.b	($FFFFF745).w
0000764C 6700                       		beq.s	Draw_FG
0000764E 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
00007654 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
00007656 7C0F                       		moveq	#$F,d6				;
00007658                            
00007658                            Draw_All:
00007658 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
0000765C 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
0000765E 3204                       		move.w	d4,d1
00007660 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007664 3801                       		move.w	d1,d4
00007666 7AF0                       		moveq	#-$10,d5
00007668 6100 0000                  		bsr.w	DrawTiles_LR
0000766C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007670 0644 0010                  		addi.w	#$10,d4
00007674 51CE FFE2                  		dbf	d6,Draw_All
00007678 4E75                       		rts	
0000767A                            
0000767A                            Draw_FG:
0000767A 4A12                       		tst.b	(a2)
0000767C 6700                       		beq.s	locret_6D08
0000767E 0892 0000                  		bclr	#0,(a2)
00007682 6700                       		beq.s	loc_6CBE
00007684 78F0                       		moveq	#-$10,d4
00007686 7AF0                       		moveq	#-$10,d5
00007688 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000768C 78F0                       		moveq	#-$10,d4
0000768E 7AF0                       		moveq	#-$10,d5
00007690 6100 0000                  		bsr.w	DrawTiles_LR
00007694                            
00007694                            loc_6CBE:
00007694 0892 0001                  		bclr	#1,(a2)
00007698 6700                       		beq.s	loc_6CD8
0000769A 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000769E 7AF0                       		moveq	#-$10,d5
000076A0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076A4 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076A8 7AF0                       		moveq	#-$10,d5
000076AA 6100 0000                  		bsr.w	DrawTiles_LR
000076AE                            
000076AE                            loc_6CD8:
000076AE 0892 0002                  		bclr	#2,(a2)
000076B2 6700                       		beq.s	loc_6CEE
000076B4 78F0                       		moveq	#-$10,d4
000076B6 7AF0                       		moveq	#-$10,d5
000076B8 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076BC 78F0                       		moveq	#-$10,d4
000076BE 7AF0                       		moveq	#-$10,d5
000076C0 6100 0000                  		bsr.w	DrawTiles_TB
000076C4                            
000076C4                            loc_6CEE:
000076C4 0892 0003                  		bclr	#3,(a2)
000076C8 6700                       		beq.s	locret_6D08
000076CA 78F0                       		moveq	#-$10,d4
000076CC 3A3C 0140                  		move.w	#$140,d5
000076D0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076D4 78F0                       		moveq	#-$10,d4
000076D6 3A3C 0140                  		move.w	#$140,d5
000076DA 6100 0000                  		bsr.w	DrawTiles_TB
000076DE                            
000076DE                            locret_6D08:
000076DE 4E75                       		rts	
000076E0                            
000076E0                            ; End of function LoadTilesAsYouMove
000076E0                            
000076E0                            
000076E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076E0                            
000076E0                            
000076E0                            sub_6D0A:
000076E0 4A12                       		tst.b	(a2)
000076E2 6700 0000                  		beq.w	locret_6DA4
000076E6 0892 0000                  		bclr	#0,(a2)
000076EA 6700                       		beq.s	loc_6D26
000076EC 78F0                       		moveq	#-$10,d4
000076EE 7AF0                       		moveq	#-$10,d5
000076F0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076F4 78F0                       		moveq	#-$10,d4
000076F6 7AF0                       		moveq	#-$10,d5
000076F8 6100 0000                  		bsr.w	DrawTiles_LR
000076FC                            
000076FC                            loc_6D26:
000076FC 0892 0001                  		bclr	#1,(a2)
00007700 6700                       		beq.s	loc_6D40
00007702 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007706 7AF0                       		moveq	#-$10,d5
00007708 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000770C 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007710 7AF0                       		moveq	#-$10,d5
00007712 6100 0000                  		bsr.w	DrawTiles_LR
00007716                            
00007716                            loc_6D40:
00007716 0892 0002                  		bclr	#2,(a2)
0000771A 6700                       		beq.s	loc_6D56
0000771C 78F0                       		moveq	#-$10,d4
0000771E 7AF0                       		moveq	#-$10,d5
00007720 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007724 78F0                       		moveq	#-$10,d4
00007726 7AF0                       		moveq	#-$10,d5
00007728 6100 0000                  		bsr.w	DrawTiles_TB
0000772C                            
0000772C                            loc_6D56:
0000772C 0892 0003                  		bclr	#3,(a2)
00007730 6700                       		beq.s	loc_6D70
00007732 78F0                       		moveq	#-$10,d4
00007734 3A3C 0140                  		move.w	#$140,d5
00007738 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000773C 78F0                       		moveq	#-$10,d4
0000773E 3A3C 0140                  		move.w	#$140,d5
00007742 6100 0000                  		bsr.w	DrawTiles_TB
00007746                            
00007746                            loc_6D70:
00007746 0892 0004                  		bclr	#4,(a2)
0000774A 6700                       		beq.s	loc_6D88
0000774C 78F0                       		moveq	#-$10,d4
0000774E 7A00                       		moveq	#0,d5
00007750 6100 0000                  		bsr.w	loc_7176
00007754 78F0                       		moveq	#-$10,d4
00007756 7A00                       		moveq	#0,d5
00007758 7C1F                       		moveq	#$1F,d6
0000775A 6100 0000                  		bsr.w	DrawTiles_LR3
0000775E                            
0000775E                            loc_6D88:
0000775E 0892 0005                  		bclr	#5,(a2)
00007762 6700                       		beq.s	locret_6DA4
00007764 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007768 7A00                       		moveq	#0,d5
0000776A 6100 0000                  		bsr.w	loc_7176
0000776E 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007772 7A00                       		moveq	#0,d5
00007774 7C1F                       		moveq	#$1F,d6
00007776 6100 0000                  		bsr.w	DrawTiles_LR3
0000777A                            
0000777A                            locret_6DA4:
0000777A 4E75                       		rts	
0000777C                            ; End of function sub_6D0A
0000777C                            
0000777C                            
0000777C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000777C                            
0000777C                            
0000777C                            sub_6DA6:
0000777C 4A12                       		tst.b	(a2)
0000777E 6700 0000                  		beq.w	locret_6DF2
00007782 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
00007788 6700 0000                  		beq.w	loc_6E16
0000778C 0892 0000                  		bclr	#0,(a2)
00007790 6700                       		beq.s	loc_6DD2
00007792 383C 0070                  		move.w	#$70,d4	; 'p'
00007796 7AF0                       		moveq	#-$10,d5
00007798 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000779C 383C 0070                  		move.w	#$70,d4	; 'p'
000077A0 7AF0                       		moveq	#-$10,d5
000077A2 7C02                       		moveq	#2,d6
000077A4 6100 0000                  		bsr.w	DrawTiles_TB2
000077A8                            
000077A8                            loc_6DD2:
000077A8 0892 0001                  		bclr	#1,(a2)
000077AC 6700                       		beq.s	locret_6DF2
000077AE 383C 0070                  		move.w	#$70,d4	; 'p'
000077B2 3A3C 0140                  		move.w	#$140,d5
000077B6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000077BA 383C 0070                  		move.w	#$70,d4	; 'p'
000077BE 3A3C 0140                  		move.w	#$140,d5
000077C2 7C02                       		moveq	#2,d6
000077C4 6100 0000                  		bsr.w	DrawTiles_TB2
000077C8                            
000077C8                            locret_6DF2:
000077C8 4E75                       		rts	
000077CA                            ; ===========================================================================
000077CA 00                         unk_6DF4:	dc.b   0 ;	 
000077CB 00                         unk_6DF5:	dc.b   0 ;	 
000077CC 00                         		dc.b   0 ;  
000077CD 00                         		dc.b   0 ;  
000077CE 00                         		dc.b   0 ;  
000077CF 06                         		dc.b   6 ;  
000077D0 06                         		dc.b   6 ;  
000077D1 06                         		dc.b   6 ;  
000077D2 06                         		dc.b   6 ;  
000077D3 06                         		dc.b   6 ;  
000077D4 06                         		dc.b   6 ;  
000077D5 06                         		dc.b   6 ;  
000077D6 06                         		dc.b   6 ;  
000077D7 06                         		dc.b   6 ;  
000077D8 06                         		dc.b   6 ;  
000077D9 04                         		dc.b   4 ;  
000077DA 04                         		dc.b   4 ;  
000077DB 04                         		dc.b   4 ;  
000077DC 04                         		dc.b   4 ;  
000077DD 04                         		dc.b   4 ;  
000077DE 04                         		dc.b   4 ;  
000077DF 04                         		dc.b   4 ;  
000077E0 02                         		dc.b   2 ;  
000077E1 02                         		dc.b   2 ;  
000077E2 02                         		dc.b   2 ;  
000077E3 02                         		dc.b   2 ;  
000077E4 02                         		dc.b   2 ;  
000077E5 02                         		dc.b   2 ;  
000077E6 02                         		dc.b   2 ;  
000077E7 02                         		dc.b   2 ;  
000077E8 02                         		dc.b   2 ;  
000077E9 02                         		dc.b   2 ;  
000077EA 02                         		dc.b   2 ;  
000077EB 00                         		dc.b   0 ;  
000077EC                            ; ===========================================================================
000077EC                            
000077EC                            loc_6E16:
000077EC 78F0                       		moveq	#-$10,d4
000077EE 0892 0000                  		bclr	#0,(a2)
000077F2 6600                       		bne.s	loc_6E28
000077F4 0892 0001                  		bclr	#1,(a2)
000077F8 6700                       		beq.s	loc_6E72
000077FA 383C 00E0                  		move.w	#$E0,d4	; 'à'
000077FE                            
000077FE                            loc_6E28:
000077FE 41F9 0000 77CB             		lea	(unk_6DF5).l,a0
00007804 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007808 D044                       		add.w	d4,d0
0000780A 0240 01F0                  		andi.w	#$1F0,d0
0000780E E848                       		lsr.w	#4,d0
00007810 1030 0000                  		move.b	(a0,d0.w),d0
00007814 47F9 0000 0000             		lea	(unk_6FE4).l,a3
0000781A 3673 0000                  		movea.w	(a3,d0.w),a3
0000781E 6700                       		beq.s	loc_6E5E
00007820 7AF0                       		moveq	#-$10,d5
00007822 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007826 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000782A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000782E 6100 0000                  		bsr.w	DrawTiles_LR
00007832 6000                       		bra.s	loc_6E72
00007834                            ; ===========================================================================
00007834                            
00007834                            loc_6E5E:
00007834 7A00                       		moveq	#0,d5
00007836 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000783A 6100 0000                  		bsr.w	loc_7176
0000783E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007842 7C1F                       		moveq	#$1F,d6
00007844 6100 0000                  		bsr.w	DrawTiles_LR3
00007848                            
00007848                            loc_6E72:
00007848 4A12                       		tst.b	(a2)
0000784A 6600                       		bne.s	loc_6E78
0000784C 4E75                       		rts	
0000784E                            ; ===========================================================================
0000784E                            
0000784E                            loc_6E78:
0000784E 78F0                       		moveq	#-$10,d4
00007850 7AF0                       		moveq	#-$10,d5
00007852 1012                       		move.b	(a2),d0
00007854 0200 00A8                  		andi.b	#-$58,d0
00007858 6700                       		beq.s	loc_6E8C
0000785A E208                       		lsr.b	#1,d0
0000785C 1480                       		move.b	d0,(a2)
0000785E 3A3C 0140                  		move.w	#$140,d5
00007862                            
00007862                            loc_6E8C:
00007862 41F9 0000 77CA             		lea	(unk_6DF4).l,a0
00007868 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000786C 0240 01F0                  		andi.w	#$1F0,d0
00007870 E848                       		lsr.w	#4,d0
00007872 41F0 0000                  		lea	(a0,d0.w),a0
00007876 6000 0000                  		bra.w	loc_6FEC
0000787A                            ; End of function sub_6DA6
0000787A                            
0000787A                            
0000787A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000787A                            
0000787A                            
0000787A                            sub_6EA4:
0000787A 4A12                       		tst.b	(a2)
0000787C 6700 0000                  		beq.w	locret_6EF0
00007880 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00007886 6700 0000                  		beq.w	loc_6F54
0000788A 0892 0000                  		bclr	#0,(a2)
0000788E 6700                       		beq.s	loc_6ED0_2
00007890 383C 0040                  		move.w	#$40,d4	; '@'
00007894 7AF0                       		moveq	#-$10,d5
00007896 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000789A 383C 0040                  		move.w	#$40,d4	; '@'
0000789E 7AF0                       		moveq	#-$10,d5
000078A0 7C02                       		moveq	#2,d6
000078A2 6100 0000                  		bsr.w	DrawTiles_TB2
000078A6                            
000078A6                            loc_6ED0_2:
000078A6 0892 0001                  		bclr	#1,(a2)
000078AA 6700                       		beq.s	locret_6EF0
000078AC 383C 0040                  		move.w	#$40,d4	; '@'
000078B0 3A3C 0140                  		move.w	#$140,d5
000078B4 6100 0000                  		bsr.w	Calc_VRAM_Pos
000078B8 383C 0040                  		move.w	#$40,d4	; '@'
000078BC 3A3C 0140                  		move.w	#$140,d5
000078C0 7C02                       		moveq	#2,d6
000078C2 6100 0000                  		bsr.w	DrawTiles_TB2
000078C6                            
000078C6                            locret_6EF0:
000078C6 4E75                       		rts	
000078C8                            ; ===========================================================================
000078C8 00                         unk_6EF2:	dc.b   0 ;	 
000078C9 00                         unk_6EF3:	dc.b   0 ;	 
000078CA 00                         		dc.b   0 ;  
000078CB 00                         		dc.b   0 ;  
000078CC 00                         		dc.b   0 ;  
000078CD 00                         		dc.b   0 ;  
000078CE 06                         		dc.b   6 ;  
000078CF 06                         		dc.b   6 ;  
000078D0 04                         		dc.b   4 ;  
000078D1 04                         		dc.b   4 ;  
000078D2 04                         		dc.b   4 ;  
000078D3 04                         		dc.b   4 ;  
000078D4 04                         		dc.b   4 ;  
000078D5 04                         		dc.b   4 ;  
000078D6 04                         		dc.b   4 ;  
000078D7 04                         		dc.b   4 ;  
000078D8 04                         		dc.b   4 ;  
000078D9 02                         		dc.b   2 ;  
000078DA 02                         		dc.b   2 ;  
000078DB 02                         		dc.b   2 ;  
000078DC 02                         		dc.b   2 ;  
000078DD 02                         		dc.b   2 ;  
000078DE 02                         		dc.b   2 ;  
000078DF 02                         		dc.b   2 ;  
000078E0 02                         		dc.b   2 ;  
000078E1 02                         		dc.b   2 ;  
000078E2 02                         		dc.b   2 ;  
000078E3 02                         		dc.b   2 ;  
000078E4 02                         		dc.b   2 ;  
000078E5 02                         		dc.b   2 ;  
000078E6 02                         		dc.b   2 ;  
000078E7 02                         		dc.b   2 ;  
000078E8 02                         		dc.b   2 ;  
000078E9 02                         		dc.b   2 ;  
000078EA 02                         		dc.b   2 ;  
000078EB 02                         		dc.b   2 ;  
000078EC 02                         		dc.b   2 ;  
000078ED 02                         		dc.b   2 ;  
000078EE 02                         		dc.b   2 ;  
000078EF 02                         		dc.b   2 ;  
000078F0 02                         		dc.b   2 ;  
000078F1 02                         		dc.b   2 ;  
000078F2 02                         		dc.b   2 ;  
000078F3 02                         		dc.b   2 ;  
000078F4 02                         		dc.b   2 ;  
000078F5 02                         		dc.b   2 ;  
000078F6 02                         		dc.b   2 ;  
000078F7 02                         		dc.b   2 ;  
000078F8 02                         		dc.b   2 ;  
000078F9 02                         		dc.b   2 ;  
000078FA 02                         		dc.b   2 ;  
000078FB 02                         		dc.b   2 ;  
000078FC 02                         		dc.b   2 ;  
000078FD 02                         		dc.b   2 ;  
000078FE 02                         		dc.b   2 ;  
000078FF 02                         		dc.b   2 ;  
00007900 02                         		dc.b   2 ;  
00007901 02                         		dc.b   2 ;  
00007902 02                         		dc.b   2 ;  
00007903 02                         		dc.b   2 ;  
00007904 02                         		dc.b   2 ;  
00007905 02                         		dc.b   2 ;  
00007906 02                         		dc.b   2 ;  
00007907 02                         		dc.b   2 ;  
00007908 02                         		dc.b   2 ;  
00007909 02                         		dc.b   2 ;  
0000790A 02                         		dc.b   2 ;  
0000790B 02                         		dc.b   2 ;  
0000790C 02                         		dc.b   2 ;  
0000790D 02                         		dc.b   2 ;  
0000790E 02                         		dc.b   2 ;  
0000790F 02                         		dc.b   2 ;  
00007910 02                         		dc.b   2 ;  
00007911 02                         		dc.b   2 ;  
00007912 02                         		dc.b   2 ;  
00007913 02                         		dc.b   2 ;  
00007914 02                         		dc.b   2 ;  
00007915 02                         		dc.b   2 ;  
00007916 02                         		dc.b   2 ;  
00007917 02                         		dc.b   2 ;  
00007918 02                         		dc.b   2 ;  
00007919 02                         		dc.b   2 ;  
0000791A 02                         		dc.b   2 ;  
0000791B 02                         		dc.b   2 ;  
0000791C 02                         		dc.b   2 ;  
0000791D 02                         		dc.b   2 ;  
0000791E 02                         		dc.b   2 ;  
0000791F 02                         		dc.b   2 ;  
00007920 02                         		dc.b   2 ;  
00007921 02                         		dc.b   2 ;  
00007922 02                         		dc.b   2 ;  
00007923 02                         		dc.b   2 ;  
00007924 02                         		dc.b   2 ;  
00007925 02                         		dc.b   2 ;  
00007926 02                         		dc.b   2 ;  
00007927 02                         		dc.b   2 ;  
00007928 02                         		dc.b   2 ;  
00007929 00                         		dc.b   0 ;  
0000792A                            ; ===========================================================================
0000792A                            
0000792A                            loc_6F54:
0000792A 78F0                       		moveq	#-$10,d4
0000792C 0892 0000                  		bclr	#0,(a2)
00007930 6600                       		bne.s	loc_6F66
00007932 0892 0001                  		bclr	#1,(a2)
00007936 6700                       		beq.s	loc_6FAE
00007938 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000793C                            
0000793C                            loc_6F66:
0000793C 41F9 0000 78C9             		lea	(unk_6EF3).l,a0
00007942 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007946 0440 0200                  		subi.w	#$200,d0
0000794A D044                       		add.w	d4,d0
0000794C 0240 07F0                  		andi.w	#$7F0,d0
00007950 E848                       		lsr.w	#4,d0
00007952 1030 0000                  		move.b	(a0,d0.w),d0
00007956 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
0000795A 6700                       		beq.s	loc_6F9A
0000795C 7AF0                       		moveq	#-$10,d5
0000795E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007962 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007966 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000796A 6100 0000                  		bsr.w	DrawTiles_LR
0000796E 6000                       		bra.s	loc_6FAE
00007970                            ; ===========================================================================
00007970                            
00007970                            loc_6F9A:
00007970 7A00                       		moveq	#0,d5
00007972 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007976 6100 0000                  		bsr.w	loc_7176
0000797A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000797E 7C1F                       		moveq	#$1F,d6
00007980 6100 0000                  		bsr.w	DrawTiles_LR3
00007984                            
00007984                            loc_6FAE:
00007984 4A12                       		tst.b	(a2)
00007986 6600                       		bne.s	loc_6FB4
00007988 4E75                       		rts	
0000798A                            ; ===========================================================================
0000798A                            
0000798A                            loc_6FB4:
0000798A 78F0                       		moveq	#-$10,d4
0000798C 7AF0                       		moveq	#-$10,d5
0000798E 1012                       		move.b	(a2),d0
00007990 0200 00A8                  		andi.b	#-$58,d0
00007994 6700                       		beq.s	loc_6FC8
00007996 E208                       		lsr.b	#1,d0
00007998 1480                       		move.b	d0,(a2)
0000799A 3A3C 0140                  		move.w	#$140,d5
0000799E                            
0000799E                            loc_6FC8:
0000799E 41F9 0000 78C8             		lea	(unk_6EF2).l,a0
000079A4 3038 F70C                  		move.w	($FFFFF70C).w,d0
000079A8 0440 0200                  		subi.w	#$200,d0
000079AC 0240 07F0                  		andi.w	#$7F0,d0
000079B0 E848                       		lsr.w	#4,d0
000079B2 41F0 0000                  		lea	(a0,d0.w),a0
000079B6 6000 0000                  		bra.w	loc_6FEC
000079BA                            ; ===========================================================================
000079BA FF                         unk_6FE4:	dc.b $FF ;  
000079BB 18                         		dc.b $18 ;  
000079BC FF                         		dc.b $FF ;  
000079BD 18                         		dc.b $18 ;  
000079BE FF                         		dc.b $FF ;  
000079BF 20                         		dc.b $20 ;  
000079C0 FF                         		dc.b $FF ;  
000079C1 28                         		dc.b $28 ; (
000079C2                            ; ===========================================================================
000079C2                            
000079C2                            loc_6FEC:
000079C2 7C0F                       		moveq	#$F,d6
000079C4 2E3C 0080 0000             		move.l	#$800000,d7
000079CA                            
000079CA                            loc_6FF4:
000079CA 7000                       		moveq	#0,d0
000079CC 1018                       		move.b	(a0)+,d0
000079CE 0112                       		btst	d0,(a2)
000079D0 6700                       		beq.s	loc_701C
000079D2 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
000079D6 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
000079DA 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079DE 6100 0000                  		bsr.w	sub_712A
000079E2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079E6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000079EA 6100 0000                  		bsr.w	sub_70AC
000079EE 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
000079F2                            
000079F2                            loc_701C:
000079F2 0644 0010                  		addi.w	#$10,d4
000079F6 51CE FFD2                  		dbf	d6,loc_6FF4
000079FA 4212                       		clr.b	(a2)
000079FC 4E75                       		rts	
000079FE                            ; End of function sub_6EA4
000079FE                            
000079FE                            
000079FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FE                            
000079FE                            
000079FE                            DrawTiles_LR:
000079FE 7C15                       		moveq	#$15,d6
00007A00                            ; End of function DrawTiles_LR
00007A00                            
00007A00                            
00007A00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A00                            
00007A00                            
00007A00                            DrawTiles_LR2:
00007A00 2E3C 0080 0000             		move.l	#$800000,d7
00007A06 2200                       		move.l	d0,d1
00007A08                            
00007A08                            loc_7032:
00007A08 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A0C 6100 0000                  		bsr.w	sub_712A
00007A10 2001                       		move.l	d1,d0
00007A12 6100 0000                  		bsr.w	sub_70AC
00007A16 5801                       		addq.b	#4,d1
00007A18 0201 007F                  		andi.b	#$7F,d1	; '?'
00007A1C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A20 0645 0010                  		addi.w	#$10,d5
00007A24 51CE FFE2                  		dbf	d6,loc_7032
00007A28 4E75                       		rts	
00007A2A                            ; End of function DrawTiles_LR2
00007A2A                            
00007A2A                            
00007A2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A2A                            
00007A2A                            
00007A2A                            DrawTiles_LR3:
00007A2A 2E3C 0080 0000             		move.l	#$800000,d7
00007A30 2200                       		move.l	d0,d1
00007A32                            
00007A32                            loc_705C:
00007A32 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A36 6100 0000                  		bsr.w	loc_712C
00007A3A 2001                       		move.l	d1,d0
00007A3C 6100 0000                  		bsr.w	sub_70AC
00007A40 5801                       		addq.b	#4,d1
00007A42 0201 007F                  		andi.b	#$7F,d1	; '?'
00007A46 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A4A 0645 0010                  		addi.w	#$10,d5
00007A4E 51CE FFE2                  		dbf	d6,loc_705C
00007A52 4E75                       		rts	
00007A54                            ; End of function DrawTiles_LR3
00007A54                            
00007A54                            
00007A54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A54                            
00007A54                            
00007A54                            DrawTiles_TB:
00007A54 7C0F                       		moveq	#$F,d6
00007A56                            ; End of function DrawTiles_TB
00007A56                            
00007A56                            
00007A56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A56                            
00007A56                            
00007A56                            DrawTiles_TB2:
00007A56 2E3C 0080 0000             		move.l	#$800000,d7
00007A5C 2200                       		move.l	d0,d1
00007A5E                            
00007A5E                            loc_7088:
00007A5E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A62 6100 0000                  		bsr.w	sub_712A
00007A66 2001                       		move.l	d1,d0
00007A68 6100 0000                  		bsr.w	sub_70AC
00007A6C 0641 0100                  		addi.w	#$100,d1
00007A70 0241 0FFF                  		andi.w	#$FFF,d1
00007A74 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A78 0644 0010                  		addi.w	#$10,d4
00007A7C 51CE FFE0                  		dbf	d6,loc_7088
00007A80 4E75                       		rts	
00007A82                            ; End of function DrawTiles_TB2
00007A82                            
00007A82                            
00007A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A82                            
00007A82                            
00007A82                            sub_70AC:
00007A82 8042                       		or.w	d2,d0
00007A84 4840                       		swap	d0
00007A86 0810 0004                  		btst	#4,(a0)
00007A8A 6600                       		bne.s	loc_70E8
00007A8C 0810 0003                  		btst	#3,(a0)
00007A90 6600                       		bne.s	loc_70C8
00007A92 2A80                       		move.l	d0,(a5)
00007A94 2C99                       		move.l	(a1)+,(a6)
00007A96 D087                       		add.l	d7,d0
00007A98 2A80                       		move.l	d0,(a5)
00007A9A 2C99                       		move.l	(a1)+,(a6)
00007A9C 4E75                       		rts	
00007A9E                            ; ===========================================================================
00007A9E                            
00007A9E                            loc_70C8:
00007A9E 2A80                       		move.l	d0,(a5)
00007AA0 2819                       		move.l	(a1)+,d4
00007AA2 0A84 0800 0800             		eori.l	#$8000800,d4
00007AA8 4844                       		swap	d4
00007AAA 2C84                       		move.l	d4,(a6)
00007AAC D087                       		add.l	d7,d0
00007AAE 2A80                       		move.l	d0,(a5)
00007AB0 2819                       		move.l	(a1)+,d4
00007AB2 0A84 0800 0800             		eori.l	#$8000800,d4
00007AB8 4844                       		swap	d4
00007ABA 2C84                       		move.l	d4,(a6)
00007ABC 4E75                       		rts	
00007ABE                            ; ===========================================================================
00007ABE                            
00007ABE                            loc_70E8:
00007ABE 0810 0003                  		btst	#3,(a0)
00007AC2 6600                       		bne.s	loc_710A
00007AC4 2A80                       		move.l	d0,(a5)
00007AC6 2A19                       		move.l	(a1)+,d5
00007AC8 2819                       		move.l	(a1)+,d4
00007ACA 0A84 1000 1000             		eori.l	#$10001000,d4
00007AD0 2C84                       		move.l	d4,(a6)
00007AD2 D087                       		add.l	d7,d0
00007AD4 2A80                       		move.l	d0,(a5)
00007AD6 0A85 1000 1000             		eori.l	#$10001000,d5
00007ADC 2C85                       		move.l	d5,(a6)
00007ADE 4E75                       		rts	
00007AE0                            ; ===========================================================================
00007AE0                            
00007AE0                            loc_710A:
00007AE0 2A80                       		move.l	d0,(a5)
00007AE2 2A19                       		move.l	(a1)+,d5
00007AE4 2819                       		move.l	(a1)+,d4
00007AE6 0A84 1800 1800             		eori.l	#$18001800,d4
00007AEC 4844                       		swap	d4
00007AEE 2C84                       		move.l	d4,(a6)
00007AF0 D087                       		add.l	d7,d0
00007AF2 2A80                       		move.l	d0,(a5)
00007AF4 0A85 1800 1800             		eori.l	#$18001800,d5
00007AFA 4845                       		swap	d5
00007AFC 2C85                       		move.l	d5,(a6)
00007AFE 4E75                       		rts	
00007B00                            ; End of function sub_70AC
00007B00                            
00007B00                            
00007B00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B00                            
00007B00                            
00007B00                            sub_712A:
00007B00 DA53                       		add.w	(a3),d5
00007B02                            
00007B02                            loc_712C:
00007B02 D86B 0004                  		add.w	4(a3),d4
00007B06 43F8 B000                  		lea	($FFFFB000).w,a1
00007B0A 3604                       		move.w	d4,d3
00007B0C E24B                       		lsr.w	#1,d3
00007B0E 0243 0380                  		andi.w	#$380,d3
00007B12 E64D                       		lsr.w	#3,d5
00007B14 3005                       		move.w	d5,d0
00007B16 EA48                       		lsr.w	#5,d0
00007B18 0240 007F                  		andi.w	#$7F,d0	; '?'
00007B1C D043                       		add.w	d3,d0
00007B1E 4A38 FE10                  		tst.b	($FFFFFE10).w	
00007B22 6700                       		beq.s	@ghz		
00007B24 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
00007B2A 6700                       		beq.s	@lz		
00007B2C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
00007B32 6700                       		beq.s	@mz		
00007B34 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
00007B3A 6700                       		beq.s	@slz		
00007B3C 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
00007B42 6700                       		beq.s	@syz		
00007B44 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
00007B4A 6700                       		beq.s	@sbz				
00007B4C 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007B52 6700                       		beq.s	@ghz		; if yes, branch
00007B54 76FF                       		moveq	#-1,d3		; load chunks from RAM
00007B56 6100                       		bsr.s	LocateBlock
00007B58 6000                       		bra.s	@continue
00007B5A                            
00007B5A                            @ghz:
00007B5A 7600                       		moveq	#0,d3
00007B5C 6100                       		bsr.s	LocateBlock
00007B5E 0683 0000 0000             		add.l	#Blk256_GHZ,d3
00007B64 6000 0000                  		bra.w	@continue
00007B68                            	
00007B68                            @lz:
00007B68 7600                       		moveq	#0,d3
00007B6A 6100                       		bsr.s	LocateBlock
00007B6C 0683 0000 0000             		add.l	#Blk256_LZ,d3
00007B72 6000 0000                  		bra.w	@continue
00007B76                            		
00007B76                            @mz:
00007B76 7600                       		moveq	#0,d3
00007B78 6100                       		bsr.s	LocateBlock
00007B7A 0683 0000 0000             		add.l	#Blk256_MZ,d3
00007B80 6000 0000                  		bra.w	@continue
00007B84                            		
00007B84                            @slz:
00007B84 7600                       		moveq	#0,d3
00007B86 6100                       		bsr.s	LocateBlock
00007B88 0683 0000 0000             		add.l	#Blk256_SLZ,d3
00007B8E 6000 0000                  		bra.w	@continue
00007B92                            		
00007B92                            @syz:
00007B92 7600                       		moveq	#0,d3
00007B94 6100                       		bsr.s	LocateBlock
00007B96 0683 0000 0000             		add.l	#Blk256_SYZ,d3
00007B9C 6000 0000                  		bra.w	@continue
00007BA0                            		
00007BA0                            @sbz:
00007BA0 7600                       		moveq	#0,d3
00007BA2 6100                       		bsr.s	LocateBlock
00007BA4 0683 0000 0000             		add.l	#Blk256_SBZ,d3		
00007BAA 6000 0000                  		bra.w	@continue
00007BAE                            		
00007BAE                            @continue:
00007BAE 2043                       		movea.l	d3,a0
00007BB0 3610                       		move.w	(a0),d3
00007BB2 0243 03FF                  		andi.w	#$3FF,d3
00007BB6 E74B                       		lsl.w	#3,d3
00007BB8 D2C3                       		adda.w	d3,a1
00007BBA 4E75                       		rts	
00007BBC                            ; ---------------------------------------------------------------------------
00007BBC                            
00007BBC                            LocateBlock:
00007BBC 1634 0000                  		move.b	(a4,d0.w),d3	; load chunk ID in d3
00007BC0 6700                       		beq.s	LocateBlock_EmptyChunk
00007BC2 5303                       		subq.b	#1,d3
00007BC4 0243 007F                  		andi.w	#$7F,d3	; '?'
00007BC8 EE5B                       		ror.w	#7,d3
00007BCA D844                       		add.w	d4,d4
00007BCC 0244 01E0                  		andi.w	#$1E0,d4
00007BD0 0245 001E                  		andi.w	#$1E,d5
00007BD4 D644                       		add.w	d4,d3
00007BD6 D645                       		add.w	d5,d3
00007BD8 4E75                       		rts
00007BDA                            ; ---------------------------------------------------------------------------
00007BDA                            
00007BDA                            LocateBlock_EmptyChunk:
00007BDA 584F                       		addq.w	#4,sp	; pop a stack frame to leave a1 pointing at the first tile
00007BDC 4E75                       		rts
00007BDE                            ; End of function sub_712A
00007BDE                            
00007BDE                            
00007BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BDE                            
00007BDE                            
00007BDE                            Calc_VRAM_Pos:
00007BDE DA53                       		add.w	(a3),d5
00007BE0                            
00007BE0                            loc_7176:
00007BE0 D86B 0004                  		add.w	4(a3),d4
00007BE4 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007BE8 0245 01F0                  		andi.w	#$1F0,d5
00007BEC E94C                       		lsl.w	#4,d4
00007BEE E44D                       		lsr.w	#2,d5
00007BF0 D845                       		add.w	d5,d4
00007BF2 7003                       		moveq	#3,d0
00007BF4 4840                       		swap	d0
00007BF6 3004                       		move.w	d4,d0
00007BF8 4E75                       		rts	
00007BFA                            ; End of function Calc_VRAM_Pos
00007BFA                            
00007BFA                            ; ===========================================================================
00007BFA D86B 0004                  		add.w	4(a3),d4
00007BFE DA53                       		add.w	(a3),d5
00007C00 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007C04 0245 01F0                  		andi.w	#$1F0,d5
00007C08 E94C                       		lsl.w	#4,d4
00007C0A E44D                       		lsr.w	#2,d5
00007C0C D845                       		add.w	d5,d4
00007C0E 7002                       		moveq	#2,d0
00007C10 4840                       		swap	d0
00007C12 3004                       		move.w	d4,d0
00007C14 4E75                       		rts	
00007C16                            
00007C16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C16                            
00007C16                            
00007C16                            LoadTilesFromStart:
00007C16 4BF9 00C0 0004             		lea	($C00004).l,a5
00007C1C 4DF9 00C0 0000             		lea	($C00000).l,a6
00007C22 47F8 F700                  		lea	($FFFFF700).w,a3
00007C26 49F8 A400                  		lea	($FFFFA400).w,a4
00007C2A 343C 4000                  		move.w	#$4000,d2
00007C2E 6100                       		bsr.s	LoadTilesFromStart2
00007C30 47F8 F708                  		lea	($FFFFF708).w,a3
00007C34 49F8 A440                  		lea	($FFFFA440).w,a4
00007C38 343C 6000                  		move.w	#$6000,d2
00007C3C 4A38 FE10                  		tst.b	($FFFFFE10).w
00007C40 6700 0000                  		beq.w	loc_7220
00007C44 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00007C4A 6700 0000                  		beq.w	loc_725A
00007C4E 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
00007C54 6700 0000                  		beq.w	loc_7288
00007C58 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
00007C5E 6700 0000                  		beq.w	loc_7220
00007C62                            ; End of function LoadTilesFromStart
00007C62                            
00007C62                            
00007C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C62                            
00007C62                            
00007C62                            LoadTilesFromStart2:
00007C62 78F0                       		moveq	#-$10,d4
00007C64 7C0F                       		moveq	#$F,d6
00007C66                            
00007C66                            loc_71FC:
00007C66 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C6A 7A00                       		moveq	#0,d5
00007C6C 3204                       		move.w	d4,d1
00007C6E 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00007C72 3801                       		move.w	d1,d4
00007C74 7A00                       		moveq	#0,d5
00007C76 7C1F                       		moveq	#$1F,d6
00007C78 6100 FD86                  		bsr.w	DrawTiles_LR2
00007C7C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C80 0644 0010                  		addi.w	#$10,d4
00007C84 51CE FFE0                  		dbf	d6,loc_71FC
00007C88 4E75                       		rts	
00007C8A                            ; End of function LoadTilesFromStart2
00007C8A                            
00007C8A                            ; ===========================================================================
00007C8A                            
00007C8A                            loc_7220:
00007C8A 7800                       		moveq	#0,d4
00007C8C 7C0F                       		moveq	#$F,d6
00007C8E                            
00007C8E                            loc_7224:
00007C8E 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C92 41F9 0000 0000             		lea	(unk_724A).l,a0
00007C98 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C9C D044                       		add.w	d4,d0
00007C9E 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
00007CA2 6100 0000                  		bsr.w	sub_72BA
00007CA6 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007CAA 0644 0010                  		addi.w	#$10,d4
00007CAE 51CE FFDE                  		dbf	d6,loc_7224
00007CB2 4E75                       		rts	
00007CB4                            ; ===========================================================================
00007CB4 00                         unk_724A:	dc.b   0 ;	 
00007CB5 00                         		dc.b   0 ;  
00007CB6 00                         		dc.b   0 ;  
00007CB7 00                         		dc.b   0 ;  
00007CB8 06                         		dc.b   6 ;  
00007CB9 06                         		dc.b   6 ;  
00007CBA 06                         		dc.b   6 ;  
00007CBB 04                         		dc.b   4 ;  
00007CBC 04                         		dc.b   4 ;  
00007CBD 04                         		dc.b   4 ;  
00007CBE 00                         		dc.b   0 ;  
00007CBF 00                         		dc.b   0 ;  
00007CC0 00                         		dc.b   0 ;  
00007CC1 00                         		dc.b   0 ;  
00007CC2 00                         		dc.b   0 ;  
00007CC3 00                         		dc.b   0 ;  
00007CC4                            ; ===========================================================================
00007CC4                            
00007CC4                            loc_725A:
00007CC4 78F0                       		moveq	#-$10,d4
00007CC6 7C0F                       		moveq	#$F,d6
00007CC8                            
00007CC8                            loc_725E:
00007CC8 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007CCC 41F9 0000 78C9             		lea	(unk_6EF3).l,a0
00007CD2 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007CD6 0440 0200                  		subi.w	#$200,d0
00007CDA D044                       		add.w	d4,d0
00007CDC 0240 07F0                  		andi.w	#$7F0,d0
00007CE0 6100 0000                  		bsr.w	sub_72BA
00007CE4 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007CE8 0644 0010                  		addi.w	#$10,d4
00007CEC 51CE FFDA                  		dbf	d6,loc_725E
00007CF0 4E75                       		rts	
00007CF2                            ; ===========================================================================
00007CF2                            
00007CF2                            loc_7288:
00007CF2 78F0                       		moveq	#-$10,d4
00007CF4 7C0F                       		moveq	#$F,d6
00007CF6                            
00007CF6                            loc_728C:
00007CF6 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007CFA 41F9 0000 77CB             		lea	(unk_6DF5).l,a0
00007D00 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007D04 D044                       		add.w	d4,d0
00007D06 0240 01F0                  		andi.w	#$1F0,d0
00007D0A 6100 0000                  		bsr.w	sub_72BA
00007D0E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007D12 0644 0010                  		addi.w	#$10,d4
00007D16 51CE FFDE                  		dbf	d6,loc_728C
00007D1A 4E75                       		rts	
00007D1C                            ; ===========================================================================
00007D1C F7                         unk_72B2:	dc.b $F7 ; ÷
00007D1D 08                         		dc.b   8 ;  
00007D1E F7                         		dc.b $F7 ; ÷
00007D1F 08                         		dc.b   8 ;  
00007D20 F7                         		dc.b $F7 ; ÷
00007D21 10                         		dc.b $10 ;  
00007D22 F7                         		dc.b $F7 ; ÷
00007D23 18                         		dc.b $18 ;  
00007D24                            
00007D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D24                            
00007D24                            
00007D24                            sub_72BA:
00007D24 E848                       		lsr.w	#4,d0
00007D26 1030 0000                  		move.b	(a0,d0.w),d0
00007D2A 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
00007D2E 6700                       		beq.s	loc_72DA
00007D30 7AF0                       		moveq	#-$10,d5
00007D32 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007D36 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
00007D3A 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007D3E 6100 FCBE                  		bsr.w	DrawTiles_LR
00007D42 6000                       		bra.s	locret_72EE
00007D44                            ; ===========================================================================
00007D44                            
00007D44                            loc_72DA:
00007D44 7A00                       		moveq	#0,d5
00007D46 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007D4A 6100 FE94                  		bsr.w	loc_7176
00007D4E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007D52 7C1F                       		moveq	#$1F,d6
00007D54 6100 FCD4                  		bsr.w	DrawTiles_LR3
00007D58                            
00007D58                            locret_72EE:
00007D58 4E75                       		rts	
00007D5A                            ; End of function sub_72BA
00007D5A                            
00007D5A                            LoadZoneTiles:
00007D5A 7000                       		moveq	#0,d0			; Clear d0
00007D5C 1038 FE10                  		move.b	($FFFFFE10).w,d0		; Load number of current zone to d0
00007D60 E948                       		lsl.w	#4,d0			; Multiply by $10, converting the zone ID into an offset
00007D62 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2	; Load LevelHeaders's address into a2
00007D68 45F2 0000                  		lea	(a2,d0.w),a2		; Offset LevelHeaders by the zone-offset, and load the resultant address to a2
00007D6C 201A                       		move.l	(a2)+,d0		; Move the first longword of data that a2 points to to d0, this contains the zone's first PLC ID and its art's address.
00007D6E                            						; The auto increment is pointless as a2 is overwritten later, and nothing reads from a2 before then
00007D6E 0280 00FF FFFF             		andi.l	#$FFFFFF,d0    		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
00007D74 2040                       		movea.l	d0,a0			; Load the address of the zone's art into a0 (source)
00007D76 43F9 00FF 0000             		lea	($FF0000).l,a1		; Load v_256x256/StartOfRAM (in this context, an art buffer) into a1 (destination)
00007D7C 6100 99FC                  		bsr.w	KosDec			; Decompress a0 to a1 (Kosinski compression)
00007D80                            
00007D80 3609                       		move.w	a1,d3			; Move a word of a1 to d3, note that a1 doesn't exactly contain the address of v_256x256/StartOfRAM anymore, after KosDec, a1 now contains v_256x256/StartOfRAM + the size of the file decompressed to it, d3 now contains the length of the file that was decompressed
00007D82 3E03                       		move.w	d3,d7			; Move d3 to d7, for use in seperate calculations
00007D84                            
00007D84 0243 0FFF                  		andi.w	#$FFF,d3		; Remove the high nibble of the high byte of the length of decompressed file, this nibble is how many $1000 bytes the decompressed art is
00007D88 E24B                       		lsr.w	#1,d3			; Half the value of 'length of decompressed file', d3 becomes the 'DMA transfer length'
00007D8A                            
00007D8A E95F                       		rol.w	#4,d7			; Rotate (left) length of decompressed file by one nibble
00007D8C 0247 000F                  		andi.w	#$F,d7			; Only keep the low nibble of low byte (the same one filtered out of d3 above), this nibble is how many $1000 bytes the decompressed art is
00007D90                            
00007D90 3407                       @loop:		move.w	d7,d2			; Move d7 to d2, note that the ahead dbf removes 1 byte from d7 each time it loops, meaning that the following calculations will have different results each time
00007D92 EF4A                       		lsl.w	#7,d2
00007D94 EB4A                       		lsl.w	#5,d2			; Shift (left) d2 by $C, making it high nibble of the high byte, d2 is now the size of the decompressed file rounded down to the nearest $1000 bytes, d2 becomes the 'destination address'
00007D96                            
00007D96 223C 00FF FFFF             		move.l	#$FFFFFF,d1		; Fill d1 with $FF
00007D9C 3202                       		move.w	d2,d1			; Move d2 to d1, overwriting the last word of $FF's with d2, this turns d1 into 'StartOfRAM'+'However many $1000 bytes the decompressed art is', d1 becomes the 'source address'
00007D9E                            
00007D9E 4EB9 0000 4AB2             		jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
00007DA4 3F07                       		move.w	d7,-(sp)		; Store d7 in the Stack
00007DA6 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00007DAC 6100 AC16                  		bsr.w	DelayProgram
00007DB0 6100 9718                  		bsr.w	RunPLC_RAM
00007DB4 3E1F                       		move.w	(sp)+,d7		; Restore d7 from the Stack
00007DB6 363C 0800                  		move.w	#$800,d3		; Force the DMA transfer length to be $1000/2 (the first cycle is dynamic because the art's DMA'd backwards)
00007DBA 51CF FFD4                  		dbf	d7,@loop		; Loop for each $1000 bytes the decompressed art is
00007DBE                            
00007DBE 4E75                       		rts
00007DC0                            ; End of function LoadZoneTiles
00007DC0                            
00007DC0                            ; ---------------------------------------------------------------------------
00007DC0                            ; Main Load Block loading subroutine
00007DC0                            ; ---------------------------------------------------------------------------
00007DC0                            
00007DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DC0                            
00007DC0                            
00007DC0                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007DC0 7000                       		moveq	#0,d0
00007DC2 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007DC6 E948                       		lsl.w	#4,d0
00007DC8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007DCE 45F2 0000                  		lea	(a2,d0.w),a2
00007DD2 2F0A                       		move.l	a2,-(sp)
00007DD4 588A                       		addq.l	#4,a2
00007DD6 205A                       		movea.l	(a2)+,a0
00007DD8 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007DDC 303C 0000                  		move.w	#0,d0
00007DE0 6100 981A                  		bsr.w	EniDec
00007DE4 205A                       		movea.l	(a2)+,a0
00007DE6 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
00007DEA 6700                       		beq.s	@no_dec		; if yes, branch
00007DEC 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007DF2 6700                       		beq.s	@no_dec		; if yes, branch
00007DF4 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007DFA 6100 997E                  		bsr.w	KosDec
00007DFE                            
00007DFE                            @no_dec:		
00007DFE 6100 0000                  		bsr.w	LevelLayoutLoad
00007E02 301A                       		move.w	(a2)+,d0
00007E04 3012                       		move.w	(a2),d0
00007E06 0240 00FF                  		andi.w	#$FF,d0
00007E0A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007E10 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007E12 700C                       		moveq	#$C,d0		; use SB3 pallet
00007E14                            
00007E14                            MLB_ChkSBZPal:
00007E14 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007E1A 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007E1C 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007E22 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007E24                            
00007E24                            MLB_UsePal0E:
00007E24 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007E26                            
00007E26                            MLB_NormalPal:
00007E26 6100 A2E8                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007E2A 245F                       		movea.l	(sp)+,a2
00007E2C 584A                       		addq.w	#4,a2
00007E2E 7000                       		moveq	#0,d0
00007E30 1012                       		move.b	(a2),d0
00007E32 6700                       		beq.s	locret_6D10
00007E34 6100 9628                  		bsr.w	LoadPLC		; load pattern load cues
00007E38                            
00007E38                            locret_6D10:
00007E38 4E75                       		rts	
00007E3A                            ; End of function MainLoadBlockLoad
00007E3A                            
00007E3A                            ; ---------------------------------------------------------------------------
00007E3A                            ; Level	layout loading subroutine
00007E3A                            ; ---------------------------------------------------------------------------
00007E3A                            
00007E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E3A                            
00007E3A                            
00007E3A                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007E3A 47F8 A400                  		lea	($FFFFA400).w,a3
00007E3E 323C 01FF                  		move.w	#$1FF,d1
00007E42 7000                       		moveq	#0,d0
00007E44                            
00007E44                            LevLoad_ClrRam:
00007E44 26C0                       		move.l	d0,(a3)+
00007E46 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007E4A                            
00007E4A 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007E4E 7200                       		moveq	#0,d1
00007E50 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007E54 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007E58 7202                       		moveq	#2,d1
00007E5A                            ; End of function LevelLayoutLoad
00007E5A                            
00007E5A                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007E5A                            
00007E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E5A                            
00007E5A                            
00007E5A                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007E5A 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007E5E ED08                       		lsl.b	#6,d0
00007E60 EA48                       		lsr.w	#5,d0
00007E62 3400                       		move.w	d0,d2
00007E64 D040                       		add.w	d0,d0
00007E66 D042                       		add.w	d2,d0
00007E68 D041                       		add.w	d1,d0
00007E6A 43F9 0000 0000             		lea	(Level_Index).l,a1
00007E70 3031 0000                  		move.w	(a1,d0.w),d0
00007E74 43F1 0000                  		lea	(a1,d0.w),a1
00007E78 7200                       		moveq	#0,d1
00007E7A 3401                       		move.w	d1,d2
00007E7C 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007E7E 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007E80                            
00007E80                            LevLoad_NumRows:
00007E80 3001                       		move.w	d1,d0
00007E82 204B                       		movea.l	a3,a0
00007E84                            
00007E84                            LevLoad_Row:
00007E84 10D9                       		move.b	(a1)+,(a0)+
00007E86 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007E8A 47EB 0080                  		lea	$80(a3),a3	; do next row
00007E8E 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007E92 4E75                       		rts	
00007E94                            ; End of function LevelLayoutLoad2
00007E94                            
00007E94                            ; ---------------------------------------------------------------------------
00007E94                            ; Dynamic screen resize	loading	subroutine
00007E94                            ; ---------------------------------------------------------------------------
00007E94                            
00007E94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E94                            
00007E94                            
00007E94                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007E94 7000                       		moveq	#0,d0
00007E96 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007E9A D040                       		add.w	d0,d0
00007E9C 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007EA0 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007EA4 7202                       		moveq	#2,d1
00007EA6 3038 F726                  		move.w	($FFFFF726).w,d0
00007EAA 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007EAE 6700                       		beq.s	locret_6DAA
00007EB0 6400                       		bcc.s	loc_6DAC
00007EB2 4441                       		neg.w	d1
00007EB4 3038 F704                  		move.w	($FFFFF704).w,d0
00007EB8 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007EBC 6300                       		bls.s	loc_6DA0
00007EBE 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007EC2 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007EC8                            
00007EC8                            loc_6DA0:
00007EC8 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007ECC 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007ED2                            
00007ED2                            locret_6DAA:
00007ED2 4E75                       		rts	
00007ED4                            ; ===========================================================================
00007ED4                            
00007ED4                            loc_6DAC:				; XREF: DynScrResizeLoad
00007ED4 3038 F704                  		move.w	($FFFFF704).w,d0
00007ED8 5040                       		addq.w	#8,d0
00007EDA B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007EDE 6500                       		bcs.s	loc_6DC4
00007EE0 0838 0001 D022             		btst	#1,($FFFFD022).w
00007EE6 6700                       		beq.s	loc_6DC4
00007EE8 D241                       		add.w	d1,d1
00007EEA D241                       		add.w	d1,d1
00007EEC                            
00007EEC                            loc_6DC4:
00007EEC D378 F72E                  		add.w	d1,($FFFFF72E).w
00007EF0 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007EF6 4E75                       		rts	
00007EF8                            ; End of function DynScrResizeLoad
00007EF8                            
00007EF8                            ; ===========================================================================
00007EF8                            ; ---------------------------------------------------------------------------
00007EF8                            ; Offset index for dynamic screen resizing
00007EF8                            ; ---------------------------------------------------------------------------
00007EF8 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007EFC 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007F00 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007F04 0000                       		dc.w Resize_Ending-Resize_Index
00007F06                            ; ===========================================================================
00007F06                            ; ---------------------------------------------------------------------------
00007F06                            ; Green	Hill Zone dynamic screen resizing
00007F06                            ; ---------------------------------------------------------------------------
00007F06                            
00007F06                            Resize_GHZ:				; XREF: Resize_Index
00007F06 7000                       		moveq	#0,d0
00007F08 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007F0C D040                       		add.w	d0,d0
00007F0E 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007F12 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007F16                            ; ===========================================================================
00007F16 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007F18 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007F1A 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007F1C                            ; ===========================================================================
00007F1C                            
00007F1C                            Resize_GHZ1:
00007F1C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007F22 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007F28 6500                       		bcs.s	locret_6E08	; if not, branch
00007F2A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007F30                            
00007F30                            locret_6E08:
00007F30 4E75                       		rts	
00007F32                            ; ===========================================================================
00007F32                            
00007F32                            Resize_GHZ2:
00007F32 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F38 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007F3E 6500                       		bcs.s	locret_6E3A
00007F40 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007F46 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007F4C 6500                       		bcs.s	locret_6E3A
00007F4E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007F54 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007F5A 6500                       		bcs.s	locret_6E3A
00007F5C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F62                            
00007F62                            locret_6E3A:
00007F62 4E75                       		rts	
00007F64                            ; ===========================================================================
00007F64                            
00007F64                            Resize_GHZ3:
00007F64 7000                       		moveq	#0,d0
00007F66 1038 F742                  		move.b	($FFFFF742).w,d0
00007F6A 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007F6E 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007F72                            ; ===========================================================================
00007F72 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007F74 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007F76 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007F78                            ; ===========================================================================
00007F78                            
00007F78                            Resize_GHZ3main:
00007F78 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F7E 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007F84 6500                       		bcs.s	locret_6E96
00007F86 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007F8C 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007F92 6500                       		bcs.s	locret_6E96
00007F94 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007F9A 6500                       		bcs.s	loc_6E98
00007F9C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007FA2 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007FA8 6400                       		bcc.s	loc_6E8E
00007FAA 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007FB0 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007FB6                            
00007FB6                            loc_6E8E:
00007FB6 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007FBC 6400                       		bcc.s	loc_6E98
00007FBE                            
00007FBE                            locret_6E96:
00007FBE 4E75                       		rts	
00007FC0                            ; ===========================================================================
00007FC0                            
00007FC0                            loc_6E98:
00007FC0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007FC6 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FCA 4E75                       		rts	
00007FCC                            ; ===========================================================================
00007FCC                            
00007FCC                            Resize_GHZ3boss:
00007FCC 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007FD2 6400                       		bcc.s	loc_6EB0
00007FD4 5538 F742                  		subq.b	#2,($FFFFF742).w
00007FD8                            
00007FD8                            loc_6EB0:
00007FD8 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007FDE 6500                       		bcs.s	locret_6EE8
00007FE0 6100 0000                  		bsr.w	SingleObjLoad
00007FE4 6600                       		bne.s	loc_6ED0
00007FE6 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007FEA 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007FF0 337C 0280 000C             		move.w	#$280,$C(a1)
00007FF6                            
00007FF6                            loc_6ED0:
00007FF6 303C 008C                  		move.w	#$8C,d0
00007FFA 6100 921E                  		bsr.w	PlaySound	; play boss music
00007FFE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008004 5438 F742                  		addq.b	#2,($FFFFF742).w
00008008 7011                       		moveq	#$11,d0
0000800A 6000 9452                  		bra.w	LoadPLC		; load boss patterns
0000800E                            ; ===========================================================================
0000800E                            
0000800E                            locret_6EE8:
0000800E 4E75                       		rts	
00008010                            ; ===========================================================================
00008010                            
00008010                            Resize_GHZ3end:
00008010 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008016 4E75                       		rts	
00008018                            ; ===========================================================================
00008018                            ; ---------------------------------------------------------------------------
00008018                            ; Labyrinth Zone dynamic screen	resizing
00008018                            ; ---------------------------------------------------------------------------
00008018                            
00008018                            Resize_LZ:				; XREF: Resize_Index
00008018 7000                       		moveq	#0,d0
0000801A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000801E D040                       		add.w	d0,d0
00008020 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00008024 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00008028                            ; ===========================================================================
00008028 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000802A 0000                       		dc.w Resize_LZ12-Resize_LZx
0000802C 0000                       		dc.w Resize_LZ3-Resize_LZx
0000802E 0000                       		dc.w Resize_SBZ3-Resize_LZx
00008030                            ; ===========================================================================
00008030                            
00008030                            Resize_LZ12:
00008030 4E75                       		rts	
00008032                            ; ===========================================================================
00008032                            
00008032                            Resize_LZ3:
00008032 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00008036 6700                       		beq.s	loc_6F28	; if not, branch
00008038 43F8 A506                  		lea	($FFFFA506).w,a1
0000803C 0C11 0007                  		cmpi.b	#7,(a1)
00008040 6700                       		beq.s	loc_6F28
00008042 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008046 303C 00B7                  		move.w	#$B7,d0
0000804A 6100 91D4                  		bsr.w	PlaySound_Special ; play rumbling sound
0000804E                            
0000804E                            loc_6F28:
0000804E 4A38 F742                  		tst.b	($FFFFF742).w
00008052 6600                       		bne.s	locret_6F64
00008054 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000805A 6500                       		bcs.s	locret_6F62
0000805C 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00008062 6400                       		bcc.s	locret_6F62
00008064 6100 0000                  		bsr.w	SingleObjLoad
00008068 6600                       		bne.s	loc_6F4A
0000806A 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000806E                            
0000806E                            loc_6F4A:
0000806E 303C 008C                  		move.w	#$8C,d0
00008072 6100 91A6                  		bsr.w	PlaySound	; play boss music
00008076 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000807C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008080 7011                       		moveq	#$11,d0
00008082 6000 93DA                  		bra.w	LoadPLC		; load boss patterns
00008086                            ; ===========================================================================
00008086                            
00008086                            locret_6F62:
00008086 4E75                       		rts	
00008088                            ; ===========================================================================
00008088                            
00008088                            locret_6F64:
00008088 4E75                       		rts	
0000808A                            ; ===========================================================================
0000808A                            
0000808A                            Resize_SBZ3:
0000808A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008090 6500                       		bcs.s	locret_6F8C
00008092 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00008098 6400                       		bcc.s	locret_6F8C	; if not, branch
0000809A 4238 FE30                  		clr.b	($FFFFFE30).w
0000809E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000080A4 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000080AA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000080B0                            
000080B0                            locret_6F8C:
000080B0 4E75                       		rts	
000080B2                            ; ===========================================================================
000080B2                            ; ---------------------------------------------------------------------------
000080B2                            ; Marble Zone dynamic screen resizing
000080B2                            ; ---------------------------------------------------------------------------
000080B2                            
000080B2                            Resize_MZ:				; XREF: Resize_Index
000080B2 7000                       		moveq	#0,d0
000080B4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000080B8 D040                       		add.w	d0,d0
000080BA 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000080BE 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000080C2                            ; ===========================================================================
000080C2 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000080C4 0000                       		dc.w Resize_MZ2-Resize_MZx
000080C6 0000                       		dc.w Resize_MZ3-Resize_MZx
000080C8                            ; ===========================================================================
000080C8                            
000080C8                            Resize_MZ1:
000080C8 7000                       		moveq	#0,d0
000080CA 1038 F742                  		move.b	($FFFFF742).w,d0
000080CE 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000080D2 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000080D6                            ; ===========================================================================
000080D6 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000080D8 0000                       		dc.w loc_6FEA-off_6FB2
000080DA 0000                       		dc.w loc_702E-off_6FB2
000080DC 0000                       		dc.w loc_7050-off_6FB2
000080DE                            ; ===========================================================================
000080DE                            
000080DE                            loc_6FBA:
000080DE 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000080E4 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000080EA 6500                       		bcs.s	locret_6FE8
000080EC 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000080F2 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000080F8 6500                       		bcs.s	locret_6FE8
000080FA 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008100 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00008106 6500                       		bcs.s	locret_6FE8
00008108 5438 F742                  		addq.b	#2,($FFFFF742).w
0000810C                            
0000810C                            locret_6FE8:
0000810C 4E75                       		rts	
0000810E                            ; ===========================================================================
0000810E                            
0000810E                            loc_6FEA:
0000810E 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00008114 6400                       		bcc.s	loc_6FF8
00008116 5538 F742                  		subq.b	#2,($FFFFF742).w
0000811A 4E75                       		rts	
0000811C                            ; ===========================================================================
0000811C                            
0000811C                            loc_6FF8:
0000811C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008122 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00008128 6400                       		bcc.s	locret_702C
0000812A 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00008130 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008136 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
0000813C 6400                       		bcc.s	locret_702C
0000813E 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008144 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000814A 6500                       		bcs.s	locret_702C
0000814C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008150                            
00008150                            locret_702C:
00008150 4E75                       		rts	
00008152                            ; ===========================================================================
00008152                            
00008152                            loc_702E:
00008152 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008158 6400                       		bcc.s	loc_703C
0000815A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000815E 4E75                       		rts	
00008160                            ; ===========================================================================
00008160                            
00008160                            loc_703C:
00008160 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00008166 6500                       		bcs.s	locret_704E
00008168 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000816E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008172                            
00008172                            locret_704E:
00008172 4E75                       		rts	
00008174                            ; ===========================================================================
00008174                            
00008174                            loc_7050:
00008174 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000817A 6500                       		bcs.s	locret_7072
0000817C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008182 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008188 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000818E 6500                       		bcs.s	locret_7072
00008190 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008196                            
00008196                            locret_7072:
00008196 4E75                       		rts	
00008198                            ; ===========================================================================
00008198                            
00008198                            Resize_MZ2:
00008198 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000819E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000081A4 6500                       		bcs.s	locret_7088
000081A6 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000081AC                            
000081AC                            locret_7088:
000081AC 4E75                       		rts	
000081AE                            ; ===========================================================================
000081AE                            
000081AE                            Resize_MZ3:
000081AE 7000                       		moveq	#0,d0
000081B0 1038 F742                  		move.b	($FFFFF742).w,d0
000081B4 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000081B8 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000081BC                            ; ===========================================================================
000081BC 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000081BE 0000                       		dc.w Resize_MZ3end-off_7098
000081C0                            ; ===========================================================================
000081C0                            
000081C0                            Resize_MZ3boss:
000081C0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000081C6 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000081CC 6500                       		bcs.s	locret_70E8
000081CE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000081D4 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000081DA 6500                       		bcs.s	locret_70E8
000081DC 6100 0000                  		bsr.w	SingleObjLoad
000081E0 6600                       		bne.s	loc_70D0
000081E2 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000081E6 337C 19F0 0008             		move.w	#$19F0,8(a1)
000081EC 337C 022C 000C             		move.w	#$22C,$C(a1)
000081F2                            
000081F2                            loc_70D0:
000081F2 303C 008C                  		move.w	#$8C,d0
000081F6 6100 9022                  		bsr.w	PlaySound	; play boss music
000081FA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008200 5438 F742                  		addq.b	#2,($FFFFF742).w
00008204 7011                       		moveq	#$11,d0
00008206 6000 9256                  		bra.w	LoadPLC		; load boss patterns
0000820A                            ; ===========================================================================
0000820A                            
0000820A                            locret_70E8:
0000820A 4E75                       		rts	
0000820C                            ; ===========================================================================
0000820C                            
0000820C                            Resize_MZ3end:
0000820C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008212 4E75                       		rts	
00008214                            ; ===========================================================================
00008214                            ; ---------------------------------------------------------------------------
00008214                            ; Star Light Zone dynamic screen resizing
00008214                            ; ---------------------------------------------------------------------------
00008214                            
00008214                            Resize_SLZ:				; XREF: Resize_Index
00008214 7000                       		moveq	#0,d0
00008216 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000821A D040                       		add.w	d0,d0
0000821C 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00008220 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00008224                            ; ===========================================================================
00008224 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00008226 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00008228 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000822A                            ; ===========================================================================
0000822A                            
0000822A                            Resize_SLZ12:
0000822A 4E75                       		rts	
0000822C                            ; ===========================================================================
0000822C                            
0000822C                            Resize_SLZ3:
0000822C 7000                       		moveq	#0,d0
0000822E 1038 F742                  		move.b	($FFFFF742).w,d0
00008232 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008236 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000823A                            ; ===========================================================================
0000823A 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000823C 0000                       		dc.w Resize_SLZ3boss-off_7118
0000823E 0000                       		dc.w Resize_SLZ3end-off_7118
00008240                            ; ===========================================================================
00008240                            
00008240                            Resize_SLZ3main:
00008240 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00008246 6500                       		bcs.s	locret_7130
00008248 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000824E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008252                            
00008252                            locret_7130:
00008252 4E75                       		rts	
00008254                            ; ===========================================================================
00008254                            
00008254                            Resize_SLZ3boss:
00008254 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000825A 6500                       		bcs.s	locret_715C
0000825C 6100 0000                  		bsr.w	SingleObjLoad
00008260 6600                       		bne.s	loc_7144
00008262 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00008266                            
00008266                            loc_7144:
00008266 303C 008C                  		move.w	#$8C,d0
0000826A 6100 8FAE                  		bsr.w	PlaySound	; play boss music
0000826E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008274 5438 F742                  		addq.b	#2,($FFFFF742).w
00008278 7011                       		moveq	#$11,d0
0000827A 6000 91E2                  		bra.w	LoadPLC		; load boss patterns
0000827E                            ; ===========================================================================
0000827E                            
0000827E                            locret_715C:
0000827E 4E75                       		rts	
00008280                            ; ===========================================================================
00008280                            
00008280                            Resize_SLZ3end:
00008280 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008286 4E75                       		rts
00008288 4E75                       		rts
0000828A                            ; ===========================================================================
0000828A                            ; ---------------------------------------------------------------------------
0000828A                            ; Spring Yard Zone dynamic screen resizing
0000828A                            ; ---------------------------------------------------------------------------
0000828A                            
0000828A                            Resize_SYZ:				; XREF: Resize_Index
0000828A 7000                       		moveq	#0,d0
0000828C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008290 D040                       		add.w	d0,d0
00008292 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00008296 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000829A                            ; ===========================================================================
0000829A 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000829C 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000829E 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000082A0                            ; ===========================================================================
000082A0                            
000082A0                            Resize_SYZ1:
000082A0 4E75                       		rts	
000082A2                            ; ===========================================================================
000082A2                            
000082A2                            Resize_SYZ2:
000082A2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000082A8 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000082AE 6500                       		bcs.s	locret_71A2
000082B0 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000082B6 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000082BC 6500                       		bcs.s	locret_71A2
000082BE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000082C4                            
000082C4                            locret_71A2:
000082C4 4E75                       		rts	
000082C6                            ; ===========================================================================
000082C6                            
000082C6                            Resize_SYZ3:
000082C6 7000                       		moveq	#0,d0
000082C8 1038 F742                  		move.b	($FFFFF742).w,d0
000082CC 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000082D0 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000082D4                            ; ===========================================================================
000082D4 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000082D6 0000                       		dc.w Resize_SYZ3boss-off_71B2
000082D8 0000                       		dc.w Resize_SYZ3end-off_71B2
000082DA                            ; ===========================================================================
000082DA                            
000082DA                            Resize_SYZ3main:
000082DA 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000082E0 6500                       		bcs.s	locret_71CE
000082E2 6100 0000                  		bsr.w	SingleObjLoad
000082E6 6600                       		bne.s	locret_71CE
000082E8 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000082EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000082F0                            
000082F0                            locret_71CE:
000082F0 4E75                       		rts	
000082F2                            ; ===========================================================================
000082F2                            
000082F2                            Resize_SYZ3boss:
000082F2 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000082F8 6500                       		bcs.s	locret_7200
000082FA 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00008300 6100 0000                  		bsr.w	SingleObjLoad
00008304 6600                       		bne.s	loc_71EC
00008306 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000830A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000830E                            
0000830E                            loc_71EC:
0000830E 303C 008C                  		move.w	#$8C,d0
00008312 6100 8F06                  		bsr.w	PlaySound	; play boss music
00008316 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000831C 7011                       		moveq	#$11,d0
0000831E 6000 913E                  		bra.w	LoadPLC		; load boss patterns
00008322                            ; ===========================================================================
00008322                            
00008322                            locret_7200:
00008322 4E75                       		rts	
00008324                            ; ===========================================================================
00008324                            
00008324                            Resize_SYZ3end:
00008324 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000832A 4E75                       		rts	
0000832C                            ; ===========================================================================
0000832C                            ; ---------------------------------------------------------------------------
0000832C                            ; Scrap	Brain Zone dynamic screen resizing
0000832C                            ; ---------------------------------------------------------------------------
0000832C                            
0000832C                            Resize_SBZ:				; XREF: Resize_Index
0000832C 7000                       		moveq	#0,d0
0000832E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008332 D040                       		add.w	d0,d0
00008334 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00008338 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000833C                            ; ===========================================================================
0000833C 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000833E 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008340 0000                       		dc.w Resize_FZ-Resize_SBZx
00008342                            ; ===========================================================================
00008342                            
00008342                            Resize_SBZ1:
00008342 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008348 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000834E 6500                       		bcs.s	locret_7242
00008350 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00008356 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000835C 6500                       		bcs.s	locret_7242
0000835E 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00008364                            
00008364                            locret_7242:
00008364 4E75                       		rts	
00008366                            ; ===========================================================================
00008366                            
00008366                            Resize_SBZ2:
00008366 7000                       		moveq	#0,d0
00008368 1038 F742                  		move.b	($FFFFF742).w,d0
0000836C 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008370 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008374                            ; ===========================================================================
00008374 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00008376 0000                       		dc.w Resize_SBZ2boss-off_7252
00008378 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000837A 0000                       		dc.w Resize_SBZ2end-off_7252
0000837C                            ; ===========================================================================
0000837C                            
0000837C                            Resize_SBZ2main:
0000837C 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008382 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00008388 6500                       		bcs.s	locret_727A
0000838A 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008390 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00008396 6500                       		bcs.s	locret_727A
00008398 5438 F742                  		addq.b	#2,($FFFFF742).w
0000839C                            
0000839C                            locret_727A:
0000839C 4E75                       		rts	
0000839E                            ; ===========================================================================
0000839E                            
0000839E                            Resize_SBZ2boss:
0000839E 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000083A4 6500                       		bcs.s	locret_7298
000083A6 6100 0000                  		bsr.w	SingleObjLoad
000083AA 6600                       		bne.s	locret_7298
000083AC 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000083B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000083B4 701E                       		moveq	#$1E,d0
000083B6 6000 90A6                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000083BA                            ; ===========================================================================
000083BA                            
000083BA                            locret_7298:
000083BA 4E75                       		rts	
000083BC                            ; ===========================================================================
000083BC                            
000083BC                            Resize_SBZ2boss2:
000083BC 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000083C2 6500                       		bcs.s	loc_72B6
000083C4 6100 0000                  		bsr.w	SingleObjLoad
000083C8 6600                       		bne.s	loc_72B0
000083CA 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000083CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000083D2                            
000083D2                            loc_72B0:
000083D2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000083D8                            
000083D8                            loc_72B6:
000083D8 6000                       		bra.s	loc_72C2
000083DA                            ; ===========================================================================
000083DA                            
000083DA                            Resize_SBZ2end:
000083DA 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000083E0 6500                       		bcs.s	loc_72C2
000083E2 4E75                       		rts	
000083E4                            ; ===========================================================================
000083E4                            
000083E4                            loc_72C2:
000083E4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000083EA 4E75                       		rts	
000083EC                            ; ===========================================================================
000083EC                            
000083EC                            Resize_FZ:
000083EC 7000                       		moveq	#0,d0
000083EE 1038 F742                  		move.b	($FFFFF742).w,d0
000083F2 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000083F6 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000083FA                            ; ===========================================================================
000083FA 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000083FE 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00008402 0000                       		dc.w Resize_FZend2-off_72D8
00008404                            ; ===========================================================================
00008404                            
00008404                            Resize_FZmain:
00008404 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000840A 6500                       		bcs.s	loc_72F4
0000840C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008410 701F                       		moveq	#$1F,d0
00008412 6100 904A                  		bsr.w	LoadPLC		; load FZ boss patterns
00008416                            
00008416                            loc_72F4:
00008416 60CC                       		bra.s	loc_72C2
00008418                            ; ===========================================================================
00008418                            
00008418                            Resize_FZboss:
00008418 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000841E 6500                       		bcs.s	loc_7312
00008420 6100 0000                  		bsr.w	SingleObjLoad
00008424 6600                       		bne.s	loc_7312
00008426 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000842A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000842E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008434                            
00008434                            loc_7312:
00008434 60AE                       		bra.s	loc_72C2
00008436                            ; ===========================================================================
00008436                            
00008436                            Resize_FZend:
00008436 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000843C 6500                       		bcs.s	loc_7320
0000843E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008442                            
00008442                            loc_7320:
00008442 60A0                       		bra.s	loc_72C2
00008444                            ; ===========================================================================
00008444                            
00008444                            locret_7322:
00008444 4E75                       		rts	
00008446                            ; ===========================================================================
00008446                            
00008446                            Resize_FZend2:
00008446 609C                       		bra.s	loc_72C2
00008448                            ; ===========================================================================
00008448                            ; ---------------------------------------------------------------------------
00008448                            ; Ending sequence dynamic screen resizing (empty)
00008448                            ; ---------------------------------------------------------------------------
00008448                            
00008448                            Resize_Ending:				; XREF: Resize_Index
00008448 4E75                       		rts	
0000844A                            ; ===========================================================================
0000844A                            ; ---------------------------------------------------------------------------
0000844A                            ; Object 11 - GHZ bridge
0000844A                            ; ---------------------------------------------------------------------------
0000844A                            
0000844A                            Obj11:					; XREF: Obj_Index
0000844A 7000                       		moveq	#0,d0
0000844C 1028 0024                  		move.b	$24(a0),d0
00008450 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00008454 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00008458                            ; ===========================================================================
00008458 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000845C 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008460 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00008464                            ; ===========================================================================
00008464                            
00008464                            Obj11_Main:				; XREF: Obj11_Index
00008464 5428 0024                  		addq.b	#2,$24(a0)
00008468 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008470 317C 438E 0002             		move.w	#$438E,2(a0)
00008476 117C 0004 0001             		move.b	#4,1(a0)
0000847C 117C 0003 0018             		move.b	#3,$18(a0)
00008482 117C 0080 0019             		move.b	#$80,$19(a0)
00008488 3428 000C                  		move.w	$C(a0),d2
0000848C 3628 0008                  		move.w	8(a0),d3
00008490 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008492 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008496 7200                       		moveq	#0,d1
00008498 1212                       		move.b	(a2),d1		; copy a2 to d1
0000849A 14FC 0000                  		move.b	#0,(a2)+
0000849E 3001                       		move.w	d1,d0
000084A0 E248                       		lsr.w	#1,d0
000084A2 E948                       		lsl.w	#4,d0
000084A4 9640                       		sub.w	d0,d3
000084A6 5501                       		subq.b	#2,d1
000084A8 6500                       		bcs.s	Obj11_Action
000084AA                            
000084AA                            Obj11_MakeBdg:
000084AA 6100 0000                  		bsr.w	SingleObjLoad
000084AE 6600                       		bne.s	Obj11_Action
000084B0 5228 0028                  		addq.b	#1,$28(a0)
000084B4 B668 0008                  		cmp.w	8(a0),d3
000084B8 6600                       		bne.s	loc_73B8
000084BA 0643 0010                  		addi.w	#$10,d3
000084BE 3142 000C                  		move.w	d2,$C(a0)
000084C2 3142 003C                  		move.w	d2,$3C(a0)
000084C6 3A08                       		move.w	a0,d5
000084C8 0445 D000                  		subi.w	#-$3000,d5
000084CC EC4D                       		lsr.w	#6,d5
000084CE 0245 007F                  		andi.w	#$7F,d5
000084D2 14C5                       		move.b	d5,(a2)+
000084D4 5228 0028                  		addq.b	#1,$28(a0)
000084D8                            
000084D8                            loc_73B8:				; XREF: ROM:00007398j
000084D8 3A09                       		move.w	a1,d5
000084DA 0445 D000                  		subi.w	#-$3000,d5
000084DE EC4D                       		lsr.w	#6,d5
000084E0 0245 007F                  		andi.w	#$7F,d5
000084E4 14C5                       		move.b	d5,(a2)+
000084E6 137C 000A 0024             		move.b	#$A,$24(a1)
000084EC 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000084EE 3342 000C                  		move.w	d2,$C(a1)
000084F2 3342 003C                  		move.w	d2,$3C(a1)
000084F6 3343 0008                  		move.w	d3,8(a1)
000084FA 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00008502 337C 438E 0002             		move.w	#$438E,2(a1)
00008508 137C 0004 0001             		move.b	#4,1(a1)
0000850E 137C 0003 0018             		move.b	#3,$18(a1)
00008514 137C 0008 0019             		move.b	#8,$19(a1)
0000851A 0643 0010                  		addi.w	#$10,d3
0000851E 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00008522                            
00008522                            Obj11_Action:				; XREF: Obj11_Index
00008522 6100                       		bsr.s	Obj11_Solid
00008524 4A28 003E                  		tst.b	$3E(a0)
00008528 6700                       		beq.s	Obj11_Display
0000852A 5928 003E                  		subq.b	#4,$3E(a0)
0000852E 6100 0000                  		bsr.w	Obj11_Bend
00008532                            
00008532                            Obj11_Display:
00008532 6100 0000                  		bsr.w	DisplaySprite
00008536 6000 0000                  		bra.w	Obj11_ChkDel
0000853A                            
0000853A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000853A                            
0000853A                            
0000853A                            Obj11_Solid:				; XREF: Obj11_Action
0000853A 7200                       		moveq	#0,d1
0000853C 1228 0028                  		move.b	$28(a0),d1
00008540 E749                       		lsl.w	#3,d1
00008542 3401                       		move.w	d1,d2
00008544 5041                       		addq.w	#8,d1
00008546 D442                       		add.w	d2,d2
00008548 43F8 D000                  		lea	($FFFFD000).w,a1
0000854C 4A69 0012                  		tst.w	$12(a1)
00008550 6B00 0000                  		bmi.w	locret_751E
00008554 3029 0008                  		move.w	8(a1),d0
00008558 9068 0008                  		sub.w	8(a0),d0
0000855C D041                       		add.w	d1,d0
0000855E 6B00 0000                  		bmi.w	locret_751E
00008562 B042                       		cmp.w	d2,d0
00008564 6400 0000                  		bcc.w	locret_751E
00008568 6000                       		bra.s	Platform2
0000856A                            ; End of function Obj11_Solid
0000856A                            
0000856A                            ; ---------------------------------------------------------------------------
0000856A                            ; Platform subroutine
0000856A                            ; ---------------------------------------------------------------------------
0000856A                            
0000856A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000856A                            
0000856A                            
0000856A                            PlatformObject:
0000856A 43F8 D000                  		lea	($FFFFD000).w,a1
0000856E 4A69 0012                  		tst.w	$12(a1)
00008572 6B00 0000                  		bmi.w	locret_751E
00008576 3029 0008                  		move.w	8(a1),d0
0000857A 9068 0008                  		sub.w	8(a0),d0
0000857E D041                       		add.w	d1,d0
00008580 6B00 0000                  		bmi.w	locret_751E
00008584 D241                       		add.w	d1,d1
00008586 B041                       		cmp.w	d1,d0
00008588 6400 0000                  		bcc.w	locret_751E
0000858C                            
0000858C                            Platform2:
0000858C 3028 000C                  		move.w	$C(a0),d0
00008590 5140                       		subq.w	#8,d0
00008592                            
00008592                            Platform3:
00008592 3429 000C                  		move.w	$C(a1),d2
00008596 1229 0016                  		move.b	$16(a1),d1
0000859A 4881                       		ext.w	d1
0000859C D242                       		add.w	d2,d1
0000859E 5841                       		addq.w	#4,d1
000085A0 9041                       		sub.w	d1,d0
000085A2 6200 0000                  		bhi.w	locret_751E
000085A6 0C40 FFF0                  		cmpi.w	#-$10,d0
000085AA 6500 0000                  		bcs.w	locret_751E
000085AE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000085B2 6B00 0000                  		bmi.w	locret_751E
000085B6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000085BC 6400 0000                  		bcc.w	locret_751E
000085C0 D440                       		add.w	d0,d2
000085C2 5642                       		addq.w	#3,d2
000085C4 3342 000C                  		move.w	d2,$C(a1)
000085C8 5428 0024                  		addq.b	#2,$24(a0)
000085CC                            
000085CC                            loc_74AE:
000085CC 0829 0003 0022             		btst	#3,$22(a1)
000085D2 6700                       		beq.s	loc_74DC
000085D4 7000                       		moveq	#0,d0
000085D6 1029 003D                  		move.b	$3D(a1),d0
000085DA ED48                       		lsl.w	#6,d0
000085DC 0680 00FF D000             		addi.l	#$FFD000,d0
000085E2 2440                       		movea.l	d0,a2
000085E4 08AA 0003 0022             		bclr	#3,$22(a2)
000085EA 422A 0025                  		clr.b	$25(a2)
000085EE 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000085F4 6600                       		bne.s	loc_74DC
000085F6 552A 0024                  		subq.b	#2,$24(a2)
000085FA                            
000085FA                            loc_74DC:
000085FA 3008                       		move.w	a0,d0
000085FC 0440 D000                  		subi.w	#-$3000,d0
00008600 EC48                       		lsr.w	#6,d0
00008602 0240 007F                  		andi.w	#$7F,d0
00008606 1340 003D                  		move.b	d0,$3D(a1)
0000860A 137C 0000 0026             		move.b	#0,$26(a1)
00008610 337C 0000 0012             		move.w	#0,$12(a1)
00008616 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000861C 0829 0001 0022             		btst	#1,$22(a1)
00008622 6700                       		beq.s	loc_7512
00008624 2F08                       		move.l	a0,-(sp)
00008626 2049                       		movea.l	a1,a0
00008628 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000862E 205F                       		movea.l	(sp)+,a0
00008630                            
00008630                            loc_7512:
00008630 08E9 0003 0022             		bset	#3,$22(a1)
00008636 08E8 0003 0022             		bset	#3,$22(a0)
0000863C                            
0000863C                            locret_751E:
0000863C 4E75                       		rts	
0000863E                            ; End of function PlatformObject
0000863E                            
0000863E                            ; ---------------------------------------------------------------------------
0000863E                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000863E                            ; ---------------------------------------------------------------------------
0000863E                            
0000863E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000863E                            
0000863E                            
0000863E                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000863E 43F8 D000                  		lea	($FFFFD000).w,a1
00008642 4A69 0012                  		tst.w	$12(a1)
00008646 6B00 FFF4                  		bmi.w	locret_751E
0000864A 3029 0008                  		move.w	8(a1),d0
0000864E 9068 0008                  		sub.w	8(a0),d0
00008652 D041                       		add.w	d1,d0
00008654 6BE6                       		bmi.s	locret_751E
00008656 D241                       		add.w	d1,d1
00008658 B041                       		cmp.w	d1,d0
0000865A 64E0                       		bcc.s	locret_751E
0000865C 0828 0000 0001             		btst	#0,1(a0)
00008662 6700                       		beq.s	loc_754A
00008664 4640                       		not.w	d0
00008666 D041                       		add.w	d1,d0
00008668                            
00008668                            loc_754A:
00008668 E248                       		lsr.w	#1,d0
0000866A 7600                       		moveq	#0,d3
0000866C 1632 0000                  		move.b	(a2,d0.w),d3
00008670 3028 000C                  		move.w	$C(a0),d0
00008674 9043                       		sub.w	d3,d0
00008676 6000 FF1A                  		bra.w	Platform3
0000867A                            ; End of function SlopeObject
0000867A                            
0000867A                            
0000867A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000867A                            
0000867A                            
0000867A                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000867A 43F8 D000                  		lea	($FFFFD000).w,a1
0000867E 4A69 0012                  		tst.w	$12(a1)
00008682 6B00 FFB8                  		bmi.w	locret_751E
00008686 3029 0008                  		move.w	8(a1),d0
0000868A 9068 0008                  		sub.w	8(a0),d0
0000868E D041                       		add.w	d1,d0
00008690 6B00 FFAA                  		bmi.w	locret_751E
00008694 D241                       		add.w	d1,d1
00008696 B041                       		cmp.w	d1,d0
00008698 6400 FFA2                  		bcc.w	locret_751E
0000869C 3028 000C                  		move.w	$C(a0),d0
000086A0 9043                       		sub.w	d3,d0
000086A2 6000 FEEE                  		bra.w	Platform3
000086A6                            ; End of function Obj15_Solid
000086A6                            
000086A6                            ; ===========================================================================
000086A6                            
000086A6                            Obj11_Action2:				; XREF: Obj11_Index
000086A6 6100                       		bsr.s	Obj11_WalkOff
000086A8 6100 0000                  		bsr.w	DisplaySprite
000086AC 6000 0000                  		bra.w	Obj11_ChkDel
000086B0                            
000086B0                            ; ---------------------------------------------------------------------------
000086B0                            ; Subroutine allowing Sonic to walk off a bridge
000086B0                            ; ---------------------------------------------------------------------------
000086B0                            
000086B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086B0                            
000086B0                            
000086B0                            Obj11_WalkOff:				; XREF: Obj11_Action2
000086B0 7200                       		moveq	#0,d1
000086B2 1228 0028                  		move.b	$28(a0),d1
000086B6 E749                       		lsl.w	#3,d1
000086B8 3401                       		move.w	d1,d2
000086BA 5041                       		addq.w	#8,d1
000086BC 6100                       		bsr.s	ExitPlatform2
000086BE 6400                       		bcc.s	locret_75BE
000086C0 E848                       		lsr.w	#4,d0
000086C2 1140 003F                  		move.b	d0,$3F(a0)
000086C6 1028 003E                  		move.b	$3E(a0),d0
000086CA 0C00 0040                  		cmpi.b	#$40,d0
000086CE 6700                       		beq.s	loc_75B6
000086D0 5828 003E                  		addq.b	#4,$3E(a0)
000086D4                            
000086D4                            loc_75B6:
000086D4 6100 0000                  		bsr.w	Obj11_Bend
000086D8 6100 0000                  		bsr.w	Obj11_MoveSonic
000086DC                            
000086DC                            locret_75BE:
000086DC 4E75                       		rts	
000086DE                            ; End of function Obj11_WalkOff
000086DE                            
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            ; Subroutine allowing Sonic to walk or jump off	a platform
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            
000086DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086DE                            
000086DE                            
000086DE                            ExitPlatform:
000086DE 3401                       		move.w	d1,d2
000086E0                            
000086E0                            ExitPlatform2:
000086E0 D442                       		add.w	d2,d2
000086E2 43F8 D000                  		lea	($FFFFD000).w,a1
000086E6 0829 0001 0022             		btst	#1,$22(a1)
000086EC 6600                       		bne.s	loc_75E0
000086EE 3029 0008                  		move.w	8(a1),d0
000086F2 9068 0008                  		sub.w	8(a0),d0
000086F6 D041                       		add.w	d1,d0
000086F8 6B00                       		bmi.s	loc_75E0
000086FA B042                       		cmp.w	d2,d0
000086FC 6500                       		bcs.s	locret_75F2
000086FE                            
000086FE                            loc_75E0:
000086FE 08A9 0003 0022             		bclr	#3,$22(a1)
00008704 117C 0002 0024             		move.b	#2,$24(a0)
0000870A 08A8 0003 0022             		bclr	#3,$22(a0)
00008710                            
00008710                            locret_75F2:
00008710 4E75                       		rts	
00008712                            ; End of function ExitPlatform
00008712                            
00008712                            
00008712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008712                            
00008712                            
00008712                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008712 7000                       		moveq	#0,d0
00008714 1028 003F                  		move.b	$3F(a0),d0
00008718 1030 0029                  		move.b	$29(a0,d0.w),d0
0000871C ED48                       		lsl.w	#6,d0
0000871E 0680 00FF D000             		addi.l	#$FFD000,d0
00008724 2440                       		movea.l	d0,a2
00008726 43F8 D000                  		lea	($FFFFD000).w,a1
0000872A 302A 000C                  		move.w	$C(a2),d0
0000872E 5140                       		subq.w	#8,d0
00008730 7200                       		moveq	#0,d1
00008732 1229 0016                  		move.b	$16(a1),d1
00008736 9041                       		sub.w	d1,d0
00008738 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
0000873C 4E75                       		rts	
0000873E                            ; End of function Obj11_MoveSonic
0000873E                            
0000873E                            
0000873E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000873E                            
0000873E                            
0000873E                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
0000873E 1028 003E                  		move.b	$3E(a0),d0
00008742 6100 A2B2                  		bsr.w	CalcSine
00008746 3800                       		move.w	d0,d4
00008748 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000874E 7000                       		moveq	#0,d0
00008750 1028 0028                  		move.b	$28(a0),d0
00008754 E948                       		lsl.w	#4,d0
00008756 7600                       		moveq	#0,d3
00008758 1628 003F                  		move.b	$3F(a0),d3
0000875C 3403                       		move.w	d3,d2
0000875E D640                       		add.w	d0,d3
00008760 7A00                       		moveq	#0,d5
00008762 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008768 1A35 3000                  		move.b	(a5,d3.w),d5
0000876C 0243 000F                  		andi.w	#$F,d3
00008770 E94B                       		lsl.w	#4,d3
00008772 47F4 3000                  		lea	(a4,d3.w),a3
00008776 45E8 0029                  		lea	$29(a0),a2
0000877A                            
0000877A                            loc_765C:
0000877A 7000                       		moveq	#0,d0
0000877C 101A                       		move.b	(a2)+,d0
0000877E ED48                       		lsl.w	#6,d0
00008780 0680 00FF D000             		addi.l	#$FFD000,d0
00008786 2240                       		movea.l	d0,a1
00008788 7000                       		moveq	#0,d0
0000878A 101B                       		move.b	(a3)+,d0
0000878C 5240                       		addq.w	#1,d0
0000878E C0C5                       		mulu.w	d5,d0
00008790 C0C4                       		mulu.w	d4,d0
00008792 4840                       		swap	d0
00008794 D069 003C                  		add.w	$3C(a1),d0
00008798 3340 000C                  		move.w	d0,$C(a1)
0000879C 51CA FFDC                  		dbf	d2,loc_765C
000087A0 7000                       		moveq	#0,d0
000087A2 1028 0028                  		move.b	$28(a0),d0
000087A6 7600                       		moveq	#0,d3
000087A8 1628 003F                  		move.b	$3F(a0),d3
000087AC 5203                       		addq.b	#1,d3
000087AE 9600                       		sub.b	d0,d3
000087B0 4403                       		neg.b	d3
000087B2 6B00                       		bmi.s	locret_76CA
000087B4 3403                       		move.w	d3,d2
000087B6 E94B                       		lsl.w	#4,d3
000087B8 47F4 3000                  		lea	(a4,d3.w),a3
000087BC D6C2                       		adda.w	d2,a3
000087BE 5342                       		subq.w	#1,d2
000087C0 6500                       		bcs.s	locret_76CA
000087C2                            
000087C2                            loc_76A4:
000087C2 7000                       		moveq	#0,d0
000087C4 101A                       		move.b	(a2)+,d0
000087C6 ED48                       		lsl.w	#6,d0
000087C8 0680 00FF D000             		addi.l	#$FFD000,d0
000087CE 2240                       		movea.l	d0,a1
000087D0 7000                       		moveq	#0,d0
000087D2 1023                       		move.b	-(a3),d0
000087D4 5240                       		addq.w	#1,d0
000087D6 C0C5                       		mulu.w	d5,d0
000087D8 C0C4                       		mulu.w	d4,d0
000087DA 4840                       		swap	d0
000087DC D069 003C                  		add.w	$3C(a1),d0
000087E0 3340 000C                  		move.w	d0,$C(a1)
000087E4 51CA FFDC                  		dbf	d2,loc_76A4
000087E8                            
000087E8                            locret_76CA:
000087E8 4E75                       		rts	
000087EA                            ; End of function Obj11_Bend
000087EA                            
000087EA                            ; ===========================================================================
000087EA                            ; ---------------------------------------------------------------------------
000087EA                            ; GHZ bridge-bending data
000087EA                            ; (Defines how the bridge bends	when Sonic walks across	it)
000087EA                            ; ---------------------------------------------------------------------------
000087EA                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000088FA                            		even
000088FA                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000089FA                            		even
000089FA                            
000089FA                            ; ===========================================================================
000089FA                            
000089FA                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000089FA 3028 0008                  		move.w	8(a0),d0
000089FE 0240 FF80                  		andi.w	#$FF80,d0
00008A02 3238 F700                  		move.w	($FFFFF700).w,d1
00008A06 0441 0080                  		subi.w	#$80,d1
00008A0A 0241 FF80                  		andi.w	#$FF80,d1
00008A0E 9041                       		sub.w	d1,d0
00008A10 0C40 0280                  		cmpi.w	#$280,d0
00008A14 6300                       		bls.s	Obj11_NoDel
00008A16 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008A1A 6700                       		beq.s	Obj11_DelAll		; if it's zero, don't remember object
00008A1C 3440                       		movea.w	d0,a2	; load address into a2
00008A1E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008A22 6000                       		bra.s	Obj11_DelAll	; and delete object
00008A24                            
00008A24                            Obj11_NoDel:
00008A24 4E75                       		rts	
00008A26                            ; ===========================================================================
00008A26                            
00008A26                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00008A26 7400                       		moveq	#0,d2
00008A28 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008A2C 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008A2E 5302                       		subq.b	#1,d2		; subtract 1
00008A30 6500                       		bcs.s	Obj11_Delete
00008A32                            
00008A32                            Obj11_DelLoop:
00008A32 7000                       		moveq	#0,d0
00008A34 101A                       		move.b	(a2)+,d0
00008A36 ED48                       		lsl.w	#6,d0
00008A38 0680 00FF D000             		addi.l	#$FFD000,d0
00008A3E 2240                       		movea.l	d0,a1
00008A40 B048                       		cmp.w	a0,d0
00008A42 6700                       		beq.s	loc_791E
00008A44 6100 0000                  		bsr.w	DeleteObject2
00008A48                            
00008A48                            loc_791E:
00008A48 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00008A4C                            
00008A4C                            Obj11_Delete:
00008A4C 6100 0000                  		bsr.w	DeleteObject
00008A50 4E75                       		rts	
00008A52                            ; ===========================================================================
00008A52                            
00008A52                            Obj11_Delete2:				; XREF: Obj11_Index
00008A52 6100 0000                  		bsr.w	DeleteObject
00008A56 4E75                       		rts	
00008A58                            ; ===========================================================================
00008A58                            
00008A58                            Obj11_Display2:				; XREF: Obj11_Index
00008A58 6100 0000                  		bsr.w	DisplaySprite
00008A5C 4E75                       		rts	
00008A5E                            ; ===========================================================================
00008A5E                            ; ---------------------------------------------------------------------------
00008A5E                            ; Sprite mappings - GHZ	bridge
00008A5E                            ; ---------------------------------------------------------------------------
00008A5E                            Map_obj11:
00008A5E                            	include "_maps\obj11.asm"
00008A5E                            ; ---------------------------------------------------------------------------
00008A5E                            ; Sprite mappings - GHZ	bridge
00008A5E                            ; ---------------------------------------------------------------------------
00008A5E 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008A62 0000                       		dc.w byte_794B-Map_obj11
00008A64 01                         byte_793A:	dc.b 1
00008A65 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008A6A 02                         byte_7940:	dc.b 2
00008A6B F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008A70 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008A75 01                         byte_794B:	dc.b 1
00008A76 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008A7C 00                         		even
00008A7C 00                         		even
00008A7C                            
00008A7C                            ; ===========================================================================
00008A7C                            ; ---------------------------------------------------------------------------
00008A7C                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008A7C                            ;	    - spiked ball on a chain (SBZ)
00008A7C                            ; ---------------------------------------------------------------------------
00008A7C                            
00008A7C                            Obj15:					; XREF: Obj_Index
00008A7C 7000                       		moveq	#0,d0
00008A7E 1028 0024                  		move.b	$24(a0),d0
00008A82 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008A86 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008A8A                            ; ===========================================================================
00008A8A 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008A8E 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008A92 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008A96 0000                       		dc.w Obj15_Action-Obj15_Index
00008A98                            ; ===========================================================================
00008A98                            
00008A98                            Obj15_Main:				; XREF: Obj15_Index
00008A98 5428 0024                  		addq.b	#2,$24(a0)
00008A9C 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008AA4 317C 4380 0002             		move.w	#$4380,2(a0)
00008AAA 117C 0004 0001             		move.b	#4,1(a0)
00008AB0 117C 0003 0018             		move.b	#3,$18(a0)
00008AB6 117C 0018 0019             		move.b	#$18,$19(a0)
00008ABC 117C 0008 0016             		move.b	#8,$16(a0)
00008AC2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008AC8 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008ACE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008AD4 6600                       		bne.s	Obj15_NotSLZ
00008AD6 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008ADE 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008AE4 117C 0020 0019             		move.b	#$20,$19(a0)
00008AEA 117C 0010 0016             		move.b	#$10,$16(a0)
00008AF0 117C 0099 0020             		move.b	#$99,$20(a0)
00008AF6                            
00008AF6                            Obj15_NotSLZ:
00008AF6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008AFC 6600                       		bne.s	Obj15_SetLength
00008AFE 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008B06 317C 0391 0002             		move.w	#$391,2(a0)
00008B0C 117C 0018 0019             		move.b	#$18,$19(a0)
00008B12 117C 0018 0016             		move.b	#$18,$16(a0)
00008B18 117C 0086 0020             		move.b	#$86,$20(a0)
00008B1E 117C 000C 0024             		move.b	#$C,$24(a0)
00008B24                            
00008B24                            Obj15_SetLength:
00008B24 1810                       		move.b	0(a0),d4
00008B26 7200                       		moveq	#0,d1
00008B28 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008B2C 1212                       		move.b	(a2),d1		; move a2 to d1
00008B2E 3F01                       		move.w	d1,-(sp)
00008B30 0241 000F                  		andi.w	#$F,d1
00008B34 14FC 0000                  		move.b	#0,(a2)+
00008B38 3601                       		move.w	d1,d3
00008B3A E94B                       		lsl.w	#4,d3
00008B3C 5003                       		addq.b	#8,d3
00008B3E 1143 003C                  		move.b	d3,$3C(a0)
00008B42 5103                       		subq.b	#8,d3
00008B44 4A28 001A                  		tst.b	$1A(a0)
00008B48 6700                       		beq.s	Obj15_MakeChain
00008B4A 5003                       		addq.b	#8,d3
00008B4C 5341                       		subq.w	#1,d1
00008B4E                            
00008B4E                            Obj15_MakeChain:
00008B4E 6100 0000                  		bsr.w	SingleObjLoad
00008B52 6600                       		bne.s	loc_7A92
00008B54 5228 0028                  		addq.b	#1,$28(a0)
00008B58 3A09                       		move.w	a1,d5
00008B5A 0445 D000                  		subi.w	#-$3000,d5
00008B5E EC4D                       		lsr.w	#6,d5
00008B60 0245 007F                  		andi.w	#$7F,d5
00008B64 14C5                       		move.b	d5,(a2)+
00008B66 137C 000A 0024             		move.b	#$A,$24(a1)
00008B6C 1284                       		move.b	d4,0(a1)	; load swinging	object
00008B6E 2368 0004 0004             		move.l	4(a0),4(a1)
00008B74 3368 0002 0002             		move.w	2(a0),2(a1)
00008B7A 08A9 0006 0002             		bclr	#6,2(a1)
00008B80 137C 0004 0001             		move.b	#4,1(a1)
00008B86 137C 0004 0018             		move.b	#4,$18(a1)
00008B8C 137C 0008 0019             		move.b	#8,$19(a1)
00008B92 137C 0001 001A             		move.b	#1,$1A(a1)
00008B98 1343 003C                  		move.b	d3,$3C(a1)
00008B9C 0403 0010                  		subi.b	#$10,d3
00008BA0 6400                       		bcc.s	loc_7A8E
00008BA2 137C 0002 001A             		move.b	#2,$1A(a1)
00008BA8 137C 0003 0018             		move.b	#3,$18(a1)
00008BAE 08E9 0006 0002             		bset	#6,2(a1)
00008BB4                            
00008BB4                            loc_7A8E:
00008BB4 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008BB8                            
00008BB8                            loc_7A92:
00008BB8 3A08                       		move.w	a0,d5
00008BBA 0445 D000                  		subi.w	#-$3000,d5
00008BBE EC4D                       		lsr.w	#6,d5
00008BC0 0245 007F                  		andi.w	#$7F,d5
00008BC4 14C5                       		move.b	d5,(a2)+
00008BC6 317C 4080 0026             		move.w	#$4080,$26(a0)
00008BCC 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008BD2 321F                       		move.w	(sp)+,d1
00008BD4 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008BD8 6700                       		beq.s	loc_7AD4	; if not, branch
00008BDA 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008BE2 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008BE8 117C 0001 001A             		move.b	#1,$1A(a0)
00008BEE 117C 0002 0018             		move.b	#2,$18(a0)
00008BF4 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008BFA                            
00008BFA                            loc_7AD4:
00008BFA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008C00 6700                       		beq.s	Obj15_Action	; if yes, branch
00008C02                            
00008C02                            Obj15_SetSolid:				; XREF: Obj15_Index
00008C02 7200                       		moveq	#0,d1
00008C04 1228 0019                  		move.b	$19(a0),d1
00008C08 7600                       		moveq	#0,d3
00008C0A 1628 0016                  		move.b	$16(a0),d3
00008C0E 6100 FA6A                  		bsr.w	Obj15_Solid
00008C12                            
00008C12                            Obj15_Action:				; XREF: Obj15_Index
00008C12 6100 0000                  		bsr.w	Obj15_Move
00008C16 6100 0000                  		bsr.w	DisplaySprite
00008C1A 6000 0000                  		bra.w	Obj15_ChkDel
00008C1E                            ; ===========================================================================
00008C1E                            
00008C1E                            Obj15_Action2:				; XREF: Obj15_Index
00008C1E 7200                       		moveq	#0,d1
00008C20 1228 0019                  		move.b	$19(a0),d1
00008C24 6100 FAB8                  		bsr.w	ExitPlatform
00008C28 3F28 0008                  		move.w	8(a0),-(sp)
00008C2C 6100 0000                  		bsr.w	Obj15_Move
00008C30 341F                       		move.w	(sp)+,d2
00008C32 7600                       		moveq	#0,d3
00008C34 1628 0016                  		move.b	$16(a0),d3
00008C38 5203                       		addq.b	#1,d3
00008C3A 6100 0000                  		bsr.w	MvSonicOnPtfm
00008C3E 6100 0000                  		bsr.w	DisplaySprite
00008C42 6000 0000                  		bra.w	Obj15_ChkDel
00008C46                            
00008C46 4E75                       		rts
00008C48                            
00008C48                            ; ---------------------------------------------------------------------------
00008C48                            ; Subroutine to	change Sonic's position with a platform
00008C48                            ; ---------------------------------------------------------------------------
00008C48                            
00008C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C48                            
00008C48                            
00008C48                            MvSonicOnPtfm:
00008C48 43F8 D000                  		lea	($FFFFD000).w,a1
00008C4C 3028 000C                  		move.w	$C(a0),d0
00008C50 9043                       		sub.w	d3,d0
00008C52 6000                       		bra.s	MvSonic2
00008C54                            ; End of function MvSonicOnPtfm
00008C54                            
00008C54                            ; ---------------------------------------------------------------------------
00008C54                            ; Subroutine to	change Sonic's position with a platform
00008C54                            ; ---------------------------------------------------------------------------
00008C54                            
00008C54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C54                            
00008C54                            
00008C54                            MvSonicOnPtfm2:
00008C54 43F8 D000                  		lea	($FFFFD000).w,a1
00008C58 3028 000C                  		move.w	$C(a0),d0
00008C5C 0440 0009                  		subi.w	#9,d0
00008C60                            
00008C60                            MvSonic2:
00008C60 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008C64 6B00                       		bmi.s	locret_7B62
00008C66 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C6C 6400                       		bcc.s	locret_7B62
00008C6E 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C72 6600                       		bne.s	locret_7B62
00008C74 9468 0008                  		sub.w	8(a0),d2
00008C78 9569 0008                  		sub.w	d2,8(a1)
00008C7C 7200                       		moveq	#0,d1
00008C7E 1229 0016                  		move.b	$16(a1),d1
00008C82 9041                       		sub.w	d1,d0
00008C84 B069 000C                  		cmp.w	$C(a1),d0
00008C88 6600                       		bne.s	@frustrated
00008C8A 4A42                       		tst.w	d2
00008C8C 6600                       		bne.s	@frustrated
00008C8E 3340 000C                  		move.w	d0,$C(a1)	
00008C92 4A38 F5D9                  		tst.b	(SonimeSST+sonime_waittimer2).w
00008C96 6700                       		beq.s	@resetwaittimer
00008C98 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008C9C 6600                       		bne.s	locret_7B62
00008C9E 5338 F5D9                  		subi.b	#1,(SonimeSST+sonime_waittimer2).w
00008CA2 6000                       		bra.s	@frustrated2
00008CA4                            
00008CA4                            	@frustrated:
00008CA4 11FC 0020 F5D9             		move.b	#$20,(SonimeSST+sonime_waittimer2).w
00008CAA 3340 000C                  		move.w	d0,$C(a1)
00008CAE 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008CB2 6600                       		bne.s	@subtract
00008CB4                            
00008CB4                            	@frustrated2:
00008CB4 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
00008CBA 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00008CC0 4E75                       		rts
00008CC2                            
00008CC2                            	@subtract:
00008CC2 5338 F5D8                  		subi.b	#1,(SonimeSST+sonime_waittimer).w
00008CC6 4E75                       		rts
00008CC8                            
00008CC8                            	@resetwaittimer:
00008CC8 11FC 0060 F5D8             		move.b	#$60,(SonimeSST+sonime_waittimer).w
00008CCE                            
00008CCE                            locret_7B62:
00008CCE 4E75                       		rts	
00008CD0                            ; End of function MvSonicOnPtfm2
00008CD0                            
00008CD0                            
00008CD0                            CheckIfMoving:
00008CD0                            
00008CD0                            
00008CD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CD0                            
00008CD0                            
00008CD0                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008CD0 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008CD4 323C 0080                  		move.w	#$80,d1
00008CD8 0828 0000 0022             		btst	#0,$22(a0)
00008CDE 6700                       		beq.s	loc_7B78
00008CE0 4440                       		neg.w	d0
00008CE2 D041                       		add.w	d1,d0
00008CE4                            
00008CE4                            loc_7B78:
00008CE4 6000                       		bra.s	Obj15_Move2
00008CE6                            ; End of function Obj15_Move
00008CE6                            
00008CE6                            
00008CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CE6                            
00008CE6                            
00008CE6                            Obj48_Move:				; XREF: Obj48_Display2
00008CE6 4A28 003D                  		tst.b	$3D(a0)
00008CEA 6600                       		bne.s	loc_7B9C
00008CEC 3028 003E                  		move.w	$3E(a0),d0
00008CF0 5040                       		addq.w	#8,d0
00008CF2 3140 003E                  		move.w	d0,$3E(a0)
00008CF6 D168 0026                  		add.w	d0,$26(a0)
00008CFA 0C40 0200                  		cmpi.w	#$200,d0
00008CFE 6600                       		bne.s	loc_7BB6
00008D00 117C 0001 003D             		move.b	#1,$3D(a0)
00008D06 6000                       		bra.s	loc_7BB6
00008D08                            ; ===========================================================================
00008D08                            
00008D08                            loc_7B9C:
00008D08 3028 003E                  		move.w	$3E(a0),d0
00008D0C 5140                       		subq.w	#8,d0
00008D0E 3140 003E                  		move.w	d0,$3E(a0)
00008D12 D168 0026                  		add.w	d0,$26(a0)
00008D16 0C40 FE00                  		cmpi.w	#-$200,d0
00008D1A 6600                       		bne.s	loc_7BB6
00008D1C 117C 0000 003D             		move.b	#0,$3D(a0)
00008D22                            
00008D22                            loc_7BB6:
00008D22 1028 0026                  		move.b	$26(a0),d0
00008D26                            ; End of function Obj48_Move
00008D26                            
00008D26                            
00008D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D26                            
00008D26                            
00008D26                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008D26 6100 9CCE                  		bsr.w	CalcSine
00008D2A 3428 0038                  		move.w	$38(a0),d2
00008D2E 3628 003A                  		move.w	$3A(a0),d3
00008D32 45E8 0028                  		lea	$28(a0),a2
00008D36 7C00                       		moveq	#0,d6
00008D38 1C1A                       		move.b	(a2)+,d6
00008D3A                            
00008D3A                            loc_7BCE:
00008D3A 7800                       		moveq	#0,d4
00008D3C 181A                       		move.b	(a2)+,d4
00008D3E ED4C                       		lsl.w	#6,d4
00008D40 0684 00FF D000             		addi.l	#$FFD000,d4
00008D46 2244                       		movea.l	d4,a1
00008D48 7800                       		moveq	#0,d4
00008D4A 1829 003C                  		move.b	$3C(a1),d4
00008D4E 2A04                       		move.l	d4,d5
00008D50 C9C0                       		muls.w	d0,d4
00008D52 E084                       		asr.l	#8,d4
00008D54 CBC1                       		muls.w	d1,d5
00008D56 E085                       		asr.l	#8,d5
00008D58 D842                       		add.w	d2,d4
00008D5A DA43                       		add.w	d3,d5
00008D5C 3344 000C                  		move.w	d4,$C(a1)
00008D60 3345 0008                  		move.w	d5,8(a1)
00008D64 51CE FFD4                  		dbf	d6,loc_7BCE
00008D68 4E75                       		rts	
00008D6A                            ; End of function Obj15_Move2
00008D6A                            
00008D6A                            ; ===========================================================================
00008D6A                            
00008D6A                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008D6A 3028 003A                  		move.w	$3A(a0),d0
00008D6E 0240 FF80                  		andi.w	#$FF80,d0
00008D72 3238 F700                  		move.w	($FFFFF700).w,d1
00008D76 0441 0080                  		subi.w	#$80,d1
00008D7A 0241 FF80                  		andi.w	#$FF80,d1
00008D7E 9041                       		sub.w	d1,d0
00008D80 0C40 0280                  		cmpi.w	#$280,d0
00008D84 6300                       		bls.s	Obj15_NoDel
00008D86 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008D8A 6700                       		beq.s	Obj15_DelAll		; if it's zero, don't remember object
00008D8C 3440                       		movea.w	d0,a2	; load address into a2
00008D8E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008D92 6000                       		bra.s	Obj15_DelAll	; and delete object
00008D94                            
00008D94                            Obj15_NoDel:
00008D94 4E75                       		rts	
00008D96                            ; ===========================================================================
00008D96                            
00008D96                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008D96 7400                       		moveq	#0,d2
00008D98 45E8 0028                  		lea	$28(a0),a2
00008D9C 141A                       		move.b	(a2)+,d2
00008D9E                            
00008D9E                            Obj15_DelLoop:
00008D9E 7000                       		moveq	#0,d0
00008DA0 101A                       		move.b	(a2)+,d0
00008DA2 ED48                       		lsl.w	#6,d0
00008DA4 0680 00FF D000             		addi.l	#$FFD000,d0
00008DAA 2240                       		movea.l	d0,a1
00008DAC 6100 0000                  		bsr.w	DeleteObject2
00008DB0 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008DB4 4E75                       		rts	
00008DB6                            ; ===========================================================================
00008DB6                            
00008DB6                            Obj15_Delete:				; XREF: Obj15_Index
00008DB6 6100 0000                  		bsr.w	DeleteObject
00008DBA 4E75                       		rts	
00008DBC                            ; ===========================================================================
00008DBC                            
00008DBC                            Obj15_Display:				; XREF: Obj15_Index
00008DBC 6000 0000                  		bra.w	DisplaySprite
00008DC0                            ; ===========================================================================
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            Map_obj15:
00008DC0                            	include "_maps\obj15ghz.asm"
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0 0000                       		dc.w byte_7C4E-Map_obj15
00008DC2 0000                       		dc.w byte_7C59-Map_obj15
00008DC4 0000                       		dc.w byte_7C5F-Map_obj15
00008DC6 02                         byte_7C4E:	dc.b 2
00008DC7 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008DCC F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008DD1 01                         byte_7C59:	dc.b 1
00008DD2 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008DD7 01                         byte_7C5F:	dc.b 1
00008DD8 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008DDE 00                         		even
00008DDE 00                         		even
00008DDE                            
00008DDE                            ; ---------------------------------------------------------------------------
00008DDE                            ; Sprite mappings - SLZ	swinging platforms
00008DDE                            ; ---------------------------------------------------------------------------
00008DDE                            Map_obj15a:
00008DDE                            	include "_maps\obj15slz.asm"
00008DDE                            ; ---------------------------------------------------------------------------
00008DDE                            ; Sprite mappings - SLZ	swinging platforms
00008DDE                            ; ---------------------------------------------------------------------------
00008DDE 0000                       		dc.w byte_7C6C-Map_obj15a
00008DE0 0000                       		dc.w byte_7C95-Map_obj15a
00008DE2 0000                       		dc.w byte_7C9B-Map_obj15a
00008DE4 08                         byte_7C6C:	dc.b 8
00008DE5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008DEA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008DEF F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008DF4 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008DF9 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008DFE 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008E03 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008E08 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008E0D 01                         byte_7C95:	dc.b 1
00008E0E F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008E13 01                         byte_7C9B:	dc.b 1
00008E14 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008E1A 00                         		even
00008E1A 00                         		even
00008E1A                            
00008E1A                            ; ===========================================================================
00008E1A                            ; ---------------------------------------------------------------------------
00008E1A                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008E1A                            ; ---------------------------------------------------------------------------
00008E1A                            
00008E1A                            Obj17:					; XREF: Obj_Index
00008E1A 7000                       		moveq	#0,d0
00008E1C 1028 0024                  		move.b	$24(a0),d0
00008E20 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008E24 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008E28                            ; ===========================================================================
00008E28 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008E2A 0000                       		dc.w Obj17_Action-Obj17_Index
00008E2C 0000                       		dc.w Obj17_Action-Obj17_Index
00008E2E 0000                       		dc.w Obj17_Delete-Obj17_Index
00008E30 0000                       		dc.w Obj17_Display-Obj17_Index
00008E32                            ; ===========================================================================
00008E32                            
00008E32                            Obj17_Main:				; XREF: Obj17_Index
00008E32 5428 0024                  		addq.b	#2,$24(a0)
00008E36 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008E3E 317C 4398 0002             		move.w	#$4398,2(a0)
00008E44 117C 0007 0022             		move.b	#7,$22(a0)
00008E4A 117C 0004 0001             		move.b	#4,1(a0)
00008E50 117C 0003 0018             		move.b	#3,$18(a0)
00008E56 117C 0008 0019             		move.b	#8,$19(a0)
00008E5C 3428 000C                  		move.w	$C(a0),d2
00008E60 3628 0008                  		move.w	8(a0),d3
00008E64 1810                       		move.b	0(a0),d4
00008E66 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008E6A 7200                       		moveq	#0,d1
00008E6C 1212                       		move.b	(a2),d1		; move a2 to d1
00008E6E 14FC 0000                  		move.b	#0,(a2)+
00008E72 3001                       		move.w	d1,d0
00008E74 E248                       		lsr.w	#1,d0
00008E76 E948                       		lsl.w	#4,d0
00008E78 9640                       		sub.w	d0,d3
00008E7A 5501                       		subq.b	#2,d1
00008E7C 6500                       		bcs.s	Obj17_Action
00008E7E 7C00                       		moveq	#0,d6
00008E80                            
00008E80                            Obj17_MakeHelix:
00008E80 6100 0000                  		bsr.w	SingleObjLoad
00008E84 6600                       		bne.s	Obj17_Action
00008E86 5228 0028                  		addq.b	#1,$28(a0)
00008E8A 3A09                       		move.w	a1,d5
00008E8C 0445 D000                  		subi.w	#$D000,d5
00008E90 EC4D                       		lsr.w	#6,d5
00008E92 0245 007F                  		andi.w	#$7F,d5
00008E96 14C5                       		move.b	d5,(a2)+
00008E98 137C 0008 0024             		move.b	#8,$24(a1)
00008E9E 1284                       		move.b	d4,0(a1)
00008EA0 3342 000C                  		move.w	d2,$C(a1)
00008EA4 3343 0008                  		move.w	d3,8(a1)
00008EA8 2368 0004 0004             		move.l	4(a0),4(a1)
00008EAE 337C 4398 0002             		move.w	#$4398,2(a1)
00008EB4 137C 0004 0001             		move.b	#4,1(a1)
00008EBA 137C 0003 0018             		move.b	#3,$18(a1)
00008EC0 137C 0008 0019             		move.b	#8,$19(a1)
00008EC6 1346 003E                  		move.b	d6,$3E(a1)
00008ECA 5206                       		addq.b	#1,d6
00008ECC 0206 0007                  		andi.b	#7,d6
00008ED0 0643 0010                  		addi.w	#$10,d3
00008ED4 B668 0008                  		cmp.w	8(a0),d3
00008ED8 6600                       		bne.s	loc_7D78
00008EDA 1146 003E                  		move.b	d6,$3E(a0)
00008EDE 5206                       		addq.b	#1,d6
00008EE0 0206 0007                  		andi.b	#7,d6
00008EE4 0643 0010                  		addi.w	#$10,d3
00008EE8 5228 0028                  		addq.b	#1,$28(a0)
00008EEC                            
00008EEC                            loc_7D78:
00008EEC 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008EF0                            
00008EF0                            Obj17_Action:				; XREF: Obj17_Index
00008EF0 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008EF4 6100 0000                  		bsr.w	DisplaySprite
00008EF8 6000 0000                  		bra.w	Obj17_ChkDel
00008EFC                            
00008EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EFC                            
00008EFC                            
00008EFC                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008EFC 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008F00 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008F06 D028 003E                  		add.b	$3E(a0),d0
00008F0A 0200 0007                  		andi.b	#7,d0
00008F0E 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008F12 6600                       		bne.s	locret_7DA6
00008F14 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008F1A                            
00008F1A                            locret_7DA6:
00008F1A 4E75                       		rts	
00008F1C                            ; End of function Obj17_RotateSpikes
00008F1C                            
00008F1C                            ; ===========================================================================
00008F1C                            
00008F1C                            Obj17_ChkDel:				; XREF: Obj17_Action
00008F1C 3028 0008                  		move.w	8(a0),d0
00008F20 0240 FF80                  		andi.w	#$FF80,d0
00008F24 3238 F700                  		move.w	($FFFFF700).w,d1
00008F28 0441 0080                  		subi.w	#$80,d1
00008F2C 0241 FF80                  		andi.w	#$FF80,d1
00008F30 9041                       		sub.w	d1,d0
00008F32 0C40 0280                  		cmpi.w	#$280,d0
00008F36 6300                       		bls.s	Obj17_NoDel
00008F38 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008F3C 6700                       		beq.s	Obj17_DelAll		; if it's zero, don't remember object
00008F3E 3440                       		movea.w	d0,a2	; load address into a2
00008F40 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008F44 6000                       		bra.s	Obj17_DelAll	; and delete object
00008F46                            
00008F46                            Obj17_NoDel:
00008F46 4E75                       		rts	
00008F48                            ; ===========================================================================
00008F48                            
00008F48                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008F48 7400                       		moveq	#0,d2
00008F4A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008F4E 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008F50 5502                       		subq.b	#2,d2
00008F52 6500                       		bcs.s	Obj17_Delete
00008F54                            
00008F54                            Obj17_DelLoop:
00008F54 7000                       		moveq	#0,d0
00008F56 101A                       		move.b	(a2)+,d0
00008F58 ED48                       		lsl.w	#6,d0
00008F5A 0680 00FF D000             		addi.l	#$FFD000,d0
00008F60 2240                       		movea.l	d0,a1
00008F62 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008F66 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008F6A                            
00008F6A                            Obj17_Delete:				; XREF: Obj17_Index
00008F6A 6100 0000                  		bsr.w	DeleteObject
00008F6E 4E75                       		rts	
00008F70                            ; ===========================================================================
00008F70                            
00008F70                            Obj17_Display:				; XREF: Obj17_Index
00008F70 6100 FF8A                  		bsr.w	Obj17_RotateSpikes
00008F74 6000 0000                  		bra.w	DisplaySprite
00008F78                            ; ===========================================================================
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            Map_obj17:
00008F78                            	include "_maps\obj17.asm"
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F78                            ; ---------------------------------------------------------------------------
00008F78 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008F7C 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008F80 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008F84 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008F88 01                         byte_7E08:	dc.b 1
00008F89 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008F8E 01                         byte_7E0E:	dc.b 1
00008F8F F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008F94 01                         byte_7E14:	dc.b 1
00008F95 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008F9A 01                         byte_7E1A:	dc.b 1
00008F9B FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008FA0 01                         byte_7E20:	dc.b 1
00008FA1 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008FA6 01                         byte_7E26:	dc.b 1
00008FA7 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008FAC 01                         byte_7E2C:	dc.b 1
00008FAD F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008FB2                            		even
00008FB2                            		even
00008FB2                            
00008FB2                            ; ===========================================================================
00008FB2                            ; ---------------------------------------------------------------------------
00008FB2                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008FB2                            ; ---------------------------------------------------------------------------
00008FB2                            
00008FB2                            Obj18:					; XREF: Obj_Index
00008FB2 7000                       		moveq	#0,d0
00008FB4 1028 0024                  		move.b	$24(a0),d0
00008FB8 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008FBC 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008FC0                            ; ===========================================================================
00008FC0 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008FC2 0000                       		dc.w Obj18_Solid-Obj18_Index
00008FC4 0000                       		dc.w Obj18_Action2-Obj18_Index
00008FC6 0000                       		dc.w Obj18_Delete-Obj18_Index
00008FC8 0000                       		dc.w Obj18_Action-Obj18_Index
00008FCA                            ; ===========================================================================
00008FCA                            
00008FCA                            Obj18_Main:				; XREF: Obj18_Index
00008FCA 5428 0024                  		addq.b	#2,$24(a0)
00008FCE 317C 4000 0002             		move.w	#$4000,2(a0)
00008FD4 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008FDC 117C 0020 0019             		move.b	#$20,$19(a0)
00008FE2 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008FE8 6600                       		bne.s	Obj18_NotSYZ
00008FEA 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008FF2 117C 0020 0019             		move.b	#$20,$19(a0)
00008FF8                            
00008FF8                            Obj18_NotSYZ:
00008FF8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008FFE 6600                       		bne.s	Obj18_NotSLZ
00009000 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00009008 117C 0020 0019             		move.b	#$20,$19(a0)
0000900E 317C 4000 0002             		move.w	#$4000,2(a0)
00009014 117C 0003 0028             		move.b	#3,$28(a0)
0000901A                            
0000901A                            Obj18_NotSLZ:
0000901A 117C 0004 0001             		move.b	#4,1(a0)
00009020 117C 0004 0018             		move.b	#4,$18(a0)
00009026 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000902C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00009032 3168 0008 0032             		move.w	8(a0),$32(a0)
00009038 317C 0080 0026             		move.w	#$80,$26(a0)
0000903E 7200                       		moveq	#0,d1
00009040 1028 0028                  		move.b	$28(a0),d0
00009044 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009048 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000904A 5201                       		addq.b	#1,d1		; use frame #1
0000904C 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00009052                            
00009052                            Obj18_SetFrame:
00009052 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00009056                            
00009056                            Obj18_Solid:				; XREF: Obj18_Index
00009056 4A28 0038                  		tst.b	$38(a0)
0000905A 6700                       		beq.s	loc_7EE0
0000905C 5928 0038                  		subq.b	#4,$38(a0)
00009060                            
00009060                            loc_7EE0:
00009060 7200                       		moveq	#0,d1
00009062 1228 0019                  		move.b	$19(a0),d1
00009066 6100 F502                  		bsr.w	PlatformObject
0000906A                            
0000906A                            Obj18_Action:				; XREF: Obj18_Index
0000906A 6100 0000                  		bsr.w	Obj18_Move
0000906E 6100 0000                  		bsr.w	Obj18_Nudge
00009072 6100 0000                  		bsr.w	DisplaySprite
00009076 6000 0000                  		bra.w	Obj18_ChkDel
0000907A                            ; ===========================================================================
0000907A                            
0000907A                            Obj18_Action2:				; XREF: Obj18_Index
0000907A 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009080 6700                       		beq.s	loc_7F06
00009082 5828 0038                  		addq.b	#4,$38(a0)
00009086                            
00009086                            loc_7F06:
00009086 7200                       		moveq	#0,d1
00009088 1228 0019                  		move.b	$19(a0),d1
0000908C 6100 F650                  		bsr.w	ExitPlatform
00009090 3F28 0008                  		move.w	8(a0),-(sp)
00009094 6100 0000                  		bsr.w	Obj18_Move
00009098 6100 0000                  		bsr.w	Obj18_Nudge
0000909C 341F                       		move.w	(sp)+,d2
0000909E 6100 FBB4                  		bsr.w	MvSonicOnPtfm2
000090A2 6100 0000                  		bsr.w	DisplaySprite
000090A6 6000 0000                  		bra.w	Obj18_ChkDel
000090AA                            
000090AA 4E75                       		rts
000090AC                            
000090AC                            ; ---------------------------------------------------------------------------
000090AC                            ; Subroutine to	move platform slightly when you	stand on it
000090AC                            ; ---------------------------------------------------------------------------
000090AC                            
000090AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090AC                            
000090AC                            
000090AC                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000090AC 1028 0038                  		move.b	$38(a0),d0
000090B0 6100 9944                  		bsr.w	CalcSine
000090B4 323C 0400                  		move.w	#$400,d1
000090B8 C1C1                       		muls.w	d1,d0
000090BA 4840                       		swap	d0
000090BC D068 002C                  		add.w	$2C(a0),d0
000090C0 3140 000C                  		move.w	d0,$C(a0)
000090C4 4E75                       		rts	
000090C6                            ; End of function Obj18_Nudge
000090C6                            
000090C6                            ; ---------------------------------------------------------------------------
000090C6                            ; Subroutine to	move platforms
000090C6                            ; ---------------------------------------------------------------------------
000090C6                            
000090C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090C6                            
000090C6                            
000090C6                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000090C6 7000                       		moveq	#0,d0
000090C8 1028 0028                  		move.b	$28(a0),d0
000090CC 0240 000F                  		andi.w	#$F,d0
000090D0 D040                       		add.w	d0,d0
000090D2 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000090D6 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000090DA                            ; End of function Obj18_Move
000090DA                            
000090DA                            ; ===========================================================================
000090DA 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000090DE 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000090E2 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000090E6 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000090EA 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000090EE 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000090F2 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000090F4                            ; ===========================================================================
000090F4                            
000090F4                            Obj18_Type00:
000090F4 4E75                       		rts			; platform 00 doesn't move
000090F6                            ; ===========================================================================
000090F6                            
000090F6                            Obj18_Type05:
000090F6 3028 0032                  		move.w	$32(a0),d0
000090FA 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090FE 4401                       		neg.b	d1		; reverse platform-motion
00009100 0601 0040                  		addi.b	#$40,d1
00009104 6000                       		bra.s	Obj18_01_Move
00009106                            ; ===========================================================================
00009106                            
00009106                            Obj18_Type01:
00009106 3028 0032                  		move.w	$32(a0),d0
0000910A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000910E 0401 0040                  		subi.b	#$40,d1
00009112                            
00009112                            Obj18_01_Move:
00009112 4881                       		ext.w	d1
00009114 D041                       		add.w	d1,d0
00009116 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000911A 6000 0000                  		bra.w	Obj18_ChgMotion
0000911E                            ; ===========================================================================
0000911E                            
0000911E                            Obj18_Type0C:
0000911E 3028 0034                  		move.w	$34(a0),d0
00009122 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00009126 4401                       		neg.b	d1		; reverse platform-motion
00009128 0601 0030                  		addi.b	#$30,d1
0000912C 6000                       		bra.s	Obj18_02_Move
0000912E                            ; ===========================================================================
0000912E                            
0000912E                            Obj18_Type0B:
0000912E 3028 0034                  		move.w	$34(a0),d0
00009132 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00009136 0401 0030                  		subi.b	#$30,d1
0000913A 6000                       		bra.s	Obj18_02_Move
0000913C                            ; ===========================================================================
0000913C                            
0000913C                            Obj18_Type06:
0000913C 3028 0034                  		move.w	$34(a0),d0
00009140 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009144 4401                       		neg.b	d1		; reverse platform-motion
00009146 0601 0040                  		addi.b	#$40,d1
0000914A 6000                       		bra.s	Obj18_02_Move
0000914C                            ; ===========================================================================
0000914C                            
0000914C                            Obj18_Type02:
0000914C 3028 0034                  		move.w	$34(a0),d0
00009150 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009154 0401 0040                  		subi.b	#$40,d1
00009158                            
00009158                            Obj18_02_Move:
00009158 4881                       		ext.w	d1
0000915A D041                       		add.w	d1,d0
0000915C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009160 6000 0000                  		bra.w	Obj18_ChgMotion
00009164                            ; ===========================================================================
00009164                            
00009164                            Obj18_Type03:
00009164 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009168 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000916A 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00009170 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00009172 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009178                            
00009178                            Obj18_03_NoMove:
00009178 4E75                       		rts	
0000917A                            ; ===========================================================================
0000917A                            
0000917A                            Obj18_03_Wait:
0000917A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000917E 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00009180 317C 0020 003A             		move.w	#32,$3A(a0)
00009186 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000918A 4E75                       		rts	
0000918C                            ; ===========================================================================
0000918C                            
0000918C                            Obj18_Type04:
0000918C 4A68 003A                  		tst.w	$3A(a0)
00009190 6700                       		beq.s	loc_8048
00009192 5368 003A                  		subq.w	#1,$3A(a0)
00009196 6600                       		bne.s	loc_8048
00009198 0828 0003 0022             		btst	#3,$22(a0)
0000919E 6700                       		beq.s	loc_8042
000091A0 08E9 0001 0022             		bset	#1,$22(a1)
000091A6 08A9 0003 0022             		bclr	#3,$22(a1)
000091AC 137C 0002 0024             		move.b	#2,$24(a1)
000091B2 08A8 0003 0022             		bclr	#3,$22(a0)
000091B8 4228 0025                  		clr.b	$25(a0)
000091BC 3368 0012 0012             		move.w	$12(a0),$12(a1)
000091C2                            
000091C2                            loc_8042:
000091C2 117C 0008 0024             		move.b	#8,$24(a0)
000091C8                            
000091C8                            loc_8048:
000091C8 2628 002C                  		move.l	$2C(a0),d3
000091CC 3028 0012                  		move.w	$12(a0),d0
000091D0 48C0                       		ext.l	d0
000091D2 E180                       		asl.l	#8,d0
000091D4 D680                       		add.l	d0,d3
000091D6 2143 002C                  		move.l	d3,$2C(a0)
000091DA 0668 0038 0012             		addi.w	#$38,$12(a0)
000091E0 3038 F72E                  		move.w	($FFFFF72E).w,d0
000091E4 0640 00E0                  		addi.w	#$E0,d0
000091E8 B068 002C                  		cmp.w	$2C(a0),d0
000091EC 6400                       		bcc.s	locret_8074
000091EE 117C 0006 0024             		move.b	#6,$24(a0)
000091F4                            
000091F4                            locret_8074:
000091F4 4E75                       		rts	
000091F6                            ; ===========================================================================
000091F6                            
000091F6                            Obj18_Type07:
000091F6 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000091FA 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000091FC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00009200 7000                       		moveq	#0,d0
00009202 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00009206 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009208 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000920C 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000920E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009214                            
00009214                            Obj18_07_NoMove:
00009214 4E75                       		rts	
00009216                            ; ===========================================================================
00009216                            
00009216                            Obj18_07_Wait:
00009216 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000921A 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000921C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00009220 4E75                       		rts	
00009222                            ; ===========================================================================
00009222                            
00009222                            Obj18_Type08:
00009222 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009226 3028 0034                  		move.w	$34(a0),d0
0000922A 0440 0200                  		subi.w	#$200,d0
0000922E B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009232 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00009234 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00009238                            
00009238                            Obj18_08_NoStop:
00009238 4E75                       		rts	
0000923A                            ; ===========================================================================
0000923A                            
0000923A                            Obj18_Type0A:
0000923A 3028 0034                  		move.w	$34(a0),d0
0000923E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009242 0401 0040                  		subi.b	#$40,d1
00009246 4881                       		ext.w	d1
00009248 E241                       		asr.w	#1,d1
0000924A D041                       		add.w	d1,d0
0000924C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009250                            
00009250                            Obj18_ChgMotion:
00009250 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00009256 4E75                       		rts	
00009258                            ; ===========================================================================
00009258                            
00009258                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00009258 3028 0032                  		move.w	$32(a0),d0
0000925C 0240 FF80                  		andi.w	#$FF80,d0
00009260 3238 F700                  		move.w	($FFFFF700).w,d1
00009264 0441 0080                  		subi.w	#$80,d1
00009268 0241 FF80                  		andi.w	#$FF80,d1
0000926C 9041                       		sub.w	d1,d0
0000926E 0C40 0280                  		cmpi.w	#$280,d0
00009272 6300                       		bls.s	Obj18_NoDel
00009274 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009278 6700                       		beq.s	Obj18_Delete		; if it's zero, don't remember object
0000927A 3440                       		movea.w	d0,a2	; load address into a2
0000927C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009280 6000                       		bra.s	Obj18_Delete	; and delete object
00009282                            
00009282                            Obj18_NoDel:
00009282 4E75                       		rts	
00009284                            ; ===========================================================================
00009284                            
00009284                            Obj18_Delete:				; XREF: Obj18_Index
00009284 6000 0000                  		bra.w	DeleteObject
00009288                            ; ===========================================================================
00009288                            ; ---------------------------------------------------------------------------
00009288                            ; Sprite mappings - unused
00009288                            ; ---------------------------------------------------------------------------
00009288                            Map_obj18x:
00009288                            	include "_maps\obj18x.asm"
00009288                            ; ---------------------------------------------------------------------------
00009288                            ; Sprite mappings - unused
00009288                            ; ---------------------------------------------------------------------------
00009288 0000                       		dc.w byte_80FE-Map_obj18x
0000928A 0000                       		dc.w byte_8109-Map_obj18x
0000928C 02                         byte_80FE:	dc.b 2
0000928D F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009292 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009297 0A                         byte_8109:	dc.b $A
00009298 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000929D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000092A2 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000092A7 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000092AC 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000092B1 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000092B6 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000092BB 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000092C0 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000092C5 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000092CA                            		even
000092CA                            		even
000092CA                            
000092CA                            ; ---------------------------------------------------------------------------
000092CA                            ; Sprite mappings - GHZ	platforms
000092CA                            ; ---------------------------------------------------------------------------
000092CA                            Map_obj18:
000092CA                            	include "_maps\obj18ghz.asm"
000092CA                            ; ---------------------------------------------------------------------------
000092CA                            ; Sprite mappings - GHZ	platforms
000092CA                            ; ---------------------------------------------------------------------------
000092CA 0000                       		dc.w byte_8140-Map_obj18
000092CC 0000                       		dc.w byte_8155-Map_obj18
000092CE 04                         byte_8140:	dc.b 4
000092CF F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000092D4 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000092D9 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000092DE F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000092E3 0A                         byte_8155:	dc.b $A
000092E4 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000092E9 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000092EE 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000092F3 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000092F8 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000092FD F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009302 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009307 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000930C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009311 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009316                            		even
00009316                            		even
00009316                            
00009316                            ; ---------------------------------------------------------------------------
00009316                            ; Sprite mappings - SYZ	platforms
00009316                            ; ---------------------------------------------------------------------------
00009316                            Map_obj18a:
00009316                            	include "_maps\obj18syz.asm"
00009316                            ; ---------------------------------------------------------------------------
00009316                            ; Sprite mappings - SYZ	platforms
00009316                            ; ---------------------------------------------------------------------------
00009316 0000                       		dc.w byte_818A-Map_obj18a
00009318 03                         byte_818A:	dc.b 3
00009319 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000931E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009323 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009328                            		even
00009328                            		even
00009328                            
00009328                            ; ---------------------------------------------------------------------------
00009328                            ; Sprite mappings - SLZ	platforms
00009328                            ; ---------------------------------------------------------------------------
00009328                            Map_obj18b:
00009328                            	include "_maps\obj18slz.asm"
00009328                            ; ---------------------------------------------------------------------------
00009328                            ; Sprite mappings - SLZ	platforms
00009328                            ; ---------------------------------------------------------------------------
00009328 0000                       		dc.w byte_819C-Map_obj18b
0000932A 02                         byte_819C:	dc.b 2
0000932B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009330 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009336 00                         		even
00009336 00                         		even
00009336                            
00009336                            ; ===========================================================================
00009336                            ; ---------------------------------------------------------------------------
00009336                            ; Object 19 - blank
00009336                            ; ---------------------------------------------------------------------------
00009336                            
00009336                            Obj19:					; XREF: Obj_Index
00009336 4E75                       		rts	
00009338                            ; ===========================================================================
00009338                            ; ---------------------------------------------------------------------------
00009338                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009338                            ; ---------------------------------------------------------------------------
00009338                            Map_obj48:
00009338                            	include "_maps\obj48.asm"
00009338                            ; ---------------------------------------------------------------------------
00009338                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009338                            ; ---------------------------------------------------------------------------
00009338 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000933C 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00009340 06                         byte_81B2:	dc.b 6
00009341 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009346 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000934B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009350 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009355 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000935A 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000935F 04                         byte_81D1:	dc.b 4
00009360 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009365 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000936A 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000936F 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009374 04                         byte_81E6:	dc.b 4
00009375 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000937A E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000937F 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009384 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009389 04                         byte_81FB:	dc.b 4
0000938A E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000938F E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009394 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009399 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000939E                            		even
0000939E                            		even
0000939E                            
0000939E                            ; ===========================================================================
0000939E                            ; ---------------------------------------------------------------------------
0000939E                            ; Object 1A - GHZ collapsing ledge
0000939E                            ; ---------------------------------------------------------------------------
0000939E                            
0000939E                            Obj1A:					; XREF: Obj_Index
0000939E 7000                       		moveq	#0,d0
000093A0 1028 0024                  		move.b	$24(a0),d0
000093A4 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000093A8 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000093AC                            ; ===========================================================================
000093AC 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000093B0 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000093B4 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000093B8                            ; ===========================================================================
000093B8                            
000093B8                            Obj1A_Main:				; XREF: Obj1A_Index
000093B8 5428 0024                  		addq.b	#2,$24(a0)
000093BC 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000093C4 317C 4000 0002             		move.w	#$4000,2(a0)
000093CA 0028 0004 0001             		ori.b	#4,1(a0)
000093D0 117C 0004 0018             		move.b	#4,$18(a0)
000093D6 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000093DC 117C 0064 0019             		move.b	#$64,$19(a0)
000093E2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000093E8 117C 0038 0016             		move.b	#$38,$16(a0)
000093EE 08E8 0004 0001             		bset	#4,1(a0)
000093F4                            
000093F4                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000093F4 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000093F8 6700                       		beq.s	Obj1A_Slope	; if not, branch
000093FA 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000093FE 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00009402 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009406                            
00009406                            Obj1A_Slope:
00009406 323C 0030                  		move.w	#$30,d1
0000940A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009410 6100 F22C                  		bsr.w	SlopeObject
00009414 6000 0000                  		bra.w	MarkObjGone
00009418                            ; ===========================================================================
00009418                            
00009418                            Obj1A_Touch:				; XREF: Obj1A_Index
00009418 4A28 0038                  		tst.b	$38(a0)
0000941C 6700 0000                  		beq.w	loc_847A
00009420 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009426 5328 0038                  		subq.b	#1,$38(a0)
0000942A                            
0000942A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000942A                            
0000942A                            
0000942A                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000942A 323C 0030                  		move.w	#$30,d1
0000942E 6100 F2AE                  		bsr.w	ExitPlatform
00009432 323C 0030                  		move.w	#$30,d1
00009436 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000943C 3428 0008                  		move.w	8(a0),d2
00009440 6100 0000                  		bsr.w	SlopeObject2
00009444 6000 0000                  		bra.w	MarkObjGone
00009448                            ; End of function Obj1A_WalkOff
00009448                            
00009448                            ; ===========================================================================
00009448                            
00009448                            Obj1A_Display:				; XREF: Obj1A_Index
00009448 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000944C 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000944E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009452 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009456 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000945A 6000 0000                  		bra.w	DisplaySprite
0000945E                            ; ===========================================================================
0000945E                            
0000945E                            loc_82D0:				; XREF: Obj1A_Display
0000945E 5328 0038                  		subq.b	#1,$38(a0)
00009462 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009466 43F8 D000                  		lea	($FFFFD000).w,a1
0000946A 0829 0003 0022             		btst	#3,$22(a1)
00009470 6700                       		beq.s	loc_82FC
00009472 4A28 0038                  		tst.b	$38(a0)
00009476 6600                       		bne.s	locret_8308
00009478 08A9 0003 0022             		bclr	#3,$22(a1)
0000947E 08A9 0005 0022             		bclr	#5,$22(a1)
00009484 137C 0001 001D             		move.b	#1,$1D(a1)
0000948A                            
0000948A                            loc_82FC:
0000948A 117C 0000 003A             		move.b	#0,$3A(a0)
00009490 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00009496                            
00009496                            locret_8308:
00009496 4E75                       		rts	
00009498                            ; ===========================================================================
00009498                            
00009498                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00009498 6100 0000                  		bsr.w	ObjectFall
0000949C 6100 0000                  		bsr.w	DisplaySprite
000094A0 4A28 0001                  		tst.b	1(a0)
000094A4 6A00                       		bpl.s	Obj1A_Delete
000094A6 4E75                       		rts	
000094A8                            ; ===========================================================================
000094A8                            
000094A8                            Obj1A_Delete:				; XREF: Obj1A_Index
000094A8 6100 0000                  		bsr.w	DeleteObject
000094AC 4E75                       		rts	
000094AE                            ; ===========================================================================
000094AE                            ; ---------------------------------------------------------------------------
000094AE                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000094AE                            ; ---------------------------------------------------------------------------
000094AE                            
000094AE                            Obj53:					; XREF: Obj_Index
000094AE 7000                       		moveq	#0,d0
000094B0 1028 0024                  		move.b	$24(a0),d0
000094B4 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000094B8 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000094BC                            ; ===========================================================================
000094BC 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000094C0 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000094C4 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000094C8                            ; ===========================================================================
000094C8                            
000094C8                            Obj53_Main:				; XREF: Obj53_Index
000094C8 5428 0024                  		addq.b	#2,$24(a0)
000094CC 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000094D4 317C 42B8 0002             		move.w	#$42B8,2(a0)
000094DA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000094E0 6600                       		bne.s	Obj53_NotSLZ
000094E2 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000094E8 5428 001A                  		addq.b	#2,$1A(a0)
000094EC                            
000094EC                            Obj53_NotSLZ:
000094EC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000094F2 6600                       		bne.s	Obj53_NotSBZ
000094F4 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000094FA                            
000094FA                            Obj53_NotSBZ:
000094FA 0028 0004 0001             		ori.b	#4,1(a0)
00009500 117C 0004 0018             		move.b	#4,$18(a0)
00009506 117C 0007 0038             		move.b	#7,$38(a0)
0000950C 117C 0044 0019             		move.b	#$44,$19(a0)
00009512                            
00009512                            Obj53_ChkTouch:				; XREF: Obj53_Index
00009512 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009516 6700                       		beq.s	Obj53_Solid	; if not, branch
00009518 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000951C 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00009520 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009524                            
00009524                            Obj53_Solid:
00009524 323C 0020                  		move.w	#$20,d1
00009528 6100 F040                  		bsr.w	PlatformObject
0000952C 4A28 0028                  		tst.b	$28(a0)
00009530 6A00                       		bpl.s	Obj53_MarkAsGone
00009532 0829 0003 0022             		btst	#3,$22(a1)
00009538 6700                       		beq.s	Obj53_MarkAsGone
0000953A 08A8 0000 0001             		bclr	#0,1(a0)
00009540 3029 0008                  		move.w	8(a1),d0
00009544 9068 0008                  		sub.w	8(a0),d0
00009548 6400                       		bcc.s	Obj53_MarkAsGone
0000954A 08E8 0000 0001             		bset	#0,1(a0)
00009550                            
00009550                            Obj53_MarkAsGone:
00009550 6000 0000                  		bra.w	MarkObjGone
00009554                            ; ===========================================================================
00009554                            
00009554                            Obj53_Touch:				; XREF: Obj53_Index
00009554 4A28 0038                  		tst.b	$38(a0)
00009558 6700 0000                  		beq.w	loc_8458
0000955C 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009562 5328 0038                  		subq.b	#1,$38(a0)
00009566                            
00009566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009566                            
00009566                            
00009566                            Obj53_WalkOff:				; XREF: Obj53_Index
00009566 323C 0020                  		move.w	#$20,d1
0000956A 6100 F172                  		bsr.w	ExitPlatform
0000956E 3428 0008                  		move.w	8(a0),d2
00009572 6100 F6E0                  		bsr.w	MvSonicOnPtfm2
00009576 6000 0000                  		bra.w	MarkObjGone
0000957A                            ; End of function Obj53_WalkOff
0000957A                            
0000957A                            ; ===========================================================================
0000957A                            
0000957A                            Obj53_Display:				; XREF: Obj53_Index
0000957A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000957E 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009580 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009584 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009588 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000958C 6000 0000                  		bra.w	DisplaySprite
00009590                            ; ===========================================================================
00009590                            
00009590                            loc_8402:
00009590 5328 0038                  		subq.b	#1,$38(a0)
00009594 6100 FFD0                  		bsr.w	Obj53_WalkOff
00009598 43F8 D000                  		lea	($FFFFD000).w,a1
0000959C 0829 0003 0022             		btst	#3,$22(a1)
000095A2 6700                       		beq.s	loc_842E
000095A4 4A28 0038                  		tst.b	$38(a0)
000095A8 6600                       		bne.s	locret_843A
000095AA 08A9 0003 0022             		bclr	#3,$22(a1)
000095B0 08A9 0005 0022             		bclr	#5,$22(a1)
000095B6 137C 0001 001D             		move.b	#1,$1D(a1)
000095BC                            
000095BC                            loc_842E:
000095BC 117C 0000 003A             		move.b	#0,$3A(a0)
000095C2 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
000095C8                            
000095C8                            locret_843A:
000095C8 4E75                       		rts	
000095CA                            ; ===========================================================================
000095CA                            
000095CA                            Obj53_TimeZero:				; XREF: Obj53_Display
000095CA 6100 0000                  		bsr.w	ObjectFall
000095CE 6100 0000                  		bsr.w	DisplaySprite
000095D2 4A28 0001                  		tst.b	1(a0)
000095D6 6A00                       		bpl.s	Obj53_Delete
000095D8 4E75                       		rts	
000095DA                            ; ===========================================================================
000095DA                            
000095DA                            Obj53_Delete:				; XREF: Obj53_Index
000095DA 6100 0000                  		bsr.w	DeleteObject
000095DE 4E75                       		rts	
000095E0                            ; ===========================================================================
000095E0                            
000095E0                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
000095E0 117C 0000 003A             		move.b	#0,$3A(a0)
000095E6                            
000095E6                            loc_8458:				; XREF: Obj53_Touch
000095E6 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000095EC 0828 0000 0028             		btst	#0,$28(a0)
000095F2 6700                       		beq.s	loc_846C
000095F4 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000095FA                            
000095FA                            loc_846C:
000095FA 7207                       		moveq	#7,d1
000095FC 5228 001A                  		addq.b	#1,$1A(a0)
00009600 6000                       		bra.s	loc_8486
00009602                            ; ===========================================================================
00009602                            
00009602                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00009602 117C 0000 003A             		move.b	#0,$3A(a0)
00009608                            
00009608                            loc_847A:				; XREF: Obj1A_Touch
00009608 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000960E 7218                       		moveq	#$18,d1
00009610 5428 001A                  		addq.b	#2,$1A(a0)
00009614                            
00009614                            loc_8486:				; XREF: Obj53_Collapse
00009614 7000                       		moveq	#0,d0
00009616 1028 001A                  		move.b	$1A(a0),d0
0000961A D040                       		add.w	d0,d0
0000961C 2668 0004                  		movea.l	4(a0),a3
00009620 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009624 524B                       		addq.w	#1,a3
00009626 08E8 0005 0001             		bset	#5,1(a0)
0000962C 1810                       		move.b	0(a0),d4
0000962E 1A28 0001                  		move.b	1(a0),d5
00009632 2248                       		movea.l	a0,a1
00009634 6000                       		bra.s	loc_84B2
00009636                            ; ===========================================================================
00009636                            
00009636                            loc_84AA:
00009636 6100 0000                  		bsr.w	SingleObjLoad
0000963A 6600                       		bne.s	loc_84F2
0000963C 5A4B                       		addq.w	#5,a3
0000963E                            
0000963E                            loc_84B2:
0000963E 137C 0006 0024             		move.b	#6,$24(a1)
00009644 1284                       		move.b	d4,0(a1)
00009646 234B 0004                  		move.l	a3,4(a1)
0000964A 1345 0001                  		move.b	d5,1(a1)
0000964E 3368 0008 0008             		move.w	8(a0),8(a1)
00009654 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000965A 3368 0002 0002             		move.w	2(a0),2(a1)
00009660 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009666 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000966C 135C 0038                  		move.b	(a4)+,$38(a1)
00009670 B3C8                       		cmpa.l	a0,a1
00009672 6400                       		bcc.s	loc_84EE
00009674 6100 0000                  		bsr.w	DisplaySprite2
00009678                            
00009678                            loc_84EE:
00009678 51C9 FFBC                  		dbf	d1,loc_84AA
0000967C                            
0000967C                            loc_84F2:
0000967C 6100 0000                  		bsr.w	DisplaySprite
00009680 303C 00B9                  		move.w	#$B9,d0
00009684 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play collapsing	sound
0000968A                            ; ===========================================================================
0000968A                            ; ---------------------------------------------------------------------------
0000968A                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000968A                            ; ---------------------------------------------------------------------------
0000968A 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000969A 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000096A4 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000096AC 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000096B4                            
000096B4                            ; ---------------------------------------------------------------------------
000096B4                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000096B4                            ; ---------------------------------------------------------------------------
000096B4                            
000096B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096B4                            
000096B4                            
000096B4                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000096B4 43F8 D000                  		lea	($FFFFD000).w,a1
000096B8 0829 0003 0022             		btst	#3,$22(a1)
000096BE 6700                       		beq.s	locret_856E
000096C0 3029 0008                  		move.w	8(a1),d0
000096C4 9068 0008                  		sub.w	8(a0),d0
000096C8 D041                       		add.w	d1,d0
000096CA E248                       		lsr.w	#1,d0
000096CC 0828 0000 0001             		btst	#0,1(a0)
000096D2 6700                       		beq.s	loc_854E
000096D4 4640                       		not.w	d0
000096D6 D041                       		add.w	d1,d0
000096D8                            
000096D8                            loc_854E:
000096D8 7200                       		moveq	#0,d1
000096DA 1232 0000                  		move.b	(a2,d0.w),d1
000096DE 3028 000C                  		move.w	$C(a0),d0
000096E2 9041                       		sub.w	d1,d0
000096E4 7200                       		moveq	#0,d1
000096E6 1229 0016                  		move.b	$16(a1),d1
000096EA 9041                       		sub.w	d1,d0
000096EC 3340 000C                  		move.w	d0,$C(a1)
000096F0 9468 0008                  		sub.w	8(a0),d2
000096F4 9569 0008                  		sub.w	d2,8(a1)
000096F8                            
000096F8                            locret_856E:
000096F8 4E75                       		rts	
000096FA                            ; End of function SlopeObject2
000096FA                            
000096FA                            ; ===========================================================================
000096FA                            ; ---------------------------------------------------------------------------
000096FA                            ; Collision data for GHZ collapsing ledge
000096FA                            ; ---------------------------------------------------------------------------
000096FA                            Obj1A_SlopeData:
000096FA                            		incbin	misc\ghzledge.bin
0000972A                            		even
0000972A                            
0000972A                            ; ---------------------------------------------------------------------------
0000972A                            ; Sprite mappings - GHZ	collapsing ledge
0000972A                            ; ---------------------------------------------------------------------------
0000972A                            Map_obj1A:
0000972A                            	include "_maps\obj1A.asm"
0000972A                            ; ---------------------------------------------------------------------------
0000972A                            ; Sprite mappings - GHZ	collapsing ledge
0000972A                            ; ---------------------------------------------------------------------------
0000972A 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000972E 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009732 10                         byte_85A8:	dc.b $10
00009733 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009738 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000973D E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009742 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009747 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000974C D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009751 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009756 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000975B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009760 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009765 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000976A 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000976F 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009774 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009779 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000977E 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009783 10                         byte_85F9:	dc.b $10
00009784 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009789 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000978E E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009793 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009798 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000979D D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000097A2 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000097A7 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000097AC F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000097B1 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000097B6 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000097BB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000097C0 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000097C5 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000097CA 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000097CF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000097D4 19                         byte_864A:	dc.b $19
000097D5 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000097DA C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000097DF D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000097E4 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000097E9 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000097EE E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000097F3 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000097F8 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000097FD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009802 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009807 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000980C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009811 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009816 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000981B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009820 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009825 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000982A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000982F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009834 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009839 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000983E 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009843 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009848 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000984D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009852 19                         byte_86C8:	dc.b $19
00009853 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009858 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000985D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009862 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009867 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000986C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009871 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009876 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000987B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009880 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009885 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000988A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000988F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009894 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009899 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000989E F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000098A3 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000098A8 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000098AD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000098B2 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000098B7 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000098BC 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000098C1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000098C6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000098CB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000098D0                            		even
000098D0                            		even
000098D0                            
000098D0                            ; ---------------------------------------------------------------------------
000098D0                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000098D0                            ; ---------------------------------------------------------------------------
000098D0                            Map_obj53:
000098D0                            	include "_maps\obj53.asm"
000098D0                            ; ---------------------------------------------------------------------------
000098D0                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000098D0                            ; ---------------------------------------------------------------------------
000098D0 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000098D4 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000098D8 04                         byte_874E:	dc.b 4
000098D9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000098DE 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000098E3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000098E8 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
000098ED 08                         byte_8763:	dc.b 8
000098EE F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000098F3 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000098F8 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000098FD F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00009902 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009907 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000990C 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00009911 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009916 04                         byte_878C:	dc.b 4
00009917 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000991C 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00009921 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009926 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000992B 08                         byte_87A1:	dc.b 8
0000992C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009931 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009936 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000993B F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009940 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009945 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000994A 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000994F 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009954                            		even
00009954                            		even
00009954                            
00009954                            ; ===========================================================================
00009954                            ; ---------------------------------------------------------------------------
00009954                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009954                            ; ---------------------------------------------------------------------------
00009954                            
00009954                            Obj1C:					; XREF: Obj_Index
00009954 7000                       		moveq	#0,d0
00009956 1028 0024                  		move.b	$24(a0),d0
0000995A 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000995E 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009962                            ; ===========================================================================
00009962 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009964 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009966                            ; ===========================================================================
00009966                            
00009966                            Obj1C_Main:				; XREF: Obj1C_Index
00009966 5428 0024                  		addq.b	#2,$24(a0)
0000996A 7000                       		moveq	#0,d0
0000996C 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009970 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009974 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009978 2159 0004                  		move.l	(a1)+,4(a0)
0000997C 3159 0002                  		move.w	(a1)+,2(a0)
00009980 0028 0004 0001             		ori.b	#4,1(a0)
00009986 1159 001A                  		move.b	(a1)+,$1A(a0)
0000998A 1159 0019                  		move.b	(a1)+,$19(a0)
0000998E 1159 0018                  		move.b	(a1)+,$18(a0)
00009992 1159 0020                  		move.b	(a1)+,$20(a0)
00009996                            
00009996                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00009996 3028 0008                  		move.w	8(a0),d0
0000999A 0240 FF80                  		andi.w	#$FF80,d0
0000999E 3238 F700                  		move.w	($FFFFF700).w,d1
000099A2 0441 0080                  		subi.w	#$80,d1
000099A6 0241 FF80                  		andi.w	#$FF80,d1
000099AA 9041                       		sub.w	d1,d0
000099AC 0C40 0280                  		cmpi.w	#$280,d0
000099B0 6300 0000                  		bls.w	DisplaySprite
000099B4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000099B8 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
000099BC 3440                       		movea.w	d0,a2	; load address into a2
000099BE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000099C2 6000 0000                  		bra.w	DeleteObject	; and delete object
000099C6                            ; ===========================================================================
000099C6                            ; ---------------------------------------------------------------------------
000099C6                            ; Variables for	object $1C are stored in an array
000099C6                            ; ---------------------------------------------------------------------------
000099C6 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000099CA 44D8                       		dc.w $44D8		; VRAM setting
000099CC 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000099D0 0000 0000                  		dc.l Map_obj1C
000099D4 44D8                       		dc.w $44D8
000099D6 0008 0200                  		dc.b 0,	8, 2, 0
000099DA 0000 0000                  		dc.l Map_obj1C
000099DE 44D8                       		dc.w $44D8
000099E0 0008 0200                  		dc.b 0,	8, 2, 0
000099E4 0000 8A5E                  		dc.l Map_obj11
000099E8 438E                       		dc.w $438E
000099EA 0110 0100                  		dc.b 1,	$10, 1,	0
000099EE 0000 0000                  		dc.l Map_obj1C
000099F2 4000                       		dc.w $4000
000099F4 0110 0000                  		dc.b 1,	$10, 0, 0
000099F8 0000 0000                  		dc.l Map_obj1C
000099FC 4000                       		dc.w $4000
000099FE 0210 0000                  		dc.b 2,	$10, 0, 0
00009A02 0000 0000                  		dc.l Map_obj1C
00009A06 4000                       		dc.w $4000
00009A08 0310 0000                  		dc.b 3,	$10, 0, 0
00009A0C 0000 0000                  		dc.l Map_obj1C
00009A10 4000                       		dc.w $4000
00009A12 0460 0700                  		dc.b 4,	$60, 7, 0
00009A16                            ; ---------------------------------------------------------------------------
00009A16                            ; Sprite mappings - SLZ	lava thrower
00009A16                            ; ---------------------------------------------------------------------------
00009A16                            Map_obj1C:
00009A16                            	include "_maps\obj1C.asm"
00009A16                            Mappings:
00009A16 0000                       Mappings_0: 	dc.w Mappings_A-Mappings
00009A18 0000                       Mappings_2: 	dc.w Mappings_10-Mappings
00009A1A 0000                       Mappings_4: 	dc.w Mappings_16-Mappings
00009A1C 0000                       Mappings_6: 	dc.w Mappings_1C-Mappings
00009A1E 0000                       Mappings_8: 	dc.w Mappings_22-Mappings
00009A20 01                         Mappings_A: 	dc.b $1
00009A21 F007 0000 F8               	dc.b $F0, $7, $0, $0, $F8
00009A26 01                         Mappings_10: 	dc.b $1
00009A27 F00F 0001 F0               	dc.b $F0, $F, $0, $1, $F0
00009A2C 01                         Mappings_16: 	dc.b $1
00009A2D F00F 0011 F0               	dc.b $F0, $F, $0, $11, $F0
00009A32 01                         Mappings_1C: 	dc.b $1
00009A33 F00F 0042 F0               	dc.b $F0, $F, $0, $42, $F0
00009A38 18                         Mappings_22: 	dc.b $18
00009A39 E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
00009A3E E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
00009A43 E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
00009A48 E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
00009A4D E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
00009A52 E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
00009A57 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009A5C 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009A61 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009A66 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009A6B 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009A70 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009A75 200F 01C6 A0               	dc.b $20, $F, $1, $C6, $A0
00009A7A 200F 01D6 C0               	dc.b $20, $F, $1, $D6, $C0
00009A7F 200F 09D6 E0               	dc.b $20, $F, $9, $D6, $E0
00009A84 200F 01E6 00               	dc.b $20, $F, $1, $E6, $0
00009A89 200F 09C6 20               	dc.b $20, $F, $9, $C6, $20
00009A8E 200F 01F6 40               	dc.b $20, $F, $1, $F6, $40
00009A93 C00F 01D6 C0               	dc.b $C0, $F, $1, $D6, $C0
00009A98 C00F 09D6 E0               	dc.b $C0, $F, $9, $D6, $E0
00009A9D C00F 09CA 00               	dc.b $C0, $F, $9, $CA, $0
00009AA2 C00F 01E6 20               	dc.b $C0, $F, $1, $E6, $20
00009AA7 D00D 01C6 A1               	dc.b $D0, $D, $1, $C6, $A1
00009AAC D00D 01F6 40               	dc.b $D0, $D, $1, $F6, $40
00009AB2 00                         	even
00009AB2 00                         	even
00009AB2                            
00009AB2                            ; ===========================================================================
00009AB2                            ; ---------------------------------------------------------------------------
00009AB2                            ; Object 03 - LZ Air Pockets
00009AB2                            ; ---------------------------------------------------------------------------
00009AB2                            
00009AB2                            Obj03:					; XREF: Obj_Index
00009AB2 7000                       		moveq	#0,d0
00009AB4 1028 0024                  		move.b	$24(a0),d0
00009AB8 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
00009ABC 4EFB 1000                  		jmp	Obj03_Index(pc,d1.w)
00009AC0                            ; ===========================================================================
00009AC0 0000                       Obj03_Index:	dc.w Obj03_Main-Obj03_Index
00009AC2 0000                       		dc.w Obj03_ChkDel-Obj03_Index
00009AC4 0000                       		dc.w Obj03_Child-Obj03_Index
00009AC6 0000                       		dc.w Obj03_Surface-Obj03_Index
00009AC8                            ; ===========================================================================
00009AC8                            
00009AC8                            Obj03_Main:				; XREF: Obj03_Index
00009AC8 5428 0024                  		addq.b	#2,$24(a0)
00009ACC 217C 0000 0000 0004        		move.l	#Map_Obj03,4(a0)
00009AD4 317C 4000 0002             		move.w	#$4000,2(a0)
00009ADA 0028 0004 0001             		ori.b	#4,1(a0)
00009AE0 117C 0060 0019             		move.b	#$60,$19(a0)
00009AE6 117C 0007 0018             		move.b	#7,$18(a0)
00009AEC 117C 0000 001A             		move.b	#0,$1A(a0)
00009AF2 3028 0008                  		move.w	8(a0),d0
00009AF6 31C0 F610                  		move.w	d0,(v_pocketx).w
00009AFA 3028 000C                  		move.w	$C(a0),d0
00009AFE 3140 0030                  		move.w	d0,$30(a0)
00009B02 0640 0040                  		addi.w	#$40,d0
00009B06 31C0 F60E                  		move.w	d0,(v_pocketbottom).w
00009B0A 0468 0020 000C             		subi.w	#$20,$C(a0)
00009B10 4EB9 0000 0000             		jsr	(SingleObjLoad).l
00009B16 6600 0000                  		bne.w	Obj03_ChkDel
00009B1A 3149 003C                  		move.w	a1,$3C(a0)
00009B1E 12BC 0003                  		move.b	#3,(a1)
00009B22 137C 0004 0024             		move.b	#4,$24(a1)
00009B28 237C 0000 0000 0004        		move.l	#Map_Obj03,4(a1)
00009B30 337C 4000 0002             		move.w	#$4000,2(a1)
00009B36 0029 0004 0001             		ori.b	#4,1(a1)
00009B3C 137C 0060 0019             		move.b	#$60,$19(a1)
00009B42 137C 0007 0018             		move.b	#7,$18(a1)
00009B48 137C 0001 001A             		move.b	#1,$1A(a1)
00009B4E 3368 0008 0008             		move.w	8(a0),8(a1)
00009B54 3368 0030 000C             		move.w	$30(a0),$C(a1)
00009B5A 0669 0020 000C             		addi.w	#$20,$C(a1)
00009B60 4EB9 0000 0000             		jsr	(SingleObjLoad).l
00009B66 6600                       		bne.s	Obj03_ChkDel
00009B68 3149 003E                  		move.w	a1,$3E(a0)
00009B6C 12BC 0003                  		move.b	#3,(a1)
00009B70 137C 0006 0024             		move.b	#6,$24(a1)
00009B76 237C 0000 0000 0004        		move.l	#Map_obj03,4(a1)
00009B7E 337C C300 0002             		move.w	#$C300,2(a1)
00009B84 0029 0004 0001             		ori.b	#4,1(a1)
00009B8A 137C 0060 0019             		move.b	#$60,$19(a1)
00009B90 137C 0000 0018             		move.b	#0,$18(a1)
00009B96 137C 0002 001A             		move.b	#2,$1A(a1)
00009B9C 3368 0008 0008             		move.w	8(a0),8(a1)
00009BA2 3368 0008 0030             		move.w	8(a0),$30(a1)
00009BA8 3368 0030 000C             		move.w	$30(a0),$C(a1)
00009BAE 0669 0040 000C             		addi.w	#$40,$C(a1)
00009BB4                            
00009BB4                            Obj03_ChkDel:				; XREF: Obj03_Index
00009BB4 43F8 D000                  		lea	($FFFFD000).w,a1
00009BB8 3029 0008                  		move.w	8(a1),d0
00009BBC 9068 0008                  		sub.w	8(a0),d0
00009BC0 0640 0060                  		addi.w	#$60,d0
00009BC4 6B00                       		bmi.s	@outpocket
00009BC6 0C40 00C0                  		cmpi.w	#$C0,d0
00009BCA 6400                       		bcc.s	@outpocket
00009BCC 3028 0030                  		move.w	$30(a0),d0
00009BD0 9069 000C                  		sub.w	$C(a1),d0
00009BD4 0640 0040                  		addi.w	#$40,d0
00009BD8 6B00                       		bmi.s	@outpocket
00009BDA 0C40 0080                  		cmpi.w	#$80,d0
00009BDE 6400                       		bcc.s	@outpocket
00009BE0 50F8 F612                  		st		(f_insidepocket).w
00009BE4 6000                       		bra.s	@chkgone
00009BE6                            
00009BE6                            	@outpocket:
00009BE6 51F8 F612                  		sf		(f_insidepocket).w
00009BEA                            
00009BEA                            	@chkgone:
00009BEA 3028 0008                  		move.w	8(a0),d0
00009BEE 0240 FF80                  		andi.w	#$FF80,d0
00009BF2 3238 F700                  		move.w	($FFFFF700).w,d1
00009BF6 0441 0080                  		subi.w	#$80,d1
00009BFA 0241 FF80                  		andi.w	#$FF80,d1
00009BFE 9041                       		sub.w	d1,d0
00009C00 0C40 0280                  		cmpi.w	#$280,d0
00009C04 6300 0000                  		bls.w	DisplaySprite
00009C08 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009C0C 6700                       		beq.s	@delete		; if it's zero, don't remember object
00009C0E 3440                       		movea.w	d0,a2	; load address into a2
00009C10 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009C14                            
00009C14                            	@delete:
00009C14 3268 003C                  		move.w	$3C(a0),a1
00009C18 6100 0000                  		bsr.w	DeleteObject2
00009C1C 3268 003E                  		move.w	$3E(a0),a1
00009C20 6100 0000                  		bsr.w	DeleteObject2
00009C24 6000 0000                  		bra.w	DeleteObject	; and delete object
00009C28                            
00009C28                            Obj03_Surface:
00009C28 3228 0030                  		move.w	$30(a0),d1
00009C2C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00009C32 6600                       		bne.s	@flash	; if not, branch
00009C34 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00009C3A 6700                       		beq.s	@flash
00009C3C 0641 0020                  		addi.w	#$20,d1
00009C40                            
00009C40                            	@flash:
00009C40 3141 0008                  		move.w	d1,8(a0)
00009C44 4A28 0032                  		tst.b	$32(a0)
00009C48 6600                       		bne.s	@animate
00009C4A 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00009C50 6700                       		beq.s	@animate2	; if not, branch
00009C52 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00009C56 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00009C5C 6000                       		bra.s	Obj03_Child
00009C5E                            ; ===========================================================================
00009C5E                            
00009C5E                            	@animate:
00009C5E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00009C62 6600                       		bne.s	Obj03_Child	; if yes, branch
00009C64 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00009C6A 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00009C6E                            
00009C6E                            	@animate2:
00009C6E 5328 001E                  		subq.b	#1,$1E(a0)
00009C72 6A00                       		bpl.s	Obj03_Child
00009C74 117C 0007 001E             		move.b	#7,$1E(a0)
00009C7A 5228 001A                  		addq.b	#1,$1A(a0)
00009C7E 0C28 0005 001A             		cmpi.b	#5,$1A(a0)
00009C84 6500                       		bcs.s	Obj03_Child
00009C86 117C 0002 001A             		move.b	#2,$1A(a0)
00009C8C                            
00009C8C                            Obj03_Child:
00009C8C 6000 0000                  		bra.w	DisplaySprite
00009C90                            
00009C90                            ; ---------------------------------------------------------------------------
00009C90                            ; Sprite mappings - LZ Air Pockets
00009C90                            ; ---------------------------------------------------------------------------
00009C90                            Map_Obj03:
00009C90                            	include "_maps\obj03.asm"
00009C90                            obj03map:
00009C90 0000                       obj03map_0: 	dc.w obj03map_10-obj03map
00009C92 0000                       obj03map_2: 	dc.w obj03map_4D-obj03map
00009C94 0000                       obj03map_4: 	dc.w obj03map_8A-obj03map
00009C96 0000                       obj03map_6: 	dc.w obj03map_9A-obj03map
00009C98 0000                       obj03map_8: 	dc.w obj03map_AA-obj03map
00009C9A 0000                       obj03map_A: 	dc.w obj03map_BA-obj03map
00009C9C 0000                       obj03map_C: 	dc.w obj03map_D9-obj03map
00009C9E 0000                       obj03map_E: 	dc.w obj03map_F8-obj03map
00009CA0 0C                         obj03map_10: 	dc.b $C
00009CA1 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009CA6 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009CAB 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009CB0 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009CB5 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009CBA 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009CBF E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
00009CC4 E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
00009CC9 E00F 09CA 00               	dc.b $E0, $F, $9, $CA, $0
00009CCE E00F 01E6 20               	dc.b $E0, $F, $1, $E6, $20
00009CD3 F00D 01C6 A1               	dc.b $F0, $D, $1, $C6, $A1
00009CD8 F00D 01F6 40               	dc.b $F0, $D, $1, $F6, $40
00009CDD 0C                         obj03map_4D: 	dc.b $C
00009CDE E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
00009CE3 E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
00009CE8 E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
00009CED E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
00009CF2 E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
00009CF7 E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
00009CFC 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009D01 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009D06 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009D0B 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009D10 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009D15 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009D1A 03                         obj03map_8A: 	dc.b $3
00009D1B F80D 0000 A0               	dc.b $F8, $D, $0, $0, $A0
00009D20 F80D 0000 20               	dc.b $F8, $D, $0, $0, $20
00009D25 F80D 0000 E0               	dc.b $F8, $D, $0, $0, $E0
00009D2A 03                         obj03map_9A: 	dc.b $3
00009D2B F80D 0008 E0               	dc.b $F8, $D, $0, $8, $E0
00009D30 F80D 0008 A0               	dc.b $F8, $D, $0, $8, $A0
00009D35 F80D 0008 20               	dc.b $F8, $D, $0, $8, $20
00009D3A 03                         obj03map_AA: 	dc.b $3
00009D3B F80D 0800 20               	dc.b $F8, $D, $8, $0, $20
00009D40 F80D 0800 A0               	dc.b $F8, $D, $8, $0, $A0
00009D45 F80D 0800 E0               	dc.b $F8, $D, $8, $0, $E0
00009D4A 06                         obj03map_BA: 	dc.b $6
00009D4B F80D 0000 A0               	dc.b $F8, $D, $0, $0, $A0
00009D50 F80D 0000 20               	dc.b $F8, $D, $0, $0, $20
00009D55 F80D 0000 E0               	dc.b $F8, $D, $0, $0, $E0
00009D5A F80D 0000 C0               	dc.b $F8, $D, $0, $0, $C0
00009D5F F80D 0000 00               	dc.b $F8, $D, $0, $0, $0
00009D64 F80D 0000 40               	dc.b $F8, $D, $0, $0, $40
00009D69 06                         obj03map_D9: 	dc.b $6
00009D6A F80D 0008 E0               	dc.b $F8, $D, $0, $8, $E0
00009D6F F80D 0008 A0               	dc.b $F8, $D, $0, $8, $A0
00009D74 F80D 0008 20               	dc.b $F8, $D, $0, $8, $20
00009D79 F80D 0008 C0               	dc.b $F8, $D, $0, $8, $C0
00009D7E F80D 0008 00               	dc.b $F8, $D, $0, $8, $0
00009D83 F80D 0008 40               	dc.b $F8, $D, $0, $8, $40
00009D88 06                         obj03map_F8: 	dc.b $6
00009D89 F80D 0800 40               	dc.b $F8, $D, $8, $0, $40
00009D8E F80D 0800 C0               	dc.b $F8, $D, $8, $0, $C0
00009D93 F80D 0800 00               	dc.b $F8, $D, $8, $0, $0
00009D98 F80D 0800 20               	dc.b $F8, $D, $8, $0, $20
00009D9D F80D 0800 E0               	dc.b $F8, $D, $8, $0, $E0
00009DA2 F80D 0800 A0               	dc.b $F8, $D, $8, $0, $A0
00009DA8 00                         	even
00009DA8 00                         	even
00009DA8                            
00009DA8                            ; ===========================================================================
00009DA8                            ; ---------------------------------------------------------------------------
00009DA8                            ; Object 1D - switch that activates when Sonic touches it
00009DA8                            ; (this	is not used anywhere in	the game)
00009DA8                            ; ---------------------------------------------------------------------------
00009DA8                            
00009DA8                            Obj1D:					; XREF: Obj_Index
00009DA8 7000                       		moveq	#0,d0
00009DAA 1028 0024                  		move.b	$24(a0),d0
00009DAE 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009DB2 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009DB6                            ; ===========================================================================
00009DB6 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009DB8 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009DBA 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009DBC                            ; ===========================================================================
00009DBC                            
00009DBC                            Obj1D_Main:				; XREF: Obj1D_Index
00009DBC 5428 0024                  		addq.b	#2,$24(a0)
00009DC0 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009DC8 317C 4000 0002             		move.w	#$4000,2(a0)
00009DCE 117C 0004 0001             		move.b	#4,1(a0)
00009DD4 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009DDA 117C 0010 0019             		move.b	#$10,$19(a0)
00009DE0 117C 0005 0018             		move.b	#5,$18(a0)
00009DE6                            
00009DE6                            Obj1D_Action:				; XREF: Obj1D_Index
00009DE6 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009DEC 323C 0010                  		move.w	#$10,d1
00009DF0 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009DF4 6700                       		beq.s	Obj1D_ChkDel
00009DF6 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009DFA 7001                       		moveq	#1,d0
00009DFC 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009E00                            
00009E00                            Obj1D_ChkDel:
00009E00 6100 0000                  		bsr.w	DisplaySprite
00009E04 3028 0008                  		move.w	8(a0),d0
00009E08 0240 FF80                  		andi.w	#$FF80,d0
00009E0C 3238 F700                  		move.w	($FFFFF700).w,d1
00009E10 0441 0080                  		subi.w	#$80,d1
00009E14 0241 FF80                  		andi.w	#$FF80,d1
00009E18 9041                       		sub.w	d1,d0
00009E1A 0C40 0280                  		cmpi.w	#$280,d0
00009E1E 6300                       		bls.s	Obj1D_NoDel
00009E20 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009E24 6700                       		beq.s	Obj1D_Delete		; if it's zero, don't remember object
00009E26 3440                       		movea.w	d0,a2	; load address into a2
00009E28 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009E2C 6000                       		bra.s	Obj1D_Delete	; and delete object
00009E2E                            
00009E2E                            Obj1D_NoDel:
00009E2E 4E75                       		rts	
00009E30                            ; ===========================================================================
00009E30                            
00009E30                            Obj1D_Delete:				; XREF: Obj1D_Index
00009E30 6100 0000                  		bsr.w	DeleteObject
00009E34 4E75                       		rts	
00009E36                            ; ---------------------------------------------------------------------------
00009E36                            ; Subroutine to	check if Sonic touches the object
00009E36                            ; ---------------------------------------------------------------------------
00009E36                            
00009E36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E36                            
00009E36                            
00009E36                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009E36 43F8 D000                  		lea	($FFFFD000).w,a1
00009E3A 3029 0008                  		move.w	8(a1),d0
00009E3E 9068 0008                  		sub.w	8(a0),d0
00009E42 D041                       		add.w	d1,d0
00009E44 6B00                       		bmi.s	loc_8918
00009E46 D241                       		add.w	d1,d1
00009E48 B041                       		cmp.w	d1,d0
00009E4A 6400                       		bcc.s	loc_8918
00009E4C 3429 000C                  		move.w	$C(a1),d2
00009E50 1229 0016                  		move.b	$16(a1),d1
00009E54 4881                       		ext.w	d1
00009E56 D242                       		add.w	d2,d1
00009E58 3028 000C                  		move.w	$C(a0),d0
00009E5C 0440 0010                  		subi.w	#$10,d0
00009E60 9041                       		sub.w	d1,d0
00009E62 6200                       		bhi.s	loc_8918
00009E64 0C40 FFF0                  		cmpi.w	#-$10,d0
00009E68 6500                       		bcs.s	loc_8918
00009E6A 70FF                       		moveq	#-1,d0
00009E6C 4E75                       		rts	
00009E6E                            ; ===========================================================================
00009E6E                            
00009E6E                            loc_8918:
00009E6E 7000                       		moveq	#0,d0
00009E70 4E75                       		rts	
00009E72                            ; End of function Obj1D_ChkTouch
00009E72                            
00009E72                            ; ===========================================================================
00009E72                            ; ---------------------------------------------------------------------------
00009E72                            ; Sprite mappings - object 1D
00009E72                            ; ---------------------------------------------------------------------------
00009E72                            Map_obj1D:
00009E72                            	include "_maps\obj1D.asm"
00009E72                            ; ---------------------------------------------------------------------------
00009E72                            ; Sprite mappings - object 1D
00009E72                            ; ---------------------------------------------------------------------------
00009E72 0000                       		dc.w byte_891E-Map_obj1D
00009E74 04                         byte_891E:	dc.b 4
00009E75 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009E7A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009E7F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009E84 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009E8A 00                         		even
00009E8A 00                         		even
00009E8A                            
00009E8A                            ; ===========================================================================
00009E8A                            ; ---------------------------------------------------------------------------
00009E8A                            ; Object 2A - doors (SBZ)
00009E8A                            ; ---------------------------------------------------------------------------
00009E8A                            
00009E8A                            Obj2A:					; XREF: Obj_Index
00009E8A 7000                       		moveq	#0,d0
00009E8C 1028 0024                  		move.b	$24(a0),d0
00009E90 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009E94 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009E98                            ; ===========================================================================
00009E98 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009E9A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009E9C                            ; ===========================================================================
00009E9C                            
00009E9C                            Obj2A_Main:				; XREF: Obj2A_Index
00009E9C 5428 0024                  		addq.b	#2,$24(a0)
00009EA0 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009EA8 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009EAE 0028 0004 0001             		ori.b	#4,1(a0)
00009EB4 117C 0008 0019             		move.b	#8,$19(a0)
00009EBA 117C 0004 0018             		move.b	#4,$18(a0)
00009EC0                            
00009EC0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009EC0 323C 0040                  		move.w	#$40,d1
00009EC4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009EC8 3038 D008                  		move.w	($FFFFD008).w,d0
00009ECC D041                       		add.w	d1,d0
00009ECE B068 0008                  		cmp.w	8(a0),d0
00009ED2 6500                       		bcs.s	Obj2A_Animate
00009ED4 9041                       		sub.w	d1,d0
00009ED6 9041                       		sub.w	d1,d0
00009ED8 B068 0008                  		cmp.w	8(a0),d0
00009EDC 6400                       		bcc.s	Obj2A_Animate
00009EDE D041                       		add.w	d1,d0
00009EE0 B068 0008                  		cmp.w	8(a0),d0
00009EE4 6400                       		bcc.s	loc_899A
00009EE6 0828 0000 0022             		btst	#0,$22(a0)
00009EEC 6600                       		bne.s	Obj2A_Animate
00009EEE 6000                       		bra.s	Obj2A_Open
00009EF0                            ; ===========================================================================
00009EF0                            
00009EF0                            loc_899A:				; XREF: Obj2A_OpenShut
00009EF0 0828 0000 0022             		btst	#0,$22(a0)
00009EF6 6700                       		beq.s	Obj2A_Animate
00009EF8                            
00009EF8                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009EF8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009EFE                            
00009EFE                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009EFE 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009F04 6100 0000                  		bsr.w	AnimateSprite
00009F08 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009F0C 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009F0E 323C 0011                  		move.w	#$11,d1
00009F12 343C 0020                  		move.w	#$20,d2
00009F16 3602                       		move.w	d2,d3
00009F18 5243                       		addq.w	#1,d3
00009F1A 3828 0008                  		move.w	8(a0),d4
00009F1E 6100 0000                  		bsr.w	SolidObject
00009F22                            
00009F22                            Obj2A_MarkAsUsed:
00009F22 6000 0000                  		bra.w	MarkObjGone
00009F26                            ; ===========================================================================
00009F26                            Ani_obj2A:
00009F26                            	include "_anim\obj2A.asm"
00009F26                            ; ---------------------------------------------------------------------------
00009F26                            ; Animation script - doors (SBZ)
00009F26                            ; ---------------------------------------------------------------------------
00009F26 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009F28 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009F2A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009F36 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009F42                            		even
00009F42                            		even
00009F42                            
00009F42                            ; ---------------------------------------------------------------------------
00009F42                            ; Sprite mappings - doors (SBZ)
00009F42                            ; ---------------------------------------------------------------------------
00009F42                            Map_obj2A:
00009F42                            	include "_maps\obj2A.asm"
00009F42                            ; ---------------------------------------------------------------------------
00009F42                            ; Sprite mappings - doors (SBZ)
00009F42                            ; ---------------------------------------------------------------------------
00009F42 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009F46 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009F4A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009F4E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009F52 0000                       		dc.w byte_8A56-Map_obj2A
00009F54 02                         byte_89FE:	dc.b 2
00009F55 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009F5A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009F5F 02                         byte_8A09:	dc.b 2
00009F60 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009F65 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009F6A 02                         byte_8A14:	dc.b 2
00009F6B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009F70 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009F75 02                         byte_8A1F:	dc.b 2
00009F76 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009F7B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009F80 02                         byte_8A2A:	dc.b 2
00009F81 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009F86 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009F8B 02                         byte_8A35:	dc.b 2
00009F8C CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009F91 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009F96 02                         byte_8A40:	dc.b 2
00009F97 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009F9C 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009FA1 02                         byte_8A4B:	dc.b 2
00009FA2 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009FA7 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009FAC 02                         byte_8A56:	dc.b 2
00009FAD C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009FB2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009FB8 00                         		even
00009FB8 00                         		even
00009FB8                            
00009FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009FB8                            
00009FB8                            
00009FB8                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009FB8 6100 0000                  		bsr.w	Obj44_SolidWall2
00009FBC 6700                       		beq.s	loc_8AA8
00009FBE 6B00 0000                  		bmi.w	loc_8AC4
00009FC2 4A40                       		tst.w	d0
00009FC4 6700 0000                  		beq.w	loc_8A92
00009FC8 6B00                       		bmi.s	loc_8A7C
00009FCA 4A69 0010                  		tst.w	$10(a1)
00009FCE 6B00                       		bmi.s	loc_8A92
00009FD0 6000                       		bra.s	loc_8A82
00009FD2                            ; ===========================================================================
00009FD2                            
00009FD2                            loc_8A7C:
00009FD2 4A69 0010                  		tst.w	$10(a1)
00009FD6 6A00                       		bpl.s	loc_8A92
00009FD8                            
00009FD8                            loc_8A82:
00009FD8 9169 0008                  		sub.w	d0,8(a1)
00009FDC 337C 0000 0020             		move.w	#0,$20(a1)
00009FE2 337C 0000 0010             		move.w	#0,$10(a1)
00009FE8                            
00009FE8                            loc_8A92:
00009FE8 0829 0001 0022             		btst	#1,$22(a1)
00009FEE 6600                       		bne.s	loc_8AB6
00009FF0 08E9 0005 0022             		bset	#5,$22(a1)
00009FF6 08E8 0005 0022             		bset	#5,$22(a0)
00009FFC 4E75                       		rts	
00009FFE                            ; ===========================================================================
00009FFE                            
00009FFE                            loc_8AA8:
00009FFE 0828 0005 0022             		btst	#5,$22(a0)
0000A004 6700                       		beq.s	locret_8AC2
0000A006 337C 0001 001C             		move.w	#1,$1C(a1)
0000A00C                            
0000A00C                            loc_8AB6:
0000A00C 08A8 0005 0022             		bclr	#5,$22(a0)
0000A012 08A9 0005 0022             		bclr	#5,$22(a1)
0000A018                            
0000A018                            locret_8AC2:
0000A018 4E75                       		rts	
0000A01A                            ; ===========================================================================
0000A01A                            
0000A01A                            loc_8AC4:
0000A01A 4A69 0012                  		tst.w	$12(a1)
0000A01E 6A00                       		bpl.s	locret_8AD8
0000A020 4A43                       		tst.w	d3
0000A022 6A00                       		bpl.s	locret_8AD8
0000A024 9769 000C                  		sub.w	d3,$C(a1)
0000A028 337C 0000 0012             		move.w	#0,$12(a1)
0000A02E                            
0000A02E                            locret_8AD8:
0000A02E 4E75                       		rts	
0000A030                            ; End of function Obj44_SolidWall
0000A030                            
0000A030                            
0000A030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A030                            
0000A030                            
0000A030                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000A030 43F8 D000                  		lea	($FFFFD000).w,a1
0000A034 3029 0008                  		move.w	8(a1),d0
0000A038 9068 0008                  		sub.w	8(a0),d0
0000A03C D041                       		add.w	d1,d0
0000A03E 6B00                       		bmi.s	loc_8B48
0000A040 3601                       		move.w	d1,d3
0000A042 D643                       		add.w	d3,d3
0000A044 B043                       		cmp.w	d3,d0
0000A046 6200                       		bhi.s	loc_8B48
0000A048 1629 0016                  		move.b	$16(a1),d3
0000A04C 4883                       		ext.w	d3
0000A04E D443                       		add.w	d3,d2
0000A050 3629 000C                  		move.w	$C(a1),d3
0000A054 9668 000C                  		sub.w	$C(a0),d3
0000A058 D642                       		add.w	d2,d3
0000A05A 6B00                       		bmi.s	loc_8B48
0000A05C 3802                       		move.w	d2,d4
0000A05E D844                       		add.w	d4,d4
0000A060 B644                       		cmp.w	d4,d3
0000A062 6400                       		bcc.s	loc_8B48
0000A064 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A068 6B00                       		bmi.s	loc_8B48
0000A06A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A070 6400                       		bcc.s	loc_8B48
0000A072 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A076 6600                       		bne.s	loc_8B48
0000A078 3A00                       		move.w	d0,d5
0000A07A B240                       		cmp.w	d0,d1
0000A07C 6400                       		bcc.s	loc_8B30
0000A07E D241                       		add.w	d1,d1
0000A080 9041                       		sub.w	d1,d0
0000A082 3A00                       		move.w	d0,d5
0000A084 4445                       		neg.w	d5
0000A086                            
0000A086                            loc_8B30:
0000A086 3203                       		move.w	d3,d1
0000A088 B443                       		cmp.w	d3,d2
0000A08A 6400                       		bcc.s	loc_8B3C
0000A08C 9644                       		sub.w	d4,d3
0000A08E 3203                       		move.w	d3,d1
0000A090 4441                       		neg.w	d1
0000A092                            
0000A092                            loc_8B3C:
0000A092 BA41                       		cmp.w	d1,d5
0000A094 6200                       		bhi.s	loc_8B44
0000A096 7801                       		moveq	#1,d4
0000A098 4E75                       		rts	
0000A09A                            ; ===========================================================================
0000A09A                            
0000A09A                            loc_8B44:
0000A09A 78FF                       		moveq	#-1,d4
0000A09C 4E75                       		rts	
0000A09E                            ; ===========================================================================
0000A09E                            
0000A09E                            loc_8B48:
0000A09E 7800                       		moveq	#0,d4
0000A0A0 4E75                       		rts	
0000A0A2                            ; End of function Obj44_SolidWall2
0000A0A2                            
0000A0A2                            ; ===========================================================================
0000A0A2                            ; ---------------------------------------------------------------------------
0000A0A2                            ; Object 1E - Ball Hog enemy (SBZ)
0000A0A2                            ; ---------------------------------------------------------------------------
0000A0A2                            
0000A0A2                            Obj1E:					; XREF: Obj_Index
0000A0A2 7000                       		moveq	#0,d0
0000A0A4 1028 0024                  		move.b	$24(a0),d0
0000A0A8 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000A0AC 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000A0B0                            ; ===========================================================================
0000A0B0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000A0B2 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000A0B4                            ; ===========================================================================
0000A0B4                            
0000A0B4                            Obj1E_Main:				; XREF: Obj1E_Index
0000A0B4 117C 0013 0016             		move.b	#$13,$16(a0)
0000A0BA 117C 0008 0017             		move.b	#8,$17(a0)
0000A0C0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A0C8 317C 2302 0002             		move.w	#$2302,2(a0)
0000A0CE 117C 0004 0001             		move.b	#4,1(a0)
0000A0D4 117C 0004 0018             		move.b	#4,$18(a0)
0000A0DA 117C 0005 0020             		move.b	#5,$20(a0)
0000A0E0 117C 000C 0019             		move.b	#$C,$19(a0)
0000A0E6 6100 0000                  		bsr.w	ObjectFall
0000A0EA 4EB9 0000 0000             		jsr	ObjHitFloor
0000A0F0 4A41                       		tst.w	d1
0000A0F2 6A00                       		bpl.s	locret_8BAC
0000A0F4 D368 000C                  		add.w	d1,$C(a0)
0000A0F8 317C 0000 0012             		move.w	#0,$12(a0)
0000A0FE 5428 0024                  		addq.b	#2,$24(a0)
0000A102                            
0000A102                            locret_8BAC:
0000A102 4E75                       		rts	
0000A104                            ; ===========================================================================
0000A104                            
0000A104                            Obj1E_Action:				; XREF: Obj1E_Index
0000A104 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000A10A 6100 0000                  		bsr.w	AnimateSprite
0000A10E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000A114 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000A116 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000A11A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000A11C 6000                       		bra.s	Obj1E_MarkAsGone
0000A11E                            ; ===========================================================================
0000A11E                            
0000A11E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000A11E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000A122                            
0000A122                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000A122 6000 0000                  		bra.w	MarkObjGone
0000A126                            ; ===========================================================================
0000A126                            
0000A126                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000A126 117C 0001 0032             		move.b	#1,$32(a0)
0000A12C 6100 0000                  		bsr.w	SingleObjLoad
0000A130 6600                       		bne.s	loc_8C1A
0000A132 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000A136 3368 0008 0008             		move.w	8(a0),8(a1)
0000A13C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A142 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000A148 337C 0000 0012             		move.w	#0,$12(a1)
0000A14E 70FC                       		moveq	#-4,d0
0000A150 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000A156 6700                       		beq.s	loc_8C0A	; if not, branch
0000A158 4440                       		neg.w	d0
0000A15A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000A15E                            
0000A15E                            loc_8C0A:
0000A15E D169 0008                  		add.w	d0,8(a1)
0000A162 0669 000C 000C             		addi.w	#$C,$C(a1)
0000A168 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000A16E                            
0000A16E                            loc_8C1A:
0000A16E 60B2                       		bra.s	Obj1E_MarkAsGone
0000A170                            ; ===========================================================================
0000A170                            ; ---------------------------------------------------------------------------
0000A170                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A170                            ; ---------------------------------------------------------------------------
0000A170                            
0000A170                            Obj20:					; XREF: Obj_Index
0000A170 7000                       		moveq	#0,d0
0000A172 1028 0024                  		move.b	$24(a0),d0
0000A176 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000A17A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000A17E                            ; ===========================================================================
0000A17E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000A180 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000A182                            ; ===========================================================================
0000A182                            
0000A182                            Obj20_Main:				; XREF: Obj20_Index
0000A182 5428 0024                  		addq.b	#2,$24(a0)
0000A186 117C 0007 0016             		move.b	#7,$16(a0)
0000A18C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000A194 317C 2302 0002             		move.w	#$2302,2(a0)
0000A19A 117C 0004 0001             		move.b	#4,1(a0)
0000A1A0 117C 0003 0018             		move.b	#3,$18(a0)
0000A1A6 117C 0087 0020             		move.b	#$87,$20(a0)
0000A1AC 117C 0008 0019             		move.b	#8,$19(a0)
0000A1B2 7000                       		moveq	#0,d0
0000A1B4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A1B8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A1BC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000A1C0 117C 0004 001A             		move.b	#4,$1A(a0)
0000A1C6                            
0000A1C6                            Obj20_Bounce:				; XREF: Obj20_Index
0000A1C6 4EB9 0000 0000             		jsr	ObjectFall
0000A1CC 4A68 0012                  		tst.w	$12(a0)
0000A1D0 6B00                       		bmi.s	Obj20_ChkExplode
0000A1D2 4EB9 0000 0000             		jsr	ObjHitFloor
0000A1D8 4A41                       		tst.w	d1
0000A1DA 6A00                       		bpl.s	Obj20_ChkExplode
0000A1DC D368 000C                  		add.w	d1,$C(a0)
0000A1E0 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A1E6 4A03                       		tst.b	d3
0000A1E8 6700                       		beq.s	Obj20_ChkExplode
0000A1EA 6B00                       		bmi.s	loc_8CA4
0000A1EC 4A68 0010                  		tst.w	$10(a0)
0000A1F0 6A00                       		bpl.s	Obj20_ChkExplode
0000A1F2 4468 0010                  		neg.w	$10(a0)
0000A1F6 6000                       		bra.s	Obj20_ChkExplode
0000A1F8                            ; ===========================================================================
0000A1F8                            
0000A1F8                            loc_8CA4:				; XREF: Obj20_Bounce
0000A1F8 4A68 0010                  		tst.w	$10(a0)
0000A1FC 6B00                       		bmi.s	Obj20_ChkExplode
0000A1FE 4468 0010                  		neg.w	$10(a0)
0000A202                            
0000A202                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000A202 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000A206 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000A208 10BC 0024                  		move.b	#$24,0(a0)
0000A20C 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000A210 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000A216 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000A21A                            ; ===========================================================================
0000A21A                            
0000A21A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000A21A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A21E 6A00                       		bpl.s	Obj20_Display
0000A220 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000A226 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000A22C                            
0000A22C                            Obj20_Display:
0000A22C 6100 0000                  		bsr.w	DisplaySprite
0000A230 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A234 0640 00E0                  		addi.w	#$E0,d0
0000A238 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000A23C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A240 4E75                       		rts	
0000A242                            ; ===========================================================================
0000A242                            ; ---------------------------------------------------------------------------
0000A242                            ; Object 24 - explosion	from a destroyed monitor
0000A242                            ; ---------------------------------------------------------------------------
0000A242                            
0000A242                            Obj24:					; XREF: Obj_Index
0000A242 7000                       		moveq	#0,d0
0000A244 1028 0024                  		move.b	$24(a0),d0
0000A248 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000A24C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000A250                            ; ===========================================================================
0000A250 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000A252 0000                       		dc.w Obj24_Animate-Obj24_Index
0000A254                            ; ===========================================================================
0000A254                            
0000A254                            Obj24_Main:				; XREF: Obj24_Index
0000A254 5428 0024                  		addq.b	#2,$24(a0)
0000A258 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000A260 317C 041C 0002             		move.w	#$41C,2(a0)
0000A266 117C 0004 0001             		move.b	#4,1(a0)
0000A26C 117C 0001 0018             		move.b	#1,$18(a0)
0000A272 117C 0000 0020             		move.b	#0,$20(a0)
0000A278 117C 000C 0019             		move.b	#$C,$19(a0)
0000A27E 117C 0009 001E             		move.b	#9,$1E(a0)
0000A284 117C 0000 001A             		move.b	#0,$1A(a0)
0000A28A 303C 00A5                  		move.w	#$A5,d0
0000A28E 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play explosion sound
0000A294                            
0000A294                            Obj24_Animate:				; XREF: Obj24_Index
0000A294 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A298 6A00                       		bpl.s	Obj24_Display
0000A29A 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000A2A0 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A2A4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000A2AA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A2AE                            
0000A2AE                            Obj24_Display:
0000A2AE 6000 0000                  		bra.w	DisplaySprite
0000A2B2                            ; ===========================================================================
0000A2B2                            ; ---------------------------------------------------------------------------
0000A2B2                            ; Object 27 - explosion	from a destroyed enemy
0000A2B2                            ; ---------------------------------------------------------------------------
0000A2B2                            
0000A2B2                            Obj27:					; XREF: Obj_Index
0000A2B2 7000                       		moveq	#0,d0
0000A2B4 1028 0024                  		move.b	$24(a0),d0
0000A2B8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000A2BC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000A2C0                            ; ===========================================================================
0000A2C0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000A2C2 0000                       		dc.w Obj27_Main-Obj27_Index
0000A2C4 0000                       		dc.w Obj27_Animate-Obj27_Index
0000A2C6                            ; ===========================================================================
0000A2C6                            
0000A2C6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000A2C6 5428 0024                  		addq.b	#2,$24(a0)
0000A2CA 6100 0000                  		bsr.w	SingleObjLoad
0000A2CE 6600                       		bne.s	Obj27_Main
0000A2D0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000A2D4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A2DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A2E0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A2E6                            
0000A2E6                            Obj27_Main:				; XREF: Obj27_Index
0000A2E6 5428 0024                  		addq.b	#2,$24(a0)
0000A2EA 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000A2F2 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A2F8 117C 0004 0001             		move.b	#4,1(a0)
0000A2FE 117C 0001 0018             		move.b	#1,$18(a0)
0000A304 117C 0000 0020             		move.b	#0,$20(a0)
0000A30A 117C 000C 0019             		move.b	#$C,$19(a0)
0000A310 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A316 117C 0000 001A             		move.b	#0,$1A(a0)
0000A31C 303C 00C1                  		move.w	#$C1,d0
0000A320 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000A326                            
0000A326                            Obj27_Animate:				; XREF: Obj27_Index
0000A326 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A32A 6A00                       		bpl.s	Obj27_Display
0000A32C 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A332 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A336 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000A33C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A340                            
0000A340                            Obj27_Display:
0000A340 6000 0000                  		bra.w	DisplaySprite
0000A344                            ; ===========================================================================
0000A344                            ; ---------------------------------------------------------------------------
0000A344                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A344                            ; ---------------------------------------------------------------------------
0000A344                            
0000A344                            Obj3F:					; XREF: Obj_Index
0000A344 7000                       		moveq	#0,d0
0000A346 1028 0024                  		move.b	$24(a0),d0
0000A34A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000A34E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A352                            ; ===========================================================================
0000A352 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A354 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A356                            ; ===========================================================================
0000A356                            
0000A356                            Obj3F_Main:				; XREF: Obj3F_Index
0000A356 5428 0024                  		addq.b	#2,$24(a0)
0000A35A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A362 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A368 117C 0004 0001             		move.b	#4,1(a0)
0000A36E 117C 0001 0018             		move.b	#1,$18(a0)
0000A374 117C 0000 0020             		move.b	#0,$20(a0)
0000A37A 117C 000C 0019             		move.b	#$C,$19(a0)
0000A380 117C 0007 001E             		move.b	#7,$1E(a0)
0000A386 117C 0000 001A             		move.b	#0,$1A(a0)
0000A38C 303C 00C4                  		move.w	#$C4,d0
0000A390 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A396                            ; ===========================================================================
0000A396                            Ani_obj1E:
0000A396                            	include "_anim\obj1E.asm"
0000A396                            ; ---------------------------------------------------------------------------
0000A396                            ; Animation script - doors (SBZ)
0000A396                            ; ---------------------------------------------------------------------------
0000A396 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A398 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A3B0 00                         		even
0000A3B0 00                         		even
0000A3B0                            
0000A3B0                            ; ---------------------------------------------------------------------------
0000A3B0                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A3B0                            ; ---------------------------------------------------------------------------
0000A3B0                            Map_obj1E:
0000A3B0                            	include "_maps\obj1E.asm"
0000A3B0                            ; ---------------------------------------------------------------------------
0000A3B0                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A3B0                            ; ---------------------------------------------------------------------------
0000A3B0 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A3B4 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A3B8 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A3BC 02                         byte_8E6E:	dc.b 2
0000A3BD EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A3C2 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A3C7 02                         byte_8E79:	dc.b 2
0000A3C8 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A3CD FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A3D2 02                         byte_8E84:	dc.b 2
0000A3D3 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A3D8 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A3DD 02                         byte_8E8F:	dc.b 2
0000A3DE E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A3E3 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A3E8 01                         byte_8E9A:	dc.b 1
0000A3E9 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A3EE 01                         byte_8EA0:	dc.b 1
0000A3EF F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A3F4                            		even
0000A3F4                            		even
0000A3F4                            
0000A3F4                            ; ---------------------------------------------------------------------------
0000A3F4                            ; Sprite mappings - explosion
0000A3F4                            ; ---------------------------------------------------------------------------
0000A3F4                            Map_obj24:
0000A3F4                            	include "_maps\obj24.asm"
0000A3F4                            ; ---------------------------------------------------------------------------
0000A3F4                            ; Sprite mappings - explosion
0000A3F4                            ; ---------------------------------------------------------------------------
0000A3F4 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A3F8 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A3FC 01                         byte_8EAE:	dc.b 1
0000A3FD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A402 01                         byte_8EB4:	dc.b 1
0000A403 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A408 01                         byte_8EBA:	dc.b 1
0000A409 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A40E 01                         byte_8EC0:	dc.b 1
0000A40F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A414                            		even
0000A414                            		even
0000A414                            
0000A414                            ; ---------------------------------------------------------------------------
0000A414                            ; Sprite mappings - explosion
0000A414                            ; ---------------------------------------------------------------------------
0000A414 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A418 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A41C 0000                       		dc.w byte_8EF7-Map_obj27
0000A41E 01                         byte_8ED0:	dc.b 1
0000A41F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A424 01                         byte_8ED6:	dc.b 1
0000A425 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A42A 01                         byte_8EDC:	dc.b 1
0000A42B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A430 04                         byte_8EE2:	dc.b 4
0000A431 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A436 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A43B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A440 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A445 04                         byte_8EF7:	dc.b 4
0000A446 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A44B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A450 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A455 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A45A                            		even
0000A45A                            ; ---------------------------------------------------------------------------
0000A45A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A45A                            ; ---------------------------------------------------------------------------
0000A45A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A45C 0000                       		dc.w byte_8F16-Map_obj3F
0000A45E 0000                       		dc.w byte_8F1C-Map_obj3F
0000A460 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A462 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A464 01                         byte_8F16:	dc.b 1
0000A465 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A46A 01                         byte_8F1C:	dc.b 1
0000A46B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A470                            		even
0000A470                            ; ===========================================================================
0000A470                            ; ---------------------------------------------------------------------------
0000A470                            ; Object 28 - animals
0000A470                            ; ---------------------------------------------------------------------------
0000A470                            
0000A470                            Obj28:					; XREF: Obj_Index
0000A470 7000                       		moveq	#0,d0
0000A472 1028 0024                  		move.b	$24(a0),d0
0000A476 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A47A 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A47E                            ; ===========================================================================
0000A47E 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A482 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A486 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A48A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A48E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A492 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A496 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A49A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A49E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A4A2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A4A6 0000                       		dc.w loc_92D6-Obj28_Index
0000A4A8                            
0000A4A8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A4B4                            
0000A4B4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A4B8 0000 0000                  		dc.l Map_obj28
0000A4BC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A4C0 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A4C4 FE80 FD00                  		dc.w $FE80, $FD00
0000A4C8 0000 0000                  		dc.l Map_obj28
0000A4CC FEC0 FE80                  		dc.w $FEC0, $FE80
0000A4D0 0000 0000                  		dc.l Map_obj28a
0000A4D4 FE40 FD00                  		dc.w $FE40, $FD00
0000A4D8 0000 0000                  		dc.l Map_obj28b
0000A4DC FD00 FC00                  		dc.w $FD00, $FC00
0000A4E0 0000 0000                  		dc.l Map_obj28a
0000A4E4 FD80 FC80                  		dc.w $FD80, $FC80
0000A4E8 0000 0000                  		dc.l Map_obj28b
0000A4EC                            
0000A4EC FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A4FC FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A50C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A518                            
0000A518 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A52C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A540 0000 0000                  		dc.l Map_obj28b
0000A544                            
0000A544 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A556 0565 05B3                  		dc.w $565, $5B3
0000A55A                            ; ===========================================================================
0000A55A                            
0000A55A                            Obj28_Ending:				; XREF: Obj28_Index
0000A55A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A55E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A562 7000                       		moveq	#0,d0
0000A564 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A568 D040                       		add.w	d0,d0		; multiply d0 by 2
0000A56A 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A56E 0440 0014                  		subi.w	#$14,d0
0000A572 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A578 D040                       		add.w	d0,d0
0000A57A 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A580 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A584 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A58A 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A590 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A596 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A59C 117C 000C 0016             		move.b	#$C,$16(a0)
0000A5A2 117C 0004 0001             		move.b	#4,1(a0)
0000A5A8 08E8 0000 0001             		bset	#0,1(a0)
0000A5AE 117C 0006 0018             		move.b	#6,$18(a0)
0000A5B4 117C 0008 0019             		move.b	#8,$19(a0)
0000A5BA 117C 0007 001E             		move.b	#7,$1E(a0)
0000A5C0 6000 0000                  		bra.w	DisplaySprite
0000A5C4                            ; ===========================================================================
0000A5C4                            
0000A5C4                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A5C4 5428 0024                  		addq.b	#2,$24(a0)
0000A5C8 6100 8406                  		bsr.w	RandomNumber
0000A5CC 0240 0001                  		andi.w	#1,d0
0000A5D0 7200                       		moveq	#0,d1
0000A5D2 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A5D6 D241                       		add.w	d1,d1
0000A5D8 D240                       		add.w	d0,d1
0000A5DA 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000A5DE 1031 1000                  		move.b	(a1,d1.w),d0
0000A5E2 1140 0030                  		move.b	d0,$30(a0)
0000A5E6 E748                       		lsl.w	#3,d0
0000A5E8 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A5EC D2C0                       		adda.w	d0,a1
0000A5EE 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A5F2 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A5F6 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A5FA 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A600 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A606 6700                       		beq.s	loc_90C0	; if yes, branch
0000A608 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A60E                            
0000A60E                            loc_90C0:
0000A60E 117C 000C 0016             		move.b	#$C,$16(a0)
0000A614 117C 0004 0001             		move.b	#4,1(a0)
0000A61A 08E8 0000 0001             		bset	#0,1(a0)
0000A620 117C 0006 0018             		move.b	#6,$18(a0)
0000A626 117C 0008 0019             		move.b	#8,$19(a0)
0000A62C 117C 0007 001E             		move.b	#7,$1E(a0)
0000A632 117C 0002 001A             		move.b	#2,$1A(a0)
0000A638 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A63E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A642 6600                       		bne.s	loc_911C
0000A644 6100 0000                  		bsr.w	SingleObjLoad
0000A648 6600                       		bne.s	Obj28_Display
0000A64A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000A64E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A654 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A65A 3028 003E                  		move.w	$3E(a0),d0
0000A65E E248                       		lsr.w	#1,d0
0000A660 1340 001A                  		move.b	d0,$1A(a1)
0000A664                            
0000A664                            Obj28_Display:
0000A664 6000 0000                  		bra.w	DisplaySprite
0000A668                            ; ===========================================================================
0000A668                            
0000A668                            loc_911C:
0000A668 117C 0012 0024             		move.b	#$12,$24(a0)
0000A66E 4268 0010                  		clr.w	$10(a0)
0000A672 6000 0000                  		bra.w	DisplaySprite
0000A676                            ; ===========================================================================
0000A676                            
0000A676                            loc_912A:				; XREF: Obj28_Index
0000A676 4A28 0001                  		tst.b	1(a0)
0000A67A 6A00 0000                  		bpl.w	DeleteObject
0000A67E 6100 0000                  		bsr.w	ObjectFall
0000A682 4A68 0012                  		tst.w	$12(a0)
0000A686 6B00                       		bmi.s	loc_9180
0000A688 4EB9 0000 0000             		jsr	ObjHitFloor
0000A68E 4A41                       		tst.w	d1
0000A690 6A00                       		bpl.s	loc_9180
0000A692 D368 000C                  		add.w	d1,$C(a0)
0000A696 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A69C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A6A2 117C 0001 001A             		move.b	#1,$1A(a0)
0000A6A8 1028 0030                  		move.b	$30(a0),d0
0000A6AC D000                       		add.b	d0,d0
0000A6AE 5800                       		addq.b	#4,d0
0000A6B0 1140 0024                  		move.b	d0,$24(a0)
0000A6B4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A6B8 6700                       		beq.s	loc_9180
0000A6BA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A6C0 6700                       		beq.s	loc_9180
0000A6C2 4468 0010                  		neg.w	$10(a0)
0000A6C6 0868 0000 0001             		bchg	#0,1(a0)
0000A6CC                            
0000A6CC                            loc_9180:
0000A6CC 6000 0000                  		bra.w	DisplaySprite
0000A6D0                            ; ===========================================================================
0000A6D0                            
0000A6D0                            loc_9184:				; XREF: Obj28_Index
0000A6D0 6100 0000                  		bsr.w	ObjectFall
0000A6D4 117C 0001 001A             		move.b	#1,$1A(a0)
0000A6DA 4A68 0012                  		tst.w	$12(a0)
0000A6DE 6B00                       		bmi.s	loc_91AE
0000A6E0 117C 0000 001A             		move.b	#0,$1A(a0)
0000A6E6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6EC 4A41                       		tst.w	d1
0000A6EE 6A00                       		bpl.s	loc_91AE
0000A6F0 D368 000C                  		add.w	d1,$C(a0)
0000A6F4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A6FA                            
0000A6FA                            loc_91AE:
0000A6FA 4A28 0028                  		tst.b	$28(a0)
0000A6FE 6600                       		bne.s	loc_9224
0000A700 4A28 0001                  		tst.b	1(a0)
0000A704 6A00 0000                  		bpl.w	DeleteObject
0000A708 6000 0000                  		bra.w	DisplaySprite
0000A70C                            ; ===========================================================================
0000A70C                            
0000A70C                            loc_91C0:				; XREF: Obj28_Index
0000A70C 6100 0000                  		bsr.w	SpeedToPos
0000A710 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A716 4A68 0012                  		tst.w	$12(a0)
0000A71A 6B00                       		bmi.s	loc_91FC
0000A71C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A722 4A41                       		tst.w	d1
0000A724 6A00                       		bpl.s	loc_91FC
0000A726 D368 000C                  		add.w	d1,$C(a0)
0000A72A 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A730 4A28 0028                  		tst.b	$28(a0)
0000A734 6700                       		beq.s	loc_91FC
0000A736 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A73C 6700                       		beq.s	loc_91FC
0000A73E 4468 0010                  		neg.w	$10(a0)
0000A742 0868 0000 0001             		bchg	#0,1(a0)
0000A748                            
0000A748                            loc_91FC:
0000A748 5328 001E                  		subq.b	#1,$1E(a0)
0000A74C 6A00                       		bpl.s	loc_9212
0000A74E 117C 0001 001E             		move.b	#1,$1E(a0)
0000A754 5228 001A                  		addq.b	#1,$1A(a0)
0000A758 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A75E                            
0000A75E                            loc_9212:
0000A75E 4A28 0028                  		tst.b	$28(a0)
0000A762 6600                       		bne.s	loc_9224
0000A764 4A28 0001                  		tst.b	1(a0)
0000A768 6A00 0000                  		bpl.w	DeleteObject
0000A76C 6000 0000                  		bra.w	DisplaySprite
0000A770                            ; ===========================================================================
0000A770                            
0000A770                            loc_9224:				; XREF: Obj28_Index
0000A770 3028 0008                  		move.w	8(a0),d0
0000A774 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A778 6500                       		bcs.s	loc_923C
0000A77A 0440 0180                  		subi.w	#$180,d0
0000A77E 6A00                       		bpl.s	loc_923C
0000A780 4A28 0001                  		tst.b	1(a0)
0000A784 6A00 0000                  		bpl.w	DeleteObject
0000A788                            
0000A788                            loc_923C:
0000A788 6000 0000                  		bra.w	DisplaySprite
0000A78C                            ; ===========================================================================
0000A78C                            
0000A78C                            loc_9240:				; XREF: Obj28_Index
0000A78C 4A28 0001                  		tst.b	1(a0)
0000A790 6A00 0000                  		bpl.w	DeleteObject
0000A794 5368 0036                  		subq.w	#1,$36(a0)
0000A798 6600 0000                  		bne.w	loc_925C
0000A79C 117C 0002 0024             		move.b	#2,$24(a0)
0000A7A2 117C 0003 0018             		move.b	#3,$18(a0)
0000A7A8                            
0000A7A8                            loc_925C:
0000A7A8 6000 0000                  		bra.w	DisplaySprite
0000A7AC                            ; ===========================================================================
0000A7AC                            
0000A7AC                            loc_9260:				; XREF: Obj28_Index
0000A7AC 6100 0000                  		bsr.w	sub_9404
0000A7B0 6400                       		bcc.s	loc_927C
0000A7B2 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A7B8 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A7BE 117C 000E 0024             		move.b	#$E,$24(a0)
0000A7C4 6000 FF46                  		bra.w	loc_91C0
0000A7C8                            ; ===========================================================================
0000A7C8                            
0000A7C8                            loc_927C:
0000A7C8 6000 FFA6                  		bra.w	loc_9224
0000A7CC                            ; ===========================================================================
0000A7CC                            
0000A7CC                            loc_9280:				; XREF: Obj28_Index
0000A7CC 6100 0000                  		bsr.w	sub_9404
0000A7D0 6A00                       		bpl.s	loc_92B6
0000A7D2 4268 0010                  		clr.w	$10(a0)
0000A7D6 4268 0032                  		clr.w	$32(a0)
0000A7DA 6100 0000                  		bsr.w	SpeedToPos
0000A7DE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A7E4 6100 0000                  		bsr.w	loc_93C4
0000A7E8 6100 0000                  		bsr.w	loc_93EC
0000A7EC 5328 001E                  		subq.b	#1,$1E(a0)
0000A7F0 6A00                       		bpl.s	loc_92B6
0000A7F2 117C 0001 001E             		move.b	#1,$1E(a0)
0000A7F8 5228 001A                  		addq.b	#1,$1A(a0)
0000A7FC 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A802                            
0000A802                            loc_92B6:
0000A802 6000 FF6C                  		bra.w	loc_9224
0000A806                            ; ===========================================================================
0000A806                            
0000A806                            loc_92BA:				; XREF: Obj28_Index
0000A806 6100 0000                  		bsr.w	sub_9404
0000A80A 6A00                       		bpl.s	loc_9310
0000A80C 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A812 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A818 117C 0004 0024             		move.b	#4,$24(a0)
0000A81E 6000 FEB0                  		bra.w	loc_9184
0000A822                            ; ===========================================================================
0000A822                            
0000A822                            loc_92D6:				; XREF: Obj28_Index
0000A822 6100 0000                  		bsr.w	ObjectFall
0000A826 117C 0001 001A             		move.b	#1,$1A(a0)
0000A82C 4A68 0012                  		tst.w	$12(a0)
0000A830 6B00                       		bmi.s	loc_9310
0000A832 117C 0000 001A             		move.b	#0,$1A(a0)
0000A838 4EB9 0000 0000             		jsr	ObjHitFloor
0000A83E 4A41                       		tst.w	d1
0000A840 6A00                       		bpl.s	loc_9310
0000A842 4628 0029                  		not.b	$29(a0)
0000A846 6600                       		bne.s	loc_9306
0000A848 4468 0010                  		neg.w	$10(a0)
0000A84C 0868 0000 0001             		bchg	#0,1(a0)
0000A852                            
0000A852                            loc_9306:
0000A852 D368 000C                  		add.w	d1,$C(a0)
0000A856 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A85C                            
0000A85C                            loc_9310:
0000A85C 6000 FF12                  		bra.w	loc_9224
0000A860                            ; ===========================================================================
0000A860                            
0000A860                            loc_9314:				; XREF: Obj28_Index
0000A860 6100 0000                  		bsr.w	sub_9404
0000A864 6A00                       		bpl.s	loc_932E
0000A866 4268 0010                  		clr.w	$10(a0)
0000A86A 4268 0032                  		clr.w	$32(a0)
0000A86E 6100 0000                  		bsr.w	ObjectFall
0000A872 6100 0000                  		bsr.w	loc_93C4
0000A876 6100 0000                  		bsr.w	loc_93EC
0000A87A                            
0000A87A                            loc_932E:
0000A87A 6000 FEF4                  		bra.w	loc_9224
0000A87E                            ; ===========================================================================
0000A87E                            
0000A87E                            loc_9332:				; XREF: Obj28_Index
0000A87E 6100 0000                  		bsr.w	sub_9404
0000A882 6A00                       		bpl.s	loc_936C
0000A884 6100 0000                  		bsr.w	ObjectFall
0000A888 117C 0001 001A             		move.b	#1,$1A(a0)
0000A88E 4A68 0012                  		tst.w	$12(a0)
0000A892 6B00                       		bmi.s	loc_936C
0000A894 117C 0000 001A             		move.b	#0,$1A(a0)
0000A89A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8A0 4A41                       		tst.w	d1
0000A8A2 6A00                       		bpl.s	loc_936C
0000A8A4 4468 0010                  		neg.w	$10(a0)
0000A8A8 0868 0000 0001             		bchg	#0,1(a0)
0000A8AE D368 000C                  		add.w	d1,$C(a0)
0000A8B2 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A8B8                            
0000A8B8                            loc_936C:
0000A8B8 6000 FEB6                  		bra.w	loc_9224
0000A8BC                            ; ===========================================================================
0000A8BC                            
0000A8BC                            loc_9370:				; XREF: Obj28_Index
0000A8BC 6100 0000                  		bsr.w	sub_9404
0000A8C0 6A00                       		bpl.s	loc_93C0
0000A8C2 6100 0000                  		bsr.w	SpeedToPos
0000A8C6 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A8CC 4A68 0012                  		tst.w	$12(a0)
0000A8D0 6B00                       		bmi.s	loc_93AA
0000A8D2 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8D8 4A41                       		tst.w	d1
0000A8DA 6A00                       		bpl.s	loc_93AA
0000A8DC 4628 0029                  		not.b	$29(a0)
0000A8E0 6600                       		bne.s	loc_93A0
0000A8E2 4468 0010                  		neg.w	$10(a0)
0000A8E6 0868 0000 0001             		bchg	#0,1(a0)
0000A8EC                            
0000A8EC                            loc_93A0:
0000A8EC D368 000C                  		add.w	d1,$C(a0)
0000A8F0 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A8F6                            
0000A8F6                            loc_93AA:
0000A8F6 5328 001E                  		subq.b	#1,$1E(a0)
0000A8FA 6A00                       		bpl.s	loc_93C0
0000A8FC 117C 0001 001E             		move.b	#1,$1E(a0)
0000A902 5228 001A                  		addq.b	#1,$1A(a0)
0000A906 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A90C                            
0000A90C                            loc_93C0:
0000A90C 6000 FE62                  		bra.w	loc_9224
0000A910                            ; ===========================================================================
0000A910                            
0000A910                            loc_93C4:
0000A910 117C 0001 001A             		move.b	#1,$1A(a0)
0000A916 4A68 0012                  		tst.w	$12(a0)
0000A91A 6B00                       		bmi.s	locret_93EA
0000A91C 117C 0000 001A             		move.b	#0,$1A(a0)
0000A922 4EB9 0000 0000             		jsr	ObjHitFloor
0000A928 4A41                       		tst.w	d1
0000A92A 6A00                       		bpl.s	locret_93EA
0000A92C D368 000C                  		add.w	d1,$C(a0)
0000A930 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A936                            
0000A936                            locret_93EA:
0000A936 4E75                       		rts	
0000A938                            ; ===========================================================================
0000A938                            
0000A938                            loc_93EC:
0000A938 08E8 0000 0001             		bset	#0,1(a0)
0000A93E 3028 0008                  		move.w	8(a0),d0
0000A942 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A946 6400                       		bcc.s	locret_9402
0000A948 08A8 0000 0001             		bclr	#0,1(a0)
0000A94E                            
0000A94E                            locret_9402:
0000A94E 4E75                       		rts	
0000A950                            
0000A950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A950                            
0000A950                            
0000A950                            sub_9404:
0000A950 3038 D008                  		move.w	($FFFFD008).w,d0
0000A954 9068 0008                  		sub.w	8(a0),d0
0000A958 0440 00B8                  		subi.w	#$B8,d0
0000A95C 4E75                       		rts	
0000A95E                            ; End of function sub_9404
0000A95E                            
0000A95E                            ; ===========================================================================
0000A95E                            ; ---------------------------------------------------------------------------
0000A95E                            ; Object 29 - points that appear when you destroy something
0000A95E                            ; ---------------------------------------------------------------------------
0000A95E                            
0000A95E                            Obj29:					; XREF: Obj_Index
0000A95E 7000                       		moveq	#0,d0
0000A960 1028 0024                  		move.b	$24(a0),d0
0000A964 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000A968 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000A96C 6000 0000                  		bra.w	DisplaySprite
0000A970                            ; ===========================================================================
0000A970 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000A972 0000                       		dc.w Obj29_Slower-Obj29_Index
0000A974                            ; ===========================================================================
0000A974                            
0000A974                            Obj29_Main:				; XREF: Obj29_Index
0000A974 5428 0024                  		addq.b	#2,$24(a0)
0000A978 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000A980 317C 2568 0002             		move.w	#($2000+pointsart),2(a0)
0000A986 117C 0004 0001             		move.b	#4,1(a0)
0000A98C 117C 0001 0018             		move.b	#1,$18(a0)
0000A992 117C 0008 0019             		move.b	#8,$19(a0)
0000A998 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000A99E                            
0000A99E                            Obj29_Slower:				; XREF: Obj29_Index
0000A99E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A9A2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000A9A6 6100 0000                  		bsr.w	SpeedToPos
0000A9AA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A9B0 4E75                       		rts	
0000A9B2                            ; ===========================================================================
0000A9B2                            ; ---------------------------------------------------------------------------
0000A9B2                            ; Sprite mappings - animals
0000A9B2                            ; ---------------------------------------------------------------------------
0000A9B2                            Map_obj28:
0000A9B2                            	include "_maps\obj28.asm"
0000A9B2                            ; ---------------------------------------------------------------------------
0000A9B2                            ; Sprite mappings - animals
0000A9B2                            ; ---------------------------------------------------------------------------
0000A9B2 0000                       		dc.w byte_9472-Map_obj28
0000A9B4 0000                       		dc.w byte_9478-Map_obj28
0000A9B6 0000                       		dc.w byte_946C-Map_obj28
0000A9B8 01                         byte_946C:	dc.b 1
0000A9B9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A9BE 01                         byte_9472:	dc.b 1
0000A9BF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000A9C4 01                         byte_9478:	dc.b 1
0000A9C5 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000A9CA                            		even
0000A9CA                            		even
0000A9CA                            
0000A9CA                            Map_obj28a:
0000A9CA                            	include "_maps\obj28a.asm"
0000A9CA                            ; ---------------------------------------------------------------------------
0000A9CA                            ; Sprite mappings - animals
0000A9CA                            ; ---------------------------------------------------------------------------
0000A9CA 0000                       		dc.w byte_948A-Map_obj28a
0000A9CC 0000                       		dc.w byte_9490-Map_obj28a
0000A9CE 0000                       		dc.w byte_9484-Map_obj28a
0000A9D0 01                         byte_9484:	dc.b 1
0000A9D1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A9D6 01                         byte_948A:	dc.b 1
0000A9D7 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000A9DC 01                         byte_9490:	dc.b 1
0000A9DD FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000A9E2                            		even
0000A9E2                            		even
0000A9E2                            
0000A9E2                            Map_obj28b:
0000A9E2                            	include "_maps\obj28b.asm"
0000A9E2                            ; ---------------------------------------------------------------------------
0000A9E2                            ; Sprite mappings - animals
0000A9E2                            ; ---------------------------------------------------------------------------
0000A9E2 0000                       		dc.w byte_94A2-Map_obj28b
0000A9E4 0000                       		dc.w byte_94A8-Map_obj28b
0000A9E6 0000                       		dc.w byte_949C-Map_obj28b
0000A9E8 01                         byte_949C:	dc.b 1
0000A9E9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A9EE 01                         byte_94A2:	dc.b 1
0000A9EF FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000A9F4 01                         byte_94A8:	dc.b 1
0000A9F5 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000A9FA                            		even
0000A9FA                            		even
0000A9FA                            
0000A9FA                            ; ---------------------------------------------------------------------------
0000A9FA                            ; Sprite mappings - points that	appear when you	destroy	something
0000A9FA                            ; ---------------------------------------------------------------------------
0000A9FA                            Map_obj29:
0000A9FA                            	include "_maps\obj29.asm"
0000A9FA                            ; ---------------------------------------------------------------------------
0000A9FA                            ; Sprite mappings - points that	appear when you	destroy	something
0000A9FA                            ; ---------------------------------------------------------------------------
0000A9FA 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000A9FE 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000AA02 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000AA06 0000                       		dc.w byte_94E5-Map_obj29
0000AA08 01                         byte_94BC:	dc.b 1
0000AA09 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000AA0E 01                         byte_94C2:	dc.b 1
0000AA0F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000AA14 01                         byte_94C8:	dc.b 1
0000AA15 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000AA1A 01                         byte_94CE:	dc.b 1
0000AA1B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000AA20 01                         byte_94D4:	dc.b 1
0000AA21 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000AA26 02                         byte_94DA:	dc.b 2
0000AA27 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000AA2C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000AA31 02                         byte_94E5:	dc.b 2
0000AA32 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000AA37 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000AA3C                            		even
0000AA3C                            		even
0000AA3C                            
0000AA3C                            ; ===========================================================================
0000AA3C                            ; ---------------------------------------------------------------------------
0000AA3C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AA3C                            ; ---------------------------------------------------------------------------
0000AA3C                            
0000AA3C                            Obj1F:					; XREF: Obj_Index
0000AA3C 7000                       		moveq	#0,d0
0000AA3E 1028 0024                  		move.b	$24(a0),d0
0000AA42 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000AA46 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000AA4A                            ; ===========================================================================
0000AA4A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000AA4C 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000AA4E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000AA50 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000AA52 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000AA54                            ; ===========================================================================
0000AA54                            
0000AA54                            Obj1F_Main:				; XREF: Obj1F_Index
0000AA54 117C 0010 0016             		move.b	#$10,$16(a0)
0000AA5A 117C 0008 0017             		move.b	#8,$17(a0)
0000AA60 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000AA68 317C 0400 0002             		move.w	#$400,2(a0)
0000AA6E 117C 0004 0001             		move.b	#4,1(a0)
0000AA74 117C 0003 0018             		move.b	#3,$18(a0)
0000AA7A 117C 0006 0020             		move.b	#6,$20(a0)
0000AA80 117C 0015 0019             		move.b	#$15,$19(a0)
0000AA86 6100 0000                  		bsr.w	ObjectFall
0000AA8A 4EB9 0000 0000             		jsr	ObjHitFloor
0000AA90 4A41                       		tst.w	d1
0000AA92 6A00                       		bpl.s	locret_955A
0000AA94 D368 000C                  		add.w	d1,$C(a0)
0000AA98 1143 0026                  		move.b	d3,$26(a0)
0000AA9C 317C 0000 0012             		move.w	#0,$12(a0)
0000AAA2 5428 0024                  		addq.b	#2,$24(a0)
0000AAA6                            
0000AAA6                            locret_955A:
0000AAA6 4E75                       		rts	
0000AAA8                            ; ===========================================================================
0000AAA8                            
0000AAA8                            Obj1F_Action:				; XREF: Obj1F_Index
0000AAA8 7000                       		moveq	#0,d0
0000AAAA 1028 0025                  		move.b	$25(a0),d0
0000AAAE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000AAB2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000AAB6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000AABC 6100 0000                  		bsr.w	AnimateSprite
0000AAC0 6000 0000                  		bra.w	MarkObjGone
0000AAC4                            ; ===========================================================================
0000AAC4 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000AAC6 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000AAC8                            ; ===========================================================================
0000AAC8                            
0000AAC8                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000AAC8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000AACC 6A00                       		bpl.s	locret_95B6
0000AACE 4A28 0001                  		tst.b	1(a0)
0000AAD2 6A00                       		bpl.s	Obj1F_Move
0000AAD4 0868 0001 0032             		bchg	#1,$32(a0)
0000AADA 6600                       		bne.s	Obj1F_MakeFire
0000AADC                            
0000AADC                            Obj1F_Move:
0000AADC 5428 0025                  		addq.b	#2,$25(a0)
0000AAE0 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000AAE6 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000AAEC 6100 0000                  		bsr.w	Obj1F_SetAni
0000AAF0 5600                       		addq.b	#3,d0
0000AAF2 1140 001C                  		move.b	d0,$1C(a0)
0000AAF6 0868 0000 0022             		bchg	#0,$22(a0)
0000AAFC 6600                       		bne.s	locret_95B6
0000AAFE 4468 0010                  		neg.w	$10(a0)		; change direction
0000AB02                            
0000AB02                            locret_95B6:
0000AB02 4E75                       		rts	
0000AB04                            ; ===========================================================================
0000AB04                            
0000AB04                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000AB04 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AB0A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000AB10 6100 0000                  		bsr.w	SingleObjLoad
0000AB14 6600                       		bne.s	Obj1F_MakeFire2
0000AB16 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000AB1A 137C 0006 0024             		move.b	#6,$24(a1)
0000AB20 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB26 0469 0010 0008             		subi.w	#$10,8(a1)
0000AB2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB32 337C FF00 0010             		move.w	#-$100,$10(a1)
0000AB38                            
0000AB38                            Obj1F_MakeFire2:
0000AB38 6100 0000                  		bsr.w	SingleObjLoad
0000AB3C 6600                       		bne.s	locret_9618
0000AB3E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000AB42 137C 0006 0024             		move.b	#6,$24(a1)
0000AB48 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB4E 0669 0010 0008             		addi.w	#$10,8(a1)
0000AB54 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB5A 337C 0100 0010             		move.w	#$100,$10(a1)
0000AB60                            
0000AB60                            locret_9618:
0000AB60 4E75                       		rts	
0000AB62                            ; ===========================================================================
0000AB62                            
0000AB62                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000AB62 5368 0030                  		subq.w	#1,$30(a0)
0000AB66 6B00                       		bmi.s	loc_966E
0000AB68 6100 0000                  		bsr.w	SpeedToPos
0000AB6C 0868 0000 0032             		bchg	#0,$32(a0)
0000AB72 6600                       		bne.s	loc_9654
0000AB74 3628 0008                  		move.w	8(a0),d3
0000AB78 0643 0010                  		addi.w	#$10,d3
0000AB7C 0828 0000 0022             		btst	#0,$22(a0)
0000AB82 6700                       		beq.s	loc_9640
0000AB84 0443 0020                  		subi.w	#$20,d3
0000AB88                            
0000AB88                            loc_9640:
0000AB88 4EB9 0000 0000             		jsr	ObjHitFloor2
0000AB8E 0C41 FFF8                  		cmpi.w	#-8,d1
0000AB92 6D00                       		blt.s	loc_966E
0000AB94 0C41 000C                  		cmpi.w	#$C,d1
0000AB98 6C00                       		bge.s	loc_966E
0000AB9A 4E75                       		rts	
0000AB9C                            ; ===========================================================================
0000AB9C                            
0000AB9C                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000AB9C 4EB9 0000 0000             		jsr	ObjHitFloor
0000ABA2 D368 000C                  		add.w	d1,$C(a0)
0000ABA6 1143 0026                  		move.b	d3,$26(a0)
0000ABAA 6100 0000                  		bsr.w	Obj1F_SetAni
0000ABAE 5600                       		addq.b	#3,d0
0000ABB0 1140 001C                  		move.b	d0,$1C(a0)
0000ABB4 4E75                       		rts	
0000ABB6                            ; ===========================================================================
0000ABB6                            
0000ABB6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000ABB6 5528 0025                  		subq.b	#2,$25(a0)
0000ABBA 317C 003B 0030             		move.w	#59,$30(a0)
0000ABC0 317C 0000 0010             		move.w	#0,$10(a0)
0000ABC6 6100 0000                  		bsr.w	Obj1F_SetAni
0000ABCA 1140 001C                  		move.b	d0,$1C(a0)
0000ABCE 4E75                       		rts	
0000ABD0                            ; ---------------------------------------------------------------------------
0000ABD0                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000ABD0                            ; ---------------------------------------------------------------------------
0000ABD0                            
0000ABD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ABD0                            
0000ABD0                            
0000ABD0                            Obj1F_SetAni:				; XREF: loc_966E
0000ABD0 7000                       		moveq	#0,d0
0000ABD2 1628 0026                  		move.b	$26(a0),d3
0000ABD6 6B00                       		bmi.s	loc_96A4
0000ABD8 0C03 0006                  		cmpi.b	#6,d3
0000ABDC 6500                       		bcs.s	locret_96A2
0000ABDE 7001                       		moveq	#1,d0
0000ABE0 0828 0000 0022             		btst	#0,$22(a0)
0000ABE6 6600                       		bne.s	locret_96A2
0000ABE8 7002                       		moveq	#2,d0
0000ABEA                            
0000ABEA                            locret_96A2:
0000ABEA 4E75                       		rts	
0000ABEC                            ; ===========================================================================
0000ABEC                            
0000ABEC                            loc_96A4:				; XREF: Obj1F_SetAni
0000ABEC 0C03 00FA                  		cmpi.b	#-6,d3
0000ABF0 6200                       		bhi.s	locret_96B6
0000ABF2 7002                       		moveq	#2,d0
0000ABF4 0828 0000 0022             		btst	#0,$22(a0)
0000ABFA 6600                       		bne.s	locret_96B6
0000ABFC 7001                       		moveq	#1,d0
0000ABFE                            
0000ABFE                            locret_96B6:
0000ABFE 4E75                       		rts	
0000AC00                            ; End of function Obj1F_SetAni
0000AC00                            
0000AC00                            ; ===========================================================================
0000AC00                            
0000AC00                            Obj1F_Delete:				; XREF: Obj1F_Index
0000AC00 6100 0000                  		bsr.w	DeleteObject
0000AC04 4E75                       		rts	
0000AC06                            ; ===========================================================================
0000AC06                            ; ---------------------------------------------------------------------------
0000AC06                            ; Sub-object - missile that the	Crabmeat throws
0000AC06                            ; ---------------------------------------------------------------------------
0000AC06                            
0000AC06                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000AC06 5428 0024                  		addq.b	#2,$24(a0)
0000AC0A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000AC12 317C 0400 0002             		move.w	#$400,2(a0)
0000AC18 117C 0004 0001             		move.b	#4,1(a0)
0000AC1E 117C 0003 0018             		move.b	#3,$18(a0)
0000AC24 117C 0087 0020             		move.b	#$87,$20(a0)
0000AC2A 117C 0008 0019             		move.b	#8,$19(a0)
0000AC30 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AC36 117C 0007 001C             		move.b	#7,$1C(a0)
0000AC3C                            
0000AC3C                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000AC3C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000AC42 6100 0000                  		bsr.w	AnimateSprite
0000AC46 6100 0000                  		bsr.w	ObjectFall
0000AC4A 6100 0000                  		bsr.w	DisplaySprite
0000AC4E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AC52 0640 00E0                  		addi.w	#$E0,d0
0000AC56 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AC5A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000AC5C 4E75                       		rts	
0000AC5E                            ; ===========================================================================
0000AC5E                            
0000AC5E                            Obj1F_Delete2:
0000AC5E 6000 0000                  		bra.w	DeleteObject
0000AC62                            ; ===========================================================================
0000AC62                            Ani_obj1F:
0000AC62                            	include "_anim\obj1F.asm"
0000AC62                            ; ---------------------------------------------------------------------------
0000AC62                            ; Animation script - Crabmeat enemy
0000AC62                            ; ---------------------------------------------------------------------------
0000AC62 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000AC68 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000AC6E 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000AC72 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000AC76 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000AC7A 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000AC7E 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000AC84 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000AC8A 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000AC90 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000AC94 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000AC98                            		even
0000AC98                            		even
0000AC98                            
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98                            Map_obj1F:
0000AC98                            	include "_maps\obj1F.asm"
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000AC9C 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000ACA0 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000ACA4 0000                       		dc.w byte_97D7-Map_obj1F
0000ACA6 04                         byte_975E:	dc.b 4
0000ACA7 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000ACAC F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000ACB1 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000ACB6 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000ACBB 04                         byte_9773:	dc.b 4
0000ACBC F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000ACC1 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000ACC6 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000ACCB 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000ACD0 04                         byte_9788:	dc.b 4
0000ACD1 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000ACD6 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000ACDB FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000ACE0 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000ACE5 04                         byte_979D:	dc.b 4
0000ACE6 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000ACEB EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000ACF0 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000ACF5 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000ACFA 06                         byte_97B2:	dc.b 6
0000ACFB F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000AD00 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000AD05 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000AD0A F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000AD0F 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000AD14 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000AD19 01                         byte_97D1:	dc.b 1
0000AD1A F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000AD1F 01                         byte_97D7:	dc.b 1
0000AD20 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000AD26 00                         		even
0000AD26 00                         		even
0000AD26                            
0000AD26                            ; ===========================================================================
0000AD26                            ; ---------------------------------------------------------------------------
0000AD26                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000AD26                            ; ---------------------------------------------------------------------------
0000AD26                            
0000AD26                            Obj22:					; XREF: Obj_Index
0000AD26 7000                       		moveq	#0,d0
0000AD28 1028 0024                  		move.b	$24(a0),d0
0000AD2C 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000AD30 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000AD34                            ; ===========================================================================
0000AD34 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000AD36 0000                       		dc.w Obj22_Action-Obj22_Index
0000AD38 0000                       		dc.w Obj22_Delete-Obj22_Index
0000AD3A                            ; ===========================================================================
0000AD3A                            
0000AD3A                            Obj22_Main:				; XREF: Obj22_Index
0000AD3A 5428 0024                  		addq.b	#2,$24(a0)
0000AD3E 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000AD46 317C 0444 0002             		move.w	#$444,2(a0)
0000AD4C 117C 0004 0001             		move.b	#4,1(a0)
0000AD52 117C 0003 0018             		move.b	#3,$18(a0)
0000AD58 117C 0008 0020             		move.b	#8,$20(a0)
0000AD5E 117C 0018 0019             		move.b	#$18,$19(a0)
0000AD64                            
0000AD64                            Obj22_Action:				; XREF: Obj22_Index
0000AD64 7000                       		moveq	#0,d0
0000AD66 1028 0025                  		move.b	$25(a0),d0
0000AD6A 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000AD6E 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000AD72 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000AD78 6100 0000                  		bsr.w	AnimateSprite
0000AD7C 6000 0000                  		bra.w	MarkObjGone
0000AD80                            ; ===========================================================================
0000AD80 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000AD82 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000AD84                            ; ===========================================================================
0000AD84                            
0000AD84                            Obj22_Move:				; XREF: Obj22_Index2
0000AD84 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AD88 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000AD8A 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000AD90 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000AD92 5428 0025                  		addq.b	#2,$25(a0)
0000AD96 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000AD9C 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000ADA2 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000ADA8 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000ADAE 6600                       		bne.s	locret_986C	; if not, branch
0000ADB0 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000ADB4                            
0000ADB4                            locret_986C:
0000ADB4 4E75                       		rts	
0000ADB6                            ; ===========================================================================
0000ADB6                            
0000ADB6                            Obj22_Fire:				; XREF: Obj22_Move
0000ADB6 6100 0000                  		bsr.w	SingleObjLoad
0000ADBA 6600                       		bne.s	locret_98D0
0000ADBC 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000ADC0 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADC6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADCC 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000ADD2 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000ADD8 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000ADDE 303C 0018                  		move.w	#$18,d0
0000ADE2 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000ADE8 6600                       		bne.s	loc_98AA	; if not, branch
0000ADEA 4440                       		neg.w	d0
0000ADEC 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000ADF0                            
0000ADF0                            loc_98AA:
0000ADF0 D169 0008                  		add.w	d0,8(a1)
0000ADF4 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000ADFA 337C 000E 0032             		move.w	#$E,$32(a1)
0000AE00 2348 003C                  		move.l	a0,$3C(a1)
0000AE04 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000AE0A 317C 003B 0032             		move.w	#$3B,$32(a0)
0000AE10 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000AE16                            
0000AE16                            locret_98D0:
0000AE16 4E75                       		rts	
0000AE18                            ; ===========================================================================
0000AE18                            
0000AE18                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000AE18 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AE1C 6B00                       		bmi.s	Obj22_ChgDir
0000AE1E 6100 0000                  		bsr.w	SpeedToPos
0000AE22 4A28 0034                  		tst.b	$34(a0)
0000AE26 6600                       		bne.s	locret_992A
0000AE28 3038 D008                  		move.w	($FFFFD008).w,d0
0000AE2C 9068 0008                  		sub.w	8(a0),d0
0000AE30 6A00                       		bpl.s	Obj22_SetNrSonic
0000AE32 4440                       		neg.w	d0
0000AE34                            
0000AE34                            Obj22_SetNrSonic:
0000AE34 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000AE38 6400                       		bcc.s	locret_992A	; if not, branch
0000AE3A 4A28 0001                  		tst.b	1(a0)
0000AE3E 6A00                       		bpl.s	locret_992A
0000AE40 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000AE46 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000AE4C 6000                       		bra.s	Obj22_Stop
0000AE4E                            ; ===========================================================================
0000AE4E                            
0000AE4E                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000AE4E 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000AE54 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000AE5A 317C 003B 0032             		move.w	#59,$32(a0)
0000AE60                            
0000AE60                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000AE60 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000AE64 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000AE6A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000AE70                            
0000AE70                            locret_992A:
0000AE70 4E75                       		rts	
0000AE72                            ; ===========================================================================
0000AE72                            
0000AE72                            Obj22_Delete:				; XREF: Obj22_Index
0000AE72 6100 0000                  		bsr.w	DeleteObject
0000AE76 4E75                       		rts	
0000AE78                            ; ===========================================================================
0000AE78                            ; ---------------------------------------------------------------------------
0000AE78                            ; Object 23 - missile that Buzz	Bomber throws
0000AE78                            ; ---------------------------------------------------------------------------
0000AE78                            
0000AE78                            Obj23:					; XREF: Obj_Index
0000AE78 7000                       		moveq	#0,d0
0000AE7A 1028 0024                  		move.b	$24(a0),d0
0000AE7E 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000AE82 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000AE86                            ; ===========================================================================
0000AE86 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000AE88 0000                       		dc.w Obj23_Animate-Obj23_Index
0000AE8A 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000AE8C 0000                       		dc.w Obj23_Delete-Obj23_Index
0000AE8E 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000AE90                            ; ===========================================================================
0000AE90                            
0000AE90                            Obj23_Main:				; XREF: Obj23_Index
0000AE90 5368 0032                  		subq.w	#1,$32(a0)
0000AE94 6A00                       		bpl.s	Obj23_ChkCancel
0000AE96 5428 0024                  		addq.b	#2,$24(a0)
0000AE9A 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000AEA2 317C 2444 0002             		move.w	#$2444,2(a0)
0000AEA8 117C 0004 0001             		move.b	#4,1(a0)
0000AEAE 117C 0003 0018             		move.b	#3,$18(a0)
0000AEB4 117C 0008 0019             		move.b	#8,$19(a0)
0000AEBA 0228 0003 0022             		andi.b	#3,$22(a0)
0000AEC0 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000AEC4 6700                       		beq.s	Obj23_Animate	; if not, branch
0000AEC6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000AECC 117C 0087 0020             		move.b	#$87,$20(a0)
0000AED2 117C 0001 001C             		move.b	#1,$1C(a0)
0000AED8 6000                       		bra.s	Obj23_Animate2
0000AEDA                            ; ===========================================================================
0000AEDA                            
0000AEDA                            Obj23_Animate:				; XREF: Obj23_Index
0000AEDA 6100                       		bsr.s	Obj23_ChkCancel
0000AEDC 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AEE2 6100 0000                  		bsr.w	AnimateSprite
0000AEE6 6000 0000                  		bra.w	DisplaySprite
0000AEEA                            ; ---------------------------------------------------------------------------
0000AEEA                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000AEEA                            ; destroyed, and if it has, then cancel	the missile
0000AEEA                            ; ---------------------------------------------------------------------------
0000AEEA                            
0000AEEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEEA                            
0000AEEA                            
0000AEEA                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000AEEA 2268 003C                  		movea.l	$3C(a0),a1
0000AEEE 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000AEF2 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000AEF4 4E75                       		rts	
0000AEF6                            ; End of function Obj23_ChkCancel
0000AEF6                            
0000AEF6                            ; ===========================================================================
0000AEF6                            
0000AEF6                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000AEF6 0828 0007 0022             		btst	#7,$22(a0)
0000AEFC 6600                       		bne.s	Obj23_Explode
0000AEFE 117C 0087 0020             		move.b	#$87,$20(a0)
0000AF04 117C 0001 001C             		move.b	#1,$1C(a0)
0000AF0A 6100 0000                  		bsr.w	SpeedToPos
0000AF0E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AF14 6100 0000                  		bsr.w	AnimateSprite
0000AF18 6100 0000                  		bsr.w	DisplaySprite
0000AF1C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AF20 0640 00E0                  		addi.w	#$E0,d0
0000AF24 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AF28 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000AF2A 4E75                       		rts	
0000AF2C                            ; ===========================================================================
0000AF2C                            
0000AF2C                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000AF2C 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000AF30 117C 0000 0024             		move.b	#0,$24(a0)
0000AF36 6000 F30A                  		bra.w	Obj24
0000AF3A                            ; ===========================================================================
0000AF3A                            
0000AF3A                            Obj23_Delete:				; XREF: Obj23_Index
0000AF3A 6100 0000                  		bsr.w	DeleteObject
0000AF3E 4E75                       		rts	
0000AF40                            ; ===========================================================================
0000AF40                            
0000AF40                            Obj23_FromNewt:				; XREF: Obj23_Index
0000AF40 4A28 0001                  		tst.b	1(a0)
0000AF44 6AF4                       		bpl.s	Obj23_Delete
0000AF46 6100 0000                  		bsr.w	SpeedToPos
0000AF4A                            
0000AF4A                            Obj23_Animate2:				; XREF: Obj23_Main
0000AF4A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AF50 6100 0000                  		bsr.w	AnimateSprite
0000AF54 6100 0000                  		bsr.w	DisplaySprite
0000AF58 4E75                       		rts	
0000AF5A                            ; ===========================================================================
0000AF5A                            Ani_obj22:
0000AF5A                            	include "_anim\obj22.asm"
0000AF5A                            ; ---------------------------------------------------------------------------
0000AF5A                            ; Animation script - Buzz Bomber enemy
0000AF5A                            ; ---------------------------------------------------------------------------
0000AF5A 0000                       		dc.w byte_9A1E-Ani_obj22
0000AF5C 0000                       		dc.w byte_9A22-Ani_obj22
0000AF5E 0000                       		dc.w byte_9A26-Ani_obj22
0000AF60 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000AF64 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000AF68 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000AF6C                            		even
0000AF6C                            		even
0000AF6C                            
0000AF6C                            Ani_obj23:
0000AF6C                            	include "_anim\obj23.asm"
0000AF6C                            ; ---------------------------------------------------------------------------
0000AF6C                            ; Animation script - missile that Buzz Bomber throws
0000AF6C                            ; ---------------------------------------------------------------------------
0000AF6C 0000                       		dc.w byte_9A2E-Ani_obj23
0000AF6E 0000                       		dc.w byte_9A32-Ani_obj23
0000AF70 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000AF74 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000AF78                            		even
0000AF78                            		even
0000AF78                            
0000AF78                            ; ---------------------------------------------------------------------------
0000AF78                            ; Sprite mappings - Buzz Bomber	enemy
0000AF78                            ; ---------------------------------------------------------------------------
0000AF78                            Map_obj22:
0000AF78                            	include "_maps\obj22.asm"
0000AF78                            ; ---------------------------------------------------------------------------
0000AF78                            ; Sprite mappings - Buzz Bomber	enemy
0000AF78                            ; ---------------------------------------------------------------------------
0000AF78 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000AF7C 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000AF80 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000AF84 06                         byte_9A42:	dc.b 6
0000AF85 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AF8A F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AF8F 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AF94 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AF99 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AF9E F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AFA3 06                         byte_9A61:	dc.b 6
0000AFA4 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AFA9 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AFAE 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AFB3 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AFB8 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AFBD F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AFC2 07                         byte_9A80:	dc.b 7
0000AFC3 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000AFC8 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AFCD F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AFD2 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AFD7 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AFDC F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AFE1 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AFE6 07                         byte_9AA4:	dc.b 7
0000AFE7 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000AFEC F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AFF1 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AFF6 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AFFB 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000B000 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B005 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B00A 06                         byte_9AC8:	dc.b 6
0000B00B F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B010 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B015 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B01A 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B01F F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000B024 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000B029 04                         byte_9AE7:	dc.b 4
0000B02A F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000B02F 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000B034 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000B039 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000B03E F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000B043 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000B048                            		even
0000B048                            		even
0000B048                            
0000B048                            ; ---------------------------------------------------------------------------
0000B048                            ; Sprite mappings - missile that Buzz Bomber throws
0000B048                            ; ---------------------------------------------------------------------------
0000B048                            Map_obj23:
0000B048                            	include "_maps\obj23.asm"
0000B048                            ; ---------------------------------------------------------------------------
0000B048                            ; Sprite mappings - missile that Buzz Bomber throws
0000B048                            ; ---------------------------------------------------------------------------
0000B048 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000B04C 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000B050 01                         byte_9B0E:	dc.b 1
0000B051 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000B056 01                         byte_9B14:	dc.b 1
0000B057 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B05C 01                         byte_9B1A:	dc.b 1
0000B05D F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000B062 01                         byte_9B20:	dc.b 1
0000B063 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B068                            		even
0000B068                            		even
0000B068                            
0000B068                            ; ===========================================================================
0000B068                            ; ---------------------------------------------------------------------------
0000B068                            ; Object 25 - rings
0000B068                            ; ---------------------------------------------------------------------------
0000B068                            
0000B068                            Obj25:					; XREF: Obj_Index
0000B068 7000                       		moveq	#0,d0
0000B06A 1028 0024                  		move.b	$24(a0),d0
0000B06E 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000B072 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000B076                            ; ===========================================================================
0000B076 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000B078 0000                       		dc.w Obj25_Animate-Obj25_Index
0000B07A 0000                       		dc.w Obj25_Collect-Obj25_Index
0000B07C 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000B07E 0000                       		dc.w Obj25_Delete-Obj25_Index
0000B080                            ; ===========================================================================
0000B080                            
0000B080                            Obj25_Main:				; XREF: Obj25_Index		addq.b	#2,$24(a0)
0000B080 3168 0008 0032             		move.w	8(a0),$32(a0)
0000B086 217C 0000 0000 0004        		move.l	#Map_obj25,4(a0)
0000B08E 317C 26BA 0002             		move.w	#($2000+ringart),2(a0)
0000B094 117C 0004 0001             		move.b	#4,1(a0)
0000B09A 117C 0002 0018             		move.b	#2,$18(a0)
0000B0A0 117C 0047 0020             		move.b	#$47,$20(a0)
0000B0A6 117C 0008 0019             		move.b	#8,$19(a0)
0000B0AC                            
0000B0AC                            Obj25_Animate:				; XREF: Obj25_Index
0000B0AC 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B0B2 3028 0032                  		move.w	$32(a0),d0
0000B0B6 6000 0000                  		bra.w	MarkObjGone
0000B0BA                            ; ===========================================================================
0000B0BA                            
0000B0BA                            Obj25_Collect:				; XREF: Obj25_Index
0000B0BA 5428 0024                  		addq.b	#2,$24(a0)
0000B0BE 117C 0000 0020             		move.b	#0,$20(a0)
0000B0C4 317C 0080 0018             		move.w	#$80,$18(a0)
0000B0CA 6100 0000                  		bsr.w	CollectRing
0000B0CE                            
0000B0CE                            Obj25_Sparkle:				; XREF: Obj25_Index
0000B0CE 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B0D4 6100 0000                  		bsr.w	AnimateSprite
0000B0D8 6000 0000                  		bra.w	DisplaySprite
0000B0DC                            ; ===========================================================================
0000B0DC                            
0000B0DC                            Obj25_Delete:				; XREF: Obj25_Index
0000B0DC 6000 0000                  		bra.w	DeleteObject
0000B0E0                            
0000B0E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B0E0                            
0000B0E0                            
0000B0E0                            CollectRing:				; XREF: Obj25_Collect
0000B0E0 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000B0E4 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000B0EA 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000B0EE 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000B0F4 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B0F6 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000B0FC 6700                       		beq.s	loc_9CA4
0000B0FE 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000B104 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000B106 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000B10C 6600                       		bne.s	Obj25_PlaySnd
0000B10E                            
0000B10E                            loc_9CA4:
0000B10E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B112 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B116 303C 0088                  		move.w	#$88,d0		; play extra life music
0000B11A                            
0000B11A                            Obj25_PlaySnd:
0000B11A 4EF9 0000 1220             		jmp	(PlaySound_Special).l
0000B120                            ; End of function CollectRing
0000B120                            
0000B120                            ; ===========================================================================
0000B120                            ; ---------------------------------------------------------------------------
0000B120                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B120                            ; ---------------------------------------------------------------------------
0000B120                            
0000B120                            Obj37:					; XREF: Obj_Index
0000B120 7000                       		moveq	#0,d0
0000B122 1028 0024                  		move.b	$24(a0),d0
0000B126 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000B12A 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000B12E                            ; ===========================================================================
0000B12E 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000B130 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000B132 0000                       		dc.w Obj37_Collect-Obj37_Index
0000B134 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000B136 0000                       		dc.w Obj37_Delete-Obj37_Index
0000B138                            ; ===========================================================================
0000B138                            
0000B138                            Obj37_CountRings:			; XREF: Obj37_Index
0000B138 2248                       		movea.l	a0,a1
0000B13A 7A00                       		moveq	#0,d5
0000B13C 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000B140 7020                       		moveq	#32,d0
0000B142 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000B144 6500                       		bcs.s	loc_9CDE	; if not, branch
0000B146 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000B148                            
0000B148                            loc_9CDE:
0000B148 5345                       		subq.w	#1,d5
0000B14A 383C 0288                  		move.w	#$288,d4
0000B14E 6000                       		bra.s	Obj37_MakeRings
0000B150                            ; ===========================================================================
0000B150                            
0000B150                            Obj37_Loop:
0000B150 6100 0000                  		bsr.w	SingleObjLoad
0000B154 6600 0000                  		bne.w	Obj37_ResetCounter
0000B158                            
0000B158                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000B158 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000B15C 5429 0024                  		addq.b	#2,$24(a1)
0000B160 137C 0008 0016             		move.b	#8,$16(a1)
0000B166 137C 0008 0017             		move.b	#8,$17(a1)
0000B16C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B172 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B178 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000B180 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
0000B186 137C 0004 0001             		move.b	#4,1(a1)
0000B18C 137C 0003 0018             		move.b	#3,$18(a1)
0000B192 137C 0047 0020             		move.b	#$47,$20(a1)
0000B198 137C 0008 0019             		move.b	#8,$19(a1)
0000B19E 4A44                       		tst.w	d4
0000B1A0 6B00                       		bmi.s	loc_9D62
0000B1A2 3004                       		move.w	d4,d0
0000B1A4 4EB9 0000 29F6             		jsr	(CalcSine).l
0000B1AA 3404                       		move.w	d4,d2
0000B1AC E04A                       		lsr.w	#8,d2
0000B1AE E560                       		asl.w	d2,d0
0000B1B0 E561                       		asl.w	d2,d1
0000B1B2 3400                       		move.w	d0,d2
0000B1B4 3601                       		move.w	d1,d3
0000B1B6 0604 0010                  		addi.b	#$10,d4
0000B1BA 6400                       		bcc.s	loc_9D62
0000B1BC 0444 0080                  		subi.w	#$80,d4
0000B1C0 6400                       		bcc.s	loc_9D62
0000B1C2 383C 0288                  		move.w	#$288,d4
0000B1C6                            
0000B1C6                            loc_9D62:
0000B1C6 3342 0010                  		move.w	d2,$10(a1)
0000B1CA 3343 0012                  		move.w	d3,$12(a1)
0000B1CE 4442                       		neg.w	d2
0000B1D0 4444                       		neg.w	d4
0000B1D2 51CD FF7C                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000B1D6                            
0000B1D6                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000B1D6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000B1DC 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000B1E2 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000B1E8 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000B1EA 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000B1EE 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)		
0000B1F2 303C 00C6                  		move.w	#$C6,d0
0000B1F6 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000B1FC                            
0000B1FC                            Obj37_Bounce:				; XREF: Obj37_Index
0000B1FC 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000B202 6100 0000                  		bsr.w	SpeedToPos
0000B206 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B20C 6B00                       		bmi.s	Obj37_ChkDel
0000B20E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B212 D007                       		add.b	d7,d0
0000B214 0200 0003                  		andi.b	#3,d0
0000B218 6600                       		bne.s	Obj37_ChkDel
0000B21A 4EB9 0000 0000             		jsr	ObjHitFloor
0000B220 4A41                       		tst.w	d1
0000B222 6A00                       		bpl.s	Obj37_ChkDel
0000B224 D368 000C                  		add.w	d1,$C(a0)
0000B228 3028 0012                  		move.w	$12(a0),d0
0000B22C E440                       		asr.w	#2,d0
0000B22E 9168 0012                  		sub.w	d0,$12(a0)
0000B232 4468 0012                  		neg.w	$12(a0)
0000B236                            
0000B236                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000B236 5328 001F                  		subq.b	#1,$1F(a0)	; Subtract 1
0000B23A 6700 0000                  		beq.w	DeleteObject		; If 0, delete
0000B23E 0C78 FF00 F72C             		cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000B244 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000B248 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B24C 0640 00E0                  		addi.w	#$E0,d0
0000B250 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000B254 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000B256 6000 0000                  		bra.w	DisplaySprite
0000B25A                            ; ===========================================================================
0000B25A                            
0000B25A                            Obj37_Collect:				; XREF: Obj37_Index
0000B25A 5428 0024                  		addq.b	#2,$24(a0)
0000B25E 117C 0000 0020             		move.b	#0,$20(a0)
0000B264 117C 0001 0018             		move.b	#1,$18(a0)
0000B26A 6100 FE74                  		bsr.w	CollectRing
0000B26E                            
0000B26E                            Obj37_Sparkle:				; XREF: Obj37_Index
0000B26E 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B274 6100 0000                  		bsr.w	AnimateSprite
0000B278 6000 0000                  		bra.w	DisplaySprite
0000B27C                            ; ===========================================================================
0000B27C                            
0000B27C                            Obj37_Delete:				; XREF: Obj37_Index
0000B27C 6000 0000                  		bra.w	DeleteObject
0000B280                            ; ===========================================================================
0000B280                            ; ---------------------------------------------------------------------------
0000B280                            ; Object 4B - giant ring for entry to special stage
0000B280                            ; ---------------------------------------------------------------------------
0000B280                            
0000B280                            Obj4B:					; XREF: Obj_Index
0000B280 7000                       		moveq	#0,d0
0000B282 1028 0024                  		move.b	$24(a0),d0
0000B286 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000B28A 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000B28E                            ; ===========================================================================
0000B28E 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000B290 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000B292 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000B294 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000B296                            ; ===========================================================================
0000B296                            
0000B296                            Obj4B_Main:				; XREF: Obj4B_Index
0000B296 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000B29E 317C 2400 0002             		move.w	#$2400,2(a0)
0000B2A4 0028 0004 0001             		ori.b	#4,1(a0)
0000B2AA 117C 0040 0019             		move.b	#$40,$19(a0)
0000B2B0 4A28 0001                  		tst.b	1(a0)
0000B2B4 6A00                       		bpl.s	Obj4B_Animate
0000B2B6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000B2BC 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000B2C0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000B2C6 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000B2C8 4EF9 0000 0000             		jmp	(DeleteObject).l
0000B2CE                            
0000B2CE                            ; ===========================================================================
0000B2CE                            
0000B2CE                            Obj4B_Okay:				; XREF: Obj4B_Main
0000B2CE 5428 0024                  		addq.b	#2,$24(a0)
0000B2D2 117C 0002 0018             		move.b	#2,$18(a0)
0000B2D8 117C 0052 0020             		move.b	#$52,$20(a0)
0000B2DE 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000B2E4                            
0000B2E4                            Obj4B_Animate:				; XREF: Obj4B_Index
0000B2E4 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B2EA 3028 0008                  		move.w	8(a0),d0
0000B2EE 0240 FF80                  		andi.w	#$FF80,d0
0000B2F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000B2F6 0441 0080                  		subi.w	#$80,d1
0000B2FA 0241 FF80                  		andi.w	#$FF80,d1
0000B2FE 9041                       		sub.w	d1,d0
0000B300 0C40 0280                  		cmpi.w	#$280,d0
0000B304 6300 0000                  		bls.w	DisplaySprite
0000B308 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B30C 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B310 3440                       		movea.w	d0,a2	; load address into a2
0000B312 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B316 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B31A                            ; ===========================================================================
0000B31A                            
0000B31A                            Obj4B_Collect:				; XREF: Obj4B_Index
0000B31A 5528 0024                  		subq.b	#2,$24(a0)
0000B31E 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B324 11FC 0040 F5D0             		move.b	#$40,(SonimeSST+sonime_facetimer).w
0000B32A 117C 0000 0020             		move.b	#0,$20(a0)
0000B330 6100 0000                  		bsr.w	SingleObjLoad
0000B334 6600 0000                  		bne.w	Obj4B_PlaySnd
0000B338 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000B33C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B342 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B348 2348 003C                  		move.l	a0,$3C(a1)
0000B34C 3038 D008                  		move.w	($FFFFD008).w,d0
0000B350 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B354 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B356 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B35C                            
0000B35C                            Obj4B_PlaySnd:
0000B35C 303C 00C3                  		move.w	#$C3,d0
0000B360 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B366 6000 FF7C                  		bra.w	Obj4B_Animate
0000B36A                            ; ===========================================================================
0000B36A                            
0000B36A                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B36A 6000 0000                  		bra.w	DeleteObject
0000B36E                            ; ===========================================================================
0000B36E                            ; ---------------------------------------------------------------------------
0000B36E                            ; Object 7C - flash effect when	you collect the	giant ring
0000B36E                            ; ---------------------------------------------------------------------------
0000B36E                            
0000B36E                            Obj7C:					; XREF: Obj_Index
0000B36E 7000                       		moveq	#0,d0
0000B370 1028 0024                  		move.b	$24(a0),d0
0000B374 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B378 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B37C                            ; ===========================================================================
0000B37C 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B37E 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B380 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B382                            ; ===========================================================================
0000B382                            
0000B382                            Obj7C_Main:				; XREF: Obj7C_Index
0000B382 5428 0024                  		addq.b	#2,$24(a0)
0000B386 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B38E 317C 2462 0002             		move.w	#$2462,2(a0)
0000B394 0028 0004 0001             		ori.b	#4,1(a0)
0000B39A 117C 0000 0018             		move.b	#0,$18(a0)
0000B3A0 117C 0020 0019             		move.b	#$20,$19(a0)
0000B3A6 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000B3AC                            
0000B3AC                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000B3AC 6100                       		bsr.s	Obj7C_Collect
0000B3AE 3028 0008                  		move.w	8(a0),d0
0000B3B2 0240 FF80                  		andi.w	#$FF80,d0
0000B3B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000B3BA 0441 0080                  		subi.w	#$80,d1
0000B3BE 0241 FF80                  		andi.w	#$FF80,d1
0000B3C2 9041                       		sub.w	d1,d0
0000B3C4 0C40 0280                  		cmpi.w	#$280,d0
0000B3C8 6300 0000                  		bls.w	DisplaySprite
0000B3CC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B3D0 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B3D4 3440                       		movea.w	d0,a2	; load address into a2
0000B3D6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B3DA 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B3DE                            
0000B3DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B3DE                            
0000B3DE                            
0000B3DE                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B3DE 5328 001E                  		subq.b	#1,$1E(a0)
0000B3E2 6A00                       		bpl.s	locret_9F76
0000B3E4 117C 0001 001E             		move.b	#1,$1E(a0)
0000B3EA 5228 001A                  		addq.b	#1,$1A(a0)
0000B3EE 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B3F4 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B3F6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B3FC 6600                       		bne.s	locret_9F76	; if not, branch
0000B3FE 2268 003C                  		movea.l	$3C(a0),a1
0000B402 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B408 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B40E 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B414 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B418 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B41C                            
0000B41C                            locret_9F76:
0000B41C 4E75                       		rts	
0000B41E                            ; ===========================================================================
0000B41E                            
0000B41E                            Obj7C_End:				; XREF: Obj7C_Collect
0000B41E 5428 0024                  		addq.b	#2,$24(a0)
0000B422 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B428 588F                       		addq.l	#4,sp
0000B42A 4E75                       		rts	
0000B42C                            ; End of function Obj7C_Collect
0000B42C                            
0000B42C                            ; ===========================================================================
0000B42C                            
0000B42C                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B42C 6000 0000                  		bra.w	DeleteObject
0000B430                            ; ===========================================================================
0000B430                            Ani_obj25:
0000B430                            	include "_anim\obj25.asm"
0000B430                            ; ---------------------------------------------------------------------------
0000B430                            ; Animation script - ring
0000B430                            ; ---------------------------------------------------------------------------
0000B430 0000                       		dc.w byte_9F8C-Ani_obj25
0000B432 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B438                            		even
0000B438                            		even
0000B438                            
0000B438                            ; ---------------------------------------------------------------------------
0000B438                            ; Sprite mappings - rings
0000B438                            ; ---------------------------------------------------------------------------
0000B438                            Map_obj25:
0000B438                            	include "_maps\obj25.asm"
0000B438                            ; ---------------------------------------------------------------------------
0000B438                            ; Sprite mappings - rings
0000B438                            ; ---------------------------------------------------------------------------
0000B438 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B43C 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B440 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B444 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B448 01                         byte_9FA2:	dc.b 1
0000B449 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B44E 01                         byte_9FA8:	dc.b 1
0000B44F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B454 01                         byte_9FAE:	dc.b 1
0000B455 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B45A 01                         byte_9FB4:	dc.b 1
0000B45B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B460 01                         byte_9FBA:	dc.b 1
0000B461 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B466 01                         byte_9FC0:	dc.b 1
0000B467 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B46C 01                         byte_9FC6:	dc.b 1
0000B46D F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B472 01                         byte_9FCC:	dc.b 1
0000B473 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B478                            		even
0000B478                            		even
0000B478                            
0000B478                            ; ---------------------------------------------------------------------------
0000B478                            ; Sprite mappings - giant ring
0000B478                            ; ---------------------------------------------------------------------------
0000B478                            Map_obj4B:
0000B478                            	include "_maps\obj4B.asm"
0000B478                            ; ---------------------------------------------------------------------------
0000B478                            ; Sprite mappings - giant ring
0000B478                            ; ---------------------------------------------------------------------------
0000B478 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B47C 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B480 0A                         byte_9FDA:	dc.b $A
0000B481 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B486 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000B48B E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000B490 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000B495 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000B49A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000B49F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000B4A4 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000B4A9 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000B4AE 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000B4B3 08                         byte_A00D:	dc.b 8
0000B4B4 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000B4B9 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000B4BE E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000B4C3 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000B4C8 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000B4CD 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000B4D2 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000B4D7 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000B4DC 04                         byte_A036:	dc.b 4
0000B4DD E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000B4E2 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000B4E7 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000B4EC 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000B4F1 08                         byte_A04B:	dc.b 8
0000B4F2 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000B4F7 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000B4FC E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000B501 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000B506 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B50B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B510 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B515 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B51A                            		even
0000B51A                            		even
0000B51A                            
0000B51A                            ; ---------------------------------------------------------------------------
0000B51A                            ; Sprite mappings - flash effect when you collect the giant ring
0000B51A                            ; ---------------------------------------------------------------------------
0000B51A                            Map_obj7C:
0000B51A                            	include "_maps\obj7C.asm"
0000B51A                            ; ---------------------------------------------------------------------------
0000B51A                            ; Sprite mappings - flash effect when you collect the giant ring
0000B51A                            ; ---------------------------------------------------------------------------
0000B51A 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B51E 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B522 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B526 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B52A 02                         byte_A084:	dc.b 2
0000B52B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B530 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B535 04                         byte_A08F:	dc.b 4
0000B536 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B53B E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B540 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B545 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B54A 04                         byte_A0A4:	dc.b 4
0000B54B E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B550 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B555 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B55A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B55F 04                         byte_A0B9:	dc.b 4
0000B560 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B565 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B56A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B56F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B574 04                         byte_A0CE:	dc.b 4
0000B575 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B57A E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B57F 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B584 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B589 04                         byte_A0E3:	dc.b 4
0000B58A E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B58F E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B594 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B599 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B59E 02                         byte_A0F8:	dc.b 2
0000B59F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B5A4 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B5A9 04                         byte_A103:	dc.b 4
0000B5AA E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B5AF E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B5B4 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B5B9 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B5BE                            		even
0000B5BE                            		even
0000B5BE                            
0000B5BE                            ; ===========================================================================
0000B5BE                            ; ---------------------------------------------------------------------------
0000B5BE                            ; Object 26 - monitors
0000B5BE                            ; ---------------------------------------------------------------------------
0000B5BE                            
0000B5BE                            Obj26:					; XREF: Obj_Index
0000B5BE 7000                       		moveq	#0,d0
0000B5C0 1028 0024                  		move.b	$24(a0),d0
0000B5C4 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B5C8 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B5CC                            ; ===========================================================================
0000B5CC 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B5CE 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B5D0 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B5D2 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B5D4 0000                       		dc.w Obj26_Display-Obj26_Index
0000B5D6                            ; ===========================================================================
0000B5D6                            
0000B5D6                            Obj26_Main:				; XREF: Obj26_Index
0000B5D6 5428 0024                  		addq.b	#2,$24(a0)
0000B5DA 117C 000E 0016             		move.b	#$E,$16(a0)
0000B5E0 117C 000E 0017             		move.b	#$E,$17(a0)
0000B5E6 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B5EE 317C 0680 0002             		move.w	#$680,2(a0)
0000B5F4 117C 0004 0001             		move.b	#4,1(a0)
0000B5FA 117C 0003 0018             		move.b	#3,$18(a0)
0000B600 117C 000F 0019             		move.b	#$F,$19(a0)
0000B606 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B60A 3440                       		movea.w	d0,a2	; load address into a2
0000B60C 0812 0000                  		btst	#0,(a2)	; has monitor been broken?
0000B610 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B612 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B618 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B61E 4E75                       		rts	
0000B620                            ; ===========================================================================
0000B620                            
0000B620                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B620 117C 0046 0020             		move.b	#$46,$20(a0)
0000B626 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B62C                            
0000B62C                            Obj26_Solid:				; XREF: Obj26_Index
0000B62C 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B630 6700                       		beq.s	loc_A1EC	; if not, branch
0000B632 5500                       		subq.b	#2,d0
0000B634 6600                       		bne.s	Obj26_Fall
0000B636 7200                       		moveq	#0,d1
0000B638 1228 0019                  		move.b	$19(a0),d1
0000B63C 0641 000B                  		addi.w	#$B,d1
0000B640 6100 D09C                  		bsr.w	ExitPlatform
0000B644 0829 0003 0022             		btst	#3,$22(a1)
0000B64A 6600 0000                  		bne.w	loc_A1BC
0000B64E 4228 0025                  		clr.b	$25(a0)
0000B652 6000 0000                  		bra.w	Obj26_Animate
0000B656                            ; ===========================================================================
0000B656                            
0000B656                            loc_A1BC:				; XREF: Obj26_Solid
0000B656 363C 0010                  		move.w	#$10,d3
0000B65A 3428 0008                  		move.w	8(a0),d2
0000B65E 6100 D5E8                  		bsr.w	MvSonicOnPtfm
0000B662 6000 0000                  		bra.w	Obj26_Animate
0000B666                            ; ===========================================================================
0000B666                            
0000B666                            Obj26_Fall:				; XREF: Obj26_Solid
0000B666 6100 0000                  		bsr.w	ObjectFall
0000B66A 4EB9 0000 0000             		jsr	ObjHitFloor
0000B670 4A41                       		tst.w	d1
0000B672 6A00 0000                  		bpl.w	Obj26_Animate
0000B676 D368 000C                  		add.w	d1,$C(a0)
0000B67A 4268 0012                  		clr.w	$12(a0)
0000B67E 4228 0025                  		clr.b	$25(a0)
0000B682 6000 0000                  		bra.w	Obj26_Animate
0000B686                            ; ===========================================================================
0000B686                            
0000B686                            loc_A1EC:				; XREF: Obj26_Solid
0000B686 323C 001A                  		move.w	#$1A,d1
0000B68A 343C 000F                  		move.w	#$F,d2
0000B68E 6100 0000                  		bsr.w	Obj26_SolidSides
0000B692 6700 0000                  		beq.w	loc_A25C
0000B696 4A69 0012                  		tst.w	$12(a1)
0000B69A 6B00                       		bmi.s	loc_A20A
0000B69C 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B6A2 6700                       		beq.s	loc_A25C	; if yes, branch
0000B6A4                            
0000B6A4                            loc_A20A:
0000B6A4 4A41                       		tst.w	d1
0000B6A6 6A00                       		bpl.s	loc_A220
0000B6A8 9769 000C                  		sub.w	d3,$C(a1)
0000B6AC 6100 CF1E                  		bsr.w	loc_74AE
0000B6B0 117C 0002 0025             		move.b	#2,$25(a0)
0000B6B6 6000 0000                  		bra.w	Obj26_Animate
0000B6BA                            ; ===========================================================================
0000B6BA                            
0000B6BA                            loc_A220:
0000B6BA 4A40                       		tst.w	d0
0000B6BC 6700 0000                  		beq.w	loc_A246
0000B6C0 6B00                       		bmi.s	loc_A230
0000B6C2 4A69 0010                  		tst.w	$10(a1)
0000B6C6 6B00                       		bmi.s	loc_A246
0000B6C8 6000                       		bra.s	loc_A236
0000B6CA                            ; ===========================================================================
0000B6CA                            
0000B6CA                            loc_A230:
0000B6CA 4A69 0010                  		tst.w	$10(a1)
0000B6CE 6A00                       		bpl.s	loc_A246
0000B6D0                            
0000B6D0                            loc_A236:
0000B6D0 9169 0008                  		sub.w	d0,8(a1)
0000B6D4 337C 0000 0020             		move.w	#0,$20(a1)
0000B6DA 337C 0000 0010             		move.w	#0,$10(a1)
0000B6E0                            
0000B6E0                            loc_A246:
0000B6E0 0829 0001 0022             		btst	#1,$22(a1)
0000B6E6 6600                       		bne.s	loc_A26A
0000B6E8 08E9 0005 0022             		bset	#5,$22(a1)
0000B6EE 08E8 0005 0022             		bset	#5,$22(a0)
0000B6F4 6000                       		bra.s	Obj26_Animate
0000B6F6                            ; ===========================================================================
0000B6F6                            
0000B6F6                            loc_A25C:
0000B6F6 0828 0005 0022             		btst	#5,$22(a0)
0000B6FC 6700                       		beq.s	Obj26_Animate
0000B6FE 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000B704 6700                       		beq.s	loc_A26A
0000B706 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000B70C 6700                       		beq.s	loc_A26A
0000B70E 337C 0001 001C             		move.w	#1,$1C(a1)
0000B714                            
0000B714                            loc_A26A:
0000B714 08A8 0005 0022             		bclr	#5,$22(a0)
0000B71A 08A9 0005 0022             		bclr	#5,$22(a1)
0000B720                            
0000B720                            Obj26_Animate:				; XREF: Obj26_Index
0000B720 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000B726 6100 0000                  		bsr.w	AnimateSprite
0000B72A                            
0000B72A                            Obj26_Display:				; XREF: Obj26_Index
0000B72A 6000 0000                  		bra.w	MarkObjGone
0000B72E                            ; ===========================================================================
0000B72E                            
0000B72E                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000B72E 5428 0024                  		addq.b	#2,$24(a0)
0000B732 117C 0000 0020             		move.b	#0,$20(a0)
0000B738 6100 0000                  		bsr.w	SingleObjLoad
0000B73C 6600                       		bne.s	Obj26_Explode
0000B73E 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000B742 3368 0008 0008             		move.w	8(a0),8(a1)
0000B748 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B74E 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000B754                            
0000B754                            Obj26_Explode:
0000B754 6100 0000                  		bsr.w	SingleObjLoad
0000B758 6600                       		bne.s	Obj26_SetBroken
0000B75A 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000B75E 5429 0024                  		addq.b	#2,$24(a1)
0000B762 3368 0008 0008             		move.w	8(a0),8(a1)
0000B768 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B76E                            
0000B76E                            Obj26_SetBroken:
0000B76E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B772 6700                       		beq.s	@notremembered			; If it's zero, it isn't remembered
0000B774 3440                       		movea.w	d0,a2	; load address into a2
0000B776 08D2 0000                  		bset	#0,(a2)
0000B77A                            
0000B77A                            	@notremembered:
0000B77A 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000B780 6000 0000                  		bra.w	DisplaySprite
0000B784                            ; ===========================================================================
0000B784                            ; ---------------------------------------------------------------------------
0000B784                            ; Object 2E - contents of monitors
0000B784                            ; ---------------------------------------------------------------------------
0000B784                            
0000B784                            Obj2E:					; XREF: Obj_Index
0000B784 7000                       		moveq	#0,d0
0000B786 1028 0024                  		move.b	$24(a0),d0
0000B78A 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000B78E 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000B792 6000 0000                  		bra.w	DisplaySprite
0000B796                            ; ===========================================================================
0000B796 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000B798 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000B79A 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000B79C                            ; ===========================================================================
0000B79C                            
0000B79C                            Obj2E_Main:				; XREF: Obj2E_Index
0000B79C 5428 0024                  		addq.b	#2,$24(a0)
0000B7A0 317C 0680 0002             		move.w	#$680,2(a0)
0000B7A6 117C 0024 0001             		move.b	#$24,1(a0)
0000B7AC 117C 0003 0018             		move.b	#3,$18(a0)
0000B7B2 117C 0008 0019             		move.b	#8,$19(a0)
0000B7B8 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B7BE 7000                       		moveq	#0,d0
0000B7C0 1028 001C                  		move.b	$1C(a0),d0
0000B7C4 5400                       		addq.b	#2,d0
0000B7C6 1140 001A                  		move.b	d0,$1A(a0)
0000B7CA 227C 0000 0000             		movea.l	#Map_obj26,a1
0000B7D0 D000                       		add.b	d0,d0
0000B7D2 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000B7D6 5249                       		addq.w	#1,a1
0000B7D8 2149 0004                  		move.l	a1,4(a0)
0000B7DC                            
0000B7DC                            Obj2E_Move:				; XREF: Obj2E_Index
0000B7DC 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B7E0 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000B7E4 6100 0000                  		bsr.w	SpeedToPos
0000B7E8 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B7EE 4E75                       		rts	
0000B7F0                            ; ===========================================================================
0000B7F0                            
0000B7F0                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000B7F0 5428 0024                  		addq.b	#2,$24(a0)
0000B7F4 317C 001D 001E             		move.w	#29,$1E(a0)
0000B7FA 1028 001C                  		move.b	$1C(a0),d0
0000B7FE 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000B802 6600                       		bne.s	Obj2E_ChkSonic
0000B804 4E75                       		rts			; Eggman monitor does nothing
0000B806                            ; ===========================================================================
0000B806                            
0000B806                            Obj2E_ChkSonic:
0000B806 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000B80A 6600                       		bne.s	Obj2E_ChkShoes
0000B80C                            
0000B80C                            ExtraLife:
0000B80C 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B812 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B818 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B81C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B820 303C 0088                  		move.w	#$88,d0
0000B824 4EF9 0000 121A             		jmp	(PlaySound).l	; play extra life music
0000B82A                            ; ===========================================================================
0000B82A                            
0000B82A                            Obj2E_ChkShoes:
0000B82A 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000B82E 6600                       		bne.s	Obj2E_ChkShield
0000B830 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000B836 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000B83C 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000B842 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000B848 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000B84E 303C 00E2                  		move.w	#$E2,d0
0000B852 4EF9 0000 121A             		jmp	(PlaySound).l	; Speed	up the music
0000B858                            ; ===========================================================================
0000B858                            
0000B858                            Obj2E_ChkShield:
0000B858 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000B85C 6600                       		bne.s	Obj2E_ChkInvinc
0000B85E 4A38 FE2C                  		tst.b	($FFFFFE2C).w
0000B862 6600                       		bne.s	@alreadyshield
0000B864 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B86A 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B870 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000B876 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000B87C                            
0000B87C                            	@alreadyshield:
0000B87C 303C 00AF                  		move.w	#$AF,d0
0000B880 4EF9 0000 121A             		jmp	(PlaySound).l	; play shield sound
0000B886                            ; ===========================================================================
0000B886                            
0000B886                            Obj2E_ChkInvinc:
0000B886 0C00 0005                  		cmpi.b #5,d0 ; does monitor contain invincibility?
0000B88A 6600 0000                  		bne.w Obj2E_ChkRings
0000B88E 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B894 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B89A 11FC 0001 FE2D             		move.b #1,($FFFFFE2D).w ; Set Invisibility to 1
0000B8A0 31FC 04B0 D032             		move.w #$4B0,($FFFFD032).w ; Set Invisibility timer to 4B0
0000B8A6 11FC 004A D200             		move.b #$4A,($FFFFD200).w ; load stars object ($3801)
0000B8AC 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000B8B2 4A38 F7AA                  		tst.b ($FFFFF7AA).w ; is boss mode on?
0000B8B6 6600                       		bne.s DontPlayMusic ; If so, don't play music
0000B8B8 0C78 000C FE14             		cmpi.w #$C,($FFFFFE14).w ; Check if Sonic has air left
0000B8BE 6300                       		bls.s DontPlayMusic ; If so, don't play music
0000B8C0 303C 0087                  		move.w #$87,d0 ; Load Invisibility music
0000B8C4 4EF9 0000 121A             		jmp (PlaySound).l
0000B8CA                            
0000B8CA                            DontPlayMusic:
0000B8CA 4E75                       		rts
0000B8CC                            ; ===========================================================================
0000B8CC                            
0000B8CC                            Obj2E_NoMusic:
0000B8CC 4E75                       		rts	
0000B8CE                            ; ===========================================================================
0000B8CE                            
0000B8CE                            Obj2E_ChkRings:
0000B8CE 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000B8D2 6600                       		bne.s	Obj2E_ChkS
0000B8D4 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000B8DA 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000B8E0 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000B8E6 6500                       		bcs.s	Obj2E_RingSound
0000B8E8 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000B8EE 6700 FF1C                  		beq.w	ExtraLife
0000B8F2 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000B8F8 6500                       		bcs.s	Obj2E_RingSound
0000B8FA 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000B900 6700 FF0A                  		beq.w	ExtraLife
0000B904                            
0000B904                            Obj2E_RingSound:
0000B904 303C 00B5                  		move.w	#$B5,d0
0000B908 4EF9 0000 121A             		jmp	(PlaySound).l	; play ring sound
0000B90E                            ; ===========================================================================
0000B90E                            
0000B90E                            Obj2E_ChkS:
0000B90E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000B912 6600                       		bne.s	Obj2E_ChkEnd
0000B914 4E71                       		nop	
0000B916                            
0000B916                            Obj2E_ChkEnd:
0000B916 4E75                       		rts			; 'S' and goggles monitors do nothing
0000B918                            ; ===========================================================================
0000B918                            
0000B918                            Obj2E_Delete:				; XREF: Obj2E_Index
0000B918 5368 001E                  		subq.w	#1,$1E(a0)
0000B91C 6B00 0000                  		bmi.w	DeleteObject
0000B920 4E75                       		rts	
0000B922                            ; ---------------------------------------------------------------------------
0000B922                            ; Subroutine to	make the sides of a monitor solid
0000B922                            ; ---------------------------------------------------------------------------
0000B922                            
0000B922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B922                            
0000B922                            
0000B922                            Obj26_SolidSides:			; XREF: loc_A1EC
0000B922 43F8 D000                  		lea	($FFFFD000).w,a1
0000B926 3029 0008                  		move.w	8(a1),d0
0000B92A 9068 0008                  		sub.w	8(a0),d0
0000B92E D041                       		add.w	d1,d0
0000B930 6B00                       		bmi.s	loc_A4E6
0000B932 3601                       		move.w	d1,d3
0000B934 D643                       		add.w	d3,d3
0000B936 B043                       		cmp.w	d3,d0
0000B938 6200                       		bhi.s	loc_A4E6
0000B93A 1629 0016                  		move.b	$16(a1),d3
0000B93E 4883                       		ext.w	d3
0000B940 D443                       		add.w	d3,d2
0000B942 3629 000C                  		move.w	$C(a1),d3
0000B946 9668 000C                  		sub.w	$C(a0),d3
0000B94A D642                       		add.w	d2,d3
0000B94C 6B00                       		bmi.s	loc_A4E6
0000B94E D442                       		add.w	d2,d2
0000B950 B642                       		cmp.w	d2,d3
0000B952 6400                       		bcc.s	loc_A4E6
0000B954 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B958 6B00                       		bmi.s	loc_A4E6
0000B95A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B960 6400                       		bcc.s	loc_A4E6
0000B962 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B966 6600                       		bne.s	loc_A4E6
0000B968 B240                       		cmp.w	d0,d1
0000B96A 6400                       		bcc.s	loc_A4DC
0000B96C D241                       		add.w	d1,d1
0000B96E 9041                       		sub.w	d1,d0
0000B970                            
0000B970                            loc_A4DC:
0000B970 0C43 0010                  		cmpi.w	#$10,d3
0000B974 6500                       		bcs.s	loc_A4EA
0000B976                            
0000B976                            loc_A4E2:
0000B976 7201                       		moveq	#1,d1
0000B978 4E75                       		rts	
0000B97A                            ; ===========================================================================
0000B97A                            
0000B97A                            loc_A4E6:
0000B97A 7200                       		moveq	#0,d1
0000B97C 4E75                       		rts	
0000B97E                            ; ===========================================================================
0000B97E                            
0000B97E                            loc_A4EA:
0000B97E 7200                       		moveq	#0,d1
0000B980 1228 0019                  		move.b	$19(a0),d1
0000B984 5841                       		addq.w	#4,d1
0000B986 3401                       		move.w	d1,d2
0000B988 D442                       		add.w	d2,d2
0000B98A D269 0008                  		add.w	8(a1),d1
0000B98E 9268 0008                  		sub.w	8(a0),d1
0000B992 6BE2                       		bmi.s	loc_A4E2
0000B994 B242                       		cmp.w	d2,d1
0000B996 64DE                       		bcc.s	loc_A4E2
0000B998 72FF                       		moveq	#-1,d1
0000B99A 4E75                       		rts	
0000B99C                            ; End of function Obj26_SolidSides
0000B99C                            
0000B99C                            ; ===========================================================================
0000B99C                            Ani_obj26:
0000B99C                            	include "_anim\obj26.asm"
0000B99C                            ; ---------------------------------------------------------------------------
0000B99C                            ; Animation script - monitors
0000B99C                            ; ---------------------------------------------------------------------------
0000B99C 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B9A2 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B9A8 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B9AE 0000                       		dc.w byte_A582-Ani_obj26
0000B9B0 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B9B6 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B9C2 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B9CE 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B9DA 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B9E6 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B9F2 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B9FE 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000BA0A 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000BA16 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000BA1E                            		even
0000BA1E                            		even
0000BA1E                            
0000BA1E                            ; ---------------------------------------------------------------------------
0000BA1E                            ; Sprite mappings - monitors
0000BA1E                            ; ---------------------------------------------------------------------------
0000BA1E                            Map_obj26:
0000BA1E                            	include "_maps\obj26.asm"
0000BA1E                            ; --------------------------------------------------------------------------------
0000BA1E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BA1E                            ; --------------------------------------------------------------------------------
0000BA1E                            
0000BA1E                            SME_XK1AB:	
0000BA1E 0000 0000                  		dc.w SME_XK1AB_18-SME_XK1AB, SME_XK1AB_1E-SME_XK1AB	
0000BA22 0000 0000                  		dc.w SME_XK1AB_29-SME_XK1AB, SME_XK1AB_34-SME_XK1AB	
0000BA26 0000 0000                  		dc.w SME_XK1AB_35-SME_XK1AB, SME_XK1AB_40-SME_XK1AB	
0000BA2A 0000 0000                  		dc.w SME_XK1AB_4B-SME_XK1AB, SME_XK1AB_56-SME_XK1AB	
0000BA2E 0000 0000                  		dc.w SME_XK1AB_61-SME_XK1AB, SME_XK1AB_6C-SME_XK1AB	
0000BA32 0000 0000                  		dc.w SME_XK1AB_6D-SME_XK1AB, SME_XK1AB_6E-SME_XK1AB	
0000BA36 01                         SME_XK1AB_18:	dc.b 1	
0000BA37 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000BA3C 02                         SME_XK1AB_1E:	dc.b 2	
0000BA3D F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000BA42 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000BA47 02                         SME_XK1AB_29:	dc.b 2	
0000BA48 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000BA4D EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000BA52 00                         SME_XK1AB_34:	dc.b 0	
0000BA53 02                         SME_XK1AB_35:	dc.b 2	
0000BA54 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000BA59 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000BA5E 02                         SME_XK1AB_40:	dc.b 2	
0000BA5F F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000BA64 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000BA69 02                         SME_XK1AB_4B:	dc.b 2	
0000BA6A F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000BA6F EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000BA74 02                         SME_XK1AB_56:	dc.b 2	
0000BA75 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000BA7A EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000BA7F 02                         SME_XK1AB_61:	dc.b 2	
0000BA80 F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
0000BA85 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000BA8A 00                         SME_XK1AB_6C:	dc.b 0	
0000BA8B 00                         SME_XK1AB_6D:	dc.b 0	
0000BA8C 01                         SME_XK1AB_6E:	dc.b 1	
0000BA8D FF0D 002C F0               		dc.b $FF, $D, 0, $2C, $F0	
0000BA92                            		even
0000BA92                            		even
0000BA92                            
0000BA92                            ; ===========================================================================
0000BA92                            ; ---------------------------------------------------------------------------
0000BA92                            ; Object 0E - Sonic on the title screen
0000BA92                            ; ---------------------------------------------------------------------------
0000BA92                            
0000BA92                            Obj0E:					; XREF: Obj_Index
0000BA92 7000                       		moveq	#0,d0
0000BA94 1028 0024                  		move.b	$24(a0),d0
0000BA98 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000BA9C 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000BAA0                            ; ===========================================================================
0000BAA0 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000BAA2 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000BAA4 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000BAA6 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000BAA8                            ; ===========================================================================
0000BAA8                            
0000BAA8                            Obj0E_Main:				; XREF: Obj0E_Index
0000BAA8 5428 0024                  		addq.b	#2,$24(a0)
0000BAAC 317C 00F0 0008             		move.w	#$F0,8(a0)
0000BAB2 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000BAB8 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000BAC0 317C 0300 0002             		move.w	#$300,2(a0)
0000BAC6 117C 0001 0018             		move.b	#1,$18(a0)
0000BACC 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000BAD2 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000BAD8 6100 0000                  		bsr.w	AnimateSprite
0000BADC                            
0000BADC                            Obj0E_Delay:				; XREF: Obj0E_Index
0000BADC 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000BAE0 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000BAE2 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000BAE6 6000 0000                  		bra.w	DisplaySprite
0000BAEA                            ; ===========================================================================
0000BAEA                            
0000BAEA                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000BAEA 4E75                       		rts	
0000BAEC                            ; ===========================================================================
0000BAEC                            
0000BAEC                            Obj0E_Move:				; XREF: Obj0E_Index
0000BAEC 5168 000A                  		subq.w	#8,$A(a0)
0000BAF0 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000BAF6 6600                       		bne.s	Obj0E_Display
0000BAF8 5428 0024                  		addq.b	#2,$24(a0)
0000BAFC                            
0000BAFC                            Obj0E_Display:
0000BAFC 6000 0000                  		bra.w	DisplaySprite
0000BB00                            ; ===========================================================================
0000BB00 4E75                       		rts	
0000BB02                            ; ===========================================================================
0000BB02                            
0000BB02                            Obj0E_Animate:				; XREF: Obj0E_Index
0000BB02 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000BB08 6100 0000                  		bsr.w	AnimateSprite
0000BB0C 6000 0000                  		bra.w	DisplaySprite
0000BB10                            ; ===========================================================================
0000BB10 4E75                       		rts	
0000BB12                            ; ===========================================================================
0000BB12                            ; ---------------------------------------------------------------------------
0000BB12                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000BB12                            ; ---------------------------------------------------------------------------
0000BB12                            
0000BB12                            Obj0F:					; XREF: Obj_Index
0000BB12 7000                       		moveq	#0,d0
0000BB14 1028 0024                  		move.b	$24(a0),d0
0000BB18 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000BB1C 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000BB20 6000 0000                  		bra.w	DisplaySprite
0000BB24                            ; ===========================================================================
0000BB24 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000BB26 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000BB28 0000                       		dc.w locret_A6F8-Obj0F_Index
0000BB2A                            ; ===========================================================================
0000BB2A                            
0000BB2A                            Obj0F_Main:				; XREF: Obj0F_Index
0000BB2A 5428 0024                  		addq.b	#2,$24(a0)
0000BB2E 317C 00D0 0008             		move.w	#$D0,8(a0)
0000BB34 317C 0130 000A             		move.w	#$130,$A(a0)
0000BB3A 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000BB42 317C 2200 0002             		move.w	#$2200,2(a0)
0000BB48 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000BB4E 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000BB50 5428 0024                  		addq.b	#2,$24(a0)
0000BB54 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000BB5A 6600                       		bne.s	locret_A6F8	; if not, branch
0000BB5C 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000BB62 317C 0170 0008             		move.w	#$170,8(a0)
0000BB68 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000BB6E                            
0000BB6E                            locret_A6F8:				; XREF: Obj0F_Index
0000BB6E 4E75                       		rts	
0000BB70                            ; ===========================================================================
0000BB70                            
0000BB70                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000BB70 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000BB76 6000 0000                  		bra.w	AnimateSprite
0000BB7A                            ; ===========================================================================
0000BB7A                            Ani_obj0E:
0000BB7A                            	include "_anim\obj0E.asm"
0000BB7A                            ; ---------------------------------------------------------------------------
0000BB7A                            ; Animation script - Sonic on the title screen
0000BB7A                            ; ---------------------------------------------------------------------------
0000BB7A 0000                       		dc.w byte_A706-Ani_obj0E
0000BB7C 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000BB88                            		even
0000BB88                            		even
0000BB88                            
0000BB88                            Ani_obj0F:
0000BB88                            	include "_anim\obj0F.asm"
0000BB88                            ; ---------------------------------------------------------------------------
0000BB88                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000BB88                            ; ---------------------------------------------------------------------------
0000BB88 0000                       		dc.w byte_A714-Ani_obj0F
0000BB8A 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000BB8E                            		even
0000BB8E                            		even
0000BB8E                            
0000BB8E                            ; ---------------------------------------------------------------------------
0000BB8E                            ; Subroutine to	animate	a sprite using an animation script
0000BB8E                            ; ---------------------------------------------------------------------------
0000BB8E                            
0000BB8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB8E                            
0000BB8E                            
0000BB8E                            AnimateSprite:
0000BB8E 7000                       		moveq	#0,d0
0000BB90 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000BB94 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000BB98 6700                       		beq.s	Anim_Run	; if not, branch
0000BB9A 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000BB9E 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000BBA4 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000BBAA                            
0000BBAA                            Anim_Run:
0000BBAA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000BBAE 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000BBB0 D040                       		add.w	d0,d0
0000BBB2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000BBB6 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000BBBA 7200                       		moveq	#0,d1
0000BBBC 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000BBC0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000BBC4 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000BBC6                            
0000BBC6                            Anim_Next:
0000BBC6 1200                       		move.b	d0,d1
0000BBC8 0200 001F                  		andi.b	#$1F,d0
0000BBCC 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000BBD0 1028 0022                  		move.b	$22(a0),d0
0000BBD4 E719                       		rol.b	#3,d1
0000BBD6 B101                       		eor.b	d0,d1
0000BBD8 0201 0003                  		andi.b	#3,d1
0000BBDC 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000BBE2 8328 0001                  		or.b	d1,1(a0)
0000BBE6 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000BBEA                            
0000BBEA                            Anim_Wait:
0000BBEA 4E75                       		rts	
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            Anim_End_FF:
0000BBEC 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000BBEE 6600                       		bne.s	Anim_End_FE	; if not, branch
0000BBF0 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000BBF6 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000BBFA 60CA                       		bra.s	Anim_Next
0000BBFC                            ; ===========================================================================
0000BBFC                            
0000BBFC                            Anim_End_FE:
0000BBFC 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000BBFE 6600                       		bne.s	Anim_End_FD	; if not, branch
0000BC00 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000BC04 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000BC08 9200                       		sub.b	d0,d1
0000BC0A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000BC0E 60B6                       		bra.s	Anim_Next
0000BC10                            ; ===========================================================================
0000BC10                            
0000BC10                            Anim_End_FD:
0000BC10 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000BC12 6600                       		bne.s	Anim_End_FC	; if not, branch
0000BC14 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000BC1A                            
0000BC1A                            Anim_End_FC:
0000BC1A 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000BC1C 6600                       		bne.s	Anim_End_FB	; if not, branch
0000BC1E 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000BC22                            
0000BC22                            Anim_End_FB:
0000BC22 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000BC24 6600                       		bne.s	Anim_End_FA	; if not, branch
0000BC26 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000BC2C 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000BC30                            
0000BC30                            Anim_End_FA:
0000BC30 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000BC32 6600                       		bne.s	Anim_End	; if not, branch
0000BC34 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000BC38                            
0000BC38                            Anim_End:
0000BC38 4E75                       		rts	
0000BC3A                            ; End of function AnimateSprite
0000BC3A                            
0000BC3A                            ; ===========================================================================
0000BC3A                            ; ---------------------------------------------------------------------------
0000BC3A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BC3A                            ; ---------------------------------------------------------------------------
0000BC3A                            Map_obj0F:
0000BC3A                            	include "_maps\obj0F.asm"
0000BC3A                            ; ---------------------------------------------------------------------------
0000BC3A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BC3A                            ; ---------------------------------------------------------------------------
0000BC3A 0000                       		dc.w byte_A7CD-Map_obj0F
0000BC3C 0000                       		dc.w byte_A7CC-Map_obj0F
0000BC3E 0000                       		dc.w byte_A7EB-Map_obj0F
0000BC40 0000                       		dc.w byte_A882-Map_obj0F
0000BC42 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000BC43 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000BC48 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000BC4D 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000BC52 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000BC57 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000BC5C 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000BC61 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000BC62 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BC67 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BC6C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BC71 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BC76 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BC7B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BC80 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BC85 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BC8A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BC8F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BC94 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BC99 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BC9E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BCA3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BCA8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BCAD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BCB2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BCB7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BCBC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BCC1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BCC6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BCCB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BCD0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BCD5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BCDA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BCDF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BCE4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BCE9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BCEE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BCF3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BCF8 01                         byte_A882:	dc.b 1			; "TM"
0000BCF9 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000BCFE                            		even
0000BCFE                            		even
0000BCFE                            
0000BCFE                            ; ---------------------------------------------------------------------------
0000BCFE                            ; Sprite mappings - Sonic on the title screen
0000BCFE                            ; ---------------------------------------------------------------------------
0000BCFE                            Map_obj0E:
0000BCFE                            	include "_maps\obj0E.asm"
0000BCFE                            ; ---------------------------------------------------------------------------
0000BCFE                            ; Sprite mappings - Sonic on the title screen
0000BCFE                            ; ---------------------------------------------------------------------------
0000BCFE 0000                       		dc.w byte_A898-Map_obj0E
0000BD00 0000                       		dc.w byte_A8CB-Map_obj0E
0000BD02 0000                       		dc.w byte_A917-Map_obj0E
0000BD04 0000                       		dc.w byte_A96D-Map_obj0E
0000BD06 0000                       		dc.w byte_A9AF-Map_obj0E
0000BD08 0000                       		dc.w byte_A9E7-Map_obj0E
0000BD0A 0000                       		dc.w byte_AA47-Map_obj0E
0000BD0C 0000                       		dc.w byte_AAB1-Map_obj0E
0000BD0E 0A                         byte_A898:	dc.b $A
0000BD0F 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000BD14 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000BD19 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000BD1E 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000BD23 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000BD28 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000BD2D 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000BD32 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000BD37 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000BD3C 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000BD41 0F                         byte_A8CB:	dc.b $F
0000BD42 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000BD47 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000BD4C 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000BD51 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000BD56 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000BD5B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BD60 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BD65 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BD6A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BD6F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BD74 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BD79 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BD7E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BD83 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BD88 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BD8D 11                         byte_A917:	dc.b $11
0000BD8E 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000BD93 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000BD98 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000BD9D 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000BDA2 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000BDA7 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000BDAC 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000BDB1 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BDB6 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BDBB 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BDC0 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BDC5 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BDCA 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BDCF 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BDD4 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BDD9 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BDDE 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BDE3 0D                         byte_A96D:	dc.b $D
0000BDE4 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000BDE9 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000BDEE 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000BDF3 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000BDF8 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000BDFD 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000BE02 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000BE07 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000BE0C 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000BE11 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000BE16 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000BE1B 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000BE20 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000BE25 0B                         byte_A9AF:	dc.b $B
0000BE26 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000BE2B 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000BE30 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000BE35 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000BE3A 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000BE3F 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000BE44 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000BE49 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000BE4E 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000BE53 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000BE58 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000BE5D 13                         byte_A9E7:	dc.b $13
0000BE5E 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BE63 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BE68 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BE6D 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BE72 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BE77 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BE7C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BE81 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BE86 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BE8B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BE90 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BE95 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BE9A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BE9F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BEA4 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BEA9 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BEAE 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BEB3 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BEB8 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BEBD 15                         byte_AA47:	dc.b $15
0000BEBE 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BEC3 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BEC8 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BECD 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BED2 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BED7 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BEDC 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BEE1 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BEE6 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BEEB 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BEF0 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BEF5 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BEFA 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BEFF 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BF04 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BF09 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BF0E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BF13 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BF18 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BF1D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BF22 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BF27 16                         byte_AAB1:	dc.b $16
0000BF28 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000BF2D 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000BF32 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000BF37 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000BF3C 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000BF41 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BF46 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BF4B 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BF50 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BF55 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BF5A 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BF5F 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BF64 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BF69 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BF6E 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BF73 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BF78 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BF7D 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BF82 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BF87 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BF8C 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BF91 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BF96                            		even
0000BF96                            		even
0000BF96                            
0000BF96                            ; ===========================================================================
0000BF96                            ; ---------------------------------------------------------------------------
0000BF96                            ; Object 2B - Chopper enemy (GHZ)
0000BF96                            ; ---------------------------------------------------------------------------
0000BF96                            
0000BF96                            Obj2B:					; XREF: Obj_Index
0000BF96 7000                       		moveq	#0,d0
0000BF98 1028 0024                  		move.b	$24(a0),d0
0000BF9C 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000BFA0 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000BFA4 6000 0000                  		bra.w	MarkObjGone
0000BFA8                            ; ===========================================================================
0000BFA8 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000BFAA 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000BFAC                            ; ===========================================================================
0000BFAC                            
0000BFAC                            Obj2B_Main:				; XREF: Obj2B_Index
0000BFAC 5428 0024                  		addq.b	#2,$24(a0)
0000BFB0 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000BFB8 317C 047B 0002             		move.w	#$47B,2(a0)
0000BFBE 117C 0004 0001             		move.b	#4,1(a0)
0000BFC4 117C 0004 0018             		move.b	#4,$18(a0)
0000BFCA 117C 0009 0020             		move.b	#9,$20(a0)
0000BFD0 117C 0010 0019             		move.b	#$10,$19(a0)
0000BFD6 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BFDC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000BFE2                            
0000BFE2                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000BFE2 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000BFE8 6100 FBA4                  		bsr.w	AnimateSprite
0000BFEC 6100 0000                  		bsr.w	SpeedToPos
0000BFF0 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000BFF6 3028 0030                  		move.w	$30(a0),d0
0000BFFA B068 000C                  		cmp.w	$C(a0),d0
0000BFFE 6400                       		bcc.s	Obj2B_ChgAni
0000C000 3140 000C                  		move.w	d0,$C(a0)
0000C004 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000C00A                            
0000C00A                            Obj2B_ChgAni:
0000C00A 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000C010 0440 00C0                  		subi.w	#$C0,d0
0000C014 B068 000C                  		cmp.w	$C(a0),d0
0000C018 6400                       		bcc.s	locret_ABB6
0000C01A 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000C020 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000C024 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000C026 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000C02C                            
0000C02C                            locret_ABB6:
0000C02C 4E75                       		rts	
0000C02E                            ; ===========================================================================
0000C02E                            Ani_obj2B:
0000C02E                            	include "_anim\obj2B.asm"
0000C02E                            ; ---------------------------------------------------------------------------
0000C02E                            ; Animation script - Chopper enemy
0000C02E                            ; ---------------------------------------------------------------------------
0000C02E 0000                       		dc.w byte_ABBE-Ani_obj2B
0000C030 0000                       		dc.w byte_ABC2-Ani_obj2B
0000C032 0000                       		dc.w byte_ABC6-Ani_obj2B
0000C034 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000C038 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000C03C 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000C040 00                         		even
0000C040 00                         		even
0000C040                            
0000C040                            ; ---------------------------------------------------------------------------
0000C040                            ; Sprite mappings - Chopper enemy (GHZ)
0000C040                            ; ---------------------------------------------------------------------------
0000C040                            Map_obj2B:
0000C040                            	include "_maps\obj2B.asm"
0000C040                            ; ---------------------------------------------------------------------------
0000C040                            ; Sprite mappings - Chopper enemy (GHZ)
0000C040                            ; ---------------------------------------------------------------------------
0000C040 0000                       		dc.w byte_ABCE-Map_obj2B
0000C042 0000                       		dc.w byte_ABD4-Map_obj2B
0000C044 01                         byte_ABCE:	dc.b 1
0000C045 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000C04A 01                         byte_ABD4:	dc.b 1
0000C04B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C050                            		even
0000C050                            		even
0000C050                            
0000C050                            ; ===========================================================================
0000C050                            ; ---------------------------------------------------------------------------
0000C050                            ; Object 2C - Jaws enemy (LZ)
0000C050                            ; ---------------------------------------------------------------------------
0000C050                            
0000C050                            Obj2C:					; XREF: Obj_Index
0000C050 7000                       		moveq	#0,d0
0000C052 1028 0024                  		move.b	$24(a0),d0
0000C056 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000C05A 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000C05E                            ; ===========================================================================
0000C05E 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000C060 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000C062                            ; ===========================================================================
0000C062                            
0000C062                            Obj2C_Main:				; XREF: Obj2C_Index
0000C062 5428 0024                  		addq.b	#2,$24(a0)
0000C066 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000C06E 317C 2486 0002             		move.w	#$2486,2(a0)
0000C074 0028 0004 0001             		ori.b	#4,1(a0)
0000C07A 117C 000A 0020             		move.b	#$A,$20(a0)
0000C080 117C 0004 0018             		move.b	#4,$18(a0)
0000C086 117C 0010 0019             		move.b	#$10,$19(a0)
0000C08C 7000                       		moveq	#0,d0
0000C08E 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000C092 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000C094 5340                       		subq.w	#1,d0
0000C096 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000C09A 3140 0032                  		move.w	d0,$32(a0)
0000C09E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000C0A4 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000C0AA 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000C0AC 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000C0B0                            
0000C0B0                            Obj2C_Turn:				; XREF: Obj2C_Index
0000C0B0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000C0B4 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000C0B6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000C0BC 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000C0C0 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000C0C6 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000C0CC                            
0000C0CC                            Obj2C_Animate:
0000C0CC 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000C0D2 6100 FABA                  		bsr.w	AnimateSprite
0000C0D6 6100 0000                  		bsr.w	SpeedToPos
0000C0DA 6000 0000                  		bra.w	MarkObjGone
0000C0DE                            ; ===========================================================================
0000C0DE                            Ani_obj2C:
0000C0DE                            	include "_anim\obj2C.asm"
0000C0DE                            ; ---------------------------------------------------------------------------
0000C0DE                            ; Animation script - Jaws enemy
0000C0DE                            ; ---------------------------------------------------------------------------
0000C0DE 0000                       		dc.w byte_AC6A-Ani_obj2C
0000C0E0 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000C0E6                            		even
0000C0E6                            		even
0000C0E6                            
0000C0E6                            ; ---------------------------------------------------------------------------
0000C0E6                            ; Sprite mappings - Jaws enemy (LZ)
0000C0E6                            ; ---------------------------------------------------------------------------
0000C0E6                            Map_obj2C:
0000C0E6                            	include "_maps\obj2C.asm"
0000C0E6                            mapjaws:
0000C0E6 0000                       mapjaws_0: 	dc.w mapjaws_8-mapjaws
0000C0E8 0000                       mapjaws_2: 	dc.w mapjaws_13-mapjaws
0000C0EA 0000                       mapjaws_4: 	dc.w mapjaws_1E-mapjaws
0000C0EC 0000                       mapjaws_6: 	dc.w mapjaws_29-mapjaws
0000C0EE 02                         mapjaws_8: 	dc.b $2
0000C0EF F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000C0F4 F505 4018 10               	dc.b $F5, $5, $40, $18, $10
0000C0F9 02                         mapjaws_13: 	dc.b $2
0000C0FA F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000C0FF F505 401C 10               	dc.b $F5, $5, $40, $1C, $10
0000C104 02                         mapjaws_1E: 	dc.b $2
0000C105 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000C10A F505 5018 10               	dc.b $F5, $5, $50, $18, $10
0000C10F 02                         mapjaws_29: 	dc.b $2
0000C110 F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000C115 F505 501C 10               	dc.b $F5, $5, $50, $1C, $10
0000C11A                            	even
0000C11A                            	even
0000C11A                            
0000C11A                            ; ===========================================================================
0000C11A                            ; ---------------------------------------------------------------------------
0000C11A                            ; Object 2D - Burrobot enemy (LZ)
0000C11A                            ; ---------------------------------------------------------------------------
0000C11A                            
0000C11A                            Obj2D:					; XREF: Obj_Index
0000C11A 7000                       		moveq	#0,d0
0000C11C 1028 0024                  		move.b	$24(a0),d0
0000C120 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000C124 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000C128                            ; ===========================================================================
0000C128 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000C12A 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000C12C                            ; ===========================================================================
0000C12C                            
0000C12C                            Obj2D_Main:				; XREF: Obj2D_Index
0000C12C 5428 0024                  		addq.b	#2,$24(a0)
0000C130 117C 0013 0016             		move.b	#$13,$16(a0)
0000C136 117C 0008 0017             		move.b	#8,$17(a0)
0000C13C 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000C144 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000C14A 0028 0004 0001             		ori.b	#4,1(a0)
0000C150 117C 0004 0018             		move.b	#4,$18(a0)
0000C156 117C 0005 0020             		move.b	#5,$20(a0)
0000C15C 117C 000C 0019             		move.b	#$C,$19(a0)
0000C162 5028 0025                  		addq.b	#8,$25(a0)	; run "Obj2D_ChkSonic" routine
0000C166 117C 0004 001C             		move.b	#4,$1C(a0)
0000C16C                            
0000C16C                            Obj2D_Action:				; XREF: Obj2D_Index
0000C16C 7000                       		moveq	#0,d0
0000C16E 1028 0025                  		move.b	$25(a0),d0
0000C172 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000C176 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000C17A 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000C180 6100 FA0C                  		bsr.w	AnimateSprite
0000C184 6000 0000                  		bra.w	MarkObjGone
0000C188                            ; ===========================================================================
0000C188 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000C18A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000C18C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000C18E 0000                       		dc.w Obj2D_Jump2-Obj2D_Index2
0000C190 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000C192                            ; ===========================================================================
0000C192                            
0000C192                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000C192 5368 0030                  		subq.w	#1,$30(a0)
0000C196 6A00                       		bpl.s	locret_AD42
0000C198 5428 0025                  		addq.b	#2,$25(a0)
0000C19C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C1A2 317C 0080 0010             		move.w	#$80,$10(a0)
0000C1A8 117C 0001 001C             		move.b	#1,$1C(a0)
0000C1AE 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000C1B4 6700                       		beq.s	locret_AD42
0000C1B6 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000C1BA                            
0000C1BA                            locret_AD42:
0000C1BA 4E75                       		rts	
0000C1BC                            ; ===========================================================================
0000C1BC                            
0000C1BC                            Obj2D_Move:				; XREF: Obj2D_Index2
0000C1BC 5368 0030                  		subq.w	#1,$30(a0)
0000C1C0 6B00                       		bmi.s	loc_AD84
0000C1C2 6100 0000                  		bsr.w	SpeedToPos
0000C1C6 0868 0000 0032             		bchg	#0,$32(a0)
0000C1CC 6600                       		bne.s	loc_AD78
0000C1CE 3628 0008                  		move.w	8(a0),d3
0000C1D2 0643 000C                  		addi.w	#$C,d3
0000C1D6 0828 0000 0022             		btst	#0,$22(a0)
0000C1DC 6600                       		bne.s	loc_AD6A
0000C1DE 0443 0018                  		subi.w	#$18,d3
0000C1E2                            
0000C1E2                            loc_AD6A:
0000C1E2 4EB9 0000 0000             		jsr	ObjHitFloor2
0000C1E8 0C41 000C                  		cmpi.w	#$C,d1
0000C1EC 6C00                       		bge.s	loc_AD84
0000C1EE 4E75                       		rts	
0000C1F0                            ; ===========================================================================
0000C1F0                            
0000C1F0                            loc_AD78:				; XREF: Obj2D_Move
0000C1F0 4EB9 0000 0000             		jsr	ObjHitFloor
0000C1F6 D368 000C                  		add.w	d1,$C(a0)
0000C1FA 4E75                       		rts	
0000C1FC                            ; ===========================================================================
0000C1FC                            
0000C1FC                            loc_AD84:				; XREF: Obj2D_Move
0000C1FC 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000C202 6700                       		beq.s	loc_ADA4
0000C204 5528 0025                  		subq.b	#2,$25(a0)
0000C208 317C 003B 0030             		move.w	#$3B,$30(a0)
0000C20E 317C 0000 0010             		move.w	#0,$10(a0)
0000C214 117C 0000 001C             		move.b	#0,$1C(a0)
0000C21A 4E75                       		rts	
0000C21C                            ; ===========================================================================
0000C21C                            
0000C21C                            loc_ADA4:
0000C21C 5428 0025                  		addq.b	#2,$25(a0)
0000C220 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C226 117C 0002 001C             		move.b	#2,$1C(a0)
0000C22C 4E75                       		rts	
0000C22E                            ; ===========================================================================
0000C22E                            
0000C22E                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000C22E 6100 0000                  		bsr.w	SpeedToPos
0000C232 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C238 6B00                       		bmi.s	locret_ADF0
0000C23A 117C 0003 001C             		move.b	#3,$1C(a0)
0000C240 4EB9 0000 0000             		jsr	ObjHitFloor
0000C246 4A41                       		tst.w	d1
0000C248 6A00                       		bpl.s	locret_ADF0
0000C24A D368 000C                  		add.w	d1,$C(a0)
0000C24E 317C 0000 0012             		move.w	#0,$12(a0)
0000C254 117C 0001 001C             		move.b	#1,$1C(a0)
0000C25A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C260 5528 0025                  		subq.b	#2,$25(a0)
0000C264 6000 0000                  		bra.w	Obj2D_ChkSonic2
0000C268                            ; ===========================================================================
0000C268                            
0000C268                            Obj2D_Jump2:				; XREF: Obj2D_Index2
0000C268 6100 0000                  		bsr.w	SpeedToPos
0000C26C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C272 5368 0030                  		subq.w	#1,$30(a0)
0000C276 6A00                       		bpl.s	locret_ADF0
0000C278 117C 0002 001C             		move.b	#2,$1C(a0)
0000C27E 5528 0025                  		subq.b	#2,$25(a0)
0000C282                            
0000C282                            locret_ADF0:
0000C282 4E75                       		rts	
0000C284                            ; ===========================================================================
0000C284                            
0000C284                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000C284 343C 0060                  		move.w	#$60,d2
0000C288 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C28C 6400                       		bcc.s	locret_AE20
0000C28E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000C292 9068 000C                  		sub.w	$C(a0),d0
0000C296 6400                       		bcc.s	locret_AE20
0000C298 0C40 FF80                  		cmpi.w	#-$80,d0
0000C29C 6500                       		bcs.s	locret_AE20
0000C29E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000C2A2 6600                       		bne.s	locret_AE20
0000C2A4 5528 0025                  		subq.b	#2,$25(a0)
0000C2A8 317C 0004 0030             		move.w	#4,$30(a0)
0000C2AE 3141 0010                  		move.w	d1,$10(a0)
0000C2B2 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C2B8                            
0000C2B8                            locret_AE20:
0000C2B8 4E75                       		rts	
0000C2BA                            
0000C2BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C2BA                            
0000C2BA                            
0000C2BA                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000C2BA 323C 0080                  		move.w	#$80,d1
0000C2BE 08E8 0000 0022             		bset	#0,$22(a0)
0000C2C4 3038 D008                  		move.w	($FFFFD008).w,d0
0000C2C8 9068 0008                  		sub.w	8(a0),d0
0000C2CC 6400                       		bcc.s	loc_AE40
0000C2CE 4440                       		neg.w	d0
0000C2D0 4441                       		neg.w	d1
0000C2D2 08A8 0000 0022             		bclr	#0,$22(a0)
0000C2D8                            
0000C2D8                            loc_AE40:
0000C2D8 B042                       		cmp.w	d2,d0
0000C2DA 4E75                       		rts	
0000C2DC                            ; End of function Obj2D_ChkSonic2
0000C2DC                            
0000C2DC                            ; ===========================================================================
0000C2DC                            Ani_obj2D:
0000C2DC                            	include "_anim\obj2D.asm"
0000C2DC                            ; ---------------------------------------------------------------------------
0000C2DC                            ; Animation script - Burrobot enemy
0000C2DC                            ; ---------------------------------------------------------------------------
0000C2DC 0000                       		dc.w byte_AE4C-Ani_obj2D
0000C2DE 0000                       		dc.w byte_AE50-Ani_obj2D
0000C2E0 0000                       		dc.w byte_AE54-Ani_obj2D
0000C2E2 0000                       		dc.w byte_AE58-Ani_obj2D
0000C2E4 0000                       		dc.w byte_AE542-Ani_obj2D
0000C2E6 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000C2EA 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000C2EE 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000C2F2 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000C2F5 0307 08FF                  byte_AE542:	dc.b 3,	7, 8, $FF
0000C2FA 00                         		even
0000C2FA 00                         		even
0000C2FA                            
0000C2FA                            ; ---------------------------------------------------------------------------
0000C2FA                            ; Sprite mappings - Burrobot enemy (LZ)
0000C2FA                            ; ---------------------------------------------------------------------------
0000C2FA                            Map_obj2D:
0000C2FA                            	include "_maps\obj2D.asm"
0000C2FA                            burromap:
0000C2FA 0000                       burromap_0: 	dc.w burromap_12-burromap
0000C2FC 0000                       burromap_2: 	dc.w burromap_1D-burromap
0000C2FE 0000                       burromap_4: 	dc.w burromap_28-burromap
0000C300 0000                       burromap_6: 	dc.w burromap_33-burromap
0000C302 0000                       burromap_8: 	dc.w burromap_3E-burromap
0000C304 0000                       burromap_A: 	dc.w burromap_49-burromap
0000C306 0000                       burromap_C: 	dc.w burromap_54-burromap
0000C308 0000                       burromap_E: 	dc.w burromap_5F-burromap
0000C30A 0000                       burromap_10: 	dc.w burromap_65-burromap
0000C30C 02                         burromap_12: 	dc.b $2
0000C30D EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0000C312 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C317 02                         burromap_1D: 	dc.b $2
0000C318 EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C31D 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
0000C322 02                         burromap_28: 	dc.b $2
0000C323 E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C328 000A 0027 F4               	dc.b $0, $A, $0, $27, $F4
0000C32D 02                         burromap_33: 	dc.b $2
0000C32E E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C333 000A 0039 F4               	dc.b $0, $A, $0, $39, $F4
0000C338 02                         burromap_3E: 	dc.b $2
0000C339 E80A 000F F0               	dc.b $E8, $A, $0, $F, $F0
0000C33E 000A 0042 F4               	dc.b $0, $A, $0, $42, $F4
0000C343 02                         burromap_49: 	dc.b $2
0000C344 F406 004B E8               	dc.b $F4, $6, $0, $4B, $E8
0000C349 F40A 0051 F8               	dc.b $F4, $A, $0, $51, $F8
0000C34E 02                         burromap_54: 	dc.b $2
0000C34F EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C354 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C359 01                         burromap_5F: 	dc.b $1
0000C35A E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C35F 01                         burromap_65: 	dc.b $1
0000C360 E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C366 00                         	even
0000C366 00                         	even
0000C366                            
0000C366                            ; ===========================================================================
0000C366                            ; ---------------------------------------------------------------------------
0000C366                            ; Object 2F - large moving platforms (MZ)
0000C366                            ; ---------------------------------------------------------------------------
0000C366                            
0000C366                            Obj2F:					; XREF: Obj_Index
0000C366 7000                       		moveq	#0,d0
0000C368 1028 0024                  		move.b	$24(a0),d0
0000C36C 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C370 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C374                            ; ===========================================================================
0000C374 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C376 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C378                            
0000C378 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C37A 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C37C 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C37E 0140                       		dc.b 1,	$40
0000C380 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C382 0220                       		dc.b 2,	$20
0000C384                            ; ===========================================================================
0000C384                            
0000C384                            Obj2F_Main:				; XREF: Obj2F_Index
0000C384 5428 0024                  		addq.b	#2,$24(a0)
0000C388 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C390 317C C000 0002             		move.w	#$C000,2(a0)
0000C396 117C 0004 0001             		move.b	#4,1(a0)
0000C39C 117C 0005 0018             		move.b	#5,$18(a0)
0000C3A2 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C3A8 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C3AE 7000                       		moveq	#0,d0
0000C3B0 1028 0028                  		move.b	$28(a0),d0
0000C3B4 E448                       		lsr.w	#2,d0
0000C3B6 0240 001C                  		andi.w	#$1C,d0
0000C3BA 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C3BE 3019                       		move.w	(a1)+,d0
0000C3C0 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C3C4 214A 0030                  		move.l	a2,$30(a0)
0000C3C8 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C3CC 1151 0019                  		move.b	(a1),$19(a0)
0000C3D0 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C3D6 117C 0040 0016             		move.b	#$40,$16(a0)
0000C3DC 08E8 0004 0001             		bset	#4,1(a0)
0000C3E2                            
0000C3E2                            Obj2F_Action:				; XREF: Obj2F_Index
0000C3E2 6100 0000                  		bsr.w	Obj2F_Types
0000C3E6 4A28 0025                  		tst.b	$25(a0)
0000C3EA 6700                       		beq.s	Obj2F_Solid
0000C3EC 7200                       		moveq	#0,d1
0000C3EE 1228 0019                  		move.b	$19(a0),d1
0000C3F2 0641 000B                  		addi.w	#$B,d1
0000C3F6 6100 C2E6                  		bsr.w	ExitPlatform
0000C3FA 0829 0003 0022             		btst	#3,$22(a1)
0000C400 6600 0000                  		bne.w	Obj2F_Slope
0000C404 4228 0025                  		clr.b	$25(a0)
0000C408 6000                       		bra.s	Obj2F_Display
0000C40A                            ; ===========================================================================
0000C40A                            
0000C40A                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C40A 7200                       		moveq	#0,d1
0000C40C 1228 0019                  		move.b	$19(a0),d1
0000C410 0641 000B                  		addi.w	#$B,d1
0000C414 2468 0030                  		movea.l	$30(a0),a2
0000C418 3428 0008                  		move.w	8(a0),d2
0000C41C 6100 D296                  		bsr.w	SlopeObject2
0000C420 6000                       		bra.s	Obj2F_Display
0000C422                            ; ===========================================================================
0000C422                            
0000C422                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C422 7200                       		moveq	#0,d1
0000C424 1228 0019                  		move.b	$19(a0),d1
0000C428 0641 000B                  		addi.w	#$B,d1
0000C42C 343C 0020                  		move.w	#$20,d2
0000C430 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C436 6600                       		bne.s	loc_AF8E
0000C438 343C 0030                  		move.w	#$30,d2
0000C43C                            
0000C43C                            loc_AF8E:
0000C43C 2468 0030                  		movea.l	$30(a0),a2
0000C440 6100 0000                  		bsr.w	SolidObject2F
0000C444                            
0000C444                            Obj2F_Display:				; XREF: Obj2F_Action
0000C444 6100 0000                  		bsr.w	DisplaySprite
0000C448 6000 0000                  		bra.w	Obj2F_ChkDel
0000C44C                            
0000C44C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C44C                            
0000C44C                            
0000C44C                            Obj2F_Types:				; XREF: Obj2F_Action
0000C44C 7000                       		moveq	#0,d0
0000C44E 1028 0028                  		move.b	$28(a0),d0
0000C452 0240 0007                  		andi.w	#7,d0
0000C456 D040                       		add.w	d0,d0
0000C458 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C45C 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C460                            ; End of function Obj2F_Types
0000C460                            
0000C460                            ; ===========================================================================
0000C460 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C462 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C464 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C466 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C468 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C46A 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C46C                            ; ===========================================================================
0000C46C                            
0000C46C                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C46C 4E75                       		rts			; type 00 platform doesn't move
0000C46E                            ; ===========================================================================
0000C46E                            
0000C46E                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C46E 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C472 323C 0020                  		move.w	#$20,d1
0000C476 6000                       		bra.s	Obj2F_Move
0000C478                            ; ===========================================================================
0000C478                            
0000C478                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C478 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C47C 323C 0030                  		move.w	#$30,d1
0000C480 6000                       		bra.s	Obj2F_Move
0000C482                            ; ===========================================================================
0000C482                            
0000C482                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C482 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C486 323C 0040                  		move.w	#$40,d1
0000C48A 6000                       		bra.s	Obj2F_Move
0000C48C                            ; ===========================================================================
0000C48C                            
0000C48C                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C48C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C490 323C 0060                  		move.w	#$60,d1
0000C494                            
0000C494                            Obj2F_Move:
0000C494 0828 0003 0028             		btst	#3,$28(a0)
0000C49A 6700                       		beq.s	loc_AFF2
0000C49C 4440                       		neg.w	d0
0000C49E D041                       		add.w	d1,d0
0000C4A0                            
0000C4A0                            loc_AFF2:
0000C4A0 3228 002C                  		move.w	$2C(a0),d1
0000C4A4 9240                       		sub.w	d0,d1
0000C4A6 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C4AA 4E75                       		rts	
0000C4AC                            ; ===========================================================================
0000C4AC                            
0000C4AC                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C4AC 1028 0034                  		move.b	$34(a0),d0
0000C4B0 4A28 0025                  		tst.b	$25(a0)
0000C4B4 6600                       		bne.s	loc_B010
0000C4B6 5500                       		subq.b	#2,d0
0000C4B8 6400                       		bcc.s	loc_B01C
0000C4BA 7000                       		moveq	#0,d0
0000C4BC 6000                       		bra.s	loc_B01C
0000C4BE                            ; ===========================================================================
0000C4BE                            
0000C4BE                            loc_B010:
0000C4BE 5800                       		addq.b	#4,d0
0000C4C0 0C00 0040                  		cmpi.b	#$40,d0
0000C4C4 6500                       		bcs.s	loc_B01C
0000C4C6 103C 0040                  		move.b	#$40,d0
0000C4CA                            
0000C4CA                            loc_B01C:
0000C4CA 1140 0034                  		move.b	d0,$34(a0)
0000C4CE 4EB9 0000 29F6             		jsr	(CalcSine).l
0000C4D4 E848                       		lsr.w	#4,d0
0000C4D6 3200                       		move.w	d0,d1
0000C4D8 D068 002C                  		add.w	$2C(a0),d0
0000C4DC 3140 000C                  		move.w	d0,$C(a0)
0000C4E0 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C4E6 6600                       		bne.s	loc_B07A
0000C4E8 4A28 0035                  		tst.b	$35(a0)
0000C4EC 6600                       		bne.s	loc_B07A
0000C4EE 117C 0001 0035             		move.b	#1,$35(a0)
0000C4F4 6100 0000                  		bsr.w	SingleObjLoad2
0000C4F8 6600                       		bne.s	loc_B07A
0000C4FA 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000C4FE 3368 0008 0008             		move.w	8(a0),8(a1)
0000C504 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C50A 5069 002C                  		addq.w	#8,$2C(a1)
0000C50E 5769 002C                  		subq.w	#3,$2C(a1)
0000C512 0469 0040 0008             		subi.w	#$40,8(a1)
0000C518 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C51E 2348 0038                  		move.l	a0,$38(a1)
0000C522 2448                       		movea.l	a0,a2
0000C524 6100                       		bsr.s	sub_B09C
0000C526                            
0000C526                            loc_B07A:
0000C526 7400                       		moveq	#0,d2
0000C528 45E8 0036                  		lea	$36(a0),a2
0000C52C 141A                       		move.b	(a2)+,d2
0000C52E 5302                       		subq.b	#1,d2
0000C530 6500                       		bcs.s	locret_B09A
0000C532                            
0000C532                            loc_B086:
0000C532 7000                       		moveq	#0,d0
0000C534 101A                       		move.b	(a2)+,d0
0000C536 ED48                       		lsl.w	#6,d0
0000C538 0640 D000                  		addi.w	#-$3000,d0
0000C53C 3240                       		movea.w	d0,a1
0000C53E 3341 003C                  		move.w	d1,$3C(a1)
0000C542 51CA FFEE                  		dbf	d2,loc_B086
0000C546                            
0000C546                            locret_B09A:
0000C546 4E75                       		rts	
0000C548                            
0000C548                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C548                            
0000C548                            
0000C548                            sub_B09C:
0000C548 45EA 0036                  		lea	$36(a2),a2
0000C54C 7000                       		moveq	#0,d0
0000C54E 1012                       		move.b	(a2),d0
0000C550 5212                       		addq.b	#1,(a2)
0000C552 45F2 0001                  		lea	1(a2,d0.w),a2
0000C556 3009                       		move.w	a1,d0
0000C558 0440 D000                  		subi.w	#-$3000,d0
0000C55C EC48                       		lsr.w	#6,d0
0000C55E 0240 007F                  		andi.w	#$7F,d0
0000C562 1480                       		move.b	d0,(a2)
0000C564 4E75                       		rts	
0000C566                            ; End of function sub_B09C
0000C566                            
0000C566                            ; ===========================================================================
0000C566                            
0000C566                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C566 4A28 0035                  		tst.b	$35(a0)
0000C56A 6700                       		beq.s	loc_B0C6
0000C56C 4A28 0001                  		tst.b	1(a0)
0000C570 6A00                       		bpl.s	Obj2F_DelFlames
0000C572                            
0000C572                            loc_B0C6:
0000C572 3028 002A                  		move.w	$2A(a0),d0
0000C576 0240 FF80                  		andi.w	#$FF80,d0
0000C57A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C57E 0441 0080                  		subi.w	#$80,d1
0000C582 0241 FF80                  		andi.w	#$FF80,d1
0000C586 9041                       		sub.w	d1,d0
0000C588 0C40 0280                  		cmpi.w	#$280,d0
0000C58C 6300                       		bls.s	Obj2F_NoDel
0000C58E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C592 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000C596 3440                       		movea.w	d0,a2	; load address into a2
0000C598 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C59C 6000 0000                  		bra.w	DeleteObject	; and delete object
0000C5A0                            
0000C5A0                            Obj2F_NoDel:
0000C5A0 4E75                       		rts	
0000C5A2                            ; ===========================================================================
0000C5A2                            
0000C5A2                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C5A2 7400                       		moveq	#0,d2
0000C5A4                            
0000C5A4                            loc_B0E8:
0000C5A4 45E8 0036                  		lea	$36(a0),a2
0000C5A8 1412                       		move.b	(a2),d2
0000C5AA 421A                       		clr.b	(a2)+
0000C5AC 5302                       		subq.b	#1,d2
0000C5AE 6500                       		bcs.s	locret_B116
0000C5B0                            
0000C5B0                            loc_B0F4:
0000C5B0 7000                       		moveq	#0,d0
0000C5B2 1012                       		move.b	(a2),d0
0000C5B4 421A                       		clr.b	(a2)+
0000C5B6 ED48                       		lsl.w	#6,d0
0000C5B8 0640 D000                  		addi.w	#-$3000,d0
0000C5BC 3240                       		movea.w	d0,a1
0000C5BE 6100 0000                  		bsr.w	DeleteObject2
0000C5C2 51CA FFEC                  		dbf	d2,loc_B0F4
0000C5C6 117C 0000 0035             		move.b	#0,$35(a0)
0000C5CC 117C 0000 0034             		move.b	#0,$34(a0)
0000C5D2                            
0000C5D2                            locret_B116:
0000C5D2 4E75                       		rts	
0000C5D4                            ; ===========================================================================
0000C5D4                            ; ---------------------------------------------------------------------------
0000C5D4                            ; Collision data for large moving platforms (MZ)
0000C5D4                            ; ---------------------------------------------------------------------------
0000C5D4                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C620                            		even
0000C620                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C64C                            		even
0000C64C                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C698                            		even
0000C698                            ; ===========================================================================
0000C698                            ; ---------------------------------------------------------------------------
0000C698                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C698                            ; (appears when	you walk on sinking platforms)
0000C698                            ; ---------------------------------------------------------------------------
0000C698                            
0000C698                            Obj35:					; XREF: Obj_Index
0000C698 7000                       		moveq	#0,d0
0000C69A 1028 0024                  		move.b	$24(a0),d0
0000C69E 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C6A2 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C6A6                            ; ===========================================================================
0000C6A6 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C6A8 0000                       		dc.w loc_B238-Obj35_Index
0000C6AA 0000                       		dc.w Obj35_Move-Obj35_Index
0000C6AC                            ; ===========================================================================
0000C6AC                            
0000C6AC                            Obj35_Main:				; XREF: Obj35_Index
0000C6AC 5428 0024                  		addq.b	#2,$24(a0)
0000C6B0 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C6B8 317C 0345 0002             		move.w	#$345,2(a0)
0000C6BE 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C6C4 117C 0004 0001             		move.b	#4,1(a0)
0000C6CA 117C 0001 0018             		move.b	#1,$18(a0)
0000C6D0 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C6D6 117C 0008 0019             		move.b	#8,$19(a0)
0000C6DC 303C 00C8                  		move.w	#$C8,d0
0000C6E0 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play flame sound
0000C6E6 4A28 0028                  		tst.b	$28(a0)
0000C6EA 6700                       		beq.s	loc_B238
0000C6EC 5428 0024                  		addq.b	#2,$24(a0)
0000C6F0 6000 0000                  		bra.w	Obj35_Move
0000C6F4                            ; ===========================================================================
0000C6F4                            
0000C6F4                            loc_B238:				; XREF: Obj35_Index
0000C6F4 2268 0030                  		movea.l	$30(a0),a1
0000C6F8 3228 0008                  		move.w	8(a0),d1
0000C6FC 9268 002A                  		sub.w	$2A(a0),d1
0000C700 0641 000C                  		addi.w	#$C,d1
0000C704 3001                       		move.w	d1,d0
0000C706 E248                       		lsr.w	#1,d0
0000C708 1031 0000                  		move.b	(a1,d0.w),d0
0000C70C 4440                       		neg.w	d0
0000C70E D068 002C                  		add.w	$2C(a0),d0
0000C712 3400                       		move.w	d0,d2
0000C714 D068 003C                  		add.w	$3C(a0),d0
0000C718 3140 000C                  		move.w	d0,$C(a0)
0000C71C 0C41 0084                  		cmpi.w	#$84,d1
0000C720 6400                       		bcc.s	loc_B2B0
0000C722 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C72A 0C41 0080                  		cmpi.w	#$80,d1
0000C72E 6400                       		bcc.s	loc_B2B0
0000C730 2028 0008                  		move.l	8(a0),d0
0000C734 0680 0008 0000             		addi.l	#$80000,d0
0000C73A 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000C740 6600                       		bne.s	loc_B2B0
0000C742 6100 0000                  		bsr.w	SingleObjLoad2
0000C746 6600                       		bne.s	loc_B2B0
0000C748 12BC 0035                  		move.b	#$35,0(a1)
0000C74C 3368 0008 0008             		move.w	8(a0),8(a1)
0000C752 3342 002C                  		move.w	d2,$2C(a1)
0000C756 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000C75C 137C 0001 0028             		move.b	#1,$28(a1)
0000C762 2468 0038                  		movea.l	$38(a0),a2
0000C766 6100 FDE0                  		bsr.w	sub_B09C
0000C76A                            
0000C76A                            loc_B2B0:
0000C76A 6000                       		bra.s	Obj35_Animate
0000C76C                            ; ===========================================================================
0000C76C                            
0000C76C                            Obj35_Move:				; XREF: Obj35_Index
0000C76C 3028 002C                  		move.w	$2C(a0),d0
0000C770 D068 003C                  		add.w	$3C(a0),d0
0000C774 3140 000C                  		move.w	d0,$C(a0)
0000C778                            
0000C778                            Obj35_Animate:				; XREF: loc_B238
0000C778 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000C77E 6100 F40E                  		bsr.w	AnimateSprite
0000C782 6000 0000                  		bra.w	DisplaySprite
0000C786                            ; ===========================================================================
0000C786                            Ani_obj35:
0000C786                            	include "_anim\obj35.asm"
0000C786                            ; ---------------------------------------------------------------------------
0000C786                            ; Animation script - fireball that sits on the	floor (MZ)
0000C786                            ; ---------------------------------------------------------------------------
0000C786 0000                       		dc.w byte_B2CE-Ani_obj35
0000C788 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000C78E                            		even
0000C78E                            		even
0000C78E                            
0000C78E                            ; ---------------------------------------------------------------------------
0000C78E                            ; Sprite mappings - large moving platforms (MZ)
0000C78E                            ; ---------------------------------------------------------------------------
0000C78E                            Map_obj2F:
0000C78E                            	include "_maps\obj2F.asm"
0000C78E                            ; ---------------------------------------------------------------------------
0000C78E                            ; Sprite mappings - large moving platforms (MZ)
0000C78E                            ; ---------------------------------------------------------------------------
0000C78E 0000                       		dc.w byte_B2DA-Map_obj2F
0000C790 0000                       		dc.w byte_B31C-Map_obj2F
0000C792 0000                       		dc.w byte_B34F-Map_obj2F
0000C794 0D                         byte_B2DA:	dc.b $D
0000C795 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000C79A F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000C79F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C7A4 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000C7A9 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000C7AE F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C7B3 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000C7B8 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000C7BD F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000C7C2 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C7C7 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000C7CC D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000C7D1 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000C7D6 0A                         byte_B31C:	dc.b $A
0000C7D7 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000C7DC F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000C7E1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C7E6 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000C7EB E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000C7F0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C7F5 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000C7FA E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000C7FF C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000C804 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000C809 06                         byte_B34F:	dc.b 6
0000C80A D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000C80F F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C814 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000C819 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000C81E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C823 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000C828                            		even
0000C828                            		even
0000C828                            
0000C828                            ; ---------------------------------------------------------------------------
0000C828                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C828                            ; ---------------------------------------------------------------------------
0000C828                            Map_obj14:
0000C828                            	include "_maps\obj14.asm"
0000C828                            ; ---------------------------------------------------------------------------
0000C828                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C828                            ; ---------------------------------------------------------------------------
0000C828 0000                       		dc.w byte_B37A-Map_obj14
0000C82A 0000                       		dc.w byte_B380-Map_obj14
0000C82C 0000                       		dc.w byte_B386-Map_obj14
0000C82E 0000                       		dc.w byte_B38C-Map_obj14
0000C830 0000                       		dc.w byte_B392-Map_obj14
0000C832 0000                       		dc.w byte_B398-Map_obj14
0000C834 01                         byte_B37A:	dc.b 1
0000C835 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000C83A 01                         byte_B380:	dc.b 1
0000C83B E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000C840 01                         byte_B386:	dc.b 1
0000C841 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000C846 01                         byte_B38C:	dc.b 1
0000C847 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000C84C 01                         byte_B392:	dc.b 1
0000C84D F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000C852 01                         byte_B398:	dc.b 1
0000C853 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000C858                            		even
0000C858                            		even
0000C858                            
0000C858                            ; ===========================================================================
0000C858                            ; ---------------------------------------------------------------------------
0000C858                            ; Object 30 - large green glassy blocks	(MZ)
0000C858                            ; ---------------------------------------------------------------------------
0000C858                            
0000C858                            Obj30:					; XREF: Obj_Index
0000C858 7000                       		moveq	#0,d0
0000C85A 1028 0024                  		move.b	$24(a0),d0
0000C85E 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000C862 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000C866 3028 0008                  		move.w	8(a0),d0
0000C86A 0240 FF80                  		andi.w	#$FF80,d0
0000C86E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C872 0441 0080                  		subi.w	#$80,d1
0000C876 0241 FF80                  		andi.w	#$FF80,d1
0000C87A 9041                       		sub.w	d1,d0
0000C87C 0C40 0280                  		cmpi.w	#$280,d0
0000C880 6300 0000                  		bls.w	DisplaySprite
0000C884 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C888 6700                       		beq.s	Obj30_Delete		; if it's zero, don't remember object
0000C88A 3440                       		movea.w	d0,a2	; load address into a2
0000C88C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C890                            
0000C890                            Obj30_Delete:
0000C890 6000 0000                  		bra.w	DeleteObject
0000C894                            ; ===========================================================================
0000C894 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000C896 0000                       		dc.w Obj30_Block012-Obj30_Index
0000C898 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000C89A 0000                       		dc.w Obj30_Block34-Obj30_Index
0000C89C 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000C89E                            
0000C89E 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000C8A1 0400 01                    		dc.b 4,	0, 1
0000C8A4 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000C8A7 0800 01                    		dc.b 8,	0, 1
0000C8AA                            ; ===========================================================================
0000C8AA                            
0000C8AA                            Obj30_Main:				; XREF: Obj30_Index
0000C8AA 45F9 0000 C89E             		lea	(Obj30_Vars1).l,a2
0000C8B0 7201                       		moveq	#1,d1
0000C8B2 117C 0048 0016             		move.b	#$48,$16(a0)
0000C8B8 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000C8BE 6500                       		bcs.s	loc_B40C	; if yes, branch
0000C8C0 45F9 0000 C8A4             		lea	(Obj30_Vars2).l,a2
0000C8C6 7201                       		moveq	#1,d1
0000C8C8 117C 0038 0016             		move.b	#$38,$16(a0)
0000C8CE                            
0000C8CE                            loc_B40C:
0000C8CE 2248                       		movea.l	a0,a1
0000C8D0 6000                       		bra.s	Obj30_Load	; load main object
0000C8D2                            ; ===========================================================================
0000C8D2                            
0000C8D2                            Obj30_Loop:
0000C8D2 6100 0000                  		bsr.w	SingleObjLoad2
0000C8D6 6600                       		bne.s	loc_B480
0000C8D8                            
0000C8D8                            Obj30_Load:				; XREF: Obj30_Main
0000C8D8 135A 0024                  		move.b	(a2)+,$24(a1)
0000C8DC 12BC 0030                  		move.b	#$30,0(a1)
0000C8E0 3368 0008 0008             		move.w	8(a0),8(a1)
0000C8E6 101A                       		move.b	(a2)+,d0
0000C8E8 4880                       		ext.w	d0
0000C8EA D068 000C                  		add.w	$C(a0),d0
0000C8EE 3340 000C                  		move.w	d0,$C(a1)
0000C8F2 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000C8FA 337C C38E 0002             		move.w	#$C38E,2(a1)
0000C900 137C 0004 0001             		move.b	#4,1(a1)
0000C906 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C90C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C912 137C 0020 0019             		move.b	#$20,$19(a1)
0000C918 137C 0004 0018             		move.b	#4,$18(a1)
0000C91E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C922 2348 003C                  		move.l	a0,$3C(a1)
0000C926 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000C92A                            
0000C92A 137C 0010 0019             		move.b	#$10,$19(a1)
0000C930 137C 0003 0018             		move.b	#3,$18(a1)
0000C936 5029 0028                  		addq.b	#8,$28(a1)
0000C93A 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C940                            
0000C940                            loc_B480:
0000C940 317C 0090 0032             		move.w	#$90,$32(a0)
0000C946 08E8 0004 0001             		bset	#4,1(a0)
0000C94C                            
0000C94C                            Obj30_Block012:				; XREF: Obj30_Index
0000C94C 6100 0000                  		bsr.w	Obj30_Types
0000C950 323C 002B                  		move.w	#$2B,d1
0000C954 343C 0048                  		move.w	#$48,d2
0000C958 363C 0049                  		move.w	#$49,d3
0000C95C 3828 0008                  		move.w	8(a0),d4
0000C960 6000 0000                  		bra.w	SolidObject
0000C964                            ; ===========================================================================
0000C964                            
0000C964                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C964 2268 003C                  		movea.l	$3C(a0),a1
0000C968 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C96E 6000 0000                  		bra.w	Obj30_Types
0000C972                            ; ===========================================================================
0000C972                            
0000C972                            Obj30_Block34:				; XREF: Obj30_Index
0000C972 6100 0000                  		bsr.w	Obj30_Types
0000C976 323C 002B                  		move.w	#$2B,d1
0000C97A 343C 0038                  		move.w	#$38,d2
0000C97E 363C 0039                  		move.w	#$39,d3
0000C982 3828 0008                  		move.w	8(a0),d4
0000C986 6000 0000                  		bra.w	SolidObject
0000C98A                            ; ===========================================================================
0000C98A                            
0000C98A                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C98A 2268 003C                  		movea.l	$3C(a0),a1
0000C98E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C994 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C99A 6000 0002                  		bra.w	*+4
0000C99E                            
0000C99E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C99E                            
0000C99E                            
0000C99E                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C99E 7000                       		moveq	#0,d0
0000C9A0 1028 0028                  		move.b	$28(a0),d0
0000C9A4 0240 0007                  		andi.w	#7,d0
0000C9A8 D040                       		add.w	d0,d0
0000C9AA 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C9AE 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C9B2                            ; End of function Obj30_Types
0000C9B2                            
0000C9B2                            ; ===========================================================================
0000C9B2 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C9B4 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C9B6 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C9B8 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C9BA 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C9BC                            ; ===========================================================================
0000C9BC                            
0000C9BC                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C9BC 4E75                       		rts	
0000C9BE                            ; ===========================================================================
0000C9BE                            
0000C9BE                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C9BE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C9C2 323C 0040                  		move.w	#$40,d1
0000C9C6 6000                       		bra.s	loc_B514
0000C9C8                            ; ===========================================================================
0000C9C8                            
0000C9C8                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C9C8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C9CC 323C 0040                  		move.w	#$40,d1
0000C9D0 4440                       		neg.w	d0
0000C9D2 D041                       		add.w	d1,d0
0000C9D4                            
0000C9D4                            loc_B514:				; XREF: Obj30_Type01
0000C9D4 0828 0003 0028             		btst	#3,$28(a0)
0000C9DA 6700                       		beq.s	loc_B526
0000C9DC 4440                       		neg.w	d0
0000C9DE D041                       		add.w	d1,d0
0000C9E0 E208                       		lsr.b	#1,d0
0000C9E2 0640 0020                  		addi.w	#$20,d0
0000C9E6                            
0000C9E6                            loc_B526:
0000C9E6 6000 0000                  		bra.w	loc_B5EE
0000C9EA                            ; ===========================================================================
0000C9EA                            
0000C9EA                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C9EA 0828 0003 0028             		btst	#3,$28(a0)
0000C9F0 6700                       		beq.s	loc_B53E
0000C9F2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C9F6 0440 0010                  		subi.w	#$10,d0
0000C9FA 6000 0000                  		bra.w	loc_B5EE
0000C9FE                            ; ===========================================================================
0000C9FE                            
0000C9FE                            loc_B53E:
0000C9FE 0828 0003 0022             		btst	#3,$22(a0)
0000CA04 6600                       		bne.s	loc_B54E
0000CA06 08A8 0000 0034             		bclr	#0,$34(a0)
0000CA0C 6000                       		bra.s	loc_B582
0000CA0E                            ; ===========================================================================
0000CA0E                            
0000CA0E                            loc_B54E:
0000CA0E 4A28 0034                  		tst.b	$34(a0)
0000CA12 6600                       		bne.s	loc_B582
0000CA14 117C 0001 0034             		move.b	#1,$34(a0)
0000CA1A 08E8 0000 0035             		bset	#0,$35(a0)
0000CA20 6700                       		beq.s	loc_B582
0000CA22 08E8 0007 0034             		bset	#7,$34(a0)
0000CA28 317C 0010 0036             		move.w	#$10,$36(a0)
0000CA2E 117C 000A 0038             		move.b	#$A,$38(a0)
0000CA34 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000CA3A 6600                       		bne.s	loc_B582
0000CA3C 317C 0040 0036             		move.w	#$40,$36(a0)
0000CA42                            
0000CA42                            loc_B582:
0000CA42 4A28 0034                  		tst.b	$34(a0)
0000CA46 6A00                       		bpl.s	loc_B5AA
0000CA48 4A28 0038                  		tst.b	$38(a0)
0000CA4C 6700                       		beq.s	loc_B594
0000CA4E 5328 0038                  		subq.b	#1,$38(a0)
0000CA52 6600                       		bne.s	loc_B5AA
0000CA54                            
0000CA54                            loc_B594:
0000CA54 4A68 0032                  		tst.w	$32(a0)
0000CA58 6700                       		beq.s	loc_B5A4
0000CA5A 5368 0032                  		subq.w	#1,$32(a0)
0000CA5E 5368 0036                  		subq.w	#1,$36(a0)
0000CA62 6600                       		bne.s	loc_B5AA
0000CA64                            
0000CA64                            loc_B5A4:
0000CA64 08A8 0007 0034             		bclr	#7,$34(a0)
0000CA6A                            
0000CA6A                            loc_B5AA:
0000CA6A 3028 0032                  		move.w	$32(a0),d0
0000CA6E 6000                       		bra.s	loc_B5EE
0000CA70                            ; ===========================================================================
0000CA70                            
0000CA70                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000CA70 0828 0003 0028             		btst	#3,$28(a0)
0000CA76 6700                       		beq.s	Obj30_ChkSwitch
0000CA78 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000CA7C 0440 0010                  		subi.w	#$10,d0
0000CA80 6000                       		bra.s	loc_B5EE
0000CA82                            ; ===========================================================================
0000CA82                            
0000CA82                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000CA82 4A28 0034                  		tst.b	$34(a0)
0000CA86 6600                       		bne.s	loc_B5E0
0000CA88 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000CA8C 7000                       		moveq	#0,d0
0000CA8E 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000CA92 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000CA94 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000CA98 6700                       		beq.s	loc_B5EA	; if not, branch
0000CA9A 117C 0001 0034             		move.b	#1,$34(a0)
0000CAA0                            
0000CAA0                            loc_B5E0:
0000CAA0 4A68 0032                  		tst.w	$32(a0)
0000CAA4 6700                       		beq.s	loc_B5EA
0000CAA6 5568 0032                  		subq.w	#2,$32(a0)
0000CAAA                            
0000CAAA                            loc_B5EA:
0000CAAA 3028 0032                  		move.w	$32(a0),d0
0000CAAE                            
0000CAAE                            loc_B5EE:
0000CAAE 3228 0030                  		move.w	$30(a0),d1
0000CAB2 9240                       		sub.w	d0,d1
0000CAB4 3141 000C                  		move.w	d1,$C(a0)
0000CAB8 4E75                       		rts	
0000CABA                            ; ===========================================================================
0000CABA                            ; ---------------------------------------------------------------------------
0000CABA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000CABA                            ; ---------------------------------------------------------------------------
0000CABA                            Map_obj30:
0000CABA                            	include "_maps\obj30.asm"
0000CABA                            ; ---------------------------------------------------------------------------
0000CABA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000CABA                            ; ---------------------------------------------------------------------------
0000CABA 0000                       		dc.w byte_B600-Map_obj30
0000CABC 0000                       		dc.w byte_B63D-Map_obj30
0000CABE 0000                       		dc.w byte_B648-Map_obj30
0000CAC0 0C                         byte_B600:	dc.b $C
0000CAC1 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000CAC6 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000CACB C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000CAD0 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000CAD5 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000CADA E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000CADF 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000CAE4 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000CAE9 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000CAEE 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000CAF3 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000CAF8 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000CAFD 02                         byte_B63D:	dc.b 2
0000CAFE 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000CB03 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000CB08 0A                         byte_B648:	dc.b $A
0000CB09 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000CB0E C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000CB13 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000CB18 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000CB1D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000CB22 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000CB27 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000CB2C 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000CB31 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000CB36 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000CB3C 00                         		even
0000CB3C 00                         		even
0000CB3C                            
0000CB3C                            ; ===========================================================================
0000CB3C                            ; ---------------------------------------------------------------------------
0000CB3C                            ; Object 31 - stomping metal blocks on chains (MZ)
0000CB3C                            ; ---------------------------------------------------------------------------
0000CB3C                            
0000CB3C                            Obj31:					; XREF: Obj_Index
0000CB3C 7000                       		moveq	#0,d0
0000CB3E 1028 0024                  		move.b	$24(a0),d0
0000CB42 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000CB46 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000CB4A                            ; ===========================================================================
0000CB4A 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000CB4C 0000                       		dc.w loc_B798-Obj31_Index
0000CB4E 0000                       		dc.w loc_B7FE-Obj31_Index
0000CB50 0000                       		dc.w Obj31_Display2-Obj31_Index
0000CB52 0000                       		dc.w loc_B7E2-Obj31_Index
0000CB54                            
0000CB54 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000CB56 0100                       		dc.b 1,	0
0000CB58                            
0000CB58 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000CB5B 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000CB5E 08CC 03                    		dc.b 8,	$CC, 3
0000CB61 06F0 02                    		dc.b 6,	$F0, 2
0000CB64                            
0000CB64 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000CB68 5000 7800                  		dc.w $5000, $7800
0000CB6C 3800 5800                  		dc.w $3800, $5800
0000CB70 B800                       		dc.w $B800
0000CB72                            ; ===========================================================================
0000CB72                            
0000CB72                            Obj31_Main:				; XREF: Obj31_Index
0000CB72 7000                       		moveq	#0,d0
0000CB74 1028 0028                  		move.b	$28(a0),d0
0000CB78 6A00                       		bpl.s	loc_B6CE
0000CB7A 0240 007F                  		andi.w	#$7F,d0
0000CB7E D040                       		add.w	d0,d0
0000CB80 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000CB84 115A 003A                  		move.b	(a2)+,$3A(a0)
0000CB88 101A                       		move.b	(a2)+,d0
0000CB8A 1140 0028                  		move.b	d0,$28(a0)
0000CB8E                            
0000CB8E                            loc_B6CE:
0000CB8E 0200 000F                  		andi.b	#$F,d0
0000CB92 D040                       		add.w	d0,d0
0000CB94 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000CB98 4A40                       		tst.w	d0
0000CB9A 6600                       		bne.s	loc_B6E0
0000CB9C 3142 0032                  		move.w	d2,$32(a0)
0000CBA0                            
0000CBA0                            loc_B6E0:
0000CBA0 45F9 0000 CB58             		lea	(Obj31_Var).l,a2
0000CBA6 2248                       		movea.l	a0,a1
0000CBA8 7203                       		moveq	#3,d1
0000CBAA 6000                       		bra.s	Obj31_MakeStomper
0000CBAC                            ; ===========================================================================
0000CBAC                            
0000CBAC                            Obj31_Loop:
0000CBAC 6100 0000                  		bsr.w	SingleObjLoad2
0000CBB0 6600 0000                  		bne.w	Obj31_SetSize
0000CBB4                            
0000CBB4                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000CBB4 135A 0024                  		move.b	(a2)+,$24(a1)
0000CBB8 12BC 0031                  		move.b	#$31,0(a1)
0000CBBC 3368 0008 0008             		move.w	8(a0),8(a1)
0000CBC2 101A                       		move.b	(a2)+,d0
0000CBC4 4880                       		ext.w	d0
0000CBC6 D068 000C                  		add.w	$C(a0),d0
0000CBCA 3340 000C                  		move.w	d0,$C(a1)
0000CBCE 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000CBD6 337C 0300 0002             		move.w	#$300,2(a1)
0000CBDC 137C 0004 0001             		move.b	#4,1(a1)
0000CBE2 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000CBE8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CBEE 137C 0010 0019             		move.b	#$10,$19(a1)
0000CBF4 3342 0034                  		move.w	d2,$34(a1)
0000CBF8 137C 0004 0018             		move.b	#4,$18(a1)
0000CBFE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CC02 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000CC08 6600                       		bne.s	loc_B76A
0000CC0A 5341                       		subq.w	#1,d1
0000CC0C 1028 0028                  		move.b	$28(a0),d0
0000CC10 0240 00F0                  		andi.w	#$F0,d0
0000CC14 0C40 0020                  		cmpi.w	#$20,d0
0000CC18 679A                       		beq.s	Obj31_MakeStomper
0000CC1A 137C 0038 0019             		move.b	#$38,$19(a1)
0000CC20 137C 0090 0020             		move.b	#$90,$20(a1)
0000CC26 5241                       		addq.w	#1,d1
0000CC28                            
0000CC28                            loc_B76A:
0000CC28 2348 003C                  		move.l	a0,$3C(a1)
0000CC2C 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000CC30                            
0000CC30 137C 0003 0018             		move.b	#3,$18(a1)
0000CC36                            
0000CC36                            Obj31_SetSize:
0000CC36 7000                       		moveq	#0,d0
0000CC38 1028 0028                  		move.b	$28(a0),d0
0000CC3C E648                       		lsr.w	#3,d0
0000CC3E 0200 000E                  		andi.b	#$E,d0
0000CC42 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000CC46 115A 0019                  		move.b	(a2)+,$19(a0)
0000CC4A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CC4E 6000                       		bra.s	loc_B798
0000CC50                            ; ===========================================================================
0000CC50 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000CC52 3009                       		dc.b $30, 9
0000CC54 100A                       		dc.b $10, $A
0000CC56                            ; ===========================================================================
0000CC56                            
0000CC56                            loc_B798:				; XREF: Obj31_Index
0000CC56 6100 0000                  		bsr.w	Obj31_Types
0000CC5A 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000CC60 7200                       		moveq	#0,d1
0000CC62 1228 0019                  		move.b	$19(a0),d1
0000CC66 0641 000B                  		addi.w	#$B,d1
0000CC6A 343C 000C                  		move.w	#$C,d2
0000CC6E 363C 000D                  		move.w	#$D,d3
0000CC72 3828 0008                  		move.w	8(a0),d4
0000CC76 6100 0000                  		bsr.w	SolidObject
0000CC7A 0828 0003 0022             		btst	#3,$22(a0)
0000CC80 6700                       		beq.s	Obj31_Display
0000CC82 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CC88 6400                       		bcc.s	Obj31_Display
0000CC8A 2448                       		movea.l	a0,a2
0000CC8C 41F8 D000                  		lea	($FFFFD000).w,a0
0000CC90 4EB9 0000 0000             		jsr	KillSonic
0000CC96 204A                       		movea.l	a2,a0
0000CC98 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000CC9E 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0000CCA4                            
0000CCA4                            Obj31_Display:
0000CCA4 6100 0000                  		bsr.w	DisplaySprite
0000CCA8 6000 0000                  		bra.w	Obj31_ChkDel
0000CCAC                            ; ===========================================================================
0000CCAC                            
0000CCAC                            loc_B7E2:				; XREF: Obj31_Index
0000CCAC 117C 0080 0016             		move.b	#$80,$16(a0)
0000CCB2 08E8 0004 0001             		bset	#4,1(a0)
0000CCB8 2268 003C                  		movea.l	$3C(a0),a1
0000CCBC 1029 0032                  		move.b	$32(a1),d0
0000CCC0 EA08                       		lsr.b	#5,d0
0000CCC2 5600                       		addq.b	#3,d0
0000CCC4 1140 001A                  		move.b	d0,$1A(a0)
0000CCC8                            
0000CCC8                            loc_B7FE:				; XREF: Obj31_Index
0000CCC8 2268 003C                  		movea.l	$3C(a0),a1
0000CCCC 7000                       		moveq	#0,d0
0000CCCE 1029 0032                  		move.b	$32(a1),d0
0000CCD2 D068 0030                  		add.w	$30(a0),d0
0000CCD6 3140 000C                  		move.w	d0,$C(a0)
0000CCDA                            
0000CCDA                            Obj31_Display2:				; XREF: Obj31_Index
0000CCDA 6100 0000                  		bsr.w	DisplaySprite
0000CCDE                            
0000CCDE                            Obj31_ChkDel:				; XREF: Obj31_Display
0000CCDE 3028 0008                  		move.w	8(a0),d0
0000CCE2 0240 FF80                  		andi.w	#$FF80,d0
0000CCE6 3238 F700                  		move.w	($FFFFF700).w,d1
0000CCEA 0441 0080                  		subi.w	#$80,d1
0000CCEE 0241 FF80                  		andi.w	#$FF80,d1
0000CCF2 9041                       		sub.w	d1,d0
0000CCF4 0C40 0280                  		cmpi.w	#$280,d0
0000CCF8 6300                       		bls.s	Obj31_NoDel
0000CCFA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CCFE 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CD02 3640                       		movea.w	d0,a3	; load address into a2
0000CD04 0893 0007                  		bclr	#7,(a3)	; clear respawn table entry, so object can be loaded again
0000CD08 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CD0C                            
0000CD0C                            Obj31_NoDel:
0000CD0C 4E75                       		rts	
0000CD0E                            ; ===========================================================================
0000CD0E                            
0000CD0E                            Obj31_Types:				; XREF: loc_B798
0000CD0E 1028 0028                  		move.b	$28(a0),d0
0000CD12 0240 000F                  		andi.w	#$F,d0
0000CD16 D040                       		add.w	d0,d0
0000CD18 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000CD1C 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000CD20                            ; ===========================================================================
0000CD20 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000CD22 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CD24 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CD26 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CD28 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CD2A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CD2C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CD2E                            ; ===========================================================================
0000CD2E                            
0000CD2E                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000CD2E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000CD32 7000                       		moveq	#0,d0
0000CD34 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000CD38 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000CD3C 6700                       		beq.s	loc_B8A8	; if not, branch
0000CD3E 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000CD42 6A00                       		bpl.s	loc_B872
0000CD44 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CD4A 6700                       		beq.s	loc_B8A0
0000CD4C                            
0000CD4C                            loc_B872:
0000CD4C 4A68 0032                  		tst.w	$32(a0)
0000CD50 6700                       		beq.s	loc_B8A0
0000CD52 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CD56 0200 000F                  		andi.b	#$F,d0
0000CD5A 6600                       		bne.s	loc_B892
0000CD5C 4A28 0001                  		tst.b	1(a0)
0000CD60 6A00                       		bpl.s	loc_B892
0000CD62 303C 00C7                  		move.w	#$C7,d0
0000CD66 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CD6C                            
0000CD6C                            loc_B892:
0000CD6C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CD72 6400                       		bcc.s	Obj31_Restart
0000CD74 317C 0000 0032             		move.w	#0,$32(a0)
0000CD7A                            
0000CD7A                            loc_B8A0:
0000CD7A 317C 0000 0012             		move.w	#0,$12(a0)
0000CD80 6000                       		bra.s	Obj31_Restart
0000CD82                            ; ===========================================================================
0000CD82                            
0000CD82                            loc_B8A8:				; XREF: Obj31_Type00
0000CD82 3228 0034                  		move.w	$34(a0),d1
0000CD86 B268 0032                  		cmp.w	$32(a0),d1
0000CD8A 6700                       		beq.s	Obj31_Restart
0000CD8C 3028 0012                  		move.w	$12(a0),d0
0000CD90 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CD96 D168 0032                  		add.w	d0,$32(a0)
0000CD9A B268 0032                  		cmp.w	$32(a0),d1
0000CD9E 6200                       		bhi.s	Obj31_Restart
0000CDA0 3141 0032                  		move.w	d1,$32(a0)
0000CDA4 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CDAA 4A28 0001                  		tst.b	1(a0)
0000CDAE 6A00                       		bpl.s	Obj31_Restart
0000CDB0 303C 00BD                  		move.w	#$BD,d0
0000CDB4 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CDBA                            
0000CDBA                            Obj31_Restart:
0000CDBA 7000                       		moveq	#0,d0
0000CDBC 1028 0032                  		move.b	$32(a0),d0
0000CDC0 D068 0030                  		add.w	$30(a0),d0
0000CDC4 3140 000C                  		move.w	d0,$C(a0)
0000CDC8 4E75                       		rts	
0000CDCA                            ; ===========================================================================
0000CDCA                            
0000CDCA                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000CDCA 4A68 0036                  		tst.w	$36(a0)
0000CDCE 6700                       		beq.s	loc_B938
0000CDD0 4A68 0038                  		tst.w	$38(a0)
0000CDD4 6700                       		beq.s	loc_B902
0000CDD6 5368 0038                  		subq.w	#1,$38(a0)
0000CDDA 6000                       		bra.s	loc_B97C
0000CDDC                            ; ===========================================================================
0000CDDC                            
0000CDDC                            loc_B902:
0000CDDC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDE0 0200 000F                  		andi.b	#$F,d0
0000CDE4 6600                       		bne.s	loc_B91C
0000CDE6 4A28 0001                  		tst.b	1(a0)
0000CDEA 6A00                       		bpl.s	loc_B91C
0000CDEC 303C 00C7                  		move.w	#$C7,d0
0000CDF0 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CDF6                            
0000CDF6                            loc_B91C:
0000CDF6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CDFC 6400                       		bcc.s	loc_B97C
0000CDFE 317C 0000 0032             		move.w	#0,$32(a0)
0000CE04 317C 0000 0012             		move.w	#0,$12(a0)
0000CE0A 317C 0000 0036             		move.w	#0,$36(a0)
0000CE10 6000                       		bra.s	loc_B97C
0000CE12                            ; ===========================================================================
0000CE12                            
0000CE12                            loc_B938:				; XREF: Obj31_Type01
0000CE12 3228 0034                  		move.w	$34(a0),d1
0000CE16 B268 0032                  		cmp.w	$32(a0),d1
0000CE1A 6700                       		beq.s	loc_B97C
0000CE1C 3028 0012                  		move.w	$12(a0),d0
0000CE20 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CE26 D168 0032                  		add.w	d0,$32(a0)
0000CE2A B268 0032                  		cmp.w	$32(a0),d1
0000CE2E 6200                       		bhi.s	loc_B97C
0000CE30 3141 0032                  		move.w	d1,$32(a0)
0000CE34 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CE3A 317C 0001 0036             		move.w	#1,$36(a0)
0000CE40 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CE46 4A28 0001                  		tst.b	1(a0)
0000CE4A 6A00                       		bpl.s	loc_B97C
0000CE4C 303C 00BD                  		move.w	#$BD,d0
0000CE50 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CE56                            
0000CE56                            loc_B97C:
0000CE56 6000 FF62                  		bra.w	Obj31_Restart
0000CE5A                            ; ===========================================================================
0000CE5A                            
0000CE5A                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000CE5A 3038 D008                  		move.w	($FFFFD008).w,d0
0000CE5E 9068 0008                  		sub.w	8(a0),d0
0000CE62 6400                       		bcc.s	loc_B98C
0000CE64 4440                       		neg.w	d0
0000CE66                            
0000CE66                            loc_B98C:
0000CE66 0C40 0090                  		cmpi.w	#$90,d0
0000CE6A 6400                       		bcc.s	loc_B996
0000CE6C 5228 0028                  		addq.b	#1,$28(a0)
0000CE70                            
0000CE70                            loc_B996:
0000CE70 6000 FF48                  		bra.w	Obj31_Restart
0000CE74                            ; ===========================================================================
0000CE74                            ; ---------------------------------------------------------------------------
0000CE74                            ; Object 45 - spiked metal block from beta version (MZ)
0000CE74                            ; ---------------------------------------------------------------------------
0000CE74                            
0000CE74                            Obj45:					; XREF: Obj_Index
0000CE74 7000                       		moveq	#0,d0
0000CE76 1028 0024                  		move.b	$24(a0),d0
0000CE7A 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000CE7E 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000CE82                            ; ===========================================================================
0000CE82 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000CE84 0000                       		dc.w Obj45_Solid-Obj45_Index
0000CE86 0000                       		dc.w loc_BA8E-Obj45_Index
0000CE88 0000                       		dc.w Obj45_Display-Obj45_Index
0000CE8A 0000                       		dc.w loc_BA7A-Obj45_Index
0000CE8C                            
0000CE8C 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000CE8F 04E4 01                    		dc.b	4, $E4,	  1
0000CE92 0834 03                    		dc.b	8, $34,	  3
0000CE95 0628 02                    		dc.b	6, $28,	  2
0000CE98                            
0000CE98 3800                       word_B9BE:	dc.w $3800
0000CE9A A000                       		dc.w -$6000
0000CE9C 5000                       		dc.w $5000
0000CE9E                            ; ===========================================================================
0000CE9E                            
0000CE9E                            Obj45_Main:				; XREF: Obj45_Index
0000CE9E 7000                       		moveq	#0,d0
0000CEA0 1028 0028                  		move.b	$28(a0),d0
0000CEA4 D040                       		add.w	d0,d0
0000CEA6 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000CEAA 45F9 0000 CE8C             		lea	(Obj45_Var).l,a2
0000CEB0 2248                       		movea.l	a0,a1
0000CEB2 7203                       		moveq	#3,d1
0000CEB4 6000                       		bra.s	Obj45_Load
0000CEB6                            ; ===========================================================================
0000CEB6                            
0000CEB6                            Obj45_Loop:
0000CEB6 6100 0000                  		bsr.w	SingleObjLoad2
0000CEBA 6600                       		bne.s	loc_BA52
0000CEBC                            
0000CEBC                            Obj45_Load:				; XREF: Obj45_Main
0000CEBC 135A 0024                  		move.b	(a2)+,$24(a1)
0000CEC0 12BC 0045                  		move.b	#$45,0(a1)
0000CEC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CECA 101A                       		move.b	(a2)+,d0
0000CECC 4880                       		ext.w	d0
0000CECE D068 0008                  		add.w	8(a0),d0
0000CED2 3340 0008                  		move.w	d0,8(a1)
0000CED6 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000CEDE 337C 0300 0002             		move.w	#$300,2(a1)
0000CEE4 137C 0004 0001             		move.b	#4,1(a1)
0000CEEA 3369 0008 0030             		move.w	8(a1),$30(a1)
0000CEF0 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000CEF6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CEFC 137C 0020 0019             		move.b	#$20,$19(a1)
0000CF02 3342 0034                  		move.w	d2,$34(a1)
0000CF06 137C 0004 0018             		move.b	#4,$18(a1)
0000CF0C 0C12 0001                  		cmpi.b	#1,(a2)
0000CF10 6600                       		bne.s	loc_BA40
0000CF12 137C 0091 0020             		move.b	#$91,$20(a1)
0000CF18                            
0000CF18                            loc_BA40:
0000CF18 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CF1C 2348 003C                  		move.l	a0,$3C(a1)
0000CF20 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000CF24                            
0000CF24 137C 0003 0018             		move.b	#3,$18(a1)
0000CF2A                            
0000CF2A                            loc_BA52:
0000CF2A 117C 0010 0019             		move.b	#$10,$19(a0)
0000CF30                            
0000CF30                            Obj45_Solid:				; XREF: Obj45_Index
0000CF30 3F28 0008                  		move.w	8(a0),-(sp)
0000CF34 6100 0000                  		bsr.w	Obj45_Move
0000CF38 323C 0017                  		move.w	#$17,d1
0000CF3C 343C 0020                  		move.w	#$20,d2
0000CF40 363C 0020                  		move.w	#$20,d3
0000CF44 381F                       		move.w	(sp)+,d4
0000CF46 6100 0000                  		bsr.w	SolidObject
0000CF4A 6100 0000                  		bsr.w	DisplaySprite
0000CF4E 6000 0000                  		bra.w	Obj45_ChkDel
0000CF52                            ; ===========================================================================
0000CF52                            
0000CF52                            loc_BA7A:				; XREF: Obj45_Index
0000CF52 2268 003C                  		movea.l	$3C(a0),a1
0000CF56 1029 0032                  		move.b	$32(a1),d0
0000CF5A 0600 0010                  		addi.b	#$10,d0
0000CF5E EA08                       		lsr.b	#5,d0
0000CF60 5600                       		addq.b	#3,d0
0000CF62 1140 001A                  		move.b	d0,$1A(a0)
0000CF66                            
0000CF66                            loc_BA8E:				; XREF: Obj45_Index
0000CF66 2268 003C                  		movea.l	$3C(a0),a1
0000CF6A 7000                       		moveq	#0,d0
0000CF6C 1029 0032                  		move.b	$32(a1),d0
0000CF70 4440                       		neg.w	d0
0000CF72 D068 0030                  		add.w	$30(a0),d0
0000CF76 3140 0008                  		move.w	d0,8(a0)
0000CF7A                            
0000CF7A                            Obj45_Display:				; XREF: Obj45_Index
0000CF7A 6100 0000                  		bsr.w	DisplaySprite
0000CF7E                            
0000CF7E                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000CF7E 3028 003A                  		move.w	$3A(a0),d0
0000CF82 0240 FF80                  		andi.w	#$FF80,d0
0000CF86 3238 F700                  		move.w	($FFFFF700).w,d1
0000CF8A 0441 0080                  		subi.w	#$80,d1
0000CF8E 0241 FF80                  		andi.w	#$FF80,d1
0000CF92 9041                       		sub.w	d1,d0
0000CF94 0C40 0280                  		cmpi.w	#$280,d0
0000CF98 6300                       		bls.s	Obj45_NoDel
0000CF9A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CF9E 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CFA2 3440                       		movea.w	d0,a2	; load address into a2
0000CFA4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000CFA8 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CFAC                            
0000CFAC                            Obj45_NoDel:
0000CFAC 4E75                       		rts	
0000CFAE                            
0000CFAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CFAE                            
0000CFAE                            
0000CFAE                            Obj45_Move:				; XREF: Obj45_Solid
0000CFAE 7000                       		moveq	#0,d0
0000CFB0 1028 0028                  		move.b	$28(a0),d0
0000CFB4 D040                       		add.w	d0,d0
0000CFB6 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000CFBA 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000CFBE                            ; End of function Obj45_Move
0000CFBE                            
0000CFBE                            ; ===========================================================================
0000CFBE 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000CFC0 0000                       		dc.w loc_BADA-off_BAD6
0000CFC2                            ; ===========================================================================
0000CFC2                            
0000CFC2                            loc_BADA:				; XREF: off_BAD6
0000CFC2 4A68 0036                  		tst.w	$36(a0)
0000CFC6 6700                       		beq.s	loc_BB08
0000CFC8 4A68 0038                  		tst.w	$38(a0)
0000CFCC 6700                       		beq.s	loc_BAEC
0000CFCE 5368 0038                  		subq.w	#1,$38(a0)
0000CFD2 6000                       		bra.s	loc_BB3C
0000CFD4                            ; ===========================================================================
0000CFD4                            
0000CFD4                            loc_BAEC:
0000CFD4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CFDA 6400                       		bcc.s	loc_BB3C
0000CFDC 317C 0000 0032             		move.w	#0,$32(a0)
0000CFE2 317C 0000 0010             		move.w	#0,$10(a0)
0000CFE8 317C 0000 0036             		move.w	#0,$36(a0)
0000CFEE 6000                       		bra.s	loc_BB3C
0000CFF0                            ; ===========================================================================
0000CFF0                            
0000CFF0                            loc_BB08:				; XREF: loc_BADA
0000CFF0 3228 0034                  		move.w	$34(a0),d1
0000CFF4 B268 0032                  		cmp.w	$32(a0),d1
0000CFF8 6700                       		beq.s	loc_BB3C
0000CFFA 3028 0010                  		move.w	$10(a0),d0
0000CFFE 0668 0070 0010             		addi.w	#$70,$10(a0)
0000D004 D168 0032                  		add.w	d0,$32(a0)
0000D008 B268 0032                  		cmp.w	$32(a0),d1
0000D00C 6200                       		bhi.s	loc_BB3C
0000D00E 3141 0032                  		move.w	d1,$32(a0)
0000D012 317C 0000 0010             		move.w	#0,$10(a0)
0000D018 317C 0001 0036             		move.w	#1,$36(a0)
0000D01E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D024                            
0000D024                            loc_BB3C:
0000D024 7000                       		moveq	#0,d0
0000D026 1028 0032                  		move.b	$32(a0),d0
0000D02A 4440                       		neg.w	d0
0000D02C D068 0030                  		add.w	$30(a0),d0
0000D030 3140 0008                  		move.w	d0,8(a0)
0000D034 4E75                       		rts	
0000D036                            ; ===========================================================================
0000D036                            ; ---------------------------------------------------------------------------
0000D036                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D036                            ; ---------------------------------------------------------------------------
0000D036                            Map_obj31:
0000D036                            	include "_maps\obj31.asm"
0000D036                            ; ---------------------------------------------------------------------------
0000D036                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D036                            ; ---------------------------------------------------------------------------
0000D036 0000                       		dc.w byte_BB64-Map_obj31
0000D038 0000                       		dc.w byte_BB7E-Map_obj31
0000D03A 0000                       		dc.w byte_BB98-Map_obj31
0000D03C 0000                       		dc.w byte_BB9E-Map_obj31
0000D03E 0000                       		dc.w byte_BBA9-Map_obj31
0000D040 0000                       		dc.w byte_BBBE-Map_obj31
0000D042 0000                       		dc.w byte_BBDD-Map_obj31
0000D044 0000                       		dc.w byte_BC06-Map_obj31
0000D046 0000                       		dc.w byte_BC06-Map_obj31
0000D048 0000                       		dc.w byte_BC39-Map_obj31
0000D04A 0000                       		dc.w byte_BC53-Map_obj31
0000D04C 05                         byte_BB64:	dc.b 5
0000D04D F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000D052 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000D057 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D05C F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000D061 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000D066 05                         byte_BB7E:	dc.b 5
0000D067 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000D06C F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000D071 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000D076 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000D07B F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000D080 01                         byte_BB98:	dc.b 1
0000D081 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000D086 02                         byte_BB9E:	dc.b 2
0000D087 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D08C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D091 04                         byte_BBA9:	dc.b 4
0000D092 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D097 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D09C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D0A1 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D0A6 06                         byte_BBBE:	dc.b 6
0000D0A7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D0AC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D0B1 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D0B6 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D0BB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D0C0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D0C5 08                         byte_BBDD:	dc.b 8
0000D0C6 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D0CB B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D0D0 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D0D5 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D0DA E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D0DF F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D0E4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D0E9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D0EE 0A                         byte_BC06:	dc.b $A
0000D0EF 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000D0F4 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000D0F9 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D0FE B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D103 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D108 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D10D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D112 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D117 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D11C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D121 05                         byte_BC39:	dc.b 5
0000D122 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000D127 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000D12C F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000D131 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000D136 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D13B 01                         byte_BC53:	dc.b 1
0000D13C EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000D142 00                         		even
0000D142 00                         		even
0000D142                            
0000D142                            ; ---------------------------------------------------------------------------
0000D142                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D142                            ; ---------------------------------------------------------------------------
0000D142                            Map_obj45:
0000D142                            	include "_maps\obj45.asm"
0000D142                            ; ---------------------------------------------------------------------------
0000D142                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000D142                            ; ---------------------------------------------------------------------------
0000D142 0000                       		dc.w byte_BC6C-Map_obj45
0000D144 0000                       		dc.w byte_BC7C-Map_obj45
0000D146 0000                       		dc.w byte_BC8C-Map_obj45
0000D148 0000                       		dc.w byte_BC92-Map_obj45
0000D14A 0000                       		dc.w byte_BC9D-Map_obj45
0000D14C 0000                       		dc.w byte_BCB2-Map_obj45
0000D14E 0000                       		dc.w byte_BCD1-Map_obj45
0000D150 0000                       		dc.w byte_BCFA-Map_obj45
0000D152 0000                       		dc.w byte_BCFA-Map_obj45
0000D154 03                         byte_BC6C:	dc.b 3
0000D155 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000D15A 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000D15F F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000D164 03                         byte_BC7C:	dc.b 3
0000D165 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000D16A FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000D16F 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000D174 01                         byte_BC8C:	dc.b 1
0000D175 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000D17A 02                         byte_BC92:	dc.b 2
0000D17B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D180 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D185 04                         byte_BC9D:	dc.b 4
0000D186 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D18B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D190 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D195 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D19A 06                         byte_BCB2:	dc.b 6
0000D19B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D1A0 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D1A5 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D1AA F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D1AF F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D1B4 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D1B9 08                         byte_BCD1:	dc.b 8
0000D1BA F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D1BF F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D1C4 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D1C9 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D1CE F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D1D3 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D1D8 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D1DD F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D1E2 08                         byte_BCFA:	dc.b 8
0000D1E3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D1E8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D1ED F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D1F2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D1F7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D1FC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D201 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D206 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D20B F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000D210 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000D216 00                         		even
0000D216 00                         		even
0000D216                            
0000D216                            ; ===========================================================================
0000D216                            ; ---------------------------------------------------------------------------
0000D216                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000D216                            ; ---------------------------------------------------------------------------
0000D216                            
0000D216                            Obj32:					; XREF: Obj_Index
0000D216 7000                       		moveq	#0,d0
0000D218 1028 0024                  		move.b	$24(a0),d0
0000D21C 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000D220 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000D224                            ; ===========================================================================
0000D224 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000D226 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000D228                            ; ===========================================================================
0000D228                            
0000D228                            Obj32_Main:				; XREF: Obj32_Index
0000D228 5428 0024                  		addq.b	#2,$24(a0)
0000D22C 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000D234 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000D23A 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000D240 6700                       		beq.s	loc_BD60
0000D242 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000D248                            
0000D248                            loc_BD60:
0000D248 117C 0004 0001             		move.b	#4,1(a0)
0000D24E 117C 0010 0019             		move.b	#$10,$19(a0)
0000D254 117C 0004 0018             		move.b	#4,$18(a0)
0000D25A 5668 000C                  		addq.w	#3,$C(a0)
0000D25E                            
0000D25E                            Obj32_Pressed:				; XREF: Obj32_Index
0000D25E 4A28 0001                  		tst.b	1(a0)
0000D262 6A00                       		bpl.s	Obj32_Display
0000D264 323C 001B                  		move.w	#$1B,d1
0000D268 343C 0005                  		move.w	#5,d2
0000D26C 363C 0005                  		move.w	#5,d3
0000D270 3828 0008                  		move.w	8(a0),d4
0000D274 6100 0000                  		bsr.w	SolidObject
0000D278 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000D27E 1028 0028                  		move.b	$28(a0),d0
0000D282 0240 000F                  		andi.w	#$F,d0
0000D286 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000D28A 47F3 0000                  		lea	(a3,d0.w),a3
0000D28E 7600                       		moveq	#0,d3
0000D290 0828 0006 0028             		btst	#6,$28(a0)
0000D296 6700                       		beq.s	loc_BDB2
0000D298 7607                       		moveq	#7,d3
0000D29A                            
0000D29A                            loc_BDB2:
0000D29A 4A28 0028                  		tst.b	$28(a0)
0000D29E 6A00                       		bpl.s	loc_BDBE
0000D2A0 6100 0000                  		bsr.w	Obj32_MZBlock
0000D2A4 6600                       		bne.s	loc_BDC8
0000D2A6                            
0000D2A6                            loc_BDBE:
0000D2A6 4A28 0025                  		tst.b	$25(a0)
0000D2AA 6600                       		bne.s	loc_BDC8
0000D2AC 0793                       		bclr	d3,(a3)
0000D2AE 6000                       		bra.s	loc_BDDE
0000D2B0                            ; ===========================================================================
0000D2B0                            
0000D2B0                            loc_BDC8:
0000D2B0 4A13                       		tst.b	(a3)
0000D2B2 6600                       		bne.s	loc_BDD6
0000D2B4 303C 00CD                  		move.w	#$CD,d0
0000D2B8 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play switch sound
0000D2BE                            
0000D2BE                            loc_BDD6:
0000D2BE 07D3                       		bset	d3,(a3)
0000D2C0 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000D2C6                            
0000D2C6                            loc_BDDE:
0000D2C6 0828 0005 0028             		btst	#5,$28(a0)
0000D2CC 6700                       		beq.s	Obj32_Display
0000D2CE 5328 001E                  		subq.b	#1,$1E(a0)
0000D2D2 6A00                       		bpl.s	Obj32_Display
0000D2D4 117C 0007 001E             		move.b	#7,$1E(a0)
0000D2DA 0868 0001 001A             		bchg	#1,$1A(a0)
0000D2E0                            
0000D2E0                            Obj32_Display:
0000D2E0 6100 0000                  		bsr.w	DisplaySprite
0000D2E4 3028 0008                  		move.w	8(a0),d0
0000D2E8 0240 FF80                  		andi.w	#$FF80,d0
0000D2EC 3238 F700                  		move.w	($FFFFF700).w,d1
0000D2F0 0441 0080                  		subi.w	#$80,d1
0000D2F4 0241 FF80                  		andi.w	#$FF80,d1
0000D2F8 9041                       		sub.w	d1,d0
0000D2FA 0C40 0280                  		cmpi.w	#$280,d0
0000D2FE 6300                       		bls.s	Obj32_NoDel
0000D300 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D304 6700                       		beq.s	Obj32_Delete		; if it's zero, don't remember object
0000D306 3440                       		movea.w	d0,a2	; load address into a2
0000D308 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D30C 6000                       		bra.s	Obj32_Delete	; and delete object
0000D30E                            
0000D30E                            Obj32_NoDel:
0000D30E 4E75                       		rts	
0000D310                            ; ===========================================================================
0000D310                            
0000D310                            Obj32_Delete:
0000D310 6100 0000                  		bsr.w	DeleteObject
0000D314 4E75                       		rts	
0000D316                            
0000D316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D316                            
0000D316                            
0000D316                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000D316 3F03                       		move.w	d3,-(sp)
0000D318 3428 0008                  		move.w	8(a0),d2
0000D31C 3628 000C                  		move.w	$C(a0),d3
0000D320 0442 0010                  		subi.w	#$10,d2
0000D324 5143                       		subq.w	#8,d3
0000D326 383C 0020                  		move.w	#$20,d4
0000D32A 3A3C 0010                  		move.w	#$10,d5
0000D32E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000D332 3C3C 005F                  		move.w	#$5F,d6
0000D336                            
0000D336                            Obj32_MZLoop:
0000D336 4A29 0001                  		tst.b	1(a1)
0000D33A 6A00                       		bpl.s	loc_BE4E
0000D33C 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000D340 6700                       		beq.s	loc_BE5E	; if yes, branch
0000D342                            
0000D342                            loc_BE4E:
0000D342 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000D346 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000D34A                            
0000D34A 361F                       		move.w	(sp)+,d3
0000D34C 7000                       		moveq	#0,d0
0000D34E                            
0000D34E                            locret_BE5A:
0000D34E 4E75                       		rts	
0000D350                            ; ===========================================================================
0000D350 1010                       Obj32_MZData:	dc.b $10, $10
0000D352                            ; ===========================================================================
0000D352                            
0000D352                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D352 7001                       		moveq	#1,d0
0000D354 0240 003F                  		andi.w	#$3F,d0
0000D358 D040                       		add.w	d0,d0
0000D35A 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D35E 121A                       		move.b	(a2)+,d1
0000D360 4881                       		ext.w	d1
0000D362 3029 0008                  		move.w	8(a1),d0
0000D366 9041                       		sub.w	d1,d0
0000D368 9042                       		sub.w	d2,d0
0000D36A 6400                       		bcc.s	loc_BE80
0000D36C D241                       		add.w	d1,d1
0000D36E D041                       		add.w	d1,d0
0000D370 6500                       		bcs.s	loc_BE84
0000D372 60CE                       		bra.s	loc_BE4E
0000D374                            ; ===========================================================================
0000D374                            
0000D374                            loc_BE80:
0000D374 B044                       		cmp.w	d4,d0
0000D376 62CA                       		bhi.s	loc_BE4E
0000D378                            
0000D378                            loc_BE84:
0000D378 121A                       		move.b	(a2)+,d1
0000D37A 4881                       		ext.w	d1
0000D37C 3029 000C                  		move.w	$C(a1),d0
0000D380 9041                       		sub.w	d1,d0
0000D382 9043                       		sub.w	d3,d0
0000D384 6400                       		bcc.s	loc_BE9A
0000D386 D241                       		add.w	d1,d1
0000D388 D041                       		add.w	d1,d0
0000D38A 6500                       		bcs.s	loc_BE9E
0000D38C 60B4                       		bra.s	loc_BE4E
0000D38E                            ; ===========================================================================
0000D38E                            
0000D38E                            loc_BE9A:
0000D38E B045                       		cmp.w	d5,d0
0000D390 62B0                       		bhi.s	loc_BE4E
0000D392                            
0000D392                            loc_BE9E:
0000D392 361F                       		move.w	(sp)+,d3
0000D394 7001                       		moveq	#1,d0
0000D396 4E75                       		rts	
0000D398                            ; End of function Obj32_MZBlock
0000D398                            
0000D398                            ; ===========================================================================
0000D398                            ; ---------------------------------------------------------------------------
0000D398                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D398                            ; ---------------------------------------------------------------------------
0000D398                            Map_obj32:
0000D398                            	include "_maps\obj32.asm"
0000D398                            ; ---------------------------------------------------------------------------
0000D398                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D398                            ; ---------------------------------------------------------------------------
0000D398 0000                       		dc.w byte_BEAC-Map_obj32
0000D39A 0000                       		dc.w byte_BEB7-Map_obj32
0000D39C 0000                       		dc.w byte_BEC2-Map_obj32
0000D39E 0000                       		dc.w byte_BEB7-Map_obj32
0000D3A0 02                         byte_BEAC:	dc.b 2
0000D3A1 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D3A6 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D3AB 02                         byte_BEB7:	dc.b 2
0000D3AC F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D3B1 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D3B6 02                         byte_BEC2:	dc.b 2
0000D3B7 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D3BC F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D3C1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D3C6                            		even
0000D3C6                            		even
0000D3C6                            
0000D3C6                            ; ===========================================================================
0000D3C6                            ; ---------------------------------------------------------------------------
0000D3C6                            ; Object 33 - pushable blocks (MZ, LZ)
0000D3C6                            ; ---------------------------------------------------------------------------
0000D3C6                            
0000D3C6                            Obj33:					; XREF: Obj_Index
0000D3C6 7000                       		moveq	#0,d0
0000D3C8 1028 0024                  		move.b	$24(a0),d0
0000D3CC 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D3D0 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D3D4                            ; ===========================================================================
0000D3D4 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D3D6 0000                       		dc.w loc_BF6E-Obj33_Index
0000D3D8 0000                       		dc.w loc_C02C-Obj33_Index
0000D3DA                            
0000D3DA 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D3DC 4001                       		dc.b $40, 1
0000D3DE                            ; ===========================================================================
0000D3DE                            
0000D3DE                            Obj33_Main:				; XREF: Obj33_Index
0000D3DE 5428 0024                  		addq.b	#2,$24(a0)
0000D3E2 117C 000F 0016             		move.b	#$F,$16(a0)
0000D3E8 117C 000F 0017             		move.b	#$F,$17(a0)
0000D3EE 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D3F6 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D3FC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D402 6600                       		bne.s	loc_BF16
0000D404 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D40A                            
0000D40A                            loc_BF16:
0000D40A 117C 0004 0001             		move.b	#4,1(a0)
0000D410 117C 0003 0018             		move.b	#3,$18(a0)
0000D416 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D41C 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D422 7000                       		moveq	#0,d0
0000D424 1028 0028                  		move.b	$28(a0),d0
0000D428 D040                       		add.w	d0,d0
0000D42A 0240 000E                  		andi.w	#$E,d0
0000D42E 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D432 115A 0019                  		move.b	(a2)+,$19(a0)
0000D436 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D43A 4A28 0028                  		tst.b	$28(a0)
0000D43E 6700                       		beq.s	Obj33_ChkGone
0000D440 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D446                            
0000D446                            Obj33_ChkGone:
0000D446 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D44A 6700                       		beq.s	loc_BF6E		; if it's zero, don't remember object
0000D44C 3440                       		movea.w	d0,a2	; load address into a2
0000D44E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D452 08D2 0000                  		bset	#0,(a2)
0000D456 6600 0000                  		bne.w	DeleteObject
0000D45A                            
0000D45A                            loc_BF6E:				; XREF: Obj33_Index
0000D45A 4A28 0032                  		tst.b	$32(a0)
0000D45E 6600 0000                  		bne.w	loc_C046
0000D462 7200                       		moveq	#0,d1
0000D464 1228 0019                  		move.b	$19(a0),d1
0000D468 0641 000B                  		addi.w	#$B,d1
0000D46C 343C 0010                  		move.w	#$10,d2
0000D470 363C 0011                  		move.w	#$11,d3
0000D474 3828 0008                  		move.w	8(a0),d4
0000D478 6100 0000                  		bsr.w	loc_C186
0000D47C 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D482 6600                       		bne.s	loc_BFC6	; if not, branch
0000D484 08A8 0007 0028             		bclr	#7,$28(a0)
0000D48A 3028 0008                  		move.w	8(a0),d0
0000D48E 0C40 0A20                  		cmpi.w	#$A20,d0
0000D492 6500                       		bcs.s	loc_BFC6
0000D494 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D498 6400                       		bcc.s	loc_BFC6
0000D49A 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D49E 0440 001C                  		subi.w	#$1C,d0
0000D4A2 3140 000C                  		move.w	d0,$C(a0)
0000D4A6 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D4AC 08E8 0007 0028             		bset	#7,$28(a0)
0000D4B2                            
0000D4B2                            loc_BFC6:
0000D4B2 3028 0008                  		move.w	8(a0),d0
0000D4B6 0240 FF80                  		andi.w	#$FF80,d0
0000D4BA 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4BE 0441 0080                  		subi.w	#$80,d1
0000D4C2 0241 FF80                  		andi.w	#$FF80,d1
0000D4C6 9041                       		sub.w	d1,d0
0000D4C8 0C40 0280                  		cmpi.w	#$280,d0
0000D4CC 6300 0000                  		bls.w	DisplaySprite
0000D4D0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D4D4 6700                       		beq.s	loc_BFE6	; if it's zero, don't remember object
0000D4D6 3440                       		movea.w	d0,a2	; load address into a2
0000D4D8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D4DC                            
0000D4DC                            loc_BFE6:
0000D4DC 3028 0034                  		move.w	$34(a0),d0
0000D4E0 0240 FF80                  		andi.w	#$FF80,d0
0000D4E4 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4E8 0441 0080                  		subi.w	#$80,d1
0000D4EC 0241 FF80                  		andi.w	#$FF80,d1
0000D4F0 9041                       		sub.w	d1,d0
0000D4F2 0C40 0280                  		cmpi.w	#$280,d0
0000D4F6 6200                       		bhi.s	loc_C016
0000D4F8 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D4FE 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D504 117C 0004 0024             		move.b	#4,$24(a0)
0000D50A 6000                       		bra.s	loc_C02C
0000D50C                            ; ===========================================================================
0000D50C                            
0000D50C                            loc_C016:
0000D50C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D510 6700                       		beq.s	loc_C028		; if it's zero, don't remember object
0000D512 3440                       		movea.w	d0,a2	; load address into a2
0000D514 0892 0000                  		bclr	#0,(a2)
0000D518                            
0000D518                            loc_C028:
0000D518 6000 0000                  		bra.w	DeleteObject
0000D51C                            ; ===========================================================================
0000D51C                            
0000D51C                            loc_C02C:				; XREF: Obj33_Index
0000D51C 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D520 6700                       		beq.s	locret_C044
0000D522 117C 0002 0024             		move.b	#2,$24(a0)
0000D528 4228 0032                  		clr.b	$32(a0)
0000D52C 4268 0010                  		clr.w	$10(a0)
0000D530 4268 0012                  		clr.w	$12(a0)
0000D534                            
0000D534                            locret_C044:
0000D534 4E75                       		rts	
0000D536                            ; ===========================================================================
0000D536                            
0000D536                            loc_C046:				; XREF: loc_BF6E
0000D536 3F28 0008                  		move.w	8(a0),-(sp)
0000D53A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D540 6400                       		bcc.s	loc_C056
0000D542 6100 0000                  		bsr.w	SpeedToPos
0000D546                            
0000D546                            loc_C056:
0000D546 0828 0001 0022             		btst	#1,$22(a0)
0000D54C 6700                       		beq.s	loc_C0A0
0000D54E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D554 4EB9 0000 0000             		jsr	ObjHitFloor
0000D55A 4A41                       		tst.w	d1
0000D55C 6A00 0000                  		bpl.w	loc_C09E
0000D560 D368 000C                  		add.w	d1,$C(a0)
0000D564 4268 0012                  		clr.w	$12(a0)
0000D568 08A8 0001 0022             		bclr	#1,$22(a0)
0000D56E 3011                       		move.w	(a1),d0
0000D570 0240 03FF                  		andi.w	#$3FF,d0
0000D574 0C40 016A                  		cmpi.w	#$16A,d0
0000D578 6500                       		bcs.s	loc_C09E
0000D57A 3028 0030                  		move.w	$30(a0),d0
0000D57E E640                       		asr.w	#3,d0
0000D580 3140 0010                  		move.w	d0,$10(a0)
0000D584 117C 0001 0032             		move.b	#1,$32(a0)
0000D58A 4268 000E                  		clr.w	$E(a0)
0000D58E                            
0000D58E                            loc_C09E:
0000D58E 6000                       		bra.s	loc_C0E6
0000D590                            ; ===========================================================================
0000D590                            
0000D590                            loc_C0A0:
0000D590 4A68 0010                  		tst.w	$10(a0)
0000D594 6700 0000                  		beq.w	loc_C0D6
0000D598 6B00                       		bmi.s	loc_C0BC
0000D59A 7600                       		moveq	#0,d3
0000D59C 1628 0019                  		move.b	$19(a0),d3
0000D5A0 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D5A6 4A41                       		tst.w	d1		; has block touched a wall?
0000D5A8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D5AA 6000                       		bra.s	loc_C0E6
0000D5AC                            ; ===========================================================================
0000D5AC                            
0000D5AC                            loc_C0BC:
0000D5AC 7600                       		moveq	#0,d3
0000D5AE 1628 0019                  		move.b	$19(a0),d3
0000D5B2 4643                       		not.w	d3
0000D5B4 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D5BA 4A41                       		tst.w	d1		; has block touched a wall?
0000D5BC 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D5BE 6000                       		bra.s	loc_C0E6
0000D5C0                            ; ===========================================================================
0000D5C0                            
0000D5C0                            Obj33_StopPush:
0000D5C0 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D5C4 6000                       		bra.s	loc_C0E6
0000D5C6                            ; ===========================================================================
0000D5C6                            
0000D5C6                            loc_C0D6:
0000D5C6 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D5CE 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D5D4 6400                       		bcc.s	loc_C104
0000D5D6                            
0000D5D6                            loc_C0E6:
0000D5D6 7200                       		moveq	#0,d1
0000D5D8 1228 0019                  		move.b	$19(a0),d1
0000D5DC 0641 000B                  		addi.w	#$B,d1
0000D5E0 343C 0010                  		move.w	#$10,d2
0000D5E4 363C 0011                  		move.w	#$11,d3
0000D5E8 381F                       		move.w	(sp)+,d4
0000D5EA 6100 0000                  		bsr.w	loc_C186
0000D5EE 6100                       		bsr.s	Obj33_ChkLava
0000D5F0 6000 FEC0                  		bra.w	loc_BFC6
0000D5F4                            ; ===========================================================================
0000D5F4                            
0000D5F4                            loc_C104:
0000D5F4 381F                       		move.w	(sp)+,d4
0000D5F6 43F8 D000                  		lea	($FFFFD000).w,a1
0000D5FA 08A9 0003 0022             		bclr	#3,$22(a1)
0000D600 08A8 0003 0022             		bclr	#3,$22(a0)
0000D606 6000 FED4                  		bra.w	loc_BFE6
0000D60A                            ; ===========================================================================
0000D60A                            
0000D60A                            Obj33_ChkLava:
0000D60A 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D610 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D612 343C FFE0                  		move.w	#-$20,d2
0000D616 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D61C 6700                       		beq.s	Obj33_LoadLava
0000D61E 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D624 6700                       		beq.s	Obj33_LoadLava
0000D626 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D62C 6700                       		beq.s	Obj33_LoadLava
0000D62E 4E75                       		rts	
0000D630                            ; ===========================================================================
0000D630                            
0000D630                            Obj33_ChkLava2:
0000D630 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D636 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D638 343C 0020                  		move.w	#$20,d2
0000D63C 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D642 6700                       		beq.s	Obj33_LoadLava
0000D644 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D64A 6700                       		beq.s	Obj33_LoadLava
0000D64C                            
0000D64C                            Obj33_NoLava:
0000D64C 4E75                       		rts	
0000D64E                            ; ===========================================================================
0000D64E                            
0000D64E                            Obj33_LoadLava:
0000D64E 6100 0000                  		bsr.w	SingleObjLoad
0000D652 6600                       		bne.s	locret_C184
0000D654 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000D658 3368 0008 0008             		move.w	8(a0),8(a1)
0000D65E D569 0008                  		add.w	d2,8(a1)
0000D662 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D668 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D66E 2348 003C                  		move.l	a0,$3C(a1)
0000D672                            
0000D672                            locret_C184:
0000D672 4E75                       		rts	
0000D674                            ; ===========================================================================
0000D674                            
0000D674                            loc_C186:				; XREF: loc_BF6E
0000D674 1028 0025                  		move.b	$25(a0),d0
0000D678 6700 0000                  		beq.w	loc_C218
0000D67C 5500                       		subq.b	#2,d0
0000D67E 6600                       		bne.s	loc_C1AA
0000D680 6100 B05C                  		bsr.w	ExitPlatform
0000D684 0829 0003 0022             		btst	#3,$22(a1)
0000D68A 6600                       		bne.s	loc_C1A4
0000D68C 4228 0025                  		clr.b	$25(a0)
0000D690 4E75                       		rts	
0000D692                            ; ===========================================================================
0000D692                            
0000D692                            loc_C1A4:
0000D692 3404                       		move.w	d4,d2
0000D694 6000 B5B2                  		bra.w	MvSonicOnPtfm
0000D698                            ; ===========================================================================
0000D698                            
0000D698                            loc_C1AA:
0000D698 5500                       		subq.b	#2,d0
0000D69A 6600                       		bne.s	loc_C1F2
0000D69C 6100 0000                  		bsr.w	SpeedToPos
0000D6A0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D6A6 4EB9 0000 0000             		jsr	ObjHitFloor
0000D6AC 4A41                       		tst.w	d1
0000D6AE 6A00 0000                  		bpl.w	locret_C1F0
0000D6B2 D368 000C                  		add.w	d1,$C(a0)
0000D6B6 4268 0012                  		clr.w	$12(a0)
0000D6BA 4228 0025                  		clr.b	$25(a0)
0000D6BE 3011                       		move.w	(a1),d0
0000D6C0 0240 03FF                  		andi.w	#$3FF,d0
0000D6C4 0C40 016A                  		cmpi.w	#$16A,d0
0000D6C8 6500                       		bcs.s	locret_C1F0
0000D6CA 3028 0030                  		move.w	$30(a0),d0
0000D6CE E640                       		asr.w	#3,d0
0000D6D0 3140 0010                  		move.w	d0,$10(a0)
0000D6D4 117C 0001 0032             		move.b	#1,$32(a0)
0000D6DA 4268 000E                  		clr.w	$E(a0)
0000D6DE                            
0000D6DE                            locret_C1F0:
0000D6DE 4E75                       		rts	
0000D6E0                            ; ===========================================================================
0000D6E0                            
0000D6E0                            loc_C1F2:
0000D6E0 6100 0000                  		bsr.w	SpeedToPos
0000D6E4 3028 0008                  		move.w	8(a0),d0
0000D6E8 0240 000C                  		andi.w	#$C,d0
0000D6EC 6600 0000                  		bne.w	locret_C2E4
0000D6F0 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D6F6 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D6FC 4268 0010                  		clr.w	$10(a0)
0000D700 5528 0025                  		subq.b	#2,$25(a0)
0000D704 4E75                       		rts	
0000D706                            ; ===========================================================================
0000D706                            
0000D706                            loc_C218:
0000D706 6100 0000                  		bsr.w	loc_FAC8
0000D70A 4A44                       		tst.w	d4
0000D70C 6700 0000                  		beq.w	locret_C2E4
0000D710 6B00 0000                  		bmi.w	locret_C2E4
0000D714 4A28 0032                  		tst.b	$32(a0)
0000D718 6700                       		beq.s	loc_C230
0000D71A 6000 0000                  		bra.w	locret_C2E4
0000D71E                            ; ===========================================================================
0000D71E                            
0000D71E                            loc_C230:
0000D71E 4A40                       		tst.w	d0
0000D720 6700 0000                  		beq.w	locret_C2E4
0000D724 6B00                       		bmi.s	loc_C268
0000D726 0829 0000 0022             		btst	#0,$22(a1)
0000D72C 6600 0000                  		bne.w	locret_C2E4
0000D730 3F00                       		move.w	d0,-(sp)
0000D732 7600                       		moveq	#0,d3
0000D734 1628 0019                  		move.b	$19(a0),d3
0000D738 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D73E 301F                       		move.w	(sp)+,d0
0000D740 4A41                       		tst.w	d1
0000D742 6B00 0000                  		bmi.w	locret_C2E4
0000D746 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D74E 7001                       		moveq	#1,d0
0000D750 323C 0040                  		move.w	#$40,d1
0000D754 6000                       		bra.s	loc_C294
0000D756                            ; ===========================================================================
0000D756                            
0000D756                            loc_C268:
0000D756 0829 0000 0022             		btst	#0,$22(a1)
0000D75C 6700                       		beq.s	locret_C2E4
0000D75E 3F00                       		move.w	d0,-(sp)
0000D760 7600                       		moveq	#0,d3
0000D762 1628 0019                  		move.b	$19(a0),d3
0000D766 4643                       		not.w	d3
0000D768 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D76E 301F                       		move.w	(sp)+,d0
0000D770 4A41                       		tst.w	d1
0000D772 6B00                       		bmi.s	locret_C2E4
0000D774 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000D77C 70FF                       		moveq	#-1,d0
0000D77E 323C FFC0                  		move.w	#-$40,d1
0000D782                            
0000D782                            loc_C294:
0000D782 43F8 D000                  		lea	($FFFFD000).w,a1
0000D786 D169 0008                  		add.w	d0,8(a1)
0000D78A 3341 0020                  		move.w	d1,$20(a1)
0000D78E 337C 0000 0010             		move.w	#0,$10(a1)
0000D794 3F00                       		move.w	d0,-(sp)
0000D796 303C 00A7                  		move.w	#$A7,d0
0000D79A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play pushing sound
0000D7A0 301F                       		move.w	(sp)+,d0
0000D7A2 4A28 0028                  		tst.b	$28(a0)
0000D7A6 6B00                       		bmi.s	locret_C2E4
0000D7A8 3F00                       		move.w	d0,-(sp)
0000D7AA 4EB9 0000 0000             		jsr	ObjHitFloor
0000D7B0 301F                       		move.w	(sp)+,d0
0000D7B2 0C41 0004                  		cmpi.w	#4,d1
0000D7B6 6F00                       		ble.s	loc_C2E0
0000D7B8 317C 0400 0010             		move.w	#$400,$10(a0)
0000D7BE 4A40                       		tst.w	d0
0000D7C0 6A00                       		bpl.s	loc_C2D8
0000D7C2 4468 0010                  		neg.w	$10(a0)
0000D7C6                            
0000D7C6                            loc_C2D8:
0000D7C6 117C 0006 0025             		move.b	#6,$25(a0)
0000D7CC 6000                       		bra.s	locret_C2E4
0000D7CE                            ; ===========================================================================
0000D7CE                            
0000D7CE                            loc_C2E0:
0000D7CE D368 000C                  		add.w	d1,$C(a0)
0000D7D2                            
0000D7D2                            locret_C2E4:
0000D7D2 4E75                       		rts	
0000D7D4                            ; ===========================================================================
0000D7D4                            ; ---------------------------------------------------------------------------
0000D7D4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D7D4                            ; ---------------------------------------------------------------------------
0000D7D4                            Map_obj33:
0000D7D4                            	include "_maps\obj33.asm"
0000D7D4                            ; ---------------------------------------------------------------------------
0000D7D4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D7D4                            ; ---------------------------------------------------------------------------
0000D7D4 0000                       		dc.w byte_C2EA-Map_obj33
0000D7D6 0000                       		dc.w byte_C2F0-Map_obj33
0000D7D8 01                         byte_C2EA:	dc.b 1
0000D7D9 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000D7DE 04                         byte_C2F0:	dc.b 4
0000D7DF F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000D7E4 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000D7E9 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000D7EE F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000D7F4 00                         		even
0000D7F4 00                         		even
0000D7F4                            
0000D7F4                            ; ===========================================================================
0000D7F4                            ; ---------------------------------------------------------------------------
0000D7F4                            ; Object 34 - zone title cards
0000D7F4                            ; ---------------------------------------------------------------------------
0000D7F4                            
0000D7F4                            Obj34:					; XREF: Obj_Index
0000D7F4 7000                       		moveq	#0,d0
0000D7F6 1028 0024                  		move.b	$24(a0),d0
0000D7FA 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000D7FE 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000D802                            ; ===========================================================================
0000D802 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000D804 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000D806 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D808 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D80A                            ; ===========================================================================
0000D80A                            
0000D80A                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000D80A 2248                       		movea.l	a0,a1
0000D80C 7000                       		moveq	#0,d0
0000D80E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D812 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000D818 6600                       		bne.s	Obj34_CheckFZ
0000D81A 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000D81C                            
0000D81C                            Obj34_CheckFZ:
0000D81C 3400                       		move.w	d0,d2
0000D81E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000D824 6600                       		bne.s	Obj34_LoadConfig
0000D826 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000D828 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D82A                            
0000D82A                            Obj34_LoadConfig:
0000D82A 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000D830 E948                       		lsl.w	#4,d0
0000D832 D6C0                       		adda.w	d0,a3
0000D834 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000D83A 7203                       		moveq	#3,d1
0000D83C                            
0000D83C                            Obj34_Loop:
0000D83C 12BC 0034                  		move.b	#$34,0(a1)
0000D840 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000D844 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000D848 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000D84C 335A 000A                  		move.w	(a2)+,$A(a1)
0000D850 135A 0024                  		move.b	(a2)+,$24(a1)
0000D854 101A                       		move.b	(a2)+,d0
0000D856 6600                       		bne.s	Obj34_ActNumber
0000D858 1002                       		move.b	d2,d0
0000D85A                            
0000D85A                            Obj34_ActNumber:
0000D85A 0C00 0007                  		cmpi.b	#7,d0
0000D85E 6600                       		bne.s	Obj34_MakeSprite
0000D860 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000D864 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000D86A 6600                       		bne.s	Obj34_MakeSprite
0000D86C 5300                       		subq.b	#1,d0
0000D86E                            
0000D86E                            Obj34_MakeSprite:
0000D86E 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000D872 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000D87A 337C 8580 0002             		move.w	#$8580,2(a1)
0000D880 137C 0078 0019             		move.b	#$78,$19(a1)
0000D886 137C 0000 0001             		move.b	#0,1(a1)
0000D88C 137C 0000 0018             		move.b	#0,$18(a1)
0000D892 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000D898 43E9 0040                  		lea	$40(a1),a1	; next object
0000D89C 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000D8A0                            
0000D8A0                            Obj34_ChkPos:				; XREF: Obj34_Index
0000D8A0 7210                       		moveq	#$10,d1		; set horizontal speed
0000D8A2 3028 0030                  		move.w	$30(a0),d0
0000D8A6 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000D8AA 6700                       		beq.s	loc_C3C8	; if yes, branch
0000D8AC 6C00                       		bge.s	Obj34_Move
0000D8AE 4441                       		neg.w	d1
0000D8B0                            
0000D8B0                            Obj34_Move:
0000D8B0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D8B4                            
0000D8B4                            loc_C3C8:
0000D8B4 3028 0008                  		move.w	8(a0),d0
0000D8B8 6B00                       		bmi.s	locret_C3D8
0000D8BA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D8BE 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000D8C0 6000 0000                  		bra.w	DisplaySprite
0000D8C4                            ; ===========================================================================
0000D8C4                            
0000D8C4                            locret_C3D8:
0000D8C4 4E75                       		rts	
0000D8C6                            ; ===========================================================================
0000D8C6                            
0000D8C6                            Obj34_Wait:				; XREF: Obj34_Index
0000D8C6 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000D8CA 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000D8CC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000D8D0 6000 0000                  		bra.w	DisplaySprite
0000D8D4                            ; ===========================================================================
0000D8D4                            
0000D8D4                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000D8D4 4A28 0001                  		tst.b	1(a0)
0000D8D8 6A00                       		bpl.s	Obj34_ChangeArt
0000D8DA 7220                       		moveq	#$20,d1
0000D8DC 3028 0032                  		move.w	$32(a0),d0
0000D8E0 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000D8E4 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000D8E6 6C00                       		bge.s	Obj34_Move2
0000D8E8 4441                       		neg.w	d1
0000D8EA                            
0000D8EA                            Obj34_Move2:
0000D8EA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D8EE 3028 0008                  		move.w	8(a0),d0
0000D8F2 6B00                       		bmi.s	locret_C412
0000D8F4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D8F8 6400                       		bcc.s	locret_C412	; if yes, branch
0000D8FA 6000 0000                  		bra.w	DisplaySprite
0000D8FE                            ; ===========================================================================
0000D8FE                            
0000D8FE                            locret_C412:
0000D8FE 4E75                       		rts	
0000D900                            ; ===========================================================================
0000D900                            
0000D900                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000D900 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D906 6600                       		bne.s	Obj34_Delete
0000D908 7002                       		moveq	#2,d0
0000D90A 4EB9 0000 145E             		jsr	(LoadPLC).l	; load explosion patterns
0000D910 7000                       		moveq	#0,d0
0000D912 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D916 0640 0015                  		addi.w	#$15,d0
0000D91A 4EB9 0000 145E             		jsr	(LoadPLC).l	; load animal patterns
0000D920                            
0000D920                            Obj34_Delete:
0000D920 6000 0000                  		bra.w	DeleteObject
0000D924                            ; ===========================================================================
0000D924 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000D926 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000D928 00E4                       		dc.w $E4
0000D92A 0206                       		dc.b 2,	6
0000D92C 00EA                       		dc.w $EA
0000D92E 0207                       		dc.b 2,	7
0000D930 00E0                       		dc.w $E0
0000D932 020A                       		dc.b 2,	$A
0000D934                            ; ---------------------------------------------------------------------------
0000D934                            ; Title	card configuration data
0000D934                            ; Format:
0000D934                            ; 4 bytes per item (YYYY XXXX)
0000D934                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000D934                            ; ---------------------------------------------------------------------------
0000D934 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D944 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000D954 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D964 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D974 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D984 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D994 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D9A4                            ; ===========================================================================
0000D9A4                            ; ---------------------------------------------------------------------------
0000D9A4                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D9A4                            ; ---------------------------------------------------------------------------
0000D9A4                            
0000D9A4                            Obj39:					; XREF: Obj_Index
0000D9A4 7000                       		moveq	#0,d0
0000D9A6 1028 0024                  		move.b	$24(a0),d0
0000D9AA 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D9AE 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D9B2                            ; ===========================================================================
0000D9B2 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D9B4 0000                       		dc.w loc_C50C-Obj39_Index
0000D9B6 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D9B8                            ; ===========================================================================
0000D9B8                            
0000D9B8                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D9B8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D9BC 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D9BE 4E75                       		rts	
0000D9C0                            ; ===========================================================================
0000D9C0                            
0000D9C0                            Obj39_Main:
0000D9C0 5428 0024                  		addq.b	#2,$24(a0)
0000D9C4 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D9CA 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D9D0 6700                       		beq.s	loc_C4EC	; if not, branch
0000D9D2 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D9D8                            
0000D9D8                            loc_C4EC:
0000D9D8 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D9DE 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D9E6 317C 855E 0002             		move.w	#$855E,2(a0)
0000D9EC 117C 0000 0001             		move.b	#0,1(a0)
0000D9F2 117C 0000 0018             		move.b	#0,$18(a0)
0000D9F8                            
0000D9F8                            loc_C50C:				; XREF: Obj39_Index
0000D9F8 7210                       		moveq	#$10,d1		; set horizontal speed
0000D9FA 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000DA00 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000DA02 6500                       		bcs.s	Obj39_Move
0000DA04 4441                       		neg.w	d1
0000DA06                            
0000DA06                            Obj39_Move:
0000DA06 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DA0A 6000 0000                  		bra.w	DisplaySprite
0000DA0E                            ; ===========================================================================
0000DA0E                            
0000DA0E                            Obj39_SetWait:				; XREF: Obj39_Main
0000DA0E 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000DA14 5428 0024                  		addq.b	#2,$24(a0)
0000DA18 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000DA1E 4A38 FE18                  		tst.b	($FFFFFE18).w
0000DA22 6600                       		bne.s	@nocontinues
0000DA24 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
0000DA2A                            
0000DA2A                            	@nocontinues:
0000DA2A 4E75                       		rts	
0000DA2C                            ; ===========================================================================
0000DA2C                            
0000DA2C                            Obj39_Wait:				; XREF: Obj39_Index
0000DA2C 1038 F605                  		move.b	($FFFFF605).w,d0
0000DA30 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000DA34 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000DA36 0828 0000 001A             		btst	#0,$1A(a0)
0000DA3C 6600                       		bne.s	Obj39_Display
0000DA3E 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000DA42 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000DA44 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DA48 6000 0000                  		bra.w	DisplaySprite
0000DA4C                            ; ===========================================================================
0000DA4C                            
0000DA4C                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000DA4C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000DA50 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000DA52 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000DA58 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000DA5C 6600                       		bne.s	Obj39_Display	; if yes, branch
0000DA5E 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set mode to 0 (Sega screen)
0000DA64 6000                       		bra.s	Obj39_Display
0000DA66                            ; ===========================================================================
0000DA66                            
0000DA66                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000DA66 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DA6C                            
0000DA6C                            Obj39_Display:				; XREF: Obj39_ChgMode
0000DA6C 6000 0000                  		bra.w	DisplaySprite
0000DA70                            ; ===========================================================================
0000DA70                            ; ---------------------------------------------------------------------------
0000DA70                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000DA70                            ; ---------------------------------------------------------------------------
0000DA70                            
0000DA70                            Obj3A:					; XREF: Obj_Index
0000DA70 7000                       		moveq	#0,d0
0000DA72 1028 0024                  		move.b	$24(a0),d0
0000DA76 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000DA7A 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000DA7E                            ; ===========================================================================
0000DA7E 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000DA80 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000DA82 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DA84 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000DA86 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DA88 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000DA8A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000DA8C 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000DA8E 0000                       		dc.w loc_C766-Obj3A_Index
0000DA90                            ; ===========================================================================
0000DA90                            
0000DA90                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000DA90 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DA94 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000DA96 4E75                       		rts	
0000DA98                            ; ===========================================================================
0000DA98                            
0000DA98                            Obj3A_Main:
0000DA98 2248                       		movea.l	a0,a1
0000DA9A 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000DAA0 7206                       		moveq	#6,d1
0000DAA2                            
0000DAA2                            Obj3A_Loop:
0000DAA2 12BC 003A                  		move.b	#$3A,0(a1)
0000DAA6 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000DAAA 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000DAAE 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000DAB2 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000DAB6 135A 0024                  		move.b	(a2)+,$24(a1)
0000DABA 101A                       		move.b	(a2)+,d0
0000DABC 0C00 0006                  		cmpi.b	#6,d0
0000DAC0 6600                       		bne.s	loc_C5CA
0000DAC2 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000DAC6                            
0000DAC6                            loc_C5CA:
0000DAC6 1340 001A                  		move.b	d0,$1A(a1)
0000DACA 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000DAD2 337C 8580 0002             		move.w	#$8580,2(a1)
0000DAD8 137C 0000 0001             		move.b	#0,1(a1)
0000DADE 43E9 0040                  		lea	$40(a1),a1
0000DAE2 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000DAE6                            
0000DAE6                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000DAE6 7210                       		moveq	#$10,d1		; set horizontal speed
0000DAE8 3028 0030                  		move.w	$30(a0),d0
0000DAEC B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000DAF0 6700                       		beq.s	loc_C61A	; if yes, branch
0000DAF2 6C00                       		bge.s	Obj3A_Move
0000DAF4 4441                       		neg.w	d1
0000DAF6                            
0000DAF6                            Obj3A_Move:
0000DAF6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DAFA                            
0000DAFA                            loc_C5FE:				; XREF: loc_C61A
0000DAFA 3028 0008                  		move.w	8(a0),d0
0000DAFE 6B00                       		bmi.s	locret_C60E
0000DB00 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DB04 6400                       		bcc.s	locret_C60E	; if yes, branch
0000DB06 6000 0000                  		bra.w	DisplaySprite
0000DB0A                            ; ===========================================================================
0000DB0A                            
0000DB0A                            locret_C60E:
0000DB0A 4E75                       		rts	
0000DB0C                            ; ===========================================================================
0000DB0C                            
0000DB0C                            loc_C610:				; XREF: loc_C61A
0000DB0C 117C 000E 0024             		move.b	#$E,$24(a0)
0000DB12 6000 0000                  		bra.w	Obj3A_ChkPos2
0000DB16                            ; ===========================================================================
0000DB16                            
0000DB16                            loc_C61A:				; XREF: Obj3A_ChkPos
0000DB16 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000DB1C 67EE                       		beq.s	loc_C610
0000DB1E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000DB24 66D4                       		bne.s	loc_C5FE
0000DB26 5428 0024                  		addq.b	#2,$24(a0)
0000DB2A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DB30                            
0000DB30                            Obj3A_Wait:				; XREF: Obj3A_Index
0000DB30 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DB34 6600                       		bne.s	Obj3A_Display
0000DB36 5428 0024                  		addq.b	#2,$24(a0)
0000DB3A                            
0000DB3A                            Obj3A_Display:
0000DB3A 6000 0000                  		bra.w	DisplaySprite
0000DB3E                            ; ===========================================================================
0000DB3E                            
0000DB3E                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000DB3E 6100 0000                  		bsr.w	DisplaySprite
0000DB42 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000DB48 7000                       		moveq	#0,d0
0000DB4A 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000DB4E 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000DB50 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000DB54 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000DB5A                            
0000DB5A                            Obj3A_RingBonus:
0000DB5A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000DB5E 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000DB60 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000DB64 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000DB6A                            
0000DB6A                            Obj3A_ChkBonus:
0000DB6A 4A40                       		tst.w	d0		; is there any bonus?
0000DB6C 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000DB6E 303C 00C5                  		move.w	#$C5,d0
0000DB72 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000DB78 5428 0024                  		addq.b	#2,$24(a0)
0000DB7C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000DB82 6600                       		bne.s	Obj3A_SetDelay
0000DB84 5828 0024                  		addq.b	#4,$24(a0)
0000DB88                            
0000DB88                            Obj3A_SetDelay:
0000DB88 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DB8E                            
0000DB8E                            locret_C692:
0000DB8E 4E75                       		rts	
0000DB90                            ; ===========================================================================
0000DB90                            
0000DB90                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000DB90 4EB9 0000 0000             		jsr	AddPoints
0000DB96 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DB9A 0200 0003                  		andi.b	#3,d0
0000DB9E 66EE                       		bne.s	locret_C692
0000DBA0 303C 00CD                  		move.w	#$CD,d0
0000DBA4 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000DBAA                            ; ===========================================================================
0000DBAA                            
0000DBAA                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000DBAA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000DBAE 0240 0007                  		andi.w	#7,d0
0000DBB2 E748                       		lsl.w	#3,d0
0000DBB4 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000DBB8 0241 0003                  		andi.w	#3,d1
0000DBBC D241                       		add.w	d1,d1
0000DBBE D041                       		add.w	d1,d0
0000DBC0 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000DBC4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000DBC8 4A40                       		tst.w	d0
0000DBCA 6600                       		bne.s	Obj3A_ChkSS
0000DBCC 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to level (00)
0000DBD2 6000                       		bra.s	Obj3A_Display2
0000DBD4                            ; ===========================================================================
0000DBD4                            
0000DBD4                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000DBD4 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000DBD8 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000DBDC 6700                       		beq.s	loc_C6EA	; if not, branch
0000DBDE 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000DBE4 6000                       		bra.s	Obj3A_Display2
0000DBE6                            ; ===========================================================================
0000DBE6                            
0000DBE6                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000DBE6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DBEC                            
0000DBEC                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000DBEC 6000 0000                  		bra.w	DisplaySprite
0000DBF0                            ; ===========================================================================
0000DBF0                            ; ---------------------------------------------------------------------------
0000DBF0                            ; Level	order array
0000DBF0                            ; ---------------------------------------------------------------------------
0000DBF0                            LevelOrder:	incbin	misc\lvl_ord.bin
0000DC20                            		even
0000DC20                            ; ===========================================================================
0000DC20                            
0000DC20                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000DC20 7220                       		moveq	#$20,d1		; set horizontal speed
0000DC22 3028 0032                  		move.w	$32(a0),d0
0000DC26 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000DC2A 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000DC2C 6C00                       		bge.s	Obj3A_Move2
0000DC2E 4441                       		neg.w	d1
0000DC30                            
0000DC30                            Obj3A_Move2:
0000DC30 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DC34 3028 0008                  		move.w	8(a0),d0
0000DC38 6B00                       		bmi.s	locret_C748
0000DC3A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DC3E 6400                       		bcc.s	locret_C748	; if yes, branch
0000DC40 6000 0000                  		bra.w	DisplaySprite
0000DC44                            ; ===========================================================================
0000DC44                            
0000DC44                            locret_C748:
0000DC44 4E75                       		rts	
0000DC46                            ; ===========================================================================
0000DC46                            
0000DC46                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000DC46 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000DC4C 6600 0000                  		bne.w	DeleteObject
0000DC50 5428 0024                  		addq.b	#2,$24(a0)
0000DC54 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000DC58 303C 008D                  		move.w	#$8D,d0
0000DC5C 4EF9 0000 121A             		jmp	(PlaySound).l	; play FZ music
0000DC62                            ; ===========================================================================
0000DC62                            
0000DC62                            loc_C766:				; XREF: Obj3A_Index
0000DC62 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000DC66 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000DC6C 6700 0000                  		beq.w	DeleteObject
0000DC70 4E75                       		rts	
0000DC72                            ; ===========================================================================
0000DC72 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000DC78 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000DC7A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000DC80 0201                       		dc.b 2,	1
0000DC82 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000DC88 0206                       		dc.b 2,	6
0000DC8A 0520 0120 00EC             		dc.w $520, $120, $EC
0000DC90 0202                       		dc.b 2,	2
0000DC92 0540 0120 00FC             		dc.w $540, $120, $FC
0000DC98 0203                       		dc.b 2,	3
0000DC9A 0560 0120 010C             		dc.w $560, $120, $10C
0000DCA0 0204                       		dc.b 2,	4
0000DCA2 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000DCA8 0205                       		dc.b 2,	5
0000DCAA                            ; ===========================================================================
0000DCAA                            ; ---------------------------------------------------------------------------
0000DCAA                            ; Object 7E - special stage results screen
0000DCAA                            ; ---------------------------------------------------------------------------
0000DCAA                            
0000DCAA                            Obj7E:					; XREF: Obj_Index
0000DCAA 7000                       		moveq	#0,d0
0000DCAC 1028 0024                  		move.b	$24(a0),d0
0000DCB0 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000DCB4 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000DCB8                            ; ===========================================================================
0000DCB8 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000DCBA 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000DCBC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DCBE 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000DCC0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DCC2 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000DCC4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DCC6 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000DCC8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DCCA 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000DCCC 0000                       		dc.w loc_C91A-Obj7E_Index
0000DCCE                            ; ===========================================================================
0000DCCE                            
0000DCCE                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000DCCE 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DCD2 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000DCD4 4E75                       		rts	
0000DCD6                            ; ===========================================================================
0000DCD6                            
0000DCD6                            Obj7E_Main:
0000DCD6 2248                       		movea.l	a0,a1
0000DCD8 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000DCDE 7203                       		moveq	#3,d1
0000DCE0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000DCE6 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000DCE8 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000DCEA                            
0000DCEA                            Obj7E_Loop:
0000DCEA 12BC 007E                  		move.b	#$7E,0(a1)
0000DCEE 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000DCF2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000DCF6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000DCFA 135A 0024                  		move.b	(a2)+,$24(a1)
0000DCFE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000DD02 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000DD0A 337C A580 0002             		move.w	#$A580,2(a1)
0000DD10 137C 0000 0001             		move.b	#0,1(a1)
0000DD16 43E9 0040                  		lea	$40(a1),a1
0000DD1A 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000DD1E                            
0000DD1E 7007                       		moveq	#7,d0
0000DD20 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000DD24 6700                       		beq.s	loc_C842
0000DD26 7000                       		moveq	#0,d0
0000DD28 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000DD2C 6600                       		bne.s	loc_C842	; if not, branch
0000DD2E 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000DD30 317C 0018 0008             		move.w	#$18,8(a0)
0000DD36 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000DD3C                            
0000DD3C                            loc_C842:
0000DD3C 1140 001A                  		move.b	d0,$1A(a0)
0000DD40                            
0000DD40                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000DD40 7210                       		moveq	#$10,d1		; set horizontal speed
0000DD42 3028 0030                  		move.w	$30(a0),d0
0000DD46 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000DD4A 6700                       		beq.s	loc_C86C	; if yes, branch
0000DD4C 6C00                       		bge.s	Obj7E_Move
0000DD4E 4441                       		neg.w	d1
0000DD50                            
0000DD50                            Obj7E_Move:
0000DD50 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DD54                            
0000DD54                            loc_C85A:				; XREF: loc_C86C
0000DD54 3028 0008                  		move.w	8(a0),d0
0000DD58 6B00                       		bmi.s	locret_C86A
0000DD5A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DD5E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000DD60 6000 0000                  		bra.w	DisplaySprite
0000DD64                            ; ===========================================================================
0000DD64                            
0000DD64                            locret_C86A:
0000DD64 4E75                       		rts	
0000DD66                            ; ===========================================================================
0000DD66                            
0000DD66                            loc_C86C:				; XREF: Obj7E_ChkPos
0000DD66 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DD6C 66E6                       		bne.s	loc_C85A
0000DD6E 5428 0024                  		addq.b	#2,$24(a0)
0000DD72 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DD78 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000DD7E                            
0000DD7E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000DD7E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DD82 6600                       		bne.s	Obj7E_Display
0000DD84 5428 0024                  		addq.b	#2,$24(a0)
0000DD88                            
0000DD88                            Obj7E_Display:
0000DD88 6000 0000                  		bra.w	DisplaySprite
0000DD8C                            ; ===========================================================================
0000DD8C                            
0000DD8C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000DD8C 6100 0000                  		bsr.w	DisplaySprite
0000DD90 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000DD96 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000DD9A 6700                       		beq.s	loc_C8C4	; if yes, branch
0000DD9C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000DDA2 700A                       		moveq	#10,d0		; add 10 to score
0000DDA4 4EB9 0000 0000             		jsr	AddPoints
0000DDAA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DDAE 0200 0003                  		andi.b	#3,d0
0000DDB2 6600                       		bne.s	locret_C8EA
0000DDB4 303C 00CD                  		move.w	#$CD,d0
0000DDB8 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000DDBE                            ; ===========================================================================
0000DDBE                            
0000DDBE                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000DDBE 303C 00C5                  		move.w	#$C5,d0
0000DDC2 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000DDC8 5428 0024                  		addq.b	#2,$24(a0)
0000DDCC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DDD2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000DDD8 6500                       		bcs.s	locret_C8EA	; if not, branch
0000DDDA 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000DDE0 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000DDE4                            
0000DDE4                            locret_C8EA:
0000DDE4 4E75                       		rts	
0000DDE6                            ; ===========================================================================
0000DDE6                            
0000DDE6                            Obj7E_Exit:				; XREF: Obj7E_Index
0000DDE6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DDEC 6000 0000                  		bra.w	DisplaySprite
0000DDF0                            ; ===========================================================================
0000DDF0                            
0000DDF0                            Obj7E_Continue:				; XREF: Obj7E_Index
0000DDF0 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000DDF6 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000DDFC 303C 00BF                  		move.w	#$BF,d0
0000DE00 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play continues music
0000DE06 5428 0024                  		addq.b	#2,$24(a0)
0000DE0A 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000DE10 6000 0000                  		bra.w	DisplaySprite
0000DE14                            ; ===========================================================================
0000DE14                            
0000DE14                            loc_C91A:				; XREF: Obj7E_Index
0000DE14 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DE18 0200 000F                  		andi.b	#$F,d0
0000DE1C 6600                       		bne.s	Obj7E_Display2
0000DE1E 0868 0000 001A             		bchg	#0,$1A(a0)
0000DE24                            
0000DE24                            Obj7E_Display2:
0000DE24 6000 0000                  		bra.w	DisplaySprite
0000DE28                            ; ===========================================================================
0000DE28 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000DE2E 0200                       		dc.b 2,	0		; rountine number, frame number
0000DE30 0320 0120 0118             		dc.w $320, $120, $118
0000DE36 0201                       		dc.b 2,	1
0000DE38 0360 0120 0128             		dc.w $360, $120, $128
0000DE3E 0202                       		dc.b 2,	2
0000DE40 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000DE46 0203                       		dc.b 2,	3
0000DE48 03A0 0120 0138             		dc.w $3A0, $120, $138
0000DE4E 0206                       		dc.b 2,	6
0000DE50                            ; ===========================================================================
0000DE50                            ; ---------------------------------------------------------------------------
0000DE50                            ; Object 7F - chaos emeralds from the special stage results screen
0000DE50                            ; ---------------------------------------------------------------------------
0000DE50                            
0000DE50                            Obj7F:					; XREF: Obj_Index
0000DE50 7000                       		moveq	#0,d0
0000DE52 1028 0024                  		move.b	$24(a0),d0
0000DE56 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000DE5A 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000DE5E                            ; ===========================================================================
0000DE5E 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000DE60 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000DE62                            
0000DE62                            ; ---------------------------------------------------------------------------
0000DE62                            ; X-axis positions for chaos emeralds
0000DE62                            ; ---------------------------------------------------------------------------
0000DE62 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000DE6E                            ; ===========================================================================
0000DE6E                            
0000DE6E                            Obj7F_Main:				; XREF: Obj7F_Index
0000DE6E 2248                       		movea.l	a0,a1
0000DE70 45F9 0000 DE62             		lea	(Obj7F_PosData).l,a2
0000DE76 7400                       		moveq	#0,d2
0000DE78 7200                       		moveq	#0,d1
0000DE7A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000DE7E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000DE80 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000DE84                            
0000DE84                            Obj7F_Loop:
0000DE84 12BC 007F                  		move.b	#$7F,0(a1)
0000DE88 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000DE8C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000DE92 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000DE96 1633 2000                  		move.b	(a3,d2.w),d3
0000DE9A 1343 001A                  		move.b	d3,$1A(a1)
0000DE9E 1343 001C                  		move.b	d3,$1C(a1)
0000DEA2 5202                       		addq.b	#1,d2
0000DEA4 5429 0024                  		addq.b	#2,$24(a1)
0000DEA8 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000DEB0 337C 8541 0002             		move.w	#$8541,2(a1)
0000DEB6 137C 0000 0001             		move.b	#0,1(a1)
0000DEBC 43E9 0040                  		lea	$40(a1),a1	; next object
0000DEC0 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000DEC4                            
0000DEC4                            Obj7F_Flash:				; XREF: Obj7F_Index
0000DEC4 1028 001A                  		move.b	$1A(a0),d0
0000DEC8 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000DECE 0C00 0006                  		cmpi.b	#6,d0
0000DED2 6600                       		bne.s	Obj7F_Display
0000DED4 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000DEDA                            
0000DEDA                            Obj7F_Display:
0000DEDA 6000 0000                  		bra.w	DisplaySprite
0000DEDE                            ; ===========================================================================
0000DEDE                            ; ---------------------------------------------------------------------------
0000DEDE                            ; Sprite mappings - zone title cards
0000DEDE                            ; ---------------------------------------------------------------------------
0000DEDE 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000DEE0 0000                       		dc.w byte_CA2C-Map_obj34
0000DEE2 0000                       		dc.w byte_CA5A-Map_obj34
0000DEE4 0000                       		dc.w byte_CA7A-Map_obj34
0000DEE6 0000                       		dc.w byte_CAA8-Map_obj34
0000DEE8 0000                       		dc.w byte_CADC-Map_obj34
0000DEEA 0000                       		dc.w byte_CB10-Map_obj34
0000DEEC 0000                       		dc.w byte_CB26-Map_obj34
0000DEEE 0000                       		dc.w byte_CB31-Map_obj34
0000DEF0 0000                       		dc.w byte_CB3C-Map_obj34
0000DEF2 0000                       		dc.w byte_CB47-Map_obj34
0000DEF4 0000                       		dc.w byte_CB8A-Map_obj34
0000DEF6 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000DEF7 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000DEFC F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000DF01 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000DF06 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000DF0B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DF10 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000DF15 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000DF1A F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000DF1F F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000DF24 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000DF25 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000DF2A F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000DF2F F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000DF34 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000DF39 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000DF3E F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000DF43 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000DF48 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DF4D F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000DF52 06                         byte_CA5A:	dc.b 6			; MARBLE
0000DF53 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000DF58 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DF5D F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000DF62 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000DF67 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000DF6C F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000DF71 00                         		dc.b 0
0000DF72 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000DF73 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000DF78 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000DF7D F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000DF82 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000DF87 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000DF8C F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000DF91 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000DF96 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000DF9B F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000DFA0 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000DFA1 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DFA6 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000DFAB F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DFB0 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DFB5 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000DFBA F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000DFBF F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000DFC4 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000DFC9 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000DFCE F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000DFD3 00                         		dc.b 0
0000DFD4 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000DFD5 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DFDA F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000DFDF F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DFE4 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000DFE9 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000DFEE F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000DFF3 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000DFF8 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000DFFD F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000E002 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000E007 00                         		dc.b 0
0000E008 04                         byte_CB10:	dc.b 4			; ZONE
0000E009 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000E00E F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000E013 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000E018 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E01D 00                         		dc.b 0
0000E01E 02                         byte_CB26:	dc.b 2			; ACT 1
0000E01F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E024 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000E029 02                         byte_CB31:	dc.b 2			; ACT 2
0000E02A 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E02F F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000E034 02                         byte_CB3C:	dc.b 2			; ACT 3
0000E035 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E03A F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000E03F 0D                         byte_CB47:	dc.b $D			; Oval
0000E040 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000E045 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000E04A EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000E04F F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000E054 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000E059 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000E05E 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000E063 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000E068 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000E06D F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000E072 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000E077 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000E07C 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000E081 00                         		dc.b 0
0000E082 05                         byte_CB8A:	dc.b 5			; FINAL
0000E083 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000E088 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000E08D F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000E092 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000E097 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000E09C                            		even
0000E09C                            ; ---------------------------------------------------------------------------
0000E09C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E09C                            ; ---------------------------------------------------------------------------
0000E09C                            Map_obj39:
0000E09C                            	include "_maps\obj39.asm"
0000E09C                            ; ---------------------------------------------------------------------------
0000E09C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E09C                            ; ---------------------------------------------------------------------------
0000E09C 0000                       		dc.w byte_CBAC-Map_obj39
0000E09E 0000                       		dc.w byte_CBB7-Map_obj39
0000E0A0 0000                       		dc.w byte_CBC2-Map_obj39
0000E0A2 0000                       		dc.w byte_CBCD-Map_obj39
0000E0A4 02                         byte_CBAC:	dc.b 2
0000E0A5 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000E0AA F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000E0AF 02                         byte_CBB7:	dc.b 2
0000E0B0 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000E0B5 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000E0BA 02                         byte_CBC2:	dc.b 2
0000E0BB F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000E0C0 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000E0C5 02                         byte_CBCD:	dc.b 2
0000E0C6 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000E0CB F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000E0D0                            		even
0000E0D0                            		even
0000E0D0                            
0000E0D0                            ; ---------------------------------------------------------------------------
0000E0D0                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000E0D0                            ; ---------------------------------------------------------------------------
0000E0D0 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000E0D2 0000                       		dc.w byte_CC13-Map_obj3A
0000E0D4 0000                       		dc.w byte_CC32-Map_obj3A
0000E0D6 0000                       		dc.w byte_CC51-Map_obj3A
0000E0D8 0000                       		dc.w byte_CC75-Map_obj3A
0000E0DA FF6F                       		dc.w byte_CB47-Map_obj3A
0000E0DC FF4E                       		dc.w byte_CB26-Map_obj3A
0000E0DE FF59                       		dc.w byte_CB31-Map_obj3A
0000E0E0 FF64                       		dc.w byte_CB3C-Map_obj3A
0000E0E2 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000E0E3 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000E0E8 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000E0ED F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000E0F2 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000E0F7 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000E0FC F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000E101 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000E106 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000E10B 06                         byte_CC13:	dc.b 6			; PASSED
0000E10C F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000E111 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000E116 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000E11B F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000E120 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E125 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000E12A 06                         byte_CC32:	dc.b 6			; SCORE
0000E12B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E130 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E135 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E13A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E13F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E144 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E149 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000E14A F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000E14F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E154 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E159 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E15E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E163 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000E168 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E16D 07                         byte_CC75:	dc.b 7			; RING BONUS
0000E16E F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E173 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E178 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E17D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E182 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E187 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E18C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E192 00                         		even
0000E192                            ; ---------------------------------------------------------------------------
0000E192                            ; Sprite mappings - special stage results screen
0000E192                            ; ---------------------------------------------------------------------------
0000E192 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000E194 0000                       		dc.w byte_CCEE-Map_obj7E
0000E196 0000                       		dc.w byte_CD0D-Map_obj7E
0000E198 FEAD                       		dc.w byte_CB47-Map_obj7E
0000E19A 0000                       		dc.w byte_CD31-Map_obj7E
0000E19C 0000                       		dc.w byte_CD46-Map_obj7E
0000E19E 0000                       		dc.w byte_CD5B-Map_obj7E
0000E1A0 0000                       		dc.w byte_CD6B-Map_obj7E
0000E1A2 0000                       		dc.w byte_CDA8-Map_obj7E
0000E1A4 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000E1A5 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000E1AA F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000E1AF F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000E1B4 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000E1B9 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000E1BE F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000E1C3 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000E1C8 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E1CD F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000E1D2 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000E1D7 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000E1DC F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000E1E1 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000E1E6 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000E1E7 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E1EC F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E1F1 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E1F6 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E1FB F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E200 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E205 07                         byte_CD0D:	dc.b 7
0000E206 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E20B F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E210 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E215 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E21A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E21F F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E224 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E229 04                         byte_CD31:	dc.b 4
0000E22A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E22F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E234 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E239 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000E23E 04                         byte_CD46:	dc.b 4
0000E23F F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E244 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E249 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E24E F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000E253 03                         byte_CD5B:	dc.b 3
0000E254 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E259 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E25E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E263 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000E264 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000E269 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000E26E F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000E273 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000E278 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E27D F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000E282 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000E287 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000E28C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E291 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000E296 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000E29B F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000E2A0 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000E2A1 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000E2A6 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000E2AB F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000E2B0 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000E2B5 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000E2BA F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000E2BF F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000E2C4 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000E2C9 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000E2CE F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000E2D3 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000E2D8 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000E2DD F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000E2E2 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000E2E7 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000E2EC                            		even
0000E2EC                            ; ---------------------------------------------------------------------------
0000E2EC                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E2EC                            ; ---------------------------------------------------------------------------
0000E2EC                            Map_obj7F:
0000E2EC                            	include "_maps\obj7F.asm"
0000E2EC                            ; ---------------------------------------------------------------------------
0000E2EC                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E2EC                            ; ---------------------------------------------------------------------------
0000E2EC 0000                       		dc.w byte_CE02-Map_obj7F
0000E2EE 0000                       		dc.w byte_CE08-Map_obj7F
0000E2F0 0000                       		dc.w byte_CE0E-Map_obj7F
0000E2F2 0000                       		dc.w byte_CE14-Map_obj7F
0000E2F4 0000                       		dc.w byte_CE1A-Map_obj7F
0000E2F6 0000                       		dc.w byte_CE20-Map_obj7F
0000E2F8 0000                       		dc.w byte_CE26-Map_obj7F
0000E2FA 01                         byte_CE02:	dc.b 1
0000E2FB F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8
0000E300 01                         byte_CE08:	dc.b 1
0000E301 F805 2000 F8               		dc.b $F8, 5, $20,	0, $F8
0000E306 01                         byte_CE0E:	dc.b 1
0000E307 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000E30C 01                         byte_CE14:	dc.b 1
0000E30D F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000E312 01                         byte_CE1A:	dc.b 1
0000E313 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8
0000E318 01                         byte_CE20:	dc.b 1
0000E319 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8
0000E31E 00                         byte_CE26:	dc.b 0			; Blank frame
0000E320 00                         		even
0000E320 00                         		even
0000E320                            
0000E320                            ; ===========================================================================
0000E320                            ; ---------------------------------------------------------------------------
0000E320                            ; Object 36 - spikes
0000E320                            ; ---------------------------------------------------------------------------
0000E320                            
0000E320                            Obj36:					; XREF: Obj_Index
0000E320 7000                       		moveq	#0,d0
0000E322 1028 0024                  		move.b	$24(a0),d0
0000E326 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000E32A 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000E32E                            ; ===========================================================================
0000E32E 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000E330 0000                       		dc.w Obj36_Solid-Obj36_Index
0000E332                            
0000E332 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000E334 0110                       		dc.b 1,	$10
0000E336 0204                       		dc.b 2,	4
0000E338 031C                       		dc.b 3,	$1C
0000E33A 0440                       		dc.b 4,	$40
0000E33C 0510                       		dc.b 5,	$10
0000E33E                            ; ===========================================================================
0000E33E                            
0000E33E                            Obj36_Main:				; XREF: Obj36_Index
0000E33E 5428 0024                  		addq.b	#2,$24(a0)
0000E342 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000E34A 317C 051B 0002             		move.w	#$51B,2(a0)
0000E350 0028 0004 0001             		ori.b	#4,1(a0)
0000E356 117C 0004 0018             		move.b	#4,$18(a0)
0000E35C 1028 0028                  		move.b	$28(a0),d0
0000E360 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E366 0240 00F0                  		andi.w	#$F0,d0
0000E36A 43F9 0000 E332             		lea	(Obj36_Var).l,a1
0000E370 E648                       		lsr.w	#3,d0
0000E372 D2C0                       		adda.w	d0,a1
0000E374 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E378 1159 0019                  		move.b	(a1)+,$19(a0)
0000E37C 3168 0008 0030             		move.w	8(a0),$30(a0)
0000E382 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000E388                            
0000E388                            Obj36_Solid:				; XREF: Obj36_Index
0000E388 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000E38C 343C 0004                  		move.w	#4,d2
0000E390 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000E396 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000E398 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000E39E 6600                       		bne.s	Obj36_Upright	; if not, branch
0000E3A0 343C 0014                  		move.w	#$14,d2
0000E3A4                            
0000E3A4                            ; Spikes types $1x and $5x face	sideways
0000E3A4                            
0000E3A4                            Obj36_SideWays:				; XREF: Obj36_Solid
0000E3A4 323C 001B                  		move.w	#$1B,d1
0000E3A8 3602                       		move.w	d2,d3
0000E3AA 5243                       		addq.w	#1,d3
0000E3AC 3828 0008                  		move.w	8(a0),d4
0000E3B0 6100 0000                  		bsr.w	SolidObject
0000E3B4 0828 0003 0022             		btst	#3,$22(a0)
0000E3BA 6600                       		bne.s	Obj36_Display
0000E3BC 0C44 0001                  		cmpi.w	#1,d4
0000E3C0 6700                       		beq.s	Obj36_Hurt
0000E3C2 6000                       		bra.s	Obj36_Display
0000E3C4                            ; ===========================================================================
0000E3C4                            
0000E3C4                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E3C4                            
0000E3C4                            Obj36_Upright:				; XREF: Obj36_Solid
0000E3C4 7200                       		moveq	#0,d1
0000E3C6 1228 0019                  		move.b	$19(a0),d1
0000E3CA 0641 000B                  		addi.w	#$B,d1
0000E3CE 343C 0010                  		move.w	#$10,d2
0000E3D2 363C 0011                  		move.w	#$11,d3
0000E3D6 3828 0008                  		move.w	8(a0),d4
0000E3DA 6100 0000                  		bsr.w	SolidObject
0000E3DE 0828 0003 0022             		btst	#3,$22(a0)
0000E3E4 6600                       		bne.s	Obj36_Hurt
0000E3E6 4A44                       		tst.w	d4
0000E3E8 6A00                       		bpl.s	Obj36_Display
0000E3EA                            
0000E3EA                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E3EA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E3EE 6600                       		bne.s	Obj36_PreDisplay	; if yes, branch
0000E3F0 2F08                       		move.l	a0,-(sp)
0000E3F2 2448                       		movea.l	a0,a2
0000E3F4 41F8 D000                  		lea	($FFFFD000).w,a0
0000E3F8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E3FE 6400                       		bcc.s	loc_CF20
0000E400 2628 000C                  		move.l	$C(a0),d3
0000E404 3028 0012                  		move.w	$12(a0),d0
0000E408 48C0                       		ext.l	d0
0000E40A E180                       		asl.l	#8,d0
0000E40C 9680                       		sub.l	d0,d3
0000E40E 2143 000C                  		move.l	d3,$C(a0)
0000E412 4EB9 0000 0000             		jsr	HurtSonic
0000E418                            
0000E418                            loc_CF20:
0000E418 205F                       		movea.l	(sp)+,a0
0000E41A 6000                       		bra.s	Obj36_Display
0000E41C                            
0000E41C                            Obj36_PreDisplay:
0000E41C 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0000E422 6E00                       		bgt.s	Obj36_Display
0000E424 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0000E42A 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000E430                            
0000E430                            Obj36_Display:
0000E430 6100 0000                  		bsr.w	DisplaySprite
0000E434 3028 0030                  		move.w	$30(a0),d0
0000E438 0240 FF80                  		andi.w	#$FF80,d0
0000E43C 3238 F700                  		move.w	($FFFFF700).w,d1
0000E440 0441 0080                  		subi.w	#$80,d1
0000E444 0241 FF80                  		andi.w	#$FF80,d1
0000E448 9041                       		sub.w	d1,d0
0000E44A 0C40 0280                  		cmpi.w	#$280,d0
0000E44E 6300                       		bls.s	Obj36_NoDel
0000E450 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E454 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E458 3440                       		movea.w	d0,a2	; load address into a2
0000E45A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E45E 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E462                            
0000E462                            Obj36_NoDel:
0000E462 4E75                       		rts	
0000E464                            ; ===========================================================================
0000E464                            
0000E464                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E464 7000                       		moveq	#0,d0
0000E466 1028 0028                  		move.b	$28(a0),d0
0000E46A D040                       		add.w	d0,d0
0000E46C 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E470 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E474                            ; ===========================================================================
0000E474 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E476 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E478 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E47A                            ; ===========================================================================
0000E47A                            
0000E47A                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E47A 4E75                       		rts			; don't move the object
0000E47C                            ; ===========================================================================
0000E47C                            
0000E47C                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E47C 6100 0000                  		bsr.w	Obj36_Wait
0000E480 7000                       		moveq	#0,d0
0000E482 1028 0034                  		move.b	$34(a0),d0
0000E486 D068 0032                  		add.w	$32(a0),d0
0000E48A 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E48E 4E75                       		rts	
0000E490                            ; ===========================================================================
0000E490                            
0000E490                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E490 6100 0000                  		bsr.w	Obj36_Wait
0000E494 7000                       		moveq	#0,d0
0000E496 1028 0034                  		move.b	$34(a0),d0
0000E49A D068 0030                  		add.w	$30(a0),d0
0000E49E 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E4A2 4E75                       		rts	
0000E4A4                            ; ===========================================================================
0000E4A4                            
0000E4A4                            Obj36_Wait:
0000E4A4 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E4A8 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E4AA 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E4AE 6600                       		bne.s	locret_CFE6
0000E4B0 4A28 0001                  		tst.b	1(a0)
0000E4B4 6A00                       		bpl.s	locret_CFE6
0000E4B6 303C 00B6                  		move.w	#$B6,d0
0000E4BA 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E4C0 6000                       		bra.s	locret_CFE6
0000E4C2                            ; ===========================================================================
0000E4C2                            
0000E4C2                            loc_CFA4:
0000E4C2 4A68 0036                  		tst.w	$36(a0)
0000E4C6 6700                       		beq.s	loc_CFC6
0000E4C8 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E4CE 6400                       		bcc.s	locret_CFE6
0000E4D0 317C 0000 0034             		move.w	#0,$34(a0)
0000E4D6 317C 0000 0036             		move.w	#0,$36(a0)
0000E4DC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E4E2 6000                       		bra.s	locret_CFE6
0000E4E4                            ; ===========================================================================
0000E4E4                            
0000E4E4                            loc_CFC6:
0000E4E4 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E4EA 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E4F0 6500                       		bcs.s	locret_CFE6
0000E4F2 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E4F8 317C 0001 0036             		move.w	#1,$36(a0)
0000E4FE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E504                            
0000E504                            locret_CFE6:
0000E504 4E75                       		rts	
0000E506                            ; ===========================================================================
0000E506                            ; ---------------------------------------------------------------------------
0000E506                            ; Sprite mappings - spikes
0000E506                            ; ---------------------------------------------------------------------------
0000E506                            Map_obj36:
0000E506                            	include "_maps\obj36.asm"
0000E506                            ; ---------------------------------------------------------------------------
0000E506                            ; Sprite mappings - spikes
0000E506                            ; ---------------------------------------------------------------------------
0000E506 0000                       		dc.w byte_CFF4-Map_obj36
0000E508 0000                       		dc.w byte_D004-Map_obj36
0000E50A 0000                       		dc.w byte_D014-Map_obj36
0000E50C 0000                       		dc.w byte_D01A-Map_obj36
0000E50E 0000                       		dc.w byte_D02A-Map_obj36
0000E510 0000                       		dc.w byte_D049-Map_obj36
0000E512 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000E513 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000E518 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E51D F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000E522 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000E523 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000E528 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E52D 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000E532 01                         byte_D014:	dc.b 1			; 1 spike
0000E533 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E538 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000E539 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000E53E F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E543 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000E548 06                         byte_D02A:	dc.b 6			; 6 spikes
0000E549 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000E54E F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000E553 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000E558 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000E55D F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000E562 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000E567 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000E568 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E56E 00                         		even
0000E56E 00                         		even
0000E56E                            
0000E56E                            ; ===========================================================================
0000E56E                            ; ---------------------------------------------------------------------------
0000E56E                            ; Object 3B - purple rock (GHZ)
0000E56E                            ; ---------------------------------------------------------------------------
0000E56E                            
0000E56E                            Obj3B:					; XREF: Obj_Index
0000E56E 7000                       		moveq	#0,d0
0000E570 1028 0024                  		move.b	$24(a0),d0
0000E574 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000E578 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000E57C                            ; ===========================================================================
0000E57C 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000E57E 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000E580                            ; ===========================================================================
0000E580                            
0000E580                            Obj3B_Main:				; XREF: Obj3B_Index
0000E580 5428 0024                  		addq.b	#2,$24(a0)
0000E584 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000E58C 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000E592 117C 0004 0001             		move.b	#4,1(a0)
0000E598 117C 0013 0019             		move.b	#$13,$19(a0)
0000E59E 117C 0004 0018             		move.b	#4,$18(a0)
0000E5A4                            
0000E5A4                            Obj3B_Solid:				; XREF: Obj3B_Index
0000E5A4 323C 001B                  		move.w	#$1B,d1
0000E5A8 343C 0010                  		move.w	#$10,d2
0000E5AC 363C 0010                  		move.w	#$10,d3
0000E5B0 3828 0008                  		move.w	8(a0),d4
0000E5B4 6100 0000                  		bsr.w	SolidObject
0000E5B8 6100 0000                  		bsr.w	DisplaySprite
0000E5BC 3028 0008                  		move.w	8(a0),d0
0000E5C0 0240 FF80                  		andi.w	#$FF80,d0
0000E5C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E5C8 0441 0080                  		subi.w	#$80,d1
0000E5CC 0241 FF80                  		andi.w	#$FF80,d1
0000E5D0 9041                       		sub.w	d1,d0
0000E5D2 0C40 0280                  		cmpi.w	#$280,d0
0000E5D6 6300                       		bls.s	Obj3B_NoDel
0000E5D8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E5DC 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E5E0 3440                       		movea.w	d0,a2	; load address into a2
0000E5E2 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E5E6 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E5EA                            
0000E5EA                            Obj3B_NoDel:
0000E5EA 4E75                       		rts	
0000E5EC                            ; ===========================================================================
0000E5EC                            ; ---------------------------------------------------------------------------
0000E5EC                            ; Object 49 - waterfall	sound effect (GHZ)
0000E5EC                            ; ---------------------------------------------------------------------------
0000E5EC                            
0000E5EC                            Obj49:					; XREF: Obj_Index
0000E5EC 7000                       		moveq	#0,d0
0000E5EE 1028 0024                  		move.b	$24(a0),d0
0000E5F2 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000E5F6 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000E5FA                            ; ===========================================================================
0000E5FA 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000E5FC 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000E5FE                            ; ===========================================================================
0000E5FE                            
0000E5FE                            Obj49_Main:				; XREF: Obj49_Index
0000E5FE 5428 0024                  		addq.b	#2,$24(a0)
0000E602 117C 0004 0001             		move.b	#4,1(a0)
0000E608                            
0000E608                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000E608 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E60C 0200 003F                  		andi.b	#$3F,d0
0000E610 6600                       		bne.s	Obj49_ChkDel
0000E612 303C 00D0                  		move.w	#$D0,d0
0000E616 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000E61C                            
0000E61C                            Obj49_ChkDel:
0000E61C 3028 0008                  		move.w	8(a0),d0
0000E620 0240 FF80                  		andi.w	#$FF80,d0
0000E624 3238 F700                  		move.w	($FFFFF700).w,d1
0000E628 0441 0080                  		subi.w	#$80,d1
0000E62C 0241 FF80                  		andi.w	#$FF80,d1
0000E630 9041                       		sub.w	d1,d0
0000E632 0C40 0280                  		cmpi.w	#$280,d0
0000E636 6300                       		bls.s	Obj49_NoDel
0000E638 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E63C 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E640 3440                       		movea.w	d0,a2	; load address into a2
0000E642 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E646 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E64A                            
0000E64A                            Obj49_NoDel:
0000E64A 4E75                       		rts	
0000E64C                            ; ===========================================================================
0000E64C                            ; ---------------------------------------------------------------------------
0000E64C                            ; Sprite mappings - purple rock	(GHZ)
0000E64C                            ; ---------------------------------------------------------------------------
0000E64C                            Map_obj3B:
0000E64C                            	include "_maps\obj3B.asm"
0000E64C                            ; ---------------------------------------------------------------------------
0000E64C                            ; Sprite mappings - purple rock	(GHZ)
0000E64C                            ; ---------------------------------------------------------------------------
0000E64C 0000                       		dc.w byte_D110-Map_obj3B
0000E64E 02                         byte_D110:	dc.b 2
0000E64F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000E654 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000E65A 00                         		even
0000E65A 00                         		even
0000E65A                            
0000E65A                            ; ===========================================================================
0000E65A                            ; ---------------------------------------------------------------------------
0000E65A                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000E65A                            ; ---------------------------------------------------------------------------
0000E65A                            
0000E65A                            Obj3C:					; XREF: Obj_Index
0000E65A 7000                       		moveq	#0,d0
0000E65C 1028 0024                  		move.b	$24(a0),d0
0000E660 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000E664 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000E668 6000 0000                  		bra.w	MarkObjGone
0000E66C                            ; ===========================================================================
0000E66C 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000E66E 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000E670 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000E672                            ; ===========================================================================
0000E672                            
0000E672                            Obj3C_Main:				; XREF: Obj3C_Index
0000E672 5428 0024                  		addq.b	#2,$24(a0)
0000E676 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000E67E 317C 450F 0002             		move.w	#$450F,2(a0)
0000E684 117C 0004 0001             		move.b	#4,1(a0)
0000E68A 117C 0010 0019             		move.b	#$10,$19(a0)
0000E690 117C 0004 0018             		move.b	#4,$18(a0)
0000E696 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000E69C                            
0000E69C                            Obj3C_Solid:				; XREF: Obj3C_Index
0000E69C 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000E6A2 323C 001B                  		move.w	#$1B,d1
0000E6A6 343C 0020                  		move.w	#$20,d2
0000E6AA 363C 0020                  		move.w	#$20,d3
0000E6AE 3828 0008                  		move.w	8(a0),d4
0000E6B2 6100 0000                  		bsr.w	SolidObject
0000E6B6 0828 0005 0022             		btst	#5,$22(a0)
0000E6BC 6600                       		bne.s	Obj3C_ChkRoll
0000E6BE                            
0000E6BE                            locret_D180:
0000E6BE 4E75                       		rts	
0000E6C0                            ; ===========================================================================
0000E6C0                            
0000E6C0                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000E6C0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000E6C6 66F6                       		bne.s	locret_D180	; if not, branch
0000E6C8 3028 0030                  		move.w	$30(a0),d0
0000E6CC 6A00                       		bpl.s	Obj3C_ChkSpeed
0000E6CE 4440                       		neg.w	d0
0000E6D0                            
0000E6D0                            Obj3C_ChkSpeed:
0000E6D0 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000E6D4 65E8                       		bcs.s	locret_D180	; if not, branch
0000E6D6 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000E6DC 5869 0008                  		addq.w	#4,8(a1)
0000E6E0 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000E6E6 3028 0008                  		move.w	8(a0),d0
0000E6EA B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000E6EE 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000E6F0 5169 0008                  		subq.w	#8,8(a1)
0000E6F4 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000E6FA                            
0000E6FA                            Obj3C_Smash:
0000E6FA 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000E700 08A8 0005 0022             		bclr	#5,$22(a0)
0000E706 08A9 0005 0022             		bclr	#5,$22(a1)
0000E70C 7207                       		moveq	#7,d1		; load 8 fragments
0000E70E 343C 0070                  		move.w	#$70,d2
0000E712 6100                       		bsr.s	SmashObject
0000E714                            
0000E714                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000E714 6100 0000                  		bsr.w	SpeedToPos
0000E718 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000E71E 6100 0000                  		bsr.w	DisplaySprite
0000E722 4A28 0001                  		tst.b	1(a0)
0000E726 6A00 0000                  		bpl.w	DeleteObject
0000E72A 4E75                       		rts	
0000E72C                            
0000E72C                            ; ---------------------------------------------------------------------------
0000E72C                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000E72C                            ; ---------------------------------------------------------------------------
0000E72C                            
0000E72C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E72C                            
0000E72C                            
0000E72C                            SmashObject:				; XREF: Obj3C_Smash
0000E72C 7000                       		moveq	#0,d0
0000E72E 1028 001A                  		move.b	$1A(a0),d0
0000E732 D040                       		add.w	d0,d0
0000E734 2668 0004                  		movea.l	4(a0),a3
0000E738 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000E73C 524B                       		addq.w	#1,a3
0000E73E 08E8 0005 0001             		bset	#5,1(a0)
0000E744 1810                       		move.b	0(a0),d4
0000E746 1A28 0001                  		move.b	1(a0),d5
0000E74A 2248                       		movea.l	a0,a1
0000E74C 6000                       		bra.s	Smash_LoadFrag
0000E74E                            ; ===========================================================================
0000E74E                            
0000E74E                            Smash_Loop:
0000E74E 6100 0000                  		bsr.w	SingleObjLoad
0000E752 6600                       		bne.s	Smash_PlaySnd
0000E754 5A4B                       		addq.w	#5,a3
0000E756                            
0000E756                            Smash_LoadFrag:				; XREF: SmashObject
0000E756 137C 0004 0024             		move.b	#4,$24(a1)
0000E75C 1284                       		move.b	d4,0(a1)
0000E75E 234B 0004                  		move.l	a3,4(a1)
0000E762 1345 0001                  		move.b	d5,1(a1)
0000E766 3368 0008 0008             		move.w	8(a0),8(a1)
0000E76C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E772 3368 0002 0002             		move.w	2(a0),2(a1)
0000E778 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E77E 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E784 335C 0010                  		move.w	(a4)+,$10(a1)
0000E788 335C 0012                  		move.w	(a4)+,$12(a1)
0000E78C B3C8                       		cmpa.l	a0,a1
0000E78E 6400                       		bcc.s	loc_D268
0000E790 2F08                       		move.l	a0,-(sp)
0000E792 2049                       		movea.l	a1,a0
0000E794 6100 0000                  		bsr.w	SpeedToPos
0000E798 D568 0012                  		add.w	d2,$12(a0)
0000E79C 205F                       		movea.l	(sp)+,a0
0000E79E 6100 0000                  		bsr.w	DisplaySprite2
0000E7A2                            
0000E7A2                            loc_D268:
0000E7A2 51C9 FFAA                  		dbf	d1,Smash_Loop
0000E7A6                            
0000E7A6                            Smash_PlaySnd:
0000E7A6 303C 00CB                  		move.w	#$CB,d0
0000E7AA 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play smashing sound
0000E7B0                            ; End of function SmashObject
0000E7B0                            
0000E7B0                            ; ===========================================================================
0000E7B0                            ; Smashed block	fragment speeds
0000E7B0                            ;
0000E7B0 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000E7B4 0600 FF00                  		dc.w $600, $FF00
0000E7B8 0600 0100                  		dc.w $600, $100
0000E7BC 0400 0500                  		dc.w $400, $500
0000E7C0 0600 FA00                  		dc.w $600, $FA00
0000E7C4 0800 FE00                  		dc.w $800, $FE00
0000E7C8 0800 0200                  		dc.w $800, $200
0000E7CC 0600 0600                  		dc.w $600, $600
0000E7D0                            
0000E7D0 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000E7D4 F800 FE00                  		dc.w $F800, $FE00
0000E7D8 F800 0200                  		dc.w $F800, $200
0000E7DC FA00 0600                  		dc.w $FA00, $600
0000E7E0 FC00 FB00                  		dc.w $FC00, $FB00
0000E7E4 FA00 FF00                  		dc.w $FA00, $FF00
0000E7E8 FA00 0100                  		dc.w $FA00, $100
0000E7EC FC00 0500                  		dc.w $FC00, $500
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            Map_obj3C:
0000E7F0                            	include "_maps\obj3C.asm"
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0 0000                       		dc.w byte_D2BC-Map_obj3C
0000E7F2 0000                       		dc.w byte_D2E5-Map_obj3C
0000E7F4 0000                       		dc.w byte_D30E-Map_obj3C
0000E7F6 08                         byte_D2BC:	dc.b 8
0000E7F7 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000E7FC F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000E801 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000E806 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000E80B E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E810 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E815 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E81A 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E81F 08                         byte_D2E5:	dc.b 8
0000E820 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E825 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E82A 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E82F 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E834 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E839 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E83E 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E843 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E848 08                         byte_D30E:	dc.b 8
0000E849 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E84E F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E853 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E858 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E85D E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000E862 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000E867 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000E86C 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000E872 00                         		even
0000E872 00                         		even
0000E872                            
0000E872                            ; ---------------------------------------------------------------------------
0000E872                            ; Object code loading subroutine
0000E872                            ; ---------------------------------------------------------------------------
0000E872                            
0000E872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E872                            
0000E872                            
0000E872                            ObjectsLoad:				; XREF: TitleScreen; et al
0000E872 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000E876 7E7F                       		moveq	#$7F,d7
0000E878 7000                       		moveq	#0,d0
0000E87A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000E880 6400                       		bcc.s	loc_D362
0000E882                            
0000E882                            loc_D348:
0000E882 1010                       		move.b	(a0),d0		; load object number from RAM
0000E884 6700                       		beq.s	loc_D358
0000E886 D040                       		add.w	d0,d0
0000E888 D040                       		add.w	d0,d0
0000E88A 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000E88E 4E91                       		jsr	(a1)		; run the object's code
0000E890 7000                       		moveq	#0,d0
0000E892                            
0000E892                            loc_D358:
0000E892 41E8 0040                  		lea	$40(a0),a0	; next object
0000E896 51CF FFEA                  		dbf	d7,loc_D348
0000E89A 4E75                       		rts
0000E89C                            ; ===========================================================================
0000E89C                            
0000E89C                            loc_D362:
0000E89C 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000E8A2 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000E8A4 7E1F                       		moveq	#$1F,d7
0000E8A6 61DA                       		bsr.s	loc_D348
0000E8A8 7E5F                       		moveq	#$5F,d7
0000E8AA                            
0000E8AA                            loc_D368:
0000E8AA 7000                       		moveq	#0,d0
0000E8AC 1010                       		move.b	(a0),d0
0000E8AE 6700                       		beq.s	loc_D378
0000E8B0 4A28 0001                  		tst.b	1(a0)
0000E8B4 6A00                       		bpl.s	loc_D378
0000E8B6 6100 0000                  		bsr.w	DisplaySprite
0000E8BA                            
0000E8BA                            loc_D378:
0000E8BA 41E8 0040                  		lea	$40(a0),a0
0000E8BE                            
0000E8BE                            loc_D37C:
0000E8BE 51CF FFEA                  		dbf	d7,loc_D368
0000E8C2 4E75                       		rts
0000E8C4                            ; End of function ObjectsLoad
0000E8C4                            
0000E8C4                            ; ===========================================================================
0000E8C4                            ; ---------------------------------------------------------------------------
0000E8C4                            ; Object pointers
0000E8C4                            ; ---------------------------------------------------------------------------
0000E8C4                            Obj_Index:
0000E8C4                            	include "_inc\Object pointers.asm"
0000E8C4                            ; ---------------------------------------------------------------------------
0000E8C4                            ; Object pointers
0000E8C4                            ; ---------------------------------------------------------------------------
0000E8C4 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj02,	Obj03, ObjectFall
0000E8D4 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000E8E4 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E8F4 0000 0000 0000 BA92 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E904 0000 844A 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E914 0000 8A7C 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E924 0000 9336 0000 939E 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E934 0000 9DA8 0000 A0A2 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E944 0000 0000 0000 AD26 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E954 0000 B068 0000 B5BE 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E964 0000 A95E 0000 9E8A 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E974 0000 C11A 0000 B784 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E984 0000 CB3C 0000 D216 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E994 0000 C698 0000 E320 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E9A4 0000 D9A4 0000 DA70 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E9B4 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E9C4 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E9D4 0000 CE74 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E9E4 0000 E5EC 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E9F4 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000EA04 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000EA14 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000EA24 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000EA34 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000EA44 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000EA54 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000EA64 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000EA74 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000EA84 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000EA94 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000EAA4 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000EAB4 0000 0000 0000 DCAA 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000EAC4 0000 5174 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000EAD4 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000EAE4 0000 583A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000EAE4 0000 583A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000EAF4                            
0000EAF4                            ; ---------------------------------------------------------------------------
0000EAF4                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000EAF4                            ; ---------------------------------------------------------------------------
0000EAF4                            
0000EAF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EAF4                            
0000EAF4                            
0000EAF4                            ObjectFall:
0000EAF4 3028 0010                  		move.w	$10(a0),d0
0000EAF8 48C0                       		ext.l	d0
0000EAFA E188                       		lsl.l	#8,d0
0000EAFC D1A8 0008                  		add.l	d0,8(a0)
0000EB00 3028 0012                  		move.w	$12(a0),d0
0000EB04 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000EB0A 48C0                       		ext.l	d0
0000EB0C E188                       		lsl.l	#8,d0
0000EB0E D1A8 000C                  		add.l	d0,$C(a0)
0000EB12 4E75                       		rts	
0000EB14                            
0000EB14                            ; End of function ObjectFall
0000EB14                            
0000EB14                            ; ---------------------------------------------------------------------------
0000EB14                            ; Subroutine translating object	speed to update	object position
0000EB14                            ; ---------------------------------------------------------------------------
0000EB14                            
0000EB14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB14                            
0000EB14                            
0000EB14                            SpeedToPos:
0000EB14 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000EB18 48C0                       		ext.l	d0
0000EB1A E188                       		lsl.l	#8,d0		; multiply speed by $100
0000EB1C D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000EB20 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000EB24 48C0                       		ext.l	d0
0000EB26 E188                       		lsl.l	#8,d0		; multiply by $100
0000EB28 D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000EB2C 4E75                       		rts	
0000EB2E                            
0000EB2E                            ; End of function SpeedToPos
0000EB2E                            
0000EB2E                            ; ---------------------------------------------------------------------------
0000EB2E                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000EB2E                            ; ---------------------------------------------------------------------------
0000EB2E                            
0000EB2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB2E                            
0000EB2E                            
0000EB2E                            DisplaySprite:
0000EB2E 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000EB32 3028 0018                  		move.w	$18(a0),d0
0000EB36 E248                       		lsr.w	#1,d0
0000EB38 0240 0380                  		andi.w	#$380,d0
0000EB3C D2C0                       		adda.w	d0,a1
0000EB3E 0C51 007E                  		cmpi.w	#$7E,(a1)
0000EB42 6400                       		bcc.s	locret_D620
0000EB44 5451                       		addq.w	#2,(a1)
0000EB46 D2D1                       		adda.w	(a1),a1
0000EB48 3288                       		move.w	a0,(a1)
0000EB4A                            
0000EB4A                            locret_D620:
0000EB4A 4E75                       		rts	
0000EB4C                            ; End of function DisplaySprite
0000EB4C                            
0000EB4C                            ; ---------------------------------------------------------------------------
0000EB4C                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000EB4C                            ; ---------------------------------------------------------------------------
0000EB4C                            
0000EB4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB4C                            
0000EB4C                            
0000EB4C                            DisplaySprite2:
0000EB4C 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000EB50 3029 0018                  		move.w	$18(a1),d0
0000EB54 E248                       		lsr.w	#1,d0
0000EB56 0240 0380                  		andi.w	#$380,d0
0000EB5A D4C0                       		adda.w	d0,a2
0000EB5C 0C52 007E                  		cmpi.w	#$7E,(a2)
0000EB60 6400                       		bcc.s	locret_D63E
0000EB62 5452                       		addq.w	#2,(a2)
0000EB64 D4D2                       		adda.w	(a2),a2
0000EB66 3489                       		move.w	a1,(a2)
0000EB68                            
0000EB68                            locret_D63E:
0000EB68 4E75                       		rts	
0000EB6A                            ; End of function DisplaySprite2
0000EB6A                            
0000EB6A                            
0000EB6A                            DisplaySprite3:
0000EB6A 43F8 AC00                      lea    ($FFFFAC00).w,a1
0000EB6E D2C0                           adda.w    d0,a1
0000EB70 0C51 007E                      cmpi.w    #$7E,(a1)
0000EB74 6400                           bhs.s    return_16542
0000EB76 5451                           addq.w    #2,(a1)
0000EB78 D2D1                           adda.w    (a1),a1
0000EB7A 3288                           move.w    a0,(a1)
0000EB7C                            
0000EB7C                            return_16542:
0000EB7C 4E75                           rts
0000EB7E                            ; ---------------------------------------------------------------------------
0000EB7E                            ; Subroutine to	delete an object
0000EB7E                            ; ---------------------------------------------------------------------------
0000EB7E                            
0000EB7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB7E                            
0000EB7E                            
0000EB7E                            DeleteObject:
0000EB7E 2248                       		movea.l	a0,a1
0000EB80                            
0000EB80                            DeleteObject2:
0000EB80 7200                       		moveq	#0,d1
0000EB82 700F                       		moveq	#$F,d0
0000EB84                            
0000EB84                            loc_D646:
0000EB84 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000EB86 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000EB8A 4E75                       		rts	
0000EB8C                            ; End of function DeleteObject
0000EB8C                            
0000EB8C                            ; ===========================================================================
0000EB8C 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000EB90 00FF F700                  		dc.l $FFF700		; main screen x-position
0000EB94 00FF F708                  		dc.l $FFF708		; background x-position	1
0000EB98 00FF F718                  		dc.l $FFF718		; background x-position	2
0000EB9C                            ; ---------------------------------------------------------------------------
0000EB9C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000EB9C                            ; ---------------------------------------------------------------------------
0000EB9C                            
0000EB9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB9C                            
0000EB9C                            
0000EB9C                            BuildSprites:                ; XREF: TitleScreen; et al
0000EB9C 45F8 F800                          lea    ($FFFFF800).w,a2 ; set address for sprite table
0000EBA0 4EB9 0000 0000                     jsr		Obj02
0000EBA6 4A38 FFD0                          tst.b    ($FFFFFFD0).w ; this was level_started_flag
0000EBAA 6700                               beq.s    BuildSprites_2
0000EBAC 4EB9 0000 0000                     jsr    loc_40804
0000EBB2                            
0000EBB2                            BuildSprites_2:
0000EBB2 49F8 AC00                          lea    ($FFFFAC00).w,a4
0000EBB6 7E07                               moveq    #7,d7
0000EBB8                            
0000EBB8                            loc_D66A:
0000EBB8 0C47 0005                  		cmpi.w	#$07-$02,d7
0000EBBC 6600                       		bne.s	BuildSpritesCont
0000EBBE 4A38 870D                  		tst.b	(Level_started_flag).w
0000EBC2 6700                       		beq.s	BuildSpritesCont
0000EBC4 48E7 0108                  		movem.l	d7/a4,-(sp)
0000EBC8 6100 0000                  		bsr.w	BuildRings
0000EBCC 4CDF 1080                  		movem.l	(sp)+,d7/a4
0000EBD0                            
0000EBD0                            BuildSpritesCont:
0000EBD0 4A54                       		tst.w	(a4)
0000EBD2 6700 0000                  		beq.w	loc_D72E
0000EBD6 7C02                       		moveq	#2,d6
0000EBD8                            
0000EBD8                            loc_D672:
0000EBD8 3074 6000                          movea.w    (a4,d6.w),a0
0000EBDC 4A10                               tst.b    (a0)
0000EBDE 6700 0000                          beq.w    loc_D726
0000EBE2 08A8 0007 0001                     bclr    #7,1(a0)
0000EBE8 1028 0001                          move.b    1(a0),d0
0000EBEC 1800                               move.b    d0,d4
0000EBEE 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000EBF2 6700                               beq.s    @skip    ; if it is, branch
0000EBF4 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000EBF8 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000EBFC                               @skip:
0000EBFC 0240 000C                  		andi.w	#$C,d0
0000EC00 6700                       		beq.s	loc_D6DE
0000EC02 227B 0088                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000EC06 7000                       		moveq	#0,d0
0000EC08 1028 0019                  		move.b	$19(a0),d0
0000EC0C 3628 0008                  		move.w	8(a0),d3
0000EC10 9651                       		sub.w	(a1),d3
0000EC12 3203                       		move.w	d3,d1
0000EC14 D240                       		add.w	d0,d1
0000EC16 6B00 0000                  		bmi.w	loc_D726
0000EC1A 3203                       		move.w	d3,d1
0000EC1C 9240                       		sub.w	d0,d1
0000EC1E 0C41 0140                  		cmpi.w	#$140,d1
0000EC22 6C00                       		bge.s	loc_D726
0000EC24 0643 0080                  		addi.w	#$80,d3
0000EC28 0804 0004                  		btst	#4,d4
0000EC2C 6700                       		beq.s	loc_D6E8
0000EC2E 7000                       		moveq	#0,d0
0000EC30 1028 0016                  		move.b	$16(a0),d0
0000EC34 3428 000C                  		move.w	$C(a0),d2
0000EC38 9469 0004                  		sub.w	4(a1),d2
0000EC3C 3202                       		move.w	d2,d1
0000EC3E D240                       		add.w	d0,d1
0000EC40 6B00                       		bmi.s	loc_D726
0000EC42 3202                       		move.w	d2,d1
0000EC44 9240                       		sub.w	d0,d1
0000EC46 0C41 00E0                  		cmpi.w	#$E0,d1
0000EC4A 6C00                       		bge.s	loc_D726
0000EC4C 0642 0080                  		addi.w	#$80,d2
0000EC50 6000                       		bra.s	loc_D700
0000EC52                            ; ===========================================================================
0000EC52                            
0000EC52                            loc_D6DE:
0000EC52 3428 000A                  		move.w	$A(a0),d2
0000EC56 3628 0008                  		move.w	8(a0),d3
0000EC5A 6000                       		bra.s	loc_D700
0000EC5C                            ; ===========================================================================
0000EC5C                            
0000EC5C                            loc_D6E8:
0000EC5C 3428 000C                  		move.w	$C(a0),d2
0000EC60 9469 0004                  		sub.w	4(a1),d2
0000EC64 0642 0080                  		addi.w	#$80,d2
0000EC68 0C42 0060                  		cmpi.w	#$60,d2
0000EC6C 6500                       		bcs.s	loc_D726
0000EC6E 0C42 0180                  		cmpi.w	#$180,d2
0000EC72 6400                       		bcc.s	loc_D726
0000EC74                            
0000EC74                            loc_D700:
0000EC74 2268 0004                  		movea.l	4(a0),a1
0000EC78 7200                       		moveq	#0,d1
0000EC7A 0804 0005                  		btst	#5,d4
0000EC7E 6600                       		bne.s	loc_D71C
0000EC80 1228 001A                  		move.b	$1A(a0),d1
0000EC84 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000EC86 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000EC8A 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000EC8C 1219                       		move.b	(a1)+,d1
0000EC8E 5301                       		subq.b	#1,d1
0000EC90 6B00                       		bmi.s	loc_D720
0000EC92                            
0000EC92                            loc_D71C:
0000EC92 4EB9 0000 0000             		jsr	sub_D750
0000EC98                            
0000EC98                            loc_D720:
0000EC98 08E8 0007 0001             		bset	#7,1(a0)
0000EC9E                            
0000EC9E                            loc_D726:
0000EC9E 5446                       		addq.w	#2,d6
0000ECA0 5554                       		subq.w	#2,(a4)
0000ECA2 6600 FF34                  		bne.w	loc_D672
0000ECA6                            
0000ECA6                            loc_D72E:
0000ECA6 49EC 0080                  		lea	$80(a4),a4
0000ECAA 51CF FF0C                  		dbf	d7,loc_D66A
0000ECAE 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000ECB2 0C05 0050                  		cmpi.b	#$50,d5
0000ECB6 6700                       		beq.s	loc_D748
0000ECB8 24BC 0000 0000             		move.l	#0,(a2)
0000ECBE 4E75                       		rts	
0000ECC0                            ; ===========================================================================
0000ECC0                            
0000ECC0                            loc_D748:
0000ECC0 157C 0000 FFFB             		move.b	#0,-5(a2)
0000ECC6 4E75                       		rts	
0000ECC8                            ; End of function BuildSprites
0000ECC8                            
0000ECC8                            BuildSprites_MultiDraw:
0000ECC8 2F0C                       	move.l	a4,-(sp)
0000ECCA 49F8 F700                  	lea	($FFFFF700).w,a4
0000ECCE 3668 0002                  	movea.w	2(a0),a3
0000ECD2 2A68 0004                  	movea.l	4(a0),a5
0000ECD6 7000                       	moveq	#0,d0
0000ECD8                            
0000ECD8                            	; check if object is within X bounds
0000ECD8 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000ECDC 3628 0008                  	move.w	8(a0),d3
0000ECE0 9654                       	sub.w	(a4),d3
0000ECE2 3203                       	move.w	d3,d1                            
0000ECE4 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000ECE6 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000ECEA 3203                       	move.w	d3,d1
0000ECEC 9240                       	sub.w	d0,d1
0000ECEE 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000ECF2 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000ECF6 0643 0080                  	addi.w	#128,d3
0000ECFA                            
0000ECFA                            	; check if object is within Y bounds
0000ECFA 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000ECFE 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000ED00 7000                       	moveq	#0,d0
0000ED02 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000ED06 3428 000C                  	move.w	$C(a0),d2
0000ED0A 946C 0004                  	sub.w	4(a4),d2
0000ED0E 3202                       	move.w	d2,d1
0000ED10 D240                       	add.w	d0,d1
0000ED12 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000ED16 3202                       	move.w	d2,d1
0000ED18 9240                       	sub.w	d0,d1
0000ED1A 0C41 00E0                  	cmpi.w	#224,d1
0000ED1E 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000ED22 0642 0080                  	addi.w	#128,d2
0000ED26 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000ED28                            BuildSpritesMulti_ApproxYCheck:
0000ED28 3428 000C                  	move.w	$C(a0),d2
0000ED2C 946C 0004                  	sub.w	4(a4),d2
0000ED30 0642 0080                  	addi.w	#128,d2
0000ED34 0242 07FF                  	andi.w	#$7FF,d2
0000ED38 0C42 0060                  	cmpi.w	#-32+128,d2
0000ED3C 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000ED3E 0C42 0180                  	cmpi.w	#32+128+224,d2
0000ED42 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000ED44                            BuildSpritesMulti_DrawSprite:
0000ED44 7200                       	moveq	#0,d1
0000ED46 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000ED4A 6700                       	beq.s	@noparenttodraw
0000ED4C D241                       	add.w	d1,d1
0000ED4E 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000ED50 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000ED54 7200                       	moveq	#0,d1
0000ED56 1219                       	move.b	(a1)+,d1
0000ED58 5301                       	subq.b	#1,d1                            ; get number of pieces
0000ED5A 6B00                       	bmi.s	@noparenttodraw                  ; if there are 0 pieces, branch
0000ED5C 3F04                       	move.w	d4,-(sp)
0000ED5E 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000ED64 381F                       	move.w	(sp)+,d4
0000ED66                            @noparenttodraw:
0000ED66 0028 0080 0001             	ori.b	#$80,1(a0)	         ; set onscreen flag
0000ED6C 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000ED70 7000                       	moveq	#0,d0
0000ED72 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000ED76 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000ED78 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000ED7A                            
0000ED7A                            @drawchildloop:
0000ED7A 4840                       	swap	d0
0000ED7C 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000ED7E 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000ED80 0643 0080                  	addi.w	#128,d3
0000ED84 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000ED86 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000ED8A 0642 0080                  	addi.w	#128,d2
0000ED8E 0242 07FF                  	andi.w	#$7FF,d2
0000ED92 524E                       	addq.w	#1,a6
0000ED94 7200                       	moveq	#0,d1
0000ED96 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000ED98 D241                       	add.w	d1,d1
0000ED9A 224D                       	movea.l	a5,a1
0000ED9C D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EDA0 7200                       	moveq	#0,d1
0000EDA2 1219                       	move.b	(a1)+,d1
0000EDA4 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EDA6 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000EDA8 3F04                       	move.w	d4,-(sp)
0000EDAA 4EB9 0000 0000             	jsr	ChkDrawSprite
0000EDB0 381F                       	move.w	(sp)+,d4
0000EDB2                            @nochildleft:
0000EDB2 4840                       	swap	d0
0000EDB4 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000EDB8                            ; loc_16804:
0000EDB8                            BuildSprites_MultiDraw_NextObj:
0000EDB8 285F                       	movea.l	(sp)+,a4
0000EDBA 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000EDBE                            
0000EDBE                            
0000EDBE                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EDBE                            
0000EDBE                            ; sub_1680A:
0000EDBE                            ChkDrawSprite:
0000EDBE 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000EDC2 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000EDC4 4E75                       	rts	; otherwise, return
0000EDC6                            
0000EDC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EDC6                            
0000EDC6                            
0000EDC6                            sub_D750:				; XREF: BuildSprites
0000EDC6 3668 0002                  		movea.w	2(a0),a3
0000EDCA                            loc_1681C:
0000EDCA 0804 0000                  		btst	#0,d4
0000EDCE 6600                       		bne.s	loc_D796
0000EDD0 0804 0001                  		btst	#1,d4
0000EDD4 6600 0000                  		bne.w	loc_D7E4
0000EDD8                            ; End of function sub_D750
0000EDD8                            
0000EDD8                            
0000EDD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EDD8                            
0000EDD8                            
0000EDD8                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000EDD8 0C05 0050                  		cmpi.b	#$50,d5
0000EDDC 6700                       		beq.s	locret_D794
0000EDDE                            DrawSprite_Loop:				; XREF: sub_D762; SS_ShowLayout	
0000EDDE 1019                       		move.b	(a1)+,d0
0000EDE0 4880                       		ext.w	d0
0000EDE2 D042                       		add.w	d2,d0
0000EDE4 34C0                       		move.w	d0,(a2)+
0000EDE6 14D9                       		move.b	(a1)+,(a2)+
0000EDE8 5205                       		addq.b	#1,d5
0000EDEA 14C5                       		move.b	d5,(a2)+
0000EDEC 1019                       		move.b	(a1)+,d0
0000EDEE E148                       		lsl.w	#8,d0
0000EDF0 1019                       		move.b	(a1)+,d0
0000EDF2 D04B                       		add.w	a3,d0
0000EDF4 34C0                       		move.w	d0,(a2)+
0000EDF6 1019                       		move.b	(a1)+,d0
0000EDF8 4880                       		ext.w	d0
0000EDFA D043                       		add.w	d3,d0
0000EDFC 0240 01FF                  		andi.w	#$1FF,d0
0000EE00 6600                       		bne.s	loc_D78E
0000EE02 5240                       		addq.w	#1,d0
0000EE04                            
0000EE04                            loc_D78E:
0000EE04 34C0                       		move.w	d0,(a2)+
0000EE06 51C9 FFD0                  		dbf	d1,sub_D762
0000EE0A                            
0000EE0A                            locret_D794:
0000EE0A 4E75                       		rts	
0000EE0C                            ; End of function sub_D762
0000EE0C                            
0000EE0C                            ; ===========================================================================
0000EE0C                            
0000EE0C                            loc_D796:
0000EE0C 0804 0001                  		btst	#1,d4
0000EE10 6600 0000                  		bne.w	loc_D82A
0000EE14                            
0000EE14                            loc_D79E:
0000EE14 0C05 0050                  		cmpi.b	#$50,d5
0000EE18 6700                       		beq.s	locret_D7E2
0000EE1A 1019                       		move.b	(a1)+,d0
0000EE1C 4880                       		ext.w	d0
0000EE1E D042                       		add.w	d2,d0
0000EE20 34C0                       		move.w	d0,(a2)+
0000EE22 1819                       		move.b	(a1)+,d4
0000EE24 14C4                       		move.b	d4,(a2)+
0000EE26 5205                       		addq.b	#1,d5
0000EE28 14C5                       		move.b	d5,(a2)+
0000EE2A 1019                       		move.b	(a1)+,d0
0000EE2C E148                       		lsl.w	#8,d0
0000EE2E 1019                       		move.b	(a1)+,d0
0000EE30 D04B                       		add.w	a3,d0
0000EE32 0A40 0800                  		eori.w	#$800,d0
0000EE36 34C0                       		move.w	d0,(a2)+
0000EE38 1019                       		move.b	(a1)+,d0
0000EE3A 4880                       		ext.w	d0
0000EE3C 4440                       		neg.w	d0
0000EE3E D804                       		add.b	d4,d4
0000EE40 0244 0018                  		andi.w	#$18,d4
0000EE44 5044                       		addq.w	#8,d4
0000EE46 9044                       		sub.w	d4,d0
0000EE48 D043                       		add.w	d3,d0
0000EE4A 0240 01FF                  		andi.w	#$1FF,d0
0000EE4E 6600                       		bne.s	loc_D7DC
0000EE50 5240                       		addq.w	#1,d0
0000EE52                            
0000EE52                            loc_D7DC:
0000EE52 34C0                       		move.w	d0,(a2)+
0000EE54 51C9 FFBE                  		dbf	d1,loc_D79E
0000EE58                            
0000EE58                            locret_D7E2:
0000EE58 4E75                       		rts	
0000EE5A                            ; ===========================================================================
0000EE5A                            
0000EE5A                            loc_D7E4:				; XREF: sub_D750
0000EE5A 0C05 0050                  		cmpi.b	#$50,d5
0000EE5E 6700                       		beq.s	locret_D828
0000EE60 1019                       		move.b	(a1)+,d0
0000EE62 1811                       		move.b	(a1),d4
0000EE64 4880                       		ext.w	d0
0000EE66 4440                       		neg.w	d0
0000EE68 E70C                       		lsl.b	#3,d4
0000EE6A 0244 0018                  		andi.w	#$18,d4
0000EE6E 5044                       		addq.w	#8,d4
0000EE70 9044                       		sub.w	d4,d0
0000EE72 D042                       		add.w	d2,d0
0000EE74 34C0                       		move.w	d0,(a2)+
0000EE76 14D9                       		move.b	(a1)+,(a2)+
0000EE78 5205                       		addq.b	#1,d5
0000EE7A 14C5                       		move.b	d5,(a2)+
0000EE7C 1019                       		move.b	(a1)+,d0
0000EE7E E148                       		lsl.w	#8,d0
0000EE80 1019                       		move.b	(a1)+,d0
0000EE82 D04B                       		add.w	a3,d0
0000EE84 0A40 1000                  		eori.w	#$1000,d0
0000EE88 34C0                       		move.w	d0,(a2)+
0000EE8A 1019                       		move.b	(a1)+,d0
0000EE8C 4880                       		ext.w	d0
0000EE8E D043                       		add.w	d3,d0
0000EE90 0240 01FF                  		andi.w	#$1FF,d0
0000EE94 6600                       		bne.s	loc_D822
0000EE96 5240                       		addq.w	#1,d0
0000EE98                            
0000EE98                            loc_D822:
0000EE98 34C0                       		move.w	d0,(a2)+
0000EE9A 51C9 FFBE                  		dbf	d1,loc_D7E4
0000EE9E                            
0000EE9E                            locret_D828:
0000EE9E 4E75                       		rts	
0000EEA0                            ; ===========================================================================
0000EEA0                            
0000EEA0                            loc_D82A:
0000EEA0 0C05 0050                  		cmpi.b	#$50,d5
0000EEA4 6700                       		beq.s	locret_D87C
0000EEA6 1019                       		move.b	(a1)+,d0
0000EEA8 1811                       		move.b	(a1),d4
0000EEAA 4880                       		ext.w	d0
0000EEAC 4440                       		neg.w	d0
0000EEAE E70C                       		lsl.b	#3,d4
0000EEB0 0244 0018                  		andi.w	#$18,d4
0000EEB4 5044                       		addq.w	#8,d4
0000EEB6 9044                       		sub.w	d4,d0
0000EEB8 D042                       		add.w	d2,d0
0000EEBA 34C0                       		move.w	d0,(a2)+
0000EEBC 1819                       		move.b	(a1)+,d4
0000EEBE 14C4                       		move.b	d4,(a2)+
0000EEC0 5205                       		addq.b	#1,d5
0000EEC2 14C5                       		move.b	d5,(a2)+
0000EEC4 1019                       		move.b	(a1)+,d0
0000EEC6 E148                       		lsl.w	#8,d0
0000EEC8 1019                       		move.b	(a1)+,d0
0000EECA D04B                       		add.w	a3,d0
0000EECC 0A40 1800                  		eori.w	#$1800,d0
0000EED0 34C0                       		move.w	d0,(a2)+
0000EED2 1019                       		move.b	(a1)+,d0
0000EED4 4880                       		ext.w	d0
0000EED6 4440                       		neg.w	d0
0000EED8 D804                       		add.b	d4,d4
0000EEDA 0244 0018                  		andi.w	#$18,d4
0000EEDE 5044                       		addq.w	#8,d4
0000EEE0 9044                       		sub.w	d4,d0
0000EEE2 D043                       		add.w	d3,d0
0000EEE4 0240 01FF                  		andi.w	#$1FF,d0
0000EEE8 6600                       		bne.s	loc_D876
0000EEEA 5240                       		addq.w	#1,d0
0000EEEC                            
0000EEEC                            loc_D876:
0000EEEC 34C0                       		move.w	d0,(a2)+
0000EEEE 51C9 FFB0                  		dbf	d1,loc_D82A
0000EEF2                            
0000EEF2                            locret_D87C:
0000EEF2 4E75                       		rts	
0000EEF4                            ; ---------------------------------------------------------------------------
0000EEF4                            ; Subroutine to	check if an object is on the screen
0000EEF4                            ; ---------------------------------------------------------------------------
0000EEF4                            
0000EEF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EEF4                            
0000EEF4                            
0000EEF4                            ChkObjOnScreen:
0000EEF4 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000EEF8 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000EEFC 6B00                       		bmi.s	NotOnScreen
0000EEFE 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000EF02 6C00                       		bge.s	NotOnScreen	; if not, branch
0000EF04                            
0000EF04 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000EF08 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000EF0C 6B00                       		bmi.s	NotOnScreen
0000EF0E 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000EF12 6C00                       		bge.s	NotOnScreen	; if not, branch
0000EF14                            
0000EF14 7000                       		moveq	#0,d0		; set flag to 0
0000EF16 4E75                       		rts	
0000EF18                            ; ===========================================================================
0000EF18                            
0000EF18                            NotOnScreen:				; XREF: ChkObjOnScreen
0000EF18 7001                       		moveq	#1,d0		; set flag to 1
0000EF1A 4E75                       		rts	
0000EF1C                            ; End of function ChkObjOnScreen
0000EF1C                            
0000EF1C                            
0000EF1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EF1C                            
0000EF1C                            
0000EF1C                            ChkObjOnScreen2:
0000EF1C 7200                       		moveq	#0,d1
0000EF1E 1228 0019                  		move.b	$19(a0),d1
0000EF22 3028 0008                  		move.w	8(a0),d0
0000EF26 9078 F700                  		sub.w	($FFFFF700).w,d0
0000EF2A D041                       		add.w	d1,d0
0000EF2C 6B00                       		bmi.s	NotOnScreen2
0000EF2E D241                       		add.w	d1,d1
0000EF30 9041                       		sub.w	d1,d0
0000EF32 0C40 0140                  		cmpi.w	#320,d0
0000EF36 6C00                       		bge.s	NotOnScreen2
0000EF38                            
0000EF38 3228 000C                  		move.w	$C(a0),d1
0000EF3C 9278 F704                  		sub.w	($FFFFF704).w,d1
0000EF40 6B00                       		bmi.s	NotOnScreen2
0000EF42 0C41 00E0                  		cmpi.w	#224,d1
0000EF46 6C00                       		bge.s	NotOnScreen2
0000EF48                            
0000EF48 7000                       		moveq	#0,d0
0000EF4A 4E75                       		rts	
0000EF4C                            ; ===========================================================================
0000EF4C                            
0000EF4C                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000EF4C 7001                       		moveq	#1,d0
0000EF4E 4E75                       		rts	
0000EF50                            ; End of function ChkObjOnScreen2
0000EF50                            
0000EF50                            ; ---------------------------------------------------------------------------
0000EF50                            ; Subroutine to	load a level's objects
0000EF50                            ; ---------------------------------------------------------------------------
0000EF50                            
0000EF50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EF50                            
0000EF50                            
0000EF50                            ; ---------------------------------------------------------------------------
0000EF50                            ; Objects Manager
0000EF50                            ; Subroutine to load objects whenever they are close to the screen. Unlike in
0000EF50                            ; normal s2, in this version every object gets an entry in the respawn table.
0000EF50                            ; This is necessary to get the additional y-range checks to work.
0000EF50                            ;
0000EF50                            ; input variables:
0000EF50                            ;  -none-
0000EF50                            ;
0000EF50                            ; writes:
0000EF50                            ;  d0, d1, d2
0000EF50                            ;  d3 = upper boundary to load object
0000EF50                            ;  d4 = lower boundary to load object
0000EF50                            ;  d5 = #$FFF, used to filter out object's y position
0000EF50                            ;  d6 = camera position
0000EF50                            ;
0000EF50                            ;  a0 = address in object placement list
0000EF50                            ;  a3 = address in object respawn table
0000EF50                            ;  a6 = object loading routine
0000EF50                            ; ---------------------------------------------------------------------------
0000EF50                             
0000EF50                            ; loc_17AA4
0000EF50                            ObjPosLoad:
0000EF50 7000                       	moveq	#0,d0
0000EF52 1038 F76C                  	move.b	($FFFFF76C).w,d0
0000EF56 4EFB 0000                  	jmp	ObjPosLoad_States(pc,d0.w)
0000EF5A                             
0000EF5A                            ; ============== JUMP TABLE	=============================================
0000EF5A                            ObjPosLoad_States:
0000EF5A 6000 0000                  	bra.w	ObjPosLoad_Init		; 0
0000EF5E 6000 0000                  	bra.w	ObjPosLoad_Main		; 2
0000EF62                            ; ============== END JUMP TABLE	=============================================
0000EF62                             
0000EF62                            ObjPosLoad_Init:
0000EF62 5838 F76C                  	addq.b	#4,($FFFFF76C).w
0000EF66                             
0000EF66 41F8 8000                  	lea     (Object_Respawn_Table).w,a0
0000EF6A 7000                       	moveq   #0,d0
0000EF6C 323C 00BF                  	move.w  #$BF,d1 ; set loop counter
0000EF70                            OPLBack1:
0000EF70 20C0                       	move.l  d0,(a0)+
0000EF72 51C9 FFFC                  	dbf     d1,OPLBack1
0000EF76                             
0000EF76 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000EF7A                            ;
0000EF7A                            ;	ror.b	#1,d0			; this is from s3k
0000EF7A                            ;	lsr.w	#5,d0
0000EF7A                            ;	lea	(Off_Objects).l,a0
0000EF7A                            ;	movea.l	(a0,d0.w),a0
0000EF7A                            ;
0000EF7A ED08                       	lsl.b	#6,d0
0000EF7C E848                       	lsr.w	#4,d0
0000EF7E 41F9 0000 0000             	lea	(ObjPos_Index).l,a0	; load the first pointer in the object layout list pointer index,
0000EF84 D0F0 0000                  	adda.w	(a0,d0.w),a0		; load the pointer to the current object layout
0000EF88                             
0000EF88                            	; initialize each object load address with the first object in the layout
0000EF88 21C8 F770                  	move.l	a0,($FFFFF770).w
0000EF8C 21C8 F774                  	move.l	a0,($FFFFF774).w
0000EF90 47F8 8000                  	lea	(Object_Respawn_Table).w,a3
0000EF94                             
0000EF94 3C38 F700                  	move.w	($FFFFF700).w,d6
0000EF98 0446 0080                  	subi.w	#$80,d6	; look one chunk to the left
0000EF9C 6400                       	bcc.s	OPL1	; if the result was negative,
0000EF9E 7C00                       	moveq	#0,d6	; cap at zero
0000EFA0                            	OPL1:	
0000EFA0 0246 FF80                  	andi.w	#$FF80,d6	; limit to increments of $80 (width of a chunk)
0000EFA4                             
0000EFA4 2078 F770                  	movea.l	($FFFFF770).w,a0	; get first object in layout
0000EFA8                             
0000EFA8                            OPLBack2:	; at the beginning of a level this gives respawn table entries to any object that is one chunk
0000EFA8                            	; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
0000EFA8 BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000EFAA 6300                       	bls.s	OPL2		; if yes, branch
0000EFAC 5C48                       	addq.w	#6,a0	; next object
0000EFAE 524B                       	addq.w	#1,a3	; respawn index of next object going right
0000EFB0 60F6                       	bra.s	OPLBack2
0000EFB2                            ; ---------------------------------------------------------------------------
0000EFB2                             
0000EFB2                            OPL2:	
0000EFB2 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember rightmost object that has been processed, so far (we still need to look forward)
0000EFB6 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EFBA                             
0000EFBA 47F8 8000                  	lea	(Object_Respawn_Table).w,a3	; reset a3
0000EFBE 2078 F774                  	movea.l	($FFFFF774).w,a0	; reset a0
0000EFC2 0446 0080                  	subi.w	#$80,d6		; look even farther left (any object behind this is out of range)
0000EFC6 6500                       	bcs.s	OPL3		; branch, if camera position would be behind level's left boundary
0000EFC8                             
0000EFC8                             OPLBack3:	; count how many objects are behind the screen that are not in range and need to remember their state
0000EFC8 BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000EFCA 6300                       	bls.s	OPL3		; if yes, branch
0000EFCC 5C48                       	addq.w	#6,a0
0000EFCE 524B                       	addq.w	#1,a3	; respawn index of next object going left
0000EFD0 60F6                       	bra.s	OPLBack3	; continue with next object
0000EFD2                            ; ---------------------------------------------------------------------------
0000EFD2                             
0000EFD2                            OPL3:	
0000EFD2 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EFD6 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EFDA                             
0000EFDA 31FC FFFF FE2A             	move.w	#-1,(Camera_X_Pos_last).w	; make sure ObjPosLoad_GoingForward is run
0000EFE0                             
0000EFE0 3038 F704                  	move.w	($FFFFF704).w,d0
0000EFE4 0240 FF80                  	andi.w	#$FF80,d0
0000EFE8 31C0 F76E                  	move.w	d0,(Camera_Y_pos_last).w	; make sure the Y check isn't run unnecessarily during initialization
0000EFEC                            ; ---------------------------------------------------------------------------
0000EFEC                             
0000EFEC                            ObjPosLoad_Main:
0000EFEC                            	; get coarse camera position
0000EFEC                            ;	move.w	($FFFFF704).w,d1
0000EFEC                            ;	subi.w	#$80,d1
0000EFEC                            ;	andi.w	#$FF80,d1
0000EFEC                            ;	move.w	d1,(Camera_Y_pos_coarse).w
0000EFEC                             
0000EFEC                            ;	move.w	($FFFFF700).w,d1
0000EFEC                            ;	subi.w	#$80,d1
0000EFEC                            ;	andi.w	#$FF80,d1
0000EFEC                            ;	move.w	d1,(Camera_X_pos_coarse).w
0000EFEC                             
0000EFEC 4A78 F726                  	tst.w	($FFFFF726).w	; does this level y-wrap?
0000EFF0 6A00                       	bpl.s	ObjMan_Main_NoYWrap	; if not, branch
0000EFF2 4DF9 0000 0000             	lea	(ChkLoadObj_YWrap).l,a6	; set object loading routine
0000EFF8 3638 F704                  	move.w	($FFFFF704).w,d3
0000EFFC 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000F000 3803                       	move.w	d3,d4
0000F002 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000F006 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000F00A 6A00                       	bpl.s	OPL4		; branch, if upper boundary > 0
0000F00C 0243 07FF                  	andi.w	#$7FF,d3	; wrap value
0000F010 6000                       	bra.s	ObjMan_Main_Cont
0000F012                            ; ---------------------------------------------------------------------------
0000F012                             
0000F012                            OPL4:	
0000F012 303C 07FF                  	move.w	#$7FF,d0
0000F016 5240                       	addq.w	#1,d0
0000F018 B840                       	cmp.w	d0,d4
0000F01A 6300                       	bls.s	OPL5		; branch, if lower boundary < $7FF
0000F01C 0244 07FF                  	andi.w	#$7FF,d4	; wrap value
0000F020 6000                       	bra.s	ObjMan_Main_Cont
0000F022                            ; ---------------------------------------------------------------------------
0000F022                             
0000F022                            ObjMan_Main_NoYWrap:
0000F022 3638 F704                  	move.w	($FFFFF704).w,d3
0000F026 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000F02A 3803                       	move.w	d3,d4
0000F02C 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000F030 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000F034 6A00                       	bpl.s	OPL5
0000F036 7600                       	moveq	#0,d3	; no negative values allowed
0000F038                             
0000F038                            OPL5:	
0000F038 4DF9 0000 0000             	lea	(ChkLoadObj).l,a6	; set object loading routine
0000F03E                             
0000F03E                            ObjMan_Main_Cont:
0000F03E 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000F042 3C38 F700                  	move.w	($FFFFF700).w,d6
0000F046 0246 FF80                  	andi.w	#$FF80,d6
0000F04A BC78 FE2A                  	cmp.w	(Camera_X_Pos_last).w,d6	; is the X range the same as last time?
0000F04E 6700 0000                  	beq.w	ObjPosLoad_SameXRange	; if yes, branch
0000F052 6C00                       	bge.s	ObjPosLoad_GoingForward	; if new pos is greater than old pos, branch
0000F054                             
0000F054                            	; if the player is moving back
0000F054 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w	; remember current position for next time
0000F058                             
0000F058 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object going left
0000F05C 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000F060                             
0000F060 0446 0080                  	subi.w	#$80,d6			; look one chunk to the left
0000F064 6500                       	bcs.s	ObjMan_GoingBack_Part2	; branch, if camera position would be behind level's left boundary
0000F066                             
0000F066 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000F06C 6600                       	bne.s	ObjMan_GoingBack_Part2		; branch, if there are none
0000F06E                            OPLBack4:	; load all objects left of the screen that are now in range
0000F06E BC68 FFFA                  	cmp.w	-6(a0),d6		; is the previous object's X pos less than d6?
0000F072 6C00                       	bge.s	ObjMan_GoingBack_Part2	; if it is, branch
0000F074 5D48                       	subq.w	#6,a0		; get object's address
0000F076 534B                       	subq.w	#1,a3		; and respawn table index
0000F078 4E96                       	jsr	(a6)		; load object
0000F07A 6600                       	bne.s	OPL6		; branch, if SST is full
0000F07C 5D48                       	subq.w	#6,a0
0000F07E 60EE                       	bra.s	OPLBack4	; continue with previous object
0000F080                            ; ---------------------------------------------------------------------------
0000F080                             
0000F080                            OPL6:	
0000F080                            	; undo a few things, if the object couldn't load
0000F080 5C48                       	addq.w	#6,a0	; go back to last object
0000F082 524B                       	addq.w	#1,a3	; since we didn't load the object, undo last change
0000F084                             
0000F084                            ObjMan_GoingBack_Part2:
0000F084 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object going left
0000F088 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000F08C 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object going right
0000F090 3678 F778                  	movea.w	($FFFFF778).w,a3	; and its respawn table index
0000F094 0646 0300                  	addi.w	#$300,d6	; look two chunks beyond the right edge of the screen
0000F098                             
0000F098                            OPLBack5:	; subtract number of objects that have been moved out of range (from the right side)
0000F098 BC68 FFFA                  	cmp.w	-6(a0),d6	; is the previous object's X pos less than d6?
0000F09C 6E00                       	bgt.s	OPL7		; if it is, branch
0000F09E 5D48                       	subq.w	#6,a0		; get object's address
0000F0A0 534B                       	subq.w	#1,a3		; and respawn table index
0000F0A2 60F4                       	bra.s	OPLBack5	; continue with previous object
0000F0A4                            ; ---------------------------------------------------------------------------
0000F0A4                             
0000F0A4                            OPL7:	
0000F0A4 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object going right
0000F0A8 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000F0AC 6000                       	bra.s	ObjPosLoad_SameXRange
0000F0AE                            ; ---------------------------------------------------------------------------
0000F0AE                             
0000F0AE                            ObjPosLoad_GoingForward:
0000F0AE 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w
0000F0B2                             
0000F0B2 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object from the right
0000F0B6 3678 F778                  	movea.w ($FFFFF778).w,a3	; and its respawn table index
0000F0BA 0646 0280                  	addi.w	#$280,d6	; look two chunks forward
0000F0BE 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000F0C4 6600                       	bne.s	ObjMan_GoingForward_Part2	; branch, if there are none
0000F0C6                             
0000F0C6                            OPLBack6:	; load all objects right of the screen that are now in range
0000F0C6 BC50                       	cmp.w	(a0),d6				; is object's x position >= d6?
0000F0C8 6300                       	bls.s	ObjMan_GoingForward_Part2	; if yes, branch
0000F0CA 4E96                       	jsr	(a6)		; load object (and get address of next object)
0000F0CC 524B                       	addq.w	#1,a3		; respawn index of next object to the right
0000F0CE 67F6                       	beq.s	OPLBack6	; continue loading objects, if the SST isn't full
0000F0D0                             
0000F0D0                            ObjMan_GoingForward_Part2:
0000F0D0 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object from the right
0000F0D4 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000F0D8 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object from the left
0000F0DC 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000F0E0 0446 0300                  	subi.w	#$300,d6		; look one chunk behind the left edge of the screen
0000F0E4 6500                       	bcs.s	ObjMan_GoingForward_End	; branch, if camera position would be behind level's left boundary
0000F0E6                             
0000F0E6                            OPLBack7:	; subtract number of objects that have been moved out of range (from the left)
0000F0E6 BC50                       	cmp.w	(a0),d6			; is object's x position >= d6?
0000F0E8 6300                       	bls.s	ObjMan_GoingForward_End	; if yes, branch
0000F0EA 5C48                       	addq.w	#6,a0	; next object
0000F0EC 524B                       	addq.w	#1,a3	; respawn index of next object to the left
0000F0EE 60F6                       	bra.s	OPLBack7	; continue with next object
0000F0F0                            ; ---------------------------------------------------------------------------
0000F0F0                             
0000F0F0                            ObjMan_GoingForward_End:
0000F0F0 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000F0F4 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000F0F8                             
0000F0F8                            ObjPosLoad_SameXRange:
0000F0F8 3C38 F704                  	move.w	($FFFFF704).w,d6
0000F0FC 0246 FF80                  	andi.w	#$FF80,d6
0000F100 3606                       	move.w	d6,d3
0000F102 BC78 F76E                  	cmp.w	(Camera_Y_pos_last).w,d6	; is the y range the same as last time?
0000F106 6700 0000                  	beq.w	ObjPosLoad_SameYRange	; if yes, branch
0000F10A 6C00                       	bge.s	ObjPosLoad_GoingDown	; if the player is moving down
0000F10C                             
0000F10C                            	; if the player is moving up
0000F10C 4A78 F72C                  	tst.w	($FFFFF72C).w	; does the level y-wrap?
0000F110 6A00                       	bpl.s	ObjMan_GoingUp_NoYWrap	; if not, branch
0000F112 4A46                       	tst.w	d6
0000F114 6600                       	bne.s	ObjMan_GoingUp_YWrap
0000F116 0C78 0080 F76E             	cmpi.w	#$80,(Camera_Y_pos_last).w
0000F11C 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000F11E                             
0000F11E                            ObjMan_GoingUp_YWrap:
0000F11E 0443 0080                  	subi.w	#$80,d3			; look one chunk up
0000F122 6A00                       	bpl.s	ObjPosLoad_YCheck	; go to y check, if camera y position >= $80
0000F124 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000F128 6000                       	bra.s	ObjPosLoad_YCheck
0000F12A                             
0000F12A                            ; ---------------------------------------------------------------------------
0000F12A                             
0000F12A                            ObjMan_GoingUp_NoYWrap:
0000F12A 0443 0080                  	subi.w	#$80,d3				; look one chunk up
0000F12E 6B00 0000                  	bmi.w	ObjPosLoad_SameYRange	; don't do anything if camera y position is < $80
0000F132 6000                       	bra.s	ObjPosLoad_YCheck
0000F134                            ; ---------------------------------------------------------------------------
0000F134                             
0000F134                            ObjPosLoad_GoingDown:
0000F134 4A78 F72C                  	tst.w	($FFFFF72C).w		; does the level y-wrap?
0000F138 6A00                       	bpl.s	ObjMan_GoingDown_NoYWrap	; if not, branch
0000F13A 4A78 F76E                  	tst.w	(Camera_Y_pos_last).w
0000F13E 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000F140 0C46 0080                  	cmpi.w	#$80,d6
0000F144 66D8                       	bne.s	ObjMan_GoingUp_YWrap
0000F146                             
0000F146                            ObjMan_GoingDown_YWrap:
0000F146 0643 0180                  	addi.w	#$180,d3		; look one chunk down
0000F14A 0C43 07FF                  	cmpi.w	#$7FF,d3
0000F14E 6500                       	bcs.s	ObjPosLoad_YCheck	; go to  check, if camera y position < $7FF
0000F150 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000F154 6000                       	bra.s	ObjPosLoad_YCheck
0000F156                            ; ---------------------------------------------------------------------------
0000F156                             
0000F156                            ObjMan_GoingDown_NoYWrap:
0000F156 0643 0180                  	addi.w	#$180,d3			; look one chunk down
0000F15A 0C43 07FF                  	cmpi.w	#$7FF,d3
0000F15E 6200                       	bhi.s	ObjPosLoad_SameYRange	; don't do anything, if camera is too close to bottom
0000F160                             
0000F160                            ObjPosLoad_YCheck:
0000F160 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; get an empty object slot
0000F166 6600                       	bne.s	ObjPosLoad_SameYRange	; branch, if there are none
0000F168 3803                       	move.w	d3,d4
0000F16A 0644 0080                  	addi.w	#$80,d4
0000F16E 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000F172 2078 F774                  	movea.l	($FFFFF774).w,a0	; get next object going left
0000F176 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000F17A 2E38 F770                  	move.l	($FFFFF770).w,d7	; get next object going right
0000F17E 9E88                       	sub.l	a0,d7	; d7 = number of objects between the left and right boundaries * 6
0000F180 6700                       	beq.s	ObjPosLoad_SameYRange	; branch if there are no objects inbetween
0000F182 5448                       	addq.w	#2,a0	; align to object's y position
0000F184                             
0000F184                            OPLBack8:	; check, if current object needs to be loaded
0000F184 4A13                       	tst.b	(a3)	; is object already loaded?
0000F186 6B00                       	bmi.s	OPL8	; if yes, branch
0000F188 3210                       	move.w	(a0),d1
0000F18A C245                       	and.w	d5,d1	; get object's y position
0000F18C B243                       	cmp.w	d3,d1
0000F18E 6500                       	bcs.s	OPL8	; branch, if object is out of range from the top
0000F190 B244                       	cmp.w	d4,d1
0000F192 6200                       	bhi.s	OPL8	; branch, if object is out of range from the bottom
0000F194 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000F198                            	; load object
0000F198 3368 FFFE 0008             	move.w	-2(a0),8(a1)
0000F19E 3210                       	move.w	(a0),d1
0000F1A0 3401                       	move.w	d1,d2
0000F1A2 C245                       	and.w	d5,d1	; get object's y position
0000F1A4 3341 000C                  	move.w	d1,$C(a1)
0000F1A8 E75A                       	rol.w	#3,d2
0000F1AA 0242 0003                  	andi.w	#3,d2	; get object's render flags and status
0000F1AE 1342 0001                  	move.b	d2,1(a1)
0000F1B2 1342 0022                  	move.b	d2,$22(a1)
0000F1B6 7000                           moveq	#0,d0
0000F1B8 1028 0002                  	move.b	2(a0),d0
0000F1BC 0200 007F                  	andi.b	#$7F,d0
0000F1C0 1280                       	move.b	d0,0(a1)
0000F1C2 1368 0003 0028             	move.b	3(a0),$28(a1)
0000F1C8 334B 0014                  	move.w	a3,respawn_index(a1)
0000F1CC 4EB9 0000 0000             	jsr	(SingleObjLoad).l	; find new object slot
0000F1D2 6600                       	bne.s	ObjPosLoad_SameYRange	; brach, if there are none left
0000F1D4                            OPL8:
0000F1D4 5C48                       	addq.w	#6,a0	; address of next object
0000F1D6 524B                       	addq.w	#1,a3	; and its respawn index
0000F1D8 5D47                       	subq.w	#6,d7	; subtract from size of remaining objects
0000F1DA 66A8                       	bne.s	OPLBack8	; branch, if there are more
0000F1DC                             
0000F1DC                            ObjPosLoad_SameYRange:
0000F1DC 31C6 F76E                  	move.w	d6,(Camera_Y_pos_last).w
0000F1E0 4E75                       	rts		
0000F1E2                            ; ===========================================================================
0000F1E2                            ; ---------------------------------------------------------------------------
0000F1E2                            ; Subroutines to check if an object needs to be loaded,
0000F1E2                            ; with and without y-wrapping enabled.
0000F1E2                            ;
0000F1E2                            ; input variables:
0000F1E2                            ;  d3 = upper boundary to load object
0000F1E2                            ;  d4 = lower boundary to load object
0000F1E2                            ;  d5 = #$FFF, used to filter out object's y position
0000F1E2                            ;
0000F1E2                            ;  a0 = address in object placement list
0000F1E2                            ;  a1 = object
0000F1E2                            ;  a3 = address in object respawn table
0000F1E2                            ;
0000F1E2                            ; writes:
0000F1E2                            ;  d1, d2, d7
0000F1E2                            ; ---------------------------------------------------------------------------
0000F1E2                            ChkLoadObj_YWrap:
0000F1E2 4A13                       	tst.b	(a3)	; is object already loaded?
0000F1E4 6A00                       	bpl.s	OPL9	; if not, branch
0000F1E6 5C48                       	addq.w	#6,a0	; address of next object
0000F1E8 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F1EA 4E75                       	rts	
0000F1EC                            ; ---------------------------------------------------------------------------
0000F1EC                             
0000F1EC                            OPL9:	
0000F1EC 3E18                       	move.w	(a0)+,d7	; x_pos
0000F1EE 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000F1F0 3401                       	move.w	d1,d2	; does this object skip y-Checks?
0000F1F2 6B00                       	bmi.s	OPL10	; if yes, branch
0000F1F4 C245                       	and.w	d5,d1	; y_pos
0000F1F6 B243                       	cmp.w	d3,d1
0000F1F8 6400                       	bcc.s	LoadObj_YWrap
0000F1FA B244                       	cmp.w	d4,d1
0000F1FC 6300                       	bls.s	LoadObj_YWrap
0000F1FE 5448                       	addq.w	#2,a0	; address of next object
0000F200 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F202 4E75                       	rts	
0000F204                            ; ---------------------------------------------------------------------------
0000F204                             
0000F204                            OPL10:	
0000F204 C245                       	and.w	d5,d1	; y_pos
0000F206                             
0000F206                            LoadObj_YWrap:
0000F206 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000F20A 3347 0008                  	move.w	d7,8(a1)
0000F20E 3341 000C                  	move.w	d1,$C(a1)
0000F212 E75A                       	rol.w	#3,d2	; adjust bits
0000F214 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000F218 1342 0001                  	move.b	d2,1(a1)
0000F21C 1342 0022                  	move.b	d2,$22(a1)
0000F220 7000                           moveq	#0,d0
0000F222 1018                       	move.b	(a0)+,d0
0000F224 0200 007F                  	andi.b	#$7F,d0
0000F228 1280                       	move.b	d0,0(a1)
0000F22A 1358 0028                  	move.b	(a0)+,$28(a1)
0000F22E 334B 0014                  	move.w	a3,respawn_index(a1)
0000F232 6000                       	bra.s	SingleObjLoad	; find new object slot
0000F234                             
0000F234                            ;loc_17F36
0000F234                            ChkLoadObj:
0000F234 4A13                       	tst.b	(a3)	; is object already loaded?
0000F236 6A00                       	bpl.s	OPL11	; if not, branch
0000F238 5C48                       	addq.w	#6,a0	; address of next object
0000F23A 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F23C 4E75                       	rts
0000F23E                            ; ---------------------------------------------------------------------------
0000F23E                             
0000F23E                            OPL11:	
0000F23E 3E18                       	move.w	(a0)+,d7	; x_pos
0000F240 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000F242 3401                       	move.w	d1,d2	; does this object skip y-Checks?	;*6
0000F244 6B00                       	bmi.s	OPL13	; if yes, branch
0000F246 C245                       	and.w	d5,d1	; y_pos
0000F248 B243                       	cmp.w	d3,d1
0000F24A 6500                       	bcs.s	OPL12	; branch, if object is out of range from the top
0000F24C B244                       	cmp.w	d4,d1
0000F24E 6300                       	bls.s	LoadObj	; branch, if object is in range from the bottom
0000F250                            OPL12:
0000F250 5448                       	addq.w	#2,a0	; address of next object
0000F252 7200                       	moveq	#0,d1
0000F254 4E75                       	rts		
0000F256                            ; ---------------------------------------------------------------------------
0000F256                             
0000F256                            OPL13:	
0000F256 C245                       	and.w	d5,d1	; y_pos
0000F258                             
0000F258                            LoadObj:
0000F258 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000F25C 3347 0008                  	move.w	d7,8(a1)
0000F260 3341 000C                  	move.w	d1,$C(a1)
0000F264 E75A                       	rol.w	#3,d2	; adjust bits
0000F266 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000F26A 1342 0001                  	move.b	d2,1(a1)
0000F26E 1342 0022                  	move.b	d2,$22(a1)
0000F272 7000                           moveq	#0,d0
0000F274 1018                           move.b	(a0)+,d0
0000F276 0200 007F                  	andi.b	#$7F,d0
0000F27A 1280                       	move.b	d0,0(a1)
0000F27C 1358 0028                  	move.b	(a0)+,$28(a1)
0000F280 334B 0014                  	move.w	a3,respawn_index(a1)
0000F284                            	; continue straight to SingleObjLoad
0000F284                            ; End of function ChkLoadObj
0000F284                            ; ===========================================================================
0000F284                            
0000F284                            ; ---------------------------------------------------------------------------
0000F284                            ; Single object	loading	subroutine
0000F284                            ; ---------------------------------------------------------------------------
0000F284                            
0000F284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F284                            
0000F284                            
0000F284                            SingleObjLoad:
0000F284 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000F288 303C 005F                  		move.w	#$5F,d0
0000F28C                            
0000F28C                            loc_DA94:
0000F28C 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F28E 6700                       		beq.s	locret_DAA0	; if yes, branch
0000F290 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F294 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000F298                            
0000F298                            locret_DAA0:
0000F298 4E75                       		rts	
0000F29A                            ; End of function SingleObjLoad
0000F29A                            
0000F29A                            
0000F29A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F29A                            
0000F29A                            
0000F29A                            SingleObjLoad2:
0000F29A 2248                       		movea.l	a0,a1
0000F29C 303C F000                  		move.w	#-$1000,d0
0000F2A0 9048                       		sub.w	a0,d0
0000F2A2 EC48                       		lsr.w	#6,d0
0000F2A4 5340                       		subq.w	#1,d0
0000F2A6 6500                       		bcs.s	locret_DABC
0000F2A8                            
0000F2A8                            loc_DAB0:
0000F2A8 4A11                       		tst.b	(a1)
0000F2AA 6700                       		beq.s	locret_DABC
0000F2AC 43E9 0040                  		lea	$40(a1),a1
0000F2B0 51C8 FFF6                  		dbf	d0,loc_DAB0
0000F2B4                            
0000F2B4                            locret_DABC:
0000F2B4 4E75                       		rts	
0000F2B6                            ; End of function SingleObjLoad2
0000F2B6                            
0000F2B6                            ; ===========================================================================
0000F2B6                            RingsManager:
0000F2B6 7000                       	moveq	#0,d0
0000F2B8 1038 870C                  	move.b	(Rings_manager_routine).w,d0
0000F2BC 303B 0000                  	move.w	RingsManager_States(pc,d0.w),d0
0000F2C0 4EFB 0000                  	jmp	RingsManager_States(pc,d0.w)
0000F2C4                            ; ===========================================================================
0000F2C4                            ; off_16F96:
0000F2C4                            RingsManager_States:
0000F2C4 0000                       	dc.w RingsManager_Init-RingsManager_States
0000F2C6 0000                       	dc.w RingsManager_Main-RingsManager_States
0000F2C8                            ; ===========================================================================
0000F2C8                            ; loc_16F9A:
0000F2C8                            RingsManager_Init:
0000F2C8 5438 870C                  	addq.b	#2,(Rings_manager_routine).w ; => RingsManager_Main
0000F2CC 6100 0000                  	bsr.w	RingsManager_Setup
0000F2D0 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F2D4 45F8 8300                  	lea	(Ring_Positions).w,a2
0000F2D8 3838 F700                  	move.w	($FFFFF700).w,d4
0000F2DC 5144                       	subq.w	#8,d4
0000F2DE 6200                       	bhi.s	loc_16FB6
0000F2E0 7801                       	moveq	#1,d4
0000F2E2 6000                       	bra.s	loc_16FB6
0000F2E4                            ; ===========================================================================
0000F2E4                            
0000F2E4                            loc_16FB2:
0000F2E4 5849                       	addq.w	#4,a1
0000F2E6 544A                       	addq.w	#2,a2
0000F2E8                            
0000F2E8                            loc_16FB6:
0000F2E8 B851                       	cmp.w	(a1),d4
0000F2EA 62F8                       	bhi.s	loc_16FB2
0000F2EC 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F2F0 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F2F4 0644 0150                  	addi.w	#$150,d4
0000F2F8 6000                       	bra.s	loc_16FCE
0000F2FA                            ; ===========================================================================
0000F2FA                            
0000F2FA                            loc_16FCA:
0000F2FA 5849                       	addq.w	#4,a1
0000F2FC                            
0000F2FC                            loc_16FCE:
0000F2FC B851                       	cmp.w	(a1),d4
0000F2FE 62FA                       	bhi.s	loc_16FCA
0000F300 21C9 8704                  	move.l	a1,(Ring_end_addr_ROM).w
0000F304 4E75                       	rts
0000F306                            ; ===========================================================================
0000F306                            ; loc_16FDE:
0000F306                            RingsManager_Main:
0000F306 45F8 870E                  	lea	(Ring_consumption_table).w,a2
0000F30A 321A                       	move.w	(a2)+,d1
0000F30C 5341                       	subq.w	#1,d1
0000F30E 6500                       	bcs.s	loc_17014
0000F310                            
0000F310                            loc_16FE8:
0000F310 301A                       	move.w	(a2)+,d0
0000F312 67FC                       	beq.s	loc_16FE8
0000F314 3240                       	movea.w	d0,a1
0000F316 5311                       	subq.b	#1,(a1)
0000F318 6600                       	bne.s	loc_17010
0000F31A 12BC 0006                  	move.b	#6,(a1)
0000F31E 5229 0001                  	addq.b	#1,1(a1)
0000F322 0C29 0008 0001             	cmpi.b	#8,1(a1)
0000F328 6600                       	bne.s	loc_17010
0000F32A 32BC FFFF                  	move.w	#-1,(a1)
0000F32E 357C 0000 FFFE             	move.w	#0,-2(a2)
0000F334 5378 870E                  	subq.w	#1,(Ring_consumption_table).w
0000F338                            
0000F338                            loc_17010:
0000F338 51C9 FFD6                  	dbf	d1,loc_16FE8
0000F33C                            
0000F33C                            loc_17014:
0000F33C 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F340 3478 8708                  	movea.w	(Ring_start_addr_RAM).w,a2
0000F344 3838 F700                  	move.w	($FFFFF700).w,d4
0000F348 5144                       	subq.w	#8,d4
0000F34A 6200                       	bhi.s	loc_17028
0000F34C 7801                       	moveq	#1,d4
0000F34E 6000                       	bra.s	loc_17028
0000F350                            ; ===========================================================================
0000F350                            
0000F350                            loc_17024:
0000F350 5849                       	addq.w	#4,a1
0000F352 544A                       	addq.w	#2,a2
0000F354                            
0000F354                            loc_17028:
0000F354 B851                       	cmp.w	(a1),d4
0000F356 62F8                       	bhi.s	loc_17024
0000F358 6000                       	bra.s	loc_17032
0000F35A                            ; ===========================================================================
0000F35A                            
0000F35A                            loc_17030:
0000F35A 5949                       	subq.w	#4,a1
0000F35C 554A                       	subq.w	#2,a2
0000F35E                            
0000F35E                            loc_17032:
0000F35E B869 FFFC                  	cmp.w	-4(a1),d4
0000F362 63F6                       	bls.s	loc_17030
0000F364 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F368 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F36C 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F370 0644 0150                  	addi.w	#$150,d4
0000F374 6000                       	bra.s	loc_1704A
0000F376                            ; ===========================================================================
0000F376                            
0000F376                            loc_17046:
0000F376 584A                       	addq.w	#4,a2
0000F378                            
0000F378                            loc_1704A:
0000F378 B852                       	cmp.w	(a2),d4
0000F37A 62FA                       	bhi.s	loc_17046
0000F37C 6000                       	bra.s	loc_17054
0000F37E                            ; ===========================================================================
0000F37E                            
0000F37E                            loc_17052:
0000F37E 594A                       	subq.w	#4,a2
0000F380                            
0000F380                            loc_17054:
0000F380 B86A FFFC                  	cmp.w	-4(a2),d4
0000F384 63F8                       	bls.s	loc_17052
0000F386 21CA 8704                  	move.l	a2,(Ring_end_addr_ROM).w
0000F38A 4E75                       	rts
0000F38C                            
0000F38C                            ; ===========================================================================
0000F38C                            
0000F38C                            Touch_Rings:
0000F38C 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F390 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F394                            
0000F394                            loc_170D0:
0000F394 B5C9                       	cmpa.l	a1,a2
0000F396 6700 0000                  	beq.w	return_17166
0000F39A 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F39E 0C68 005A 0030             	cmpi.w	#$5A,$30(a0)
0000F3A4 6400 0000                  	bcc.w	return_17166
0000F3A8                            	
0000F3A8                            Touch_Rings_NoAttraction:
0000F3A8 3428 0008                  	move.w	8(a0),d2
0000F3AC 3628 000C                  	move.w	$C(a0),d3
0000F3B0 5142                       	subi.w	#8,d2
0000F3B2 7A00                       	moveq	#0,d5
0000F3B4 1A28 0016                  	move.b	$16(a0),d5
0000F3B8 5705                       	subq.b	#3,d5
0000F3BA 9645                       	sub.w	d5,d3
0000F3BC 0C28 004D 0004             	cmpi.b	#$4D,4(a0)
0000F3C2 6600                       	bne.s	RM1
0000F3C4 0643 000C                  	addi.w	#$C,d3
0000F3C8 7A0A                       	moveq	#$A,d5
0000F3CA                            RM1:
0000F3CA 323C 0006                  	move.w	#6,d1
0000F3CE 3C3C 000C                  	move.w	#$C,d6
0000F3D2 383C 0010                  	move.w	#$10,d4
0000F3D6 DA45                       	add.w	d5,d5
0000F3D8                            
0000F3D8                            loc_17112:
0000F3D8 4A54                       	tst.w	(a4)
0000F3DA 6600 0000                  	bne.w	loc_1715C
0000F3DE 3011                       	move.w	(a1),d0
0000F3E0 9041                       	sub.w	d1,d0
0000F3E2 9042                       	sub.w	d2,d0
0000F3E4 6400                       	bcc.s	loc_1712A
0000F3E6 D046                       	add.w	d6,d0
0000F3E8 6500                       	bcs.s	loc_17130
0000F3EA 6000 0000                  	bra.w	loc_1715C
0000F3EE                            ; ===========================================================================
0000F3EE                            
0000F3EE                            loc_1712A:
0000F3EE B044                       	cmp.w	d4,d0
0000F3F0 6200 0000                  	bhi.w	loc_1715C
0000F3F4                            
0000F3F4                            loc_17130:
0000F3F4 3029 0002                  	move.w	2(a1),d0
0000F3F8 9041                       	sub.w	d1,d0
0000F3FA 9043                       	sub.w	d3,d0
0000F3FC 6400                       	bcc.s	loc_17142
0000F3FE D046                       	add.w	d6,d0
0000F400 6500                       	bcs.s	loc_17148
0000F402 6000 0000                  	bra.w	loc_1715C
0000F406                            ; ===========================================================================
0000F406                            
0000F406                            loc_17142:
0000F406 B045                       	cmp.w	d5,d0
0000F408 6200 0000                  	bhi.w	loc_1715C
0000F40C                            
0000F40C                            loc_17148:
0000F40C 38BC 0604                  	move.w	#$604,(a4)
0000F410 6100                       	bsr.s	loc_17168
0000F412 47F8 8710                  	lea	(Ring_consumption_table+2).w,a3
0000F416                            
0000F416                            loc_17152:
0000F416 4A5B                       	tst.w	(a3)+
0000F418 66FC                       	bne.s	loc_17152
0000F41A 370C                       	move.w	a4,-(a3)
0000F41C 5278 870E                  	addq.w	#1,(Ring_consumption_table).w
0000F420                            
0000F420                            loc_1715C:
0000F420 5849                       	addq.w	#4,a1
0000F422 544C                       	addq.w	#2,a4
0000F424 B5C9                       	cmpa.l	a1,a2
0000F426 6600 FFB0                  	bne.w	loc_17112
0000F42A                            
0000F42A                            return_17166:
0000F42A 4E75                       	rts
0000F42C                            ; ===========================================================================
0000F42C                            
0000F42C                            loc_17168:
0000F42C 5378 870A                  	subq.w	#1,(Perfect_rings_left).w
0000F430 6000 BCAE                  	bra.w	CollectRing
0000F434                            ; ===========================================================================
0000F434                            
0000F434                            BuildRings:
0000F434 2078 8700                  	movea.l	(Ring_start_addr_ROM).w,a0
0000F438 2E38 8704                  	move.l	(Ring_end_addr_ROM).w,d7
0000F43C 9E88                       	sub.l	a0,d7
0000F43E 6600                       	bne.s	loc_17186
0000F440 4E75                       	rts
0000F442                            ; ===========================================================================
0000F442                            
0000F442                            loc_17186:
0000F442 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F446 47F8 F700                  	lea	($FFFFF700).w,a3
0000F44A                            
0000F44A                            loc_1718A:
0000F44A 4A5C                       	tst.w	(a4)+
0000F44C 6B00 0000                  	bmi.w	loc_171EC
0000F450 3610                       	move.w	(a0),d3
0000F452 9653                       	sub.w	(a3),d3
0000F454 0643 0080                  	addi.w	#$80,d3
0000F458 3428 0002                  	move.w	2(a0),d2
0000F45C 946B 0004                  	sub.w	4(a3),d2
0000F460 0242 07FF                  	andi.w	#$7FF,d2
0000F464 5042                       	addi.w	#8,d2
0000F466 6B00                       	bmi.s	loc_171EC
0000F468 0C42 00F0                  	cmpi.w	#$F0,d2
0000F46C 6C00                       	bge.s	loc_171EC
0000F46E 0642 0078                  	addi.w	#$78,d2
0000F472 43F9 0000 B438             	lea	(Map_Obj25).l,a1
0000F478 7200                       	moveq	#0,d1
0000F47A 122C FFFF                  	move.b	-1(a4),d1
0000F47E 6600                       	bne.s	loc_171C8
0000F480 1238 FEC3                  	move.b	($FFFFFEC3).w,d1
0000F484                            
0000F484                            loc_171C8:
0000F484 D241                       	add.w	d1,d1
0000F486 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F48A 7200                       	moveq	#$00,d1
0000F48C 1219                       	move.b	(a1)+,d1
0000F48E 5301                       	subq.b	#1,d1
0000F490 6B00                       	bmi.s	loc_171EC
0000F492 1019                       	move.b	(a1)+,d0
0000F494 4880                       	ext.w	d0
0000F496 D042                       	add.w	d2,d0
0000F498 34C0                       	move.w	d0,(a2)+
0000F49A 14D9                       	move.b	(a1)+,(a2)+
0000F49C 5205                       	addq.b	#1,d5
0000F49E 14C5                       	move.b	d5,(a2)+
0000F4A0 1019                       	move.b	(a1)+,d0
0000F4A2 E148                       	lsl.w	#8,d0
0000F4A4 1019                       	move.b	(a1)+,d0
0000F4A6 0640 26BA                  	addi.w	#($2000+ringart),d0
0000F4AA 34C0                       	move.w	d0,(a2)+
0000F4AC 1019                       	move.b	(a1)+,d0
0000F4AE 4880                       	ext.w	d0
0000F4B0 D043                       	add.w	d3,d0
0000F4B2 34C0                       	move.w	d0,(a2)+
0000F4B4                            
0000F4B4                            loc_171EC:
0000F4B4 5848                       	addq.w	#4,a0
0000F4B6 5947                       	subq.w	#4,d7
0000F4B8 6600 FF90                  	bne.w	loc_1718A
0000F4BC 4E75                       	rts
0000F4BE                            ; ===========================================================================
0000F4BE                            
0000F4BE                            RingsManager_Setup:
0000F4BE 43F8 8300                  	lea	(Ring_Positions).w,a1
0000F4C2 7000                       	moveq	#0,d0
0000F4C4 323C 00FF                  	move.w	#Rings_Space/4-1,d1
0000F4C8                            
0000F4C8                            loc_172AE:				; CODE XREF: h+33Cj
0000F4C8 22C0                       	move.l	d0,(a1)+
0000F4CA 51C9 FFFC                  	dbf	d1,loc_172AE
0000F4CE                            
0000F4CE                            	; d0 = 0
0000F4CE 43F8 870E                  	lea	(Ring_consumption_table).w,a1
0000F4D2 323C 001F                  	move.w	#$1F,d1
0000F4D6                            RMBack1:
0000F4D6 22C0                       	move.l	d0,(a1)+
0000F4D8 51C9 FFFC                  	dbf	d1,RMBack1
0000F4DC                            
0000F4DC 7A00                       	moveq	#0,d5
0000F4DE 7000                       	moveq	#0,d0
0000F4E0 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000F4E4 ED08                       	lsl.b	#6,d0
0000F4E6 E848                       	lsr.w	#4,d0
0000F4E8 43F9 0000 0000             	lea	(RingPos_Index).l,a1
0000F4EE 3031 0000                  	move.w	(a1,d0.w),d0
0000F4F2 43F1 0000                  	lea	(a1,d0.w),a1
0000F4F6 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F4FA 5849                       	addq.w	#4,a1
0000F4FC 7A00                       	moveq	#0,d5
0000F4FE 303C 01FE                  	move.w	#(Max_Rings-1),d0	
0000F502                            	
0000F502                            RMBack2:
0000F502 4A99                       	tst.l	(a1)+
0000F504 6B00                       	bmi.s	RM2
0000F506 5245                       	addq.w	#1,d5
0000F508 51C8 FFF8                  	dbf	d0,RMBack2
0000F50C                            RM2:
0000F50C 31C5 870A                  	move.w	d5,(Perfect_rings_left).w
0000F510 4E75                       	rts
0000F512                            ; ===========================================================================
0000F512                            
0000F512                            ; ===========================================================================
0000F512                            ; ---------------------------------------------------------------------------
0000F512                            ; Object 41 - springs
0000F512                            ; ---------------------------------------------------------------------------
0000F512                            
0000F512                            Obj41:					; XREF: Obj_Index
0000F512 7000                       		moveq	#0,d0
0000F514 1028 0024                  		move.b	$24(a0),d0
0000F518 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F51C 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F520 6100 F60C                  		bsr.w	DisplaySprite
0000F524 3028 0008                  		move.w	8(a0),d0
0000F528 0240 FF80                  		andi.w	#$FF80,d0
0000F52C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F530 0441 0080                  		subi.w	#$80,d1
0000F534 0241 FF80                  		andi.w	#$FF80,d1
0000F538 9041                       		sub.w	d1,d0
0000F53A 0C40 0280                  		cmpi.w	#$280,d0
0000F53E 6300                       		bls.s	Obj41_NoDel
0000F540 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F544 6700 F638                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000F548 3440                       		movea.w	d0,a2	; load address into a2
0000F54A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F54E 6000 F62E                  		bra.w	DeleteObject	; and delete object
0000F552                            
0000F552                            Obj41_NoDel:
0000F552 4E75                       		rts	
0000F554                            ; ===========================================================================
0000F554 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F556 0000                       		dc.w Obj41_Up-Obj41_Index
0000F558 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F55A 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F55C 0000                       		dc.w Obj41_LR-Obj41_Index
0000F55E 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F560 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F562 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F564 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F566 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F568                            
0000F568 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F56A F600                       		dc.w -$A00		; power	of yellow spring
0000F56C                            ; ===========================================================================
0000F56C                            
0000F56C                            Obj41_Main:				; XREF: Obj41_Index
0000F56C 5428 0024                  		addq.b	#2,$24(a0)
0000F570 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F578 317C 0523 0002             		move.w	#$523,2(a0)
0000F57E 0028 0004 0001             		ori.b	#4,1(a0)
0000F584 117C 0010 0019             		move.b	#$10,$19(a0)
0000F58A 117C 0004 0018             		move.b	#4,$18(a0)
0000F590 1028 0028                  		move.b	$28(a0),d0
0000F594 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F598 6700                       		beq.s	loc_DB54	; if not, branch
0000F59A 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F5A0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F5A6 117C 0003 001A             		move.b	#3,$1A(a0)
0000F5AC 317C 0533 0002             		move.w	#$533,2(a0)
0000F5B2 117C 0008 0019             		move.b	#8,$19(a0)
0000F5B8                            
0000F5B8                            loc_DB54:
0000F5B8 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F5BC 6700                       		beq.s	loc_DB66	; if not, branch
0000F5BE 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F5C4 08E8 0001 0022             		bset	#1,$22(a0)
0000F5CA                            
0000F5CA                            loc_DB66:
0000F5CA 0800 0001                  		btst	#1,d0
0000F5CE 6700                       		beq.s	loc_DB72
0000F5D0 08E8 0005 0002             		bset	#5,2(a0)
0000F5D6                            
0000F5D6                            loc_DB72:
0000F5D6 0240 000F                  		andi.w	#$F,d0
0000F5DA 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F5E0 4E75                       		rts	
0000F5E2                            ; ===========================================================================
0000F5E2                            
0000F5E2                            Obj41_Up:				; XREF: Obj41_Index
0000F5E2 323C 001B                  		move.w	#$1B,d1
0000F5E6 343C 0008                  		move.w	#8,d2
0000F5EA 363C 0010                  		move.w	#$10,d3
0000F5EE 3828 0008                  		move.w	8(a0),d4
0000F5F2 6100 0000                  		bsr.w	SolidObject
0000F5F6 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F5FA 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F5FC 4E75                       		rts	
0000F5FE                            ; ===========================================================================
0000F5FE                            
0000F5FE                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F5FE 5428 0024                  		addq.b	#2,$24(a0)
0000F602 5069 000C                  		addq.w	#8,$C(a1)
0000F606 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F60C 08E9 0001 0022             		bset	#1,$22(a1)
0000F612 08A9 0003 0022             		bclr	#3,$22(a1)
0000F618 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F61E 137C 0002 0024             		move.b	#2,$24(a1)
0000F624 08A8 0003 0022             		bclr	#3,$22(a0)
0000F62A 4228 0025                  		clr.b	$25(a0)
0000F62E 303C 00CC                  		move.w	#$CC,d0
0000F632 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play spring sound
0000F638                            
0000F638                            Obj41_AniUp:				; XREF: Obj41_Index
0000F638 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F63E 6000 C54E                  		bra.w	AnimateSprite
0000F642                            ; ===========================================================================
0000F642                            
0000F642                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F642 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F648 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F64C 4E75                       		rts	
0000F64E                            ; ===========================================================================
0000F64E                            
0000F64E                            Obj41_LR:				; XREF: Obj41_Index
0000F64E 323C 0013                  		move.w	#$13,d1
0000F652 343C 000E                  		move.w	#$E,d2
0000F656 363C 000F                  		move.w	#$F,d3
0000F65A 3828 0008                  		move.w	8(a0),d4
0000F65E 6100 0000                  		bsr.w	SolidObject
0000F662 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F668 6600                       		bne.s	loc_DC0C
0000F66A 117C 0008 0024             		move.b	#8,$24(a0)
0000F670                            
0000F670                            loc_DC0C:
0000F670 0828 0005 0022             		btst	#5,$22(a0)
0000F676 6600                       		bne.s	Obj41_BounceLR
0000F678 4E75                       		rts	
0000F67A                            ; ===========================================================================
0000F67A                            
0000F67A                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F67A 5428 0024                  		addq.b	#2,$24(a0)
0000F67E 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F684 5069 0008                  		addq.w	#8,8(a1)
0000F688 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F68E 6600                       		bne.s	loc_DC36	; if yes, branch
0000F690 0469 0010 0008             		subi.w	#$10,8(a1)
0000F696 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F69A                            
0000F69A                            loc_DC36:
0000F69A 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F6A0 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000F6A6 0869 0000 0022             		bchg	#0,$22(a1)
0000F6AC 0829 0002 0022             		btst	#2,$22(a1)
0000F6B2 6600                       		bne.s	loc_DC56
0000F6B4 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000F6BA                            
0000F6BA                            loc_DC56:
0000F6BA 08A8 0005 0022             		bclr	#5,$22(a0)
0000F6C0 08A9 0005 0022             		bclr	#5,$22(a1)
0000F6C6 303C 00CC                  		move.w	#$CC,d0
0000F6CA 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play spring sound
0000F6D0                            
0000F6D0                            Obj41_AniLR:				; XREF: Obj41_Index
0000F6D0 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F6D6 6000 C4B6                  		bra.w	AnimateSprite
0000F6DA                            ; ===========================================================================
0000F6DA                            
0000F6DA                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F6DA 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F6E0 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F6E4 4E75                       		rts	
0000F6E6                            ; ===========================================================================
0000F6E6                            
0000F6E6                            Obj41_Dwn:				; XREF: Obj41_Index
0000F6E6 323C 001B                  		move.w	#$1B,d1
0000F6EA 343C 0008                  		move.w	#8,d2
0000F6EE 363C 0010                  		move.w	#$10,d3
0000F6F2 3828 0008                  		move.w	8(a0),d4
0000F6F6 6100 0000                  		bsr.w	SolidObject
0000F6FA 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F700 6600                       		bne.s	loc_DCA4
0000F702 117C 000E 0024             		move.b	#$E,$24(a0)
0000F708                            
0000F708                            loc_DCA4:
0000F708 4A28 0025                  		tst.b	$25(a0)
0000F70C 6600                       		bne.s	locret_DCAE
0000F70E 4A44                       		tst.w	d4
0000F710 6B00                       		bmi.s	Obj41_BounceDwn
0000F712                            
0000F712                            locret_DCAE:
0000F712 4E75                       		rts	
0000F714                            ; ===========================================================================
0000F714                            
0000F714                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F714 5428 0024                  		addq.b	#2,$24(a0)
0000F718 5169 000C                  		subq.w	#8,$C(a1)
0000F71C 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F722 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F726 08E9 0001 0022             		bset	#1,$22(a1)
0000F72C 08A9 0003 0022             		bclr	#3,$22(a1)
0000F732 137C 0002 0024             		move.b	#2,$24(a1)
0000F738 08A8 0003 0022             		bclr	#3,$22(a0)
0000F73E 4228 0025                  		clr.b	$25(a0)
0000F742 303C 00CC                  		move.w	#$CC,d0
0000F746 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play spring sound
0000F74C                            
0000F74C                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F74C 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F752 6000 C43A                  		bra.w	AnimateSprite
0000F756                            ; ===========================================================================
0000F756                            
0000F756                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F756 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F75C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F760 4E75                       		rts	
0000F762                            ; ===========================================================================
0000F762                            Ani_obj41:
0000F762                            	include "_anim\obj41.asm"
0000F762                            ; ---------------------------------------------------------------------------
0000F762                            ; Animation script - springs
0000F762                            ; ---------------------------------------------------------------------------
0000F762 0000                       		dc.w byte_DD02-Ani_obj41
0000F764 0000                       		dc.w byte_DD0E-Ani_obj41
0000F766 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F772 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F77E                            		even
0000F77E                            		even
0000F77E                            
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            ; Sprite mappings - springs
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            Map_obj41:
0000F77E                            	include "_maps\obj41.asm"
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            ; Sprite mappings - springs
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E 0000                       		dc.w byte_DD26-Map_obj41
0000F780 0000                       		dc.w byte_DD31-Map_obj41
0000F782 0000                       		dc.w byte_DD37-Map_obj41
0000F784 0000                       		dc.w byte_DD47-Map_obj41
0000F786 0000                       		dc.w byte_DD4D-Map_obj41
0000F788 0000                       		dc.w byte_DD53-Map_obj41
0000F78A 02                         byte_DD26:	dc.b 2
0000F78B F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F790 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F795 01                         byte_DD31:	dc.b 1
0000F796 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F79B 03                         byte_DD37:	dc.b 3
0000F79C E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F7A1 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F7A6 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F7AB 01                         byte_DD47:	dc.b 1
0000F7AC F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F7B1 01                         byte_DD4D:	dc.b 1
0000F7B2 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F7B7 04                         byte_DD53:	dc.b 4
0000F7B8 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F7BD F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F7C2 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F7C7 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F7CC                            		even
0000F7CC                            		even
0000F7CC                            
0000F7CC                            ; ===========================================================================
0000F7CC                            ; ---------------------------------------------------------------------------
0000F7CC                            ; Object 42 - Newtron enemy (GHZ)
0000F7CC                            ; ---------------------------------------------------------------------------
0000F7CC                            
0000F7CC                            Obj42:					; XREF: Obj_Index
0000F7CC 7000                       		moveq	#0,d0
0000F7CE 1028 0024                  		move.b	$24(a0),d0
0000F7D2 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F7D6 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F7DA                            ; ===========================================================================
0000F7DA 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F7DC 0000                       		dc.w Obj42_Action-Obj42_Index
0000F7DE 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F7E0                            ; ===========================================================================
0000F7E0                            
0000F7E0                            Obj42_Main:				; XREF: Obj42_Index
0000F7E0 5428 0024                  		addq.b	#2,$24(a0)
0000F7E4 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F7EC 317C 049B 0002             		move.w	#$49B,2(a0)
0000F7F2 117C 0004 0001             		move.b	#4,1(a0)
0000F7F8 117C 0004 0018             		move.b	#4,$18(a0)
0000F7FE 117C 0014 0019             		move.b	#$14,$19(a0)
0000F804 117C 0010 0016             		move.b	#$10,$16(a0)
0000F80A 117C 0008 0017             		move.b	#8,$17(a0)
0000F810                            
0000F810                            Obj42_Action:				; XREF: Obj42_Index
0000F810 7000                       		moveq	#0,d0
0000F812 1028 0025                  		move.b	$25(a0),d0
0000F816 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F81A 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F81E 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F824 6100 C368                  		bsr.w	AnimateSprite
0000F828 6000 0000                  		bra.w	MarkObjGone
0000F82C                            ; ===========================================================================
0000F82C 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F82E 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F830 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F832 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F834 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F836                            ; ===========================================================================
0000F836                            
0000F836                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F836 08E8 0000 0022             		bset	#0,$22(a0)
0000F83C 3038 D008                  		move.w	($FFFFD008).w,d0
0000F840 9068 0008                  		sub.w	8(a0),d0
0000F844 6400                       		bcc.s	loc_DDEA
0000F846 4440                       		neg.w	d0
0000F848 08A8 0000 0022             		bclr	#0,$22(a0)
0000F84E                            
0000F84E                            loc_DDEA:
0000F84E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F852 6400                       		bcc.s	locret_DE12	; if not, branch
0000F854 5428 0025                  		addq.b	#2,$25(a0)
0000F858 117C 0001 001C             		move.b	#1,$1C(a0)
0000F85E 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F862 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F864 317C 249B 0002             		move.w	#$249B,2(a0)
0000F86A 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F870 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F876                            
0000F876                            locret_DE12:
0000F876 4E75                       		rts	
0000F878                            ; ===========================================================================
0000F878                            
0000F878                            Obj42_Type00:				; XREF: Obj42_Index2
0000F878 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F87E 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F880 08E8 0000 0022             		bset	#0,$22(a0)
0000F886 3038 D008                  		move.w	($FFFFD008).w,d0
0000F88A 9068 0008                  		sub.w	8(a0),d0
0000F88E 6400                       		bcc.s	locret_DE32
0000F890 08A8 0000 0022             		bclr	#0,$22(a0)
0000F896                            
0000F896                            locret_DE32:
0000F896 4E75                       		rts	
0000F898                            ; ===========================================================================
0000F898                            
0000F898                            Obj42_Fall:				; XREF: Obj42_Type00
0000F898 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F89E 6600                       		bne.s	loc_DE42
0000F8A0 117C 000C 0020             		move.b	#$C,$20(a0)
0000F8A6                            
0000F8A6                            loc_DE42:
0000F8A6 6100 F24C                  		bsr.w	ObjectFall
0000F8AA 6100 0000                  		bsr.w	ObjHitFloor
0000F8AE 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F8B0 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F8B2 D368 000C                  		add.w	d1,$C(a0)
0000F8B6 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F8BC 5428 0025                  		addq.b	#2,$25(a0)
0000F8C0 117C 0002 001C             		move.b	#2,$1C(a0)
0000F8C6 0828 0005 0002             		btst	#5,2(a0)
0000F8CC 6700                       		beq.s	Obj42_Move
0000F8CE 5228 001C                  		addq.b	#1,$1C(a0)
0000F8D2                            
0000F8D2                            Obj42_Move:
0000F8D2 117C 000D 0020             		move.b	#$D,$20(a0)
0000F8D8 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F8DE 0828 0000 0022             		btst	#0,$22(a0)
0000F8E4 6600                       		bne.s	locret_DE86
0000F8E6 4468 0010                  		neg.w	$10(a0)
0000F8EA                            
0000F8EA                            locret_DE86:
0000F8EA 4E75                       		rts	
0000F8EC                            ; ===========================================================================
0000F8EC                            
0000F8EC                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F8EC 6100 F226                  		bsr.w	SpeedToPos
0000F8F0 6100 0000                  		bsr.w	ObjHitFloor
0000F8F4 0C41 FFF8                  		cmpi.w	#-8,d1
0000F8F8 6D00                       		blt.s	loc_DEA2
0000F8FA 0C41 000C                  		cmpi.w	#$C,d1
0000F8FE 6C00                       		bge.s	loc_DEA2
0000F900 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F904 4E75                       		rts	
0000F906                            ; ===========================================================================
0000F906                            
0000F906                            loc_DEA2:
0000F906 5428 0025                  		addq.b	#2,$25(a0)
0000F90A 4E75                       		rts	
0000F90C                            ; ===========================================================================
0000F90C                            
0000F90C                            Obj42_Speed:				; XREF: Obj42_Index2
0000F90C 6100 F206                  		bsr.w	SpeedToPos
0000F910 4E75                       		rts	
0000F912                            ; ===========================================================================
0000F912                            
0000F912                            Obj42_Type01:				; XREF: Obj42_Index2
0000F912 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F918 6600                       		bne.s	Obj42_FireMissile
0000F91A 117C 000C 0020             		move.b	#$C,$20(a0)
0000F920                            
0000F920                            Obj42_FireMissile:
0000F920 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F926 6600                       		bne.s	locret_DF14
0000F928 4A28 0032                  		tst.b	$32(a0)
0000F92C 6600                       		bne.s	locret_DF14
0000F92E 117C 0001 0032             		move.b	#1,$32(a0)
0000F934 6100 F94E                  		bsr.w	SingleObjLoad
0000F938 6600                       		bne.s	locret_DF14
0000F93A 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F93E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F944 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F94A 5169 000C                  		subq.w	#8,$C(a1)
0000F94E 337C 0200 0010             		move.w	#$200,$10(a1)
0000F954 303C 0014                  		move.w	#$14,d0
0000F958 0828 0000 0022             		btst	#0,$22(a0)
0000F95E 6600                       		bne.s	loc_DF04
0000F960 4440                       		neg.w	d0
0000F962 4469 0010                  		neg.w	$10(a1)
0000F966                            
0000F966                            loc_DF04:
0000F966 D169 0008                  		add.w	d0,8(a1)
0000F96A 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F970 137C 0001 0028             		move.b	#1,$28(a1)
0000F976                            
0000F976                            locret_DF14:
0000F976 4E75                       		rts	
0000F978                            ; ===========================================================================
0000F978                            
0000F978                            Obj42_Delete:				; XREF: Obj42_Index
0000F978 6000 F204                  		bra.w	DeleteObject
0000F97C                            ; ===========================================================================
0000F97C                            Ani_obj42:
0000F97C                            	include "_anim\obj42.asm"
0000F97C                            ; ---------------------------------------------------------------------------
0000F97C                            ; Animation script - Newtron enemy
0000F97C                            ; ---------------------------------------------------------------------------
0000F97C 0000                       		dc.w byte_DF24-Ani_obj42
0000F97E 0000                       		dc.w byte_DF28-Ani_obj42
0000F980 0000                       		dc.w byte_DF30-Ani_obj42
0000F982 0000                       		dc.w byte_DF34-Ani_obj42
0000F984 0000                       		dc.w byte_DF38-Ani_obj42
0000F986 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F98A 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F992 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F996 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F99A 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F9A4                            		even
0000F9A4                            		even
0000F9A4                            
0000F9A4                            ; ---------------------------------------------------------------------------
0000F9A4                            ; Sprite mappings - Newtron enemy (GHZ)
0000F9A4                            ; ---------------------------------------------------------------------------
0000F9A4                            Map_obj42:
0000F9A4                            	include "_maps\obj42.asm"
0000F9A4                            ; ---------------------------------------------------------------------------
0000F9A4                            ; Sprite mappings - Newtron enemy (GHZ)
0000F9A4                            ; ---------------------------------------------------------------------------
0000F9A4 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F9A8 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F9AC 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F9B0 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F9B4 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F9B8 0000                       		dc.w byte_DFF8-Map_obj42
0000F9BA 03                         byte_DF58:	dc.b 3
0000F9BB EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F9C0 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F9C5 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F9CA 03                         byte_DF68:	dc.b 3
0000F9CB EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F9D0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F9D5 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F9DA 03                         byte_DF78:	dc.b 3
0000F9DB EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F9E0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F9E5 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F9EA 04                         byte_DF88:	dc.b 4
0000F9EB EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F9F0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F9F5 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F9FA 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F9FF 03                         byte_DF9D:	dc.b 3
0000FA00 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000FA05 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000FA0A 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000FA0F 02                         byte_DFAD:	dc.b 2
0000FA10 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FA15 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FA1A 03                         byte_DFB8:	dc.b 3
0000FA1B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FA20 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FA25 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000FA2A 03                         byte_DFC8:	dc.b 3
0000FA2B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FA30 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FA35 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000FA3A 03                         byte_DFD8:	dc.b 3
0000FA3B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FA40 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FA45 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000FA4A 03                         byte_DFE8:	dc.b 3
0000FA4B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FA50 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FA55 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000FA5A 00                         byte_DFF8:	dc.b 0
0000FA5C 00                         		even
0000FA5C 00                         		even
0000FA5C                            
0000FA5C                            ; ===========================================================================
0000FA5C                            ; ---------------------------------------------------------------------------
0000FA5C                            ; Object 43 - Roller enemy (SYZ)
0000FA5C                            ; ---------------------------------------------------------------------------
0000FA5C                            
0000FA5C                            Obj43:					; XREF: Obj_Index
0000FA5C 7000                       		moveq	#0,d0
0000FA5E 1028 0024                  		move.b	$24(a0),d0
0000FA62 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000FA66 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000FA6A                            ; ===========================================================================
0000FA6A 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000FA6C 0000                       		dc.w Obj43_Action-Obj43_Index
0000FA6E                            ; ===========================================================================
0000FA6E                            
0000FA6E                            Obj43_Main:				; XREF: Obj43_Index
0000FA6E 117C 000E 0016             		move.b	#$E,$16(a0)
0000FA74 117C 0008 0017             		move.b	#8,$17(a0)
0000FA7A 6100 F078                  		bsr.w	ObjectFall
0000FA7E 6100 0000                  		bsr.w	ObjHitFloor
0000FA82 4A41                       		tst.w	d1
0000FA84 6A00                       		bpl.s	locret_E052
0000FA86 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000FA8A 317C 0000 0012             		move.w	#0,$12(a0)
0000FA90 5428 0024                  		addq.b	#2,$24(a0)
0000FA94 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000FA9C 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000FAA2 117C 0004 0001             		move.b	#4,1(a0)
0000FAA8 117C 0004 0018             		move.b	#4,$18(a0)
0000FAAE 117C 0010 0019             		move.b	#$10,$19(a0)
0000FAB4                            
0000FAB4                            locret_E052:
0000FAB4 4E75                       		rts	
0000FAB6                            ; ===========================================================================
0000FAB6                            
0000FAB6                            Obj43_Action:				; XREF: Obj43_Index
0000FAB6 7000                       		moveq	#0,d0
0000FAB8 1028 0025                  		move.b	$25(a0),d0
0000FABC 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000FAC0 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000FAC4 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000FACA 6100 C0C2                  		bsr.w	AnimateSprite
0000FACE 3028 0008                  		move.w	8(a0),d0
0000FAD2 0240 FF80                  		andi.w	#$FF80,d0
0000FAD6 3238 F700                  		move.w	($FFFFF700).w,d1
0000FADA 0441 0080                  		subi.w	#$80,d1
0000FADE 0241 FF80                  		andi.w	#$FF80,d1
0000FAE2 9041                       		sub.w	d1,d0
0000FAE4 0C40 0280                  		cmpi.w	#$280,d0
0000FAE8 6E00 0000                  		bgt.w	Obj43_ChkGone
0000FAEC 6000 F040                  		bra.w	DisplaySprite
0000FAF0                            ; ===========================================================================
0000FAF0                            
0000FAF0                            Obj43_ChkGone:				; XREF: Obj43_Action
0000FAF0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FAF4 6700                       		beq.s	Obj43_Delete		; if it's zero, don't remember object
0000FAF6 3440                       		movea.w	d0,a2	; load address into a2
0000FAF8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FAFC                            
0000FAFC                            Obj43_Delete:
0000FAFC 6000 F080                  		bra.w	DeleteObject
0000FB00                            ; ===========================================================================
0000FB00 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000FB02 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000FB04 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000FB06 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000FB08                            ; ===========================================================================
0000FB08                            
0000FB08                            Obj43_RollChk:				; XREF: Obj43_Index2
0000FB08 3038 D008                  		move.w	($FFFFD008).w,d0
0000FB0C 0440 0100                  		subi.w	#$100,d0
0000FB10 6500                       		bcs.s	loc_E0D2
0000FB12 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000FB16 6500                       		bcs.s	loc_E0D2
0000FB18 5828 0025                  		addq.b	#4,$25(a0)
0000FB1C 117C 0002 001C             		move.b	#2,$1C(a0)
0000FB22 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000FB28 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000FB2E                            
0000FB2E                            loc_E0D2:
0000FB2E 588F                       		addq.l	#4,sp
0000FB30 4E75                       		rts	
0000FB32                            ; ===========================================================================
0000FB32                            
0000FB32                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000FB32 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000FB38 6700                       		beq.s	loc_E0F8
0000FB3A 5368 0030                  		subq.w	#1,$30(a0)
0000FB3E 6A00                       		bpl.s	locret_E0F6
0000FB40 117C 0001 001C             		move.b	#1,$1C(a0)
0000FB46 317C 0700 0010             		move.w	#$700,$10(a0)
0000FB4C 117C 008E 0020             		move.b	#$8E,$20(a0)
0000FB52                            
0000FB52                            locret_E0F6:
0000FB52 4E75                       		rts	
0000FB54                            ; ===========================================================================
0000FB54                            
0000FB54                            loc_E0F8:
0000FB54 5428 0025                  		addq.b	#2,$25(a0)
0000FB58 4E75                       		rts	
0000FB5A                            ; ===========================================================================
0000FB5A                            
0000FB5A                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000FB5A 6100 0000                  		bsr.w	Obj43_Stop
0000FB5E 6100 EFB4                  		bsr.w	SpeedToPos
0000FB62 6100 0000                  		bsr.w	ObjHitFloor
0000FB66 0C41 FFF8                  		cmpi.w	#-8,d1
0000FB6A 6D00                       		blt.s	Obj43_Jump
0000FB6C 0C41 000C                  		cmpi.w	#$C,d1
0000FB70 6C00                       		bge.s	Obj43_Jump
0000FB72 D368 000C                  		add.w	d1,$C(a0)
0000FB76 4E75                       		rts	
0000FB78                            ; ===========================================================================
0000FB78                            
0000FB78                            Obj43_Jump:
0000FB78 5428 0025                  		addq.b	#2,$25(a0)
0000FB7C 08E8 0000 0032             		bset	#0,$32(a0)
0000FB82 6700                       		beq.s	locret_E12E
0000FB84 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000FB8A                            
0000FB8A                            locret_E12E:
0000FB8A 4E75                       		rts	
0000FB8C                            ; ===========================================================================
0000FB8C                            
0000FB8C                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000FB8C 6100 EF66                  		bsr.w	ObjectFall
0000FB90 4A68 0012                  		tst.w	$12(a0)
0000FB94 6B00                       		bmi.s	locret_E150
0000FB96 6100 0000                  		bsr.w	ObjHitFloor
0000FB9A 4A41                       		tst.w	d1
0000FB9C 6A00                       		bpl.s	locret_E150
0000FB9E D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000FBA2 5528 0025                  		subq.b	#2,$25(a0)
0000FBA6 317C 0000 0012             		move.w	#0,$12(a0)
0000FBAC                            
0000FBAC                            locret_E150:
0000FBAC 4E75                       		rts	
0000FBAE                            
0000FBAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBAE                            
0000FBAE                            
0000FBAE                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000FBAE 4A28 0032                  		tst.b	$32(a0)
0000FBB2 6B00                       		bmi.s	locret_E188
0000FBB4 3038 D008                  		move.w	($FFFFD008).w,d0
0000FBB8 0440 0030                  		subi.w	#$30,d0
0000FBBC 9068 0008                  		sub.w	8(a0),d0
0000FBC0 6400                       		bcc.s	locret_E188
0000FBC2 117C 0000 001C             		move.b	#0,$1C(a0)
0000FBC8 117C 000E 0020             		move.b	#$E,$20(a0)
0000FBCE 4268 0010                  		clr.w	$10(a0)
0000FBD2 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000FBD8 117C 0002 0025             		move.b	#2,$25(a0)
0000FBDE 08E8 0007 0032             		bset	#7,$32(a0)
0000FBE4                            
0000FBE4                            locret_E188:
0000FBE4 4E75                       		rts	
0000FBE6                            ; End of function Obj43_Stop
0000FBE6                            
0000FBE6                            ; ===========================================================================
0000FBE6                            Ani_obj43:
0000FBE6                            	include "_anim\obj43.asm"
0000FBE6                            ; ---------------------------------------------------------------------------
0000FBE6                            ; Animation script - Roller enemy
0000FBE6                            ; ---------------------------------------------------------------------------
0000FBE6 0000                       		dc.w byte_E190-Ani_obj43
0000FBE8 0000                       		dc.w byte_E196-Ani_obj43
0000FBEA 0000                       		dc.w byte_E19C-Ani_obj43
0000FBEC 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000FBF2 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000FBF8 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000FBFE 00                         		even
0000FBFE 00                         		even
0000FBFE                            
0000FBFE                            ; ---------------------------------------------------------------------------
0000FBFE                            ; Sprite mappings - Roller enemy (SYZ)
0000FBFE                            ; ---------------------------------------------------------------------------
0000FBFE                            Map_obj43:
0000FBFE                            	include "_maps\obj43.asm"
0000FBFE                            ; ---------------------------------------------------------------------------
0000FBFE                            ; Sprite mappings - Roller enemy (SYZ)
0000FBFE                            ; ---------------------------------------------------------------------------
0000FBFE 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000FC02 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000FC06 0000                       		dc.w byte_E1CE-Map_obj43
0000FC08 02                         byte_E1AC:	dc.b 2
0000FC09 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000FC0E F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000FC13 02                         byte_E1B7:	dc.b 2
0000FC14 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000FC19 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000FC1E 01                         byte_E1C2:	dc.b 1
0000FC1F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000FC24 01                         byte_E1C8:	dc.b 1
0000FC25 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000FC2A 01                         byte_E1CE:	dc.b 1
0000FC2B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000FC30                            		even
0000FC30                            		even
0000FC30                            
0000FC30                            ; ===========================================================================
0000FC30                            ; ---------------------------------------------------------------------------
0000FC30                            ; Object 44 - walls (GHZ)
0000FC30                            ; ---------------------------------------------------------------------------
0000FC30                            
0000FC30                            Obj44:					; XREF: Obj_Index
0000FC30 7000                       		moveq	#0,d0
0000FC32 1028 0024                  		move.b	$24(a0),d0
0000FC36 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000FC3A 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000FC3E                            ; ===========================================================================
0000FC3E 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000FC40 0000                       		dc.w Obj44_Solid-Obj44_Index
0000FC42 0000                       		dc.w Obj44_Display-Obj44_Index
0000FC44                            ; ===========================================================================
0000FC44                            
0000FC44                            Obj44_Main:				; XREF: Obj44_Index
0000FC44 5428 0024                  		addq.b	#2,$24(a0)
0000FC48 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000FC50 317C 434C 0002             		move.w	#$434C,2(a0)
0000FC56 0028 0004 0001             		ori.b	#4,1(a0)
0000FC5C 117C 0008 0019             		move.b	#8,$19(a0)
0000FC62 117C 0006 0018             		move.b	#6,$18(a0)
0000FC68 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000FC6E 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000FC74 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000FC76 5428 0024                  		addq.b	#2,$24(a0)
0000FC7A 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000FC7C                            ; ===========================================================================
0000FC7C                            
0000FC7C                            Obj44_Solid:				; XREF: Obj44_Index
0000FC7C 323C 0013                  		move.w	#$13,d1
0000FC80 343C 0028                  		move.w	#$28,d2
0000FC84 6100 A332                  		bsr.w	Obj44_SolidWall
0000FC88                            
0000FC88                            Obj44_Display:				; XREF: Obj44_Index
0000FC88 6100 EEA4                  		bsr.w	DisplaySprite
0000FC8C 3028 0008                  		move.w	8(a0),d0
0000FC90 0240 FF80                  		andi.w	#$FF80,d0
0000FC94 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC98 0441 0080                  		subi.w	#$80,d1
0000FC9C 0241 FF80                  		andi.w	#$FF80,d1
0000FCA0 9041                       		sub.w	d1,d0
0000FCA2 0C40 0280                  		cmpi.w	#$280,d0
0000FCA6 6300                       		bls.s	Obj44_NoDel
0000FCA8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FCAC 6700 EED0                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000FCB0 3440                       		movea.w	d0,a2	; load address into a2
0000FCB2 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FCB6 6000 EEC6                  		bra.w	DeleteObject	; and delete object
0000FCBA                            
0000FCBA                            Obj44_NoDel:
0000FCBA 4E75                       		rts	
0000FCBC                            ; ===========================================================================
0000FCBC                            ; ---------------------------------------------------------------------------
0000FCBC                            ; Sprite mappings - walls (GHZ)
0000FCBC                            ; ---------------------------------------------------------------------------
0000FCBC                            Map_obj44:
0000FCBC                            	include "_maps\obj44.asm"
0000FCBC                            ; ---------------------------------------------------------------------------
0000FCBC                            ; Sprite mappings - walls (GHZ)
0000FCBC                            ; ---------------------------------------------------------------------------
0000FCBC 0000                       		dc.w byte_E256-Map_obj44
0000FCBE 0000                       		dc.w byte_E26B-Map_obj44
0000FCC0 0000                       		dc.w byte_E280-Map_obj44
0000FCC2 04                         byte_E256:	dc.b 4
0000FCC3 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000FCC8 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FCCD 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FCD2 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FCD7 04                         byte_E26B:	dc.b 4
0000FCD8 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000FCDD F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FCE2 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FCE7 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FCEC 04                         byte_E280:	dc.b 4
0000FCED E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000FCF2 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000FCF7 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000FCFC 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000FD02 00                         		even
0000FD02 00                         		even
0000FD02                            
0000FD02                            ; ===========================================================================
0000FD02                            ; ---------------------------------------------------------------------------
0000FD02                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000FD02                            ; ---------------------------------------------------------------------------
0000FD02                            
0000FD02                            Obj13:					; XREF: Obj_Index
0000FD02 7000                       		moveq	#0,d0
0000FD04 1028 0024                  		move.b	$24(a0),d0
0000FD08 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000FD0C 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000FD10 6000 0000                  		bra.w	Obj14_ChkDel
0000FD14                            ; ===========================================================================
0000FD14 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000FD16 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000FD18                            ; ---------------------------------------------------------------------------
0000FD18                            ;
0000FD18                            ; Lava ball production rates
0000FD18                            ;
0000FD18 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000FD1E                            ; ===========================================================================
0000FD1E                            
0000FD1E                            Obj13_Main:				; XREF: Obj13_Index
0000FD1E 5428 0024                  		addq.b	#2,$24(a0)
0000FD22 1028 0028                  		move.b	$28(a0),d0
0000FD26 E848                       		lsr.w	#4,d0
0000FD28 0240 000F                  		andi.w	#$F,d0
0000FD2C 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000FD32 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000FD38 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FD3E                            
0000FD3E                            Obj13_MakeLava:				; XREF: Obj13_Index
0000FD3E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000FD42 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000FD44 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000FD4A 6100 F1A8                  		bsr.w	ChkObjOnScreen
0000FD4E 6600                       		bne.s	locret_E302
0000FD50 6100 F532                  		bsr.w	SingleObjLoad
0000FD54 6600                       		bne.s	locret_E302
0000FD56 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FD5A 3368 0008 0008             		move.w	8(a0),8(a1)
0000FD60 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FD66 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FD6C                            
0000FD6C                            locret_E302:
0000FD6C 4E75                       		rts	
0000FD6E                            ; ===========================================================================
0000FD6E                            ; ---------------------------------------------------------------------------
0000FD6E                            ; Object 14 - lava balls (MZ, SLZ)
0000FD6E                            ; ---------------------------------------------------------------------------
0000FD6E                            
0000FD6E                            Obj14:					; XREF: Obj_Index
0000FD6E 7000                       		moveq	#0,d0
0000FD70 1028 0024                  		move.b	$24(a0),d0
0000FD74 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FD78 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FD7C 6000 EDB0                  		bra.w	DisplaySprite
0000FD80                            ; ===========================================================================
0000FD80 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FD82 0000                       		dc.w Obj14_Action-Obj14_Index
0000FD84 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FD86                            
0000FD86 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FD90 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FD98                            ; ===========================================================================
0000FD98                            
0000FD98                            Obj14_Main:				; XREF: Obj14_Index
0000FD98 5428 0024                  		addq.b	#2,$24(a0)
0000FD9C 117C 0008 0016             		move.b	#8,$16(a0)
0000FDA2 117C 0008 0017             		move.b	#8,$17(a0)
0000FDA8 217C 0000 C828 0004        		move.l	#Map_obj14,4(a0)
0000FDB0 317C 0345 0002             		move.w	#$345,2(a0)
0000FDB6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FDBC 6600                       		bne.s	loc_E35A
0000FDBE 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FDC4                            
0000FDC4                            loc_E35A:
0000FDC4 117C 0004 0001             		move.b	#4,1(a0)
0000FDCA 117C 0003 0018             		move.b	#3,$18(a0)
0000FDD0 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FDD6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FDDC 4A28 0029                  		tst.b	$29(a0)
0000FDE0 6700                       		beq.s	Obj14_SetSpeed
0000FDE2 5428 0018                  		addq.b	#2,$18(a0)
0000FDE6                            
0000FDE6                            Obj14_SetSpeed:
0000FDE6 7000                       		moveq	#0,d0
0000FDE8 1028 0028                  		move.b	$28(a0),d0
0000FDEC D040                       		add.w	d0,d0
0000FDEE 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FDF4 117C 0008 0019             		move.b	#8,$19(a0)
0000FDFA 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FE00 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FE02 117C 0010 0019             		move.b	#$10,$19(a0)
0000FE08 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FE0E 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FE14 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FE1A                            
0000FE1A                            Obj14_PlaySnd:
0000FE1A 303C 00AE                  		move.w	#$AE,d0
0000FE1E 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FE24                            
0000FE24                            Obj14_Action:				; XREF: Obj14_Index
0000FE24 7000                       		moveq	#0,d0
0000FE26 1028 0028                  		move.b	$28(a0),d0
0000FE2A D040                       		add.w	d0,d0
0000FE2C 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FE30 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FE34 6100 ECDE                  		bsr.w	SpeedToPos
0000FE38 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FE3E 6100 BD4E                  		bsr.w	AnimateSprite
0000FE42                            
0000FE42                            Obj14_ChkDel:				; XREF: Obj13
0000FE42 3028 0008                  		move.w	8(a0),d0
0000FE46 0240 FF80                  		andi.w	#$FF80,d0
0000FE4A 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE4E 0441 0080                  		subi.w	#$80,d1
0000FE52 0241 FF80                  		andi.w	#$FF80,d1
0000FE56 9041                       		sub.w	d1,d0
0000FE58 0C40 0280                  		cmpi.w	#$280,d0
0000FE5C 6300                       		bls.s	Obj14_NoDel
0000FE5E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FE62 6700 ED1A                  		beq.w	DeleteObject	; if it's zero, don't remember object
0000FE66 3440                       		movea.w	d0,a2	; load address into a2
0000FE68 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FE6C 6000 ED10                  		bra.w	DeleteObject	; and delete object
0000FE70                            
0000FE70                            Obj14_NoDel:
0000FE70 4E75                       		rts	
0000FE72                            ; ===========================================================================
0000FE72 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FE76 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FE7A 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FE7E 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FE82 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FE84                            ; ===========================================================================
0000FE84                            ; lavaball types 00-03 fly up and fall back down
0000FE84                            
0000FE84                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FE84 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FE8A 3028 0030                  		move.w	$30(a0),d0
0000FE8E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FE92 6400                       		bcc.s	loc_E41E	; if not, branch
0000FE94 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FE98                            
0000FE98                            loc_E41E:
0000FE98 08A8 0001 0022             		bclr	#1,$22(a0)
0000FE9E 4A68 0012                  		tst.w	$12(a0)
0000FEA2 6A00                       		bpl.s	locret_E430
0000FEA4 08E8 0001 0022             		bset	#1,$22(a0)
0000FEAA                            
0000FEAA                            locret_E430:
0000FEAA 4E75                       		rts	
0000FEAC                            ; ===========================================================================
0000FEAC                            ; lavaball type	04 flies up until it hits the ceiling
0000FEAC                            
0000FEAC                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FEAC 08E8 0001 0022             		bset	#1,$22(a0)
0000FEB2 6100 0000                  		bsr.w	ObjHitCeiling
0000FEB6 4A41                       		tst.w	d1
0000FEB8 6A00                       		bpl.s	locret_E452
0000FEBA 117C 0008 0028             		move.b	#8,$28(a0)
0000FEC0 117C 0001 001C             		move.b	#1,$1C(a0)
0000FEC6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FECC                            
0000FECC                            locret_E452:
0000FECC 4E75                       		rts	
0000FECE                            ; ===========================================================================
0000FECE                            ; lavaball type	05 falls down until it hits the	floor
0000FECE                            
0000FECE                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FECE 08A8 0001 0022             		bclr	#1,$22(a0)
0000FED4 6100 0000                  		bsr.w	ObjHitFloor
0000FED8 4A41                       		tst.w	d1
0000FEDA 6A00                       		bpl.s	locret_E474
0000FEDC 117C 0008 0028             		move.b	#8,$28(a0)
0000FEE2 117C 0001 001C             		move.b	#1,$1C(a0)
0000FEE8 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000FEEE                            
0000FEEE                            locret_E474:
0000FEEE 4E75                       		rts	
0000FEF0                            ; ===========================================================================
0000FEF0                            ; lavaball types 06-07 move sideways
0000FEF0                            
0000FEF0                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000FEF0 08E8 0000 0022             		bset	#0,$22(a0)
0000FEF6 76F8                       		moveq	#-8,d3
0000FEF8 6100 0000                  		bsr.w	ObjHitWallLeft
0000FEFC 4A41                       		tst.w	d1
0000FEFE 6A00                       		bpl.s	locret_E498
0000FF00 117C 0008 0028             		move.b	#8,$28(a0)
0000FF06 117C 0003 001C             		move.b	#3,$1C(a0)
0000FF0C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FF12                            
0000FF12                            locret_E498:
0000FF12 4E75                       		rts	
0000FF14                            ; ===========================================================================
0000FF14                            
0000FF14                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000FF14 08A8 0000 0022             		bclr	#0,$22(a0)
0000FF1A 7608                       		moveq	#8,d3
0000FF1C 6100 0000                  		bsr.w	ObjHitWallRight
0000FF20 4A41                       		tst.w	d1
0000FF22 6A00                       		bpl.s	locret_E4BC
0000FF24 117C 0008 0028             		move.b	#8,$28(a0)
0000FF2A 117C 0003 001C             		move.b	#3,$1C(a0)
0000FF30 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FF36                            
0000FF36                            locret_E4BC:
0000FF36 4E75                       		rts	
0000FF38                            ; ===========================================================================
0000FF38                            
0000FF38                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000FF38 4E75                       		rts	
0000FF3A                            ; ===========================================================================
0000FF3A                            
0000FF3A                            Obj14_Delete:				; XREF: Obj14_Index
0000FF3A 6000 EC42                  		bra.w	DeleteObject
0000FF3E                            ; ===========================================================================
0000FF3E                            Ani_obj14:
0000FF3E                            	include "_anim\obj14.asm"
0000FF3E                            ; ---------------------------------------------------------------------------
0000FF3E                            ; Animation script - lava balls
0000FF3E                            ; ---------------------------------------------------------------------------
0000FF3E 0000                       		dc.w byte_E4CC-Ani_obj14
0000FF40 0000                       		dc.w byte_E4D2-Ani_obj14
0000FF42 0000                       		dc.w byte_E4D6-Ani_obj14
0000FF44 0000                       		dc.w byte_E4DC-Ani_obj14
0000FF46 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000FF4C 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000FF50 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000FF56 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000FF5A                            		even
0000FF5A                            		even
0000FF5A                            
0000FF5A                            ; ===========================================================================
0000FF5A                            ; ---------------------------------------------------------------------------
0000FF5A                            ; Object 6D - flame thrower (SBZ)
0000FF5A                            ; ---------------------------------------------------------------------------
0000FF5A                            
0000FF5A                            Obj6D:					; XREF: Obj_Index
0000FF5A 7000                       		moveq	#0,d0
0000FF5C 1028 0024                  		move.b	$24(a0),d0
0000FF60 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000FF64 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000FF68                            ; ===========================================================================
0000FF68 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000FF6A 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000FF6C                            ; ===========================================================================
0000FF6C                            
0000FF6C                            Obj6D_Main:				; XREF: Obj6D_Index
0000FF6C 5428 0024                  		addq.b	#2,$24(a0)
0000FF70 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000FF78 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000FF7E 0028 0004 0001             		ori.b	#4,1(a0)
0000FF84 117C 0001 0018             		move.b	#1,$18(a0)
0000FF8A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FF90 117C 000C 0019             		move.b	#$C,$19(a0)
0000FF96 1028 0028                  		move.b	$28(a0),d0
0000FF9A 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000FF9E D040                       		add.w	d0,d0		; multiply by 2
0000FFA0 3140 0030                  		move.w	d0,$30(a0)
0000FFA4 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000FFA8 1028 0028                  		move.b	$28(a0),d0
0000FFAC 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000FFB0 EB48                       		lsl.w	#5,d0		; multiply by $20
0000FFB2 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000FFB6 117C 000A 0036             		move.b	#$A,$36(a0)
0000FFBC 0828 0001 0022             		btst	#1,$22(a0)
0000FFC2 6700                       		beq.s	Obj6D_Action
0000FFC4 117C 0002 001C             		move.b	#2,$1C(a0)
0000FFCA 117C 0015 0036             		move.b	#$15,$36(a0)
0000FFD0                            
0000FFD0                            Obj6D_Action:				; XREF: Obj6D_Index
0000FFD0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000FFD4 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000FFD6 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000FFDC 0868 0000 001C             		bchg	#0,$1C(a0)
0000FFE2 6700                       		beq.s	loc_E57A
0000FFE4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000FFEA 303C 00B3                  		move.w	#$B3,d0
0000FFEE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play flame sound
0000FFF4                            
0000FFF4                            loc_E57A:
0000FFF4 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000FFFA 6100 BB92                  		bsr.w	AnimateSprite
0000FFFE 117C 0000 0020             		move.b	#0,$20(a0)
00010004 1028 0036                  		move.b	$36(a0),d0
00010008 B028 001A                  		cmp.b	$1A(a0),d0
0001000C 6600                       		bne.s	Obj6D_ChkDel
0001000E 117C 00A3 0020             		move.b	#$A3,$20(a0)
00010014                            
00010014                            Obj6D_ChkDel:
00010014 3028 0008                  		move.w	8(a0),d0
00010018 0240 FF80                  		andi.w	#$FF80,d0
0001001C 3238 F700                  		move.w	($FFFFF700).w,d1
00010020 0441 0080                  		subi.w	#$80,d1
00010024 0241 FF80                  		andi.w	#$FF80,d1
00010028 9041                       		sub.w	d1,d0
0001002A 0C40 0280                  		cmpi.w	#$280,d0
0001002E 6300 EAFE                  		bls.w	DisplaySprite
00010032 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010036 6700 EB46                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
0001003A 3440                       		movea.w	d0,a2	; load address into a2
0001003C 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00010040 6000 EB3C                  		bra.w	DeleteObject
00010044                            ; ===========================================================================
00010044                            Ani_obj6D:
00010044                            	include "_anim\obj6D.asm"
00010044                            ; ---------------------------------------------------------------------------
00010044                            ; Animation script - flamethrower (SBZ)
00010044                            ; ---------------------------------------------------------------------------
00010044 0000                       		dc.w byte_E5C4-Ani_obj6D
00010046 0000                       		dc.w byte_E5D2-Ani_obj6D
00010048 0000                       		dc.w byte_E5DC-Ani_obj6D
0001004A 0000                       		dc.w byte_E5EA-Ani_obj6D
0001004C 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0001005A 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
00010064 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
00010072 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0001007C                            		even
0001007C                            		even
0001007C                            
0001007C                            ; ---------------------------------------------------------------------------
0001007C                            ; Sprite mappings - flame thrower (SBZ)
0001007C                            ; ---------------------------------------------------------------------------
0001007C                            Map_obj6D:
0001007C                            	include "_maps\obj6D.asm"
0001007C                            ; ---------------------------------------------------------------------------
0001007C                            ; Sprite mappings - flame thrower (SBZ)
0001007C                            ; ---------------------------------------------------------------------------
0001007C 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
00010080 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
00010084 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
00010088 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0001008C 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
00010090 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
00010094 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
00010098 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0001009C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
000100A0 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
000100A4 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
000100A8 01                         byte_E620:	dc.b 1
000100A9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000100AE 02                         byte_E626:	dc.b 2
000100AF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000100B4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000100B9 02                         byte_E631:	dc.b 2
000100BA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000100BF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000100C4 03                         byte_E63C:	dc.b 3
000100C5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000100CA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000100CF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000100D4 03                         byte_E64C:	dc.b 3
000100D5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000100DA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000100DF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000100E4 04                         byte_E65C:	dc.b 4
000100E5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000100EA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000100EF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000100F4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000100F9 04                         byte_E671:	dc.b 4
000100FA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000100FF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010104 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010109 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001010E 05                         byte_E686:	dc.b 5
0001010F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010114 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010119 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001011E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010123 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010128 05                         byte_E6A0:	dc.b 5
00010129 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001012E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010133 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010138 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001013D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010142 06                         byte_E6BA:	dc.b 6
00010143 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010148 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0001014D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010152 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010157 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001015C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010161 06                         byte_E6D9:	dc.b 6
00010162 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010167 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001016C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010171 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010176 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001017B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010180 01                         byte_E6F8:	dc.b 1
00010181 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010186 02                         byte_E6FE:	dc.b 2
00010187 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001018C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010191 02                         byte_E709:	dc.b 2
00010192 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010197 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001019C 03                         byte_E714:	dc.b 3
0001019D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000101A2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101A7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000101AC 03                         byte_E724:	dc.b 3
000101AD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000101B2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101B7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000101BC 04                         byte_E734:	dc.b 4
000101BD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000101C2 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000101C7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101CC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000101D1 04                         byte_E749:	dc.b 4
000101D2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000101D7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000101DC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101E1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000101E6 05                         byte_E75E:	dc.b 5
000101E7 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000101EC 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000101F1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000101F6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000101FB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010200 05                         byte_E778:	dc.b 5
00010201 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010206 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001020B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010210 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010215 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001021A 06                         byte_E792:	dc.b 6
0001021B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010220 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010225 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001022A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0001022F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010234 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010239 06                         byte_E7B1:	dc.b 6
0001023A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0001023F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010244 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010249 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001024E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010253 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010258                            		even
00010258                            		even
00010258                            
00010258                            ; ===========================================================================
00010258                            ; ---------------------------------------------------------------------------
00010258                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010258                            ; ---------------------------------------------------------------------------
00010258                            
00010258                            Obj46:					; XREF: Obj_Index
00010258 7000                       		moveq	#0,d0
0001025A 1028 0024                  		move.b	$24(a0),d0
0001025E 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
00010262 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
00010266                            ; ===========================================================================
00010266 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
00010268 0000                       		dc.w Obj46_Action-Obj46_Index
0001026A                            ; ===========================================================================
0001026A                            
0001026A                            Obj46_Main:				; XREF: Obj46_Index
0001026A 5428 0024                  		addq.b	#2,$24(a0)
0001026E 117C 000F 0016             		move.b	#$F,$16(a0)
00010274 117C 000F 0017             		move.b	#$F,$17(a0)
0001027A 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
00010282 317C 4000 0002             		move.w	#$4000,2(a0)
00010288 117C 0004 0001             		move.b	#4,1(a0)
0001028E 117C 0003 0018             		move.b	#3,$18(a0)
00010294 117C 0010 0019             		move.b	#$10,$19(a0)
0001029A 3168 000C 0030             		move.w	$C(a0),$30(a0)
000102A0 317C 05C0 0032             		move.w	#$5C0,$32(a0)
000102A6                            
000102A6                            Obj46_Action:				; XREF: Obj46_Index
000102A6 4A28 0001                  		tst.b	1(a0)
000102AA 6A00                       		bpl.s	Obj46_ChkDel
000102AC 7000                       		moveq	#0,d0
000102AE 1028 0028                  		move.b	$28(a0),d0	; get object type
000102B2 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
000102B6 D040                       		add.w	d0,d0
000102B8 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
000102BC 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
000102C0 323C 001B                  		move.w	#$1B,d1
000102C4 343C 0010                  		move.w	#$10,d2
000102C8 363C 0011                  		move.w	#$11,d3
000102CC 3828 0008                  		move.w	8(a0),d4
000102D0 6100 0000                  		bsr.w	SolidObject
000102D4                            
000102D4                            Obj46_ChkDel:
000102D4 6100 E858                  		bsr.w	DisplaySprite
000102D8 3028 0008                  		move.w	8(a0),d0
000102DC 0240 FF80                  		andi.w	#$FF80,d0
000102E0 3238 F700                  		move.w	($FFFFF700).w,d1
000102E4 0441 0080                  		subi.w	#$80,d1
000102E8 0241 FF80                  		andi.w	#$FF80,d1
000102EC 9041                       		sub.w	d1,d0
000102EE 0C40 0280                  		cmpi.w	#$280,d0
000102F2 6300                       		bls.s	Obj46_NoDel
000102F4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000102F8 6700 E884                  		beq.w	DeleteObject		; if it's zero, don't remember object
000102FC 3440                       		movea.w	d0,a2	; load address into a2
000102FE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010302 6000 E87A                  		bra.w	DeleteObject	; and delete object
00010306                            
00010306                            Obj46_NoDel:
00010306 4E75                       		rts	
00010308                            ; ===========================================================================
00010308 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0001030A 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0001030C 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0001030E 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
00010310 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
00010312                            ; ===========================================================================
00010312                            
00010312                            Obj46_Type00:				; XREF: Obj46_TypeIndex
00010312 4E75                       		rts	
00010314                            ; ===========================================================================
00010314                            
00010314                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00010314 3038 D008                  		move.w	($FFFFD008).w,d0
00010318 9068 0008                  		sub.w	8(a0),d0
0001031C 6400                       		bcc.s	loc_E888
0001031E 4440                       		neg.w	d0
00010320                            
00010320                            loc_E888:
00010320 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010324 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00010326 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0001032C                            
0001032C                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0001032C 7000                       		moveq	#0,d0
0001032E 1038 FE74                  		move.b	($FFFFFE74).w,d0
00010332 0828 0003 0028             		btst	#3,$28(a0)
00010338 6700                       		beq.s	loc_E8A8
0001033A 4440                       		neg.w	d0
0001033C 0640 0010                  		addi.w	#$10,d0
00010340                            
00010340                            loc_E8A8:
00010340 3228 0030                  		move.w	$30(a0),d1
00010344 9240                       		sub.w	d0,d1
00010346 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0001034A 4E75                       		rts	
0001034C                            ; ===========================================================================
0001034C                            
0001034C                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0001034C 6100 E7C6                  		bsr.w	SpeedToPos
00010350 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00010356 6100 0000                  		bsr.w	ObjHitFloor
0001035A 4A41                       		tst.w	d1		; has the block	hit the	floor?
0001035C 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010360 D368 000C                  		add.w	d1,$C(a0)
00010364 4268 0012                  		clr.w	$12(a0)		; stop the block falling
00010368 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001036E 117C 0004 0028             		move.b	#4,$28(a0)
00010374 3011                       		move.w	(a1),d0
00010376 0240 03FF                  		andi.w	#$3FF,d0
0001037A 0C40 02E8                  		cmpi.w	#$2E8,d0
0001037E 6400                       		bcc.s	locret_E8EE
00010380 117C 0000 0028             		move.b	#0,$28(a0)
00010386                            
00010386                            locret_E8EE:
00010386 4E75                       		rts	
00010388                            ; ===========================================================================
00010388                            
00010388                            Obj46_Type04:				; XREF: Obj46_TypeIndex
00010388 7000                       		moveq	#0,d0
0001038A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0001038E E648                       		lsr.w	#3,d0
00010390 3228 0030                  		move.w	$30(a0),d1
00010394 9240                       		sub.w	d0,d1
00010396 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0001039A 4E75                       		rts	
0001039C                            ; ===========================================================================
0001039C                            ; ---------------------------------------------------------------------------
0001039C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001039C                            ; ---------------------------------------------------------------------------
0001039C                            Map_obj46:
0001039C                            	include "_maps\obj46.asm"
0001039C                            ; ---------------------------------------------------------------------------
0001039C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001039C                            ; ---------------------------------------------------------------------------
0001039C 0000                       		dc.w byte_E906-Map_obj46
0001039E 01                         byte_E906:	dc.b 1
0001039F F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
000103A4                            		even
000103A4                            		even
000103A4                            
000103A4                            ; ===========================================================================
000103A4                            ; ---------------------------------------------------------------------------
000103A4                            ; Object 12 - lamp (SYZ)
000103A4                            ; ---------------------------------------------------------------------------
000103A4                            
000103A4                            Obj12:					; XREF: Obj_Index
000103A4 7000                       		moveq	#0,d0
000103A6 1028 0024                  		move.b	$24(a0),d0
000103AA 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
000103AE 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
000103B2                            ; ===========================================================================
000103B2 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
000103B4 0000                       		dc.w Obj12_Animate-Obj12_Index
000103B6                            ; ===========================================================================
000103B6                            
000103B6                            Obj12_Main:				; XREF: Obj12_Index
000103B6 5428 0024                  		addq.b	#2,$24(a0)
000103BA 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
000103C2 317C 0000 0002             		move.w	#0,2(a0)
000103C8 117C 0004 0001             		move.b	#4,1(a0)
000103CE 117C 0010 0019             		move.b	#$10,$19(a0)
000103D4 117C 0006 0018             		move.b	#6,$18(a0)
000103DA                            
000103DA                            Obj12_Animate:				; XREF: Obj12_Index
000103DA 5328 001E                  		subq.b	#1,$1E(a0)
000103DE 6A00                       		bpl.s	Obj12_ChkDel
000103E0 117C 0007 001E             		move.b	#7,$1E(a0)
000103E6 5228 001A                  		addq.b	#1,$1A(a0)
000103EA 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000103F0 6500                       		bcs.s	Obj12_ChkDel
000103F2 117C 0000 001A             		move.b	#0,$1A(a0)
000103F8                            
000103F8                            Obj12_ChkDel:
000103F8 3028 0008                  		move.w	8(a0),d0
000103FC 0240 FF80                  		andi.w	#$FF80,d0
00010400 3238 F700                  		move.w	($FFFFF700).w,d1
00010404 0441 0080                  		subi.w	#$80,d1
00010408 0241 FF80                  		andi.w	#$FF80,d1
0001040C 9041                       		sub.w	d1,d0
0001040E 0C40 0280                  		cmpi.w	#$280,d0
00010412 6300 E71A                  		bls.w	DisplaySprite
00010416 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001041A 6700 E762                  		beq.w	DeleteObject		; if it's zero, don't remember object
0001041E 3440                       		movea.w	d0,a2	; load address into a2
00010420 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010424 6000 E758                  		bra.w	DeleteObject	; and delete object
00010428                            ; ===========================================================================
00010428                            ; ---------------------------------------------------------------------------
00010428                            ; Sprite mappings - lamp (SYZ)
00010428                            ; ---------------------------------------------------------------------------
00010428                            Map_obj12:
00010428                            	include "_maps\obj12.asm"
00010428                            ; ---------------------------------------------------------------------------
00010428                            ; Sprite mappings - lamp (SYZ)
00010428                            ; ---------------------------------------------------------------------------
00010428 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0001042C 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00010430 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00010434 02                         byte_E98E:	dc.b 2
00010435 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0001043A 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0001043F 02                         byte_E999:	dc.b 2
00010440 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00010445 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0001044A 02                         byte_E9A4:	dc.b 2
0001044B F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
00010450 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00010455 02                         byte_E9AF:	dc.b 2
00010456 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0001045B 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
00010460 02                         byte_E9BA:	dc.b 2
00010461 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
00010466 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0001046B 02                         byte_E9C5:	dc.b 2
0001046C F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
00010471 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
00010476                            		even
00010476                            		even
00010476                            
00010476                            ; ===========================================================================
00010476                            ; ---------------------------------------------------------------------------
00010476                            ; Object 47 - pinball bumper (SYZ)
00010476                            ; ---------------------------------------------------------------------------
00010476                            
00010476                            Obj47:					; XREF: Obj_Index
00010476 7000                       		moveq	#0,d0
00010478 1028 0024                  		move.b	$24(a0),d0
0001047C 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
00010480 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
00010484                            ; ===========================================================================
00010484 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
00010486 0000                       		dc.w Obj47_Hit-Obj47_Index
00010488                            ; ===========================================================================
00010488                            
00010488                            Obj47_Main:				; XREF: Obj47_Index
00010488 5428 0024                  		addq.b	#2,$24(a0)
0001048C 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
00010494 317C 0380 0002             		move.w	#$380,2(a0)
0001049A 117C 0004 0001             		move.b	#4,1(a0)
000104A0 117C 0010 0019             		move.b	#$10,$19(a0)
000104A6 117C 0001 0018             		move.b	#1,$18(a0)
000104AC 117C 00D7 0020             		move.b	#$D7,$20(a0)
000104B2                            
000104B2                            Obj47_Hit:				; XREF: Obj47_Index
000104B2 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
000104B6 6700 0000                  		beq.w	Obj47_Display	; if not, branch
000104BA 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
000104C0 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
000104C6 4228 0021                  		clr.b	$21(a0)
000104CA 43F8 D000                  		lea	($FFFFD000).w,a1
000104CE 3228 0008                  		move.w	8(a0),d1
000104D2 3428 000C                  		move.w	$C(a0),d2
000104D6 9269 0008                  		sub.w	8(a1),d1
000104DA 9469 000C                  		sub.w	$C(a1),d2
000104DE 4EB9 0000 2CBE             		jsr	(CalcAngle).l
000104E4 4EB9 0000 29F6             		jsr	(CalcSine).l
000104EA C3FC F900                  		muls.w	#-$700,d1
000104EE E081                       		asr.l	#8,d1
000104F0 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
000104F4 C1FC F900                  		muls.w	#-$700,d0
000104F8 E080                       		asr.l	#8,d0
000104FA 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
000104FE 08E9 0001 0022             		bset	#1,$22(a1)
00010504 08A9 0004 0022             		bclr	#4,$22(a1)
0001050A 08A9 0005 0022             		bclr	#5,$22(a1)
00010510 4229 003C                  		clr.b	$3C(a1)
00010514 117C 0001 001C             		move.b	#1,$1C(a0)
0001051A 303C 00B4                  		move.w	#$B4,d0
0001051E 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play bumper sound
00010524 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010528 6700                       		beq.s	Obj47_Score		; if it's zero, don't remember object
0001052A 3440                       		movea.w	d0,a2	; load address into a2
0001052C 0C12 008A                  		cmpi.b	#$8A,(a2)	; has bumper been hit $8A times?
00010530 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
00010532 5212                       		addq.b	#1,(a2)
00010534                            
00010534                            Obj47_Score:
00010534 7001                       		moveq	#1,d0
00010536 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0001053C 6100 ED46                  		bsr.w	SingleObjLoad
00010540 6600                       		bne.s	Obj47_Display
00010542 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010546 3368 0008 0008             		move.w	8(a0),8(a1)
0001054C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010552 137C 0004 001A             		move.b	#4,$1A(a1)
00010558                            
00010558                            Obj47_Display:
00010558 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0001055E 6100 B62E                  		bsr.w	AnimateSprite
00010562 3028 0008                  		move.w	8(a0),d0
00010566 0240 FF80                  		andi.w	#$FF80,d0
0001056A 3238 F700                  		move.w	($FFFFF700).w,d1
0001056E 0441 0080                  		subi.w	#$80,d1
00010572 0241 FF80                  		andi.w	#$FF80,d1
00010576 9041                       		sub.w	d1,d0
00010578 0C40 0280                  		cmpi.w	#$280,d0
0001057C 6200                       		bhi.s	Obj47_ChkHit
0001057E 6000 E5AE                  		bra.w	DisplaySprite
00010582                            ; ===========================================================================
00010582                            
00010582                            Obj47_ChkHit:				; XREF: Obj47_Display
00010582 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010586 6700                       		beq.s	Obj47_Delete		; if it's zero, don't remember object
00010588 3440                       		movea.w	d0,a2	; load address into a2
0001058A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001058E                            
0001058E                            Obj47_Delete:
0001058E 6000 E5EE                  		bra.w	DeleteObject
00010592                            ; ===========================================================================
00010592                            Ani_obj47:
00010592                            	include "_anim\obj47.asm"
00010592                            ; ---------------------------------------------------------------------------
00010592                            ; Animation script - flamethrower (SBZ)
00010592                            ; ---------------------------------------------------------------------------
00010592 0000                       		dc.w byte_EAF4-Ani_obj47
00010594 0000                       		dc.w byte_EAF8-Ani_obj47
00010596 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0001059A 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
000105A2                            		even
000105A2                            		even
000105A2                            
000105A2                            ; ---------------------------------------------------------------------------
000105A2                            ; Sprite mappings - pinball bumper (SYZ)
000105A2                            ; ---------------------------------------------------------------------------
000105A2                            Map_obj47:
000105A2                            	include "_maps\obj47.asm"
000105A2                            ; ---------------------------------------------------------------------------
000105A2                            ; Sprite mappings - pinball bumper (SYZ)
000105A2                            ; ---------------------------------------------------------------------------
000105A2 0000                       		dc.w byte_EB06-Map_obj47
000105A4 0000                       		dc.w byte_EB11-Map_obj47
000105A6 0000                       		dc.w byte_EB1C-Map_obj47
000105A8 02                         byte_EB06:	dc.b 2
000105A9 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
000105AE F007 0800 00               		dc.b $F0, 7, 8,	0, 0
000105B3 02                         byte_EB11:	dc.b 2
000105B4 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
000105B9 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
000105BE 02                         byte_EB1C:	dc.b 2
000105BF F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
000105C4 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
000105CA 00                         		even
000105CA 00                         		even
000105CA                            
000105CA                            ; ===========================================================================
000105CA                            ; ---------------------------------------------------------------------------
000105CA                            ; Object 0D - signpost at the end of a level
000105CA                            ; ---------------------------------------------------------------------------
000105CA                            
000105CA                            Obj0D:					; XREF: Obj_Index
000105CA 7000                       		moveq	#0,d0
000105CC 1028 0024                  		move.b	$24(a0),d0
000105D0 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
000105D4 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
000105D8 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
000105DE 6100 B5AE                  		bsr.w	AnimateSprite
000105E2 6100 E54A                  		bsr.w	DisplaySprite
000105E6 3028 0008                  		move.w	8(a0),d0
000105EA 0240 FF80                  		andi.w	#$FF80,d0
000105EE 3238 F700                  		move.w	($FFFFF700).w,d1
000105F2 0441 0080                  		subi.w	#$80,d1
000105F6 0241 FF80                  		andi.w	#$FF80,d1
000105FA 9041                       		sub.w	d1,d0
000105FC 0C40 0280                  		cmpi.w	#$280,d0
00010600 6300                       		bls.s	Obj0D_NoDel
00010602 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010606 6700 E576                  		beq.w	DeleteObject		; if it's zero, don't remember object
0001060A 3440                       		movea.w	d0,a2	; load address into a2
0001060C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010610 6000 E56C                  		bra.w	DeleteObject	; and delete object
00010614                            
00010614                            Obj0D_NoDel:
00010614 4E75                       		rts	
00010616                            ; ===========================================================================
00010616 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
00010618 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0001061A 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0001061C 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0001061E 0000                       		dc.w locret_ED1A-Obj0D_Index
00010620                            ; ===========================================================================
00010620                            
00010620                            Obj0D_Main:				; XREF: Obj0D_Index
00010620 5428 0024                  		addq.b	#2,$24(a0)
00010624 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0001062C 317C 0680 0002             		move.w	#$680,2(a0)
00010632 117C 0004 0001             		move.b	#4,1(a0)
00010638 117C 0018 0019             		move.b	#$18,$19(a0)
0001063E 117C 0004 0018             		move.b	#4,$18(a0)
00010644                            
00010644                            Obj0D_Touch:				; XREF: Obj0D_Index
00010644 3038 D008                  		move.w	($FFFFD008).w,d0
00010648 9068 0008                  		sub.w	8(a0),d0
0001064C 6500                       		bcs.s	locret_EBBA
0001064E 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010652 6400                       		bcc.s	locret_EBBA	; if not, branch
00010654 303C 00CF                  		move.w	#$CF,d0
00010658 4EB9 0000 121A             		jsr	(PlaySound).l	; play signpost	sound
0001065E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010662 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
00010668 5428 0024                  		addq.b	#2,$24(a0)
0001066C                            
0001066C                            locret_EBBA:
0001066C 4E75                       		rts	
0001066E                            ; ===========================================================================
0001066E                            
0001066E                            Obj0D_Spin:				; XREF: Obj0D_Index
0001066E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00010672 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00010674 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0001067A 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0001067E 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
00010684 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
00010686 5428 0024                  		addq.b	#2,$24(a0)
0001068A                            
0001068A                            Obj0D_Sparkle:
0001068A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0001068E 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00010690 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
00010696 7000                       		moveq	#0,d0
00010698 1028 0034                  		move.b	$34(a0),d0
0001069C 5428 0034                  		addq.b	#2,$34(a0)
000106A0 0228 000E 0034             		andi.b	#$E,$34(a0)
000106A6 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
000106AA 6100 EBD8                  		bsr.w	SingleObjLoad
000106AE 6600                       		bne.s	locret_EC42
000106B0 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
000106B4 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
000106BA 101A                       		move.b	(a2)+,d0
000106BC 4880                       		ext.w	d0
000106BE D068 0008                  		add.w	8(a0),d0
000106C2 3340 0008                  		move.w	d0,8(a1)
000106C6 101A                       		move.b	(a2)+,d0
000106C8 4880                       		ext.w	d0
000106CA D068 000C                  		add.w	$C(a0),d0
000106CE 3340 000C                  		move.w	d0,$C(a1)
000106D2 237C 0000 B438 0004        		move.l	#Map_obj25,4(a1)
000106DA 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
000106E0 137C 0004 0001             		move.b	#4,1(a1)
000106E6 137C 0002 0018             		move.b	#2,$18(a1)
000106EC 137C 0008 0019             		move.b	#8,$19(a1)
000106F2                            
000106F2                            locret_EC42:
000106F2 4E75                       		rts	
000106F4                            ; ===========================================================================
000106F4 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
000106F6 0808                       		dc.b	8,   8
000106F8 F000                       		dc.b -$10,   0
000106FA 18F8                       		dc.b  $18,  -8
000106FC 00F8                       		dc.b	0,  -8
000106FE 1000                       		dc.b  $10,   0
00010700 E808                       		dc.b -$18,   8
00010702 1810                       		dc.b  $18, $10
00010704                            ; ===========================================================================
00010704                            
00010704                            Obj0D_SonicRun:				; XREF: Obj0D_Index
00010704 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010708 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0001070C 0838 0001 D022             		btst	#1,($FFFFD022).w
00010712 6600                       		bne.s	loc_EC70
00010714 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001071A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00010720                            
00010720                            loc_EC70:
00010720 4A38 D000                  		tst.b	($FFFFD000).w
00010724 6700                       		beq.s	loc_EC86
00010726 3038 D008                  		move.w	($FFFFD008).w,d0
0001072A 3238 F72A                  		move.w	($FFFFF72A).w,d1
0001072E 0641 0128                  		addi.w	#$128,d1
00010732 B041                       		cmp.w	d1,d0
00010734 6500                       		bcs.s	locret_ECEE
00010736                            
00010736                            loc_EC86:
00010736 5428 0024                  		addq.b	#2,$24(a0)
0001073A                            
0001073A                            ; ---------------------------------------------------------------------------
0001073A                            ; Subroutine to	set up bonuses at the end of an	act
0001073A                            ; ---------------------------------------------------------------------------
0001073A                            
0001073A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001073A                            
0001073A                            
0001073A                            GotThroughAct:				; XREF: Obj3E_EndAct
0001073A 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0001073E 6600                       		bne.s	locret_ECEE
00010740 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
00010746 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0001074A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001074E 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00010754 2F08                               move.l  a0,-(sp)            ; save object address to stack
00010756 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00010760 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00010766 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
0001076C 4EB8 143A                          jsr LoadUncArt          ; load uncompressed art
00010770 205F                               move.l  (sp)+,a0            ; get object address from stack
00010772 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
00010778 7000                       		moveq	#0,d0
0001077A 1038 FE23                  		move.b	($FFFFFE23).w,d0
0001077E C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010782 7200                       		moveq	#0,d1
00010784 1238 FE24                  		move.b	($FFFFFE24).w,d1
00010788 D041                       		add.w	d1,d0		; add up your time
0001078A 80FC 000F                  		divu.w	#15,d0		; divide by 15
0001078E 7214                       		moveq	#$14,d1
00010790 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010792 6500                       		bcs.s	loc_ECD0	; if not, branch
00010794 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010796                            
00010796                            loc_ECD0:
00010796 D040                       		add.w	d0,d0
00010798 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0001079E 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
000107A2 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
000107A6 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
000107AA 303C 008E                  		move.w	#$8E,d0
000107AE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
000107B4                            
000107B4                            locret_ECEE:
000107B4 4E75                       		rts	
000107B6                            ; End of function GotThroughAct
000107B6                            
000107B6                            ; ===========================================================================
000107B6 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000107CA 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000107E0                            ; ===========================================================================
000107E0                            
000107E0                            locret_ED1A:				; XREF: Obj0D_Index
000107E0 4E75                       		rts	
000107E2                            ; ===========================================================================
000107E2                            Ani_obj0D:
000107E2                            	include "_anim\obj0D.asm"
000107E2                            ; ---------------------------------------------------------------------------
000107E2                            ; Animation script - signpost
000107E2                            ; ---------------------------------------------------------------------------
000107E2 0000                       		dc.w byte_ED24-Ani_obj0D
000107E4 0000                       		dc.w byte_ED28-Ani_obj0D
000107E6 0000                       		dc.w byte_ED2E-Ani_obj0D
000107E8 0000                       		dc.w byte_ED34-Ani_obj0D
000107EA 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
000107EE 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
000107F4 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
000107FA 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
000107FE 00                         		even
000107FE 00                         		even
000107FE                            
000107FE                            ; ---------------------------------------------------------------------------
000107FE                            ; Sprite mappings - signpost
000107FE                            ; ---------------------------------------------------------------------------
000107FE                            Map_obj0D:
000107FE                            	include "_maps\obj0D.asm"
000107FE                            ; ---------------------------------------------------------------------------
000107FE                            ; Sprite mappings - signpost
000107FE                            ; ---------------------------------------------------------------------------
000107FE 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
00010802 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
00010806 0000                       		dc.w byte_ED73-Map_obj0D
00010808 03                         byte_ED42:	dc.b 3
00010809 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0001080E F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
00010813 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010818 02                         byte_ED52:	dc.b 2
00010819 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0001081E 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010823 02                         byte_ED5D:	dc.b 2
00010824 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
00010829 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0001082E 02                         byte_ED68:	dc.b 2
0001082F F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00010834 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010839 03                         byte_ED73:	dc.b 3
0001083A F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0001083F F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00010844 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001084A 00                         		even
0001084A 00                         		even
0001084A                            
0001084A                            ; ===========================================================================
0001084A                            ; ---------------------------------------------------------------------------
0001084A                            ; Object 4C - lava geyser / lavafall producer (MZ)
0001084A                            ; ---------------------------------------------------------------------------
0001084A                            
0001084A                            Obj4C:					; XREF: Obj_Index
0001084A 7000                       		moveq	#0,d0
0001084C 1028 0024                  		move.b	$24(a0),d0
00010850 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00010854 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00010858 6000 0000                  		bra.w	Obj4D_ChkDel
0001085C                            ; ===========================================================================
0001085C 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0001085E 0000                       		dc.w loc_EDCC-Obj4C_Index
00010860 0000                       		dc.w loc_EE3E-Obj4C_Index
00010862 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00010864 0000                       		dc.w Obj4C_Display-Obj4C_Index
00010866 0000                       		dc.w Obj4C_Delete-Obj4C_Index
00010868                            ; ===========================================================================
00010868                            
00010868                            Obj4C_Main:				; XREF: Obj4C_Index
00010868 5428 0024                  		addq.b	#2,$24(a0)
0001086C 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00010874 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0001087A 117C 0004 0001             		move.b	#4,1(a0)
00010880 117C 0001 0018             		move.b	#1,$18(a0)
00010886 117C 0038 0019             		move.b	#$38,$19(a0)
0001088C 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
00010892                            
00010892                            loc_EDCC:				; XREF: Obj4C_Index
00010892 5368 0032                  		subq.w	#1,$32(a0)
00010896 6A00                       		bpl.s	locret_EDF0
00010898 3168 0034 0032             		move.w	$34(a0),$32(a0)
0001089E 3038 D00C                  		move.w	($FFFFD00C).w,d0
000108A2 3228 000C                  		move.w	$C(a0),d1
000108A6 B041                       		cmp.w	d1,d0
000108A8 6400                       		bcc.s	locret_EDF0
000108AA 0441 0170                  		subi.w	#$170,d1
000108AE B041                       		cmp.w	d1,d0
000108B0 6500                       		bcs.s	locret_EDF0
000108B2 5428 0024                  		addq.b	#2,$24(a0)
000108B6                            
000108B6                            locret_EDF0:
000108B6 4E75                       		rts	
000108B8                            ; ===========================================================================
000108B8                            
000108B8                            Obj4C_MakeLava:				; XREF: Obj4C_Index
000108B8 5428 0024                  		addq.b	#2,$24(a0)
000108BC 6100 E9DC                  		bsr.w	SingleObjLoad2
000108C0 6600                       		bne.s	loc_EE18
000108C2 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
000108C6 3368 0008 0008             		move.w	8(a0),8(a1)
000108CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000108D2 1368 0028 0028             		move.b	$28(a0),$28(a1)
000108D8 2348 003C                  		move.l	a0,$3C(a1)
000108DC                            
000108DC                            loc_EE18:
000108DC 117C 0001 001C             		move.b	#1,$1C(a0)
000108E2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000108E6 6700                       		beq.s	Obj4C_Type00	; if yes, branch
000108E8 117C 0004 001C             		move.b	#4,$1C(a0)
000108EE 6000                       		bra.s	Obj4C_Display
000108F0                            ; ===========================================================================
000108F0                            
000108F0                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
000108F0 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
000108F4 08E9 0001 0022             		bset	#1,$22(a1)
000108FA 337C FA80 0012             		move.w	#-$580,$12(a1)
00010900 6000                       		bra.s	Obj4C_Display
00010902                            ; ===========================================================================
00010902                            
00010902                            loc_EE3E:				; XREF: Obj4C_Index
00010902 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010906 6700                       		beq.s	Obj4C_Display	; if yes, branch
00010908 5428 0024                  		addq.b	#2,$24(a0)
0001090C 4E75                       		rts	
0001090E                            ; ===========================================================================
0001090E                            
0001090E                            Obj4C_Display:				; XREF: Obj4C_Index
0001090E 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010914 6100 B278                  		bsr.w	AnimateSprite
00010918 6100 E214                  		bsr.w	DisplaySprite
0001091C 4E75                       		rts	
0001091E                            ; ===========================================================================
0001091E                            
0001091E                            Obj4C_Delete:				; XREF: Obj4C_Index
0001091E 117C 0000 001C             		move.b	#0,$1C(a0)
00010924 117C 0002 0024             		move.b	#2,$24(a0)
0001092A 4A28 0028                  		tst.b	$28(a0)
0001092E 6700 E24E                  		beq.w	DeleteObject
00010932 4E75                       		rts	
00010934                            ; ===========================================================================
00010934                            ; ---------------------------------------------------------------------------
00010934                            ; Object 4D - lava geyser / lavafall (MZ)
00010934                            ; ---------------------------------------------------------------------------
00010934                            
00010934                            Obj4D:					; XREF: Obj_Index
00010934 7000                       		moveq	#0,d0
00010936 1028 0024                  		move.b	$24(a0),d0
0001093A 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0001093E 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
00010942 6000 E1EA                  		bra.w	DisplaySprite
00010946                            ; ===========================================================================
00010946 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00010948 0000                       		dc.w Obj4D_Action-Obj4D_Index
0001094A 0000                       		dc.w loc_EFFC-Obj4D_Index
0001094C 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0001094E                            
0001094E FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
00010952                            ; ===========================================================================
00010952                            
00010952                            Obj4D_Main:				; XREF: Obj4D_Index
00010952 5428 0024                  		addq.b	#2,$24(a0)
00010956 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001095C 4A28 0028                  		tst.b	$28(a0)
00010960 6700                       		beq.s	loc_EEA4
00010962 0468 0250 000C             		subi.w	#$250,$C(a0)
00010968                            
00010968                            loc_EEA4:
00010968 7000                       		moveq	#0,d0
0001096A 1028 0028                  		move.b	$28(a0),d0
0001096E D040                       		add.w	d0,d0
00010970 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
00010976 2248                       		movea.l	a0,a1
00010978 7201                       		moveq	#1,d1
0001097A 6100                       		bsr.s	Obj4D_MakeLava
0001097C 6000                       		bra.s	loc_EF10
0001097E                            ; ===========================================================================
0001097E                            
0001097E                            Obj4D_Loop:
0001097E 6100 E91A                  		bsr.w	SingleObjLoad2
00010982 6600                       		bne.s	loc_EF0A
00010984                            
00010984                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00010984 12BC 004D                  		move.b	#$4D,0(a1)
00010988 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00010990 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010996 137C 0004 0001             		move.b	#4,1(a1)
0001099C 137C 0020 0019             		move.b	#$20,$19(a1)
000109A2 3368 0008 0008             		move.w	8(a0),8(a1)
000109A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000109AE 1368 0028 0028             		move.b	$28(a0),$28(a1)
000109B4 137C 0001 0018             		move.b	#1,$18(a1)
000109BA 137C 0005 001C             		move.b	#5,$1C(a1)
000109C0 4A28 0028                  		tst.b	$28(a0)
000109C4 6700                       		beq.s	loc_EF0A
000109C6 137C 0002 001C             		move.b	#2,$1C(a1)
000109CC                            
000109CC                            loc_EF0A:
000109CC 51C9 FFB0                  		dbf	d1,Obj4D_Loop
000109D0 4E75                       		rts	
000109D2                            ; ===========================================================================
000109D2                            
000109D2                            loc_EF10:				; XREF: Obj4D_Main
000109D2 0669 0060 000C             		addi.w	#$60,$C(a1)
000109D8 3368 0030 0030             		move.w	$30(a0),$30(a1)
000109DE 0669 0060 0030             		addi.w	#$60,$30(a1)
000109E4 137C 0093 0020             		move.b	#$93,$20(a1)
000109EA 137C 0080 0016             		move.b	#$80,$16(a1)
000109F0 08E9 0004 0001             		bset	#4,1(a1)
000109F6 5829 0024                  		addq.b	#4,$24(a1)
000109FA 2348 003C                  		move.l	a0,$3C(a1)
000109FE 4A28 0028                  		tst.b	$28(a0)
00010A02 6700                       		beq.s	Obj4D_PlaySnd
00010A04 7200                       		moveq	#0,d1
00010A06 6100 FF76                  		bsr.w	Obj4D_Loop
00010A0A 5429 0024                  		addq.b	#2,$24(a1)
00010A0E 08E9 0004 0002             		bset	#4,2(a1)
00010A14 0669 0100 000C             		addi.w	#$100,$C(a1)
00010A1A 137C 0000 0018             		move.b	#0,$18(a1)
00010A20 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010A26 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010A2C 117C 0000 0028             		move.b	#0,$28(a0)
00010A32                            
00010A32                            Obj4D_PlaySnd:
00010A32 303C 00C8                  		move.w	#$C8,d0
00010A36 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play flame sound
00010A3C                            
00010A3C                            Obj4D_Action:				; XREF: Obj4D_Index
00010A3C 7000                       		moveq	#0,d0
00010A3E 1028 0028                  		move.b	$28(a0),d0
00010A42 D040                       		add.w	d0,d0
00010A44 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00010A48 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00010A4C 6100 E0C6                  		bsr.w	SpeedToPos
00010A50 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010A56 6100 B136                  		bsr.w	AnimateSprite
00010A5A                            
00010A5A                            Obj4D_ChkDel:				; XREF: Obj4C
00010A5A 3028 0008                  		move.w	8(a0),d0
00010A5E 0240 FF80                  		andi.w	#$FF80,d0
00010A62 3238 F700                  		move.w	($FFFFF700).w,d1
00010A66 0441 0080                  		subi.w	#$80,d1
00010A6A 0241 FF80                  		andi.w	#$FF80,d1
00010A6E 9041                       		sub.w	d1,d0
00010A70 0C40 0280                  		cmpi.w	#$280,d0
00010A74 6300                       		bls.s	Obj4D_NoDel
00010A76 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010A7A 6700 E102                  		beq.w	DeleteObject	; if it's zero, don't remember object
00010A7E 3440                       		movea.w	d0,a2	; load address into a2
00010A80 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010A84 6000 E0F8                  		bra.w	DeleteObject	; and delete object
00010A88                            
00010A88                            Obj4D_NoDel:
00010A88 4E75                       		rts	
00010A8A                            ; ===========================================================================
00010A8A 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
00010A8C 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00010A8E                            ; ===========================================================================
00010A8E                            
00010A8E                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00010A8E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010A94 3028 0030                  		move.w	$30(a0),d0
00010A98 B068 000C                  		cmp.w	$C(a0),d0
00010A9C 6400                       		bcc.s	locret_EFDA
00010A9E 5828 0024                  		addq.b	#4,$24(a0)
00010AA2 2268 003C                  		movea.l	$3C(a0),a1
00010AA6 137C 0003 001C             		move.b	#3,$1C(a1)
00010AAC                            
00010AAC                            locret_EFDA:
00010AAC 4E75                       		rts	
00010AAE                            ; ===========================================================================
00010AAE                            
00010AAE                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
00010AAE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010AB4 3028 0030                  		move.w	$30(a0),d0
00010AB8 B068 000C                  		cmp.w	$C(a0),d0
00010ABC 6400                       		bcc.s	locret_EFFA
00010ABE 5828 0024                  		addq.b	#4,$24(a0)
00010AC2 2268 003C                  		movea.l	$3C(a0),a1
00010AC6 137C 0001 001C             		move.b	#1,$1C(a1)
00010ACC                            
00010ACC                            locret_EFFA:
00010ACC 4E75                       		rts	
00010ACE                            ; ===========================================================================
00010ACE                            
00010ACE                            loc_EFFC:				; XREF: Obj4D_Index
00010ACE 2268 003C                  		movea.l	$3C(a0),a1
00010AD2 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00010AD8 6700 0000                  		beq.w	Obj4D_Delete
00010ADC 3029 000C                  		move.w	$C(a1),d0
00010AE0 0640 0060                  		addi.w	#$60,d0
00010AE4 3140 000C                  		move.w	d0,$C(a0)
00010AE8 9068 0030                  		sub.w	$30(a0),d0
00010AEC 4440                       		neg.w	d0
00010AEE 7208                       		moveq	#8,d1
00010AF0 0C40 0040                  		cmpi.w	#$40,d0
00010AF4 6C00                       		bge.s	loc_F026
00010AF6 720B                       		moveq	#$B,d1
00010AF8                            
00010AF8                            loc_F026:
00010AF8 0C40 0080                  		cmpi.w	#$80,d0
00010AFC 6F00                       		ble.s	loc_F02E
00010AFE 720E                       		moveq	#$E,d1
00010B00                            
00010B00                            loc_F02E:
00010B00 5328 001E                  		subq.b	#1,$1E(a0)
00010B04 6A00                       		bpl.s	loc_F04C
00010B06 117C 0007 001E             		move.b	#7,$1E(a0)
00010B0C 5228 001B                  		addq.b	#1,$1B(a0)
00010B10 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010B16 6500                       		bcs.s	loc_F04C
00010B18 117C 0000 001B             		move.b	#0,$1B(a0)
00010B1E                            
00010B1E                            loc_F04C:
00010B1E 1028 001B                  		move.b	$1B(a0),d0
00010B22 D001                       		add.b	d1,d0
00010B24 1140 001A                  		move.b	d0,$1A(a0)
00010B28 6000 FF30                  		bra.w	Obj4D_ChkDel
00010B2C                            ; ===========================================================================
00010B2C                            
00010B2C                            Obj4D_Delete:				; XREF: Obj4D_Index
00010B2C 6000 E050                  		bra.w	DeleteObject
00010B30                            ; ===========================================================================
00010B30                            ; ---------------------------------------------------------------------------
00010B30                            ; Object 4E - advancing	wall of	lava (MZ)
00010B30                            ; ---------------------------------------------------------------------------
00010B30                            
00010B30                            Obj4E:					; XREF: Obj_Index
00010B30 7000                       		moveq	#0,d0
00010B32 1028 0024                  		move.b	$24(a0),d0
00010B36 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00010B3A 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00010B3E                            ; ===========================================================================
00010B3E 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00010B40 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00010B42 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010B44 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00010B46 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00010B48                            ; ===========================================================================
00010B48                            
00010B48                            Obj4E_Main:				; XREF: Obj4E_Index
00010B48 5828 0024                  		addq.b	#4,$24(a0)
00010B4C 2248                       		movea.l	a0,a1
00010B4E 7201                       		moveq	#1,d1
00010B50 6000                       		bra.s	Obj4E_Main2
00010B52                            ; ===========================================================================
00010B52                            
00010B52                            Obj4E_Loop:
00010B52 6100 E746                  		bsr.w	SingleObjLoad2
00010B56 6600                       		bne.s	loc_F0C8
00010B58                            
00010B58                            Obj4E_Main2:				; XREF: Obj4E_Main
00010B58 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00010B5C 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010B64 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010B6A 137C 0004 0001             		move.b	#4,1(a1)
00010B70 137C 0050 0019             		move.b	#$50,$19(a1)
00010B76 3368 0008 0008             		move.w	8(a0),8(a1)
00010B7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010B82 137C 0001 0018             		move.b	#1,$18(a1)
00010B88 137C 0000 001C             		move.b	#0,$1C(a1)
00010B8E 137C 0094 0020             		move.b	#$94,$20(a1)
00010B94 2348 003C                  		move.l	a0,$3C(a1)
00010B98                            
00010B98                            loc_F0C8:
00010B98 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
00010B9C                            
00010B9C 5C29 0024                  		addq.b	#6,$24(a1)
00010BA0 137C 0004 001A             		move.b	#4,$1A(a1)
00010BA6                            
00010BA6                            Obj4E_Action:				; XREF: Obj4E_Index
00010BA6 3038 D008                  		move.w	($FFFFD008).w,d0
00010BAA 9068 0008                  		sub.w	8(a0),d0
00010BAE 6400                       		bcc.s	Obj4E_ChkSonic
00010BB0 4440                       		neg.w	d0
00010BB2                            
00010BB2                            Obj4E_ChkSonic:
00010BB2 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010BB6 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010BB8 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010BBC 9068 000C                  		sub.w	$C(a0),d0
00010BC0 6400                       		bcc.s	loc_F0F4
00010BC2 4440                       		neg.w	d0
00010BC4                            
00010BC4                            loc_F0F4:
00010BC4 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00010BC8 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010BCA 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
00010BD0 6000                       		bra.s	Obj4E_Solid
00010BD2                            ; ===========================================================================
00010BD2                            
00010BD2                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
00010BD2 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010BD6 6700                       		beq.s	Obj4E_Solid	; if not, branch
00010BD8 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
00010BDE 5528 0024                  		subq.b	#2,$24(a0)
00010BE2                            
00010BE2                            Obj4E_Solid:				; XREF: Obj4E_Index
00010BE2 323C 002B                  		move.w	#$2B,d1
00010BE6 343C 0018                  		move.w	#$18,d2
00010BEA 3602                       		move.w	d2,d3
00010BEC 5243                       		addq.w	#1,d3
00010BEE 3828 0008                  		move.w	8(a0),d4
00010BF2 1028 0024                  		move.b	$24(a0),d0
00010BF6 3F00                       		move.w	d0,-(sp)
00010BF8 6100 0000                  		bsr.w	SolidObject
00010BFC 301F                       		move.w	(sp)+,d0
00010BFE 1140 0024                  		move.b	d0,$24(a0)
00010C02 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010C08 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010C0A 4268 0010                  		clr.w	$10(a0)		; stop object moving
00010C0E 4228 0036                  		clr.b	$36(a0)
00010C12                            
00010C12                            Obj4E_Animate:
00010C12 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010C18 6100 AF74                  		bsr.w	AnimateSprite
00010C1C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010C22 6400                       		bcc.s	Obj4E_ChkDel
00010C24 6100 DEEE                  		bsr.w	SpeedToPos
00010C28                            
00010C28                            Obj4E_ChkDel:
00010C28 6100 DF04                  		bsr.w	DisplaySprite
00010C2C 4A28 0036                  		tst.b	$36(a0)
00010C30 6600                       		bne.s	locret_F17E
00010C32 3028 0008                  		move.w	8(a0),d0
00010C36 0240 FF80                  		andi.w	#$FF80,d0
00010C3A 3238 F700                  		move.w	($FFFFF700).w,d1
00010C3E 0441 0080                  		subi.w	#$80,d1
00010C42 0241 FF80                  		andi.w	#$FF80,d1
00010C46 9041                       		sub.w	d1,d0
00010C48 0C40 0280                  		cmpi.w	#$280,d0
00010C4C 6200                       		bhi.s	Obj4E_ChkGone
00010C4E                            
00010C4E                            locret_F17E:
00010C4E 4E75                       		rts	
00010C50                            ; ===========================================================================
00010C50                            
00010C50                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010C50 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010C54 3440                       		movea.w	d0,a2	; load address into a2
00010C56 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010C5A 117C 0008 0024             		move.b	#8,$24(a0)
00010C60 4E75                       		rts	
00010C62                            ; ===========================================================================
00010C62                            
00010C62                            Obj4E_Move2:				; XREF: Obj4E_Index
00010C62 2268 003C                  		movea.l	$3C(a0),a1
00010C66 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010C6C 6700                       		beq.s	Obj4E_Delete
00010C6E 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010C74 0468 0080 0008             		subi.w	#$80,8(a0)
00010C7A 6000 DEB2                  		bra.w	DisplaySprite
00010C7E                            ; ===========================================================================
00010C7E                            
00010C7E                            Obj4E_Delete:				; XREF: Obj4E_Index
00010C7E 6000 DEFE                  		bra.w	DeleteObject
00010C82                            ; ===========================================================================
00010C82                            ; ---------------------------------------------------------------------------
00010C82                            ; Object 54 - invisible	lava tag (MZ)
00010C82                            ; ---------------------------------------------------------------------------
00010C82                            
00010C82                            Obj54:					; XREF: Obj_Index
00010C82 7000                       		moveq	#0,d0
00010C84 1028 0024                  		move.b	$24(a0),d0
00010C88 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010C8C 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010C90                            ; ===========================================================================
00010C90 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010C92 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010C94                            
00010C94 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010C98                            ; ===========================================================================
00010C98                            
00010C98                            Obj54_Main:				; XREF: Obj54_Index
00010C98 5428 0024                  		addq.b	#2,$24(a0)
00010C9C 7000                       		moveq	#0,d0
00010C9E 1028 0028                  		move.b	$28(a0),d0
00010CA2 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010CA8 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010CB0 117C 0084 0001             		move.b	#$84,1(a0)
00010CB6                            
00010CB6                            Obj54_ChkDel:				; XREF: Obj54_Index
00010CB6 3028 0008                  		move.w	8(a0),d0
00010CBA 0240 FF80                  		andi.w	#$FF80,d0
00010CBE 3238 F700                  		move.w	($FFFFF700).w,d1
00010CC2 0441 0080                  		subi.w	#$80,d1
00010CC6 0241 FF80                  		andi.w	#$FF80,d1
00010CCA 9041                       		sub.w	d1,d0
00010CCC 6B00 DEB0                  		bmi.w	DeleteObject
00010CD0 0C40 0280                  		cmpi.w	#$280,d0
00010CD4 6300                       		bls.s	Obj54_NoDel
00010CD6                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00010CD6                            	;	beq.w	DeleteObject		; if it's zero, don't remember object
00010CD6                            	;	movea.w	d0,a2	; load address into a2
00010CD6                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010CD6 6000 DEA6                  		bra.w	DeleteObject	; and delete object
00010CDA                            
00010CDA                            Obj54_NoDel:
00010CDA 4E75                       		rts	
00010CDC                            ; ===========================================================================
00010CDC                            ; ---------------------------------------------------------------------------
00010CDC                            ; Sprite mappings - invisible lava tag (MZ)
00010CDC                            ; ---------------------------------------------------------------------------
00010CDC                            Map_obj54:
00010CDC                            	include "_maps\obj54.asm"
00010CDC                            ; ---------------------------------------------------------------------------
00010CDC                            ; Sprite mappings - invisible lava tag (MZ)
00010CDC                            ; ---------------------------------------------------------------------------
00010CDC 0000                       		dc.w byte_F212-Map_obj54
00010CDE 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010CE0 00                         		even
00010CE0 00                         		even
00010CE0                            
00010CE0                            Ani_obj4C:
00010CE0                            	include "_anim\obj4C.asm"
00010CE0                            ; ---------------------------------------------------------------------------
00010CE0                            ; Animation script - geyser of lava (MZ)
00010CE0                            ; ---------------------------------------------------------------------------
00010CE0 0000                       		dc.w byte_F220-Ani_obj4C
00010CE2 0000                       		dc.w byte_F22A-Ani_obj4C
00010CE4 0000                       		dc.w byte_F22E-Ani_obj4C
00010CE6 0000                       		dc.w byte_F232-Ani_obj4C
00010CE8 0000                       		dc.w byte_F23A-Ani_obj4C
00010CEA 0000                       		dc.w byte_F23E-Ani_obj4C
00010CEC 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010CF6 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010CFA 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010CFE 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010D06 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010D0A 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010D0E                            		even
00010D0E                            		even
00010D0E                            
00010D0E                            Ani_obj4E:
00010D0E                            	include "_anim\obj4E.asm"
00010D0E                            ; ---------------------------------------------------------------------------
00010D0E                            ; Animation script - advancing wall of lava (MZ)
00010D0E                            ; ---------------------------------------------------------------------------
00010D0E 0000                       		dc.w byte_F244-Ani_obj4E
00010D10 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010D16                            		even
00010D16                            		even
00010D16                            
00010D16                            ; ---------------------------------------------------------------------------
00010D16                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010D16                            ; ---------------------------------------------------------------------------
00010D16                            Map_obj4C:
00010D16                            	include "_maps\obj4C.asm"
00010D16                            ; ---------------------------------------------------------------------------
00010D16                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010D16                            ; ---------------------------------------------------------------------------
00010D16 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00010D1A 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010D1E 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010D22 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010D26 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00010D2A 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010D2E 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010D32 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010D36 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00010D3A 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010D3E 02                         byte_F272:	dc.b 2
00010D3F EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010D44 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00010D49 02                         byte_F27D:	dc.b 2
00010D4A EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010D4F EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010D54 04                         byte_F288:	dc.b 4
00010D55 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010D5A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010D5F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010D64 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010D69 04                         byte_F29D:	dc.b 4
00010D6A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010D6F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010D74 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010D79 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010D7E 06                         byte_F2B2:	dc.b 6
00010D7F EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010D84 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010D89 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010D8E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010D93 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010D98 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010D9D 06                         byte_F2D1:	dc.b 6
00010D9E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010DA3 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010DA8 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010DAD EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010DB2 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010DB7 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010DBC 02                         byte_F2F0:	dc.b 2
00010DBD E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010DC2 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010DC7 02                         byte_F2FB:	dc.b 2
00010DC8 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010DCD E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010DD2 0A                         byte_F306:	dc.b $A
00010DD3 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010DD8 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010DDD B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010DE2 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010DE7 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010DEC D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010DF1 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010DF6 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010DFB 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010E00 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010E05 0A                         byte_F339:	dc.b $A
00010E06 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010E0B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010E10 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010E15 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010E1A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010E1F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010E24 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010E29 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010E2E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010E33 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010E38 0A                         byte_F36C:	dc.b $A
00010E39 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010E3E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010E43 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010E48 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010E4D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010E52 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010E57 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010E5C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010E61 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010E66 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010E6B 06                         byte_F39F:	dc.b 6
00010E6C 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010E71 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010E76 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010E7B B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010E80 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010E85 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010E8A 06                         byte_F3BE:	dc.b 6
00010E8B 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010E90 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010E95 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010E9A B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010E9F D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010EA4 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010EA9 06                         byte_F3DD:	dc.b 6
00010EAA 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010EAF 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010EB4 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010EB9 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010EBE D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010EC3 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010EC8 10                         byte_F3FC:	dc.b $10
00010EC9 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010ECE 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010ED3 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010ED8 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010EDD D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010EE2 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010EE7 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010EEC F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010EF1 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010EF6 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010EFB 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010F00 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010F05 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010F0A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010F0F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010F14 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010F19 10                         byte_F44D:	dc.b $10
00010F1A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010F1F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010F24 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010F29 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010F2E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010F33 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010F38 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010F3D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010F42 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010F47 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010F4C 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010F51 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010F56 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010F5B 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010F60 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010F65 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010F6A 10                         byte_F49E:	dc.b $10
00010F6B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010F70 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010F75 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010F7A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010F7F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010F84 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010F89 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010F8E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010F93 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010F98 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010F9D 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010FA2 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010FA7 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010FAC 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010FB1 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010FB6 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010FBB 06                         byte_F4EF:	dc.b 6
00010FBC E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010FC1 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010FC6 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010FCB E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010FD0 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010FD5 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010FDA 06                         byte_F50E:	dc.b 6
00010FDB E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010FE0 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010FE5 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010FEA E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010FEF D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010FF4 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010FF9 00                         byte_F52D:	dc.b 0
00010FFA                            		even
00010FFA                            		even
00010FFA                            
00010FFA                            ; ---------------------------------------------------------------------------
00010FFA                            ; Sprite mappings - advancing wall of lava (MZ)
00010FFA                            ; ---------------------------------------------------------------------------
00010FFA                            Map_obj4E:
00010FFA                            	include "_maps\obj4E.asm"
00010FFA                            ; ---------------------------------------------------------------------------
00010FFA                            ; Sprite mappings - advancing wall of lava (MZ)
00010FFA                            ; ---------------------------------------------------------------------------
00010FFA 0000                       		dc.w byte_F538-Map_obj4E
00010FFC 0000                       		dc.w byte_F566-Map_obj4E
00010FFE 0000                       		dc.w byte_F594-Map_obj4E
00011000 0000                       		dc.w byte_F5C2-Map_obj4E
00011002 0000                       		dc.w byte_F5F0-Map_obj4E
00011004 09                         byte_F538:	dc.b 9
00011005 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0001100A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001100F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011014 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011019 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001101E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011023 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00011028 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001102D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011032 09                         byte_F566:	dc.b 9
00011033 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00011038 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0001103D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011042 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011047 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001104C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011051 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00011056 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001105B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011060 09                         byte_F594:	dc.b 9
00011061 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00011066 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001106B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011070 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011075 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001107A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001107F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00011084 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00011089 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001108E 09                         byte_F5C2:	dc.b 9
0001108F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00011094 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00011099 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001109E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000110A3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000110A8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000110AD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000110B2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000110B7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000110BC 08                         byte_F5F0:	dc.b 8
000110BD E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
000110C2 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000110C7 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000110CC 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000110D1 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000110D6 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000110DB E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000110E0 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000110E6 00                         		even
000110E6 00                         		even
000110E6                            
000110E6                            ; ===========================================================================
000110E6                            ; ---------------------------------------------------------------------------
000110E6                            ; Object 40 - Moto Bug enemy (GHZ)
000110E6                            ; ---------------------------------------------------------------------------
000110E6                            
000110E6                            Obj40:					; XREF: Obj_Index
000110E6 7000                       		moveq	#0,d0
000110E8 1028 0024                  		move.b	$24(a0),d0
000110EC 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
000110F0 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
000110F4                            ; ===========================================================================
000110F4 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
000110F6 0000                       		dc.w Obj40_Action-Obj40_Index
000110F8 0000                       		dc.w Obj40_Animate-Obj40_Index
000110FA 0000                       		dc.w Obj40_Delete-Obj40_Index
000110FC                            ; ===========================================================================
000110FC                            
000110FC                            Obj40_Main:				; XREF: Obj40_Index
000110FC 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00011104 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001110A 117C 0004 0001             		move.b	#4,1(a0)
00011110 117C 0004 0018             		move.b	#4,$18(a0)
00011116 117C 0014 0019             		move.b	#$14,$19(a0)
0001111C 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00011120 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00011122 117C 000E 0016             		move.b	#$E,$16(a0)
00011128 117C 0008 0017             		move.b	#8,$17(a0)
0001112E 117C 000C 0020             		move.b	#$C,$20(a0)
00011134 6100 D9BE                  		bsr.w	ObjectFall
00011138 4EB9 0000 0000             		jsr	ObjHitFloor
0001113E 4A41                       		tst.w	d1
00011140 6A00                       		bpl.s	locret_F68A
00011142 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011146 317C 0000 0012             		move.w	#0,$12(a0)
0001114C 5428 0024                  		addq.b	#2,$24(a0)
00011150 0868 0000 0022             		bchg	#0,$22(a0)
00011156                            
00011156                            locret_F68A:
00011156 4E75                       		rts	
00011158                            ; ===========================================================================
00011158                            
00011158                            Obj40_SetSmoke:				; XREF: Obj40_Main
00011158 5828 0024                  		addq.b	#4,$24(a0)
0001115C 6000 0000                  		bra.w	Obj40_Animate
00011160                            ; ===========================================================================
00011160                            
00011160                            Obj40_Action:				; XREF: Obj40_Index
00011160 7000                       		moveq	#0,d0
00011162 1028 0025                  		move.b	$25(a0),d0
00011166 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0001116A 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0001116E 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011174 6100 AA18                  		bsr.w	AnimateSprite
00011178                            
00011178                            ; ---------------------------------------------------------------------------
00011178                            ; Routine to mark an enemy/monitor/ring	as destroyed
00011178                            ; ---------------------------------------------------------------------------
00011178                            
00011178                            MarkObjGone:
00011178 3028 0008                  		move.w	8(a0),d0
0001117C 0240 FF80                  		andi.w	#$FF80,d0
00011180 3238 F700                  		move.w	($FFFFF700).w,d1
00011184 0441 0080                  		subi.w	#$80,d1
00011188 0241 FF80                  		andi.w	#$FF80,d1
0001118C 9041                       		sub.w	d1,d0
0001118E 0C40 0280                  		cmpi.w	#$280,d0
00011192 6200 0000                  		bhi.w	Mark_ChkGone
00011196 6000 D996                  		bra.w	DisplaySprite
0001119A                            ; ===========================================================================
0001119A                            
0001119A                            Mark_ChkGone:
0001119A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001119E 6700 D9DE                  		beq.w	DeleteObject	; if it's zero, don't remember object
000111A2 3440                       		movea.w	d0,a2	; load address into a2
000111A4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000111A8                            
000111A8                            Mark_Delete:
000111A8 6000 D9D4                  		bra.w	DeleteObject
000111AC                            
000111AC                            ; ===========================================================================
000111AC 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000111AE 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000111B0                            ; ===========================================================================
000111B0                            
000111B0                            Obj40_Move:				; XREF: Obj40_Index2
000111B0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000111B4 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000111B6 5428 0025                  		addq.b	#2,$25(a0)
000111BA 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000111C0 117C 0001 001C             		move.b	#1,$1C(a0)
000111C6 0868 0000 0022             		bchg	#0,$22(a0)
000111CC 6600                       		bne.s	locret_F70A
000111CE 4468 0010                  		neg.w	$10(a0)		; change direction
000111D2                            
000111D2                            locret_F70A:
000111D2 4E75                       		rts	
000111D4                            ; ===========================================================================
000111D4                            
000111D4                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000111D4 6100 D93E                  		bsr.w	SpeedToPos
000111D8 4EB9 0000 0000             		jsr	ObjHitFloor
000111DE 0C41 FFF8                  		cmpi.w	#-8,d1
000111E2 6D00                       		blt.s	Obj40_Pause
000111E4 0C41 000C                  		cmpi.w	#$C,d1
000111E8 6C00                       		bge.s	Obj40_Pause
000111EA D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000111EE 5328 0033                  		subq.b	#1,$33(a0)
000111F2 6A00                       		bpl.s	locret_F756
000111F4 117C 000F 0033             		move.b	#$F,$33(a0)
000111FA 6100 E088                  		bsr.w	SingleObjLoad
000111FE 6600                       		bne.s	locret_F756
00011200 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00011204 3368 0008 0008             		move.w	8(a0),8(a1)
0001120A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011210 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011216 137C 0002 001C             		move.b	#2,$1C(a1)
0001121C                            
0001121C                            locret_F756:
0001121C 4E75                       		rts	
0001121E                            ; ===========================================================================
0001121E                            
0001121E                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0001121E 5528 0025                  		subq.b	#2,$25(a0)
00011222 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00011228 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0001122E 117C 0000 001C             		move.b	#0,$1C(a0)
00011234 4E75                       		rts	
00011236                            ; ===========================================================================
00011236                            
00011236                            Obj40_Animate:				; XREF: Obj40_Index
00011236 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001123C 6100 A950                  		bsr.w	AnimateSprite
00011240 6000 D8EC                  		bra.w	DisplaySprite
00011244                            ; ===========================================================================
00011244                            
00011244                            Obj40_Delete:				; XREF: Obj40_Index
00011244 6000 D938                  		bra.w	DeleteObject
00011248                            ; ===========================================================================
00011248                            Ani_obj40:
00011248                            	include "_anim\obj40.asm"
00011248                            ; ---------------------------------------------------------------------------
00011248                            ; Animation script - Motobug enemy
00011248                            ; ---------------------------------------------------------------------------
00011248 0000                       		dc.w byte_F788-Ani_obj40
0001124A 0000                       		dc.w byte_F78C-Ani_obj40
0001124C 0000                       		dc.w byte_F792-Ani_obj40
0001124E 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00011252 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00011258 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00011266                            		even
00011266                            		even
00011266                            
00011266                            ; ---------------------------------------------------------------------------
00011266                            ; Sprite mappings - Moto Bug enemy (GHZ)
00011266                            ; ---------------------------------------------------------------------------
00011266                            Map_obj40:
00011266                            	include "_maps\obj40.asm"
00011266                            ; ---------------------------------------------------------------------------
00011266                            ; Sprite mappings - Moto Bug enemy (GHZ)
00011266                            ; ---------------------------------------------------------------------------
00011266 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0001126A 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0001126E 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00011272 0000                       		dc.w byte_F804-Map_obj40
00011274 04                         byte_F7AE:	dc.b 4
00011275 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0001127A 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0001127F F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00011284 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
00011289 04                         byte_F7C3:	dc.b 4
0001128A F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0001128F 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
00011294 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
00011299 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0001129E 05                         byte_F7D8:	dc.b 5
0001129F F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000112A4 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
000112A9 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000112AE 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
000112B3 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
000112B8 01                         byte_F7F2:	dc.b 1
000112B9 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000112BE 01                         byte_F7F8:	dc.b 1
000112BF FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000112C4 01                         byte_F7FE:	dc.b 1
000112C5 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000112CA 00                         byte_F804:	dc.b 0
000112CC 00                         		even
000112CC 00                         		even
000112CC                            
000112CC                            ; ===========================================================================
000112CC                            ; ---------------------------------------------------------------------------
000112CC                            ; Object 4F - blank
000112CC                            ; ---------------------------------------------------------------------------
000112CC                            
000112CC                            Obj4F:					; XREF: Obj_Index
000112CC 4E75                       		rts	
000112CE                            
000112CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000112CE                            
000112CE                            
000112CE                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000112CE 3038 FE04                  		move.w	($FFFFFE04).w,d0
000112D2 D047                       		add.w	d7,d0
000112D4 0240 0003                  		andi.w	#3,d0
000112D8 6600                       		bne.s	loc_F836
000112DA 7600                       		moveq	#0,d3
000112DC 1628 0019                  		move.b	$19(a0),d3
000112E0 4A68 0010                  		tst.w	$10(a0)
000112E4 6B00                       		bmi.s	loc_F82C
000112E6 6100 0000                  		bsr.w	ObjHitWallRight
000112EA 4A41                       		tst.w	d1
000112EC 6A00                       		bpl.s	loc_F836
000112EE                            
000112EE                            loc_F828:
000112EE 7001                       		moveq	#1,d0
000112F0 4E75                       		rts	
000112F2                            ; ===========================================================================
000112F2                            
000112F2                            loc_F82C:
000112F2 4643                       		not.w	d3
000112F4 6100 0000                  		bsr.w	ObjHitWallLeft
000112F8 4A41                       		tst.w	d1
000112FA 6BF2                       		bmi.s	loc_F828
000112FC                            
000112FC                            loc_F836:
000112FC 7000                       		moveq	#0,d0
000112FE 4E75                       		rts	
00011300                            ; End of function Obj50_ChkWall
00011300                            
00011300                            ; ===========================================================================
00011300                            ; ---------------------------------------------------------------------------
00011300                            ; Object 50 - Yadrin enemy (SYZ)
00011300                            ; ---------------------------------------------------------------------------
00011300                            
00011300                            Obj50:					; XREF: Obj_Index
00011300 7000                       		moveq	#0,d0
00011302 1028 0024                  		move.b	$24(a0),d0
00011306 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001130A 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0001130E                            ; ===========================================================================
0001130E 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00011310 0000                       		dc.w Obj50_Action-Obj50_Index
00011312                            ; ===========================================================================
00011312                            
00011312                            Obj50_Main:				; XREF: Obj50_Index
00011312 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0001131A 317C 247B 0002             		move.w	#$247B,2(a0)
00011320 117C 0004 0001             		move.b	#4,1(a0)
00011326 117C 0004 0018             		move.b	#4,$18(a0)
0001132C 117C 0014 0019             		move.b	#$14,$19(a0)
00011332 117C 0011 0016             		move.b	#$11,$16(a0)
00011338 117C 0008 0017             		move.b	#8,$17(a0)
0001133E 117C 00CC 0020             		move.b	#$CC,$20(a0)
00011344 6100 D7AE                  		bsr.w	ObjectFall
00011348 6100 0000                  		bsr.w	ObjHitFloor
0001134C 4A41                       		tst.w	d1
0001134E 6A00                       		bpl.s	locret_F89E
00011350 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011354 317C 0000 0012             		move.w	#0,$12(a0)
0001135A 5428 0024                  		addq.b	#2,$24(a0)
0001135E 0868 0000 0022             		bchg	#0,$22(a0)
00011364                            
00011364                            locret_F89E:
00011364 4E75                       		rts	
00011366                            ; ===========================================================================
00011366                            
00011366                            Obj50_Action:				; XREF: Obj50_Index
00011366 7000                       		moveq	#0,d0
00011368 1028 0025                  		move.b	$25(a0),d0
0001136C 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00011370 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00011374 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0001137A 6100 A812                  		bsr.w	AnimateSprite
0001137E 6000 FDF8                  		bra.w	MarkObjGone
00011382                            ; ===========================================================================
00011382 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00011384 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00011386                            ; ===========================================================================
00011386                            
00011386                            Obj50_Move:				; XREF: Obj50_Index2
00011386 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001138A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0001138C 5428 0025                  		addq.b	#2,$25(a0)
00011390 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00011396 117C 0001 001C             		move.b	#1,$1C(a0)
0001139C 0868 0000 0022             		bchg	#0,$22(a0)
000113A2 6600                       		bne.s	locret_F8E2
000113A4 4468 0010                  		neg.w	$10(a0)		; change direction
000113A8                            
000113A8                            locret_F8E2:
000113A8 4E75                       		rts	
000113AA                            ; ===========================================================================
000113AA                            
000113AA                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000113AA 6100 D768                  		bsr.w	SpeedToPos
000113AE 6100 0000                  		bsr.w	ObjHitFloor
000113B2 0C41 FFF8                  		cmpi.w	#-8,d1
000113B6 6D00                       		blt.s	Obj50_Pause
000113B8 0C41 000C                  		cmpi.w	#$C,d1
000113BC 6C00                       		bge.s	Obj50_Pause
000113BE D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000113C2 6100 FF0A                  		bsr.w	Obj50_ChkWall
000113C6 6600                       		bne.s	Obj50_Pause
000113C8 4E75                       		rts	
000113CA                            ; ===========================================================================
000113CA                            
000113CA                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000113CA 5528 0025                  		subq.b	#2,$25(a0)
000113CE 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000113D4 317C 0000 0010             		move.w	#0,$10(a0)
000113DA 117C 0000 001C             		move.b	#0,$1C(a0)
000113E0 4E75                       		rts	
000113E2                            ; ===========================================================================
000113E2                            Ani_obj50:
000113E2                            	include "_anim\obj50.asm"
000113E2                            ; ---------------------------------------------------------------------------
000113E2                            ; Animation script - Yadrin enemy
000113E2                            ; ---------------------------------------------------------------------------
000113E2 0000                       		dc.w byte_F920-Ani_obj50
000113E4 0000                       		dc.w byte_F924-Ani_obj50
000113E6 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000113EA 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000113F4                            		even
000113F4                            		even
000113F4                            
000113F4                            ; ---------------------------------------------------------------------------
000113F4                            ; Sprite mappings - Yadrin enemy (SYZ)
000113F4                            ; ---------------------------------------------------------------------------
000113F4                            Map_obj50:
000113F4                            	include "_maps\obj50.asm"
000113F4                            ; ---------------------------------------------------------------------------
000113F4                            ; Sprite mappings - Yadrin enemy (SYZ)
000113F4                            ; ---------------------------------------------------------------------------
000113F4 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
000113F8 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
000113FC 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00011400 05                         byte_F93A:	dc.b 5
00011401 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011406 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001140B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011410 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011415 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001141A 05                         byte_F954:	dc.b 5
0001141B F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00011420 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011425 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001142A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001142F 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011434 05                         byte_F96E:	dc.b 5
00011435 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001143A 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001143F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011444 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011449 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001144E 05                         byte_F988:	dc.b 5
0001144F F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011454 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00011459 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001145E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011463 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011468 05                         byte_F9A2:	dc.b 5
00011469 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0001146E FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011473 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011478 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001147D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011482 05                         byte_F9BC:	dc.b 5
00011483 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00011488 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001148D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011492 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011497 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001149C                            		even
0001149C                            		even
0001149C                            
0001149C                            ; ---------------------------------------------------------------------------
0001149C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0001149C                            ;
0001149C                            ; variables:
0001149C                            ; d1 = width
0001149C                            ; d2 = height /	2 (when	jumping)
0001149C                            ; d3 = height /	2 (when	walking)
0001149C                            ; d4 = x-axis position
0001149C                            ; ---------------------------------------------------------------------------
0001149C                            
0001149C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001149C                            
0001149C                            
0001149C                            SolidObject:
0001149C 4A28 0025                  		tst.b	$25(a0)
000114A0 6700 0000                  		beq.w	loc_FAC8
000114A4 3401                       		move.w	d1,d2
000114A6 D442                       		add.w	d2,d2
000114A8 43F8 D000                  		lea	($FFFFD000).w,a1
000114AC 0829 0001 0022             		btst	#1,$22(a1)
000114B2 6600                       		bne.s	loc_F9FE
000114B4 3029 0008                  		move.w	8(a1),d0
000114B8 9068 0008                  		sub.w	8(a0),d0
000114BC D041                       		add.w	d1,d0
000114BE 6B00                       		bmi.s	loc_F9FE
000114C0 B042                       		cmp.w	d2,d0
000114C2 6500                       		bcs.s	loc_FA12
000114C4                            
000114C4                            loc_F9FE:
000114C4 08A9 0003 0022             		bclr	#3,$22(a1)
000114CA 08A8 0003 0022             		bclr	#3,$22(a0)
000114D0 4228 0025                  		clr.b	$25(a0)
000114D4 7800                       		moveq	#0,d4
000114D6 4E75                       		rts	
000114D8                            ; ===========================================================================
000114D8                            
000114D8                            loc_FA12:
000114D8 3404                       		move.w	d4,d2
000114DA 4EB9 0000 8C48             		jsr	(MvSonicOnPtfm).l
000114E0 7800                       		moveq	#0,d4
000114E2 4E75                       		rts	
000114E4                            ; ===========================================================================
000114E4                            
000114E4                            SolidObject71:				; XREF: Obj71_Solid
000114E4 4A28 0025                  		tst.b	$25(a0)
000114E8 6700 0000                  		beq.w	loc_FAD0
000114EC 3401                       		move.w	d1,d2
000114EE D442                       		add.w	d2,d2
000114F0 43F8 D000                  		lea	($FFFFD000).w,a1
000114F4 0829 0001 0022             		btst	#1,$22(a1)
000114FA 6600                       		bne.s	loc_FA44
000114FC 3029 0008                  		move.w	8(a1),d0
00011500 9068 0008                  		sub.w	8(a0),d0
00011504 D041                       		add.w	d1,d0
00011506 6B00                       		bmi.s	loc_FA44
00011508 B042                       		cmp.w	d2,d0
0001150A 6500                       		bcs.s	loc_FA58
0001150C                            
0001150C                            loc_FA44:
0001150C 08A9 0003 0022             		bclr	#3,$22(a1)
00011512 08A8 0003 0022             		bclr	#3,$22(a0)
00011518 4228 0025                  		clr.b	$25(a0)
0001151C 7800                       		moveq	#0,d4
0001151E 4E75                       		rts	
00011520                            ; ===========================================================================
00011520                            
00011520                            loc_FA58:
00011520 3404                       		move.w	d4,d2
00011522 4EB9 0000 8C48             		jsr	(MvSonicOnPtfm).l
00011528 7800                       		moveq	#0,d4
0001152A 4E75                       		rts	
0001152C                            ; ===========================================================================
0001152C                            
0001152C                            SolidObject2F:				; XREF: Obj2F_Solid
0001152C 43F8 D000                  		lea	($FFFFD000).w,a1
00011530 4A28 0001                  		tst.b	1(a0)
00011534 6A00 0000                  		bpl.w	loc_FB92
00011538 3029 0008                  		move.w	8(a1),d0
0001153C 9068 0008                  		sub.w	8(a0),d0
00011540 D041                       		add.w	d1,d0
00011542 6B00 0000                  		bmi.w	loc_FB92
00011546 3601                       		move.w	d1,d3
00011548 D643                       		add.w	d3,d3
0001154A B043                       		cmp.w	d3,d0
0001154C 6200 0000                  		bhi.w	loc_FB92
00011550 3A00                       		move.w	d0,d5
00011552 0828 0000 0001             		btst	#0,1(a0)
00011558 6700                       		beq.s	loc_FA94
0001155A 4645                       		not.w	d5
0001155C DA43                       		add.w	d3,d5
0001155E                            
0001155E                            loc_FA94:
0001155E E24D                       		lsr.w	#1,d5
00011560 7600                       		moveq	#0,d3
00011562 1632 5000                  		move.b	(a2,d5.w),d3
00011566 9612                       		sub.b	(a2),d3
00011568 3A28 000C                  		move.w	$C(a0),d5
0001156C 9A43                       		sub.w	d3,d5
0001156E 1629 0016                  		move.b	$16(a1),d3
00011572 4883                       		ext.w	d3
00011574 D443                       		add.w	d3,d2
00011576 3629 000C                  		move.w	$C(a1),d3
0001157A 9645                       		sub.w	d5,d3
0001157C 5843                       		addq.w	#4,d3
0001157E D642                       		add.w	d2,d3
00011580 6B00 0000                  		bmi.w	loc_FB92
00011584 3802                       		move.w	d2,d4
00011586 D844                       		add.w	d4,d4
00011588 B644                       		cmp.w	d4,d3
0001158A 6400 0000                  		bcc.w	loc_FB92
0001158E 6000 0000                  		bra.w	loc_FB0E
00011592                            ; ===========================================================================
00011592                            
00011592                            loc_FAC8:
00011592 4A28 0001                  		tst.b	1(a0)
00011596 6A00 0000                  		bpl.w	loc_FB92
0001159A                            
0001159A                            loc_FAD0:
0001159A 43F8 D000                  		lea	($FFFFD000).w,a1
0001159E 3029 0008                  		move.w	8(a1),d0
000115A2 9068 0008                  		sub.w	8(a0),d0
000115A6 D041                       		add.w	d1,d0
000115A8 6B00 0000                  		bmi.w	loc_FB92
000115AC 3601                       		move.w	d1,d3
000115AE D643                       		add.w	d3,d3
000115B0 B043                       		cmp.w	d3,d0
000115B2 6200 0000                  		bhi.w	loc_FB92
000115B6 1629 0016                  		move.b	$16(a1),d3
000115BA 4883                       		ext.w	d3
000115BC D443                       		add.w	d3,d2
000115BE 3629 000C                  		move.w	$C(a1),d3
000115C2 9668 000C                  		sub.w	$C(a0),d3
000115C6 5843                       		addq.w	#4,d3
000115C8 D642                       		add.w	d2,d3
000115CA 6B00 0000                  		bmi.w	loc_FB92
000115CE 3802                       		move.w	d2,d4
000115D0 D844                       		add.w	d4,d4
000115D2 B644                       		cmp.w	d4,d3
000115D4 6400 0000                  		bcc.w	loc_FB92
000115D8                            
000115D8                            loc_FB0E:
000115D8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000115DC 6B00 0000                  		bmi.w	loc_FB92
000115E0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000115E6 6400 0000                  		bcc.w	loc_FB92
000115EA 4A78 FE08                  		tst.w	($FFFFFE08).w
000115EE 6600 0000                  		bne.w	loc_FBAC
000115F2 3A00                       		move.w	d0,d5
000115F4 B240                       		cmp.w	d0,d1
000115F6 6400                       		bcc.s	loc_FB36
000115F8 D241                       		add.w	d1,d1
000115FA 9041                       		sub.w	d1,d0
000115FC 3A00                       		move.w	d0,d5
000115FE 4445                       		neg.w	d5
00011600                            
00011600                            loc_FB36:
00011600 3203                       		move.w	d3,d1
00011602 B443                       		cmp.w	d3,d2
00011604 6400                       		bcc.s	loc_FB44
00011606 5943                       		subq.w	#4,d3
00011608 9644                       		sub.w	d4,d3
0001160A 3203                       		move.w	d3,d1
0001160C 4441                       		neg.w	d1
0001160E                            
0001160E                            loc_FB44:
0001160E BA41                       		cmp.w	d1,d5
00011610 6200 0000                  		bhi.w	loc_FBB0
00011614 0C41 0004                  		cmpi.w	#4,d1
00011618 6300                       		bls.s	loc_FB8C
0001161A 4A40                       		tst.w	d0
0001161C 6700                       		beq.s	loc_FB70
0001161E 6B00                       		bmi.s	loc_FB5E
00011620 4A69 0010                  		tst.w	$10(a1)
00011624 6B00                       		bmi.s	loc_FB70
00011626 6000                       		bra.s	loc_FB64
00011628                            ; ===========================================================================
00011628                            
00011628                            loc_FB5E:
00011628 4A69 0010                  		tst.w	$10(a1)
0001162C 6A00                       		bpl.s	loc_FB70
0001162E                            
0001162E                            loc_FB64:
0001162E 337C 0000 0020             		move.w	#0,$20(a1)	; stop Sonic moving
00011634 337C 0000 0010             		move.w	#0,$10(a1)
0001163A                            
0001163A                            loc_FB70:
0001163A 9169 0008                  		sub.w	d0,8(a1)
0001163E 0829 0001 0022             		btst	#1,$22(a1)
00011644 6600                       		bne.s	loc_FB8C
00011646 08E9 0005 0022             		bset	#5,$22(a1)
0001164C 08E8 0005 0022             		bset	#5,$22(a0)
00011652 7801                       		moveq	#1,d4
00011654 4E75                       		rts	
00011656                            ; ===========================================================================
00011656                            
00011656                            loc_FB8C:
00011656 6100                       		bsr.s	loc_FBA0
00011658 7801                       		moveq	#1,d4
0001165A 4E75                       		rts	
0001165C                            ; ===========================================================================
0001165C                            loc_FB92:
0001165C 0828 0005 0022             		btst	#5,$22(a0)
00011662 6700                       		beq.s	loc_FBAC
00011664 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0001166A 6700                       		beq.s	loc_FBA0
0001166C 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
00011672 6700                       		beq.s	loc_FBA0
00011674 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
0001167A 6700                       		beq.s	loc_FBA0
0001167C 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00011682                            
00011682                            loc_FBA0:
00011682 08A8 0005 0022             		bclr	#5,$22(a0)
00011688 08A9 0005 0022             		bclr	#5,$22(a1)
0001168E                            
0001168E                            loc_FBAC:
0001168E 7800                       		moveq	#0,d4
00011690 4E75                       		rts	
00011692                            ; ===========================================================================
00011692                            
00011692                            loc_FBB0:
00011692 4A43                       		tst.w	d3
00011694 6B00                       		bmi.s	loc_FBBC
00011696 0C43 0010                  		cmpi.w	#$10,d3
0001169A 6500                       		bcs.s	loc_FBEE
0001169C 60BE                       		bra.s	loc_FB92
0001169E                            ; ===========================================================================
0001169E                            
0001169E                            loc_FBBC:
0001169E 4A69 0012                  		tst.w	$12(a1)
000116A2 6700                       		beq.s	loc_FBD6
000116A4 6A00                       		bpl.s	loc_FBD2
000116A6 4A43                       		tst.w	d3
000116A8 6A00                       		bpl.s	loc_FBD2
000116AA 9769 000C                  		sub.w	d3,$C(a1)
000116AE 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000116B4                            
000116B4                            loc_FBD2:
000116B4 78FF                       		moveq	#-1,d4
000116B6 4E75                       		rts	
000116B8                            ; ===========================================================================
000116B8                            
000116B8                            loc_FBD6:
000116B8 0829 0001 0022             		btst	#1,$22(a1)
000116BE 66F4                       		bne.s	loc_FBD2
000116C0 2F08                       		move.l	a0,-(sp)
000116C2 2049                       		movea.l	a1,a0
000116C4 4EB9 0000 0000             		jsr	KillSonic
000116CA 205F                       		movea.l	(sp)+,a0
000116CC 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
000116D2 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
000116D8 78FF                       		moveq	#-1,d4
000116DA 4E75                       		rts	
000116DC                            ; ===========================================================================
000116DC                            
000116DC                            loc_FBEE:
000116DC 5943                       		subq.w	#4,d3
000116DE 7200                       		moveq	#0,d1
000116E0 1228 0019                  		move.b	$19(a0),d1
000116E4 3401                       		move.w	d1,d2
000116E6 D442                       		add.w	d2,d2
000116E8 D269 0008                  		add.w	8(a1),d1
000116EC 9268 0008                  		sub.w	8(a0),d1
000116F0 6B00                       		bmi.s	loc_FC28
000116F2 B242                       		cmp.w	d2,d1
000116F4 6400                       		bcc.s	loc_FC28
000116F6 4A69 0012                  		tst.w	$12(a1)
000116FA 6B00                       		bmi.s	loc_FC28
000116FC 9769 000C                  		sub.w	d3,$C(a1)
00011700 5369 000C                  		subq.w	#1,$C(a1)
00011704 6100                       		bsr.s	sub_FC2C
00011706 117C 0002 0025             		move.b	#2,$25(a0)
0001170C 08E8 0003 0022             		bset	#3,$22(a0)
00011712 78FF                       		moveq	#-1,d4
00011714 4E75                       		rts	
00011716                            ; ===========================================================================
00011716                            
00011716                            loc_FC28:
00011716 7800                       		moveq	#0,d4
00011718 4E75                       		rts	
0001171A                            ; End of function SolidObject
0001171A                            
0001171A                            
0001171A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001171A                            
0001171A                            
0001171A                            sub_FC2C:				; XREF: SolidObject
0001171A 0829 0003 0022             		btst	#3,$22(a1)
00011720 6700                       		beq.s	loc_FC4E
00011722 7000                       		moveq	#0,d0
00011724 1029 003D                  		move.b	$3D(a1),d0
00011728 ED48                       		lsl.w	#6,d0
0001172A 0680 00FF D000             		addi.l	#$FFD000,d0
00011730 2440                       		movea.l	d0,a2
00011732 08AA 0003 0022             		bclr	#3,$22(a2)
00011738 422A 0025                  		clr.b	$25(a2)
0001173C                            
0001173C                            loc_FC4E:
0001173C 3008                       		move.w	a0,d0
0001173E 0440 D000                  		subi.w	#-$3000,d0
00011742 EC48                       		lsr.w	#6,d0
00011744 0240 007F                  		andi.w	#$7F,d0
00011748 1340 003D                  		move.b	d0,$3D(a1)
0001174C 137C 0000 0026             		move.b	#0,$26(a1)
00011752 337C 0000 0012             		move.w	#0,$12(a1)
00011758 3369 0010 0020             		move.w	$10(a1),$20(a1)
0001175E 0829 0001 0022             		btst	#1,$22(a1)
00011764 6700                       		beq.s	loc_FC84
00011766 2F08                       		move.l	a0,-(sp)
00011768 2049                       		movea.l	a1,a0
0001176A 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00011770 205F                       		movea.l	(sp)+,a0
00011772                            
00011772                            loc_FC84:
00011772 08E9 0003 0022             		bset	#3,$22(a1)
00011778 08E8 0003 0022             		bset	#3,$22(a0)
0001177E 4E75                       		rts	
00011780                            ; End of function sub_FC2C
00011780                            
00011780                            ; ===========================================================================
00011780                            ; ---------------------------------------------------------------------------
00011780                            ; Object 51 - smashable	green block (MZ)
00011780                            ; ---------------------------------------------------------------------------
00011780                            
00011780                            Obj51:					; XREF: Obj_Index
00011780 7000                       		moveq	#0,d0
00011782 1028 0024                  		move.b	$24(a0),d0
00011786 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001178A 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001178E 6000 F9E8                  		bra.w	MarkObjGone
00011792                            ; ===========================================================================
00011792 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00011794 0000                       		dc.w Obj51_Solid-Obj51_Index
00011796 0000                       		dc.w Obj51_Display-Obj51_Index
00011798                            ; ===========================================================================
00011798                            
00011798                            Obj51_Main:				; XREF: Obj51_Index
00011798 5428 0024                  		addq.b	#2,$24(a0)
0001179C 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000117A4 317C 42B8 0002             		move.w	#$42B8,2(a0)
000117AA 117C 0004 0001             		move.b	#4,1(a0)
000117B0 117C 0010 0019             		move.b	#$10,$19(a0)
000117B6 117C 0004 0018             		move.b	#4,$18(a0)
000117BC 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000117C2                            
000117C2                            Obj51_Solid:				; XREF: Obj51_Index
000117C2 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000117C8 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000117CE 323C 001B                  		move.w	#$1B,d1
000117D2 343C 0010                  		move.w	#$10,d2
000117D6 363C 0011                  		move.w	#$11,d3
000117DA 3828 0008                  		move.w	8(a0),d4
000117DE 6100 FCBC                  		bsr.w	SolidObject
000117E2 0828 0003 0022             		btst	#3,$22(a0)
000117E8 6600                       		bne.s	Obj51_Smash
000117EA                            
000117EA                            locret_FCFC:
000117EA 4E75                       		rts	
000117EC                            ; ===========================================================================
000117EC                            
000117EC                            Obj51_Smash:				; XREF: Obj51_Solid
000117EC 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000117F2 66F6                       		bne.s	locret_FCFC	; if not, branch
000117F4 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000117FA 08E9 0002 0022             		bset	#2,$22(a1)
00011800 137C 000E 0016             		move.b	#$E,$16(a1)
00011806 137C 0007 0017             		move.b	#7,$17(a1)
0001180C 137C 0002 001C             		move.b	#2,$1C(a1)
00011812 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00011818 08E9 0001 0022             		bset	#1,$22(a1)
0001181E 08A9 0003 0022             		bclr	#3,$22(a1)
00011824 137C 0002 0024             		move.b	#2,$24(a1)
0001182A 08A8 0003 0022             		bclr	#3,$22(a0)
00011830 4228 0025                  		clr.b	$25(a0)
00011834 117C 0001 001A             		move.b	#1,$1A(a0)
0001183A 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00011840 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011842 343C 0038                  		move.w	#$38,d2
00011846 6100 CEE4                  		bsr.w	SmashObject
0001184A 6100 DA38                  		bsr.w	SingleObjLoad
0001184E 6600                       		bne.s	Obj51_Display
00011850 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011854 3368 0008 0008             		move.w	8(a0),8(a1)
0001185A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011860 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00011864 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00011868 0C42 0006                  		cmpi.w	#6,d2
0001186C 6500                       		bcs.s	Obj51_Bonus
0001186E 7406                       		moveq	#6,d2
00011870                            
00011870                            Obj51_Bonus:
00011870 7000                       		moveq	#0,d0
00011872 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00011876 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001187C 6500                       		bcs.s	loc_FD98	; if not, branch
0001187E 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011882 740A                       		moveq	#10,d2
00011884                            
00011884                            loc_FD98:
00011884 4EB9 0000 0000             		jsr	AddPoints
0001188A E24A                       		lsr.w	#1,d2
0001188C 1342 001A                  		move.b	d2,$1A(a1)
00011890                            
00011890                            Obj51_Display:				; XREF: Obj51_Index
00011890 6100 D282                  		bsr.w	SpeedToPos
00011894 0668 0038 0012             		addi.w	#$38,$12(a0)
0001189A 6100 D292                  		bsr.w	DisplaySprite
0001189E 4A28 0001                  		tst.b	1(a0)
000118A2 6A00 D2DA                  		bpl.w	DeleteObject
000118A6 4E75                       		rts	
000118A8                            ; ===========================================================================
000118A8 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000118AC FF00 FF00                  		dc.w $FF00, $FF00
000118B0 0200 FE00                  		dc.w $200, $FE00
000118B4 0100 FF00                  		dc.w $100, $FF00
000118B8                            
000118B8 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000118C0                            ; ---------------------------------------------------------------------------
000118C0                            ; Sprite mappings - smashable green block (MZ)
000118C0                            ; ---------------------------------------------------------------------------
000118C0                            Map_obj51:
000118C0                            	include "_maps\obj51.asm"
000118C0                            ; ---------------------------------------------------------------------------
000118C0                            ; Sprite mappings - smashable green block (MZ)
000118C0                            ; ---------------------------------------------------------------------------
000118C0 0000                       		dc.w byte_FDD8-Map_obj51
000118C2 0000                       		dc.w byte_FDE3-Map_obj51
000118C4 02                         byte_FDD8:	dc.b 2
000118C5 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000118CA 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000118CF 04                         byte_FDE3:	dc.b 4
000118D0 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000118D5 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000118DA F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000118DF 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000118E4                            		even
000118E4                            		even
000118E4                            
000118E4                            ; ===========================================================================
000118E4                            ; ---------------------------------------------------------------------------
000118E4                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000118E4                            ; ---------------------------------------------------------------------------
000118E4                            
000118E4                            Obj52:					; XREF: Obj_Index
000118E4 7000                       		moveq	#0,d0
000118E6 1028 0024                  		move.b	$24(a0),d0
000118EA 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000118EE 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000118F2                            ; ===========================================================================
000118F2 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000118F4 0000                       		dc.w Obj52_Platform-Obj52_Index
000118F6 0000                       		dc.w Obj52_StandOn-Obj52_Index
000118F8                            
000118F8 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000118FA 2001                       		dc.b $20, 1
000118FC 2002                       		dc.b $20, 2
000118FE 4003                       		dc.b $40, 3
00011900 3004                       		dc.b $30, 4
00011902                            ; ===========================================================================
00011902                            
00011902                            Obj52_Main:				; XREF: Obj52_Index
00011902 5428 0024                  		addq.b	#2,$24(a0)
00011906 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001190E 317C 42B8 0002             		move.w	#$42B8,2(a0)
00011914 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001191A 6600                       		bne.s	loc_FE44
0001191C 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00011924 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001192A 117C 0007 0016             		move.b	#7,$16(a0)
00011930                            
00011930                            loc_FE44:
00011930 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011936 6600                       		bne.s	loc_FE60
00011938 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001193E 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00011944 6700                       		beq.s	loc_FE60	; if yes, branch
00011946 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001194C                            
0001194C                            loc_FE60:
0001194C 117C 0004 0001             		move.b	#4,1(a0)
00011952 7000                       		moveq	#0,d0
00011954 1028 0028                  		move.b	$28(a0),d0
00011958 E648                       		lsr.w	#3,d0
0001195A 0240 001E                  		andi.w	#$1E,d0
0001195E 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00011962 115A 0019                  		move.b	(a2)+,$19(a0)
00011966 115A 001A                  		move.b	(a2)+,$1A(a0)
0001196A 117C 0004 0018             		move.b	#4,$18(a0)
00011970 3168 0008 0030             		move.w	8(a0),$30(a0)
00011976 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001197C 0228 000F 0028             		andi.b	#$F,$28(a0)
00011982                            
00011982                            Obj52_Platform:				; XREF: Obj52_Index
00011982 6100 0000                  		bsr.w	Obj52_Move
00011986 7200                       		moveq	#0,d1
00011988 1228 0019                  		move.b	$19(a0),d1
0001198C 4EB9 0000 856A             		jsr	(PlatformObject).l
00011992 6000                       		bra.s	Obj52_ChkDel
00011994                            ; ===========================================================================
00011994                            
00011994                            Obj52_StandOn:				; XREF: Obj52_Index
00011994 7200                       		moveq	#0,d1
00011996 1228 0019                  		move.b	$19(a0),d1
0001199A 4EB9 0000 86DE             		jsr	(ExitPlatform).l
000119A0 3F28 0008                  		move.w	8(a0),-(sp)
000119A4 6100 0000                  		bsr.w	Obj52_Move
000119A8 341F                       		move.w	(sp)+,d2
000119AA 4EB9 0000 8C54             		jsr	(MvSonicOnPtfm2).l
000119B0                            
000119B0                            Obj52_ChkDel:				; XREF: Obj52_Platform
000119B0 3028 0030                  		move.w	$30(a0),d0
000119B4 0240 FF80                  		andi.w	#$FF80,d0
000119B8 3238 F700                  		move.w	($FFFFF700).w,d1
000119BC 0441 0080                  		subi.w	#$80,d1
000119C0 0241 FF80                  		andi.w	#$FF80,d1
000119C4 9041                       		sub.w	d1,d0
000119C6 0C40 0280                  		cmpi.w	#$280,d0
000119CA 6300 D162                  		bls.w	DisplaySprite
000119CE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000119D2 6700 D1AA                  		beq.w	DeleteObject		; if it's zero, don't remember object
000119D6 3440                       		movea.w	d0,a2	; load address into a2
000119D8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000119DC 6000 D1A0                  		bra.w	DeleteObject	; and delete object
000119E0                            ; ===========================================================================
000119E0                            
000119E0                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000119E0 7000                       		moveq	#0,d0
000119E2 1028 0028                  		move.b	$28(a0),d0
000119E6 0240 000F                  		andi.w	#$F,d0
000119EA D040                       		add.w	d0,d0
000119EC 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000119F0 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000119F4                            ; ===========================================================================
000119F4 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000119F8 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000119FC 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00011A00 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00011A04 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00011A08 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00011A0A                            ; ===========================================================================
00011A0A                            
00011A0A                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00011A0A 4E75                       		rts	
00011A0C                            ; ===========================================================================
00011A0C                            
00011A0C                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00011A0C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011A10 323C 0060                  		move.w	#$60,d1
00011A14 0828 0000 0022             		btst	#0,$22(a0)
00011A1A 6700                       		beq.s	loc_FF26
00011A1C 4440                       		neg.w	d0
00011A1E D041                       		add.w	d1,d0
00011A20                            
00011A20                            loc_FF26:
00011A20 3228 0030                  		move.w	$30(a0),d1
00011A24 9240                       		sub.w	d0,d1
00011A26 3141 0008                  		move.w	d1,8(a0)
00011A2A 4E75                       		rts	
00011A2C                            ; ===========================================================================
00011A2C                            
00011A2C                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00011A2C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011A32 6600                       		bne.s	Obj52_02_Wait
00011A34 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011A38                            
00011A38                            Obj52_02_Wait:
00011A38 4E75                       		rts	
00011A3A                            ; ===========================================================================
00011A3A                            
00011A3A                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00011A3A 7600                       		moveq	#0,d3
00011A3C 1628 0019                  		move.b	$19(a0),d3
00011A40 6100 0000                  		bsr.w	ObjHitWallRight
00011A44 4A41                       		tst.w	d1		; has the platform hit a wall?
00011A46 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011A48 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011A4C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011A52 4E75                       		rts	
00011A54                            ; ===========================================================================
00011A54                            
00011A54                            Obj52_03_End:
00011A54 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00011A58 4E75                       		rts	
00011A5A                            ; ===========================================================================
00011A5A                            
00011A5A                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00011A5A 7600                       		moveq	#0,d3
00011A5C 1628 0019                  		move.b	$19(a0),d3
00011A60 6100 0000                  		bsr.w	ObjHitWallRight
00011A64 4A41                       		tst.w	d1		; has the platform hit a wall?
00011A66 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00011A68 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011A6C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011A72 4E75                       		rts	
00011A74                            ; ===========================================================================
00011A74                            
00011A74                            Obj52_05_End:
00011A74 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00011A78 4E75                       		rts	
00011A7A                            ; ===========================================================================
00011A7A                            
00011A7A                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00011A7A 6100 D098                  		bsr.w	SpeedToPos
00011A7E 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00011A84 6100 0000                  		bsr.w	ObjHitFloor
00011A88 4A41                       		tst.w	d1		; has platform hit the floor?
00011A8A 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00011A8E D368 000C                  		add.w	d1,$C(a0)
00011A92 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00011A96 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00011A9A                            
00011A9A                            locret_FFA0:
00011A9A 4E75                       		rts	
00011A9C                            ; ===========================================================================
00011A9C                            
00011A9C                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00011A9C 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00011AA0 6700                       		beq.s	Obj52_07_ChkDel
00011AA2 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00011AA6                            
00011AA6                            Obj52_07_ChkDel:
00011AA6 588F                       		addq.l	#4,sp
00011AA8 3028 0030                  		move.w	$30(a0),d0
00011AAC 0240 FF80                  		andi.w	#$FF80,d0
00011AB0 3238 F700                  		move.w	($FFFFF700).w,d1
00011AB4 0441 0080                  		subi.w	#$80,d1
00011AB8 0241 FF80                  		andi.w	#$FF80,d1
00011ABC 9041                       		sub.w	d1,d0
00011ABE 0C40 0280                  		cmpi.w	#$280,d0
00011AC2 6200 D0BA                  		bhi.w	DeleteObject
00011AC6 4E75                       		rts	
00011AC8                            ; ===========================================================================
00011AC8                            
00011AC8                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00011AC8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011ACC 323C 0080                  		move.w	#$80,d1
00011AD0 0828 0000 0022             		btst	#0,$22(a0)
00011AD6 6700                       		beq.s	loc_FFE2
00011AD8 4440                       		neg.w	d0
00011ADA D041                       		add.w	d1,d0
00011ADC                            
00011ADC                            loc_FFE2:
00011ADC 3228 0032                  		move.w	$32(a0),d1
00011AE0 9240                       		sub.w	d0,d1
00011AE2 3141 000C                  		move.w	d1,$C(a0)
00011AE6 4E75                       		rts	
00011AE8                            ; ===========================================================================
00011AE8                            
00011AE8                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00011AE8 7600                       		moveq	#0,d3
00011AEA 1628 0019                  		move.b	$19(a0),d3
00011AEE D643                       		add.w	d3,d3
00011AF0 7208                       		moveq	#8,d1
00011AF2 0828 0000 0022             		btst	#0,$22(a0)
00011AF8 6700                       		beq.s	loc_10004
00011AFA 4441                       		neg.w	d1
00011AFC 4443                       		neg.w	d3
00011AFE                            
00011AFE                            loc_10004:
00011AFE 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011B02 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011B04 3028 0008                  		move.w	8(a0),d0
00011B08 9068 0030                  		sub.w	$30(a0),d0
00011B0C B043                       		cmp.w	d3,d0
00011B0E 6700                       		beq.s	Obj52_0A_Wait
00011B10 D368 0008                  		add.w	d1,8(a0)	; move platform
00011B14 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011B1A 4E75                       		rts	
00011B1C                            ; ===========================================================================
00011B1C                            
00011B1C                            Obj52_0A_Wait:
00011B1C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011B20 6600                       		bne.s	locret_1002E	; if time remains, branch
00011B22 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011B28                            
00011B28                            locret_1002E:
00011B28 4E75                       		rts	
00011B2A                            ; ===========================================================================
00011B2A                            
00011B2A                            Obj52_0A_Back:
00011B2A 3028 0008                  		move.w	8(a0),d0
00011B2E 9068 0030                  		sub.w	$30(a0),d0
00011B32 6700                       		beq.s	Obj52_0A_Reset
00011B34 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011B38 4E75                       		rts	
00011B3A                            ; ===========================================================================
00011B3A                            
00011B3A                            Obj52_0A_Reset:
00011B3A 4268 0036                  		clr.w	$36(a0)
00011B3E 5328 0028                  		subq.b	#1,$28(a0)
00011B42 4E75                       		rts	
00011B44                            ; ===========================================================================
00011B44                            ; ---------------------------------------------------------------------------
00011B44                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011B44                            ; ---------------------------------------------------------------------------
00011B44                            Map_obj52:
00011B44                            	include "_maps\obj52mz.asm"
00011B44                            ; ---------------------------------------------------------------------------
00011B44                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011B44                            ; ---------------------------------------------------------------------------
00011B44 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011B48 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00011B4C 0000                       		dc.w byte_1008F-Map_obj52
00011B4E 01                         byte_10054:	dc.b 1
00011B4F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011B54 02                         byte_1005A:	dc.b 2
00011B55 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00011B5A F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00011B5F 04                         byte_10065:	dc.b 4
00011B60 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011B65 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00011B6A F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00011B6F 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011B74 04                         byte_1007A:	dc.b 4
00011B75 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00011B7A F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00011B7F F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00011B84 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00011B89 03                         byte_1008F:	dc.b 3
00011B8A F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00011B8F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011B94 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00011B9A 00                         		even
00011B9A 00                         		even
00011B9A                            
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            ; Sprite mappings - moving block (LZ)
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            Map_obj52a:
00011B9A                            	include "_maps\obj52lz.asm"
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            ; Sprite mappings - moving block (LZ)
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A 0000                       		dc.w byte_100A2-Map_obj52a
00011B9C 01                         byte_100A2:	dc.b 1
00011B9D F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00011BA2                            		even
00011BA2                            		even
00011BA2                            
00011BA2                            ; ===========================================================================
00011BA2                            ; ---------------------------------------------------------------------------
00011BA2                            ; Object 55 - Basaran enemy (MZ)
00011BA2                            ; ---------------------------------------------------------------------------
00011BA2                            
00011BA2                            Obj55:					; XREF: Obj_Index
00011BA2 7000                       		moveq	#0,d0
00011BA4 1028 0024                  		move.b	$24(a0),d0
00011BA8 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00011BAC 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00011BB0                            ; ===========================================================================
00011BB0 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011BB2 0000                       		dc.w Obj55_Action-Obj55_Index
00011BB4                            ; ===========================================================================
00011BB4                            
00011BB4                            Obj55_Main:				; XREF: Obj55_Index
00011BB4 5428 0024                  		addq.b	#2,$24(a0)
00011BB8 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00011BC0 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011BC6 117C 0004 0001             		move.b	#4,1(a0)
00011BCC 117C 000C 0016             		move.b	#$C,$16(a0)
00011BD2 117C 0002 0018             		move.b	#2,$18(a0)
00011BD8 117C 000B 0020             		move.b	#$B,$20(a0)
00011BDE 117C 0010 0019             		move.b	#$10,$19(a0)
00011BE4                            
00011BE4                            Obj55_Action:				; XREF: Obj55_Index
00011BE4 7000                       		moveq	#0,d0
00011BE6 1028 0025                  		move.b	$25(a0),d0
00011BEA 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00011BEE 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00011BF2 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00011BF8 6100 9F94                  		bsr.w	AnimateSprite
00011BFC 6000 F57A                  		bra.w	MarkObjGone
00011C00                            ; ===========================================================================
00011C00 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011C02 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011C04 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011C06 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011C08                            ; ===========================================================================
00011C08                            
00011C08                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011C08 343C 0080                  		move.w	#$80,d2
00011C0C 6100 0000                  		bsr.w	Obj55_ChkSonic
00011C10 6400                       		bcc.s	Obj55_NoDrop
00011C12 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011C16 3140 0036                  		move.w	d0,$36(a0)
00011C1A 9068 000C                  		sub.w	$C(a0),d0
00011C1E 6500                       		bcs.s	Obj55_NoDrop
00011C20 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011C24 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011C26 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011C2A 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011C2C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011C30 D007                       		add.b	d7,d0
00011C32 0200 0007                  		andi.b	#7,d0
00011C36 6600                       		bne.s	Obj55_NoDrop
00011C38 117C 0001 001C             		move.b	#1,$1C(a0)
00011C3E 5428 0025                  		addq.b	#2,$25(a0)
00011C42                            
00011C42                            Obj55_NoDrop:
00011C42 4E75                       		rts	
00011C44                            ; ===========================================================================
00011C44                            
00011C44                            Obj55_DropFly:				; XREF: Obj55_Index2
00011C44 6100 CECE                  		bsr.w	SpeedToPos
00011C48 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00011C4E 343C 0080                  		move.w	#$80,d2
00011C52 6100 0000                  		bsr.w	Obj55_ChkSonic
00011C56 3028 0036                  		move.w	$36(a0),d0
00011C5A 9068 000C                  		sub.w	$C(a0),d0
00011C5E 6500                       		bcs.s	Obj55_ChkDel
00011C60 0C40 0010                  		cmpi.w	#$10,d0
00011C64 6400                       		bcc.s	locret_10180
00011C66 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00011C6A 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011C70 117C 0002 001C             		move.b	#2,$1C(a0)
00011C76 5428 0025                  		addq.b	#2,$25(a0)
00011C7A                            
00011C7A                            locret_10180:
00011C7A 4E75                       		rts	
00011C7C                            ; ===========================================================================
00011C7C                            
00011C7C                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00011C7C 4A28 0001                  		tst.b	1(a0)
00011C80 6A00 CEFC                  		bpl.w	DeleteObject
00011C84 4E75                       		rts	
00011C86                            ; ===========================================================================
00011C86                            
00011C86                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011C86 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011C8A 0200 000F                  		andi.b	#$F,d0
00011C8E 6600                       		bne.s	loc_101A0
00011C90 303C 00C0                  		move.w	#$C0,d0
00011C94 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play flapping sound
00011C9A                            
00011C9A                            loc_101A0:
00011C9A 6100 CE78                  		bsr.w	SpeedToPos
00011C9E 3038 D008                  		move.w	($FFFFD008).w,d0
00011CA2 9068 0008                  		sub.w	8(a0),d0
00011CA6 6400                       		bcc.s	loc_101B0
00011CA8 4440                       		neg.w	d0
00011CAA                            
00011CAA                            loc_101B0:
00011CAA 0C40 0080                  		cmpi.w	#$80,d0
00011CAE 6500                       		bcs.s	locret_101C6
00011CB0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011CB4 D007                       		add.b	d7,d0
00011CB6 0200 0007                  		andi.b	#7,d0
00011CBA 6600                       		bne.s	locret_101C6
00011CBC 5428 0025                  		addq.b	#2,$25(a0)
00011CC0                            
00011CC0                            locret_101C6:
00011CC0 4E75                       		rts	
00011CC2                            ; ===========================================================================
00011CC2                            
00011CC2                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011CC2 6100 CE50                  		bsr.w	SpeedToPos
00011CC6 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011CCC 6100 0000                  		bsr.w	ObjHitCeiling
00011CD0 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011CD2 6A00                       		bpl.s	locret_101F4	; if not, branch
00011CD4 9368 000C                  		sub.w	d1,$C(a0)
00011CD8 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011CDE 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011CE2 4268 0012                  		clr.w	$12(a0)
00011CE6 4228 001C                  		clr.b	$1C(a0)
00011CEA 4228 0025                  		clr.b	$25(a0)
00011CEE                            
00011CEE                            locret_101F4:
00011CEE 4E75                       		rts	
00011CF0                            ; ===========================================================================
00011CF0                            
00011CF0                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011CF0 323C 0100                  		move.w	#$100,d1
00011CF4 08E8 0000 0022             		bset	#0,$22(a0)
00011CFA 3038 D008                  		move.w	($FFFFD008).w,d0
00011CFE 9068 0008                  		sub.w	8(a0),d0
00011D02 6400                       		bcc.s	loc_10214
00011D04 4440                       		neg.w	d0
00011D06 4441                       		neg.w	d1
00011D08 08A8 0000 0022             		bclr	#0,$22(a0)
00011D0E                            
00011D0E                            loc_10214:
00011D0E B042                       		cmp.w	d2,d0
00011D10 4E75                       		rts	
00011D12                            ; ===========================================================================
00011D12 6100 CE00                  		bsr.w	SpeedToPos
00011D16 6100 CE16                  		bsr.w	DisplaySprite
00011D1A 4A28 0001                  		tst.b	1(a0)
00011D1E 6A00 CE5E                  		bpl.w	DeleteObject
00011D22 4E75                       		rts	
00011D24                            ; ===========================================================================
00011D24                            Ani_obj55:
00011D24                            	include "_anim\obj55.asm"
00011D24                            ; ---------------------------------------------------------------------------
00011D24                            ; Animation script - Basaran enemy
00011D24                            ; ---------------------------------------------------------------------------
00011D24 0000                       		dc.w byte_10230-Ani_obj55
00011D26 0000                       		dc.w byte_10234-Ani_obj55
00011D28 0000                       		dc.w byte_10238-Ani_obj55
00011D2A 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011D2E 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011D32 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011D38                            		even
00011D38                            		even
00011D38                            
00011D38                            ; ---------------------------------------------------------------------------
00011D38                            ; Sprite mappings - Basaran enemy (MZ)
00011D38                            ; ---------------------------------------------------------------------------
00011D38                            Map_obj55:
00011D38                            	include "_maps\obj55.asm"
00011D38                            ; ---------------------------------------------------------------------------
00011D38                            ; Sprite mappings - Basaran enemy (MZ)
00011D38                            ; ---------------------------------------------------------------------------
00011D38 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011D3C 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011D40 01                         byte_10246:	dc.b 1
00011D41 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011D46 03                         byte_1024C:	dc.b 3
00011D47 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011D4C 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011D51 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011D56 04                         byte_1025C:	dc.b 4
00011D57 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011D5C 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011D61 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011D66 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011D6B 04                         byte_10271:	dc.b 4
00011D6C F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011D71 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011D76 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011D7B FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011D80                            		even
00011D80                            		even
00011D80                            
00011D80                            ; ===========================================================================
00011D80                            ; ---------------------------------------------------------------------------
00011D80                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011D80                            ; ---------------------------------------------------------------------------
00011D80                            
00011D80                            Obj56:					; XREF: Obj_Index
00011D80 7000                       		moveq	#0,d0
00011D82 1028 0024                  		move.b	$24(a0),d0
00011D86 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011D8A 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011D8E                            ; ===========================================================================
00011D8E 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011D90 0000                       		dc.w Obj56_Action-Obj56_Index
00011D92                            
00011D92 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011D94 2020                       		dc.b  $20, $20
00011D96 1020                       		dc.b  $10, $20
00011D98 201A                       		dc.b  $20, $1A
00011D9A 1027                       		dc.b  $10, $27
00011D9C 1010                       		dc.b  $10, $10
00011D9E 0820                       		dc.b	8, $20
00011DA0 4010                       		dc.b  $40, $10
00011DA2                            ; ===========================================================================
00011DA2                            
00011DA2                            Obj56_Main:				; XREF: Obj56_Index
00011DA2 5428 0024                  		addq.b	#2,$24(a0)
00011DA6 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011DAE 317C 4000 0002             		move.w	#$4000,2(a0)
00011DB4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011DBA 6600                       		bne.s	loc_102C8
00011DBC 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011DC2                            
00011DC2                            loc_102C8:
00011DC2 117C 0004 0001             		move.b	#4,1(a0)
00011DC8 117C 0003 0018             		move.b	#3,$18(a0)
00011DCE 7000                       		moveq	#0,d0
00011DD0 1028 0028                  		move.b	$28(a0),d0
00011DD4 E648                       		lsr.w	#3,d0
00011DD6 0240 000E                  		andi.w	#$E,d0
00011DDA 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011DDE 115A 0019                  		move.b	(a2)+,$19(a0)
00011DE2 1152 0016                  		move.b	(a2),$16(a0)
00011DE6 E248                       		lsr.w	#1,d0
00011DE8 1140 001A                  		move.b	d0,$1A(a0)
00011DEC 3168 0008 0034             		move.w	8(a0),$34(a0)
00011DF2 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011DF8 7000                       		moveq	#0,d0
00011DFA 1012                       		move.b	(a2),d0
00011DFC D040                       		add.w	d0,d0
00011DFE 3140 003A                  		move.w	d0,$3A(a0)
00011E02 7000                       		moveq	#0,d0
00011E04 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011E0A 6700                       		beq.s	loc_10332
00011E0C 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011E10 0240 000F                  		andi.w	#$F,d0
00011E14 5140                       		subq.w	#8,d0
00011E16 6500                       		bcs.s	loc_10332
00011E18 E548                       		lsl.w	#2,d0
00011E1A 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011E1E 45F2 0000                  		lea	(a2,d0.w),a2
00011E22 4A52                       		tst.w	(a2)
00011E24 6A00                       		bpl.s	loc_10332
00011E26 0868 0000 0022             		bchg	#0,$22(a0)
00011E2C                            
00011E2C                            loc_10332:
00011E2C 1028 0028                  		move.b	$28(a0),d0
00011E30 6A00                       		bpl.s	Obj56_Action
00011E32 0200 000F                  		andi.b	#$F,d0
00011E36 1140 003C                  		move.b	d0,$3C(a0)
00011E3A 117C 0005 0028             		move.b	#5,$28(a0)
00011E40 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011E46 6600                       		bne.s	Obj56_ChkGone
00011E48 117C 000C 0028             		move.b	#$C,$28(a0)
00011E4E 317C 0080 003A             		move.w	#$80,$3A(a0)
00011E54                            
00011E54                            Obj56_ChkGone:
00011E54 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011E58 6700                       		beq.s	Obj56_Action		; if it's zero, don't remember object
00011E5A 3440                       		movea.w	d0,a2	; load address into a2
00011E5C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00011E60 0812 0000                  		btst	#0,(a2)
00011E64 6700                       		beq.s	Obj56_Action
00011E66 5228 0028                  		addq.b	#1,$28(a0)
00011E6A 4268 003A                  		clr.w	$3A(a0)
00011E6E                            
00011E6E                            Obj56_Action:				; XREF: Obj56_Index
00011E6E 3F28 0008                  		move.w	8(a0),-(sp)
00011E72 7000                       		moveq	#0,d0
00011E74 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E78 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011E7C D040                       		add.w	d0,d0
00011E7E 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011E82 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011E86 381F                       		move.w	(sp)+,d4
00011E88 4A28 0001                  		tst.b	1(a0)
00011E8C 6A00                       		bpl.s	Obj56_ChkDel
00011E8E 7200                       		moveq	#0,d1
00011E90 1228 0019                  		move.b	$19(a0),d1
00011E94 0641 000B                  		addi.w	#$B,d1
00011E98 7400                       		moveq	#0,d2
00011E9A 1428 0016                  		move.b	$16(a0),d2
00011E9E 3602                       		move.w	d2,d3
00011EA0 5243                       		addq.w	#1,d3
00011EA2 6100 F5F8                  		bsr.w	SolidObject
00011EA6                            
00011EA6                            Obj56_ChkDel:
00011EA6 3028 0034                  		move.w	$34(a0),d0
00011EAA 0240 FF80                  		andi.w	#$FF80,d0
00011EAE 3238 F700                  		move.w	($FFFFF700).w,d1
00011EB2 0441 0080                  		subi.w	#$80,d1
00011EB6 0241 FF80                  		andi.w	#$FF80,d1
00011EBA 9041                       		sub.w	d1,d0
00011EBC 0C40 0280                  		cmpi.w	#$280,d0
00011EC0 6300 CC6C                  		bls.w	DisplaySprite
00011EC4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011EC8 6700 CCB4                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00011ECC 3440                       		movea.w	d0,a2	; load address into a2
00011ECE 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00011ED2 6000 CCAA                  		bra.w	DeleteObject
00011ED6                            ; ===========================================================================
00011ED6 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011EDA 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011EDE 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011EE2 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011EE6 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011EEA 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011EEE 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011EF2                            ; ===========================================================================
00011EF2                            
00011EF2                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011EF2 4E75                       		rts	
00011EF4                            ; ===========================================================================
00011EF4                            
00011EF4                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011EF4 323C 0040                  		move.w	#$40,d1
00011EF8 7000                       		moveq	#0,d0
00011EFA 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011EFE 6000                       		bra.s	Obj56_Move_LR
00011F00                            ; ===========================================================================
00011F00                            
00011F00                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011F00 323C 0080                  		move.w	#$80,d1
00011F04 7000                       		moveq	#0,d0
00011F06 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011F0A                            
00011F0A                            Obj56_Move_LR:
00011F0A 0828 0000 0022             		btst	#0,$22(a0)
00011F10 6700                       		beq.s	loc_10416
00011F12 4440                       		neg.w	d0
00011F14 D041                       		add.w	d1,d0
00011F16                            
00011F16                            loc_10416:
00011F16 3228 0034                  		move.w	$34(a0),d1
00011F1A 9240                       		sub.w	d0,d1
00011F1C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011F20 4E75                       		rts	
00011F22                            ; ===========================================================================
00011F22                            
00011F22                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011F22 323C 0040                  		move.w	#$40,d1
00011F26 7000                       		moveq	#0,d0
00011F28 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011F2C 6000                       		bra.s	Obj56_Move_UD
00011F2E                            ; ===========================================================================
00011F2E                            
00011F2E                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011F2E 323C 0080                  		move.w	#$80,d1
00011F32 7000                       		moveq	#0,d0
00011F34 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011F38                            
00011F38                            Obj56_Move_UD:
00011F38 0828 0000 0022             		btst	#0,$22(a0)
00011F3E 6700                       		beq.s	loc_10444
00011F40 4440                       		neg.w	d0
00011F42 D041                       		add.w	d1,d0
00011F44                            
00011F44                            loc_10444:
00011F44 3228 0030                  		move.w	$30(a0),d1
00011F48 9240                       		sub.w	d0,d1
00011F4A 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011F4E 4E75                       		rts	
00011F50                            ; ===========================================================================
00011F50                            
00011F50                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011F50 4A28 0038                  		tst.b	$38(a0)
00011F54 6600                       		bne.s	loc_104A4
00011F56 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011F5C 6600                       		bne.s	loc_1047A	; if not, branch
00011F5E 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00011F64 6600                       		bne.s	loc_1047A
00011F66 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011F6A 3038 D008                  		move.w	($FFFFD008).w,d0
00011F6E B068 0008                  		cmp.w	8(a0),d0
00011F72 6400                       		bcc.s	loc_1047A
00011F74 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00011F7A                            
00011F7A                            loc_1047A:
00011F7A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011F7E 7000                       		moveq	#0,d0
00011F80 1028 003C                  		move.b	$3C(a0),d0
00011F84 0832 0000 0000             		btst	#0,(a2,d0.w)
00011F8A 6700                       		beq.s	loc_104AE
00011F8C 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011F92 6600                       		bne.s	loc_1049E	; if not, branch
00011F94 0C00 0003                  		cmpi.b	#3,d0
00011F98 6600                       		bne.s	loc_1049E
00011F9A 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011F9E                            
00011F9E                            loc_1049E:
00011F9E 117C 0001 0038             		move.b	#1,$38(a0)
00011FA4                            
00011FA4                            loc_104A4:
00011FA4 4A68 003A                  		tst.w	$3A(a0)
00011FA8 6700                       		beq.s	loc_104C8
00011FAA 5568 003A                  		subq.w	#2,$3A(a0)
00011FAE                            
00011FAE                            loc_104AE:
00011FAE 3028 003A                  		move.w	$3A(a0),d0
00011FB2 0828 0000 0022             		btst	#0,$22(a0)
00011FB8 6700                       		beq.s	loc_104BC
00011FBA 4440                       		neg.w	d0
00011FBC                            
00011FBC                            loc_104BC:
00011FBC 3228 0030                  		move.w	$30(a0),d1
00011FC0 D240                       		add.w	d0,d1
00011FC2 3141 000C                  		move.w	d1,$C(a0)
00011FC6 4E75                       		rts	
00011FC8                            ; ===========================================================================
00011FC8                            
00011FC8                            loc_104C8:
00011FC8 5228 0028                  		addq.b	#1,$28(a0)
00011FCC 4228 0038                  		clr.b	$38(a0)
00011FD0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011FD4 67D8                       		beq.s	loc_104AE		; if it's zero, don't remember object
00011FD6 3440                       		movea.w	d0,a2	; load address into a2
00011FD8 08D2 0000                  		bset	#0,(a2)
00011FDC 60D0                       		bra.s	loc_104AE
00011FDE                            ; ===========================================================================
00011FDE                            
00011FDE                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011FDE 4A28 0038                  		tst.b	$38(a0)
00011FE2 6600                       		bne.s	loc_10500
00011FE4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011FE8 7000                       		moveq	#0,d0
00011FEA 1028 003C                  		move.b	$3C(a0),d0
00011FEE 4A32 0000                  		tst.b	(a2,d0.w)
00011FF2 6A00                       		bpl.s	loc_10512
00011FF4 117C 0001 0038             		move.b	#1,$38(a0)
00011FFA                            
00011FFA                            loc_10500:
00011FFA 7000                       		moveq	#0,d0
00011FFC 1028 0016                  		move.b	$16(a0),d0
00012000 D040                       		add.w	d0,d0
00012002 B068 003A                  		cmp.w	$3A(a0),d0
00012006 6700                       		beq.s	loc_1052C
00012008 5468 003A                  		addq.w	#2,$3A(a0)
0001200C                            
0001200C                            loc_10512:
0001200C 3028 003A                  		move.w	$3A(a0),d0
00012010 0828 0000 0022             		btst	#0,$22(a0)
00012016 6700                       		beq.s	loc_10520
00012018 4440                       		neg.w	d0
0001201A                            
0001201A                            loc_10520:
0001201A 3228 0030                  		move.w	$30(a0),d1
0001201E D240                       		add.w	d0,d1
00012020 3141 000C                  		move.w	d1,$C(a0)
00012024 4E75                       		rts	
00012026                            ; ===========================================================================
00012026                            
00012026                            loc_1052C:
00012026 5328 0028                  		subq.b	#1,$28(a0)
0001202A 4228 0038                  		clr.b	$38(a0)
0001202E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012032 67D8                       		beq.s	loc_10512		; if it's zero, don't remember object
00012034 3440                       		movea.w	d0,a2	; load address into a2
00012036 0892 0000                  		bclr	#0,(a2)
0001203A 60D0                       		bra.s	loc_10512
0001203C                            ; ===========================================================================
0001203C                            
0001203C                            Obj56_Type07:				; XREF: Obj56_TypeIndex
0001203C 4A28 0038                  		tst.b	$38(a0)
00012040 6600                       		bne.s	loc_1055E
00012042 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00012046 6700                       		beq.s	locret_10578
00012048 117C 0001 0038             		move.b	#1,$38(a0)
0001204E 4268 003A                  		clr.w	$3A(a0)
00012052                            
00012052                            loc_1055E:
00012052 5268 0008                  		addq.w	#1,8(a0)
00012056 3168 0008 0034             		move.w	8(a0),$34(a0)
0001205C 5268 003A                  		addq.w	#1,$3A(a0)
00012060 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00012066 6600                       		bne.s	locret_10578
00012068 4228 0028                  		clr.b	$28(a0)
0001206C                            
0001206C                            locret_10578:
0001206C 4E75                       		rts	
0001206E                            ; ===========================================================================
0001206E                            
0001206E                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
0001206E 4A28 0038                  		tst.b	$38(a0)
00012072 6600                       		bne.s	loc_10598
00012074 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00012078 7000                       		moveq	#0,d0
0001207A 1028 003C                  		move.b	$3C(a0),d0
0001207E 0832 0000 0000             		btst	#0,(a2,d0.w)
00012084 6700                       		beq.s	loc_105A2
00012086 117C 0001 0038             		move.b	#1,$38(a0)
0001208C                            
0001208C                            loc_10598:
0001208C 4A68 003A                  		tst.w	$3A(a0)
00012090 6700                       		beq.s	loc_105C0
00012092 5568 003A                  		subq.w	#2,$3A(a0)
00012096                            
00012096                            loc_105A2:
00012096 3028 003A                  		move.w	$3A(a0),d0
0001209A 0828 0000 0022             		btst	#0,$22(a0)
000120A0 6700                       		beq.s	loc_105B4
000120A2 4440                       		neg.w	d0
000120A4 0640 0080                  		addi.w	#$80,d0
000120A8                            
000120A8                            loc_105B4:
000120A8 3228 0034                  		move.w	$34(a0),d1
000120AC D240                       		add.w	d0,d1
000120AE 3141 0008                  		move.w	d1,8(a0)
000120B2 4E75                       		rts	
000120B4                            ; ===========================================================================
000120B4                            
000120B4                            loc_105C0:
000120B4 5228 0028                  		addq.b	#1,$28(a0)
000120B8 4228 0038                  		clr.b	$38(a0)
000120BC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000120C0 67D4                       		beq.s	loc_105A2		; if it's zero, don't remember object
000120C2 3440                       		movea.w	d0,a2	; load address into a2
000120C4 08D2 0000                  		bset	#0,(a2)
000120C8 60CC                       		bra.s	loc_105A2
000120CA                            ; ===========================================================================
000120CA                            
000120CA                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
000120CA 4A28 0038                  		tst.b	$38(a0)
000120CE 6600                       		bne.s	loc_105F8
000120D0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000120D4 7000                       		moveq	#0,d0
000120D6 1028 003C                  		move.b	$3C(a0),d0
000120DA 4A32 0000                  		tst.b	(a2,d0.w)
000120DE 6A00                       		bpl.s	loc_10606
000120E0 117C 0001 0038             		move.b	#1,$38(a0)
000120E6                            
000120E6                            loc_105F8:
000120E6 303C 0080                  		move.w	#$80,d0
000120EA B068 003A                  		cmp.w	$3A(a0),d0
000120EE 6700                       		beq.s	loc_10624
000120F0 5468 003A                  		addq.w	#2,$3A(a0)
000120F4                            
000120F4                            loc_10606:
000120F4 3028 003A                  		move.w	$3A(a0),d0
000120F8 0828 0000 0022             		btst	#0,$22(a0)
000120FE 6700                       		beq.s	loc_10618
00012100 4440                       		neg.w	d0
00012102 0640 0080                  		addi.w	#$80,d0
00012106                            
00012106                            loc_10618:
00012106 3228 0034                  		move.w	$34(a0),d1
0001210A D240                       		add.w	d0,d1
0001210C 3141 0008                  		move.w	d1,8(a0)
00012110 4E75                       		rts	
00012112                            ; ===========================================================================
00012112                            
00012112                            loc_10624:
00012112 5328 0028                  		subq.b	#1,$28(a0)
00012116 4228 0038                  		clr.b	$38(a0)
0001211A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001211E 67D4                       		beq.s	loc_10606		; if it's zero, don't remember object
00012120 3440                       		movea.w	d0,a2	; load address into a2
00012122 0892 0000                  		bclr	#0,(a2)
00012126 60CC                       		bra.s	loc_10606
00012128                            ; ===========================================================================
00012128                            
00012128                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00012128 323C 0010                  		move.w	#$10,d1
0001212C 7000                       		moveq	#0,d0
0001212E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00012132 E248                       		lsr.w	#1,d0
00012134 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00012138 6000                       		bra.s	Obj56_Move_Sqr
0001213A                            ; ===========================================================================
0001213A                            
0001213A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001213A 323C 0030                  		move.w	#$30,d1
0001213E 7000                       		moveq	#0,d0
00012140 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00012144 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00012148 6000                       		bra.s	Obj56_Move_Sqr
0001214A                            ; ===========================================================================
0001214A                            
0001214A                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001214A 323C 0050                  		move.w	#$50,d1
0001214E 7000                       		moveq	#0,d0
00012150 1038 FE90                  		move.b	($FFFFFE90).w,d0
00012154 3638 FE92                  		move.w	($FFFFFE92).w,d3
00012158 6000                       		bra.s	Obj56_Move_Sqr
0001215A                            ; ===========================================================================
0001215A                            
0001215A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0001215A 323C 0070                  		move.w	#$70,d1
0001215E 7000                       		moveq	#0,d0
00012160 1038 FE94                  		move.b	($FFFFFE94).w,d0
00012164 3638 FE96                  		move.w	($FFFFFE96).w,d3
00012168                            
00012168                            Obj56_Move_Sqr:
00012168 4A43                       		tst.w	d3
0001216A 6600                       		bne.s	loc_1068E
0001216C 5228 0022                  		addq.b	#1,$22(a0)
00012170 0228 0003 0022             		andi.b	#3,$22(a0)
00012176                            
00012176                            loc_1068E:
00012176 1428 0022                  		move.b	$22(a0),d2
0001217A 0202 0003                  		andi.b	#3,d2
0001217E 6600                       		bne.s	loc_106AE
00012180 9041                       		sub.w	d1,d0
00012182 D068 0034                  		add.w	$34(a0),d0
00012186 3140 0008                  		move.w	d0,8(a0)
0001218A 4441                       		neg.w	d1
0001218C D268 0030                  		add.w	$30(a0),d1
00012190 3141 000C                  		move.w	d1,$C(a0)
00012194 4E75                       		rts	
00012196                            ; ===========================================================================
00012196                            
00012196                            loc_106AE:
00012196 5302                       		subq.b	#1,d2
00012198 6600                       		bne.s	loc_106CC
0001219A 5341                       		subq.w	#1,d1
0001219C 9041                       		sub.w	d1,d0
0001219E 4440                       		neg.w	d0
000121A0 D068 0030                  		add.w	$30(a0),d0
000121A4 3140 000C                  		move.w	d0,$C(a0)
000121A8 5241                       		addq.w	#1,d1
000121AA D268 0034                  		add.w	$34(a0),d1
000121AE 3141 0008                  		move.w	d1,8(a0)
000121B2 4E75                       		rts	
000121B4                            ; ===========================================================================
000121B4                            
000121B4                            loc_106CC:
000121B4 5302                       		subq.b	#1,d2
000121B6 6600                       		bne.s	loc_106EA
000121B8 5341                       		subq.w	#1,d1
000121BA 9041                       		sub.w	d1,d0
000121BC 4440                       		neg.w	d0
000121BE D068 0034                  		add.w	$34(a0),d0
000121C2 3140 0008                  		move.w	d0,8(a0)
000121C6 5241                       		addq.w	#1,d1
000121C8 D268 0030                  		add.w	$30(a0),d1
000121CC 3141 000C                  		move.w	d1,$C(a0)
000121D0 4E75                       		rts	
000121D2                            ; ===========================================================================
000121D2                            
000121D2                            loc_106EA:
000121D2 9041                       		sub.w	d1,d0
000121D4 D068 0030                  		add.w	$30(a0),d0
000121D8 3140 000C                  		move.w	d0,$C(a0)
000121DC 4441                       		neg.w	d1
000121DE D268 0034                  		add.w	$34(a0),d1
000121E2 3141 0008                  		move.w	d1,8(a0)
000121E6 4E75                       		rts	
000121E8                            ; ===========================================================================
000121E8                            ; ---------------------------------------------------------------------------
000121E8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000121E8                            ; ---------------------------------------------------------------------------
000121E8                            Map_obj56:
000121E8                            	include "_maps\obj56.asm"
000121E8                            ; ---------------------------------------------------------------------------
000121E8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000121E8                            ; ---------------------------------------------------------------------------
000121E8 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000121EC 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000121F0 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000121F4 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000121F8 01                         byte_10710:	dc.b 1
000121F9 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000121FE 04                         byte_10716:	dc.b 4
000121FF E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00012204 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012209 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001220E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012213 02                         byte_1072B:	dc.b 2
00012214 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00012219 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001221E 04                         byte_10736:	dc.b 4
0001221F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00012224 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012229 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001222E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012233 03                         byte_1074B:	dc.b 3
00012234 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00012239 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001223E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012243 01                         byte_1075B:	dc.b 1
00012244 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012249 02                         byte_10761:	dc.b 2
0001224A E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001224F 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012254 04                         byte_1076C:	dc.b 4
00012255 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001225A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001225F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012264 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001226A 00                         		even
0001226A 00                         		even
0001226A                            
0001226A                            ; ===========================================================================
0001226A                            ; ---------------------------------------------------------------------------
0001226A                            ; Object 57 - spiked balls (SYZ, LZ)
0001226A                            ; ---------------------------------------------------------------------------
0001226A                            
0001226A                            Obj57:					; XREF: Obj_Index
0001226A 7000                       		moveq	#0,d0
0001226C 1028 0024                  		move.b	$24(a0),d0
00012270 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00012274 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00012278                            ; ===========================================================================
00012278 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001227A 0000                       		dc.w Obj57_Move-Obj57_Index
0001227C 0000                       		dc.w Obj57_Display-Obj57_Index
0001227E                            ; ===========================================================================
0001227E                            
0001227E                            Obj57_Main:				; XREF: Obj57_Index
0001227E 5428 0024                  		addq.b	#2,$24(a0)
00012282 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001228A 317C 03BA 0002             		move.w	#$3BA,2(a0)
00012290 117C 0004 0001             		move.b	#4,1(a0)
00012296 117C 0004 0018             		move.b	#4,$18(a0)
0001229C 117C 0008 0019             		move.b	#8,$19(a0)
000122A2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000122A8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000122AE 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000122B4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000122BA 6600                       		bne.s	loc_107E8
000122BC 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000122C2 317C 0310 0002             		move.w	#$310,2(a0)
000122C8 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000122D0                            
000122D0                            loc_107E8:
000122D0 1228 0028                  		move.b	$28(a0),d1	; get object type
000122D4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000122D8 4881                       		ext.w	d1
000122DA E741                       		asl.w	#3,d1		; multiply by 8
000122DC 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000122E0 1028 0022                  		move.b	$22(a0),d0
000122E4 E418                       		ror.b	#2,d0
000122E6 0200 00C0                  		andi.b	#-$40,d0
000122EA 1140 0026                  		move.b	d0,$26(a0)
000122EE 45E8 0029                  		lea	$29(a0),a2
000122F2 1228 0028                  		move.b	$28(a0),d1	; get object type
000122F6 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000122FA 14FC 0000                  		move.b	#0,(a2)+
000122FE 3601                       		move.w	d1,d3
00012300 E94B                       		lsl.w	#4,d3
00012302 1143 003C                  		move.b	d3,$3C(a0)
00012306 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012308 6500                       		bcs.s	loc_10894
0001230A 0828 0003 0028             		btst	#3,$28(a0)
00012310 6700                       		beq.s	Obj57_MakeChain
00012312 5341                       		subq.w	#1,d1
00012314 6500                       		bcs.s	loc_10894
00012316                            
00012316                            Obj57_MakeChain:
00012316 6100 CF6C                  		bsr.w	SingleObjLoad
0001231A 6600                       		bne.s	loc_10894
0001231C 5228 0029                  		addq.b	#1,$29(a0)
00012320 3A09                       		move.w	a1,d5
00012322 0445 D000                  		subi.w	#-$3000,d5
00012326 EC4D                       		lsr.w	#6,d5
00012328 0245 007F                  		andi.w	#$7F,d5
0001232C 14C5                       		move.b	d5,(a2)+
0001232E 137C 0004 0024             		move.b	#4,$24(a1)
00012334 1290                       		move.b	0(a0),0(a1)
00012336 2368 0004 0004             		move.l	4(a0),4(a1)
0001233C 3368 0002 0002             		move.w	2(a0),2(a1)
00012342 1368 0001 0001             		move.b	1(a0),1(a1)
00012348 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001234E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00012354 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001235A 0403 0010                  		subi.b	#$10,d3
0001235E 1343 003C                  		move.b	d3,$3C(a1)
00012362 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00012368 6600                       		bne.s	loc_10890
0001236A 4A03                       		tst.b	d3
0001236C 6600                       		bne.s	loc_10890
0001236E 137C 0002 001A             		move.b	#2,$1A(a1)
00012374                            
00012374                            loc_10890:
00012374 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00012378                            
00012378                            loc_10894:
00012378 3A08                       		move.w	a0,d5
0001237A 0445 D000                  		subi.w	#-$3000,d5
0001237E EC4D                       		lsr.w	#6,d5
00012380 0245 007F                  		andi.w	#$7F,d5
00012384 14C5                       		move.b	d5,(a2)+
00012386 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001238C 6600                       		bne.s	Obj57_Move
0001238E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00012394 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001239A                            
0001239A                            Obj57_Move:				; XREF: Obj57_Index
0001239A 6100 0000                  		bsr.w	Obj57_MoveSub
0001239E 6000 0000                  		bra.w	Obj57_ChkDel
000123A2                            ; ===========================================================================
000123A2                            
000123A2                            Obj57_MoveSub:				; XREF: Obj57_Move
000123A2 3028 003E                  		move.w	$3E(a0),d0
000123A6 D168 0026                  		add.w	d0,$26(a0)
000123AA 1028 0026                  		move.b	$26(a0),d0
000123AE 4EB9 0000 29F6             		jsr	(CalcSine).l
000123B4 3428 0038                  		move.w	$38(a0),d2
000123B8 3628 003A                  		move.w	$3A(a0),d3
000123BC 45E8 0029                  		lea	$29(a0),a2
000123C0 7C00                       		moveq	#0,d6
000123C2 1C1A                       		move.b	(a2)+,d6
000123C4                            
000123C4                            Obj57_MoveLoop:
000123C4 7800                       		moveq	#0,d4
000123C6 181A                       		move.b	(a2)+,d4
000123C8 ED4C                       		lsl.w	#6,d4
000123CA 0684 00FF D000             		addi.l	#$FFD000,d4
000123D0 2244                       		movea.l	d4,a1
000123D2 7800                       		moveq	#0,d4
000123D4 1829 003C                  		move.b	$3C(a1),d4
000123D8 2A04                       		move.l	d4,d5
000123DA C9C0                       		muls.w	d0,d4
000123DC E084                       		asr.l	#8,d4
000123DE CBC1                       		muls.w	d1,d5
000123E0 E085                       		asr.l	#8,d5
000123E2 D842                       		add.w	d2,d4
000123E4 DA43                       		add.w	d3,d5
000123E6 3344 000C                  		move.w	d4,$C(a1)
000123EA 3345 0008                  		move.w	d5,8(a1)
000123EE 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000123F2 4E75                       		rts	
000123F4                            ; ===========================================================================
000123F4                            
000123F4                            Obj57_ChkDel:				; XREF: Obj57_Move
000123F4 3028 003A                  		move.w	$3A(a0),d0
000123F8 0240 FF80                  		andi.w	#$FF80,d0
000123FC 3238 F700                  		move.w	($FFFFF700).w,d1
00012400 0441 0080                  		subi.w	#$80,d1
00012404 0241 FF80                  		andi.w	#$FF80,d1
00012408 9041                       		sub.w	d1,d0
0001240A 0C40 0280                  		cmpi.w	#$280,d0
0001240E 6300 C71E                  		bls.w	DisplaySprite
00012412 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012416 6700                       		beq.s	Obj57_Delete	; if it's zero, object was placed in debug mode
00012418 3440                       		movea.w	d0,a2	; load address into a2
0001241A 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0001241E                            ; ===========================================================================
0001241E                            
0001241E                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001241E 7400                       		moveq	#0,d2
00012420 45E8 0029                  		lea	$29(a0),a2
00012424 141A                       		move.b	(a2)+,d2
00012426                            
00012426                            Obj57_DelLoop:
00012426 7000                       		moveq	#0,d0
00012428 101A                       		move.b	(a2)+,d0
0001242A ED48                       		lsl.w	#6,d0
0001242C 0680 00FF D000             		addi.l	#$FFD000,d0
00012432 2240                       		movea.l	d0,a1
00012434 6100 C74A                  		bsr.w	DeleteObject2
00012438 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001243C                            
0001243C 4E75                       		rts	
0001243E                            ; ===========================================================================
0001243E                            
0001243E                            Obj57_Display:				; XREF: Obj57_Index
0001243E 6000 C6EE                  		bra.w	DisplaySprite
00012442                            ; ===========================================================================
00012442                            ; ---------------------------------------------------------------------------
00012442                            ; Sprite mappings - chain of spiked balls (SYZ)
00012442                            ; ---------------------------------------------------------------------------
00012442                            Map_obj57:
00012442                            	include "_maps\obj57syz.asm"
00012442                            ; ---------------------------------------------------------------------------
00012442                            ; Sprite mappings - chain of spiked balls (SYZ)
00012442                            ; ---------------------------------------------------------------------------
00012442 0000                       		dc.w byte_10958-Map_obj57
00012444 01                         byte_10958:	dc.b 1
00012445 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001244A                            		even
0001244A                            		even
0001244A                            
0001244A                            ; ---------------------------------------------------------------------------
0001244A                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001244A                            ; ---------------------------------------------------------------------------
0001244A                            Map_obj57a:
0001244A                            	include "_maps\obj57lz.asm"
0001244A                            ; ---------------------------------------------------------------------------
0001244A                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001244A                            ; ---------------------------------------------------------------------------
0001244A 0000                       		dc.w byte_10964-Map_obj57a
0001244C 0000                       		dc.w byte_1096A-Map_obj57a
0001244E 0000                       		dc.w byte_10970-Map_obj57a
00012450 01                         byte_10964:	dc.b 1
00012451 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012456 01                         byte_1096A:	dc.b 1
00012457 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001245C 01                         byte_10970:	dc.b 1
0001245D F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00012462                            		even
00012462                            		even
00012462                            
00012462                            ; ===========================================================================
00012462                            ; ---------------------------------------------------------------------------
00012462                            ; Object 58 - giant spiked balls (SYZ)
00012462                            ; ---------------------------------------------------------------------------
00012462                            
00012462                            Obj58:					; XREF: Obj_Index
00012462 7000                       		moveq	#0,d0
00012464 1028 0024                  		move.b	$24(a0),d0
00012468 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001246C 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00012470                            ; ===========================================================================
00012470 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00012472 0000                       		dc.w Obj58_Move-Obj58_Index
00012474                            ; ===========================================================================
00012474                            
00012474                            Obj58_Main:				; XREF: Obj58_Index
00012474 5428 0024                  		addq.b	#2,$24(a0)
00012478 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00012480 317C 0396 0002             		move.w	#$396,2(a0)
00012486 117C 0004 0001             		move.b	#4,1(a0)
0001248C 117C 0004 0018             		move.b	#4,$18(a0)
00012492 117C 0018 0019             		move.b	#$18,$19(a0)
00012498 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001249E 3168 000C 0038             		move.w	$C(a0),$38(a0)
000124A4 117C 0086 0020             		move.b	#$86,$20(a0)
000124AA 1228 0028                  		move.b	$28(a0),d1	; get object type
000124AE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000124B2 4881                       		ext.w	d1
000124B4 E741                       		asl.w	#3,d1		; multiply by 8
000124B6 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000124BA 1028 0022                  		move.b	$22(a0),d0
000124BE E418                       		ror.b	#2,d0
000124C0 0200 00C0                  		andi.b	#$C0,d0
000124C4 1140 0026                  		move.b	d0,$26(a0)
000124C8 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000124CE                            
000124CE                            Obj58_Move:				; XREF: Obj58_Index
000124CE 7000                       		moveq	#0,d0
000124D0 1028 0028                  		move.b	$28(a0),d0	; get object type
000124D4 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000124D8 D040                       		add.w	d0,d0
000124DA 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000124DE 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000124E2 3028 003A                  		move.w	$3A(a0),d0
000124E6 0240 FF80                  		andi.w	#$FF80,d0
000124EA 3238 F700                  		move.w	($FFFFF700).w,d1
000124EE 0441 0080                  		subi.w	#$80,d1
000124F2 0241 FF80                  		andi.w	#$FF80,d1
000124F6 9041                       		sub.w	d1,d0
000124F8 0C40 0280                  		cmpi.w	#$280,d0
000124FC 6300 C630                  		bls.w	DisplaySprite
00012500 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012504 6700 C678                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00012508 3440                       		movea.w	d0,a2	; load address into a2
0001250A 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0001250E 6000 C66E                  		bra.w	DeleteObject
00012512                            ; ===========================================================================
00012512 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00012514 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00012516 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00012518 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001251A                            ; ===========================================================================
0001251A                            
0001251A                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001251A 4E75                       		rts	
0001251C                            ; ===========================================================================
0001251C                            
0001251C                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001251C 323C 0060                  		move.w	#$60,d1
00012520 7000                       		moveq	#0,d0
00012522 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012526 0828 0000 0022             		btst	#0,$22(a0)
0001252C 6700                       		beq.s	loc_10A38
0001252E 4440                       		neg.w	d0
00012530 D041                       		add.w	d1,d0
00012532                            
00012532                            loc_10A38:
00012532 3228 003A                  		move.w	$3A(a0),d1
00012536 9240                       		sub.w	d0,d1
00012538 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001253C 4E75                       		rts	
0001253E                            ; ===========================================================================
0001253E                            
0001253E                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001253E 323C 0060                  		move.w	#$60,d1
00012542 7000                       		moveq	#0,d0
00012544 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012548 0828 0000 0022             		btst	#0,$22(a0)
0001254E 6700                       		beq.s	loc_10A5C
00012550 4440                       		neg.w	d0
00012552 0640 0080                  		addi.w	#$80,d0
00012556                            
00012556                            loc_10A5C:
00012556 3228 0038                  		move.w	$38(a0),d1
0001255A 9240                       		sub.w	d0,d1
0001255C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00012560 4E75                       		rts	
00012562                            ; ===========================================================================
00012562                            
00012562                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00012562 3028 003E                  		move.w	$3E(a0),d0
00012566 D168 0026                  		add.w	d0,$26(a0)
0001256A 1028 0026                  		move.b	$26(a0),d0
0001256E 4EB9 0000 29F6             		jsr	(CalcSine).l
00012574 3428 0038                  		move.w	$38(a0),d2
00012578 3628 003A                  		move.w	$3A(a0),d3
0001257C 7800                       		moveq	#0,d4
0001257E 1828 003C                  		move.b	$3C(a0),d4
00012582 2A04                       		move.l	d4,d5
00012584 C9C0                       		muls.w	d0,d4
00012586 E084                       		asr.l	#8,d4
00012588 CBC1                       		muls.w	d1,d5
0001258A E085                       		asr.l	#8,d5
0001258C D842                       		add.w	d2,d4
0001258E DA43                       		add.w	d3,d5
00012590 3144 000C                  		move.w	d4,$C(a0)
00012594 3145 0008                  		move.w	d5,8(a0)
00012598 4E75                       		rts	
0001259A                            ; ===========================================================================
0001259A                            ; ---------------------------------------------------------------------------
0001259A                            ; Sprite mappings - SBZ	spiked ball on a chain
0001259A                            ; ---------------------------------------------------------------------------
0001259A                            Map_obj15b:
0001259A                            	include "_maps\obj15sbz.asm"
0001259A                            ; ---------------------------------------------------------------------------
0001259A                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001259A                            ; ---------------------------------------------------------------------------
0001259A 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001259E 0000                       		dc.w byte_10AC6-Map_obj15b
000125A0 05                         byte_10AA6:	dc.b 5
000125A1 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000125A6 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000125AB F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000125B0 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000125B5 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000125BA 01                         byte_10AC0:	dc.b 1
000125BB F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000125C0 02                         byte_10AC6:	dc.b 2
000125C1 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000125C6 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000125CC 00                         		even
000125CC 00                         		even
000125CC                            
000125CC                            ; ===========================================================================
000125CC                            ; ---------------------------------------------------------------------------
000125CC                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000125CC                            ; ---------------------------------------------------------------------------
000125CC                            
000125CC                            Obj59:					; XREF: Obj_Index
000125CC 7000                       		moveq	#0,d0
000125CE 1028 0024                  		move.b	$24(a0),d0
000125D2 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000125D6 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000125DA 3028 0032                  		move.w	$32(a0),d0
000125DE 0240 FF80                  		andi.w	#$FF80,d0
000125E2 3238 F700                  		move.w	($FFFFF700).w,d1
000125E6 0441 0080                  		subi.w	#$80,d1
000125EA 0241 FF80                  		andi.w	#$FF80,d1
000125EE 9041                       		sub.w	d1,d0
000125F0 0C40 0280                  		cmpi.w	#$280,d0
000125F4 6300 C538                  		bls.w	DisplaySprite
000125F8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000125FC 6700 C580                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00012600 3440                       		movea.w	d0,a2	; load address into a2
00012602 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00012606 6000 C576                  		bra.w	DeleteObject
0001260A                            ; ===========================================================================
0001260A 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001260C 0000                       		dc.w Obj59_Platform-Obj59_Index
0001260E 0000                       		dc.w Obj59_Action-Obj59_Index
00012610 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00012612                            
00012612 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00012614                            
00012614 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00012616 2001                       		dc.b $20, 1
00012618 3401                       		dc.b $34, 1
0001261A 1003                       		dc.b $10, 3
0001261C 2003                       		dc.b $20, 3
0001261E 3403                       		dc.b $34, 3
00012620 1401                       		dc.b $14, 1
00012622 2401                       		dc.b $24, 1
00012624 2C01                       		dc.b $2C, 1
00012626 1403                       		dc.b $14, 3
00012628 2403                       		dc.b $24, 3
0001262A 2C03                       		dc.b $2C, 3
0001262C 2005                       		dc.b $20, 5
0001262E 2007                       		dc.b $20, 7
00012630 3009                       		dc.b $30, 9
00012632                            ; ===========================================================================
00012632                            
00012632                            Obj59_Main:				; XREF: Obj59_Index
00012632 5428 0024                  		addq.b	#2,$24(a0)
00012636 7000                       		moveq	#0,d0
00012638 1028 0028                  		move.b	$28(a0),d0
0001263C 6A00                       		bpl.s	Obj59_Main2
0001263E 5828 0024                  		addq.b	#4,$24(a0)
00012642 0240 007F                  		andi.w	#$7F,d0
00012646 C0FC 0006                  		mulu.w	#6,d0
0001264A 3140 003C                  		move.w	d0,$3C(a0)
0001264E 3140 003E                  		move.w	d0,$3E(a0)
00012652 588F                       		addq.l	#4,sp
00012654 4E75                       		rts	
00012656                            ; ===========================================================================
00012656                            
00012656                            Obj59_Main2:
00012656 E648                       		lsr.w	#3,d0
00012658 0240 001E                  		andi.w	#$1E,d0
0001265C 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00012660 115A 0019                  		move.b	(a2)+,$19(a0)
00012664 115A 001A                  		move.b	(a2)+,$1A(a0)
00012668 7000                       		moveq	#0,d0
0001266A 1028 0028                  		move.b	$28(a0),d0
0001266E D040                       		add.w	d0,d0
00012670 0240 001E                  		andi.w	#$1E,d0
00012674 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00012678 101A                       		move.b	(a2)+,d0
0001267A E548                       		lsl.w	#2,d0
0001267C 3140 003C                  		move.w	d0,$3C(a0)
00012680 115A 0028                  		move.b	(a2)+,$28(a0)
00012684 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001268C 317C 4000 0002             		move.w	#$4000,2(a0)
00012692 117C 0004 0001             		move.b	#4,1(a0)
00012698 117C 0004 0018             		move.b	#4,$18(a0)
0001269E 3168 0008 0032             		move.w	8(a0),$32(a0)
000126A4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000126AA                            
000126AA                            Obj59_Platform:				; XREF: Obj59_Index
000126AA 7200                       		moveq	#0,d1
000126AC 1228 0019                  		move.b	$19(a0),d1
000126B0 4EB9 0000 856A             		jsr	(PlatformObject).l
000126B6 6000 0000                  		bra.w	Obj59_Types
000126BA                            ; ===========================================================================
000126BA                            
000126BA                            Obj59_Action:				; XREF: Obj59_Index
000126BA 7200                       		moveq	#0,d1
000126BC 1228 0019                  		move.b	$19(a0),d1
000126C0 4EB9 0000 86DE             		jsr	(ExitPlatform).l
000126C6 3F28 0008                  		move.w	8(a0),-(sp)
000126CA 6100 0000                  		bsr.w	Obj59_Types
000126CE 341F                       		move.w	(sp)+,d2
000126D0 4A10                       		tst.b	0(a0)
000126D2 6700                       		beq.s	locret_10BD4
000126D4 4EF9 0000 8C54             		jmp	(MvSonicOnPtfm2).l
000126DA                            ; ===========================================================================
000126DA                            
000126DA                            locret_10BD4:
000126DA 4E75                       		rts	
000126DC                            ; ===========================================================================
000126DC                            
000126DC                            Obj59_Types:
000126DC 7000                       		moveq	#0,d0
000126DE 1028 0028                  		move.b	$28(a0),d0
000126E2 0240 000F                  		andi.w	#$F,d0
000126E6 D040                       		add.w	d0,d0
000126E8 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000126EC 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000126F0                            ; ===========================================================================
000126F0 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000126F4 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000126F8 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000126FC 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012700 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00012704                            ; ===========================================================================
00012704                            
00012704                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00012704 4E75                       		rts	
00012706                            ; ===========================================================================
00012706                            
00012706                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00012706 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001270C 6600                       		bne.s	locret_10C0C
0001270E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012712                            
00012712                            locret_10C0C:
00012712 4E75                       		rts	
00012714                            ; ===========================================================================
00012714                            
00012714                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00012714 6100 0000                  		bsr.w	Obj59_Move
00012718 3028 0034                  		move.w	$34(a0),d0
0001271C 4440                       		neg.w	d0
0001271E D068 0030                  		add.w	$30(a0),d0
00012722 3140 000C                  		move.w	d0,$C(a0)
00012726 4E75                       		rts	
00012728                            ; ===========================================================================
00012728                            
00012728                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00012728 6100 0000                  		bsr.w	Obj59_Move
0001272C 3028 0034                  		move.w	$34(a0),d0
00012730 D068 0030                  		add.w	$30(a0),d0
00012734 3140 000C                  		move.w	d0,$C(a0)
00012738 4E75                       		rts	
0001273A                            ; ===========================================================================
0001273A                            
0001273A                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001273A 6100 0000                  		bsr.w	Obj59_Move
0001273E 3028 0034                  		move.w	$34(a0),d0
00012742 E240                       		asr.w	#1,d0
00012744 4440                       		neg.w	d0
00012746 D068 0030                  		add.w	$30(a0),d0
0001274A 3140 000C                  		move.w	d0,$C(a0)
0001274E 3028 0034                  		move.w	$34(a0),d0
00012752 D068 0032                  		add.w	$32(a0),d0
00012756 3140 0008                  		move.w	d0,8(a0)
0001275A 4E75                       		rts	
0001275C                            ; ===========================================================================
0001275C                            
0001275C                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001275C 6100 0000                  		bsr.w	Obj59_Move
00012760 3028 0034                  		move.w	$34(a0),d0
00012764 E240                       		asr.w	#1,d0
00012766 D068 0030                  		add.w	$30(a0),d0
0001276A 3140 000C                  		move.w	d0,$C(a0)
0001276E 3028 0034                  		move.w	$34(a0),d0
00012772 4440                       		neg.w	d0
00012774 D068 0032                  		add.w	$32(a0),d0
00012778 3140 0008                  		move.w	d0,8(a0)
0001277C 4E75                       		rts	
0001277E                            ; ===========================================================================
0001277E                            
0001277E                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001277E 6100 0000                  		bsr.w	Obj59_Move
00012782 3028 0034                  		move.w	$34(a0),d0
00012786 4440                       		neg.w	d0
00012788 D068 0030                  		add.w	$30(a0),d0
0001278C 3140 000C                  		move.w	d0,$C(a0)
00012790 4A28 0028                  		tst.b	$28(a0)
00012794 6700 0000                  		beq.w	loc_10C94
00012798 4E75                       		rts	
0001279A                            ; ===========================================================================
0001279A                            
0001279A                            loc_10C94:
0001279A 0828 0003 0022             		btst	#3,$22(a0)
000127A0 6700                       		beq.s	Obj59_Delete
000127A2 08E9 0001 0022             		bset	#1,$22(a1)
000127A8 08A9 0003 0022             		bclr	#3,$22(a1)
000127AE 137C 0002 0024             		move.b	#2,$24(a1)
000127B4                            
000127B4                            Obj59_Delete:
000127B4 6000 C3C8                  		bra.w	DeleteObject
000127B8                            
000127B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000127B8                            
000127B8                            
000127B8                            Obj59_Move:				; XREF: Obj59_Type02; et al
000127B8 3028 0038                  		move.w	$38(a0),d0
000127BC 4A28 003A                  		tst.b	$3A(a0)
000127C0 6600                       		bne.s	loc_10CC8
000127C2 0C40 0800                  		cmpi.w	#$800,d0
000127C6 6400                       		bcc.s	loc_10CD0
000127C8 0640 0010                  		addi.w	#$10,d0
000127CC 6000                       		bra.s	loc_10CD0
000127CE                            ; ===========================================================================
000127CE                            
000127CE                            loc_10CC8:
000127CE 4A40                       		tst.w	d0
000127D0 6700                       		beq.s	loc_10CD0
000127D2 0440 0010                  		subi.w	#$10,d0
000127D6                            
000127D6                            loc_10CD0:
000127D6 3140 0038                  		move.w	d0,$38(a0)
000127DA 48C0                       		ext.l	d0
000127DC E180                       		asl.l	#8,d0
000127DE D0A8 0034                  		add.l	$34(a0),d0
000127E2 2140 0034                  		move.l	d0,$34(a0)
000127E6 4840                       		swap	d0
000127E8 3428 003C                  		move.w	$3C(a0),d2
000127EC B042                       		cmp.w	d2,d0
000127EE 6300                       		bls.s	loc_10CF0
000127F0 117C 0001 003A             		move.b	#1,$3A(a0)
000127F6                            
000127F6                            loc_10CF0:
000127F6 D442                       		add.w	d2,d2
000127F8 B042                       		cmp.w	d2,d0
000127FA 6600                       		bne.s	locret_10CFA
000127FC 4228 0028                  		clr.b	$28(a0)
00012800                            
00012800                            locret_10CFA:
00012800 4E75                       		rts	
00012802                            ; End of function Obj59_Move
00012802                            
00012802                            ; ===========================================================================
00012802                            
00012802                            Obj59_MakeMulti:			; XREF: Obj59_Index
00012802 5368 003C                  		subq.w	#1,$3C(a0)
00012806 6600                       		bne.s	Obj59_ChkDel
00012808 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001280E 6100 CA74                  		bsr.w	SingleObjLoad
00012812 6600                       		bne.s	Obj59_ChkDel
00012814 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00012818 3368 0008 0008             		move.w	8(a0),8(a1)
0001281E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012824 137C 000E 0028             		move.b	#$E,$28(a1)
0001282A                            
0001282A                            Obj59_ChkDel:
0001282A 588F                       		addq.l	#4,sp
0001282C 3028 0008                  		move.w	8(a0),d0
00012830 0240 FF80                  		andi.w	#$FF80,d0
00012834 3238 F700                  		move.w	($FFFFF700).w,d1
00012838 0441 0080                  		subi.w	#$80,d1
0001283C 0241 FF80                  		andi.w	#$FF80,d1
00012840 9041                       		sub.w	d1,d0
00012842 0C40 0280                  		cmpi.w	#$280,d0
00012846 6200 C336                  		bhi.w	DeleteObject
0001284A 4E75                       		rts	
0001284C                            ; ===========================================================================
0001284C                            ; ---------------------------------------------------------------------------
0001284C                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001284C                            ; ---------------------------------------------------------------------------
0001284C                            Map_obj59:
0001284C                            	include "_maps\obj59.asm"
0001284C                            ; ---------------------------------------------------------------------------
0001284C                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001284C                            ; ---------------------------------------------------------------------------
0001284C 0000                       		dc.w byte_10D4A-Map_obj59
0001284E 03                         byte_10D4A:	dc.b 3
0001284F F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012854 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012859 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001285E                            		even
0001285E                            		even
0001285E                            
0001285E                            ; ===========================================================================
0001285E                            ; ---------------------------------------------------------------------------
0001285E                            ; Object 5A - platforms	moving in circles (SLZ)
0001285E                            ; ---------------------------------------------------------------------------
0001285E                            
0001285E                            Obj5A:					; XREF: Obj_Index
0001285E 7000                       		moveq	#0,d0
00012860 1028 0024                  		move.b	$24(a0),d0
00012864 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00012868 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001286C 3028 0032                  		move.w	$32(a0),d0
00012870 0240 FF80                  		andi.w	#$FF80,d0
00012874 3238 F700                  		move.w	($FFFFF700).w,d1
00012878 0441 0080                  		subi.w	#$80,d1
0001287C 0241 FF80                  		andi.w	#$FF80,d1
00012880 9041                       		sub.w	d1,d0
00012882 0C40 0280                  		cmpi.w	#$280,d0
00012886 6300 C2A6                  		bls.w	DisplaySprite
0001288A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001288E 6700 C2EE                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00012892 3440                       		movea.w	d0,a2	; load address into a2
00012894 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00012898 6000 C2E4                  		bra.w	DeleteObject
0001289C                            ; ===========================================================================
0001289C 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001289E 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000128A0 0000                       		dc.w Obj5A_Action-Obj5A_Index
000128A2                            ; ===========================================================================
000128A2                            
000128A2                            Obj5A_Main:				; XREF: Obj5A_Index
000128A2 5428 0024                  		addq.b	#2,$24(a0)
000128A6 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000128AE 317C 4000 0002             		move.w	#$4000,2(a0)
000128B4 117C 0004 0001             		move.b	#4,1(a0)
000128BA 117C 0004 0018             		move.b	#4,$18(a0)
000128C0 117C 0018 0019             		move.b	#$18,$19(a0)
000128C6 3168 0008 0032             		move.w	8(a0),$32(a0)
000128CC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000128D2                            
000128D2                            Obj5A_Platform:				; XREF: Obj5A_Index
000128D2 7200                       		moveq	#0,d1
000128D4 1228 0019                  		move.b	$19(a0),d1
000128D8 4EB9 0000 856A             		jsr	(PlatformObject).l
000128DE 6000 0000                  		bra.w	Obj5A_Types
000128E2                            ; ===========================================================================
000128E2                            
000128E2                            Obj5A_Action:				; XREF: Obj5A_Index
000128E2 7200                       		moveq	#0,d1
000128E4 1228 0019                  		move.b	$19(a0),d1
000128E8 4EB9 0000 86DE             		jsr	(ExitPlatform).l
000128EE 3F28 0008                  		move.w	8(a0),-(sp)
000128F2 6100 0000                  		bsr.w	Obj5A_Types
000128F6 341F                       		move.w	(sp)+,d2
000128F8 4EF9 0000 8C54             		jmp	(MvSonicOnPtfm2).l
000128FE                            ; ===========================================================================
000128FE                            
000128FE                            Obj5A_Types:
000128FE 7000                       		moveq	#0,d0
00012900 1028 0028                  		move.b	$28(a0),d0
00012904 0240 000C                  		andi.w	#$C,d0
00012908 E248                       		lsr.w	#1,d0
0001290A 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001290E 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00012912                            ; ===========================================================================
00012912 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00012914 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00012916                            ; ===========================================================================
00012916                            
00012916                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00012916 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001291A 0401 0050                  		subi.b	#$50,d1
0001291E 4881                       		ext.w	d1
00012920 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012924 0402 0050                  		subi.b	#$50,d2
00012928 4882                       		ext.w	d2
0001292A 0828 0000 0028             		btst	#0,$28(a0)
00012930 6700                       		beq.s	loc_10E24
00012932 4441                       		neg.w	d1
00012934 4442                       		neg.w	d2
00012936                            
00012936                            loc_10E24:
00012936 0828 0001 0028             		btst	#1,$28(a0)
0001293C 6700                       		beq.s	loc_10E30
0001293E 4441                       		neg.w	d1
00012940 C342                       		exg	d1,d2
00012942                            
00012942                            loc_10E30:
00012942 D268 0032                  		add.w	$32(a0),d1
00012946 3141 0008                  		move.w	d1,8(a0)
0001294A D468 0030                  		add.w	$30(a0),d2
0001294E 3142 000C                  		move.w	d2,$C(a0)
00012952 4E75                       		rts	
00012954                            ; ===========================================================================
00012954                            
00012954                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00012954 1238 FE80                  		move.b	($FFFFFE80).w,d1
00012958 0401 0050                  		subi.b	#$50,d1
0001295C 4881                       		ext.w	d1
0001295E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012962 0402 0050                  		subi.b	#$50,d2
00012966 4882                       		ext.w	d2
00012968 0828 0000 0028             		btst	#0,$28(a0)
0001296E 6700                       		beq.s	loc_10E62
00012970 4441                       		neg.w	d1
00012972 4442                       		neg.w	d2
00012974                            
00012974                            loc_10E62:
00012974 0828 0001 0028             		btst	#1,$28(a0)
0001297A 6700                       		beq.s	loc_10E6E
0001297C 4441                       		neg.w	d1
0001297E C342                       		exg	d1,d2
00012980                            
00012980                            loc_10E6E:
00012980 4441                       		neg.w	d1
00012982 D268 0032                  		add.w	$32(a0),d1
00012986 3141 0008                  		move.w	d1,8(a0)
0001298A D468 0030                  		add.w	$30(a0),d2
0001298E 3142 000C                  		move.w	d2,$C(a0)
00012992 4E75                       		rts	
00012994                            ; ===========================================================================
00012994                            ; ---------------------------------------------------------------------------
00012994                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012994                            ; ---------------------------------------------------------------------------
00012994                            Map_obj5A:
00012994                            	include "_maps\obj5A.asm"
00012994                            ; ---------------------------------------------------------------------------
00012994                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012994                            ; ---------------------------------------------------------------------------
00012994 0000                       		dc.w byte_10E84-Map_obj5A
00012996 02                         byte_10E84:	dc.b 2
00012997 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001299C F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000129A2 00                         		even
000129A2 00                         		even
000129A2                            
000129A2                            ; ===========================================================================
000129A2                            ; ---------------------------------------------------------------------------
000129A2                            ; Object 5B - blocks that form a staircase (SLZ)
000129A2                            ; ---------------------------------------------------------------------------
000129A2                            
000129A2                            Obj5B:					; XREF: Obj_Index
000129A2 7000                       		moveq	#0,d0
000129A4 1028 0024                  		move.b	$24(a0),d0
000129A8 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000129AC 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000129B0 3028 0030                  		move.w	$30(a0),d0
000129B4 0240 FF80                  		andi.w	#$FF80,d0
000129B8 3238 F700                  		move.w	($FFFFF700).w,d1
000129BC 0441 0080                  		subi.w	#$80,d1
000129C0 0241 FF80                  		andi.w	#$FF80,d1
000129C4 9041                       		sub.w	d1,d0
000129C6 0C40 0280                  		cmpi.w	#$280,d0
000129CA 6300 C162                  		bls.w	DisplaySprite
000129CE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000129D2 6700 C1AA                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000129D6 3440                       		movea.w	d0,a2	; load address into a2
000129D8 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000129DC 6000 C1A0                  		bra.w	DeleteObject
000129E0                            ; ===========================================================================
000129E0 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000129E2 0000                       		dc.w Obj5B_Move-Obj5B_Index
000129E4 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000129E6                            ; ===========================================================================
000129E6                            
000129E6                            Obj5B_Main:				; XREF: Obj5B_Index
000129E6 5428 0024                  		addq.b	#2,$24(a0)
000129EA 7638                       		moveq	#$38,d3
000129EC 7801                       		moveq	#1,d4
000129EE 0828 0000 0022             		btst	#0,$22(a0)
000129F4 6700                       		beq.s	loc_10EDA
000129F6 763B                       		moveq	#$3B,d3
000129F8 78FF                       		moveq	#-1,d4
000129FA                            
000129FA                            loc_10EDA:
000129FA 3428 0008                  		move.w	8(a0),d2
000129FE 2248                       		movea.l	a0,a1
00012A00 7203                       		moveq	#3,d1
00012A02 6000                       		bra.s	Obj5B_MakeBlocks
00012A04                            ; ===========================================================================
00012A04                            
00012A04                            Obj5B_Loop:
00012A04 6100 C894                  		bsr.w	SingleObjLoad2
00012A08 6600 0000                  		bne.w	Obj5B_Move
00012A0C 137C 0004 0024             		move.b	#4,$24(a1)
00012A12                            
00012A12                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00012A12 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00012A16 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00012A1E 337C 4000 0002             		move.w	#$4000,2(a1)
00012A24 137C 0004 0001             		move.b	#4,1(a1)
00012A2A 137C 0003 0018             		move.b	#3,$18(a1)
00012A30 137C 0010 0019             		move.b	#$10,$19(a1)
00012A36 1368 0028 0028             		move.b	$28(a0),$28(a1)
00012A3C 3342 0008                  		move.w	d2,8(a1)
00012A40 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012A46 3368 0008 0030             		move.w	8(a0),$30(a1)
00012A4C 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012A52 0642 0020                  		addi.w	#$20,d2
00012A56 1343 0037                  		move.b	d3,$37(a1)
00012A5A 2348 003C                  		move.l	a0,$3C(a1)
00012A5E D604                       		add.b	d4,d3
00012A60 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012A64                            
00012A64                            Obj5B_Move:				; XREF: Obj5B_Index
00012A64 7000                       		moveq	#0,d0
00012A66 1028 0028                  		move.b	$28(a0),d0
00012A6A 0240 0007                  		andi.w	#7,d0
00012A6E D040                       		add.w	d0,d0
00012A70 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012A74 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00012A78                            
00012A78                            Obj5B_Solid:				; XREF: Obj5B_Index
00012A78 2468 003C                  		movea.l	$3C(a0),a2
00012A7C 7000                       		moveq	#0,d0
00012A7E 1028 0037                  		move.b	$37(a0),d0
00012A82 1032 0000                  		move.b	(a2,d0.w),d0
00012A86 D068 0032                  		add.w	$32(a0),d0
00012A8A 3140 000C                  		move.w	d0,$C(a0)
00012A8E 7200                       		moveq	#0,d1
00012A90 1228 0019                  		move.b	$19(a0),d1
00012A94 0641 000B                  		addi.w	#$B,d1
00012A98 343C 0010                  		move.w	#$10,d2
00012A9C 363C 0011                  		move.w	#$11,d3
00012AA0 3828 0008                  		move.w	8(a0),d4
00012AA4 6100 E9F6                  		bsr.w	SolidObject
00012AA8 4A04                       		tst.b	d4
00012AAA 6A00                       		bpl.s	loc_10F92
00012AAC 1544 0036                  		move.b	d4,$36(a2)
00012AB0                            
00012AB0                            loc_10F92:
00012AB0 0828 0003 0022             		btst	#3,$22(a0)
00012AB6 6700                       		beq.s	locret_10FA0
00012AB8 157C 0001 0036             		move.b	#1,$36(a2)
00012ABE                            
00012ABE                            locret_10FA0:
00012ABE 4E75                       		rts	
00012AC0                            ; ===========================================================================
00012AC0 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00012AC2 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012AC4 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00012AC6 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012AC8                            ; ===========================================================================
00012AC8                            
00012AC8                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00012AC8 4A68 0034                  		tst.w	$34(a0)
00012ACC 6600                       		bne.s	loc_10FC0
00012ACE 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00012AD4 6600                       		bne.s	locret_10FBE
00012AD6 317C 001E 0034             		move.w	#$1E,$34(a0)
00012ADC                            
00012ADC                            locret_10FBE:
00012ADC 4E75                       		rts	
00012ADE                            ; ===========================================================================
00012ADE                            
00012ADE                            loc_10FC0:
00012ADE 5368 0034                  		subq.w	#1,$34(a0)
00012AE2 66F8                       		bne.s	locret_10FBE
00012AE4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012AE8 4E75                       		rts	
00012AEA                            ; ===========================================================================
00012AEA                            
00012AEA                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00012AEA 4A68 0034                  		tst.w	$34(a0)
00012AEE 6600                       		bne.s	loc_10FE0
00012AF0 4A28 0036                  		tst.b	$36(a0)
00012AF4 6A00                       		bpl.s	locret_10FDE
00012AF6 317C 003C 0034             		move.w	#$3C,$34(a0)
00012AFC                            
00012AFC                            locret_10FDE:
00012AFC 4E75                       		rts	
00012AFE                            ; ===========================================================================
00012AFE                            
00012AFE                            loc_10FE0:
00012AFE 5368 0034                  		subq.w	#1,$34(a0)
00012B02 6600                       		bne.s	loc_10FEC
00012B04 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012B08 4E75                       		rts	
00012B0A                            ; ===========================================================================
00012B0A                            
00012B0A                            loc_10FEC:
00012B0A 43E8 0038                  		lea	$38(a0),a1
00012B0E 3028 0034                  		move.w	$34(a0),d0
00012B12 E408                       		lsr.b	#2,d0
00012B14 0200 0001                  		andi.b	#1,d0
00012B18 12C0                       		move.b	d0,(a1)+
00012B1A 0A00 0001                  		eori.b	#1,d0
00012B1E 12C0                       		move.b	d0,(a1)+
00012B20 0A00 0001                  		eori.b	#1,d0
00012B24 12C0                       		move.b	d0,(a1)+
00012B26 0A00 0001                  		eori.b	#1,d0
00012B2A 12C0                       		move.b	d0,(a1)+
00012B2C 4E75                       		rts	
00012B2E                            ; ===========================================================================
00012B2E                            
00012B2E                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00012B2E 43E8 0038                  		lea	$38(a0),a1
00012B32 0C11 0080                  		cmpi.b	#$80,(a1)
00012B36 6700                       		beq.s	locret_11038
00012B38 5211                       		addq.b	#1,(a1)
00012B3A 7200                       		moveq	#0,d1
00012B3C 1219                       		move.b	(a1)+,d1
00012B3E 4841                       		swap	d1
00012B40 E289                       		lsr.l	#1,d1
00012B42 2401                       		move.l	d1,d2
00012B44 E289                       		lsr.l	#1,d1
00012B46 2601                       		move.l	d1,d3
00012B48 D682                       		add.l	d2,d3
00012B4A 4841                       		swap	d1
00012B4C 4842                       		swap	d2
00012B4E 4843                       		swap	d3
00012B50 12C3                       		move.b	d3,(a1)+
00012B52 12C2                       		move.b	d2,(a1)+
00012B54 12C1                       		move.b	d1,(a1)+
00012B56                            
00012B56                            locret_11038:
00012B56 4E75                       		rts	
00012B58 4E75                       		rts	
00012B5A                            ; ===========================================================================
00012B5A                            ; ---------------------------------------------------------------------------
00012B5A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012B5A                            ; ---------------------------------------------------------------------------
00012B5A                            Map_obj5B:
00012B5A                            	include "_maps\obj5B.asm"
00012B5A                            ; ---------------------------------------------------------------------------
00012B5A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012B5A                            ; ---------------------------------------------------------------------------
00012B5A 0000                       		dc.w byte_1103E-Map_obj5B
00012B5C 01                         byte_1103E:	dc.b 1
00012B5D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012B62                            		even
00012B62                            		even
00012B62                            
00012B62                            ; ===========================================================================
00012B62                            ; ---------------------------------------------------------------------------
00012B62                            ; Object 5C - metal girders in foreground (SLZ)
00012B62                            ; ---------------------------------------------------------------------------
00012B62                            
00012B62                            Obj5C:					; XREF: Obj_Index
00012B62 7000                       		moveq	#0,d0
00012B64 1028 0024                  		move.b	$24(a0),d0
00012B68 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00012B6C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012B70                            ; ===========================================================================
00012B70 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012B72 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012B74                            ; ===========================================================================
00012B74                            
00012B74                            Obj5C_Main:				; XREF: Obj5C_Index
00012B74 5428 0024                  		addq.b	#2,$24(a0)
00012B78 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012B80 317C 83CC 0002             		move.w	#$83CC,2(a0)
00012B86 117C 0010 0019             		move.b	#$10,$19(a0)
00012B8C                            
00012B8C                            Obj5C_Display:				; XREF: Obj5C_Index
00012B8C 2238 F700                  		move.l	($FFFFF700).w,d1
00012B90 D281                       		add.l	d1,d1
00012B92 4841                       		swap	d1
00012B94 4441                       		neg.w	d1
00012B96 3141 0008                  		move.w	d1,8(a0)
00012B9A 2238 F704                  		move.l	($FFFFF704).w,d1
00012B9E D281                       		add.l	d1,d1
00012BA0 4841                       		swap	d1
00012BA2 0241 003F                  		andi.w	#$3F,d1
00012BA6 4441                       		neg.w	d1
00012BA8 0641 0100                  		addi.w	#$100,d1
00012BAC 3141 000A                  		move.w	d1,$A(a0)
00012BB0 6000 BF7C                  		bra.w	DisplaySprite
00012BB4                            ; ===========================================================================
00012BB4                            ; ---------------------------------------------------------------------------
00012BB4                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012BB4                            ; ---------------------------------------------------------------------------
00012BB4                            Map_obj5C:
00012BB4                            	include "_maps\obj5C.asm"
00012BB4                            ; ---------------------------------------------------------------------------
00012BB4                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012BB4                            ; ---------------------------------------------------------------------------
00012BB4 0000                       		dc.w byte_11098-Map_obj5C
00012BB6 09                         byte_11098:	dc.b 9
00012BB7 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00012BBC A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00012BC1 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00012BC6 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00012BCB 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00012BD0 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00012BD5 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00012BDA 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00012BDF 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012BE4                            		even
00012BE4                            		even
00012BE4                            
00012BE4                            ; ===========================================================================
00012BE4                            ; ---------------------------------------------------------------------------
00012BE4                            ; Object 1B - water surface (LZ)
00012BE4                            ; ---------------------------------------------------------------------------
00012BE4                            
00012BE4                            Obj1B:					; XREF: Obj_Index
00012BE4 7000                       		moveq	#0,d0
00012BE6 1028 0024                  		move.b	$24(a0),d0
00012BEA 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00012BEE 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00012BF2                            ; ===========================================================================
00012BF2 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00012BF4 0000                       		dc.w Obj1B_Action-Obj1B_Index
00012BF6                            ; ===========================================================================
00012BF6                            
00012BF6                            Obj1B_Main:				; XREF: Obj1B_Index
00012BF6 5428 0024                  		addq.b	#2,$24(a0)
00012BFA 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012C02 317C C300 0002             		move.w	#$C300,2(a0)
00012C08 117C 0004 0001             		move.b	#4,1(a0)
00012C0E 117C 0080 0019             		move.b	#$80,$19(a0)
00012C14 3168 0008 0030             		move.w	8(a0),$30(a0)
00012C1A                            
00012C1A                            Obj1B_Action:				; XREF: Obj1B_Index
00012C1A 3238 F700                  		move.w	($FFFFF700).w,d1
00012C1E 0241 FFE0                  		andi.w	#$FFE0,d1
00012C22 D268 0030                  		add.w	$30(a0),d1
00012C26 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012C2C 6700                       		beq.s	loc_11114
00012C2E 0641 0020                  		addi.w	#$20,d1
00012C32                            
00012C32                            loc_11114:
00012C32 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012C36 3238 F646                  		move.w	($FFFFF646).w,d1
00012C3A 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012C3E 4A28 0032                  		tst.b	$32(a0)
00012C42 6600                       		bne.s	Obj1B_Animate
00012C44 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012C4A 6700                       		beq.s	loc_1114A	; if not, branch
00012C4C 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012C50 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012C56 6000                       		bra.s	Obj1B_Display
00012C58                            ; ===========================================================================
00012C58                            
00012C58                            Obj1B_Animate:				; XREF: loc_11114
00012C58 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012C5C 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012C5E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012C64 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012C68                            
00012C68                            loc_1114A:				; XREF: loc_11114
00012C68 5328 001E                  		subq.b	#1,$1E(a0)
00012C6C 6A00                       		bpl.s	Obj1B_Display
00012C6E 117C 0007 001E             		move.b	#7,$1E(a0)
00012C74 5228 001A                  		addq.b	#1,$1A(a0)
00012C78 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012C7E 6500                       		bcs.s	Obj1B_Display
00012C80 117C 0000 001A             		move.b	#0,$1A(a0)
00012C86                            
00012C86                            Obj1B_Display:
00012C86 6000 BEA6                  		bra.w	DisplaySprite
00012C8A                            ; ===========================================================================
00012C8A                            ; ---------------------------------------------------------------------------
00012C8A                            ; Sprite mappings - water surface (LZ)
00012C8A                            ; ---------------------------------------------------------------------------
00012C8A                            Map_obj1B:
00012C8A                            	include "_maps\obj1B.asm"
00012C8A                            ; ---------------------------------------------------------------------------
00012C8A                            ; Sprite mappings - water surface (LZ)
00012C8A                            ; ---------------------------------------------------------------------------
00012C8A 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012C8E 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012C92 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012C96 03                         byte_11178:	dc.b 3
00012C97 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012C9C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012CA1 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012CA6 03                         byte_11188:	dc.b 3
00012CA7 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012CAC FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012CB1 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012CB6 03                         byte_11198:	dc.b 3
00012CB7 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012CBC FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012CC1 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012CC6 06                         byte_111A8:	dc.b 6
00012CC7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012CCC FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012CD1 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012CD6 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012CDB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012CE0 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012CE5 06                         byte_111C7:	dc.b 6
00012CE6 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012CEB FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012CF0 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012CF5 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012CFA FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012CFF FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012D04 06                         byte_111E6:	dc.b 6
00012D05 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012D0A FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012D0F FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012D14 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012D19 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012D1E FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012D24 00                         		even
00012D24 00                         		even
00012D24                            
00012D24                            ; ===========================================================================
00012D24                            ; ---------------------------------------------------------------------------
00012D24                            ; Object 0B - pole that	breaks (LZ)
00012D24                            ; ---------------------------------------------------------------------------
00012D24                            
00012D24                            Obj0B:					; XREF: Obj_Index
00012D24 7000                       		moveq	#0,d0
00012D26 1028 0024                  		move.b	$24(a0),d0
00012D2A 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012D2E 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012D32                            ; ===========================================================================
00012D32 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012D34 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012D36 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012D38                            ; ===========================================================================
00012D38                            
00012D38                            Obj0B_Main:				; XREF: Obj0B_Index
00012D38 5428 0024                  		addq.b	#2,$24(a0)
00012D3C 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012D44 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012D4A 117C 0004 0001             		move.b	#4,1(a0)
00012D50 117C 0008 0019             		move.b	#8,$19(a0)
00012D56 117C 0004 0018             		move.b	#4,$18(a0)
00012D5C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012D62 7000                       		moveq	#0,d0
00012D64 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D68 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012D6C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012D70                            
00012D70                            Obj0B_Action:				; XREF: Obj0B_Index
00012D70 4A28 0032                  		tst.b	$32(a0)
00012D74 6700                       		beq.s	Obj0B_Grab
00012D76 4A68 0030                  		tst.w	$30(a0)
00012D7A 6700                       		beq.s	Obj0B_MoveUp
00012D7C 5368 0030                  		subq.w	#1,$30(a0)
00012D80 6600                       		bne.s	Obj0B_MoveUp
00012D82 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012D88 6000                       		bra.s	Obj0B_Release
00012D8A                            ; ===========================================================================
00012D8A                            
00012D8A                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012D8A 43F8 D000                  		lea	($FFFFD000).w,a1
00012D8E 3028 000C                  		move.w	$C(a0),d0
00012D92 0440 0018                  		subi.w	#$18,d0
00012D96 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00012D9C 6700                       		beq.s	Obj0B_MoveDown
00012D9E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012DA2 B069 000C                  		cmp.w	$C(a1),d0
00012DA6 6500                       		bcs.s	Obj0B_MoveDown
00012DA8 3340 000C                  		move.w	d0,$C(a1)
00012DAC                            
00012DAC                            Obj0B_MoveDown:
00012DAC 0640 0024                  		addi.w	#$24,d0
00012DB0 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012DB6 6700                       		beq.s	Obj0B_LetGo
00012DB8 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012DBC B069 000C                  		cmp.w	$C(a1),d0
00012DC0 6400                       		bcc.s	Obj0B_LetGo
00012DC2 3340 000C                  		move.w	d0,$C(a1)
00012DC6                            
00012DC6                            Obj0B_LetGo:
00012DC6 1038 F603                  		move.b	($FFFFF603).w,d0
00012DCA 0240 0070                  		andi.w	#$70,d0
00012DCE 6700                       		beq.s	Obj0B_Display
00012DD0                            
00012DD0                            Obj0B_Release:				; XREF: Obj0B_Action
00012DD0 4228 0020                  		clr.b	$20(a0)
00012DD4 5428 0024                  		addq.b	#2,$24(a0)
00012DD8 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012DDC 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012DE0 4228 0032                  		clr.b	$32(a0)
00012DE4 6000                       		bra.s	Obj0B_Display
00012DE6                            ; ===========================================================================
00012DE6                            
00012DE6                            Obj0B_Grab:				; XREF: Obj0B_Action
00012DE6 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012DEA 6700                       		beq.s	Obj0B_Display	; if not, branch
00012DEC 43F8 D000                  		lea	($FFFFD000).w,a1
00012DF0 3028 0008                  		move.w	8(a0),d0
00012DF4 0640 0014                  		addi.w	#$14,d0
00012DF8 B069 0008                  		cmp.w	8(a1),d0
00012DFC 6400                       		bcc.s	Obj0B_Display
00012DFE 4228 0021                  		clr.b	$21(a0)
00012E02 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012E08 6400                       		bcc.s	Obj0B_Display
00012E0A 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012E0E 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012E12 3028 0008                  		move.w	8(a0),d0
00012E16 0640 0014                  		addi.w	#$14,d0
00012E1A 3340 0008                  		move.w	d0,8(a1)
00012E1E 08A9 0000 0022             		bclr	#0,$22(a1)
00012E24 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012E2A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012E30 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012E36 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012E3C                            
00012E3C                            Obj0B_Display:				; XREF: Obj0B_Index
00012E3C 6000 E33A                  		bra.w	MarkObjGone
00012E40                            ; ===========================================================================
00012E40                            ; ---------------------------------------------------------------------------
00012E40                            ; Sprite mappings - pole that breaks (LZ)
00012E40                            ; ---------------------------------------------------------------------------
00012E40                            Map_obj0B:
00012E40                            	include "_maps\obj0B.asm"
00012E40                            ; ---------------------------------------------------------------------------
00012E40                            ; Sprite mappings - pole that breaks (LZ)
00012E40                            ; ---------------------------------------------------------------------------
00012E40 0000                       		dc.w byte_11326-Map_obj0B
00012E42 0000                       		dc.w byte_11331-Map_obj0B
00012E44 02                         byte_11326:	dc.b 2			; normal pole
00012E45 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012E4A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012E4F 04                         byte_11331:	dc.b 4			; broken pole
00012E50 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012E55 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012E5A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012E5F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012E64                            		even
00012E64                            		even
00012E64                            
00012E64                            ; ===========================================================================
00012E64                            ; ---------------------------------------------------------------------------
00012E64                            ; Object 0C - flapping door (LZ)
00012E64                            ; ---------------------------------------------------------------------------
00012E64                            
00012E64                            Obj0C:					; XREF: Obj_Index
00012E64 7000                       		moveq	#0,d0
00012E66 1028 0024                  		move.b	$24(a0),d0
00012E6A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012E6E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012E72                            ; ===========================================================================
00012E72 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012E74 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012E76                            ; ===========================================================================
00012E76                            
00012E76                            Obj0C_Main:				; XREF: Obj0C_Index
00012E76 5428 0024                  		addq.b	#2,$24(a0)
00012E7A 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012E82 317C 4328 0002             		move.w	#$4328,2(a0)
00012E88 0028 0004 0001             		ori.b	#4,1(a0)
00012E8E 117C 0028 0019             		move.b	#$28,$19(a0)
00012E94 7000                       		moveq	#0,d0
00012E96 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E9A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012E9E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012EA2                            
00012EA2                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012EA2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012EA6 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012EA8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012EAE 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012EB4 4A28 0001                  		tst.b	1(a0)
00012EB8 6A00                       		bpl.s	Obj0C_Solid
00012EBA 303C 00BB                  		move.w	#$BB,d0
00012EBE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play door sound
00012EC4                            
00012EC4                            Obj0C_Solid:
00012EC4 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012ECA 6100 8CC2                  		bsr.w	AnimateSprite
00012ECE 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012ED2 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012ED6 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012ED8 3038 D008                  		move.w	($FFFFD008).w,d0
00012EDC B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012EE0 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012EE2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012EE8 323C 0013                  		move.w	#$13,d1
00012EEC 343C 0020                  		move.w	#$20,d2
00012EF0 3602                       		move.w	d2,d3
00012EF2 5243                       		addq.w	#1,d3
00012EF4 3828 0008                  		move.w	8(a0),d4
00012EF8 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
00012EFC                            
00012EFC                            Obj0C_Display:
00012EFC 6000 E27A                  		bra.w	MarkObjGone
00012F00                            ; ===========================================================================
00012F00                            Ani_obj0C:
00012F00                            	include "_anim\obj0C.asm"
00012F00                            ; ---------------------------------------------------------------------------
00012F00                            ; Animation script - flapping door (LZ)
00012F00                            ; ---------------------------------------------------------------------------
00012F00 0000                       		dc.w byte_113E6-Ani_obj0C
00012F02 0000                       		dc.w byte_113EC-Ani_obj0C
00012F04 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012F0A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012F10                            		even
00012F10                            		even
00012F10                            
00012F10                            ; ---------------------------------------------------------------------------
00012F10                            ; Sprite mappings - flapping door (LZ)
00012F10                            ; ---------------------------------------------------------------------------
00012F10                            Map_obj0C:
00012F10                            	include "_maps\obj0C.asm"
00012F10                            ; ---------------------------------------------------------------------------
00012F10                            ; Sprite mappings - flapping door (LZ)
00012F10                            ; ---------------------------------------------------------------------------
00012F10 0000                       		dc.w byte_113F8-Map_obj0C
00012F12 0000                       		dc.w byte_11403-Map_obj0C
00012F14 0000                       		dc.w byte_1140E-Map_obj0C
00012F16 02                         byte_113F8:	dc.b 2
00012F17 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012F1C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012F21 02                         byte_11403:	dc.b 2
00012F22 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012F27 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012F2C 02                         byte_1140E:	dc.b 2
00012F2D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012F32 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012F38 00                         		even
00012F38 00                         		even
00012F38                            
00012F38                            ; ===========================================================================
00012F38                            ; ---------------------------------------------------------------------------
00012F38                            ; Object 71 - invisible	solid blocks
00012F38                            ; ---------------------------------------------------------------------------
00012F38                            
00012F38                            Obj71:					; XREF: Obj_Index
00012F38 7000                       		moveq	#0,d0
00012F3A 1028 0024                  		move.b	$24(a0),d0
00012F3E 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012F42 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012F46                            ; ===========================================================================
00012F46 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012F48 0000                       		dc.w Obj71_Solid-Obj71_Index
00012F4A                            ; ===========================================================================
00012F4A                            
00012F4A                            Obj71_Main:				; XREF: Obj71_Index
00012F4A 5428 0024                  		addq.b	#2,$24(a0)
00012F4E 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012F56 317C 8680 0002             		move.w	#$8680,2(a0)
00012F5C 0028 0004 0001             		ori.b	#4,1(a0)
00012F62 1028 0028                  		move.b	$28(a0),d0	; get object type
00012F66 1200                       		move.b	d0,d1
00012F68 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012F6C 0640 0010                  		addi.w	#$10,d0
00012F70 E248                       		lsr.w	#1,d0
00012F72 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012F76 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012F7A 5241                       		addq.w	#1,d1
00012F7C E749                       		lsl.w	#3,d1
00012F7E 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012F82                            
00012F82                            Obj71_Solid:				; XREF: Obj71_Index
00012F82 6100 BF70                  		bsr.w	ChkObjOnScreen
00012F86 6600                       		bne.s	Obj71_ChkDel
00012F88 7200                       		moveq	#0,d1
00012F8A 1228 0019                  		move.b	$19(a0),d1
00012F8E 0641 000B                  		addi.w	#$B,d1
00012F92 7400                       		moveq	#0,d2
00012F94 1428 0016                  		move.b	$16(a0),d2
00012F98 3602                       		move.w	d2,d3
00012F9A 5243                       		addq.w	#1,d3
00012F9C 3828 0008                  		move.w	8(a0),d4
00012FA0 6100 E542                  		bsr.w	SolidObject71
00012FA4                            
00012FA4                            Obj71_ChkDel:
00012FA4 3028 0008                  		move.w	8(a0),d0
00012FA8 0240 FF80                  		andi.w	#$FF80,d0
00012FAC 3238 F700                  		move.w	($FFFFF700).w,d1
00012FB0 0441 0080                  		subi.w	#$80,d1
00012FB4 0241 FF80                  		andi.w	#$FF80,d1
00012FB8 9041                       		sub.w	d1,d0
00012FBA 0C40 0280                  		cmpi.w	#$280,d0
00012FBE 6300                       		bls.s	Obj71_NoDel
00012FC0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012FC4 6700                       		beq.s	Obj71_Delete		; if it's zero, don't remember object
00012FC6 3440                       		movea.w	d0,a2	; load address into a2
00012FC8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012FCC 6000                       		bra.s	Obj71_Delete	; and delete object
00012FCE                            
00012FCE                            Obj71_NoDel:
00012FCE 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012FD2 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012FD4 4EFA BB58                  		jmp	DisplaySprite	; if yes, display the object
00012FD8                            ; ===========================================================================
00012FD8                            
00012FD8                            Obj71_NoDisplay:
00012FD8 4E75                       		rts	
00012FDA                            ; ===========================================================================
00012FDA                            
00012FDA                            Obj71_Delete:
00012FDA 4EFA BBA2                  		jmp	DeleteObject
00012FDE                            ; ===========================================================================
00012FDE                            ; ---------------------------------------------------------------------------
00012FDE                            ; Sprite mappings - invisible solid blocks
00012FDE                            ; ---------------------------------------------------------------------------
00012FDE                            Map_obj71:
00012FDE                            	include "_maps\obj71.asm"
00012FDE                            ; ---------------------------------------------------------------------------
00012FDE                            ; Sprite mappings - invisible solid blocks
00012FDE                            ; ---------------------------------------------------------------------------
00012FDE 0000                       		dc.w byte_114BC-Map_obj71
00012FE0 0000                       		dc.w byte_114D1-Map_obj71
00012FE2 0000                       		dc.w byte_114E6-Map_obj71
00012FE4 04                         byte_114BC:	dc.b 4
00012FE5 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012FEA F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012FEF 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012FF4 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012FF9 04                         byte_114D1:	dc.b 4
00012FFA E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012FFF E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00013004 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00013009 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001300E 04                         byte_114E6:	dc.b 4
0001300F E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00013014 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00013019 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001301E 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00013024 00                         		even
00013024 00                         		even
00013024                            
00013024                            ; ===========================================================================
00013024                            ; ---------------------------------------------------------------------------
00013024                            ; Object 5D - fans (SLZ)
00013024                            ; ---------------------------------------------------------------------------
00013024                            
00013024                            Obj5D:					; XREF: Obj_Index
00013024 7000                       		moveq	#0,d0
00013026 1028 0024                  		move.b	$24(a0),d0
0001302A 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001302E 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00013032                            ; ===========================================================================
00013032 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00013034 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00013036                            ; ===========================================================================
00013036                            
00013036                            Obj5D_Main:				; XREF: Obj5D_Index
00013036 5428 0024                  		addq.b	#2,$24(a0)
0001303A 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00013042 317C 43A0 0002             		move.w	#$43A0,2(a0)
00013048 0028 0004 0001             		ori.b	#4,1(a0)
0001304E 117C 0010 0019             		move.b	#$10,$19(a0)
00013054 117C 0004 0018             		move.b	#4,$18(a0)
0001305A                            
0001305A                            Obj5D_Delay:				; XREF: Obj5D_Index
0001305A 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00013060 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00013062 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013066 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00013068 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
0001306E 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00013074 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00013076 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001307C                            
0001307C                            Obj5D_Blow:
0001307C 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00013080 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00013084 43F8 D000                  		lea	($FFFFD000).w,a1
00013088 3029 0008                  		move.w	8(a1),d0
0001308C 9068 0008                  		sub.w	8(a0),d0
00013090 0828 0000 0022             		btst	#0,$22(a0)
00013096 6600                       		bne.s	Obj5D_ChkSonic
00013098 4440                       		neg.w	d0
0001309A                            
0001309A                            Obj5D_ChkSonic:
0001309A 0640 0050                  		addi.w	#$50,d0
0001309E 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000130A2 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000130A4 3229 000C                  		move.w	$C(a1),d1
000130A8 0641 0060                  		addi.w	#$60,d1
000130AC 9268 000C                  		sub.w	$C(a0),d1
000130B0 6500                       		bcs.s	Obj5D_Animate
000130B2 0C41 0070                  		cmpi.w	#$70,d1
000130B6 6400                       		bcc.s	Obj5D_Animate
000130B8 0440 0050                  		subi.w	#$50,d0
000130BC 6400                       		bcc.s	loc_1159A
000130BE 4640                       		not.w	d0
000130C0 D040                       		add.w	d0,d0
000130C2                            
000130C2                            loc_1159A:
000130C2 0640 0060                  		addi.w	#$60,d0
000130C6 0828 0000 0022             		btst	#0,$22(a0)
000130CC 6600                       		bne.s	loc_115A8
000130CE 4440                       		neg.w	d0
000130D0                            
000130D0                            loc_115A8:
000130D0 4400                       		neg.b	d0
000130D2 E840                       		asr.w	#4,d0
000130D4 0828 0000 0028             		btst	#0,$28(a0)
000130DA 6700                       		beq.s	Obj5D_MoveSonic
000130DC 4440                       		neg.w	d0
000130DE                            
000130DE                            Obj5D_MoveSonic:
000130DE D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000130E2                            
000130E2                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000130E2 5328 001E                  		subq.b	#1,$1E(a0)
000130E6 6A00                       		bpl.s	Obj5D_ChkDel
000130E8 117C 0000 001E             		move.b	#0,$1E(a0)
000130EE 5228 001B                  		addq.b	#1,$1B(a0)
000130F2 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000130F8 6500                       		bcs.s	loc_115D8
000130FA 117C 0000 001B             		move.b	#0,$1B(a0)
00013100                            
00013100                            loc_115D8:
00013100 7000                       		moveq	#0,d0
00013102 0828 0000 0028             		btst	#0,$28(a0)
00013108 6700                       		beq.s	loc_115E4
0001310A 7002                       		moveq	#2,d0
0001310C                            
0001310C                            loc_115E4:
0001310C D028 001B                  		add.b	$1B(a0),d0
00013110 1140 001A                  		move.b	d0,$1A(a0)
00013114                            
00013114                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00013114 6100 BA18                  		bsr.w	DisplaySprite
00013118 3028 0008                  		move.w	8(a0),d0
0001311C 0240 FF80                  		andi.w	#$FF80,d0
00013120 3238 F700                  		move.w	($FFFFF700).w,d1
00013124 0441 0080                  		subi.w	#$80,d1
00013128 0241 FF80                  		andi.w	#$FF80,d1
0001312C 9041                       		sub.w	d1,d0
0001312E 0C40 0280                  		cmpi.w	#$280,d0
00013132 6300                       		bls.s	Obj5D_NoDel
00013134 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013138 6700 BA44                  		beq.w	DeleteObject		; if it's zero, don't remember object
0001313C 3440                       		movea.w	d0,a2	; load address into a2
0001313E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00013142 6000 BA3A                  		bra.w	DeleteObject	; and delete object
00013146                            
00013146                            Obj5D_NoDel:
00013146 4E75                       		rts	
00013148                            ; ===========================================================================
00013148                            ; ---------------------------------------------------------------------------
00013148                            ; Sprite mappings - fans (SLZ)
00013148                            ; ---------------------------------------------------------------------------
00013148                            Map_obj5D:
00013148                            	include "_maps\obj5D.asm"
00013148                            ; ---------------------------------------------------------------------------
00013148                            ; Sprite mappings - fans (SLZ)
00013148                            ; ---------------------------------------------------------------------------
00013148 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001314C 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00013150 0000                       		dc.w byte_1161A-Map_obj5D
00013152 02                         byte_1161A:	dc.b 2
00013153 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00013158 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001315D 02                         byte_11625:	dc.b 2
0001315E F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013163 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013168 02                         byte_11630:	dc.b 2
00013169 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001316E 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013174 00                         		even
00013174 00                         		even
00013174                            
00013174                            ; ===========================================================================
00013174                            ; ---------------------------------------------------------------------------
00013174                            ; Object 5E - seesaws (SLZ)
00013174                            ; ---------------------------------------------------------------------------
00013174                            
00013174                            Obj5E:					; XREF: Obj_Index
00013174 7000                       		moveq	#0,d0
00013176 1028 0024                  		move.b	$24(a0),d0
0001317A 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
0001317E 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00013182 3028 0030                  		move.w	$30(a0),d0
00013186 0240 FF80                  		andi.w	#$FF80,d0
0001318A 3238 F700                  		move.w	($FFFFF700).w,d1
0001318E 0441 0080                  		subi.w	#$80,d1
00013192 0241 FF80                  		andi.w	#$FF80,d1
00013196 9041                       		sub.w	d1,d0
00013198 6B00 B9E4                  		bmi.w	DeleteObject
0001319C 0C40 0280                  		cmpi.w	#$280,d0
000131A0 6300 B98C                  		bls.w	DisplaySprite
000131A4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000131A8 6700 B9D4                  		beq.w	DeleteObject		; if it's zero, don't remember object
000131AC 3440                       		movea.w	d0,a2	; load address into a2
000131AE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000131B2 6000 B9CA                  		bra.w	DeleteObject	; and delete object		
000131B6                            ; ===========================================================================
000131B6 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000131B8 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000131BA 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000131BC 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000131BE 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000131C0 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000131C2                            ; ===========================================================================
000131C2                            
000131C2                            Obj5E_Main:				; XREF: Obj5E_Index
000131C2 5428 0024                  		addq.b	#2,$24(a0)
000131C6 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000131CE 317C 0374 0002             		move.w	#$374,2(a0)
000131D4 0028 0004 0001             		ori.b	#4,1(a0)
000131DA 117C 0004 0018             		move.b	#4,$18(a0)
000131E0 117C 0030 0019             		move.b	#$30,$19(a0)
000131E6 3168 0008 0030             		move.w	8(a0),$30(a0)
000131EC 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000131F0 6600                       		bne.s	loc_116D2	; if not, branch
000131F2 6100 C0A6                  		bsr.w	SingleObjLoad2
000131F6 6600                       		bne.s	loc_116D2
000131F8 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000131FC 5C29 0024                  		addq.b	#6,$24(a1)
00013200 3368 0008 0008             		move.w	8(a0),8(a1)
00013206 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001320C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013212 2348 003C                  		move.l	a0,$3C(a1)
00013216                            
00013216                            loc_116D2:
00013216 0828 0000 0022             		btst	#0,$22(a0)
0001321C 6700                       		beq.s	loc_116E0
0001321E 117C 0002 001A             		move.b	#2,$1A(a0)
00013224                            
00013224                            loc_116E0:
00013224 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001322A                            
0001322A                            Obj5E_Slope:				; XREF: Obj5E_Index
0001322A 1228 003A                  		move.b	$3A(a0),d1
0001322E 6100 0000                  		bsr.w	loc_11766
00013232 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00013238 0828 0000 001A             		btst	#0,$1A(a0)
0001323E 6700                       		beq.s	loc_11702
00013240 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013246                            
00013246                            loc_11702:
00013246 43F8 D000                  		lea	($FFFFD000).w,a1
0001324A 3169 0012 0038             		move.w	$12(a1),$38(a0)
00013250 323C 0030                  		move.w	#$30,d1
00013254 4EB9 0000 863E             		jsr	(SlopeObject).l
0001325A 4E75                       		rts	
0001325C                            ; ===========================================================================
0001325C                            
0001325C                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001325C 6100 0000                  		bsr.w	loc_1174A
00013260 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00013266 0828 0000 001A             		btst	#0,$1A(a0)
0001326C 6700                       		beq.s	loc_11730
0001326E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013274                            
00013274                            loc_11730:
00013274 323C 0030                  		move.w	#$30,d1
00013278 4EB9 0000 86DE             		jsr	(ExitPlatform).l
0001327E 323C 0030                  		move.w	#$30,d1
00013282 3428 0008                  		move.w	8(a0),d2
00013286 4EB9 0000 96B4             		jsr	SlopeObject2
0001328C 4E75                       		rts	
0001328E                            ; ===========================================================================
0001328E                            
0001328E                            loc_1174A:				; XREF: Obj5E_Slope2
0001328E 7202                       		moveq	#2,d1
00013290 43F8 D000                  		lea	($FFFFD000).w,a1
00013294 3028 0008                  		move.w	8(a0),d0
00013298 9069 0008                  		sub.w	8(a1),d0
0001329C 6400                       		bcc.s	loc_1175E
0001329E 4440                       		neg.w	d0
000132A0 7200                       		moveq	#0,d1
000132A2                            
000132A2                            loc_1175E:
000132A2 0C40 0008                  		cmpi.w	#8,d0
000132A6 6400                       		bcc.s	loc_11766
000132A8 7201                       		moveq	#1,d1
000132AA                            
000132AA                            loc_11766:
000132AA 1028 001A                  		move.b	$1A(a0),d0
000132AE B001                       		cmp.b	d1,d0
000132B0 6700                       		beq.s	locret_11790
000132B2 6400                       		bcc.s	loc_11772
000132B4 5400                       		addq.b	#2,d0
000132B6                            
000132B6                            loc_11772:
000132B6 5300                       		subq.b	#1,d0
000132B8 1140 001A                  		move.b	d0,$1A(a0)
000132BC 1141 003A                  		move.b	d1,$3A(a0)
000132C0 08A8 0000 0001             		bclr	#0,1(a0)
000132C6 0828 0001 001A             		btst	#1,$1A(a0)
000132CC 6700                       		beq.s	locret_11790
000132CE 08E8 0000 0001             		bset	#0,1(a0)
000132D4                            
000132D4                            locret_11790:
000132D4 4E75                       		rts	
000132D6                            ; ===========================================================================
000132D6                            
000132D6                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000132D6 5428 0024                  		addq.b	#2,$24(a0)
000132DA 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000132E2 317C 04F0 0002             		move.w	#$4F0,2(a0)
000132E8 0028 0004 0001             		ori.b	#4,1(a0)
000132EE 117C 0004 0018             		move.b	#4,$18(a0)
000132F4 117C 008B 0020             		move.b	#$8B,$20(a0)
000132FA 117C 000C 0019             		move.b	#$C,$19(a0)
00013300 3168 0008 0030             		move.w	8(a0),$30(a0)
00013306 0668 0028 0008             		addi.w	#$28,8(a0)
0001330C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00013312 117C 0001 001A             		move.b	#1,$1A(a0)
00013318 0828 0000 0022             		btst	#0,$22(a0)
0001331E 6700                       		beq.s	Obj5E_MoveSpike
00013320 0468 0050 0008             		subi.w	#$50,8(a0)
00013326 117C 0002 003A             		move.b	#2,$3A(a0)
0001332C                            
0001332C                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001332C 2268 003C                  		movea.l	$3C(a0),a1
00013330 7000                       		moveq	#0,d0
00013332 1028 003A                  		move.b	$3A(a0),d0
00013336 9029 003A                  		sub.b	$3A(a1),d0
0001333A 6700                       		beq.s	loc_1183E
0001333C 6400                       		bcc.s	loc_117FC
0001333E 4400                       		neg.b	d0
00013340                            
00013340                            loc_117FC:
00013340 323C F7E8                  		move.w	#-$818,d1
00013344 343C FEEC                  		move.w	#-$114,d2
00013348 0C00 0001                  		cmpi.b	#1,d0
0001334C 6700                       		beq.s	loc_11822
0001334E 323C F510                  		move.w	#-$AF0,d1
00013352 343C FF34                  		move.w	#-$CC,d2
00013356 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001335C 6D00                       		blt.s	loc_11822
0001335E 323C F200                  		move.w	#-$E00,d1
00013362 343C FF60                  		move.w	#-$A0,d2
00013366                            
00013366                            loc_11822:
00013366 3141 0012                  		move.w	d1,$12(a0)
0001336A 3142 0010                  		move.w	d2,$10(a0)
0001336E 3028 0008                  		move.w	8(a0),d0
00013372 9068 0030                  		sub.w	$30(a0),d0
00013376 6400                       		bcc.s	loc_11838
00013378 4468 0010                  		neg.w	$10(a0)
0001337C                            
0001337C                            loc_11838:
0001337C 5428 0024                  		addq.b	#2,$24(a0)
00013380 6000                       		bra.s	Obj5E_SpikeFall
00013382                            ; ===========================================================================
00013382                            
00013382                            loc_1183E:				; XREF: Obj5E_MoveSpike
00013382 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00013388 7000                       		moveq	#0,d0
0001338A 1029 001A                  		move.b	$1A(a1),d0
0001338E 343C 0028                  		move.w	#$28,d2
00013392 3228 0008                  		move.w	8(a0),d1
00013396 9268 0030                  		sub.w	$30(a0),d1
0001339A 6400                       		bcc.s	loc_1185C
0001339C 4442                       		neg.w	d2
0001339E 5440                       		addq.w	#2,d0
000133A0                            
000133A0                            loc_1185C:
000133A0 D040                       		add.w	d0,d0
000133A2 3228 0034                  		move.w	$34(a0),d1
000133A6 D272 0000                  		add.w	(a2,d0.w),d1
000133AA 3141 000C                  		move.w	d1,$C(a0)
000133AE D468 0030                  		add.w	$30(a0),d2
000133B2 3142 0008                  		move.w	d2,8(a0)
000133B6 4268 000E                  		clr.w	$E(a0)
000133BA 4268 000A                  		clr.w	$A(a0)
000133BE 4E75                       		rts	
000133C0                            ; ===========================================================================
000133C0                            
000133C0                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000133C0 4A68 0012                  		tst.w	$12(a0)
000133C4 6A00                       		bpl.s	loc_1189A
000133C6 6100 B72C                  		bsr.w	ObjectFall
000133CA 3028 0034                  		move.w	$34(a0),d0
000133CE 0440 002F                  		subi.w	#$2F,d0
000133D2 B068 000C                  		cmp.w	$C(a0),d0
000133D6 6E00                       		bgt.s	locret_11898
000133D8 6100 B71A                  		bsr.w	ObjectFall
000133DC                            
000133DC                            locret_11898:
000133DC 4E75                       		rts	
000133DE                            ; ===========================================================================
000133DE                            
000133DE                            loc_1189A:				; XREF: Obj5E_SpikeFall
000133DE 6100 B714                  		bsr.w	ObjectFall
000133E2 2268 003C                  		movea.l	$3C(a0),a1
000133E6 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000133EC 7000                       		moveq	#0,d0
000133EE 1029 001A                  		move.b	$1A(a1),d0
000133F2 3228 0008                  		move.w	8(a0),d1
000133F6 9268 0030                  		sub.w	$30(a0),d1
000133FA 6400                       		bcc.s	loc_118BA
000133FC 5440                       		addq.w	#2,d0
000133FE                            
000133FE                            loc_118BA:
000133FE D040                       		add.w	d0,d0
00013400 3228 0034                  		move.w	$34(a0),d1
00013404 D272 0000                  		add.w	(a2,d0.w),d1
00013408 B268 000C                  		cmp.w	$C(a0),d1
0001340C 6E00                       		bgt.s	locret_11938
0001340E 2268 003C                  		movea.l	$3C(a0),a1
00013412 7202                       		moveq	#2,d1
00013414 4A68 0010                  		tst.w	$10(a0)
00013418 6B00                       		bmi.s	Obj5E_Spring
0001341A 7200                       		moveq	#0,d1
0001341C                            
0001341C                            Obj5E_Spring:
0001341C 1341 003A                  		move.b	d1,$3A(a1)
00013420 1141 003A                  		move.b	d1,$3A(a0)
00013424 B229 001A                  		cmp.b	$1A(a1),d1
00013428 6700                       		beq.s	loc_1192C
0001342A 08A9 0003 0022             		bclr	#3,$22(a1)
00013430 6700                       		beq.s	loc_1192C
00013432 4229 0025                  		clr.b	$25(a1)
00013436 137C 0002 0024             		move.b	#2,$24(a1)
0001343C 45F8 D000                  		lea	($FFFFD000).w,a2
00013440 3568 0012 0012             		move.w	$12(a0),$12(a2)
00013446 446A 0012                  		neg.w	$12(a2)
0001344A 08EA 0001 0022             		bset	#1,$22(a2)
00013450 08AA 0003 0022             		bclr	#3,$22(a2)
00013456 422A 003C                  		clr.b	$3C(a2)
0001345A 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00013460 157C 0002 0024             		move.b	#2,$24(a2)
00013466 303C 00CC                  		move.w	#$CC,d0
0001346A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play spring sound
00013470                            
00013470                            loc_1192C:
00013470 4268 0010                  		clr.w	$10(a0)
00013474 4268 0012                  		clr.w	$12(a0)
00013478 5528 0024                  		subq.b	#2,$24(a0)
0001347C                            
0001347C                            locret_11938:
0001347C 4E75                       		rts	
0001347E                            ; ===========================================================================
0001347E FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00013488                            
00013488                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000134B8                            		even
000134B8                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000134E8                            		even
000134E8                            ; ---------------------------------------------------------------------------
000134E8                            ; Sprite mappings - seesaws (SLZ)
000134E8                            ; ---------------------------------------------------------------------------
000134E8                            Map_obj5E:
000134E8                            	include "_maps\obj5E.asm"
000134E8                            ; ---------------------------------------------------------------------------
000134E8                            ; Sprite mappings - seesaws (SLZ)
000134E8                            ; ---------------------------------------------------------------------------
000134E8 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000134EC 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000134F0 07                         byte_119AC:	dc.b 7
000134F1 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000134F6 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000134FB E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013500 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013505 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001350A F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001350F FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013514 04                         byte_119D0:	dc.b 4
00013515 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001351A E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001351F E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013524 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001352A 00                         		even
0001352A 00                         		even
0001352A                            
0001352A                            ; ---------------------------------------------------------------------------
0001352A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001352A                            ; ---------------------------------------------------------------------------
0001352A                            Map_obj5Ea:
0001352A                            	include "_maps\obj5Eballs.asm"
0001352A                            ; ---------------------------------------------------------------------------
0001352A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001352A                            ; ---------------------------------------------------------------------------
0001352A 0000                       		dc.w byte_119EA-Map_obj5Ea
0001352C 0000                       		dc.w byte_119F0-Map_obj5Ea
0001352E 01                         byte_119EA:	dc.b 1
0001352F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013534 01                         byte_119F0:	dc.b 1
00013535 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001353A                            		even
0001353A                            		even
0001353A                            
0001353A                            ; ===========================================================================
0001353A                            ; ---------------------------------------------------------------------------
0001353A                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001353A                            ; ---------------------------------------------------------------------------
0001353A                            
0001353A                            Obj5F:					; XREF: Obj_Index
0001353A 7000                       		moveq	#0,d0
0001353C 1028 0024                  		move.b	$24(a0),d0
00013540 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00013544 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00013548                            ; ===========================================================================
00013548 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001354A 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001354C 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001354E 0000                       		dc.w Obj5F_End-Obj5F_Index
00013550                            ; ===========================================================================
00013550                            
00013550                            Obj5F_Main:				; XREF: Obj5F_Index
00013550 5428 0024                  		addq.b	#2,$24(a0)
00013554 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001355C 317C 0400 0002             		move.w	#$400,2(a0)
00013562 0028 0004 0001             		ori.b	#4,1(a0)
00013568 117C 0003 0018             		move.b	#3,$18(a0)
0001356E 117C 000C 0019             		move.b	#$C,$19(a0)
00013574 1028 0028                  		move.b	$28(a0),d0
00013578 6700                       		beq.s	loc_11A3C
0001357A 1140 0024                  		move.b	d0,$24(a0)
0001357E 4E75                       		rts	
00013580                            ; ===========================================================================
00013580                            
00013580                            loc_11A3C:
00013580 117C 009A 0020             		move.b	#$9A,$20(a0)
00013586 0868 0000 0022             		bchg	#0,$22(a0)
0001358C                            
0001358C                            Obj5F_Action:				; XREF: Obj5F_Index
0001358C 7000                       		moveq	#0,d0
0001358E 1028 0025                  		move.b	$25(a0),d0
00013592 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00013596 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001359A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000135A0 6100 85EC                  		bsr.w	AnimateSprite
000135A4 6000 DBD2                  		bra.w	MarkObjGone
000135A8                            ; ===========================================================================
000135A8 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000135AA 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000135AC 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000135AE                            ; ===========================================================================
000135AE                            
000135AE                            Obj5F_Walk:				; XREF: Obj5F_Index2
000135AE 6100 0000                  		bsr.w	Obj5F_ChkSonic
000135B2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000135B6 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000135B8 5428 0025                  		addq.b	#2,$25(a0)
000135BC 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000135C2 317C 0010 0010             		move.w	#$10,$10(a0)
000135C8 117C 0001 001C             		move.b	#1,$1C(a0)
000135CE 0868 0000 0022             		bchg	#0,$22(a0)
000135D4 6700                       		beq.s	locret_11A96
000135D6 4468 0010                  		neg.w	$10(a0)		; change direction
000135DA                            
000135DA                            locret_11A96:
000135DA 4E75                       		rts	
000135DC                            ; ===========================================================================
000135DC                            
000135DC                            Obj5F_Wait:				; XREF: Obj5F_Index2
000135DC 6100 0000                  		bsr.w	Obj5F_ChkSonic
000135E0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000135E4 6B00                       		bmi.s	loc_11AA8
000135E6 6100 B52C                  		bsr.w	SpeedToPos
000135EA 4E75                       		rts	
000135EC                            ; ===========================================================================
000135EC                            
000135EC                            loc_11AA8:
000135EC 5528 0025                  		subq.b	#2,$25(a0)
000135F0 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000135F6 4268 0010                  		clr.w	$10(a0)		; stop walking
000135FA 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00013600 4E75                       		rts	
00013602                            ; ===========================================================================
00013602                            
00013602                            Obj5F_Explode:				; XREF: Obj5F_Index2
00013602 5368 0030                  		subq.w	#1,$30(a0)
00013606 6A00                       		bpl.s	locret_11AD0
00013608 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001360C 117C 0000 0024             		move.b	#0,$24(a0)
00013612                            
00013612                            locret_11AD0:
00013612 4E75                       		rts	
00013614                            ; ===========================================================================
00013614                            
00013614                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00013614 3038 D008                  		move.w	($FFFFD008).w,d0
00013618 9068 0008                  		sub.w	8(a0),d0
0001361C 6400                       		bcc.s	loc_11ADE
0001361E 4440                       		neg.w	d0
00013620                            
00013620                            loc_11ADE:
00013620 0C40 0060                  		cmpi.w	#$60,d0
00013624 6400                       		bcc.s	locret_11B5E
00013626 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001362A 9068 000C                  		sub.w	$C(a0),d0
0001362E 6400                       		bcc.s	Obj5F_MakeFuse
00013630 4440                       		neg.w	d0
00013632                            
00013632                            Obj5F_MakeFuse:
00013632 0C40 0060                  		cmpi.w	#$60,d0
00013636 6400                       		bcc.s	locret_11B5E
00013638 4A78 FE08                  		tst.w	($FFFFFE08).w
0001363C 6600                       		bne.s	locret_11B5E
0001363E 117C 0004 0025             		move.b	#4,$25(a0)
00013644 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001364A 4268 0010                  		clr.w	$10(a0)
0001364E 117C 0002 001C             		move.b	#2,$1C(a0)
00013654 6100 BC44                  		bsr.w	SingleObjLoad2
00013658 6600                       		bne.s	locret_11B5E
0001365A 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001365E 3368 0008 0008             		move.w	8(a0),8(a1)
00013664 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001366A 3368 000C 0034             		move.w	$C(a0),$34(a1)
00013670 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013676 137C 0004 0028             		move.b	#4,$28(a1)
0001367C 137C 0003 001C             		move.b	#3,$1C(a1)
00013682 337C 0010 0012             		move.w	#$10,$12(a1)
00013688 0828 0001 0022             		btst	#1,$22(a0)
0001368E 6700                       		beq.s	loc_11B54
00013690 4469 0012                  		neg.w	$12(a1)
00013694                            
00013694                            loc_11B54:
00013694 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001369A 2348 003C                  		move.l	a0,$3C(a1)
0001369E                            
0001369E                            locret_11B5E:
0001369E 4E75                       		rts	
000136A0                            ; ===========================================================================
000136A0                            
000136A0                            Obj5F_Display:				; XREF: Obj5F_Index
000136A0 6100                       		bsr.s	loc_11B70
000136A2 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000136A8 6100 84E4                  		bsr.w	AnimateSprite
000136AC 6000 DACA                  		bra.w	MarkObjGone
000136B0                            ; ===========================================================================
000136B0                            
000136B0                            loc_11B70:
000136B0 5368 0030                  		subq.w	#1,$30(a0)
000136B4 6B00                       		bmi.s	loc_11B7C
000136B6 6100 B45C                  		bsr.w	SpeedToPos
000136BA 4E75                       		rts	
000136BC                            ; ===========================================================================
000136BC                            
000136BC                            loc_11B7C:
000136BC 4268 0030                  		clr.w	$30(a0)
000136C0 4228 0024                  		clr.b	$24(a0)
000136C4 3168 0034 000C             		move.w	$34(a0),$C(a0)
000136CA 7203                       		moveq	#3,d1
000136CC 2248                       		movea.l	a0,a1
000136CE 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000136D4 6000                       		bra.s	Obj5F_MakeShrap
000136D6                            ; ===========================================================================
000136D6                            
000136D6                            Obj5F_Loop:
000136D6 6100 BBC2                  		bsr.w	SingleObjLoad2
000136DA 6600                       		bne.s	loc_11BCE
000136DC                            
000136DC                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000136DC 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000136E0 3368 0008 0008             		move.w	8(a0),8(a1)
000136E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000136EC 137C 0006 0028             		move.b	#6,$28(a1)
000136F2 137C 0004 001C             		move.b	#4,$1C(a1)
000136F8 335A 0010                  		move.w	(a2)+,$10(a1)
000136FC 335A 0012                  		move.w	(a2)+,$12(a1)
00013700 137C 0098 0020             		move.b	#$98,$20(a1)
00013706 08E9 0007 0001             		bset	#7,1(a1)
0001370C                            
0001370C                            loc_11BCE:
0001370C 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00013710                            
00013710 117C 0006 0024             		move.b	#6,$24(a0)
00013716                            
00013716                            Obj5F_End:				; XREF: Obj5F_Index
00013716 6100 B3FC                  		bsr.w	SpeedToPos
0001371A 0668 0018 0012             		addi.w	#$18,$12(a0)
00013720 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013726 6100 8466                  		bsr.w	AnimateSprite
0001372A 4A28 0001                  		tst.b	1(a0)
0001372E 6A00 B44E                  		bpl.w	DeleteObject
00013732 6000 B3FA                  		bra.w	DisplaySprite
00013736                            ; ===========================================================================
00013736 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00013746                            
00013746                            Ani_obj5F:
00013746                            	include "_anim\obj5F.asm"
00013746                            ; ---------------------------------------------------------------------------
00013746                            ; Animation script - Bomb enemy
00013746                            ; ---------------------------------------------------------------------------
00013746 0000                       		dc.w byte_11C12-Ani_obj5F
00013748 0000                       		dc.w byte_11C16-Ani_obj5F
0001374A 0000                       		dc.w byte_11C1C-Ani_obj5F
0001374C 0000                       		dc.w byte_11C20-Ani_obj5F
0001374E 0000                       		dc.w byte_11C24-Ani_obj5F
00013750 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00013754 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001375A 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001375E 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00013762 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00013766                            		even
00013766                            		even
00013766                            
00013766                            ; ---------------------------------------------------------------------------
00013766                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013766                            ; ---------------------------------------------------------------------------
00013766                            Map_obj5F:
00013766                            	include "_maps\obj5F.asm"
00013766                            ; ---------------------------------------------------------------------------
00013766                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013766                            ; ---------------------------------------------------------------------------
00013766 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001376A 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001376E 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00013772 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00013776 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001377A 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001377E 03                         byte_11C40:	dc.b 3
0001377F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013784 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013789 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001378E 03                         byte_11C50:	dc.b 3
0001378F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013794 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013799 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001379E 03                         byte_11C60:	dc.b 3
0001379F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000137A4 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000137A9 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000137AE 03                         byte_11C70:	dc.b 3
000137AF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000137B4 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000137B9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000137BE 03                         byte_11C80:	dc.b 3
000137BF F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000137C4 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000137C9 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000137CE 03                         byte_11C90:	dc.b 3
000137CF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000137D4 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000137D9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000137DE 02                         byte_11CA0:	dc.b 2
000137DF F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000137E4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000137E9 02                         byte_11CAB:	dc.b 2
000137EA F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000137EF 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000137F4 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000137F5 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000137FA 01                         byte_11CBC:	dc.b 1			; fuse
000137FB E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013800 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00013801 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00013806 01                         byte_11CC8:	dc.b 1			; fireball
00013807 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001380C                            		even
0001380C                            		even
0001380C                            
0001380C                            ; ===========================================================================
0001380C                            ; ---------------------------------------------------------------------------
0001380C                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001380C                            ; ---------------------------------------------------------------------------
0001380C                            
0001380C                            Obj60:					; XREF: Obj_Index
0001380C 7000                       		moveq	#0,d0
0001380E 1028 0024                  		move.b	$24(a0),d0
00013812 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00013816 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001381A                            ; ===========================================================================
0001381A 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001381C 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001381E 0000                       		dc.w Obj60_Display-Obj60_Index
00013820 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00013822 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00013824                            ; ===========================================================================
00013824                            
00013824                            Obj60_Main:				; XREF: Obj60_Index
00013824 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001382C 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00013832 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00013838 6700                       		beq.s	loc_11D02
0001383A 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00013840                            
00013840                            loc_11D02:
00013840 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00013846 6600                       		bne.s	loc_11D10
00013848 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001384E                            
0001384E                            loc_11D10:
0001384E 0028 0004 0001             		ori.b	#4,1(a0)
00013854 117C 0004 0018             		move.b	#4,$18(a0)
0001385A 117C 000B 0020             		move.b	#$B,$20(a0)
00013860 117C 000C 0019             		move.b	#$C,$19(a0)
00013866 7400                       		moveq	#0,d2
00013868 45E8 0037                  		lea	$37(a0),a2
0001386C 264A                       		movea.l	a2,a3
0001386E 524A                       		addq.w	#1,a2
00013870 7203                       		moveq	#3,d1
00013872                            
00013872                            Obj60_MakeOrbs:
00013872 6100 BA26                  		bsr.w	SingleObjLoad2
00013876 6600                       		bne.s	loc_11D90
00013878 5213                       		addq.b	#1,(a3)
0001387A 3A09                       		move.w	a1,d5
0001387C 0445 D000                  		subi.w	#-$3000,d5
00013880 EC4D                       		lsr.w	#6,d5
00013882 0245 007F                  		andi.w	#$7F,d5
00013886 14C5                       		move.b	d5,(a2)+
00013888 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001388A 137C 0006 0024             		move.b	#6,$24(a1)
00013890 2368 0004 0004             		move.l	4(a0),4(a1)
00013896 3368 0002 0002             		move.w	2(a0),2(a1)
0001389C 0029 0004 0001             		ori.b	#4,1(a1)
000138A2 137C 0004 0018             		move.b	#4,$18(a1)
000138A8 137C 0008 0019             		move.b	#8,$19(a1)
000138AE 137C 0003 001A             		move.b	#3,$1A(a1)
000138B4 137C 0098 0020             		move.b	#$98,$20(a1)
000138BA 1342 0026                  		move.b	d2,$26(a1)
000138BE 0602 0040                  		addi.b	#$40,d2
000138C2 2348 003C                  		move.l	a0,$3C(a1)
000138C6 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000138CA                            
000138CA                            loc_11D90:
000138CA 7001                       		moveq	#1,d0
000138CC 0828 0000 0022             		btst	#0,$22(a0)
000138D2 6700                       		beq.s	Obj60_Move
000138D4 4440                       		neg.w	d0
000138D6                            
000138D6                            Obj60_Move:
000138D6 1140 0036                  		move.b	d0,$36(a0)
000138DA 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000138E0 5428 0024                  		addq.b	#2,$24(a0)
000138E4 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000138EA 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000138F0 6700                       		beq.s	locret_11DBC	; if not, branch
000138F2 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000138F6                            
000138F6                            locret_11DBC:
000138F6 4E75                       		rts	
000138F8                            ; ===========================================================================
000138F8                            
000138F8                            Obj60_ChkSonic:				; XREF: Obj60_Index
000138F8 3038 D008                  		move.w	($FFFFD008).w,d0
000138FC 9068 0008                  		sub.w	8(a0),d0
00013900 6400                       		bcc.s	loc_11DCA
00013902 4440                       		neg.w	d0
00013904                            
00013904                            loc_11DCA:
00013904 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013908 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001390A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001390E 9068 000C                  		sub.w	$C(a0),d0
00013912 6400                       		bcc.s	loc_11DDC
00013914 4440                       		neg.w	d0
00013916                            
00013916                            loc_11DDC:
00013916 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001391A 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001391C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00013920 6600                       		bne.s	Obj60_Animate	; if yes, branch
00013922 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00013928                            
00013928                            Obj60_Animate:
00013928 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001392E 6100 825E                  		bsr.w	AnimateSprite
00013932 6000 0000                  		bra.w	Obj60_ChkDel
00013936                            ; ===========================================================================
00013936                            
00013936                            Obj60_Display:				; XREF: Obj60_Index
00013936 6100 B1DC                  		bsr.w	SpeedToPos
0001393A                            
0001393A                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001393A 3028 0008                  		move.w	8(a0),d0
0001393E 0240 FF80                  		andi.w	#$FF80,d0
00013942 3238 F700                  		move.w	($FFFFF700).w,d1
00013946 0441 0080                  		subi.w	#$80,d1
0001394A 0241 FF80                  		andi.w	#$FF80,d1
0001394E 9041                       		sub.w	d1,d0
00013950 0C40 0280                  		cmpi.w	#$280,d0
00013954 6200 0000                  		bhi.w	Obj60_ChkGone
00013958 6000 B1D4                  		bra.w	DisplaySprite
0001395C                            ; ===========================================================================
0001395C                            
0001395C                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001395C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013960 6700                       		beq.s	loc_11E34		; if it's zero, don't remember object
00013962 3440                       		movea.w	d0,a2	; load address into a2
00013964 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00013968                            
00013968                            loc_11E34:
00013968 45E8 0037                  		lea	$37(a0),a2
0001396C 7400                       		moveq	#0,d2
0001396E 141A                       		move.b	(a2)+,d2
00013970 5342                       		subq.w	#1,d2
00013972 6500                       		bcs.s	Obj60_Delete
00013974                            
00013974                            loc_11E40:
00013974 7000                       		moveq	#0,d0
00013976 101A                       		move.b	(a2)+,d0
00013978 ED48                       		lsl.w	#6,d0
0001397A 0680 00FF D000             		addi.l	#$FFD000,d0
00013980 2240                       		movea.l	d0,a1
00013982 6100 B1FC                  		bsr.w	DeleteObject2
00013986 51CA FFEC                  		dbf	d2,loc_11E40
0001398A                            
0001398A                            Obj60_Delete:
0001398A 6000 B1F2                  		bra.w	DeleteObject
0001398E                            ; ===========================================================================
0001398E                            
0001398E                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001398E 2268 003C                  		movea.l	$3C(a0),a1
00013992 0C11 0060                  		cmpi.b	#$60,0(a1)
00013996 6600 B1E6                  		bne.w	DeleteObject
0001399A 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000139A0 6600                       		bne.s	Obj60_Circle
000139A2 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000139A8 6600                       		bne.s	Obj60_Circle
000139AA 5428 0024                  		addq.b	#2,$24(a0)
000139AE 5329 0037                  		subq.b	#1,$37(a1)
000139B2 6600                       		bne.s	Obj60_FireOrb
000139B4 5429 0024                  		addq.b	#2,$24(a1)
000139B8                            
000139B8                            Obj60_FireOrb:
000139B8 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000139BE 0829 0000 0022             		btst	#0,$22(a1)
000139C4 6700                       		beq.s	Obj60_Display2
000139C6 4468 0010                  		neg.w	$10(a0)
000139CA                            
000139CA                            Obj60_Display2:
000139CA 6000 B162                  		bra.w	DisplaySprite
000139CE                            ; ===========================================================================
000139CE                            
000139CE                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000139CE 1028 0026                  		move.b	$26(a0),d0
000139D2 4EB9 0000 29F6             		jsr	(CalcSine).l
000139D8 E841                       		asr.w	#4,d1
000139DA D269 0008                  		add.w	8(a1),d1
000139DE 3141 0008                  		move.w	d1,8(a0)
000139E2 E840                       		asr.w	#4,d0
000139E4 D069 000C                  		add.w	$C(a1),d0
000139E8 3140 000C                  		move.w	d0,$C(a0)
000139EC 1029 0036                  		move.b	$36(a1),d0
000139F0 D128 0026                  		add.b	d0,$26(a0)
000139F4 6000 B138                  		bra.w	DisplaySprite
000139F8                            ; ===========================================================================
000139F8                            
000139F8                            Obj60_ChkDel2:				; XREF: Obj60_Index
000139F8 6100 B11A                  		bsr.w	SpeedToPos
000139FC 4A28 0001                  		tst.b	1(a0)
00013A00 6A00 B17C                  		bpl.w	DeleteObject
00013A04 6000 B128                  		bra.w	DisplaySprite
00013A08                            ; ===========================================================================
00013A08                            Ani_obj60:
00013A08                            	include "_anim\obj60.asm"
00013A08                            ; ---------------------------------------------------------------------------
00013A08                            ; Animation script - Orbinaut enemy
00013A08                            ; ---------------------------------------------------------------------------
00013A08 0000                       		dc.w byte_11EDA-Ani_obj60
00013A0A 0000                       		dc.w byte_11EDE-Ani_obj60
00013A0C 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00013A10 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00013A16                            		even
00013A16                            		even
00013A16                            
00013A16                            ; ---------------------------------------------------------------------------
00013A16                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013A16                            ; ---------------------------------------------------------------------------
00013A16                            Map_obj60:
00013A16                            	include "_maps\obj60.asm"
00013A16                            ; ---------------------------------------------------------------------------
00013A16                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013A16                            ; ---------------------------------------------------------------------------
00013A16 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00013A1A 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00013A1E 01                         byte_11EEC:	dc.b 1
00013A1F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013A24 01                         byte_11EF2:	dc.b 1
00013A25 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013A2A 01                         byte_11EF8:	dc.b 1
00013A2B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00013A30 01                         byte_11EFE:	dc.b 1
00013A31 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013A36                            		even
00013A36                            		even
00013A36                            
00013A36                            ; ===========================================================================
00013A36                            ; ---------------------------------------------------------------------------
00013A36                            ; Object 16 - harpoon (LZ)
00013A36                            ; ---------------------------------------------------------------------------
00013A36                            
00013A36                            Obj16:					; XREF: Obj_Index
00013A36 7000                       		moveq	#0,d0
00013A38 1028 0024                  		move.b	$24(a0),d0
00013A3C 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00013A40 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00013A44                            ; ===========================================================================
00013A44 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00013A46 0000                       		dc.w Obj16_Move-Obj16_Index
00013A48 0000                       		dc.w Obj16_Wait-Obj16_Index
00013A4A                            ; ===========================================================================
00013A4A                            
00013A4A                            Obj16_Main:				; XREF: Obj16_Index
00013A4A 5428 0024                  		addq.b	#2,$24(a0)
00013A4E 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00013A56 317C 03CC 0002             		move.w	#$3CC,2(a0)
00013A5C 0028 0004 0001             		ori.b	#4,1(a0)
00013A62 117C 0004 0018             		move.b	#4,$18(a0)
00013A68 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00013A6E 117C 0014 0019             		move.b	#$14,$19(a0)
00013A74 317C 003C 0030             		move.w	#60,$30(a0)
00013A7A                            
00013A7A                            Obj16_Move:				; XREF: Obj16_Index
00013A7A 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00013A80 6100 810C                  		bsr.w	AnimateSprite
00013A84 7000                       		moveq	#0,d0
00013A86 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00013A8A 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00013A90 6000 D6E6                  		bra.w	MarkObjGone
00013A94                            ; ===========================================================================
00013A94 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013A9A                            ; ===========================================================================
00013A9A                            
00013A9A                            Obj16_Wait:				; XREF: Obj16_Index
00013A9A 5368 0030                  		subq.w	#1,$30(a0)
00013A9E 6A00                       		bpl.s	Obj16_ChkDel
00013AA0 317C 003C 0030             		move.w	#60,$30(a0)
00013AA6 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00013AAA 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00013AB0                            
00013AB0                            Obj16_ChkDel:
00013AB0 6000 D6C6                  		bra.w	MarkObjGone
00013AB4                            ; ===========================================================================
00013AB4                            Ani_obj16:
00013AB4                            	include "_anim\obj16.asm"
00013AB4                            ; ---------------------------------------------------------------------------
00013AB4                            ; Animation script - harpoon (LZ)
00013AB4                            ; ---------------------------------------------------------------------------
00013AB4 0000                       		dc.w byte_11F8A-Ani_obj16
00013AB6 0000                       		dc.w byte_11F8E-Ani_obj16
00013AB8 0000                       		dc.w byte_11F92-Ani_obj16
00013ABA 0000                       		dc.w byte_11F96-Ani_obj16
00013ABC 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00013AC0 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00013AC4 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00013AC8 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00013ACC                            		even
00013ACC                            		even
00013ACC                            
00013ACC                            ; ---------------------------------------------------------------------------
00013ACC                            ; Sprite mappings - harpoon (LZ)
00013ACC                            ; ---------------------------------------------------------------------------
00013ACC                            Map_obj16:
00013ACC                            	include "_maps\obj16.asm"
00013ACC                            ; ---------------------------------------------------------------------------
00013ACC                            ; Sprite mappings - harpoon (LZ)
00013ACC                            ; ---------------------------------------------------------------------------
00013ACC 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00013AD0 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00013AD4 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00013AD8 01                         byte_11FA6:	dc.b 1
00013AD9 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00013ADE 01                         byte_11FAC:	dc.b 1
00013ADF FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00013AE4 02                         byte_11FB2:	dc.b 2
00013AE5 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00013AEA FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00013AEF 01                         byte_11FBD:	dc.b 1
00013AF0 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00013AF5 01                         byte_11FC3:	dc.b 1
00013AF6 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00013AFB 02                         byte_11FC9:	dc.b 2
00013AFC D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00013B01 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00013B06                            		even
00013B06                            		even
00013B06                            
00013B06                            ; ===========================================================================
00013B06                            ; ---------------------------------------------------------------------------
00013B06                            ; Object 61 - blocks (LZ)
00013B06                            ; ---------------------------------------------------------------------------
00013B06                            
00013B06                            Obj61:					; XREF: Obj_Index
00013B06 7000                       		moveq	#0,d0
00013B08 1028 0024                  		move.b	$24(a0),d0
00013B0C 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00013B10 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00013B14                            ; ===========================================================================
00013B14 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00013B16 0000                       		dc.w Obj61_Action-Obj61_Index
00013B18                            
00013B18 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00013B1A 200C                       		dc.b $20, $C
00013B1C 1010                       		dc.b $10, $10
00013B1E 1010                       		dc.b $10, $10
00013B20                            ; ===========================================================================
00013B20                            
00013B20                            Obj61_Main:				; XREF: Obj61_Index
00013B20 5428 0024                  		addq.b	#2,$24(a0)
00013B24 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00013B2C 317C 43E6 0002             		move.w	#$43E6,2(a0)
00013B32 117C 0004 0001             		move.b	#4,1(a0)
00013B38 117C 0003 0018             		move.b	#3,$18(a0)
00013B3E 7000                       		moveq	#0,d0
00013B40 1028 0028                  		move.b	$28(a0),d0
00013B44 E648                       		lsr.w	#3,d0
00013B46 0240 000E                  		andi.w	#$E,d0
00013B4A 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00013B4E 115A 0019                  		move.b	(a2)+,$19(a0)
00013B52 1152 0016                  		move.b	(a2),$16(a0)
00013B56 E248                       		lsr.w	#1,d0
00013B58 1140 001A                  		move.b	d0,$1A(a0)
00013B5C 3168 0008 0034             		move.w	8(a0),$34(a0)
00013B62 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013B68 1028 0028                  		move.b	$28(a0),d0
00013B6C 0200 000F                  		andi.b	#$F,d0
00013B70 6700                       		beq.s	Obj61_Action
00013B72 0C00 0007                  		cmpi.b	#7,d0
00013B76 6700                       		beq.s	Obj61_Action
00013B78 117C 0001 0038             		move.b	#1,$38(a0)
00013B7E                            
00013B7E                            Obj61_Action:				; XREF: Obj61_Index
00013B7E 3F28 0008                  		move.w	8(a0),-(sp)
00013B82 7000                       		moveq	#0,d0
00013B84 1028 0028                  		move.b	$28(a0),d0
00013B88 0240 000F                  		andi.w	#$F,d0
00013B8C D040                       		add.w	d0,d0
00013B8E 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00013B92 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013B96 381F                       		move.w	(sp)+,d4
00013B98 4A28 0001                  		tst.b	1(a0)
00013B9C 6A00                       		bpl.s	Obj61_ChkDel
00013B9E 7200                       		moveq	#0,d1
00013BA0 1228 0019                  		move.b	$19(a0),d1
00013BA4 0641 000B                  		addi.w	#$B,d1
00013BA8 7400                       		moveq	#0,d2
00013BAA 1428 0016                  		move.b	$16(a0),d2
00013BAE 3602                       		move.w	d2,d3
00013BB0 5243                       		addq.w	#1,d3
00013BB2 6100 D8E8                  		bsr.w	SolidObject
00013BB6 1144 003F                  		move.b	d4,$3F(a0)
00013BBA 6100 0000                  		bsr.w	loc_12180
00013BBE                            
00013BBE                            Obj61_ChkDel:
00013BBE 3028 0034                  		move.w	$34(a0),d0
00013BC2 0240 FF80                  		andi.w	#$FF80,d0
00013BC6 3238 F700                  		move.w	($FFFFF700).w,d1
00013BCA 0441 0080                  		subi.w	#$80,d1
00013BCE 0241 FF80                  		andi.w	#$FF80,d1
00013BD2 9041                       		sub.w	d1,d0
00013BD4 0C40 0280                  		cmpi.w	#$280,d0
00013BD8 6300 AF54                  		bls.w	DisplaySprite
00013BDC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013BE0 6700 AF9C                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00013BE4 3440                       		movea.w	d0,a2	; load address into a2
00013BE6 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00013BEA 6000 AF92                  		bra.w	DeleteObject
00013BEE                            ; ===========================================================================
00013BEE 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013BF2 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013BF6 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00013BFA 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00013BFE                            ; ===========================================================================
00013BFE                            
00013BFE                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00013BFE 4E75                       		rts	
00013C00                            ; ===========================================================================
00013C00                            
00013C00                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00013C00 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00013C04 6600                       		bne.s	loc_120D6	; if yes, branch
00013C06 0828 0003 0022             		btst	#3,$22(a0)
00013C0C 6700                       		beq.s	locret_120D4
00013C0E 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00013C14                            
00013C14                            locret_120D4:
00013C14 4E75                       		rts	
00013C16                            ; ===========================================================================
00013C16                            
00013C16                            loc_120D6:
00013C16 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013C1A 66F8                       		bne.s	locret_120D4	; if time remains, branch
00013C1C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013C20 4228 0038                  		clr.b	$38(a0)
00013C24 4E75                       		rts	
00013C26                            ; ===========================================================================
00013C26                            
00013C26                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013C26 6100 AEEC                  		bsr.w	SpeedToPos
00013C2A 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013C2E 6100 0000                  		bsr.w	ObjHitFloor
00013C32 4A41                       		tst.w	d1
00013C34 6A00 0000                  		bpl.w	locret_12106
00013C38 5241                       		addq.w	#1,d1
00013C3A D368 000C                  		add.w	d1,$C(a0)
00013C3E 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013C42 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013C46                            
00013C46                            locret_12106:
00013C46 4E75                       		rts	
00013C48                            ; ===========================================================================
00013C48                            
00013C48                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013C48 6100 AECA                  		bsr.w	SpeedToPos
00013C4C 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013C50 6100 0000                  		bsr.w	ObjHitCeiling
00013C54 4A41                       		tst.w	d1
00013C56 6A00 0000                  		bpl.w	locret_12126
00013C5A 9368 000C                  		sub.w	d1,$C(a0)
00013C5E 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013C62 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013C66                            
00013C66                            locret_12126:
00013C66 4E75                       		rts	
00013C68                            ; ===========================================================================
00013C68                            
00013C68                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013C68 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013C6E 6600                       		bne.s	locret_12138	; if not, branch
00013C70 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013C74 4228 0038                  		clr.b	$38(a0)
00013C78                            
00013C78                            locret_12138:
00013C78 4E75                       		rts	
00013C7A                            ; ===========================================================================
00013C7A                            
00013C7A                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013C7A 3038 F646                  		move.w	($FFFFF646).w,d0
00013C7E 9068 000C                  		sub.w	$C(a0),d0
00013C82 6700                       		beq.s	locret_1217E
00013C84 6400                       		bcc.s	loc_12162
00013C86 0C40 FFFE                  		cmpi.w	#-2,d0
00013C8A 6C00                       		bge.s	loc_1214E
00013C8C 70FE                       		moveq	#-2,d0
00013C8E                            
00013C8E                            loc_1214E:
00013C8E D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013C92 6100 0000                  		bsr.w	ObjHitCeiling
00013C96 4A41                       		tst.w	d1
00013C98 6A00 0000                  		bpl.w	locret_12160
00013C9C 9368 000C                  		sub.w	d1,$C(a0)
00013CA0                            
00013CA0                            locret_12160:
00013CA0 4E75                       		rts	
00013CA2                            ; ===========================================================================
00013CA2                            
00013CA2                            loc_12162:				; XREF: Obj61_Type07
00013CA2 0C40 0002                  		cmpi.w	#2,d0
00013CA6 6F00                       		ble.s	loc_1216A
00013CA8 7002                       		moveq	#2,d0
00013CAA                            
00013CAA                            loc_1216A:
00013CAA D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013CAE 6100 0000                  		bsr.w	ObjHitFloor
00013CB2 4A41                       		tst.w	d1
00013CB4 6A00 0000                  		bpl.w	locret_1217E
00013CB8 5241                       		addq.w	#1,d1
00013CBA D368 000C                  		add.w	d1,$C(a0)
00013CBE                            
00013CBE                            locret_1217E:
00013CBE 4E75                       		rts	
00013CC0                            ; ===========================================================================
00013CC0                            
00013CC0                            loc_12180:				; XREF: Obj61_Action
00013CC0 4A28 0038                  		tst.b	$38(a0)
00013CC4 6700                       		beq.s	locret_121C0
00013CC6 0828 0003 0022             		btst	#3,$22(a0)
00013CCC 6600                       		bne.s	loc_1219A
00013CCE 4A28 003E                  		tst.b	$3E(a0)
00013CD2 6700                       		beq.s	locret_121C0
00013CD4 5928 003E                  		subq.b	#4,$3E(a0)
00013CD8 6000                       		bra.s	loc_121A6
00013CDA                            ; ===========================================================================
00013CDA                            
00013CDA                            loc_1219A:
00013CDA 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013CE0 6700                       		beq.s	locret_121C0
00013CE2 5828 003E                  		addq.b	#4,$3E(a0)
00013CE6                            
00013CE6                            loc_121A6:
00013CE6 1028 003E                  		move.b	$3E(a0),d0
00013CEA 4EB9 0000 29F6             		jsr	(CalcSine).l
00013CF0 323C 0400                  		move.w	#$400,d1
00013CF4 C1C1                       		muls.w	d1,d0
00013CF6 4840                       		swap	d0
00013CF8 D068 0030                  		add.w	$30(a0),d0
00013CFC 3140 000C                  		move.w	d0,$C(a0)
00013D00                            
00013D00                            locret_121C0:
00013D00 4E75                       		rts	
00013D02                            ; ===========================================================================
00013D02                            ; ---------------------------------------------------------------------------
00013D02                            ; Sprite mappings - blocks (LZ)
00013D02                            ; ---------------------------------------------------------------------------
00013D02                            Map_obj61:
00013D02                            	include "_maps\obj61.asm"
00013D02                            ; ---------------------------------------------------------------------------
00013D02                            ; Sprite mappings - blocks (LZ)
00013D02                            ; ---------------------------------------------------------------------------
00013D02 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013D06 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013D0A 01                         byte_121CA:	dc.b 1
00013D0B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013D10 02                         byte_121D0:	dc.b 2
00013D11 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013D16 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013D1B 01                         byte_121DB:	dc.b 1
00013D1C F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013D21 01                         byte_121E1:	dc.b 1
00013D22 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013D28 00                         		even
00013D28 00                         		even
00013D28                            
00013D28                            ; ===========================================================================
00013D28                            ; ---------------------------------------------------------------------------
00013D28                            ; Object 62 - gargoyle head (LZ)
00013D28                            ; ---------------------------------------------------------------------------
00013D28                            
00013D28                            Obj62:					; XREF: Obj_Index
00013D28 7000                       		moveq	#0,d0
00013D2A 1028 0024                  		move.b	$24(a0),d0
00013D2E 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013D32 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013D36 6000 D440                  		bra.w	MarkObjGone
00013D3A                            ; ===========================================================================
00013D3A 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013D3C 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013D3E 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013D40 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013D42                            
00013D42 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013D4A                            ; ===========================================================================
00013D4A                            
00013D4A                            Obj62_Main:				; XREF: Obj62_Index
00013D4A 5428 0024                  		addq.b	#2,$24(a0)
00013D4E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013D56 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013D5C 0028 0004 0001             		ori.b	#4,1(a0)
00013D62 117C 0003 0018             		move.b	#3,$18(a0)
00013D68 117C 0010 0019             		move.b	#$10,$19(a0)
00013D6E 1028 0028                  		move.b	$28(a0),d0	; get object type
00013D72 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013D76 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013D7C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013D82 0228 000F 0028             		andi.b	#$F,$28(a0)
00013D88                            
00013D88                            Obj62_MakeFire:				; XREF: Obj62_Index
00013D88 5328 001E                  		subq.b	#1,$1E(a0)
00013D8C 6600                       		bne.s	Obj62_NoFire
00013D8E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013D94 6100 B15E                  		bsr.w	ChkObjOnScreen
00013D98 6600                       		bne.s	Obj62_NoFire
00013D9A 6100 B4E8                  		bsr.w	SingleObjLoad
00013D9E 6600                       		bne.s	Obj62_NoFire
00013DA0 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013DA4 5829 0024                  		addq.b	#4,$24(a1)
00013DA8 3368 0008 0008             		move.w	8(a0),8(a1)
00013DAE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013DB4 1368 0001 0001             		move.b	1(a0),1(a1)
00013DBA 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013DC0                            
00013DC0                            Obj62_NoFire:
00013DC0 4E75                       		rts	
00013DC2                            ; ===========================================================================
00013DC2                            
00013DC2                            Obj62_FireBall:				; XREF: Obj62_Index
00013DC2 5428 0024                  		addq.b	#2,$24(a0)
00013DC6 117C 0008 0016             		move.b	#8,$16(a0)
00013DCC 117C 0008 0017             		move.b	#8,$17(a0)
00013DD2 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013DDA 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013DE0 0028 0004 0001             		ori.b	#4,1(a0)
00013DE6 117C 0004 0018             		move.b	#4,$18(a0)
00013DEC 117C 0098 0020             		move.b	#$98,$20(a0)
00013DF2 117C 0008 0019             		move.b	#8,$19(a0)
00013DF8 117C 0002 001A             		move.b	#2,$1A(a0)
00013DFE 5068 000C                  		addq.w	#8,$C(a0)
00013E02 317C 0200 0010             		move.w	#$200,$10(a0)
00013E08 0828 0000 0022             		btst	#0,$22(a0)
00013E0E 6600                       		bne.s	Obj62_Sound
00013E10 4468 0010                  		neg.w	$10(a0)
00013E14                            
00013E14                            Obj62_Sound:
00013E14 303C 00AE                  		move.w	#$AE,d0
00013E18 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013E1E                            
00013E1E                            Obj62_AniFire:				; XREF: Obj62_Index
00013E1E 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013E22 0200 0007                  		andi.b	#7,d0
00013E26 6600                       		bne.s	Obj62_StopFire
00013E28 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013E2E                            
00013E2E                            Obj62_StopFire:
00013E2E 6100 ACE4                  		bsr.w	SpeedToPos
00013E32 0828 0000 0022             		btst	#0,$22(a0)
00013E38 6600                       		bne.s	Obj62_StopFire2
00013E3A 76F8                       		moveq	#-8,d3
00013E3C 6100 0000                  		bsr.w	ObjHitWallLeft
00013E40 4A41                       		tst.w	d1
00013E42 6B00 AD3A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013E46 4E75                       		rts	
00013E48                            ; ===========================================================================
00013E48                            
00013E48                            Obj62_StopFire2:
00013E48 7608                       		moveq	#8,d3
00013E4A 6100 0000                  		bsr.w	ObjHitWallRight
00013E4E 4A41                       		tst.w	d1
00013E50 6B00 AD2C                  		bmi.w	DeleteObject
00013E54 4E75                       		rts	
00013E56                            ; ===========================================================================
00013E56                            ; ---------------------------------------------------------------------------
00013E56                            ; Sprite mappings - gargoyle head (LZ)
00013E56                            ; ---------------------------------------------------------------------------
00013E56                            Map_obj62:
00013E56                            	include "_maps\obj62.asm"
00013E56                            ; ---------------------------------------------------------------------------
00013E56                            ; Sprite mappings - gargoyle head (LZ)
00013E56                            ; ---------------------------------------------------------------------------
00013E56 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013E5A 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013E5E 03                         byte_12320:	dc.b 3
00013E5F F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013E64 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013E69 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013E6E 01                         byte_12330:	dc.b 1
00013E6F FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013E74 01                         byte_12336:	dc.b 1
00013E75 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013E7A                            		even
00013E7A                            		even
00013E7A                            
00013E7A                            ; ===========================================================================
00013E7A                            ; ---------------------------------------------------------------------------
00013E7A                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013E7A                            ; ---------------------------------------------------------------------------
00013E7A                            
00013E7A                            Obj63:					; XREF: Obj_Index
00013E7A 7000                       		moveq	#0,d0
00013E7C 1028 0024                  		move.b	$24(a0),d0
00013E80 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013E84 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013E88 3028 0030                  		move.w	$30(a0),d0
00013E8C 0240 FF80                  		andi.w	#$FF80,d0
00013E90 3238 F700                  		move.w	($FFFFF700).w,d1
00013E94 0441 0080                  		subi.w	#$80,d1
00013E98 0241 FF80                  		andi.w	#$FF80,d1
00013E9C 9041                       		sub.w	d1,d0
00013E9E 0C40 0280                  		cmpi.w	#$280,d0
00013EA2 6300                       		bls.s	Obj63_Display
00013EA4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013EA8 6700                       		beq.s	loc_1236A		; if it's zero, don't remember object
00013EAA 3440                       		movea.w	d0,a2	; load address into a2
00013EAC 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00013EB0 6000                       		bra.s	loc_1236A	; and delete object
00013EB2                            
00013EB2                            Obj63_Display:				; XREF: loc_1236A
00013EB2 6000 AC7A                  		bra.w	DisplaySprite
00013EB6                            ; ===========================================================================
00013EB6                            
00013EB6                            loc_1236A:				; XREF: Obj63
00013EB6 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013EBC 6600                       		bne.s	loc_12378
00013EBE 0C40 FF80                  		cmpi.w	#-$80,d0
00013EC2 64EE                       		bcc.s	Obj63_Display
00013EC4                            
00013EC4                            loc_12378:
00013EC4 1028 002F                  		move.b	$2F(a0),d0
00013EC8 6A00 ACB4                  		bpl.w	DeleteObject
00013ECC 0240 007F                  		andi.w	#$7F,d0
00013ED0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013ED4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013EDA 6000 ACA2                  		bra.w	DeleteObject
00013EDE                            ; ===========================================================================
00013EDE 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013EE0 0000                       		dc.w loc_124B2-Obj63_Index
00013EE2 0000                       		dc.w loc_124C2-Obj63_Index
00013EE4 0000                       		dc.w loc_124DE-Obj63_Index
00013EE6                            ; ===========================================================================
00013EE6                            
00013EE6                            Obj63_Main:				; XREF: Obj63_Index
00013EE6 1028 0028                  		move.b	$28(a0),d0
00013EEA 6B00 0000                  		bmi.w	loc_12460
00013EEE 5428 0024                  		addq.b	#2,$24(a0)
00013EF2 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013EFA 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013F00 0028 0004 0001             		ori.b	#4,1(a0)
00013F06 117C 0010 0019             		move.b	#$10,$19(a0)
00013F0C 117C 0004 0018             		move.b	#4,$18(a0)
00013F12 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013F18 6600                       		bne.s	loc_123E2
00013F1A 5828 0024                  		addq.b	#4,$24(a0)
00013F1E 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013F24 117C 0001 0018             		move.b	#1,$18(a0)
00013F2A 6000 0000                  		bra.w	loc_124DE
00013F2E                            ; ===========================================================================
00013F2E                            
00013F2E                            loc_123E2:
00013F2E 117C 0004 001A             		move.b	#4,$1A(a0)
00013F34 7000                       		moveq	#0,d0
00013F36 1028 0028                  		move.b	$28(a0),d0
00013F3A 3200                       		move.w	d0,d1
00013F3C E648                       		lsr.w	#3,d0
00013F3E 0240 001E                  		andi.w	#$1E,d0
00013F42 45FA 0000                  		lea	Obj63_Data(pc),a2
00013F46 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013F4A 315A 0038                  		move.w	(a2)+,$38(a0)
00013F4E 315A 0030                  		move.w	(a2)+,$30(a0)
00013F52 214A 003C                  		move.l	a2,$3C(a0)
00013F56 0241 000F                  		andi.w	#$F,d1
00013F5A E549                       		lsl.w	#2,d1
00013F5C 1141 0038                  		move.b	d1,$38(a0)
00013F60 117C 0004 003A             		move.b	#4,$3A(a0)
00013F66 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013F6A 6700                       		beq.s	loc_1244C
00013F6C 117C 0001 003B             		move.b	#1,$3B(a0)
00013F72 4428 003A                  		neg.b	$3A(a0)
00013F76 7200                       		moveq	#0,d1
00013F78 1228 0038                  		move.b	$38(a0),d1
00013F7C D228 003A                  		add.b	$3A(a0),d1
00013F80 B228 0039                  		cmp.b	$39(a0),d1
00013F84 6500                       		bcs.s	loc_12448
00013F86 1001                       		move.b	d1,d0
00013F88 7200                       		moveq	#0,d1
00013F8A 4A00                       		tst.b	d0
00013F8C 6A00                       		bpl.s	loc_12448
00013F8E 1228 0039                  		move.b	$39(a0),d1
00013F92 5901                       		subq.b	#4,d1
00013F94                            
00013F94                            loc_12448:
00013F94 1141 0038                  		move.b	d1,$38(a0)
00013F98                            
00013F98                            loc_1244C:
00013F98 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013F9E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013FA4 6100 0000                  		bsr.w	Obj63_ChangeDir
00013FA8 6000 0000                  		bra.w	loc_124B2
00013FAC                            ; ===========================================================================
00013FAC                            
00013FAC                            loc_12460:				; XREF: Obj63_Main
00013FAC 1140 002F                  		move.b	d0,$2F(a0)
00013FB0 0240 007F                  		andi.w	#$7F,d0
00013FB4 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013FB8 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013FBE 6600 ABBE                  		bne.w	DeleteObject
00013FC2 D040                       		add.w	d0,d0
00013FC4 0240 001E                  		andi.w	#$1E,d0
00013FC8 0640 0070                  		addi.w	#$70,d0
00013FCC 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00013FD2 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013FD6 321A                       		move.w	(a2)+,d1
00013FD8 2248                       		movea.l	a0,a1
00013FDA 6000                       		bra.s	Obj63_MakePtfms
00013FDC                            ; ===========================================================================
00013FDC                            
00013FDC                            Obj63_Loop:
00013FDC 6100 B2A6                  		bsr.w	SingleObjLoad
00013FE0 6600                       		bne.s	loc_124AA
00013FE2                            
00013FE2                            Obj63_MakePtfms:			; XREF: loc_12460
00013FE2 12BC 0063                  		move.b	#$63,0(a1)
00013FE6 335A 0008                  		move.w	(a2)+,8(a1)
00013FEA 335A 000C                  		move.w	(a2)+,$C(a1)
00013FEE 301A                       		move.w	(a2)+,d0
00013FF0 1340 0028                  		move.b	d0,$28(a1)
00013FF4                            
00013FF4                            loc_124AA:
00013FF4 51C9 FFE6                  		dbf	d1,Obj63_Loop
00013FF8                            
00013FF8 588F                       		addq.l	#4,sp
00013FFA 4E75                       		rts	
00013FFC                            ; ===========================================================================
00013FFC                            
00013FFC                            loc_124B2:				; XREF: Obj63_Index
00013FFC 7200                       		moveq	#0,d1
00013FFE 1228 0019                  		move.b	$19(a0),d1
00014002 4EB9 0000 856A             		jsr	(PlatformObject).l
00014008 6000 0000                  		bra.w	sub_12502
0001400C                            ; ===========================================================================
0001400C                            
0001400C                            loc_124C2:				; XREF: Obj63_Index
0001400C 7200                       		moveq	#0,d1
0001400E 1228 0019                  		move.b	$19(a0),d1
00014012 4EB9 0000 86DE             		jsr	(ExitPlatform).l
00014018 3F28 0008                  		move.w	8(a0),-(sp)
0001401C 6100 0000                  		bsr.w	sub_12502
00014020 341F                       		move.w	(sp)+,d2
00014022 4EF9 0000 8C54             		jmp	(MvSonicOnPtfm2).l
00014028                            ; ===========================================================================
00014028                            
00014028                            loc_124DE:				; XREF: Obj63_Index
00014028 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001402C 0240 0003                  		andi.w	#3,d0
00014030 6600                       		bne.s	loc_124FC
00014032 7201                       		moveq	#1,d1
00014034 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00014038 6700                       		beq.s	loc_124F2
0001403A 4401                       		neg.b	d1
0001403C                            
0001403C                            loc_124F2:
0001403C D328 001A                  		add.b	d1,$1A(a0)
00014040 0228 0003 001A             		andi.b	#3,$1A(a0)
00014046                            
00014046                            loc_124FC:
00014046 588F                       		addq.l	#4,sp
00014048 6000 D12E                  		bra.w	MarkObjGone
0001404C                            
0001404C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001404C                            
0001404C                            
0001404C                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001404C 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00014050 6700                       		beq.s	loc_12520
00014052 4A28 003B                  		tst.b	$3B(a0)
00014056 6600                       		bne.s	loc_12520
00014058 117C 0001 003B             		move.b	#1,$3B(a0)
0001405E 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00014064 4428 003A                  		neg.b	$3A(a0)
00014068 6000                       		bra.s	loc_12534
0001406A                            ; ===========================================================================
0001406A                            
0001406A                            loc_12520:
0001406A 3028 0008                  		move.w	8(a0),d0
0001406E B068 0034                  		cmp.w	$34(a0),d0
00014072 6600                       		bne.s	loc_1256A
00014074 3028 000C                  		move.w	$C(a0),d0
00014078 B068 0036                  		cmp.w	$36(a0),d0
0001407C 6600                       		bne.s	loc_1256A
0001407E                            
0001407E                            loc_12534:
0001407E 7200                       		moveq	#0,d1
00014080 1228 0038                  		move.b	$38(a0),d1
00014084 D228 003A                  		add.b	$3A(a0),d1
00014088 B228 0039                  		cmp.b	$39(a0),d1
0001408C 6500                       		bcs.s	loc_12552
0001408E 1001                       		move.b	d1,d0
00014090 7200                       		moveq	#0,d1
00014092 4A00                       		tst.b	d0
00014094 6A00                       		bpl.s	loc_12552
00014096 1228 0039                  		move.b	$39(a0),d1
0001409A 5901                       		subq.b	#4,d1
0001409C                            
0001409C                            loc_12552:
0001409C 1141 0038                  		move.b	d1,$38(a0)
000140A0 2268 003C                  		movea.l	$3C(a0),a1
000140A4 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000140AA 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000140B0 6100 0000                  		bsr.w	Obj63_ChangeDir
000140B4                            
000140B4                            loc_1256A:
000140B4 6100 AA5E                  		bsr.w	SpeedToPos
000140B8 4E75                       		rts	
000140BA                            ; End of function sub_12502
000140BA                            
000140BA                            
000140BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140BA                            
000140BA                            
000140BA                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000140BA 7000                       		moveq	#0,d0
000140BC 343C FF00                  		move.w	#-$100,d2
000140C0 3028 0008                  		move.w	8(a0),d0
000140C4 9068 0034                  		sub.w	$34(a0),d0
000140C8 6400                       		bcc.s	loc_12584
000140CA 4440                       		neg.w	d0
000140CC 4442                       		neg.w	d2
000140CE                            
000140CE                            loc_12584:
000140CE 7200                       		moveq	#0,d1
000140D0 363C FF00                  		move.w	#-$100,d3
000140D4 3228 000C                  		move.w	$C(a0),d1
000140D8 9268 0036                  		sub.w	$36(a0),d1
000140DC 6400                       		bcc.s	loc_12598
000140DE 4441                       		neg.w	d1
000140E0 4443                       		neg.w	d3
000140E2                            
000140E2                            loc_12598:
000140E2 B240                       		cmp.w	d0,d1
000140E4 6500                       		bcs.s	loc_125C2
000140E6 3028 0008                  		move.w	8(a0),d0
000140EA 9068 0034                  		sub.w	$34(a0),d0
000140EE 6700                       		beq.s	loc_125AE
000140F0 48C0                       		ext.l	d0
000140F2 E180                       		asl.l	#8,d0
000140F4 81C1                       		divs.w	d1,d0
000140F6 4440                       		neg.w	d0
000140F8                            
000140F8                            loc_125AE:
000140F8 3140 0010                  		move.w	d0,$10(a0)
000140FC 3143 0012                  		move.w	d3,$12(a0)
00014100 4840                       		swap	d0
00014102 3140 000A                  		move.w	d0,$A(a0)
00014106 4268 000E                  		clr.w	$E(a0)
0001410A 4E75                       		rts	
0001410C                            ; ===========================================================================
0001410C                            
0001410C                            loc_125C2:				; XREF: Obj63_ChangeDir
0001410C 3228 000C                  		move.w	$C(a0),d1
00014110 9268 0036                  		sub.w	$36(a0),d1
00014114 6700                       		beq.s	loc_125D4
00014116 48C1                       		ext.l	d1
00014118 E181                       		asl.l	#8,d1
0001411A 83C0                       		divs.w	d0,d1
0001411C 4441                       		neg.w	d1
0001411E                            
0001411E                            loc_125D4:
0001411E 3141 0012                  		move.w	d1,$12(a0)
00014122 3142 0010                  		move.w	d2,$10(a0)
00014126 4841                       		swap	d1
00014128 3141 000E                  		move.w	d1,$E(a0)
0001412C 4268 000A                  		clr.w	$A(a0)
00014130 4E75                       		rts	
00014132                            ; End of function Obj63_ChangeDir
00014132                            
00014132                            ; ===========================================================================
00014132 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00014134 0000                       		dc.w word_12610-Obj63_Data
00014136 0000                       		dc.w word_12628-Obj63_Data
00014138 0000                       		dc.w word_1263C-Obj63_Data
0001413A 0000                       		dc.w word_12650-Obj63_Data
0001413C 0000                       		dc.w word_12668-Obj63_Data
0001413E 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001414E 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001415A 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001416A 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014172 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014186 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001419A 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000141B2 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000141C6                            
000141C6                            ; ---------------------------------------------------------------------------
000141C6                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000141C6                            ; ---------------------------------------------------------------------------
000141C6                            Map_obj63:
000141C6                            	include "_maps\obj63.asm"
000141C6                            ; ---------------------------------------------------------------------------
000141C6                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000141C6                            ; ---------------------------------------------------------------------------
000141C6 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000141CA 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000141CE 0000                       		dc.w byte_1269E-Map_obj63
000141D0 01                         byte_12686:	dc.b 1
000141D1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000141D6 01                         byte_1268C:	dc.b 1
000141D7 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000141DC 01                         byte_12692:	dc.b 1
000141DD F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000141E2 01                         byte_12698:	dc.b 1
000141E3 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000141E8 01                         byte_1269E:	dc.b 1
000141E9 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000141EE                            		even
000141EE                            		even
000141EE                            
000141EE                            ; ===========================================================================
000141EE                            ; ---------------------------------------------------------------------------
000141EE                            ; Object 64 - bubbles (LZ)
000141EE                            ; ---------------------------------------------------------------------------
000141EE                            
000141EE                            Obj64:					; XREF: Obj_Index
000141EE 7000                       		moveq	#0,d0
000141F0 1028 0024                  		move.b	$24(a0),d0
000141F4 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000141F8 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000141FC                            ; ===========================================================================
000141FC 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000141FE 0000                       		dc.w Obj64_Animate-Obj64_Index
00014200 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00014202 0000                       		dc.w Obj64_Display2-Obj64_Index
00014204 0000                       		dc.w Obj64_Delete3-Obj64_Index
00014206 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00014208                            ; ===========================================================================
00014208                            
00014208                            Obj64_Main:				; XREF: Obj64_Index
00014208 5428 0024                  		addq.b	#2,$24(a0)
0001420C 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00014214 317C 8348 0002             		move.w	#$8348,2(a0)
0001421A 117C 0084 0001             		move.b	#$84,1(a0)
00014220 117C 0010 0019             		move.b	#$10,$19(a0)
00014226 117C 0001 0018             		move.b	#1,$18(a0)
0001422C 1028 0028                  		move.b	$28(a0),d0	; get object type
00014230 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00014232 5028 0024                  		addq.b	#8,$24(a0)
00014236 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001423A 1140 0032                  		move.b	d0,$32(a0)
0001423E 1140 0033                  		move.b	d0,$33(a0)
00014242 117C 0006 001C             		move.b	#6,$1C(a0)
00014248 6000 0000                  		bra.w	Obj64_BblMaker
0001424C                            ; ===========================================================================
0001424C                            
0001424C                            Obj64_Bubble:				; XREF: Obj64_Main
0001424C 1140 001C                  		move.b	d0,$1C(a0)
00014250 3168 0008 0030             		move.w	8(a0),$30(a0)
00014256 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
0001425C 4EB9 0000 29D0             		jsr	(RandomNumber).l
00014262 1140 0026                  		move.b	d0,$26(a0)
00014266                            
00014266                            Obj64_Animate:				; XREF: Obj64_Index
00014266 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001426C 4EB9 0000 BB8E             		jsr	AnimateSprite
00014272 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00014278 6600                       		bne.s	Obj64_ChkWater
0001427A 117C 0001 002E             		move.b	#1,$2E(a0)
00014280                            
00014280                            Obj64_ChkWater:				; XREF: Obj64_Index
00014280 3038 F646                  		move.w	($FFFFF646).w,d0
00014284 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00014288 6400                       		bcc.s	Obj64_Burst	; if yes, branch
0001428A 3038 F60E                  		move.w	(v_pocketbottom).w,d0
0001428E B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00014292 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00014294 3028 0008                  		move.w	8(a0),d0
00014298 9078 F610                  		sub.w	(v_pocketx).w,d0
0001429C 0640 0060                  		addi.w	#$60,d0
000142A0 6B00                       		bmi.s	Obj64_Wobble
000142A2 0C40 00C0                  		cmpi.w	#$C0,d0
000142A6 6400                       		bcc.s	Obj64_Wobble
000142A8                            
000142A8                            Obj64_Burst:				; XREF: Obj64_Wobble
000142A8 117C 0006 0024             		move.b	#6,$24(a0)
000142AE 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000142B2 6000 0000                  		bra.w	Obj64_Display2
000142B6                            ; ===========================================================================
000142B6                            
000142B6                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000142B6 1028 0026                  		move.b	$26(a0),d0
000142BA 5228 0026                  		addq.b	#1,$26(a0)
000142BE 0240 007F                  		andi.w	#$7F,d0
000142C2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000142C8 1031 0000                  		move.b	(a1,d0.w),d0
000142CC 4880                       		ext.w	d0
000142CE D068 0030                  		add.w	$30(a0),d0
000142D2 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000142D6 4A28 002E                  		tst.b	$2E(a0)
000142DA 6700                       		beq.s	Obj64_Display
000142DC 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000142E0 6700                       		beq.s	Obj64_Display	; if not, branch
000142E2                            
000142E2 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000142E6 303C 00AD                  		move.w	#$AD,d0
000142EA 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000142F0 43F8 D000                  		lea	($FFFFD000).w,a1
000142F4 4269 0010                  		clr.w	$10(a1)
000142F8 4269 0012                  		clr.w	$12(a1)
000142FC 4269 0020                  		clr.w	$20(a1)
00014300 137C 0015 001C             		move.b	#$15,$1C(a1)
00014306 337C 0023 003E             		move.w	#$23,$3E(a1)
0001430C 137C 0000 003C             		move.b	#0,$3C(a1)
00014312 08A9 0005 0022             		bclr	#5,$22(a1)
00014318 08A9 0004 0022             		bclr	#4,$22(a1)
0001431E 0829 0002 0022             		btst	#2,$22(a1)
00014324 6700 FF82                  		beq.w	Obj64_Burst
00014328 08A9 0002 0022             		bclr	#2,$22(a1)
0001432E 137C 0013 0016             		move.b	#$13,$16(a1)
00014334 137C 0009 0017             		move.b	#9,$17(a1)
0001433A 5B69 000C                  		subq.w	#5,$C(a1)
0001433E 6000 FF68                  		bra.w	Obj64_Burst
00014342                            ; ===========================================================================
00014342                            
00014342                            Obj64_Display:				; XREF: Obj64_Wobble
00014342 6100 A7D0                  		bsr.w	SpeedToPos
00014346 4A28 0001                  		tst.b	1(a0)
0001434A 6A00                       		bpl.s	Obj64_Delete
0001434C 4EFA A7E0                  		jmp	DisplaySprite
00014350                            ; ===========================================================================
00014350                            
00014350                            Obj64_Delete:
00014350 4EFA A82C                  		jmp	DeleteObject
00014354                            ; ===========================================================================
00014354                            
00014354                            Obj64_Display2:				; XREF: Obj64_Index
00014354 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001435A 4EB9 0000 BB8E             		jsr	AnimateSprite
00014360 4A28 0001                  		tst.b	1(a0)
00014364 6A00                       		bpl.s	Obj64_Delete2
00014366 4EFA A7C6                  		jmp	DisplaySprite
0001436A                            ; ===========================================================================
0001436A                            
0001436A                            Obj64_Delete2:
0001436A 4EFA A812                  		jmp	DeleteObject
0001436E                            ; ===========================================================================
0001436E                            
0001436E                            Obj64_Delete3:				; XREF: Obj64_Index
0001436E 6000 A80E                  		bra.w	DeleteObject
00014372                            ; ===========================================================================
00014372                            
00014372                            Obj64_BblMaker:				; XREF: Obj64_Index
00014372 4A68 0036                  		tst.w	$36(a0)
00014376 6600                       		bne.s	loc_12874
00014378 3038 F646                  		move.w	($FFFFF646).w,d0
0001437C B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00014380 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00014384 3038 F60E                  		move.w	(v_pocketbottom).w,d0
00014388 B068 000C                  		cmp.w	$C(a0),d0
0001438C 6500                       		bcs.s	Obj64_Cont
0001438E 3028 0008                  		move.w	8(a0),d0
00014392 9078 F610                  		sub.w	(v_pocketx).w,d0
00014396 0640 0060                  		addi.w	#$60,d0
0001439A 6B00                       		bmi.s	Obj64_Cont
0001439C 0C40 00C0                  		cmpi.w	#$C0,d0
000143A0 6400                       		bcc.s	Obj64_Cont
000143A2 6000 0000                  		bra.w	Obj64_ChkDel
000143A6                            
000143A6                            Obj64_Cont:
000143A6 4A28 0001                  		tst.b	1(a0)
000143AA 6A00 0000                  		bpl.w	Obj64_ChkDel
000143AE 5368 0038                  		subq.w	#1,$38(a0)
000143B2 6A00 0000                  		bpl.w	loc_12914
000143B6 317C 0001 0036             		move.w	#1,$36(a0)
000143BC                            
000143BC                            loc_1283A:
000143BC 4EB9 0000 29D0             		jsr	(RandomNumber).l
000143C2 3200                       		move.w	d0,d1
000143C4 0240 0007                  		andi.w	#7,d0
000143C8 0C40 0006                  		cmpi.w	#6,d0
000143CC 64EE                       		bcc.s	loc_1283A
000143CE                            
000143CE 1140 0034                  		move.b	d0,$34(a0)
000143D2 0241 000C                  		andi.w	#$C,d1
000143D6 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000143DC D2C1                       		adda.w	d1,a1
000143DE 2149 003C                  		move.l	a1,$3C(a0)
000143E2 5328 0032                  		subq.b	#1,$32(a0)
000143E6 6A00                       		bpl.s	loc_12872
000143E8 1168 0033 0032             		move.b	$33(a0),$32(a0)
000143EE 08E8 0007 0036             		bset	#7,$36(a0)
000143F4                            
000143F4                            loc_12872:
000143F4 6000                       		bra.s	loc_1287C
000143F6                            ; ===========================================================================
000143F6                            
000143F6                            loc_12874:				; XREF: Obj64_BblMaker
000143F6 5368 0038                  		subq.w	#1,$38(a0)
000143FA 6A00 0000                  		bpl.w	loc_12914
000143FE                            
000143FE                            loc_1287C:
000143FE 4EB9 0000 29D0             		jsr	(RandomNumber).l
00014404 0240 001F                  		andi.w	#$1F,d0
00014408 3140 0038                  		move.w	d0,$38(a0)
0001440C 6100 AE76                  		bsr.w	SingleObjLoad
00014410 6600                       		bne.s	loc_128F8
00014412 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00014416 3368 0008 0008             		move.w	8(a0),8(a1)
0001441C 4EB9 0000 29D0             		jsr	(RandomNumber).l
00014422 0240 000F                  		andi.w	#$F,d0
00014426 5140                       		subq.w	#8,d0
00014428 D169 0008                  		add.w	d0,8(a1)
0001442C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014432 7000                       		moveq	#0,d0
00014434 1028 0034                  		move.b	$34(a0),d0
00014438 2468 003C                  		movea.l	$3C(a0),a2
0001443C 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00014442 0828 0007 0036             		btst	#7,$36(a0)
00014448 6700                       		beq.s	loc_128F8
0001444A 4EB9 0000 29D0             		jsr	(RandomNumber).l
00014450 0240 0003                  		andi.w	#3,d0
00014454 6600                       		bne.s	loc_128E4
00014456 08E8 0006 0036             		bset	#6,$36(a0)
0001445C 6600                       		bne.s	loc_128F8
0001445E 137C 0002 0028             		move.b	#2,$28(a1)
00014464                            
00014464                            loc_128E4:
00014464 4A28 0034                  		tst.b	$34(a0)
00014468 6600                       		bne.s	loc_128F8
0001446A 08E8 0006 0036             		bset	#6,$36(a0)
00014470 6600                       		bne.s	loc_128F8
00014472 137C 0002 0028             		move.b	#2,$28(a1)
00014478                            
00014478                            loc_128F8:
00014478 5328 0034                  		subq.b	#1,$34(a0)
0001447C 6A00                       		bpl.s	loc_12914
0001447E 4EB9 0000 29D0             		jsr	(RandomNumber).l
00014484 0240 007F                  		andi.w	#$7F,d0
00014488 0640 0080                  		addi.w	#$80,d0
0001448C D168 0038                  		add.w	d0,$38(a0)
00014490 4268 0036                  		clr.w	$36(a0)
00014494                            
00014494                            loc_12914:
00014494 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001449A 4EB9 0000 BB8E             		jsr	AnimateSprite
000144A0                            
000144A0                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000144A0 3028 0008                  		move.w	8(a0),d0
000144A4 0240 FF80                  		andi.w	#$FF80,d0
000144A8 3238 F700                  		move.w	($FFFFF700).w,d1
000144AC 0441 0080                  		subi.w	#$80,d1
000144B0 0241 FF80                  		andi.w	#$FF80,d1
000144B4 9041                       		sub.w	d1,d0
000144B6 0C40 0280                  		cmpi.w	#$280,d0
000144BA 6300                       		bls.s	Obj64_NoDel
000144BC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000144C0 6700 A6BC                  		beq.w	DeleteObject		; if it's zero, don't remember object
000144C4 3440                       		movea.w	d0,a2	; load address into a2
000144C6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000144CA 6000 A6B2                  		bra.w	DeleteObject	; and delete object
000144CE                            
000144CE                            Obj64_NoDel:	
000144CE 3038 F646                  		move.w	($FFFFF646).w,d0
000144D2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000144D6 6400                       		bcc.s	Obj64_UW	; if not, branch
000144D8 3038 F60E                  		move.w	(v_pocketbottom).w,d0
000144DC B068 000C                  		cmp.w	$C(a0),d0
000144E0 6500 A64C                  		bcs.w	DisplaySprite
000144E4 3028 0008                  		move.w	8(a0),d0
000144E8 9078 F610                  		sub.w	(v_pocketx).w,d0
000144EC 0640 0060                  		addi.w	#$60,d0
000144F0 6B00 A63C                  		bmi.w	DisplaySprite
000144F4 0C40 00C0                  		cmpi.w	#$C0,d0
000144F8 6400 A634                  		bcc.w	DisplaySprite
000144FC                            
000144FC                            Obj64_UW:
000144FC 4E75                       		rts	
000144FE                            ; ===========================================================================
000144FE                            ; bubble production sequence
000144FE                            
000144FE                            ; 0 = small bubble, 1 =	large bubble
000144FE                            
000144FE 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014510                            
00014510                            ; ===========================================================================
00014510                            
00014510                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00014510 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014514 6B00                       		bmi.s	loc_12998
00014516 43F8 D000                  		lea	($FFFFD000).w,a1
0001451A 3029 0008                  		move.w	8(a1),d0
0001451E 3228 0008                  		move.w	8(a0),d1
00014522 0441 0010                  		subi.w	#$10,d1
00014526 B240                       		cmp.w	d0,d1
00014528 6400                       		bcc.s	loc_12998
0001452A 0641 0020                  		addi.w	#$20,d1
0001452E B240                       		cmp.w	d0,d1
00014530 6500                       		bcs.s	loc_12998
00014532 3029 000C                  		move.w	$C(a1),d0
00014536 3228 000C                  		move.w	$C(a0),d1
0001453A B240                       		cmp.w	d0,d1
0001453C 6400                       		bcc.s	loc_12998
0001453E 0641 0010                  		addi.w	#$10,d1
00014542 B240                       		cmp.w	d0,d1
00014544 6500                       		bcs.s	loc_12998
00014546 7001                       		moveq	#1,d0
00014548 4E75                       		rts	
0001454A                            ; ===========================================================================
0001454A                            
0001454A                            loc_12998:
0001454A 7000                       		moveq	#0,d0
0001454C 4E75                       		rts	
0001454E                            ; ===========================================================================
0001454E                            Ani_obj64:
0001454E                            	include "_anim\obj64.asm"
0001454E                            ; ---------------------------------------------------------------------------
0001454E                            ; Animation script - bubbles (LZ)
0001454E                            ; ---------------------------------------------------------------------------
0001454E 0000                       		dc.w byte_129AA-Ani_obj64
00014550 0000                       		dc.w byte_129B0-Ani_obj64
00014552 0000                       		dc.w byte_129B6-Ani_obj64
00014554 0000                       		dc.w byte_129BE-Ani_obj64
00014556 0000                       		dc.w byte_129BE-Ani_obj64
00014558 0000                       		dc.w byte_129C0-Ani_obj64
0001455A 0000                       		dc.w byte_129C6-Ani_obj64
0001455C 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00014562 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00014568 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00014570 04FC                       byte_129BE:	dc.b 4,	$FC
00014572 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00014578 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001457E 00                         		even
0001457E 00                         		even
0001457E                            
0001457E                            ; ---------------------------------------------------------------------------
0001457E                            ; Sprite mappings - bubbles (LZ)
0001457E                            ; ---------------------------------------------------------------------------
0001457E                            Map_obj64:
0001457E                            	include "_maps\obj64.asm"
0001457E                            bubmap:
0001457E 0000                       bubmap_0: 	dc.w bubmap_2E-bubmap
00014580 0000                       bubmap_2: 	dc.w bubmap_34-bubmap
00014582 0000                       bubmap_4: 	dc.w bubmap_3A-bubmap
00014584 0000                       bubmap_6: 	dc.w bubmap_40-bubmap
00014586 0000                       bubmap_8: 	dc.w bubmap_46-bubmap
00014588 0000                       bubmap_A: 	dc.w bubmap_4C-bubmap
0001458A 0000                       bubmap_C: 	dc.w bubmap_52-bubmap
0001458C 0000                       bubmap_E: 	dc.w bubmap_58-bubmap
0001458E 0000                       bubmap_10: 	dc.w bubmap_6D-bubmap
00014590 0000                       bubmap_12: 	dc.w bubmap_82-bubmap
00014592 0000                       bubmap_14: 	dc.w bubmap_88-bubmap
00014594 0000                       bubmap_16: 	dc.w bubmap_8E-bubmap
00014596 0000                       bubmap_18: 	dc.w bubmap_94-bubmap
00014598 0000                       bubmap_1A: 	dc.w bubmap_9A-bubmap
0001459A 0000                       bubmap_1C: 	dc.w bubmap_A0-bubmap
0001459C 0000                       bubmap_1E: 	dc.w bubmap_A6-bubmap
0001459E 0000                       bubmap_20: 	dc.w bubmap_AC-bubmap
000145A0 0000                       bubmap_22: 	dc.w bubmap_B2-bubmap
000145A2 0000                       bubmap_24: 	dc.w bubmap_B8-bubmap
000145A4 0000                       bubmap_26: 	dc.w bubmap_BE-bubmap
000145A6 0000                       bubmap_28: 	dc.w bubmap_C4-bubmap
000145A8 0000                       bubmap_2A: 	dc.w bubmap_CA-bubmap
000145AA 0000                       bubmap_2C: 	dc.w bubmap_D0-bubmap
000145AC 01                         bubmap_2E: 	dc.b $1
000145AD FC00 6000 FC               	dc.b $FC, $0, $60, $0, $FC
000145B2 01                         bubmap_34: 	dc.b $1
000145B3 FC00 6001 FC               	dc.b $FC, $0, $60, $1, $FC
000145B8 01                         bubmap_3A: 	dc.b $1
000145B9 FC00 6002 FC               	dc.b $FC, $0, $60, $2, $FC
000145BE 01                         bubmap_40: 	dc.b $1
000145BF F805 6003 F8               	dc.b $F8, $5, $60, $3, $F8
000145C4 01                         bubmap_46: 	dc.b $1
000145C5 F805 6007 F8               	dc.b $F8, $5, $60, $7, $F8
000145CA 01                         bubmap_4C: 	dc.b $1
000145CB F40A 600B F4               	dc.b $F4, $A, $60, $B, $F4
000145D0 01                         bubmap_52: 	dc.b $1
000145D1 F00F 6014 F0               	dc.b $F0, $F, $60, $14, $F0
000145D6 04                         bubmap_58: 	dc.b $4
000145D7 F005 6024 F0               	dc.b $F0, $5, $60, $24, $F0
000145DC F005 6824 00               	dc.b $F0, $5, $68, $24, $0
000145E1 0005 7024 F0               	dc.b $0, $5, $70, $24, $F0
000145E6 0005 7824 00               	dc.b $0, $5, $78, $24, $0
000145EB 04                         bubmap_6D: 	dc.b $4
000145EC F005 6028 F0               	dc.b $F0, $5, $60, $28, $F0
000145F1 F005 6828 00               	dc.b $F0, $5, $68, $28, $0
000145F6 0005 7028 F0               	dc.b $0, $5, $70, $28, $F0
000145FB 0005 7828 00               	dc.b $0, $5, $78, $28, $0
00014600 01                         bubmap_82: 	dc.b $1
00014601 F406 002C F8               	dc.b $F4, $6, $0, $2C, $F8
00014606 01                         bubmap_88: 	dc.b $1
00014607 F406 0032 F8               	dc.b $F4, $6, $0, $32, $F8
0001460C 01                         bubmap_8E: 	dc.b $1
0001460D F406 0038 F8               	dc.b $F4, $6, $0, $38, $F8
00014612 01                         bubmap_94: 	dc.b $1
00014613 F406 003E F8               	dc.b $F4, $6, $0, $3E, $F8
00014618 01                         bubmap_9A: 	dc.b $1
00014619 F406 2044 F8               	dc.b $F4, $6, $20, $44, $F8
0001461E 01                         bubmap_A0: 	dc.b $1
0001461F F406 204A F8               	dc.b $F4, $6, $20, $4A, $F8
00014624 01                         bubmap_A6: 	dc.b $1
00014625 F406 2050 F8               	dc.b $F4, $6, $20, $50, $F8
0001462A 01                         bubmap_AC: 	dc.b $1
0001462B F406 2056 F8               	dc.b $F4, $6, $20, $56, $F8
00014630 01                         bubmap_B2: 	dc.b $1
00014631 F406 205C F8               	dc.b $F4, $6, $20, $5C, $F8
00014636 01                         bubmap_B8: 	dc.b $1
00014637 F406 2062 F8               	dc.b $F4, $6, $20, $62, $F8
0001463C 01                         bubmap_BE: 	dc.b $1
0001463D F805 6068 F8               	dc.b $F8, $5, $60, $68, $F8
00014642 01                         bubmap_C4: 	dc.b $1
00014643 F805 606C F8               	dc.b $F8, $5, $60, $6C, $F8
00014648 01                         bubmap_CA: 	dc.b $1
00014649 F805 6070 F8               	dc.b $F8, $5, $60, $70, $F8
0001464E 00                         bubmap_D0: 	dc.b $0
00014650 00                         	even
00014650 00                         	even
00014650                            
00014650                            ; ===========================================================================
00014650                            ; ---------------------------------------------------------------------------
00014650                            ; Object 65 - waterfalls (LZ)
00014650                            ; ---------------------------------------------------------------------------
00014650                            
00014650                            Obj65:					; XREF: Obj_Index
00014650 7000                       		moveq	#0,d0
00014652 1028 0024                  		move.b	$24(a0),d0
00014656 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001465A 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001465E                            ; ===========================================================================
0001465E 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00014660 0000                       		dc.w Obj65_Animate-Obj65_Index
00014662 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00014664 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00014666 0000                       		dc.w loc_12B36-Obj65_Index
00014668                            ; ===========================================================================
00014668                            
00014668                            Obj65_Main:				; XREF: Obj65_Index
00014668 5828 0024                  		addq.b	#4,$24(a0)
0001466C 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00014674 317C 4259 0002             		move.w	#$4259,2(a0)
0001467A 0028 0004 0001             		ori.b	#4,1(a0)
00014680 117C 0018 0019             		move.b	#$18,$19(a0)
00014686 117C 0001 0018             		move.b	#1,$18(a0)
0001468C 1028 0028                  		move.b	$28(a0),d0	; get object type
00014690 6A00                       		bpl.s	loc_12AE6
00014692 08E8 0007 0002             		bset	#7,2(a0)
00014698                            
00014698                            loc_12AE6:
00014698 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001469C 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000146A0 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000146A4 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000146A6 4228 0018                  		clr.b	$18(a0)
000146AA 5528 0024                  		subq.b	#2,$24(a0)
000146AE 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000146B4 6700                       		beq.s	loc_12B0A	; if not, branch
000146B6 117C 0006 0024             		move.b	#6,$24(a0)
000146BC                            
000146BC                            loc_12B0A:
000146BC 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000146C2 6700                       		beq.s	Obj65_Animate	; if not, branch
000146C4 117C 0008 0024             		move.b	#8,$24(a0)
000146CA                            
000146CA                            Obj65_Animate:				; XREF: Obj65_Index
000146CA 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000146D0 4EB9 0000 BB8E             		jsr	AnimateSprite
000146D6                            
000146D6                            Obj65_ChkDel:				; XREF: Obj65_Index
000146D6 6000 CAA0                  		bra.w	MarkObjGone
000146DA                            ; ===========================================================================
000146DA                            
000146DA                            Obj65_FixHeight:			; XREF: Obj65_Index
000146DA 3038 F646                  		move.w	($FFFFF646).w,d0
000146DE 0440 0010                  		subi.w	#$10,d0
000146E2 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000146E6 60E2                       		bra.s	Obj65_Animate
000146E8                            ; ===========================================================================
000146E8                            
000146E8                            loc_12B36:				; XREF: Obj65_Index
000146E8 08A8 0007 0002             		bclr	#7,2(a0)
000146EE 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000146F4 6600                       		bne.s	Obj65_Animate2
000146F6 08E8 0007 0002             		bset	#7,2(a0)
000146FC                            
000146FC                            Obj65_Animate2:
000146FC 60CC                       		bra.s	Obj65_Animate
000146FE                            ; ===========================================================================
000146FE                            Ani_obj65:
000146FE                            	include "_anim\obj65.asm"
000146FE                            ; ---------------------------------------------------------------------------
000146FE                            ; Animation script - waterfall (LZ)
000146FE                            ; ---------------------------------------------------------------------------
000146FE 0000                       		dc.w byte_12B4E-Ani_obj65
00014700 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00014706 00                         		even
00014706 00                         		even
00014706                            
00014706                            ; ---------------------------------------------------------------------------
00014706                            ; Sprite mappings - waterfalls (LZ)
00014706                            ; ---------------------------------------------------------------------------
00014706                            Map_obj65:
00014706                            	include "_maps\obj65.asm"
00014706                            ; ---------------------------------------------------------------------------
00014706                            ; Sprite mappings - waterfalls (LZ)
00014706                            ; ---------------------------------------------------------------------------
00014706 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001470A 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001470E 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00014712 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00014716 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001471A 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001471E 01                         byte_12B6C:	dc.b 1
0001471F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014724 02                         byte_12B72:	dc.b 2
00014725 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001472A 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001472F 02                         byte_12B7D:	dc.b 2
00014730 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014735 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001473A 01                         byte_12B88:	dc.b 1
0001473B F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014740 02                         byte_12B8E:	dc.b 2
00014741 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014746 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001474B 01                         byte_12B99:	dc.b 1
0001474C F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014751 01                         byte_12B9F:	dc.b 1
00014752 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014757 01                         byte_12BA5:	dc.b 1
00014758 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001475D 02                         byte_12BAB:	dc.b 2
0001475E F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014763 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014768 02                         byte_12BB6:	dc.b 2
00014769 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001476E F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014773 02                         byte_12BC1:	dc.b 2
00014774 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014779 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001477E 02                         byte_12BCC:	dc.b 2
0001477F F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014784 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001478A 00                         		even
0001478A 00                         		even
0001478A                            
0001478A                            ; ===========================================================================
0001478A                            ; ---------------------------------------------------------------------------
0001478A                            ; Object 01 - Sonic
0001478A                            ; ---------------------------------------------------------------------------
0001478A                            
0001478A                            Obj01:					; XREF: Obj_Index
0001478A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001478E 6700                       		beq.s	Obj01_Normal	; if not, branch
00014790 4EF9 0000 0000             		jmp	DebugMode
00014796                            ; ===========================================================================
00014796                            
00014796                            Obj01_Normal:
00014796 7000                       		moveq	#0,d0
00014798 1028 0024                  		move.b	$24(a0),d0
0001479C 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000147A0 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000147A4                            ; ===========================================================================
000147A4 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000147A6 0000                       		dc.w Obj01_Control-Obj01_Index
000147A8 0000                       		dc.w Obj01_Hurt-Obj01_Index
000147AA 0000                       		dc.w Obj01_Death-Obj01_Index
000147AC 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000147AE 0000                       		dc.w Sonic_Drowned-Obj01_Index
000147B0                            ;===========================================================================
000147B0                            
000147B0                            Obj01_Main:				; XREF: Obj01_Index
000147B0 5428 0024                  		addq.b	#2,$24(a0)
000147B4 117C 0013 0016             		move.b	#$13,$16(a0)
000147BA 117C 0009 0017             		move.b	#9,$17(a0)
000147C0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000147C8 317C 0780 0002             		move.w	#$780,2(a0)
000147CE 117C 0002 0018             		move.b	#2,$18(a0)
000147D4 117C 0018 0019             		move.b	#$18,$19(a0)
000147DA 117C 0004 0001             		move.b	#4,1(a0)
000147E0 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000147E6 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000147EC 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000147F2                            
000147F2                            Obj01_Control:				; XREF: Obj01_Index
000147F2 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000147F6 6700                       		beq.s	loc_12C58	; if not, branch
000147F8 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000147FE 6700                       		beq.s	loc_12C58	; if not, branch
00014800 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00014806 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001480A 4E75                       		rts	
0001480C                            ; ===========================================================================
0001480C                            
0001480C                            loc_12C58:
0001480C 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00014810 6600                       		bne.s	loc_12C64	; if yes, branch
00014812 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00014818                            
00014818                            loc_12C64:
00014818 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001481E 6600                       		bne.s	loc_12C7E	; if yes, branch
00014820 7000                       		moveq	#0,d0
00014822 1028 0022                  		move.b	$22(a0),d0
00014826 0240 0006                  		andi.w	#6,d0
0001482A 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001482E 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00014832                            
00014832                            loc_12C7E:
00014832 6100                       		bsr.s	Sonic_Display
00014834 6100 0000                  		bsr.w	Sonic_RecordPos
00014838 6100 0000                  		bsr.w	Sonic_Water
0001483C 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00014842 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00014848 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001484C 6700                       		beq.s	loc_12CA6
0001484E 4A28 001C                  		tst.b	$1C(a0)
00014852 6600                       		bne.s	loc_12CA6
00014854 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001485A                            
0001485A                            loc_12CA6:
0001485A 6100 0000                  		bsr.w	Sonic_Animate
0001485E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014862 6B00                       		bmi.s	loc_12CB6
00014864 4EB9 0000 0000             		jsr	TouchResponse
0001486A                            
0001486A                            loc_12CB6:
0001486A 6100 0000                  		bsr.w	Sonic_Loops
0001486E 6100 0000                  		bsr.w	LoadSonicDynPLC
00014872 4E75                       		rts	
00014874                            ; ===========================================================================
00014874 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00014876 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00014878 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001487A 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001487C                            ; ---------------------------------------------------------------------------
0001487C                            ; Music	to play	after invincibility wears off
0001487C                            ; ---------------------------------------------------------------------------
0001487C                            MusicList2:	incbin	misc\muslist2.bin
00014882                            		even
00014882                            ; ===========================================================================
00014882                            
00014882                            Sonic_Display:				; XREF: loc_12C7E
00014882 3028 0030                  		move.w	$30(a0),d0
00014886 6700                       		beq.s	Obj01_Display
00014888 5368 0030                  		subq.w	#1,$30(a0)
0001488C E648                       		lsr.w	#3,d0
0001488E 6400                       		bcc.s	Obj01_ChkInvin
00014890                            
00014890                            Obj01_Display:
00014890 4EBA A29C                  		jsr	DisplaySprite
00014894                            
00014894                            Obj01_ChkInvin:
00014894 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014898 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
0001489A 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001489E 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
000148A0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000148A4 6600                       		bne.s	Obj01_ChkShoes
000148A6 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000148AA 6600                       		bne.s	Obj01_RmvInvin
000148AC 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000148B2 6500                       		bcs.s	Obj01_RmvInvin
000148B4 7000                       		moveq	#0,d0
000148B6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000148BA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
000148C0 6600                       		bne.s	Obj01_PlayMusic
000148C2 7005                       		moveq	#5,d0		; play SBZ music
000148C4                            
000148C4                            Obj01_PlayMusic:
000148C4 43F9 0001 487C             		lea	(MusicList2).l,a1
000148CA 1031 0000                  		move.b	(a1,d0.w),d0
000148CE 4EB9 0000 121A             		jsr	(PlaySound).l	; play normal music
000148D4                            
000148D4                            Obj01_RmvInvin:
000148D4 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000148DA                            
000148DA                            Obj01_ChkShoes:
000148DA 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000148DE 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000148E0 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000148E4 6700                       		beq.s	Obj01_ExitChk
000148E6 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000148EA 6600                       		bne.s	Obj01_ExitChk
000148EC 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000148F2 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000148F8 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000148FE 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00014904 303C 00E3                  		move.w	#$E3,d0
00014908 4EF9 0000 121A             		jmp	(PlaySound).l	; run music at normal speed
0001490E                            ; ===========================================================================
0001490E                            
0001490E                            Obj01_ExitChk:
0001490E 4E75                       		rts	
00014910                            
00014910                            ; ---------------------------------------------------------------------------
00014910                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00014910                            ; ---------------------------------------------------------------------------
00014910                            
00014910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014910                            
00014910                            
00014910                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00014910 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014914 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014918 43F1 0000                  		lea	(a1,d0.w),a1
0001491C 32E8 0008                  		move.w	8(a0),(a1)+
00014920 32E8 000C                  		move.w	$C(a0),(a1)+
00014924 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00014928 4E75                       		rts	
0001492A                            ; End of function Sonic_RecordPos
0001492A                            
0001492A                            ; ---------------------------------------------------------------------------
0001492A                            ; Subroutine for Sonic when he's underwater
0001492A                            ; ---------------------------------------------------------------------------
0001492A                            
0001492A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001492A                            
0001492A                            
0001492A                            Sonic_Water:				; XREF: loc_12C7E
0001492A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00014930 6700                       		beq.s	Obj01_InWater	; if yes, branch
00014932                            
00014932                            locret_12D80:
00014932 4E75                       		rts	
00014934                            ; ===========================================================================
00014934                            
00014934                            Obj01_InWater:
00014934 3038 F646                  		move.w	($FFFFF646).w,d0
00014938 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001493C 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001493E 4A38 F612                  		tst.b	(f_insidepocket).w
00014942 6600                       		bne.s	Obj01_OutWater
00014944 08E8 0006 0022             		bset	#6,$22(a0)
0001494A 66E6                       		bne.s	locret_12D80
0001494C 6100 0000                  		bsr.w	ResumeMusic
00014950 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00014956 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001495C 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00014962 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00014968 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001496E E0E8 0010                  		asr	$10(a0)
00014972 E0E8 0012                  		asr	$12(a0)
00014976 E0E8 0012                  		asr	$12(a0)
0001497A 67B6                       		beq.s	locret_12D80
0001497C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014982 303C 00AA                  		move.w	#$AA,d0
00014986 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play splash sound
0001498C                            ; ===========================================================================
0001498C                            
0001498C                            Obj01_OutWater:
0001498C 08A8 0006 0022             		bclr	#6,$22(a0)
00014992 679E                       		beq.s	locret_12D80
00014994 6100 0000                  		bsr.w	ResumeMusic
00014998 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001499E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000149A4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000149AA E1E8 0012                  		asl	$12(a0)
000149AE 6700 FF82                  		beq.w	locret_12D80
000149B2 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000149B8 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000149BE 6E00                       		bgt.s	loc_12E0E
000149C0 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000149C6                            
000149C6                            loc_12E0E:
000149C6 303C 00AA                  		move.w	#$AA,d0
000149CA 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play splash sound
000149D0                            ; End of function Sonic_Water
000149D0                            
000149D0                            ; ===========================================================================
000149D0                            ; ---------------------------------------------------------------------------
000149D0                            ; Modes	for controlling	Sonic
000149D0                            ; ---------------------------------------------------------------------------
000149D0                            
000149D0                            Obj01_MdNormal:				; XREF: Obj01_Modes
000149D0 6100 0000                  		bsr.w	Sonic_Jump
000149D4 6100 0000                  		bsr.w	Sonic_SlopeResist
000149D8 6100 0000                  		bsr.w	Sonic_Move
000149DC 6100 0000                  		bsr.w	Sonic_Roll
000149E0 6100 0000                  		bsr.w	Sonic_LevelBound
000149E4 4EBA A12E                  		jsr	SpeedToPos
000149E8 6100 0000                  		bsr.w	Sonic_AnglePos
000149EC 6100 0000                  		bsr.w	Sonic_SlopeRepel
000149F0 4E75                       		rts	
000149F2                            ; ===========================================================================
000149F2                            
000149F2                            Obj01_MdJump:				; XREF: Obj01_Modes
000149F2 6100 0000                  		bsr.w	Sonic_JumpHeight
000149F6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000149FA 6100 0000                  		bsr.w	Sonic_LevelBound
000149FE 4EBA A0F4                  		jsr	ObjectFall
00014A02 0828 0006 0022             		btst	#6,$22(a0)
00014A08 6700                       		beq.s	loc_12E5C
00014A0A 0468 0028 0012             		subi.w	#$28,$12(a0)
00014A10                            
00014A10                            loc_12E5C:
00014A10 6100 0000                  		bsr.w	Sonic_JumpAngle
00014A14 6100 0000                  		bsr.w	Sonic_Floor
00014A18 0C38 0030 F5E2             		cmpi.b	#$30,(SonimeSST+sonime_airtimer).w
00014A1E 6600                       		bne.s	@addtimer
00014A20 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00014A26 6300                       		bls.s	@done
00014A28 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
00014A2E 6700                       		beq.s	@done
00014A30 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00014A36 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
00014A3C 6000                       		bra.s	@done
00014A3E                            
00014A3E                            
00014A3E                            	@addtimer:
00014A3E 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
00014A42 4A38 D012                  		tst.b	($FFFFD012).w
00014A46 6A00                       		bpl.s	@done
00014A48 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00014A4C                            
00014A4C                            	@done:
00014A4C 4E75                       		rts	
00014A4E                            ; ===========================================================================
00014A4E                            
00014A4E                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014A4E 6100 0000                  		bsr.w	Sonic_Jump
00014A52 6100 0000                  		bsr.w	Sonic_RollRepel
00014A56 6100 0000                  		bsr.w	Sonic_RollSpeed
00014A5A 6100 0000                  		bsr.w	Sonic_LevelBound
00014A5E 4EBA A0B4                  		jsr	SpeedToPos
00014A62 6100 0000                  		bsr.w	Sonic_AnglePos
00014A66 6100 0000                  		bsr.w	Sonic_SlopeRepel
00014A6A 4E75                       		rts	
00014A6C                            ; ===========================================================================
00014A6C                            
00014A6C                            Obj01_MdJump2:				; XREF: Obj01_Modes
00014A6C 6100 0000                  		bsr.w	Sonic_JumpHeight
00014A70 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014A74 6100 0000                  		bsr.w	Sonic_LevelBound
00014A78 4EBA A07A                  		jsr	ObjectFall
00014A7C 0828 0006 0022             		btst	#6,$22(a0)
00014A82 6700                       		beq.s	loc_12EA6
00014A84 0468 0028 0012             		subi.w	#$28,$12(a0)
00014A8A                            
00014A8A                            loc_12EA6:
00014A8A 6100 0000                  		bsr.w	Sonic_JumpAngle
00014A8E 6100 0000                  		bsr.w	Sonic_Floor
00014A92 0C38 0040 F5E2             		cmpi.b	#$40,(SonimeSST+sonime_airtimer).w
00014A98 6600                       		bne.s	@addtimer
00014A9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00014AA0 6300                       		bls.s	@done
00014AA2 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
00014AA8 6700                       		beq.s	@done
00014AAA 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00014AB0 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
00014AB6 6000                       		bra.s	@done
00014AB8                            
00014AB8                            
00014AB8                            	@addtimer:
00014AB8 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
00014ABC 4A38 D012                  		tst.b	($FFFFD012).w
00014AC0 6A00                       		bpl.s	@done
00014AC2 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00014AC6                            
00014AC6                            	@done:
00014AC6 4E75                       		rts	
00014AC8                            ; ---------------------------------------------------------------------------
00014AC8                            ; Subroutine to	make Sonic walk/run
00014AC8                            ; ---------------------------------------------------------------------------
00014AC8                            
00014AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AC8                            
00014AC8                            
00014AC8                            Sonic_Move:				; XREF: Obj01_MdNormal
00014AC8 3C38 F760                  		move.w	($FFFFF760).w,d6
00014ACC 3A38 F762                  		move.w	($FFFFF762).w,d5
00014AD0 3838 F764                  		move.w	($FFFFF764).w,d4
00014AD4 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014AD8 6600 0000                  		bne.w	loc_12FEE
00014ADC 4A68 003E                  		tst.w	$3E(a0)
00014AE0 6600 0000                  		bne.w	Obj01_ResetScr
00014AE4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014AEA 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00014AEC 6100 0000                  		bsr.w	Sonic_MoveLeft
00014AF0                            
00014AF0                            Obj01_NotLeft:
00014AF0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014AF6 6700                       		beq.s	Obj01_NotRight	; if not, branch
00014AF8 6100 0000                  		bsr.w	Sonic_MoveRight
00014AFC                            
00014AFC                            Obj01_NotRight:
00014AFC 1028 0026                  		move.b	$26(a0),d0
00014B00 0600 0020                  		addi.b	#$20,d0
00014B04 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00014B08 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014B0C 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
00014B10 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014B14 08A8 0005 0022             		bclr	#5,$22(a0)
00014B1A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014B20 0828 0003 0022             		btst	#3,$22(a0)
00014B26 6700                       		beq.s	Sonic_Balance
00014B28 7000                       		moveq	#0,d0
00014B2A 1028 003D                  		move.b	$3D(a0),d0
00014B2E ED48                       		lsl.w	#6,d0
00014B30 43F8 D000                  		lea	($FFFFD000).w,a1
00014B34 43F1 0000                  		lea	(a1,d0.w),a1
00014B38 4A29 0022                  		tst.b	$22(a1)
00014B3C 6B00                       		bmi.s	Sonic_LookUp
00014B3E 7200                       		moveq	#0,d1
00014B40 1229 0019                  		move.b	$19(a1),d1
00014B44 3401                       		move.w	d1,d2
00014B46 D442                       		add.w	d2,d2
00014B48 5942                       		subq.w	#4,d2
00014B4A D268 0008                  		add.w	8(a0),d1
00014B4E 9269 0008                  		sub.w	8(a1),d1
00014B52 0C41 0004                  		cmpi.w	#4,d1
00014B56 6D00                       		blt.s	loc_12F6A
00014B58 B242                       		cmp.w	d2,d1
00014B5A 6C00                       		bge.s	loc_12F5A
00014B5C 6000                       		bra.s	Sonic_LookUp
00014B5E                            ; ===========================================================================
00014B5E                            
00014B5E                            Sonic_Balance:
00014B5E 4EB9 0000 0000             		jsr	ObjHitFloor
00014B64 0C41 000C                  		cmpi.w	#$C,d1
00014B68 6D00                       		blt.s	Sonic_LookUp
00014B6A 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00014B70 6600                       		bne.s	loc_12F62
00014B72                            
00014B72                            loc_12F5A:
00014B72 08A8 0000 0022             		bclr	#0,$22(a0)
00014B78 6000                       		bra.s	loc_12F70
00014B7A                            ; ===========================================================================
00014B7A                            
00014B7A                            loc_12F62:
00014B7A 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00014B80 6600                       		bne.s	Sonic_LookUp
00014B82                            
00014B82                            loc_12F6A:
00014B82 08E8 0000 0022             		bset	#0,$22(a0)
00014B88                            
00014B88                            loc_12F70:
00014B88 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00014B8E 6000                       		bra.s	Obj01_ResetScr
00014B90                            ; ===========================================================================
00014B90                            
00014B90                            Sonic_LookUp:
00014B90 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00014B96 6700                       		beq.s	Sonic_Duck	; if not, branch
00014B98 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00014B9E 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014BA4 6700                       		beq.s	loc_12FC2
00014BA6 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00014BAA 6000                       		bra.s	loc_12FC2
00014BAC                            ; ===========================================================================
00014BAC                            
00014BAC                            Sonic_Duck:
00014BAC 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014BB2 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00014BB4 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00014BBA 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00014BC0 6700                       		beq.s	loc_12FC2
00014BC2 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014BC6 6000                       		bra.s	loc_12FC2
00014BC8                            ; ===========================================================================
00014BC8                            
00014BC8                            Obj01_ResetScr:
00014BC8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00014BCE 6700                       		beq.s	loc_12FC2	; if yes, branch
00014BD0 6400                       		bcc.s	loc_12FBE
00014BD2 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00014BD6                            
00014BD6                            loc_12FBE:
00014BD6 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00014BDA                            
00014BDA                            loc_12FC2:
00014BDA 1038 F602                  		move.b	($FFFFF602).w,d0
00014BDE 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00014BE2 6600                       		bne.s	loc_12FEE	; if yes, branch
00014BE4 3028 0020                  		move.w	$20(a0),d0
00014BE8 6700                       		beq.s	loc_12FEE
00014BEA 6B00                       		bmi.s	loc_12FE2
00014BEC 9045                       		sub.w	d5,d0
00014BEE 6400                       		bcc.s	loc_12FDC
00014BF0 303C 0000                  		move.w	#0,d0
00014BF4                            
00014BF4                            loc_12FDC:
00014BF4 3140 0020                  		move.w	d0,$20(a0)
00014BF8 6000                       		bra.s	loc_12FEE
00014BFA                            ; ===========================================================================
00014BFA                            
00014BFA                            loc_12FE2:
00014BFA D045                       		add.w	d5,d0
00014BFC 6400                       		bcc.s	loc_12FEA
00014BFE 303C 0000                  		move.w	#0,d0
00014C02                            
00014C02                            loc_12FEA:
00014C02 3140 0020                  		move.w	d0,$20(a0)
00014C06                            
00014C06                            loc_12FEE:
00014C06 1028 0026                  		move.b	$26(a0),d0
00014C0A 4EB9 0000 29F6             		jsr	(CalcSine).l
00014C10 C3E8 0020                  		muls.w	$20(a0),d1
00014C14 E081                       		asr.l	#8,d1
00014C16 3141 0010                  		move.w	d1,$10(a0)
00014C1A C1E8 0020                  		muls.w	$20(a0),d0
00014C1E E080                       		asr.l	#8,d0
00014C20 3140 0012                  		move.w	d0,$12(a0)
00014C24                            
00014C24                            loc_1300C:
00014C24 1028 0026                  		move.b	$26(a0),d0
00014C28 0600 0040                  		addi.b	#$40,d0
00014C2C 6B00                       		bmi.s	locret_1307C
00014C2E 123C 0040                  		move.b	#$40,d1
00014C32 4A68 0020                  		tst.w	$20(a0)
00014C36 6700                       		beq.s	locret_1307C
00014C38 6B00                       		bmi.s	loc_13024
00014C3A 4441                       		neg.w	d1
00014C3C                            
00014C3C                            loc_13024:
00014C3C 1028 0026                  		move.b	$26(a0),d0
00014C40 D001                       		add.b	d1,d0
00014C42 3F00                       		move.w	d0,-(sp)
00014C44 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014C48 301F                       		move.w	(sp)+,d0
00014C4A 4A41                       		tst.w	d1
00014C4C 6A00                       		bpl.s	locret_1307C
00014C4E E141                       		asl.w	#8,d1
00014C50 0600 0020                  		addi.b	#$20,d0
00014C54 0200 00C0                  		andi.b	#$C0,d0
00014C58 6700                       		beq.s	loc_13078
00014C5A 0C00 0040                  		cmpi.b	#$40,d0
00014C5E 6700                       		beq.s	loc_13066
00014C60 0C00 0080                  		cmpi.b	#$80,d0
00014C64 6700                       		beq.s	loc_13060
00014C66 D368 0010                  		add.w	d1,$10(a0)
00014C6A 08E8 0005 0022             		bset	#5,$22(a0)
00014C70 317C 0000 0020             		move.w	#0,$20(a0)
00014C76 4E75                       		rts	
00014C78                            ; ===========================================================================
00014C78                            
00014C78                            loc_13060:
00014C78 9368 0012                  		sub.w	d1,$12(a0)
00014C7C 4E75                       		rts	
00014C7E                            ; ===========================================================================
00014C7E                            
00014C7E                            loc_13066:
00014C7E 9368 0010                  		sub.w	d1,$10(a0)
00014C82 08E8 0005 0022             		bset	#5,$22(a0)
00014C88 317C 0000 0020             		move.w	#0,$20(a0)
00014C8E 4E75                       		rts	
00014C90                            ; ===========================================================================
00014C90                            
00014C90                            loc_13078:
00014C90 D368 0012                  		add.w	d1,$12(a0)
00014C94                            
00014C94                            locret_1307C:
00014C94 4E75                       		rts	
00014C96                            ; End of function Sonic_Move
00014C96                            
00014C96                            
00014C96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C96                            
00014C96                            
00014C96                            Sonic_MoveLeft:				; XREF: Sonic_Move
00014C96 3028 0020                  		move.w	$20(a0),d0
00014C9A 6700                       		beq.s	loc_13086
00014C9C 6A00                       		bpl.s	loc_130B2
00014C9E                            
00014C9E                            loc_13086:
00014C9E 08E8 0000 0022             		bset	#0,$22(a0)
00014CA4 6600                       		bne.s	loc_1309A
00014CA6 08A8 0005 0022             		bclr	#5,$22(a0)
00014CAC 117C 0001 001D             		move.b	#1,$1D(a0)
00014CB2                            
00014CB2                            loc_1309A:
00014CB2 9045                       		sub.w	d5,d0
00014CB4 3206                       		move.w	d6,d1
00014CB6 4441                       		neg.w	d1
00014CB8 B041                       		cmp.w	d1,d0
00014CBA 6E00                       		bgt.s	loc_130A6
00014CBC 3001                       		move.w	d1,d0
00014CBE                            
00014CBE                            loc_130A6:
00014CBE 3140 0020                  		move.w	d0,$20(a0)
00014CC2 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014CC8 4E75                       		rts	
00014CCA                            ; ===========================================================================
00014CCA                            
00014CCA                            loc_130B2:				; XREF: Sonic_MoveLeft
00014CCA 9044                       		sub.w	d4,d0
00014CCC 6400                       		bcc.s	loc_130BA
00014CCE 303C FF80                  		move.w	#-$80,d0
00014CD2                            
00014CD2                            loc_130BA:
00014CD2 3140 0020                  		move.w	d0,$20(a0)
00014CD6 1028 0026                  		move.b	$26(a0),d0
00014CDA 0600 0020                  		addi.b	#$20,d0
00014CDE 0200 00C0                  		andi.b	#$C0,d0
00014CE2 6600                       		bne.s	locret_130E8
00014CE4 0C40 0400                  		cmpi.w	#$400,d0
00014CE8 6D00                       		blt.s	locret_130E8
00014CEA 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014CF0 08A8 0000 0022             		bclr	#0,$22(a0)
00014CF6 303C 00A4                  		move.w	#$A4,d0
00014CFA 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play stopping sound
00014D00                            
00014D00                            locret_130E8:
00014D00 4E75                       		rts	
00014D02                            ; End of function Sonic_MoveLeft
00014D02                            
00014D02                            
00014D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D02                            
00014D02                            
00014D02                            Sonic_MoveRight:			; XREF: Sonic_Move
00014D02 3028 0020                  		move.w	$20(a0),d0
00014D06 6B00                       		bmi.s	loc_13118
00014D08 08A8 0000 0022             		bclr	#0,$22(a0)
00014D0E 6700                       		beq.s	loc_13104
00014D10 08A8 0005 0022             		bclr	#5,$22(a0)
00014D16 117C 0001 001D             		move.b	#1,$1D(a0)
00014D1C                            
00014D1C                            loc_13104:
00014D1C D045                       		add.w	d5,d0
00014D1E B046                       		cmp.w	d6,d0
00014D20 6D00                       		blt.s	loc_1310C
00014D22 3006                       		move.w	d6,d0
00014D24                            
00014D24                            loc_1310C:
00014D24 3140 0020                  		move.w	d0,$20(a0)
00014D28 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014D2E 4E75                       		rts	
00014D30                            ; ===========================================================================
00014D30                            
00014D30                            loc_13118:				; XREF: Sonic_MoveRight
00014D30 D044                       		add.w	d4,d0
00014D32 6400                       		bcc.s	loc_13120
00014D34 303C 0080                  		move.w	#$80,d0
00014D38                            
00014D38                            loc_13120:
00014D38 3140 0020                  		move.w	d0,$20(a0)
00014D3C 1028 0026                  		move.b	$26(a0),d0
00014D40 0600 0020                  		addi.b	#$20,d0
00014D44 0200 00C0                  		andi.b	#$C0,d0
00014D48 6600                       		bne.s	locret_1314E
00014D4A 0C40 FC00                  		cmpi.w	#-$400,d0
00014D4E 6E00                       		bgt.s	locret_1314E
00014D50 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014D56 08E8 0000 0022             		bset	#0,$22(a0)
00014D5C 303C 00A4                  		move.w	#$A4,d0
00014D60 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play stopping sound
00014D66                            
00014D66                            locret_1314E:
00014D66 4E75                       		rts	
00014D68                            ; End of function Sonic_MoveRight
00014D68                            
00014D68                            ; ---------------------------------------------------------------------------
00014D68                            ; Subroutine to	change Sonic's speed as he rolls
00014D68                            ; ---------------------------------------------------------------------------
00014D68                            
00014D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D68                            
00014D68                            
00014D68                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00014D68 3C38 F760                  		move.w	($FFFFF760).w,d6
00014D6C E346                       		asl.w	#1,d6
00014D6E 3A38 F762                  		move.w	($FFFFF762).w,d5
00014D72 E245                       		asr.w	#1,d5
00014D74 3838 F764                  		move.w	($FFFFF764).w,d4
00014D78 E444                       		asr.w	#2,d4
00014D7A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014D7E 6600 0000                  		bne.w	loc_131CC
00014D82 4A68 003E                  		tst.w	$3E(a0)
00014D86 6600                       		bne.s	loc_13188
00014D88 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014D8E 6700                       		beq.s	loc_1317C	; if not, branch
00014D90 6100 0000                  		bsr.w	Sonic_RollLeft
00014D94                            
00014D94                            loc_1317C:
00014D94 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014D9A 6700                       		beq.s	loc_13188	; if not, branch
00014D9C 6100 0000                  		bsr.w	Sonic_RollRight
00014DA0                            
00014DA0                            loc_13188:
00014DA0 3028 0020                  		move.w	$20(a0),d0
00014DA4 6700                       		beq.s	loc_131AA
00014DA6 6B00                       		bmi.s	loc_1319E
00014DA8 9045                       		sub.w	d5,d0
00014DAA 6400                       		bcc.s	loc_13198
00014DAC 303C 0000                  		move.w	#0,d0
00014DB0                            
00014DB0                            loc_13198:
00014DB0 3140 0020                  		move.w	d0,$20(a0)
00014DB4 6000                       		bra.s	loc_131AA
00014DB6                            ; ===========================================================================
00014DB6                            
00014DB6                            loc_1319E:				; XREF: Sonic_RollSpeed
00014DB6 D045                       		add.w	d5,d0
00014DB8 6400                       		bcc.s	loc_131A6
00014DBA 303C 0000                  		move.w	#0,d0
00014DBE                            
00014DBE                            loc_131A6:
00014DBE 3140 0020                  		move.w	d0,$20(a0)
00014DC2                            
00014DC2                            loc_131AA:
00014DC2 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
00014DC6 6600                       		bne.s	loc_131CC	; if yes, branch
00014DC8                            
00014DC8                            	@NoReset:
00014DC8 08A8 0002 0022             		bclr	#2,$22(a0)
00014DCE 117C 0013 0016             		move.b	#$13,$16(a0)
00014DD4 117C 0009 0017             		move.b	#9,$17(a0)
00014DDA 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014DE0 5B68 000C                  		subq.w	#5,$C(a0)
00014DE4                            
00014DE4                            loc_131CC:
00014DE4 1028 0026                  		move.b	$26(a0),d0
00014DE8 4EB9 0000 29F6             		jsr	(CalcSine).l
00014DEE C1E8 0020                  		muls.w	$20(a0),d0
00014DF2 E080                       		asr.l	#8,d0
00014DF4 3140 0012                  		move.w	d0,$12(a0)
00014DF8 C3E8 0020                  		muls.w	$20(a0),d1
00014DFC E081                       		asr.l	#8,d1
00014DFE 0C41 1000                  		cmpi.w	#$1000,d1
00014E02 6F00                       		ble.s	loc_131F0
00014E04 323C 1000                  		move.w	#$1000,d1
00014E08                            
00014E08                            loc_131F0:
00014E08 0C41 F000                  		cmpi.w	#-$1000,d1
00014E0C 6C00                       		bge.s	loc_131FA
00014E0E 323C F000                  		move.w	#-$1000,d1
00014E12                            
00014E12                            loc_131FA:
00014E12 3141 0010                  		move.w	d1,$10(a0)
00014E16 6000 FE0C                  		bra.w	loc_1300C
00014E1A                            ; End of function Sonic_RollSpeed
00014E1A                            
00014E1A                            
00014E1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E1A                            
00014E1A                            
00014E1A                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00014E1A 3028 0020                  		move.w	$20(a0),d0
00014E1E 6700                       		beq.s	loc_1320A
00014E20 6A00                       		bpl.s	loc_13218
00014E22                            
00014E22                            loc_1320A:
00014E22 08E8 0000 0022             		bset	#0,$22(a0)
00014E28 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014E2E 4E75                       		rts	
00014E30                            ; ===========================================================================
00014E30                            
00014E30                            loc_13218:
00014E30 9044                       		sub.w	d4,d0
00014E32 6400                       		bcc.s	loc_13220
00014E34 303C FF80                  		move.w	#-$80,d0
00014E38                            
00014E38                            loc_13220:
00014E38 3140 0020                  		move.w	d0,$20(a0)
00014E3C 4E75                       		rts	
00014E3E                            ; End of function Sonic_RollLeft
00014E3E                            
00014E3E                            
00014E3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E3E                            
00014E3E                            
00014E3E                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00014E3E 3028 0020                  		move.w	$20(a0),d0
00014E42 6B00                       		bmi.s	loc_1323A
00014E44 08A8 0000 0022             		bclr	#0,$22(a0)
00014E4A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014E50 4E75                       		rts	
00014E52                            ; ===========================================================================
00014E52                            
00014E52                            loc_1323A:
00014E52 D044                       		add.w	d4,d0
00014E54 6400                       		bcc.s	loc_13242
00014E56 303C 0080                  		move.w	#$80,d0
00014E5A                            
00014E5A                            loc_13242:
00014E5A 3140 0020                  		move.w	d0,$20(a0)
00014E5E 4E75                       		rts	
00014E60                            ; End of function Sonic_RollRight
00014E60                            
00014E60                            ; ---------------------------------------------------------------------------
00014E60                            ; Subroutine to	change Sonic's direction while jumping
00014E60                            ; ---------------------------------------------------------------------------
00014E60                            
00014E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E60                            
00014E60                            
00014E60                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014E60 3C38 F760                  		move.w	($FFFFF760).w,d6
00014E64 3A38 F762                  		move.w	($FFFFF762).w,d5
00014E68 E345                       		asl.w	#1,d5
00014E6A 0828 0004 0022             		btst	#4,$22(a0)
00014E70 6600                       		bne.s	Obj01_ResetScr2
00014E72 3028 0010                  		move.w	$10(a0),d0
00014E76 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014E7C 6700                       		beq.s	loc_13278	; if not, branch
00014E7E 08E8 0000 0022             		bset	#0,$22(a0)
00014E84 9045                       		sub.w	d5,d0
00014E86 3206                       		move.w	d6,d1
00014E88 4441                       		neg.w	d1
00014E8A B041                       		cmp.w	d1,d0
00014E8C 6E00                       		bgt.s	loc_13278
00014E8E 3001                       		move.w	d1,d0
00014E90                            
00014E90                            loc_13278:
00014E90 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014E96 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00014E98 08A8 0000 0022             		bclr	#0,$22(a0)
00014E9E D045                       		add.w	d5,d0
00014EA0 B046                       		cmp.w	d6,d0
00014EA2 6D00                       		blt.s	Obj01_JumpMove
00014EA4 3006                       		move.w	d6,d0
00014EA6                            
00014EA6                            Obj01_JumpMove:
00014EA6 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00014EAA                            
00014EAA                            Obj01_ResetScr2:
00014EAA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00014EB0 6700                       		beq.s	loc_132A4	; if yes, branch
00014EB2 6400                       		bcc.s	loc_132A0
00014EB4 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014EB8                            
00014EB8                            loc_132A0:
00014EB8 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014EBC                            
00014EBC                            loc_132A4:
00014EBC 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00014EC2 6500                       		bcs.s	locret_132D2	; if yes, branch
00014EC4 3028 0010                  		move.w	$10(a0),d0
00014EC8 3200                       		move.w	d0,d1
00014ECA EA41                       		asr.w	#5,d1
00014ECC 6700                       		beq.s	locret_132D2
00014ECE 6B00                       		bmi.s	loc_132C6
00014ED0 9041                       		sub.w	d1,d0
00014ED2 6400                       		bcc.s	loc_132C0
00014ED4 303C 0000                  		move.w	#0,d0
00014ED8                            
00014ED8                            loc_132C0:
00014ED8 3140 0010                  		move.w	d0,$10(a0)
00014EDC 4E75                       		rts	
00014EDE                            ; ===========================================================================
00014EDE                            
00014EDE                            loc_132C6:
00014EDE 9041                       		sub.w	d1,d0
00014EE0 6500                       		bcs.s	loc_132CE
00014EE2 303C 0000                  		move.w	#0,d0
00014EE6                            
00014EE6                            loc_132CE:
00014EE6 3140 0010                  		move.w	d0,$10(a0)
00014EEA                            
00014EEA                            locret_132D2:
00014EEA 4E75                       		rts	
00014EEC                            ; End of function Sonic_ChgJumpDir
00014EEC                            
00014EEC                            ; ===========================================================================
00014EEC                            ; ---------------------------------------------------------------------------
00014EEC                            ; Unused subroutine to squash Sonic
00014EEC                            ; ---------------------------------------------------------------------------
00014EEC 1028 0026                  		move.b	$26(a0),d0
00014EF0 0600 0020                  		addi.b	#$20,d0
00014EF4 0200 00C0                  		andi.b	#$C0,d0
00014EF8 6600                       		bne.s	locret_13302
00014EFA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014EFE 4A41                       		tst.w	d1
00014F00 6A00                       		bpl.s	locret_13302
00014F02 317C 0000 0020             		move.w	#0,$20(a0)	; stop Sonic moving
00014F08 317C 0000 0010             		move.w	#0,$10(a0)
00014F0E 317C 0000 0012             		move.w	#0,$12(a0)
00014F14 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014F1A                            
00014F1A                            locret_13302:
00014F1A 4E75                       		rts	
00014F1C                            ; ---------------------------------------------------------------------------
00014F1C                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00014F1C                            ; ---------------------------------------------------------------------------
00014F1C                            
00014F1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F1C                            
00014F1C                            
00014F1C                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00014F1C 2228 0008                  		move.l	8(a0),d1
00014F20 3028 0010                  		move.w	$10(a0),d0
00014F24 48C0                       		ext.l	d0
00014F26 E180                       		asl.l	#8,d0
00014F28 D280                       		add.l	d0,d1
00014F2A 4841                       		swap	d1
00014F2C 3038 F728                  		move.w	($FFFFF728).w,d0
00014F30 0640 0010                  		addi.w	#$10,d0
00014F34 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014F36 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014F38 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014F3C 0640 0128                  		addi.w	#$128,d0
00014F40 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014F44 6600                       		bne.s	loc_13332
00014F46 0640 0040                  		addi.w	#$40,d0
00014F4A                            
00014F4A                            loc_13332:
00014F4A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014F4C 6300                       		bls.s	Boundary_Sides	; if yes, branch
00014F4E                            
00014F4E                            loc_13336:
00014F4E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014F52 0640 00E0                  		addi.w	#$E0,d0
00014F56 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014F5A 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014F5C 4E75                       		rts	
00014F5E                            ; ===========================================================================
00014F5E                            
00014F5E                            Boundary_Bottom:
00014F5E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00014F64 6600                       		bne.s	JMPKillSonic	; if not, kill Sonic
00014F66 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00014F6C 6500                       		bcs.s	JMPKillSonic
00014F6E 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00014F72 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014F78 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00014F7E 4E75                       		rts	
00014F80                            ; ===========================================================================
00014F80                            
00014F80                            Boundary_Sides:
00014F80 3140 0008                  		move.w	d0,8(a0)
00014F84 317C 0000 000A             		move.w	#0,$A(a0)
00014F8A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014F90 317C 0000 0020             		move.w	#0,$20(a0)
00014F96 60B6                       		bra.s	loc_13336
00014F98                            
00014F98                            JMPKillSonic:
00014F98 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00014F9E 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00014FA4 4EF9 0000 0000             		jmp	KillSonic
00014FAA                            ; End of function Sonic_LevelBound
00014FAA                            
00014FAA                            ; ---------------------------------------------------------------------------
00014FAA                            ; Subroutine allowing Sonic to roll when he's moving
00014FAA                            ; ---------------------------------------------------------------------------
00014FAA                            
00014FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FAA                            
00014FAA                            
00014FAA                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014FAA 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014FAE 6600                       		bne.s	Obj01_NoRoll
00014FB0 3028 0020                  		move.w	$20(a0),d0
00014FB4 6A00                       		bpl.s	loc_13392
00014FB6 4440                       		neg.w	d0
00014FB8                            
00014FB8                            loc_13392:
00014FB8 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00014FBC 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014FBE 1038 F602                  		move.b	($FFFFF602).w,d0
00014FC2 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00014FC6 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00014FC8 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014FCE 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00014FD0                            
00014FD0                            Obj01_NoRoll:
00014FD0 4E75                       		rts	
00014FD2                            ; ===========================================================================
00014FD2                            
00014FD2                            Obj01_ChkRoll:
00014FD2 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00014FD8 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00014FDA 4E75                       		rts	
00014FDC                            ; ===========================================================================
00014FDC                            
00014FDC                            Obj01_DoRoll:
00014FDC 08E8 0002 0022             		bset	#2,$22(a0)
00014FE2 117C 000E 0016             		move.b	#$E,$16(a0)
00014FE8 117C 0007 0017             		move.b	#7,$17(a0)
00014FEE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014FF4 5A68 000C                  		addq.w	#5,$C(a0)
00014FF8 303C 00BE                  		move.w	#$BE,d0
00014FFC 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rolling sound
00015002 4A68 0020                  		tst.w	$20(a0)
00015006 6600                       		bne.s	locret_133E8
00015008 317C 0200 0020             		move.w	#$200,$20(a0)
0001500E                            
0001500E                            locret_133E8:
0001500E 4E75                       		rts	
00015010                            ; End of function Sonic_Roll
00015010                            
00015010                            ; ---------------------------------------------------------------------------
00015010                            ; Subroutine allowing Sonic to jump
00015010                            ; ---------------------------------------------------------------------------
00015010                            
00015010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015010                            
00015010                            
00015010                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015010 1038 F603                  		move.b	($FFFFF603).w,d0
00015014 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00015018 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001501C 31FC 6000 F5D8             		move.w	#$6000,(SonimeSST+sonime_waittimer).w
00015022 0C38 000B F5CE             		cmpi.b	#face_impatient,(SonimeSST+sonime_face).w
00015028 6600                       		bne.s	@notfrustrated
0001502A 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00015030                            
00015030                            	@notfrustrated:
00015030 7000                       		moveq	#0,d0
00015032 1028 0026                  		move.b	$26(a0),d0
00015036 0600 0080                  		addi.b	#$80,d0
0001503A 6100 0000                  		bsr.w	sub_14D48
0001503E 0C41 0006                  		cmpi.w	#6,d1
00015042 6D00 0000                  		blt.w	locret_1348E
00015046 343C 0680                  		move.w	#$680,d2
0001504A 0828 0006 0022             		btst	#6,$22(a0)
00015050 6700                       		beq.s	loc_1341C
00015052 343C 0380                  		move.w	#$380,d2
00015056                            
00015056                            loc_1341C:
00015056 7000                       		moveq	#0,d0
00015058 1028 0026                  		move.b	$26(a0),d0
0001505C 0400 0040                  		subi.b	#$40,d0
00015060 4EB9 0000 29F6             		jsr	(CalcSine).l
00015066 C3C2                       		muls.w	d2,d1
00015068 E081                       		asr.l	#8,d1
0001506A D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
0001506E C1C2                       		muls.w	d2,d0
00015070 E080                       		asr.l	#8,d0
00015072 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00015076 08E8 0001 0022             		bset	#1,$22(a0)
0001507C 08A8 0005 0022             		bclr	#5,$22(a0)
00015082 588F                       		addq.l	#4,sp
00015084 117C 0001 003C             		move.b	#1,$3C(a0)
0001508A 4228 0038                  		clr.b	$38(a0)
0001508E 303C 00A0                  		move.w	#$A0,d0
00015092 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play jumping sound
00015098 117C 0013 0016             		move.b	#$13,$16(a0)
0001509E 117C 0009 0017             		move.b	#9,$17(a0)
000150A4 0828 0002 0022             		btst	#2,$22(a0)
000150AA 6600                       		bne.s	loc_13490
000150AC 117C 000E 0016             		move.b	#$E,$16(a0)
000150B2 117C 0007 0017             		move.b	#7,$17(a0)
000150B8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
000150BE 08E8 0002 0022             		bset	#2,$22(a0)
000150C4 5A68 000C                  		addq.w	#5,$C(a0)
000150C8                            
000150C8                            locret_1348E:
000150C8 4E75                       		rts	
000150CA                            ; ===========================================================================
000150CA                            
000150CA                            loc_13490:
000150CA 08E8 0004 0022             		bset	#4,$22(a0)
000150D0 4E75                       		rts	
000150D2                            ; End of function Sonic_Jump
000150D2                            
000150D2                            
000150D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150D2                            
000150D2                            
000150D2                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
000150D2 4A28 003C                  		tst.b	$3C(a0)
000150D6 6700                       		beq.s	loc_134C4
000150D8 323C FC00                  		move.w	#-$400,d1
000150DC 0828 0006 0022             		btst	#6,$22(a0)
000150E2 6700                       		beq.s	loc_134AE
000150E4 323C FE00                  		move.w	#-$200,d1
000150E8                            
000150E8                            loc_134AE:
000150E8 B268 0012                  		cmp.w	$12(a0),d1
000150EC 6F00                       		ble.s	locret_134C2
000150EE 1038 F602                  		move.b	($FFFFF602).w,d0
000150F2 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000150F6 6600                       		bne.s	locret_134C2	; if yes, branch
000150F8 3141 0012                  		move.w	d1,$12(a0)
000150FC                            
000150FC                            locret_134C2:
000150FC 4E75                       		rts	
000150FE                            ; ===========================================================================
000150FE                            
000150FE                            loc_134C4:
000150FE 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00015104 6C00                       		bge.s	locret_134D2
00015106 317C F040 0012             		move.w	#-$FC0,$12(a0)
0001510C                            
0001510C                            locret_134D2:
0001510C 4E75                       		rts	
0001510E                            ; End of function Sonic_JumpHeight
0001510E                            
0001510E                            ; ---------------------------------------------------------------------------
0001510E                            ; Subroutine to	slow Sonic walking up a	slope
0001510E                            ; ---------------------------------------------------------------------------
0001510E                            
0001510E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001510E                            
0001510E                            
0001510E                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
0001510E 1028 0026                  		move.b	$26(a0),d0
00015112 0600 0060                  		addi.b	#$60,d0
00015116 0C00 00C0                  		cmpi.b	#$C0,d0
0001511A 6400                       		bcc.s	locret_13508
0001511C 1028 0026                  		move.b	$26(a0),d0
00015120 4EB9 0000 29F6             		jsr	(CalcSine).l
00015126 C1FC 0020                  		muls.w	#$20,d0
0001512A E080                       		asr.l	#8,d0
0001512C 4A68 0020                  		tst.w	$20(a0)
00015130 6700                       		beq.s	locret_13508
00015132 6B00                       		bmi.s	loc_13504
00015134 4A40                       		tst.w	d0
00015136 6700                       		beq.s	locret_13502
00015138 D168 0020                  		add.w	d0,$20(a0)	; change Sonic's inertia
0001513C                            
0001513C                            locret_13502:
0001513C 4E75                       		rts	
0001513E                            ; ===========================================================================
0001513E                            
0001513E                            loc_13504:
0001513E D168 0020                  		add.w	d0,$20(a0)
00015142                            
00015142                            locret_13508:
00015142 4E75                       		rts	
00015144                            ; End of function Sonic_SlopeResist
00015144                            
00015144                            ; ---------------------------------------------------------------------------
00015144                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00015144                            ; ---------------------------------------------------------------------------
00015144                            
00015144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015144                            
00015144                            
00015144                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00015144 1028 0026                  		move.b	$26(a0),d0
00015148 0600 0060                  		addi.b	#$60,d0
0001514C 0C00 00C0                  		cmpi.b	#-$40,d0
00015150 6400                       		bcc.s	locret_13544
00015152 1028 0026                  		move.b	$26(a0),d0
00015156 4EB9 0000 29F6             		jsr	(CalcSine).l
0001515C C1FC 0050                  		muls.w	#$50,d0
00015160 E080                       		asr.l	#8,d0
00015162 4A68 0020                  		tst.w	$20(a0)
00015166 6B00                       		bmi.s	loc_1353A
00015168 4A40                       		tst.w	d0
0001516A 6A00                       		bpl.s	loc_13534
0001516C E480                       		asr.l	#2,d0
0001516E                            
0001516E                            loc_13534:
0001516E D168 0020                  		add.w	d0,$20(a0)
00015172 4E75                       		rts	
00015174                            ; ===========================================================================
00015174                            
00015174                            loc_1353A:
00015174 4A40                       		tst.w	d0
00015176 6B00                       		bmi.s	loc_13540
00015178 E480                       		asr.l	#2,d0
0001517A                            
0001517A                            loc_13540:
0001517A D168 0020                  		add.w	d0,$20(a0)
0001517E                            
0001517E                            locret_13544:
0001517E 4E75                       		rts	
00015180                            ; End of function Sonic_RollRepel
00015180                            
00015180                            ; ---------------------------------------------------------------------------
00015180                            ; Subroutine to	push Sonic down	a slope
00015180                            ; ---------------------------------------------------------------------------
00015180                            
00015180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015180                            
00015180                            
00015180                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00015180 4E71                       		nop	
00015182 4A28 0038                  		tst.b	$38(a0)
00015186 6600                       		bne.s	locret_13580
00015188 4A68 003E                  		tst.w	$3E(a0)
0001518C 6600                       		bne.s	loc_13582
0001518E 1028 0026                  		move.b	$26(a0),d0
00015192 0600 0020                  		addi.b	#$20,d0
00015196 0200 00C0                  		andi.b	#$C0,d0
0001519A 6700                       		beq.s	locret_13580
0001519C 3028 0020                  		move.w	$20(a0),d0
000151A0 6A00                       		bpl.s	loc_1356A
000151A2 4440                       		neg.w	d0
000151A4                            
000151A4                            loc_1356A:
000151A4 0C40 0280                  		cmpi.w	#$280,d0
000151A8 6400                       		bcc.s	locret_13580
000151AA 4268 0020                  		clr.w	$20(a0)
000151AE 08E8 0001 0022             		bset	#1,$22(a0)
000151B4 317C 001E 003E             		move.w	#$1E,$3E(a0)
000151BA                            
000151BA                            locret_13580:
000151BA 4E75                       		rts	
000151BC                            ; ===========================================================================
000151BC                            
000151BC                            loc_13582:
000151BC 5368 003E                  		subq.w	#1,$3E(a0)
000151C0 4E75                       		rts	
000151C2                            ; End of function Sonic_SlopeRepel
000151C2                            
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            
000151C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151C2                            
000151C2                            
000151C2                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
000151C2 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000151C6 6700                       		beq.s	locret_135A2	; if already 0,	branch
000151C8 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000151CA                            
000151CA 5400                       		addq.b	#2,d0		; increase angle
000151CC 6400                       		bcc.s	loc_13596
000151CE 7000                       		moveq	#0,d0
000151D0                            
000151D0                            loc_13596:
000151D0 6000                       		bra.s	loc_1359E
000151D2                            ; ===========================================================================
000151D2                            
000151D2                            loc_13598:
000151D2 5500                       		subq.b	#2,d0		; decrease angle
000151D4 6400                       		bcc.s	loc_1359E
000151D6 7000                       		moveq	#0,d0
000151D8                            
000151D8                            loc_1359E:
000151D8 1140 0026                  		move.b	d0,$26(a0)
000151DC                            
000151DC                            locret_135A2:
000151DC 4E75                       		rts	
000151DE                            ; End of function Sonic_JumpAngle
000151DE                            
000151DE                            ; ---------------------------------------------------------------------------
000151DE                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000151DE                            ; ---------------------------------------------------------------------------
000151DE                            
000151DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151DE                            
000151DE                            
000151DE                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
000151DE 3228 0010                  		move.w	$10(a0),d1
000151E2 3428 0012                  		move.w	$12(a0),d2
000151E6 4EB9 0000 2CBE             		jsr	(CalcAngle).l
000151EC 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000151F0 0400 0020                  		subi.b	#$20,d0
000151F4 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000151F8 0200 00C0                  		andi.b	#$C0,d0
000151FC 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00015200 0C00 0040                  		cmpi.b	#$40,d0
00015204 6700 0000                  		beq.w	loc_13680
00015208 0C00 0080                  		cmpi.b	#$80,d0
0001520C 6700 0000                  		beq.w	loc_136E2
00015210 0C00 00C0                  		cmpi.b	#-$40,d0
00015214 6700 0000                  		beq.w	loc_1373E
00015218 6100 0000                  		bsr.w	Sonic_HitWall
0001521C 4A41                       		tst.w	d1
0001521E 6A00                       		bpl.s	loc_135F0
00015220 9368 0008                  		sub.w	d1,8(a0)
00015224 317C 0000 0010             		move.w	#0,$10(a0)
0001522A                            
0001522A                            loc_135F0:
0001522A 6100 0000                  		bsr.w	sub_14EB4
0001522E 4A41                       		tst.w	d1
00015230 6A00                       		bpl.s	loc_13602
00015232 D368 0008                  		add.w	d1,8(a0)
00015236 317C 0000 0010             		move.w	#0,$10(a0)
0001523C                            
0001523C                            loc_13602:
0001523C 6100 0000                  		bsr.w	Sonic_HitFloor
00015240 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015244 4A41                       		tst.w	d1
00015246 6A00                       		bpl.s	locret_1367E
00015248 1428 0012                  		move.b	$12(a0),d2
0001524C 5002                       		addq.b	#8,d2
0001524E 4402                       		neg.b	d2
00015250 B202                       		cmp.b	d2,d1
00015252 6C00                       		bge.s	loc_1361E
00015254 B002                       		cmp.b	d2,d0
00015256 6D00                       		blt.s	locret_1367E
00015258                            
00015258                            loc_1361E:
00015258 D368 000C                  		add.w	d1,$C(a0)
0001525C 1143 0026                  		move.b	d3,$26(a0)
00015260 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015264 117C 0000 001C             		move.b	#0,$1C(a0)
0001526A 1003                       		move.b	d3,d0
0001526C 0600 0020                  		addi.b	#$20,d0
00015270 0200 0040                  		andi.b	#$40,d0
00015274 6600                       		bne.s	loc_1365C
00015276 1003                       		move.b	d3,d0
00015278 0600 0010                  		addi.b	#$10,d0
0001527C 0200 0020                  		andi.b	#$20,d0
00015280 6700                       		beq.s	loc_1364E
00015282 E0E8 0012                  		asr	$12(a0)
00015286 6000                       		bra.s	loc_13670
00015288                            ; ===========================================================================
00015288                            
00015288                            loc_1364E:
00015288 317C 0000 0012             		move.w	#0,$12(a0)
0001528E 3168 0010 0020             		move.w	$10(a0),$20(a0)
00015294 4E75                       		rts	
00015296                            ; ===========================================================================
00015296                            
00015296                            loc_1365C:
00015296 317C 0000 0010             		move.w	#0,$10(a0)
0001529C 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000152A2 6F00                       		ble.s	loc_13670
000152A4 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000152AA                            
000152AA                            loc_13670:
000152AA 3168 0012 0020             		move.w	$12(a0),$20(a0)
000152B0 4A03                       		tst.b	d3
000152B2 6A00                       		bpl.s	locret_1367E
000152B4 4468 0020                  		neg.w	$20(a0)
000152B8                            
000152B8                            locret_1367E:
000152B8 4E75                       		rts	
000152BA                            ; ===========================================================================
000152BA                            
000152BA                            loc_13680:
000152BA 6100 0000                  		bsr.w	Sonic_HitWall
000152BE 4A41                       		tst.w	d1
000152C0 6A00                       		bpl.s	loc_1369A
000152C2 9368 0008                  		sub.w	d1,8(a0)
000152C6 317C 0000 0010             		move.w	#0,$10(a0)
000152CC 3168 0012 0020             		move.w	$12(a0),$20(a0)
000152D2 4E75                       		rts	
000152D4                            ; ===========================================================================
000152D4                            
000152D4                            loc_1369A:
000152D4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000152D8 4A41                       		tst.w	d1
000152DA 6A00                       		bpl.s	loc_136B4
000152DC 9368 000C                  		sub.w	d1,$C(a0)
000152E0 4A68 0012                  		tst.w	$12(a0)
000152E4 6A00                       		bpl.s	locret_136B2
000152E6 317C 0000 0012             		move.w	#0,$12(a0)
000152EC                            
000152EC                            locret_136B2:
000152EC 4E75                       		rts	
000152EE                            ; ===========================================================================
000152EE                            
000152EE                            loc_136B4:
000152EE 4A68 0012                  		tst.w	$12(a0)
000152F2 6B00                       		bmi.s	locret_136E0
000152F4 6100 0000                  		bsr.w	Sonic_HitFloor
000152F8 4A41                       		tst.w	d1
000152FA 6A00                       		bpl.s	locret_136E0
000152FC D368 000C                  		add.w	d1,$C(a0)
00015300 1143 0026                  		move.b	d3,$26(a0)
00015304 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015308 117C 0000 001C             		move.b	#0,$1C(a0)
0001530E 317C 0000 0012             		move.w	#0,$12(a0)
00015314 3168 0010 0020             		move.w	$10(a0),$20(a0)
0001531A                            
0001531A                            locret_136E0:
0001531A 4E75                       		rts	
0001531C                            ; ===========================================================================
0001531C                            
0001531C                            loc_136E2:
0001531C 6100 0000                  		bsr.w	Sonic_HitWall
00015320 4A41                       		tst.w	d1
00015322 6A00                       		bpl.s	loc_136F4
00015324 9368 0008                  		sub.w	d1,8(a0)
00015328 317C 0000 0010             		move.w	#0,$10(a0)
0001532E                            
0001532E                            loc_136F4:
0001532E 6100 0000                  		bsr.w	sub_14EB4
00015332 4A41                       		tst.w	d1
00015334 6A00                       		bpl.s	loc_13706
00015336 D368 0008                  		add.w	d1,8(a0)
0001533A 317C 0000 0010             		move.w	#0,$10(a0)
00015340                            
00015340                            loc_13706:
00015340 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015344 4A41                       		tst.w	d1
00015346 6A00                       		bpl.s	locret_1373C
00015348 9368 000C                  		sub.w	d1,$C(a0)
0001534C 1003                       		move.b	d3,d0
0001534E 0600 0020                  		addi.b	#$20,d0
00015352 0200 0040                  		andi.b	#$40,d0
00015356 6600                       		bne.s	loc_13726
00015358 317C 0000 0012             		move.w	#0,$12(a0)
0001535E 4E75                       		rts	
00015360                            ; ===========================================================================
00015360                            
00015360                            loc_13726:
00015360 1143 0026                  		move.b	d3,$26(a0)
00015364 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015368 3168 0012 0020             		move.w	$12(a0),$20(a0)
0001536E 4A03                       		tst.b	d3
00015370 6A00                       		bpl.s	locret_1373C
00015372 4468 0020                  		neg.w	$20(a0)
00015376                            
00015376                            locret_1373C:
00015376 4E75                       		rts	
00015378                            ; ===========================================================================
00015378                            
00015378                            loc_1373E:
00015378 6100 0000                  		bsr.w	sub_14EB4
0001537C 4A41                       		tst.w	d1
0001537E 6A00                       		bpl.s	loc_13758
00015380 D368 0008                  		add.w	d1,8(a0)
00015384 317C 0000 0010             		move.w	#0,$10(a0)
0001538A 3168 0012 0020             		move.w	$12(a0),$20(a0)
00015390 4E75                       		rts	
00015392                            ; ===========================================================================
00015392                            
00015392                            loc_13758:
00015392 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015396 4A41                       		tst.w	d1
00015398 6A00                       		bpl.s	loc_13772
0001539A 9368 000C                  		sub.w	d1,$C(a0)
0001539E 4A68 0012                  		tst.w	$12(a0)
000153A2 6A00                       		bpl.s	locret_13770
000153A4 317C 0000 0012             		move.w	#0,$12(a0)
000153AA                            
000153AA                            locret_13770:
000153AA 4E75                       		rts	
000153AC                            ; ===========================================================================
000153AC                            
000153AC                            loc_13772:
000153AC 4A68 0012                  		tst.w	$12(a0)
000153B0 6B00                       		bmi.s	locret_1379E
000153B2 6100 0000                  		bsr.w	Sonic_HitFloor
000153B6 4A41                       		tst.w	d1
000153B8 6A00                       		bpl.s	locret_1379E
000153BA D368 000C                  		add.w	d1,$C(a0)
000153BE 1143 0026                  		move.b	d3,$26(a0)
000153C2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000153C6 117C 0000 001C             		move.b	#0,$1C(a0)
000153CC 317C 0000 0012             		move.w	#0,$12(a0)
000153D2 3168 0010 0020             		move.w	$10(a0),$20(a0)
000153D8                            
000153D8                            locret_1379E:
000153D8 4E75                       		rts	
000153DA                            ; End of function Sonic_Floor
000153DA                            
000153DA                            ; ---------------------------------------------------------------------------
000153DA                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000153DA                            ; ---------------------------------------------------------------------------
000153DA                            
000153DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153DA                            
000153DA                            
000153DA                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000153DA 0828 0004 0022             		btst	#4,$22(a0)
000153E0 6700                       		beq.s	loc_137AE
000153E2 4E71                       		nop	
000153E4 4E71                       		nop	
000153E6 4E71                       		nop	
000153E8                            
000153E8                            loc_137AE:
000153E8 08A8 0005 0022             		bclr	#5,$22(a0)
000153EE 08A8 0001 0022             		bclr	#1,$22(a0)
000153F4 08A8 0004 0022             		bclr	#4,$22(a0)
000153FA 0828 0002 0022             		btst	#2,$22(a0)
00015400 6700                       		beq.s	loc_137E4
00015402 08A8 0002 0022             		bclr	#2,$22(a0)
00015408 117C 0013 0016             		move.b	#$13,$16(a0)
0001540E 117C 0009 0017             		move.b	#9,$17(a0)
00015414 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001541A 5B68 000C                  		subq.w	#5,$C(a0)
0001541E                            
0001541E                            loc_137E4:
0001541E 117C 0000 003C             		move.b	#0,$3C(a0)
00015424 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001542A 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001542E                            
0001542E                            	@NoReset:
0001542E 4E75                       		rts	
00015430                            ; End of function Sonic_ResetOnFloor
00015430                            
00015430                            ; ===========================================================================
00015430                            ; ---------------------------------------------------------------------------
00015430                            ; Sonic	when he	gets hurt
00015430                            ; ---------------------------------------------------------------------------
00015430                            
00015430                            Obj01_Hurt:				; XREF: Obj01_Index
00015430 4EBA 96E2                  		jsr	SpeedToPos
00015434 0668 0030 0012             		addi.w	#$30,$12(a0)
0001543A 0828 0006 0022             		btst	#6,$22(a0)
00015440 6700                       		beq.s	loc_1380C
00015442 0468 0020 0012             		subi.w	#$20,$12(a0)
00015448                            
00015448                            loc_1380C:
00015448 6100 0000                  		bsr.w	Sonic_HurtStop
0001544C 6100 FACE                  		bsr.w	Sonic_LevelBound
00015450 6100 F4BE                  		bsr.w	Sonic_RecordPos
00015454 6100 0000                  		bsr.w	Sonic_Animate
00015458 6100 0000                  		bsr.w	LoadSonicDynPLC
0001545C 4EFA 96D0                  		jmp	DisplaySprite
00015460                            
00015460                            ; ---------------------------------------------------------------------------
00015460                            ; Subroutine to	stop Sonic falling after he's been hurt
00015460                            ; ---------------------------------------------------------------------------
00015460                            
00015460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015460                            
00015460                            
00015460                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00015460 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015464 0640 00E0                  		addi.w	#$E0,d0
00015468 B068 000C                  		cmp.w	$C(a0),d0
0001546C 6500 FB2A                  		bcs.w	JMPKillSonic
00015470 6100 FD6C                  		bsr.w	Sonic_Floor
00015474 0828 0001 0022             		btst	#1,$22(a0)
0001547A 6600                       		bne.s	locret_13860
0001547C 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00015482 7000                       		moveq	#0,d0
00015484 3140 0012                  		move.w	d0,$12(a0)
00015488 3140 0010                  		move.w	d0,$10(a0)
0001548C 3140 0020                  		move.w	d0,$20(a0)
00015490 117C 0000 001C             		move.b	#0,$1C(a0)
00015496 5528 0024                  		subq.b	#2,$24(a0)
0001549A 317C 0078 0030             		move.w	#$78,$30(a0)
000154A0                            
000154A0                            locret_13860:
000154A0 4E75                       		rts	
000154A2                            ; End of function Sonic_HurtStop
000154A2                            
000154A2                            ; ===========================================================================
000154A2                            ; ---------------------------------------------------------------------------
000154A2                            ; Sonic	when he	dies
000154A2                            ; ---------------------------------------------------------------------------
000154A2                            
000154A2                            Obj01_Death:				; XREF: Obj01_Index
000154A2 6100 0000                  		bsr.w	GameOver
000154A6 4EBA 964C                  		jsr	ObjectFall
000154AA 6100 F464                  		bsr.w	Sonic_RecordPos
000154AE 6100 0000                  		bsr.w	Sonic_Animate
000154B2 6100 0000                  		bsr.w	LoadSonicDynPLC
000154B6 4EFA 9676                  		jmp	DisplaySprite
000154BA                            
000154BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154BA                            
000154BA                            
000154BA                            GameOver:				; XREF: Obj01_Death
000154BA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000154BE 0640 0100                  		addi.w	#$100,d0
000154C2 B068 000C                  		cmp.w	$C(a0),d0
000154C6 6400 0000                  		bcc.w	locret_13900
000154CA 317C FFC8 0012             		move.w	#-$38,$12(a0)
000154D0 5428 0024                  		addq.b	#2,$24(a0)
000154D4 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000154D8 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000154DC 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000154E0 6600                       		bne.s	loc_138D4
000154E2 317C 0000 003A             		move.w	#0,$3A(a0)
000154E8 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000154EE 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000154F4 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000154FA 4238 FE1A                  		clr.b	($FFFFFE1A).w
000154FE                            
000154FE                            loc_138C2:
000154FE 303C 008F                  		move.w	#$8F,d0
00015502 4EB9 0000 121A             		jsr	(PlaySound).l	; play game over music
00015508 7003                       		moveq	#3,d0
0001550A 4EF9 0000 145E             		jmp	(LoadPLC).l	; load game over patterns
00015510                            ; ===========================================================================
00015510                            
00015510                            loc_138D4:
00015510 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00015516 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
0001551A 6700                       		beq.s	locret_13900	; if not, branch
0001551C 317C 0000 003A             		move.w	#0,$3A(a0)
00015522 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00015528 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001552E 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00015534 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001553A 60C2                       		bra.s	loc_138C2
0001553C                            ; ===========================================================================
0001553C                            
0001553C                            locret_13900:
0001553C 4E75                       		rts	
0001553E                            ; End of function GameOver
0001553E                            
0001553E                            ; ===========================================================================
0001553E                            ; ---------------------------------------------------------------------------
0001553E                            ; Sonic	when the level is restarted
0001553E                            ; ---------------------------------------------------------------------------
0001553E                            
0001553E                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001553E 4A68 003A                  		tst.w	$3A(a0)
00015542 6700                       		beq.s	locret_13914
00015544 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00015548 6600                       		bne.s	locret_13914
0001554A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015550 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00015556                            
00015556                            locret_13914:
00015556 4E75                       		rts	
00015558                            
00015558                            ; ---------------------------------------------------------------------------
00015558                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00015558                            ; ---------------------------------------------------------------------------
00015558                            
00015558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015558                            
00015558                            
00015558                            Sonic_Loops:				; XREF: Obj01_Control
00015558 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
0001555E 6700                       		beq.s	loc_13926	; if yes, branch
00015560 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00015564 6600 0000                  		bne.w	locret_139C2	; if not, branch
00015568                            
00015568                            loc_13926:
00015568 3028 000C                  		move.w	$C(a0),d0
0001556C E248                       		lsr.w	#1,d0
0001556E 0240 0380                  		andi.w	#$380,d0
00015572 1228 0008                  		move.b	8(a0),d1
00015576 0241 007F                  		andi.w	#$7F,d1
0001557A D041                       		add.w	d1,d0
0001557C 43F8 A400                  		lea	($FFFFA400).w,a1
00015580 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00015584 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00015588 6700 FA48                  		beq.w	Obj01_ChkRoll
0001558C B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00015590 6700 FA40                  		beq.w	Obj01_ChkRoll
00015594 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00015598 6700                       		beq.s	loc_13976
0001559A B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
0001559E 6700                       		beq.s	loc_13966
000155A0 08A8 0006 0001             		bclr	#6,1(a0)
000155A6 4E75                       		rts	
000155A8                            ; ===========================================================================
000155A8                            
000155A8                            loc_13966:
000155A8 0828 0001 0022             		btst	#1,$22(a0)
000155AE 6700                       		beq.s	loc_13976
000155B0 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000155B6 4E75                       		rts	
000155B8                            ; ===========================================================================
000155B8                            
000155B8                            loc_13976:
000155B8 3428 0008                  		move.w	8(a0),d2
000155BC 0C02 002C                  		cmpi.b	#$2C,d2
000155C0 6400                       		bcc.s	loc_13988
000155C2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000155C8 4E75                       		rts	
000155CA                            ; ===========================================================================
000155CA                            
000155CA                            loc_13988:
000155CA 0C02 00E0                  		cmpi.b	#-$20,d2
000155CE 6500                       		bcs.s	loc_13996
000155D0 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000155D6 4E75                       		rts	
000155D8                            ; ===========================================================================
000155D8                            
000155D8                            loc_13996:
000155D8 0828 0006 0001             		btst	#6,1(a0)
000155DE 6600                       		bne.s	loc_139B2
000155E0 1228 0026                  		move.b	$26(a0),d1
000155E4 6700                       		beq.s	locret_139C2
000155E6 0C01 0080                  		cmpi.b	#-$80,d1
000155EA 6200                       		bhi.s	locret_139C2
000155EC 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000155F2 4E75                       		rts	
000155F4                            ; ===========================================================================
000155F4                            
000155F4                            loc_139B2:
000155F4 1228 0026                  		move.b	$26(a0),d1
000155F8 0C01 0080                  		cmpi.b	#-$80,d1
000155FC 6300                       		bls.s	locret_139C2
000155FE 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00015604                            
00015604                            locret_139C2:
00015604 4E75                       		rts	
00015606                            ; End of function Sonic_Loops
00015606                            
00015606                            ; ---------------------------------------------------------------------------
00015606                            ; Sonic when he's drowning
00015606                            ; ---------------------------------------------------------------------------
00015606                             
00015606                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
00015606                             
00015606                             
00015606                            Sonic_Drowned:
00015606 6100 950C                  		bsr.w   SpeedToPos		; Make Sonic able to move
0001560A 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
00015610 6100 F2FE                  		bsr.w   Sonic_RecordPos	; Record position
00015614 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
00015616 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
0001561A 6000 9512                  		bra.w   DisplaySprite	; And finally, display Sonic
0001561E                            
0001561E                            ; ---------------------------------------------------------------------------
0001561E                            ; Subroutine to	animate	Sonic's sprites
0001561E                            ; ---------------------------------------------------------------------------
0001561E                            
0001561E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001561E                            
0001561E                            
0001561E                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001561E 43F9 0000 0000             		lea	(SonicAniData).l,a1
00015624 7000                       		moveq	#0,d0
00015626 1028 001C                  		move.b	$1C(a0),d0
0001562A B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001562E 6700                       		beq.s	SAnim_Do	; if not, branch
00015630 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00015634 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001563A 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00015640                            
00015640                            SAnim_Do:
00015640 D040                       		add.w	d0,d0
00015642 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00015646 1011                       		move.b	(a1),d0
00015648 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
0001564A 1228 0022                  		move.b	$22(a0),d1
0001564E 0201 0001                  		andi.b	#1,d1
00015652 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015658 8328 0001                  		or.b	d1,1(a0)
0001565C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015660 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00015662 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00015666                            
00015666                            SAnim_Do2:
00015666 7200                       		moveq	#0,d1
00015668 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001566C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00015670 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00015672                            
00015672                            SAnim_Next:
00015672 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00015676 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001567A                            
0001567A                            SAnim_Delay:
0001567A 4E75                       		rts	
0001567C                            ; ===========================================================================
0001567C                            
0001567C                            SAnim_End_FF:
0001567C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001567E 6600                       		bne.s	SAnim_End_FE	; if not, branch
00015680 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00015686 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001568A 60E6                       		bra.s	SAnim_Next
0001568C                            ; ===========================================================================
0001568C                            
0001568C                            SAnim_End_FE:
0001568C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001568E 6600                       		bne.s	SAnim_End_FD	; if not, branch
00015690 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00015694 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00015698 9200                       		sub.b	d0,d1
0001569A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001569E 60D2                       		bra.s	SAnim_Next
000156A0                            ; ===========================================================================
000156A0                            
000156A0                            SAnim_End_FD:
000156A0 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000156A2 6600                       		bne.s	SAnim_End	; if not, branch
000156A4 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000156AA                            
000156AA                            SAnim_End:
000156AA 4E75                       		rts	
000156AC                            ; ===========================================================================
000156AC                            
000156AC                            SAnim_WalkRun:				; XREF: SAnim_Do
000156AC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000156B0 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000156B2 5200                       		addq.b	#1,d0		; is animation walking/running?
000156B4 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000156B8 7200                       		moveq	#0,d1
000156BA 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000156BE 1428 0022                  		move.b	$22(a0),d2
000156C2 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000156C6 6600                       		bne.s	loc_13A70	; if yes, branch
000156C8 4600                       		not.b	d0		; reverse angle
000156CA                            
000156CA                            loc_13A70:
000156CA 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000156CE 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000156D0 7203                       		moveq	#3,d1
000156D2                            
000156D2                            loc_13A78:
000156D2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000156D8 B302                       		eor.b	d1,d2
000156DA 8528 0001                  		or.b	d2,1(a0)
000156DE 0828 0005 0022             		btst	#5,$22(a0)
000156E4 6600 0000                  		bne.w	SAnim_Push
000156E8 E808                       		lsr.b	#4,d0		; divide angle by $10
000156EA 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000156EE 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
000156F2 6A00                       		bpl.s	loc_13A9C
000156F4 4442                       		neg.w	d2
000156F6                            
000156F6                            loc_13A9C:
000156F6 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000156FC 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00015700 6400                       		bcc.s	loc_13AB4	; if yes, branch
00015702 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00015708 1200                       		move.b	d0,d1
0001570A E209                       		lsr.b	#1,d1
0001570C D001                       		add.b	d1,d0
0001570E                            
0001570E                            loc_13AB4:
0001570E D000                       		add.b	d0,d0
00015710 1600                       		move.b	d0,d3
00015712 4442                       		neg.w	d2
00015714 0642 0800                  		addi.w	#$800,d2
00015718 6A00                       		bpl.s	loc_13AC2
0001571A 7400                       		moveq	#0,d2
0001571C                            
0001571C                            loc_13AC2:
0001571C E04A                       		lsr.w	#8,d2
0001571E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00015722 6100 FF42                  		bsr.w	SAnim_Do2
00015726 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
0001572A 4E75                       		rts	
0001572C                            ; ===========================================================================
0001572C                            
0001572C                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001572C 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001572E 6600                       		bne.s	SAnim_Push	; if not, branch
00015730 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
00015734 6A00                       		bpl.s	loc_13ADE
00015736 4442                       		neg.w	d2
00015738                            
00015738                            loc_13ADE:
00015738 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001573E 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00015742 6400                       		bcc.s	loc_13AF0	; if yes, branch
00015744 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001574A                            
0001574A                            loc_13AF0:
0001574A 4442                       		neg.w	d2
0001574C 0642 0400                  		addi.w	#$400,d2
00015750 6A00                       		bpl.s	loc_13AFA
00015752 7400                       		moveq	#0,d2
00015754                            
00015754                            loc_13AFA:
00015754 E04A                       		lsr.w	#8,d2
00015756 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001575A 1228 0022                  		move.b	$22(a0),d1
0001575E 0201 0001                  		andi.b	#1,d1
00015762 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015768 8328 0001                  		or.b	d1,1(a0)
0001576C 6000 FEF8                  		bra.w	SAnim_Do2
00015770                            ; ===========================================================================
00015770                            
00015770                            SAnim_Push:				; XREF: SAnim_RollJump
00015770 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
00015774 6B00                       		bmi.s	loc_13B1E
00015776 4442                       		neg.w	d2
00015778                            
00015778                            loc_13B1E:
00015778 0642 0800                  		addi.w	#$800,d2
0001577C 6A00                       		bpl.s	loc_13B26
0001577E 7400                       		moveq	#0,d2
00015780                            
00015780                            loc_13B26:
00015780 EC4A                       		lsr.w	#6,d2
00015782 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00015786 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001578C 1228 0022                  		move.b	$22(a0),d1
00015790 0201 0001                  		andi.b	#1,d1
00015794 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001579A 8328 0001                  		or.b	d1,1(a0)
0001579E 6000 FEC6                  		bra.w	SAnim_Do2
000157A2                            ; End of function Sonic_Animate
000157A2                            
000157A2                            ; ===========================================================================
000157A2                            SonicAniData:
000157A2                            	include "_anim\Sonic.asm"
000157A2                            ; ---------------------------------------------------------------------------
000157A2                            ; Animation script - Sonic
000157A2                            ; ---------------------------------------------------------------------------
000157A2 0000                       		dc.w SonAni_Walk-SonicAniData
000157A4 0000                       		dc.w SonAni_Run-SonicAniData
000157A6 0000                       		dc.w SonAni_Roll-SonicAniData
000157A8 0000                       		dc.w SonAni_Roll2-SonicAniData
000157AA 0000                       		dc.w SonAni_Push-SonicAniData
000157AC 0000                       		dc.w SonAni_Wait-SonicAniData
000157AE 0000                       		dc.w SonAni_Balance-SonicAniData
000157B0 0000                       		dc.w SonAni_LookUp-SonicAniData
000157B2 0000                       		dc.w SonAni_Duck-SonicAniData
000157B4 0000                       		dc.w SonAni_Warp1-SonicAniData
000157B6 0000                       		dc.w SonAni_Warp2-SonicAniData
000157B8 0000                       		dc.w SonAni_Warp3-SonicAniData
000157BA 0000                       		dc.w SonAni_Warp4-SonicAniData
000157BC 0000                       		dc.w SonAni_Stop-SonicAniData
000157BE 0000                       		dc.w SonAni_Float1-SonicAniData
000157C0 0000                       		dc.w SonAni_Float2-SonicAniData
000157C2 0000                       		dc.w SonAni_Spring-SonicAniData
000157C4 0000                       		dc.w SonAni_LZHang-SonicAniData
000157C6 0000                       		dc.w SonAni_Leap1-SonicAniData
000157C8 0000                       		dc.w SonAni_Leap2-SonicAniData
000157CA 0000                       		dc.w SonAni_Surf-SonicAniData
000157CC 0000                       		dc.w SonAni_Bubble-SonicAniData
000157CE 0000                       		dc.w SonAni_Death1-SonicAniData
000157D0 0000                       		dc.w SonAni_Drown-SonicAniData
000157D2 0000                       		dc.w SonAni_Death2-SonicAniData
000157D4 0000                       		dc.w SonAni_Shrink-SonicAniData
000157D6 0000                       		dc.w SonAni_Hurt-SonicAniData
000157D8 0000                       		dc.w SonAni_LZSlide-SonicAniData
000157DA 0000                       		dc.w SonAni_Blank-SonicAniData
000157DC 0000                       		dc.w SonAni_Float3-SonicAniData
000157DE 0000                       		dc.w SonAni_Float4-SonicAniData
000157E0 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
000157E8 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000157F0 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000157F8 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00015800 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00015808 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001581E 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00015822 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00015826 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
0001582A 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
0001582E 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00015832 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00015836 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001583A 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
0001583E 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00015842 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001584A 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001584E 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00015852 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00015858 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001585E 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00015862 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001586A 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001586E 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00015872 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00015876 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00015880 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00015884 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00015888 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001588C 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00015894 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00015898                            		even
00015898                            		even
00015898                            
00015898                            ; ---------------------------------------------------------------------------
00015898                            ; Sonic	pattern	loading	subroutine
00015898                            ; ---------------------------------------------------------------------------
00015898                            
00015898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015898                            
00015898                            
00015898                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00015898 7000                       		moveq	#0,d0
0001589A 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001589E B038 F766                  		cmp.b	($FFFFF766).w,d0
000158A2 6700 0000                  		beq.w	locret_13C96
000158A6 11C0 F766                  		move.b	d0,($FFFFF766).w
000158AA 45F9 0000 0000             		lea	(SonicDynPLC).l,a2	
000158B0 D040                       		add.w	d0,d0
000158B2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000158B6 7A00                       		moveq	#0,d5
000158B8 1A1A                       		move.b	(a2)+,d5
000158BA 5345                       		subq.w	#1,d5
000158BC 6B00                       		bmi.s	locret_13C96
000158BE 383C F000                  		move.w	#$F000,d4
000158C2 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000158C8                            
000158C8                            SPLC_ReadEntry:
000158C8 7200                       		moveq	#0,d1
000158CA 121A                       		move.b	(a2)+,d1
000158CC E149                       		lsl.w	#8,d1
000158CE 121A                       		move.b	(a2)+,d1
000158D0 3601                       		move.w	d1,d3
000158D2 E04B                       		lsr.w	#8,d3
000158D4 0243 00F0                  		andi.w	#$F0,d3
000158D8 0643 0010                  		addi.w	#$10,d3
000158DC 0241 0FFF                  		andi.w	#$FFF,d1
000158E0 EB89                       		lsl.l	#5,d1
000158E2 D286                       		add.l	d6,d1
000158E4 3404                       		move.w	d4,d2
000158E6 D843                       		add.w	d3,d4
000158E8 D843                       		add.w	d3,d4
000158EA 4EB9 0000 4AB2             		jsr	(QueueDMATransfer).l
000158F0 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000158F4                             
000158F4                            locret_13C96:
000158F4 4E75                       		rts	
000158F6                            ; End of function LoadSonicDynPLC
000158F6                            
000158F6                            ; ===========================================================================
000158F6                            ; ---------------------------------------------------------------------------
000158F6                            ; Object 02 - Sonime
000158F6                            ; ---------------------------------------------------------------------------
000158F6                            
000158F6                            Obj02:
000158F6 7000                       		moveq	#0,d0
000158F8 41F8 F5C0                  		lea	(SonimeSST).w,a0
000158FC 1028 0004                  		move.b	sonime_routine(a0),d0
00015900 323B 0000                  		move.w	Obj02_Index(pc,d0.w),d1
00015904 4EFB 1000                  		jmp	Obj02_Index(pc,d1.w)
00015908                            ; ===========================================================================
00015908 0000                       Obj02_Index:	dc.w Obj02_Init-Obj02_Index
0001590A 0000                       		dc.w Obj02_MoveIn-Obj02_Index
0001590C 0000                       		dc.w Obj02_Animate-Obj02_Index
0001590E                            ; ===========================================================================
0001590E                            
0001590E                            Obj02_Init:				; XREF: Obj0A_Index
0001590E 5428 0004                  		addq.b	#2,sonime_routine(a0)
00015912 223C 0000 0000             		move.l #Art_Sonime_Torso,d1
00015918 343C F400                  		move.w #(torsoart*$20),d2
0001591C 363C 00C0                  		move.w #$C0,d3
00015920 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015926 223C 0000 0000             		move.l #Art_Sonime_Head,d1
0001592C 343C F580                  		move.w #(headart*$20),d2
00015930 363C 0140                  		move.w #$140,d3
00015934 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
0001593A 223C 0000 0000             		move.l #Art_Sonime_Hair,d1
00015940 343C F300                  		move.w #(hairart*$20),d2
00015944 363C 0080                  		move.w #$80,d3
00015948 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
0001594E 117C 0030 0017             		move.b	#$30,sonime_movein(a0)
00015954 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
0001595A                            
0001595A                            Obj02_MoveIn:
0001595A 5528 0017                  		subq.b	#2,sonime_movein(a0)
0001595E 1028 0017                  		move.b	sonime_movein(a0),d0
00015962 1140 0002                  		move.b	d0,sonime_headx(a0)
00015966 1140 0016                  		move.b	d0,sonime_torsox(a0)
0001596A 1140 0009                  		move.b	d0,sonime_hairx(a0)
0001596E 4A00                       		tst.b	d0
00015970 6600 0000                  		bne.w	Obj02_Display
00015974 5428 0004                  		addq.b	#2,sonime_routine(a0)
00015978                            
00015978                            Obj02_Animate:
00015978 5350                       		subi.w	#1,sonime_headtimer(a0)
0001597A 6A00 0000                  		bpl.w	Obj02_Face
0001597E 4EB8 29D0                  		jsr	RandomNumber
00015982 0240 003F                  		andi.w	#$3F,d0
00015986 0640 0080                  		addi.w	#$80,d0
0001598A 3080                       		move.w	d0,sonime_headtimer(a0)
0001598C 4EB8 29D0                  		jsr	RandomNumber
00015990 0240 0006                  		andi.w	#6,d0
00015994 303B 0000                  		move.w	Obj02_HeadIndex(pc,d0.w),d0
00015998 4EFB 0000                  		jmp	Obj02_HeadIndex(pc,d0.w)
0001599C                            
0001599C                            ; ===========================================================================
0001599C 0000                       Obj02_HeadIndex:	dc.w Obj02_Up-Obj02_HeadIndex
0001599E 0000                       		dc.w Obj02_Down-Obj02_HeadIndex
000159A0 0000                       		dc.w Obj02_Left-Obj02_HeadIndex
000159A2 0000                       		dc.w Obj02_Right-Obj02_HeadIndex
000159A4                            ; ===========================================================================
000159A4                            
000159A4                            Obj02_Up:
000159A4 4A28 0003                  		tst.b	sonime_heady(a0)
000159A8 6D00                       		blt.s	Obj02_Down
000159AA 5328 0003                  		subi.b	#1,sonime_heady(a0)
000159AE 6000                       		bra.s	Obj02_Face
000159B0                            
000159B0                            Obj02_Down:
000159B0 4A28 0003                  		tst.b	sonime_heady(a0)
000159B4 6EEE                       		bgt.s	Obj02_Up
000159B6 5228 0003                  		addi.b	#1,sonime_heady(a0)
000159BA 6000                       		bra.s	Obj02_Face
000159BC                            
000159BC                            Obj02_Left:
000159BC 4A28 0002                  		tst.b	sonime_headx(a0)
000159C0 6D00                       		blt.s	Obj02_Right
000159C2 5328 0002                  		subi.b	#1,sonime_headx(a0)
000159C6 6000                       		bra.s	Obj02_Face
000159C8                            
000159C8                            Obj02_Right:
000159C8 4A28 0002                  		tst.b	sonime_headx(a0)
000159CC 6EEE                       		bgt.s	Obj02_Left
000159CE 5228 0002                  		addi.b	#1,sonime_headx(a0)
000159D2                            
000159D2                            Obj02_Face:
000159D2 4A38 FE12                  		tst.b	($FFFFFE12).w
000159D6 6700 0000                  		beq.w	@NoWait
000159DA 0C28 0001 000E             		cmpi.b	#face_blink,sonime_face(a0)
000159E0 6700                       		beq.s	@UnBlink
000159E2 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
000159E6 6A00 0000                  		bpl.w	@NoWait
000159EA 317C 0003 0010             		move.w	#3,sonime_facetimer(a0)
000159F0 117C 0001 000E             		move.b	#face_blink,sonime_face(a0)
000159F6 6000 0000                  		bra.w	@NoWait
000159FA                            
000159FA                            	@UnBlink:
000159FA 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
000159FE 6A00 0000                  		bpl.w	@NoWait
00015A02 117C 0004 000E             		move.b	#face_neutralr,sonime_face(a0)
00015A08 4EB8 29D0                  		jsr	RandomNumber
00015A0C 0240 003F                  		andi.w	#$3F,d0
00015A10 0640 00B0                  		addi.w	#$B0,d0
00015A14 3140 0010                  		move.w	d0,sonime_facetimer(a0)
00015A18 4EB8 29D0                  		jsr	RandomNumber
00015A1C 0200 000F                  		andi.b	#$F,d0
00015A20 4A00                       		tst.b	d0
00015A22 6700                       		beq.s	@NoBlink
00015A24 117C 0003 000E             		move.b	#face_neutralm,sonime_face(a0)
00015A2A 0C00 0001                  		cmpi.b	#1,d0
00015A2E 6700                       		beq.s	@NoBlink
00015A30 117C 0002 000E             		move.b	#face_neutrallm,sonime_face(a0)
00015A36 0C00 0002                  		cmpi.b	#2,d0
00015A3A 6700                       		beq.s	@NoBlink
00015A3C 117C 0000 000E             		move.b	#face_neutrall,sonime_face(a0)
00015A42                            
00015A42                            	@NoBlink:
00015A42 0C38 0005 D01C             		cmpi.b	#5,($FFFFD01C).w
00015A48 6600                       		bne.s	@NoWait
00015A4A 0C38 000F D01B             		cmpi.b	#$F,($FFFFD01B).w
00015A50 6500                       		bcs.s	@NoWait
00015A52 117C 000B 000E             		move.b	#face_impatient,sonime_face(a0)
00015A58 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
00015ABE                            
00015ABE                            	@NoWait:
00015ABE 0C78 0950 D010             		cmpi.w	#$950,($FFFFD010).w
00015AC4 6D00                       		blt.s	@TooSlow
00015AC6 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
00015ACC 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpeed
00015B32                            
00015B32                            	@TooSlow:
00015B32 0C78 F6B0 D010             		cmpi.w	#-$950,($FFFFD010).w
00015B38 6E00                       		bgt.s	@TooSlow2
00015B3A 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)	
00015B40 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpeed
00015BA6                            		
00015BA6                            	@TooSlow2:
00015BA6 7800                       		moveq	#0,d4
00015BA8 1828 000E                  		move.b	sonime_face(a0),d4
00015BAC B828 000F                  		cmp.b	sonime_faceold(a0),d4
00015BB0 6700                       		beq.s	Obj02_Ear
00015BB2 1144 000F                  		move.b	d4,sonime_faceold(a0)
00015BB6 ED4C                       		lsl.w	#6,d4
00015BB8 3A04                       		move.w	d4,d5
00015BBA DA45                       		add.w	d5,d5
00015BBC D845                       		add.w	d5,d4
00015BBE 223C 0000 0000             		move.l #Art_Sonime_Faces,d1
00015BC4 D244                       		add.w	d4,d1
00015BC6 343C F5C0                  		move.w #(headart*$20+$40),d2
00015BCA 363C 0020                  		move.w #$20,d3
00015BCE 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015BD4 223C 0000 0000             		move.l #(Art_Sonime_Faces+$40),d1
00015BDA D244                       		add.w	d4,d1
00015BDC 343C F640                  		move.w #(headart*$20+$C0),d2
00015BE0 363C 0020                  		move.w #$20,d3
00015BE4 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015BEA 223C 0000 0000             		move.l #(Art_Sonime_Faces+$80),d1
00015BF0 D244                       		add.w	d4,d1
00015BF2 343C F6C0                  		move.w #(headart*$20+$140),d2
00015BF6 363C 0020                  		move.w #$20,d3
00015BFA 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015C00                            
00015C00                            Obj02_Ear:
00015C00 4A28 0012                  		tst.b	sonime_ear(a0)
00015C04 6600                       		bne.s	@UnTwitch
00015C06 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
00015C0A 6A00                       		bpl.s	@NoTwitch
00015C0C 317C 000F 0014             		move.w	#$F,sonime_eartimer(a0)
00015C12 4EB8 29D0                  		jsr	RandomNumber
00015C16 0200 0001                  		andi.b	#1,d0
00015C1A 5200                       		addq.b	#1,d0
00015C1C 1140 0012                  		move.b	d0,sonime_ear(a0)
00015C20 6000                       		bra.s	@NoTwitch
00015C22                            
00015C22                            	@UnTwitch:
00015C22 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
00015C26 6A00                       		bpl.s	@NoTwitch
00015C28 117C 0000 0012             		move.b	#0,sonime_ear(a0)
00015C2E 4EB8 29D0                  		jsr	RandomNumber
00015C32 0240 007F                  		andi.w	#$7F,d0
00015C36 0640 0100                  		addi.w	#$100,d0
00015C3A 3140 0014                  		move.w	d0,sonime_eartimer(a0)
00015C3E                            
00015C3E                            	@NoTwitch:
00015C3E 7800                       		moveq	#0,d4
00015C40 1828 0012                  		move.b	sonime_ear(a0),d4
00015C44 B828 0013                  		cmp.b	sonime_earold(a0),d4
00015C48 6700                       		beq.s	Obj02_Display
00015C4A 1144 0013                  		move.b	d4,sonime_earold(a0)
00015C4E EB0C                       		lsl.b	#5,d4
00015C50 0204 0020                  		andi.b	#$20,d4
00015C54 223C 0000 0000             		move.l #Art_Sonime_LeftEar,d1
00015C5A D284                       		add.l	d4,d1
00015C5C 343C F580                  		move.w #(headart*$20),d2
00015C60 363C 0010                  		move.w #$10,d3
00015C64 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015C6A 7800                       		moveq	#0,d4
00015C6C 1828 0012                  		move.b	sonime_ear(a0),d4
00015C70 EB0C                       		lsl.b	#5,d4
00015C72 0204 0040                  		andi.b	#$40,d4
00015C76 223C 0000 0000             		move.l #Art_Sonime_RightEar,d1
00015C7C D284                       		add.l	d4,d1
00015C7E 343C F680                  		move.w #(headart*$20+$100),d2
00015C82 363C 0020                  		move.w #$20,d3
00015C86 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015C8C                            
00015C8C                            Obj02_Display:
00015C8C 7200                       		moveq	#0,d1
00015C8E 7400                       		moveq	#0,d2
00015C90 7600                       		moveq	#0,d3
00015C92 7800                       		moveq	#0,d4
00015C94 7A00                       		moveq	#0,d5
00015C96 1628 0002                  		move.b	sonime_headx(a0),d3	; set X pos
00015C9A 1428 0003                  		move.b	sonime_heady(a0),d2	; set Y pos
00015C9E 4883                       		ext.w	d3
00015CA0 4882                       		ext.w	d2
00015CA2 0643 01A0                  		addi.w	#$1A0,d3
00015CA6 0642 0140                  		addi.w	#$140,d2
00015CAA 43F9 0000 0000             		lea	(Map_sonime_head).l,a1
00015CB0 367C 87AC                  		movea.w	#($8000+headart),a3	; set art tile and flags
00015CB4 D241                       		add.w	d1,d1
00015CB6 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015CBA 1219                       		move.b	(a1)+,d1
00015CBC 5301                       		subq.b	#1,d1
00015CBE 6B00                       		bmi.s	@nextspr
00015CC0 6100 911C                  		bsr.w	DrawSprite_Loop
00015CC4                            
00015CC4                            	@nextspr:
00015CC4 7200                       		moveq	#0,d1
00015CC6 7600                       		moveq	#0,d3
00015CC8 1628 0016                  		move.b	sonime_torsox(a0),d3
00015CCC 0643 01A0                  		add.w	#$1A0,d3	; set X pos
00015CD0 343C 0154                  		move.w	#$154,d2	; set Y pos
00015CD4 43F9 0000 0000             		lea	(Map_sonime_torso).l,a1
00015CDA 367C 87A0                  		movea.w	#($8000+torsoart),a3	; set art tile and flags
00015CDE D241                       		add.w	d1,d1
00015CE0 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015CE4 1219                       		move.b	(a1)+,d1
00015CE6 5301                       		subq.b	#1,d1
00015CE8 6B00                       		bmi.s	@nextspr2
00015CEA 6100 90F2                  		bsr.w	DrawSprite_Loop
00015CEE                            
00015CEE                            	@nextspr2:
00015CEE 7200                       		moveq	#0,d1
00015CF0 7400                       		moveq	#0,d2
00015CF2 7600                       		moveq	#0,d3
00015CF4 1628 0009                  		move.b	sonime_hairx(a0),d3	; set X pos
00015CF8 1428 000D                  		move.b	sonime_hairy(a0),d2	; set Y pos
00015CFC 4883                       		ext.w	d3
00015CFE 4882                       		ext.w	d2
00015D00 0643 01A0                  		addi.w	#$1A0,d3
00015D04 0642 0153                  		addi.w	#$153,d2
00015D08 1168 0007 0009             		move.b	sonime_headx3(a0),sonime_hairx(a0)
00015D0E 1168 000B 000D             		move.b	sonime_heady3(a0),sonime_hairy(a0)
00015D14 1168 0006 0007             		move.b	sonime_headx2(a0),sonime_headx3(a0)
00015D1A 1168 000A 000B             		move.b	sonime_heady2(a0),sonime_heady3(a0)
00015D20 1168 0002 0006             		move.b	sonime_headx(a0),sonime_headx2(a0)
00015D26 1168 0003 000A             		move.b	sonime_heady(a0),sonime_heady2(a0)
00015D2C 43F9 0000 0000             		lea	(Map_sonime_hair).l,a1
00015D32 367C 8798                  		movea.w	#($8000+hairart),a3	; set art tile and flags
00015D36 D241                       		add.w	d1,d1
00015D38 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015D3C 1219                       		move.b	(a1)+,d1
00015D3E 5301                       		subq.b	#1,d1
00015D40 6B00                       		bmi.s	Obj02_Done
00015D42 6100 909A                  		bsr.w	DrawSprite_Loop
00015D46                            
00015D46                            Obj02_Done:		
00015D46 4E75                       		rts	
00015D48                            
00015D48                            ; ---------------------------------------------------------------------------
00015D48                            ; Sprite mappings - sonime
00015D48                            ; ---------------------------------------------------------------------------
00015D48                            Map_sonime_torso:
00015D48                            	include "_maps\sonime_torso.asm"
00015D48                            ; ================================================================================
00015D48                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:06:55 GMT-0500 (Eastern Standard Time)
00015D48                            ; ================================================================================
00015D48                            
00015D48                            DATAUI6DX8OCWY:
00015D48 0000                       	dc.w DATAUI6DX8OCWY_0-DATAUI6DX8OCWY
00015D4A 01                         DATAUI6DX8OCWY_0: dc.b $1
00015D4B F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
00015D50                            	even
00015D50                            	even
00015D50                            
00015D50                            Map_sonime_head:
00015D50                            	include "_maps\sonime_head.asm"
00015D50                            ; ================================================================================
00015D50                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:05:21 GMT-0500 (Eastern Standard Time)
00015D50                            ; ================================================================================
00015D50                            
00015D50                            DATAYDZD849MEMA:
00015D50 0000                       	dc.w DATAYDZD849MEMA_0-DATAYDZD849MEMA
00015D52 03                         DATAYDZD849MEMA_0: dc.b $3
00015D53 E80F 0000 F0               	dc.b $E8, $F, $0, $0, $F0
00015D58 0808 0010 F0               	dc.b $8, $8, $0, $10, $F0
00015D5D 1000 0013 00               	dc.b $10, $0, $0, $13, $0
00015D62                            	even
00015D62                            	even
00015D62                            
00015D62                            Map_sonime_hair:
00015D62                            	include "_maps\sonime_hair.asm"
00015D62                            ; ================================================================================
00015D62                            ; Sprite Mappings - generated by Flex 2 Sun Dec 20 2020 17:48:20 GMT-0500 (Eastern Standard Time)
00015D62                            ; ================================================================================
00015D62                            
00015D62                            DATAQZ9CZ11E8T:
00015D62 0000                       	dc.w DATAQZ9CZ11E8T_0-DATAQZ9CZ11E8T
00015D64 03                         DATAQZ9CZ11E8T_0: dc.b $3
00015D65 F40C 0000 F0               	dc.b $F4, $C, $0, $0, $F0
00015D6A FC01 0004 F0               	dc.b $FC, $1, $0, $4, $F0
00015D6F FC01 0006 08               	dc.b $FC, $1, $0, $6, $8
00015D74                            	even
00015D74                            	even
00015D74                            
00015D74                            ; ===========================================================================
00015D74                            ; ---------------------------------------------------------------------------
00015D74                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015D74                            ; ---------------------------------------------------------------------------
00015D74                            
00015D74                            Obj0A:					; XREF: Obj_Index
00015D74 7000                       		moveq	#0,d0
00015D76 1028 0024                  		move.b	$24(a0),d0
00015D7A 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015D7E 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015D82                            ; ===========================================================================
00015D82 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015D86 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015D8A 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015D8E 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015D92 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015D94                            ; ===========================================================================
00015D94                            
00015D94                            Obj0A_Main:				; XREF: Obj0A_Index
00015D94 5428 0024                  		addq.b	#2,$24(a0)
00015D98 217C 0001 457E 0004        		move.l	#Map_obj64,4(a0)
00015DA0 317C 8348 0002             		move.w	#$8348,2(a0)
00015DA6 117C 0084 0001             		move.b	#$84,1(a0)
00015DAC 117C 0010 0019             		move.b	#$10,$19(a0)
00015DB2 117C 0001 0018             		move.b	#1,$18(a0)
00015DB8 1028 0028                  		move.b	$28(a0),d0
00015DBC 6A00                       		bpl.s	loc_13D00
00015DBE 5028 0024                  		addq.b	#8,$24(a0)
00015DC2 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015DCA 317C 0440 0002             		move.w	#$440,2(a0)
00015DD0 0240 007F                  		andi.w	#$7F,d0
00015DD4 1140 0033                  		move.b	d0,$33(a0)
00015DD8 6000 0000                  		bra.w	Obj0A_Countdown
00015DDC                            ; ===========================================================================
00015DDC                            
00015DDC                            loc_13D00:
00015DDC 1140 001C                  		move.b	d0,$1C(a0)
00015DE0 3168 0008 0030             		move.w	8(a0),$30(a0)
00015DE6 317C FF78 0012             		move.w	#-$88,$12(a0)
00015DEC                            
00015DEC                            Obj0A_Animate:				; XREF: Obj0A_Index
00015DEC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015DF2 4EB9 0000 BB8E             		jsr	AnimateSprite
00015DF8                            
00015DF8                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00015DF8 3038 F646                  		move.w	($FFFFF646).w,d0
00015DFC B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00015E00 6400                       		bcc.s	Obj0A_ChkDel	; if not, branch
00015E02 3038 F60E                  		move.w	(v_pocketbottom).w,d0
00015E06 B068 000C                  		cmp.w	$C(a0),d0
00015E0A 6500                       		bcs.s	Obj0A_Wobble
00015E0C 3028 0008                  		move.w	8(a0),d0
00015E10 9078 F610                  		sub.w	(v_pocketx).w,d0
00015E14 0640 0060                  		addi.w	#$60,d0
00015E18 6B00                       		bmi.s	Obj0A_Wobble
00015E1A 0C40 00C0                  		cmpi.w	#$C0,d0
00015E1E 6400                       		bcc.s	Obj0A_Wobble
00015E20                            
00015E20                            Obj0A_ChkDel:
00015E20 117C 0006 0024             		move.b	#6,$24(a0)
00015E26 5E28 001C                  		addq.b	#7,$1C(a0)
00015E2A 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015E30 6700                       		beq.s	Obj0A_Display
00015E32 6000                       		bra.s	Obj0A_Display
00015E34                            ; ===========================================================================
00015E34                            
00015E34                            Obj0A_Wobble:
00015E34 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015E38 6700                       		beq.s	loc_13D44
00015E3A 5868 0030                  		addq.w	#4,$30(a0)
00015E3E                            
00015E3E                            loc_13D44:
00015E3E 1028 0026                  		move.b	$26(a0),d0
00015E42 5228 0026                  		addq.b	#1,$26(a0)
00015E46 0240 007F                  		andi.w	#$7F,d0
00015E4A 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015E50 1031 0000                  		move.b	(a1,d0.w),d0
00015E54 4880                       		ext.w	d0
00015E56 D068 0030                  		add.w	$30(a0),d0
00015E5A 3140 0008                  		move.w	d0,8(a0)
00015E5E 6100                       		bsr.s	Obj0A_ShowNumber
00015E60 4EBA 8CB2                  		jsr	SpeedToPos
00015E64 4A28 0001                  		tst.b	1(a0)
00015E68 6A00                       		bpl.s	Obj0A_Delete
00015E6A 4EFA 8CC2                  		jmp	DisplaySprite
00015E6E                            ; ===========================================================================
00015E6E                            
00015E6E                            Obj0A_Delete:
00015E6E 4EFA 8D0E                  		jmp	DeleteObject
00015E72                            ; ===========================================================================
00015E72                            
00015E72                            Obj0A_Display:				; XREF: Obj0A_Index
00015E72 6100                       		bsr.s	Obj0A_ShowNumber
00015E74 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015E7A 4EB9 0000 BB8E             		jsr	AnimateSprite
00015E80 4EFA 8CAC                  		jmp	DisplaySprite
00015E84                            ; ===========================================================================
00015E84                            
00015E84                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015E84 4EFA 8CF8                  		jmp	DeleteObject
00015E88                            ; ===========================================================================
00015E88                            
00015E88                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015E88 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015E8E 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015E90 5368 0038                  		subq.w	#1,$38(a0)
00015E94 6600                       		bne.s	Obj0A_Display2
00015E96 117C 000E 0024             		move.b	#$E,$24(a0)
00015E9C 5E28 001C                  		addq.b	#7,$1C(a0)
00015EA0 60D0                       		bra.s	Obj0A_Display
00015EA2                            ; ===========================================================================
00015EA2                            
00015EA2                            Obj0A_Display2:
00015EA2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015EA8 4EB9 0000 BB8E             		jsr	AnimateSprite
00015EAE 4A28 0001                  		tst.b	1(a0)
00015EB2 6A00                       		bpl.s	Obj0A_Delete3
00015EB4 4EFA 8C78                  		jmp	DisplaySprite
00015EB8                            ; ===========================================================================
00015EB8                            
00015EB8                            Obj0A_Delete3:
00015EB8 4EFA 8CC4                  		jmp	DeleteObject
00015EBC                            ; ===========================================================================
00015EBC                            
00015EBC                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015EBC 4A68 0038                  		tst.w	$38(a0)
00015EC0 6700                       		beq.s	locret_13E1A
00015EC2 5368 0038                  		subq.w	#1,$38(a0)
00015EC6 6600                       		bne.s	locret_13E1A
00015EC8 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015ECE 6400                       		bcc.s	locret_13E1A
00015ED0 317C 000F 0038             		move.w	#$F,$38(a0)
00015ED6 4268 0012                  		clr.w	$12(a0)
00015EDA 117C 0080 0001             		move.b	#$80,1(a0)
00015EE0 3028 0008                  		move.w	8(a0),d0
00015EE4 9078 F700                  		sub.w	($FFFFF700).w,d0
00015EE8 0640 0080                  		addi.w	#$80,d0
00015EEC 3140 0008                  		move.w	d0,8(a0)
00015EF0 3028 000C                  		move.w	$C(a0),d0
00015EF4 9078 F704                  		sub.w	($FFFFF704).w,d0
00015EF8 0640 0080                  		addi.w	#$80,d0
00015EFC 3140 000A                  		move.w	d0,$A(a0)
00015F00 117C 000C 0024             		move.b	#$C,$24(a0)
00015F06                            
00015F06                            locret_13E1A:
00015F06 4E75                       		rts	
00015F08                            ; ===========================================================================
00015F08                            Obj0A_WobbleData:
00015F08 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015F19 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015F2A 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015F3B 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015F4B FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015F58 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015F65 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015F72 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015F7F FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015F88 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015F99 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015FAA 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015FBB 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015FCB FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015FD8 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015FE5 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015FF2 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015FFF FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00016008                            ;===========================================================================
00016008                            
00016008                            Obj0A_Countdown:			; XREF: Obj0A_Index
00016008 4A68 002C                  		tst.w	$2C(a0)
0001600C 6600 0000                  		bne.w	loc_13F86
00016010 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00016016 6400 0000                  		bcc.w	locret_1408C
0001601A 0838 0006 D022             		btst	#6,($FFFFD022).w
00016020 6700 0000                  		beq.w	locret_1408C
00016024 5368 0038                  		subq.w	#1,$38(a0)
00016028 6A00 0000                  		bpl.w	loc_13FAC
0001602C 317C 003B 0038             		move.w	#59,$38(a0)
00016032 317C 0001 0036             		move.w	#1,$36(a0)
00016038 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001603E 0240 0001                  		andi.w	#1,d0
00016042 1140 0034                  		move.b	d0,$34(a0)
00016046 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001604A 0C40 0019                  		cmpi.w	#$19,d0
0001604E 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00016050 0C40 0014                  		cmpi.w	#$14,d0
00016054 6700                       		beq.s	Obj0A_WarnSound
00016056 0C40 000F                  		cmpi.w	#$F,d0
0001605A 6700                       		beq.s	Obj0A_WarnSound
0001605C 0C40 000C                  		cmpi.w	#$C,d0
00016060 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00016062 6600                       		bne.s	loc_13F02
00016064 303C 0092                  		move.w	#$92,d0
00016068 4EB9 0000 121A             		jsr	(PlaySound).l	; play countdown music
0001606E                            
0001606E                            loc_13F02:
0001606E 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00016074 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001607A 5328 0032                  		subq.b	#1,$32(a0)
0001607E 6A00                       		bpl.s	Obj0A_ReduceAir
00016080 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016086 08E8 0007 0036             		bset	#7,$36(a0)
0001608C 6000                       		bra.s	Obj0A_ReduceAir
0001608E                            ; ===========================================================================
0001608E                            
0001608E                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001608E 303C 00C2                  		move.w	#$C2,d0
00016092 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00016098                            
00016098                            Obj0A_ReduceAir:
00016098 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
0001609C 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000160A0 6100 0000                  		bsr.w	ResumeMusic
000160A4 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000160AA 303C 00B2                  		move.w	#$B2,d0
000160AE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play drowning sound
000160B4 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
000160BA 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
000160C0 117C 000A 0034             		move.b	#$A,$34(a0)
000160C6 317C 0001 0036             		move.w	#1,$36(a0)
000160CC 317C 0078 002C             		move.w	#$78,$2C(a0)
000160D2 2F08                       		move.l	a0,-(sp)
000160D4 41F8 D000                  		lea	($FFFFD000).w,a0
000160D8 6100 F300                  		bsr.w	Sonic_ResetOnFloor
000160DC 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000160E2 08E8 0001 0022             		bset	#1,$22(a0)
000160E8 08E8 0007 0002             		bset	#7,2(a0)
000160EE 317C 0000 0012             		move.w	#0,$12(a0)
000160F4 317C 0000 0010             		move.w	#0,$10(a0)
000160FA 317C 0000 0020             		move.w	#0,$20(a0)
00016100 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown		
00016106 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001610C 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately		
00016112 205F                       		movea.l	(sp)+,a0
00016114 4E75                       		rts	
00016116                            ; ===========================================================================
00016116                            
00016116                            loc_13F86:
00016116 5368 002C                  		subq.w	#1,$2C(a0)
0001611A 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
0001611C 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
00016122 4E75                       		rts
00016124                            ; ===========================================================================
00016124                            
00016124                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00016124 6000                       		bra.s	Obj0A_MakeItem
00016126                            ; ===========================================================================
00016126                            
00016126                            loc_13FAC:
00016126 4A68 0036                  		tst.w	$36(a0)
0001612A 6700 0000                  		beq.w	locret_1408C
0001612E 5368 003A                  		subq.w	#1,$3A(a0)
00016132 6A00 0000                  		bpl.w	locret_1408C
00016136                            
00016136                            Obj0A_MakeItem:
00016136 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001613C 0240 000F                  		andi.w	#$F,d0
00016140 3140 003A                  		move.w	d0,$3A(a0)
00016144 4EBA 913E                  		jsr	SingleObjLoad
00016148 6600 0000                  		bne.w	locret_1408C
0001614C 12BC 000A                  		move.b	#$A,0(a1)	; load object
00016150 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00016156 7006                       		moveq	#6,d0
00016158 0838 0000 D022             		btst	#0,($FFFFD022).w
0001615E 6700                       		beq.s	loc_13FF2
00016160 4440                       		neg.w	d0
00016162 137C 0040 0026             		move.b	#$40,$26(a1)
00016168                            
00016168                            loc_13FF2:
00016168 D169 0008                  		add.w	d0,8(a1)
0001616C 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00016172 137C 0006 0028             		move.b	#6,$28(a1)
00016178 4A68 002C                  		tst.w	$2C(a0)
0001617C 6700 0000                  		beq.w	loc_1403E
00016180 0268 0007 003A             		andi.w	#7,$3A(a0)
00016186 0668 0000 003A             		addi.w	#0,$3A(a0)
0001618C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016190 0440 000C                  		subi.w	#$C,d0
00016194 3340 000C                  		move.w	d0,$C(a1)
00016198 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001619E 1340 0026                  		move.b	d0,$26(a1)
000161A2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000161A6 0200 0003                  		andi.b	#3,d0
000161AA 6600                       		bne.s	loc_14082
000161AC 137C 000E 0028             		move.b	#$E,$28(a1)
000161B2 6000                       		bra.s	loc_14082
000161B4                            ; ===========================================================================
000161B4                            
000161B4                            loc_1403E:
000161B4 0828 0007 0036             		btst	#7,$36(a0)
000161BA 6700                       		beq.s	loc_14082
000161BC 3438 FE14                  		move.w	($FFFFFE14).w,d2
000161C0 E24A                       		lsr.w	#1,d2
000161C2 4EB9 0000 29D0             		jsr	(RandomNumber).l
000161C8 0240 0003                  		andi.w	#3,d0
000161CC 6600                       		bne.s	loc_1406A
000161CE 08E8 0006 0036             		bset	#6,$36(a0)
000161D4 6600                       		bne.s	loc_14082
000161D6 1342 0028                  		move.b	d2,$28(a1)
000161DA 337C 001C 0038             		move.w	#$1C,$38(a1)
000161E0                            
000161E0                            loc_1406A:
000161E0 4A28 0034                  		tst.b	$34(a0)
000161E4 6600                       		bne.s	loc_14082
000161E6 08E8 0006 0036             		bset	#6,$36(a0)
000161EC 6600                       		bne.s	loc_14082
000161EE 1342 0028                  		move.b	d2,$28(a1)
000161F2 337C 001C 0038             		move.w	#$1C,$38(a1)
000161F8                            
000161F8                            loc_14082:
000161F8 5328 0034                  		subq.b	#1,$34(a0)
000161FC 6A00                       		bpl.s	locret_1408C
000161FE 4268 0036                  		clr.w	$36(a0)
00016202                            
00016202                            locret_1408C:
00016202 4E75                       		rts	
00016204                            
00016204                            ; ---------------------------------------------------------------------------
00016204                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016204                            ; ---------------------------------------------------------------------------
00016204                            
00016204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016204                            
00016204                            
00016204                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00016204 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001620A 6200                       		bhi.s	loc_140AC
0001620C 303C 0082                  		move.w	#$82,d0		; play LZ music
00016210 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00016216 6600                       		bne.s	loc_140A6
00016218 303C 0086                  		move.w	#$86,d0		; play SBZ music
0001621C                            
0001621C                            loc_140A6:
0001621C 4EB9 0000 121A             		jsr	(PlaySound).l
00016222 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00016228 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001622E                            
0001622E                            loc_140AC:
0001622E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00016234 4238 D372                  		clr.b	($FFFFD372).w
00016238 4E75                       		rts	
0001623A                            ; End of function ResumeMusic
0001623A                            
0001623A                            ; ===========================================================================
0001623A                            Ani_obj0A:
0001623A                            	include "_anim\obj0A.asm"
0001623A                            ; ---------------------------------------------------------------------------
0001623A                            ; Animation script - countdown numbers and bubbles (LZ)
0001623A                            ; ---------------------------------------------------------------------------
0001623A 0000                       		dc.w byte_140D6-Ani_obj0A
0001623C 0000                       		dc.w byte_140E0-Ani_obj0A
0001623E 0000                       		dc.w byte_140EA-Ani_obj0A
00016240 0000                       		dc.w byte_140F4-Ani_obj0A
00016242 0000                       		dc.w byte_140FE-Ani_obj0A
00016244 0000                       		dc.w byte_14108-Ani_obj0A
00016246 0000                       		dc.w byte_14112-Ani_obj0A
00016248 0000                       		dc.w byte_14118-Ani_obj0A
0001624A 0000                       		dc.w byte_14120-Ani_obj0A
0001624C 0000                       		dc.w byte_14128-Ani_obj0A
0001624E 0000                       		dc.w byte_14130-Ani_obj0A
00016250 0000                       		dc.w byte_14138-Ani_obj0A
00016252 0000                       		dc.w byte_14140-Ani_obj0A
00016254 0000                       		dc.w byte_14148-Ani_obj0A
00016256 0000                       		dc.w byte_1414A-Ani_obj0A
00016258 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00016262 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001626C 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00016276 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00016280 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001628A 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00016294 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
0001629A 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000162A2 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000162AA 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000162B2 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000162BA 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000162C2 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000162CA 0EFC                       byte_14148:	dc.b $E, $FC
000162CC 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000162D2                            		even
000162D2                            		even
000162D2                            
000162D2                            ; ---------------------------------------------------------------------------
000162D2                            ; Sprite mappings - drowning countdown numbers (LZ)
000162D2                            ; ---------------------------------------------------------------------------
000162D2                            Map_obj0A:
000162D2                            	include "_maps\obj0A.asm"
000162D2                            ; ---------------------------------------------------------------------------
000162D2                            ; Sprite mappings - drowning countdown numbers (LZ)
000162D2                            ; ---------------------------------------------------------------------------
000162D2 0000                       		dc.w byte_14152-Map_obj0A
000162D4 01                         byte_14152:	dc.b 1
000162D5 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000162DA                            		even
000162DA                            		even
000162DA                            
000162DA                            ; ===========================================================================
000162DA                            ; ---------------------------------------------------------------------------
000162DA                            ; Object 38 - shield
000162DA                            ; ---------------------------------------------------------------------------
000162DA                            
000162DA                            Obj38: ; XREF: Obj_Index
000162DA 223C 0000 0000             		move.l #UnC_Shield,d1 ; Call for Regular Shield Art
000162E0 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
000162E4                            ; In this case, VRAM = $541*20
000162E4 363C 0200                  		move.w #$200,d3
000162E8 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
000162EE                            ; ---------------------------------------------------------------------------
000162EE                            
000162EE                            ShieldObj_Main:
000162EE 7000                       		moveq #0,d0
000162F0 1028 0024                  		move.b $24(a0),d0
000162F4 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
000162F8 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
000162FC                            ; ===========================================================================
000162FC                            Shield_Index:
000162FC 0000                       		dc.w Shield_Init-Shield_Index
000162FE 0000                       		dc.w ShieldChecks-Shield_Index
00016300                            ; ===========================================================================
00016300                            
00016300                            Shield_Init:
00016300 5428 0024                  		addq.b #2,$24(a0)
00016304 217C 0000 0000 0004        		move.l #Map_Obj38, $0004(A0) ; Load Shield Map into place
0001630C 117C 0004 0001             		move.b #4,1(a0)
00016312 117C 0001 0018             		move.b #1,$18(a0)
00016318 117C 0018 0019             		move.b #$18,$19(a0)
0001631E 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016324 0838 0007 D002             		btst #7,($FFFFD002).w
0001632A 6700                       		beq.s ShieldChecks
0001632C 08E8 0007 0002             		bset #7,2(a0)
00016332                            ; ---------------------------------------------------------------------------
00016332                            
00016332                            ShieldChecks:
00016332 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016336 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00016338 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
0001633C 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
0001633E                            
0001633E                            ShieldProperties:
0001633E 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016344 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
0001634A 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016350 43F9 0000 0000             		lea (Ani_obj38).l, a1 ; Load Animation Scripts into a1
00016356 4EB9 0000 BB8E             		jsr AnimateSprite
0001635C 4EFA 87D0                  		jmp DisplaySprite
00016360                            
00016360                            SonicHasShield:
00016360 4E75                       		rts
00016362                            
00016362                            jmp_DeleteObj38: ; loc_12648:
00016362 4EFA 881A                  		jmp DeleteObject 
00016366                            
00016366                            ; ---------------------------------------------------------------------------
00016366                            ; Object 4A - New Invincibility Object (ported from Sonic 2)
00016366                            ; ---------------------------------------------------------------------------
00016366                            
00016366                            Obj4A: ; XREF: Obj_Index
00016366 7000                       		moveq	#0,d0
00016368 1028 0000                  		move.b	InvStars_routine(a0),d0
0001636C 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
00016370 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
00016374                            ; ===========================================================================
00016374                            
00016374 0000                       InvStars_Index:	dc.w Obj4A_Init-InvStars_Index
00016376 0000                       		dc.w Obj4A_Main-InvStars_Index
00016378 0000                       		dc.w Obj4A_SubObject-InvStars_Index
0001637A                            ; ===========================================================================
0001637A                            
0001637A                            off_1D992:
0001637A 0000 0000                  		dc.l Ani_InvStars2 ; animation script
0001637E 000B                       		dc.w $B ; speed index,sub3 anim
00016380 0000 0000                  		dc.l Ani_InvStars3
00016384 160D                       		dc.w $160D
00016386 0000 0000                  		dc.l Ani_InvStars4
0001638A 2C0D                       		dc.w $2C0D
0001638C                            ; ===========================================================================	
0001638C                            
0001638C =0000000A                  InvStars_routine: equ $A ; the same as obRoutine in other objects
0001638C =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
0001638C =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
0001638C =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
0001638C                            
0001638C                            
0001638C                            Obj4A_Init:
0001638C 223C 0000 0000             		move.l	#ArtUnc_InvStars,d1
00016392 343C A820                  		move.w	#$A820,d2
00016396 363C 0200                  		move.w	#$200,d3
0001639A 4EB9 0000 4AB2             		jsr	(QueueDMATransfer).l
000163A0 7400                       		moveq	#0,d2
000163A2 45FA FFD0                  		lea	off_1D992-6(pc),a2
000163A6 43D0                       		lea	(a0),a1
000163A8 7203                       		moveq	#3,d1
000163AA                            LoadStarsObject:	
000163AA 1290                       		move.b	(a0),(a1) ; load obj35
000163AC 137C 0004 000A             		move.b	#4,InvStars_routine(a1)		; => @SubObject
000163B2 237C 0000 0000 0004        		move.l	#Map_InvStars,$4(a1)
000163BA 337C 0541 0002             		move.w	#$541,$2(a1)
000163C0 137C 0044 0001             		move.b  #%001000100,1(a1)
000163C6 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
000163CC 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)
000163D2 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
000163D6 5242                       		addq.w	#1,d2
000163D8 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
000163DC 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
000163E0 43E9 0040                  		lea	$40(a1),a1 ; a1=object
000163E4 51C9 FFC4                  		dbf	d1,LoadStarsObject
000163E8                            
000163E8 117C 0002 000A             		move.b	#2,InvStars_routine(a0)		; => @MainObject
000163EE 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
000163F4                            
000163F4                            Obj4A_Main:
000163F4 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
000163F8 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
000163FC 6700 8780                  		beq.w	DeleteObject
00016400 3029 0008                  		move.w	8(a1),d0
00016404 3140 0008                  		move.w	d0,8(a0)
00016408 3229 000C                  		move.w	$C(a1),d1
0001640C 3141 000C                  		move.w	d1,$C(a0)
00016410 45E8 0010                  		lea	sub2_x_pos(a0),a2
00016414 47F9 0000 0000             		lea	Ani_InvStars1,a3
0001641A 7A00                       		moveq	#0,d5
0001641C                            
0001641C                            Obj4A_GetFrame:
0001641C 3428 0038                  		move.w	$38(a0),d2
00016420 1A33 2000                  		move.b	(a3,d2.w),d5
00016424 6A00                       		bpl.s	Obj4A_SetFrameandPos
00016426 4268 0038                  		clr.w	$38(a0)
0001642A 60F0                       		bra.s	Obj4A_GetFrame
0001642C                            ; ===========================================================================
0001642C                            
0001642C                            Obj4A_SetFrameandPos:
0001642C 5268 0038                  		addq.w	#1,$38(a0)
00016430 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00016436 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001643A 4EB9 0000 0000             		jsr	Obj4A_Display2
00016440 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00016442 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00016444 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00016446 0646 0020                  		addi.w	#$20,d6
0001644A 4EB9 0000 0000             		jsr	Obj4A_Display2
00016450 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00016452 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00016454 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00016456 7012                       		moveq	#$12,d0
00016458 0829 0000 0022             		btst	#0,$22(a1)
0001645E 6700                       		beq.s	Obj4A_Display
00016460 4440                       		neg.w	d0
00016462                            
00016462                            Obj4A_Display:
00016462 D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
00016466 303C 0080                  		move.w	#(1*$80),d0
0001646A 6000 86FE                  		bra.w	DisplaySprite3
0001646E                            ; ===========================================================================
0001646E                            
0001646E                            Obj4A_SubObject:
0001646E 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
00016472 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
00016476 6700 8706                  		beq.w	DeleteObject
0001647A 4BF8 F7A8                  		lea	($FFFFF7A8).w,a5
0001647E 4DF8 CB00                  		lea	($FFFFCB00).w,a6
00016482                            	
00016482                            @getPosition_sub:
00016482 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
00016486 E509                       		lsl.b	#2,d1
00016488 3401                       		move.w	d1,d2
0001648A D241                       		add.w	d1,d1
0001648C D242                       		add.w	d2,d1 
0001648E 3015                       		move.w	(a5),d0
00016490 9001                       		sub.b	d1,d0
00016492 45F6 0000                  		lea	(a6,d0.w),a2
00016496 301A                       		move.w	(a2)+,d0
00016498 321A                       		move.w	(a2)+,d1
0001649A 3140 0008                  		move.w	d0,8(a0)
0001649E 3141 000C                  		move.w	d1,$C(a0)
000164A2 45E8 0010                  		lea	sub2_x_pos(a0),a2
000164A6 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
000164AA                            
000164AA                            Obj4A_GetSubFrame:
000164AA 3428 0038                  		move.w	$38(a0),d2
000164AE 1A33 2000                  		move.b	(a3,d2.w),d5
000164B2 6A00                       		bpl.s	Obj4A_SetSubFrameandPos
000164B4 4268 0038                  		clr.w	$38(a0)
000164B8 60F0                       		bra.s	Obj4A_GetSubFrame
000164BA                            ; ===========================================================================
000164BA                            
000164BA                            Obj4A_SetSubFrameandPos:
000164BA 4845                       		swap	d5
000164BC D428 0035                  		add.b	$35(a0),d2
000164C0 1A33 2000                  		move.b	(a3,d2.w),d5
000164C4 5268 0038                  		addq.w	#1,$38(a0)
000164C8 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
000164CC 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
000164D0 6100                       		bsr.s	Obj4A_Display2
000164D2 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
000164D4 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
000164D6 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
000164D8 0646 0020                  		addi.w	#$20,d6
000164DC 4845                       		swap	d5
000164DE 6100                       		bsr.s	Obj4A_Display2
000164E0 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
000164E2 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
000164E4 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
000164E6 7002                       		moveq	#2,d0
000164E8 0829 0000 0022             		btst	#0,$22(a1)
000164EE 6700                       		beq.s	loc_1DB20
000164F0 4440                       		neg.w	d0
000164F2                            
000164F2                            loc_1DB20:
000164F2 D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
000164F6 303C 0080                  		move.w    #(1*$80),d0
000164FA 6000 866E                  		bra.w    DisplaySprite3
000164FE                            ; ===========================================================================
000164FE                            Obj4A_Display2:
000164FE 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
00016502 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
00016506 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
0001650A 4882                       		ext.w	d2
0001650C 4883                       		ext.w	d3
0001650E D440                       		add.w	d0,d2 ; add object x position to x-move speed
00016510 D641                       		add.w	d1,d3 ; add object y position to y-move speed
00016512 4E75                       		rts
00016514                            
00016514                            InvStars_Speeds: ; x-move speed,	y-move speed	
00016514 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F,   $10, $FC0F, $F90E, $F70D, $F40B, $F208, $F106, $F003
00016534 F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, $F0FC, $F1F9, $F2F7, $F4F4, $F7F2, $F9F1, $FCF0, $FFF0,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
00016554                            
00016554                            ; ---------------------------------------------------------------------------
00016554                            ; Animation script - invincibility stars
00016554                            ; ---------------------------------------------------------------------------
00016554                            
00016554                            ; The animation script differs from the animate_sprite subroutine
00016554                            ; Every positive byte - mapping
00016554                            ; Every negative byte - loop flag 
00016554                            
00016554 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
00016562 00                         	even
00016562 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
0001656D 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
00016578 00                         	even
00016578 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
00016585 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
00016592 00                         	even
00016592 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
0001659F 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
000165AC 00                         	even		
000165AC                            
000165AC                            
000165AC                            Map_InvStars:
000165AC                            	include "_maps\obj4A.asm"
000165AC                            ; ================================================================================
000165AC                            ; Sprite Mappings - generated by Flex 2 Wed Aug 11 2021 18:32:48 GMT+0100 (British Summer Time)
000165AC                            ; ================================================================================
000165AC                            
000165AC                            DATAZEB5V6JRJ3H:
000165AC 0000 0000                  	dc.w DATAZEB5V6JRJ3H_0-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_1-DATAZEB5V6JRJ3H
000165B0 0000 0000                  	dc.w DATAZEB5V6JRJ3H_2-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_3-DATAZEB5V6JRJ3H
000165B4 0000 0000                  	dc.w DATAZEB5V6JRJ3H_4-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_5-DATAZEB5V6JRJ3H
000165B8 0000 0000                  	dc.w DATAZEB5V6JRJ3H_6-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_7-DATAZEB5V6JRJ3H
000165BC 0000                       	dc.w DATAZEB5V6JRJ3H_8-DATAZEB5V6JRJ3H
000165BE 01                         DATAZEB5V6JRJ3H_0: dc.b $1
000165BF EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
000165C4 01                         DATAZEB5V6JRJ3H_1: dc.b $1
000165C5 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
000165CA 01                         DATAZEB5V6JRJ3H_2: dc.b $1
000165CB F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
000165D0 01                         DATAZEB5V6JRJ3H_3: dc.b $1
000165D1 F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
000165D6 01                         DATAZEB5V6JRJ3H_4: dc.b $1
000165D7 F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
000165DC 01                         DATAZEB5V6JRJ3H_5: dc.b $1
000165DD F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
000165E2 01                         DATAZEB5V6JRJ3H_6: dc.b $1
000165E3 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
000165E8 01                         DATAZEB5V6JRJ3H_7: dc.b $1
000165E9 F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
000165EE 01                         DATAZEB5V6JRJ3H_8: dc.b $1
000165EF F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
000165F4                            	even
000165F4                            	even
000165F4                            ; ===========================================================================
000165F4                            ; ---------------------------------------------------------------------------
000165F4                            ; Object 08 - water splash (LZ)
000165F4                            ; ---------------------------------------------------------------------------
000165F4                            
000165F4                            Obj08:					; XREF: Obj_Index
000165F4 7000                       		moveq	#0,d0
000165F6 1028 0024                  		move.b	$24(a0),d0
000165FA 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000165FE 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00016602                            ; ===========================================================================
00016602 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00016604 0000                       		dc.w Obj08_Display-Obj08_Index
00016606 0000                       		dc.w Obj08_Delete-Obj08_Index
00016608                            ; ===========================================================================
00016608                            
00016608                            Obj08_Main:				; XREF: Obj08_Index
00016608 5428 0024                  		addq.b	#2,$24(a0)
0001660C 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00016614 0028 0004 0001             		ori.b	#4,1(a0)
0001661A 117C 0001 0018             		move.b	#1,$18(a0)
00016620 117C 0010 0019             		move.b	#$10,$19(a0)
00016626 317C 4259 0002             		move.w	#$4259,2(a0)
0001662C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00016632                            
00016632                            Obj08_Display:				; XREF: Obj08_Index
00016632 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00016638 4A38 F64E                  		tst.b	($FFFFF64E).w
0001663C 6700                       		beq.s	Obj08_Animate
0001663E 3178 F60E 000C             		move.w	(v_pocketbottom).w,$C(a0) ; copy y-position from water height
00016644                            
00016644                            Obj08_Animate:
00016644 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001664A 4EB9 0000 BB8E             		jsr	AnimateSprite
00016650 4EFA 84DC                  		jmp	DisplaySprite
00016654                            ; ===========================================================================
00016654                            
00016654                            Obj08_Delete:				; XREF: Obj08_Index
00016654 4EFA 8528                  		jmp	DeleteObject	; delete when animation	is complete
00016658                            ; ===========================================================================
00016658                            Ani_obj38:
00016658                            	include "_anim\obj38.asm"
00016658                            ; ---------------------------------------------------------------------------
00016658                            ; Animation script - shield and invincibility stars
00016658                            ; ---------------------------------------------------------------------------
00016658 0000                       		dc.w byte_14356-Ani_obj38
0001665A 0000                       		dc.w byte_1435E-Ani_obj38
0001665C 0000                       		dc.w byte_14364-Ani_obj38
0001665E 0000                       		dc.w byte_1437E-Ani_obj38
00016660 0000                       		dc.w byte_14398-Ani_obj38
00016662 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001666A 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00016670 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00016681 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001668A 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001669B 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000166A4 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000166B5 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000166BE                            		even
000166BE                            		even
000166BE                            
000166BE                            ; ---------------------------------------------------------------------------
000166BE                            ; Sprite mappings - shield and invincibility stars
000166BE                            ; ---------------------------------------------------------------------------
000166BE                            Map_obj38:
000166BE                            	include "_maps\obj38.asm"
000166BE                            ; ---------------------------------------------------------------------------
000166BE                            ; Sprite mappings - shield and invincibility stars
000166BE                            ; ---------------------------------------------------------------------------
000166BE 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000166C2 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000166C6 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000166CA 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000166CE 04                         byte_143C2:	dc.b 4
000166CF E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000166D4 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000166D9 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000166DE 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000166E3 04                         byte_143D7:	dc.b 4
000166E4 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000166E9 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000166EE 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000166F3 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000166F8 04                         byte_143EC:	dc.b 4
000166F9 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000166FE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00016703 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00016708 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001670D 04                         byte_14401:	dc.b 4
0001670E E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00016713 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00016718 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001671D 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00016722 04                         byte_14416:	dc.b 4
00016723 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00016728 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001672D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00016732 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00016737 04                         byte_1442B:	dc.b 4
00016738 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0001673D E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00016742 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00016747 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0001674C 04                         byte_14440:	dc.b 4
0001674D E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00016752 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00016757 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0001675C 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00016762 00                         		even
00016762 00                         		even
00016762                            
00016762                            ; ---------------------------------------------------------------------------
00016762                            ; Sprite mappings - special stage entry	from beta
00016762                            ; ---------------------------------------------------------------------------
00016762                            
00016762                            Ani_obj08:
00016762                            	include "_anim\obj08.asm"
00016762                            ; ---------------------------------------------------------------------------
00016762                            ; Animation script - water splash (LZ)
00016762                            ; ---------------------------------------------------------------------------
00016762 0000                       		dc.w byte_145C6-Ani_obj08
00016764 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
0001676A                            		even
0001676A                            		even
0001676A                            
0001676A                            ; ---------------------------------------------------------------------------
0001676A                            ; Sprite mappings - water splash (LZ)
0001676A                            ; ---------------------------------------------------------------------------
0001676A                            Map_obj08:
0001676A                            	include "_maps\obj08.asm"
0001676A                            ; ---------------------------------------------------------------------------
0001676A                            ; Sprite mappings - water splash (LZ)
0001676A                            ; ---------------------------------------------------------------------------
0001676A 0000                       		dc.w byte_145D2-Map_obj08
0001676C 0000                       		dc.w byte_145DD-Map_obj08
0001676E 0000                       		dc.w byte_145E8-Map_obj08
00016770 02                         byte_145D2:	dc.b 2
00016771 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00016776 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001677B 02                         byte_145DD:	dc.b 2
0001677C E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00016781 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00016786 01                         byte_145E8:	dc.b 1
00016787 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001678C                            		even
0001678C                            		even
0001678C                            
0001678C                            ; ---------------------------------------------------------------------------
0001678C                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001678C                            ; ---------------------------------------------------------------------------
0001678C                            
0001678C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001678C                            
0001678C                            
0001678C                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001678C 0828 0003 0022             		btst	#3,$22(a0)
00016792 6700                       		beq.s	loc_14602
00016794 7000                       		moveq	#0,d0
00016796 11C0 F768                  		move.b	d0,($FFFFF768).w
0001679A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001679E 4E75                       		rts	
000167A0                            ; ===========================================================================
000167A0                            
000167A0                            loc_14602:
000167A0 7003                       		moveq	#3,d0
000167A2 11C0 F768                  		move.b	d0,($FFFFF768).w
000167A6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000167AA 1028 0026                  		move.b	$26(a0),d0
000167AE 0600 0020                  		addi.b	#$20,d0
000167B2 6A00                       		bpl.s	loc_14624
000167B4 1028 0026                  		move.b	$26(a0),d0
000167B8 6A00                       		bpl.s	loc_1461E
000167BA 5300                       		subq.b	#1,d0
000167BC                            
000167BC                            loc_1461E:
000167BC 0600 0020                  		addi.b	#$20,d0
000167C0 6000                       		bra.s	loc_14630
000167C2                            ; ===========================================================================
000167C2                            
000167C2                            loc_14624:
000167C2 1028 0026                  		move.b	$26(a0),d0
000167C6 6A00                       		bpl.s	loc_1462C
000167C8 5200                       		addq.b	#1,d0
000167CA                            
000167CA                            loc_1462C:
000167CA 0600 001F                  		addi.b	#$1F,d0
000167CE                            
000167CE                            loc_14630:
000167CE 0200 00C0                  		andi.b	#$C0,d0
000167D2 0C00 0040                  		cmpi.b	#$40,d0
000167D6 6700 0000                  		beq.w	Sonic_WalkVertL
000167DA 0C00 0080                  		cmpi.b	#$80,d0
000167DE 6700 0000                  		beq.w	Sonic_WalkCeiling
000167E2 0C00 00C0                  		cmpi.b	#$C0,d0
000167E6 6700 0000                  		beq.w	Sonic_WalkVertR
000167EA 3428 000C                  		move.w	$C(a0),d2
000167EE 3628 0008                  		move.w	8(a0),d3
000167F2 7000                       		moveq	#0,d0
000167F4 1028 0016                  		move.b	$16(a0),d0
000167F8 4880                       		ext.w	d0
000167FA D440                       		add.w	d0,d2
000167FC 1028 0017                  		move.b	$17(a0),d0
00016800 4880                       		ext.w	d0
00016802 D640                       		add.w	d0,d3
00016804 49F8 F768                  		lea	($FFFFF768).w,a4
00016808 367C 0010                  		movea.w	#$10,a3
0001680C 3C3C 0000                  		move.w	#0,d6
00016810 7A0D                       		moveq	#$D,d5
00016812 6100 0000                  		bsr.w	FindFloor
00016816 3F01                       		move.w	d1,-(sp)
00016818 3428 000C                  		move.w	$C(a0),d2
0001681C 3628 0008                  		move.w	8(a0),d3
00016820 7000                       		moveq	#0,d0
00016822 1028 0016                  		move.b	$16(a0),d0
00016826 4880                       		ext.w	d0
00016828 D440                       		add.w	d0,d2
0001682A 1028 0017                  		move.b	$17(a0),d0
0001682E 4880                       		ext.w	d0
00016830 4440                       		neg.w	d0
00016832 D640                       		add.w	d0,d3
00016834 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016838 367C 0010                  		movea.w	#$10,a3
0001683C 3C3C 0000                  		move.w	#0,d6
00016840 7A0D                       		moveq	#$D,d5
00016842 6100 0000                  		bsr.w	FindFloor
00016846 301F                       		move.w	(sp)+,d0
00016848 6100 0000                  		bsr.w	Sonic_Angle
0001684C 4A41                       		tst.w	d1
0001684E 6700                       		beq.s	locret_146BE
00016850 6A00                       		bpl.s	loc_146C0
00016852 0C41 FFF2                  		cmpi.w	#-$E,d1
00016856 6D00                       		blt.s	locret_146E6
00016858 D368 000C                  		add.w	d1,$C(a0)
0001685C                            
0001685C                            locret_146BE:
0001685C 4E75                       		rts	
0001685E                            ; ===========================================================================
0001685E                            
0001685E                            loc_146C0:
0001685E 0C41 000E                  		cmpi.w	#$E,d1
00016862 6E00                       		bgt.s	loc_146CC
00016864                            
00016864                            loc_146C6:
00016864 D368 000C                  		add.w	d1,$C(a0)
00016868 4E75                       		rts	
0001686A                            ; ===========================================================================
0001686A                            
0001686A                            loc_146CC:
0001686A 4A28 0038                  		tst.b	$38(a0)
0001686E 66F4                       		bne.s	loc_146C6
00016870 08E8 0001 0022             		bset	#1,$22(a0)
00016876 08A8 0005 0022             		bclr	#5,$22(a0)
0001687C 117C 0001 001D             		move.b	#1,$1D(a0)
00016882 4E75                       		rts	
00016884                            ; ===========================================================================
00016884                            
00016884                            locret_146E6:
00016884 4E75                       		rts	
00016886                            ; End of function Sonic_AnglePos
00016886                            
00016886                            ; ===========================================================================
00016886 2428 0008                  		move.l	8(a0),d2
0001688A 3028 0010                  		move.w	$10(a0),d0
0001688E 48C0                       		ext.l	d0
00016890 E180                       		asl.l	#8,d0
00016892 9480                       		sub.l	d0,d2
00016894 2142 0008                  		move.l	d2,8(a0)
00016898 303C 0038                  		move.w	#$38,d0
0001689C 48C0                       		ext.l	d0
0001689E E180                       		asl.l	#8,d0
000168A0 9680                       		sub.l	d0,d3
000168A2 2143 000C                  		move.l	d3,$C(a0)
000168A6 4E75                       		rts	
000168A8                            ; ===========================================================================
000168A8                            
000168A8                            locret_1470A:
000168A8 4E75                       		rts	
000168AA                            ; ===========================================================================
000168AA 2628 000C                  		move.l	$C(a0),d3
000168AE 3028 0012                  		move.w	$12(a0),d0
000168B2 0440 0038                  		subi.w	#$38,d0
000168B6 3140 0012                  		move.w	d0,$12(a0)
000168BA 48C0                       		ext.l	d0
000168BC E180                       		asl.l	#8,d0
000168BE 9680                       		sub.l	d0,d3
000168C0 2143 000C                  		move.l	d3,$C(a0)
000168C4 4E75                       		rts	
000168C6 4E75                       		rts	
000168C8                            ; ===========================================================================
000168C8 2428 0008                  		move.l	8(a0),d2
000168CC 2628 000C                  		move.l	$C(a0),d3
000168D0 3028 0010                  		move.w	$10(a0),d0
000168D4 48C0                       		ext.l	d0
000168D6 E180                       		asl.l	#8,d0
000168D8 9480                       		sub.l	d0,d2
000168DA 3028 0012                  		move.w	$12(a0),d0
000168DE 48C0                       		ext.l	d0
000168E0 E180                       		asl.l	#8,d0
000168E2 9680                       		sub.l	d0,d3
000168E4 2142 0008                  		move.l	d2,8(a0)
000168E8 2143 000C                  		move.l	d3,$C(a0)
000168EC 4E75                       		rts	
000168EE                            
000168EE                            ; ---------------------------------------------------------------------------
000168EE                            ; Subroutine to	change Sonic's angle as he walks along the floor
000168EE                            ; ---------------------------------------------------------------------------
000168EE                            
000168EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168EE                            
000168EE                            
000168EE                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000168EE 1438 F76A                  		move.b	($FFFFF76A).w,d2
000168F2 B240                       		cmp.w	d0,d1
000168F4 6F00                       		ble.s	loc_1475E
000168F6 1438 F768                  		move.b	($FFFFF768).w,d2
000168FA 3200                       		move.w	d0,d1
000168FC                            
000168FC                            loc_1475E:
000168FC 0802 0000                  		btst	#0,d2
00016900 6600                       		bne.s	loc_1476A
00016902 1142 0026                  		move.b	d2,$26(a0)
00016906 4E75                       		rts	
00016908                            ; ===========================================================================
00016908                            
00016908                            loc_1476A:
00016908 1428 0026                  		move.b	$26(a0),d2
0001690C 0602 0020                  		addi.b	#$20,d2
00016910 0202 00C0                  		andi.b	#$C0,d2
00016914 1142 0026                  		move.b	d2,$26(a0)
00016918 4E75                       		rts	
0001691A                            ; End of function Sonic_Angle
0001691A                            
0001691A                            ; ---------------------------------------------------------------------------
0001691A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001691A                            ; ---------------------------------------------------------------------------
0001691A                            
0001691A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001691A                            
0001691A                            
0001691A                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
0001691A 3428 000C                  		move.w	$C(a0),d2
0001691E 3628 0008                  		move.w	8(a0),d3
00016922 7000                       		moveq	#0,d0
00016924 1028 0017                  		move.b	$17(a0),d0
00016928 4880                       		ext.w	d0
0001692A 4440                       		neg.w	d0
0001692C D440                       		add.w	d0,d2
0001692E 1028 0016                  		move.b	$16(a0),d0
00016932 4880                       		ext.w	d0
00016934 D640                       		add.w	d0,d3
00016936 49F8 F768                  		lea	($FFFFF768).w,a4
0001693A 367C 0010                  		movea.w	#$10,a3
0001693E 3C3C 0000                  		move.w	#0,d6
00016942 7A0D                       		moveq	#$D,d5
00016944 6100 0000                  		bsr.w	FindWall
00016948 3F01                       		move.w	d1,-(sp)
0001694A 3428 000C                  		move.w	$C(a0),d2
0001694E 3628 0008                  		move.w	8(a0),d3
00016952 7000                       		moveq	#0,d0
00016954 1028 0017                  		move.b	$17(a0),d0
00016958 4880                       		ext.w	d0
0001695A D440                       		add.w	d0,d2
0001695C 1028 0016                  		move.b	$16(a0),d0
00016960 4880                       		ext.w	d0
00016962 D640                       		add.w	d0,d3
00016964 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016968 367C 0010                  		movea.w	#$10,a3
0001696C 3C3C 0000                  		move.w	#0,d6
00016970 7A0D                       		moveq	#$D,d5
00016972 6100 0000                  		bsr.w	FindWall
00016976 301F                       		move.w	(sp)+,d0
00016978 6100 FF74                  		bsr.w	Sonic_Angle
0001697C 4A41                       		tst.w	d1
0001697E 6700                       		beq.s	locret_147F0
00016980 6A00                       		bpl.s	loc_147F2
00016982 0C41 FFF2                  		cmpi.w	#-$E,d1
00016986 6D00 FF20                  		blt.w	locret_1470A
0001698A D368 0008                  		add.w	d1,8(a0)
0001698E                            
0001698E                            locret_147F0:
0001698E 4E75                       		rts	
00016990                            ; ===========================================================================
00016990                            
00016990                            loc_147F2:
00016990 0C41 000E                  		cmpi.w	#$E,d1
00016994 6E00                       		bgt.s	loc_147FE
00016996                            
00016996                            loc_147F8:
00016996 D368 0008                  		add.w	d1,8(a0)
0001699A 4E75                       		rts	
0001699C                            ; ===========================================================================
0001699C                            
0001699C                            loc_147FE:
0001699C 4A28 0038                  		tst.b	$38(a0)
000169A0 66F4                       		bne.s	loc_147F8
000169A2 08E8 0001 0022             		bset	#1,$22(a0)
000169A8 08A8 0005 0022             		bclr	#5,$22(a0)
000169AE 117C 0001 001D             		move.b	#1,$1D(a0)
000169B4 4E75                       		rts	
000169B6                            ; End of function Sonic_WalkVertR
000169B6                            
000169B6                            ; ---------------------------------------------------------------------------
000169B6                            ; Subroutine allowing Sonic to walk upside-down
000169B6                            ; ---------------------------------------------------------------------------
000169B6                            
000169B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169B6                            
000169B6                            
000169B6                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000169B6 3428 000C                  		move.w	$C(a0),d2
000169BA 3628 0008                  		move.w	8(a0),d3
000169BE 7000                       		moveq	#0,d0
000169C0 1028 0016                  		move.b	$16(a0),d0
000169C4 4880                       		ext.w	d0
000169C6 9440                       		sub.w	d0,d2
000169C8 0A42 000F                  		eori.w	#$F,d2
000169CC 1028 0017                  		move.b	$17(a0),d0
000169D0 4880                       		ext.w	d0
000169D2 D640                       		add.w	d0,d3
000169D4 49F8 F768                  		lea	($FFFFF768).w,a4
000169D8 367C FFF0                  		movea.w	#-$10,a3
000169DC 3C3C 1000                  		move.w	#$1000,d6
000169E0 7A0D                       		moveq	#$D,d5
000169E2 6100 0000                  		bsr.w	FindFloor
000169E6 3F01                       		move.w	d1,-(sp)
000169E8 3428 000C                  		move.w	$C(a0),d2
000169EC 3628 0008                  		move.w	8(a0),d3
000169F0 7000                       		moveq	#0,d0
000169F2 1028 0016                  		move.b	$16(a0),d0
000169F6 4880                       		ext.w	d0
000169F8 9440                       		sub.w	d0,d2
000169FA 0A42 000F                  		eori.w	#$F,d2
000169FE 1028 0017                  		move.b	$17(a0),d0
00016A02 4880                       		ext.w	d0
00016A04 9640                       		sub.w	d0,d3
00016A06 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016A0A 367C FFF0                  		movea.w	#-$10,a3
00016A0E 3C3C 1000                  		move.w	#$1000,d6
00016A12 7A0D                       		moveq	#$D,d5
00016A14 6100 0000                  		bsr.w	FindFloor
00016A18 301F                       		move.w	(sp)+,d0
00016A1A 6100 FED2                  		bsr.w	Sonic_Angle
00016A1E 4A41                       		tst.w	d1
00016A20 6700                       		beq.s	locret_14892
00016A22 6A00                       		bpl.s	loc_14894
00016A24 0C41 FFF2                  		cmpi.w	#-$E,d1
00016A28 6D00 FE5A                  		blt.w	locret_146E6
00016A2C 9368 000C                  		sub.w	d1,$C(a0)
00016A30                            
00016A30                            locret_14892:
00016A30 4E75                       		rts	
00016A32                            ; ===========================================================================
00016A32                            
00016A32                            loc_14894:
00016A32 0C41 000E                  		cmpi.w	#$E,d1
00016A36 6E00                       		bgt.s	loc_148A0
00016A38                            
00016A38                            loc_1489A:
00016A38 9368 000C                  		sub.w	d1,$C(a0)
00016A3C 4E75                       		rts	
00016A3E                            ; ===========================================================================
00016A3E                            
00016A3E                            loc_148A0:
00016A3E 4A28 0038                  		tst.b	$38(a0)
00016A42 66F4                       		bne.s	loc_1489A
00016A44 08E8 0001 0022             		bset	#1,$22(a0)
00016A4A 08A8 0005 0022             		bclr	#5,$22(a0)
00016A50 117C 0001 001D             		move.b	#1,$1D(a0)
00016A56 4E75                       		rts	
00016A58                            ; End of function Sonic_WalkCeiling
00016A58                            
00016A58                            ; ---------------------------------------------------------------------------
00016A58                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00016A58                            ; ---------------------------------------------------------------------------
00016A58                            
00016A58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A58                            
00016A58                            
00016A58                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00016A58 3428 000C                  		move.w	$C(a0),d2
00016A5C 3628 0008                  		move.w	8(a0),d3
00016A60 7000                       		moveq	#0,d0
00016A62 1028 0017                  		move.b	$17(a0),d0
00016A66 4880                       		ext.w	d0
00016A68 9440                       		sub.w	d0,d2
00016A6A 1028 0016                  		move.b	$16(a0),d0
00016A6E 4880                       		ext.w	d0
00016A70 9640                       		sub.w	d0,d3
00016A72 0A43 000F                  		eori.w	#$F,d3
00016A76 49F8 F768                  		lea	($FFFFF768).w,a4
00016A7A 367C FFF0                  		movea.w	#-$10,a3
00016A7E 3C3C 0800                  		move.w	#$800,d6
00016A82 7A0D                       		moveq	#$D,d5
00016A84 6100 0000                  		bsr.w	FindWall
00016A88 3F01                       		move.w	d1,-(sp)
00016A8A 3428 000C                  		move.w	$C(a0),d2
00016A8E 3628 0008                  		move.w	8(a0),d3
00016A92 7000                       		moveq	#0,d0
00016A94 1028 0017                  		move.b	$17(a0),d0
00016A98 4880                       		ext.w	d0
00016A9A D440                       		add.w	d0,d2
00016A9C 1028 0016                  		move.b	$16(a0),d0
00016AA0 4880                       		ext.w	d0
00016AA2 9640                       		sub.w	d0,d3
00016AA4 0A43 000F                  		eori.w	#$F,d3
00016AA8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016AAC 367C FFF0                  		movea.w	#-$10,a3
00016AB0 3C3C 0800                  		move.w	#$800,d6
00016AB4 7A0D                       		moveq	#$D,d5
00016AB6 6100 0000                  		bsr.w	FindWall
00016ABA 301F                       		move.w	(sp)+,d0
00016ABC 6100 FE30                  		bsr.w	Sonic_Angle
00016AC0 4A41                       		tst.w	d1
00016AC2 6700                       		beq.s	locret_14934
00016AC4 6A00                       		bpl.s	loc_14936
00016AC6 0C41 FFF2                  		cmpi.w	#-$E,d1
00016ACA 6D00 FDDC                  		blt.w	locret_1470A
00016ACE 9368 0008                  		sub.w	d1,8(a0)
00016AD2                            
00016AD2                            locret_14934:
00016AD2 4E75                       		rts	
00016AD4                            ; ===========================================================================
00016AD4                            
00016AD4                            loc_14936:
00016AD4 0C41 000E                  		cmpi.w	#$E,d1
00016AD8 6E00                       		bgt.s	loc_14942
00016ADA                            
00016ADA                            loc_1493C:
00016ADA 9368 0008                  		sub.w	d1,8(a0)
00016ADE 4E75                       		rts	
00016AE0                            ; ===========================================================================
00016AE0                            
00016AE0                            loc_14942:
00016AE0 4A28 0038                  		tst.b	$38(a0)
00016AE4 66F4                       		bne.s	loc_1493C
00016AE6 08E8 0001 0022             		bset	#1,$22(a0)
00016AEC 08A8 0005 0022             		bclr	#5,$22(a0)
00016AF2 117C 0001 001D             		move.b	#1,$1D(a0)
00016AF8 4E75                       		rts	
00016AFA                            ; End of function Sonic_WalkVertL
00016AFA                            
00016AFA                            ; ---------------------------------------------------------------------------
00016AFA                            ; Subroutine to	find which tile	the object is standing on
00016AFA                            ; ---------------------------------------------------------------------------
00016AFA                            
00016AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AFA                            
00016AFA                            
00016AFA                            Floor_ChkTile_LocateBlock:
00016AFA 43F8 A400                  		lea	($FFFFA400).w,a1
00016AFE 1231 0000                  		move.b	(a1,d0.w),d1
00016B02 6700                       		beq.s	Floor_ChkTile_EmptyChunk	; if the chunk ID is 0 (empty chunk), branch
00016B04 6B00                       		bmi.s	loc_1499A
00016B06 5301                       		subq.b	#1,d1		; the empty chunk is not included in the chunk mappings, subtract 1 to read the correct data
00016B08 4881                       		ext.w	d1
00016B0A EE59                       		ror.w	#7,d1
00016B0C 3002                       		move.w	d2,d0
00016B0E D040                       		add.w	d0,d0
00016B10 0240 01E0                  		andi.w	#$1E0,d0
00016B14 D240                       		add.w	d0,d1
00016B16 3003                       		move.w	d3,d0
00016B18 E648                       		lsr.w	#3,d0
00016B1A 0240 001E                  		andi.w	#$1E,d0
00016B1E D240                       		add.w	d0,d1
00016B20 4E75                       		rts	
00016B22                            ; ---------------------------------------------------------------------------
00016B22                            
00016B22                            loc_1499A:
00016B22 0241 007F                  		andi.w	#$7F,d1
00016B26 0828 0006 0001             		btst	#6,1(a0)
00016B2C 6700                       		beq.s	loc_149B2
00016B2E 5241                       		addq.w	#1,d1
00016B30 0C41 0029                  		cmpi.w	#$29,d1
00016B34 6600                       		bne.s	loc_149B2
00016B36 323C 0051                  		move.w	#$51,d1
00016B3A                            
00016B3A                            loc_149B2:
00016B3A 5301                       		subq.b	#1,d1
00016B3C EE59                       		ror.w	#7,d1
00016B3E 3002                       		move.w	d2,d0
00016B40 D040                       		add.w	d0,d0
00016B42 0240 01E0                  		andi.w	#$1E0,d0
00016B46 D240                       		add.w	d0,d1
00016B48 3003                       		move.w	d3,d0
00016B4A E648                       		lsr.w	#3,d0
00016B4C 0240 001E                  		andi.w	#$1E,d0
00016B50 D240                       		add.w	d0,d1
00016B52 4E75                       		rts	
00016B54                            ; ---------------------------------------------------------------------------
00016B54                            
00016B54                            Floor_ChkTile_EmptyChunk:
00016B54 43F8 FF00                  		lea	($FFFFFF00).w,a1	; override a1
00016B58 584F                       		addq.w	#4,sp			; pop a stack frame to avoid adding the address of the chunk mappings to a1
00016B5A 4E75                       		rts	
00016B5C                            
00016B5C                            ; ---------------------------------------------------------------------------
00016B5C                            ; Subroutine to	find which tile	the object is standing on
00016B5C                            ; ---------------------------------------------------------------------------
00016B5C                            
00016B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B5C                            
00016B5C                            
00016B5C                            Floor_ChkTile:				; XREF: FindFloor; et al
00016B5C 3002                       		move.w	d2,d0
00016B5E E248                       		lsr.w	#1,d0
00016B60 0240 0380                  		andi.w	#$380,d0
00016B64 3203                       		move.w	d3,d1
00016B66 E049                       		lsr.w	#8,d1
00016B68 0241 007F                  		andi.w	#$7F,d1
00016B6C D041                       		add.w	d1,d0
00016B6E 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
00016B72 6700                       		beq.s	@ghz		; if yes, branch		
00016B74 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
00016B7A 6700                       		beq.s	@lz		
00016B7C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
00016B82 6700                       		beq.s	@mz		
00016B84 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
00016B8A 6700                       		beq.s	@slz		
00016B8C 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
00016B92 6700                       		beq.s	@syz		
00016B94 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
00016B9A 6700                       		beq.s	@sbz				
00016B9C 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00016BA2 6700                       		beq.s	@ghz		; if yes, branch
00016BA4 72FF                       		moveq	#-1,d1
00016BA6 6100 FF52                  		bsr.w	Floor_ChkTile_LocateBlock
00016BAA 2241                       		movea.l	d1,a1
00016BAC 4E75                       		rts	
00016BAE                            ; ---------------------------------------------------------------------------
00016BAE                            
00016BAE                            @ghz:
00016BAE 7200                       		moveq	#0,d1
00016BB0 6100 FF48                  		bsr.w	Floor_ChkTile_LocateBlock
00016BB4 0681 0000 0000             		add.l	#Blk256_GHZ,d1
00016BBA 2241                       		movea.l	d1,a1
00016BBC 4E75                       		rts	
00016BBE                            
00016BBE                            @lz:
00016BBE 7200                       		moveq	#0,d1
00016BC0 6100 FF38                  		bsr.w	Floor_ChkTile_LocateBlock
00016BC4 0681 0000 0000             		add.l	#Blk256_LZ,d1
00016BCA 2241                       		movea.l	d1,a1
00016BCC 4E75                       		rts	
00016BCE                            
00016BCE                            @mz:
00016BCE 7200                       		moveq	#0,d1
00016BD0 6100 FF28                  		bsr.w	Floor_ChkTile_LocateBlock
00016BD4 0681 0000 0000             		add.l	#Blk256_MZ,d1
00016BDA 2241                       		movea.l	d1,a1
00016BDC 4E75                       		rts	
00016BDE                            
00016BDE                            @slz:
00016BDE 7200                       		moveq	#0,d1
00016BE0 6100 FF18                  		bsr.w	Floor_ChkTile_LocateBlock
00016BE4 0681 0000 0000             		add.l	#Blk256_SLZ,d1
00016BEA 2241                       		movea.l	d1,a1
00016BEC 4E75                       		rts	
00016BEE                            
00016BEE                            @syz:
00016BEE 7200                       		moveq	#0,d1
00016BF0 6100 FF08                  		bsr.w	Floor_ChkTile_LocateBlock
00016BF4 0681 0000 0000             		add.l	#Blk256_SYZ,d1
00016BFA 2241                       		movea.l	d1,a1
00016BFC 4E75                       		rts	
00016BFE                            
00016BFE                            @sbz:
00016BFE 7200                       		moveq	#0,d1
00016C00 6100 FEF8                  		bsr.w	Floor_ChkTile_LocateBlock
00016C04 0681 0000 0000             		add.l	#Blk256_SBZ,d1
00016C0A 2241                       		movea.l	d1,a1
00016C0C 4E75                       		rts			
00016C0E                            ; End of function Floor_ChkTile
00016C0E                            
00016C0E                            
00016C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C0E                            
00016C0E                            
00016C0E                            FindFloor:				; XREF: Sonic_AnglePos; et al
00016C0E 6100 FF4C                  		bsr.w	Floor_ChkTile
00016C12 3011                       		move.w	(a1),d0
00016C14 3800                       		move.w	d0,d4
00016C16 0240 07FF                  		andi.w	#$7FF,d0
00016C1A 6700                       		beq.s	loc_149DE
00016C1C 0B04                       		btst	d5,d4
00016C1E 6600                       		bne.s	loc_149EC
00016C20                            
00016C20                            loc_149DE:
00016C20 D44B                       		add.w	a3,d2
00016C22 6100 0000                  		bsr.w	FindFloor2
00016C26 944B                       		sub.w	a3,d2
00016C28 0641 0010                  		addi.w	#$10,d1
00016C2C 4E75                       		rts	
00016C2E                            ; ===========================================================================
00016C2E                            
00016C2E                            loc_149EC:
00016C2E 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00016C32 1032 0000                  		move.b	(a2,d0.w),d0
00016C36 0240 00FF                  		andi.w	#$FF,d0
00016C3A 67E4                       		beq.s	loc_149DE
00016C3C 45F9 0000 0000             		lea	(AngleMap).l,a2
00016C42 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016C46 E948                       		lsl.w	#4,d0
00016C48 3203                       		move.w	d3,d1
00016C4A 0804 000B                  		btst	#$B,d4
00016C4E 6700                       		beq.s	loc_14A12
00016C50 4641                       		not.w	d1
00016C52 4414                       		neg.b	(a4)
00016C54                            
00016C54                            loc_14A12:
00016C54 0804 000C                  		btst	#$C,d4
00016C58 6700                       		beq.s	loc_14A22
00016C5A 0614 0040                  		addi.b	#$40,(a4)
00016C5E 4414                       		neg.b	(a4)
00016C60 0414 0040                  		subi.b	#$40,(a4)
00016C64                            
00016C64                            loc_14A22:
00016C64 0241 000F                  		andi.w	#$F,d1
00016C68 D240                       		add.w	d0,d1
00016C6A 45F9 0000 0000             		lea	(CollArray1).l,a2
00016C70 1032 1000                  		move.b	(a2,d1.w),d0
00016C74 4880                       		ext.w	d0
00016C76 BD44                       		eor.w	d6,d4
00016C78 0804 000C                  		btst	#$C,d4
00016C7C 6700                       		beq.s	loc_14A3E
00016C7E 4440                       		neg.w	d0
00016C80                            
00016C80                            loc_14A3E:
00016C80 4A40                       		tst.w	d0
00016C82 679C                       		beq.s	loc_149DE
00016C84 6B00                       		bmi.s	loc_14A5A
00016C86 0C00 0010                  		cmpi.b	#$10,d0
00016C8A 6700                       		beq.s	loc_14A66
00016C8C 3202                       		move.w	d2,d1
00016C8E 0241 000F                  		andi.w	#$F,d1
00016C92 D041                       		add.w	d1,d0
00016C94 323C 000F                  		move.w	#$F,d1
00016C98 9240                       		sub.w	d0,d1
00016C9A 4E75                       		rts	
00016C9C                            ; ===========================================================================
00016C9C                            
00016C9C                            loc_14A5A:
00016C9C 3202                       		move.w	d2,d1
00016C9E 0241 000F                  		andi.w	#$F,d1
00016CA2 D041                       		add.w	d1,d0
00016CA4 6A00 FF7A                  		bpl.w	loc_149DE
00016CA8                            
00016CA8                            loc_14A66:
00016CA8 944B                       		sub.w	a3,d2
00016CAA 6100 0000                  		bsr.w	FindFloor2
00016CAE D44B                       		add.w	a3,d2
00016CB0 0441 0010                  		subi.w	#$10,d1
00016CB4 4E75                       		rts	
00016CB6                            ; End of function FindFloor
00016CB6                            
00016CB6                            
00016CB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CB6                            
00016CB6                            
00016CB6                            FindFloor2:				; XREF: FindFloor
00016CB6 6100 FEA4                  		bsr.w	Floor_ChkTile
00016CBA 3011                       		move.w	(a1),d0
00016CBC 3800                       		move.w	d0,d4
00016CBE 0240 07FF                  		andi.w	#$7FF,d0
00016CC2 6700                       		beq.s	loc_14A86
00016CC4 0B04                       		btst	d5,d4
00016CC6 6600                       		bne.s	loc_14A94
00016CC8                            
00016CC8                            loc_14A86:
00016CC8 323C 000F                  		move.w	#$F,d1
00016CCC 3002                       		move.w	d2,d0
00016CCE 0240 000F                  		andi.w	#$F,d0
00016CD2 9240                       		sub.w	d0,d1
00016CD4 4E75                       		rts	
00016CD6                            ; ===========================================================================
00016CD6                            
00016CD6                            loc_14A94:
00016CD6 2478 F796                  		movea.l	($FFFFF796).w,a2
00016CDA 1032 0000                  		move.b	(a2,d0.w),d0
00016CDE 0240 00FF                  		andi.w	#$FF,d0
00016CE2 67E4                       		beq.s	loc_14A86
00016CE4 45F9 0000 0000             		lea	(AngleMap).l,a2
00016CEA 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016CEE E948                       		lsl.w	#4,d0
00016CF0 3203                       		move.w	d3,d1
00016CF2 0804 000B                  		btst	#$B,d4
00016CF6 6700                       		beq.s	loc_14ABA
00016CF8 4641                       		not.w	d1
00016CFA 4414                       		neg.b	(a4)
00016CFC                            
00016CFC                            loc_14ABA:
00016CFC 0804 000C                  		btst	#$C,d4
00016D00 6700                       		beq.s	loc_14ACA
00016D02 0614 0040                  		addi.b	#$40,(a4)
00016D06 4414                       		neg.b	(a4)
00016D08 0414 0040                  		subi.b	#$40,(a4)
00016D0C                            
00016D0C                            loc_14ACA:
00016D0C 0241 000F                  		andi.w	#$F,d1
00016D10 D240                       		add.w	d0,d1
00016D12 45F9 0000 0000             		lea	(CollArray1).l,a2
00016D18 1032 1000                  		move.b	(a2,d1.w),d0
00016D1C 4880                       		ext.w	d0
00016D1E BD44                       		eor.w	d6,d4
00016D20 0804 000C                  		btst	#$C,d4
00016D24 6700                       		beq.s	loc_14AE6
00016D26 4440                       		neg.w	d0
00016D28                            
00016D28                            loc_14AE6:
00016D28 4A40                       		tst.w	d0
00016D2A 679C                       		beq.s	loc_14A86
00016D2C 6B00                       		bmi.s	loc_14AFC
00016D2E 3202                       		move.w	d2,d1
00016D30 0241 000F                  		andi.w	#$F,d1
00016D34 D041                       		add.w	d1,d0
00016D36 323C 000F                  		move.w	#$F,d1
00016D3A 9240                       		sub.w	d0,d1
00016D3C 4E75                       		rts	
00016D3E                            ; ===========================================================================
00016D3E                            
00016D3E                            loc_14AFC:
00016D3E 3202                       		move.w	d2,d1
00016D40 0241 000F                  		andi.w	#$F,d1
00016D44 D041                       		add.w	d1,d0
00016D46 6A00 FF80                  		bpl.w	loc_14A86
00016D4A 4641                       		not.w	d1
00016D4C 4E75                       		rts	
00016D4E                            ; End of function FindFloor2
00016D4E                            
00016D4E                            
00016D4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D4E                            
00016D4E                            
00016D4E                            FindWall:				; XREF: Sonic_WalkVertR; et al
00016D4E 6100 FE0C                  		bsr.w	Floor_ChkTile
00016D52 3011                       		move.w	(a1),d0
00016D54 3800                       		move.w	d0,d4
00016D56 0240 07FF                  		andi.w	#$7FF,d0
00016D5A 6700                       		beq.s	loc_14B1E
00016D5C 0B04                       		btst	d5,d4
00016D5E 6600                       		bne.s	loc_14B2C
00016D60                            
00016D60                            loc_14B1E:
00016D60 D64B                       		add.w	a3,d3
00016D62 6100 0000                  		bsr.w	FindWall2
00016D66 964B                       		sub.w	a3,d3
00016D68 0641 0010                  		addi.w	#$10,d1
00016D6C 4E75                       		rts	
00016D6E                            ; ===========================================================================
00016D6E                            
00016D6E                            loc_14B2C:
00016D6E 2478 F796                  		movea.l	($FFFFF796).w,a2
00016D72 1032 0000                  		move.b	(a2,d0.w),d0
00016D76 0240 00FF                  		andi.w	#$FF,d0
00016D7A 67E4                       		beq.s	loc_14B1E
00016D7C 45F9 0000 0000             		lea	(AngleMap).l,a2
00016D82 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016D86 E948                       		lsl.w	#4,d0
00016D88 3202                       		move.w	d2,d1
00016D8A 0804 000C                  		btst	#$C,d4
00016D8E 6700                       		beq.s	loc_14B5A
00016D90 4641                       		not.w	d1
00016D92 0614 0040                  		addi.b	#$40,(a4)
00016D96 4414                       		neg.b	(a4)
00016D98 0414 0040                  		subi.b	#$40,(a4)
00016D9C                            
00016D9C                            loc_14B5A:
00016D9C 0804 000B                  		btst	#$B,d4
00016DA0 6700                       		beq.s	loc_14B62
00016DA2 4414                       		neg.b	(a4)
00016DA4                            
00016DA4                            loc_14B62:
00016DA4 0241 000F                  		andi.w	#$F,d1
00016DA8 D240                       		add.w	d0,d1
00016DAA 45F9 0000 0000             		lea	(CollArray2).l,a2
00016DB0 1032 1000                  		move.b	(a2,d1.w),d0
00016DB4 4880                       		ext.w	d0
00016DB6 BD44                       		eor.w	d6,d4
00016DB8 0804 000B                  		btst	#$B,d4
00016DBC 6700                       		beq.s	loc_14B7E
00016DBE 4440                       		neg.w	d0
00016DC0                            
00016DC0                            loc_14B7E:
00016DC0 4A40                       		tst.w	d0
00016DC2 679C                       		beq.s	loc_14B1E
00016DC4 6B00                       		bmi.s	loc_14B9A
00016DC6 0C00 0010                  		cmpi.b	#$10,d0
00016DCA 6700                       		beq.s	loc_14BA6
00016DCC 3203                       		move.w	d3,d1
00016DCE 0241 000F                  		andi.w	#$F,d1
00016DD2 D041                       		add.w	d1,d0
00016DD4 323C 000F                  		move.w	#$F,d1
00016DD8 9240                       		sub.w	d0,d1
00016DDA 4E75                       		rts	
00016DDC                            ; ===========================================================================
00016DDC                            
00016DDC                            loc_14B9A:
00016DDC 3203                       		move.w	d3,d1
00016DDE 0241 000F                  		andi.w	#$F,d1
00016DE2 D041                       		add.w	d1,d0
00016DE4 6A00 FF7A                  		bpl.w	loc_14B1E
00016DE8                            
00016DE8                            loc_14BA6:
00016DE8 964B                       		sub.w	a3,d3
00016DEA 6100 0000                  		bsr.w	FindWall2
00016DEE D64B                       		add.w	a3,d3
00016DF0 0441 0010                  		subi.w	#$10,d1
00016DF4 4E75                       		rts	
00016DF6                            ; End of function FindWall
00016DF6                            
00016DF6                            
00016DF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DF6                            
00016DF6                            
00016DF6                            FindWall2:				; XREF: FindWall
00016DF6 6100 FD64                  		bsr.w	Floor_ChkTile
00016DFA 3011                       		move.w	(a1),d0
00016DFC 3800                       		move.w	d0,d4
00016DFE 0240 07FF                  		andi.w	#$7FF,d0
00016E02 6700                       		beq.s	loc_14BC6
00016E04 0B04                       		btst	d5,d4
00016E06 6600                       		bne.s	loc_14BD4
00016E08                            
00016E08                            loc_14BC6:
00016E08 323C 000F                  		move.w	#$F,d1
00016E0C 3003                       		move.w	d3,d0
00016E0E 0240 000F                  		andi.w	#$F,d0
00016E12 9240                       		sub.w	d0,d1
00016E14 4E75                       		rts	
00016E16                            ; ===========================================================================
00016E16                            
00016E16                            loc_14BD4:
00016E16 2478 F796                  		movea.l	($FFFFF796).w,a2
00016E1A 1032 0000                  		move.b	(a2,d0.w),d0
00016E1E 0240 00FF                  		andi.w	#$FF,d0
00016E22 67E4                       		beq.s	loc_14BC6
00016E24 45F9 0000 0000             		lea	(AngleMap).l,a2
00016E2A 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016E2E E948                       		lsl.w	#4,d0
00016E30 3202                       		move.w	d2,d1
00016E32 0804 000C                  		btst	#$C,d4
00016E36 6700                       		beq.s	loc_14C02
00016E38 4641                       		not.w	d1
00016E3A 0614 0040                  		addi.b	#$40,(a4)
00016E3E 4414                       		neg.b	(a4)
00016E40 0414 0040                  		subi.b	#$40,(a4)
00016E44                            
00016E44                            loc_14C02:
00016E44 0804 000B                  		btst	#$B,d4
00016E48 6700                       		beq.s	loc_14C0A
00016E4A 4414                       		neg.b	(a4)
00016E4C                            
00016E4C                            loc_14C0A:
00016E4C 0241 000F                  		andi.w	#$F,d1
00016E50 D240                       		add.w	d0,d1
00016E52 45F9 0000 0000             		lea	(CollArray2).l,a2
00016E58 1032 1000                  		move.b	(a2,d1.w),d0
00016E5C 4880                       		ext.w	d0
00016E5E BD44                       		eor.w	d6,d4
00016E60 0804 000B                  		btst	#$B,d4
00016E64 6700                       		beq.s	loc_14C26
00016E66 4440                       		neg.w	d0
00016E68                            
00016E68                            loc_14C26:
00016E68 4A40                       		tst.w	d0
00016E6A 679C                       		beq.s	loc_14BC6
00016E6C 6B00                       		bmi.s	loc_14C3C
00016E6E 3203                       		move.w	d3,d1
00016E70 0241 000F                  		andi.w	#$F,d1
00016E74 D041                       		add.w	d1,d0
00016E76 323C 000F                  		move.w	#$F,d1
00016E7A 9240                       		sub.w	d0,d1
00016E7C 4E75                       		rts	
00016E7E                            ; ===========================================================================
00016E7E                            
00016E7E                            loc_14C3C:
00016E7E 3203                       		move.w	d3,d1
00016E80 0241 000F                  		andi.w	#$F,d1
00016E84 D041                       		add.w	d1,d0
00016E86 6A00 FF80                  		bpl.w	loc_14BC6
00016E8A 4641                       		not.w	d1
00016E8C 4E75                       		rts	
00016E8E                            ; End of function FindWall2
00016E8E                            
00016E8E                            ; ---------------------------------------------------------------------------
00016E8E                            ; Unused floor/wall subroutine - logs something	to do with collision
00016E8E                            ; ---------------------------------------------------------------------------
00016E8E                            
00016E8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E8E                            
00016E8E                            
00016E8E                            FloorLog_Unk:				; XREF: Level
00016E8E 4E75                       		rts	
00016E90                            
00016E90 43F9 0000 0000             		lea	(CollArray1).l,a1
00016E96 45F9 0000 0000             		lea	(CollArray1).l,a2
00016E9C 363C 00FF                  		move.w	#$FF,d3
00016EA0                            
00016EA0                            loc_14C5E:
00016EA0 7A10                       		moveq	#$10,d5
00016EA2 343C 000F                  		move.w	#$F,d2
00016EA6                            
00016EA6                            loc_14C64:
00016EA6 7800                       		moveq	#0,d4
00016EA8 323C 000F                  		move.w	#$F,d1
00016EAC                            
00016EAC                            loc_14C6A:
00016EAC 3019                       		move.w	(a1)+,d0
00016EAE EAA8                       		lsr.l	d5,d0
00016EB0 D944                       		addx.w	d4,d4
00016EB2 51C9 FFF8                  		dbf	d1,loc_14C6A
00016EB6                            
00016EB6 34C4                       		move.w	d4,(a2)+
00016EB8 92FC 0020                  		suba.w	#$20,a1
00016EBC 5345                       		subq.w	#1,d5
00016EBE 51CA FFE6                  		dbf	d2,loc_14C64
00016EC2                            
00016EC2 D2FC 0020                  		adda.w	#$20,a1
00016EC6 51CB FFD8                  		dbf	d3,loc_14C5E
00016ECA                            
00016ECA 43F9 0000 0000             		lea	(CollArray1).l,a1
00016ED0 45F9 0000 0000             		lea	(CollArray2).l,a2
00016ED6 6100                       		bsr.s	FloorLog_Unk2
00016ED8 43F9 0000 0000             		lea	(CollArray1).l,a1
00016EDE 45F9 0000 0000             		lea	(CollArray1).l,a2
00016EE4                            
00016EE4                            ; End of function FloorLog_Unk
00016EE4                            
00016EE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016EE4                            
00016EE4                            
00016EE4                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016EE4 363C 0FFF                  		move.w	#$FFF,d3
00016EE8                            
00016EE8                            loc_14CA6:
00016EE8 7400                       		moveq	#0,d2
00016EEA 323C 000F                  		move.w	#$F,d1
00016EEE 3019                       		move.w	(a1)+,d0
00016EF0 6700                       		beq.s	loc_14CD4
00016EF2 6B00                       		bmi.s	loc_14CBE
00016EF4                            
00016EF4                            loc_14CB2:
00016EF4 E248                       		lsr.w	#1,d0
00016EF6 6400                       		bcc.s	loc_14CB8
00016EF8 5202                       		addq.b	#1,d2
00016EFA                            
00016EFA                            loc_14CB8:
00016EFA 51C9 FFF8                  		dbf	d1,loc_14CB2
00016EFE                            
00016EFE 6000                       		bra.s	loc_14CD6
00016F00                            ; ===========================================================================
00016F00                            
00016F00                            loc_14CBE:
00016F00 0C40 FFFF                  		cmpi.w	#-1,d0
00016F04 6700                       		beq.s	loc_14CD0
00016F06                            
00016F06                            loc_14CC4:
00016F06 E348                       		lsl.w	#1,d0
00016F08 6400                       		bcc.s	loc_14CCA
00016F0A 5302                       		subq.b	#1,d2
00016F0C                            
00016F0C                            loc_14CCA:
00016F0C 51C9 FFF8                  		dbf	d1,loc_14CC4
00016F10                            
00016F10 6000                       		bra.s	loc_14CD6
00016F12                            ; ===========================================================================
00016F12                            
00016F12                            loc_14CD0:
00016F12 303C 0010                  		move.w	#$10,d0
00016F16                            
00016F16                            loc_14CD4:
00016F16 3400                       		move.w	d0,d2
00016F18                            
00016F18                            loc_14CD6:
00016F18 14C2                       		move.b	d2,(a2)+
00016F1A 51CB FFCC                  		dbf	d3,loc_14CA6
00016F1E                            
00016F1E 4E75                       		rts	
00016F20                            
00016F20                            ; End of function FloorLog_Unk2
00016F20                            
00016F20                            
00016F20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F20                            
00016F20                            
00016F20                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016F20 2628 0008                  		move.l	8(a0),d3
00016F24 2428 000C                  		move.l	$C(a0),d2
00016F28 3228 0010                  		move.w	$10(a0),d1
00016F2C 48C1                       		ext.l	d1
00016F2E E181                       		asl.l	#8,d1
00016F30 D681                       		add.l	d1,d3
00016F32 3228 0012                  		move.w	$12(a0),d1
00016F36 48C1                       		ext.l	d1
00016F38 E181                       		asl.l	#8,d1
00016F3A D481                       		add.l	d1,d2
00016F3C 4842                       		swap	d2
00016F3E 4843                       		swap	d3
00016F40 11C0 F768                  		move.b	d0,($FFFFF768).w
00016F44 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016F48 1200                       		move.b	d0,d1
00016F4A 0600 0020                  		addi.b	#$20,d0
00016F4E 6A00                       		bpl.s	loc_14D1A
00016F50 1001                       		move.b	d1,d0
00016F52 6A00                       		bpl.s	loc_14D14
00016F54 5300                       		subq.b	#1,d0
00016F56                            
00016F56                            loc_14D14:
00016F56 0600 0020                  		addi.b	#$20,d0
00016F5A 6000                       		bra.s	loc_14D24
00016F5C                            ; ===========================================================================
00016F5C                            
00016F5C                            loc_14D1A:
00016F5C 1001                       		move.b	d1,d0
00016F5E 6A00                       		bpl.s	loc_14D20
00016F60 5200                       		addq.b	#1,d0
00016F62                            
00016F62                            loc_14D20:
00016F62 0600 001F                  		addi.b	#$1F,d0
00016F66                            
00016F66                            loc_14D24:
00016F66 0200 00C0                  		andi.b	#$C0,d0
00016F6A 6700 0000                  		beq.w	loc_14DF0
00016F6E 0C00 0080                  		cmpi.b	#$80,d0
00016F72 6700 0000                  		beq.w	loc_14F7C
00016F76 0201 0038                  		andi.b	#$38,d1
00016F7A 6600                       		bne.s	loc_14D3C
00016F7C 5042                       		addq.w	#8,d2
00016F7E                            
00016F7E                            loc_14D3C:
00016F7E 0C00 0040                  		cmpi.b	#$40,d0
00016F82 6700 0000                  		beq.w	loc_1504A
00016F86 6000 0000                  		bra.w	loc_14EBC
00016F8A                            
00016F8A                            ; End of function Sonic_WalkSpeed
00016F8A                            
00016F8A                            
00016F8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F8A                            
00016F8A                            
00016F8A                            sub_14D48:				; XREF: Sonic_Jump
00016F8A 11C0 F768                  		move.b	d0,($FFFFF768).w
00016F8E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016F92 0600 0020                  		addi.b	#$20,d0
00016F96 0200 00C0                  		andi.b	#$C0,d0
00016F9A 0C00 0040                  		cmpi.b	#$40,d0
00016F9E 6700 0000                  		beq.w	loc_14FD6
00016FA2 0C00 0080                  		cmpi.b	#$80,d0
00016FA6 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016FAA 0C00 00C0                  		cmpi.b	#$C0,d0
00016FAE 6700 0000                  		beq.w	sub_14E50
00016FB2                            
00016FB2                            ; End of function sub_14D48
00016FB2                            
00016FB2                            ; ---------------------------------------------------------------------------
00016FB2                            ; Subroutine to	make Sonic land	on the floor after jumping
00016FB2                            ; ---------------------------------------------------------------------------
00016FB2                            
00016FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FB2                            
00016FB2                            
00016FB2                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016FB2 3428 000C                  		move.w	$C(a0),d2
00016FB6 3628 0008                  		move.w	8(a0),d3
00016FBA 7000                       		moveq	#0,d0
00016FBC 1028 0016                  		move.b	$16(a0),d0
00016FC0 4880                       		ext.w	d0
00016FC2 D440                       		add.w	d0,d2
00016FC4 1028 0017                  		move.b	$17(a0),d0
00016FC8 4880                       		ext.w	d0
00016FCA D640                       		add.w	d0,d3
00016FCC 49F8 F768                  		lea	($FFFFF768).w,a4
00016FD0 367C 0010                  		movea.w	#$10,a3
00016FD4 3C3C 0000                  		move.w	#0,d6
00016FD8 7A0D                       		moveq	#$D,d5
00016FDA 6100 FC32                  		bsr.w	FindFloor
00016FDE 3F01                       		move.w	d1,-(sp)
00016FE0 3428 000C                  		move.w	$C(a0),d2
00016FE4 3628 0008                  		move.w	8(a0),d3
00016FE8 7000                       		moveq	#0,d0
00016FEA 1028 0016                  		move.b	$16(a0),d0
00016FEE 4880                       		ext.w	d0
00016FF0 D440                       		add.w	d0,d2
00016FF2 1028 0017                  		move.b	$17(a0),d0
00016FF6 4880                       		ext.w	d0
00016FF8 9640                       		sub.w	d0,d3
00016FFA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016FFE 367C 0010                  		movea.w	#$10,a3
00017002 3C3C 0000                  		move.w	#0,d6
00017006 7A0D                       		moveq	#$D,d5
00017008 6100 FC04                  		bsr.w	FindFloor
0001700C 301F                       		move.w	(sp)+,d0
0001700E 143C 0000                  		move.b	#0,d2
00017012                            
00017012                            loc_14DD0:
00017012 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017016 B240                       		cmp.w	d0,d1
00017018 6F00                       		ble.s	loc_14DDE
0001701A 1638 F768                  		move.b	($FFFFF768).w,d3
0001701E C141                       		exg	d0,d1
00017020                            
00017020                            loc_14DDE:
00017020 0803 0000                  		btst	#0,d3
00017024 6700                       		beq.s	locret_14DE6
00017026 1602                       		move.b	d2,d3
00017028                            
00017028                            locret_14DE6:
00017028 4E75                       		rts	
0001702A                            
0001702A                            ; End of function Sonic_HitFloor
0001702A                            
0001702A                            ; ===========================================================================
0001702A 3428 000C                  		move.w	$C(a0),d2
0001702E 3628 0008                  		move.w	8(a0),d3
00017032                            
00017032                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00017032 0642 000A                  		addi.w	#$A,d2
00017036 49F8 F768                  		lea	($FFFFF768).w,a4
0001703A 367C 0010                  		movea.w	#$10,a3
0001703E 3C3C 0000                  		move.w	#0,d6
00017042 7A0E                       		moveq	#$E,d5
00017044 6100 FBC8                  		bsr.w	FindFloor
00017048 143C 0000                  		move.b	#0,d2
0001704C                            
0001704C                            loc_14E0A:				; XREF: sub_14EB4
0001704C 1638 F768                  		move.b	($FFFFF768).w,d3
00017050 0803 0000                  		btst	#0,d3
00017054 6700                       		beq.s	locret_14E16
00017056 1602                       		move.b	d2,d3
00017058                            
00017058                            locret_14E16:
00017058 4E75                       		rts	
0001705A                            
0001705A                            ; ---------------------------------------------------------------------------
0001705A                            ; Subroutine allowing objects to interact with the floor
0001705A                            ; ---------------------------------------------------------------------------
0001705A                            
0001705A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001705A                            
0001705A                            
0001705A                            ObjHitFloor:
0001705A 3628 0008                  		move.w	8(a0),d3
0001705E                            
0001705E                            ; End of function ObjHitFloor
0001705E                            
0001705E                            
0001705E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001705E                            
0001705E                            
0001705E                            ObjHitFloor2:
0001705E 3428 000C                  		move.w	$C(a0),d2
00017062 7000                       		moveq	#0,d0
00017064 1028 0016                  		move.b	$16(a0),d0
00017068 4880                       		ext.w	d0
0001706A D440                       		add.w	d0,d2
0001706C 49F8 F768                  		lea	($FFFFF768).w,a4
00017070 18BC 0000                  		move.b	#0,(a4)
00017074 367C 0010                  		movea.w	#$10,a3
00017078 3C3C 0000                  		move.w	#0,d6
0001707C 7A0D                       		moveq	#$D,d5
0001707E 6100 FB8E                  		bsr.w	FindFloor
00017082 1638 F768                  		move.b	($FFFFF768).w,d3
00017086 0803 0000                  		btst	#0,d3
0001708A 6700                       		beq.s	locret_14E4E
0001708C 163C 0000                  		move.b	#0,d3
00017090                            
00017090                            locret_14E4E:
00017090 4E75                       		rts	
00017092                            ; End of function ObjHitFloor2
00017092                            
00017092                            
00017092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017092                            
00017092                            
00017092                            sub_14E50:				; XREF: sub_14D48
00017092 3428 000C                  		move.w	$C(a0),d2
00017096 3628 0008                  		move.w	8(a0),d3
0001709A 7000                       		moveq	#0,d0
0001709C 1028 0017                  		move.b	$17(a0),d0
000170A0 4880                       		ext.w	d0
000170A2 9440                       		sub.w	d0,d2
000170A4 1028 0016                  		move.b	$16(a0),d0
000170A8 4880                       		ext.w	d0
000170AA D640                       		add.w	d0,d3
000170AC 49F8 F768                  		lea	($FFFFF768).w,a4
000170B0 367C 0010                  		movea.w	#$10,a3
000170B4 3C3C 0000                  		move.w	#0,d6
000170B8 7A0E                       		moveq	#$E,d5
000170BA 6100 FC92                  		bsr.w	FindWall
000170BE 3F01                       		move.w	d1,-(sp)
000170C0 3428 000C                  		move.w	$C(a0),d2
000170C4 3628 0008                  		move.w	8(a0),d3
000170C8 7000                       		moveq	#0,d0
000170CA 1028 0017                  		move.b	$17(a0),d0
000170CE 4880                       		ext.w	d0
000170D0 D440                       		add.w	d0,d2
000170D2 1028 0016                  		move.b	$16(a0),d0
000170D6 4880                       		ext.w	d0
000170D8 D640                       		add.w	d0,d3
000170DA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000170DE 367C 0010                  		movea.w	#$10,a3
000170E2 3C3C 0000                  		move.w	#0,d6
000170E6 7A0E                       		moveq	#$E,d5
000170E8 6100 FC64                  		bsr.w	FindWall
000170EC 301F                       		move.w	(sp)+,d0
000170EE 143C 00C0                  		move.b	#-$40,d2
000170F2 6000 FF1E                  		bra.w	loc_14DD0
000170F6                            
000170F6                            ; End of function sub_14E50
000170F6                            
000170F6                            
000170F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000170F6                            
000170F6                            
000170F6                            sub_14EB4:				; XREF: Sonic_Floor
000170F6 3428 000C                  		move.w	$C(a0),d2
000170FA 3628 0008                  		move.w	8(a0),d3
000170FE                            
000170FE                            loc_14EBC:
000170FE 0643 000A                  		addi.w	#$A,d3
00017102 49F8 F768                  		lea	($FFFFF768).w,a4
00017106 367C 0010                  		movea.w	#$10,a3
0001710A 3C3C 0000                  		move.w	#0,d6
0001710E 7A0E                       		moveq	#$E,d5
00017110 6100 FC3C                  		bsr.w	FindWall
00017114 143C 00C0                  		move.b	#-$40,d2
00017118 6000 FF32                  		bra.w	loc_14E0A
0001711C                            
0001711C                            ; End of function sub_14EB4
0001711C                            
0001711C                            ; ---------------------------------------------------------------------------
0001711C                            ; Subroutine to	detect when an object hits a wall to its right
0001711C                            ; ---------------------------------------------------------------------------
0001711C                            
0001711C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001711C                            
0001711C                            
0001711C                            ObjHitWallRight:
0001711C D668 0008                  		add.w	8(a0),d3
00017120 3428 000C                  		move.w	$C(a0),d2
00017124 49F8 F768                  		lea	($FFFFF768).w,a4
00017128 18BC 0000                  		move.b	#0,(a4)
0001712C 367C 0010                  		movea.w	#$10,a3
00017130 3C3C 0000                  		move.w	#0,d6
00017134 7A0E                       		moveq	#$E,d5
00017136 6100 FC16                  		bsr.w	FindWall
0001713A 1638 F768                  		move.b	($FFFFF768).w,d3
0001713E 0803 0000                  		btst	#0,d3
00017142 6700                       		beq.s	locret_14F06
00017144 163C 00C0                  		move.b	#-$40,d3
00017148                            
00017148                            locret_14F06:
00017148 4E75                       		rts	
0001714A                            
0001714A                            ; End of function ObjHitWallRight
0001714A                            
0001714A                            ; ---------------------------------------------------------------------------
0001714A                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001714A                            ; touches them
0001714A                            ; ---------------------------------------------------------------------------
0001714A                            
0001714A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001714A                            
0001714A                            
0001714A                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
0001714A 3428 000C                  		move.w	$C(a0),d2
0001714E 3628 0008                  		move.w	8(a0),d3
00017152 7000                       		moveq	#0,d0
00017154 1028 0016                  		move.b	$16(a0),d0
00017158 4880                       		ext.w	d0
0001715A 9440                       		sub.w	d0,d2
0001715C 0A42 000F                  		eori.w	#$F,d2
00017160 1028 0017                  		move.b	$17(a0),d0
00017164 4880                       		ext.w	d0
00017166 D640                       		add.w	d0,d3
00017168 49F8 F768                  		lea	($FFFFF768).w,a4
0001716C 367C FFF0                  		movea.w	#-$10,a3
00017170 3C3C 1000                  		move.w	#$1000,d6
00017174 7A0E                       		moveq	#$E,d5
00017176 6100 FA96                  		bsr.w	FindFloor
0001717A 3F01                       		move.w	d1,-(sp)
0001717C 3428 000C                  		move.w	$C(a0),d2
00017180 3628 0008                  		move.w	8(a0),d3
00017184 7000                       		moveq	#0,d0
00017186 1028 0016                  		move.b	$16(a0),d0
0001718A 4880                       		ext.w	d0
0001718C 9440                       		sub.w	d0,d2
0001718E 0A42 000F                  		eori.w	#$F,d2
00017192 1028 0017                  		move.b	$17(a0),d0
00017196 4880                       		ext.w	d0
00017198 9640                       		sub.w	d0,d3
0001719A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001719E 367C FFF0                  		movea.w	#-$10,a3
000171A2 3C3C 1000                  		move.w	#$1000,d6
000171A6 7A0E                       		moveq	#$E,d5
000171A8 6100 FA64                  		bsr.w	FindFloor
000171AC 301F                       		move.w	(sp)+,d0
000171AE 143C 0080                  		move.b	#-$80,d2
000171B2 6000 FE5E                  		bra.w	loc_14DD0
000171B6                            ; End of function Sonic_DontRunOnWalls
000171B6                            
000171B6                            ; ===========================================================================
000171B6 3428 000C                  		move.w	$C(a0),d2
000171BA 3628 0008                  		move.w	8(a0),d3
000171BE                            
000171BE                            loc_14F7C:
000171BE 0442 000A                  		subi.w	#$A,d2
000171C2 0A42 000F                  		eori.w	#$F,d2
000171C6 49F8 F768                  		lea	($FFFFF768).w,a4
000171CA 367C FFF0                  		movea.w	#-$10,a3
000171CE 3C3C 1000                  		move.w	#$1000,d6
000171D2 7A0E                       		moveq	#$E,d5
000171D4 6100 FA38                  		bsr.w	FindFloor
000171D8 143C 0080                  		move.b	#-$80,d2
000171DC 6000 FE6E                  		bra.w	loc_14E0A
000171E0                            
000171E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000171E0                            
000171E0                            
000171E0                            ObjHitCeiling:
000171E0 3428 000C                  		move.w	$C(a0),d2
000171E4 3628 0008                  		move.w	8(a0),d3
000171E8 7000                       		moveq	#0,d0
000171EA 1028 0016                  		move.b	$16(a0),d0
000171EE 4880                       		ext.w	d0
000171F0 9440                       		sub.w	d0,d2
000171F2 0A42 000F                  		eori.w	#$F,d2
000171F6 49F8 F768                  		lea	($FFFFF768).w,a4
000171FA 367C FFF0                  		movea.w	#-$10,a3
000171FE 3C3C 1000                  		move.w	#$1000,d6
00017202 7A0E                       		moveq	#$E,d5
00017204 6100 FA08                  		bsr.w	FindFloor
00017208 1638 F768                  		move.b	($FFFFF768).w,d3
0001720C 0803 0000                  		btst	#0,d3
00017210 6700                       		beq.s	locret_14FD4
00017212 163C 0080                  		move.b	#-$80,d3
00017216                            
00017216                            locret_14FD4:
00017216 4E75                       		rts	
00017218                            ; End of function ObjHitCeiling
00017218                            
00017218                            ; ===========================================================================
00017218                            
00017218                            loc_14FD6:				; XREF: sub_14D48
00017218 3428 000C                  		move.w	$C(a0),d2
0001721C 3628 0008                  		move.w	8(a0),d3
00017220 7000                       		moveq	#0,d0
00017222 1028 0017                  		move.b	$17(a0),d0
00017226 4880                       		ext.w	d0
00017228 9440                       		sub.w	d0,d2
0001722A 1028 0016                  		move.b	$16(a0),d0
0001722E 4880                       		ext.w	d0
00017230 9640                       		sub.w	d0,d3
00017232 0A43 000F                  		eori.w	#$F,d3
00017236 49F8 F768                  		lea	($FFFFF768).w,a4
0001723A 367C FFF0                  		movea.w	#-$10,a3
0001723E 3C3C 0800                  		move.w	#$800,d6
00017242 7A0E                       		moveq	#$E,d5
00017244 6100 FB08                  		bsr.w	FindWall
00017248 3F01                       		move.w	d1,-(sp)
0001724A 3428 000C                  		move.w	$C(a0),d2
0001724E 3628 0008                  		move.w	8(a0),d3
00017252 7000                       		moveq	#0,d0
00017254 1028 0017                  		move.b	$17(a0),d0
00017258 4880                       		ext.w	d0
0001725A D440                       		add.w	d0,d2
0001725C 1028 0016                  		move.b	$16(a0),d0
00017260 4880                       		ext.w	d0
00017262 9640                       		sub.w	d0,d3
00017264 0A43 000F                  		eori.w	#$F,d3
00017268 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001726C 367C FFF0                  		movea.w	#-$10,a3
00017270 3C3C 0800                  		move.w	#$800,d6
00017274 7A0E                       		moveq	#$E,d5
00017276 6100 FAD6                  		bsr.w	FindWall
0001727A 301F                       		move.w	(sp)+,d0
0001727C 143C 0040                  		move.b	#$40,d2
00017280 6000 FD90                  		bra.w	loc_14DD0
00017284                            
00017284                            ; ---------------------------------------------------------------------------
00017284                            ; Subroutine to	stop Sonic when	he jumps at a wall
00017284                            ; ---------------------------------------------------------------------------
00017284                            
00017284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017284                            
00017284                            
00017284                            Sonic_HitWall:				; XREF: Sonic_Floor
00017284 3428 000C                  		move.w	$C(a0),d2
00017288 3628 0008                  		move.w	8(a0),d3
0001728C                            
0001728C                            loc_1504A:
0001728C 0443 000A                  		subi.w	#$A,d3
00017290 0A43 000F                  		eori.w	#$F,d3
00017294 49F8 F768                  		lea	($FFFFF768).w,a4
00017298 367C FFF0                  		movea.w	#-$10,a3
0001729C 3C3C 0800                  		move.w	#$800,d6
000172A0 7A0E                       		moveq	#$E,d5
000172A2 6100 FAAA                  		bsr.w	FindWall
000172A6 143C 0040                  		move.b	#$40,d2
000172AA 6000 FDA0                  		bra.w	loc_14E0A
000172AE                            ; End of function Sonic_HitWall
000172AE                            
000172AE                            ; ---------------------------------------------------------------------------
000172AE                            ; Subroutine to	detect when an object hits a wall to its left
000172AE                            ; ---------------------------------------------------------------------------
000172AE                            
000172AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000172AE                            
000172AE                            
000172AE                            ObjHitWallLeft:
000172AE D668 0008                  		add.w	8(a0),d3
000172B2 3428 000C                  		move.w	$C(a0),d2
000172B6 49F8 F768                  		lea	($FFFFF768).w,a4
000172BA 18BC 0000                  		move.b	#0,(a4)
000172BE 367C FFF0                  		movea.w	#-$10,a3
000172C2 3C3C 0800                  		move.w	#$800,d6
000172C6 7A0E                       		moveq	#$E,d5
000172C8 6100 FA84                  		bsr.w	FindWall
000172CC 1638 F768                  		move.b	($FFFFF768).w,d3
000172D0 0803 0000                  		btst	#0,d3
000172D4 6700                       		beq.s	locret_15098
000172D6 163C 0040                  		move.b	#$40,d3
000172DA                            
000172DA                            locret_15098:
000172DA 4E75                       		rts	
000172DC                            ; End of function ObjHitWallLeft
000172DC                            
000172DC                            ; ===========================================================================
000172DC                            ; ---------------------------------------------------------------------------
000172DC                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000172DC                            ; ---------------------------------------------------------------------------
000172DC                            
000172DC                            Obj66:					; XREF: Obj_Index
000172DC 7000                       		moveq	#0,d0
000172DE 1028 0024                  		move.b	$24(a0),d0
000172E2 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000172E6 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000172EA                            ; ===========================================================================
000172EA 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000172EC 0000                       		dc.w Obj66_Action-Obj66_Index
000172EE 0000                       		dc.w Obj66_Display-Obj66_Index
000172F0 0000                       		dc.w Obj66_Release-Obj66_Index
000172F2                            ; ===========================================================================
000172F2                            
000172F2                            Obj66_Main:				; XREF: Obj66_Index
000172F2 5428 0024                  		addq.b	#2,$24(a0)
000172F6 323C 0001                  		move.w	#1,d1
000172FA 2248                       		movea.l	a0,a1
000172FC 6000                       		bra.s	Obj66_MakeItem
000172FE                            ; ===========================================================================
000172FE                            
000172FE                            Obj66_Loop:
000172FE 4EB9 0000 F284             		jsr	(SingleObjLoad).l
00017304 6600                       		bne.s	loc_150FE
00017306 12BC 0066                  		move.b	#$66,0(a1)
0001730A 5829 0024                  		addq.b	#4,$24(a1)
0001730E 3368 0008 0008             		move.w	8(a0),8(a1)
00017314 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001731A 137C 0003 0018             		move.b	#3,$18(a1)
00017320 137C 0010 001A             		move.b	#$10,$1A(a1)
00017326                            
00017326                            Obj66_MakeItem:				; XREF: Obj66_Main
00017326 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001732E 337C 4348 0002             		move.w	#$4348,2(a1)
00017334 0029 0004 0001             		ori.b	#4,1(a1)
0001733A 137C 0038 0019             		move.b	#$38,$19(a1)
00017340                            
00017340                            loc_150FE:
00017340 51C9 FFBC                  		dbf	d1,Obj66_Loop
00017344                            
00017344 117C 0030 0019             		move.b	#$30,$19(a0)
0001734A 117C 0004 0018             		move.b	#4,$18(a0)
00017350 317C 003C 0030             		move.w	#$3C,$30(a0)
00017356 117C 0001 0034             		move.b	#1,$34(a0)
0001735C 1168 0028 0038             		move.b	$28(a0),$38(a0)
00017362                            
00017362                            Obj66_Action:				; XREF: Obj66_Index
00017362 6100 0000                  		bsr.w	Obj66_ChkSwitch
00017366 4A28 0001                  		tst.b	1(a0)
0001736A 6A00 0000                  		bpl.w	Obj66_Display
0001736E 323C 0030                  		move.w	#$30,d1
00017372 3401                       		move.w	d1,d2
00017374 3602                       		move.w	d2,d3
00017376 5243                       		addq.w	#1,d3
00017378 3828 0008                  		move.w	8(a0),d4
0001737C 6100 A11E                  		bsr.w	SolidObject
00017380 0828 0005 0022             		btst	#5,$22(a0)
00017386 6700 0000                  		beq.w	Obj66_Display
0001738A 43F8 D000                  		lea	($FFFFD000).w,a1
0001738E 720E                       		moveq	#$E,d1
00017390 3029 0008                  		move.w	8(a1),d0
00017394 B068 0008                  		cmp.w	8(a0),d0
00017398 6500                       		bcs.s	Obj66_GrabSonic
0001739A 7207                       		moveq	#7,d1
0001739C                            
0001739C                            Obj66_GrabSonic:
0001739C B228 001A                  		cmp.b	$1A(a0),d1
000173A0 6600                       		bne.s	Obj66_Display
000173A2 1141 0032                  		move.b	d1,$32(a0)
000173A6 5828 0024                  		addq.b	#4,$24(a0)
000173AA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000173B0 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000173B6 337C 0800 0020             		move.w	#$800,$20(a1)
000173BC 337C 0000 0010             		move.w	#0,$10(a1)
000173C2 337C 0000 0012             		move.w	#0,$12(a1)
000173C8 08A8 0005 0022             		bclr	#5,$22(a0)
000173CE 08A9 0005 0022             		bclr	#5,$22(a1)
000173D4 08E9 0001 0022             		bset	#1,$22(a1)
000173DA 3429 0008                  		move.w	8(a1),d2
000173DE 3629 000C                  		move.w	$C(a1),d3
000173E2 6100 0000                  		bsr.w	Obj66_ChgPos
000173E6 D569 0008                  		add.w	d2,8(a1)
000173EA D769 000C                  		add.w	d3,$C(a1)
000173EE E0E9 0008                  		asr	8(a1)
000173F2 E0E9 000C                  		asr	$C(a1)
000173F6                            
000173F6                            Obj66_Display:				; XREF: Obj66_Index
000173F6 6000 9D80                  		bra.w	MarkObjGone
000173FA                            ; ===========================================================================
000173FA                            
000173FA                            Obj66_Release:				; XREF: Obj66_Index
000173FA 1028 001A                  		move.b	$1A(a0),d0
000173FE 0C00 0004                  		cmpi.b	#4,d0
00017402 6700                       		beq.s	loc_151C8
00017404 0C00 0007                  		cmpi.b	#7,d0
00017408 6600                       		bne.s	loc_151F8
0001740A                            
0001740A                            loc_151C8:
0001740A B028 0032                  		cmp.b	$32(a0),d0
0001740E 6700                       		beq.s	loc_151F8
00017410 43F8 D000                  		lea	($FFFFD000).w,a1
00017414 337C 0000 0010             		move.w	#0,$10(a1)
0001741A 337C 0800 0012             		move.w	#$800,$12(a1)
00017420 0C00 0004                  		cmpi.b	#4,d0
00017424 6700                       		beq.s	loc_151F0
00017426 337C 0800 0010             		move.w	#$800,$10(a1)
0001742C 337C 0800 0012             		move.w	#$800,$12(a1)
00017432                            
00017432                            loc_151F0:
00017432 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00017436 5928 0024                  		subq.b	#4,$24(a0)
0001743A                            
0001743A                            loc_151F8:
0001743A 6100                       		bsr.s	Obj66_ChkSwitch
0001743C 6100                       		bsr.s	Obj66_ChgPos
0001743E 6000 9D38                  		bra.w	MarkObjGone
00017442                            
00017442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017442                            
00017442                            
00017442                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00017442 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017446 7000                       		moveq	#0,d0
00017448 1028 0038                  		move.b	$38(a0),d0
0001744C 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00017452 6700                       		beq.s	loc_15224	; if not, branch
00017454 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00017458 6600                       		bne.s	Obj66_Animate	; if yes, branch
0001745A 4428 0034                  		neg.b	$34(a0)
0001745E 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00017464 6000                       		bra.s	Obj66_Animate
00017466                            ; ===========================================================================
00017466                            
00017466                            loc_15224:
00017466 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0001746A                            
0001746A                            Obj66_Animate:
0001746A 5328 001E                  		subq.b	#1,$1E(a0)
0001746E 6A00                       		bpl.s	locret_15246
00017470 117C 0007 001E             		move.b	#7,$1E(a0)
00017476 1228 0034                  		move.b	$34(a0),d1
0001747A 1028 001A                  		move.b	$1A(a0),d0
0001747E D001                       		add.b	d1,d0
00017480 0200 000F                  		andi.b	#$F,d0
00017484 1140 001A                  		move.b	d0,$1A(a0)
00017488                            
00017488                            locret_15246:
00017488 4E75                       		rts	
0001748A                            ; End of function Obj66_ChkSwitch
0001748A                            
0001748A                            
0001748A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001748A                            
0001748A                            
0001748A                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
0001748A 43F8 D000                  		lea	($FFFFD000).w,a1
0001748E 7000                       		moveq	#0,d0
00017490 1028 001A                  		move.b	$1A(a0),d0
00017494 D040                       		add.w	d0,d0
00017496 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
0001749A 101A                       		move.b	(a2)+,d0
0001749C 4880                       		ext.w	d0
0001749E D068 0008                  		add.w	8(a0),d0
000174A2 3340 0008                  		move.w	d0,8(a1)
000174A6 101A                       		move.b	(a2)+,d0
000174A8 4880                       		ext.w	d0
000174AA D068 000C                  		add.w	$C(a0),d0
000174AE 3340 000C                  		move.w	d0,$C(a1)
000174B2 4E75                       		rts	
000174B4                            ; End of function Obj66_ChgPos
000174B4                            
000174B4                            ; ===========================================================================
000174B4 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000174B8 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
000174BC 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
000174C0 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
000174C4 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
000174C8 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
000174CC 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000174D0 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000174D4                            ; ---------------------------------------------------------------------------
000174D4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000174D4                            ; ---------------------------------------------------------------------------
000174D4                            Map_obj66:
000174D4                            	include "_maps\obj66.asm"
000174D4                            ; ---------------------------------------------------------------------------
000174D4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000174D4                            ; ---------------------------------------------------------------------------
000174D4 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000174D8 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000174DC 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000174E0 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000174E4 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000174E8 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000174EC 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000174F0 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000174F4 0000                       		dc.w byte_154A4-Map_obj66
000174F6 06                         byte_152B4:	dc.b 6
000174F7 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000174FC 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00017501 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00017506 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
0001750B 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00017510 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00017515 06                         byte_152D3:	dc.b 6
00017516 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
0001751B 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00017520 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00017525 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
0001752A 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
0001752F 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00017534 06                         byte_152F2:	dc.b 6
00017535 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
0001753A 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001753F 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00017544 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00017549 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001754E 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00017553 06                         byte_15311:	dc.b 6
00017554 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00017559 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001755E 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00017563 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00017568 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001756D 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00017572 06                         byte_15330:	dc.b 6
00017573 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00017578 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001757D 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00017582 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00017587 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001758C 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00017591 06                         byte_1534F:	dc.b 6
00017592 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00017597 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001759C 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000175A1 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000175A6 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000175AB 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000175B0 06                         byte_1536E:	dc.b 6
000175B1 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000175B6 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000175BB 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000175C0 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000175C5 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000175CA 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000175CF 06                         byte_1538D:	dc.b 6
000175D0 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000175D5 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000175DA F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000175DF F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000175E4 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000175E9 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000175EE 06                         byte_153AC:	dc.b 6
000175EF E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000175F4 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000175F9 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000175FE E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00017603 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00017608 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
0001760D 06                         byte_153CB:	dc.b 6
0001760E D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00017613 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00017618 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
0001761D DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00017622 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00017627 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
0001762C 06                         byte_153EA:	dc.b 6
0001762D D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00017632 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00017637 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
0001763C D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00017641 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00017646 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
0001764B 06                         byte_15409:	dc.b 6
0001764C D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00017651 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00017656 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
0001765B CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00017660 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00017665 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
0001766A 06                         byte_15428:	dc.b 6
0001766B D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00017670 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00017675 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
0001767A C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001767F E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00017684 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00017689 06                         byte_15447:	dc.b 6
0001768A D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001768F D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00017694 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00017699 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
0001769E E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000176A3 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000176A8 06                         byte_15466:	dc.b 6
000176A9 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000176AE D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000176B3 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000176B8 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000176BD E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000176C2 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000176C7 06                         byte_15485:	dc.b 6
000176C8 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000176CD D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000176D2 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000176D7 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000176DC F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000176E1 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000176E6 0C                         byte_154A4:	dc.b $C
000176E7 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000176EC D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000176F1 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000176F6 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000176FB D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00017700 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00017705 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001770A 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
0001770F 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00017714 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00017719 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001771E 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00017724 00                         		even
00017724 00                         		even
00017724                            
00017724                            ; ===========================================================================
00017724                            ; ---------------------------------------------------------------------------
00017724                            ; Object 67 - disc that	you run	around (SBZ)
00017724                            ; ---------------------------------------------------------------------------
00017724                            
00017724                            Obj67:					; XREF: Obj_Index
00017724 7000                       		moveq	#0,d0
00017726 1028 0024                  		move.b	$24(a0),d0
0001772A 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
0001772E 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00017732                            ; ===========================================================================
00017732 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00017734 0000                       		dc.w Obj67_Action-Obj67_Index
00017736                            ; ===========================================================================
00017736                            
00017736                            Obj67_Main:				; XREF: Obj67_Index
00017736 5428 0024                  		addq.b	#2,$24(a0)
0001773A 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00017742 317C C344 0002             		move.w	#$C344,2(a0)
00017748 117C 0004 0001             		move.b	#4,1(a0)
0001774E 117C 0004 0018             		move.b	#4,$18(a0)
00017754 117C 0008 0019             		move.b	#8,$19(a0)
0001775A 3168 0008 0032             		move.w	8(a0),$32(a0)
00017760 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017766 117C 0018 0034             		move.b	#$18,$34(a0)
0001776C 117C 0048 0038             		move.b	#$48,$38(a0)
00017772 1228 0028                  		move.b	$28(a0),d1	; get object type
00017776 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001777A 6700                       		beq.s	loc_15546
0001777C 117C 0010 0034             		move.b	#$10,$34(a0)
00017782 117C 0038 0038             		move.b	#$38,$38(a0)
00017788                            
00017788                            loc_15546:
00017788 1228 0028                  		move.b	$28(a0),d1	; get object type
0001778C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017790 4881                       		ext.w	d1
00017792 E741                       		asl.w	#3,d1
00017794 3141 0036                  		move.w	d1,$36(a0)
00017798 1028 0022                  		move.b	$22(a0),d0
0001779C E418                       		ror.b	#2,d0
0001779E 0200 00C0                  		andi.b	#-$40,d0
000177A2 1140 0026                  		move.b	d0,$26(a0)
000177A6                            
000177A6                            Obj67_Action:				; XREF: Obj67_Index
000177A6 6100 0000                  		bsr.w	Obj67_MoveSonic
000177AA 6100 0000                  		bsr.w	Obj67_MoveSpot
000177AE 6000 0000                  		bra.w	Obj67_ChkDel
000177B2                            ; ===========================================================================
000177B2                            
000177B2                            Obj67_MoveSonic:			; XREF: Obj67_Action
000177B2 7400                       		moveq	#0,d2
000177B4 1428 0038                  		move.b	$38(a0),d2
000177B8 3602                       		move.w	d2,d3
000177BA D643                       		add.w	d3,d3
000177BC 43F8 D000                  		lea	($FFFFD000).w,a1
000177C0 3029 0008                  		move.w	8(a1),d0
000177C4 9068 0032                  		sub.w	$32(a0),d0
000177C8 D042                       		add.w	d2,d0
000177CA B043                       		cmp.w	d3,d0
000177CC 6400                       		bcc.s	loc_155A8
000177CE 3229 000C                  		move.w	$C(a1),d1
000177D2 9268 0030                  		sub.w	$30(a0),d1
000177D6 D242                       		add.w	d2,d1
000177D8 B243                       		cmp.w	d3,d1
000177DA 6400                       		bcc.s	loc_155A8
000177DC 0829 0001 0022             		btst	#1,$22(a1)
000177E2 6700                       		beq.s	loc_155B8
000177E4 4228 003A                  		clr.b	$3A(a0)
000177E8 4E75                       		rts	
000177EA                            ; ===========================================================================
000177EA                            
000177EA                            loc_155A8:
000177EA 4A28 003A                  		tst.b	$3A(a0)
000177EE 6700                       		beq.s	locret_155B6
000177F0 4229 0038                  		clr.b	$38(a1)
000177F4 4228 003A                  		clr.b	$3A(a0)
000177F8                            
000177F8                            locret_155B6:
000177F8 4E75                       		rts	
000177FA                            ; ===========================================================================
000177FA                            
000177FA                            loc_155B8:
000177FA 4A28 003A                  		tst.b	$3A(a0)
000177FE 6600                       		bne.s	loc_155E2
00017800 117C 0001 003A             		move.b	#1,$3A(a0)
00017806 0829 0002 0022             		btst	#2,$22(a1)
0001780C 6600                       		bne.s	loc_155D0
0001780E 4229 001C                  		clr.b	$1C(a1)
00017812                            
00017812                            loc_155D0:
00017812 08A9 0005 0022             		bclr	#5,$22(a1)
00017818 137C 0001 001D             		move.b	#1,$1D(a1)
0001781E 137C 0001 0038             		move.b	#1,$38(a1)
00017824                            
00017824                            loc_155E2:
00017824 3029 0020                  		move.w	$20(a1),d0
00017828 4A68 0036                  		tst.w	$36(a0)
0001782C 6A00                       		bpl.s	loc_15608
0001782E 0C40 FC00                  		cmpi.w	#-$400,d0
00017832 6F00                       		ble.s	loc_155FA
00017834 337C FC00 0020             		move.w	#-$400,$20(a1)
0001783A 4E75                       		rts	
0001783C                            ; ===========================================================================
0001783C                            
0001783C                            loc_155FA:
0001783C 0C40 F100                  		cmpi.w	#-$F00,d0
00017840 6C00                       		bge.s	locret_15606
00017842 337C F100 0020             		move.w	#-$F00,$20(a1)
00017848                            
00017848                            locret_15606:
00017848 4E75                       		rts	
0001784A                            ; ===========================================================================
0001784A                            
0001784A                            loc_15608:
0001784A 0C40 0400                  		cmpi.w	#$400,d0
0001784E 6C00                       		bge.s	loc_15616
00017850 337C 0400 0020             		move.w	#$400,$20(a1)
00017856 4E75                       		rts	
00017858                            ; ===========================================================================
00017858                            
00017858                            loc_15616:
00017858 0C40 0F00                  		cmpi.w	#$F00,d0
0001785C 6F00                       		ble.s	locret_15622
0001785E 337C 0F00 0020             		move.w	#$F00,$20(a1)
00017864                            
00017864                            locret_15622:
00017864 4E75                       		rts	
00017866                            ; ===========================================================================
00017866                            
00017866                            Obj67_MoveSpot:				; XREF: Obj67_Action
00017866 3028 0036                  		move.w	$36(a0),d0
0001786A D168 0026                  		add.w	d0,$26(a0)
0001786E 1028 0026                  		move.b	$26(a0),d0
00017872 4EB9 0000 29F6             		jsr	(CalcSine).l
00017878 3428 0030                  		move.w	$30(a0),d2
0001787C 3628 0032                  		move.w	$32(a0),d3
00017880 7800                       		moveq	#0,d4
00017882 1828 0034                  		move.b	$34(a0),d4
00017886 E14C                       		lsl.w	#8,d4
00017888 2A04                       		move.l	d4,d5
0001788A C9C0                       		muls.w	d0,d4
0001788C 4844                       		swap	d4
0001788E CBC1                       		muls.w	d1,d5
00017890 4845                       		swap	d5
00017892 D842                       		add.w	d2,d4
00017894 DA43                       		add.w	d3,d5
00017896 3144 000C                  		move.w	d4,$C(a0)
0001789A 3145 0008                  		move.w	d5,8(a0)
0001789E 4E75                       		rts	
000178A0                            ; ===========================================================================
000178A0                            
000178A0                            Obj67_ChkDel:				; XREF: Obj67_Action
000178A0 3028 0032                  		move.w	$32(a0),d0
000178A4 0240 FF80                  		andi.w	#-$80,d0
000178A8 3238 F700                  		move.w	($FFFFF700).w,d1
000178AC 0441 0080                  		subi.w	#$80,d1
000178B0 0241 FF80                  		andi.w	#-$80,d1
000178B4 9041                       		sub.w	d1,d0
000178B6 0C40 0280                  		cmpi.w	#$280,d0
000178BA 6200                       		bhi.s	Obj67_Delete
000178BC 4EF9 0000 EB2E             		jmp	DisplaySprite
000178C2                            ; ===========================================================================
000178C2                            
000178C2                            Obj67_Delete:
000178C2 4EF9 0000 EB7E             		jmp	DeleteObject
000178C8                            ; ===========================================================================
000178C8                            ; ---------------------------------------------------------------------------
000178C8                            ; Sprite mappings - disc that you run around (SBZ)
000178C8                            ; (It's just a small blob that moves around in a circle. The disc itself is
000178C8                            ; part of the level tiles.)
000178C8                            ; ---------------------------------------------------------------------------
000178C8                            Map_obj67:
000178C8                            	include "_maps\obj67.asm"
000178C8                            ; ---------------------------------------------------------------------------
000178C8                            ; Sprite mappings - disc that you run around (SBZ)
000178C8                            ; (It's just a small blob that moves around in a circle. The disc itself is
000178C8                            ; part of the level tiles.)
000178C8                            ; ---------------------------------------------------------------------------
000178C8 0000                       		dc.w byte_15688-Map_obj67
000178CA 01                         byte_15688:	dc.b 1
000178CB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000178D0                            		even
000178D0                            		even
000178D0                            
000178D0                            ; ===========================================================================
000178D0                            ; ---------------------------------------------------------------------------
000178D0                            ; Object 68 - conveyor belts (SBZ)
000178D0                            ; ---------------------------------------------------------------------------
000178D0                            
000178D0                            Obj68:					; XREF: Obj_Index
000178D0 7000                       		moveq	#0,d0
000178D2 1028 0024                  		move.b	$24(a0),d0
000178D6 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000178DA 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000178DE                            ; ===========================================================================
000178DE 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000178E0 0000                       		dc.w Obj68_Action-Obj68_Index
000178E2                            ; ===========================================================================
000178E2                            
000178E2                            Obj68_Main:				; XREF: Obj68_Index
000178E2 5428 0024                  		addq.b	#2,$24(a0)
000178E6 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000178EC 1228 0028                  		move.b	$28(a0),d1	; get object type
000178F0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000178F4 6700                       		beq.s	loc_156BA	; if zero, branch
000178F6 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000178FC                            
000178FC                            loc_156BA:
000178FC 1228 0028                  		move.b	$28(a0),d1	; get object type
00017900 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017904 4881                       		ext.w	d1
00017906 E841                       		asr.w	#4,d1
00017908 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
0001790C                            
0001790C                            Obj68_Action:				; XREF: Obj68_Index
0001790C 6100                       		bsr.s	Obj68_MoveSonic
0001790E 3028 0008                  		move.w	8(a0),d0
00017912 0240 FF80                  		andi.w	#$FF80,d0
00017916 3238 F700                  		move.w	($FFFFF700).w,d1
0001791A 0441 0080                  		subi.w	#$80,d1
0001791E 0241 FF80                  		andi.w	#$FF80,d1
00017922 9041                       		sub.w	d1,d0
00017924 0C40 0280                  		cmpi.w	#$280,d0
00017928 6300                       		bls.s	Obj68_NoDel
0001792A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001792E 6700                       		beq.s	Obj68_Delete		; if it's zero, don't remember object
00017930 3440                       		movea.w	d0,a2	; load address into a2
00017932 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017936 6000                       		bra.s	Obj68_Delete	; and delete object
00017938                            
00017938                            Obj68_NoDel:
00017938 4E75                       		rts	
0001793A                            ; ===========================================================================
0001793A                            
0001793A                            Obj68_Delete:
0001793A 4EF9 0000 EB7E             		jmp	DeleteObject
00017940                            ; ===========================================================================
00017940                            
00017940                            Obj68_MoveSonic:			; XREF: Obj68_Action
00017940 7400                       		moveq	#0,d2
00017942 1428 0038                  		move.b	$38(a0),d2
00017946 3602                       		move.w	d2,d3
00017948 D643                       		add.w	d3,d3
0001794A 43F8 D000                  		lea	($FFFFD000).w,a1
0001794E 3029 0008                  		move.w	8(a1),d0
00017952 9068 0008                  		sub.w	8(a0),d0
00017956 D042                       		add.w	d2,d0
00017958 B043                       		cmp.w	d3,d0
0001795A 6400                       		bcc.s	locret_1572E
0001795C 3229 000C                  		move.w	$C(a1),d1
00017960 9268 000C                  		sub.w	$C(a0),d1
00017964 0641 0030                  		addi.w	#$30,d1
00017968 0C41 0030                  		cmpi.w	#$30,d1
0001796C 6400                       		bcc.s	locret_1572E
0001796E 0829 0001 0022             		btst	#1,$22(a1)
00017974 6600                       		bne.s	locret_1572E
00017976 3028 0036                  		move.w	$36(a0),d0
0001797A D169 0008                  		add.w	d0,8(a1)
0001797E                            
0001797E                            locret_1572E:
0001797E 4E75                       		rts	
00017980                            
00017980                            ; ===========================================================================
00017980                            ; ---------------------------------------------------------------------------
00017980                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00017980                            ; ---------------------------------------------------------------------------
00017980                            
00017980                            Obj69:					; XREF: Obj_Index
00017980 7000                       		moveq	#0,d0
00017982 1028 0024                  		move.b	$24(a0),d0
00017986 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001798A 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001798E                            ; ===========================================================================
0001798E 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00017990 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00017992 0000                       		dc.w Obj69_Spinner-Obj69_Index
00017994                            ; ===========================================================================
00017994                            
00017994                            Obj69_Main:				; XREF: Obj69_Index
00017994 5428 0024                  		addq.b	#2,$24(a0)
00017998 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000179A0 317C 4492 0002             		move.w	#$4492,2(a0)
000179A6 0028 0004 0001             		ori.b	#4,1(a0)
000179AC 117C 0080 0019             		move.b	#$80,$19(a0)
000179B2 7000                       		moveq	#0,d0
000179B4 1028 0028                  		move.b	$28(a0),d0
000179B8 0240 000F                  		andi.w	#$F,d0
000179BC C0FC 003C                  		mulu.w	#$3C,d0
000179C0 3140 0032                  		move.w	d0,$32(a0)
000179C4 4A28 0028                  		tst.b	$28(a0)
000179C8 6A00                       		bpl.s	Obj69_Trapdoor
000179CA 5428 0024                  		addq.b	#2,$24(a0)
000179CE 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000179D6 317C 04DF 0002             		move.w	#$4DF,2(a0)
000179DC 117C 0010 0019             		move.b	#$10,$19(a0)
000179E2 117C 0002 001C             		move.b	#2,$1C(a0)
000179E8 7000                       		moveq	#0,d0
000179EA 1028 0028                  		move.b	$28(a0),d0	; get object type
000179EE 3200                       		move.w	d0,d1
000179F0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000179F4 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000179F8 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000179FC 3140 0032                  		move.w	d0,$32(a0)
00017A00 0241 0070                  		andi.w	#$70,d1
00017A04 0641 0010                  		addi.w	#$10,d1
00017A08 E549                       		lsl.w	#2,d1
00017A0A 5341                       		subq.w	#1,d1
00017A0C 3141 0036                  		move.w	d1,$36(a0)
00017A10 6000                       		bra.s	Obj69_Spinner
00017A12                            ; ===========================================================================
00017A12                            
00017A12                            Obj69_Trapdoor:				; XREF: Obj69_Index
00017A12 5368 0030                  		subq.w	#1,$30(a0)
00017A16 6A00                       		bpl.s	Obj69_Animate
00017A18 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017A1E 0868 0000 001C             		bchg	#0,$1C(a0)
00017A24 4A28 0001                  		tst.b	1(a0)
00017A28 6A00                       		bpl.s	Obj69_Animate
00017A2A 303C 00BB                  		move.w	#$BB,d0
00017A2E 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play door sound
00017A34                            
00017A34                            Obj69_Animate:
00017A34 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017A3A 4EB9 0000 BB8E             		jsr	AnimateSprite
00017A40 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00017A44 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00017A46 323C 004B                  		move.w	#$4B,d1
00017A4A 343C 000C                  		move.w	#$C,d2
00017A4E 3602                       		move.w	d2,d3
00017A50 5243                       		addq.w	#1,d3
00017A52 3828 0008                  		move.w	8(a0),d4
00017A56 6100 9A44                  		bsr.w	SolidObject
00017A5A 6000 971C                  		bra.w	MarkObjGone
00017A5E                            ; ===========================================================================
00017A5E                            
00017A5E                            Obj69_NotSolid:
00017A5E 0828 0003 0022             		btst	#3,$22(a0)
00017A64 6700                       		beq.s	Obj69_Display
00017A66 43F8 D000                  		lea	($FFFFD000).w,a1
00017A6A 08A9 0003 0022             		bclr	#3,$22(a1)
00017A70 08A8 0003 0022             		bclr	#3,$22(a0)
00017A76 4228 0025                  		clr.b	$25(a0)
00017A7A                            
00017A7A                            Obj69_Display:
00017A7A 6000 96FC                  		bra.w	MarkObjGone
00017A7E                            ; ===========================================================================
00017A7E                            
00017A7E                            Obj69_Spinner:				; XREF: Obj69_Index
00017A7E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017A82 C068 0036                  		and.w	$36(a0),d0
00017A86 6600                       		bne.s	Obj69_Delay
00017A88 117C 0001 0034             		move.b	#1,$34(a0)
00017A8E                            
00017A8E                            Obj69_Delay:
00017A8E 4A28 0034                  		tst.b	$34(a0)
00017A92 6700                       		beq.s	Obj69_Animate2
00017A94 5368 0030                  		subq.w	#1,$30(a0)
00017A98 6A00                       		bpl.s	Obj69_Animate2
00017A9A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017AA0 4228 0034                  		clr.b	$34(a0)
00017AA4 0868 0000 001C             		bchg	#0,$1C(a0)
00017AAA                            
00017AAA                            Obj69_Animate2:
00017AAA 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017AB0 4EB9 0000 BB8E             		jsr	AnimateSprite
00017AB6 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00017ABA 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00017ABC 323C 001B                  		move.w	#$1B,d1
00017AC0 343C 0007                  		move.w	#7,d2
00017AC4 3602                       		move.w	d2,d3
00017AC6 5243                       		addq.w	#1,d3
00017AC8 3828 0008                  		move.w	8(a0),d4
00017ACC 6100 99CE                  		bsr.w	SolidObject
00017AD0 6000 96A6                  		bra.w	MarkObjGone
00017AD4                            ; ===========================================================================
00017AD4                            
00017AD4                            Obj69_NotSolid2:
00017AD4 0828 0003 0022             		btst	#3,$22(a0)
00017ADA 6700                       		beq.s	Obj69_Display2
00017ADC 43F8 D000                  		lea	($FFFFD000).w,a1
00017AE0 08A9 0003 0022             		bclr	#3,$22(a1)
00017AE6 08A8 0003 0022             		bclr	#3,$22(a0)
00017AEC 4228 0025                  		clr.b	$25(a0)
00017AF0                            
00017AF0                            Obj69_Display2:
00017AF0 6000 9686                  		bra.w	MarkObjGone
00017AF4                            ; ===========================================================================
00017AF4                            Ani_obj69:
00017AF4                            	include "_anim\obj69.asm"
00017AF4                            ; ---------------------------------------------------------------------------
00017AF4                            ; Animation script - trapdoor (SBZ)
00017AF4                            ; ---------------------------------------------------------------------------
00017AF4 0000                       		dc.w byte_158AC-Ani_obj69
00017AF6 0000                       		dc.w byte_158B2-Ani_obj69
00017AF8 0000                       		dc.w byte_158B8-Ani_obj69
00017AFA 0000                       		dc.w byte_158CC-Ani_obj69
00017AFC 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00017B02 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00017B08 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017B15 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017B1C 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017B29 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017B30                            		even
00017B30                            		even
00017B30                            
00017B30                            ; ---------------------------------------------------------------------------
00017B30                            ; Sprite mappings - trapdoor (SBZ)
00017B30                            ; ---------------------------------------------------------------------------
00017B30                            Map_obj69:
00017B30                            	include "_maps\obj69.asm"
00017B30                            ; ---------------------------------------------------------------------------
00017B30                            ; Sprite mappings - trapdoor (SBZ)
00017B30                            ; ---------------------------------------------------------------------------
00017B30 0000                       		dc.w byte_158E6-Map_obj69
00017B32 0000                       		dc.w byte_158FB-Map_obj69
00017B34 0000                       		dc.w byte_15924-Map_obj69
00017B36 04                         byte_158E6:	dc.b 4
00017B37 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00017B3C F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00017B41 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00017B46 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00017B4B 08                         byte_158FB:	dc.b 8
00017B4C F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00017B51 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00017B56 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00017B5B 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00017B60 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00017B65 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00017B6A 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00017B6F 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00017B74 04                         byte_15924:	dc.b 4
00017B75 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00017B7A 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00017B7F 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00017B84 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00017B8A 00                         		even
00017B8A 00                         		even
00017B8A                            
00017B8A                            ; ---------------------------------------------------------------------------
00017B8A                            ; Sprite mappings - spinning platforms (SBZ)
00017B8A                            ; ---------------------------------------------------------------------------
00017B8A                            Map_obj69a:
00017B8A                            	include "_maps\obj69a.asm"
00017B8A                            ; ---------------------------------------------------------------------------
00017B8A                            ; Sprite mappings - spinning platforms (SBZ)
00017B8A                            ; ---------------------------------------------------------------------------
00017B8A 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00017B8E 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00017B92 0000                       		dc.w byte_15970-Map_obj69a
00017B94 02                         byte_15944:	dc.b 2
00017B95 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00017B9A F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00017B9F 02                         byte_1594F:	dc.b 2
00017BA0 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00017BA5 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00017BAA 02                         byte_1595A:	dc.b 2
00017BAB F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00017BB0 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00017BB5 02                         byte_15965:	dc.b 2
00017BB6 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00017BBB 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00017BC0 02                         byte_15970:	dc.b 2
00017BC1 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017BC6 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017BCC 00                         		even
00017BCC 00                         		even
00017BCC                            
00017BCC                            ; ===========================================================================
00017BCC                            ; ---------------------------------------------------------------------------
00017BCC                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017BCC                            ; ---------------------------------------------------------------------------
00017BCC                            
00017BCC                            Obj6A:					; XREF: Obj_Index
00017BCC 7000                       		moveq	#0,d0
00017BCE 1028 0024                  		move.b	$24(a0),d0
00017BD2 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00017BD6 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00017BDA                            ; ===========================================================================
00017BDA 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017BDC 0000                       		dc.w Obj6A_Action-Obj6A_Index
00017BDE                            ; ===========================================================================
00017BDE                            
00017BDE                            Obj6A_Main:				; XREF: Obj6A_Index
00017BDE 5428 0024                  		addq.b	#2,$24(a0)
00017BE2 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00017BEA 317C 43B5 0002             		move.w	#$43B5,2(a0)
00017BF0 117C 0004 0001             		move.b	#4,1(a0)
00017BF6 117C 0004 0018             		move.b	#4,$18(a0)
00017BFC 117C 0020 0019             		move.b	#$20,$19(a0)
00017C02 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017C08 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017C0E 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00017C14 6400                       		bcc.s	Obj6A_Action
00017C16 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017C1C                            
00017C1C                            Obj6A_Action:				; XREF: Obj6A_Index
00017C1C 7000                       		moveq	#0,d0
00017C1E 1028 0028                  		move.b	$28(a0),d0
00017C22 0240 0007                  		andi.w	#7,d0
00017C26 D040                       		add.w	d0,d0
00017C28 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00017C2C 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00017C30 3028 003A                  		move.w	$3A(a0),d0
00017C34 0240 FF80                  		andi.w	#$FF80,d0
00017C38 3238 F700                  		move.w	($FFFFF700).w,d1
00017C3C 0441 0080                  		subi.w	#$80,d1
00017C40 0241 FF80                  		andi.w	#$FF80,d1
00017C44 9041                       		sub.w	d1,d0
00017C46 0C40 0280                  		cmpi.w	#$280,d0
00017C4A 6300                       		bls.s	Obj6A_NoDel
00017C4C                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00017C4C                            	;	beq.s	Obj6A_Delete		; if it's zero, don't remember object
00017C4C                            	;	movea.w	d0,a2	; load address into a2
00017C4C                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017C4C 6000                       		bra.s	Obj6A_Delete	; and delete object
00017C4E                            
00017C4E                            Obj6A_NoDel:
00017C4E 4EF9 0000 EB2E             		jmp	DisplaySprite
00017C54                            ; ===========================================================================
00017C54                            
00017C54                            Obj6A_Delete:
00017C54 4EF9 0000 EB7E             		jmp	DeleteObject
00017C5A                            ; ===========================================================================
00017C5A 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00017C5E 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00017C62 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00017C64                            ; ===========================================================================
00017C64                            
00017C64                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00017C64 4E75                       		rts	
00017C66                            ; ===========================================================================
00017C66                            
00017C66                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00017C66 323C 0060                  		move.w	#$60,d1
00017C6A 7000                       		moveq	#0,d0
00017C6C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00017C70 0828 0000 0022             		btst	#0,$22(a0)
00017C76 6700                       		beq.s	Obj6A_Animate01
00017C78 4440                       		neg.w	d0
00017C7A D041                       		add.w	d1,d0
00017C7C                            
00017C7C                            Obj6A_Animate01:
00017C7C 3228 003A                  		move.w	$3A(a0),d1
00017C80 9240                       		sub.w	d0,d1
00017C82 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017C86 5328 001E                  		subq.b	#1,$1E(a0)
00017C8A 6A00                       		bpl.s	loc_15A46
00017C8C 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00017C92 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00017C98                            
00017C98                            loc_15A46:
00017C98 4A28 0001                  		tst.b	1(a0)
00017C9C 6A00                       		bpl.s	locret_15A60
00017C9E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017CA2 0240 000F                  		andi.w	#$F,d0
00017CA6 6600                       		bne.s	locret_15A60
00017CA8 303C 00B0                  		move.w	#$B0,d0
00017CAC 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play saw sound
00017CB2                            
00017CB2                            locret_15A60:
00017CB2 4E75                       		rts	
00017CB4                            ; ===========================================================================
00017CB4                            
00017CB4                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017CB4 323C 0030                  		move.w	#$30,d1
00017CB8 7000                       		moveq	#0,d0
00017CBA 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017CBE 0828 0000 0022             		btst	#0,$22(a0)
00017CC4 6700                       		beq.s	Obj6A_Animate02
00017CC6 4440                       		neg.w	d0
00017CC8 0640 0080                  		addi.w	#$80,d0
00017CCC                            
00017CCC                            Obj6A_Animate02:
00017CCC 3228 0038                  		move.w	$38(a0),d1
00017CD0 9240                       		sub.w	d0,d1
00017CD2 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017CD6 5328 001E                  		subq.b	#1,$1E(a0)
00017CDA 6A00                       		bpl.s	loc_15A96
00017CDC 117C 0002 001E             		move.b	#2,$1E(a0)
00017CE2 0868 0000 001A             		bchg	#0,$1A(a0)
00017CE8                            
00017CE8                            loc_15A96:
00017CE8 4A28 0001                  		tst.b	1(a0)
00017CEC 6A00                       		bpl.s	locret_15AB0
00017CEE 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017CF2 0C00 0018                  		cmpi.b	#$18,d0
00017CF6 6600                       		bne.s	locret_15AB0
00017CF8 303C 00B0                  		move.w	#$B0,d0
00017CFC 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play saw sound
00017D02                            
00017D02                            locret_15AB0:
00017D02 4E75                       		rts	
00017D04                            ; ===========================================================================
00017D04                            
00017D04                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017D04 4A28 003D                  		tst.b	$3D(a0)
00017D08 6600                       		bne.s	Obj6A_Animate03
00017D0A 3038 D008                  		move.w	($FFFFD008).w,d0
00017D0E 0440 00C0                  		subi.w	#$C0,d0
00017D12 6500                       		bcs.s	loc_15B02
00017D14 9068 0008                  		sub.w	8(a0),d0
00017D18 6500                       		bcs.s	loc_15B02
00017D1A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017D1E 0440 0080                  		subi.w	#$80,d0
00017D22 B068 000C                  		cmp.w	$C(a0),d0
00017D26 6400                       		bcc.s	locret_15B04
00017D28 0640 0100                  		addi.w	#$100,d0
00017D2C B068 000C                  		cmp.w	$C(a0),d0
00017D30 6500                       		bcs.s	locret_15B04
00017D32 117C 0001 003D             		move.b	#1,$3D(a0)
00017D38 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00017D3E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017D44 117C 0002 001A             		move.b	#2,$1A(a0)
00017D4A 303C 00B0                  		move.w	#$B0,d0
00017D4E 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play saw sound
00017D54                            
00017D54                            loc_15B02:
00017D54 588F                       		addq.l	#4,sp
00017D56                            
00017D56                            locret_15B04:
00017D56 4E75                       		rts	
00017D58                            ; ===========================================================================
00017D58                            
00017D58                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00017D58 4EB9 0000 EB14             		jsr	SpeedToPos
00017D5E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017D64 5328 001E                  		subq.b	#1,$1E(a0)
00017D68 6A00                       		bpl.s	locret_15B24
00017D6A 117C 0002 001E             		move.b	#2,$1E(a0)
00017D70 0868 0000 001A             		bchg	#0,$1A(a0)
00017D76                            
00017D76                            locret_15B24:
00017D76 4E75                       		rts	
00017D78                            ; ===========================================================================
00017D78                            
00017D78                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017D78 4A28 003D                  		tst.b	$3D(a0)
00017D7C 6600                       		bne.s	Obj6A_Animate04
00017D7E 3038 D008                  		move.w	($FFFFD008).w,d0
00017D82 0640 00E0                  		addi.w	#$E0,d0
00017D86 9068 0008                  		sub.w	8(a0),d0
00017D8A 6400                       		bcc.s	loc_15B74
00017D8C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017D90 0440 0080                  		subi.w	#$80,d0
00017D94 B068 000C                  		cmp.w	$C(a0),d0
00017D98 6400                       		bcc.s	locret_15B76
00017D9A 0640 0100                  		addi.w	#$100,d0
00017D9E B068 000C                  		cmp.w	$C(a0),d0
00017DA2 6500                       		bcs.s	locret_15B76
00017DA4 117C 0001 003D             		move.b	#1,$3D(a0)
00017DAA 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017DB0 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017DB6 117C 0002 001A             		move.b	#2,$1A(a0)
00017DBC 303C 00B0                  		move.w	#$B0,d0
00017DC0 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play saw sound
00017DC6                            
00017DC6                            loc_15B74:
00017DC6 588F                       		addq.l	#4,sp
00017DC8                            
00017DC8                            locret_15B76:
00017DC8 4E75                       		rts	
00017DCA                            ; ===========================================================================
00017DCA                            
00017DCA                            Obj6A_Animate04:
00017DCA 4EB9 0000 EB14             		jsr	SpeedToPos
00017DD0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017DD6 5328 001E                  		subq.b	#1,$1E(a0)
00017DDA 6A00                       		bpl.s	locret_15B96
00017DDC 117C 0002 001E             		move.b	#2,$1E(a0)
00017DE2 0868 0000 001A             		bchg	#0,$1A(a0)
00017DE8                            
00017DE8                            locret_15B96:
00017DE8 4E75                       		rts	
00017DEA                            ; ===========================================================================
00017DEA                            ; ---------------------------------------------------------------------------
00017DEA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017DEA                            ; ---------------------------------------------------------------------------
00017DEA                            Map_obj6A:
00017DEA                            	include "_maps\obj6A.asm"
00017DEA                            ; ---------------------------------------------------------------------------
00017DEA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017DEA                            ; ---------------------------------------------------------------------------
00017DEA 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017DEE 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017DF2 07                         byte_15BA0:	dc.b 7
00017DF3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017DF8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017DFD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017E02 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017E07 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017E0C 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017E11 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017E16 07                         byte_15BC4:	dc.b 7
00017E17 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017E1C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017E21 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017E26 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017E2B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017E30 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017E35 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017E3A 04                         byte_15BE8:	dc.b 4
00017E3B E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017E40 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017E45 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017E4A 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017E4F 04                         byte_15BFD:	dc.b 4
00017E50 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017E55 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017E5A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017E5F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017E64                            		even
00017E64                            		even
00017E64                            
00017E64                            ; ===========================================================================
00017E64                            ; ---------------------------------------------------------------------------
00017E64                            ; Object 6B - stomper (SBZ)
00017E64                            ; ---------------------------------------------------------------------------
00017E64                            
00017E64                            Obj6B:					; XREF: Obj_Index
00017E64 7000                       		moveq	#0,d0
00017E66 1028 0024                  		move.b	$24(a0),d0
00017E6A 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00017E6E 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00017E72                            ; ===========================================================================
00017E72 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017E74 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017E76                            
00017E76 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017E7A 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017E7E 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017E82 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017E86 8040 0005                  		dc.b  $80, $40,	  0,   5
00017E8A                            ; ===========================================================================
00017E8A                            
00017E8A                            Obj6B_Main:				; XREF: Obj6B_Index
00017E8A 5428 0024                  		addq.b	#2,$24(a0)
00017E8E 7000                       		moveq	#0,d0
00017E90 1028 0028                  		move.b	$28(a0),d0
00017E94 E448                       		lsr.w	#2,d0
00017E96 0240 001C                  		andi.w	#$1C,d0
00017E9A 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017E9E 115B 0019                  		move.b	(a3)+,$19(a0)
00017EA2 115B 0016                  		move.b	(a3)+,$16(a0)
00017EA6 E448                       		lsr.w	#2,d0
00017EA8 1140 001A                  		move.b	d0,$1A(a0)
00017EAC 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017EB4 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017EBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017EC0 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017EC2 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017EC8 6700                       		beq.s	Obj6B_SBZ3
00017ECA                            
00017ECA                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017ECA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017ECE 6700                       		beq.s	Obj6B_Delete		; if it's zero, don't remember object
00017ED0 3440                       		movea.w	d0,a2	; load address into a2
00017ED2 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017ED6                            
00017ED6                            Obj6B_Delete:
00017ED6 4EF9 0000 EB7E             		jmp	DeleteObject
00017EDC                            ; ===========================================================================
00017EDC                            
00017EDC                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017EDC 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017EE2 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017EE8 6600                       		bne.s	Obj6B_SBZ12
00017EEA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017EEE 6700                       		beq.s	Obj6B_SBZ12		; if it's zero, don't remember object
00017EF0 3440                       		movea.w	d0,a2	; load address into a2
00017EF2 0812 0000                  		btst	#0,(a2)
00017EF6 6700                       		beq.s	Obj6B_SBZ12
00017EF8 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017EFC 60CC                       		bra.s	Obj6B_ChkGone
00017EFE                            ; ===========================================================================
00017EFE                            
00017EFE                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017EFE 0028 0004 0001             		ori.b	#4,1(a0)
00017F04 117C 0004 0018             		move.b	#4,$18(a0)
00017F0A 3168 0008 0034             		move.w	8(a0),$34(a0)
00017F10 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017F16 7000                       		moveq	#0,d0
00017F18 101B                       		move.b	(a3)+,d0
00017F1A 3140 003C                  		move.w	d0,$3C(a0)
00017F1E 7000                       		moveq	#0,d0
00017F20 1028 0028                  		move.b	$28(a0),d0
00017F24 6A00                       		bpl.s	Obj6B_Action
00017F26 0200 000F                  		andi.b	#$F,d0
00017F2A 1140 003E                  		move.b	d0,$3E(a0)
00017F2E 1153 0028                  		move.b	(a3),$28(a0)
00017F32 0C13 0005                  		cmpi.b	#5,(a3)
00017F36 6600                       		bne.s	Obj6B_ChkGone2
00017F38 08E8 0004 0001             		bset	#4,1(a0)
00017F3E                            
00017F3E                            Obj6B_ChkGone2:
00017F3E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017F42 6700                       		beq.s	Obj6B_Action		; if it's zero, don't remember object
00017F44 3440                       		movea.w	d0,a2	; load address into a2
00017F46 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017F4A                            
00017F4A                            Obj6B_Action:				; XREF: Obj6B_Index
00017F4A 3F28 0008                  		move.w	8(a0),-(sp)
00017F4E 7000                       		moveq	#0,d0
00017F50 1028 0028                  		move.b	$28(a0),d0
00017F54 0240 000F                  		andi.w	#$F,d0
00017F58 D040                       		add.w	d0,d0
00017F5A 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017F5E 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017F62 381F                       		move.w	(sp)+,d4
00017F64 4A28 0001                  		tst.b	1(a0)
00017F68 6A00                       		bpl.s	Obj6B_ChkDel
00017F6A 7200                       		moveq	#0,d1
00017F6C 1228 0019                  		move.b	$19(a0),d1
00017F70 0641 000B                  		addi.w	#$B,d1
00017F74 7400                       		moveq	#0,d2
00017F76 1428 0016                  		move.b	$16(a0),d2
00017F7A 3602                       		move.w	d2,d3
00017F7C 5243                       		addq.w	#1,d3
00017F7E 6100 951C                  		bsr.w	SolidObject
00017F82                            
00017F82                            Obj6B_ChkDel:
00017F82 3028 0034                  		move.w	$34(a0),d0
00017F86 0240 FF80                  		andi.w	#$FF80,d0
00017F8A 3238 F700                  		move.w	($FFFFF700).w,d1
00017F8E 0441 0080                  		subi.w	#$80,d1
00017F92 0241 FF80                  		andi.w	#$FF80,d1
00017F96 9041                       		sub.w	d1,d0
00017F98 0C40 0280                  		cmpi.w	#$280,d0
00017F9C 6200                       		bhi.s	loc_15D64
00017F9E 4EF9 0000 EB2E             		jmp	DisplaySprite
00017FA4                            ; ===========================================================================
00017FA4                            
00017FA4                            loc_15D64:
00017FA4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017FAA 6600                       		bne.s	Obj6B_Delete2
00017FAC 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017FB0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017FB4 6700                       		beq.s	Obj6B_Delete2		; if it's zero, don't remember object
00017FB6 3440                       		movea.w	d0,a2	; load address into a2
00017FB8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017FBC                            
00017FBC                            Obj6B_Delete2:
00017FBC 4EF9 0000 EB7E             		jmp	DeleteObject
00017FC2                            ; ===========================================================================
00017FC2 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017FC6 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017FCA 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017FCE                            ; ===========================================================================
00017FCE                            
00017FCE                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017FCE 4E75                       		rts	
00017FD0                            ; ===========================================================================
00017FD0                            
00017FD0                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017FD0 4A28 0038                  		tst.b	$38(a0)
00017FD4 6600                       		bne.s	loc_15DB4
00017FD6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017FDA 7000                       		moveq	#0,d0
00017FDC 1028 003E                  		move.b	$3E(a0),d0
00017FE0 0832 0000 0000             		btst	#0,(a2,d0.w)
00017FE6 6700                       		beq.s	loc_15DC2
00017FE8 117C 0001 0038             		move.b	#1,$38(a0)
00017FEE                            
00017FEE                            loc_15DB4:
00017FEE 3028 003C                  		move.w	$3C(a0),d0
00017FF2 B068 003A                  		cmp.w	$3A(a0),d0
00017FF6 6700                       		beq.s	loc_15DE0
00017FF8 5468 003A                  		addq.w	#2,$3A(a0)
00017FFC                            
00017FFC                            loc_15DC2:
00017FFC 3028 003A                  		move.w	$3A(a0),d0
00018000 0828 0000 0022             		btst	#0,$22(a0)
00018006 6700                       		beq.s	loc_15DD4
00018008 4440                       		neg.w	d0
0001800A 0640 0080                  		addi.w	#$80,d0
0001800E                            
0001800E                            loc_15DD4:
0001800E 3228 0034                  		move.w	$34(a0),d1
00018012 9240                       		sub.w	d0,d1
00018014 3141 0008                  		move.w	d1,8(a0)
00018018 4E75                       		rts	
0001801A                            ; ===========================================================================
0001801A                            
0001801A                            loc_15DE0:
0001801A 5228 0028                  		addq.b	#1,$28(a0)
0001801E 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018024 4228 0038                  		clr.b	$38(a0)
00018028 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001802C 67CE                       		beq.s	loc_15DC2		; if it's zero, don't remember object
0001802E 3440                       		movea.w	d0,a2	; load address into a2
00018030 08D2 0000                  		bset	#0,(a2)
00018034 60C6                       		bra.s	loc_15DC2
00018036                            ; ===========================================================================
00018036                            
00018036                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00018036 4A28 0038                  		tst.b	$38(a0)
0001803A 6600                       		bne.s	loc_15E14
0001803C 5368 0036                  		subq.w	#1,$36(a0)
00018040 6600                       		bne.s	loc_15E1E
00018042 117C 0001 0038             		move.b	#1,$38(a0)
00018048                            
00018048                            loc_15E14:
00018048 4A68 003A                  		tst.w	$3A(a0)
0001804C 6700                       		beq.s	loc_15E3C
0001804E 5568 003A                  		subq.w	#2,$3A(a0)
00018052                            
00018052                            loc_15E1E:
00018052 3028 003A                  		move.w	$3A(a0),d0
00018056 0828 0000 0022             		btst	#0,$22(a0)
0001805C 6700                       		beq.s	loc_15E30
0001805E 4440                       		neg.w	d0
00018060 0640 0080                  		addi.w	#$80,d0
00018064                            
00018064                            loc_15E30:
00018064 3228 0034                  		move.w	$34(a0),d1
00018068 9240                       		sub.w	d0,d1
0001806A 3141 0008                  		move.w	d1,8(a0)
0001806E 4E75                       		rts	
00018070                            ; ===========================================================================
00018070                            
00018070                            loc_15E3C:
00018070 5328 0028                  		subq.b	#1,$28(a0)
00018074 4228 0038                  		clr.b	$38(a0)
00018078 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001807C 67D4                       		beq.s	loc_15E1E		; if it's zero, don't remember object
0001807E 3440                       		movea.w	d0,a2	; load address into a2
00018080 0892 0000                  		bclr	#0,(a2)
00018084 60CC                       		bra.s	loc_15E1E
00018086                            ; ===========================================================================
00018086                            
00018086                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00018086 4A28 0038                  		tst.b	$38(a0)
0001808A 6600                       		bne.s	loc_15E7C
0001808C 4A68 003A                  		tst.w	$3A(a0)
00018090 6700                       		beq.s	loc_15E6A
00018092 5368 003A                  		subq.w	#1,$3A(a0)
00018096 6000                       		bra.s	loc_15E8E
00018098                            ; ===========================================================================
00018098                            
00018098                            loc_15E6A:
00018098 5368 0036                  		subq.w	#1,$36(a0)
0001809C 6A00                       		bpl.s	loc_15E8E
0001809E 317C 003C 0036             		move.w	#$3C,$36(a0)
000180A4 117C 0001 0038             		move.b	#1,$38(a0)
000180AA                            
000180AA                            loc_15E7C:
000180AA 5068 003A                  		addq.w	#8,$3A(a0)
000180AE 3028 003A                  		move.w	$3A(a0),d0
000180B2 B068 003C                  		cmp.w	$3C(a0),d0
000180B6 6600                       		bne.s	loc_15E8E
000180B8 4228 0038                  		clr.b	$38(a0)
000180BC                            
000180BC                            loc_15E8E:
000180BC 3028 003A                  		move.w	$3A(a0),d0
000180C0 0828 0000 0022             		btst	#0,$22(a0)
000180C6 6700                       		beq.s	loc_15EA0
000180C8 4440                       		neg.w	d0
000180CA 0640 0038                  		addi.w	#$38,d0
000180CE                            
000180CE                            loc_15EA0:
000180CE 3228 0030                  		move.w	$30(a0),d1
000180D2 D240                       		add.w	d0,d1
000180D4 3141 000C                  		move.w	d1,$C(a0)
000180D8 4E75                       		rts	
000180DA                            ; ===========================================================================
000180DA                            
000180DA                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000180DA 4A28 0038                  		tst.b	$38(a0)
000180DE 6600                       		bne.s	loc_15ED0
000180E0 4A68 003A                  		tst.w	$3A(a0)
000180E4 6700                       		beq.s	loc_15EBE
000180E6 5168 003A                  		subq.w	#8,$3A(a0)
000180EA 6000                       		bra.s	loc_15EF0
000180EC                            ; ===========================================================================
000180EC                            
000180EC                            loc_15EBE:
000180EC 5368 0036                  		subq.w	#1,$36(a0)
000180F0 6A00                       		bpl.s	loc_15EF0
000180F2 317C 003C 0036             		move.w	#$3C,$36(a0)
000180F8 117C 0001 0038             		move.b	#1,$38(a0)
000180FE                            
000180FE                            loc_15ED0:
000180FE 3028 003A                  		move.w	$3A(a0),d0
00018102 B068 003C                  		cmp.w	$3C(a0),d0
00018106 6700                       		beq.s	loc_15EE0
00018108 5068 003A                  		addq.w	#8,$3A(a0)
0001810C 6000                       		bra.s	loc_15EF0
0001810E                            ; ===========================================================================
0001810E                            
0001810E                            loc_15EE0:
0001810E 5368 0036                  		subq.w	#1,$36(a0)
00018112 6A00                       		bpl.s	loc_15EF0
00018114 317C 003C 0036             		move.w	#$3C,$36(a0)
0001811A 4228 0038                  		clr.b	$38(a0)
0001811E                            
0001811E                            loc_15EF0:
0001811E 3028 003A                  		move.w	$3A(a0),d0
00018122 0828 0000 0022             		btst	#0,$22(a0)
00018128 6700                       		beq.s	loc_15F02
0001812A 4440                       		neg.w	d0
0001812C 0640 0038                  		addi.w	#$38,d0
00018130                            
00018130                            loc_15F02:
00018130 3228 0030                  		move.w	$30(a0),d1
00018134 D240                       		add.w	d0,d1
00018136 3141 000C                  		move.w	d1,$C(a0)
0001813A 4E75                       		rts	
0001813C                            ; ===========================================================================
0001813C                            
0001813C                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
0001813C 4A28 0038                  		tst.b	$38(a0)
00018140 6600                       		bne.s	loc_15F3E
00018142 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00018146 7000                       		moveq	#0,d0
00018148 1028 003E                  		move.b	$3E(a0),d0
0001814C 0832 0000 0000             		btst	#0,(a2,d0.w)
00018152 6700                       		beq.s	locret_15F5C
00018154 117C 0001 0038             		move.b	#1,$38(a0)
0001815A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001815E 6700                       		beq.s	loc_15F3E		; if it's zero, don't remember object
00018160 3440                       		movea.w	d0,a2	; load address into a2
00018162 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018166                            
00018166                            loc_15F3E:
00018166 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0001816E 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00018176 3168 0008 0034             		move.w	8(a0),$34(a0)
0001817C 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00018182 6700                       		beq.s	loc_15F5E
00018184                            
00018184                            locret_15F5C:
00018184 4E75                       		rts	
00018186                            ; ===========================================================================
00018186                            
00018186                            loc_15F5E:
00018186 4228 0028                  		clr.b	$28(a0)
0001818A 4228 0038                  		clr.b	$38(a0)
0001818E 4E75                       		rts	
00018190                            ; ===========================================================================
00018190                            ; ---------------------------------------------------------------------------
00018190                            ; Sprite mappings - stomper and	platforms (SBZ)
00018190                            ; ---------------------------------------------------------------------------
00018190                            Map_obj6B:
00018190                            	include "_maps\obj6B.asm"
00018190                            ; ---------------------------------------------------------------------------
00018190                            ; Sprite mappings - stomper and	platforms (SBZ)
00018190                            ; ---------------------------------------------------------------------------
00018190 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00018194 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00018198 0000                       		dc.w byte_15FB0-Map_obj6B
0001819A 04                         byte_15F72:	dc.b 4
0001819B F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000181A0 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000181A5 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000181AA F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000181AF 08                         byte_15F87:	dc.b 8
000181B0 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000181B5 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000181BA E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000181BF E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000181C4 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000181C9 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000181CE 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000181D3 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000181D8 0E                         byte_15FB0:	dc.b $E
000181D9 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000181DE C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000181E3 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000181E8 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000181ED C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000181F2 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000181F7 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000181FC C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00018201 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018206 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001820B E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00018210 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018215 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001821A 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00018220 00                         		even
00018220 00                         		even
00018220                            
00018220                            ; ===========================================================================
00018220                            ; ---------------------------------------------------------------------------
00018220                            ; Object 6C - vanishing	platforms (SBZ)
00018220                            ; ---------------------------------------------------------------------------
00018220                            
00018220                            Obj6C:					; XREF: Obj_Index
00018220 7000                       		moveq	#0,d0
00018222 1028 0024                  		move.b	$24(a0),d0
00018226 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
0001822A 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001822E                            ; ===========================================================================
0001822E 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00018230 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00018232 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00018234 0000                       		dc.w loc_16068-Obj6C_Index
00018236                            ; ===========================================================================
00018236                            
00018236                            Obj6C_Main:				; XREF: Obj6C_Index
00018236 5C28 0024                  		addq.b	#6,$24(a0)
0001823A 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00018242 317C 44C3 0002             		move.w	#$44C3,2(a0)
00018248 0028 0004 0001             		ori.b	#4,1(a0)
0001824E 117C 0010 0019             		move.b	#$10,$19(a0)
00018254 117C 0004 0018             		move.b	#4,$18(a0)
0001825A 7000                       		moveq	#0,d0
0001825C 1028 0028                  		move.b	$28(a0),d0	; get object type
00018260 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018264 5240                       		addq.w	#1,d0		; add 1
00018266 EF48                       		lsl.w	#7,d0		; multiply by $80
00018268 3200                       		move.w	d0,d1
0001826A 5340                       		subq.w	#1,d0
0001826C 3140 0030                  		move.w	d0,$30(a0)
00018270 3140 0032                  		move.w	d0,$32(a0)
00018274 7000                       		moveq	#0,d0
00018276 1028 0028                  		move.b	$28(a0),d0	; get object type
0001827A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
0001827E 0641 0080                  		addi.w	#$80,d1
00018282 C0C1                       		mulu.w	d1,d0
00018284 E088                       		lsr.l	#8,d0
00018286 3140 0036                  		move.w	d0,$36(a0)
0001828A 5341                       		subq.w	#1,d1
0001828C 3141 0038                  		move.w	d1,$38(a0)
00018290                            
00018290                            loc_16068:				; XREF: Obj6C_Index
00018290 3038 FE04                  		move.w	($FFFFFE04).w,d0
00018294 9068 0036                  		sub.w	$36(a0),d0
00018298 C068 0038                  		and.w	$38(a0),d0
0001829C 6600                       		bne.s	Obj6C_Animate
0001829E 5928 0024                  		subq.b	#4,$24(a0)
000182A2 6000                       		bra.s	Obj6C_Vanish
000182A4                            ; ===========================================================================
000182A4                            
000182A4                            Obj6C_Animate:
000182A4 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000182AA 4EB9 0000 BB8E             		jsr	AnimateSprite
000182B0 6000 8EC6                  		bra.w	MarkObjGone
000182B4                            ; ===========================================================================
000182B4                            
000182B4                            Obj6C_Vanish:				; XREF: Obj6C_Index
000182B4 5368 0030                  		subq.w	#1,$30(a0)
000182B8 6A00                       		bpl.s	loc_160AA
000182BA 317C 007F 0030             		move.w	#127,$30(a0)
000182C0 4A28 001C                  		tst.b	$1C(a0)
000182C4 6700                       		beq.s	loc_160A4
000182C6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000182CC                            
000182CC                            loc_160A4:
000182CC 0868 0000 001C             		bchg	#0,$1C(a0)
000182D2                            
000182D2                            loc_160AA:
000182D2 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000182D8 4EB9 0000 BB8E             		jsr	AnimateSprite
000182DE 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000182E4 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000182E6 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000182EC 6600                       		bne.s	loc_160D6
000182EE 7200                       		moveq	#0,d1
000182F0 1228 0019                  		move.b	$19(a0),d1
000182F4 4EB9 0000 856A             		jsr	(PlatformObject).l
000182FA 6000 8E7C                  		bra.w	MarkObjGone
000182FE                            ; ===========================================================================
000182FE                            
000182FE                            loc_160D6:
000182FE 7200                       		moveq	#0,d1
00018300 1228 0019                  		move.b	$19(a0),d1
00018304 4EB9 0000 86DE             		jsr	(ExitPlatform).l
0001830A 3428 0008                  		move.w	8(a0),d2
0001830E 4EB9 0000 8C54             		jsr	(MvSonicOnPtfm2).l
00018314 6000 8E62                  		bra.w	MarkObjGone
00018318                            ; ===========================================================================
00018318                            
00018318                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00018318 0828 0003 0022             		btst	#3,$22(a0)
0001831E 6700                       		beq.s	Obj6C_Display
00018320 43F8 D000                  		lea	($FFFFD000).w,a1
00018324 08A9 0003 0022             		bclr	#3,$22(a1)
0001832A 08A8 0003 0022             		bclr	#3,$22(a0)
00018330 117C 0002 0024             		move.b	#2,$24(a0)
00018336 4228 0025                  		clr.b	$25(a0)
0001833A                            
0001833A                            Obj6C_Display:
0001833A 6000 8E3C                  		bra.w	MarkObjGone
0001833E                            ; ===========================================================================
0001833E                            Ani_obj6C:
0001833E                            	include "_anim\obj6C.asm"
0001833E                            ; ---------------------------------------------------------------------------
0001833E                            ; Animation script - vanishing platforms (SBZ)
0001833E                            ; ---------------------------------------------------------------------------
0001833E 0000                       		dc.w byte_1611A-Ani_obj6C
00018340 0000                       		dc.w byte_16122-Ani_obj6C
00018342 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
0001834A 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00018352                            		even
00018352                            		even
00018352                            
00018352                            ; ---------------------------------------------------------------------------
00018352                            ; Sprite mappings - vanishing platforms	(SBZ)
00018352                            ; ---------------------------------------------------------------------------
00018352                            Map_obj6C:
00018352                            	include "_maps\obj6C.asm"
00018352                            ; ---------------------------------------------------------------------------
00018352                            ; Sprite mappings - vanishing platforms	(SBZ)
00018352                            ; ---------------------------------------------------------------------------
00018352 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00018356 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001835A 01                         byte_16132:	dc.b 1
0001835B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00018360 01                         byte_16138:	dc.b 1
00018361 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00018366 01                         byte_1613E:	dc.b 1
00018367 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001836C 00                         byte_16144:	dc.b 0
0001836E 00                         		even
0001836E 00                         		even
0001836E                            
0001836E                            ; ===========================================================================
0001836E                            ; ---------------------------------------------------------------------------
0001836E                            ; Object 6E - electrocution orbs (SBZ)
0001836E                            ; ---------------------------------------------------------------------------
0001836E                            
0001836E                            Obj6E:					; XREF: Obj_Index
0001836E 7000                       		moveq	#0,d0
00018370 1028 0024                  		move.b	$24(a0),d0
00018374 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00018378 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0001837C                            ; ===========================================================================
0001837C 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
0001837E 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00018380                            ; ===========================================================================
00018380                            
00018380                            Obj6E_Main:				; XREF: Obj6E_Index
00018380 5428 0024                  		addq.b	#2,$24(a0)
00018384 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
0001838C 317C 047E 0002             		move.w	#$47E,2(a0)
00018392 0028 0004 0001             		ori.b	#4,1(a0)
00018398 117C 0028 0019             		move.b	#$28,$19(a0)
0001839E 7000                       		moveq	#0,d0
000183A0 1028 0028                  		move.b	$28(a0),d0	; read object type
000183A4 E948                       		lsl.w	#4,d0		; multiply by $10
000183A6 5340                       		subq.w	#1,d0
000183A8 3140 0034                  		move.w	d0,$34(a0)
000183AC                            
000183AC                            Obj6E_Shock:				; XREF: Obj6E_Index
000183AC 3038 FE04                  		move.w	($FFFFFE04).w,d0
000183B0 C068 0034                  		and.w	$34(a0),d0
000183B4 6600                       		bne.s	Obj6E_Animate
000183B6 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000183BC 4A28 0001                  		tst.b	1(a0)
000183C0 6A00                       		bpl.s	Obj6E_Animate
000183C2 303C 00B1                  		move.w	#$B1,d0
000183C6 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play electricity sound
000183CC                            
000183CC                            Obj6E_Animate:
000183CC 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000183D2 4EB9 0000 BB8E             		jsr	AnimateSprite
000183D8 117C 0000 0020             		move.b	#0,$20(a0)
000183DE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000183E4 6600                       		bne.s	Obj6E_Display	; if not, branch
000183E6 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000183EC                            
000183EC                            Obj6E_Display:
000183EC 6000 8D8A                  		bra.w	MarkObjGone
000183F0                            ; ===========================================================================
000183F0                            Ani_obj6E:
000183F0                            	include "_anim\obj6E.asm"
000183F0                            ; ---------------------------------------------------------------------------
000183F0                            ; Animation script - electrocution orbs (SBZ)
000183F0                            ; ---------------------------------------------------------------------------
000183F0 0000                       		dc.w byte_161CC-Ani_obj6E
000183F2 0000                       		dc.w byte_161D0-Ani_obj6E
000183F4 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000183F8 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00018408                            		even
00018408                            		even
00018408                            
00018408                            ; ---------------------------------------------------------------------------
00018408                            ; Sprite mappings - electrocution orbs (SBZ)
00018408                            ; ---------------------------------------------------------------------------
00018408                            Map_obj6E:
00018408                            	include "_maps\obj6E.asm"
00018408                            ; ---------------------------------------------------------------------------
00018408                            ; Sprite mappings - electrocution orbs (SBZ)
00018408                            ; ---------------------------------------------------------------------------
00018408 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
0001840C 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00018410 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00018414 02                         byte_161EC:	dc.b 2
00018415 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001841A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001841F 03                         byte_161F7:	dc.b 3
00018420 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018425 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001842A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001842F 05                         byte_16207:	dc.b 5
00018430 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018435 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001843A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001843F F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018444 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00018449 04                         byte_16221:	dc.b 4
0001844A F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001844F 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018454 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018459 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001845E 06                         byte_16236:	dc.b 6
0001845F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018464 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018469 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
0001846E F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00018473 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00018478 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
0001847D 04                         byte_16255:	dc.b 4
0001847E F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018483 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018488 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
0001848D F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00018492                            		even
00018492                            		even
00018492                            
00018492                            ; ===========================================================================
00018492                            ; ---------------------------------------------------------------------------
00018492                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00018492                            ; ---------------------------------------------------------------------------
00018492                            
00018492                            Obj6F:					; XREF: Obj_Index
00018492 7000                       		moveq	#0,d0
00018494 1028 0024                  		move.b	$24(a0),d0
00018498 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
0001849C 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000184A0 3028 0030                  		move.w	$30(a0),d0
000184A4 0240 FF80                  		andi.w	#$FF80,d0
000184A8 3238 F700                  		move.w	($FFFFF700).w,d1
000184AC 0441 0080                  		subi.w	#$80,d1
000184B0 0241 FF80                  		andi.w	#$FF80,d1
000184B4 9041                       		sub.w	d1,d0
000184B6 0C40 0280                  		cmpi.w	#$280,d0
000184BA 6300                       		bls.s	Obj6F_Display
000184BC                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
000184BC                            	;	beq.s	loc_1629A		; if it's zero, don't remember object
000184BC                            	;	movea.w	d0,a2	; load address into a2
000184BC                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000184BC 6000                       		bra.s	loc_1629A	; and delete object
000184BE                            
000184BE                            Obj6F_Display:
000184BE 4EF9 0000 EB2E             		jmp	DisplaySprite
000184C4                            ; ===========================================================================
000184C4                            
000184C4                            loc_1629A:
000184C4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000184CA 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000184CC 0C40 FF80                  		cmpi.w	#-$80,d0
000184D0 64EC                       		bcc.s	Obj6F_Display
000184D2                            
000184D2                            Obj6F_Act1or2:
000184D2 1028 002F                  		move.b	$2F(a0),d0
000184D6 6A00                       		bpl.s	Obj6F_Delete
000184D8 0240 007F                  		andi.w	#$7F,d0
000184DC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000184E0 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000184E6                            
000184E6                            Obj6F_Delete:
000184E6 4EF9 0000 EB7E             		jmp	DeleteObject
000184EC                            ; ===========================================================================
000184EC 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000184EE 0000                       		dc.w loc_163D8-Obj6F_Index
000184F0                            ; ===========================================================================
000184F0                            
000184F0                            Obj6F_Main:				; XREF: Obj6F_Index
000184F0 1028 0028                  		move.b	$28(a0),d0
000184F4 6B00 0000                  		bmi.w	loc_16380
000184F8 5428 0024                  		addq.b	#2,$24(a0)
000184FC 217C 0001 7B8A 0004        		move.l	#Map_obj69a,4(a0)
00018504 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001850A 117C 0010 0019             		move.b	#$10,$19(a0)
00018510 0028 0004 0001             		ori.b	#4,1(a0)
00018516 117C 0004 0018             		move.b	#4,$18(a0)
0001851C 7000                       		moveq	#0,d0
0001851E 1028 0028                  		move.b	$28(a0),d0
00018522 3200                       		move.w	d0,d1
00018524 E648                       		lsr.w	#3,d0
00018526 0240 001E                  		andi.w	#$1E,d0
0001852A 45FA 0000                  		lea	off_164A6(pc),a2
0001852E D4F2 0000                  		adda.w	(a2,d0.w),a2
00018532 315A 0038                  		move.w	(a2)+,$38(a0)
00018536 315A 0030                  		move.w	(a2)+,$30(a0)
0001853A 214A 003C                  		move.l	a2,$3C(a0)
0001853E 0241 000F                  		andi.w	#$F,d1
00018542 E549                       		lsl.w	#2,d1
00018544 1141 0038                  		move.b	d1,$38(a0)
00018548 117C 0004 003A             		move.b	#4,$3A(a0)
0001854E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00018552 6700                       		beq.s	loc_16356
00018554 117C 0001 003B             		move.b	#1,$3B(a0)
0001855A 4428 003A                  		neg.b	$3A(a0)
0001855E 7200                       		moveq	#0,d1
00018560 1228 0038                  		move.b	$38(a0),d1
00018564 D228 003A                  		add.b	$3A(a0),d1
00018568 B228 0039                  		cmp.b	$39(a0),d1
0001856C 6500                       		bcs.s	loc_16352
0001856E 1001                       		move.b	d1,d0
00018570 7200                       		moveq	#0,d1
00018572 4A00                       		tst.b	d0
00018574 6A00                       		bpl.s	loc_16352
00018576 1228 0039                  		move.b	$39(a0),d1
0001857A 5901                       		subq.b	#4,d1
0001857C                            
0001857C                            loc_16352:
0001857C 1141 0038                  		move.b	d1,$38(a0)
00018580                            
00018580                            loc_16356:
00018580 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00018586 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001858C 4A41                       		tst.w	d1
0001858E 6600                       		bne.s	loc_1636C
00018590 117C 0001 001C             		move.b	#1,$1C(a0)
00018596                            
00018596                            loc_1636C:
00018596 0C41 0008                  		cmpi.w	#8,d1
0001859A 6600                       		bne.s	loc_16378
0001859C 117C 0000 001C             		move.b	#0,$1C(a0)
000185A2                            
000185A2                            loc_16378:
000185A2 6100 BB16                  		bsr.w	Obj63_ChangeDir
000185A6 6000 0000                  		bra.w	loc_163D8
000185AA                            ; ===========================================================================
000185AA                            
000185AA                            loc_16380:				; XREF: Obj6F_Main
000185AA 1140 002F                  		move.b	d0,$2F(a0)
000185AE 0240 007F                  		andi.w	#$7F,d0
000185B2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000185B6 08F2 0000 0000             		bset	#0,(a2,d0.w)
000185BC 6700                       		beq.s	loc_1639A
000185BE 4EF9 0000 EB7E             		jmp	DeleteObject
000185C4                            ; ===========================================================================
000185C4                            
000185C4                            loc_1639A:
000185C4 D040                       		add.w	d0,d0
000185C6 0240 001E                  		andi.w	#$1E,d0
000185CA 0640 0080                  		addi.w	#$80,d0
000185CE 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000185D4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000185D8 321A                       		move.w	(a2)+,d1
000185DA 2248                       		movea.l	a0,a1
000185DC 6000                       		bra.s	Obj6F_LoadPform
000185DE                            ; ===========================================================================
000185DE                            
000185DE                            Obj6F_Loop:
000185DE 4EB9 0000 F284             		jsr	SingleObjLoad
000185E4 6600                       		bne.s	loc_163D0
000185E6                            
000185E6                            Obj6F_LoadPform:			; XREF: loc_1639A
000185E6 12BC 006F                  		move.b	#$6F,0(a1)
000185EA 335A 0008                  		move.w	(a2)+,8(a1)
000185EE 335A 000C                  		move.w	(a2)+,$C(a1)
000185F2 301A                       		move.w	(a2)+,d0
000185F4 1340 0028                  		move.b	d0,$28(a1)
000185F8                            
000185F8                            loc_163D0:
000185F8 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000185FC                            
000185FC 588F                       		addq.l	#4,sp
000185FE 4E75                       		rts	
00018600                            ; ===========================================================================
00018600                            
00018600                            loc_163D8:				; XREF: Obj6F_Index
00018600 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00018606 4EB9 0000 BB8E             		jsr	AnimateSprite
0001860C 4A28 001A                  		tst.b	$1A(a0)
00018610 6600                       		bne.s	loc_16404
00018612 3F28 0008                  		move.w	8(a0),-(sp)
00018616 6100 0000                  		bsr.w	loc_16424
0001861A 323C 001B                  		move.w	#$1B,d1
0001861E 343C 0007                  		move.w	#7,d2
00018622 3602                       		move.w	d2,d3
00018624 5243                       		addq.w	#1,d3
00018626 381F                       		move.w	(sp)+,d4
00018628 6000 8E72                  		bra.w	SolidObject
0001862C                            ; ===========================================================================
0001862C                            
0001862C                            loc_16404:
0001862C 0828 0003 0022             		btst	#3,$22(a0)
00018632 6700                       		beq.s	loc_16420
00018634 43F8 D000                  		lea	($FFFFD000).w,a1
00018638 08A9 0003 0022             		bclr	#3,$22(a1)
0001863E 08A8 0003 0022             		bclr	#3,$22(a0)
00018644 4228 0025                  		clr.b	$25(a0)
00018648                            
00018648                            loc_16420:
00018648 6000 0002                  		bra.w	*+4
0001864C                            
0001864C                            loc_16424:
0001864C 3028 0008                  		move.w	8(a0),d0
00018650 B068 0034                  		cmp.w	$34(a0),d0
00018654 6600                       		bne.s	loc_16484
00018656 3028 000C                  		move.w	$C(a0),d0
0001865A B068 0036                  		cmp.w	$36(a0),d0
0001865E 6600                       		bne.s	loc_16484
00018660 7200                       		moveq	#0,d1
00018662 1228 0038                  		move.b	$38(a0),d1
00018666 D228 003A                  		add.b	$3A(a0),d1
0001866A B228 0039                  		cmp.b	$39(a0),d1
0001866E 6500                       		bcs.s	loc_16456
00018670 1001                       		move.b	d1,d0
00018672 7200                       		moveq	#0,d1
00018674 4A00                       		tst.b	d0
00018676 6A00                       		bpl.s	loc_16456
00018678 1228 0039                  		move.b	$39(a0),d1
0001867C 5901                       		subq.b	#4,d1
0001867E                            
0001867E                            loc_16456:
0001867E 1141 0038                  		move.b	d1,$38(a0)
00018682 2268 003C                  		movea.l	$3C(a0),a1
00018686 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001868C 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00018692 4A41                       		tst.w	d1
00018694 6600                       		bne.s	loc_16474
00018696 117C 0001 001C             		move.b	#1,$1C(a0)
0001869C                            
0001869C                            loc_16474:
0001869C 0C41 0008                  		cmpi.w	#8,d1
000186A0 6600                       		bne.s	loc_16480
000186A2 117C 0000 001C             		move.b	#0,$1C(a0)
000186A8                            
000186A8                            loc_16480:
000186A8 6100 BA10                  		bsr.w	Obj63_ChangeDir
000186AC                            
000186AC                            loc_16484:
000186AC 4EF9 0000 EB14             		jmp	SpeedToPos
000186B2                            ; ===========================================================================
000186B2                            Ani_obj6F:
000186B2                            	include "_anim\obj6F.asm"
000186B2                            ; ---------------------------------------------------------------------------
000186B2                            ; Animation script - platform on conveyor belt (SBZ)
000186B2                            ; ---------------------------------------------------------------------------
000186B2 0000                       		dc.w byte_1648E-Ani_obj6F
000186B4 0000                       		dc.w byte_164A2-Ani_obj6F
000186B6 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000186C3 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000186CA 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000186CE 00                         		even
000186CE 00                         		even
000186CE                            
000186CE 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000186D4 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000186DA 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000186EE 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00018702 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00018716 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001872A 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001873E 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00018752                            ; ===========================================================================
00018752                            ; ---------------------------------------------------------------------------
00018752                            ; Object 70 - large girder block (SBZ)
00018752                            ; ---------------------------------------------------------------------------
00018752                            
00018752                            Obj70:					; XREF: Obj_Index
00018752 7000                       		moveq	#0,d0
00018754 1028 0024                  		move.b	$24(a0),d0
00018758 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001875C 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00018760                            ; ===========================================================================
00018760 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00018762 0000                       		dc.w Obj70_Action-Obj70_Index
00018764                            ; ===========================================================================
00018764                            
00018764                            Obj70_Main:				; XREF: Obj70_Index
00018764 5428 0024                  		addq.b	#2,$24(a0)
00018768 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00018770 317C 42F0 0002             		move.w	#$42F0,2(a0)
00018776 0028 0004 0001             		ori.b	#4,1(a0)
0001877C 117C 0004 0018             		move.b	#4,$18(a0)
00018782 117C 0060 0019             		move.b	#$60,$19(a0)
00018788 117C 0018 0016             		move.b	#$18,$16(a0)
0001878E 3168 0008 0032             		move.w	8(a0),$32(a0)
00018794 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001879A 6100 0000                  		bsr.w	Obj70_Move2
0001879E                            
0001879E                            Obj70_Action:				; XREF: Obj70_Index
0001879E 3F28 0008                  		move.w	8(a0),-(sp)
000187A2 4A68 003A                  		tst.w	$3A(a0)
000187A6 6700                       		beq.s	Obj70_Move
000187A8 5368 003A                  		subq.w	#1,$3A(a0)
000187AC 6600                       		bne.s	Obj70_Solid
000187AE                            
000187AE                            Obj70_Move:
000187AE 4EB9 0000 EB14             		jsr	SpeedToPos
000187B4 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000187B8 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000187BA 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000187BE                            
000187BE                            Obj70_Solid:
000187BE 381F                       		move.w	(sp)+,d4
000187C0 4A28 0001                  		tst.b	1(a0)
000187C4 6A00                       		bpl.s	Obj70_ChkDel
000187C6 7200                       		moveq	#0,d1
000187C8 1228 0019                  		move.b	$19(a0),d1
000187CC 0641 000B                  		addi.w	#$B,d1
000187D0 7400                       		moveq	#0,d2
000187D2 1428 0016                  		move.b	$16(a0),d2
000187D6 3602                       		move.w	d2,d3
000187D8 5243                       		addq.w	#1,d3
000187DA 6100 8CC0                  		bsr.w	SolidObject
000187DE                            
000187DE                            Obj70_ChkDel:
000187DE 3028 0032                  		move.w	$32(a0),d0
000187E2 0240 FF80                  		andi.w	#$FF80,d0
000187E6 3238 F700                  		move.w	($FFFFF700).w,d1
000187EA 0441 0080                  		subi.w	#$80,d1
000187EE 0241 FF80                  		andi.w	#$FF80,d1
000187F2 9041                       		sub.w	d1,d0
000187F4 0C40 0280                  		cmpi.w	#$280,d0
000187F8 6300                       		bls.s	Obj70_NoDel
000187FA                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
000187FA                            	;	beq.s	Obj70_Delete		; if it's zero, don't remember object
000187FA                            	;	movea.w	d0,a2	; load address into a2
000187FA                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000187FA 6000                       		bra.s	Obj70_Delete	; and delete object
000187FC                            
000187FC                            Obj70_NoDel:
000187FC 4EF9 0000 EB2E             		jmp	DisplaySprite
00018802                            ; ===========================================================================
00018802                            
00018802                            Obj70_Delete:
00018802 4EF9 0000 EB7E             		jmp	DeleteObject
00018808                            ; ===========================================================================
00018808                            
00018808                            Obj70_Move2:				; XREF: Obj70_Main
00018808 1028 0038                  		move.b	$38(a0),d0
0001880C 0240 0018                  		andi.w	#$18,d0
00018810 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00018816 43F1 0000                  		lea	(a1,d0.w),a1
0001881A 3159 0010                  		move.w	(a1)+,$10(a0)
0001881E 3159 0012                  		move.w	(a1)+,$12(a0)
00018822 3159 0034                  		move.w	(a1)+,$34(a0)
00018826 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
0001882A 317C 0007 003A             		move.w	#7,$3A(a0)
00018830 4E75                       		rts	
00018832                            ; ===========================================================================
00018832 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001883A 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00018842 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001884A 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00018852                            ; ---------------------------------------------------------------------------
00018852                            ; Sprite mappings - large girder block (SBZ)
00018852                            ; ---------------------------------------------------------------------------
00018852                            Map_obj70:
00018852                            	include "_maps\obj70.asm"
00018852                            ; ---------------------------------------------------------------------------
00018852                            ; Sprite mappings - large girder block (SBZ)
00018852                            ; ---------------------------------------------------------------------------
00018852 0000                       		dc.w byte_1662A-Map_obj70
00018854 0C                         byte_1662A:	dc.b $C
00018855 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001885A 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001885F E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00018864 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00018869 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001886E 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00018873 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00018878 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001887D E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00018882 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00018887 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001888C 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00018892 00                         		even
00018892 00                         		even
00018892                            
00018892                            ; ===========================================================================
00018892                            ; ---------------------------------------------------------------------------
00018892                            ; Object 72 - teleporter (SBZ)
00018892                            ; ---------------------------------------------------------------------------
00018892                            
00018892                            Obj72:					; XREF: Obj_Index
00018892 7000                       		moveq	#0,d0
00018894 1028 0024                  		move.b	$24(a0),d0
00018898 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001889C 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000188A0 3028 0008                  		move.w	8(a0),d0
000188A4 0240 FF80                  		andi.w	#$FF80,d0
000188A8 3238 F700                  		move.w	($FFFFF700).w,d1
000188AC 0441 0080                  		subi.w	#$80,d1
000188B0 0241 FF80                  		andi.w	#$FF80,d1
000188B4 9041                       		sub.w	d1,d0
000188B6 0C40 0280                  		cmpi.w	#$280,d0
000188BA 6300                       		bls.s	Obj72_NoDel
000188BC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000188C0 6700                       		beq.s	Obj72_Delete	; if it's zero, don't remember object
000188C2 3440                       		movea.w	d0,a2	; load address into a2
000188C4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000188C8 6000                       		bra.s	Obj72_Delete	; and delete object
000188CA                            
000188CA                            Obj72_NoDel:
000188CA 4E75                       		rts	
000188CC                            ; ===========================================================================
000188CC                            
000188CC                            Obj72_Delete:
000188CC 4EF9 0000 EB7E             		jmp	DeleteObject
000188D2                            ; ===========================================================================
000188D2 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000188D4 0000                       		dc.w loc_166C8-Obj72_Index
000188D6 0000                       		dc.w loc_1675E-Obj72_Index
000188D8 0000                       		dc.w loc_16798-Obj72_Index
000188DA                            ; ===========================================================================
000188DA                            
000188DA                            Obj72_Main:				; XREF: Obj72_Index
000188DA 5428 0024                  		addq.b	#2,$24(a0)
000188DE 1028 0028                  		move.b	$28(a0),d0
000188E2 D040                       		add.w	d0,d0
000188E4 0240 001E                  		andi.w	#$1E,d0
000188E8 45FA 0000                  		lea	Obj72_Data(pc),a2
000188EC D4F2 0000                  		adda.w	(a2,d0.w),a2
000188F0 315A 003A                  		move.w	(a2)+,$3A(a0)
000188F4 214A 003C                  		move.l	a2,$3C(a0)
000188F8 315A 0036                  		move.w	(a2)+,$36(a0)
000188FC 315A 0038                  		move.w	(a2)+,$38(a0)
00018900                            
00018900                            loc_166C8:				; XREF: Obj72_Index
00018900 43F8 D000                  		lea	($FFFFD000).w,a1
00018904 3029 0008                  		move.w	8(a1),d0
00018908 9068 0008                  		sub.w	8(a0),d0
0001890C 0828 0000 0022             		btst	#0,$22(a0)
00018912 6700                       		beq.s	loc_166E0
00018914 0640 000F                  		addi.w	#$F,d0
00018918                            
00018918                            loc_166E0:
00018918 0C40 0010                  		cmpi.w	#$10,d0
0001891C 6400                       		bcc.s	locret_1675C
0001891E 3229 000C                  		move.w	$C(a1),d1
00018922 9268 000C                  		sub.w	$C(a0),d1
00018926 0641 0020                  		addi.w	#$20,d1
0001892A 0C41 0040                  		cmpi.w	#$40,d1
0001892E 6400                       		bcc.s	locret_1675C
00018930 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018934 6600                       		bne.s	locret_1675C
00018936 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001893C 6600                       		bne.s	loc_1670E
0001893E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00018944 6500                       		bcs.s	locret_1675C
00018946                            
00018946                            loc_1670E:
00018946 5428 0024                  		addq.b	#2,$24(a0)
0001894A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00018950 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00018956 337C 0800 0020             		move.w	#$800,$20(a1)
0001895C 337C 0000 0010             		move.w	#0,$10(a1)
00018962 337C 0000 0012             		move.w	#0,$12(a1)
00018968 08A8 0005 0022             		bclr	#5,$22(a0)
0001896E 08A9 0005 0022             		bclr	#5,$22(a1)
00018974 08E9 0001 0022             		bset	#1,$22(a1)
0001897A 3368 0008 0008             		move.w	8(a0),8(a1)
00018980 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018986 4228 0032                  		clr.b	$32(a0)
0001898A 303C 00BE                  		move.w	#$BE,d0
0001898E 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00018994                            
00018994                            locret_1675C:
00018994 4E75                       		rts	
00018996                            ; ===========================================================================
00018996                            
00018996                            loc_1675E:				; XREF: Obj72_Index
00018996 43F8 D000                  		lea	($FFFFD000).w,a1
0001899A 1028 0032                  		move.b	$32(a0),d0
0001899E 5428 0032                  		addq.b	#2,$32(a0)
000189A2 4EB9 0000 29F6             		jsr	(CalcSine).l
000189A8 EA40                       		asr.w	#5,d0
000189AA 3428 000C                  		move.w	$C(a0),d2
000189AE 9440                       		sub.w	d0,d2
000189B0 3342 000C                  		move.w	d2,$C(a1)
000189B4 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000189BA 6600                       		bne.s	locret_16796
000189BC 6100 0000                  		bsr.w	sub_1681C
000189C0 5428 0024                  		addq.b	#2,$24(a0)
000189C4 303C 00BC                  		move.w	#$BC,d0
000189C8 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play teleport sound
000189CE                            
000189CE                            locret_16796:
000189CE 4E75                       		rts	
000189D0                            ; ===========================================================================
000189D0                            
000189D0                            loc_16798:				; XREF: Obj72_Index
000189D0 588F                       		addq.l	#4,sp
000189D2 43F8 D000                  		lea	($FFFFD000).w,a1
000189D6 5328 002E                  		subq.b	#1,$2E(a0)
000189DA 6A00                       		bpl.s	loc_167DA
000189DC 3368 0036 0008             		move.w	$36(a0),8(a1)
000189E2 3368 0038 000C             		move.w	$38(a0),$C(a1)
000189E8 7200                       		moveq	#0,d1
000189EA 1228 003A                  		move.b	$3A(a0),d1
000189EE 5801                       		addq.b	#4,d1
000189F0 B228 003B                  		cmp.b	$3B(a0),d1
000189F4 6500                       		bcs.s	loc_167C2
000189F6 7200                       		moveq	#0,d1
000189F8 6000                       		bra.s	loc_16800
000189FA                            ; ===========================================================================
000189FA                            
000189FA                            loc_167C2:
000189FA 1141 003A                  		move.b	d1,$3A(a0)
000189FE 2468 003C                  		movea.l	$3C(a0),a2
00018A02 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00018A08 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00018A0E 6000 0000                  		bra.w	sub_1681C
00018A12                            ; ===========================================================================
00018A12                            
00018A12                            loc_167DA:
00018A12 2429 0008                  		move.l	8(a1),d2
00018A16 2629 000C                  		move.l	$C(a1),d3
00018A1A 3029 0010                  		move.w	$10(a1),d0
00018A1E 48C0                       		ext.l	d0
00018A20 E180                       		asl.l	#8,d0
00018A22 D480                       		add.l	d0,d2
00018A24 3029 0012                  		move.w	$12(a1),d0
00018A28 48C0                       		ext.l	d0
00018A2A E180                       		asl.l	#8,d0
00018A2C D680                       		add.l	d0,d3
00018A2E 2342 0008                  		move.l	d2,8(a1)
00018A32 2343 000C                  		move.l	d3,$C(a1)
00018A36 4E75                       		rts	
00018A38                            ; ===========================================================================
00018A38                            
00018A38                            loc_16800:
00018A38 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00018A3E 4228 0024                  		clr.b	$24(a0)
00018A42 4238 F7C8                  		clr.b	($FFFFF7C8).w
00018A46 337C 0000 0010             		move.w	#0,$10(a1)
00018A4C 337C 0200 0012             		move.w	#$200,$12(a1)
00018A52 4E75                       		rts	
00018A54                            
00018A54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A54                            
00018A54                            
00018A54                            sub_1681C:
00018A54 7000                       		moveq	#0,d0
00018A56 343C 1000                  		move.w	#$1000,d2
00018A5A 3028 0036                  		move.w	$36(a0),d0
00018A5E 9069 0008                  		sub.w	8(a1),d0
00018A62 6C00                       		bge.s	loc_16830
00018A64 4440                       		neg.w	d0
00018A66 4442                       		neg.w	d2
00018A68                            
00018A68                            loc_16830:
00018A68 7200                       		moveq	#0,d1
00018A6A 363C 1000                  		move.w	#$1000,d3
00018A6E 3228 0038                  		move.w	$38(a0),d1
00018A72 9269 000C                  		sub.w	$C(a1),d1
00018A76 6C00                       		bge.s	loc_16844
00018A78 4441                       		neg.w	d1
00018A7A 4443                       		neg.w	d3
00018A7C                            
00018A7C                            loc_16844:
00018A7C B240                       		cmp.w	d0,d1
00018A7E 6500                       		bcs.s	loc_1687A
00018A80 7200                       		moveq	#0,d1
00018A82 3228 0038                  		move.w	$38(a0),d1
00018A86 9269 000C                  		sub.w	$C(a1),d1
00018A8A 4841                       		swap	d1
00018A8C 83C3                       		divs.w	d3,d1
00018A8E 7000                       		moveq	#0,d0
00018A90 3028 0036                  		move.w	$36(a0),d0
00018A94 9069 0008                  		sub.w	8(a1),d0
00018A98 6700                       		beq.s	loc_16866
00018A9A 4840                       		swap	d0
00018A9C 81C1                       		divs.w	d1,d0
00018A9E                            
00018A9E                            loc_16866:
00018A9E 3340 0010                  		move.w	d0,$10(a1)
00018AA2 3343 0012                  		move.w	d3,$12(a1)
00018AA6 4A41                       		tst.w	d1
00018AA8 6A00                       		bpl.s	loc_16874
00018AAA 4441                       		neg.w	d1
00018AAC                            
00018AAC                            loc_16874:
00018AAC 3141 002E                  		move.w	d1,$2E(a0)
00018AB0 4E75                       		rts	
00018AB2                            ; ===========================================================================
00018AB2                            
00018AB2                            loc_1687A:
00018AB2 7000                       		moveq	#0,d0
00018AB4 3028 0036                  		move.w	$36(a0),d0
00018AB8 9069 0008                  		sub.w	8(a1),d0
00018ABC 4840                       		swap	d0
00018ABE 81C2                       		divs.w	d2,d0
00018AC0 7200                       		moveq	#0,d1
00018AC2 3228 0038                  		move.w	$38(a0),d1
00018AC6 9269 000C                  		sub.w	$C(a1),d1
00018ACA 6700                       		beq.s	loc_16898
00018ACC 4841                       		swap	d1
00018ACE 83C0                       		divs.w	d0,d1
00018AD0                            
00018AD0                            loc_16898:
00018AD0 3341 0012                  		move.w	d1,$12(a1)
00018AD4 3342 0010                  		move.w	d2,$10(a1)
00018AD8 4A40                       		tst.w	d0
00018ADA 6A00                       		bpl.s	loc_168A6
00018ADC 4440                       		neg.w	d0
00018ADE                            
00018ADE                            loc_168A6:
00018ADE 3140 002E                  		move.w	d0,$2E(a0)
00018AE2 4E75                       		rts	
00018AE4                            ; End of function sub_1681C
00018AE4                            
00018AE4                            ; ===========================================================================
00018AE4 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00018AEA 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00018AF0 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00018AF4 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00018AFA 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00018B00 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00018B06 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00018B0C 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00018B12 0884 0298 0894             		dc.w $884, $298, $894
00018B18 0270 0894 0190             		dc.w $270, $894, $190
00018B1E 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00018B24 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00018B2A 1184 0498 1158             		dc.w $1184, $498, $1158
00018B30 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00018B36 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00018B3C 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00018B42 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00018B48 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00018B4E 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00018B54 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00018B5A 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00018B60 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00018B66 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00018B6C                            ; ===========================================================================
00018B6C                            ; ---------------------------------------------------------------------------
00018B6C                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00018B6C                            ; ---------------------------------------------------------------------------
00018B6C                            
00018B6C                            Obj78:					; XREF: Obj_Index
00018B6C 7000                       		moveq	#0,d0
00018B6E 1028 0024                  		move.b	$24(a0),d0
00018B72 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00018B76 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00018B7A                            ; ===========================================================================
00018B7A 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00018B7C 0000                       		dc.w Obj78_Action-Obj78_Index
00018B7E 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018B80 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00018B82 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018B84 0000                       		dc.w Obj78_Delete-Obj78_Index
00018B86 0000                       		dc.w loc_16CC0-Obj78_Index
00018B88                            ; ===========================================================================
00018B88                            
00018B88                            locret_16950:
00018B88 4E75                       		rts	
00018B8A                            ; ===========================================================================
00018B8A                            
00018B8A                            Obj78_Main:				; XREF: Obj78_Index
00018B8A 117C 0007 0016             		move.b	#7,$16(a0)
00018B90 117C 0008 0017             		move.b	#8,$17(a0)
00018B96 4EB9 0000 EAF4             		jsr	ObjectFall
00018B9C 4EBA E4BC                  		jsr	ObjHitFloor
00018BA0 4A41                       		tst.w	d1
00018BA2 6AE4                       		bpl.s	locret_16950
00018BA4 D368 000C                  		add.w	d1,$C(a0)
00018BA8 4268 0012                  		clr.w	$12(a0)
00018BAC 5428 0024                  		addq.b	#2,$24(a0)
00018BB0 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00018BB8 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018BBE 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00018BC4 6700                       		beq.s	loc_16996
00018BC6 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00018BCC                            
00018BCC                            loc_16996:
00018BCC 0228 0003 0001             		andi.b	#3,1(a0)
00018BD2 0028 0004 0001             		ori.b	#4,1(a0)
00018BD8 1168 0001 0022             		move.b	1(a0),$22(a0)
00018BDE 117C 0004 0018             		move.b	#4,$18(a0)
00018BE4 117C 0008 0019             		move.b	#8,$19(a0)
00018BEA 117C 000B 0020             		move.b	#$B,$20(a0)
00018BF0 3428 0008                  		move.w	8(a0),d2
00018BF4 7A0C                       		moveq	#$C,d5
00018BF6 0828 0000 0022             		btst	#0,$22(a0)
00018BFC 6700                       		beq.s	loc_169CA
00018BFE 4445                       		neg.w	d5
00018C00                            
00018C00                            loc_169CA:
00018C00 1C3C 0004                  		move.b	#4,d6
00018C04 7600                       		moveq	#0,d3
00018C06 7804                       		moveq	#4,d4
00018C08 2448                       		movea.l	a0,a2
00018C0A 7202                       		moveq	#2,d1
00018C0C                            
00018C0C                            Obj78_LoadBody:
00018C0C 4EB9 0000 F29A             		jsr	SingleObjLoad2
00018C12 6600                       		bne.s	Obj78_QuitLoad
00018C14 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00018C18 1346 0024                  		move.b	d6,$24(a1)
00018C1C 5406                       		addq.b	#2,d6
00018C1E 2368 0004 0004             		move.l	4(a0),4(a1)
00018C24 3368 0002 0002             		move.w	2(a0),2(a1)
00018C2A 137C 0005 0018             		move.b	#5,$18(a1)
00018C30 137C 0008 0019             		move.b	#8,$19(a1)
00018C36 137C 00CB 0020             		move.b	#$CB,$20(a1)
00018C3C D445                       		add.w	d5,d2
00018C3E 3342 0008                  		move.w	d2,8(a1)
00018C42 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018C48 1368 0022 0022             		move.b	$22(a0),$22(a1)
00018C4E 1368 0022 0001             		move.b	$22(a0),1(a1)
00018C54 137C 0008 001A             		move.b	#8,$1A(a1)
00018C5A 234A 003C                  		move.l	a2,$3C(a1)
00018C5E 1344 003C                  		move.b	d4,$3C(a1)
00018C62 5804                       		addq.b	#4,d4
00018C64 2449                       		movea.l	a1,a2
00018C66                            
00018C66                            Obj78_QuitLoad:
00018C66 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018C6A                            
00018C6A 117C 0007 002A             		move.b	#7,$2A(a0)
00018C70 4228 003C                  		clr.b	$3C(a0)
00018C74                            
00018C74                            Obj78_Action:				; XREF: Obj78_Index
00018C74 4A28 0022                  		tst.b	$22(a0)
00018C78 6B00 0000                  		bmi.w	loc_16C96
00018C7C 7000                       		moveq	#0,d0
00018C7E 1028 0025                  		move.b	$25(a0),d0
00018C82 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00018C86 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018C8A 1228 002B                  		move.b	$2B(a0),d1
00018C8E 6A00                       		bpl.s	Obj78_Display
00018C90 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018C96 1028 0026                  		move.b	$26(a0),d0
00018C9A 0240 007F                  		andi.w	#$7F,d0
00018C9E 5828 0026                  		addq.b	#4,$26(a0)
00018CA2 1031 0000                  		move.b	(a1,d0.w),d0
00018CA6 6A00                       		bpl.s	Obj78_AniHead
00018CA8 08A8 0007 002B             		bclr	#7,$2B(a0)
00018CAE 6000                       		bra.s	Obj78_Display
00018CB0                            ; ===========================================================================
00018CB0                            
00018CB0                            Obj78_AniHead:
00018CB0 0201 0010                  		andi.b	#$10,d1
00018CB4 D001                       		add.b	d1,d0
00018CB6 1140 001A                  		move.b	d0,$1A(a0)
00018CBA                            
00018CBA                            Obj78_Display:
00018CBA 3028 0008                  		move.w	8(a0),d0
00018CBE 0240 FF80                  		andi.w	#$FF80,d0
00018CC2 3238 F700                  		move.w	($FFFFF700).w,d1
00018CC6 0441 0080                  		subi.w	#$80,d1
00018CCA 0241 FF80                  		andi.w	#$FF80,d1
00018CCE 9041                       		sub.w	d1,d0
00018CD0 0C40 0280                  		cmpi.w	#$280,d0
00018CD4 6200 0000                  		bhi.w	Obj78_ChkGone
00018CD8 4EF9 0000 EB2E             		jmp	DisplaySprite
00018CDE                            ; ===========================================================================
00018CDE                            
00018CDE                            Obj78_ChkGone:
00018CDE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018CE2 6700                       		beq.s	loc_16ABC		; if it's zero, don't remember object
00018CE4 3440                       		movea.w	d0,a2	; load address into a2
00018CE6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018CEA                            
00018CEA                            loc_16ABC:
00018CEA 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018CF0 4E75                       		rts	
00018CF2                            ; ===========================================================================
00018CF2                            
00018CF2                            Obj78_Delete:				; XREF: Obj78_Index
00018CF2 4EF9 0000 EB7E             		jmp	DeleteObject
00018CF8                            ; ===========================================================================
00018CF8 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018CFA 0000                       		dc.w loc_16B02-Obj78_Index2
00018CFC                            ; ===========================================================================
00018CFC                            
00018CFC                            Obj78_Move:				; XREF: Obj78_Index2
00018CFC 5328 002A                  		subq.b	#1,$2A(a0)
00018D00 6B00                       		bmi.s	Obj78_Move2
00018D02 4E75                       		rts	
00018D04                            ; ===========================================================================
00018D04                            
00018D04                            Obj78_Move2:
00018D04 5428 0025                  		addq.b	#2,$25(a0)
00018D08 117C 0010 002A             		move.b	#$10,$2A(a0)
00018D0E 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018D14 317C 0040 001C             		move.w	#$40,$1C(a0)
00018D1A 0868 0004 002B             		bchg	#4,$2B(a0)
00018D20 6600                       		bne.s	loc_16AFC
00018D22 4268 0010                  		clr.w	$10(a0)
00018D26 4468 001C                  		neg.w	$1C(a0)
00018D2A                            
00018D2A                            loc_16AFC:
00018D2A 08E8 0007 002B             		bset	#7,$2B(a0)
00018D30                            
00018D30                            loc_16B02:				; XREF: Obj78_Index2
00018D30 5328 002A                  		subq.b	#1,$2A(a0)
00018D34 6B00                       		bmi.s	loc_16B5E
00018D36 2F28 0008                  		move.l	8(a0),-(sp)
00018D3A 2428 0008                  		move.l	8(a0),d2
00018D3E 3028 0010                  		move.w	$10(a0),d0
00018D42 0828 0000 0022             		btst	#0,$22(a0)
00018D48 6700                       		beq.s	loc_16B1E
00018D4A 4440                       		neg.w	d0
00018D4C                            
00018D4C                            loc_16B1E:
00018D4C 48C0                       		ext.l	d0
00018D4E E180                       		asl.l	#8,d0
00018D50 D480                       		add.l	d0,d2
00018D52 2142 0008                  		move.l	d2,8(a0)
00018D56 4EBA E302                  		jsr	ObjHitFloor
00018D5A 241F                       		move.l	(sp)+,d2
00018D5C 0C41 FFF8                  		cmpi.w	#-8,d1
00018D60 6D00                       		blt.s	loc_16B70
00018D62 0C41 000C                  		cmpi.w	#$C,d1
00018D66 6C00                       		bge.s	loc_16B70
00018D68 D368 000C                  		add.w	d1,$C(a0)
00018D6C 4842                       		swap	d2
00018D6E B468 0008                  		cmp.w	8(a0),d2
00018D72 6700                       		beq.s	locret_16B5C
00018D74 7000                       		moveq	#0,d0
00018D76 1028 003C                  		move.b	$3C(a0),d0
00018D7A 5228 003C                  		addq.b	#1,$3C(a0)
00018D7E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018D84 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018D88                            
00018D88                            locret_16B5C:
00018D88 4E75                       		rts	
00018D8A                            ; ===========================================================================
00018D8A                            
00018D8A                            loc_16B5E:
00018D8A 5528 0025                  		subq.b	#2,$25(a0)
00018D8E 117C 0007 002A             		move.b	#7,$2A(a0)
00018D94 317C 0000 0010             		move.w	#0,$10(a0)
00018D9A 4E75                       		rts	
00018D9C                            ; ===========================================================================
00018D9C                            
00018D9C                            loc_16B70:
00018D9C 2142 0008                  		move.l	d2,8(a0)
00018DA0 0868 0000 0022             		bchg	#0,$22(a0)
00018DA6 1168 0022 0001             		move.b	$22(a0),1(a0)
00018DAC 7000                       		moveq	#0,d0
00018DAE 1028 003C                  		move.b	$3C(a0),d0
00018DB2 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018DB8 5228 003C                  		addq.b	#1,$3C(a0)
00018DBC 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018DC2 4E75                       		rts	
00018DC4                            ; ===========================================================================
00018DC4                            
00018DC4                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018DC4 2268 003C                  		movea.l	$3C(a0),a1
00018DC8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018DCE 6A00                       		bpl.s	Obj78_BodySeg1
00018DD0 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018DD6 1028 0026                  		move.b	$26(a0),d0
00018DDA 0240 007F                  		andi.w	#$7F,d0
00018DDE 5828 0026                  		addq.b	#4,$26(a0)
00018DE2 4A31 0004                  		tst.b	4(a1,d0.w)
00018DE6 6A00                       		bpl.s	Obj78_AniBody
00018DE8 5828 0026                  		addq.b	#4,$26(a0)
00018DEC                            
00018DEC                            Obj78_AniBody:
00018DEC 1031 0000                  		move.b	(a1,d0.w),d0
00018DF0 5000                       		addq.b	#8,d0
00018DF2 1140 001A                  		move.b	d0,$1A(a0)
00018DF6                            
00018DF6                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018DF6 2268 003C                  		movea.l	$3C(a0),a1
00018DFA 4A28 0022                  		tst.b	$22(a0)
00018DFE 6B00 0000                  		bmi.w	loc_16C90
00018E02 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018E08 1169 0025 0025             		move.b	$25(a1),$25(a0)
00018E0E 6700 0000                  		beq.w	loc_16C64
00018E12 3169 001C 001C             		move.w	$1C(a1),$1C(a0)
00018E18 3029 0010                  		move.w	$10(a1),d0
00018E1C D069 001C                  		add.w	$1C(a1),d0
00018E20 3140 0010                  		move.w	d0,$10(a0)
00018E24 2428 0008                  		move.l	8(a0),d2
00018E28 2602                       		move.l	d2,d3
00018E2A 3028 0010                  		move.w	$10(a0),d0
00018E2E 0828 0000 0022             		btst	#0,$22(a0)
00018E34 6700                       		beq.s	loc_16C0C
00018E36 4440                       		neg.w	d0
00018E38                            
00018E38                            loc_16C0C:
00018E38 48C0                       		ext.l	d0
00018E3A E180                       		asl.l	#8,d0
00018E3C D480                       		add.l	d0,d2
00018E3E 2142 0008                  		move.l	d2,8(a0)
00018E42 4843                       		swap	d3
00018E44 B668 0008                  		cmp.w	8(a0),d3
00018E48 6700                       		beq.s	loc_16C64
00018E4A 7000                       		moveq	#0,d0
00018E4C 1028 003C                  		move.b	$3C(a0),d0
00018E50 1231 002C                  		move.b	$2C(a1,d0.w),d1
00018E54 0C01 0080                  		cmpi.b	#-$80,d1
00018E58 6600                       		bne.s	loc_16C50
00018E5A 4843                       		swap	d3
00018E5C 2143 0008                  		move.l	d3,8(a0)
00018E60 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018E64 0868 0000 0022             		bchg	#0,$22(a0)
00018E6A 1168 0022 0001             		move.b	$22(a0),1(a0)
00018E70 5228 003C                  		addq.b	#1,$3C(a0)
00018E74 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018E7A 6000                       		bra.s	loc_16C64
00018E7C                            ; ===========================================================================
00018E7C                            
00018E7C                            loc_16C50:
00018E7C 4881                       		ext.w	d1
00018E7E D368 000C                  		add.w	d1,$C(a0)
00018E82 5228 003C                  		addq.b	#1,$3C(a0)
00018E86 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018E8C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018E90                            
00018E90                            loc_16C64:
00018E90 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018E96 6700                       		beq.s	loc_16C90
00018E98 0C11 0027                  		cmpi.b	#$27,0(a1)
00018E9C 6700                       		beq.s	loc_16C7C
00018E9E 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018EA4 6600                       		bne.s	loc_16C82
00018EA6                            
00018EA6                            loc_16C7C:
00018EA6 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018EAA 117C 000A 0024             		move.b	#$A,$24(a0)
00018EB0                            
00018EB0                            loc_16C82:
00018EB0 4EF9 0000 EB2E             		jmp	DisplaySprite
00018EB6                            
00018EB6                            ; ===========================================================================
00018EB6 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018EBE                            ; ===========================================================================
00018EBE                            
00018EBE                            loc_16C90:
00018EBE 08E9 0007 0022             		bset	#7,$22(a1)
00018EC4                            
00018EC4                            loc_16C96:
00018EC4 7000                       		moveq	#0,d0
00018EC6 1028 0024                  		move.b	$24(a0),d0
00018ECA 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018ECE 0828 0000 0022             		btst	#0,$22(a0)
00018ED4 6700                       		beq.s	loc_16CAA
00018ED6 4440                       		neg.w	d0
00018ED8                            
00018ED8                            loc_16CAA:
00018ED8 3140 0010                  		move.w	d0,$10(a0)
00018EDC 317C FC00 0012             		move.w	#-$400,$12(a0)
00018EE2 117C 000C 0024             		move.b	#$C,$24(a0)
00018EE8 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018EEE                            
00018EEE                            loc_16CC0:				; XREF: Obj78_Index
00018EEE 4EB9 0000 EAF4             		jsr	ObjectFall
00018EF4 4A68 0012                  		tst.w	$12(a0)
00018EF8 6B00                       		bmi.s	loc_16CE0
00018EFA 4EBA E15E                  		jsr	ObjHitFloor
00018EFE 4A41                       		tst.w	d1
00018F00 6A00                       		bpl.s	loc_16CE0
00018F02 D368 000C                  		add.w	d1,$C(a0)
00018F06 317C FC00 0012             		move.w	#-$400,$12(a0)
00018F0C                            
00018F0C                            loc_16CE0:
00018F0C 4A28 0001                  		tst.b	1(a0)
00018F10 6A00 FDCC                  		bpl.w	Obj78_ChkGone
00018F14 4EF9 0000 EB2E             		jmp	DisplaySprite
00018F1A                            ; ===========================================================================
00018F1A                            Ani_obj78:
00018F1A                            	include "_anim\obj78.asm"
00018F1A                            ; ---------------------------------------------------------------------------
00018F1A                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018F1A                            ; ---------------------------------------------------------------------------
00018F1A 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018F2A 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018F3A 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018F4A 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018F5A 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018F6A 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018F7A 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018F8A 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018F9A                            	even
00018F9A                            	even
00018F9A                            
00018F9A                            ; ---------------------------------------------------------------------------
00018F9A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018F9A                            ; ---------------------------------------------------------------------------
00018F9A                            Map_obj78:
00018F9A                            	include "_maps\obj78.asm"
00018F9A                            ; ---------------------------------------------------------------------------
00018F9A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018F9A                            ; ---------------------------------------------------------------------------
00018F9A 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018F9E 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018FA2 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018FA6 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018FAA 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018FAE 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018FB2 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018FB6 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018FBA 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018FBE 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018FC2 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018FC6 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018FCA 01                         byte_16D9E:	dc.b 1
00018FCB F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018FD0 01                         byte_16DA4:	dc.b 1
00018FD1 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018FD6 01                         byte_16DAA:	dc.b 1
00018FD7 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018FDC 01                         byte_16DB0:	dc.b 1
00018FDD EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018FE2 01                         byte_16DB6:	dc.b 1
00018FE3 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018FE8 01                         byte_16DBC:	dc.b 1
00018FE9 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018FEE 01                         byte_16DC2:	dc.b 1
00018FEF EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018FF4 01                         byte_16DC8:	dc.b 1
00018FF5 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018FFA 01                         byte_16DCE:	dc.b 1
00018FFB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019000 01                         byte_16DD4:	dc.b 1
00019001 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019006 01                         byte_16DDA:	dc.b 1
00019007 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001900C 01                         byte_16DE0:	dc.b 1
0001900D F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019012 01                         byte_16DE6:	dc.b 1
00019013 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019018 01                         byte_16DEC:	dc.b 1
00019019 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001901E 01                         byte_16DF2:	dc.b 1
0001901F F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019024 01                         byte_16DF8:	dc.b 1
00019025 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001902A 01                         byte_16DFE:	dc.b 1
0001902B F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019030 01                         byte_16E04:	dc.b 1
00019031 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019036 01                         byte_16E0A:	dc.b 1
00019037 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001903C 01                         byte_16E10:	dc.b 1
0001903D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019042 01                         byte_16E16:	dc.b 1
00019043 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019048 01                         byte_16E1C:	dc.b 1
00019049 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001904E 01                         byte_16E22:	dc.b 1
0001904F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019054 01                         byte_16E28:	dc.b 1
00019055 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001905A                            		even
0001905A                            		even
0001905A                            
0001905A                            ; ===========================================================================
0001905A                            ; ---------------------------------------------------------------------------
0001905A                            ; Object 79 - lamppost
0001905A                            ; ---------------------------------------------------------------------------
0001905A                            
0001905A                            Obj79:					; XREF: Obj_Index
0001905A 7000                       		moveq	#0,d0
0001905C 1028 0024                  		move.b	$24(a0),d0
00019060 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00019064 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00019068 4EFA 810E                  		jmp	MarkObjGone
0001906C                            ; ===========================================================================
0001906C 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001906E 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00019070 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00019072 0000                       		dc.w Obj79_Twirl-Obj79_Index
00019074                            ; ===========================================================================
00019074                            
00019074                            Obj79_Main:				; XREF: Obj79_Index
00019074 5428 0024                  		addq.b	#2,$24(a0)
00019078 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00019080 317C 0571 0002             		move.w	#lamppostart,2(a0)
00019086 117C 0004 0001             		move.b	#4,1(a0)
0001908C 117C 0008 0019             		move.b	#8,$19(a0)
00019092 117C 0005 0018             		move.b	#5,$18(a0)
00019098 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001909C 3440                       		movea.w	d0,a2	; load address into a2
0001909E 0812 0000                  		btst	#0,(a2)
000190A2 6600                       		bne.s	Obj79_RedLamp
000190A4 1238 FE30                  		move.b	($FFFFFE30).w,d1
000190A8 0201 007F                  		andi.b	#$7F,d1
000190AC 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000190B0 0202 007F                  		andi.b	#$7F,d2
000190B4 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000190B6 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000190B8                            
000190B8                            Obj79_RedLamp:
000190B8 08D2 0000                  		bset	#0,(a2)
000190BC 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000190C2 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000190C8 4E75                       		rts	
000190CA                            ; ===========================================================================
000190CA                            
000190CA                            Obj79_BlueLamp:				; XREF: Obj79_Index
000190CA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000190CE 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000190D2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000190D6 6B00 0000                  		bmi.w	locret_16F90
000190DA 1238 FE30                  		move.b	($FFFFFE30).w,d1
000190DE 0201 007F                  		andi.b	#$7F,d1
000190E2 1428 0028                  		move.b	$28(a0),d2
000190E6 0202 007F                  		andi.b	#$7F,d2
000190EA B202                       		cmp.b	d2,d1
000190EC 6500                       		bcs.s	Obj79_HitLamp
000190EE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000190F2 3440                       		movea.w	d0,a2	; load address into a2
000190F4 08D2 0000                  		bset	#0,(a2)
000190F8 117C 0004 0024             		move.b	#4,$24(a0)
000190FE 117C 0003 001A             		move.b	#3,$1A(a0)
00019104 6000 0000                  		bra.w	locret_16F90
00019108                            ; ===========================================================================
00019108                            
00019108                            Obj79_HitLamp:
00019108 3038 D008                  		move.w	($FFFFD008).w,d0
0001910C 9068 0008                  		sub.w	8(a0),d0
00019110 5040                       		addq.w	#8,d0
00019112 0C40 0010                  		cmpi.w	#$10,d0
00019116 6400 0000                  		bcc.w	locret_16F90
0001911A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001911E 9068 000C                  		sub.w	$C(a0),d0
00019122 0640 0040                  		addi.w	#$40,d0
00019126 0C40 0068                  		cmpi.w	#$68,d0
0001912A 6400                       		bcc.s	locret_16F90
0001912C 303C 00A1                  		move.w	#$A1,d0
00019130 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play lamppost sound
00019136 5428 0024                  		addq.b	#2,$24(a0)
0001913A 4EB9 0000 F284             		jsr	SingleObjLoad
00019140 6600                       		bne.s	loc_16F76
00019142 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00019146 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001914C 3368 0008 0030             		move.w	8(a0),$30(a1)
00019152 3368 000C 0032             		move.w	$C(a0),$32(a1)
00019158 0469 0018 0032             		subi.w	#$18,$32(a1)
0001915E 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00019166 337C 0571 0002             		move.w	#lamppostart,2(a1)
0001916C 137C 0004 0001             		move.b	#4,1(a1)
00019172 137C 0008 0019             		move.b	#8,$19(a1)
00019178 137C 0004 0018             		move.b	#4,$18(a1)
0001917E 137C 0002 001A             		move.b	#2,$1A(a1)
00019184 337C 0020 0036             		move.w	#$20,$36(a1)
0001918A                            
0001918A                            loc_16F76:
0001918A 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00019190 6100 0000                  		bsr.w	Obj79_StoreInfo
00019194 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00019198 3440                       		movea.w	d0,a2	; load address into a2
0001919A 08D2 0000                  		bset	#0,(a2)
0001919E                            
0001919E                            locret_16F90:
0001919E 4E75                       		rts	
000191A0                            ; ===========================================================================
000191A0                            
000191A0                            Obj79_AfterHit:				; XREF: Obj79_Index
000191A0 4E75                       		rts	
000191A2                            ; ===========================================================================
000191A2                            
000191A2                            Obj79_Twirl:				; XREF: Obj79_Index
000191A2 5368 0036                  		subq.w	#1,$36(a0)
000191A6 6A00                       		bpl.s	loc_16FA0
000191A8 117C 0004 0024             		move.b	#4,$24(a0)
000191AE                            
000191AE                            loc_16FA0:
000191AE 1028 0026                  		move.b	$26(a0),d0
000191B2 0428 0010 0026             		subi.b	#$10,$26(a0)
000191B8 0400 0040                  		subi.b	#$40,d0
000191BC 4EB9 0000 29F6             		jsr	(CalcSine).l
000191C2 C3FC 0C00                  		muls.w	#$C00,d1
000191C6 4841                       		swap	d1
000191C8 D268 0030                  		add.w	$30(a0),d1
000191CC 3141 0008                  		move.w	d1,8(a0)
000191D0 C1FC 0C00                  		muls.w	#$C00,d0
000191D4 4840                       		swap	d0
000191D6 D068 0032                  		add.w	$32(a0),d0
000191DA 3140 000C                  		move.w	d0,$C(a0)
000191DE 4E75                       		rts	
000191E0                            ; ===========================================================================
000191E0                            ; ---------------------------------------------------------------------------
000191E0                            ; Subroutine to	store information when you hit a lamppost
000191E0                            ; ---------------------------------------------------------------------------
000191E0                            
000191E0                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000191E0 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000191E6 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000191EC 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000191F2 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000191F8 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000191FE 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00019204 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001920A 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00019210 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00019216 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001921C 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00019222 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00019228 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001922E 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00019234 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001923A 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00019240 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00019246 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001924C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00019252 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00019258 4E75                       		rts	
0001925A                            
0001925A                            ; ---------------------------------------------------------------------------
0001925A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001925A                            ; ---------------------------------------------------------------------------
0001925A                            
0001925A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001925A                            
0001925A                            
0001925A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001925A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00019260 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00019266 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001926C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00019272 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00019278 4278 FE20                  		clr.w	($FFFFFE20).w
0001927C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00019280 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00019286 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001928C 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00019290 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00019296 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001929C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000192A2 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000192A8 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000192AE 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000192B4 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000192BA 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000192C0 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000192C6 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000192CC 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000192D2 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000192D8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000192DE 6600                       		bne.s	loc_170E4
000192E0 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000192E6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000192EC 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000192F2                            
000192F2                            loc_170E4:
000192F2 4A38 FE30                  		tst.b	($FFFFFE30).w
000192F6 6A00                       		bpl.s	locret_170F6
000192F8 3038 FE32                  		move.w	($FFFFFE32).w,d0
000192FC 0440 00A0                  		subi.w	#$A0,d0
00019300 31C0 F728                  		move.w	d0,($FFFFF728).w
00019304                            
00019304                            locret_170F6:
00019304 4E75                       		rts	
00019306                            ; End of function Obj79_LoadInfo
00019306                            
00019306                            ; ===========================================================================
00019306                            ; ---------------------------------------------------------------------------
00019306                            ; Sprite mappings - lamppost
00019306                            ; ---------------------------------------------------------------------------
00019306                            Map_obj79:
00019306                            	include "_maps\obj79.asm"
00019306                            ; ---------------------------------------------------------------------------
00019306                            ; Sprite mappings - lamppost
00019306                            ; ---------------------------------------------------------------------------
00019306 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001930A 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001930E 06                         byte_17100:	dc.b 6
0001930F E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019314 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019319 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001931E F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00019323 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00019328 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
0001932D 04                         byte_1711F:	dc.b 4
0001932E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019333 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019338 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001933D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00019342 02                         byte_17134:	dc.b 2
00019343 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019348 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001934D 06                         byte_1713F:	dc.b 6
0001934E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019353 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019358 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001935D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00019362 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00019367 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001936C                            		even
0001936C                            		even
0001936C                            
0001936C                            ; ===========================================================================
0001936C                            ; ---------------------------------------------------------------------------
0001936C                            ; Object 7D - hidden points at the end of a level
0001936C                            ; ---------------------------------------------------------------------------
0001936C                            
0001936C                            Obj7D:					; XREF: Obj_Index
0001936C 7000                       		moveq	#0,d0
0001936E 1028 0024                  		move.b	$24(a0),d0
00019372 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00019376 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001937A                            ; ===========================================================================
0001937A 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001937C 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001937E                            ; ===========================================================================
0001937E                            
0001937E                            Obj7D_Main:				; XREF: Obj7D_Index
0001937E 7410                       		moveq	#$10,d2
00019380 3602                       		move.w	d2,d3
00019382 D643                       		add.w	d3,d3
00019384 43F8 D000                  		lea	($FFFFD000).w,a1
00019388 3029 0008                  		move.w	8(a1),d0
0001938C 9068 0008                  		sub.w	8(a0),d0
00019390 D042                       		add.w	d2,d0
00019392 B043                       		cmp.w	d3,d0
00019394 6400                       		bcc.s	Obj7D_ChkDel
00019396 3229 000C                  		move.w	$C(a1),d1
0001939A 9268 000C                  		sub.w	$C(a0),d1
0001939E D242                       		add.w	d2,d1
000193A0 B243                       		cmp.w	d3,d1
000193A2 6400                       		bcc.s	Obj7D_ChkDel
000193A4 4A78 FE08                  		tst.w	($FFFFFE08).w
000193A8 6600                       		bne.s	Obj7D_ChkDel
000193AA 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000193AE 6600                       		bne.s	Obj7D_ChkDel
000193B0 5428 0024                  		addq.b	#2,$24(a0)
000193B4 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000193BC 317C 84B6 0002             		move.w	#$84B6,2(a0)
000193C2 0028 0004 0001             		ori.b	#4,1(a0)
000193C8 117C 0000 0018             		move.b	#0,$18(a0)
000193CE 117C 0010 0019             		move.b	#$10,$19(a0)
000193D4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000193DA 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000193E0 303C 00C9                  		move.w	#$C9,d0
000193E4 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play bonus sound
000193EA 7000                       		moveq	#0,d0
000193EC 1028 0028                  		move.b	$28(a0),d0
000193F0 D040                       		add.w	d0,d0
000193F2 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000193F6 4EB9 0000 0000             		jsr	AddPoints
000193FC                            
000193FC                            Obj7D_ChkDel:
000193FC 3028 0008                  		move.w	8(a0),d0
00019400 0240 FF80                  		andi.w	#$FF80,d0
00019404 3238 F700                  		move.w	($FFFFF700).w,d1
00019408 0441 0080                  		subi.w	#$80,d1
0001940C 0241 FF80                  		andi.w	#$FF80,d1
00019410 9041                       		sub.w	d1,d0
00019412 0C40 0280                  		cmpi.w	#$280,d0
00019416 6300                       		bls.s	Obj7D_NoDel
00019418 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001941C 6700                       		beq.s	Obj7D_Delete		; if it's zero, don't remember object
0001941E 3440                       		movea.w	d0,a2	; load address into a2
00019420 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00019424 6000                       		bra.s	Obj7D_Delete	; and delete object
00019426                            
00019426                            Obj7D_NoDel:
00019426 4E75                       		rts	
00019428                            ; ===========================================================================
00019428                            
00019428                            Obj7D_Delete:
00019428 4EF9 0000 EB7E             		jmp	DeleteObject
0001942E                            ; ===========================================================================
0001942E 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00019430 03E8                       		dc.w 1000		; earn 1000*10 points for revealing 10000 object
00019432 0064                       		dc.w 100		; earn 100*10 points for revealing 1000 object
00019434 000A                       		dc.w 10			; earn 10*10 points for revealing 100 object
00019436                            ; ===========================================================================
00019436                            
00019436                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00019436 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001943A 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001943C 3028 0008                  		move.w	8(a0),d0
00019440 0240 FF80                  		andi.w	#-$80,d0
00019444 3238 F700                  		move.w	($FFFFF700).w,d1
00019448 0441 0080                  		subi.w	#$80,d1
0001944C 0241 FF80                  		andi.w	#-$80,d1
00019450 9041                       		sub.w	d1,d0
00019452 0C40 0280                  		cmpi.w	#$280,d0
00019456 6200                       		bhi.s	Obj7D_Delete2
00019458 4EF9 0000 EB2E             		jmp	DisplaySprite
0001945E                            ; ===========================================================================
0001945E                            
0001945E                            Obj7D_Delete2:
0001945E 4EF9 0000 EB7E             		jmp	DeleteObject
00019464                            ; ===========================================================================
00019464                            ; ---------------------------------------------------------------------------
00019464                            ; Sprite mappings - hidden points at the end of	a level
00019464                            ; ---------------------------------------------------------------------------
00019464                            Map_obj7D:
00019464                            	include "_maps\obj7D.asm"
00019464                            ; ---------------------------------------------------------------------------
00019464                            ; Sprite mappings - hidden points at the end of	a level
00019464                            ; ---------------------------------------------------------------------------
00019464 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00019468 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001946C 00                         byte_17250:	dc.b 0
0001946D 01                         byte_17251:	dc.b 1
0001946E F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00019473 01                         byte_17257:	dc.b 1
00019474 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00019479 01                         byte_1725D:	dc.b 1
0001947A F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00019480 00                         		even
00019480 00                         		even
00019480                            
00019480                            ; ===========================================================================
00019480                            ; ---------------------------------------------------------------------------
00019480                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00019480                            ; ---------------------------------------------------------------------------
00019480                            
00019480                            Obj8A:					; XREF: Obj_Index
00019480 7000                       		moveq	#0,d0
00019482 1028 0024                  		move.b	$24(a0),d0
00019486 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001948A 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001948E                            ; ===========================================================================
0001948E 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00019490 0000                       		dc.w Obj8A_Display-Obj8A_Index
00019492                            ; ===========================================================================
00019492                            
00019492                            Obj8A_Main:				; XREF: Obj8A_Index
00019492 5428 0024                  		addq.b	#2,$24(a0)
00019496 317C 0120 0008             		move.w	#$120,8(a0)
0001949C 317C 00F0 000A             		move.w	#$F0,$A(a0)
000194A2 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000194AA 317C 25A0 0002             		move.w	#$25A0,2(a0)
000194B0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000194B4 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000194B8 117C 0000 0001             		move.b	#0,1(a0)
000194BE 117C 0000 0018             		move.b	#0,$18(a0)
000194C4 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000194CA 6600                       		bne.s	Obj8A_Display	; if not, branch
000194CC 317C 20A6 0002             		move.w	#$20A6,2(a0)
000194D2 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000194D8 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000194DC 6700                       		beq.s	Obj8A_Display	; if not, branch
000194DE 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000194E4 6600                       		bne.s	Obj8A_Display	; if not, branch
000194E6 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000194EC 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000194F2 4EF9 0000 EB7E             		jmp	DeleteObject
000194F8                            ; ===========================================================================
000194F8                            
000194F8                            Obj8A_Display:				; XREF: Obj8A_Index
000194F8 4EF9 0000 EB2E             		jmp	DisplaySprite
000194FE                            ; ===========================================================================
000194FE                            ; ---------------------------------------------------------------------------
000194FE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000194FE                            ; ---------------------------------------------------------------------------
000194FE                            Map_obj8A:
000194FE                            	include "_maps\obj8A.asm"
000194FE                            ; ---------------------------------------------------------------------------
000194FE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000194FE                            ; ---------------------------------------------------------------------------
000194FE 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00019502 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00019506 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
0001950A 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
0001950E 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00019512 0000                       		dc.w byte_176A9-Map_obj8A
00019514 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00019515 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001951A F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001951F F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00019524 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00019529 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001952E F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00019533 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00019538 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001953D F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00019542 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00019547 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001954C F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00019551 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00019556 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001955B 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
0001955C D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00019561 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00019566 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
0001956B D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00019570 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00019575 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
0001957A D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
0001957F D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00019584 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00019589 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
0001958E 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00019593 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00019598 0805 0016 08               		dc.b 8,	5, 0, $16, 8
0001959D 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
000195A2 0805 0004 30               		dc.b 8,	5, 0, 4, $30
000195A7 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
000195AC 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
000195AD D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
000195B2 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
000195B7 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
000195BC D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
000195C1 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
000195C6 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
000195CB D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
000195D0 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
000195D5 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
000195DA 0805 0036 08               		dc.b 8,	5, 0, $36, 8
000195DF 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
000195E0 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
000195E5 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
000195EA D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
000195EF D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
000195F4 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000195F9 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
000195FE D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00019603 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00019608 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
0001960D D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00019612 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00019617 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
0001961C D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00019621 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00019626 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
0001962B 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00019630 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00019635 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
0001963A 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
0001963F 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00019644 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00019649 0805 0004 10               		dc.b 8,	5, 0, 4, $10
0001964E 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00019653 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00019658 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00019659 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
0001965E D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00019663 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00019668 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
0001966D D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00019672 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00019677 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
0001967C 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00019681 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00019686 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
0001968B 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00019690 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00019695 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
0001969A 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
0001969F 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
000196A4 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
000196A9 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
000196AE 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
000196B3 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
000196B8 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
000196BD 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
000196BE D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
000196C3 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
000196C8 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
000196CD D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
000196D2 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
000196D7 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
000196DC D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000196E1 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
000196E6 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
000196EB D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
000196F0 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
000196F5 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
000196FA 0809 0008 88               		dc.b 8,	9, 0, 8, $88
000196FF 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00019704 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00019709 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
0001970E 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00019713 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00019718 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
0001971D 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00019722 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00019727 0805 0004 28               		dc.b 8,	5, 0, 4, $28
0001972C 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00019731 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00019736 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
0001973B 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00019740 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00019741 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00019746 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001974B D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00019750 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00019755 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001975A D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001975F D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00019764 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00019769 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001976E D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00019773 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00019778 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001977D 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00019782 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00019787 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001978C 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00019791 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00019796 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001979B 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
000197A0 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
000197A5 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
000197AA 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
000197AF 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
000197B4 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
000197B5 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
000197BA D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
000197BF D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
000197C4 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
000197C9 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
000197CE D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000197D3 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
000197D8 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
000197DD D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
000197E2 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
000197E7 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
000197EC D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
000197F1 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
000197F6 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
000197FB 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00019800 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00019805 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001980A 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
0001980F 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00019814 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00019819 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
0001981E 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00019823 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00019828 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
0001982D 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00019832 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00019837 0001 0046 74               		dc.b 0,	1, 0, $46, $74
0001983C 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00019841 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00019846 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
0001984B 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00019850 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00019851 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00019856 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
0001985B F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00019860 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00019865 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
0001986A F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
0001986F F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00019874 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00019879 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
0001987E F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00019883 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00019888 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
0001988D F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00019892 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00019897 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0001989C 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0001989D 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
000198A2 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
000198A7 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
000198AC 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
000198B1 3005 0000 08               		dc.b $30, 5, 0,	0, 8
000198B6 3005 0004 18               		dc.b $30, 5, 0,	4, $18
000198BB 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
000198C0 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
000198C5 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
000198C6 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
000198CB E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
000198D0 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
000198D5 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
000198DA E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
000198DF E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
000198E4 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
000198E9 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
000198EE E809 0008 34               		dc.b $E8, 9, 0,	8, $34
000198F3 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
000198F8 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
000198FD 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
00019902 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00019907 0005 000E 00               		dc.b 0,	5, 0, $E, 0
0001990C 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
00019911 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00019916 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
0001991C 00                         		even
0001991C 00                         		even
0001991C                            
0001991C                            ; ===========================================================================
0001991C                            ; ---------------------------------------------------------------------------
0001991C                            ; Object 3D - Eggman (GHZ)
0001991C                            ; ---------------------------------------------------------------------------
0001991C                            
0001991C                            Obj3D:					; XREF: Obj_Index
0001991C 7000                       		moveq	#0,d0
0001991E 1028 0024                  		move.b	$24(a0),d0
00019922 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00019926 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001992A                            ; ===========================================================================
0001992A 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001992C 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001992E 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00019930 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00019932                            
00019932 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00019934 0401                       		dc.b 4,	1
00019936 0607                       		dc.b 6,	7
00019938                            ; ===========================================================================
00019938                            
00019938                            Obj3D_Main:				; XREF: Obj3D_Index
00019938 45F9 0001 9932             		lea	(Obj3D_ObjData).l,a2
0001993E 2248                       		movea.l	a0,a1
00019940 7202                       		moveq	#2,d1
00019942 6000                       		bra.s	Obj3D_LoadBoss
00019944                            ; ===========================================================================
00019944                            
00019944                            Obj3D_Loop:
00019944 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001994A 6600                       		bne.s	loc_17772
0001994C                            
0001994C                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001994C 135A 0024                  		move.b	(a2)+,$24(a1)
00019950 12BC 003D                  		move.b	#$3D,0(a1)
00019954 3368 0008 0008             		move.w	8(a0),8(a1)
0001995A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019960 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00019968 337C 0400 0002             		move.w	#$400,2(a1)
0001996E 137C 0004 0001             		move.b	#4,1(a1)
00019974 137C 0020 0019             		move.b	#$20,$19(a1)
0001997A 137C 0003 0018             		move.b	#3,$18(a1)
00019980 135A 001C                  		move.b	(a2)+,$1C(a1)
00019984 2348 0034                  		move.l	a0,$34(a1)
00019988 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001998C                            
0001998C                            loc_17772:
0001998C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019992 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019998 117C 000F 0020             		move.b	#$F,$20(a0)
0001999E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000199A4                            
000199A4                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000199A4 7000                       		moveq	#0,d0
000199A6 1028 0025                  		move.b	$25(a0),d0
000199AA 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000199AE 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000199B2 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000199B8 4EB9 0000 BB8E             		jsr	AnimateSprite
000199BE 1028 0022                  		move.b	$22(a0),d0
000199C2 0200 0003                  		andi.b	#3,d0
000199C6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000199CC 8128 0001                  		or.b	d0,1(a0)
000199D0 4EF9 0000 EB2E             		jmp	DisplaySprite
000199D6                            ; ===========================================================================
000199D6 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000199D8 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000199DA 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000199DC 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000199DE 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000199E0 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000199E2 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000199E4                            ; ===========================================================================
000199E4                            
000199E4                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000199E4 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
000199EA 6100 0000                  		bsr.w	BossMove
000199EE 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000199F4 6600                       		bne.s	loc_177E6
000199F6 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000199FC 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00019A00                            
00019A00                            loc_177E6:
00019A00 1028 003F                  		move.b	$3F(a0),d0
00019A04 4EB9 0000 29F6             		jsr	(CalcSine).l
00019A0A EC40                       		asr.w	#6,d0
00019A0C D068 0038                  		add.w	$38(a0),d0
00019A10 3140 000C                  		move.w	d0,$C(a0)
00019A14 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A1A 5428 003F                  		addq.b	#2,$3F(a0)
00019A1E 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00019A24 6400                       		bcc.s	locret_1784A
00019A26 4A28 0022                  		tst.b	$22(a0)
00019A2A 6B00                       		bmi.s	loc_1784C
00019A2C 4A28 0020                  		tst.b	$20(a0)
00019A30 6600                       		bne.s	locret_1784A
00019A32 4A28 003E                  		tst.b	$3E(a0)
00019A36 6600                       		bne.s	Obj3D_ShipFlash
00019A38 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00019A3E 303C 00AC                  		move.w	#$AC,d0
00019A42 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019A48                            
00019A48                            Obj3D_ShipFlash:
00019A48 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00019A4C 7000                       		moveq	#0,d0		; move 0 (black) to d0
00019A4E 4A51                       		tst.w	(a1)
00019A50 6600                       		bne.s	loc_1783C
00019A52 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00019A56                            
00019A56                            loc_1783C:
00019A56 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00019A58 5328 003E                  		subq.b	#1,$3E(a0)
00019A5C 6600                       		bne.s	locret_1784A
00019A5E 117C 000F 0020             		move.b	#$F,$20(a0)
00019A64                            
00019A64                            locret_1784A:
00019A64 4E75                       		rts	
00019A66                            ; ===========================================================================
00019A66                            
00019A66                            loc_1784C:				; XREF: loc_177E6
00019A66 7064                       		moveq	#100,d0
00019A68 6100 0000                  		bsr.w	AddPoints
00019A6C 117C 0008 0025             		move.b	#8,$25(a0)
00019A72 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00019A78 4E75                       		rts	
00019A7A                            
00019A7A                            ; ---------------------------------------------------------------------------
00019A7A                            ; Defeated boss	subroutine
00019A7A                            ; ---------------------------------------------------------------------------
00019A7A                            
00019A7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A7A                            
00019A7A                            
00019A7A                            BossDefeated:
00019A7A 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00019A80 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w	
00019A86 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019A8A 0200 0007                  		andi.b	#7,d0
00019A8E 6600                       		bne.s	locret_178A2
00019A90 4EB9 0000 F284             		jsr	SingleObjLoad
00019A96 6600                       		bne.s	locret_178A2
00019A98 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00019A9C 3368 0008 0008             		move.w	8(a0),8(a1)
00019AA2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019AA8 4EB9 0000 29D0             		jsr	(RandomNumber).l
00019AAE 3200                       		move.w	d0,d1
00019AB0 7200                       		moveq	#0,d1
00019AB2 1200                       		move.b	d0,d1
00019AB4 E409                       		lsr.b	#2,d1
00019AB6 0441 0020                  		subi.w	#$20,d1
00019ABA D369 0008                  		add.w	d1,8(a1)
00019ABE E048                       		lsr.w	#8,d0
00019AC0 E608                       		lsr.b	#3,d0
00019AC2 D169 000C                  		add.w	d0,$C(a1)
00019AC6                            
00019AC6                            locret_178A2:
00019AC6 4E75                       		rts	
00019AC8                            ; End of function BossDefeated
00019AC8                            
00019AC8                            ; ---------------------------------------------------------------------------
00019AC8                            ; Subroutine to	move a boss
00019AC8                            ; ---------------------------------------------------------------------------
00019AC8                            
00019AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019AC8                            
00019AC8                            
00019AC8                            BossMove:
00019AC8 2428 0030                  		move.l	$30(a0),d2
00019ACC 2628 0038                  		move.l	$38(a0),d3
00019AD0 3028 0010                  		move.w	$10(a0),d0
00019AD4 48C0                       		ext.l	d0
00019AD6 E180                       		asl.l	#8,d0
00019AD8 D480                       		add.l	d0,d2
00019ADA 3028 0012                  		move.w	$12(a0),d0
00019ADE 48C0                       		ext.l	d0
00019AE0 E180                       		asl.l	#8,d0
00019AE2 D680                       		add.l	d0,d3
00019AE4 2142 0030                  		move.l	d2,$30(a0)
00019AE8 2143 0038                  		move.l	d3,$38(a0)
00019AEC 4E75                       		rts	
00019AEE                            ; End of function BossMove
00019AEE                            
00019AEE                            ; ===========================================================================
00019AEE                            
00019AEE                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00019AEE 317C FF00 0010             		move.w	#-$100,$10(a0)
00019AF4 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019AFA 6100 FFCC                  		bsr.w	BossMove
00019AFE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019B04 6600                       		bne.s	loc_17916
00019B06 317C 0000 0010             		move.w	#0,$10(a0)
00019B0C 317C 0000 0012             		move.w	#0,$12(a0)
00019B12 5428 0025                  		addq.b	#2,$25(a0)
00019B16 4EB9 0000 F29A             		jsr	SingleObjLoad2
00019B1C 6600                       		bne.s	loc_17910
00019B1E 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00019B22 3368 0030 0008             		move.w	$30(a0),8(a1)
00019B28 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019B2E 2348 0034                  		move.l	a0,$34(a1)
00019B32                            
00019B32                            loc_17910:
00019B32 317C 0077 003C             		move.w	#$77,$3C(a0)
00019B38                            
00019B38                            loc_17916:
00019B38 6000 FEC6                  		bra.w	loc_177E6
00019B3C                            ; ===========================================================================
00019B3C                            
00019B3C                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00019B3C 5368 003C                  		subq.w	#1,$3C(a0)
00019B40 6A00                       		bpl.s	Obj3D_Reverse
00019B42 5428 0025                  		addq.b	#2,$25(a0)
00019B46 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019B4C 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00019B52 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019B58 6600                       		bne.s	Obj3D_Reverse
00019B5A 317C 007F 003C             		move.w	#$7F,$3C(a0)
00019B60 317C 0040 0010             		move.w	#$40,$10(a0)
00019B66                            
00019B66                            Obj3D_Reverse:
00019B66 0828 0000 0022             		btst	#0,$22(a0)
00019B6C 6600                       		bne.s	loc_17950
00019B6E 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00019B72                            
00019B72                            loc_17950:
00019B72 6000 FE8C                  		bra.w	loc_177E6
00019B76                            ; ===========================================================================
00019B76                            
00019B76                            loc_17954:				; XREF: Obj3D_ShipIndex
00019B76 5368 003C                  		subq.w	#1,$3C(a0)
00019B7A 6B00                       		bmi.s	loc_17960
00019B7C 6100 FF4A                  		bsr.w	BossMove
00019B80 6000                       		bra.s	loc_17976
00019B82                            ; ===========================================================================
00019B82                            
00019B82                            loc_17960:
00019B82 0868 0000 0022             		bchg	#0,$22(a0)
00019B88 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019B8E 5528 0025                  		subq.b	#2,$25(a0)
00019B92 317C 0000 0010             		move.w	#0,$10(a0)
00019B98                            
00019B98                            loc_17976:
00019B98 6000 FE66                  		bra.w	loc_177E6
00019B9C                            ; ===========================================================================
00019B9C                            
00019B9C                            loc_1797A:				; XREF: Obj3D_ShipIndex
00019B9C 5368 003C                  		subq.w	#1,$3C(a0)
00019BA0 6B00                       		bmi.s	loc_17984
00019BA2 6000 FED6                  		bra.w	BossDefeated
00019BA6                            ; ===========================================================================
00019BA6                            
00019BA6                            loc_17984:
00019BA6 08E8 0000 0022             		bset	#0,$22(a0)
00019BAC 08A8 0007 0022             		bclr	#7,$22(a0)
00019BB2 4268 0010                  		clr.w	$10(a0)
00019BB6 5428 0025                  		addq.b	#2,$25(a0)
00019BBA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019BC0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019BC4 6600                       		bne.s	locret_179AA
00019BC6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019BCC                            
00019BCC                            locret_179AA:
00019BCC 4E75                       		rts	
00019BCE                            ; ===========================================================================
00019BCE                            
00019BCE                            loc_179AC:				; XREF: Obj3D_ShipIndex
00019BCE 5268 003C                  		addq.w	#1,$3C(a0)
00019BD2 6700                       		beq.s	loc_179BC
00019BD4 6A00                       		bpl.s	loc_179C2
00019BD6 0668 0018 0012             		addi.w	#$18,$12(a0)
00019BDC 6000 0000                  		bra.w	loc_179EE
00019BE0                            ; ===========================================================================
00019BE0                            
00019BE0                            loc_179BC:
00019BE0 4268 0012                  		clr.w	$12(a0)
00019BE4 6000 0000                  		bra.w	loc_179EE
00019BE8                            ; ===========================================================================
00019BE8                            
00019BE8                            loc_179C2:
00019BE8 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019BEE 6500                       		bcs.s	loc_179DA
00019BF0 6700                       		beq.s	loc_179E0
00019BF2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019BF8 6500 0000                  		bcs.w	loc_179EE
00019BFC 5428 0025                  		addq.b	#2,$25(a0)
00019C00 6000                       		bra.s	loc_179EE
00019C02                            ; ===========================================================================
00019C02                            
00019C02                            loc_179DA:
00019C02 5168 0012                  		subq.w	#8,$12(a0)
00019C06 6000                       		bra.s	loc_179EE
00019C08                            ; ===========================================================================
00019C08                            
00019C08                            loc_179E0:
00019C08 4268 0012                  		clr.w	$12(a0)
00019C0C 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated			
00019C72 303C 0081                  		move.w	#$81,d0
00019C76 4EB9 0000 121A             		jsr	(PlaySound).l	; play GHZ music
00019C7C                            
00019C7C                            loc_179EE:
00019C7C 6100 FE4A                  		bsr.w	BossMove
00019C80 6000 FD7E                  		bra.w	loc_177E6
00019C84                            ; ===========================================================================
00019C84                            
00019C84                            loc_179F6:				; XREF: Obj3D_ShipIndex
00019C84 317C 0400 0010             		move.w	#$400,$10(a0)
00019C8A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019C90 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00019C96 6700                       		beq.s	loc_17A10
00019C98 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019C9C 6000                       		bra.s	loc_17A16
00019C9E                            ; ===========================================================================
00019C9E                            
00019C9E                            loc_17A10:
00019C9E 4A28 0001                  		tst.b	1(a0)
00019CA2 6A00                       		bpl.s	Obj3D_ShipDel
00019CA4                            
00019CA4                            loc_17A16:
00019CA4 6100 FE22                  		bsr.w	BossMove
00019CA8 6000 FD56                  		bra.w	loc_177E6
00019CAC                            ; ===========================================================================
00019CAC                            
00019CAC                            Obj3D_ShipDel:
00019CAC 4EF9 0000 EB7E             		jmp	DeleteObject
00019CB2                            ; ===========================================================================
00019CB2                            
00019CB2                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00019CB2 7000                       		moveq	#0,d0
00019CB4 7201                       		moveq	#1,d1
00019CB6 2268 0034                  		movea.l	$34(a0),a1
00019CBA 1029 0025                  		move.b	$25(a1),d0
00019CBE 5900                       		subq.b	#4,d0
00019CC0 6600                       		bne.s	loc_17A3E
00019CC2 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00019CC8 6600                       		bne.s	loc_17A46
00019CCA 7204                       		moveq	#4,d1
00019CCC                            
00019CCC                            loc_17A3E:
00019CCC 5D00                       		subq.b	#6,d0
00019CCE 6B00                       		bmi.s	loc_17A46
00019CD0 720A                       		moveq	#$A,d1
00019CD2 6000                       		bra.s	loc_17A5A
00019CD4                            ; ===========================================================================
00019CD4                            
00019CD4                            loc_17A46:
00019CD4 4A29 0020                  		tst.b	$20(a1)
00019CD8 6600                       		bne.s	loc_17A50
00019CDA 7205                       		moveq	#5,d1
00019CDC 6000                       		bra.s	loc_17A5A
00019CDE                            ; ===========================================================================
00019CDE                            
00019CDE                            loc_17A50:
00019CDE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019CE4 6500                       		bcs.s	loc_17A5A
00019CE6 7204                       		moveq	#4,d1
00019CE8                            
00019CE8                            loc_17A5A:
00019CE8 1141 001C                  		move.b	d1,$1C(a0)
00019CEC 5500                       		subq.b	#2,d0
00019CEE 6600                       		bne.s	Obj3D_FaceDisp
00019CF0 117C 0006 001C             		move.b	#6,$1C(a0)
00019CF6 4A28 0001                  		tst.b	1(a0)
00019CFA 6A00                       		bpl.s	Obj3D_FaceDel
00019CFC                            
00019CFC                            Obj3D_FaceDisp:
00019CFC 6000                       		bra.s	Obj3D_Display
00019CFE                            ; ===========================================================================
00019CFE                            
00019CFE                            Obj3D_FaceDel:
00019CFE 4EF9 0000 EB7E             		jmp	DeleteObject
00019D04                            ; ===========================================================================
00019D04                            
00019D04                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019D04 117C 0007 001C             		move.b	#7,$1C(a0)
00019D0A 2268 0034                  		movea.l	$34(a0),a1
00019D0E 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019D14 6600                       		bne.s	loc_17A96
00019D16 117C 000B 001C             		move.b	#$B,$1C(a0)
00019D1C 4A28 0001                  		tst.b	1(a0)
00019D20 6A00                       		bpl.s	Obj3D_FlameDel
00019D22 6000                       		bra.s	Obj3D_FlameDisp
00019D24                            ; ===========================================================================
00019D24                            
00019D24                            loc_17A96:
00019D24 3029 0010                  		move.w	$10(a1),d0
00019D28 6700                       		beq.s	Obj3D_FlameDisp
00019D2A 117C 0008 001C             		move.b	#8,$1C(a0)
00019D30                            
00019D30                            Obj3D_FlameDisp:
00019D30 6000                       		bra.s	Obj3D_Display
00019D32                            ; ===========================================================================
00019D32                            
00019D32                            Obj3D_FlameDel:
00019D32 4EF9 0000 EB7E             		jmp	DeleteObject
00019D38                            ; ===========================================================================
00019D38                            
00019D38                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019D38 2268 0034                  		movea.l	$34(a0),a1
00019D3C 3169 0008 0008             		move.w	8(a1),8(a0)
00019D42 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019D48 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019D4E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019D54 4EB9 0000 BB8E             		jsr	AnimateSprite
00019D5A 1028 0022                  		move.b	$22(a0),d0
00019D5E 0200 0003                  		andi.b	#3,d0
00019D62 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019D68 8128 0001                  		or.b	d0,1(a0)
00019D6C 4EF9 0000 EB2E             		jmp	DisplaySprite
00019D72                            ; ===========================================================================
00019D72                            ; ---------------------------------------------------------------------------
00019D72                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019D72                            ; ---------------------------------------------------------------------------
00019D72                            
00019D72                            Obj48:					; XREF: Obj_Index
00019D72 7000                       		moveq	#0,d0
00019D74 1028 0024                  		move.b	$24(a0),d0
00019D78 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019D7C 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00019D80                            ; ===========================================================================
00019D80 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019D82 0000                       		dc.w Obj48_Base-Obj48_Index
00019D84 0000                       		dc.w Obj48_Display2-Obj48_Index
00019D86 0000                       		dc.w loc_17C68-Obj48_Index
00019D88 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019D8A                            ; ===========================================================================
00019D8A                            
00019D8A                            Obj48_Main:				; XREF: Obj48_Index
00019D8A 5428 0024                  		addq.b	#2,$24(a0)
00019D8E 317C 4080 0026             		move.w	#$4080,$26(a0)
00019D94 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019D9A 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00019DA2 317C 046C 0002             		move.w	#$46C,2(a0)
00019DA8 45E8 0028                  		lea	$28(a0),a2
00019DAC 14FC 0000                  		move.b	#0,(a2)+
00019DB0 7205                       		moveq	#5,d1
00019DB2 2248                       		movea.l	a0,a1
00019DB4 6000                       		bra.s	loc_17B60
00019DB6                            ; ===========================================================================
00019DB6                            
00019DB6                            Obj48_MakeLinks:
00019DB6 4EB9 0000 F29A             		jsr	SingleObjLoad2
00019DBC 6600                       		bne.s	Obj48_MakeBall
00019DBE 3368 0008 0008             		move.w	8(a0),8(a1)
00019DC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019DCA 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00019DCE 137C 0006 0024             		move.b	#6,$24(a1)
00019DD4 237C 0000 8DC0 0004        		move.l	#Map_obj15,4(a1)
00019DDC 337C 0380 0002             		move.w	#$380,2(a1)
00019DE2 137C 0001 001A             		move.b	#1,$1A(a1)
00019DE8 5228 0028                  		addq.b	#1,$28(a0)
00019DEC                            
00019DEC                            loc_17B60:				; XREF: Obj48_Main
00019DEC 3A09                       		move.w	a1,d5
00019DEE 0445 D000                  		subi.w	#$D000,d5
00019DF2 EC4D                       		lsr.w	#6,d5
00019DF4 0245 007F                  		andi.w	#$7F,d5
00019DF8 14C5                       		move.b	d5,(a2)+
00019DFA 137C 0004 0001             		move.b	#4,1(a1)
00019E00 137C 0008 0019             		move.b	#8,$19(a1)
00019E06 137C 0006 0018             		move.b	#6,$18(a1)
00019E0C 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019E12 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019E16                            
00019E16                            Obj48_MakeBall:
00019E16 137C 0008 0024             		move.b	#8,$24(a1)
00019E1C 237C 0000 9338 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019E24 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019E2A 137C 0001 001A             		move.b	#1,$1A(a1)
00019E30 137C 0005 0018             		move.b	#5,$18(a1)
00019E36 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019E3C 4E75                       		rts	
00019E3E                            ; ===========================================================================
00019E3E                            
00019E3E 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019E44                            
00019E44                            ; ===========================================================================
00019E44                            
00019E44                            Obj48_Base:				; XREF: Obj48_Index
00019E44 47F9 0001 9E3E             		lea	(Obj48_PosData).l,a3
00019E4A 45E8 0028                  		lea	$28(a0),a2
00019E4E 7C00                       		moveq	#0,d6
00019E50 1C1A                       		move.b	(a2)+,d6
00019E52                            
00019E52                            loc_17BC6:
00019E52 7800                       		moveq	#0,d4
00019E54 181A                       		move.b	(a2)+,d4
00019E56 ED4C                       		lsl.w	#6,d4
00019E58 0684 00FF D000             		addi.l	#$FFD000,d4
00019E5E 2244                       		movea.l	d4,a1
00019E60 101B                       		move.b	(a3)+,d0
00019E62 B029 003C                  		cmp.b	$3C(a1),d0
00019E66 6700                       		beq.s	loc_17BE0
00019E68 5229 003C                  		addq.b	#1,$3C(a1)
00019E6C                            
00019E6C                            loc_17BE0:
00019E6C 51CE FFE4                  		dbf	d6,loc_17BC6
00019E70                            
00019E70 B029 003C                  		cmp.b	$3C(a1),d0
00019E74 6600                       		bne.s	loc_17BFA
00019E76 2268 0034                  		movea.l	$34(a0),a1
00019E7A 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019E80 6600                       		bne.s	loc_17BFA
00019E82 5428 0024                  		addq.b	#2,$24(a0)
00019E86                            
00019E86                            loc_17BFA:
00019E86 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019E8C 6700                       		beq.s	Obj48_Display
00019E8E 5268 0032                  		addq.w	#1,$32(a0)
00019E92                            
00019E92                            Obj48_Display:
00019E92 6100 0000                  		bsr.w	sub_17C2A
00019E96 1028 0026                  		move.b	$26(a0),d0
00019E9A 4EB9 0000 8D26             		jsr	(Obj15_Move2).l
00019EA0 4EF9 0000 EB2E             		jmp	DisplaySprite
00019EA6                            ; ===========================================================================
00019EA6                            
00019EA6                            Obj48_Display2:				; XREF: Obj48_Index
00019EA6 6100 0000                  		bsr.w	sub_17C2A
00019EAA 4EB9 0000 8CE6             		jsr	(Obj48_Move).l
00019EB0 4EF9 0000 EB2E             		jmp	DisplaySprite
00019EB6                            
00019EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019EB6                            
00019EB6                            
00019EB6                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00019EB6 2268 0034                  		movea.l	$34(a0),a1
00019EBA 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019EC0 6400                       		bcc.s	loc_17C3C
00019EC2 0868 0000 001A             		bchg	#0,$1A(a0)
00019EC8                            
00019EC8                            loc_17C3C:
00019EC8 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019ECE 3029 000C                  		move.w	$C(a1),d0
00019ED2 D068 0032                  		add.w	$32(a0),d0
00019ED6 3140 0038                  		move.w	d0,$38(a0)
00019EDA 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019EE0 4A29 0022                  		tst.b	$22(a1)
00019EE4 6A00                       		bpl.s	locret_17C66
00019EE6 10BC 003F                  		move.b	#$3F,0(a0)
00019EEA 117C 0000 0024             		move.b	#0,$24(a0)
00019EF0                            
00019EF0                            locret_17C66:
00019EF0 4E75                       		rts	
00019EF2                            ; End of function sub_17C2A
00019EF2                            
00019EF2                            ; ===========================================================================
00019EF2                            
00019EF2                            loc_17C68:				; XREF: Obj48_Index
00019EF2 2268 0034                  		movea.l	$34(a0),a1
00019EF6 4A29 0022                  		tst.b	$22(a1)
00019EFA 6A00                       		bpl.s	Obj48_Display3
00019EFC 10BC 003F                  		move.b	#$3F,0(a0)
00019F00 117C 0000 0024             		move.b	#0,$24(a0)
00019F06                            
00019F06                            Obj48_Display3:
00019F06 4EF9 0000 EB2E             		jmp	DisplaySprite
00019F0C                            ; ===========================================================================
00019F0C                            
00019F0C                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019F0C 7000                       		moveq	#0,d0
00019F0E 4A28 001A                  		tst.b	$1A(a0)
00019F12 6600                       		bne.s	Obj48_Vanish
00019F14 5200                       		addq.b	#1,d0
00019F16                            
00019F16                            Obj48_Vanish:
00019F16 1140 001A                  		move.b	d0,$1A(a0)
00019F1A 2268 0034                  		movea.l	$34(a0),a1
00019F1E 4A29 0022                  		tst.b	$22(a1)
00019F22 6A00                       		bpl.s	Obj48_Display4
00019F24 117C 0000 0020             		move.b	#0,$20(a0)
00019F2A 6100 FB4E                  		bsr.w	BossDefeated
00019F2E 5328 003C                  		subq.b	#1,$3C(a0)
00019F32 6A00                       		bpl.s	Obj48_Display4
00019F34 10BC 003F                  		move.b	#$3F,(a0)
00019F38 117C 0000 0024             		move.b	#0,$24(a0)
00019F3E                            
00019F3E                            Obj48_Display4:
00019F3E 4EF9 0000 EB2E             		jmp	DisplaySprite
00019F44                            ; ===========================================================================
00019F44                            Ani_Eggman:
00019F44                            	include "_anim\Eggman.asm"
00019F44                            ; ---------------------------------------------------------------------------
00019F44                            ; Animation script - Eggman (bosses)
00019F44                            ; ---------------------------------------------------------------------------
00019F44 0000                       		dc.w byte_17CD4-Ani_Eggman
00019F46 0000                       		dc.w byte_17CD8-Ani_Eggman
00019F48 0000                       		dc.w byte_17CDC-Ani_Eggman
00019F4A 0000                       		dc.w byte_17CE0-Ani_Eggman
00019F4C 0000                       		dc.w byte_17CE4-Ani_Eggman
00019F4E 0000                       		dc.w byte_17CE8-Ani_Eggman
00019F50 0000                       		dc.w byte_17CEC-Ani_Eggman
00019F52 0000                       		dc.w byte_17CF0-Ani_Eggman
00019F54 0000                       		dc.w byte_17CF4-Ani_Eggman
00019F56 0000                       		dc.w byte_17CF8-Ani_Eggman
00019F58 0000                       		dc.w byte_17CFC-Ani_Eggman
00019F5A 0000                       		dc.w byte_17D00-Ani_Eggman
00019F5C 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019F60 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019F64 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019F68 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019F6C 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019F70 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019F74 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019F78 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019F7C 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019F80 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019F84 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019F88 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019F94                            		even
00019F94                            		even
00019F94                            
00019F94                            ; ---------------------------------------------------------------------------
00019F94                            ; Sprite mappings - Eggman (boss levels)
00019F94                            ; ---------------------------------------------------------------------------
00019F94                            Map_Eggman:
00019F94                            	include "_maps\Eggman.asm"
00019F94                            ; ---------------------------------------------------------------------------
00019F94                            ; Sprite mappings - Eggman (boss levels)
00019F94                            ; ---------------------------------------------------------------------------
00019F94 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019F98 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019F9C 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019FA0 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019FA4 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019FA8 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019FAC 0000                       		dc.w byte_17DC8-Map_Eggman
00019FAE 06                         byte_17D26:	dc.b 6
00019FAF EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019FB4 EC01 000E 14               		dc.b $EC, 1, 0,	$E, $14
00019FB9 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019FBE FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019FC3 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019FC8 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019FCD 02                         byte_17D45:	dc.b 2
00019FCE E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019FD3 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019FD8 02                         byte_17D50:	dc.b 2
00019FD9 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019FDE EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019FE3 03                         byte_17D5B:	dc.b 3
00019FE4 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019FE9 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019FEE EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019FF3 03                         byte_17D6B:	dc.b 3
00019FF4 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019FF9 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019FFE EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
0001A003 03                         byte_17D7B:	dc.b 3
0001A004 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001A009 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0001A00E EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001A013 03                         byte_17D8B:	dc.b 3
0001A014 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
0001A019 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001A01E EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001A023 04                         byte_17D9B:	dc.b 4
0001A024 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
0001A029 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001A02E EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0001A033 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001A038 01                         byte_17DB0:	dc.b 1
0001A039 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
0001A03E 01                         byte_17DB6:	dc.b 1
0001A03F 0405 0031 22               		dc.b 4,	5, 0, $31, $22
0001A044 00                         byte_17DBC:	dc.b 0
0001A045 02                         byte_17DBD:	dc.b 2
0001A046 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
0001A04B 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
0001A050 02                         byte_17DC8:	dc.b 2
0001A051 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
0001A056 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
0001A05C 00                         		even
0001A05C 00                         		even
0001A05C                            
0001A05C                            ; ---------------------------------------------------------------------------
0001A05C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001A05C                            ; ---------------------------------------------------------------------------
0001A05C                            Map_BossItems:
0001A05C                            	include "_maps\Boss items.asm"
0001A05C                            ; ---------------------------------------------------------------------------
0001A05C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001A05C                            ; ---------------------------------------------------------------------------
0001A05C 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001A060 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001A064 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001A068 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001A06C 01                         byte_17DE4:	dc.b 1
0001A06D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001A072 02                         byte_17DEA:	dc.b 2
0001A073 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001A078 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001A07D 00                         		dc.b 0
0001A07E 01                         byte_17DF6:	dc.b 1
0001A07F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001A084 01                         byte_17DFC:	dc.b 1
0001A085 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001A08A 01                         byte_17E02:	dc.b 1
0001A08B 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001A090 04                         byte_17E08:	dc.b 4
0001A091 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001A096 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001A09B F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001A0A0 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001A0A5 00                         		dc.b 0
0001A0A6 02                         byte_17E1E:	dc.b 2
0001A0A7 0005 0017 00               		dc.b 0,	5, 0, $17, 0
0001A0AC 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001A0B1 00                         		dc.b 0
0001A0B2 02                         byte_17E2A:	dc.b 2
0001A0B3 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001A0B8 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001A0BE 00                         		even
0001A0BE 00                         		even
0001A0BE                            
0001A0BE                            ; ===========================================================================
0001A0BE                            ; ---------------------------------------------------------------------------
0001A0BE                            ; Object 77 - Eggman (LZ)
0001A0BE                            ; ---------------------------------------------------------------------------
0001A0BE                            
0001A0BE                            Obj77:					; XREF: Obj_Index
0001A0BE 7000                       		moveq	#0,d0
0001A0C0 1028 0024                  		move.b	$24(a0),d0
0001A0C4 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001A0C8 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001A0CC                            ; ===========================================================================
0001A0CC 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001A0CE 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001A0D0 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001A0D2 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001A0D4                            
0001A0D4 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001A0D6 0401                       		dc.b 4,	1
0001A0D8 0607                       		dc.b 6,	7
0001A0DA                            ; ===========================================================================
0001A0DA                            
0001A0DA                            Obj77_Main:				; XREF: Obj77_Index
0001A0DA 317C 1E10 0008             		move.w	#$1E10,8(a0)
0001A0E0 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001A0E6 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A0EC 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A0F2 117C 000F 0020             		move.b	#$F,$20(a0)
0001A0F8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A0FE 117C 0004 0018             		move.b	#4,$18(a0)
0001A104 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001A108 2248                       		movea.l	a0,a1
0001A10A 7202                       		moveq	#2,d1
0001A10C 6000                       		bra.s	Obj77_LoadBoss
0001A10E                            ; ===========================================================================
0001A10E                            
0001A10E                            Obj77_Loop:
0001A10E 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001A114 6600                       		bne.s	Obj77_ShipMain
0001A116 12BC 0077                  		move.b	#$77,0(a1)
0001A11A 3368 0008 0008             		move.w	8(a0),8(a1)
0001A120 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A126                            
0001A126                            Obj77_LoadBoss:				; XREF: Obj77_Main
0001A126 08A8 0000 0022             		bclr	#0,$22(a0)
0001A12C 4229 0025                  		clr.b	$25(a1)
0001A130 135A 0024                  		move.b	(a2)+,$24(a1)
0001A134 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A138 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001A13E 237C 0001 9F94 0004        		move.l	#Map_Eggman,4(a1)
0001A146 337C 0400 0002             		move.w	#$400,2(a1)
0001A14C 137C 0004 0001             		move.b	#4,1(a1)
0001A152 137C 0020 0019             		move.b	#$20,$19(a1)
0001A158 2348 0034                  		move.l	a0,$34(a1)
0001A15C 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001A160                            
0001A160                            Obj77_ShipMain:
0001A160 43F8 D000                  		lea	($FFFFD000).w,a1
0001A164 7000                       		moveq	#0,d0
0001A166 1028 0025                  		move.b	$25(a0),d0
0001A16A 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001A16E 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001A172 43F9 0001 9F44             		lea	(Ani_Eggman).l,a1
0001A178 4EB9 0000 BB8E             		jsr	AnimateSprite
0001A17E 7003                       		moveq	#3,d0
0001A180 C028 0022                  		and.b	$22(a0),d0
0001A184 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A18A 8128 0001                  		or.b	d0,1(a0)
0001A18E 4EF9 0000 EB2E             		jmp	DisplaySprite
0001A194                            ; ===========================================================================
0001A194 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001A198 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001A19C 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001A1A0 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001A1A4                            ; ===========================================================================
0001A1A4                            
0001A1A4                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001A1A4 3029 0008                  		move.w	8(a1),d0
0001A1A8 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001A1AC 6500                       		bcs.s	loc_17F38
0001A1AE 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A1B4 317C 0060 0010             		move.w	#$60,$10(a0)
0001A1BA 5428 0025                  		addq.b	#2,$25(a0)
0001A1BE                            
0001A1BE                            loc_17F38:
0001A1BE 6100 F908                  		bsr.w	BossMove
0001A1C2 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A1C8 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A1CE                            
0001A1CE                            loc_17F48:
0001A1CE 4A28 003D                  		tst.b	$3D(a0)
0001A1D2 6600                       		bne.s	loc_17F8E
0001A1D4 4A28 0022                  		tst.b	$22(a0)
0001A1D8 6B00                       		bmi.s	loc_17F92
0001A1DA 4A28 0020                  		tst.b	$20(a0)
0001A1DE 6600                       		bne.s	locret_17F8C
0001A1E0 4A28 003E                  		tst.b	$3E(a0)
0001A1E4 6600                       		bne.s	loc_17F70
0001A1E6 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A1EC 303C 00AC                  		move.w	#$AC,d0
0001A1F0 4EB9 0000 1220             		jsr	(PlaySound_Special).l
0001A1F6                            
0001A1F6                            loc_17F70:
0001A1F6 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A1FA 7000                       		moveq	#0,d0
0001A1FC 4A51                       		tst.w	(a1)
0001A1FE 6600                       		bne.s	loc_17F7E
0001A200 303C 0EEE                  		move.w	#$EEE,d0
0001A204                            
0001A204                            loc_17F7E:
0001A204 3280                       		move.w	d0,(a1)
0001A206 5328 003E                  		subq.b	#1,$3E(a0)
0001A20A 6600                       		bne.s	locret_17F8C
0001A20C 117C 000F 0020             		move.b	#$F,$20(a0)
0001A212                            
0001A212                            locret_17F8C:
0001A212 4E75                       		rts	
0001A214                            ; ===========================================================================
0001A214                            
0001A214                            loc_17F8E:				; XREF: loc_17F48
0001A214 6000 F864                  		bra.w	BossDefeated
0001A218                            ; ===========================================================================
0001A218                            
0001A218                            loc_17F92:				; XREF: loc_17F48
0001A218 7064                       		moveq	#100,d0
0001A21A 6100 0000                  		bsr.w	AddPoints
0001A21E 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A224 4E75                       		rts	
0001A226                            ; ===========================================================================
0001A226                            
0001A226                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001A226 70FE                       		moveq	#-2,d0
0001A228 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001A22E 6500                       		bcs.s	loc_17FB6
0001A230 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001A236 4268 0010                  		clr.w	$10(a0)
0001A23A 5240                       		addq.w	#1,d0
0001A23C                            
0001A23C                            loc_17FB6:
0001A23C 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001A242 6E00                       		bgt.s	loc_17FCA
0001A244 317C 0500 0038             		move.w	#$500,$38(a0)
0001A24A 4268 0012                  		clr.w	$12(a0)
0001A24E 5240                       		addq.w	#1,d0
0001A250                            
0001A250                            loc_17FCA:
0001A250 6600                       		bne.s	loc_17FDC
0001A252 317C 0140 0010             		move.w	#$140,$10(a0)
0001A258 317C FE00 0012             		move.w	#-$200,$12(a0)
0001A25E 5428 0025                  		addq.b	#2,$25(a0)
0001A262                            
0001A262                            loc_17FDC:
0001A262 6000 FF5A                  		bra.w	loc_17F38
0001A266                            ; ===========================================================================
0001A266                            
0001A266                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001A266 70FE                       		moveq	#-2,d0
0001A268 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001A26E 6500                       		bcs.s	loc_17FF6
0001A270 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001A276 4268 0010                  		clr.w	$10(a0)
0001A27A 5240                       		addq.w	#1,d0
0001A27C                            
0001A27C                            loc_17FF6:
0001A27C 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001A282 6E00                       		bgt.s	loc_1800A
0001A284 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001A28A 4268 0012                  		clr.w	$12(a0)
0001A28E 5240                       		addq.w	#1,d0
0001A290                            
0001A290                            loc_1800A:
0001A290 6600                       		bne.s	loc_1801A
0001A292 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A298 5428 0025                  		addq.b	#2,$25(a0)
0001A29C 4228 003F                  		clr.b	$3F(a0)
0001A2A0                            
0001A2A0                            loc_1801A:
0001A2A0 6000 FF1C                  		bra.w	loc_17F38
0001A2A4                            ; ===========================================================================
0001A2A4                            
0001A2A4                            loc_1801E:				; XREF: Obj77_ShipIndex
0001A2A4 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001A2AA 6E00                       		bgt.s	loc_1804E
0001A2AC 317C 0100 0038             		move.w	#$100,$38(a0)
0001A2B2 317C 0140 0010             		move.w	#$140,$10(a0)
0001A2B8 317C FF80 0012             		move.w	#-$80,$12(a0)
0001A2BE 4A28 003D                  		tst.b	$3D(a0)
0001A2C2 6700                       		beq.s	loc_18046
0001A2C4 E1E8 0010                  		asl	$10(a0)
0001A2C8 E1E8 0012                  		asl	$12(a0)
0001A2CC                            
0001A2CC                            loc_18046:
0001A2CC 5428 0025                  		addq.b	#2,$25(a0)
0001A2D0 6000 FEEC                  		bra.w	loc_17F38
0001A2D4                            ; ===========================================================================
0001A2D4                            
0001A2D4                            loc_1804E:
0001A2D4 08E8 0000 0022             		bset	#0,$22(a0)
0001A2DA 5428 003F                  		addq.b	#2,$3F(a0)
0001A2DE 1028 003F                  		move.b	$3F(a0),d0
0001A2E2 4EB9 0000 29F6             		jsr	(CalcSine).l
0001A2E8 4A41                       		tst.w	d1
0001A2EA 6A00                       		bpl.s	loc_1806C
0001A2EC 08A8 0000 0022             		bclr	#0,$22(a0)
0001A2F2                            
0001A2F2                            loc_1806C:
0001A2F2 E840                       		asr.w	#4,d0
0001A2F4 4840                       		swap	d0
0001A2F6 4240                       		clr.w	d0
0001A2F8 D0A8 0030                  		add.l	$30(a0),d0
0001A2FC 4840                       		swap	d0
0001A2FE 3140 0008                  		move.w	d0,8(a0)
0001A302 3028 0012                  		move.w	$12(a0),d0
0001A306 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001A30A 9268 000C                  		sub.w	$C(a0),d1
0001A30E 6500                       		bcs.s	loc_180A2
0001A310 0441 0048                  		subi.w	#$48,d1
0001A314 6500                       		bcs.s	loc_180A2
0001A316 E240                       		asr.w	#1,d0
0001A318 0441 0028                  		subi.w	#$28,d1
0001A31C 6500                       		bcs.s	loc_180A2
0001A31E E240                       		asr.w	#1,d0
0001A320 0441 0028                  		subi.w	#$28,d1
0001A324 6500                       		bcs.s	loc_180A2
0001A326 7000                       		moveq	#0,d0
0001A328                            
0001A328                            loc_180A2:
0001A328 48C0                       		ext.l	d0
0001A32A E180                       		asl.l	#8,d0
0001A32C 4A28 003D                  		tst.b	$3D(a0)
0001A330 6700                       		beq.s	loc_180AE
0001A332 D080                       		add.l	d0,d0
0001A334                            
0001A334                            loc_180AE:
0001A334 D1A8 0038                  		add.l	d0,$38(a0)
0001A338 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A33E 6000 FE8E                  		bra.w	loc_17F48
0001A342                            ; ===========================================================================
0001A342                            
0001A342                            loc_180BC:				; XREF: Obj77_ShipIndex
0001A342 70FE                       		moveq	#-2,d0
0001A344 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001A34A 6500                       		bcs.s	loc_180D2
0001A34C 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001A352 4268 0010                  		clr.w	$10(a0)
0001A356 5240                       		addq.w	#1,d0
0001A358                            
0001A358                            loc_180D2:
0001A358 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001A35E 6E00                       		bgt.s	loc_180E6
0001A360 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001A366 4268 0012                  		clr.w	$12(a0)
0001A36A 5240                       		addq.w	#1,d0
0001A36C                            
0001A36C                            loc_180E6:
0001A36C 6600                       		bne.s	loc_180F2
0001A36E 5428 0025                  		addq.b	#2,$25(a0)
0001A372 08A8 0000 0022             		bclr	#0,$22(a0)
0001A378                            
0001A378                            loc_180F2:
0001A378 6000 FE44                  		bra.w	loc_17F38
0001A37C                            ; ===========================================================================
0001A37C                            
0001A37C                            loc_180F6:				; XREF: Obj77_ShipIndex
0001A37C 4A28 003D                  		tst.b	$3D(a0)
0001A380 6600                       		bne.s	loc_18112
0001A382 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001A388 6D00 0000                  		blt.w	loc_18126
0001A38C 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001A392 6E00 0000                  		bgt.w	loc_18126
0001A396 117C 0032 003C             		move.b	#$32,$3C(a0)
0001A39C                            
0001A39C                            loc_18112:
0001A39C 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated	
0001A402 303C 0082                  		move.w	#$82,d0
0001A406 4EB9 0000 121A             		jsr	(PlaySound).l	; play LZ music
0001A40C 08E8 0000 0022             		bset	#0,$22(a0)
0001A412 5428 0025                  		addq.b	#2,$25(a0)
0001A416                            
0001A416                            loc_18126:
0001A416 6000 FDA6                  		bra.w	loc_17F38
0001A41A                            ; ===========================================================================
0001A41A                            
0001A41A                            loc_1812A:				; XREF: Obj77_ShipIndex
0001A41A 4A28 003D                  		tst.b	$3D(a0)
0001A41E 6600                       		bne.s	loc_18136
0001A420 5328 003C                  		subq.b	#1,$3C(a0)
0001A424 6600                       		bne.s	loc_1814E
0001A426                            
0001A426                            loc_18136:
0001A426 4228 003C                  		clr.b	$3C(a0)
0001A42A 317C 0400 0010             		move.w	#$400,$10(a0)
0001A430 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A436 4228 003D                  		clr.b	$3D(a0)
0001A43A 5428 0025                  		addq.b	#2,$25(a0)
0001A43E                            
0001A43E                            loc_1814E:
0001A43E 6000 FD7E                  		bra.w	loc_17F38
0001A442                            ; ===========================================================================
0001A442                            
0001A442                            loc_18152:				; XREF: Obj77_ShipIndex
0001A442 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001A448 6400                       		bcc.s	loc_18160
0001A44A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A44E 6000                       		bra.s	loc_18166
0001A450                            ; ===========================================================================
0001A450                            
0001A450                            loc_18160:
0001A450 4A28 0001                  		tst.b	1(a0)
0001A454 6A00                       		bpl.s	Obj77_ShipDel
0001A456                            
0001A456                            loc_18166:
0001A456 6000 FD66                  		bra.w	loc_17F38
0001A45A                            ; ===========================================================================
0001A45A                            
0001A45A                            Obj77_ShipDel:
0001A45A 4EF9 0000 EB7E             		jmp	DeleteObject
0001A460                            ; ===========================================================================
0001A460                            
0001A460                            Obj77_FaceMain:				; XREF: Obj77_Index
0001A460 2268 0034                  		movea.l	$34(a0),a1
0001A464 1011                       		move.b	(a1),d0
0001A466 B010                       		cmp.b	(a0),d0
0001A468 6600                       		bne.s	Obj77_FaceDel
0001A46A 7000                       		moveq	#0,d0
0001A46C 1029 0025                  		move.b	$25(a1),d0
0001A470 7201                       		moveq	#1,d1
0001A472 4A28 003D                  		tst.b	$3D(a0)
0001A476 6700                       		beq.s	loc_1818C
0001A478 720A                       		moveq	#$A,d1
0001A47A 6000                       		bra.s	loc_181A0
0001A47C                            ; ===========================================================================
0001A47C                            
0001A47C                            loc_1818C:
0001A47C 4A29 0020                  		tst.b	$20(a1)
0001A480 6600                       		bne.s	loc_18196
0001A482 7205                       		moveq	#5,d1
0001A484 6000                       		bra.s	loc_181A0
0001A486                            ; ===========================================================================
0001A486                            
0001A486                            loc_18196:
0001A486 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A48C 6500                       		bcs.s	loc_181A0
0001A48E 7204                       		moveq	#4,d1
0001A490                            
0001A490                            loc_181A0:
0001A490 1141 001C                  		move.b	d1,$1C(a0)
0001A494 0C00 000E                  		cmpi.b	#$E,d0
0001A498 6600                       		bne.s	loc_181B6
0001A49A 117C 0006 001C             		move.b	#6,$1C(a0)
0001A4A0 4A28 0001                  		tst.b	1(a0)
0001A4A4 6A00                       		bpl.s	Obj77_FaceDel
0001A4A6                            
0001A4A6                            loc_181B6:
0001A4A6 6000                       		bra.s	Obj77_Display
0001A4A8                            ; ===========================================================================
0001A4A8                            
0001A4A8                            Obj77_FaceDel:
0001A4A8 4EF9 0000 EB7E             		jmp	DeleteObject
0001A4AE                            ; ===========================================================================
0001A4AE                            
0001A4AE                            Obj77_FlameMain:			; XREF: Obj77_Index
0001A4AE 117C 0007 001C             		move.b	#7,$1C(a0)
0001A4B4 2268 0034                  		movea.l	$34(a0),a1
0001A4B8 1011                       		move.b	(a1),d0
0001A4BA B010                       		cmp.b	(a0),d0
0001A4BC 6600                       		bne.s	Obj77_FlameDel
0001A4BE 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001A4C4 6600                       		bne.s	loc_181F0
0001A4C6 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A4CC 4A28 0001                  		tst.b	1(a0)
0001A4D0 6A00                       		bpl.s	Obj77_FlameDel
0001A4D2 6000                       		bra.s	loc_181F0
0001A4D4                            ; ===========================================================================
0001A4D4 4A69 0010                  		tst.w	$10(a1)
0001A4D8 6700                       		beq.s	loc_181F0
0001A4DA 117C 0008 001C             		move.b	#8,$1C(a0)
0001A4E0                            
0001A4E0                            loc_181F0:
0001A4E0 6000                       		bra.s	Obj77_Display
0001A4E2                            ; ===========================================================================
0001A4E2                            
0001A4E2                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001A4E2 4EF9 0000 EB7E             		jmp	DeleteObject
0001A4E8                            ; ===========================================================================
0001A4E8                            
0001A4E8                            Obj77_Display:
0001A4E8 43F9 0001 9F44             		lea	(Ani_Eggman).l,a1
0001A4EE 4EB9 0000 BB8E             		jsr	AnimateSprite
0001A4F4 2268 0034                  		movea.l	$34(a0),a1
0001A4F8 3169 0008 0008             		move.w	8(a1),8(a0)
0001A4FE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A504 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A50A 7003                       		moveq	#3,d0
0001A50C C028 0022                  		and.b	$22(a0),d0
0001A510 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A516 8128 0001                  		or.b	d0,1(a0)
0001A51A 4EF9 0000 EB2E             		jmp	DisplaySprite
0001A520                            ; ===========================================================================
0001A520                            ; ---------------------------------------------------------------------------
0001A520                            ; Object 73 - Eggman (MZ)
0001A520                            ; ---------------------------------------------------------------------------
0001A520                            
0001A520                            Obj73:					; XREF: Obj_Index
0001A520 7000                       		moveq	#0,d0
0001A522 1028 0024                  		move.b	$24(a0),d0
0001A526 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001A52A 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001A52E                            ; ===========================================================================
0001A52E 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001A530 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001A532 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001A534 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001A536 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001A538                            
0001A538 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A53B 0401 04                    		dc.b 4,	1, 4
0001A53E 0607 04                    		dc.b 6,	7, 4
0001A541 0800 03                    		dc.b 8,	0, 3
0001A544                            ; ===========================================================================
0001A544                            
0001A544                            Obj73_Main:				; XREF: Obj73_Index
0001A544 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A54A 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A550 117C 000F 0020             		move.b	#$F,$20(a0)
0001A556 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A55C 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A560 2248                       		movea.l	a0,a1
0001A562 7203                       		moveq	#3,d1
0001A564 6000                       		bra.s	Obj73_LoadBoss
0001A566                            ; ===========================================================================
0001A566                            
0001A566                            Obj73_Loop:
0001A566 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001A56C 6600                       		bne.s	Obj73_ShipMain
0001A56E 12BC 0073                  		move.b	#$73,0(a1)
0001A572 3368 0008 0008             		move.w	8(a0),8(a1)
0001A578 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A57E                            
0001A57E                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A57E 08A8 0000 0022             		bclr	#0,$22(a0)
0001A584 4229 0025                  		clr.b	$25(a1)
0001A588 135A 0024                  		move.b	(a2)+,$24(a1)
0001A58C 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A590 135A 0018                  		move.b	(a2)+,$18(a1)
0001A594 237C 0001 9F94 0004        		move.l	#Map_Eggman,4(a1)
0001A59C 337C 0400 0002             		move.w	#$400,2(a1)
0001A5A2 137C 0004 0001             		move.b	#4,1(a1)
0001A5A8 137C 0020 0019             		move.b	#$20,$19(a1)
0001A5AE 2348 0034                  		move.l	a0,$34(a1)
0001A5B2 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A5B6                            
0001A5B6                            Obj73_ShipMain:
0001A5B6 7000                       		moveq	#0,d0
0001A5B8 1028 0025                  		move.b	$25(a0),d0
0001A5BC 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A5C0 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A5C4 43F9 0001 9F44             		lea	(Ani_Eggman).l,a1
0001A5CA 4EB9 0000 BB8E             		jsr	AnimateSprite
0001A5D0 7003                       		moveq	#3,d0
0001A5D2 C028 0022                  		and.b	$22(a0),d0
0001A5D6 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A5DC 8128 0001                  		or.b	d0,1(a0)
0001A5E0 4EF9 0000 EB2E             		jmp	DisplaySprite
0001A5E6                            ; ===========================================================================
0001A5E6 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A5E8 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A5EA 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A5EC 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A5EE 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A5F0                            ; ===========================================================================
0001A5F0                            
0001A5F0                            loc_18302:				; XREF: Obj73_ShipIndex
0001A5F0 1028 003F                  		move.b	$3F(a0),d0
0001A5F4 5428 003F                  		addq.b	#2,$3F(a0)
0001A5F8 4EB9 0000 29F6             		jsr	(CalcSine).l
0001A5FE E440                       		asr.w	#2,d0
0001A600 3140 0012                  		move.w	d0,$12(a0)
0001A604 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A60A 6100 F4BC                  		bsr.w	BossMove
0001A60E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A614 6600                       		bne.s	loc_18334
0001A616 5428 0025                  		addq.b	#2,$25(a0)
0001A61A 4228 0028                  		clr.b	$28(a0)
0001A61E 42A8 0010                  		clr.l	$10(a0)
0001A622                            
0001A622                            loc_18334:
0001A622 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001A628 1140 0034                  		move.b	d0,$34(a0)
0001A62C                            
0001A62C                            loc_1833E:
0001A62C 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A632 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A638 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A63E 6400                       		bcc.s	locret_18390
0001A640 4A28 0022                  		tst.b	$22(a0)
0001A644 6B00                       		bmi.s	loc_18392
0001A646 4A28 0020                  		tst.b	$20(a0)
0001A64A 6600                       		bne.s	locret_18390
0001A64C 4A28 003E                  		tst.b	$3E(a0)
0001A650 6600                       		bne.s	loc_18374
0001A652 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A658 303C 00AC                  		move.w	#$AC,d0
0001A65C 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A662                            
0001A662                            loc_18374:
0001A662 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A666 7000                       		moveq	#0,d0
0001A668 4A51                       		tst.w	(a1)
0001A66A 6600                       		bne.s	loc_18382
0001A66C 303C 0EEE                  		move.w	#$EEE,d0
0001A670                            
0001A670                            loc_18382:
0001A670 3280                       		move.w	d0,(a1)
0001A672 5328 003E                  		subq.b	#1,$3E(a0)
0001A676 6600                       		bne.s	locret_18390
0001A678 117C 000F 0020             		move.b	#$F,$20(a0)
0001A67E                            
0001A67E                            locret_18390:
0001A67E 4E75                       		rts	
0001A680                            ; ===========================================================================
0001A680                            
0001A680                            loc_18392:				; XREF: loc_1833E
0001A680 7064                       		moveq	#100,d0
0001A682 6100 0000                  		bsr.w	AddPoints
0001A686 117C 0004 0025             		move.b	#4,$25(a0)
0001A68C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A692 4268 0010                  		clr.w	$10(a0)
0001A696 4E75                       		rts	
0001A698                            ; ===========================================================================
0001A698                            
0001A698                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A698 7000                       		moveq	#0,d0
0001A69A 1028 0028                  		move.b	$28(a0),d0
0001A69E 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A6A2 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A6A6 0228 0006 0028             		andi.b	#6,$28(a0)
0001A6AC 6000 FF7E                  		bra.w	loc_1833E
0001A6B0                            ; ===========================================================================
0001A6B0 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A6B2 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A6B4 0000                       		dc.w loc_183CA-off_183C2
0001A6B6 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A6B8                            ; ===========================================================================
0001A6B8                            
0001A6B8                            loc_183CA:				; XREF: off_183C2
0001A6B8 4A68 0010                  		tst.w	$10(a0)
0001A6BC 6600                       		bne.s	loc_183FE
0001A6BE 7040                       		moveq	#$40,d0
0001A6C0 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A6C6 6700                       		beq.s	loc_183E6
0001A6C8 6500                       		bcs.s	loc_183DE
0001A6CA 4440                       		neg.w	d0
0001A6CC                            
0001A6CC                            loc_183DE:
0001A6CC 3140 0012                  		move.w	d0,$12(a0)
0001A6D0 6000 F3F6                  		bra.w	BossMove
0001A6D4                            ; ===========================================================================
0001A6D4                            
0001A6D4                            loc_183E6:
0001A6D4 317C 0200 0010             		move.w	#$200,$10(a0)
0001A6DA 317C 0100 0012             		move.w	#$100,$12(a0)
0001A6E0 0828 0000 0022             		btst	#0,$22(a0)
0001A6E6 6600                       		bne.s	loc_183FE
0001A6E8 4468 0010                  		neg.w	$10(a0)
0001A6EC                            
0001A6EC                            loc_183FE:
0001A6EC 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A6F2 6400                       		bcc.s	Obj73_MakeLava
0001A6F4 6100 F3D2                  		bsr.w	BossMove
0001A6F8 5968 0012                  		subq.w	#4,$12(a0)
0001A6FC                            
0001A6FC                            Obj73_MakeLava:
0001A6FC 5328 0034                  		subq.b	#1,$34(a0)
0001A700 6400                       		bcc.s	loc_1845C
0001A702 4EB9 0000 F284             		jsr	SingleObjLoad
0001A708 6600                       		bne.s	loc_1844A
0001A70A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A70E 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A714 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001A71A 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A720 80FC 0050                  		divu.w	#$50,d0
0001A724 4840                       		swap	d0
0001A726 0640 1878                  		addi.w	#$1878,d0
0001A72A 3340 0008                  		move.w	d0,8(a1)
0001A72E EE09                       		lsr.b	#7,d1
0001A730 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A736                            
0001A736                            loc_1844A:
0001A736 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001A73C 0200 001F                  		andi.b	#$1F,d0
0001A740 0600 0040                  		addi.b	#$40,d0
0001A744 1140 0034                  		move.b	d0,$34(a0)
0001A748                            
0001A748                            loc_1845C:
0001A748 0828 0000 0022             		btst	#0,$22(a0)
0001A74E 6700                       		beq.s	loc_18474
0001A750 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A756 6D00                       		blt.s	locret_1849C
0001A758 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A75E 6000                       		bra.s	loc_18482
0001A760                            ; ===========================================================================
0001A760                            
0001A760                            loc_18474:
0001A760 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A766 6E00                       		bgt.s	locret_1849C
0001A768 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A76E                            
0001A76E                            loc_18482:
0001A76E 4268 0010                  		clr.w	$10(a0)
0001A772 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A778 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A77E 6400                       		bcc.s	loc_18498
0001A780 4468 0012                  		neg.w	$12(a0)
0001A784                            
0001A784                            loc_18498:
0001A784 5428 0028                  		addq.b	#2,$28(a0)
0001A788                            
0001A788                            locret_1849C:
0001A788 4E75                       		rts	
0001A78A                            ; ===========================================================================
0001A78A                            
0001A78A                            Obj73_MakeLava2:			; XREF: off_183C2
0001A78A 6100 F33C                  		bsr.w	BossMove
0001A78E 3028 0038                  		move.w	$38(a0),d0
0001A792 0440 022C                  		subi.w	#$22C,d0
0001A796 6E00                       		bgt.s	locret_184F4
0001A798 303C 022C                  		move.w	#$22C,d0
0001A79C 4A68 0012                  		tst.w	$12(a0)
0001A7A0 6700                       		beq.s	loc_184EA
0001A7A2 4268 0012                  		clr.w	$12(a0)
0001A7A6 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A7AC 0868 0000 0022             		bchg	#0,$22(a0)
0001A7B2 4EB9 0000 F284             		jsr	SingleObjLoad
0001A7B8 6600                       		bne.s	loc_184EA
0001A7BA 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A7C0 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A7C6 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A7CC 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A7D0 137C 0001 0028             		move.b	#1,$28(a1)
0001A7D6                            
0001A7D6                            loc_184EA:
0001A7D6 5368 003C                  		subq.w	#1,$3C(a0)
0001A7DA 6600                       		bne.s	locret_184F4
0001A7DC 5428 0028                  		addq.b	#2,$28(a0)
0001A7E0                            
0001A7E0                            locret_184F4:
0001A7E0 4E75                       		rts	
0001A7E2                            ; ===========================================================================
0001A7E2                            
0001A7E2                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A7E2 5368 003C                  		subq.w	#1,$3C(a0)
0001A7E6 6B00                       		bmi.s	loc_18500
0001A7E8 6000 F290                  		bra.w	BossDefeated
0001A7EC                            ; ===========================================================================
0001A7EC                            
0001A7EC                            loc_18500:
0001A7EC 08E8 0000 0022             		bset	#0,$22(a0)
0001A7F2 08A8 0007 0022             		bclr	#7,$22(a0)
0001A7F8 4268 0010                  		clr.w	$10(a0)
0001A7FC 5428 0025                  		addq.b	#2,$25(a0)
0001A800 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A806 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A80A 6600                       		bne.s	locret_1852A
0001A80C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A812 4268 0012                  		clr.w	$12(a0)
0001A816                            
0001A816                            locret_1852A:
0001A816 4E75                       		rts	
0001A818                            ; ===========================================================================
0001A818                            
0001A818                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A818 5268 003C                  		addq.w	#1,$3C(a0)
0001A81C 6700                       		beq.s	loc_18544
0001A81E 6A00                       		bpl.s	loc_1854E
0001A820 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A826 6400                       		bcc.s	loc_18544
0001A828 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A82E 6000 0000                  		bra.w	loc_1857A
0001A832                            ; ===========================================================================
0001A832                            
0001A832                            loc_18544:
0001A832 4268 0012                  		clr.w	$12(a0)
0001A836 4268 003C                  		clr.w	$3C(a0)
0001A83A 6000 0000                  		bra.w	loc_1857A
0001A83E                            ; ===========================================================================
0001A83E                            
0001A83E                            loc_1854E:
0001A83E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A844 6500                       		bcs.s	loc_18566
0001A846 6700                       		beq.s	loc_1856C
0001A848 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A84E 6500 0000                  		bcs.w	loc_1857A
0001A852 5428 0025                  		addq.b	#2,$25(a0)
0001A856 6000                       		bra.s	loc_1857A
0001A858                            ; ===========================================================================
0001A858                            
0001A858                            loc_18566:
0001A858 5168 0012                  		subq.w	#8,$12(a0)
0001A85C 6000                       		bra.s	loc_1857A
0001A85E                            ; ===========================================================================
0001A85E                            
0001A85E                            loc_1856C:
0001A85E 4268 0012                  		clr.w	$12(a0)
0001A862 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated			
0001A8C8 303C 0083                  		move.w	#$83,d0
0001A8CC 4EB9 0000 121A             		jsr	(PlaySound).l	; play MZ music
0001A8D2                            
0001A8D2                            loc_1857A:
0001A8D2 6100 F1F4                  		bsr.w	BossMove
0001A8D6 6000 FD54                  		bra.w	loc_1833E
0001A8DA                            ; ===========================================================================
0001A8DA                            
0001A8DA                            loc_18582:				; XREF: Obj73_ShipIndex
0001A8DA 317C 0500 0010             		move.w	#$500,$10(a0)
0001A8E0 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A8E6 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A8EC 6400                       		bcc.s	loc_1859C
0001A8EE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A8F2 6000                       		bra.s	loc_185A2
0001A8F4                            ; ===========================================================================
0001A8F4                            
0001A8F4                            loc_1859C:
0001A8F4 4A28 0001                  		tst.b	1(a0)
0001A8F8 6A00                       		bpl.s	Obj73_ShipDel
0001A8FA                            
0001A8FA                            loc_185A2:
0001A8FA 6100 F1CC                  		bsr.w	BossMove
0001A8FE 6000 FD2C                  		bra.w	loc_1833E
0001A902                            ; ===========================================================================
0001A902                            
0001A902                            Obj73_ShipDel:
0001A902 4EF9 0000 EB7E             		jmp	DeleteObject
0001A908                            ; ===========================================================================
0001A908                            
0001A908                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A908 7000                       		moveq	#0,d0
0001A90A 7201                       		moveq	#1,d1
0001A90C 2268 0034                  		movea.l	$34(a0),a1
0001A910 1029 0025                  		move.b	$25(a1),d0
0001A914 5540                       		subq.w	#2,d0
0001A916 6600                       		bne.s	loc_185D2
0001A918 0829 0001 0028             		btst	#1,$28(a1)
0001A91E 6700                       		beq.s	loc_185DA
0001A920 4A69 0012                  		tst.w	$12(a1)
0001A924 6600                       		bne.s	loc_185DA
0001A926 7204                       		moveq	#4,d1
0001A928 6000                       		bra.s	loc_185EE
0001A92A                            ; ===========================================================================
0001A92A                            
0001A92A                            loc_185D2:
0001A92A 5500                       		subq.b	#2,d0
0001A92C 6B00                       		bmi.s	loc_185DA
0001A92E 720A                       		moveq	#$A,d1
0001A930 6000                       		bra.s	loc_185EE
0001A932                            ; ===========================================================================
0001A932                            
0001A932                            loc_185DA:
0001A932 4A29 0020                  		tst.b	$20(a1)
0001A936 6600                       		bne.s	loc_185E4
0001A938 7205                       		moveq	#5,d1
0001A93A 6000                       		bra.s	loc_185EE
0001A93C                            ; ===========================================================================
0001A93C                            
0001A93C                            loc_185E4:
0001A93C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A942 6500                       		bcs.s	loc_185EE
0001A944 7204                       		moveq	#4,d1
0001A946                            
0001A946                            loc_185EE:
0001A946 1141 001C                  		move.b	d1,$1C(a0)
0001A94A 5900                       		subq.b	#4,d0
0001A94C 6600                       		bne.s	loc_18602
0001A94E 117C 0006 001C             		move.b	#6,$1C(a0)
0001A954 4A28 0001                  		tst.b	1(a0)
0001A958 6A00                       		bpl.s	Obj73_FaceDel
0001A95A                            
0001A95A                            loc_18602:
0001A95A 6000                       		bra.s	Obj73_Display
0001A95C                            ; ===========================================================================
0001A95C                            
0001A95C                            Obj73_FaceDel:
0001A95C 4EF9 0000 EB7E             		jmp	DeleteObject
0001A962                            ; ===========================================================================
0001A962                            
0001A962                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A962 117C 0007 001C             		move.b	#7,$1C(a0)
0001A968 2268 0034                  		movea.l	$34(a0),a1
0001A96C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A972 6D00                       		blt.s	loc_1862A
0001A974 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A97A 4A28 0001                  		tst.b	1(a0)
0001A97E 6A00                       		bpl.s	Obj73_FlameDel
0001A980 6000                       		bra.s	loc_18636
0001A982                            ; ===========================================================================
0001A982                            
0001A982                            loc_1862A:
0001A982 4A69 0010                  		tst.w	$10(a1)
0001A986 6700                       		beq.s	loc_18636
0001A988 117C 0008 001C             		move.b	#8,$1C(a0)
0001A98E                            
0001A98E                            loc_18636:
0001A98E 6000                       		bra.s	Obj73_Display
0001A990                            ; ===========================================================================
0001A990                            
0001A990                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A990 4EF9 0000 EB7E             		jmp	DeleteObject
0001A996                            ; ===========================================================================
0001A996                            
0001A996                            Obj73_Display:
0001A996 43F9 0001 9F44             		lea	(Ani_Eggman).l,a1
0001A99C 4EB9 0000 BB8E             		jsr	AnimateSprite
0001A9A2                            
0001A9A2                            loc_1864A:
0001A9A2 2268 0034                  		movea.l	$34(a0),a1
0001A9A6 3169 0008 0008             		move.w	8(a1),8(a0)
0001A9AC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A9B2 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A9B8 7003                       		moveq	#3,d0
0001A9BA C028 0022                  		and.b	$22(a0),d0
0001A9BE 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A9C4 8128 0001                  		or.b	d0,1(a0)
0001A9C8 4EF9 0000 EB2E             		jmp	DisplaySprite
0001A9CE                            ; ===========================================================================
0001A9CE                            
0001A9CE                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A9CE 2268 0034                  		movea.l	$34(a0),a1
0001A9D2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A9D8 6600                       		bne.s	loc_18688
0001A9DA 4A28 0001                  		tst.b	1(a0)
0001A9DE 6A00                       		bpl.s	Obj73_TubeDel
0001A9E0                            
0001A9E0                            loc_18688:
0001A9E0 217C 0001 A05C 0004        		move.l	#Map_BossItems,4(a0)
0001A9E8 317C 246C 0002             		move.w	#$246C,2(a0)
0001A9EE 117C 0004 001A             		move.b	#4,$1A(a0)
0001A9F4 60AC                       		bra.s	loc_1864A
0001A9F6                            ; ===========================================================================
0001A9F6                            
0001A9F6                            Obj73_TubeDel:
0001A9F6 4EF9 0000 EB7E             		jmp	DeleteObject
0001A9FC                            ; ===========================================================================
0001A9FC                            ; ---------------------------------------------------------------------------
0001A9FC                            ; Object 74 - lava that	Eggman drops (MZ)
0001A9FC                            ; ---------------------------------------------------------------------------
0001A9FC                            
0001A9FC                            Obj74:					; XREF: Obj_Index
0001A9FC 7000                       		moveq	#0,d0
0001A9FE 1028 0024                  		move.b	$24(a0),d0
0001AA02 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001AA06 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001AA0A 4EF9 0000 EB2E             		jmp	DisplaySprite
0001AA10                            ; ===========================================================================
0001AA10 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001AA12 0000                       		dc.w Obj74_Action-Obj74_Index
0001AA14 0000                       		dc.w loc_18886-Obj74_Index
0001AA16 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001AA18                            ; ===========================================================================
0001AA18                            
0001AA18                            Obj74_Main:				; XREF: Obj74_Index
0001AA18 117C 0008 0016             		move.b	#8,$16(a0)
0001AA1E 117C 0008 0017             		move.b	#8,$17(a0)
0001AA24 217C 0000 C828 0004        		move.l	#Map_obj14,4(a0)
0001AA2C 317C 0345 0002             		move.w	#$345,2(a0)
0001AA32 117C 0004 0001             		move.b	#4,1(a0)
0001AA38 117C 0005 0018             		move.b	#5,$18(a0)
0001AA3E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AA44 117C 0008 0019             		move.b	#8,$19(a0)
0001AA4A 5428 0024                  		addq.b	#2,$24(a0)
0001AA4E 4A28 0028                  		tst.b	$28(a0)
0001AA52 6600                       		bne.s	loc_1870A
0001AA54 117C 008B 0020             		move.b	#$8B,$20(a0)
0001AA5A 5428 0024                  		addq.b	#2,$24(a0)
0001AA5E 6000 0000                  		bra.w	loc_18886
0001AA62                            ; ===========================================================================
0001AA62                            
0001AA62                            loc_1870A:
0001AA62 117C 001E 0029             		move.b	#$1E,$29(a0)
0001AA68 303C 00AE                  		move.w	#$AE,d0
0001AA6C 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play lava sound
0001AA72                            
0001AA72                            Obj74_Action:				; XREF: Obj74_Index
0001AA72 7000                       		moveq	#0,d0
0001AA74 1028 0025                  		move.b	$25(a0),d0
0001AA78 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001AA7C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001AA80 4EB9 0000 EB14             		jsr	SpeedToPos
0001AA86 43F9 0000 FF3E             		lea	(Ani_obj14).l,a1
0001AA8C 4EB9 0000 BB8E             		jsr	AnimateSprite
0001AA92 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001AA98 6200                       		bhi.s	Obj74_Delete
0001AA9A 4E75                       		rts	
0001AA9C                            ; ===========================================================================
0001AA9C                            
0001AA9C                            Obj74_Delete:
0001AA9C 4EF9 0000 EB7E             		jmp	DeleteObject
0001AAA2                            ; ===========================================================================
0001AAA2 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001AAA4 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001AAA6 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001AAA8 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001AAAA                            ; ===========================================================================
0001AAAA                            
0001AAAA                            Obj74_Drop:				; XREF: Obj74_Index2
0001AAAA 08E8 0001 0022             		bset	#1,$22(a0)
0001AAB0 5328 0029                  		subq.b	#1,$29(a0)
0001AAB4 6A00                       		bpl.s	locret_18780
0001AAB6 117C 008B 0020             		move.b	#$8B,$20(a0)
0001AABC 4228 0028                  		clr.b	$28(a0)
0001AAC0 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AAC6 08A8 0001 0022             		bclr	#1,$22(a0)
0001AACC 6100 C58C                  		bsr.w	ObjHitFloor
0001AAD0 4A41                       		tst.w	d1
0001AAD2 6A00                       		bpl.s	locret_18780
0001AAD4 5428 0025                  		addq.b	#2,$25(a0)
0001AAD8                            
0001AAD8                            locret_18780:
0001AAD8 4E75                       		rts	
0001AADA                            ; ===========================================================================
0001AADA                            
0001AADA                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001AADA 5568 000C                  		subq.w	#2,$C(a0)
0001AADE 08E8 0007 0002             		bset	#7,2(a0)
0001AAE4 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001AAEA 4268 0012                  		clr.w	$12(a0)
0001AAEE 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AAF4 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AAFA 117C 0003 0029             		move.b	#3,$29(a0)
0001AB00 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001AB06 6600                       		bne.s	loc_187CA
0001AB08 47D1                       		lea	(a1),a3
0001AB0A 45D0                       		lea	(a0),a2
0001AB0C 7003                       		moveq	#3,d0
0001AB0E                            
0001AB0E                            Obj74_Loop:
0001AB0E 26DA                       		move.l	(a2)+,(a3)+
0001AB10 26DA                       		move.l	(a2)+,(a3)+
0001AB12 26DA                       		move.l	(a2)+,(a3)+
0001AB14 26DA                       		move.l	(a2)+,(a3)+
0001AB16 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001AB1A                            
0001AB1A 4469 0010                  		neg.w	$10(a1)
0001AB1E 5429 0025                  		addq.b	#2,$25(a1)
0001AB22                            
0001AB22                            loc_187CA:
0001AB22 5428 0025                  		addq.b	#2,$25(a0)
0001AB26 4E75                       		rts	
0001AB28                            
0001AB28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AB28                            
0001AB28                            
0001AB28                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001AB28 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001AB2E 6600                       		bne.s	locret_187EE
0001AB30 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB36 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AB3C 12BC 0074                  		move.b	#$74,(a1)
0001AB40 337C 0067 0028             		move.w	#$67,$28(a1)
0001AB46                            
0001AB46                            locret_187EE:
0001AB46 4E75                       		rts	
0001AB48                            ; End of function Obj74_Duplicate2
0001AB48                            
0001AB48                            ; ===========================================================================
0001AB48                            
0001AB48                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001AB48 6100 C510                  		bsr.w	ObjHitFloor
0001AB4C 4A41                       		tst.w	d1
0001AB4E 6A00                       		bpl.s	loc_18826
0001AB50 3028 0008                  		move.w	8(a0),d0
0001AB54 0C40 1940                  		cmpi.w	#$1940,d0
0001AB58 6E00                       		bgt.s	loc_1882C
0001AB5A 3228 0030                  		move.w	$30(a0),d1
0001AB5E B240                       		cmp.w	d0,d1
0001AB60 6700                       		beq.s	loc_1881E
0001AB62 0240 0010                  		andi.w	#$10,d0
0001AB66 0241 0010                  		andi.w	#$10,d1
0001AB6A B240                       		cmp.w	d0,d1
0001AB6C 6700                       		beq.s	loc_1881E
0001AB6E 61B8                       		bsr.s	Obj74_Duplicate2
0001AB70 3168 0008 0032             		move.w	8(a0),$32(a0)
0001AB76                            
0001AB76                            loc_1881E:
0001AB76 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AB7C 4E75                       		rts	
0001AB7E                            ; ===========================================================================
0001AB7E                            
0001AB7E                            loc_18826:
0001AB7E 5428 0025                  		addq.b	#2,$25(a0)
0001AB82 4E75                       		rts	
0001AB84                            ; ===========================================================================
0001AB84                            
0001AB84                            loc_1882C:
0001AB84 5428 0024                  		addq.b	#2,$24(a0)
0001AB88 4E75                       		rts	
0001AB8A                            ; ===========================================================================
0001AB8A                            
0001AB8A                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001AB8A 08A8 0001 0022             		bclr	#1,$22(a0)
0001AB90 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001AB96 3028 0008                  		move.w	8(a0),d0
0001AB9A 9068 0032                  		sub.w	$32(a0),d0
0001AB9E 6A00                       		bpl.s	loc_1884A
0001ABA0 4440                       		neg.w	d0
0001ABA2                            
0001ABA2                            loc_1884A:
0001ABA2 0C40 0012                  		cmpi.w	#$12,d0
0001ABA6 6600                       		bne.s	loc_18856
0001ABA8 08A8 0007 0002             		bclr	#7,2(a0)
0001ABAE                            
0001ABAE                            loc_18856:
0001ABAE 6100 C4AA                  		bsr.w	ObjHitFloor
0001ABB2 4A41                       		tst.w	d1
0001ABB4 6A00                       		bpl.s	locret_1887E
0001ABB6 5328 0029                  		subq.b	#1,$29(a0)
0001ABBA 6700                       		beq.s	Obj74_Delete2
0001ABBC 4268 0012                  		clr.w	$12(a0)
0001ABC0 3168 0032 0008             		move.w	$32(a0),8(a0)
0001ABC6 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001ABCC 08E8 0007 0002             		bset	#7,2(a0)
0001ABD2 5528 0025                  		subq.b	#2,$25(a0)
0001ABD6                            
0001ABD6                            locret_1887E:
0001ABD6 4E75                       		rts	
0001ABD8                            ; ===========================================================================
0001ABD8                            
0001ABD8                            Obj74_Delete2:
0001ABD8 4EF9 0000 EB7E             		jmp	DeleteObject
0001ABDE                            ; ===========================================================================
0001ABDE                            
0001ABDE                            loc_18886:				; XREF: Obj74_Index
0001ABDE 08E8 0007 0002             		bset	#7,2(a0)
0001ABE4 5328 0029                  		subq.b	#1,$29(a0)
0001ABE8 6600                       		bne.s	Obj74_Animate
0001ABEA 117C 0001 001C             		move.b	#1,$1C(a0)
0001ABF0 5968 000C                  		subq.w	#4,$C(a0)
0001ABF4 4228 0020                  		clr.b	$20(a0)
0001ABF8                            
0001ABF8                            Obj74_Animate:
0001ABF8 43F9 0000 FF3E             		lea	(Ani_obj14).l,a1
0001ABFE 4EF9 0000 BB8E             		jmp	AnimateSprite
0001AC04                            ; ===========================================================================
0001AC04                            
0001AC04                            Obj74_Delete3:				; XREF: Obj74_Index
0001AC04 4EF9 0000 EB7E             		jmp	DeleteObject
0001AC0A                            ; ===========================================================================
0001AC0A                            
0001AC0A                            Obj7A_Delete:
0001AC0A 4EF9 0000 EB7E             		jmp	DeleteObject
0001AC10                            ; ===========================================================================
0001AC10                            ; ---------------------------------------------------------------------------
0001AC10                            ; Object 7A - Eggman (SLZ)
0001AC10                            ; ---------------------------------------------------------------------------
0001AC10                            
0001AC10                            Obj7A:					; XREF: Obj_Index
0001AC10 7000                       		moveq	#0,d0
0001AC12 1028 0024                  		move.b	$24(a0),d0
0001AC16 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001AC1A 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001AC1E                            ; ===========================================================================
0001AC1E 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001AC20 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001AC22 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001AC24 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001AC26 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001AC28                            
0001AC28 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001AC2B 0401 04                    		dc.b 4,	1, 4
0001AC2E 0607 04                    		dc.b 6,	7, 4
0001AC31 0800 03                    		dc.b 8,	0, 3
0001AC34                            ; ===========================================================================
0001AC34                            
0001AC34                            Obj7A_Main:				; XREF: Obj7A_Index
0001AC34 317C 2188 0008             		move.w	#$2188,8(a0)
0001AC3A 317C 0228 000C             		move.w	#$228,$C(a0)
0001AC40 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AC46 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AC4C 117C 000F 0020             		move.b	#$F,$20(a0)
0001AC52 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AC58 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001AC5C 2248                       		movea.l	a0,a1
0001AC5E 7203                       		moveq	#3,d1
0001AC60 6000                       		bra.s	Obj7A_LoadBoss
0001AC62                            ; ===========================================================================
0001AC62                            
0001AC62                            Obj7A_Loop:
0001AC62 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001AC68 6600                       		bne.s	loc_1895C
0001AC6A 12BC 007A                  		move.b	#$7A,0(a1)
0001AC6E 3368 0008 0008             		move.w	8(a0),8(a1)
0001AC74 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AC7A                            
0001AC7A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001AC7A 08A8 0000 0022             		bclr	#0,$22(a0)
0001AC80 4229 0025                  		clr.b	$25(a1)
0001AC84 135A 0024                  		move.b	(a2)+,$24(a1)
0001AC88 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AC8C 135A 0018                  		move.b	(a2)+,$18(a1)
0001AC90 237C 0001 9F94 0004        		move.l	#Map_Eggman,4(a1)
0001AC98 337C 0400 0002             		move.w	#$400,2(a1)
0001AC9E 137C 0004 0001             		move.b	#4,1(a1)
0001ACA4 137C 0020 0019             		move.b	#$20,$19(a1)
0001ACAA 2348 0034                  		move.l	a0,$34(a1)
0001ACAE 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001ACB2                            
0001ACB2                            loc_1895C:
0001ACB2 43F8 D040                  		lea	($FFFFD040).w,a1
0001ACB6 45E8 002A                  		lea	$2A(a0),a2
0001ACBA 705E                       		moveq	#$5E,d0
0001ACBC 723E                       		moveq	#$3E,d1
0001ACBE                            
0001ACBE                            loc_18968:
0001ACBE B011                       		cmp.b	(a1),d0
0001ACC0 6600                       		bne.s	loc_18974
0001ACC2 4A29 0028                  		tst.b	$28(a1)
0001ACC6 6700                       		beq.s	loc_18974
0001ACC8 34C9                       		move.w	a1,(a2)+
0001ACCA                            
0001ACCA                            loc_18974:
0001ACCA D2FC 0040                  		adda.w	#$40,a1
0001ACCE 51C9 FFEE                  		dbf	d1,loc_18968
0001ACD2                            
0001ACD2                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001ACD2 7000                       		moveq	#0,d0
0001ACD4 1028 0025                  		move.b	$25(a0),d0
0001ACD8 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001ACDC 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001ACE0 43F9 0001 9F44             		lea	(Ani_Eggman).l,a1
0001ACE6 4EB9 0000 BB8E             		jsr	AnimateSprite
0001ACEC 7003                       		moveq	#3,d0
0001ACEE C028 0022                  		and.b	$22(a0),d0
0001ACF2 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001ACF8 8128 0001                  		or.b	d0,1(a0)
0001ACFC 4EF9 0000 EB2E             		jmp	DisplaySprite
0001AD02                            ; ===========================================================================
0001AD02 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001AD04 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001AD06 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001AD08 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001AD0A 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001AD0C 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001AD0E                            ; ===========================================================================
0001AD0E                            
0001AD0E                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001AD0E 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AD14 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001AD1A 6400                       		bcc.s	loc_189CA
0001AD1C 5428 0025                  		addq.b	#2,$25(a0)
0001AD20                            
0001AD20                            loc_189CA:
0001AD20 6100 EDA6                  		bsr.w	BossMove
0001AD24 1028 003F                  		move.b	$3F(a0),d0
0001AD28 5428 003F                  		addq.b	#2,$3F(a0)
0001AD2C 4EB9 0000 29F6             		jsr	(CalcSine).l
0001AD32 EC40                       		asr.w	#6,d0
0001AD34 D068 0038                  		add.w	$38(a0),d0
0001AD38 3140 000C                  		move.w	d0,$C(a0)
0001AD3C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AD42 6000                       		bra.s	loc_189FE
0001AD44                            ; ===========================================================================
0001AD44                            
0001AD44                            loc_189EE:
0001AD44 6100 ED82                  		bsr.w	BossMove
0001AD48 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AD4E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AD54                            
0001AD54                            loc_189FE:
0001AD54 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001AD5A 6400                       		bcc.s	locret_18A44
0001AD5C 4A28 0022                  		tst.b	$22(a0)
0001AD60 6B00                       		bmi.s	loc_18A46
0001AD62 4A28 0020                  		tst.b	$20(a0)
0001AD66 6600                       		bne.s	locret_18A44
0001AD68 4A28 003E                  		tst.b	$3E(a0)
0001AD6C 6600                       		bne.s	loc_18A28
0001AD6E 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AD74 303C 00AC                  		move.w	#$AC,d0
0001AD78 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AD7E                            
0001AD7E                            loc_18A28:
0001AD7E 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001AD82 7000                       		moveq	#0,d0
0001AD84 4A51                       		tst.w	(a1)
0001AD86 6600                       		bne.s	loc_18A36
0001AD88 303C 0EEE                  		move.w	#$EEE,d0
0001AD8C                            
0001AD8C                            loc_18A36:
0001AD8C 3280                       		move.w	d0,(a1)
0001AD8E 5328 003E                  		subq.b	#1,$3E(a0)
0001AD92 6600                       		bne.s	locret_18A44
0001AD94 117C 000F 0020             		move.b	#$F,$20(a0)
0001AD9A                            
0001AD9A                            locret_18A44:
0001AD9A 4E75                       		rts	
0001AD9C                            ; ===========================================================================
0001AD9C                            
0001AD9C                            loc_18A46:
0001AD9C 7064                       		moveq	#100,d0
0001AD9E 6100 0000                  		bsr.w	AddPoints
0001ADA2 117C 0006 0025             		move.b	#6,$25(a0)
0001ADA8 117C 0078 003C             		move.b	#$78,$3C(a0)
0001ADAE 4268 0010                  		clr.w	$10(a0)
0001ADB2 4E75                       		rts	
0001ADB4                            ; ===========================================================================
0001ADB4                            
0001ADB4                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001ADB4 3028 0030                  		move.w	$30(a0),d0
0001ADB8 317C 0200 0010             		move.w	#$200,$10(a0)
0001ADBE 0828 0000 0022             		btst	#0,$22(a0)
0001ADC4 6600                       		bne.s	loc_18A7C
0001ADC6 4468 0010                  		neg.w	$10(a0)
0001ADCA 0C40 2008                  		cmpi.w	#$2008,d0
0001ADCE 6E00                       		bgt.s	loc_18A88
0001ADD0 6000                       		bra.s	loc_18A82
0001ADD2                            ; ===========================================================================
0001ADD2                            
0001ADD2                            loc_18A7C:
0001ADD2 0C40 2138                  		cmpi.w	#$2138,d0
0001ADD6 6D00                       		blt.s	loc_18A88
0001ADD8                            
0001ADD8                            loc_18A82:
0001ADD8 0868 0000 0022             		bchg	#0,$22(a0)
0001ADDE                            
0001ADDE                            loc_18A88:
0001ADDE 3028 0008                  		move.w	8(a0),d0
0001ADE2 72FF                       		moveq	#-1,d1
0001ADE4 7402                       		moveq	#2,d2
0001ADE6 45E8 002A                  		lea	$2A(a0),a2
0001ADEA 7828                       		moveq	#$28,d4
0001ADEC 4A68 0010                  		tst.w	$10(a0)
0001ADF0 6A00                       		bpl.s	loc_18A9E
0001ADF2 4444                       		neg.w	d4
0001ADF4                            
0001ADF4                            loc_18A9E:
0001ADF4 321A                       		move.w	(a2)+,d1
0001ADF6 2641                       		movea.l	d1,a3
0001ADF8 082B 0003 0022             		btst	#3,$22(a3)
0001ADFE 6600                       		bne.s	loc_18AB4
0001AE00 362B 0008                  		move.w	8(a3),d3
0001AE04 D644                       		add.w	d4,d3
0001AE06 9640                       		sub.w	d0,d3
0001AE08 6700                       		beq.s	loc_18AC0
0001AE0A                            
0001AE0A                            loc_18AB4:
0001AE0A 51CA FFE8                  		dbf	d2,loc_18A9E
0001AE0E                            
0001AE0E 1142 0028                  		move.b	d2,$28(a0)
0001AE12 6000 FF0C                  		bra.w	loc_189CA
0001AE16                            ; ===========================================================================
0001AE16                            
0001AE16                            loc_18AC0:
0001AE16 1142 0028                  		move.b	d2,$28(a0)
0001AE1A 5428 0025                  		addq.b	#2,$25(a0)
0001AE1E 117C 0028 003C             		move.b	#$28,$3C(a0)
0001AE24 6000 FEFA                  		bra.w	loc_189CA
0001AE28                            ; ===========================================================================
0001AE28                            
0001AE28                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001AE28 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001AE2E 6600                       		bne.s	loc_18B36
0001AE30 70FF                       		moveq	#-1,d0
0001AE32 1028 0028                  		move.b	$28(a0),d0
0001AE36 4880                       		ext.w	d0
0001AE38 6B00                       		bmi.s	loc_18B40
0001AE3A 5540                       		subq.w	#2,d0
0001AE3C 4440                       		neg.w	d0
0001AE3E D040                       		add.w	d0,d0
0001AE40 43E8 002A                  		lea	$2A(a0),a1
0001AE44 3031 0000                  		move.w	(a1,d0.w),d0
0001AE48 2440                       		movea.l	d0,a2
0001AE4A 43F8 D040                  		lea	($FFFFD040).w,a1
0001AE4E 723E                       		moveq	#$3E,d1
0001AE50                            
0001AE50                            loc_18AFA:
0001AE50 B0A9 003C                  		cmp.l	$3C(a1),d0
0001AE54 6700                       		beq.s	loc_18B40
0001AE56 D2FC 0040                  		adda.w	#$40,a1
0001AE5A 51C9 FFF4                  		dbf	d1,loc_18AFA
0001AE5E                            
0001AE5E 2F08                       		move.l	a0,-(sp)
0001AE60 41D2                       		lea	(a2),a0
0001AE62 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001AE68 205F                       		movea.l	(sp)+,a0
0001AE6A 6600                       		bne.s	loc_18B40
0001AE6C 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001AE70 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE76 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AE7C 0669 0020 000C             		addi.w	#$20,$C(a1)
0001AE82 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001AE88 234A 003C                  		move.l	a2,$3C(a1)
0001AE8C                            
0001AE8C                            loc_18B36:
0001AE8C 5328 003C                  		subq.b	#1,$3C(a0)
0001AE90 6700                       		beq.s	loc_18B40
0001AE92 6000 FEC0                  		bra.w	loc_189FE
0001AE96                            ; ===========================================================================
0001AE96                            
0001AE96                            loc_18B40:
0001AE96 5528 0025                  		subq.b	#2,$25(a0)
0001AE9A 6000 FE84                  		bra.w	loc_189CA
0001AE9E                            ; ===========================================================================
0001AE9E                            
0001AE9E                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001AE9E 5328 003C                  		subq.b	#1,$3C(a0)
0001AEA2 6B00                       		bmi.s	loc_18B52
0001AEA4 6000 EBD4                  		bra.w	BossDefeated
0001AEA8                            ; ===========================================================================
0001AEA8                            
0001AEA8                            loc_18B52:
0001AEA8 5428 0025                  		addq.b	#2,$25(a0)
0001AEAC 4268 0012                  		clr.w	$12(a0)
0001AEB0 08E8 0000 0022             		bset	#0,$22(a0)
0001AEB6 08A8 0007 0022             		bclr	#7,$22(a0)
0001AEBC 4268 0010                  		clr.w	$10(a0)
0001AEC0 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001AEC6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AECA 6600                       		bne.s	loc_18B7C
0001AECC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AED2                            
0001AED2                            loc_18B7C:
0001AED2 6000 FE80                  		bra.w	loc_189FE
0001AED6                            ; ===========================================================================
0001AED6                            
0001AED6                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001AED6 5228 003C                  		addq.b	#1,$3C(a0)
0001AEDA 6700                       		beq.s	loc_18B90
0001AEDC 6A00                       		bpl.s	loc_18B96
0001AEDE 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AEE4 6000 0000                  		bra.w	loc_18BC2
0001AEE8                            ; ===========================================================================
0001AEE8                            
0001AEE8                            loc_18B90:
0001AEE8 4268 0012                  		clr.w	$12(a0)
0001AEEC 6000 0000                  		bra.w	loc_18BC2
0001AEF0                            ; ===========================================================================
0001AEF0                            
0001AEF0                            loc_18B96:
0001AEF0 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001AEF6 6500                       		bcs.s	loc_18BAE
0001AEF8 6700                       		beq.s	loc_18BB4
0001AEFA 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001AF00 6500 0000                  		bcs.w	loc_18BC2
0001AF04 5428 0025                  		addq.b	#2,$25(a0)
0001AF08 6000                       		bra.s	loc_18BC2
0001AF0A                            ; ===========================================================================
0001AF0A                            
0001AF0A                            loc_18BAE:
0001AF0A 5168 0012                  		subq.w	#8,$12(a0)
0001AF0E 6000                       		bra.s	loc_18BC2
0001AF10                            ; ===========================================================================
0001AF10                            
0001AF10                            loc_18BB4:
0001AF10 4268 0012                  		clr.w	$12(a0)
0001AF14 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated			
0001AF7A 303C 0084                  		move.w	#$84,d0
0001AF7E 4EB9 0000 121A             		jsr	(PlaySound).l	; play SLZ music
0001AF84                            
0001AF84                            loc_18BC2:
0001AF84 6000 FDBE                  		bra.w	loc_189EE
0001AF88                            ; ===========================================================================
0001AF88                            
0001AF88                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001AF88 317C 0400 0010             		move.w	#$400,$10(a0)
0001AF8E 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AF94 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001AF9A 6400                       		bcc.s	loc_18BE0
0001AF9C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AFA0 6000                       		bra.s	loc_18BE8
0001AFA2                            ; ===========================================================================
0001AFA2                            
0001AFA2                            loc_18BE0:
0001AFA2 4A28 0001                  		tst.b	1(a0)
0001AFA6 6A00 FC62                  		bpl.w	Obj7A_Delete
0001AFAA                            
0001AFAA                            loc_18BE8:
0001AFAA 6100 EB1C                  		bsr.w	BossMove
0001AFAE 6000 FD70                  		bra.w	loc_189CA
0001AFB2                            ; ===========================================================================
0001AFB2                            
0001AFB2                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001AFB2 7000                       		moveq	#0,d0
0001AFB4 7201                       		moveq	#1,d1
0001AFB6 2268 0034                  		movea.l	$34(a0),a1
0001AFBA 1029 0025                  		move.b	$25(a1),d0
0001AFBE 0C00 0006                  		cmpi.b	#6,d0
0001AFC2 6B00                       		bmi.s	loc_18C06
0001AFC4 720A                       		moveq	#$A,d1
0001AFC6 6000                       		bra.s	loc_18C1A
0001AFC8                            ; ===========================================================================
0001AFC8                            
0001AFC8                            loc_18C06:
0001AFC8 4A29 0020                  		tst.b	$20(a1)
0001AFCC 6600                       		bne.s	loc_18C10
0001AFCE 7205                       		moveq	#5,d1
0001AFD0 6000                       		bra.s	loc_18C1A
0001AFD2                            ; ===========================================================================
0001AFD2                            
0001AFD2                            loc_18C10:
0001AFD2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AFD8 6500                       		bcs.s	loc_18C1A
0001AFDA 7204                       		moveq	#4,d1
0001AFDC                            
0001AFDC                            loc_18C1A:
0001AFDC 1141 001C                  		move.b	d1,$1C(a0)
0001AFE0 0C00 000A                  		cmpi.b	#$A,d0
0001AFE4 6600                       		bne.s	loc_18C32
0001AFE6 117C 0006 001C             		move.b	#6,$1C(a0)
0001AFEC 4A28 0001                  		tst.b	1(a0)
0001AFF0 6A00 FC18                  		bpl.w	Obj7A_Delete
0001AFF4                            
0001AFF4                            loc_18C32:
0001AFF4 6000                       		bra.s	loc_18C6C
0001AFF6                            ; ===========================================================================
0001AFF6                            
0001AFF6                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001AFF6 117C 0008 001C             		move.b	#8,$1C(a0)
0001AFFC 2268 0034                  		movea.l	$34(a0),a1
0001B000 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B006 6600                       		bne.s	loc_18C56
0001B008 4A28 0001                  		tst.b	1(a0)
0001B00C 6A00 FBFC                  		bpl.w	Obj7A_Delete
0001B010 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B016 6000                       		bra.s	loc_18C6C
0001B018                            ; ===========================================================================
0001B018                            
0001B018                            loc_18C56:
0001B018 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001B01E 6E00                       		bgt.s	loc_18C6C
0001B020 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B026 6D00                       		blt.s	loc_18C6C
0001B028 117C 0007 001C             		move.b	#7,$1C(a0)
0001B02E                            
0001B02E                            loc_18C6C:
0001B02E 43F9 0001 9F44             		lea	(Ani_Eggman).l,a1
0001B034 4EB9 0000 BB8E             		jsr	AnimateSprite
0001B03A                            
0001B03A                            loc_18C78:
0001B03A 2268 0034                  		movea.l	$34(a0),a1
0001B03E 3169 0008 0008             		move.w	8(a1),8(a0)
0001B044 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B04A 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B050 7003                       		moveq	#3,d0
0001B052 C028 0022                  		and.b	$22(a0),d0
0001B056 0228 00FC 0001             		andi.b	#-4,1(a0)
0001B05C 8128 0001                  		or.b	d0,1(a0)
0001B060 4EF9 0000 EB2E             		jmp	DisplaySprite
0001B066                            ; ===========================================================================
0001B066                            
0001B066                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001B066 2268 0034                  		movea.l	$34(a0),a1
0001B06A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B070 6600                       		bne.s	loc_18CB8
0001B072 4A28 0001                  		tst.b	1(a0)
0001B076 6A00 FB92                  		bpl.w	Obj7A_Delete
0001B07A                            
0001B07A                            loc_18CB8:
0001B07A 217C 0001 A05C 0004        		move.l	#Map_BossItems,4(a0)
0001B082 317C 246C 0002             		move.w	#$246C,2(a0)
0001B088 117C 0003 001A             		move.b	#3,$1A(a0)
0001B08E 60AA                       		bra.s	loc_18C78
0001B090                            ; ===========================================================================
0001B090                            ; ---------------------------------------------------------------------------
0001B090                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001B090                            ; ---------------------------------------------------------------------------
0001B090                            
0001B090                            Obj7B:					; XREF: Obj_Index
0001B090 7000                       		moveq	#0,d0
0001B092 1028 0024                  		move.b	$24(a0),d0
0001B096 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001B09A 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001B09E 3028 0030                  		move.w	$30(a0),d0
0001B0A2 0240 FF80                  		andi.w	#$FF80,d0
0001B0A6 3238 F700                  		move.w	($FFFFF700).w,d1
0001B0AA 0441 0080                  		subi.w	#$80,d1
0001B0AE 0241 FF80                  		andi.w	#$FF80,d1
0001B0B2 9041                       		sub.w	d1,d0
0001B0B4 6B00 FB54                  		bmi.w	Obj7A_Delete
0001B0B8 0C40 0280                  		cmpi.w	#$280,d0
0001B0BC 6300                       		bls.s	Obj7B_NoDel
0001B0BE                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
0001B0BE                            	;	beq.s	Obj7B_Delete		; if it's zero, don't remember object
0001B0BE                            	;	movea.w	d0,a2	; load address into a2
0001B0BE                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001B0BE                            
0001B0BE                            Obj7B_Delete:
0001B0BE 4EF9 0000 EB7E             		jmp	DeleteObject	; and delete object
0001B0C4                            
0001B0C4                            Obj7B_NoDel:
0001B0C4 4EF9 0000 EB2E             		jmp	DisplaySprite
0001B0CA                            ; ===========================================================================
0001B0CA 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001B0CC 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001B0CE 0000                       		dc.w loc_18DC6-Obj7B_Index
0001B0D0 0000                       		dc.w loc_18EAA-Obj7B_Index
0001B0D2 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001B0D4 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001B0D6                            ; ===========================================================================
0001B0D6                            
0001B0D6                            Obj7B_Main:				; XREF: Obj7B_Index
0001B0D6 217C 0001 352A 0004        		move.l	#Map_obj5Ea,4(a0)
0001B0DE 317C 0518 0002             		move.w	#$518,2(a0)
0001B0E4 117C 0001 001A             		move.b	#1,$1A(a0)
0001B0EA 0028 0004 0001             		ori.b	#4,1(a0)
0001B0F0 117C 0004 0018             		move.b	#4,$18(a0)
0001B0F6 117C 008B 0020             		move.b	#$8B,$20(a0)
0001B0FC 117C 000C 0019             		move.b	#$C,$19(a0)
0001B102 2268 003C                  		movea.l	$3C(a0),a1
0001B106 3169 0008 0030             		move.w	8(a1),$30(a0)
0001B10C 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001B112 08E8 0000 0022             		bset	#0,$22(a0)
0001B118 3028 0008                  		move.w	8(a0),d0
0001B11C B069 0008                  		cmp.w	8(a1),d0
0001B120 6E00                       		bgt.s	loc_18D68
0001B122 08A8 0000 0022             		bclr	#0,$22(a0)
0001B128 117C 0002 003A             		move.b	#2,$3A(a0)
0001B12E                            
0001B12E                            loc_18D68:
0001B12E 5428 0024                  		addq.b	#2,$24(a0)
0001B132                            
0001B132                            Obj7B_Fall:				; XREF: Obj7B_Index
0001B132 4EB9 0000 EAF4             		jsr	ObjectFall
0001B138 2268 003C                  		movea.l	$3C(a0),a1
0001B13C 45F9 0000 0000             		lea	(word_19018).l,a2
0001B142 7000                       		moveq	#0,d0
0001B144 1029 001A                  		move.b	$1A(a1),d0
0001B148 3228 0008                  		move.w	8(a0),d1
0001B14C 9268 0030                  		sub.w	$30(a0),d1
0001B150 6400                       		bcc.s	loc_18D8E
0001B152 5440                       		addq.w	#2,d0
0001B154                            
0001B154                            loc_18D8E:
0001B154 D040                       		add.w	d0,d0
0001B156 3228 0034                  		move.w	$34(a0),d1
0001B15A D272 0000                  		add.w	(a2,d0.w),d1
0001B15E B268 000C                  		cmp.w	$C(a0),d1
0001B162 6E00                       		bgt.s	locret_18DC4
0001B164 2268 003C                  		movea.l	$3C(a0),a1
0001B168 7202                       		moveq	#2,d1
0001B16A 0828 0000 0022             		btst	#0,$22(a0)
0001B170 6700                       		beq.s	loc_18DAE
0001B172 7200                       		moveq	#0,d1
0001B174                            
0001B174                            loc_18DAE:
0001B174 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001B17A 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001B180 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001B186 6000 0000                  		bra.w	loc_18FA2
0001B18A                            ; ===========================================================================
0001B18A                            
0001B18A                            locret_18DC4:
0001B18A 4E75                       		rts	
0001B18C                            ; ===========================================================================
0001B18C                            
0001B18C                            loc_18DC6:				; XREF: Obj7B_Index
0001B18C 2268 003C                  		movea.l	$3C(a0),a1
0001B190 7000                       		moveq	#0,d0
0001B192 1028 003A                  		move.b	$3A(a0),d0
0001B196 9029 003A                  		sub.b	$3A(a1),d0
0001B19A 6700                       		beq.s	loc_18E2A
0001B19C 6400                       		bcc.s	loc_18DDA
0001B19E 4400                       		neg.b	d0
0001B1A0                            
0001B1A0                            loc_18DDA:
0001B1A0 323C F7E8                  		move.w	#-$818,d1
0001B1A4 343C FEEC                  		move.w	#-$114,d2
0001B1A8 0C00 0001                  		cmpi.b	#1,d0
0001B1AC 6700                       		beq.s	loc_18E00
0001B1AE 323C F6A0                  		move.w	#-$960,d1
0001B1B2 343C FF0C                  		move.w	#-$F4,d2
0001B1B6 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001B1BC 6D00                       		blt.s	loc_18E00
0001B1BE 323C F5E0                  		move.w	#-$A20,d1
0001B1C2 343C FF80                  		move.w	#-$80,d2
0001B1C6                            
0001B1C6                            loc_18E00:
0001B1C6 3141 0012                  		move.w	d1,$12(a0)
0001B1CA 3142 0010                  		move.w	d2,$10(a0)
0001B1CE 3028 0008                  		move.w	8(a0),d0
0001B1D2 9068 0030                  		sub.w	$30(a0),d0
0001B1D6 6400                       		bcc.s	loc_18E16
0001B1D8 4468 0010                  		neg.w	$10(a0)
0001B1DC                            
0001B1DC                            loc_18E16:
0001B1DC 117C 0001 001A             		move.b	#1,$1A(a0)
0001B1E2 317C 0020 0028             		move.w	#$20,$28(a0)
0001B1E8 5428 0024                  		addq.b	#2,$24(a0)
0001B1EC 6000 0000                  		bra.w	loc_18EAA
0001B1F0                            ; ===========================================================================
0001B1F0                            
0001B1F0                            loc_18E2A:				; XREF: loc_18DC6
0001B1F0 45F9 0000 0000             		lea	(word_19018).l,a2
0001B1F6 7000                       		moveq	#0,d0
0001B1F8 1029 001A                  		move.b	$1A(a1),d0
0001B1FC 343C 0028                  		move.w	#$28,d2
0001B200 3228 0008                  		move.w	8(a0),d1
0001B204 9268 0030                  		sub.w	$30(a0),d1
0001B208 6400                       		bcc.s	loc_18E48
0001B20A 4442                       		neg.w	d2
0001B20C 5440                       		addq.w	#2,d0
0001B20E                            
0001B20E                            loc_18E48:
0001B20E D040                       		add.w	d0,d0
0001B210 3228 0034                  		move.w	$34(a0),d1
0001B214 D272 0000                  		add.w	(a2,d0.w),d1
0001B218 3141 000C                  		move.w	d1,$C(a0)
0001B21C D468 0030                  		add.w	$30(a0),d2
0001B220 3142 0008                  		move.w	d2,8(a0)
0001B224 4268 000E                  		clr.w	$E(a0)
0001B228 4268 000A                  		clr.w	$A(a0)
0001B22C 5368 0028                  		subq.w	#1,$28(a0)
0001B230 6600                       		bne.s	loc_18E7A
0001B232 317C 0020 0028             		move.w	#$20,$28(a0)
0001B238 117C 0008 0024             		move.b	#8,$24(a0)
0001B23E 4E75                       		rts	
0001B240                            ; ===========================================================================
0001B240                            
0001B240                            loc_18E7A:
0001B240 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001B246 6600                       		bne.s	loc_18E88
0001B248 117C 0005 001F             		move.b	#5,$1F(a0)
0001B24E                            
0001B24E                            loc_18E88:
0001B24E 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001B254 6600                       		bne.s	loc_18E96
0001B256 117C 0002 001F             		move.b	#2,$1F(a0)
0001B25C                            
0001B25C                            loc_18E96:
0001B25C 5328 001E                  		subq.b	#1,$1E(a0)
0001B260 6E00                       		bgt.s	locret_18EA8
0001B262 0868 0000 001A             		bchg	#0,$1A(a0)
0001B268 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001B26E                            
0001B26E                            locret_18EA8:
0001B26E 4E75                       		rts	
0001B270                            ; ===========================================================================
0001B270                            
0001B270                            loc_18EAA:				; XREF: Obj7B_Index
0001B270 43F8 D040                  		lea	($FFFFD040).w,a1
0001B274 707A                       		moveq	#$7A,d0
0001B276 7240                       		moveq	#$40,d1
0001B278 743E                       		moveq	#$3E,d2
0001B27A                            
0001B27A                            loc_18EB4:
0001B27A B011                       		cmp.b	(a1),d0
0001B27C 6700                       		beq.s	loc_18EC0
0001B27E D2C1                       		adda.w	d1,a1
0001B280 51CA FFF8                  		dbf	d2,loc_18EB4
0001B284                            
0001B284 6000                       		bra.s	loc_18F38
0001B286                            ; ===========================================================================
0001B286                            
0001B286                            loc_18EC0:
0001B286 3029 0008                  		move.w	8(a1),d0
0001B28A 3229 000C                  		move.w	$C(a1),d1
0001B28E 3428 0008                  		move.w	8(a0),d2
0001B292 3628 000C                  		move.w	$C(a0),d3
0001B296 45FA 0000                  		lea	byte_19022(pc),a2
0001B29A 47FA 0000                  		lea	byte_19026(pc),a3
0001B29E 181A                       		move.b	(a2)+,d4
0001B2A0 4884                       		ext.w	d4
0001B2A2 D044                       		add.w	d4,d0
0001B2A4 181B                       		move.b	(a3)+,d4
0001B2A6 4884                       		ext.w	d4
0001B2A8 D444                       		add.w	d4,d2
0001B2AA B440                       		cmp.w	d0,d2
0001B2AC 6500                       		bcs.s	loc_18F38
0001B2AE 181A                       		move.b	(a2)+,d4
0001B2B0 4884                       		ext.w	d4
0001B2B2 D044                       		add.w	d4,d0
0001B2B4 181B                       		move.b	(a3)+,d4
0001B2B6 4884                       		ext.w	d4
0001B2B8 D444                       		add.w	d4,d2
0001B2BA B042                       		cmp.w	d2,d0
0001B2BC 6500                       		bcs.s	loc_18F38
0001B2BE 181A                       		move.b	(a2)+,d4
0001B2C0 4884                       		ext.w	d4
0001B2C2 D244                       		add.w	d4,d1
0001B2C4 181B                       		move.b	(a3)+,d4
0001B2C6 4884                       		ext.w	d4
0001B2C8 D644                       		add.w	d4,d3
0001B2CA B641                       		cmp.w	d1,d3
0001B2CC 6500                       		bcs.s	loc_18F38
0001B2CE 181A                       		move.b	(a2)+,d4
0001B2D0 4884                       		ext.w	d4
0001B2D2 D244                       		add.w	d4,d1
0001B2D4 181B                       		move.b	(a3)+,d4
0001B2D6 4884                       		ext.w	d4
0001B2D8 D644                       		add.w	d4,d3
0001B2DA B243                       		cmp.w	d3,d1
0001B2DC 6500                       		bcs.s	loc_18F38
0001B2DE 5428 0024                  		addq.b	#2,$24(a0)
0001B2E2 4268 0028                  		clr.w	$28(a0)
0001B2E6 4229 0020                  		clr.b	$20(a1)
0001B2EA 5329 0021                  		subq.b	#1,$21(a1)
0001B2EE 6600                       		bne.s	loc_18F38
0001B2F0 08E9 0007 0022             		bset	#7,$22(a1)
0001B2F6 4268 0010                  		clr.w	$10(a0)
0001B2FA 4268 0012                  		clr.w	$12(a0)
0001B2FE                            
0001B2FE                            loc_18F38:
0001B2FE 4A68 0012                  		tst.w	$12(a0)
0001B302 6A00                       		bpl.s	loc_18F5C
0001B304 4EB9 0000 EAF4             		jsr	ObjectFall
0001B30A 3028 0034                  		move.w	$34(a0),d0
0001B30E 0440 002F                  		subi.w	#$2F,d0
0001B312 B068 000C                  		cmp.w	$C(a0),d0
0001B316 6E00                       		bgt.s	loc_18F58
0001B318 4EB9 0000 EAF4             		jsr	ObjectFall
0001B31E                            
0001B31E                            loc_18F58:
0001B31E 6000 FF20                  		bra.w	loc_18E7A
0001B322                            ; ===========================================================================
0001B322                            
0001B322                            loc_18F5C:
0001B322 4EB9 0000 EAF4             		jsr	ObjectFall
0001B328 2268 003C                  		movea.l	$3C(a0),a1
0001B32C 45F9 0000 0000             		lea	(word_19018).l,a2
0001B332 7000                       		moveq	#0,d0
0001B334 1029 001A                  		move.b	$1A(a1),d0
0001B338 3228 0008                  		move.w	8(a0),d1
0001B33C 9268 0030                  		sub.w	$30(a0),d1
0001B340 6400                       		bcc.s	loc_18F7E
0001B342 5440                       		addq.w	#2,d0
0001B344                            
0001B344                            loc_18F7E:
0001B344 D040                       		add.w	d0,d0
0001B346 3228 0034                  		move.w	$34(a0),d1
0001B34A D272 0000                  		add.w	(a2,d0.w),d1
0001B34E B268 000C                  		cmp.w	$C(a0),d1
0001B352 6ECA                       		bgt.s	loc_18F58
0001B354 2268 003C                  		movea.l	$3C(a0),a1
0001B358 7202                       		moveq	#2,d1
0001B35A 4A68 0010                  		tst.w	$10(a0)
0001B35E 6B00                       		bmi.s	loc_18F9C
0001B360 7200                       		moveq	#0,d1
0001B362                            
0001B362                            loc_18F9C:
0001B362 317C 0000 0028             		move.w	#0,$28(a0)
0001B368                            
0001B368                            loc_18FA2:
0001B368 1341 003A                  		move.b	d1,$3A(a1)
0001B36C 1141 003A                  		move.b	d1,$3A(a0)
0001B370 B229 001A                  		cmp.b	$1A(a1),d1
0001B374 6700                       		beq.s	loc_19008
0001B376 08A9 0003 0022             		bclr	#3,$22(a1)
0001B37C 6700                       		beq.s	loc_19008
0001B37E 4229 0025                  		clr.b	$25(a1)
0001B382 137C 0002 0024             		move.b	#2,$24(a1)
0001B388 45F8 D000                  		lea	($FFFFD000).w,a2
0001B38C 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001B392 446A 0012                  		neg.w	$12(a2)
0001B396 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001B39C 6600                       		bne.s	loc_18FDC
0001B39E E0EA 0012                  		asr	$12(a2)
0001B3A2                            
0001B3A2                            loc_18FDC:
0001B3A2 08EA 0001 0022             		bset	#1,$22(a2)
0001B3A8 08AA 0003 0022             		bclr	#3,$22(a2)
0001B3AE 422A 003C                  		clr.b	$3C(a2)
0001B3B2 2F08                       		move.l	a0,-(sp)
0001B3B4 41D2                       		lea	(a2),a0
0001B3B6 4EBA 9C1A                  		jsr	Obj01_ChkRoll
0001B3BA 205F                       		movea.l	(sp)+,a0
0001B3BC 157C 0002 0024             		move.b	#2,$24(a2)
0001B3C2 303C 00CC                  		move.w	#$CC,d0
0001B3C6 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001B3CC                            
0001B3CC                            loc_19008:
0001B3CC 4268 0010                  		clr.w	$10(a0)
0001B3D0 4268 0012                  		clr.w	$12(a0)
0001B3D4 5428 0024                  		addq.b	#2,$24(a0)
0001B3D8 6000 FE66                  		bra.w	loc_18E7A
0001B3DC                            ; ===========================================================================
0001B3DC FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001B3E6                            		even
0001B3E6 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001B3EA                            		even
0001B3EA 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001B3EE                            		even
0001B3EE                            ; ===========================================================================
0001B3EE                            
0001B3EE                            Obj7B_Explode:				; XREF: Obj7B_Index
0001B3EE 10BC 003F                  		move.b	#$3F,(a0)
0001B3F2 4228 0024                  		clr.b	$24(a0)
0001B3F6 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001B3FC 6700                       		beq.s	Obj7B_MakeFrag
0001B3FE 4E75                       		rts	
0001B400                            ; ===========================================================================
0001B400                            
0001B400                            Obj7B_MakeFrag:
0001B400 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001B406 7203                       		moveq	#3,d1
0001B408 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001B40C                            
0001B40C                            Obj7B_Loop:
0001B40C 4EB9 0000 F284             		jsr	SingleObjLoad
0001B412 6600                       		bne.s	loc_1909A
0001B414 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001B418 137C 000A 0024             		move.b	#$A,$24(a1)
0001B41E 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001B426 137C 0003 0018             		move.b	#3,$18(a1)
0001B42C 337C 0518 0002             		move.w	#$518,2(a1)
0001B432 3368 0008 0008             		move.w	8(a0),8(a1)
0001B438 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B43E 335A 0010                  		move.w	(a2)+,$10(a1)
0001B442 335A 0012                  		move.w	(a2)+,$12(a1)
0001B446 137C 0098 0020             		move.b	#$98,$20(a1)
0001B44C 0029 0004 0001             		ori.b	#4,1(a1)
0001B452 08E9 0007 0001             		bset	#7,1(a1)
0001B458 137C 000C 0019             		move.b	#$C,$19(a1)
0001B45E                            
0001B45E                            loc_1909A:
0001B45E 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001B462                            
0001B462 4E75                       		rts	
0001B464                            ; ===========================================================================
0001B464 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001B468 FF60 FDC0                  		dc.w $FF60, $FDC0
0001B46C 0100 FCC0                  		dc.w $100, $FCC0
0001B470 00A0 FDC0                  		dc.w $A0, $FDC0
0001B474                            ; ===========================================================================
0001B474                            
0001B474                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001B474 4EB9 0000 EB14             		jsr	SpeedToPos
0001B47A 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B480 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001B486 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B48C 7004                       		moveq	#4,d0
0001B48E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B492 E448                       		lsr.w	#2,d0
0001B494 1140 001A                  		move.b	d0,$1A(a0)
0001B498 4A28 0001                  		tst.b	1(a0)
0001B49C 6A00 F76C                  		bpl.w	Obj7A_Delete
0001B4A0 4E75                       		rts	
0001B4A2                            ; ===========================================================================
0001B4A2                            ; ---------------------------------------------------------------------------
0001B4A2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B4A2                            ; ---------------------------------------------------------------------------
0001B4A2                            Map_obj7B:
0001B4A2                            	include "_maps\obj7B.asm"
0001B4A2                            ; ---------------------------------------------------------------------------
0001B4A2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B4A2                            ; ---------------------------------------------------------------------------
0001B4A2 0000                       		dc.w byte_190E2-Map_obj7B
0001B4A4 0000                       		dc.w byte_190E8-Map_obj7B
0001B4A6 01                         byte_190E2:	dc.b 1
0001B4A7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B4AC 01                         byte_190E8:	dc.b 1
0001B4AD FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B4B2                            		even
0001B4B2                            		even
0001B4B2                            
0001B4B2                            ; ===========================================================================
0001B4B2                            ; ---------------------------------------------------------------------------
0001B4B2                            ; Object 75 - Eggman (SYZ)
0001B4B2                            ; ---------------------------------------------------------------------------
0001B4B2                            
0001B4B2                            Obj75:					; XREF: Obj_Index
0001B4B2 7000                       		moveq	#0,d0
0001B4B4 1028 0024                  		move.b	$24(a0),d0
0001B4B8 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001B4BC 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001B4C0                            ; ===========================================================================
0001B4C0 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001B4C2 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001B4C4 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001B4C6 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001B4C8 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001B4CA                            
0001B4CA 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001B4CD 0401 05                    		dc.b 4,	1, 5
0001B4D0 0607 05                    		dc.b 6,	7, 5
0001B4D3 0800 05                    		dc.b 8,	0, 5
0001B4D6                            ; ===========================================================================
0001B4D6                            
0001B4D6                            Obj75_Main:				; XREF: Obj75_Index
0001B4D6 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001B4DC 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001B4E2 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B4E8 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B4EE 117C 000F 0020             		move.b	#$F,$20(a0)
0001B4F4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B4FA 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001B4FE 2248                       		movea.l	a0,a1
0001B500 7203                       		moveq	#3,d1
0001B502 6000                       		bra.s	Obj75_LoadBoss
0001B504                            ; ===========================================================================
0001B504                            
0001B504                            Obj75_Loop:
0001B504 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001B50A 6600                       		bne.s	Obj75_ShipMain
0001B50C 12BC 0075                  		move.b	#$75,(a1)
0001B510 3368 0008 0008             		move.w	8(a0),8(a1)
0001B516 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B51C                            
0001B51C                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001B51C 08A8 0000 0022             		bclr	#0,$22(a0)
0001B522 4229 0025                  		clr.b	$25(a1)
0001B526 135A 0024                  		move.b	(a2)+,$24(a1)
0001B52A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B52E 135A 0018                  		move.b	(a2)+,$18(a1)
0001B532 237C 0001 9F94 0004        		move.l	#Map_Eggman,4(a1)
0001B53A 337C 0400 0002             		move.w	#$400,2(a1)
0001B540 137C 0004 0001             		move.b	#4,1(a1)
0001B546 137C 0020 0019             		move.b	#$20,$19(a1)
0001B54C 2348 0034                  		move.l	a0,$34(a1)
0001B550 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001B554                            
0001B554                            Obj75_ShipMain:				; XREF: Obj75_Index
0001B554 7000                       		moveq	#0,d0
0001B556 1028 0025                  		move.b	$25(a0),d0
0001B55A 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001B55E 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001B562 43F9 0001 9F44             		lea	(Ani_Eggman).l,a1
0001B568 4EB9 0000 BB8E             		jsr	AnimateSprite
0001B56E 7003                       		moveq	#3,d0
0001B570 C028 0022                  		and.b	$22(a0),d0
0001B574 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B57A 8128 0001                  		or.b	d0,1(a0)
0001B57E 4EF9 0000 EB2E             		jmp	DisplaySprite
0001B584                            ; ===========================================================================
0001B584 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001B588 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001B58C 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001B590                            ; ===========================================================================
0001B590                            
0001B590                            loc_191CC:				; XREF: Obj75_ShipIndex
0001B590 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B596 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001B59C 6400                       		bcc.s	loc_191DE
0001B59E 5428 0025                  		addq.b	#2,$25(a0)
0001B5A2                            
0001B5A2                            loc_191DE:
0001B5A2 1028 003F                  		move.b	$3F(a0),d0
0001B5A6 5428 003F                  		addq.b	#2,$3F(a0)
0001B5AA 4EB9 0000 29F6             		jsr	(CalcSine).l
0001B5B0 E440                       		asr.w	#2,d0
0001B5B2 3140 0012                  		move.w	d0,$12(a0)
0001B5B6                            
0001B5B6                            loc_191F2:
0001B5B6 6100 E510                  		bsr.w	BossMove
0001B5BA 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B5C0 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B5C6                            
0001B5C6                            loc_19202:
0001B5C6 3028 0008                  		move.w	8(a0),d0
0001B5CA 0440 2C00                  		subi.w	#$2C00,d0
0001B5CE EA48                       		lsr.w	#5,d0
0001B5D0 1140 0034                  		move.b	d0,$34(a0)
0001B5D4 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001B5DA 6400                       		bcc.s	locret_19256
0001B5DC 4A28 0022                  		tst.b	$22(a0)
0001B5E0 6B00                       		bmi.s	loc_19258
0001B5E2 4A28 0020                  		tst.b	$20(a0)
0001B5E6 6600                       		bne.s	locret_19256
0001B5E8 4A28 003E                  		tst.b	$3E(a0)
0001B5EC 6600                       		bne.s	loc_1923A
0001B5EE 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B5F4 303C 00AC                  		move.w	#$AC,d0
0001B5F8 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B5FE                            
0001B5FE                            loc_1923A:
0001B5FE 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B602 7000                       		moveq	#0,d0
0001B604 4A51                       		tst.w	(a1)
0001B606 6600                       		bne.s	loc_19248
0001B608 303C 0EEE                  		move.w	#$EEE,d0
0001B60C                            
0001B60C                            loc_19248:
0001B60C 3280                       		move.w	d0,(a1)
0001B60E 5328 003E                  		subq.b	#1,$3E(a0)
0001B612 6600                       		bne.s	locret_19256
0001B614 117C 000F 0020             		move.b	#$F,$20(a0)
0001B61A                            
0001B61A                            locret_19256:
0001B61A 4E75                       		rts	
0001B61C                            ; ===========================================================================
0001B61C                            
0001B61C                            loc_19258:				; XREF: loc_19202
0001B61C 7064                       		moveq	#100,d0
0001B61E 6100 0000                  		bsr.w	AddPoints
0001B622 117C 0006 0025             		move.b	#6,$25(a0)
0001B628 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B62E 4268 0010                  		clr.w	$10(a0)
0001B632 4E75                       		rts	
0001B634                            ; ===========================================================================
0001B634                            
0001B634                            loc_19270:				; XREF: Obj75_ShipIndex
0001B634 3028 0030                  		move.w	$30(a0),d0
0001B638 317C 0140 0010             		move.w	#$140,$10(a0)
0001B63E 0828 0000 0022             		btst	#0,$22(a0)
0001B644 6600                       		bne.s	loc_1928E
0001B646 4468 0010                  		neg.w	$10(a0)
0001B64A 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B64E 6E00                       		bgt.s	loc_1929E
0001B650 6000                       		bra.s	loc_19294
0001B652                            ; ===========================================================================
0001B652                            
0001B652                            loc_1928E:
0001B652 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B656 6D00                       		blt.s	loc_1929E
0001B658                            
0001B658                            loc_19294:
0001B658 0868 0000 0022             		bchg	#0,$22(a0)
0001B65E 4228 003D                  		clr.b	$3D(a0)
0001B662                            
0001B662                            loc_1929E:
0001B662 0440 2C10                  		subi.w	#$2C10,d0
0001B666 0240 001F                  		andi.w	#$1F,d0
0001B66A 0440 001F                  		subi.w	#$1F,d0
0001B66E 6A00                       		bpl.s	loc_192AE
0001B670 4440                       		neg.w	d0
0001B672                            
0001B672                            loc_192AE:
0001B672 5340                       		subq.w	#1,d0
0001B674 6E00                       		bgt.s	loc_192E8
0001B676 4A28 003D                  		tst.b	$3D(a0)
0001B67A 6600                       		bne.s	loc_192E8
0001B67C 3238 D008                  		move.w	($FFFFD008).w,d1
0001B680 0441 2C00                  		subi.w	#$2C00,d1
0001B684 EA41                       		asr.w	#5,d1
0001B686 B228 0034                  		cmp.b	$34(a0),d1
0001B68A 6600                       		bne.s	loc_192E8
0001B68C 7000                       		moveq	#0,d0
0001B68E 1028 0034                  		move.b	$34(a0),d0
0001B692 EB40                       		asl.w	#5,d0
0001B694 0640 2C10                  		addi.w	#$2C10,d0
0001B698 3140 0030                  		move.w	d0,$30(a0)
0001B69C 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B6A0 5428 0025                  		addq.b	#2,$25(a0)
0001B6A4 4268 0028                  		clr.w	$28(a0)
0001B6A8 4268 0010                  		clr.w	$10(a0)
0001B6AC                            
0001B6AC                            loc_192E8:
0001B6AC 6000 FEF4                  		bra.w	loc_191DE
0001B6B0                            ; ===========================================================================
0001B6B0                            
0001B6B0                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B6B0 7000                       		moveq	#0,d0
0001B6B2 1028 0028                  		move.b	$28(a0),d0
0001B6B6 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B6BA 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B6BE                            ; ===========================================================================
0001B6BE 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B6C0 0000                       		dc.w loc_19348-off_192FA
0001B6C2 0000                       		dc.w loc_1938E-off_192FA
0001B6C4 0000                       		dc.w loc_193D0-off_192FA
0001B6C6                            ; ===========================================================================
0001B6C6                            
0001B6C6                            loc_19302:				; XREF: off_192FA
0001B6C6 317C 0180 0012             		move.w	#$180,$12(a0)
0001B6CC 3028 0038                  		move.w	$38(a0),d0
0001B6D0 0C40 0556                  		cmpi.w	#$556,d0
0001B6D4 6500                       		bcs.s	loc_19344
0001B6D6 317C 0556 0038             		move.w	#$556,$38(a0)
0001B6DC 4268 003C                  		clr.w	$3C(a0)
0001B6E0 70FF                       		moveq	#-1,d0
0001B6E2 3028 0036                  		move.w	$36(a0),d0
0001B6E6 6700                       		beq.s	loc_1933C
0001B6E8 2240                       		movea.l	d0,a1
0001B6EA 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B6F0 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B6F6 2348 0034                  		move.l	a0,$34(a1)
0001B6FA 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B700                            
0001B700                            loc_1933C:
0001B700 4268 0012                  		clr.w	$12(a0)
0001B704 5428 0028                  		addq.b	#2,$28(a0)
0001B708                            
0001B708                            loc_19344:
0001B708 6000 FEAC                  		bra.w	loc_191F2
0001B70C                            ; ===========================================================================
0001B70C                            
0001B70C                            loc_19348:				; XREF: off_192FA
0001B70C 5368 003C                  		subq.w	#1,$3C(a0)
0001B710 6A00                       		bpl.s	loc_19366
0001B712 5428 0028                  		addq.b	#2,$28(a0)
0001B716 317C F800 0012             		move.w	#-$800,$12(a0)
0001B71C 4A68 0036                  		tst.w	$36(a0)
0001B720 6600                       		bne.s	loc_19362
0001B722 E0E8 0012                  		asr	$12(a0)
0001B726                            
0001B726                            loc_19362:
0001B726 7000                       		moveq	#0,d0
0001B728 6000                       		bra.s	loc_1937C
0001B72A                            ; ===========================================================================
0001B72A                            
0001B72A                            loc_19366:
0001B72A 7000                       		moveq	#0,d0
0001B72C 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B732 6E00                       		bgt.s	loc_1937C
0001B734 7002                       		moveq	#2,d0
0001B736 0828 0001 003D             		btst	#1,$3D(a0)
0001B73C 6700                       		beq.s	loc_1937C
0001B73E 4440                       		neg.w	d0
0001B740                            
0001B740                            loc_1937C:
0001B740 D068 0038                  		add.w	$38(a0),d0
0001B744 3140 000C                  		move.w	d0,$C(a0)
0001B748 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B74E 6000 FE76                  		bra.w	loc_19202
0001B752                            ; ===========================================================================
0001B752                            
0001B752                            loc_1938E:				; XREF: off_192FA
0001B752 303C 04DA                  		move.w	#$4DA,d0
0001B756 4A68 0036                  		tst.w	$36(a0)
0001B75A 6700                       		beq.s	loc_1939C
0001B75C 0440 0018                  		subi.w	#$18,d0
0001B760                            
0001B760                            loc_1939C:
0001B760 B068 0038                  		cmp.w	$38(a0),d0
0001B764 6D00                       		blt.s	loc_193BE
0001B766 317C 0008 003C             		move.w	#8,$3C(a0)
0001B76C 4A68 0036                  		tst.w	$36(a0)
0001B770 6700                       		beq.s	loc_193B4
0001B772 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B778                            
0001B778                            loc_193B4:
0001B778 5428 0028                  		addq.b	#2,$28(a0)
0001B77C 4268 0012                  		clr.w	$12(a0)
0001B780 6000                       		bra.s	loc_193CC
0001B782                            ; ===========================================================================
0001B782                            
0001B782                            loc_193BE:
0001B782 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B788 6C00                       		bge.s	loc_193CC
0001B78A 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B790                            
0001B790                            loc_193CC:
0001B790 6000 FE24                  		bra.w	loc_191F2
0001B794                            ; ===========================================================================
0001B794                            
0001B794                            loc_193D0:				; XREF: off_192FA
0001B794 5368 003C                  		subq.w	#1,$3C(a0)
0001B798 6E00                       		bgt.s	loc_19406
0001B79A 6B00                       		bmi.s	loc_193EE
0001B79C 70FF                       		moveq	#-1,d0
0001B79E 3028 0036                  		move.w	$36(a0),d0
0001B7A2 6700                       		beq.s	loc_193E8
0001B7A4 2240                       		movea.l	d0,a1
0001B7A6 137C 000A 0029             		move.b	#$A,$29(a1)
0001B7AC                            
0001B7AC                            loc_193E8:
0001B7AC 4268 0036                  		clr.w	$36(a0)
0001B7B0 6000                       		bra.s	loc_19406
0001B7B2                            ; ===========================================================================
0001B7B2                            
0001B7B2                            loc_193EE:
0001B7B2 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B7B8 6600                       		bne.s	loc_19406
0001B7BA 4228 0029                  		clr.b	$29(a0)
0001B7BE 5528 0025                  		subq.b	#2,$25(a0)
0001B7C2 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B7C8 6000                       		bra.s	loc_19446
0001B7CA                            ; ===========================================================================
0001B7CA                            
0001B7CA                            loc_19406:
0001B7CA 7001                       		moveq	#1,d0
0001B7CC 4A68 0036                  		tst.w	$36(a0)
0001B7D0 6700                       		beq.s	loc_19410
0001B7D2 7002                       		moveq	#2,d0
0001B7D4                            
0001B7D4                            loc_19410:
0001B7D4 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B7DA 6700                       		beq.s	loc_19424
0001B7DC 6D00                       		blt.s	loc_1941C
0001B7DE 4440                       		neg.w	d0
0001B7E0                            
0001B7E0                            loc_1941C:
0001B7E0 4A68 0036                  		tst.w	$36(a0)
0001B7E4 D168 0038                  		add.w	d0,$38(a0)
0001B7E8                            
0001B7E8                            loc_19424:
0001B7E8 7000                       		moveq	#0,d0
0001B7EA 4A68 0036                  		tst.w	$36(a0)
0001B7EE 6700                       		beq.s	loc_19438
0001B7F0 7002                       		moveq	#2,d0
0001B7F2 0828 0000 003D             		btst	#0,$3D(a0)
0001B7F8 6700                       		beq.s	loc_19438
0001B7FA 4440                       		neg.w	d0
0001B7FC                            
0001B7FC                            loc_19438:
0001B7FC D068 0038                  		add.w	$38(a0),d0
0001B800 3140 000C                  		move.w	d0,$C(a0)
0001B804 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B80A                            
0001B80A                            loc_19446:
0001B80A 6000 FDBA                  		bra.w	loc_19202
0001B80E                            
0001B80E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B80E                            
0001B80E                            
0001B80E                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B80E 4268 0036                  		clr.w	$36(a0)
0001B812 43F8 D040                  		lea	($FFFFD040).w,a1
0001B816 703E                       		moveq	#$3E,d0
0001B818 7276                       		moveq	#$76,d1
0001B81A 1428 0034                  		move.b	$34(a0),d2
0001B81E                            
0001B81E                            Obj75_FindLoop:
0001B81E B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B820 6600                       		bne.s	loc_1946A	; if not, branch
0001B822 B429 0028                  		cmp.b	$28(a1),d2
0001B826 6600                       		bne.s	loc_1946A
0001B828 3149 0036                  		move.w	a1,$36(a0)
0001B82C 6000                       		bra.s	locret_19472
0001B82E                            ; ===========================================================================
0001B82E                            
0001B82E                            loc_1946A:
0001B82E 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B832 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B836                            
0001B836                            locret_19472:
0001B836 4E75                       		rts	
0001B838                            ; End of function Obj75_FindBlocks
0001B838                            
0001B838                            ; ===========================================================================
0001B838                            
0001B838                            loc_19474:				; XREF: Obj75_ShipIndex
0001B838 5368 003C                  		subq.w	#1,$3C(a0)
0001B83C 6B00                       		bmi.s	loc_1947E
0001B83E 6000 E23A                  		bra.w	BossDefeated
0001B842                            ; ===========================================================================
0001B842                            
0001B842                            loc_1947E:
0001B842 5428 0025                  		addq.b	#2,$25(a0)
0001B846 4268 0012                  		clr.w	$12(a0)
0001B84A 08E8 0000 0022             		bset	#0,$22(a0)
0001B850 08A8 0007 0022             		bclr	#7,$22(a0)
0001B856 4268 0010                  		clr.w	$10(a0)
0001B85A 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B860 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B864 6600                       		bne.s	loc_194A8
0001B866 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B86C                            
0001B86C                            loc_194A8:
0001B86C 6000 FD58                  		bra.w	loc_19202
0001B870                            ; ===========================================================================
0001B870                            
0001B870                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B870 5268 003C                  		addq.w	#1,$3C(a0)
0001B874 6700                       		beq.s	loc_194BC
0001B876 6A00                       		bpl.s	loc_194C2
0001B878 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B87E 6000 0000                  		bra.w	loc_194EE
0001B882                            ; ===========================================================================
0001B882                            
0001B882                            loc_194BC:
0001B882 4268 0012                  		clr.w	$12(a0)
0001B886 6000 0000                  		bra.w	loc_194EE
0001B88A                            ; ===========================================================================
0001B88A                            
0001B88A                            loc_194C2:
0001B88A 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B890 6500                       		bcs.s	loc_194DA
0001B892 6700                       		beq.s	loc_194E0
0001B894 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B89A 6500 0000                  		bcs.w	loc_194EE
0001B89E 5428 0025                  		addq.b	#2,$25(a0)
0001B8A2 6000                       		bra.s	loc_194EE
0001B8A4                            ; ===========================================================================
0001B8A4                            
0001B8A4                            loc_194DA:
0001B8A4 5168 0012                  		subq.w	#8,$12(a0)
0001B8A8 6000                       		bra.s	loc_194EE
0001B8AA                            ; ===========================================================================
0001B8AA                            
0001B8AA                            loc_194E0:
0001B8AA 4268 0012                  		clr.w	$12(a0)
0001B8AE 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated			
0001B914 303C 0085                  		move.w	#$85,d0
0001B918 4EB9 0000 121A             		jsr	(PlaySound).l	; play SYZ music
0001B91E                            
0001B91E                            loc_194EE:
0001B91E 6000 FC96                  		bra.w	loc_191F2
0001B922                            ; ===========================================================================
0001B922                            
0001B922                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B922 317C 0400 0010             		move.w	#$400,$10(a0)
0001B928 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B92E 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B934 6400                       		bcc.s	loc_1950C
0001B936 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B93A 6000                       		bra.s	loc_19512
0001B93C                            ; ===========================================================================
0001B93C                            
0001B93C                            loc_1950C:
0001B93C 4A28 0001                  		tst.b	1(a0)
0001B940 6A00                       		bpl.s	Obj75_ShipDelete
0001B942                            
0001B942                            loc_19512:
0001B942 6100 E184                  		bsr.w	BossMove
0001B946 6000 FC5A                  		bra.w	loc_191DE
0001B94A                            ; ===========================================================================
0001B94A                            
0001B94A                            Obj75_ShipDelete:
0001B94A 4EF9 0000 EB7E             		jmp	DeleteObject
0001B950                            ; ===========================================================================
0001B950                            
0001B950                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B950 7201                       		moveq	#1,d1
0001B952 2268 0034                  		movea.l	$34(a0),a1
0001B956 7000                       		moveq	#0,d0
0001B958 1029 0025                  		move.b	$25(a1),d0
0001B95C 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B960 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B964 1141 001C                  		move.b	d1,$1C(a0)
0001B968 1010                       		move.b	(a0),d0
0001B96A B011                       		cmp.b	(a1),d0
0001B96C 6600                       		bne.s	Obj75_FaceDelete
0001B96E 6000                       		bra.s	loc_195BE
0001B970                            ; ===========================================================================
0001B970                            
0001B970                            Obj75_FaceDelete:
0001B970 4EF9 0000 EB7E             		jmp	DeleteObject
0001B976                            ; ===========================================================================
0001B976 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B97A 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B97E 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B982                            ; ===========================================================================
0001B982                            
0001B982                            loc_19552:				; XREF: off_19546
0001B982 720A                       		moveq	#$A,d1
0001B984 4E75                       		rts	
0001B986                            ; ===========================================================================
0001B986                            
0001B986                            loc_19556:				; XREF: off_19546
0001B986 7206                       		moveq	#6,d1
0001B988 4E75                       		rts	
0001B98A                            ; ===========================================================================
0001B98A                            
0001B98A                            loc_1955A:				; XREF: off_19546
0001B98A 7000                       		moveq	#0,d0
0001B98C 1029 0028                  		move.b	$28(a1),d0
0001B990 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B994 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B998                            ; ===========================================================================
0001B998 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B99C 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B9A0                            ; ===========================================================================
0001B9A0                            
0001B9A0                            loc_19570:				; XREF: off_19568
0001B9A0 6000                       		bra.s	loc_19574
0001B9A2                            ; ===========================================================================
0001B9A2                            
0001B9A2                            loc_19572:				; XREF: off_19568
0001B9A2 7206                       		moveq	#6,d1
0001B9A4                            
0001B9A4                            loc_19574:				; XREF: off_19546
0001B9A4 4A29 0020                  		tst.b	$20(a1)
0001B9A8 6600                       		bne.s	loc_1957E
0001B9AA 7205                       		moveq	#5,d1
0001B9AC 4E75                       		rts	
0001B9AE                            ; ===========================================================================
0001B9AE                            
0001B9AE                            loc_1957E:
0001B9AE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B9B4 6500                       		bcs.s	locret_19588
0001B9B6 7204                       		moveq	#4,d1
0001B9B8                            
0001B9B8                            locret_19588:
0001B9B8 4E75                       		rts	
0001B9BA                            ; ===========================================================================
0001B9BA                            
0001B9BA                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B9BA 117C 0007 001C             		move.b	#7,$1C(a0)
0001B9C0 2268 0034                  		movea.l	$34(a0),a1
0001B9C4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B9CA 6600                       		bne.s	loc_195AA
0001B9CC 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B9D2 4A28 0001                  		tst.b	1(a0)
0001B9D6 6A00                       		bpl.s	Obj75_FlameDelete
0001B9D8 6000                       		bra.s	loc_195B6
0001B9DA                            ; ===========================================================================
0001B9DA                            
0001B9DA                            loc_195AA:
0001B9DA 4A69 0010                  		tst.w	$10(a1)
0001B9DE 6700                       		beq.s	loc_195B6
0001B9E0 117C 0008 001C             		move.b	#8,$1C(a0)
0001B9E6                            
0001B9E6                            loc_195B6:
0001B9E6 6000                       		bra.s	loc_195BE
0001B9E8                            ; ===========================================================================
0001B9E8                            
0001B9E8                            Obj75_FlameDelete:
0001B9E8 4EF9 0000 EB7E             		jmp	DeleteObject
0001B9EE                            ; ===========================================================================
0001B9EE                            
0001B9EE                            loc_195BE:
0001B9EE 43F9 0001 9F44             		lea	(Ani_Eggman).l,a1
0001B9F4 4EB9 0000 BB8E             		jsr	AnimateSprite
0001B9FA 2268 0034                  		movea.l	$34(a0),a1
0001B9FE 3169 0008 0008             		move.w	8(a1),8(a0)
0001BA04 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BA0A                            
0001BA0A                            loc_195DA:
0001BA0A 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001BA10 7003                       		moveq	#3,d0
0001BA12 C028 0022                  		and.b	$22(a0),d0
0001BA16 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001BA1C 8128 0001                  		or.b	d0,1(a0)
0001BA20 4EF9 0000 EB2E             		jmp	DisplaySprite
0001BA26                            ; ===========================================================================
0001BA26                            
0001BA26                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001BA26 217C 0001 A05C 0004        		move.l	#Map_BossItems,4(a0)
0001BA2E 317C 246C 0002             		move.w	#$246C,2(a0)
0001BA34 117C 0005 001A             		move.b	#5,$1A(a0)
0001BA3A 2268 0034                  		movea.l	$34(a0),a1
0001BA3E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001BA44 6600                       		bne.s	loc_1961C
0001BA46 4A28 0001                  		tst.b	1(a0)
0001BA4A 6A00                       		bpl.s	Obj75_SpikeDelete
0001BA4C                            
0001BA4C                            loc_1961C:
0001BA4C 3169 0008 0008             		move.w	8(a1),8(a0)
0001BA52 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BA58 3028 003C                  		move.w	$3C(a0),d0
0001BA5C 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001BA62 6600                       		bne.s	loc_19652
0001BA64 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001BA6A 6700                       		beq.s	loc_1964C
0001BA6C 4A29 0028                  		tst.b	$28(a1)
0001BA70 6600                       		bne.s	loc_19658
0001BA72 0C40 0094                  		cmpi.w	#$94,d0
0001BA76 6C00                       		bge.s	loc_19658
0001BA78 5E40                       		addq.w	#7,d0
0001BA7A 6000                       		bra.s	loc_19658
0001BA7C                            ; ===========================================================================
0001BA7C                            
0001BA7C                            loc_1964C:
0001BA7C 4A69 003C                  		tst.w	$3C(a1)
0001BA80 6A00                       		bpl.s	loc_19658
0001BA82                            
0001BA82                            loc_19652:
0001BA82 4A40                       		tst.w	d0
0001BA84 6F00                       		ble.s	loc_19658
0001BA86 5B40                       		subq.w	#5,d0
0001BA88                            
0001BA88                            loc_19658:
0001BA88 3140 003C                  		move.w	d0,$3C(a0)
0001BA8C E440                       		asr.w	#2,d0
0001BA8E D168 000C                  		add.w	d0,$C(a0)
0001BA92 117C 0008 0019             		move.b	#8,$19(a0)
0001BA98 117C 000C 0016             		move.b	#$C,$16(a0)
0001BA9E 4228 0020                  		clr.b	$20(a0)
0001BAA2 2268 0034                  		movea.l	$34(a0),a1
0001BAA6 4A29 0020                  		tst.b	$20(a1)
0001BAAA 6700                       		beq.s	loc_19688
0001BAAC 4A29 0029                  		tst.b	$29(a1)
0001BAB0 6600                       		bne.s	loc_19688
0001BAB2 117C 0084 0020             		move.b	#$84,$20(a0)
0001BAB8                            
0001BAB8                            loc_19688:
0001BAB8 6000 FF50                  		bra.w	loc_195DA
0001BABC                            ; ===========================================================================
0001BABC                            
0001BABC                            Obj75_SpikeDelete:
0001BABC 4EF9 0000 EB7E             		jmp	DeleteObject
0001BAC2                            ; ===========================================================================
0001BAC2                            ; ---------------------------------------------------------------------------
0001BAC2                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001BAC2                            ; ---------------------------------------------------------------------------
0001BAC2                            
0001BAC2                            Obj76:					; XREF: Obj_Index
0001BAC2 7000                       		moveq	#0,d0
0001BAC4 1028 0024                  		move.b	$24(a0),d0
0001BAC8 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001BACC 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001BAD0                            ; ===========================================================================
0001BAD0 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001BAD2 0000                       		dc.w Obj76_Action-Obj76_Index
0001BAD4 0000                       		dc.w loc_19762-Obj76_Index
0001BAD6                            ; ===========================================================================
0001BAD6                            
0001BAD6                            Obj76_Main:				; XREF: Obj76_Index
0001BAD6 7800                       		moveq	#0,d4
0001BAD8 3A3C 2C10                  		move.w	#$2C10,d5
0001BADC 7C09                       		moveq	#9,d6
0001BADE 43D0                       		lea	(a0),a1
0001BAE0 6000                       		bra.s	Obj76_MakeBlock
0001BAE2                            ; ===========================================================================
0001BAE2                            
0001BAE2                            Obj76_Loop:
0001BAE2 4EB9 0000 F284             		jsr	SingleObjLoad
0001BAE8 6600                       		bne.s	Obj76_ExitLoop
0001BAEA                            
0001BAEA                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001BAEA 12BC 0076                  		move.b	#$76,(a1)
0001BAEE 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001BAF6 337C 4000 0002             		move.w	#$4000,2(a1)
0001BAFC 137C 0004 0001             		move.b	#4,1(a1)
0001BB02 137C 0010 0019             		move.b	#$10,$19(a1)
0001BB08 137C 0010 0016             		move.b	#$10,$16(a1)
0001BB0E 137C 0003 0018             		move.b	#3,$18(a1)
0001BB14 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001BB18 337C 0582 000C             		move.w	#$582,$C(a1)
0001BB1E 3344 0028                  		move.w	d4,$28(a1)
0001BB22 0644 0101                  		addi.w	#$101,d4
0001BB26 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001BB2A 5429 0024                  		addq.b	#2,$24(a1)
0001BB2E 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001BB32                            
0001BB32                            Obj76_ExitLoop:
0001BB32 4E75                       		rts	
0001BB34                            ; ===========================================================================
0001BB34                            
0001BB34                            Obj76_Action:				; XREF: Obj76_Index
0001BB34 1028 0029                  		move.b	$29(a0),d0
0001BB38 B028 0028                  		cmp.b	$28(a0),d0
0001BB3C 6700                       		beq.s	Obj76_Solid
0001BB3E 4A00                       		tst.b	d0
0001BB40 6B00                       		bmi.s	loc_19718
0001BB42                            
0001BB42                            loc_19712:
0001BB42 6100 0000                  		bsr.w	Obj76_Break
0001BB46 6000                       		bra.s	Obj76_Display
0001BB48                            ; ===========================================================================
0001BB48                            
0001BB48                            loc_19718:
0001BB48 2268 0034                  		movea.l	$34(a0),a1
0001BB4C 4A29 0021                  		tst.b	$21(a1)
0001BB50 67F0                       		beq.s	loc_19712
0001BB52 3169 0008 0008             		move.w	8(a1),8(a0)
0001BB58 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BB5E 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001BB64 B2C8                       		cmpa.w	a0,a1
0001BB66 6500                       		bcs.s	Obj76_Display
0001BB68 3029 0012                  		move.w	$12(a1),d0
0001BB6C 48C0                       		ext.l	d0
0001BB6E E080                       		asr.l	#8,d0
0001BB70 D168 000C                  		add.w	d0,$C(a0)
0001BB74 6000                       		bra.s	Obj76_Display
0001BB76                            ; ===========================================================================
0001BB76                            
0001BB76                            Obj76_Solid:				; XREF: Obj76_Action
0001BB76 323C 001B                  		move.w	#$1B,d1
0001BB7A 343C 0010                  		move.w	#$10,d2
0001BB7E 363C 0011                  		move.w	#$11,d3
0001BB82 3828 0008                  		move.w	8(a0),d4
0001BB86 4EB9 0001 149C             		jsr	SolidObject
0001BB8C                            
0001BB8C                            Obj76_Display:				; XREF: Obj76_Action
0001BB8C 4EF9 0000 EB2E             		jmp	DisplaySprite
0001BB92                            ; ===========================================================================
0001BB92                            
0001BB92                            loc_19762:				; XREF: Obj76_Index
0001BB92 4A28 0001                  		tst.b	1(a0)
0001BB96 6A00                       		bpl.s	Obj76_Delete
0001BB98 4EB9 0000 EAF4             		jsr	ObjectFall
0001BB9E 4EF9 0000 EB2E             		jmp	DisplaySprite
0001BBA4                            ; ===========================================================================
0001BBA4                            
0001BBA4                            Obj76_Delete:
0001BBA4 4EF9 0000 EB7E             		jmp	DeleteObject
0001BBAA                            
0001BBAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBAA                            
0001BBAA                            
0001BBAA                            Obj76_Break:				; XREF: Obj76_Action
0001BBAA 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001BBAE 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001BBB2 7801                       		moveq	#1,d4
0001BBB4 7203                       		moveq	#3,d1
0001BBB6 7438                       		moveq	#$38,d2
0001BBB8 5428 0024                  		addq.b	#2,$24(a0)
0001BBBC 117C 0008 0019             		move.b	#8,$19(a0)
0001BBC2 117C 0008 0016             		move.b	#8,$16(a0)
0001BBC8 43D0                       		lea	(a0),a1
0001BBCA 6000                       		bra.s	Obj76_MakeFrag
0001BBCC                            ; ===========================================================================
0001BBCC                            
0001BBCC                            Obj76_LoopFrag:
0001BBCC 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001BBD2 6600                       		bne.s	loc_197D4
0001BBD4                            
0001BBD4                            Obj76_MakeFrag:
0001BBD4 45D0                       		lea	(a0),a2
0001BBD6 47D1                       		lea	(a1),a3
0001BBD8 7603                       		moveq	#3,d3
0001BBDA                            
0001BBDA                            loc_197AA:
0001BBDA 26DA                       		move.l	(a2)+,(a3)+
0001BBDC 26DA                       		move.l	(a2)+,(a3)+
0001BBDE 26DA                       		move.l	(a2)+,(a3)+
0001BBE0 26DA                       		move.l	(a2)+,(a3)+
0001BBE2 51CB FFF6                  		dbf	d3,loc_197AA
0001BBE6                            
0001BBE6 335C 0010                  		move.w	(a4)+,$10(a1)
0001BBEA 335C 0012                  		move.w	(a4)+,$12(a1)
0001BBEE 361D                       		move.w	(a5)+,d3
0001BBF0 D769 0008                  		add.w	d3,8(a1)
0001BBF4 361D                       		move.w	(a5)+,d3
0001BBF6 D769 000C                  		add.w	d3,$C(a1)
0001BBFA 1344 001A                  		move.b	d4,$1A(a1)
0001BBFE 5244                       		addq.w	#1,d4
0001BC00 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001BC04                            
0001BC04                            loc_197D4:
0001BC04 303C 00CB                  		move.w	#$CB,d0
0001BC08 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play smashing sound
0001BC0E                            ; End of function Obj76_Break
0001BC0E                            
0001BC0E                            ; ===========================================================================
0001BC0E FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001BC12 0180 FE00                  		dc.w $180, $FE00
0001BC16 FF00 FF00                  		dc.w $FF00, $FF00
0001BC1A 0100 FF00                  		dc.w $100, $FF00
0001BC1E FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001BC22 0010 0000                  		dc.w $10, 0
0001BC26 0000 0010                  		dc.w 0,	$10
0001BC2A 0010 0010                  		dc.w $10, $10
0001BC2E                            ; ---------------------------------------------------------------------------
0001BC2E                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001BC2E                            ; ---------------------------------------------------------------------------
0001BC2E                            Map_obj76:
0001BC2E                            	include "_maps\obj76.asm"
0001BC2E                            ; ---------------------------------------------------------------------------
0001BC2E                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001BC2E                            ; ---------------------------------------------------------------------------
0001BC2E 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001BC32 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001BC36 0000                       		dc.w byte_19826-Map_obj76
0001BC38 02                         byte_19808:	dc.b 2
0001BC39 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001BC3E 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001BC43 00                         		dc.b 0
0001BC44 01                         byte_19814:	dc.b 1
0001BC45 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001BC4A 01                         byte_1981A:	dc.b 1
0001BC4B F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001BC50 01                         byte_19820:	dc.b 1
0001BC51 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001BC56 01                         byte_19826:	dc.b 1
0001BC57 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001BC5C                            		even
0001BC5C                            		even
0001BC5C                            
0001BC5C                            ; ===========================================================================
0001BC5C                            
0001BC5C                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001BC5C 4EF9 0000 EB7E             		jmp	DeleteObject
0001BC62                            ; ===========================================================================
0001BC62                            ; ---------------------------------------------------------------------------
0001BC62                            ; Object 82 - Eggman (SBZ2)
0001BC62                            ; ---------------------------------------------------------------------------
0001BC62                            
0001BC62                            Obj82:					; XREF: Obj_Index
0001BC62 7000                       		moveq	#0,d0
0001BC64 1028 0024                  		move.b	$24(a0),d0
0001BC68 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001BC6C 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001BC70                            ; ===========================================================================
0001BC70 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001BC72 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001BC74 0000                       		dc.w Obj82_Switch-Obj82_Index
0001BC76                            
0001BC76 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001BC79 0400 03                    		dc.b 4,	0, 3
0001BC7C                            ; ===========================================================================
0001BC7C                            
0001BC7C                            Obj82_Main:				; XREF: Obj82_Index
0001BC7C 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001BC80 317C 2160 0008             		move.w	#$2160,8(a0)
0001BC86 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001BC8C 117C 000F 0020             		move.b	#$F,$20(a0)
0001BC92 117C 0010 0021             		move.b	#$10,$21(a0)
0001BC98 08A8 0000 0022             		bclr	#0,$22(a0)
0001BC9E 4228 0025                  		clr.b	$25(a0)
0001BCA2 115A 0024                  		move.b	(a2)+,$24(a0)
0001BCA6 115A 001C                  		move.b	(a2)+,$1C(a0)
0001BCAA 115A 0018                  		move.b	(a2)+,$18(a0)
0001BCAE 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001BCB6 317C 0400 0002             		move.w	#$400,2(a0)
0001BCBC 117C 0004 0001             		move.b	#4,1(a0)
0001BCC2 08E8 0007 0001             		bset	#7,1(a0)
0001BCC8 117C 0020 0019             		move.b	#$20,$19(a0)
0001BCCE 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001BCD4 6600                       		bne.s	Obj82_Eggman
0001BCD6 2348 0034                  		move.l	a0,$34(a1)
0001BCDA 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001BCDE 337C 2130 0008             		move.w	#$2130,8(a1)
0001BCE4 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001BCEA 4228 0025                  		clr.b	$25(a0)
0001BCEE 135A 0024                  		move.b	(a2)+,$24(a1)
0001BCF2 135A 001C                  		move.b	(a2)+,$1C(a1)
0001BCF6 135A 0018                  		move.b	(a2)+,$18(a1)
0001BCFA 237C 0000 D398 0004        		move.l	#Map_obj32,4(a1)
0001BD02 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001BD08 137C 0004 0001             		move.b	#4,1(a1)
0001BD0E 08E9 0007 0001             		bset	#7,1(a1)
0001BD14 137C 0010 0019             		move.b	#$10,$19(a1)
0001BD1A 137C 0000 001A             		move.b	#0,$1A(a1)
0001BD20                            
0001BD20                            Obj82_Eggman:				; XREF: Obj82_Index
0001BD20 7000                       		moveq	#0,d0
0001BD22 1028 0025                  		move.b	$25(a0),d0
0001BD26 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001BD2A 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001BD2E 43FA 0000                  		lea	Ani_obj82(pc),a1
0001BD32 4EB9 0000 BB8E             		jsr	AnimateSprite
0001BD38 4EF9 0000 EB2E             		jmp	DisplaySprite
0001BD3E                            ; ===========================================================================
0001BD3E 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001BD40 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001BD42 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001BD44 0000                       		dc.w loc_19934-Obj82_EggIndex
0001BD46                            ; ===========================================================================
0001BD46                            
0001BD46                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001BD46 3028 0008                  		move.w	8(a0),d0
0001BD4A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BD4E 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001BD52 6400                       		bcc.s	loc_19934	; if not, branch
0001BD54 5428 0025                  		addq.b	#2,$25(a0)
0001BD58 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001BD5E 117C 0001 001C             		move.b	#1,$1C(a0)
0001BD64                            
0001BD64                            loc_19934:				; XREF: Obj82_EggIndex
0001BD64 4EF9 0000 EB14             		jmp	SpeedToPos
0001BD6A                            ; ===========================================================================
0001BD6A                            
0001BD6A                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001BD6A 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001BD6E 6600                       		bne.s	loc_19954	; if time remains, branch
0001BD70 5428 0025                  		addq.b	#2,$25(a0)
0001BD74 117C 0002 001C             		move.b	#2,$1C(a0)
0001BD7A 5868 000C                  		addq.w	#4,$C(a0)
0001BD7E 317C 000F 003C             		move.w	#15,$3C(a0)
0001BD84                            
0001BD84                            loc_19954:
0001BD84 60DE                       		bra.s	loc_19934
0001BD86                            ; ===========================================================================
0001BD86                            
0001BD86                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001BD86 5368 003C                  		subq.w	#1,$3C(a0)
0001BD8A 6E00                       		bgt.s	loc_199D0
0001BD8C 6600                       		bne.s	loc_1996A
0001BD8E 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001BD94 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001BD9A                            
0001BD9A                            loc_1996A:
0001BD9A 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001BDA0 6E00                       		bgt.s	loc_19976
0001BDA2 4268 0010                  		clr.w	$10(a0)
0001BDA6                            
0001BDA6                            loc_19976:
0001BDA6 0668 0024 0012             		addi.w	#$24,$12(a0)
0001BDAC 4A68 0012                  		tst.w	$12(a0)
0001BDB0 6B00                       		bmi.s	Obj82_FindBlocks
0001BDB2 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001BDB8 6500                       		bcs.s	Obj82_FindBlocks
0001BDBA 317C 5357 0028             		move.w	#$5357,$28(a0)
0001BDC0 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001BDC6 6500                       		bcs.s	Obj82_FindBlocks
0001BDC8 317C 059B 000C             		move.w	#$59B,$C(a0)
0001BDCE 4268 0012                  		clr.w	$12(a0)
0001BDD2                            
0001BDD2                            Obj82_FindBlocks:
0001BDD2 3028 0010                  		move.w	$10(a0),d0
0001BDD6 8068 0012                  		or.w	$12(a0),d0
0001BDDA 6600                       		bne.s	loc_199D0
0001BDDC 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001BDE0 703E                       		moveq	#$3E,d0
0001BDE2 7240                       		moveq	#$40,d1
0001BDE4                            
0001BDE4                            Obj82_FindLoop:	
0001BDE4 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001BDE6 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001BDEA 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001BDEE                            
0001BDEE 6600                       		bne.s	loc_199D0
0001BDF0 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001BDF6 5428 0025                  		addq.b	#2,$25(a0)
0001BDFA 117C 0001 001C             		move.b	#1,$1C(a0)
0001BE00                            
0001BE00                            loc_199D0:
0001BE00 6000 FF62                  		bra.w	loc_19934
0001BE04                            ; ===========================================================================
0001BE04                            
0001BE04                            Obj82_Switch:				; XREF: Obj82_Index
0001BE04 7000                       		moveq	#0,d0
0001BE06 1028 0025                  		move.b	$25(a0),d0
0001BE0A 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001BE0E 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001BE12                            ; ===========================================================================
0001BE12 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001BE14 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001BE16                            ; ===========================================================================
0001BE16                            
0001BE16                            loc_199E6:				; XREF: Obj82_SwIndex
0001BE16 2268 0034                  		movea.l	$34(a0),a1
0001BE1A 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001BE20 6600                       		bne.s	Obj82_SwDisplay
0001BE22 117C 0001 001A             		move.b	#1,$1A(a0)
0001BE28 5428 0025                  		addq.b	#2,$25(a0)
0001BE2C                            
0001BE2C                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001BE2C 4EF9 0000 EB2E             		jmp	DisplaySprite
0001BE32                            ; ===========================================================================
0001BE32                            Ani_obj82:
0001BE32                            	include "_anim\obj82.asm"
0001BE32                            ; ---------------------------------------------------------------------------
0001BE32                            ; Animation script - Eggman (SBZ2)
0001BE32                            ; ---------------------------------------------------------------------------
0001BE32 0000                       		dc.w byte_19A10-Ani_obj82
0001BE34 0000                       		dc.w byte_19A14-Ani_obj82
0001BE36 0000                       		dc.w byte_19A18-Ani_obj82
0001BE38 0000                       		dc.w byte_19A20-Ani_obj82
0001BE3A 0000                       		dc.w byte_19A24-Ani_obj82
0001BE3C 0000                       		dc.w byte_19A2A-Ani_obj82
0001BE3E 0000                       		dc.w byte_19A30-Ani_obj82
0001BE40 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001BE44 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001BE48 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001BE50 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001BE54 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001BE5A 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001BE60 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001BE64                            		even
0001BE64                            		even
0001BE64                            
0001BE64                            ; ---------------------------------------------------------------------------
0001BE64                            ; Sprite mappings - Eggman (SBZ2)
0001BE64                            ; ---------------------------------------------------------------------------
0001BE64                            Map_obj82:
0001BE64                            	include "_maps\obj82.asm"
0001BE64                            ; ---------------------------------------------------------------------------
0001BE64                            ; Sprite mappings - Eggman (SBZ2)
0001BE64                            ; ---------------------------------------------------------------------------
0001BE64 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001BE68 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001BE6C 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001BE70 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001BE74 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001BE78 0000                       		dc.w byte_19B4F-Map_obj82
0001BE7A 03                         byte_19A4A:	dc.b 3
0001BE7B FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BE80 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BE85 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BE8A 04                         byte_19A5A:	dc.b 4
0001BE8B E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001BE90 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BE95 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BE9A FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BE9F 00                         		dc.b 0
0001BEA0 04                         byte_19A70:	dc.b 4
0001BEA1 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001BEA6 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001BEAB 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001BEB0 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001BEB5 00                         		dc.b 0
0001BEB6 04                         byte_19A86:	dc.b 4
0001BEB7 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001BEBC F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001BEC1 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001BEC6 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001BECB 00                         		dc.b 0
0001BECC 04                         byte_19A9C:	dc.b 4
0001BECD F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BED2 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BED7 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001BEDC E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BEE1 00                         		dc.b 0
0001BEE2 04                         byte_19AB2:	dc.b 4
0001BEE3 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BEE8 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BEED E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BEF2 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BEF7 00                         		dc.b 0
0001BEF8 07                         byte_19AC8:	dc.b 7
0001BEF9 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BEFE E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BF03 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BF08 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BF0D F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BF12 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001BF17 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001BF1C 05                         byte_19AEC:	dc.b 5
0001BF1D F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BF22 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BF27 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BF2C 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BF31 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BF36 06                         byte_19B06:	dc.b 6
0001BF37 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001BF3C EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001BF41 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001BF46 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001BF4B 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001BF50 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001BF55 00                         		dc.b 0
0001BF56 08                         byte_19B26:	dc.b 8
0001BF57 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BF5C E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BF61 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BF66 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BF6B E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001BF70 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001BF75 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001BF7A 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001BF7F 03                         byte_19B4F:	dc.b 3
0001BF80 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001BF85 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001BF8A EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001BF90 00                         		even
0001BF90 00                         		even
0001BF90                            
0001BF90                            ; ===========================================================================
0001BF90                            ; ---------------------------------------------------------------------------
0001BF90                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001BF90                            ; ---------------------------------------------------------------------------
0001BF90                            
0001BF90                            Obj83:					; XREF: Obj_Index
0001BF90 7000                       		moveq	#0,d0
0001BF92 1028 0024                  		move.b	$24(a0),d0
0001BF96 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001BF9A 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001BF9E                            ; ===========================================================================
0001BF9E 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001BFA0 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001BFA2 0000                       		dc.w loc_19C36-Obj83_Index
0001BFA4 0000                       		dc.w loc_19C62-Obj83_Index
0001BFA6 0000                       		dc.w loc_19C72-Obj83_Index
0001BFA8 0000                       		dc.w loc_19C80-Obj83_Index
0001BFAA                            ; ===========================================================================
0001BFAA                            
0001BFAA                            Obj83_Main:				; XREF: Obj83_Index
0001BFAA 317C 2080 0008             		move.w	#$2080,8(a0)
0001BFB0 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001BFB6 117C 0080 0019             		move.b	#$80,$19(a0)
0001BFBC 117C 0010 0016             		move.b	#$10,$16(a0)
0001BFC2 117C 0004 0001             		move.b	#4,1(a0)
0001BFC8 08E8 0007 0001             		bset	#7,1(a0)
0001BFCE 7800                       		moveq	#0,d4
0001BFD0 3A3C 2010                  		move.w	#$2010,d5
0001BFD4 7C07                       		moveq	#7,d6
0001BFD6 45E8 0030                  		lea	$30(a0),a2
0001BFDA                            
0001BFDA                            Obj83_MakeBlock:
0001BFDA 4EB9 0000 F284             		jsr	SingleObjLoad
0001BFE0 6600                       		bne.s	Obj83_ExitMake
0001BFE2 34C9                       		move.w	a1,(a2)+
0001BFE4 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001BFE8 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001BFF0 337C 4518 0002             		move.w	#$4518,2(a1)
0001BFF6 137C 0004 0001             		move.b	#4,1(a1)
0001BFFC 137C 0010 0019             		move.b	#$10,$19(a1)
0001C002 137C 0010 0016             		move.b	#$10,$16(a1)
0001C008 137C 0003 0018             		move.b	#3,$18(a1)
0001C00E 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001C012 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001C018 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001C01C 137C 0008 0024             		move.b	#8,$24(a1)
0001C022 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001C026                            
0001C026                            Obj83_ExitMake:
0001C026 5428 0024                  		addq.b	#2,$24(a0)
0001C02A 4E75                       		rts	
0001C02C                            ; ===========================================================================
0001C02C                            
0001C02C                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001C02C 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001C032 6600                       		bne.s	Obj83_Solid	; if not, branch
0001C034 4228 001A                  		clr.b	$1A(a0)
0001C038 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001C03C                            
0001C03C                            Obj83_Solid:
0001C03C 7000                       		moveq	#0,d0
0001C03E 1028 001A                  		move.b	$1A(a0),d0
0001C042 4400                       		neg.b	d0
0001C044 4880                       		ext.w	d0
0001C046 5040                       		addq.w	#8,d0
0001C048 E940                       		asl.w	#4,d0
0001C04A 383C 2100                  		move.w	#$2100,d4
0001C04E 9840                       		sub.w	d0,d4
0001C050 1140 0019                  		move.b	d0,$19(a0)
0001C054 3144 0008                  		move.w	d4,8(a0)
0001C058 720B                       		moveq	#$B,d1
0001C05A D240                       		add.w	d0,d1
0001C05C 7410                       		moveq	#$10,d2
0001C05E 7611                       		moveq	#$11,d3
0001C060 4EF9 0001 149C             		jmp	SolidObject
0001C066                            ; ===========================================================================
0001C066                            
0001C066                            loc_19C36:				; XREF: Obj83_Index
0001C066 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001C06C 6400                       		bcc.s	Obj83_Solid2
0001C06E 70FF                       		moveq	#-1,d0
0001C070 1028 001A                  		move.b	$1A(a0),d0
0001C074 4880                       		ext.w	d0
0001C076 D040                       		add.w	d0,d0
0001C078 3030 0030                  		move.w	$30(a0,d0.w),d0
0001C07C 2240                       		movea.l	d0,a1
0001C07E 337C 474F 0028             		move.w	#$474F,$28(a1)
0001C084 5228 001A                  		addq.b	#1,$1A(a0)
0001C088 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001C08E 6700                       		beq.s	loc_19C62
0001C090                            
0001C090                            Obj83_Solid2:
0001C090 60AA                       		bra.s	Obj83_Solid
0001C092                            ; ===========================================================================
0001C092                            
0001C092                            loc_19C62:				; XREF: Obj83_Index
0001C092 08A8 0003 0022             		bclr	#3,$22(a0)
0001C098 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C09E 6000 FBBC                  		bra.w	loc_1982C
0001C0A2                            ; ===========================================================================
0001C0A2                            
0001C0A2                            loc_19C72:				; XREF: Obj83_Index
0001C0A2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001C0A8 6700                       		beq.s	Obj83_Break	; if yes, branch
0001C0AA 4EF9 0000 EB2E             		jmp	DisplaySprite
0001C0B0                            ; ===========================================================================
0001C0B0                            
0001C0B0                            loc_19C80:				; XREF: Obj83_Index
0001C0B0 4A28 0001                  		tst.b	1(a0)
0001C0B4 6A00 FBA6                  		bpl.w	loc_1982C
0001C0B8 4EB9 0000 EAF4             		jsr	ObjectFall
0001C0BE 4EF9 0000 EB2E             		jmp	DisplaySprite
0001C0C4                            ; ===========================================================================
0001C0C4                            
0001C0C4                            Obj83_Break:				; XREF: loc_19C72
0001C0C4 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001C0C8 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001C0CC 7801                       		moveq	#1,d4
0001C0CE 7203                       		moveq	#3,d1
0001C0D0 7438                       		moveq	#$38,d2
0001C0D2 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001C0D8 31FC 0200 F5D0             		move.w	#$200,(SonimeSST+sonime_facetimer).w
0001C0DE 5428 0024                  		addq.b	#2,$24(a0)
0001C0E2 117C 0008 0019             		move.b	#8,$19(a0)
0001C0E8 117C 0008 0016             		move.b	#8,$16(a0)
0001C0EE 43D0                       		lea	(a0),a1
0001C0F0 6000                       		bra.s	Obj83_MakeFrag
0001C0F2                            ; ===========================================================================
0001C0F2                            
0001C0F2                            Obj83_LoopFrag:
0001C0F2 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001C0F8 6600                       		bne.s	Obj83_BreakSnd
0001C0FA                            
0001C0FA                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001C0FA 45D0                       		lea	(a0),a2
0001C0FC 47D1                       		lea	(a1),a3
0001C0FE 7603                       		moveq	#3,d3
0001C100                            
0001C100                            loc_19CC4:
0001C100 26DA                       		move.l	(a2)+,(a3)+
0001C102 26DA                       		move.l	(a2)+,(a3)+
0001C104 26DA                       		move.l	(a2)+,(a3)+
0001C106 26DA                       		move.l	(a2)+,(a3)+
0001C108 51CB FFF6                  		dbf	d3,loc_19CC4
0001C10C                            
0001C10C 335C 0012                  		move.w	(a4)+,$12(a1)
0001C110 361D                       		move.w	(a5)+,d3
0001C112 D769 0008                  		add.w	d3,8(a1)
0001C116 361D                       		move.w	(a5)+,d3
0001C118 D769 000C                  		add.w	d3,$C(a1)
0001C11C 1344 001A                  		move.b	d4,$1A(a1)
0001C120 5244                       		addq.w	#1,d4
0001C122 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001C126                            
0001C126                            Obj83_BreakSnd:
0001C126 303C 00CB                  		move.w	#$CB,d0
0001C12A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play smashing sound
0001C130 4EF9 0000 EB2E             		jmp	DisplaySprite
0001C136                            ; ===========================================================================
0001C136 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001C13A 0120 00C0                  		dc.w $120, $C0
0001C13E FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001C142 0010 0000                  		dc.w $10, 0
0001C146 0000 0010                  		dc.w 0,	$10
0001C14A 0010 0010                  		dc.w $10, $10
0001C14E                            ; ---------------------------------------------------------------------------
0001C14E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001C14E                            ; ---------------------------------------------------------------------------
0001C14E                            Map_obj83:
0001C14E                            	include "_maps\obj83.asm"
0001C14E                            ; ---------------------------------------------------------------------------
0001C14E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001C14E                            ; ---------------------------------------------------------------------------
0001C14E 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001C152 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001C156 0000                       		dc.w byte_19D46-Map_obj83
0001C158 01                         byte_19D1C:	dc.b 1
0001C159 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001C15E 02                         byte_19D22:	dc.b 2
0001C15F F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001C164 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001C169 00                         		dc.b 0
0001C16A 02                         byte_19D2E:	dc.b 2
0001C16B F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001C170 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001C175 00                         		dc.b 0
0001C176 02                         byte_19D3A:	dc.b 2
0001C177 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001C17C F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001C181 00                         		dc.b 0
0001C182 02                         byte_19D46:	dc.b 2
0001C183 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001C188 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001C18E 00                         		even
0001C18E 00                         		even
0001C18E                            
0001C18E                            ; ===========================================================================
0001C18E                            ; ---------------------------------------------------------------------------
0001C18E                            ; Object 85 - Eggman (FZ)
0001C18E                            ; ---------------------------------------------------------------------------
0001C18E                            
0001C18E                            Obj85_Delete:
0001C18E 4EF9 0000 EB7E             		jmp	DeleteObject
0001C194                            ; ===========================================================================
0001C194                            
0001C194                            Obj85:					; XREF: Obj_Index
0001C194 7000                       		moveq	#0,d0
0001C196 1028 0024                  		move.b	$24(a0),d0
0001C19A 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001C19E 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001C1A2                            ; ===========================================================================
0001C1A2 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001C1A4 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001C1A6 0000                       		dc.w loc_1A38E-Obj85_Index
0001C1A8 0000                       		dc.w loc_1A346-Obj85_Index
0001C1AA 0000                       		dc.w loc_1A2C6-Obj85_Index
0001C1AC 0000                       		dc.w loc_1A3AC-Obj85_Index
0001C1AE 0000                       		dc.w loc_1A264-Obj85_Index
0001C1B0                            
0001C1B0 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001C1B6 0001 BE64                  		dc.l Map_obj82		; mappings pointer
0001C1BA 25B0 0590 0300             		dc.w $25B0, $590, $300
0001C1C0 0000 0000                  		dc.l Map_obj84
0001C1C4 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001C1CA 0000 0000                  		dc.l Map_FZBoss
0001C1CE 26E0 0596 0470             		dc.w $26E0, $596, $470
0001C1D4 0001 BE64                  		dc.l Map_obj82
0001C1D8 26E0 0596 0400             		dc.w $26E0, $596, $400
0001C1DE 0001 9F94                  		dc.l Map_Eggman
0001C1E2 26E0 0596 0400             		dc.w $26E0, $596, $400
0001C1E8 0001 9F94                  		dc.l Map_Eggman
0001C1EC                            
0001C1EC 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001C1F1 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001C1F6 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001C1FB 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001C200 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001C205 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001C20A                            ; ===========================================================================
0001C20A                            
0001C20A                            Obj85_Main:				; XREF: Obj85_Index
0001C20A 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001C20E 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001C212 2248                       		movea.l	a0,a1
0001C214 7205                       		moveq	#5,d1
0001C216 6000                       		bra.s	Obj85_LoadBoss
0001C218                            ; ===========================================================================
0001C218                            
0001C218                            Obj85_Loop:
0001C218 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001C21E 6600                       		bne.s	loc_19E20
0001C220                            
0001C220                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001C220 12BC 0085                  		move.b	#$85,(a1)
0001C224 335A 0008                  		move.w	(a2)+,8(a1)
0001C228 335A 000C                  		move.w	(a2)+,$C(a1)
0001C22C 335A 0002                  		move.w	(a2)+,2(a1)
0001C230 235A 0004                  		move.l	(a2)+,4(a1)
0001C234 135B 0024                  		move.b	(a3)+,$24(a1)
0001C238 135B 001C                  		move.b	(a3)+,$1C(a1)
0001C23C 135B 0018                  		move.b	(a3)+,$18(a1)
0001C240 135B 0017                  		move.b	(a3)+,$17(a1)
0001C244 135B 0016                  		move.b	(a3)+,$16(a1)
0001C248 137C 0004 0001             		move.b	#4,1(a1)
0001C24E 08E8 0007 0001             		bset	#7,1(a0)
0001C254 2348 0034                  		move.l	a0,$34(a1)
0001C258 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001C25C                            
0001C25C                            loc_19E20:
0001C25C 45E8 0036                  		lea	$36(a0),a2
0001C260 4EB9 0000 F284             		jsr	SingleObjLoad
0001C266 6600                       		bne.s	loc_19E5A
0001C268 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001C26C 3489                       		move.w	a1,(a2)
0001C26E 2348 0034                  		move.l	a0,$34(a1)
0001C272 45E8 0038                  		lea	$38(a0),a2
0001C276 7400                       		moveq	#0,d2
0001C278 7203                       		moveq	#3,d1
0001C27A                            
0001C27A                            loc_19E3E:
0001C27A 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001C280 6600                       		bne.s	loc_19E5A
0001C282 34C9                       		move.w	a1,(a2)+
0001C284 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001C288 2348 0034                  		move.l	a0,$34(a1)
0001C28C 1342 0028                  		move.b	d2,$28(a1)
0001C290 5442                       		addq.w	#2,d2
0001C292 51C9 FFE6                  		dbf	d1,loc_19E3E
0001C296                            
0001C296                            loc_19E5A:
0001C296 317C 0000 0034             		move.w	#0,$34(a0)
0001C29C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001C2A2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C2A8                            
0001C2A8                            Obj85_Eggman:				; XREF: Obj85_Index
0001C2A8 7000                       		moveq	#0,d0
0001C2AA 1028 0034                  		move.b	$34(a0),d0
0001C2AE 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001C2B2 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001C2B6 4EF9 0000 EB2E             		jmp	DisplaySprite
0001C2BC                            ; ===========================================================================
0001C2BC 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001C2C0 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001C2C4 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001C2C8 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001C2CC                            ; ===========================================================================
0001C2CC                            
0001C2CC                            loc_19E90:				; XREF: off_19E80
0001C2CC 4AB8 F680                  		tst.l	($FFFFF680).w
0001C2D0 6600                       		bne.s	loc_19EA2
0001C2D2 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001C2D8 6500                       		bcs.s	loc_19EA2
0001C2DA 5428 0034                  		addq.b	#2,$34(a0)
0001C2DE                            
0001C2DE                            loc_19EA2:
0001C2DE 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001C2E2 4E75                       		rts	
0001C2E4                            ; ===========================================================================
0001C2E4                            
0001C2E4                            loc_19EA8:				; XREF: off_19E80
0001C2E4 4A68 0030                  		tst.w	$30(a0)
0001C2E8 6A00                       		bpl.s	loc_19F10
0001C2EA 4268 0030                  		clr.w	$30(a0)
0001C2EE 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001C2F4 0240 000C                  		andi.w	#$C,d0
0001C2F8 3200                       		move.w	d0,d1
0001C2FA 5441                       		addq.w	#2,d1
0001C2FC 4A80                       		tst.l	d0
0001C2FE 6A00                       		bpl.s	loc_19EC6
0001C300 C141                       		exg	d1,d0
0001C302                            
0001C302                            loc_19EC6:
0001C302 43FA 0000                  		lea	word_19FD6(pc),a1
0001C306 3031 0000                  		move.w	(a1,d0.w),d0
0001C30A 3231 1000                  		move.w	(a1,d1.w),d1
0001C30E 3140 0030                  		move.w	d0,$30(a0)
0001C312 74FF                       		moveq	#-1,d2
0001C314 3430 0038                  		move.w	$38(a0,d0.w),d2
0001C318 2242                       		movea.l	d2,a1
0001C31A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C320 337C FFFF 0030             		move.w	#-1,$30(a1)
0001C326 3430 1038                  		move.w	$38(a0,d1.w),d2
0001C32A 2242                       		movea.l	d2,a1
0001C32C 137C 0001 0029             		move.b	#1,$29(a1)
0001C332 337C 0000 0030             		move.w	#0,$30(a1)
0001C338 317C 0001 0032             		move.w	#1,$32(a0)
0001C33E 4228 0035                  		clr.b	$35(a0)
0001C342 303C 00B7                  		move.w	#$B7,d0
0001C346 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001C34C                            
0001C34C                            loc_19F10:
0001C34C 4A68 0032                  		tst.w	$32(a0)
0001C350 6B00 0000                  		bmi.w	loc_19FA6
0001C354 08A8 0000 0022             		bclr	#0,$22(a0)
0001C35A 3038 D008                  		move.w	($FFFFD008).w,d0
0001C35E 9068 0008                  		sub.w	8(a0),d0
0001C362 6500                       		bcs.s	loc_19F2E
0001C364 08E8 0000 0022             		bset	#0,$22(a0)
0001C36A                            
0001C36A                            loc_19F2E:
0001C36A 323C 002B                  		move.w	#$2B,d1
0001C36E 343C 0014                  		move.w	#$14,d2
0001C372 363C 0014                  		move.w	#$14,d3
0001C376 3828 0008                  		move.w	8(a0),d4
0001C37A 4EB9 0001 149C             		jsr	SolidObject
0001C380 4A44                       		tst.w	d4
0001C382 6E00                       		bgt.s	loc_19F50
0001C384                            
0001C384                            loc_19F48:
0001C384 4A28 0035                  		tst.b	$35(a0)
0001C388 6600                       		bne.s	loc_19F88
0001C38A 6000                       		bra.s	loc_19F96
0001C38C                            ; ===========================================================================
0001C38C                            
0001C38C                            loc_19F50:
0001C38C 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001C390 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001C396 66EC                       		bne.s	loc_19F48
0001C398 303C 0300                  		move.w	#$300,d0
0001C39C 0828 0000 0022             		btst	#0,$22(a0)
0001C3A2 6600                       		bne.s	loc_19F6A
0001C3A4 4440                       		neg.w	d0
0001C3A6                            
0001C3A6                            loc_19F6A:
0001C3A6 31C0 D010                  		move.w	d0,($FFFFD010).w
0001C3AA 4A28 0035                  		tst.b	$35(a0)
0001C3AE 6600                       		bne.s	loc_19F88
0001C3B0 4A28 0021                  		tst.b	$21(a0)	;has the boss been defeated?
0001C3B4 6700                       		beq.s	loc_19F9C	;if so, don't let it be hit again.		
0001C3B6 5328 0021                  		subq.b	#1,$21(a0)
0001C3BA 117C 00FF 0035             		move.b	#255,$35(a0)
0001C3C0 303C 00AC                  		move.w	#$AC,d0
0001C3C4 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C3CA                            
0001C3CA                            loc_19F88:
0001C3CA 5328 0035                  		subq.b	#1,$35(a0)
0001C3CE 6700                       		beq.s	loc_19F96
0001C3D0 117C 0003 001C             		move.b	#3,$1C(a0)
0001C3D6 6000                       		bra.s	loc_19F9C
0001C3D8                            ; ===========================================================================
0001C3D8                            
0001C3D8                            loc_19F96:
0001C3D8 117C 0001 001C             		move.b	#1,$1C(a0)
0001C3DE                            
0001C3DE                            loc_19F9C:
0001C3DE 43FA FA52                  		lea	Ani_obj82(pc),a1
0001C3E2 4EF9 0000 BB8E             		jmp	AnimateSprite
0001C3E8                            ; ===========================================================================
0001C3E8                            
0001C3E8                            loc_19FA6:
0001C3E8 4A28 0021                  		tst.b	$21(a0)
0001C3EC 6700                       		beq.s	loc_19FBC
0001C3EE 5428 0034                  		addq.b	#2,$34(a0)
0001C3F2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C3F8 4268 0032                  		clr.w	$32(a0)
0001C3FC 4E75                       		rts	
0001C3FE                            ; ===========================================================================
0001C3FE                            
0001C3FE                            loc_19FBC:
0001C3FE 117C 0006 0034             		move.b	#6,$34(a0)
0001C404 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001C40A 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C410 117C 0014 0016             		move.b	#$14,$16(a0)
0001C416 4E75                       		rts	
0001C418                            ; ===========================================================================
0001C418 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001C428                            ; ===========================================================================
0001C428                            
0001C428                            loc_19FE6:				; XREF: off_19E80
0001C428 70FF                       		moveq	#-1,d0
0001C42A 3028 0036                  		move.w	$36(a0),d0
0001C42E 2240                       		movea.l	d0,a1
0001C430 4A68 0030                  		tst.w	$30(a0)
0001C434 6A00                       		bpl.s	loc_1A000
0001C436 4268 0030                  		clr.w	$30(a0)
0001C43A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C440 6100                       		bsr.s	loc_1A020
0001C442                            
0001C442                            loc_1A000:
0001C442 700F                       		moveq	#$F,d0
0001C444 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001C448 6600                       		bne.s	loc_1A00A
0001C44A 6100                       		bsr.s	loc_1A020
0001C44C                            
0001C44C                            loc_1A00A:
0001C44C 4A68 0032                  		tst.w	$32(a0)
0001C450 6700                       		beq.s	locret_1A01E
0001C452 5528 0034                  		subq.b	#2,$34(a0)
0001C456 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C45C 4268 0032                  		clr.w	$32(a0)
0001C460                            
0001C460                            locret_1A01E:
0001C460 4E75                       		rts	
0001C462                            ; ===========================================================================
0001C462                            
0001C462                            loc_1A020:
0001C462 303C 00B1                  		move.w	#$B1,d0
0001C466 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play electricity sound
0001C46C                            ; ===========================================================================
0001C46C                            
0001C46C                            loc_1A02A:				; XREF: off_19E80
0001C46C 117C 0030 0017             		move.b	#$30,$17(a0)
0001C472 08E8 0000 0022             		bset	#0,$22(a0)
0001C478 4EB9 0000 EB14             		jsr	SpeedToPos
0001C47E 117C 0006 001A             		move.b	#6,$1A(a0)
0001C484 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C48A 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001C490 6500                       		bcs.s	loc_1A070
0001C492 317C 059C 000C             		move.w	#$59C,$C(a0)
0001C498 5428 0034                  		addq.b	#2,$34(a0)
0001C49C 117C 0020 0017             		move.b	#$20,$17(a0)
0001C4A2 317C 0100 0010             		move.w	#$100,$10(a0)
0001C4A8 317C FF00 0012             		move.w	#-$100,$12(a0)
0001C4AE 5438 F742                  		addq.b	#2,($FFFFF742).w
0001C4B2                            
0001C4B2                            loc_1A070:
0001C4B2 6000 0000                  		bra.w	loc_1A166
0001C4B6                            ; ===========================================================================
0001C4B6                            
0001C4B6                            loc_1A074:				; XREF: off_19E80
0001C4B6 08E8 0000 0022             		bset	#0,$22(a0)
0001C4BC 117C 0004 001C             		move.b	#4,$1C(a0)
0001C4C2 4EB9 0000 EB14             		jsr	SpeedToPos
0001C4C8 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C4CE 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001C4D4 6500                       		bcs.s	loc_1A09A
0001C4D6 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001C4DC                            
0001C4DC                            loc_1A09A:
0001C4DC 317C 0400 0010             		move.w	#$400,$10(a0)
0001C4E2 3028 0008                  		move.w	8(a0),d0
0001C4E6 9078 D008                  		sub.w	($FFFFD008).w,d0
0001C4EA 6A00                       		bpl.s	loc_1A0B4
0001C4EC 317C 0500 0010             		move.w	#$500,$10(a0)
0001C4F2 6000 0000                  		bra.w	loc_1A0F2
0001C4F6                            ; ===========================================================================
0001C4F6                            
0001C4F6                            loc_1A0B4:
0001C4F6 0440 0070                  		subi.w	#$70,d0
0001C4FA 6500                       		bcs.s	loc_1A0F2
0001C4FC 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C502 5140                       		subq.w	#8,d0
0001C504 6500                       		bcs.s	loc_1A0F2
0001C506 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C50C 5140                       		subq.w	#8,d0
0001C50E 6500                       		bcs.s	loc_1A0F2
0001C510 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C516 5140                       		subq.w	#8,d0
0001C518 6500                       		bcs.s	loc_1A0F2
0001C51A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C520 5140                       		subq.w	#8,d0
0001C522 6500                       		bcs.s	loc_1A0F2
0001C524 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C52A 0440 0038                  		subi.w	#$38,d0
0001C52E 6500                       		bcs.s	loc_1A0F2
0001C530 4268 0010                  		clr.w	$10(a0)
0001C534                            
0001C534                            loc_1A0F2:
0001C534 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001C53A 6500                       		bcs.s	loc_1A110
0001C53C 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001C542 317C 0240 0010             		move.w	#$240,$10(a0)
0001C548 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001C54E 5428 0034                  		addq.b	#2,$34(a0)
0001C552                            
0001C552                            loc_1A110:
0001C552 6000                       		bra.s	loc_1A15C
0001C554                            ; ===========================================================================
0001C554                            
0001C554                            loc_1A112:				; XREF: off_19E80
0001C554 4EB9 0000 EB14             		jsr	SpeedToPos
0001C55A 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001C560 6500                       		bcs.s	loc_1A124
0001C562 4268 0010                  		clr.w	$10(a0)
0001C566                            
0001C566                            loc_1A124:
0001C566 0668 0034 0012             		addi.w	#$34,$12(a0)
0001C56C 4A68 0012                  		tst.w	$12(a0)
0001C570 6B00                       		bmi.s	loc_1A142
0001C572 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001C578 6500                       		bcs.s	loc_1A142
0001C57A 317C 0592 000C             		move.w	#$592,$C(a0)
0001C580 4268 0012                  		clr.w	$12(a0)
0001C584                            
0001C584                            loc_1A142:
0001C584 3028 0010                  		move.w	$10(a0),d0
0001C588 8068 0012                  		or.w	$12(a0),d0
0001C58C 6600                       		bne.s	loc_1A15C
0001C58E 5428 0034                  		addq.b	#2,$34(a0)
0001C592 317C FE80 0012             		move.w	#-$180,$12(a0)
0001C598 117C 0001 0021             		move.b	#1,$21(a0)
0001C59E                            
0001C59E                            loc_1A15C:
0001C59E 43FA F892                  		lea	Ani_obj82(pc),a1
0001C5A2 4EB9 0000 BB8E             		jsr	AnimateSprite
0001C5A8                            
0001C5A8                            loc_1A166:
0001C5A8 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001C5AE 6C00                       		bge.s	loc_1A172
0001C5B0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001C5B4                            
0001C5B4                            loc_1A172:
0001C5B4 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001C5BA 6C00                       		bge.s	locret_1A190
0001C5BC 323C 001B                  		move.w	#$1B,d1
0001C5C0 343C 0070                  		move.w	#$70,d2
0001C5C4 363C 0071                  		move.w	#$71,d3
0001C5C8 3828 0008                  		move.w	8(a0),d4
0001C5CC 4EF9 0001 149C             		jmp	SolidObject
0001C5D2                            ; ===========================================================================
0001C5D2                            
0001C5D2                            locret_1A190:
0001C5D2 4E75                       		rts	
0001C5D4                            ; ===========================================================================
0001C5D4                            
0001C5D4                            loc_1A192:				; XREF: off_19E80
0001C5D4 217C 0001 9F94 0004        		move.l	#Map_Eggman,4(a0)
0001C5DC 317C 0400 0002             		move.w	#$400,2(a0)
0001C5E2 117C 0000 001C             		move.b	#0,$1C(a0)
0001C5E8 08E8 0000 0022             		bset	#0,$22(a0)
0001C5EE 4EB9 0000 EB14             		jsr	SpeedToPos
0001C5F4 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001C5FA 6400                       		bcc.s	loc_1A1D0
0001C5FC 317C 0180 0010             		move.w	#$180,$10(a0)
0001C602 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001C608 117C 000F 0020             		move.b	#$F,$20(a0)
0001C60E 5428 0034                  		addq.b	#2,$34(a0)
0001C612                            
0001C612                            loc_1A1D0:
0001C612 6000 FF8A                  		bra.w	loc_1A15C
0001C616                            ; ===========================================================================
0001C616                            
0001C616                            loc_1A1D4:				; XREF: off_19E80
0001C616 08E8 0000 0022             		bset	#0,$22(a0)
0001C61C 4EB9 0000 EB14             		jsr	SpeedToPos
0001C622 4A68 0030                  		tst.w	$30(a0)
0001C626 6600                       		bne.s	loc_1A1FC
0001C628 4A28 0020                  		tst.b	$20(a0)
0001C62C 6600                       		bne.s	loc_1A216
0001C62E 317C 001E 0030             		move.w	#$1E,$30(a0)
0001C634 303C 00AC                  		move.w	#$AC,d0
0001C638 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C63E                            
0001C63E                            loc_1A1FC:
0001C63E 5368 0030                  		subq.w	#1,$30(a0)
0001C642 6600                       		bne.s	loc_1A216
0001C644 4A28 0022                  		tst.b	$22(a0)
0001C648 6A00                       		bpl.s	loc_1A210
0001C64A 317C 0060 0012             		move.w	#$60,$12(a0)
0001C650 6000                       		bra.s	loc_1A216
0001C652                            ; ===========================================================================
0001C652                            
0001C652                            loc_1A210:
0001C652 117C 000F 0020             		move.b	#$F,$20(a0)
0001C658                            
0001C658                            loc_1A216:
0001C658 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001C65E 6D00                       		blt.s	loc_1A23A
0001C660 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001C666 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001C66C 4278 D020                  		clr.w	($FFFFD020).w
0001C670 4A68 0012                  		tst.w	$12(a0)
0001C674 6A00                       		bpl.s	loc_1A248
0001C676 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001C67C                            
0001C67C                            loc_1A23A:
0001C67C 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001C682 6D00                       		blt.s	loc_1A248
0001C684 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001C68A                            
0001C68A                            loc_1A248:
0001C68A 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001C690 6500                       		bcs.s	loc_1A260
0001C692 4A28 0001                  		tst.b	1(a0)
0001C696 6B00                       		bmi.s	loc_1A260
0001C698 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001C69E 6000 FAEE                  		bra.w	Obj85_Delete
0001C6A2                            ; ===========================================================================
0001C6A2                            
0001C6A2                            loc_1A260:
0001C6A2 6000 FEFA                  		bra.w	loc_1A15C
0001C6A6                            ; ===========================================================================
0001C6A6                            
0001C6A6                            loc_1A264:				; XREF: Obj85_Index
0001C6A6 2268 0034                  		movea.l	$34(a0),a1
0001C6AA 1011                       		move.b	(a1),d0
0001C6AC B010                       		cmp.b	(a0),d0
0001C6AE 6600 FADE                  		bne.w	Obj85_Delete
0001C6B2 117C 0007 001C             		move.b	#7,$1C(a0)
0001C6B8 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C6BE 6C00                       		bge.s	loc_1A280
0001C6C0 6000                       		bra.s	loc_1A2A6
0001C6C2                            ; ===========================================================================
0001C6C2                            
0001C6C2                            loc_1A280:
0001C6C2 4A69 0010                  		tst.w	$10(a1)
0001C6C6 6700                       		beq.s	loc_1A28C
0001C6C8 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C6CE                            
0001C6CE                            loc_1A28C:
0001C6CE 43FA D874                  		lea	Ani_Eggman(pc),a1
0001C6D2 4EB9 0000 BB8E             		jsr	AnimateSprite
0001C6D8                            
0001C6D8                            loc_1A296:
0001C6D8 2268 0034                  		movea.l	$34(a0),a1
0001C6DC 3169 0008 0008             		move.w	8(a1),8(a0)
0001C6E2 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C6E8                            
0001C6E8                            loc_1A2A6:
0001C6E8 2268 0034                  		movea.l	$34(a0),a1
0001C6EC 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C6F2 7003                       		moveq	#3,d0
0001C6F4 C028 0022                  		and.b	$22(a0),d0
0001C6F8 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C6FE 8128 0001                  		or.b	d0,1(a0)
0001C702 4EF9 0000 EB2E             		jmp	DisplaySprite
0001C708                            ; ===========================================================================
0001C708                            
0001C708                            loc_1A2C6:				; XREF: Obj85_Index
0001C708 2268 0034                  		movea.l	$34(a0),a1
0001C70C 1011                       		move.b	(a1),d0
0001C70E B010                       		cmp.b	(a0),d0
0001C710 6600 FA7C                  		bne.w	Obj85_Delete
0001C714 0CA9 0001 9F94 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C71C 6700                       		beq.s	loc_1A2E4
0001C71E 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C724 60C2                       		bra.s	loc_1A2A6
0001C726                            ; ===========================================================================
0001C726                            
0001C726                            loc_1A2E4:
0001C726 117C 0001 001C             		move.b	#1,$1C(a0)
0001C72C 4A29 0021                  		tst.b	$21(a1)
0001C730 6F00                       		ble.s	loc_1A312
0001C732 117C 0006 001C             		move.b	#6,$1C(a0)
0001C738 217C 0001 9F94 0004        		move.l	#Map_Eggman,4(a0)
0001C740 317C 0400 0002             		move.w	#$400,2(a0)
0001C746 43FA D7FC                  		lea	Ani_Eggman(pc),a1
0001C74A 4EB9 0000 BB8E             		jsr	AnimateSprite
0001C750 6000 FF86                  		bra.w	loc_1A296
0001C754                            ; ===========================================================================
0001C754                            
0001C754                            loc_1A312:
0001C754 4A28 0001                  		tst.b	1(a0)
0001C758 6A00 FA34                  		bpl.w	Obj85_Delete
0001C75C 6100 D31C                  		bsr.w	BossDefeated
0001C760 117C 0002 0018             		move.b	#2,$18(a0)
0001C766 117C 0000 001C             		move.b	#0,$1C(a0)
0001C76C 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C774 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C77A 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C77E 4EB9 0000 BB8E             		jsr	AnimateSprite
0001C784 6000 FF52                  		bra.w	loc_1A296
0001C788                            ; ===========================================================================
0001C788                            
0001C788                            loc_1A346:				; XREF: Obj85_Index
0001C788 08E8 0000 0022             		bset	#0,$22(a0)
0001C78E 2268 0034                  		movea.l	$34(a0),a1
0001C792 0CA9 0001 9F94 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C79A 6700                       		beq.s	loc_1A35E
0001C79C 6000 FF4A                  		bra.w	loc_1A2A6
0001C7A0                            ; ===========================================================================
0001C7A0                            
0001C7A0                            loc_1A35E:
0001C7A0 3169 0008 0008             		move.w	8(a1),8(a0)
0001C7A6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C7AC 4A28 001E                  		tst.b	$1E(a0)
0001C7B0 6600                       		bne.s	loc_1A376
0001C7B2 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C7B8                            
0001C7B8                            loc_1A376:
0001C7B8 5328 001E                  		subq.b	#1,$1E(a0)
0001C7BC 6E00                       		bgt.s	loc_1A38A
0001C7BE 5228 001A                  		addq.b	#1,$1A(a0)
0001C7C2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C7C8 6E00 F9C4                  		bgt.w	Obj85_Delete
0001C7CC                            
0001C7CC                            loc_1A38A:
0001C7CC 6000 FF0A                  		bra.w	loc_1A296
0001C7D0                            ; ===========================================================================
0001C7D0                            
0001C7D0                            loc_1A38E:				; XREF: Obj85_Index
0001C7D0 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C7D6 3038 D008                  		move.w	($FFFFD008).w,d0
0001C7DA 9068 0008                  		sub.w	8(a0),d0
0001C7DE 6500                       		bcs.s	loc_1A3A6
0001C7E0 4A28 0001                  		tst.b	1(a0)
0001C7E4 6A00 F9A8                  		bpl.w	Obj85_Delete
0001C7E8                            
0001C7E8                            loc_1A3A6:
0001C7E8 4EF9 0000 EB2E             		jmp	DisplaySprite
0001C7EE                            ; ===========================================================================
0001C7EE                            
0001C7EE                            loc_1A3AC:				; XREF: Obj85_Index
0001C7EE 117C 0000 001A             		move.b	#0,$1A(a0)
0001C7F4 08E8 0000 0022             		bset	#0,$22(a0)
0001C7FA 2268 0034                  		movea.l	$34(a0),a1
0001C7FE 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C804 6600                       		bne.s	loc_1A3D0
0001C806 0CA9 0001 9F94 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C80E 6700 F97E                  		beq.w	Obj85_Delete
0001C812                            
0001C812                            loc_1A3D0:
0001C812 6000 FED4                  		bra.w	loc_1A2A6
0001C816                            ; ===========================================================================
0001C816                            Ani_obj85:
0001C816                            	include "_anim\obj85.asm"
0001C816                            ; ---------------------------------------------------------------------------
0001C816                            ; Animation script - Eggman (FZ)
0001C816                            ; ---------------------------------------------------------------------------
0001C816 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C818 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C81C                            		even
0001C81C                            		even
0001C81C                            
0001C81C                            Map_Eggman2:
0001C81C                            	include "_maps\Eggman2.asm"
0001C81C                            ; ---------------------------------------------------------------------------
0001C81C                            ; Sprite mappings - Eggman (FZ)
0001C81C                            ; ---------------------------------------------------------------------------
0001C81C 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C81E 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C820 06                         byte_1A3DE:	dc.b 6
0001C821 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C826 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C82B EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C830 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C835 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C83A 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C83F 06                         byte_1A3FD:	dc.b 6
0001C840 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C845 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C84A EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C84F FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C854 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C859 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C85E                            		even
0001C85E                            		even
0001C85E                            
0001C85E                            Map_FZBoss:
0001C85E                            	include "_maps\FZ boss.asm"
0001C85E                            ; ---------------------------------------------------------------------------
0001C85E                            ; Sprite mappings - boss (FZ)
0001C85E                            ; ---------------------------------------------------------------------------
0001C85E 0000                       		dc.w byte_1A422-Map_FZBoss
0001C860 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C862 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C864 02                         byte_1A422:	dc.b 2
0001C865 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C86A 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C86F 03                         byte_1A42D:	dc.b 3
0001C870 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C875 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C87A 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C87F 02                         byte_1A43D:	dc.b 2
0001C880 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C885 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C88A                            		even
0001C88A                            		even
0001C88A                            
0001C88A                            ; ===========================================================================
0001C88A                            
0001C88A                            Obj84_Delete:
0001C88A 4EF9 0000 EB7E             		jmp	DeleteObject
0001C890                            ; ===========================================================================
0001C890                            ; ---------------------------------------------------------------------------
0001C890                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C890                            ; ---------------------------------------------------------------------------
0001C890                            
0001C890                            Obj84:					; XREF: Obj_Index
0001C890 7000                       		moveq	#0,d0
0001C892 1028 0024                  		move.b	$24(a0),d0
0001C896 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C89A 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C89E                            ; ===========================================================================
0001C89E 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C8A0 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C8A2 0000                       		dc.w loc_1A57E-Obj84_Index
0001C8A4                            
0001C8A4 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C8A8 2550 0620                  		dc.w $2550, $620
0001C8AC 2490 04C0                  		dc.w $2490, $4C0
0001C8B0 2510 04C0                  		dc.w $2510, $4C0
0001C8B4                            ; ===========================================================================
0001C8B4                            
0001C8B4                            Obj84_Main:				; XREF: Obj84_Index
0001C8B4 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C8B8 7000                       		moveq	#0,d0
0001C8BA 1028 0028                  		move.b	$28(a0),d0
0001C8BE D040                       		add.w	d0,d0
0001C8C0 D2C0                       		adda.w	d0,a1
0001C8C2 117C 0004 0001             		move.b	#4,1(a0)
0001C8C8 08E8 0007 0001             		bset	#7,1(a0)
0001C8CE 08E8 0004 0001             		bset	#4,1(a0)
0001C8D4 317C 0300 0002             		move.w	#$300,2(a0)
0001C8DA 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C8E2 3159 0008                  		move.w	(a1)+,8(a0)
0001C8E6 3151 000C                  		move.w	(a1),$C(a0)
0001C8EA 3159 0038                  		move.w	(a1)+,$38(a0)
0001C8EE 117C 0020 0016             		move.b	#$20,$16(a0)
0001C8F4 117C 0060 0017             		move.b	#$60,$17(a0)
0001C8FA 117C 0020 0019             		move.b	#$20,$19(a0)
0001C900 117C 0060 0016             		move.b	#$60,$16(a0)
0001C906 117C 0003 0018             		move.b	#3,$18(a0)
0001C90C 5428 0024                  		addq.b	#2,$24(a0)
0001C910                            
0001C910                            loc_1A4CE:				; XREF: Obj84_Index
0001C910 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C916 6F00                       		ble.s	loc_1A4DC
0001C918 08E8 0001 0001             		bset	#1,1(a0)
0001C91E                            
0001C91E                            loc_1A4DC:
0001C91E 42A8 003C                  		clr.l	$3C(a0)
0001C922 4A28 0029                  		tst.b	$29(a0)
0001C926 6700                       		beq.s	loc_1A4EA
0001C928 5428 0024                  		addq.b	#2,$24(a0)
0001C92C                            
0001C92C                            loc_1A4EA:
0001C92C 2028 003C                  		move.l	$3C(a0),d0
0001C930 2228 0038                  		move.l	$38(a0),d1
0001C934 D280                       		add.l	d0,d1
0001C936 4841                       		swap	d1
0001C938 3141 000C                  		move.w	d1,$C(a0)
0001C93C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C942 6600                       		bne.s	loc_1A524
0001C944 4A68 0030                  		tst.w	$30(a0)
0001C948 6A00                       		bpl.s	loc_1A524
0001C94A 70F6                       		moveq	#-$A,d0
0001C94C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C952 6F00                       		ble.s	loc_1A514
0001C954 700E                       		moveq	#$E,d0
0001C956                            
0001C956                            loc_1A514:
0001C956 D240                       		add.w	d0,d1
0001C958 2268 0034                  		movea.l	$34(a0),a1
0001C95C 3341 000C                  		move.w	d1,$C(a1)
0001C960 3368 0008 0008             		move.w	8(a0),8(a1)
0001C966                            
0001C966                            loc_1A524:
0001C966 323C 002B                  		move.w	#$2B,d1
0001C96A 343C 0060                  		move.w	#$60,d2
0001C96E 363C 0061                  		move.w	#$61,d3
0001C972 3828 0008                  		move.w	8(a0),d4
0001C976 4EB9 0001 149C             		jsr	SolidObject
0001C97C 7000                       		moveq	#0,d0
0001C97E 3228 003C                  		move.w	$3C(a0),d1
0001C982 6A00                       		bpl.s	loc_1A550
0001C984 4441                       		neg.w	d1
0001C986 5141                       		subq.w	#8,d1
0001C988 6500                       		bcs.s	loc_1A55C
0001C98A 5200                       		addq.b	#1,d0
0001C98C E841                       		asr.w	#4,d1
0001C98E D041                       		add.w	d1,d0
0001C990 6000                       		bra.s	loc_1A55C
0001C992                            ; ===========================================================================
0001C992                            
0001C992                            loc_1A550:
0001C992 0441 0027                  		subi.w	#$27,d1
0001C996 6500                       		bcs.s	loc_1A55C
0001C998 5200                       		addq.b	#1,d0
0001C99A E841                       		asr.w	#4,d1
0001C99C D041                       		add.w	d1,d0
0001C99E                            
0001C99E                            loc_1A55C:
0001C99E 1140 001A                  		move.b	d0,$1A(a0)
0001C9A2 3038 D008                  		move.w	($FFFFD008).w,d0
0001C9A6 9068 0008                  		sub.w	8(a0),d0
0001C9AA 6B00                       		bmi.s	loc_1A578
0001C9AC 0440 0140                  		subi.w	#$140,d0
0001C9B0 6B00                       		bmi.s	loc_1A578
0001C9B2 4A28 0001                  		tst.b	1(a0)
0001C9B6 6A00 FED2                  		bpl.w	Obj84_Delete
0001C9BA                            
0001C9BA                            loc_1A578:
0001C9BA 4EF9 0000 EB2E             		jmp	DisplaySprite
0001C9C0                            ; ===========================================================================
0001C9C0                            
0001C9C0                            loc_1A57E:				; XREF: Obj84_Index
0001C9C0 7000                       		moveq	#0,d0
0001C9C2 1028 0028                  		move.b	$28(a0),d0
0001C9C6 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C9CA 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C9CE 6000 FF5C                  		bra.w	loc_1A4EA
0001C9D2                            ; ===========================================================================
0001C9D2 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C9D4 0000                       		dc.w loc_1A598-off_1A590
0001C9D6 0000                       		dc.w loc_1A604-off_1A590
0001C9D8 0000                       		dc.w loc_1A604-off_1A590
0001C9DA                            ; ===========================================================================
0001C9DA                            
0001C9DA                            loc_1A598:				; XREF: off_1A590
0001C9DA 4A28 0029                  		tst.b	$29(a0)
0001C9DE 6600                       		bne.s	loc_1A5D4
0001C9E0 2268 0034                  		movea.l	$34(a0),a1
0001C9E4 4A29 0021                  		tst.b	$21(a1)
0001C9E8 6600                       		bne.s	loc_1A5B4
0001C9EA 6100 D08E                  		bsr.w	BossDefeated
0001C9EE 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C9F6                            
0001C9F6                            loc_1A5B4:
0001C9F6 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C9FE 6400                       		bcc.s	locret_1A602
0001CA00 42A8 003C                  		clr.l	$3C(a0)
0001CA04 2268 0034                  		movea.l	$34(a0),a1
0001CA08 5369 0032                  		subq.w	#1,$32(a1)
0001CA0C 4269 0030                  		clr.w	$30(a1)
0001CA10 5528 0024                  		subq.b	#2,$24(a0)
0001CA14 4E75                       		rts	
0001CA16                            ; ===========================================================================
0001CA16                            
0001CA16                            loc_1A5D4:
0001CA16 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001CA1C 6C00                       		bge.s	loc_1A5E4
0001CA1E 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001CA26                            
0001CA26                            loc_1A5E4:
0001CA26 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001CA2E 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001CA34 6E00                       		bgt.s	locret_1A602
0001CA36 4268 003E                  		clr.w	$3E(a0)
0001CA3A 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001CA40 4228 0029                  		clr.b	$29(a0)
0001CA44                            
0001CA44                            locret_1A602:
0001CA44 4E75                       		rts	
0001CA46                            ; ===========================================================================
0001CA46                            
0001CA46                            loc_1A604:				; XREF: off_1A590
0001CA46 08E8 0001 0001             		bset	#1,1(a0)
0001CA4C 4A28 0029                  		tst.b	$29(a0)
0001CA50 6600                       		bne.s	loc_1A646
0001CA52 2268 0034                  		movea.l	$34(a0),a1
0001CA56 4A29 0021                  		tst.b	$21(a1)
0001CA5A 6600                       		bne.s	loc_1A626
0001CA5C 6100 D01C                  		bsr.w	BossDefeated
0001CA60 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001CA68                            
0001CA68                            loc_1A626:
0001CA68 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001CA70 6400                       		bcc.s	locret_1A674
0001CA72 42A8 003C                  		clr.l	$3C(a0)
0001CA76 2268 0034                  		movea.l	$34(a0),a1
0001CA7A 5369 0032                  		subq.w	#1,$32(a1)
0001CA7E 4269 0030                  		clr.w	$30(a1)
0001CA82 5528 0024                  		subq.b	#2,$24(a0)
0001CA86 4E75                       		rts	
0001CA88                            ; ===========================================================================
0001CA88                            
0001CA88                            loc_1A646:
0001CA88 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001CA8E 6D00                       		blt.s	loc_1A656
0001CA90 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001CA98                            
0001CA98                            loc_1A656:
0001CA98 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001CAA0 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001CAA6 6D00                       		blt.s	locret_1A674
0001CAA8 4268 003E                  		clr.w	$3E(a0)
0001CAAC 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001CAB2 4228 0029                  		clr.b	$29(a0)
0001CAB6                            
0001CAB6                            locret_1A674:
0001CAB6 4E75                       		rts	
0001CAB8                            ; ===========================================================================
0001CAB8                            ; ---------------------------------------------------------------------------
0001CAB8                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001CAB8                            ; ---------------------------------------------------------------------------
0001CAB8                            Map_obj84:
0001CAB8                            	include "_maps\obj84.asm"
0001CAB8                            ; ---------------------------------------------------------------------------
0001CAB8                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001CAB8                            ; ---------------------------------------------------------------------------
0001CAB8 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001CABC 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001CAC0 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001CAC4 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001CAC8 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001CACC 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001CAD0 06                         byte_1A68E:	dc.b 6
0001CAD1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001CAD6 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001CADB B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001CAE0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001CAE5 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001CAEA B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001CAEF 08                         byte_1A6AD:	dc.b 8
0001CAF0 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001CAF5 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001CAFA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001CAFF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001CB04 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001CB09 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001CB0E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001CB13 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001CB18 0A                         byte_1A6D6:	dc.b $A
0001CB19 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001CB1E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001CB23 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001CB28 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001CB2D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001CB32 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001CB37 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001CB3C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001CB41 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001CB46 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001CB4B 0C                         byte_1A709:	dc.b $C
0001CB4C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001CB51 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001CB56 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001CB5B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001CB60 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001CB65 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001CB6A D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001CB6F D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001CB74 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001CB79 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001CB7E 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001CB83 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001CB88 0D                         byte_1A746:	dc.b $D
0001CB89 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001CB8E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001CB93 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001CB98 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001CB9D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001CBA2 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001CBA7 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001CBAC D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001CBB1 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001CBB6 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001CBBB 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001CBC0 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001CBC5 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001CBCA 0E                         byte_1A788:	dc.b $E
0001CBCB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001CBD0 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001CBD5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001CBDA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001CBDF B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001CBE4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001CBE9 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001CBEE D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001CBF3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001CBF8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001CBFD 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001CC02 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001CC07 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001CC0C 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001CC11 02                         byte_1A7CF:	dc.b 2
0001CC12 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001CC17 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001CC1C                            		even
0001CC1C                            		even
0001CC1C                            
0001CC1C                            ; ===========================================================================
0001CC1C                            ; ---------------------------------------------------------------------------
0001CC1C                            ; Object 86 - energy balls (FZ)
0001CC1C                            ; ---------------------------------------------------------------------------
0001CC1C                            
0001CC1C                            Obj86:					; XREF: Obj_Index
0001CC1C 7000                       		moveq	#0,d0
0001CC1E 1028 0024                  		move.b	$24(a0),d0
0001CC22 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001CC26 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001CC2A                            ; ===========================================================================
0001CC2A 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001CC2C 0000                       		dc.w Obj86_Generator-Obj86_Index
0001CC2E 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001CC30 0000                       		dc.w loc_1A962-Obj86_Index
0001CC32 0000                       		dc.w loc_1A982-Obj86_Index
0001CC34                            ; ===========================================================================
0001CC34                            
0001CC34                            Obj86_Main:				; XREF: Obj86_Index
0001CC34 317C 2588 0008             		move.w	#$2588,8(a0)
0001CC3A 317C 053C 000C             		move.w	#$53C,$C(a0)
0001CC40 317C 0300 0002             		move.w	#$300,2(a0)
0001CC46 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001CC4E 117C 0000 001C             		move.b	#0,$1C(a0)
0001CC54 117C 0003 0018             		move.b	#3,$18(a0)
0001CC5A 117C 0008 0017             		move.b	#8,$17(a0)
0001CC60 117C 0008 0016             		move.b	#8,$16(a0)
0001CC66 117C 0004 0001             		move.b	#4,1(a0)
0001CC6C 08E8 0007 0001             		bset	#7,1(a0)
0001CC72 5428 0024                  		addq.b	#2,$24(a0)
0001CC76                            
0001CC76                            Obj86_Generator:			; XREF: Obj86_Index
0001CC76 2268 0034                  		movea.l	$34(a0),a1
0001CC7A 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001CC80 6600                       		bne.s	loc_1A850
0001CC82 10BC 003F                  		move.b	#$3F,(a0)
0001CC86 117C 0000 0024             		move.b	#0,$24(a0)
0001CC8C 4EF9 0000 EB2E             		jmp	DisplaySprite
0001CC92                            ; ===========================================================================
0001CC92                            
0001CC92                            loc_1A850:
0001CC92 117C 0000 001C             		move.b	#0,$1C(a0)
0001CC98 4A28 0029                  		tst.b	$29(a0)
0001CC9C 6700                       		beq.s	loc_1A86C
0001CC9E 5428 0024                  		addq.b	#2,$24(a0)
0001CCA2 117C 0001 001C             		move.b	#1,$1C(a0)
0001CCA8 117C 003E 0028             		move.b	#$3E,$28(a0)
0001CCAE                            
0001CCAE                            loc_1A86C:
0001CCAE 323C 0013                  		move.w	#$13,d1
0001CCB2 343C 0008                  		move.w	#8,d2
0001CCB6 363C 0011                  		move.w	#$11,d3
0001CCBA 3828 0008                  		move.w	8(a0),d4
0001CCBE 4EB9 0001 149C             		jsr	SolidObject
0001CCC4 3038 D008                  		move.w	($FFFFD008).w,d0
0001CCC8 9068 0008                  		sub.w	8(a0),d0
0001CCCC 6B00                       		bmi.s	loc_1A89A
0001CCCE 0440 0140                  		subi.w	#$140,d0
0001CCD2 6B00                       		bmi.s	loc_1A89A
0001CCD4 4A28 0001                  		tst.b	1(a0)
0001CCD8 6A00 FBB0                  		bpl.w	Obj84_Delete
0001CCDC                            
0001CCDC                            loc_1A89A:
0001CCDC 43FA 0000                  		lea	Ani_obj86(pc),a1
0001CCE0 4EB9 0000 BB8E             		jsr	AnimateSprite
0001CCE6 4EF9 0000 EB2E             		jmp	DisplaySprite
0001CCEC                            ; ===========================================================================
0001CCEC                            
0001CCEC                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001CCEC 4A28 0029                  		tst.b	$29(a0)
0001CCF0 6700 0000                  		beq.w	loc_1A954
0001CCF4 4228 0029                  		clr.b	$29(a0)
0001CCF8 D068 0030                  		add.w	$30(a0),d0
0001CCFC 0240 001E                  		andi.w	#$1E,d0
0001CD00 D4C0                       		adda.w	d0,a2
0001CD02 5868 0030                  		addq.w	#4,$30(a0)
0001CD06 4268 0032                  		clr.w	$32(a0)
0001CD0A 7403                       		moveq	#3,d2
0001CD0C                            
0001CD0C                            Obj86_Loop:
0001CD0C 4EB9 0000 F29A             		jsr	SingleObjLoad2
0001CD12 6600 0000                  		bne.w	loc_1A954
0001CD16 12BC 0086                  		move.b	#$86,(a1)
0001CD1A 3368 0008 0008             		move.w	8(a0),8(a1)
0001CD20 337C 053C 000C             		move.w	#$53C,$C(a1)
0001CD26 137C 0008 0024             		move.b	#8,$24(a1)
0001CD2C 337C 2300 0002             		move.w	#$2300,2(a1)
0001CD32 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001CD3A 137C 000C 0016             		move.b	#$C,$16(a1)
0001CD40 137C 000C 0017             		move.b	#$C,$17(a1)
0001CD46 137C 0000 0020             		move.b	#0,$20(a1)
0001CD4C 137C 0003 0018             		move.b	#3,$18(a1)
0001CD52 337C 003E 0028             		move.w	#$3E,$28(a1)
0001CD58 137C 0004 0001             		move.b	#4,1(a1)
0001CD5E 08E9 0007 0001             		bset	#7,1(a1)
0001CD64 2348 0034                  		move.l	a0,$34(a1)
0001CD68 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001CD6E 3228 0032                  		move.w	$32(a0),d1
0001CD72 C3FC FFB1                  		muls.w	#-$4F,d1
0001CD76 0641 2578                  		addi.w	#$2578,d1
0001CD7A 0240 001F                  		andi.w	#$1F,d0
0001CD7E 0440 0010                  		subi.w	#$10,d0
0001CD82 D041                       		add.w	d1,d0
0001CD84 3340 0030                  		move.w	d0,$30(a1)
0001CD88 5268 0032                  		addq.w	#1,$32(a0)
0001CD8C 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001CD92 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001CD96                            
0001CD96                            loc_1A954:
0001CD96 4A68 0032                  		tst.w	$32(a0)
0001CD9A 6600                       		bne.s	loc_1A95E
0001CD9C 5428 0024                  		addq.b	#2,$24(a0)
0001CDA0                            
0001CDA0                            loc_1A95E:
0001CDA0 6000 FF0C                  		bra.w	loc_1A86C
0001CDA4                            ; ===========================================================================
0001CDA4                            
0001CDA4                            loc_1A962:				; XREF: Obj86_Index
0001CDA4 117C 0002 001C             		move.b	#2,$1C(a0)
0001CDAA 4A68 0038                  		tst.w	$38(a0)
0001CDAE 6600                       		bne.s	loc_1A97E
0001CDB0 117C 0002 0024             		move.b	#2,$24(a0)
0001CDB6 2268 0034                  		movea.l	$34(a0),a1
0001CDBA 337C FFFF 0032             		move.w	#-1,$32(a1)
0001CDC0                            
0001CDC0                            loc_1A97E:
0001CDC0 6000 FEEC                  		bra.w	loc_1A86C
0001CDC4                            ; ===========================================================================
0001CDC4                            
0001CDC4                            loc_1A982:				; XREF: Obj86_Index
0001CDC4 7000                       		moveq	#0,d0
0001CDC6 1028 0025                  		move.b	$25(a0),d0
0001CDCA 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001CDCE 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001CDD2 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001CDD6 4EB9 0000 BB8E             		jsr	AnimateSprite
0001CDDC 4EF9 0000 EB2E             		jmp	DisplaySprite
0001CDE2                            ; ===========================================================================
0001CDE2 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001CDE4 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001CDE6 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001CDE8                            ; ===========================================================================
0001CDE8                            
0001CDE8                            loc_1A9A6:				; XREF: Obj86_Index2
0001CDE8 3028 0030                  		move.w	$30(a0),d0
0001CDEC 9068 0008                  		sub.w	8(a0),d0
0001CDF0 E940                       		asl.w	#4,d0
0001CDF2 3140 0010                  		move.w	d0,$10(a0)
0001CDF6 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CDFC 5428 0025                  		addq.b	#2,$25(a0)
0001CE00 4E75                       		rts	
0001CE02                            ; ===========================================================================
0001CE02                            
0001CE02                            loc_1A9C0:				; XREF: Obj86_Index2
0001CE02 4A68 0010                  		tst.w	$10(a0)
0001CE06 6700                       		beq.s	loc_1A9E6
0001CE08 4EB9 0000 EB14             		jsr	SpeedToPos
0001CE0E 3028 0008                  		move.w	8(a0),d0
0001CE12 9068 0030                  		sub.w	$30(a0),d0
0001CE16 6400                       		bcc.s	loc_1A9E6
0001CE18 4268 0010                  		clr.w	$10(a0)
0001CE1C D168 0008                  		add.w	d0,8(a0)
0001CE20 2268 0034                  		movea.l	$34(a0),a1
0001CE24 5369 0032                  		subq.w	#1,$32(a1)
0001CE28                            
0001CE28                            loc_1A9E6:
0001CE28 117C 0000 001C             		move.b	#0,$1C(a0)
0001CE2E 5368 0028                  		subq.w	#1,$28(a0)
0001CE32 6600                       		bne.s	locret_1AA1C
0001CE34 5428 0025                  		addq.b	#2,$25(a0)
0001CE38 117C 0001 001C             		move.b	#1,$1C(a0)
0001CE3E 117C 009A 0020             		move.b	#$9A,$20(a0)
0001CE44 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CE4A 7000                       		moveq	#0,d0
0001CE4C 3038 D008                  		move.w	($FFFFD008).w,d0
0001CE50 9068 0008                  		sub.w	8(a0),d0
0001CE54 3140 0010                  		move.w	d0,$10(a0)
0001CE58 317C 0140 0012             		move.w	#$140,$12(a0)
0001CE5E                            
0001CE5E                            locret_1AA1C:
0001CE5E 4E75                       		rts	
0001CE60                            ; ===========================================================================
0001CE60                            
0001CE60                            loc_1AA1E:				; XREF: Obj86_Index2
0001CE60 4EB9 0000 EB14             		jsr	SpeedToPos
0001CE66 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001CE6C 6400                       		bcc.s	loc_1AA34
0001CE6E 5368 0028                  		subq.w	#1,$28(a0)
0001CE72 6700                       		beq.s	loc_1AA34
0001CE74 4E75                       		rts	
0001CE76                            ; ===========================================================================
0001CE76                            
0001CE76                            loc_1AA34:
0001CE76 2268 0034                  		movea.l	$34(a0),a1
0001CE7A 5369 0038                  		subq.w	#1,$38(a1)
0001CE7E 6000 FA0A                  		bra.w	Obj84_Delete
0001CE82                            ; ===========================================================================
0001CE82                            Ani_obj86:
0001CE82                            	include "_anim\obj86.asm"
0001CE82                            ; ---------------------------------------------------------------------------
0001CE82                            ; Animation script - energy ball launcher (FZ)
0001CE82                            ; ---------------------------------------------------------------------------
0001CE82 0000                       		dc.w byte_1AA46-Ani_obj86
0001CE84 0000                       		dc.w byte_1AA4A-Ani_obj86
0001CE86 0000                       		dc.w byte_1AA50-Ani_obj86
0001CE88 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001CE8C 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001CE92 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001CE98                            		even
0001CE98                            		even
0001CE98                            
0001CE98                            ; ---------------------------------------------------------------------------
0001CE98                            ; Sprite mappings - energy ball	launcher (FZ)
0001CE98                            ; ---------------------------------------------------------------------------
0001CE98                            Map_obj86:
0001CE98                            	include "_maps\obj86.asm"
0001CE98                            ; ---------------------------------------------------------------------------
0001CE98                            ; Sprite mappings - energy ball	launcher (FZ)
0001CE98                            ; ---------------------------------------------------------------------------
0001CE98 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001CE9C 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001CEA0 01                         byte_1AA5E:	dc.b 1
0001CEA1 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001CEA6 01                         byte_1AA64:	dc.b 1
0001CEA7 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001CEAC 01                         byte_1AA6A:	dc.b 1
0001CEAD F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001CEB2 01                         byte_1AA70:	dc.b 1
0001CEB3 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001CEB8                            		even
0001CEB8                            		even
0001CEB8                            
0001CEB8                            Ani_obj86a:
0001CEB8                            	include "_anim\obj86a.asm"
0001CEB8                            ; ---------------------------------------------------------------------------
0001CEB8                            ; Animation script - energy balls (FZ)
0001CEB8                            ; ---------------------------------------------------------------------------
0001CEB8 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001CEBA 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001CEBC 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001CECB 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001CEDA 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001CEDE 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001CEE8                            		even
0001CEE8                            		even
0001CEE8                            
0001CEE8                            ; ---------------------------------------------------------------------------
0001CEE8                            ; Sprite mappings - energy balls (FZ)
0001CEE8                            ; ---------------------------------------------------------------------------
0001CEE8                            Map_obj86a:
0001CEE8                            	include "_maps\obj86a.asm"
0001CEE8                            ; ---------------------------------------------------------------------------
0001CEE8                            ; Sprite mappings - energy balls (FZ)
0001CEE8                            ; ---------------------------------------------------------------------------
0001CEE8 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001CEEC 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001CEF0 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001CEF4 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001CEF8 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001CEFC 0000                       		dc.w byte_1AB20-Map_obj86a
0001CEFE 02                         byte_1AABC:	dc.b 2
0001CEFF F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001CF04 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001CF09 02                         byte_1AAC7:	dc.b 2
0001CF0A F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001CF0F F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001CF14 02                         byte_1AAD2:	dc.b 2
0001CF15 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001CF1A 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001CF1F 02                         byte_1AADD:	dc.b 2
0001CF20 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001CF25 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001CF2A 02                         byte_1AAE8:	dc.b 2
0001CF2B F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001CF30 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001CF35 02                         byte_1AAF3:	dc.b 2
0001CF36 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001CF3B F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001CF40 01                         byte_1AAFE:	dc.b 1
0001CF41 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001CF46 01                         byte_1AB04:	dc.b 1
0001CF47 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001CF4C 02                         byte_1AB0A:	dc.b 2
0001CF4D F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001CF52 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001CF57 02                         byte_1AB15:	dc.b 2
0001CF58 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001CF5D F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001CF62 00                         byte_1AB20:	dc.b 0
0001CF64 00                         		even
0001CF64 00                         		even
0001CF64                            
0001CF64                            ; ===========================================================================
0001CF64                            ; ---------------------------------------------------------------------------
0001CF64                            ; Object 3E - prison capsule
0001CF64                            ; ---------------------------------------------------------------------------
0001CF64                            
0001CF64                            Obj3E:					; XREF: Obj_Index
0001CF64 7000                       		moveq	#0,d0
0001CF66 1028 0024                  		move.b	$24(a0),d0
0001CF6A 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001CF6E 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001CF72 3028 0008                  		move.w	8(a0),d0
0001CF76 0240 FF80                  		andi.w	#$FF80,d0
0001CF7A 3238 F700                  		move.w	($FFFFF700).w,d1
0001CF7E 0441 0080                  		subi.w	#$80,d1
0001CF82 0241 FF80                  		andi.w	#$FF80,d1
0001CF86 9041                       		sub.w	d1,d0
0001CF88 0C40 0280                  		cmpi.w	#$280,d0
0001CF8C 6300                       		bls.s	Obj3E_NoDel
0001CF8E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001CF92 6700                       		beq.s	Obj3E_Delete		; if it's zero, don't remember object
0001CF94 3440                       		movea.w	d0,a2	; load address into a2
0001CF96 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001CF9A 6000                       		bra.s	Obj3E_Delete	; and delete object
0001CF9C                            
0001CF9C                            Obj3E_NoDel:
0001CF9C 4EF9 0000 EB2E             		jmp	DisplaySprite
0001CFA2                            ; ===========================================================================
0001CFA2                            
0001CFA2                            Obj3E_Delete:
0001CFA2 4EF9 0000 EB7E             		jmp	DeleteObject
0001CFA8                            ; ===========================================================================
0001CFA8 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001CFAA 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001CFAC 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001CFAE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CFB0 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CFB2 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CFB4 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001CFB6 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001CFB8                            
0001CFB8 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001CFBC 040C 0501                  		dc.b 4,	$C, 5, 1
0001CFC0 0610 0403                  		dc.b 6,	$10, 4,	3
0001CFC4 0810 0305                  		dc.b 8,	$10, 3,	5
0001CFC8                            ; ===========================================================================
0001CFC8                            
0001CFC8                            Obj3E_Main:				; XREF: Obj3E_Index
0001CFC8 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001CFD0 317C 049D 0002             		move.w	#$49D,2(a0)
0001CFD6 117C 0004 0001             		move.b	#4,1(a0)
0001CFDC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001CFE2 7000                       		moveq	#0,d0
0001CFE4 1028 0028                  		move.b	$28(a0),d0
0001CFE8 E548                       		lsl.w	#2,d0
0001CFEA 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001CFEE 1159 0024                  		move.b	(a1)+,$24(a0)
0001CFF2 1159 0019                  		move.b	(a1)+,$19(a0)
0001CFF6 1159 0018                  		move.b	(a1)+,$18(a0)
0001CFFA 1159 001A                  		move.b	(a1)+,$1A(a0)
0001CFFE 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001D002 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001D004 117C 0006 0020             		move.b	#6,$20(a0)
0001D00A 117C 0008 0021             		move.b	#8,$21(a0)
0001D010                            
0001D010                            Obj3E_Not02:
0001D010 4E75                       		rts	
0001D012                            ; ===========================================================================
0001D012                            
0001D012                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001D012 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001D018 6700                       		beq.s	Obj3E_ChkOpened
0001D01A 323C 002B                  		move.w	#$2B,d1
0001D01E 343C 0018                  		move.w	#$18,d2
0001D022 363C 0018                  		move.w	#$18,d3
0001D026 3828 0008                  		move.w	8(a0),d4
0001D02A 4EF9 0001 149C             		jmp	SolidObject
0001D030                            ; ===========================================================================
0001D030                            
0001D030                            Obj3E_ChkOpened:
0001D030 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001D034 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001D036 4228 0025                  		clr.b	$25(a0)
0001D03A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001D040 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D046                            
0001D046                            Obj3E_DoOpen:
0001D046 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001D04C 4E75                       		rts	
0001D04E                            ; ===========================================================================
0001D04E                            
0001D04E                            Obj3E_Switched:				; XREF: Obj3E_Index
0001D04E 323C 0017                  		move.w	#$17,d1
0001D052 343C 0008                  		move.w	#8,d2
0001D056 363C 0008                  		move.w	#8,d3
0001D05A 3828 0008                  		move.w	8(a0),d4
0001D05E 4EB9 0001 149C             		jsr	SolidObject
0001D064 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001D06A 4EB9 0000 BB8E             		jsr	AnimateSprite
0001D070 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001D076 4A28 0025                  		tst.b	$25(a0)
0001D07A 6700                       		beq.s	locret_1AC60
0001D07C 5068 000C                  		addq.w	#8,$C(a0)
0001D080 117C 000A 0024             		move.b	#$A,$24(a0)
0001D086 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001D08C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001D090 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001D094 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001D09A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001D0A0 4228 0025                  		clr.b	$25(a0)
0001D0A4 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001D0AA 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D0B0                            
0001D0B0                            locret_1AC60:
0001D0B0 4E75                       		rts	
0001D0B2                            ; ===========================================================================
0001D0B2                            
0001D0B2                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001D0B2 7007                       		moveq	#7,d0
0001D0B4 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001D0B8 6600                       		bne.s	loc_1ACA0
0001D0BA 4EB9 0000 F284             		jsr	SingleObjLoad
0001D0C0 6600                       		bne.s	loc_1ACA0
0001D0C2 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001D0C6 3368 0008 0008             		move.w	8(a0),8(a1)
0001D0CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D0D2 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001D0D8 7200                       		moveq	#0,d1
0001D0DA 1200                       		move.b	d0,d1
0001D0DC E409                       		lsr.b	#2,d1
0001D0DE 0441 0020                  		subi.w	#$20,d1
0001D0E2 D369 0008                  		add.w	d1,8(a1)
0001D0E6 E048                       		lsr.w	#8,d0
0001D0E8 E608                       		lsr.b	#3,d0
0001D0EA D169 000C                  		add.w	d0,$C(a1)
0001D0EE                            
0001D0EE                            loc_1ACA0:
0001D0EE 5368 001E                  		subq.w	#1,$1E(a0)
0001D0F2 6700                       		beq.s	Obj3E_MakeAnimal
0001D0F4 4E75                       		rts	
0001D0F6                            ; ===========================================================================
0001D0F6                            
0001D0F6                            Obj3E_MakeAnimal:
0001D0F6 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001D0FC 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001D102 117C 0006 001A             		move.b	#6,$1A(a0)
0001D108 317C 0096 001E             		move.w	#$96,$1E(a0)
0001D10E 0668 0020 000C             		addi.w	#$20,$C(a0)
0001D114 7C07                       		moveq	#7,d6
0001D116 3A3C 009A                  		move.w	#$9A,d5
0001D11A 78E4                       		moveq	#-$1C,d4
0001D11C                            
0001D11C                            Obj3E_Loop:
0001D11C 4EB9 0000 F284             		jsr	SingleObjLoad
0001D122 6600                       		bne.s	locret_1ACF8
0001D124 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001D128 3368 0008 0008             		move.w	8(a0),8(a1)
0001D12E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D134 D969 0008                  		add.w	d4,8(a1)
0001D138 5E44                       		addq.w	#7,d4
0001D13A 3345 0036                  		move.w	d5,$36(a1)
0001D13E 5145                       		subq.w	#8,d5
0001D140 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001D144                            
0001D144                            locret_1ACF8:
0001D144 4E75                       		rts	
0001D146                            ; ===========================================================================
0001D146                            
0001D146                            Obj3E_Animals:				; XREF: Obj3E_Index
0001D146 7007                       		moveq	#7,d0
0001D148 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001D14C 6600                       		bne.s	loc_1AD38
0001D14E 4EB9 0000 F284             		jsr	SingleObjLoad
0001D154 6600                       		bne.s	loc_1AD38
0001D156 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001D15A 3368 0008 0008             		move.w	8(a0),8(a1)
0001D160 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D166 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001D16C 0240 001F                  		andi.w	#$1F,d0
0001D170 5D40                       		subq.w	#6,d0
0001D172 4A41                       		tst.w	d1
0001D174 6A00                       		bpl.s	loc_1AD2E
0001D176 4440                       		neg.w	d0
0001D178                            
0001D178                            loc_1AD2E:
0001D178 D169 0008                  		add.w	d0,8(a1)
0001D17C 337C 000C 0036             		move.w	#$C,$36(a1)
0001D182                            
0001D182                            loc_1AD38:
0001D182 5368 001E                  		subq.w	#1,$1E(a0)
0001D186 6600                       		bne.s	locret_1AD48
0001D188 5428 0024                  		addq.b	#2,$24(a0)
0001D18C 317C 00B4 001E             		move.w	#180,$1E(a0)
0001D192                            
0001D192                            locret_1AD48:
0001D192 4E75                       		rts	
0001D194                            ; ===========================================================================
0001D194                            
0001D194                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001D194 703E                       		moveq	#$3E,d0
0001D196 7228                       		moveq	#$28,d1
0001D198 7440                       		moveq	#$40,d2
0001D19A 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001D19E                            
0001D19E                            Obj3E_FindObj28:
0001D19E B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001D1A0 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001D1A2 D2C2                       		adda.w	d2,a1		; next object RAM
0001D1A4 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001D1A8                            
0001D1A8 4EB9 0001 073A             		jsr	GotThroughAct
0001D1AE 4EF9 0000 EB7E             		jmp	DeleteObject
0001D1B4                            ; ===========================================================================
0001D1B4                            
0001D1B4                            Obj3E_Obj28Found:
0001D1B4 4E75                       		rts	
0001D1B6                            ; ===========================================================================
0001D1B6                            Ani_obj3E:
0001D1B6                            	include "_anim\obj3E.asm"
0001D1B6                            ; ---------------------------------------------------------------------------
0001D1B6                            ; Animation script - prison capsule
0001D1B6                            ; ---------------------------------------------------------------------------
0001D1B6 0000                       		dc.w byte_1AD70-Ani_obj3E
0001D1B8 0000                       		dc.w byte_1AD70-Ani_obj3E
0001D1BA 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001D1BE                            		even
0001D1BE                            		even
0001D1BE                            
0001D1BE                            ; ---------------------------------------------------------------------------
0001D1BE                            ; Sprite mappings - prison capsule
0001D1BE                            ; ---------------------------------------------------------------------------
0001D1BE                            Map_obj3E:
0001D1BE                            	include "_maps\obj3E.asm"
0001D1BE                            ; ---------------------------------------------------------------------------
0001D1BE                            ; Sprite mappings - prison capsule
0001D1BE                            ; ---------------------------------------------------------------------------
0001D1BE 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001D1C2 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001D1C6 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001D1CA 0000                       		dc.w byte_1ADE2-Map_obj3E
0001D1CC 07                         byte_1AD82:	dc.b 7
0001D1CD E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001D1D2 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001D1D7 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001D1DC F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001D1E1 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001D1E6 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001D1EB 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001D1F0 01                         byte_1ADA6:	dc.b 1
0001D1F1 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001D1F6 06                         byte_1ADAC:	dc.b 6
0001D1F7 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001D1FC 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001D201 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001D206 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001D20B 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001D210 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001D215 01                         byte_1ADCB:	dc.b 1
0001D216 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001D21B 02                         byte_1ADD1:	dc.b 2
0001D21C E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001D221 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001D226 01                         byte_1ADDC:	dc.b 1
0001D227 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001D22C 00                         byte_1ADE2:	dc.b 0
0001D22E 00                         		even
0001D22E 00                         		even
0001D22E                            
0001D22E                            ; ---------------------------------------------------------------------------
0001D22E                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001D22E                            ; ---------------------------------------------------------------------------
0001D22E                            
0001D22E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D22E                            
0001D22E                            
0001D22E                            TouchResponse:				; XREF: Obj01
0001D22E 4E71                       		nop	
0001D230 4EB9 0000 F38C             		jsr	(Touch_Rings).l
0001D236 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001D23A 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001D23E 5142                       		subq.w	#8,d2
0001D240 7A00                       		moveq	#0,d5
0001D242 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001D246 5705                       		subq.b	#3,d5
0001D248 9645                       		sub.w	d5,d3
0001D24A 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001D250 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001D252 0643 000C                  		addi.w	#$C,d3
0001D256 7A0A                       		moveq	#$A,d5
0001D258                            
0001D258                            Touch_NoDuck:
0001D258 383C 0010                  		move.w	#$10,d4
0001D25C DA45                       		add.w	d5,d5
0001D25E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001D262 3C3C 005F                  		move.w	#$5F,d6
0001D266                            
0001D266                            Touch_Loop:
0001D266 4A29 0001                  		tst.b	1(a1)
0001D26A 6A00                       		bpl.s	Touch_NextObj
0001D26C 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001D270 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001D272                            
0001D272                            Touch_NextObj:
0001D272 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001D276 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001D27A                            
0001D27A 7000                       		moveq	#0,d0
0001D27C 4E75                       		rts	
0001D27E                            ; ===========================================================================
0001D27E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001D280 0C14                       		dc.b   $C, $14
0001D282 140C                       		dc.b  $14,  $C
0001D284 0410                       		dc.b	4, $10
0001D286 0C12                       		dc.b   $C, $12
0001D288 1010                       		dc.b  $10, $10
0001D28A 0606                       		dc.b	6,   6
0001D28C 180C                       		dc.b  $18,  $C
0001D28E 0C10                       		dc.b   $C, $10
0001D290 100C                       		dc.b  $10,  $C
0001D292 0808                       		dc.b	8,   8
0001D294 1410                       		dc.b  $14, $10
0001D296 1408                       		dc.b  $14,   8
0001D298 0E0E                       		dc.b   $E,  $E
0001D29A 1818                       		dc.b  $18, $18
0001D29C 2810                       		dc.b  $28, $10
0001D29E 1018                       		dc.b  $10, $18
0001D2A0 0810                       		dc.b	8, $10
0001D2A2 2070                       		dc.b  $20, $70
0001D2A4 4020                       		dc.b  $40, $20
0001D2A6 8020                       		dc.b  $80, $20
0001D2A8 2020                       		dc.b  $20, $20
0001D2AA 0808                       		dc.b	8,   8
0001D2AC 0404                       		dc.b	4,   4
0001D2AE 2008                       		dc.b  $20,   8
0001D2B0 0C0C                       		dc.b   $C,  $C
0001D2B2 0804                       		dc.b	8,   4
0001D2B4 1804                       		dc.b  $18,   4
0001D2B6 2804                       		dc.b  $28,   4
0001D2B8 0408                       		dc.b	4,   8
0001D2BA 0418                       		dc.b	4, $18
0001D2BC 0428                       		dc.b	4, $28
0001D2BE 0420                       		dc.b	4, $20
0001D2C0 1818                       		dc.b  $18, $18
0001D2C2 0C18                       		dc.b   $C, $18
0001D2C4 4808                       		dc.b  $48,   8
0001D2C6                            ; ===========================================================================
0001D2C6                            
0001D2C6                            Touch_Height:				; XREF: TouchResponse
0001D2C6 0240 003F                  		andi.w	#$3F,d0
0001D2CA D040                       		add.w	d0,d0
0001D2CC 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001D2D0 7200                       		moveq	#0,d1
0001D2D2 121A                       		move.b	(a2)+,d1
0001D2D4 3029 0008                  		move.w	8(a1),d0
0001D2D8 9041                       		sub.w	d1,d0
0001D2DA 9042                       		sub.w	d2,d0
0001D2DC 6400                       		bcc.s	loc_1AE98
0001D2DE D241                       		add.w	d1,d1
0001D2E0 D041                       		add.w	d1,d0
0001D2E2 6500                       		bcs.s	Touch_Width
0001D2E4 6000 FF8C                  		bra.w	Touch_NextObj
0001D2E8                            ; ===========================================================================
0001D2E8                            
0001D2E8                            loc_1AE98:
0001D2E8 B044                       		cmp.w	d4,d0
0001D2EA 6200 FF86                  		bhi.w	Touch_NextObj
0001D2EE                            
0001D2EE                            Touch_Width:
0001D2EE 7200                       		moveq	#0,d1
0001D2F0 121A                       		move.b	(a2)+,d1
0001D2F2 3029 000C                  		move.w	$C(a1),d0
0001D2F6 9041                       		sub.w	d1,d0
0001D2F8 9043                       		sub.w	d3,d0
0001D2FA 6400                       		bcc.s	loc_1AEB6
0001D2FC D241                       		add.w	d1,d1
0001D2FE D240                       		add.w	d0,d1
0001D300 6500                       		bcs.s	Touch_ChkValue
0001D302 6000 FF6E                  		bra.w	Touch_NextObj
0001D306                            ; ===========================================================================
0001D306                            
0001D306                            loc_1AEB6:
0001D306 B045                       		cmp.w	d5,d0
0001D308 6200 FF68                  		bhi.w	Touch_NextObj
0001D30C                            
0001D30C                            Touch_ChkValue:
0001D30C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001D310 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001D314 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001D318 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001D31C 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001D320 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001D322 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001D326                            
0001D326                            ; touch	response is $40-$7F
0001D326                            
0001D326 1029 0020                  		move.b	$20(a1),d0
0001D32A 0200 003F                  		andi.b	#$3F,d0
0001D32E 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001D332 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001D334 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001D33A 6400 0000                  		bcc.w	locret_1AEF2
0001D33E 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001D342                            
0001D342                            locret_1AEF2:
0001D342 4E75                       		rts	
0001D344                            ; ===========================================================================
0001D344                            
0001D344                            Touch_Monitor:
0001D344 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001D348 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001D34A 3028 000C                  		move.w	$C(a0),d0
0001D34E 0440 0010                  		subi.w	#$10,d0
0001D352 B069 000C                  		cmp.w	$C(a1),d0
0001D356 6500 0000                  		bcs.w	locret_1AF2E
0001D35A 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001D35E 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001D362 337C FE80 0012             		move.w	#-$180,$12(a1)
0001D368 4A29 0025                  		tst.b	$25(a1)
0001D36C 6600 0000                  		bne.w	locret_1AF2E
0001D370 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001D374 4E75                       		rts	
0001D376                            ; ===========================================================================
0001D376                            
0001D376                            loc_1AF1E:
0001D376 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001D37C 6600 0000                  		bne.w	locret_1AF2E
0001D380 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001D384 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001D388 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001D38E 6E00                       		bgt.s	@happy
0001D390 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001D396 6D00                       		blt.s	@happy
0001D398 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001D39E 6E00                       		bgt.s	@happy
0001D3A0 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001D3A6 6C00                       		bge.s	locret_1AF2E
0001D3A8                            
0001D3A8                            	@happy:
0001D3A8 0828 0001 0022             		btst	#1,$22(a0)
0001D3AE 6700                       		beq.s	locret_1AF2E
0001D3B0 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001D3B6 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D3BC 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHappy2
0001D422                            
0001D422                            locret_1AF2E:
0001D422 4E75                       		rts	
0001D424                            ; ===========================================================================
0001D424                            
0001D424                            Touch_Enemy:				; XREF: Touch_ChkValue
0001D424 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D428 6600                       		bne.s	loc_1AF40	; if yes, branch
0001D42A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001D430 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001D434                            
0001D434                            loc_1AF40:
0001D434 4A29 0021                  		tst.b	$21(a1)
0001D438 6700                       		beq.s	Touch_KillEnemy
0001D43A 4468 0010                  		neg.w	$10(a0)
0001D43E 4468 0012                  		neg.w	$12(a0)
0001D442 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001D446 E0E8 0010                  		asr	$10(a0)
0001D44A E0E8 0012                  		asr	$12(a0)
0001D44E 137C 0000 0020             		move.b	#0,$20(a1)
0001D454 5329 0021                  		subq.b	#1,$21(a1)
0001D458 6600                       		bne.s	locret_1AF68
0001D45A 08E9 0007 0022             		bset	#7,$22(a1)
0001D460                            
0001D460                            locret_1AF68:
0001D460 4E75                       		rts	
0001D462                            ; ===========================================================================
0001D462                            
0001D462                            Touch_KillEnemy:
0001D462 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001D468 6E00                       		bgt.s	@happy
0001D46A 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001D470 6D00                       		blt.s	@happy
0001D472 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001D478 6E00                       		bgt.s	@happy
0001D47A 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001D480 6C00                       		bge.s	@nothappy
0001D482                            
0001D482                            	@happy:
0001D482 0828 0001 0022             		btst	#1,$22(a0)
0001D488 6700                       		beq.s	@nothappy
0001D48A 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001D490 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D496                            
0001D496                            	@nothappy:
0001D496 08E9 0007 0022             		bset	#7,$22(a1)
0001D49C 7000                       		moveq	#0,d0
0001D49E 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001D4A2 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001D4A6 0C40 0006                  		cmpi.w	#6,d0
0001D4AA 6500                       		bcs.s	loc_1AF82
0001D4AC 7006                       		moveq	#6,d0
0001D4AE                            
0001D4AE                            loc_1AF82:
0001D4AE 3340 003E                  		move.w	d0,$3E(a1)
0001D4B2 4A40                       		tst.w	d0
0001D4B4 6700                       		beq.s	@nocombo
0001D4B6 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001D4BC 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D4C2                            
0001D4C2                            	@nocombo:
0001D4C2 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001D4C6 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001D4CC 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001D4CE 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001D4D2 337C 000A 003E             		move.w	#$A,$3E(a1)
0001D4D8                            
0001D4D8                            loc_1AF9C:
0001D4D8 6100 0000                  		bsr.w	AddPoints
0001D4DC 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001D4E0 137C 0000 0024             		move.b	#0,$24(a1)
0001D4E6 4A68 0012                  		tst.w	$12(a0)
0001D4EA 6B00                       		bmi.s	loc_1AFC2
0001D4EC 3028 000C                  		move.w	$C(a0),d0
0001D4F0 B069 000C                  		cmp.w	$C(a1),d0
0001D4F4 6400                       		bcc.s	loc_1AFCA
0001D4F6 4468 0012                  		neg.w	$12(a0)
0001D4FA 4E75                       		rts	
0001D4FC                            ; ===========================================================================
0001D4FC                            
0001D4FC                            loc_1AFC2:
0001D4FC 0668 0100 0012             		addi.w	#$100,$12(a0)
0001D502 4E75                       		rts	
0001D504                            ; ===========================================================================
0001D504                            
0001D504                            loc_1AFCA:
0001D504 0468 0100 0012             		subi.w	#$100,$12(a0)
0001D50A 4E75                       		rts	
0001D50C                            ; ===========================================================================
0001D50C 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001D514                            ; ===========================================================================
0001D514                            
0001D514                            loc_1AFDA:				; XREF: Touch_CatKiller
0001D514 08E9 0007 0022             		bset	#7,$22(a1)
0001D51A                            
0001D51A                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001D51A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D51E 6700                       		beq.s	Touch_Hurt	; if not, branch
0001D520                            
0001D520                            loc_1AFE6:				; XREF: Touch_Hurt
0001D520 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0001D526 6E00                       		bgt.s	locret_1AFE6
0001D528                            
0001D528                            loc2_1AFE6:				; XREF: Touch_Hurt
0001D528 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0001D52E 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D534                            
0001D534                            locret_1AFE6:
0001D534 70FF                       		moveq	#-1,d0
0001D536 4E75                       		rts	
0001D538                            ; ===========================================================================
0001D538                            
0001D538                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001D538 4E71                       		nop	
0001D53A 4A68 0030                  		tst.w	$30(a0)
0001D53E 66E8                       		bne.s	loc2_1AFE6
0001D540 2449                       		movea.l	a1,a2
0001D542                            
0001D542                            ; End of function TouchResponse
0001D542                            ; continue straight to HurtSonic
0001D542                            
0001D542                            ; ---------------------------------------------------------------------------
0001D542                            ; Hurting Sonic	subroutine
0001D542                            ; ---------------------------------------------------------------------------
0001D542                            
0001D542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D542                            
0001D542                            
0001D542                            HurtSonic:
0001D542 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001D548 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001D54E 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHurt
0001D5B4 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001D5B8 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001D5BA 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001D5BE 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001D5C2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001D5C8 6500                       		bcs.s	@notbad
0001D5CA 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001D5D0                            
0001D5D0                            	@notbad:
0001D5D0 4EB9 0000 F284             		jsr	SingleObjLoad
0001D5D6 6600                       		bne.s	Hurt_Shield
0001D5D8 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001D5DC 3368 0008 0008             		move.w	8(a0),8(a1)
0001D5E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D5E8                            
0001D5E8                            Hurt_Shield:
0001D5E8 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001D5EE 117C 0004 0024             		move.b	#4,$24(a0)
0001D5F4 4EB9 0001 53DA             		jsr	(Sonic_ResetOnFloor).l
0001D5FA 08E8 0001 0022             		bset	#1,$22(a0)
0001D600 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001D606 317C FE00 0010             		move.w	#-$200,$10(a0)
0001D60C 0828 0006 0022             		btst	#6,$22(a0)
0001D612 6700                       		beq.s	Hurt_Reverse
0001D614 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D61A 317C FF00 0010             		move.w	#-$100,$10(a0)
0001D620                            
0001D620                            Hurt_Reverse:
0001D620 3028 0008                  		move.w	8(a0),d0
0001D624 B06A 0008                  		cmp.w	8(a2),d0
0001D628 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001D62A 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001D62E                            
0001D62E                            Hurt_ChkSpikes:
0001D62E 317C 0000 0020             		move.w	#0,$20(a0)
0001D634 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001D63A 317C 0078 0030             		move.w	#$78,$30(a0)
0001D640 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001D644 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001D648 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D64A 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001D64E 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D650 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001D654                            
0001D654                            Hurt_Sound:
0001D654 4EB9 0000 1220             		jsr	(PlaySound_Special).l
0001D65A 70FF                       		moveq	#-1,d0
0001D65C 4E75                       		rts	
0001D65E                            ; ===========================================================================
0001D65E                            
0001D65E                            Hurt_NoRings:
0001D65E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001D662 6600 FF84                  		bne.w	Hurt_Shield	; if yes, branch
0001D666 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeDies
0001D6CC                            ; End of function HurtSonic
0001D6CC                            
0001D6CC                            ; ---------------------------------------------------------------------------
0001D6CC                            ; Subroutine to	kill Sonic
0001D6CC                            ; ---------------------------------------------------------------------------
0001D6CC                            
0001D6CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6CC                            
0001D6CC                            
0001D6CC                            KillSonic:
0001D6CC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001D6D0 6600 0000                  		bne.w	Kill_NoDeath	; if yes, branch
0001D6D4 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001D6DA 117C 0006 0024             		move.b	#6,$24(a0)
0001D6E0 4EB9 0001 53DA             		jsr	(Sonic_ResetOnFloor).l
0001D6E6 08E8 0001 0022             		bset	#1,$22(a0)
0001D6EC 317C F900 0012             		move.w	#-$700,$12(a0)
0001D6F2 317C 0000 0010             		move.w	#0,$10(a0)
0001D6F8 317C 0000 0020             		move.w	#0,$20(a0)
0001D6FE 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D704 117C 0018 001C             		move.b	#$18,$1C(a0)
0001D70A 08E8 0007 0002             		bset	#7,2(a0)
0001D710 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001D714 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeFrustrated		
0001D77A 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001D77E 6600                       		bne.s	Kill_Sound
0001D780 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001D784 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpikey
0001D7EA                            
0001D7EA                            Kill_Sound:
0001D7EA 4EB9 0000 1220             		jsr	(PlaySound_Special).l
0001D7F0                            
0001D7F0                            Kill_NoDeath:
0001D7F0 70FF                       		moveq	#-1,d0
0001D7F2 4E75                       		rts	
0001D7F4                            ; End of function KillSonic
0001D7F4                            
0001D7F4                            
0001D7F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D7F4                            
0001D7F4                            
0001D7F4                            Touch_Special:				; XREF: Touch_ChkValue
0001D7F4 1229 0020                  		move.b	$20(a1),d1
0001D7F8 0201 003F                  		andi.b	#$3F,d1
0001D7FC 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001D800 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001D802 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001D806 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001D808 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001D80C 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D80E 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001D812 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D814 4E75                       		rts	
0001D816                            ; ===========================================================================
0001D816                            
0001D816                            Touch_CatKiller:			; XREF: Touch_Special
0001D816 6000 FCFC                  		bra.w	loc_1AFDA
0001D81A                            ; ===========================================================================
0001D81A                            
0001D81A                            Touch_Yadrin:				; XREF: Touch_Special
0001D81A 9A40                       		sub.w	d0,d5
0001D81C 0C45 0008                  		cmpi.w	#8,d5
0001D820 6400                       		bcc.s	loc_1B144
0001D822 3029 0008                  		move.w	8(a1),d0
0001D826 5940                       		subq.w	#4,d0
0001D828 0829 0000 0022             		btst	#0,$22(a1)
0001D82E 6700                       		beq.s	loc_1B130
0001D830 0440 0010                  		subi.w	#$10,d0
0001D834                            
0001D834                            loc_1B130:
0001D834 9042                       		sub.w	d2,d0
0001D836 6400                       		bcc.s	loc_1B13C
0001D838 0640 0018                  		addi.w	#$18,d0
0001D83C 6500                       		bcs.s	loc_1B140
0001D83E 6000                       		bra.s	loc_1B144
0001D840                            ; ===========================================================================
0001D840                            
0001D840                            loc_1B13C:
0001D840 B044                       		cmp.w	d4,d0
0001D842 6200                       		bhi.s	loc_1B144
0001D844                            
0001D844                            loc_1B140:
0001D844 6000 FCD4                  		bra.w	Touch_ChkHurt
0001D848                            ; ===========================================================================
0001D848                            
0001D848                            loc_1B144:
0001D848 6000 FBDA                  		bra.w	Touch_Enemy
0001D84C                            ; ===========================================================================
0001D84C                            
0001D84C                            Touch_D7orE1:				; XREF: Touch_Special
0001D84C 5229 0021                  		addq.b	#1,$21(a1)
0001D850 4E75                       		rts	
0001D852                            ; End of function Touch_Special
0001D852                            
0001D852                            ; ---------------------------------------------------------------------------
0001D852                            ; Subroutine to	show the special stage layout
0001D852                            ; ---------------------------------------------------------------------------
0001D852                            
0001D852                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D852                            
0001D852                            
0001D852                            SS_ShowLayout:				; XREF: SpecialStage
0001D852 4A78 F63A                  		tst.w	($FFFFF63A).w
0001D856 6600                       		bne.s	@noanimate
0001D858 6100 0000                  		bsr.w	SS_AniWallsRings
0001D85C 6100 0000                  		bsr.w	SS_AniItems
0001D860                            
0001D860                            	@noanimate:
0001D860 3F05                       		move.w	d5,-(sp)
0001D862 43F8 8000                  		lea	($FFFF8000).w,a1
0001D866 1038 F780                  		move.b	($FFFFF780).w,d0
0001D86A 0200 00FC                  		andi.b	#$FC,d0
0001D86E 4EB9 0000 29F6             		jsr	(CalcSine).l
0001D874 3800                       		move.w	d0,d4
0001D876 3A01                       		move.w	d1,d5
0001D878 C9FC 0018                  		muls.w	#$18,d4
0001D87C CBFC 0018                  		muls.w	#$18,d5
0001D880 7400                       		moveq	#0,d2
0001D882 3438 F700                  		move.w	($FFFFF700).w,d2
0001D886 84FC 0018                  		divu.w	#$18,d2
0001D88A 4842                       		swap	d2
0001D88C 4442                       		neg.w	d2
0001D88E 0642 FF4C                  		addi.w	#-$B4,d2
0001D892 7600                       		moveq	#0,d3
0001D894 3638 F704                  		move.w	($FFFFF704).w,d3
0001D898 86FC 0018                  		divu.w	#$18,d3
0001D89C 4843                       		swap	d3
0001D89E 4443                       		neg.w	d3
0001D8A0 0643 FF4C                  		addi.w	#-$B4,d3
0001D8A4 3E3C 000F                  		move.w	#$F,d7
0001D8A8                            
0001D8A8                            loc_1B19E:
0001D8A8 48A7 E000                  		movem.w	d0-d2,-(sp)
0001D8AC 48A7 C000                  		movem.w	d0-d1,-(sp)
0001D8B0 4440                       		neg.w	d0
0001D8B2 C3C2                       		muls.w	d2,d1
0001D8B4 C1C3                       		muls.w	d3,d0
0001D8B6 2C00                       		move.l	d0,d6
0001D8B8 DC81                       		add.l	d1,d6
0001D8BA 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001D8BE C1C2                       		muls.w	d2,d0
0001D8C0 C3C3                       		muls.w	d3,d1
0001D8C2 D280                       		add.l	d0,d1
0001D8C4 2406                       		move.l	d6,d2
0001D8C6 3C3C 000F                  		move.w	#$F,d6
0001D8CA                            
0001D8CA                            loc_1B1C0:
0001D8CA 2002                       		move.l	d2,d0
0001D8CC E080                       		asr.l	#8,d0
0001D8CE 32C0                       		move.w	d0,(a1)+
0001D8D0 2001                       		move.l	d1,d0
0001D8D2 E080                       		asr.l	#8,d0
0001D8D4 32C0                       		move.w	d0,(a1)+
0001D8D6 D485                       		add.l	d5,d2
0001D8D8 D284                       		add.l	d4,d1
0001D8DA 51CE FFEE                  		dbf	d6,loc_1B1C0
0001D8DE                            
0001D8DE 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001D8E2 0643 0018                  		addi.w	#$18,d3
0001D8E6 51CF FFC0                  		dbf	d7,loc_1B19E
0001D8EA                            
0001D8EA 3A1F                       		move.w	(sp)+,d5
0001D8EC 41F9 00FF 0000             		lea	($FF0000).l,a0
0001D8F2 7000                       		moveq	#0,d0
0001D8F4 3038 F704                  		move.w	($FFFFF704).w,d0
0001D8F8 80FC 0018                  		divu.w	#$18,d0
0001D8FC C0FC 0080                  		mulu.w	#$80,d0
0001D900 D1C0                       		adda.l	d0,a0
0001D902 7000                       		moveq	#0,d0
0001D904 3038 F700                  		move.w	($FFFFF700).w,d0
0001D908 80FC 0018                  		divu.w	#$18,d0
0001D90C D0C0                       		adda.w	d0,a0
0001D90E 49F8 8000                  		lea	($FFFF8000).w,a4
0001D912 3E3C 000F                  		move.w	#$F,d7
0001D916                            
0001D916                            loc_1B20C:
0001D916 3C3C 000F                  		move.w	#$F,d6
0001D91A                            
0001D91A                            loc_1B210:
0001D91A 7000                       		moveq	#0,d0
0001D91C 1018                       		move.b	(a0)+,d0
0001D91E 6700                       		beq.s	loc_1B268
0001D920 0C00 004E                  		cmpi.b	#$4E,d0
0001D924 6200                       		bhi.s	loc_1B268
0001D926 3614                       		move.w	(a4),d3
0001D928 0643 0120                  		addi.w	#$120,d3
0001D92C 0C43 0070                  		cmpi.w	#$70,d3
0001D930 6500                       		bcs.s	loc_1B268
0001D932 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D936 6400                       		bcc.s	loc_1B268
0001D938 342C 0002                  		move.w	2(a4),d2
0001D93C 0642 00F0                  		addi.w	#$F0,d2
0001D940 0C42 0070                  		cmpi.w	#$70,d2
0001D944 6500                       		bcs.s	loc_1B268
0001D946 0C42 0170                  		cmpi.w	#$170,d2
0001D94A 6400                       		bcc.s	loc_1B268
0001D94C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D952 E748                       		lsl.w	#3,d0
0001D954 4BF5 0000                  		lea	(a5,d0.w),a5
0001D958 225D                       		movea.l	(a5)+,a1
0001D95A 321D                       		move.w	(a5)+,d1
0001D95C D241                       		add.w	d1,d1
0001D95E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D962 365D                       		movea.w	(a5)+,a3
0001D964 7200                       		moveq	#0,d1
0001D966 1219                       		move.b	(a1)+,d1
0001D968 5301                       		subq.b	#1,d1
0001D96A 6B00                       		bmi.s	loc_1B268
0001D96C 4EB9 0000 EDD8             		jsr	sub_D762
0001D972                            
0001D972                            loc_1B268:
0001D972 584C                       		addq.w	#4,a4
0001D974 51CE FFA4                  		dbf	d6,loc_1B210
0001D978                            
0001D978 41E8 0070                  		lea	$70(a0),a0
0001D97C 51CF FF98                  		dbf	d7,loc_1B20C
0001D980                            
0001D980 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D984 0C05 0050                  		cmpi.b	#$50,d5
0001D988 6700                       		beq.s	loc_1B288
0001D98A 24BC 0000 0000             		move.l	#0,(a2)
0001D990 4E75                       		rts	
0001D992                            ; ===========================================================================
0001D992                            
0001D992                            loc_1B288:
0001D992 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D998 4E75                       		rts	
0001D99A                            ; End of function SS_ShowLayout
0001D99A                            
0001D99A                            ; ---------------------------------------------------------------------------
0001D99A                            ; Subroutine to	animate	walls and rings	in the special stage
0001D99A                            ; ---------------------------------------------------------------------------
0001D99A                            
0001D99A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D99A                            
0001D99A                            
0001D99A                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D99A 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D9A0 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D9A4 6A00                       		bpl.s	loc_1B2C8
0001D9A6 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D9AC 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D9B0 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D9B6                            
0001D9B6                            loc_1B2C8:
0001D9B6 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D9BC 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D9C0 6A00                       		bpl.s	loc_1B2E4
0001D9C2 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D9C8 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D9CC 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D9D2                            
0001D9D2                            loc_1B2E4:
0001D9D2 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D9D6 1340 0138                  		move.b	d0,$138(a1)
0001D9DA 1340 0160                  		move.b	d0,$160(a1)
0001D9DE 1340 0148                  		move.b	d0,$148(a1)
0001D9E2 1340 0150                  		move.b	d0,$150(a1)
0001D9E6 1340 01D8                  		move.b	d0,$1D8(a1)
0001D9EA 1340 01E0                  		move.b	d0,$1E0(a1)
0001D9EE 1340 01E8                  		move.b	d0,$1E8(a1)
0001D9F2 1340 01F0                  		move.b	d0,$1F0(a1)
0001D9F6 1340 01F8                  		move.b	d0,$1F8(a1)
0001D9FA 1340 0200                  		move.b	d0,$200(a1)
0001D9FE 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001DA02 6A00                       		bpl.s	loc_1B326
0001DA04 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001DA0A 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001DA0E 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001DA14                            
0001DA14                            loc_1B326:
0001DA14 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001DA18 1340 0168                  		move.b	d0,$168(a1)
0001DA1C 1340 0170                  		move.b	d0,$170(a1)
0001DA20 1340 0178                  		move.b	d0,$178(a1)
0001DA24 1340 0180                  		move.b	d0,$180(a1)
0001DA28 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001DA2C 6A00                       		bpl.s	loc_1B350
0001DA2E 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001DA34 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001DA38 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001DA3E                            
0001DA3E                            loc_1B350:
0001DA3E 43F9 00FF 4016             		lea	($FF4016).l,a1
0001DA44 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001DA4A 7000                       		moveq	#0,d0
0001DA4C 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001DA50 D040                       		add.w	d0,d0
0001DA52 41F0 0000                  		lea	(a0,d0.w),a0
0001DA56 3290                       		move.w	(a0),(a1)
0001DA58 3368 0002 0008             		move.w	2(a0),8(a1)
0001DA5E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001DA64 3368 0006 0018             		move.w	6(a0),$18(a1)
0001DA6A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001DA70 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001DA76 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001DA7C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001DA82 D0FC 0020                  		adda.w	#$20,a0
0001DA86 D2FC 0048                  		adda.w	#$48,a1
0001DA8A 3290                       		move.w	(a0),(a1)
0001DA8C 3368 0002 0008             		move.w	2(a0),8(a1)
0001DA92 3368 0004 0010             		move.w	4(a0),$10(a1)
0001DA98 3368 0006 0018             		move.w	6(a0),$18(a1)
0001DA9E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001DAA4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001DAAA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001DAB0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001DAB6 D0FC 0020                  		adda.w	#$20,a0
0001DABA D2FC 0048                  		adda.w	#$48,a1
0001DABE 3290                       		move.w	(a0),(a1)
0001DAC0 3368 0002 0008             		move.w	2(a0),8(a1)
0001DAC6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001DACC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001DAD2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001DAD8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001DADE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001DAE4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001DAEA D0FC 0020                  		adda.w	#$20,a0
0001DAEE D2FC 0048                  		adda.w	#$48,a1
0001DAF2 3290                       		move.w	(a0),(a1)
0001DAF4 3368 0002 0008             		move.w	2(a0),8(a1)
0001DAFA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001DB00 3368 0006 0018             		move.w	6(a0),$18(a1)
0001DB06 3368 0008 0020             		move.w	8(a0),$20(a1)
0001DB0C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001DB12 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001DB18 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001DB1E D0FC 0020                  		adda.w	#$20,a0
0001DB22 D2FC 0048                  		adda.w	#$48,a1
0001DB26 4E75                       		rts	
0001DB28                            ; End of function SS_AniWallsRings
0001DB28                            
0001DB28                            SS_LoadWalls:
0001DB28 7000                       		moveq	#0,d0
0001DB2A 1038 F780                  		move.b	($FFFFF780).w,d0	; get the Special Stage angle
0001DB2E E408                       		lsr.b	#2,d0			; modify so it can be used as a frame ID
0001DB30 0240 000F                  		andi.w	#$F,d0
0001DB34 B038 FFF9                  		cmp.b	(v_ssangleprev).w,d0	; does the modified angle match the recorded value?
0001DB38 6700                       		beq.s	@return			; if so, branch
0001DB3A                            
0001DB3A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DB40 43F9 0000 0000             		lea	(Art_SSWalls).l,a1	; load wall art
0001DB46 3200                       		move.w	d0,d1
0001DB48 E149                       		lsl.w	#8,d1
0001DB4A D241                       		add.w	d1,d1
0001DB4C D2C1                       		add.w	d1,a1
0001DB4E                            
0001DB58                            
0001DB58 323C 000F                  		move.w	#$F,d1			; number of 8x8 tiles
0001DB5C 4EB9 0000 0000             		jsr	LoadTiles
0001DB62 11C0 FFF9                  		move.b	d0,(v_ssangleprev).w	; record the modified angle for comparison
0001DB66                            
0001DB66                            	@return:
0001DB66 4E75                       		rts
0001DB68                            
0001DB68                            ; ===========================================================================
0001DB68 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001DB78 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001DB88 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001DB98 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001DBA8 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001DBB8 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001DBC8 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001DBD8 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            ; Subroutine to	remove items when you collect them in the special stage
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            
0001DBE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBE8                            
0001DBE8                            
0001DBE8                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001DBE8 45F9 00FF 4400             		lea	($FF4400).l,a2
0001DBEE 303C 001F                  		move.w	#$1F,d0
0001DBF2                            
0001DBF2                            loc_1B4C4:
0001DBF2 4A12                       		tst.b	(a2)
0001DBF4 6700                       		beq.s	locret_1B4CE
0001DBF6 504A                       		addq.w	#8,a2
0001DBF8 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001DBFC                            
0001DBFC                            locret_1B4CE:
0001DBFC 4E75                       		rts	
0001DBFE                            ; End of function SS_RemoveCollectedItem
0001DBFE                            
0001DBFE                            ; ---------------------------------------------------------------------------
0001DBFE                            ; Subroutine to	animate	special	stage items when you touch them
0001DBFE                            ; ---------------------------------------------------------------------------
0001DBFE                            
0001DBFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBFE                            
0001DBFE                            
0001DBFE                            SS_AniItems:				; XREF: SS_ShowLayout
0001DBFE 41F9 00FF 4400             		lea	($FF4400).l,a0
0001DC04 3E3C 001F                  		move.w	#$1F,d7
0001DC08                            
0001DC08                            loc_1B4DA:
0001DC08 7000                       		moveq	#0,d0
0001DC0A 1010                       		move.b	(a0),d0
0001DC0C 6700                       		beq.s	loc_1B4E8
0001DC0E E548                       		lsl.w	#2,d0
0001DC10 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001DC14 4E91                       		jsr	(a1)
0001DC16                            
0001DC16                            loc_1B4E8:
0001DC16 5048                       		addq.w	#8,a0
0001DC18                            
0001DC18                            loc_1B4EA:
0001DC18 51CF FFEE                  		dbf	d7,loc_1B4DA
0001DC1C                            
0001DC1C 4E75                       		rts	
0001DC1E                            ; End of function SS_AniItems
0001DC1E                            
0001DC1E                            ; ===========================================================================
0001DC1E 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001DC22 0000 0000                  		dc.l SS_AniBumper
0001DC26 0000 0000                  		dc.l SS_Ani1Up
0001DC2A 0000 0000                  		dc.l SS_AniReverse
0001DC2E 0000 0000                  		dc.l SS_AniEmeraldSparks
0001DC32 0000 0000                  		dc.l SS_AniGlassBlock
0001DC36                            ; ===========================================================================
0001DC36                            
0001DC36                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001DC36 5328 0002                  		subq.b	#1,2(a0)
0001DC3A 6A00                       		bpl.s	locret_1B530
0001DC3C 117C 0005 0002             		move.b	#5,2(a0)
0001DC42 7000                       		moveq	#0,d0
0001DC44 1028 0003                  		move.b	3(a0),d0
0001DC48 5228 0003                  		addq.b	#1,3(a0)
0001DC4C 2268 0004                  		movea.l	4(a0),a1
0001DC50 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001DC54 1280                       		move.b	d0,(a1)
0001DC56 6600                       		bne.s	locret_1B530
0001DC58 4290                       		clr.l	(a0)
0001DC5A 42A8 0004                  		clr.l	4(a0)
0001DC5E                            
0001DC5E                            locret_1B530:
0001DC5E 4E75                       		rts	
0001DC60                            ; ===========================================================================
0001DC60 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001DC66                            ; ===========================================================================
0001DC66                            
0001DC66                            SS_AniBumper:				; XREF: SS_AniIndex
0001DC66 5328 0002                  		subq.b	#1,2(a0)
0001DC6A 6A00                       		bpl.s	locret_1B566
0001DC6C 117C 0007 0002             		move.b	#7,2(a0)
0001DC72 7000                       		moveq	#0,d0
0001DC74 1028 0003                  		move.b	3(a0),d0
0001DC78 5228 0003                  		addq.b	#1,3(a0)
0001DC7C 2268 0004                  		movea.l	4(a0),a1
0001DC80 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001DC84 6600                       		bne.s	loc_1B564
0001DC86 4290                       		clr.l	(a0)
0001DC88 42A8 0004                  		clr.l	4(a0)
0001DC8C 12BC 0025                  		move.b	#$25,(a1)
0001DC90 4E75                       		rts	
0001DC92                            ; ===========================================================================
0001DC92                            
0001DC92                            loc_1B564:
0001DC92 1280                       		move.b	d0,(a1)
0001DC94                            
0001DC94                            locret_1B566:
0001DC94 4E75                       		rts	
0001DC96                            ; ===========================================================================
0001DC96 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001DC9C                            ; ===========================================================================
0001DC9C                            
0001DC9C                            SS_Ani1Up:				; XREF: SS_AniIndex
0001DC9C 5328 0002                  		subq.b	#1,2(a0)
0001DCA0 6A00                       		bpl.s	locret_1B596
0001DCA2 117C 0005 0002             		move.b	#5,2(a0)
0001DCA8 7000                       		moveq	#0,d0
0001DCAA 1028 0003                  		move.b	3(a0),d0
0001DCAE 5228 0003                  		addq.b	#1,3(a0)
0001DCB2 2268 0004                  		movea.l	4(a0),a1
0001DCB6 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001DCBA 1280                       		move.b	d0,(a1)
0001DCBC 6600                       		bne.s	locret_1B596
0001DCBE 4290                       		clr.l	(a0)
0001DCC0 42A8 0004                  		clr.l	4(a0)
0001DCC4                            
0001DCC4                            locret_1B596:
0001DCC4 4E75                       		rts	
0001DCC6                            ; ===========================================================================
0001DCC6 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001DCCC                            ; ===========================================================================
0001DCCC                            
0001DCCC                            SS_AniReverse:				; XREF: SS_AniIndex
0001DCCC 5328 0002                  		subq.b	#1,2(a0)
0001DCD0 6A00                       		bpl.s	locret_1B5CC
0001DCD2 117C 0007 0002             		move.b	#7,2(a0)
0001DCD8 7000                       		moveq	#0,d0
0001DCDA 1028 0003                  		move.b	3(a0),d0
0001DCDE 5228 0003                  		addq.b	#1,3(a0)
0001DCE2 2268 0004                  		movea.l	4(a0),a1
0001DCE6 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001DCEA 6600                       		bne.s	loc_1B5CA
0001DCEC 4290                       		clr.l	(a0)
0001DCEE 42A8 0004                  		clr.l	4(a0)
0001DCF2 12BC 002B                  		move.b	#$2B,(a1)
0001DCF6 4E75                       		rts	
0001DCF8                            ; ===========================================================================
0001DCF8                            
0001DCF8                            loc_1B5CA:
0001DCF8 1280                       		move.b	d0,(a1)
0001DCFA                            
0001DCFA                            locret_1B5CC:
0001DCFA 4E75                       		rts	
0001DCFC                            ; ===========================================================================
0001DCFC 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001DD02                            ; ===========================================================================
0001DD02                            
0001DD02                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001DD02 5328 0002                  		subq.b	#1,2(a0)
0001DD06 6A00                       		bpl.s	locret_1B60C
0001DD08 117C 0005 0002             		move.b	#5,2(a0)
0001DD0E 7000                       		moveq	#0,d0
0001DD10 1028 0003                  		move.b	3(a0),d0
0001DD14 5228 0003                  		addq.b	#1,3(a0)
0001DD18 2268 0004                  		movea.l	4(a0),a1
0001DD1C 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001DD20 1280                       		move.b	d0,(a1)
0001DD22 6600                       		bne.s	locret_1B60C
0001DD24 4290                       		clr.l	(a0)
0001DD26 42A8 0004                  		clr.l	4(a0)
0001DD2A 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001DD30 303C 00A8                  		move.w	#$A8,d0
0001DD34 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001DD3A                            
0001DD3A                            locret_1B60C:
0001DD3A 4E75                       		rts	
0001DD3C                            ; ===========================================================================
0001DD3C 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001DD42                            ; ===========================================================================
0001DD42                            
0001DD42                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001DD42 5328 0002                  		subq.b	#1,2(a0)
0001DD46 6A00                       		bpl.s	locret_1B640
0001DD48 117C 0001 0002             		move.b	#1,2(a0)
0001DD4E 7000                       		moveq	#0,d0
0001DD50 1028 0003                  		move.b	3(a0),d0
0001DD54 5228 0003                  		addq.b	#1,3(a0)
0001DD58 2268 0004                  		movea.l	4(a0),a1
0001DD5C 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001DD60 1280                       		move.b	d0,(a1)
0001DD62 6600                       		bne.s	locret_1B640
0001DD64 12A8 0004                  		move.b	4(a0),(a1)
0001DD68 4290                       		clr.l	(a0)
0001DD6A 42A8 0004                  		clr.l	4(a0)
0001DD6E                            
0001DD6E                            locret_1B640:
0001DD6E 4E75                       		rts	
0001DD70                            ; ===========================================================================
0001DD70 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001DD7A                            ; ---------------------------------------------------------------------------
0001DD7A                            ; Special stage	layout pointers
0001DD7A                            ; ---------------------------------------------------------------------------
0001DD7A                            SS_LayoutIndex:
0001DD7A                            	include "_inc\Special stage layout pointers.asm"
0001DD7A                            ; ---------------------------------------------------------------------------
0001DD7A                            ; Special stage	layout pointers
0001DD7A                            ; ---------------------------------------------------------------------------
0001DD7A 0000 0000                  	dc.l SS_1
0001DD7E 0000 0000                  	dc.l SS_2
0001DD82 0000 0000                  	dc.l SS_3
0001DD86 0000 0000                  	dc.l SS_4
0001DD8A 0000 0000                  	dc.l SS_5
0001DD8E 0000 0000                  	dc.l SS_6
0001DD92                            	even
0001DD92                            	even
0001DD92                            
0001DD92                            ; ---------------------------------------------------------------------------
0001DD92                            ; Special stage	start locations
0001DD92                            ; ---------------------------------------------------------------------------
0001DD92                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001DDAA                            		even
0001DDAA                            
0001DDAA                            ; ---------------------------------------------------------------------------
0001DDAA                            ; Subroutine to	load special stage layout
0001DDAA                            ; ---------------------------------------------------------------------------
0001DDAA                            
0001DDAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDAA                            
0001DDAA                            
0001DDAA                            SS_Load:				; XREF: SpecialStage
0001DDAA 7000                       		moveq	#0,d0
0001DDAC 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001DDB0 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001DDB4 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001DDBA 6500                       		bcs.s	SS_ChkEmldNum
0001DDBC 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001DDC2                            
0001DDC2                            SS_ChkEmldNum:
0001DDC2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001DDC8 6700                       		beq.s	SS_LoadData	; if yes, branch
0001DDCA 7200                       		moveq	#0,d1
0001DDCC 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001DDD0 5301                       		subq.b	#1,d1
0001DDD2 6500                       		bcs.s	SS_LoadData
0001DDD4 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001DDD8                            
0001DDD8                            SS_ChkEmldLoop:	
0001DDD8 B033 1000                  		cmp.b	(a3,d1.w),d0
0001DDDC 6600                       		bne.s	SS_ChkEmldRepeat
0001DDDE 60CA                       		bra.s	SS_Load
0001DDE0                            ; ===========================================================================
0001DDE0                            
0001DDE0                            SS_ChkEmldRepeat:
0001DDE0 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001DDE4                            
0001DDE4                            SS_LoadData:
0001DDE4 E548                       		lsl.w	#2,d0
0001DDE6 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001DDEA 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001DDEE 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001DDF2 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001DDF6 43F9 00FF 4000             		lea	($FF4000).l,a1
0001DDFC 303C 0000                  		move.w	#0,d0
0001DE00 4EB9 0000 15FC             		jsr	(EniDec).l
0001DE06 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DE0C 303C 0FFF                  		move.w	#$FFF,d0
0001DE10                            
0001DE10                            SS_ClrRAM3:
0001DE10 4299                       		clr.l	(a1)+
0001DE12 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001DE16                            
0001DE16 43F9 00FF 1020             		lea	($FF1020).l,a1
0001DE1C 41F9 00FF 4000             		lea	($FF4000).l,a0
0001DE22 723F                       		moveq	#$3F,d1
0001DE24                            
0001DE24                            loc_1B6F6:
0001DE24 743F                       		moveq	#$3F,d2
0001DE26                            
0001DE26                            loc_1B6F8:
0001DE26 12D8                       		move.b	(a0)+,(a1)+
0001DE28 51CA FFFC                  		dbf	d2,loc_1B6F8
0001DE2C                            
0001DE2C 43E9 0040                  		lea	$40(a1),a1
0001DE30 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001DE34                            
0001DE34 43F9 00FF 4008             		lea	($FF4008).l,a1
0001DE3A 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001DE40 724D                       		moveq	#$4D,d1
0001DE42                            
0001DE42                            loc_1B714:
0001DE42 22D8                       		move.l	(a0)+,(a1)+
0001DE44 32FC 0000                  		move.w	#0,(a1)+
0001DE48 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001DE4E 32D8                       		move.w	(a0)+,(a1)+
0001DE50 51C9 FFF0                  		dbf	d1,loc_1B714
0001DE54                            
0001DE54 43F9 00FF 4400             		lea	($FF4400).l,a1
0001DE5A 323C 003F                  		move.w	#$3F,d1
0001DE5E                            
0001DE5E                            loc_1B730:
0001DE5E                            
0001DE5E 4299                       		clr.l	(a1)+
0001DE60 51C9 FFFC                  		dbf	d1,loc_1B730
0001DE64                            
0001DE64 4E75                       		rts	
0001DE66                            ; End of function SS_Load
0001DE66                            
0001DE66                            ; ===========================================================================
0001DE66                            ; ---------------------------------------------------------------------------
0001DE66                            ; Special stage	mappings and VRAM pointers
0001DE66                            ; ---------------------------------------------------------------------------
0001DE66                            SS_MapIndex:
0001DE66                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001DE66                            ; ---------------------------------------------------------------------------
0001DE66                            ; Special stage	mappings and VRAM pointers
0001DE66                            ; ---------------------------------------------------------------------------
0001DE66 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001DE6A 0142                       	dc.w $142		; VRAM setting
0001DE6C 0000 0000                  	dc.l Map_SSWalls
0001DE70 0142                       	dc.w $142
0001DE72 0000 0000                  	dc.l Map_SSWalls
0001DE76 0142                       	dc.w $142
0001DE78 0000 0000                  	dc.l Map_SSWalls
0001DE7C 0142                       	dc.w $142
0001DE7E 0000 0000                  	dc.l Map_SSWalls
0001DE82 0142                       	dc.w $142
0001DE84 0000 0000                  	dc.l Map_SSWalls
0001DE88 0142                       	dc.w $142
0001DE8A 0000 0000                  	dc.l Map_SSWalls
0001DE8E 0142                       	dc.w $142
0001DE90 0000 0000                  	dc.l Map_SSWalls
0001DE94 0142                       	dc.w $142
0001DE96 0000 0000                  	dc.l Map_SSWalls
0001DE9A 0142                       	dc.w $142
0001DE9C 0000 0000                  	dc.l Map_SSWalls
0001DEA0 2142                       	dc.w $2142
0001DEA2 0000 0000                  	dc.l Map_SSWalls
0001DEA6 2142                       	dc.w $2142
0001DEA8 0000 0000                  	dc.l Map_SSWalls
0001DEAC 2142                       	dc.w $2142
0001DEAE 0000 0000                  	dc.l Map_SSWalls
0001DEB2 2142                       	dc.w $2142
0001DEB4 0000 0000                  	dc.l Map_SSWalls
0001DEB8 2142                       	dc.w $2142
0001DEBA 0000 0000                  	dc.l Map_SSWalls
0001DEBE 2142                       	dc.w $2142
0001DEC0 0000 0000                  	dc.l Map_SSWalls
0001DEC4 2142                       	dc.w $2142
0001DEC6 0000 0000                  	dc.l Map_SSWalls
0001DECA 2142                       	dc.w $2142
0001DECC 0000 0000                  	dc.l Map_SSWalls
0001DED0 2142                       	dc.w $2142
0001DED2 0000 0000                  	dc.l Map_SSWalls
0001DED6 4142                       	dc.w $4142
0001DED8 0000 0000                  	dc.l Map_SSWalls
0001DEDC 4142                       	dc.w $4142
0001DEDE 0000 0000                  	dc.l Map_SSWalls
0001DEE2 4142                       	dc.w $4142
0001DEE4 0000 0000                  	dc.l Map_SSWalls
0001DEE8 4142                       	dc.w $4142
0001DEEA 0000 0000                  	dc.l Map_SSWalls
0001DEEE 4142                       	dc.w $4142
0001DEF0 0000 0000                  	dc.l Map_SSWalls
0001DEF4 4142                       	dc.w $4142
0001DEF6 0000 0000                  	dc.l Map_SSWalls
0001DEFA 4142                       	dc.w $4142
0001DEFC 0000 0000                  	dc.l Map_SSWalls
0001DF00 4142                       	dc.w $4142
0001DF02 0000 0000                  	dc.l Map_SSWalls
0001DF06 4142                       	dc.w $4142
0001DF08 0000 0000                  	dc.l Map_SSWalls
0001DF0C 6142                       	dc.w $6142
0001DF0E 0000 0000                  	dc.l Map_SSWalls
0001DF12 6142                       	dc.w $6142
0001DF14 0000 0000                  	dc.l Map_SSWalls
0001DF18 6142                       	dc.w $6142
0001DF1A 0000 0000                  	dc.l Map_SSWalls
0001DF1E 6142                       	dc.w $6142
0001DF20 0000 0000                  	dc.l Map_SSWalls
0001DF24 6142                       	dc.w $6142
0001DF26 0000 0000                  	dc.l Map_SSWalls
0001DF2A 6142                       	dc.w $6142
0001DF2C 0000 0000                  	dc.l Map_SSWalls
0001DF30 6142                       	dc.w $6142
0001DF32 0000 0000                  	dc.l Map_SSWalls
0001DF36 6142                       	dc.w $6142
0001DF38 0000 0000                  	dc.l Map_SSWalls
0001DF3C 6142                       	dc.w $6142
0001DF3E 0001 05A2                  	dc.l Map_obj47
0001DF42 023B                       	dc.w $23B
0001DF44 0000 0000                  	dc.l Map_SS_R
0001DF48 0570                       	dc.w $570
0001DF4A 0000 0000                  	dc.l Map_SS_R
0001DF4E 0251                       	dc.w $251
0001DF50 0000 0000                  	dc.l Map_SS_R
0001DF54 0370                       	dc.w $370
0001DF56 0000 0000                  	dc.l Map_SS_Up
0001DF5A 0263                       	dc.w $263
0001DF5C 0000 0000                  	dc.l Map_SS_Down
0001DF60 0263                       	dc.w $263
0001DF62 0000 0000                  	dc.l Map_SS_R
0001DF66 22F0                       	dc.w $22F0
0001DF68 0000 0000                  	dc.l Map_SS_Glass
0001DF6C 0470                       	dc.w $470
0001DF6E 0000 0000                  	dc.l Map_SS_Glass
0001DF72 05F0                       	dc.w $5F0
0001DF74 0000 0000                  	dc.l Map_SS_Glass
0001DF78 65F0                       	dc.w $65F0
0001DF7A 0000 0000                  	dc.l Map_SS_Glass
0001DF7E 25F0                       	dc.w $25F0
0001DF80 0000 0000                  	dc.l Map_SS_Glass
0001DF84 45F0                       	dc.w $45F0
0001DF86 0000 0000                  	dc.l Map_SS_R
0001DF8A 02F0                       	dc.w $2F0
0001DF8C 0101 05A2                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001DF90 023B                       	dc.w $23B
0001DF92 0201 05A2                  	dc.l Map_obj47+$2000000
0001DF96 023B                       	dc.w $23B
0001DF98 0000 0000                  	dc.l Map_SS_R
0001DF9C 0797                       	dc.w $797
0001DF9E 0000 0000                  	dc.l Map_SS_R
0001DFA2 07A0                       	dc.w $7A0
0001DFA4 0000 0000                  	dc.l Map_SS_R
0001DFA8 07A9                       	dc.w $7A9
0001DFAA 0000 0000                  	dc.l Map_SS_R
0001DFAE 0797                       	dc.w $797
0001DFB0 0000 0000                  	dc.l Map_SS_R
0001DFB4 07A0                       	dc.w $7A0
0001DFB6 0000 0000                  	dc.l Map_SS_R
0001DFBA 07A9                       	dc.w $7A9
0001DFBC 0000 B438                  	dc.l Map_obj25
0001DFC0 222D                       	dc.w $2000+ssringart
0001DFC2 0000 0000                  	dc.l Map_SS_Chaos3
0001DFC6 0770                       	dc.w $770
0001DFC8 0000 0000                  	dc.l Map_SS_Chaos3
0001DFCC 2770                       	dc.w $2770
0001DFCE 0000 0000                  	dc.l Map_SS_Chaos3
0001DFD2 4770                       	dc.w $4770
0001DFD4 0000 0000                  	dc.l Map_SS_Chaos3
0001DFD8 6770                       	dc.w $6770
0001DFDA 0000 0000                  	dc.l Map_SS_Chaos1
0001DFDE 0770                       	dc.w $770
0001DFE0 0000 0000                  	dc.l Map_SS_Chaos2
0001DFE4 0770                       	dc.w $770
0001DFE6 0000 0000                  	dc.l Map_SS_R
0001DFEA 04F0                       	dc.w $4F0
0001DFEC 0400 B438                  	dc.l Map_obj25+$4000000
0001DFF0 222D                       	dc.w $2000+ssringart
0001DFF2 0500 B438                  	dc.l Map_obj25+$5000000
0001DFF6 222D                       	dc.w $2000+ssringart
0001DFF8 0600 B438                  	dc.l Map_obj25+$6000000
0001DFFC 222D                       	dc.w $2000+ssringart
0001DFFE 0700 B438                  	dc.l Map_obj25+$7000000
0001E002 222D                       	dc.w $2000+ssringart
0001E004 0000 0000                  	dc.l Map_SS_Glass
0001E008 23F0                       	dc.w $23F0
0001E00A 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001E00E 23F0                       	dc.w $23F0
0001E010 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001E014 23F0                       	dc.w $23F0
0001E016 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001E01A 23F0                       	dc.w $23F0
0001E01C 0000 0000                  	dc.l Map_SS_R+$2000000
0001E020 04F0                       	dc.w $4F0
0001E022 0000 0000                  	dc.l Map_SS_Glass
0001E026 05F0                       	dc.w $5F0
0001E028 0000 0000                  	dc.l Map_SS_Glass
0001E02C 65F0                       	dc.w $65F0
0001E02E 0000 0000                  	dc.l Map_SS_Glass
0001E032 25F0                       	dc.w $25F0
0001E034 0000 0000                  	dc.l Map_SS_Glass
0001E038 45F0                       	dc.w $45F0
0001E038 45F0                       	dc.w $45F0
0001E03A                            
0001E03A                            ; ---------------------------------------------------------------------------
0001E03A                            ; Sprite mappings - special stage "R" block
0001E03A                            ; ---------------------------------------------------------------------------
0001E03A                            Map_SS_R:
0001E03A                            	include "_maps\SSRblock.asm"
0001E03A                            ; ---------------------------------------------------------------------------
0001E03A                            ; Sprite mappings - special stage "R" block
0001E03A                            ; ---------------------------------------------------------------------------
0001E03A 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001E03E 0000                       		dc.w byte_1B91E-Map_SS_R
0001E040 01                         byte_1B912:	dc.b 1
0001E041 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001E046 01                         byte_1B918:	dc.b 1
0001E047 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001E04C 00                         byte_1B91E:	dc.b 0
0001E04E 00                         		even
0001E04E 00                         		even
0001E04E                            
0001E04E                            ; ---------------------------------------------------------------------------
0001E04E                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001E04E                            ; ---------------------------------------------------------------------------
0001E04E                            Map_SS_Glass:
0001E04E                            	include "_maps\SSglassblock.asm"
0001E04E                            ; ---------------------------------------------------------------------------
0001E04E                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001E04E                            ; ---------------------------------------------------------------------------
0001E04E 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001E052 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001E056 01                         byte_1B928:	dc.b 1
0001E057 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001E05C 01                         byte_1B92E:	dc.b 1
0001E05D F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001E062 01                         byte_1B934:	dc.b 1
0001E063 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001E068 01                         byte_1B93A:	dc.b 1
0001E069 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001E06E                            		even
0001E06E                            		even
0001E06E                            
0001E06E                            ; ---------------------------------------------------------------------------
0001E06E                            ; Sprite mappings - special stage "UP" block
0001E06E                            ; ---------------------------------------------------------------------------
0001E06E                            Map_SS_Up:
0001E06E                            	include "_maps\SSUPblock.asm"
0001E06E                            ; ---------------------------------------------------------------------------
0001E06E                            ; Sprite mappings - special stage "UP" block
0001E06E                            ; ---------------------------------------------------------------------------
0001E06E 0000                       		dc.w byte_1B944-Map_SS_Up
0001E070 0000                       		dc.w byte_1B94A-Map_SS_Up
0001E072 01                         byte_1B944:	dc.b 1
0001E073 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001E078 01                         byte_1B94A:	dc.b 1
0001E079 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001E07E                            		even
0001E07E                            		even
0001E07E                            
0001E07E                            ; ---------------------------------------------------------------------------
0001E07E                            ; Sprite mappings - special stage "DOWN" block
0001E07E                            ; ---------------------------------------------------------------------------
0001E07E                            Map_SS_Down:
0001E07E                            	include "_maps\SSDOWNblock.asm"
0001E07E                            ; ---------------------------------------------------------------------------
0001E07E                            ; Sprite mappings - special stage "DOWN" block
0001E07E                            ; ---------------------------------------------------------------------------
0001E07E 0000                       		dc.w byte_1B954-Map_SS_Down
0001E080 0000                       		dc.w byte_1B95A-Map_SS_Down
0001E082 01                         byte_1B954:	dc.b 1
0001E083 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001E088 01                         byte_1B95A:	dc.b 1
0001E089 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001E08E                            		even
0001E08E                            		even
0001E08E                            
0001E08E                            ; ---------------------------------------------------------------------------
0001E08E                            ; Sprite mappings - special stage chaos	emeralds
0001E08E                            ; ---------------------------------------------------------------------------
0001E08E 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001E090 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001E092 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001E094 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001E096 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001E098 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001E09A 01                         byte_1B96C:	dc.b 1
0001E09B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001E0A0 01                         byte_1B972:	dc.b 1
0001E0A1 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001E0A6 01                         byte_1B978:	dc.b 1
0001E0A7 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001E0AC 01                         byte_1B97E:	dc.b 1
0001E0AD F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001E0B2                            		even
0001E0B2                            ; ===========================================================================
0001E0B2                            ; ---------------------------------------------------------------------------
0001E0B2                            ; Object 09 - Sonic (special stage)
0001E0B2                            ; ---------------------------------------------------------------------------
0001E0B2                            
0001E0B2                            Obj09:					; XREF: Obj_Index
0001E0B2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001E0B6 6700                       		beq.s	Obj09_Normal	; if not, branch
0001E0B8 6100 0000                  		bsr.w	SS_FixCamera
0001E0BC 6000 0000                  		bra.w	DebugMode
0001E0C0                            ; ===========================================================================
0001E0C0                            
0001E0C0                            Obj09_Normal:
0001E0C0 7000                       		moveq	#0,d0
0001E0C2 1028 0024                  		move.b	$24(a0),d0
0001E0C6 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001E0CA 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001E0CE                            ; ===========================================================================
0001E0CE 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001E0D0 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001E0D2 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001E0D4 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001E0D6                            ; ===========================================================================
0001E0D6                            
0001E0D6                            Obj09_Main:				; XREF: Obj09_Index
0001E0D6 5428 0024                  		addq.b	#2,$24(a0)
0001E0DA 117C 000E 0016             		move.b	#$E,$16(a0)
0001E0E0 117C 0007 0017             		move.b	#7,$17(a0)
0001E0E6 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001E0EE 317C 0780 0002             		move.w	#$780,2(a0)
0001E0F4 117C 0004 0001             		move.b	#4,1(a0)
0001E0FA 117C 0000 0018             		move.b	#0,$18(a0)
0001E100 117C 0002 001C             		move.b	#2,$1C(a0)
0001E106 08E8 0002 0022             		bset	#2,$22(a0)
0001E10C 08E8 0001 0022             		bset	#1,$22(a0)
0001E112                            
0001E112                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001E112 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001E116 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001E118 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001E11E 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001E120 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001E126                            
0001E126                            Obj09_NoDebug:
0001E126 117C 0000 0030             		move.b	#0,$30(a0)
0001E12C 7000                       		moveq	#0,d0
0001E12E 1028 0022                  		move.b	$22(a0),d0
0001E132 0240 0002                  		andi.w	#2,d0
0001E136 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001E13A 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001E13E 4EB9 0001 5898             		jsr	LoadSonicDynPLC
0001E144 4EF9 0000 EB2E             		jmp	DisplaySprite
0001E14A                            ; ===========================================================================
0001E14A 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001E14C 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001E14E                            ; ===========================================================================
0001E14E                            
0001E14E                            Obj09_OnWall:				; XREF: Obj09_Modes
0001E14E 6100 0000                  		bsr.w	Obj09_Jump
0001E152 6100 0000                  		bsr.w	Obj09_Move
0001E156 6100 0000                  		bsr.w	Obj09_Fall
0001E15A 6000                       		bra.s	Obj09_Display
0001E15C                            ; ===========================================================================
0001E15C                            
0001E15C                            Obj09_InAir:				; XREF: Obj09_Modes
0001E15C 6100 0000                  		bsr.w	nullsub_2
0001E160 6100 0000                  		bsr.w	Obj09_Move
0001E164 6100 0000                  		bsr.w	Obj09_Fall
0001E168                            
0001E168                            Obj09_Display:				; XREF: Obj09_OnWall
0001E168 6100 0000                  		bsr.w	Obj09_ChkItems
0001E16C 6100 0000                  		bsr.w	Obj09_ChkItems2
0001E170 4EB9 0000 EB14             		jsr	SpeedToPos
0001E176 6100 0000                  		bsr.w	SS_FixCamera
0001E17A 3038 F780                  		move.w	($FFFFF780).w,d0
0001E17E D078 F782                  		add.w	($FFFFF782).w,d0
0001E182 31C0 F780                  		move.w	d0,($FFFFF780).w
0001E186 4EB9 0001 561E             		jsr	Sonic_Animate
0001E18C 4E75                       		rts	
0001E18E                            
0001E18E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E18E                            
0001E18E                            
0001E18E                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001E18E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001E194 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001E196 6100 0000                  		bsr.w	Obj09_MoveLeft
0001E19A                            
0001E19A                            Obj09_ChkRight:
0001E19A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001E1A0 6700                       		beq.s	loc_1BA78	; if not, branch
0001E1A2 6100 0000                  		bsr.w	Obj09_MoveRight
0001E1A6                            
0001E1A6                            loc_1BA78:
0001E1A6 1038 F602                  		move.b	($FFFFF602).w,d0
0001E1AA 0200 000C                  		andi.b	#$C,d0
0001E1AE 6600                       		bne.s	loc_1BAA8
0001E1B0 3028 0020                  		move.w	$20(a0),d0
0001E1B4 6700                       		beq.s	loc_1BAA8
0001E1B6 6B00                       		bmi.s	loc_1BA9A
0001E1B8 0440 000C                  		subi.w	#$C,d0
0001E1BC 6400                       		bcc.s	loc_1BA94
0001E1BE 303C 0000                  		move.w	#0,d0
0001E1C2                            
0001E1C2                            loc_1BA94:
0001E1C2 3140 0020                  		move.w	d0,$20(a0)
0001E1C6 6000                       		bra.s	loc_1BAA8
0001E1C8                            ; ===========================================================================
0001E1C8                            
0001E1C8                            loc_1BA9A:
0001E1C8 0640 000C                  		addi.w	#$C,d0
0001E1CC 6400                       		bcc.s	loc_1BAA4
0001E1CE 303C 0000                  		move.w	#0,d0
0001E1D2                            
0001E1D2                            loc_1BAA4:
0001E1D2 3140 0020                  		move.w	d0,$20(a0)
0001E1D6                            
0001E1D6                            loc_1BAA8:
0001E1D6 1038 F780                  		move.b	($FFFFF780).w,d0
0001E1DA 0600 0020                  		addi.b	#$20,d0
0001E1DE 0200 00C0                  		andi.b	#$C0,d0
0001E1E2 4400                       		neg.b	d0
0001E1E4 4EB9 0000 29F6             		jsr	(CalcSine).l
0001E1EA C3E8 0020                  		muls.w	$20(a0),d1
0001E1EE D3A8 0008                  		add.l	d1,8(a0)
0001E1F2 C1E8 0020                  		muls.w	$20(a0),d0
0001E1F6 D1A8 000C                  		add.l	d0,$C(a0)
0001E1FA 48E7 C000                  		movem.l	d0-d1,-(sp)
0001E1FE 2428 000C                  		move.l	$C(a0),d2
0001E202 2628 0008                  		move.l	8(a0),d3
0001E206 6100 0000                  		bsr.w	sub_1BCE8
0001E20A 6700                       		beq.s	loc_1BAF2
0001E20C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001E210 93A8 0008                  		sub.l	d1,8(a0)
0001E214 91A8 000C                  		sub.l	d0,$C(a0)
0001E218 317C 0000 0020             		move.w	#0,$20(a0)
0001E21E 4E75                       		rts	
0001E220                            ; ===========================================================================
0001E220                            
0001E220                            loc_1BAF2:
0001E220 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001E224 4E75                       		rts	
0001E226                            ; End of function Obj09_Move
0001E226                            
0001E226                            
0001E226                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E226                            
0001E226                            
0001E226                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001E226 08E8 0000 0022             		bset	#0,$22(a0)
0001E22C 3028 0020                  		move.w	$20(a0),d0
0001E230 6700                       		beq.s	loc_1BB06
0001E232 6A00                       		bpl.s	loc_1BB1A
0001E234                            
0001E234                            loc_1BB06:
0001E234 0440 000C                  		subi.w	#$C,d0
0001E238 0C40 F800                  		cmpi.w	#-$800,d0
0001E23C 6E00                       		bgt.s	loc_1BB14
0001E23E 303C F800                  		move.w	#-$800,d0
0001E242                            
0001E242                            loc_1BB14:
0001E242 3140 0020                  		move.w	d0,$20(a0)
0001E246 4E75                       		rts	
0001E248                            ; ===========================================================================
0001E248                            
0001E248                            loc_1BB1A:
0001E248 0440 0040                  		subi.w	#$40,d0
0001E24C 6400                       		bcc.s	loc_1BB22
0001E24E 4E71                       		nop	
0001E250                            
0001E250                            loc_1BB22:
0001E250 3140 0020                  		move.w	d0,$20(a0)
0001E254 4E75                       		rts	
0001E256                            ; End of function Obj09_MoveLeft
0001E256                            
0001E256                            
0001E256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E256                            
0001E256                            
0001E256                            Obj09_MoveRight:			; XREF: Obj09_Move
0001E256 08A8 0000 0022             		bclr	#0,$22(a0)
0001E25C 3028 0020                  		move.w	$20(a0),d0
0001E260 6B00                       		bmi.s	loc_1BB48
0001E262 0640 000C                  		addi.w	#$C,d0
0001E266 0C40 0800                  		cmpi.w	#$800,d0
0001E26A 6D00                       		blt.s	loc_1BB42
0001E26C 303C 0800                  		move.w	#$800,d0
0001E270                            
0001E270                            loc_1BB42:
0001E270 3140 0020                  		move.w	d0,$20(a0)
0001E274 6000                       		bra.s	locret_1BB54
0001E276                            ; ===========================================================================
0001E276                            
0001E276                            loc_1BB48:
0001E276 0640 0040                  		addi.w	#$40,d0
0001E27A 6400                       		bcc.s	loc_1BB50
0001E27C 4E71                       		nop	
0001E27E                            
0001E27E                            loc_1BB50:
0001E27E 3140 0020                  		move.w	d0,$20(a0)
0001E282                            
0001E282                            locret_1BB54:
0001E282 4E75                       		rts	
0001E284                            ; End of function Obj09_MoveRight
0001E284                            
0001E284                            
0001E284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E284                            
0001E284                            
0001E284                            Obj09_Jump:				; XREF: Obj09_OnWall
0001E284 1038 F603                  		move.b	($FFFFF603).w,d0
0001E288 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001E28C 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001E28E 1038 F780                  		move.b	($FFFFF780).w,d0
0001E292 0200 00FC                  		andi.b	#$FC,d0
0001E296 4400                       		neg.b	d0
0001E298 0400 0040                  		subi.b	#$40,d0
0001E29C 4EB9 0000 29F6             		jsr	(CalcSine).l
0001E2A2 C3FC 0680                  		muls.w	#$680,d1
0001E2A6 E081                       		asr.l	#8,d1
0001E2A8 3141 0010                  		move.w	d1,$10(a0)
0001E2AC C1FC 0680                  		muls.w	#$680,d0
0001E2B0 E080                       		asr.l	#8,d0
0001E2B2 3140 0012                  		move.w	d0,$12(a0)
0001E2B6 08E8 0001 0022             		bset	#1,$22(a0)
0001E2BC 303C 00A0                  		move.w	#$A0,d0
0001E2C0 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play jumping sound
0001E2C6                            
0001E2C6                            Obj09_NoJump:
0001E2C6 4E75                       		rts	
0001E2C8                            ; End of function Obj09_Jump
0001E2C8                            
0001E2C8                            
0001E2C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2C8                            
0001E2C8                            
0001E2C8                            nullsub_2:				; XREF: Obj09_InAir
0001E2C8 4E75                       		rts	
0001E2CA                            ; End of function nullsub_2
0001E2CA                            
0001E2CA                            ; ===========================================================================
0001E2CA                            ; ---------------------------------------------------------------------------
0001E2CA                            ; unused subroutine to limit Sonic's upward vertical speed
0001E2CA                            ; ---------------------------------------------------------------------------
0001E2CA 323C FC00                  		move.w	#-$400,d1
0001E2CE B268 0012                  		cmp.w	$12(a0),d1
0001E2D2 6F00                       		ble.s	locret_1BBB4
0001E2D4 1038 F602                  		move.b	($FFFFF602).w,d0
0001E2D8 0200 0070                  		andi.b	#$70,d0
0001E2DC 6600                       		bne.s	locret_1BBB4
0001E2DE 3141 0012                  		move.w	d1,$12(a0)
0001E2E2                            
0001E2E2                            locret_1BBB4:
0001E2E2 4E75                       		rts	
0001E2E4                            ; ---------------------------------------------------------------------------
0001E2E4                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001E2E4                            ; ---------------------------------------------------------------------------
0001E2E4                            
0001E2E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2E4                            
0001E2E4                            
0001E2E4                            SS_FixCamera:				; XREF: Obj09
0001E2E4 3428 000C                  		move.w	$C(a0),d2
0001E2E8 3628 0008                  		move.w	8(a0),d3
0001E2EC 3038 F700                  		move.w	($FFFFF700).w,d0
0001E2F0 0443 00A0                  		subi.w	#$A0,d3
0001E2F4 6500                       		bcs.s	loc_1BBCE
0001E2F6 9043                       		sub.w	d3,d0
0001E2F8 9178 F700                  		sub.w	d0,($FFFFF700).w
0001E2FC                            
0001E2FC                            loc_1BBCE:
0001E2FC 3038 F704                  		move.w	($FFFFF704).w,d0
0001E300 0442 0070                  		subi.w	#$70,d2
0001E304 6500                       		bcs.s	locret_1BBDE
0001E306 9042                       		sub.w	d2,d0
0001E308 9178 F704                  		sub.w	d0,($FFFFF704).w
0001E30C                            
0001E30C                            locret_1BBDE:
0001E30C 4E75                       		rts	
0001E30E                            ; End of function SS_FixCamera
0001E30E                            
0001E30E                            ; ===========================================================================
0001E30E                            
0001E30E                            Obj09_ExitStage:			; XREF: Obj09_Index
0001E30E 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001E314 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001E31A 6600                       		bne.s	loc_1BBF4
0001E31C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001E322                            
0001E322                            loc_1BBF4:
0001E322 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001E328 6D00                       		blt.s	loc_1BC12
0001E32A 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001E330 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001E336 5428 0024                  		addq.b	#2,$24(a0)
0001E33A 317C 003C 0038             		move.w	#$3C,$38(a0)
0001E340                            
0001E340                            loc_1BC12:
0001E340 3038 F780                  		move.w	($FFFFF780).w,d0
0001E344 D078 F782                  		add.w	($FFFFF782).w,d0
0001E348 31C0 F780                  		move.w	d0,($FFFFF780).w
0001E34C 4EB9 0001 561E             		jsr	Sonic_Animate
0001E352 4EB9 0001 5898             		jsr	LoadSonicDynPLC
0001E358 6100 FF8A                  		bsr.w	SS_FixCamera
0001E35C 4EF9 0000 EB2E             		jmp	DisplaySprite
0001E362                            ; ===========================================================================
0001E362                            
0001E362                            Obj09_Exit2:				; XREF: Obj09_Index
0001E362 5368 0038                  		subq.w	#1,$38(a0)
0001E366 6600                       		bne.s	loc_1BC40
0001E368 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001E36E                            
0001E36E                            loc_1BC40:
0001E36E 4EB9 0001 561E             		jsr	Sonic_Animate
0001E374 4EB9 0001 5898             		jsr	LoadSonicDynPLC
0001E37A 6100 FF68                  		bsr.w	SS_FixCamera
0001E37E 4EF9 0000 EB2E             		jmp	DisplaySprite
0001E384                            
0001E384                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E384                            
0001E384                            
0001E384                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001E384 2428 000C                  		move.l	$C(a0),d2
0001E388 2628 0008                  		move.l	8(a0),d3
0001E38C 1038 F780                  		move.b	($FFFFF780).w,d0
0001E390 0200 00FC                  		andi.b	#$FC,d0
0001E394 4EB9 0000 29F6             		jsr	(CalcSine).l
0001E39A 3828 0010                  		move.w	$10(a0),d4
0001E39E 48C4                       		ext.l	d4
0001E3A0 E184                       		asl.l	#8,d4
0001E3A2 C1FC 002A                  		muls.w	#$2A,d0
0001E3A6 D084                       		add.l	d4,d0
0001E3A8 3828 0012                  		move.w	$12(a0),d4
0001E3AC 48C4                       		ext.l	d4
0001E3AE E184                       		asl.l	#8,d4
0001E3B0 C3FC 002A                  		muls.w	#$2A,d1
0001E3B4 D284                       		add.l	d4,d1
0001E3B6 D680                       		add.l	d0,d3
0001E3B8 6100 0000                  		bsr.w	sub_1BCE8
0001E3BC 6700                       		beq.s	loc_1BCB0
0001E3BE 9680                       		sub.l	d0,d3
0001E3C0 7000                       		moveq	#0,d0
0001E3C2 3140 0010                  		move.w	d0,$10(a0)
0001E3C6 08A8 0001 0022             		bclr	#1,$22(a0)
0001E3CC D481                       		add.l	d1,d2
0001E3CE 6100 0000                  		bsr.w	sub_1BCE8
0001E3D2 6700                       		beq.s	loc_1BCC6
0001E3D4 9481                       		sub.l	d1,d2
0001E3D6 7200                       		moveq	#0,d1
0001E3D8 3141 0012                  		move.w	d1,$12(a0)
0001E3DC 4E75                       		rts	
0001E3DE                            ; ===========================================================================
0001E3DE                            
0001E3DE                            loc_1BCB0:
0001E3DE D481                       		add.l	d1,d2
0001E3E0 6100 0000                  		bsr.w	sub_1BCE8
0001E3E4 6700                       		beq.s	loc_1BCD4
0001E3E6 9481                       		sub.l	d1,d2
0001E3E8 7200                       		moveq	#0,d1
0001E3EA 3141 0012                  		move.w	d1,$12(a0)
0001E3EE 08A8 0001 0022             		bclr	#1,$22(a0)
0001E3F4                            
0001E3F4                            loc_1BCC6:
0001E3F4 E080                       		asr.l	#8,d0
0001E3F6 E081                       		asr.l	#8,d1
0001E3F8 3140 0010                  		move.w	d0,$10(a0)
0001E3FC 3141 0012                  		move.w	d1,$12(a0)
0001E400 4E75                       		rts	
0001E402                            ; ===========================================================================
0001E402                            
0001E402                            loc_1BCD4:
0001E402 E080                       		asr.l	#8,d0
0001E404 E081                       		asr.l	#8,d1
0001E406 3140 0010                  		move.w	d0,$10(a0)
0001E40A 3141 0012                  		move.w	d1,$12(a0)
0001E40E 08E8 0001 0022             		bset	#1,$22(a0)
0001E414 4E75                       		rts	
0001E416                            ; End of function Obj09_Fall
0001E416                            
0001E416                            
0001E416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E416                            
0001E416                            
0001E416                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001E416 43F9 00FF 0000             		lea	($FF0000).l,a1
0001E41C 7800                       		moveq	#0,d4
0001E41E 4842                       		swap	d2
0001E420 3802                       		move.w	d2,d4
0001E422 4842                       		swap	d2
0001E424 0644 0044                  		addi.w	#$44,d4
0001E428 88FC 0018                  		divu.w	#$18,d4
0001E42C C8FC 0080                  		mulu.w	#$80,d4
0001E430 D3C4                       		adda.l	d4,a1
0001E432 7800                       		moveq	#0,d4
0001E434 4843                       		swap	d3
0001E436 3803                       		move.w	d3,d4
0001E438 4843                       		swap	d3
0001E43A 0644 0014                  		addi.w	#$14,d4
0001E43E 88FC 0018                  		divu.w	#$18,d4
0001E442 D2C4                       		adda.w	d4,a1
0001E444 7A00                       		moveq	#0,d5
0001E446 1819                       		move.b	(a1)+,d4
0001E448 6100                       		bsr.s	sub_1BD30
0001E44A 1819                       		move.b	(a1)+,d4
0001E44C 6100                       		bsr.s	sub_1BD30
0001E44E D2FC 007E                  		adda.w	#$7E,a1
0001E452 1819                       		move.b	(a1)+,d4
0001E454 6100                       		bsr.s	sub_1BD30
0001E456 1819                       		move.b	(a1)+,d4
0001E458 6100                       		bsr.s	sub_1BD30
0001E45A 4A05                       		tst.b	d5
0001E45C 4E75                       		rts	
0001E45E                            ; End of function sub_1BCE8
0001E45E                            
0001E45E                            
0001E45E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E45E                            
0001E45E                            
0001E45E                            sub_1BD30:				; XREF: sub_1BCE8
0001E45E 6700                       		beq.s	locret_1BD44
0001E460 0C04 0028                  		cmpi.b	#$28,d4
0001E464 6700                       		beq.s	locret_1BD44
0001E466 0C04 003A                  		cmpi.b	#$3A,d4
0001E46A 6500                       		bcs.s	loc_1BD46
0001E46C 0C04 004B                  		cmpi.b	#$4B,d4
0001E470 6400                       		bcc.s	loc_1BD46
0001E472                            
0001E472                            locret_1BD44:
0001E472 4E75                       		rts	
0001E474                            ; ===========================================================================
0001E474                            
0001E474                            loc_1BD46:
0001E474 1144 0030                  		move.b	d4,$30(a0)
0001E478 2149 0032                  		move.l	a1,$32(a0)
0001E47C 7AFF                       		moveq	#-1,d5
0001E47E 4E75                       		rts	
0001E480                            ; End of function sub_1BD30
0001E480                            
0001E480                            
0001E480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E480                            
0001E480                            
0001E480                            Obj09_ChkItems:				; XREF: Obj09_Display
0001E480 43F9 00FF 0000             		lea	($FF0000).l,a1
0001E486 7800                       		moveq	#0,d4
0001E488 3828 000C                  		move.w	$C(a0),d4
0001E48C 0644 0050                  		addi.w	#$50,d4
0001E490 88FC 0018                  		divu.w	#$18,d4
0001E494 C8FC 0080                  		mulu.w	#$80,d4
0001E498 D3C4                       		adda.l	d4,a1
0001E49A 7800                       		moveq	#0,d4
0001E49C 3828 0008                  		move.w	8(a0),d4
0001E4A0 0644 0020                  		addi.w	#$20,d4
0001E4A4 88FC 0018                  		divu.w	#$18,d4
0001E4A8 D2C4                       		adda.w	d4,a1
0001E4AA 1811                       		move.b	(a1),d4
0001E4AC 6600                       		bne.s	Obj09_ChkCont
0001E4AE 4A28 003A                  		tst.b	$3A(a0)
0001E4B2 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001E4B6 7800                       		moveq	#0,d4
0001E4B8 4E75                       		rts	
0001E4BA                            ; ===========================================================================
0001E4BA                            
0001E4BA                            Obj09_ChkCont:
0001E4BA 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001E4BE 6600                       		bne.s	Obj09_Chk1Up
0001E4C0 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001E4C4 6600                       		bne.s	Obj09_GetCont
0001E4C6 14BC 0001                  		move.b	#1,(a2)
0001E4CA 2549 0004                  		move.l	a1,4(a2)
0001E4CE                            
0001E4CE                            Obj09_GetCont:
0001E4CE 4EB9 0000 B0E0             		jsr	CollectRing
0001E4D4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001E4DA 6500                       		bcs.s	Obj09_NoCont
0001E4DC 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001E4E2 6600                       		bne.s	Obj09_NoCont
0001E4E4 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001E4EA 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E4F0 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001E4F4 303C 00BF                  		move.w	#$BF,d0
0001E4F8 4EB9 0000 121A             		jsr	(PlaySound).l	; play extra continue sound
0001E4FE                            
0001E4FE                            Obj09_NoCont:
0001E4FE 7800                       		moveq	#0,d4
0001E500 4E75                       		rts	
0001E502                            ; ===========================================================================
0001E502                            
0001E502                            Obj09_Chk1Up:
0001E502 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001E506 6600                       		bne.s	Obj09_ChkEmer
0001E508 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001E50C 6600                       		bne.s	Obj09_Get1Up
0001E50E 14BC 0003                  		move.b	#3,(a2)
0001E512 2549 0004                  		move.l	a1,4(a2)
0001E516                            
0001E516                            Obj09_Get1Up:
0001E516 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001E51A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001E51E 303C 0088                  		move.w	#$88,d0
0001E522 4EB9 0000 121A             		jsr	(PlaySound).l	; play extra life music
0001E528 7800                       		moveq	#0,d4
0001E52A 4E75                       		rts	
0001E52C                            ; ===========================================================================
0001E52C                            
0001E52C                            Obj09_ChkEmer:
0001E52C 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001E530 6500                       		bcs.s	Obj09_ChkGhost
0001E532 0C04 0040                  		cmpi.b	#$40,d4
0001E536 6200                       		bhi.s	Obj09_ChkGhost
0001E538 6100 F6AE                  		bsr.w	SS_RemoveCollectedItem
0001E53C 6600                       		bne.s	Obj09_GetEmer
0001E53E 14BC 0005                  		move.b	#5,(a2)
0001E542 2549 0004                  		move.l	a1,4(a2)
0001E546                            
0001E546                            Obj09_GetEmer:
0001E546 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001E54C 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001E54E 0404 003B                  		subi.b	#$3B,d4
0001E552 7000                       		moveq	#0,d0
0001E554 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001E558 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001E55C 1584 0000                  		move.b	d4,(a2,d0.w)
0001E560 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001E564 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001E56A 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E570                            
0001E570                            Obj09_NoEmer:
0001E570 303C 0093                  		move.w	#$93,d0
0001E574 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play emerald music
0001E57A 7800                       		moveq	#0,d4
0001E57C 4E75                       		rts	
0001E57E                            ; ===========================================================================
0001E57E                            
0001E57E                            Obj09_ChkGhost:
0001E57E 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001E582 6600                       		bne.s	Obj09_ChkGhostTag
0001E584 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001E58A                            
0001E58A                            Obj09_ChkGhostTag:
0001E58A 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001E58E 6600                       		bne.s	Obj09_NoGhost
0001E590 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001E596 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001E598 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001E59E                            
0001E59E                            Obj09_NoGhost:
0001E59E 78FF                       		moveq	#-1,d4
0001E5A0 4E75                       		rts	
0001E5A2                            ; ===========================================================================
0001E5A2                            
0001E5A2                            Obj09_MakeGhostSolid:
0001E5A2 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001E5A8 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001E5AA 43F9 00FF 1020             		lea	($FF1020).l,a1
0001E5B0 723F                       		moveq	#$3F,d1
0001E5B2                            
0001E5B2                            Obj09_GhostLoop2:
0001E5B2 743F                       		moveq	#$3F,d2
0001E5B4                            
0001E5B4                            Obj09_GhostLoop:
0001E5B4 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001E5B8 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001E5BA 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001E5BE                            
0001E5BE                            Obj09_NoReplace:
0001E5BE 5249                       		addq.w	#1,a1
0001E5C0 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001E5C4 43E9 0040                  		lea	$40(a1),a1
0001E5C8 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001E5CC                            
0001E5CC                            Obj09_GhostNotSolid:
0001E5CC 4228 003A                  		clr.b	$3A(a0)
0001E5D0 7800                       		moveq	#0,d4
0001E5D2 4E75                       		rts	
0001E5D4                            ; End of function Obj09_ChkItems
0001E5D4                            
0001E5D4                            
0001E5D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E5D4                            
0001E5D4                            
0001E5D4                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001E5D4 1028 0030                  		move.b	$30(a0),d0
0001E5D8 6600                       		bne.s	Obj09_ChkBumper
0001E5DA 5328 0036                  		subq.b	#1,$36(a0)
0001E5DE 6A00                       		bpl.s	loc_1BEA0
0001E5E0 117C 0000 0036             		move.b	#0,$36(a0)
0001E5E6                            
0001E5E6                            loc_1BEA0:
0001E5E6 5328 0037                  		subq.b	#1,$37(a0)
0001E5EA 6A00                       		bpl.s	locret_1BEAC
0001E5EC 117C 0000 0037             		move.b	#0,$37(a0)
0001E5F2                            
0001E5F2                            locret_1BEAC:
0001E5F2 4E75                       		rts	
0001E5F4                            ; ===========================================================================
0001E5F4                            
0001E5F4                            Obj09_ChkBumper:
0001E5F4 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001E5F8 6600                       		bne.s	Obj09_GOAL	
0001E5FA 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
0001E600 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E606 2228 0032                  		move.l	$32(a0),d1
0001E60A 0481 00FF 0001             		subi.l	#$FF0001,d1
0001E610 3401                       		move.w	d1,d2
0001E612 0241 007F                  		andi.w	#$7F,d1
0001E616 C2FC 0018                  		mulu.w	#$18,d1
0001E61A 0441 0014                  		subi.w	#$14,d1
0001E61E EE4A                       		lsr.w	#7,d2
0001E620 0242 007F                  		andi.w	#$7F,d2
0001E624 C4FC 0018                  		mulu.w	#$18,d2
0001E628 0442 0044                  		subi.w	#$44,d2
0001E62C 9268 0008                  		sub.w	8(a0),d1
0001E630 9468 000C                  		sub.w	$C(a0),d2
0001E634 4EB9 0000 2CBE             		jsr	(CalcAngle).l
0001E63A 4EB9 0000 29F6             		jsr	(CalcSine).l
0001E640 C3FC F900                  		muls.w	#-$700,d1
0001E644 E081                       		asr.l	#8,d1
0001E646 3141 0010                  		move.w	d1,$10(a0)
0001E64A C1FC F900                  		muls.w	#-$700,d0
0001E64E E080                       		asr.l	#8,d0
0001E650 3140 0012                  		move.w	d0,$12(a0)
0001E654 08E8 0001 0022             		bset	#1,$22(a0)
0001E65A 6100 F58C                  		bsr.w	SS_RemoveCollectedItem
0001E65E 6600                       		bne.s	Obj09_BumpSnd
0001E660 14BC 0002                  		move.b	#2,(a2)
0001E664 2028 0032                  		move.l	$32(a0),d0
0001E668 5380                       		subq.l	#1,d0
0001E66A 2540 0004                  		move.l	d0,4(a2)
0001E66E                            
0001E66E                            Obj09_BumpSnd:
0001E66E 303C 00B4                  		move.w	#$B4,d0
0001E672 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play bumper sound
0001E678                            ; ===========================================================================
0001E678                            
0001E678                            Obj09_GOAL:
0001E678 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001E67C 6600                       		bne.s	Obj09_UPblock
0001E67E 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001E682 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001E688 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E68E 303C 00A8                  		move.w	#$A8,d0		; change item
0001E692 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001E698 4E75                       		rts	
0001E69A                            ; ===========================================================================
0001E69A                            
0001E69A                            Obj09_UPblock:
0001E69A 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001E69E 6600                       		bne.s	Obj09_DOWNblock
0001E6A0 4A28 0036                  		tst.b	$36(a0)
0001E6A4 6600 0000                  		bne.w	Obj09_NoGlass
0001E6A8 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E6AE 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E6B4 6700                       		beq.s	Obj09_UPsnd
0001E6B6 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001E6BA 2268 0032                  		movea.l	$32(a0),a1
0001E6BE 5389                       		subq.l	#1,a1
0001E6C0 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001E6C4                            
0001E6C4                            Obj09_UPsnd:
0001E6C4 303C 00A9                  		move.w	#$A9,d0
0001E6C8 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E6CE                            ; ===========================================================================
0001E6CE                            
0001E6CE                            Obj09_DOWNblock:
0001E6CE 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001E6D2 6600                       		bne.s	Obj09_Rblock
0001E6D4 4A28 0036                  		tst.b	$36(a0)
0001E6D8 6600 0000                  		bne.w	Obj09_NoGlass
0001E6DC 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E6E2 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E6E8 6600                       		bne.s	Obj09_DOWNsnd
0001E6EA E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001E6EE 2268 0032                  		movea.l	$32(a0),a1
0001E6F2 5389                       		subq.l	#1,a1
0001E6F4 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001E6F8                            
0001E6F8                            Obj09_DOWNsnd:
0001E6F8 303C 00A9                  		move.w	#$A9,d0
0001E6FC 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E702                            ; ===========================================================================
0001E702                            
0001E702                            Obj09_Rblock:
0001E702 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001E706 6600                       		bne.s	Obj09_ChkGlass
0001E708 4A28 0037                  		tst.b	$37(a0)
0001E70C 6600 0000                  		bne.w	Obj09_NoGlass
0001E710 117C 001E 0037             		move.b	#$1E,$37(a0)
0001E716 6100 F4D0                  		bsr.w	SS_RemoveCollectedItem
0001E71A 6600                       		bne.s	Obj09_RevStage
0001E71C 14BC 0004                  		move.b	#4,(a2)
0001E720 2028 0032                  		move.l	$32(a0),d0
0001E724 5380                       		subq.l	#1,d0
0001E726 2540 0004                  		move.l	d0,4(a2)
0001E72A                            
0001E72A                            Obj09_RevStage:
0001E72A 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001E72E 303C 00A9                  		move.w	#$A9,d0
0001E732 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play sound
0001E738                            ; ===========================================================================
0001E738                            
0001E738                            Obj09_ChkGlass:
0001E738 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001E73C 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001E73E 0C00 002E                  		cmpi.b	#$2E,d0
0001E742 6700                       		beq.s	Obj09_Glass
0001E744 0C00 002F                  		cmpi.b	#$2F,d0
0001E748 6700                       		beq.s	Obj09_Glass
0001E74A 0C00 0030                  		cmpi.b	#$30,d0
0001E74E 6600 0000                  		bne.w	Obj09_NoGlass	; if not, branch
0001E752                            
0001E752                            Obj09_Glass:
0001E752 0C38 0007 F5CE             		cmpi.b	#face_happy,(SonimeSST+sonime_face).w
0001E758 6700                       		beq.s	@happy
0001E75A 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
0001E760 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E766 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
0001E7CC                            
0001E7CC                            	@happy:
0001E7CC 6100 F41A                  		bsr.w	SS_RemoveCollectedItem
0001E7D0 6600                       		bne.s	Obj09_GlassSnd
0001E7D2 14BC 0006                  		move.b	#6,(a2)
0001E7D6 2268 0032                  		movea.l	$32(a0),a1
0001E7DA 5389                       		subq.l	#1,a1
0001E7DC 2549 0004                  		move.l	a1,4(a2)
0001E7E0 1011                       		move.b	(a1),d0
0001E7E2 5200                       		addq.b	#1,d0		; change glass type when touched
0001E7E4 0C00 0030                  		cmpi.b	#$30,d0
0001E7E8 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001E7EA 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001E7EC                            
0001E7EC                            Obj09_GlassUpdate:
0001E7EC 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001E7F0                            
0001E7F0                            Obj09_GlassSnd:
0001E7F0 303C 00BA                  		move.w	#$BA,d0
0001E7F4 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play glass block sound
0001E7FA                            ; ===========================================================================
0001E7FA                            
0001E7FA                            Obj09_NoGlass:
0001E7FA 4E75                       		rts	
0001E7FC                            ; End of function Obj09_ChkItems2
0001E7FC                            
0001E7FC                            ; ===========================================================================
0001E7FC                            ; ---------------------------------------------------------------------------
0001E7FC                            ; Object 10 - blank
0001E7FC                            ; ---------------------------------------------------------------------------
0001E7FC                            
0001E7FC                            Obj10:					; XREF: Obj_Index
0001E7FC 4E75                       		rts	
0001E7FE                            ; ---------------------------------------------------------------------------
0001E7FE                            ; Subroutine to	animate	level graphics
0001E7FE                            ; ---------------------------------------------------------------------------
0001E7FE                            
0001E7FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E7FE                            
0001E7FE                            
0001E7FE                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001E7FE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E802 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001E804 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E80A 6100 0000                  		bsr.w	AniArt_GiantRing
0001E80E 7000                       		moveq	#0,d0
0001E810 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E814 D040                       		add.w	d0,d0
0001E816 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001E81A 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001E81E                            ; ===========================================================================
0001E81E                            
0001E81E                            AniArt_Pause:
0001E81E 4E75                       		rts	
0001E820                            ; End of function AniArt_Load
0001E820                            
0001E820                            ; ===========================================================================
0001E820 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001E824 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001E828 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001E82C 0000                       		dc.w AniArt_Ending-AniArt_Index
0001E82E                            ; ===========================================================================
0001E82E                            ; ---------------------------------------------------------------------------
0001E82E                            ; Animated pattern routine - Green Hill
0001E82E                            ; ---------------------------------------------------------------------------
0001E82E                            
0001E82E                            AniArt_GHZ:				; XREF: AniArt_Index
0001E82E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E832 6A00                       		bpl.s	loc_1C08A
0001E834 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001E83A 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001E840 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E844 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E848 0240 0001                  		andi.w	#1,d0
0001E84C 6700                       		beq.s	loc_1C078
0001E84E 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001E852                            
0001E852                            loc_1C078:
0001E852 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001E85C 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001E860 6000 0000                  		bra.w	LoadTiles
0001E864                            ; ===========================================================================
0001E864                            
0001E864                            loc_1C08A:
0001E864 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E868 6A00                       		bpl.s	loc_1C0C0
0001E86A 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001E870 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E876 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E87A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E87E 0240 0001                  		andi.w	#1,d0
0001E882 6700                       		beq.s	loc_1C0AE
0001E884 43E9 0200                  		lea	$200(a1),a1
0001E888                            
0001E888                            loc_1C0AE:
0001E888 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E892 323C 000F                  		move.w	#$F,d1
0001E896 6000 0000                  		bra.w	LoadTiles
0001E89A                            ; ===========================================================================
0001E89A                            
0001E89A                            loc_1C0C0:
0001E89A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E89E 6A00                       		bpl.s	locret_1C10C
0001E8A0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E8A6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E8AA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E8AE 0240 0003                  		andi.w	#3,d0
0001E8B2 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001E8B6 0800 0000                  		btst	#0,d0
0001E8BA 6600                       		bne.s	loc_1C0E8
0001E8BC 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001E8C2                            
0001E8C2                            loc_1C0E8:
0001E8C2 EF48                       		lsl.w	#7,d0
0001E8C4 3200                       		move.w	d0,d1
0001E8C6 D040                       		add.w	d0,d0
0001E8C8 D041                       		add.w	d1,d0
0001E8CA 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E8D4 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E8DA 43F1 0000                  		lea	(a1,d0.w),a1
0001E8DE 323C 000B                  		move.w	#$B,d1
0001E8E2 6100 0000                  		bsr.w	LoadTiles
0001E8E6                            
0001E8E6                            locret_1C10C:
0001E8E6 4E75                       		rts	
0001E8E8                            ; ===========================================================================
0001E8E8 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001E8EC                            ; ===========================================================================
0001E8EC                            ; ---------------------------------------------------------------------------
0001E8EC                            ; Animated pattern routine - Marble
0001E8EC                            ; ---------------------------------------------------------------------------
0001E8EC                            
0001E8EC                            AniArt_MZ:				; XREF: AniArt_Index
0001E8EC 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E8F0 6A00                       		bpl.s	loc_1C150
0001E8F2 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001E8F8 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001E8FE 7000                       		moveq	#0,d0
0001E900 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E904 5200                       		addq.b	#1,d0
0001E906 0C00 0003                  		cmpi.b	#3,d0
0001E90A 6600                       		bne.s	loc_1C134
0001E90C 7000                       		moveq	#0,d0
0001E90E                            
0001E90E                            loc_1C134:
0001E90E 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001E912 C0FC 0100                  		mulu.w	#$100,d0
0001E916 D2C0                       		adda.w	d0,a1
0001E918 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001E922 323C 0007                  		move.w	#7,d1
0001E926 6100 0000                  		bsr.w	LoadTiles
0001E92A                            
0001E92A                            loc_1C150:
0001E92A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E92E 6A00                       		bpl.s	loc_1C1AE
0001E930 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001E936 7000                       		moveq	#0,d0
0001E938 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E93C 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001E942 EE58                       		ror.w	#7,d0
0001E944 D8C0                       		adda.w	d0,a4
0001E946 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001E950 7600                       		moveq	#0,d3
0001E952 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001E956 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E95A 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001E95E 343C 0003                  		move.w	#3,d2
0001E962                            
0001E962                            loc_1C188:
0001E962 3003                       		move.w	d3,d0
0001E964 D040                       		add.w	d0,d0
0001E966 0240 001E                  		andi.w	#$1E,d0
0001E96A 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001E970 3033 0000                  		move.w	(a3,d0.w),d0
0001E974 47F3 0000                  		lea	(a3,d0.w),a3
0001E978 224C                       		movea.l	a4,a1
0001E97A 323C 001F                  		move.w	#$1F,d1
0001E97E 4E93                       		jsr	(a3)
0001E980 5843                       		addq.w	#4,d3
0001E982 51CA FFDE                  		dbf	d2,loc_1C188
0001E986 4E75                       		rts	
0001E988                            ; ===========================================================================
0001E988                            
0001E988                            loc_1C1AE:
0001E988 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E98C 6A00 0000                  		bpl.w	locret_1C1EA
0001E990 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E996 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E99C 7000                       		moveq	#0,d0
0001E99E 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E9A2 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E9A6 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E9AC C0FC 00C0                  		mulu.w	#$C0,d0
0001E9B0 D2C0                       		adda.w	d0,a1
0001E9B2 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E9BC 323C 0005                  		move.w	#5,d1
0001E9C0 6000 0000                  		bra.w	LoadTiles
0001E9C4                            ; ===========================================================================
0001E9C4                            
0001E9C4                            locret_1C1EA:
0001E9C4 4E75                       		rts	
0001E9C6                            ; ===========================================================================
0001E9C6                            ; ---------------------------------------------------------------------------
0001E9C6                            ; Animated pattern routine - Scrap Brain
0001E9C6                            ; ---------------------------------------------------------------------------
0001E9C6                            
0001E9C6                            AniArt_SBZ:				; XREF: AniArt_Index
0001E9C6 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E9CA 6700                       		beq.s	loc_1C1F8
0001E9CC 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E9D0 6000                       		bra.s	loc_1C250
0001E9D2                            ; ===========================================================================
0001E9D2                            
0001E9D2                            loc_1C1F8:
0001E9D2 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E9D6 6A00                       		bpl.s	loc_1C250
0001E9D8 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E9DE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E9E4 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E9EE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E9F2 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E9F6 0240 0007                  		andi.w	#7,d0
0001E9FA 6700                       		beq.s	loc_1C234
0001E9FC 5340                       		subq.w	#1,d0
0001E9FE C0FC 0180                  		mulu.w	#$180,d0
0001EA02 43F1 0000                  		lea	(a1,d0.w),a1
0001EA06 323C 000B                  		move.w	#$B,d1
0001EA0A 6000 0000                  		bra.w	LoadTiles
0001EA0E                            ; ===========================================================================
0001EA0E                            
0001EA0E                            loc_1C234:
0001EA0E 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001EA14                            
0001EA14                            loc_1C23A:
0001EA14 323C 0005                  		move.w	#5,d1
0001EA18 6100 0000                  		bsr.w	LoadTiles
0001EA1C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001EA22 323C 0005                  		move.w	#5,d1
0001EA26 6000 0000                  		bra.w	LoadTiles
0001EA2A                            ; ===========================================================================
0001EA2A                            
0001EA2A                            loc_1C250:
0001EA2A 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001EA2E 6700                       		beq.s	loc_1C25C
0001EA30 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001EA34 6000                       		bra.s	locret_1C2A0
0001EA36                            ; ===========================================================================
0001EA36                            
0001EA36                            loc_1C25C:
0001EA36 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001EA3A 6A00                       		bpl.s	locret_1C2A0
0001EA3C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001EA42 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001EA48 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001EA52 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001EA56 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001EA5A 0240 0007                  		andi.w	#7,d0
0001EA5E 6700                       		beq.s	loc_1C298
0001EA60 5340                       		subq.w	#1,d0
0001EA62 C0FC 0180                  		mulu.w	#$180,d0
0001EA66 43F1 0000                  		lea	(a1,d0.w),a1
0001EA6A 323C 000B                  		move.w	#$B,d1
0001EA6E 6000 0000                  		bra.w	LoadTiles
0001EA72                            ; ===========================================================================
0001EA72                            
0001EA72                            loc_1C298:
0001EA72 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001EA78 609A                       		bra.s	loc_1C23A
0001EA7A                            ; ===========================================================================
0001EA7A                            
0001EA7A                            locret_1C2A0:
0001EA7A 4E75                       		rts	
0001EA7C                            ; ===========================================================================
0001EA7C                            ; ---------------------------------------------------------------------------
0001EA7C                            ; Animated pattern routine - ending sequence
0001EA7C                            ; ---------------------------------------------------------------------------
0001EA7C                            
0001EA7C                            AniArt_Ending:				; XREF: AniArt_Index
0001EA7C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001EA80 6A00                       		bpl.s	loc_1C2F4
0001EA82 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001EA88 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001EA8E 45F8 9400                  		lea	($FFFF9400).w,a2
0001EA92 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001EA96 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001EA9A 0240 0001                  		andi.w	#1,d0
0001EA9E 6700                       		beq.s	loc_1C2CE
0001EAA0 43E9 0200                  		lea	$200(a1),a1
0001EAA4 45EA 0200                  		lea	$200(a2),a2
0001EAA8                            
0001EAA8                            loc_1C2CE:
0001EAA8 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001EAB2 323C 000F                  		move.w	#$F,d1
0001EAB6 6100 0000                  		bsr.w	LoadTiles
0001EABA 224A                       		movea.l	a2,a1
0001EABC 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001EAC6 323C 000F                  		move.w	#$F,d1
0001EACA 6000 0000                  		bra.w	LoadTiles
0001EACE                            ; ===========================================================================
0001EACE                            
0001EACE                            loc_1C2F4:
0001EACE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001EAD2 6A00                       		bpl.s	loc_1C33C
0001EAD4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001EADA 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001EADE 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001EAE2 0240 0007                  		andi.w	#7,d0
0001EAE6 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001EAEA EF48                       		lsl.w	#7,d0
0001EAEC 3200                       		move.w	d0,d1
0001EAEE D040                       		add.w	d0,d0
0001EAF0 D041                       		add.w	d1,d0
0001EAF2 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001EAFC 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001EB02 43F1 0000                  		lea	(a1,d0.w),a1
0001EB06 323C 000B                  		move.w	#$B,d1
0001EB0A 6000 0000                  		bra.w	LoadTiles
0001EB0E                            ; ===========================================================================
0001EB0E 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001EB16                            ; ===========================================================================
0001EB16                            
0001EB16                            loc_1C33C:
0001EB16 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001EB1A 6A00                       		bpl.s	loc_1C37A
0001EB1C 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001EB22 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001EB26 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001EB2A 0240 0003                  		andi.w	#3,d0
0001EB2E 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001EB32 E148                       		lsl.w	#8,d0
0001EB34 D040                       		add.w	d0,d0
0001EB36 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001EB40 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001EB44 43F1 0000                  		lea	(a1,d0.w),a1
0001EB48 323C 000F                  		move.w	#$F,d1
0001EB4C 6000 0000                  		bra.w	LoadTiles
0001EB50                            ; ===========================================================================
0001EB50 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001EB54                            ; ===========================================================================
0001EB54                            
0001EB54                            loc_1C37A:
0001EB54 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001EB58 6A00                       		bpl.s	locret_1C3B4
0001EB5A 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001EB60 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001EB64 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001EB68 0240 0003                  		andi.w	#3,d0
0001EB6C 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001EB70 E148                       		lsl.w	#8,d0
0001EB72 D040                       		add.w	d0,d0
0001EB74 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001EB7E 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001EB82 43F1 0000                  		lea	(a1,d0.w),a1
0001EB86 323C 000F                  		move.w	#$F,d1
0001EB8A 6000 0000                  		bra.w	LoadTiles
0001EB8E                            ; ===========================================================================
0001EB8E                            
0001EB8E                            locret_1C3B4:
0001EB8E 4E75                       		rts	
0001EB90                            ; ===========================================================================
0001EB90                            
0001EB90                            AniArt_none:				; XREF: AniArt_Index
0001EB90 4E75                       		rts	
0001EB92                            
0001EB92                            ; ---------------------------------------------------------------------------
0001EB92                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001EB92                            ; ---------------------------------------------------------------------------
0001EB92                            
0001EB92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB92                            
0001EB92                            
0001EB92                            LoadTiles:
0001EB92 2C99                       		move.l	(a1)+,(a6)
0001EB94 2C99                       		move.l	(a1)+,(a6)
0001EB96 2C99                       		move.l	(a1)+,(a6)
0001EB98 2C99                       		move.l	(a1)+,(a6)
0001EB9A 2C99                       		move.l	(a1)+,(a6)
0001EB9C 2C99                       		move.l	(a1)+,(a6)
0001EB9E 2C99                       		move.l	(a1)+,(a6)
0001EBA0 2C99                       		move.l	(a1)+,(a6)
0001EBA2 51C9 FFEE                  		dbf	d1,LoadTiles
0001EBA6 4E75                       		rts	
0001EBA8                            ; End of function LoadTiles
0001EBA8                            
0001EBA8                            ; ===========================================================================
0001EBA8                            ; ---------------------------------------------------------------------------
0001EBA8                            ; Animated pattern routine - more Marble Zone
0001EBA8                            ; ---------------------------------------------------------------------------
0001EBA8 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001EBAC 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001EBB0 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001EBB4 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001EBB8 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001EBBC 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001EBC0 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001EBC4 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001EBC8                            ; ===========================================================================
0001EBC8                            
0001EBC8                            loc_1C3EE:				; XREF: AniArt_MZextra
0001EBC8 2C91                       		move.l	(a1),(a6)
0001EBCA 43E9 0010                  		lea	$10(a1),a1
0001EBCE 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001EBD2 4E75                       		rts	
0001EBD4                            ; ===========================================================================
0001EBD4                            
0001EBD4                            loc_1C3FA:				; XREF: AniArt_MZextra
0001EBD4 2029 0002                  		move.l	2(a1),d0
0001EBD8 1029 0001                  		move.b	1(a1),d0
0001EBDC E098                       		ror.l	#8,d0
0001EBDE 2C80                       		move.l	d0,(a6)
0001EBE0 43E9 0010                  		lea	$10(a1),a1
0001EBE4 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001EBE8 4E75                       		rts	
0001EBEA                            ; ===========================================================================
0001EBEA                            
0001EBEA                            loc_1C410:				; XREF: AniArt_MZextra
0001EBEA 2CA9 0002                  		move.l	2(a1),(a6)
0001EBEE 43E9 0010                  		lea	$10(a1),a1
0001EBF2 51C9 FFF6                  		dbf	d1,loc_1C410
0001EBF6 4E75                       		rts	
0001EBF8                            ; ===========================================================================
0001EBF8                            
0001EBF8                            loc_1C41E:				; XREF: AniArt_MZextra
0001EBF8 2029 0004                  		move.l	4(a1),d0
0001EBFC 1029 0003                  		move.b	3(a1),d0
0001EC00 E098                       		ror.l	#8,d0
0001EC02 2C80                       		move.l	d0,(a6)
0001EC04 43E9 0010                  		lea	$10(a1),a1
0001EC08 51C9 FFEE                  		dbf	d1,loc_1C41E
0001EC0C 4E75                       		rts	
0001EC0E                            ; ===========================================================================
0001EC0E                            
0001EC0E                            loc_1C434:				; XREF: AniArt_MZextra
0001EC0E 2CA9 0004                  		move.l	4(a1),(a6)
0001EC12 43E9 0010                  		lea	$10(a1),a1
0001EC16 51C9 FFF6                  		dbf	d1,loc_1C434
0001EC1A 4E75                       		rts	
0001EC1C                            ; ===========================================================================
0001EC1C                            
0001EC1C                            loc_1C442:				; XREF: AniArt_MZextra
0001EC1C 2029 0006                  		move.l	6(a1),d0
0001EC20 1029 0005                  		move.b	5(a1),d0
0001EC24 E098                       		ror.l	#8,d0
0001EC26 2C80                       		move.l	d0,(a6)
0001EC28 43E9 0010                  		lea	$10(a1),a1
0001EC2C 51C9 FFEE                  		dbf	d1,loc_1C442
0001EC30 4E75                       		rts	
0001EC32                            ; ===========================================================================
0001EC32                            
0001EC32                            loc_1C458:				; XREF: AniArt_MZextra
0001EC32 2CA9 0006                  		move.l	6(a1),(a6)
0001EC36 43E9 0010                  		lea	$10(a1),a1
0001EC3A 51C9 FFF6                  		dbf	d1,loc_1C458
0001EC3E 4E75                       		rts	
0001EC40                            ; ===========================================================================
0001EC40                            
0001EC40                            loc_1C466:				; XREF: AniArt_MZextra
0001EC40 2029 0008                  		move.l	8(a1),d0
0001EC44 1029 0007                  		move.b	7(a1),d0
0001EC48 E098                       		ror.l	#8,d0
0001EC4A 2C80                       		move.l	d0,(a6)
0001EC4C 43E9 0010                  		lea	$10(a1),a1
0001EC50 51C9 FFEE                  		dbf	d1,loc_1C466
0001EC54 4E75                       		rts	
0001EC56                            ; ===========================================================================
0001EC56                            
0001EC56                            loc_1C47C:				; XREF: AniArt_MZextra
0001EC56 2CA9 0008                  		move.l	8(a1),(a6)
0001EC5A 43E9 0010                  		lea	$10(a1),a1
0001EC5E 51C9 FFF6                  		dbf	d1,loc_1C47C
0001EC62 4E75                       		rts	
0001EC64                            ; ===========================================================================
0001EC64                            
0001EC64                            loc_1C48A:				; XREF: AniArt_MZextra
0001EC64 2029 000A                  		move.l	$A(a1),d0
0001EC68 1029 0009                  		move.b	9(a1),d0
0001EC6C E098                       		ror.l	#8,d0
0001EC6E 2C80                       		move.l	d0,(a6)
0001EC70 43E9 0010                  		lea	$10(a1),a1
0001EC74 51C9 FFEE                  		dbf	d1,loc_1C48A
0001EC78 4E75                       		rts	
0001EC7A                            ; ===========================================================================
0001EC7A                            
0001EC7A                            loc_1C4A0:				; XREF: AniArt_MZextra
0001EC7A 2CA9 000A                  		move.l	$A(a1),(a6)
0001EC7E 43E9 0010                  		lea	$10(a1),a1
0001EC82 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001EC86 4E75                       		rts	
0001EC88                            ; ===========================================================================
0001EC88                            
0001EC88                            loc_1C4AE:				; XREF: AniArt_MZextra
0001EC88 2029 000C                  		move.l	$C(a1),d0
0001EC8C 1029 000B                  		move.b	$B(a1),d0
0001EC90 E098                       		ror.l	#8,d0
0001EC92 2C80                       		move.l	d0,(a6)
0001EC94 43E9 0010                  		lea	$10(a1),a1
0001EC98 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001EC9C 4E75                       		rts	
0001EC9E                            ; ===========================================================================
0001EC9E                            
0001EC9E                            loc_1C4C4:				; XREF: AniArt_MZextra
0001EC9E 2CA9 000C                  		move.l	$C(a1),(a6)
0001ECA2 43E9 0010                  		lea	$10(a1),a1
0001ECA6 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001ECAA 4E75                       		rts	
0001ECAC                            ; ===========================================================================
0001ECAC                            
0001ECAC                            loc_1C4D2:				; XREF: AniArt_MZextra
0001ECAC 2029 000C                  		move.l	$C(a1),d0
0001ECB0 E198                       		rol.l	#8,d0
0001ECB2 1011                       		move.b	0(a1),d0
0001ECB4 2C80                       		move.l	d0,(a6)
0001ECB6 43E9 0010                  		lea	$10(a1),a1
0001ECBA 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001ECBE 4E75                       		rts	
0001ECC0                            ; ===========================================================================
0001ECC0                            
0001ECC0                            loc_1C4E8:				; XREF: AniArt_MZextra
0001ECC0 3CA9 000E                  		move.w	$E(a1),(a6)
0001ECC4 3C91                       		move.w	0(a1),(a6)
0001ECC6 43E9 0010                  		lea	$10(a1),a1
0001ECCA 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001ECCE 4E75                       		rts	
0001ECD0                            ; ===========================================================================
0001ECD0                            
0001ECD0                            loc_1C4FA:				; XREF: AniArt_MZextra
0001ECD0 2011                       		move.l	0(a1),d0
0001ECD2 1029 000F                  		move.b	$F(a1),d0
0001ECD6 E098                       		ror.l	#8,d0
0001ECD8 2C80                       		move.l	d0,(a6)
0001ECDA 43E9 0010                  		lea	$10(a1),a1
0001ECDE 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001ECE2 4E75                       		rts	
0001ECE4                            
0001ECE4                            ; ---------------------------------------------------------------------------
0001ECE4                            ; Animated pattern routine - giant ring
0001ECE4                            ; ---------------------------------------------------------------------------
0001ECE4                            
0001ECE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECE4                            
0001ECE4                            
0001ECE4                            AniArt_GiantRing:			; XREF: AniArt_Load
0001ECE4 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001ECE8 6600                       		bne.s	loc_1C518
0001ECEA 4E75                       		rts	
0001ECEC                            ; ===========================================================================
0001ECEC                            
0001ECEC                            loc_1C518:
0001ECEC 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001ECF2 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001ECF8 7000                       		moveq	#0,d0
0001ECFA 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001ECFE 43F1 0000                  		lea	(a1,d0.w),a1
0001ED02 0640 8000                  		addi.w	#$8000,d0
0001ED06 E588                       		lsl.l	#2,d0
0001ED08 E448                       		lsr.w	#2,d0
0001ED0A 0040 4000                  		ori.w	#$4000,d0
0001ED0E 4840                       		swap	d0
0001ED10 2D40 0004                  		move.l	d0,4(a6)
0001ED14 323C 000D                  		move.w	#$D,d1
0001ED18 6000 FE78                  		bra.w	LoadTiles
0001ED1C                            ; End of function AniArt_GiantRing
0001ED1C                            
0001ED1C                            ; ===========================================================================
0001ED1C                            Obj21:                    ; XREF: Obj_Index
0001ED1C 4E75                               rts
0001ED1E                            ; ===========================================================================
0001ED1E                            ; ---------------------------------------------------------------------------
0001ED1E                            ; HUD Object code - SCORE, TIME, RINGS
0001ED1E                            ; ---------------------------------------------------------------------------
0001ED1E                            loc_40804:
0001ED1E 4A78 FE20                      tst.w    ($FFFFFE20).w
0001ED22 6700                           beq.s    loc_40820
0001ED24 7200                           moveq    #0,d1
0001ED26 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001ED2C 6600                           bne.s    BranchTo_loc_40836
0001ED2E 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001ED34 6600                           bne.s    BranchTo_loc_40836
0001ED36 5441                           addq.w    #2,d1
0001ED38                            
0001ED38                            BranchTo_loc_40836
0001ED38 6000                           bra.s    loc_40836
0001ED3A                            ; ===========================================================================
0001ED3A                            
0001ED3A                            loc_40820:
0001ED3A 7200                           moveq    #0,d1
0001ED3C 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001ED42 6600                           bne.s    loc_40836
0001ED44 5241                           addq.w    #1,d1
0001ED46 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001ED4C 6600                           bne.s    loc_40836
0001ED4E 5441                           addq.w    #2,d1
0001ED50                            
0001ED50                            loc_40836:
0001ED50 363C 0090                      move.w    #$90,d3
0001ED54 343C 0108                      move.w    #$108,d2
0001ED58 43F9 0000 0000                 lea    (Map_Obj21).l,a1
0001ED5E 367C 06CA                      movea.w    #$6CA,a3
0001ED62 D241                           add.w    d1,d1
0001ED64 D2F1 1000                      adda.w    (a1,d1.w),a1
0001ED68 7200                           moveq    #0,d1
0001ED6A 1219                           move.b    (a1)+,d1
0001ED6C 5301                           subq.b    #1,d1
0001ED6E 6B00                           bmi.s    return_40858
0001ED70 4EB9 0000 EDD8                 jsr    sub_D762
0001ED76                            
0001ED76                            return_40858:
0001ED76 4E75                           rts
0001ED78                            ; End of function h
0001ED78                            ; ===========================================================================
0001ED78                            ; ---------------------------------------------------------------------------
0001ED78                            ; Sprite mappings - SCORE, TIME, RINGS
0001ED78                            ; ---------------------------------------------------------------------------
0001ED78                            Map_obj21:
0001ED78                            	include "_maps\obj21.asm"
0001ED78                            ; ---------------------------------------------------------------------------
0001ED78                            ; Sprite mappings - SCORE, TIME, RINGS
0001ED78                            ; ---------------------------------------------------------------------------
0001ED78 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001ED7C 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001ED80 0A                         byte_1C5BC:	dc.b $A
0001ED81 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001ED86 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001ED8B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001ED90 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001ED95 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001ED9A A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001ED9F A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001EDA4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001EDA9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001EDAE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001EDB3 00                         		dc.b 0
0001EDB4 0A                         byte_1C5F0:	dc.b $A
0001EDB5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001EDBA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001EDBF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001EDC4 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001EDC9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001EDCE A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001EDD3 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001EDD8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001EDDD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001EDE2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001EDE7 00                         		dc.b 0
0001EDE8 0A                         byte_1C624:	dc.b $A
0001EDE9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001EDEE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001EDF3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001EDF8 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001EDFD 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001EE02 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001EE07 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001EE0C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001EE11 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001EE16 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001EE1B 00                         		dc.b 0
0001EE1C 0A                         byte_1C658:	dc.b $A
0001EE1D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001EE22 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001EE27 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001EE2C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001EE31 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001EE36 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001EE3B A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001EE40 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001EE45 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001EE4A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001EE50 00                         		even
0001EE50 00                         		even
0001EE50                            
0001EE50                            ; ---------------------------------------------------------------------------
0001EE50                            ; Add points subroutine
0001EE50                            ; ---------------------------------------------------------------------------
0001EE50                            
0001EE50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE50                            
0001EE50                            
0001EE50                            AddPoints:                      ; ...
0001EE50 11FC 0001 FE1F                     move.b    #1,($FFFFFE1F).w
0001EE56 47F8 FE26                          lea    ($FFFFFE26).w,a3
0001EE5A D193                               add.l    d0,(a3)
0001EE5C 223C 000F 423F                     move.l    #999999,d1
0001EE62 B293                               cmp.l    (a3),d1
0001EE64 6200                               bhi.s    loc_1C6AC
0001EE66 2681                               move.l    d1,(a3)
0001EE68                            
0001EE68                            loc_1C6AC:                      ; ...
0001EE68 2013                               move.l    (a3),d0
0001EE6A B0B8 FFC0                          cmp.l    ($FFFFFFC0).w,d0
0001EE6E 6500                               blo.s    locret_1C6B6
0001EE70 06B8 0000 1388 FFC0                add.l    #$1388,($FFFFFFC0).w
0001EE78 4EF9 0000 B80C                     jmp        ExtraLife
0001EE7E                            
0001EE7E                            locret_1C6B6:
0001EE7E 4E75                       		rts
0001EE80                            ; End of function AddPoints
0001EE80                            
0001EE80                            ; ---------------------------------------------------------------------------
0001EE80                            ; Subroutine to	update the HUD
0001EE80                            ; ---------------------------------------------------------------------------
0001EE80                            
0001EE80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE80                            
0001EE80                            
0001EE80                            HudUpdate:
0001EE80 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001EE84 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001EE88 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001EE8C 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001EE8E 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001EE92 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001EE98 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001EE9C 6100 0000                  		bsr.w	Hud_Score
0001EEA0                            
0001EEA0                            Hud_ChkRings:
0001EEA0 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EEA4 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001EEA6 6A00                       		bpl.s	loc_1C6E4
0001EEA8 6100 0000                  		bsr.w	Hud_LoadZero
0001EEAC                            
0001EEAC                            loc_1C6E4:
0001EEAC 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EEB0 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EEB6 7200                       		moveq	#0,d1
0001EEB8 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EEBC 6100 0000                  		bsr.w	Hud_Rings
0001EEC0                            
0001EEC0                            Hud_ChkTime:
0001EEC0 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001EEC4 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001EEC6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001EECA 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001EECC 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001EED0 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001EED6 6700                       		beq.s	TimeOver	; if yes, branch
0001EED8 5221                       		addq.b	#1,-(a1)
0001EEDA 0C11 003C                  		cmpi.b	#60,(a1)
0001EEDE 6500                       		bcs.s	Hud_ChkLives
0001EEE0 12BC 0000                  		move.b	#0,(a1)
0001EEE4 5221                       		addq.b	#1,-(a1)
0001EEE6 0C11 003C                  		cmpi.b	#60,(a1)
0001EEEA 6500                       		bcs.s	loc_1C734
0001EEEC 12BC 0000                  		move.b	#0,(a1)
0001EEF0 5221                       		addq.b	#1,-(a1)
0001EEF2 0C11 0009                  		cmpi.b	#9,(a1)
0001EEF6 6500                       		bcs.s	loc_1C734
0001EEF8 12BC 0009                  		move.b	#9,(a1)
0001EEFC                            
0001EEFC                            loc_1C734:
0001EEFC 203C 5E40 0003             		move.l	#$5E400003,d0
0001EF02 7200                       		moveq	#0,d1
0001EF04 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001EF08 6100 0000                  		bsr.w	Hud_Mins
0001EF0C 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001EF12 7200                       		moveq	#0,d1
0001EF14 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001EF18 6100 0000                  		bsr.w	Hud_Secs
0001EF1C                            
0001EF1C                            Hud_ChkLives:
0001EF1C 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EF20 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001EF22 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EF26 6100 0000                  		bsr.w	Hud_Lives
0001EF2A                            
0001EF2A                            Hud_ChkBonus:
0001EF2A 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001EF2E 6700                       		beq.s	Hud_End		; if not, branch
0001EF30 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EF34 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001EF3E 7200                       		moveq	#0,d1
0001EF40 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EF44 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EF48 7200                       		moveq	#0,d1
0001EF4A 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EF4E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EF52                            
0001EF52                            Hud_End:
0001EF52 4E75                       		rts	
0001EF54                            ; ===========================================================================
0001EF54                            
0001EF54                            TimeOver:				; XREF: Hud_ChkTime
0001EF54 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001EF58 41F8 D000                  		lea	($FFFFD000).w,a0
0001EF5C 2448                       		movea.l	a0,a2
0001EF5E 6100 E76C                  		bsr.w	KillSonic
0001EF62 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001EF68 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001EF6E 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001EF74 4E75                       		rts	
0001EF76                            ; ===========================================================================
0001EF76                            
0001EF76                            HudDebug:				; XREF: HudUpdate
0001EF76 6100 0000                  		bsr.w	HudDb_XY
0001EF7A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EF7E 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001EF80 6A00                       		bpl.s	HudDb_Rings
0001EF82 6100 0000                  		bsr.w	Hud_LoadZero
0001EF86                            
0001EF86                            HudDb_Rings:
0001EF86 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EF8A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EF90 7200                       		moveq	#0,d1
0001EF92 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EF96 6100 0000                  		bsr.w	Hud_Rings
0001EF9A                            
0001EF9A                            HudDb_ObjCount:
0001EF9A 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001EFA0 7200                       		moveq	#0,d1
0001EFA2 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001EFA6 6100 0000                  		bsr.w	Hud_Secs
0001EFAA 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EFAE 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001EFB0 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EFB4 6100 0000                  		bsr.w	Hud_Lives
0001EFB8                            
0001EFB8                            HudDb_ChkBonus:
0001EFB8 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001EFBC 6700                       		beq.s	HudDb_End	; if not, branch
0001EFBE 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EFC2 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001EFCC 7200                       		moveq	#0,d1
0001EFCE 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EFD2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EFD6 7200                       		moveq	#0,d1
0001EFD8 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EFDC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EFE0                            
0001EFE0                            HudDb_End:
0001EFE0 4E75                       		rts	
0001EFE2                            ; End of function HudUpdate
0001EFE2                            
0001EFE2                            ; ---------------------------------------------------------------------------
0001EFE2                            ; Subroutine to	load "0" on the	HUD
0001EFE2                            ; ---------------------------------------------------------------------------
0001EFE2                            
0001EFE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFE2                            
0001EFE2                            
0001EFE2                            Hud_LoadZero:				; XREF: HudUpdate
0001EFE2 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001EFEC 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001EFF0 343C 0002                  		move.w	#2,d2
0001EFF4 6000                       		bra.s	loc_1C83E
0001EFF6                            ; End of function Hud_LoadZero
0001EFF6                            
0001EFF6                            ; ---------------------------------------------------------------------------
0001EFF6                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001EFF6                            ; ---------------------------------------------------------------------------
0001EFF6                            
0001EFF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFF6                            
0001EFF6                            
0001EFF6                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001EFF6 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EFFC 6100 0000                  		bsr.w	Hud_Lives
0001F000 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001F00A 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001F00E 343C 000E                  		move.w	#$E,d2
0001F012                            
0001F012                            loc_1C83E:				; XREF: Hud_LoadZero
0001F012 43FA 0000                  		lea	Art_Hud(pc),a1
0001F016                            
0001F016                            loc_1C842:
0001F016 323C 000F                  		move.w	#$F,d1
0001F01A 101A                       		move.b	(a2)+,d0
0001F01C 6B00                       		bmi.s	loc_1C85E
0001F01E 4880                       		ext.w	d0
0001F020 EB48                       		lsl.w	#5,d0
0001F022 47F1 0000                  		lea	(a1,d0.w),a3
0001F026                            
0001F026                            loc_1C852:
0001F026 2C9B                       		move.l	(a3)+,(a6)
0001F028 51C9 FFFC                  		dbf	d1,loc_1C852
0001F02C                            
0001F02C                            loc_1C858:
0001F02C 51CA FFE8                  		dbf	d2,loc_1C842
0001F030                            
0001F030 4E75                       		rts	
0001F032                            ; ===========================================================================
0001F032                            
0001F032                            loc_1C85E:
0001F032 2CBC 0000 0000             		move.l	#0,(a6)
0001F038 51C9 FFF8                  		dbf	d1,loc_1C85E
0001F03C                            
0001F03C 60EE                       		bra.s	loc_1C858
0001F03E                            ; End of function Hud_Base
0001F03E                            
0001F03E                            ; ===========================================================================
0001F03E 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001F04A FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001F04E                            ; ---------------------------------------------------------------------------
0001F04E                            ; Subroutine to	load debug mode	numbers	patterns
0001F04E                            ; ---------------------------------------------------------------------------
0001F04E                            
0001F04E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F04E                            
0001F04E                            
0001F04E                            HudDb_XY:				; XREF: HudDebug
0001F04E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001F058 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001F05C 4841                       		swap	d1
0001F05E 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001F062 6100                       		bsr.s	HudDb_XY2
0001F064 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001F068 4841                       		swap	d1
0001F06A 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001F06E                            ; End of function HudDb_XY
0001F06E                            
0001F06E                            
0001F06E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F06E                            
0001F06E                            
0001F06E                            HudDb_XY2:
0001F06E 7C07                       		moveq	#7,d6
0001F070 43F9 0000 0550             		lea	(Art_Text).l,a1
0001F076                            
0001F076                            HudDb_XYLoop:
0001F076 E959                       		rol.w	#4,d1
0001F078 3401                       		move.w	d1,d2
0001F07A 0242 000F                  		andi.w	#$F,d2
0001F07E 0C42 000A                  		cmpi.w	#$A,d2
0001F082 6500                       		bcs.s	loc_1C8B2
0001F084 5E42                       		addq.w	#7,d2
0001F086                            
0001F086                            loc_1C8B2:
0001F086 EB4A                       		lsl.w	#5,d2
0001F088 47F1 2000                  		lea	(a1,d2.w),a3
0001F08C 2C9B                       		move.l	(a3)+,(a6)
0001F08E 2C9B                       		move.l	(a3)+,(a6)
0001F090 2C9B                       		move.l	(a3)+,(a6)
0001F092 2C9B                       		move.l	(a3)+,(a6)
0001F094 2C9B                       		move.l	(a3)+,(a6)
0001F096 2C9B                       		move.l	(a3)+,(a6)
0001F098 2C9B                       		move.l	(a3)+,(a6)
0001F09A 2C9B                       		move.l	(a3)+,(a6)
0001F09C 4841                       		swap	d1
0001F09E 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001F0A2                            
0001F0A2 4E75                       		rts	
0001F0A4                            ; End of function HudDb_XY2
0001F0A4                            
0001F0A4                            ; ---------------------------------------------------------------------------
0001F0A4                            ; Subroutine to	load rings numbers patterns
0001F0A4                            ; ---------------------------------------------------------------------------
0001F0A4                            
0001F0A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0A4                            
0001F0A4                            
0001F0A4                            Hud_Rings:				; XREF: HudUpdate
0001F0A4 45F9 0000 0000             		lea	(Hud_100).l,a2
0001F0AA 7C02                       		moveq	#2,d6
0001F0AC 6000                       		bra.s	Hud_LoadArt
0001F0AE                            ; End of function Hud_Rings
0001F0AE                            
0001F0AE                            ; ---------------------------------------------------------------------------
0001F0AE                            ; Subroutine to	load score numbers patterns
0001F0AE                            ; ---------------------------------------------------------------------------
0001F0AE                            
0001F0AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0AE                            
0001F0AE                            
0001F0AE                            Hud_Score:				; XREF: HudUpdate
0001F0AE 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001F0B4 7C05                       		moveq	#5,d6
0001F0B6                            
0001F0B6                            Hud_LoadArt:
0001F0B6 7800                       		moveq	#0,d4
0001F0B8 43FA 0000                  		lea	Art_Hud(pc),a1
0001F0BC                            
0001F0BC                            Hud_ScoreLoop:
0001F0BC 7400                       		moveq	#0,d2
0001F0BE 261A                       		move.l	(a2)+,d3
0001F0C0                            
0001F0C0                            loc_1C8EC:
0001F0C0 9283                       		sub.l	d3,d1
0001F0C2 6500                       		bcs.s	loc_1C8F4
0001F0C4 5242                       		addq.w	#1,d2
0001F0C6 60F8                       		bra.s	loc_1C8EC
0001F0C8                            ; ===========================================================================
0001F0C8                            
0001F0C8                            loc_1C8F4:
0001F0C8 D283                       		add.l	d3,d1
0001F0CA 4A42                       		tst.w	d2
0001F0CC 6700                       		beq.s	loc_1C8FE
0001F0CE 383C 0001                  		move.w	#1,d4
0001F0D2                            
0001F0D2                            loc_1C8FE:
0001F0D2 4A44                       		tst.w	d4
0001F0D4 6700                       		beq.s	loc_1C92C
0001F0D6 ED4A                       		lsl.w	#6,d2
0001F0D8 2D40 0004                  		move.l	d0,4(a6)
0001F0DC 47F1 2000                  		lea	(a1,d2.w),a3
0001F0E0 2C9B                       		move.l	(a3)+,(a6)
0001F0E2 2C9B                       		move.l	(a3)+,(a6)
0001F0E4 2C9B                       		move.l	(a3)+,(a6)
0001F0E6 2C9B                       		move.l	(a3)+,(a6)
0001F0E8 2C9B                       		move.l	(a3)+,(a6)
0001F0EA 2C9B                       		move.l	(a3)+,(a6)
0001F0EC 2C9B                       		move.l	(a3)+,(a6)
0001F0EE 2C9B                       		move.l	(a3)+,(a6)
0001F0F0 2C9B                       		move.l	(a3)+,(a6)
0001F0F2 2C9B                       		move.l	(a3)+,(a6)
0001F0F4 2C9B                       		move.l	(a3)+,(a6)
0001F0F6 2C9B                       		move.l	(a3)+,(a6)
0001F0F8 2C9B                       		move.l	(a3)+,(a6)
0001F0FA 2C9B                       		move.l	(a3)+,(a6)
0001F0FC 2C9B                       		move.l	(a3)+,(a6)
0001F0FE 2C9B                       		move.l	(a3)+,(a6)
0001F100                            
0001F100                            loc_1C92C:
0001F100 0680 0040 0000             		addi.l	#$400000,d0
0001F106 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001F10A                            
0001F10A 4E75                       		rts	
0001F10C                            ; End of function Hud_Score
0001F10C                            
0001F10C                            ; ---------------------------------------------------------------------------
0001F10C                            ; Subroutine to	load countdown numbers on the continue screen
0001F10C                            ; ---------------------------------------------------------------------------
0001F10C                            
0001F10C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F10C                            
0001F10C                            
0001F10C                            ContScrCounter:				; XREF: ContinueScreen
0001F10C 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001F116 4DF9 00C0 0000             		lea	($C00000).l,a6
0001F11C 45F9 0000 0000             		lea	(Hud_10).l,a2
0001F122 7C01                       		moveq	#1,d6
0001F124 7800                       		moveq	#0,d4
0001F126 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001F12A                            
0001F12A                            ContScr_Loop:
0001F12A 7400                       		moveq	#0,d2
0001F12C 261A                       		move.l	(a2)+,d3
0001F12E                            
0001F12E                            loc_1C95A:
0001F12E 9283                       		sub.l	d3,d1
0001F130 6500                       		bcs.s	loc_1C962
0001F132 5242                       		addq.w	#1,d2
0001F134 60F8                       		bra.s	loc_1C95A
0001F136                            ; ===========================================================================
0001F136                            
0001F136                            loc_1C962:
0001F136 D283                       		add.l	d3,d1
0001F138 ED4A                       		lsl.w	#6,d2
0001F13A 47F1 2000                  		lea	(a1,d2.w),a3
0001F13E 2C9B                       		move.l	(a3)+,(a6)
0001F140 2C9B                       		move.l	(a3)+,(a6)
0001F142 2C9B                       		move.l	(a3)+,(a6)
0001F144 2C9B                       		move.l	(a3)+,(a6)
0001F146 2C9B                       		move.l	(a3)+,(a6)
0001F148 2C9B                       		move.l	(a3)+,(a6)
0001F14A 2C9B                       		move.l	(a3)+,(a6)
0001F14C 2C9B                       		move.l	(a3)+,(a6)
0001F14E 2C9B                       		move.l	(a3)+,(a6)
0001F150 2C9B                       		move.l	(a3)+,(a6)
0001F152 2C9B                       		move.l	(a3)+,(a6)
0001F154 2C9B                       		move.l	(a3)+,(a6)
0001F156 2C9B                       		move.l	(a3)+,(a6)
0001F158 2C9B                       		move.l	(a3)+,(a6)
0001F15A 2C9B                       		move.l	(a3)+,(a6)
0001F15C 2C9B                       		move.l	(a3)+,(a6)
0001F15E 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001F162                            
0001F162 4E75                       		rts	
0001F164                            ; End of function ContScrCounter
0001F164                            
0001F164                            ; ===========================================================================
0001F164                            ; ---------------------------------------------------------------------------
0001F164                            ; HUD counter sizes
0001F164                            ; ---------------------------------------------------------------------------
0001F164 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001F168 0000 2710                  Hud_10000:	dc.l 10000
0001F16C 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001F170 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001F174 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001F178 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001F17C                            
0001F17C                            ; ---------------------------------------------------------------------------
0001F17C                            ; Subroutine to	load time numbers patterns
0001F17C                            ; ---------------------------------------------------------------------------
0001F17C                            
0001F17C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F17C                            
0001F17C                            
0001F17C                            Hud_Mins:				; XREF: Hud_ChkTime
0001F17C 45F9 0001 F178             		lea	(Hud_1).l,a2
0001F182 7C00                       		moveq	#0,d6
0001F184 6000                       		bra.s	loc_1C9BA
0001F186                            ; End of function Hud_Mins
0001F186                            
0001F186                            
0001F186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F186                            
0001F186                            
0001F186                            Hud_Secs:				; XREF: Hud_ChkTime
0001F186 45F9 0001 F174             		lea	(Hud_10).l,a2
0001F18C 7C01                       		moveq	#1,d6
0001F18E                            
0001F18E                            loc_1C9BA:
0001F18E 7800                       		moveq	#0,d4
0001F190 43FA 0000                  		lea	Art_Hud(pc),a1
0001F194                            
0001F194                            Hud_TimeLoop:
0001F194 7400                       		moveq	#0,d2
0001F196 261A                       		move.l	(a2)+,d3
0001F198                            
0001F198                            loc_1C9C4:
0001F198 9283                       		sub.l	d3,d1
0001F19A 6500                       		bcs.s	loc_1C9CC
0001F19C 5242                       		addq.w	#1,d2
0001F19E 60F8                       		bra.s	loc_1C9C4
0001F1A0                            ; ===========================================================================
0001F1A0                            
0001F1A0                            loc_1C9CC:
0001F1A0 D283                       		add.l	d3,d1
0001F1A2 4A42                       		tst.w	d2
0001F1A4 6700                       		beq.s	loc_1C9D6
0001F1A6 383C 0001                  		move.w	#1,d4
0001F1AA                            
0001F1AA                            loc_1C9D6:
0001F1AA ED4A                       		lsl.w	#6,d2
0001F1AC 2D40 0004                  		move.l	d0,4(a6)
0001F1B0 47F1 2000                  		lea	(a1,d2.w),a3
0001F1B4 2C9B                       		move.l	(a3)+,(a6)
0001F1B6 2C9B                       		move.l	(a3)+,(a6)
0001F1B8 2C9B                       		move.l	(a3)+,(a6)
0001F1BA 2C9B                       		move.l	(a3)+,(a6)
0001F1BC 2C9B                       		move.l	(a3)+,(a6)
0001F1BE 2C9B                       		move.l	(a3)+,(a6)
0001F1C0 2C9B                       		move.l	(a3)+,(a6)
0001F1C2 2C9B                       		move.l	(a3)+,(a6)
0001F1C4 2C9B                       		move.l	(a3)+,(a6)
0001F1C6 2C9B                       		move.l	(a3)+,(a6)
0001F1C8 2C9B                       		move.l	(a3)+,(a6)
0001F1CA 2C9B                       		move.l	(a3)+,(a6)
0001F1CC 2C9B                       		move.l	(a3)+,(a6)
0001F1CE 2C9B                       		move.l	(a3)+,(a6)
0001F1D0 2C9B                       		move.l	(a3)+,(a6)
0001F1D2 2C9B                       		move.l	(a3)+,(a6)
0001F1D4 0680 0040 0000             		addi.l	#$400000,d0
0001F1DA 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001F1DE                            
0001F1DE 4E75                       		rts	
0001F1E0                            ; End of function Hud_Secs
0001F1E0                            
0001F1E0                            ; ---------------------------------------------------------------------------
0001F1E0                            ; Subroutine to	load time/ring bonus numbers patterns
0001F1E0                            ; ---------------------------------------------------------------------------
0001F1E0                            
0001F1E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1E0                            
0001F1E0                            
0001F1E0                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001F1E0 45F9 0001 F16C             		lea	(Hud_1000).l,a2
0001F1E6 7C03                       		moveq	#3,d6
0001F1E8 7800                       		moveq	#0,d4
0001F1EA 43FA 0000                  		lea	Art_Hud(pc),a1
0001F1EE                            
0001F1EE                            Hud_BonusLoop:
0001F1EE 7400                       		moveq	#0,d2
0001F1F0 261A                       		move.l	(a2)+,d3
0001F1F2                            
0001F1F2                            loc_1CA1E:
0001F1F2 9283                       		sub.l	d3,d1
0001F1F4 6500                       		bcs.s	loc_1CA26
0001F1F6 5242                       		addq.w	#1,d2
0001F1F8 60F8                       		bra.s	loc_1CA1E
0001F1FA                            ; ===========================================================================
0001F1FA                            
0001F1FA                            loc_1CA26:
0001F1FA D283                       		add.l	d3,d1
0001F1FC 4A42                       		tst.w	d2
0001F1FE 6700                       		beq.s	loc_1CA30
0001F200 383C 0001                  		move.w	#1,d4
0001F204                            
0001F204                            loc_1CA30:
0001F204 4A44                       		tst.w	d4
0001F206 6700                       		beq.s	Hud_ClrBonus
0001F208 ED4A                       		lsl.w	#6,d2
0001F20A 47F1 2000                  		lea	(a1,d2.w),a3
0001F20E 2C9B                       		move.l	(a3)+,(a6)
0001F210 2C9B                       		move.l	(a3)+,(a6)
0001F212 2C9B                       		move.l	(a3)+,(a6)
0001F214 2C9B                       		move.l	(a3)+,(a6)
0001F216 2C9B                       		move.l	(a3)+,(a6)
0001F218 2C9B                       		move.l	(a3)+,(a6)
0001F21A 2C9B                       		move.l	(a3)+,(a6)
0001F21C 2C9B                       		move.l	(a3)+,(a6)
0001F21E 2C9B                       		move.l	(a3)+,(a6)
0001F220 2C9B                       		move.l	(a3)+,(a6)
0001F222 2C9B                       		move.l	(a3)+,(a6)
0001F224 2C9B                       		move.l	(a3)+,(a6)
0001F226 2C9B                       		move.l	(a3)+,(a6)
0001F228 2C9B                       		move.l	(a3)+,(a6)
0001F22A 2C9B                       		move.l	(a3)+,(a6)
0001F22C 2C9B                       		move.l	(a3)+,(a6)
0001F22E                            
0001F22E                            loc_1CA5A:
0001F22E 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001F232                            
0001F232 4E75                       		rts	
0001F234                            ; ===========================================================================
0001F234                            
0001F234                            Hud_ClrBonus:
0001F234 7A0F                       		moveq	#$F,d5
0001F236                            
0001F236                            Hud_ClrBonusLoop:
0001F236 2CBC 0000 0000             		move.l	#0,(a6)
0001F23C 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001F240                            
0001F240 60EC                       		bra.s	loc_1CA5A
0001F242                            ; End of function Hud_TimeRingBonus
0001F242                            
0001F242                            ; ---------------------------------------------------------------------------
0001F242                            ; Subroutine to	load uncompressed lives	counter	patterns
0001F242                            ; ---------------------------------------------------------------------------
0001F242                            
0001F242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F242                            
0001F242                            
0001F242                            Hud_Lives:				; XREF: Hud_ChkLives
0001F242 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001F248 7200                       		moveq	#0,d1
0001F24A 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001F24E 45F9 0001 F174             		lea	(Hud_10).l,a2
0001F254 7C01                       		moveq	#1,d6
0001F256 7800                       		moveq	#0,d4
0001F258 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001F25C                            
0001F25C                            Hud_LivesLoop:
0001F25C 2D40 0004                  		move.l	d0,4(a6)
0001F260 7400                       		moveq	#0,d2
0001F262 261A                       		move.l	(a2)+,d3
0001F264                            
0001F264                            loc_1CA90:
0001F264 9283                       		sub.l	d3,d1
0001F266 6500                       		bcs.s	loc_1CA98
0001F268 5242                       		addq.w	#1,d2
0001F26A 60F8                       		bra.s	loc_1CA90
0001F26C                            ; ===========================================================================
0001F26C                            
0001F26C                            loc_1CA98:
0001F26C D283                       		add.l	d3,d1
0001F26E 4A42                       		tst.w	d2
0001F270 6700                       		beq.s	loc_1CAA2
0001F272 383C 0001                  		move.w	#1,d4
0001F276                            
0001F276                            loc_1CAA2:
0001F276 4A44                       		tst.w	d4
0001F278 6700                       		beq.s	Hud_ClrLives
0001F27A                            
0001F27A                            loc_1CAA6:
0001F27A EB4A                       		lsl.w	#5,d2
0001F27C 47F1 2000                  		lea	(a1,d2.w),a3
0001F280 2C9B                       		move.l	(a3)+,(a6)
0001F282 2C9B                       		move.l	(a3)+,(a6)
0001F284 2C9B                       		move.l	(a3)+,(a6)
0001F286 2C9B                       		move.l	(a3)+,(a6)
0001F288 2C9B                       		move.l	(a3)+,(a6)
0001F28A 2C9B                       		move.l	(a3)+,(a6)
0001F28C 2C9B                       		move.l	(a3)+,(a6)
0001F28E 2C9B                       		move.l	(a3)+,(a6)
0001F290                            
0001F290                            loc_1CABC:
0001F290 0680 0040 0000             		addi.l	#$400000,d0
0001F296 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001F29A                            
0001F29A 4E75                       		rts	
0001F29C                            ; ===========================================================================
0001F29C                            
0001F29C                            Hud_ClrLives:
0001F29C 4A46                       		tst.w	d6
0001F29E 67DA                       		beq.s	loc_1CAA6
0001F2A0 7A07                       		moveq	#7,d5
0001F2A2                            
0001F2A2                            Hud_ClrLivesLoop:
0001F2A2 2CBC 0000 0000             		move.l	#0,(a6)
0001F2A8 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001F2AC 60E2                       		bra.s	loc_1CABC
0001F2AE                            ; End of function Hud_Lives
0001F2AE                            
0001F2AE                            ; ===========================================================================
0001F2AE                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001F5AE                            		even
0001F5AE                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001F6EE                            		even
0001F6EE                            ; ===========================================================================
0001F6EE                            ; ---------------------------------------------------------------------------
0001F6EE                            ; When debug mode is currently in use
0001F6EE                            ; ---------------------------------------------------------------------------
0001F6EE                            
0001F6EE                            DebugMode:				; XREF: Obj01; Obj09
0001F6EE 7000                       		moveq	#0,d0
0001F6F0 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001F6F4 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001F6F8 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001F6FC                            ; ===========================================================================
0001F6FC 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001F6FE 0000                       		dc.w Debug_Skip-Debug_Index
0001F700                            ; ===========================================================================
0001F700                            
0001F700                            Debug_Main:				; XREF: Debug_Index
0001F700 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001F704 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001F70A 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001F710 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001F716 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001F71C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001F722 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001F728 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001F72E 117C 0000 001A             		move.b	#0,$1A(a0)
0001F734 117C 0000 001C             		move.b	#0,$1C(a0)
0001F73A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001F740 6600                       		bne.s	Debug_Zone	; if not, branch
0001F742 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001F748 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001F74E 7006                       		moveq	#6,d0		; use 6th debug	item list
0001F750 6000                       		bra.s	Debug_UseList
0001F752                            ; ===========================================================================
0001F752                            
0001F752                            Debug_Zone:
0001F752 7000                       		moveq	#0,d0
0001F754 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F758                            
0001F758                            Debug_UseList:
0001F758 45F9 0000 0000             		lea	(DebugList).l,a2
0001F75E D040                       		add.w	d0,d0
0001F760 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F764 3C1A                       		move.w	(a2)+,d6
0001F766 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F76A 6200                       		bhi.s	loc_1CF9E
0001F76C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001F772                            
0001F772                            loc_1CF9E:
0001F772 6100 0000                  		bsr.w	Debug_ShowItem
0001F776 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F77C 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001F782                            
0001F782                            Debug_Skip:				; XREF: Debug_Index
0001F782 7006                       		moveq	#6,d0
0001F784 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001F78A 6700                       		beq.s	loc_1CFBE
0001F78C 7000                       		moveq	#0,d0
0001F78E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F792                            
0001F792                            loc_1CFBE:
0001F792 45F9 0000 0000             		lea	(DebugList).l,a2
0001F798 D040                       		add.w	d0,d0
0001F79A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F79E 3C1A                       		move.w	(a2)+,d6
0001F7A0 6100 0000                  		bsr.w	Debug_Control
0001F7A4 4EF9 0000 EB2E             		jmp	DisplaySprite
0001F7AA                            
0001F7AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F7AA                            
0001F7AA                            
0001F7AA                            Debug_Control:
0001F7AA 7800                       		moveq	#0,d4
0001F7AC 323C 0001                  		move.w	#1,d1
0001F7B0 1838 F605                  		move.b	($FFFFF605).w,d4
0001F7B4 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001F7B8 6600                       		bne.s	loc_1D018	; if yes, branch
0001F7BA 1038 F604                  		move.b	($FFFFF604).w,d0
0001F7BE 0240 000F                  		andi.w	#$F,d0
0001F7C2 6600                       		bne.s	loc_1D000
0001F7C4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F7CA 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001F7D0 6000 0000                  		bra.w	Debug_BackItem
0001F7D4                            ; ===========================================================================
0001F7D4                            
0001F7D4                            loc_1D000:
0001F7D4 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001F7D8 6600                       		bne.s	loc_1D01C
0001F7DA 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001F7E0 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001F7E4 6600                       		bne.s	loc_1D018
0001F7E6 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001F7EC                            
0001F7EC                            loc_1D018:
0001F7EC 1838 F604                  		move.b	($FFFFF604).w,d4
0001F7F0                            
0001F7F0                            loc_1D01C:
0001F7F0 7200                       		moveq	#0,d1
0001F7F2 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001F7F6 5241                       		addq.w	#1,d1
0001F7F8 4841                       		swap	d1
0001F7FA E881                       		asr.l	#4,d1
0001F7FC 2428 000C                  		move.l	$C(a0),d2
0001F800 2628 0008                  		move.l	8(a0),d3
0001F804 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001F808 6700                       		beq.s	loc_1D03C	; if not, branch
0001F80A 9481                       		sub.l	d1,d2
0001F80C 6400                       		bcc.s	loc_1D03C
0001F80E 7400                       		moveq	#0,d2
0001F810                            
0001F810                            loc_1D03C:
0001F810 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001F814 6700                       		beq.s	loc_1D052	; if not, branch
0001F816 D481                       		add.l	d1,d2
0001F818 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001F81E 6500                       		bcs.s	loc_1D052
0001F820 243C 07FF 0000             		move.l	#$7FF0000,d2
0001F826                            
0001F826                            loc_1D052:
0001F826 0804 0002                  		btst	#2,d4
0001F82A 6700                       		beq.s	loc_1D05E
0001F82C 9681                       		sub.l	d1,d3
0001F82E 6400                       		bcc.s	loc_1D05E
0001F830 7600                       		moveq	#0,d3
0001F832                            
0001F832                            loc_1D05E:
0001F832 0804 0003                  		btst	#3,d4
0001F836 6700                       		beq.s	loc_1D066
0001F838 D681                       		add.l	d1,d3
0001F83A                            
0001F83A                            loc_1D066:
0001F83A 2142 000C                  		move.l	d2,$C(a0)
0001F83E 2143 0008                  		move.l	d3,8(a0)
0001F842                            
0001F842                            Debug_BackItem:
0001F842 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001F848 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F84A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F850 6700                       		beq.s	Debug_NextItem	; if not, branch
0001F852 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001F856 6400                       		bcc.s	Debug_NoLoop
0001F858 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001F85C 6000                       		bra.s	Debug_NoLoop
0001F85E                            ; ===========================================================================
0001F85E                            
0001F85E                            Debug_NextItem:
0001F85E 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001F864 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F866 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001F86A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F86E 6200                       		bhi.s	Debug_NoLoop
0001F870 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001F876                            
0001F876                            Debug_NoLoop:
0001F876 6000 0000                  		bra.w	Debug_ShowItem
0001F87A                            ; ===========================================================================
0001F87A                            
0001F87A                            Debug_MakeItem:
0001F87A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F880 6700                       		beq.s	Debug_Exit	; if not, branch
0001F882 4EB9 0000 F284             		jsr	SingleObjLoad
0001F888 6600                       		bne.s	Debug_Exit
0001F88A 3368 0008 0008             		move.w	8(a0),8(a1)
0001F890 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F896 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001F89A 1368 0001 0001             		move.b	1(a0),1(a1)
0001F8A0 1368 0001 0022             		move.b	1(a0),$22(a1)
0001F8A6 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001F8AC 7000                       		moveq	#0,d0
0001F8AE 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F8B2 E748                       		lsl.w	#3,d0
0001F8B4 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001F8BA 4E75                       		rts	
0001F8BC                            ; ===========================================================================
0001F8BC                            
0001F8BC                            Debug_Exit:
0001F8BC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F8C2 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001F8C4 7000                       		moveq	#0,d0
0001F8C6 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001F8CA 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F8D2 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F8D8 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001F8DC 3140 000A                  		move.w	d0,$A(a0)
0001F8E0 3140 000E                  		move.w	d0,$E(a0)
0001F8E4 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001F8EA 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001F8F0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001F8F6 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001F8F8 4278 F780                  		clr.w	($FFFFF780).w
0001F8FC 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001F902 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F90A 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F910 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001F916 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001F91C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F922                            
0001F922                            Debug_DoNothing:
0001F922 4E75                       		rts	
0001F924                            ; End of function Debug_Control
0001F924                            
0001F924                            
0001F924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F924                            
0001F924                            
0001F924                            Debug_ShowItem:				; XREF: Debug_Main
0001F924 7000                       		moveq	#0,d0
0001F926 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F92A E748                       		lsl.w	#3,d0
0001F92C 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001F932 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001F938 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001F93E 4E75                       		rts	
0001F940                            ; End of function Debug_ShowItem
0001F940                            
0001F940                            ; ===========================================================================
0001F940                            ; ---------------------------------------------------------------------------
0001F940                            ; Debug	list pointers
0001F940                            ; ---------------------------------------------------------------------------
0001F940                            DebugList:
0001F940                            	include "_inc\Debug list pointers.asm"
0001F940                            ; ---------------------------------------------------------------------------
0001F940                            ; Debug	list pointers
0001F940                            ; ---------------------------------------------------------------------------
0001F940 0000                       	dc.w Debug_GHZ-DebugList
0001F942 0000                       	dc.w Debug_LZ-DebugList
0001F944 0000                       	dc.w Debug_MZ-DebugList
0001F946 0000                       	dc.w Debug_SLZ-DebugList
0001F948 0000                       	dc.w Debug_SYZ-DebugList
0001F94A 0000                       	dc.w Debug_SBZ-DebugList
0001F94C 0000                       	dc.w Debug_Ending-DebugList
0001F94C 0000                       	dc.w Debug_Ending-DebugList
0001F94E                            
0001F94E                            ; ---------------------------------------------------------------------------
0001F94E                            ; Debug	list - Green Hill
0001F94E                            ; ---------------------------------------------------------------------------
0001F94E                            Debug_GHZ:
0001F94E                            	include "_inc\Debug list - GHZ.asm"
0001F94E                            ; ---------------------------------------------------------------------------
0001F94E                            ; Debug	list - Green Hill
0001F94E                            ; ---------------------------------------------------------------------------
0001F94E 0010                       	dc.w $10			; number of items in list
0001F950 2500 B438                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001F954 0000 26BA                  	dc.w 0, ringart+$2000		; subtype, frame, VRAM setting (2 bytes)
0001F958 2600 BA1E                  	dc.l Map_obj26+$26000000
0001F95C 0000 0680                  	dc.b 0,	0, 6, $80
0001F960 1F00 AC98                  	dc.l Map_obj1F+$1F000000
0001F964 0000 0400                  	dc.b 0,	0, 4, 0
0001F968 2200 AF78                  	dc.l Map_obj22+$22000000
0001F96C 0000 0444                  	dc.b 0,	0, 4, $44
0001F970 2B00 C040                  	dc.l Map_obj2B+$2B000000
0001F974 0000 047B                  	dc.b 0,	0, 4, $7B
0001F978 3600 E506                  	dc.l Map_obj36+$36000000
0001F97C 0000 051B                  	dc.b 0,	0, 5, $1B
0001F980 1800 92CA                  	dc.l Map_obj18+$18000000
0001F984 0000 4000                  	dc.b 0,	0, $40,	0
0001F988 3B00 E64C                  	dc.l Map_obj3B+$3B000000
0001F98C 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F990 4001 1266                  	dc.l Map_obj40+$40000000
0001F994 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F998 4100 F77E                  	dc.l Map_obj41+$41000000
0001F99C 0000 0523                  	dc.b 0,	0, 5, $23
0001F9A0 4200 F9A4                  	dc.l Map_obj42+$42000000
0001F9A4 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F9A8 4400 FCBC                  	dc.l Map_obj44+$44000000
0001F9AC 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F9B0 1900 9338                  	dc.l Map_obj48+$19000000
0001F9B4 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F9B8 7901 9306                  	dc.l Map_obj79+$79000000
0001F9BC 0100 0571                  	dc.w $100, lamppostart
0001F9C0 4B00 B478                  	dc.l Map_obj4B+$4B000000
0001F9C4 0000 222D                  	dc.w 0, ssringart+$2000
0001F9C8 7D01 9464                  	dc.l Map_obj7D+$7D000000
0001F9CC 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F9D0                            	even
0001F9D0                            	even
0001F9D0                            
0001F9D0                            ; ---------------------------------------------------------------------------
0001F9D0                            ; Debug	list - Labyrinth
0001F9D0                            ; ---------------------------------------------------------------------------
0001F9D0                            Debug_LZ:
0001F9D0                            	include "_inc\Debug list - LZ.asm"
0001F9D0                            ; ---------------------------------------------------------------------------
0001F9D0                            ; Debug	list - Labyrinth
0001F9D0                            ; ---------------------------------------------------------------------------
0001F9D0 0019                       	dc.w $19
0001F9D2 2500 B438                  	dc.l Map_obj25+$25000000
0001F9D6 0000 26BA                  	dc.w 0, ringart+$2000
0001F9DA 2600 BA1E                  	dc.l Map_obj26+$26000000
0001F9DE 0000 0680                  	dc.b 0,	0, 6, $80
0001F9E2 4100 F77E                  	dc.l Map_obj41+$41000000
0001F9E6 0000 0523                  	dc.b 0,	0, 5, $23
0001F9EA 2C00 C0E6                  	dc.l Map_obj2C+$2C000000
0001F9EE 0800 2486                  	dc.b 8,	0, $24,	$86
0001F9F2 2D00 C2FA                  	dc.l Map_obj2D+$2D000000
0001F9F6 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F9FA 1601 3ACC                  	dc.l Map_obj16+$16000000
0001F9FE 0000 03CC                  	dc.b 0,	0, 3, $CC
0001FA02 1601 3ACC                  	dc.l Map_obj16+$16000000
0001FA06 0203 03CC                  	dc.b 2,	3, 3, $CC
0001FA0A 3300 D7D4                  	dc.l Map_obj33+$33000000
0001FA0E 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001FA12 3200 D398                  	dc.l Map_obj32+$32000000
0001FA16 0000 0513                  	dc.b 0,	0, 5, $13
0001FA1A 3600 E506                  	dc.l Map_obj36+$36000000
0001FA1E 0000 051B                  	dc.b 0,	0, 5, $1B
0001FA22 5201 1B9A                  	dc.l Map_obj52a+$52000000
0001FA26 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001FA2A 6101 3D02                  	dc.l Map_obj61+$61000000
0001FA2E 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001FA32 6101 3D02                  	dc.l Map_obj61+$61000000
0001FA36 1301 43E6                  	dc.b $13, 1, $43, $E6
0001FA3A 6101 3D02                  	dc.l Map_obj61+$61000000
0001FA3E 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001FA42 6201 3E56                  	dc.l Map_obj62+$62000000
0001FA46 0000 443E                  	dc.b 0,	0, $44,	$3E
0001FA4A 6101 3D02                  	dc.l Map_obj61+$61000000
0001FA4E 2702 43E6                  	dc.b $27, 2, $43, $E6
0001FA52 6101 3D02                  	dc.l Map_obj61+$61000000
0001FA56 3003 43E6                  	dc.b $30, 3, $43, $E6
0001FA5A 6301 41C6                  	dc.l Map_obj63+$63000000
0001FA5E 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001FA62 6001 3A16                  	dc.l Map_obj60+$60000000
0001FA66 0000 0467                  	dc.b 0,	0, 4, $67
0001FA6A 6401 457E                  	dc.l Map_obj64+$64000000
0001FA6E 8413 8348                  	dc.b $84, $13, $83, $48
0001FA72 6501 4706                  	dc.l Map_obj65+$65000000
0001FA76 0202 C259                  	dc.b 2,	2, $C2,	$59
0001FA7A 6501 4706                  	dc.l Map_obj65+$65000000
0001FA7E 0909 C259                  	dc.b 9,	9, $C2,	$59
0001FA82 0B01 2E40                  	dc.l Map_obj0B+$B000000
0001FA86 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001FA8A 0C01 2F10                  	dc.l Map_obj0C+$C000000
0001FA8E 0200 4328                  	dc.b 2,	0, $43,	$28
0001FA92 7901 9306                  	dc.l Map_obj79+$79000000
0001FA96 0100 0571                  	dc.w $100, lamppostart
0001FA9A                            	even
0001FA9A                            	even
0001FA9A                            
0001FA9A                            ; ---------------------------------------------------------------------------
0001FA9A                            ; Debug	list - Marble
0001FA9A                            ; ---------------------------------------------------------------------------
0001FA9A                            Debug_MZ:
0001FA9A                            	include "_inc\Debug list - MZ.asm"
0001FA9A                            ; ---------------------------------------------------------------------------
0001FA9A                            ; Debug	list - Marble
0001FA9A                            ; ---------------------------------------------------------------------------
0001FA9A 0012                       	dc.w $12
0001FA9C 2500 B438                  	dc.l Map_obj25+$25000000
0001FAA0 0000 26BA                  	dc.w 0, ringart+$2000
0001FAA4 2600 BA1E                  	dc.l Map_obj26+$26000000
0001FAA8 0000 0680                  	dc.b 0,	0, 6, $80
0001FAAC 2200 AF78                  	dc.l Map_obj22+$22000000
0001FAB0 0000 0444                  	dc.b 0,	0, 4, $44
0001FAB4 3600 E506                  	dc.l Map_obj36+$36000000
0001FAB8 0000 051B                  	dc.b 0,	0, 5, $1B
0001FABC 4100 F77E                  	dc.l Map_obj41+$41000000
0001FAC0 0000 0523                  	dc.b 0,	0, 5, $23
0001FAC4 1300 C828                  	dc.l Map_obj14+$13000000
0001FAC8 0000 0345                  	dc.b 0,	0, 3, $45
0001FACC 4601 039C                  	dc.l Map_obj46+$46000000
0001FAD0 0000 4000                  	dc.b 0,	0, $40,	0
0001FAD4 4C01 0D16                  	dc.l Map_obj4C+$4C000000
0001FAD8 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001FADC 4E01 0FFA                  	dc.l Map_obj4E+$4E000000
0001FAE0 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001FAE4 3300 D7D4                  	dc.l Map_obj33+$33000000
0001FAE8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001FAEC 5001 13F4                  	dc.l Map_obj50+$50000000
0001FAF0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001FAF4 5101 18C0                  	dc.l Map_obj51+$51000000
0001FAF8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001FAFC 5201 1B44                  	dc.l Map_obj52+$52000000
0001FB00 0000 02B8                  	dc.b 0,	0, 2, $B8
0001FB04 5300 98D0                  	dc.l Map_obj53+$53000000
0001FB08 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001FB0C 5401 0CDC                  	dc.l Map_obj54+$54000000
0001FB10 0000 8680                  	dc.b 0,	0, $86,	$80
0001FB14 5501 1D38                  	dc.l Map_obj55+$55000000
0001FB18 0000 04B8                  	dc.b 0,	0, 4, $B8
0001FB1C 7801 8F9A                  	dc.l Map_obj78+$78000000
0001FB20 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001FB24 7901 9306                  	dc.l Map_obj79+$79000000
0001FB28 0100 0571                  	dc.w $100, lamppostart
0001FB2C                            	even
0001FB2C                            	even
0001FB2C                            
0001FB2C                            ; ---------------------------------------------------------------------------
0001FB2C                            ; Debug	list - Star Light
0001FB2C                            ; ---------------------------------------------------------------------------
0001FB2C                            Debug_SLZ:
0001FB2C                            	include "_inc\Debug list - SLZ.asm"
0001FB2C                            ; ---------------------------------------------------------------------------
0001FB2C                            ; Debug	list - Star Light
0001FB2C                            ; ---------------------------------------------------------------------------
0001FB2C 000F                       	dc.w $F
0001FB2E 2500 B438                  	dc.l Map_obj25+$25000000
0001FB32 0000 26BA                  	dc.w 0, ringart+$2000
0001FB36 2600 BA1E                  	dc.l Map_obj26+$26000000
0001FB3A 0000 0680                  	dc.b 0,	0, 6, $80
0001FB3E 5901 284C                  	dc.l Map_obj59+$59000000
0001FB42 0000 4000                  	dc.b 0,	0, $40,	0
0001FB46 5300 98D0                  	dc.l Map_obj53+$53000000
0001FB4A 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001FB4E 1800 9328                  	dc.l Map_obj18b+$18000000
0001FB52 0000 4000                  	dc.b 0,	0, $40,	0
0001FB56 5A01 2994                  	dc.l Map_obj5A+$5A000000
0001FB5A 0000 4000                  	dc.b 0,	0, $40,	0
0001FB5E 5B01 2B5A                  	dc.l Map_obj5B+$5B000000
0001FB62 0000 4000                  	dc.b 0,	0, $40,	0
0001FB66 5D01 3148                  	dc.l Map_obj5D+$5D000000
0001FB6A 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001FB6E 5E01 34E8                  	dc.l Map_obj5E+$5E000000
0001FB72 0000 0374                  	dc.b 0,	0, 3, $74
0001FB76 4100 F77E                  	dc.l Map_obj41+$41000000
0001FB7A 0000 0523                  	dc.b 0,	0, 5, $23
0001FB7E 1300 C828                  	dc.l Map_obj14+$13000000
0001FB82 0000 0480                  	dc.b 0,	0, 4, $80
0001FB86 1C00 9A16                  	dc.l Map_obj1C+$1C000000
0001FB8A 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001FB8E 5F01 3766                  	dc.l Map_obj5F+$5F000000
0001FB92 0000 0400                  	dc.b 0,	0, 4, 0
0001FB96 6001 3A16                  	dc.l Map_obj60+$60000000
0001FB9A 0000 2429                  	dc.b 0,	0, $24,	$29
0001FB9E 7901 9306                  	dc.l Map_obj79+$79000000
0001FBA2 0100 0571                  	dc.w $100, lamppostart
0001FBA6                            	even
0001FBA6                            	even
0001FBA6                            
0001FBA6                            ; ---------------------------------------------------------------------------
0001FBA6                            ; Debug	list - Spring Yard
0001FBA6                            ; ---------------------------------------------------------------------------
0001FBA6                            Debug_SYZ:
0001FBA6                            	include "_inc\Debug list - SYZ.asm"
0001FBA6                            ; ---------------------------------------------------------------------------
0001FBA6                            ; Debug	list - Spring Yard
0001FBA6                            ; ---------------------------------------------------------------------------
0001FBA6 000F                       	dc.w $F
0001FBA8 2500 B438                  	dc.l Map_obj25+$25000000
0001FBAC 0000 26BA                  	dc.w 0, ringart+$2000
0001FBB0 2600 BA1E                  	dc.l Map_obj26+$26000000
0001FBB4 0000 0680                  	dc.b 0,	0, 6, $80
0001FBB8 3600 E506                  	dc.l Map_obj36+$36000000
0001FBBC 0000 051B                  	dc.b 0,	0, 5, $1B
0001FBC0 4100 F77E                  	dc.l Map_obj41+$41000000
0001FBC4 0000 0523                  	dc.b 0,	0, 5, $23
0001FBC8 4300 FBFE                  	dc.l Map_obj43+$43000000
0001FBCC 0000 04B8                  	dc.b 0,	0, 4, $B8
0001FBD0 1201 0428                  	dc.l Map_obj12+$12000000
0001FBD4 0000 0000                  	dc.b 0,	0, 0, 0
0001FBD8 4701 05A2                  	dc.l Map_obj47+$47000000
0001FBDC 0000 0380                  	dc.b 0,	0, 3, $80
0001FBE0 1F00 AC98                  	dc.l Map_obj1F+$1F000000
0001FBE4 0000 0400                  	dc.b 0,	0, 4, 0
0001FBE8 2200 AF78                  	dc.l Map_obj22+$22000000
0001FBEC 0000 0444                  	dc.b 0,	0, 4, $44
0001FBF0 5001 13F4                  	dc.l Map_obj50+$50000000
0001FBF4 0000 247B                  	dc.b 0,	0, $24,	$7B
0001FBF8 1800 9316                  	dc.l Map_obj18a+$18000000
0001FBFC 0000 4000                  	dc.b 0,	0, $40,	0
0001FC00 5601 21E8                  	dc.l Map_obj56+$56000000
0001FC04 0000 4000                  	dc.b 0,	0, $40,	0
0001FC08 3200 D398                  	dc.l Map_obj32+$32000000
0001FC0C 0000 0513                  	dc.b 0,	0, 5, $13
0001FC10 7801 8F9A                  	dc.l Map_obj78+$78000000
0001FC14 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001FC18 7901 9306                  	dc.l Map_obj79+$79000000
0001FC1C 0100 0571                  	dc.w $100, lamppostart
0001FC20                            	even
0001FC20                            	even
0001FC20                            
0001FC20                            ; ---------------------------------------------------------------------------
0001FC20                            ; Debug	list - Scrap Brain
0001FC20                            ; ---------------------------------------------------------------------------
0001FC20                            Debug_SBZ:
0001FC20                            	include "_inc\Debug list - SBZ.asm"
0001FC20                            ; ---------------------------------------------------------------------------
0001FC20                            ; Debug	list - Scrap Brain
0001FC20                            ; ---------------------------------------------------------------------------
0001FC20 001D                       	dc.w $1D
0001FC22 2500 B438                  	dc.l Map_obj25+$25000000
0001FC26 0000 26BA                  	dc.w 0, ringart+$2000
0001FC2A 2600 BA1E                  	dc.l Map_obj26+$26000000
0001FC2E 0000 0680                  	dc.b 0,	0, 6, $80
0001FC32 5F01 3766                  	dc.l Map_obj5F+$5F000000
0001FC36 0000 0400                  	dc.b 0,	0, 4, 0
0001FC3A 6001 3A16                  	dc.l Map_obj60+$60000000
0001FC3E 0000 0429                  	dc.b 0,	0, 4, $29
0001FC42 7801 8F9A                  	dc.l Map_obj78+$78000000
0001FC46 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001FC4A 1501 259A                  	dc.l Map_obj15b+$15000000
0001FC4E 0702 4391                  	dc.b 7,	2, $43,	$91
0001FC52 6701 78C8                  	dc.l Map_obj67+$67000000
0001FC56 E000 C344                  	dc.b $E0, 0, $C3, $44
0001FC5A 5201 1B44                  	dc.l Map_obj52+$52000000
0001FC5E 2802 22C0                  	dc.b $28, 2, $22, $C0
0001FC62 3200 D398                  	dc.l Map_obj32+$32000000
0001FC66 0000 0513                  	dc.b 0,	0, 5, $13
0001FC6A 6901 7B30                  	dc.l Map_obj69+$69000000
0001FC6E 0300 4492                  	dc.b 3,	0, $44,	$92
0001FC72 6901 7B8A                  	dc.l Map_obj69a+$69000000
0001FC76 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001FC7A 6A01 7DEA                  	dc.l Map_obj6A+$6A000000
0001FC7E 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001FC82 5300 98D0                  	dc.l Map_obj53+$53000000
0001FC86 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001FC8A 5201 1B44                  	dc.l Map_obj52+$52000000
0001FC8E 3903 4460                  	dc.b $39, 3, $44, $60
0001FC92 6B01 8190                  	dc.l Map_obj6B+$6B000000
0001FC96 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001FC9A 2A00 9F42                  	dc.l Map_obj2A+$2A000000
0001FC9E 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001FCA2 6B01 8190                  	dc.l Map_obj6B+$6B000000
0001FCA6 1301 22C0                  	dc.b $13, 1, $22, $C0
0001FCAA 6A01 7DEA                  	dc.l Map_obj6A+$6A000000
0001FCAE 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001FCB2 6B01 8190                  	dc.l Map_obj6B+$6B000000
0001FCB6 2401 22C0                  	dc.b $24, 1, $22, $C0
0001FCBA 6A01 7DEA                  	dc.l Map_obj6A+$6A000000
0001FCBE 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001FCC2 6B01 8190                  	dc.l Map_obj6B+$6B000000
0001FCC6 3401 22C0                  	dc.b $34, 1, $22, $C0
0001FCCA 6C01 8352                  	dc.l Map_obj6C+$6C000000
0001FCCE 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001FCD2 6D01 007C                  	dc.l Map_obj6D+$6D000000
0001FCD6 6400 83D9                  	dc.b $64, 0, $83, $D9
0001FCDA 6D01 007C                  	dc.l Map_obj6D+$6D000000
0001FCDE 640B 83D9                  	dc.b $64, $B, $83, $D9
0001FCE2 6E01 8408                  	dc.l Map_obj6E+$6E000000
0001FCE6 0400 047E                  	dc.b 4,	0, 4, $7E
0001FCEA 7001 8852                  	dc.l Map_obj70+$70000000
0001FCEE 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001FCF2 7101 2FDE                  	dc.l Map_obj71+$71000000
0001FCF6 1100 8680                  	dc.b $11, 0, $86, $80
0001FCFA 1E00 A3B0                  	dc.l Map_obj1E+$1E000000
0001FCFE 0400 2302                  	dc.b 4,	0, $23,	2
0001FD02 7901 9306                  	dc.l Map_obj79+$79000000
0001FD06 0100 0571                  	dc.w $100, lamppostart
0001FD0A                            	even
0001FD0A                            	even
0001FD0A                            
0001FD0A                            ; ---------------------------------------------------------------------------
0001FD0A                            ; Debug	list - ending sequence / special stage
0001FD0A                            ; ---------------------------------------------------------------------------
0001FD0A                            Debug_Ending:
0001FD0A                            	include "_inc\Debug list - Ending and SS.asm"
0001FD0A                            ; ---------------------------------------------------------------------------
0001FD0A                            ; Debug	list - ending sequence / special stage
0001FD0A                            ; ---------------------------------------------------------------------------
0001FD0A 000D                       	dc.w $D
0001FD0C 2500 B438                  	dc.l Map_obj25+$25000000
0001FD10 0000 26BA                  	dc.w 0, ringart+$2000
0001FD14 4701 05A2                  	dc.l Map_obj47+$47000000
0001FD18 0000 0380                  	dc.b 0,	0, 3, $80
0001FD1C 2800 A9CA                  	dc.l Map_obj28a+$28000000
0001FD20 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001FD24 2800 A9CA                  	dc.l Map_obj28a+$28000000
0001FD28 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001FD2C 2800 A9CA                  	dc.l Map_obj28a+$28000000
0001FD30 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001FD34 2800 A9B2                  	dc.l Map_obj28+$28000000
0001FD38 0D00 0553                  	dc.b $D, 0, 5, $53
0001FD3C 2800 A9B2                  	dc.l Map_obj28+$28000000
0001FD40 0E00 0553                  	dc.b $E, 0, 5, $53
0001FD44 2800 A9B2                  	dc.l Map_obj28+$28000000
0001FD48 0F00 0573                  	dc.b $F, 0, 5, $73
0001FD4C 2800 A9B2                  	dc.l Map_obj28+$28000000
0001FD50 1000 0573                  	dc.b $10, 0, 5,	$73
0001FD54 2800 A9CA                  	dc.l Map_obj28a+$28000000
0001FD58 1100 0585                  	dc.b $11, 0, 5,	$85
0001FD5C 2800 A9E2                  	dc.l Map_obj28b+$28000000
0001FD60 1200 0593                  	dc.b $12, 0, 5,	$93
0001FD64 2800 A9CA                  	dc.l Map_obj28a+$28000000
0001FD68 1300 0565                  	dc.b $13, 0, 5,	$65
0001FD6C 2800 A9E2                  	dc.l Map_obj28b+$28000000
0001FD70 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001FD74                            	even
0001FD74                            	even
0001FD74                            
0001FD74                            ; ---------------------------------------------------------------------------
0001FD74                            ; Main level load blocks
0001FD74                            ; ---------------------------------------------------------------------------
0001FD74                            MainLoadBlocks:
0001FD74                            	include "_inc\Main level load blocks.asm"
0001FD74                            ; ---------------------------------------------------------------------------
0001FD74                            ; Main level load blocks
0001FD74                            ;
0001FD74                            ; ===FORMAT===
0001FD74                            ; level	patterns + (1st	PLC num	* 10^6)
0001FD74                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001FD74                            ; 256x256 mappings
0001FD74                            ; blank, music (unused), pal index (unused), pal index
0001FD74                            ; ---------------------------------------------------------------------------
0001FD74 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001FD78 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001FD7C 0000 0000                  	dc.l Blk256_GHZ
0001FD80 0081 0404                  	dc.b 0,	$81, 4,	4
0001FD84 0000 0000                  	dc.l Nem_LZ+$6000000
0001FD88 0000 0000                  	dc.l Blk16_LZ+$7000000
0001FD8C 0000 0000                  	dc.l Blk256_LZ
0001FD90 0082 0505                  	dc.b 0,	$82, 5,	5
0001FD94 0000 0000                  	dc.l Nem_MZ+$8000000
0001FD98 0000 0000                  	dc.l Blk16_MZ+$9000000
0001FD9C 0000 0000                  	dc.l Blk256_MZ
0001FDA0 0083 0606                  	dc.b 0,	$83, 6,	6
0001FDA4 0000 0000                  	dc.l Nem_SLZ+$A000000
0001FDA8 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001FDAC 0000 0000                  	dc.l Blk256_SLZ
0001FDB0 0084 0707                  	dc.b 0,	$84, 7,	7
0001FDB4 0000 0000                  	dc.l Nem_SYZ+$C000000
0001FDB8 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001FDBC 0000 0000                  	dc.l Blk256_SYZ
0001FDC0 0085 0808                  	dc.b 0,	$85, 8,	8
0001FDC4 0000 0000                  	dc.l Nem_SBZ+$E000000
0001FDC8 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001FDCC 0000 0000                  	dc.l Blk256_SBZ
0001FDD0 0086 0909                  	dc.b 0,	$86, 9,	9
0001FDD4 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001FDD8 0000 0000                  	dc.l Blk16_GHZ
0001FDDC 0000 0000                  	dc.l Blk256_GHZ
0001FDE0 0086 1313                  	dc.b 0,	$86, $13, $13
0001FDE4                            	even
0001FDE4                            	even
0001FDE4                            
0001FDE4                            ; ---------------------------------------------------------------------------
0001FDE4                            ; Pattern load cues
0001FDE4                            ; ---------------------------------------------------------------------------
0001FDE4                            ArtLoadCues:
0001FDE4                            	include "_inc\Pattern load cues.asm"
0001FDE4                            ; ---------------------------------------------------------------------------
0001FDE4                            ; Pattern load cues - index
0001FDE4                            ; ---------------------------------------------------------------------------
0001FDE4 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001FDE8 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001FDEC 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001FDF0 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001FDF4 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001FDF8 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001FDFC 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001FE00 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001FE04 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001FE08 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001FE0C 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001FE10 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001FE14 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001FE18 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001FE1C 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001FE20 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001FE24                            ; ---------------------------------------------------------------------------
0001FE24                            ; Pattern load cues - standard block 1
0001FE24                            ; ---------------------------------------------------------------------------
0001FE24 0002                       PLC_Main:	dc.w 2
0001FE26 0000 0000                  		dc.l Nem_Hud		; HUD
0001FE2A D940                       		dc.w $D940
0001FE2C 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001FE30 FA80                       		dc.w $FA80
0001FE32 0000 0000                  		dc.l Nem_Ring		; rings
0001FE36 D740                       		dc.w ringart*$20
0001FE38                            ; ---------------------------------------------------------------------------
0001FE38                            ; Pattern load cues - standard block 2
0001FE38                            ; ---------------------------------------------------------------------------
0001FE38 0002                       PLC_Main2:	dc.w 2
0001FE3A 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001FE3E AE20                       		dc.w lamppostart*$20
0001FE40 0000 0000                  		dc.l Nem_Points		; points from enemy
0001FE44 AD00                       		dc.w pointsart*$20
0001FE46 0000 0000                  		dc.l Nem_Monitors	; monitors
0001FE4A D000                       		dc.w $D000
0001FE4C                            ; ---------------------------------------------------------------------------
0001FE4C                            ; Pattern load cues - explosion
0001FE4C                            ; ---------------------------------------------------------------------------
0001FE4C 0000                       PLC_Explode:	dc.w 0
0001FE4E 0000 0000                  		dc.l Nem_Explode	; explosion
0001FE52 B400                       		dc.w $B400
0001FE54                            ; ---------------------------------------------------------------------------
0001FE54                            ; Pattern load cues - game/time	over
0001FE54                            ; ---------------------------------------------------------------------------
0001FE54 0000                       PLC_GameOver:	dc.w 0
0001FE56 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001FE5A ABC0                       		dc.w $ABC0
0001FE5C                            ; ---------------------------------------------------------------------------
0001FE5C                            ; Pattern load cues - Green Hill
0001FE5C                            ; ---------------------------------------------------------------------------
0001FE5C 0009                       PLC_GHZ:	dc.w $9
0001FE5E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FE62 6B00                       		dc.w $6B00
0001FE64 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001FE68 7A00                       		dc.w $7A00
0001FE6A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FE6E 8000                       		dc.w $8000
0001FE70 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FE74 8880                       		dc.w $8880
0001FE76 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001FE7A 8F60                       		dc.w $8F60
0001FE7C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001FE80 9360                       		dc.w $9360
0001FE82 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001FE86 9E00                       		dc.w $9E00
0001FE88 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FE8C A360                       		dc.w $A360
0001FE8E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FE92 A460                       		dc.w $A460
0001FE94 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FE98 A660                       		dc.w $A660
0001FE9A 0005                       PLC_GHZ2:	dc.w 5
0001FE9C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FEA0 7000                       		dc.w $7000
0001FEA2 0000 0000                  		dc.l Nem_Bridge		; bridge
0001FEA6 71C0                       		dc.w $71C0
0001FEA8 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001FEAC 7300                       		dc.w $7300
0001FEAE 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001FEB2 7540                       		dc.w $7540
0001FEB4 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001FEB8 A1E0                       		dc.w $A1E0
0001FEBA 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001FEBE 6980                       		dc.w $6980
0001FEC0                            ; ---------------------------------------------------------------------------
0001FEC0                            ; Pattern load cues - Labyrinth
0001FEC0                            ; ---------------------------------------------------------------------------
0001FEC0 000A                       PLC_LZ:		dc.w $A
0001FEC2 0000 0000                  		dc.l Nem_LzBlock1	; block
0001FEC6 3C00                       		dc.w $3C00
0001FEC8 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001FECC 3E00                       		dc.w $3E00
0001FECE 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001FED2 4B20                       		dc.w $4B20
0001FED4 0000 0000                  		dc.l Nem_Water		; water	surface
0001FED8 6000                       		dc.w $6000
0001FEDA 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001FEDE 6200                       		dc.w $6200
0001FEE0 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001FEE4 6500                       		dc.w $6500
0001FEE6 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001FEEA 6900                       		dc.w $6900
0001FEEC 0000 0000                  		dc.l Nem_LzBlock3	; block
0001FEF0 7780                       		dc.w $7780
0001FEF2 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001FEF6 7880                       		dc.w $7880
0001FEF8 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001FEFC 7980                       		dc.w $7980
0001FEFE 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001FF02 94C0                       		dc.w $94C0
0001FF04 000C                       PLC_LZ2:	dc.w $C
0001FF06 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001FF0A 7BC0                       		dc.w $7BC0
0001FF0C 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001FF10 7CC0                       		dc.w $7CC0
0001FF12 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001FF16 7EC0                       		dc.w $7EC0
0001FF18 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001FF1C 5D20                       		dc.w $5D20
0001FF1E 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001FF22 8800                       		dc.w $8800
0001FF24 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001FF28 89E0                       		dc.w $89E0
0001FF2A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FF2E 8CE0                       		dc.w $8CE0
0001FF30 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001FF34 90C0                       		dc.w $90C0
0001FF36 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FF3A A1E0                       		dc.w $A1E0
0001FF3C 0000 0000                  		dc.l Nem_Cork		; cork block
0001FF40 A000                       		dc.w $A000
0001FF42 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FF46 A360                       		dc.w $A360
0001FF48 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FF4C A460                       		dc.w $A460
0001FF4E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FF52 A660                       		dc.w $A660
0001FF54                            ; ---------------------------------------------------------------------------
0001FF54                            ; Pattern load cues - Marble
0001FF54                            ; ---------------------------------------------------------------------------
0001FF54 0008                       PLC_MZ:		dc.w 8
0001FF56 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001FF5A 6000                       		dc.w $6000
0001FF5C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FF60 68A0                       		dc.w $68A0
0001FF62 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FF66 7000                       		dc.w $7000
0001FF68 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001FF6C 71C0                       		dc.w $71C0
0001FF6E 0000 0000                  		dc.l Nem_Lava		; lava
0001FF72 7500                       		dc.w $7500
0001FF74 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FF78 8880                       		dc.w $8880
0001FF7A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FF7E 8F60                       		dc.w $8F60
0001FF80 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001FF84 9700                       		dc.w $9700
0001FF86 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FF8A 9FE0                       		dc.w $9FE0
0001FF8C 0004                       PLC_MZ2:	dc.w 4
0001FF8E 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001FF92 A260                       		dc.w $A260
0001FF94 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FF98 A360                       		dc.w $A360
0001FF9A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FF9E A460                       		dc.w $A460
0001FFA0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FFA4 A660                       		dc.w $A660
0001FFA6 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001FFAA 5700                       		dc.w $5700
0001FFAC                            ; ---------------------------------------------------------------------------
0001FFAC                            ; Pattern load cues - Star Light
0001FFAC                            ; ---------------------------------------------------------------------------
0001FFAC 0007                       PLC_SLZ:	dc.w 7
0001FFAE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FFB2 8000                       		dc.w $8000
0001FFB4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FFB8 8520                       		dc.w $8520
0001FFBA 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FFBE 9000                       		dc.w $9000
0001FFC0 0000 0000                  		dc.l Nem_SlzBlock	; block
0001FFC4 9C00                       		dc.w $9C00
0001FFC6 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001FFCA A260                       		dc.w $A260
0001FFCC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FFD0 A360                       		dc.w $A360
0001FFD2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FFD6 A460                       		dc.w $A460
0001FFD8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FFDC A660                       		dc.w $A660
0001FFDE 0005                       PLC_SLZ2:	dc.w 5
0001FFE0 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001FFE4 6E80                       		dc.w $6E80
0001FFE6 0000 0000                  		dc.l Nem_Fan		; fan
0001FFEA 7400                       		dc.w $7400
0001FFEC 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001FFF0 7980                       		dc.w $7980
0001FFF2 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001FFF6 7B80                       		dc.w $7B80
0001FFF8 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001FFFC 9B00                       		dc.w $9B00
0001FFFE 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
00020002 9E00                       		dc.w $9E00
00020004                            ; ---------------------------------------------------------------------------
00020004                            ; Pattern load cues - Spring Yard
00020004                            ; ---------------------------------------------------------------------------
00020004 0003                       PLC_SYZ:	dc.w 3
00020006 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0002000A 8000                       		dc.w $8000
0002000C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
00020010 8880                       		dc.w $8880
00020012 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
00020016 8F60                       		dc.w $8F60
00020018 0000 0000                  		dc.l Nem_Roller		; roller enemy
0002001C 9700                       		dc.w $9700
0002001E 0006                       PLC_SYZ2:	dc.w 6
00020020 0000 0000                  		dc.l Nem_Bumper		; bumper
00020024 7000                       		dc.w $7000
00020026 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0002002A 72C0                       		dc.w $72C0
0002002C 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
00020030 7740                       		dc.w $7740
00020032 0000 0000                  		dc.l Nem_LzSwitch	; switch
00020036 A1E0                       		dc.w $A1E0
00020038 0000 0000                  		dc.l Nem_Spikes		; spikes
0002003C A360                       		dc.w $A360
0002003E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00020042 A460                       		dc.w $A460
00020044 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00020048 A660                       		dc.w $A660
0002004A                            ; ---------------------------------------------------------------------------
0002004A                            ; Pattern load cues - Scrap Brain
0002004A                            ; ---------------------------------------------------------------------------
0002004A 000A                       PLC_SBZ:	dc.w $A
0002004C 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
00020050 5800                       		dc.w $5800
00020052 0000 0000                  		dc.l Nem_SbzDoor1	; door
00020056 5D00                       		dc.w $5D00
00020058 0000 0000                  		dc.l Nem_Girder		; girder
0002005C 5E00                       		dc.w $5E00
0002005E 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
00020062 6040                       		dc.w $6040
00020064 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
00020068 6880                       		dc.w $6880
0002006A 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0002006E 6900                       		dc.w $6900
00020070 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
00020074 7220                       		dc.w $7220
00020076 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0002007A 76A0                       		dc.w $76A0
0002007C 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
00020080 7B20                       		dc.w $7B20
00020082 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
00020086 7EA0                       		dc.w $7EA0
00020088 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0002008C 9860                       		dc.w $9860
0002008E 000C                       PLC_SBZ2:	dc.w $C
00020090 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
00020094 5600                       		dc.w $5600
00020096 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0002009A 8000                       		dc.w $8000
0002009C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
000200A0 8520                       		dc.w $8520
000200A2 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
000200A6 8C00                       		dc.w $8C00
000200A8 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
000200AC 8DE0                       		dc.w $8DE0
000200AE 0000 0000                  		dc.l Nem_Electric	; electric orb
000200B2 8FC0                       		dc.w $8FC0
000200B4 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
000200B8 9240                       		dc.w $9240
000200BA 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
000200BE 7F20                       		dc.w $7F20
000200C0 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
000200C4 9BE0                       		dc.w $9BE0
000200C6 0000 0000                  		dc.l Nem_LzSwitch	; switch
000200CA A1E0                       		dc.w $A1E0
000200CC 0000 0000                  		dc.l Nem_Spikes		; spikes
000200D0 A360                       		dc.w $A360
000200D2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
000200D6 A460                       		dc.w $A460
000200D8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
000200DC A660                       		dc.w $A660
000200DE                            ; ---------------------------------------------------------------------------
000200DE                            ; Pattern load cues - title card
000200DE                            ; ---------------------------------------------------------------------------
000200DE 0000                       PLC_TitleCard:	dc.w 0
000200E0 0000 0000                  		dc.l Nem_TitleCard
000200E4 B000                       		dc.w $B000
000200E6                            ; ---------------------------------------------------------------------------
000200E6                            ; Pattern load cues - act 3 boss
000200E6                            ; ---------------------------------------------------------------------------
000200E6 0005                       PLC_Boss:	dc.w 5
000200E8 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
000200EC 8000                       		dc.w $8000
000200EE 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
000200F2 8D80                       		dc.w $8D80
000200F4 0000 0000                  		dc.l Nem_Prison		; prison capsule
000200F8 93A0                       		dc.w $93A0
000200FA 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
000200FE A300                       		dc.w $A300
00020100 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
00020104 A300                       		dc.w $A300
00020106 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0002010A A540                       		dc.w $A540
0002010C                            ; ---------------------------------------------------------------------------
0002010C                            ; Pattern load cues - act 1/2 signpost
0002010C                            ; ---------------------------------------------------------------------------
0002010C 0002                       PLC_Signpost:	dc.w 2
0002010E 0000 0000                  		dc.l Nem_SignPost	; signpost
00020112 D000                       		dc.w $D000
00020114 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
00020118 96C0                       		dc.w $96C0
0002011A 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0002011E 8C40                       		dc.w $8C40
00020120                            ; ---------------------------------------------------------------------------
00020120                            ; Pattern load cues - beta special stage warp effect
00020120                            ; ---------------------------------------------------------------------------
00020120 0000                       PLC_Warp:	dc.w 0
00020122 0000 0000                  		dc.l Nem_Warp
00020126 A820                       		dc.w $A820
00020128                            ; ---------------------------------------------------------------------------
00020128                            ; Pattern load cues - special stage
00020128                            ; ---------------------------------------------------------------------------
00020128 000C                       PLC_SpeStage:	dc.w $C
0002012A 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0002012E 0000                       		dc.w 0
00020130 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
00020134 0A20                       		dc.w $A20
00020136 0000 0000                  		dc.l Nem_Bumper		; bumper
0002013A 4760                       		dc.w $4760
0002013C 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
00020140 4A20                       		dc.w $4A20
00020142 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
00020146 4C60                       		dc.w $4C60
00020148 0000 0000                  		dc.l Nem_SSRBlock	; R block
0002014C 5E00                       		dc.w $5E00
0002014E 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
00020152 6E00                       		dc.w $6E00
00020154 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
00020158 7E00                       		dc.w $7E00
0002015A 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0002015E 8E00                       		dc.w $8E00
00020160 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
00020164 9E00                       		dc.w $9E00
00020166 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0002016A BE00                       		dc.w $BE00
0002016C 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
00020170 EE00                       		dc.w $EE00
00020172 0000 0000                  		dc.l Nem_Ring		; rings
00020176 45A0                       		dc.w ssringart*$20
00020178                            ; ---------------------------------------------------------------------------
00020178                            ; Pattern load cues - GHZ animals
00020178                            ; ---------------------------------------------------------------------------
00020178 0001                       PLC_GHZAnimals:	dc.w 1
0002017A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002017E B000                       		dc.w $B000
00020180 0000 0000                  		dc.l Nem_Flicky		; flicky
00020184 B240                       		dc.w $B240
00020186                            ; ---------------------------------------------------------------------------
00020186                            ; Pattern load cues - LZ animals
00020186                            ; ---------------------------------------------------------------------------
00020186 0001                       PLC_LZAnimals:	dc.w 1
00020188 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0002018C B000                       		dc.w $B000
0002018E 0000 0000                  		dc.l Nem_Seal		; seal
00020192 B240                       		dc.w $B240
00020194                            ; ---------------------------------------------------------------------------
00020194                            ; Pattern load cues - MZ animals
00020194                            ; ---------------------------------------------------------------------------
00020194 0001                       PLC_MZAnimals:	dc.w 1
00020196 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0002019A B000                       		dc.w $B000
0002019C 0000 0000                  		dc.l Nem_Seal		; seal
000201A0 B240                       		dc.w $B240
000201A2                            ; ---------------------------------------------------------------------------
000201A2                            ; Pattern load cues - SLZ animals
000201A2                            ; ---------------------------------------------------------------------------
000201A2 0001                       PLC_SLZAnimals:	dc.w 1
000201A4 0000 0000                  		dc.l Nem_Pig		; pig
000201A8 B000                       		dc.w $B000
000201AA 0000 0000                  		dc.l Nem_Flicky		; flicky
000201AE B240                       		dc.w $B240
000201B0                            ; ---------------------------------------------------------------------------
000201B0                            ; Pattern load cues - SYZ animals
000201B0                            ; ---------------------------------------------------------------------------
000201B0 0001                       PLC_SYZAnimals:	dc.w 1
000201B2 0000 0000                  		dc.l Nem_Pig		; pig
000201B6 B000                       		dc.w $B000
000201B8 0000 0000                  		dc.l Nem_Chicken	; chicken
000201BC B240                       		dc.w $B240
000201BE                            ; ---------------------------------------------------------------------------
000201BE                            ; Pattern load cues - SBZ animals
000201BE                            ; ---------------------------------------------------------------------------
000201BE 0001                       PLC_SBZAnimals:	dc.w 1
000201C0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
000201C4 B000                       		dc.w $B000
000201C6 0000 0000                  		dc.l Nem_Chicken	; chicken
000201CA B240                       		dc.w $B240
000201CC                            ; ---------------------------------------------------------------------------
000201CC                            ; Pattern load cues - special stage results screen
000201CC                            ; ---------------------------------------------------------------------------
000201CC 0001                       PLC_SpeStResult:dc.w 1
000201CE 0000 0000                  		dc.l Nem_ResultEm	; emeralds
000201D2 A820                       		dc.w $A820
000201D4 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
000201D8 AA20                       		dc.w $AA20
000201DA                            ; ---------------------------------------------------------------------------
000201DA                            ; Pattern load cues - ending sequence
000201DA                            ; ---------------------------------------------------------------------------
000201DA 000C                       PLC_Ending:	dc.w $C
000201DC 0000 0000                  		dc.l Nem_Stalk		; flower stalk
000201E0 6B00                       		dc.w $6B00
000201E2 0000 0000                  		dc.l Nem_EndFlower	; flowers
000201E6 7400                       		dc.w $7400
000201E8 0000 0000                  		dc.l Nem_EndEm		; emeralds
000201EC 78A0                       		dc.w $78A0
000201EE 0000 0000                  		dc.l Nem_EndSonic	; Sonic
000201F2 7C20                       		dc.w $7C20
000201F4 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
000201F8 A480                       		dc.w $A480
000201FA 0000 0000                  		dc.l Nem_Rabbit		; rabbit
000201FE AA60                       		dc.w $AA60
00020200 0000 0000                  		dc.l Nem_Chicken	; chicken
00020204 ACA0                       		dc.w $ACA0
00020206 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0002020A AE60                       		dc.w $AE60
0002020C 0000 0000                  		dc.l Nem_Seal		; seal
00020210 B0A0                       		dc.w $B0A0
00020212 0000 0000                  		dc.l Nem_Pig		; pig
00020216 B260                       		dc.w $B260
00020218 0000 0000                  		dc.l Nem_Flicky		; flicky
0002021C B4A0                       		dc.w $B4A0
0002021E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
00020222 B660                       		dc.w $B660
00020224 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
00020228 B8A0                       		dc.w $B8A0
0002022A                            ; ---------------------------------------------------------------------------
0002022A                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0002022A                            ; ---------------------------------------------------------------------------
0002022A 0002                       PLC_TryAgain:	dc.w 2
0002022C 0000 0000                  		dc.l Nem_EndEm		; emeralds
00020230 78A0                       		dc.w $78A0
00020232 0000 0000                  		dc.l Nem_TryAgain	; Eggman
00020236 7C20                       		dc.w $7C20
00020238 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0002023C B400                       		dc.w $B400
0002023E                            ; ---------------------------------------------------------------------------
0002023E                            ; Pattern load cues - Eggman on SBZ 2
0002023E                            ; ---------------------------------------------------------------------------
0002023E 0002                       PLC_EggmanSBZ2:	dc.w 2
00020240 0000 0000                  		dc.l Nem_SbzBlock	; block
00020244 A300                       		dc.w $A300
00020246 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0002024A 8000                       		dc.w $8000
0002024C 0000 0000                  		dc.l Nem_LzSwitch	; switch
00020250 9400                       		dc.w $9400
00020252                            ; ---------------------------------------------------------------------------
00020252                            ; Pattern load cues - final boss
00020252                            ; ---------------------------------------------------------------------------
00020252 0004                       PLC_FZBoss:	dc.w 4
00020254 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
00020258 7400                       		dc.w $7400
0002025A 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0002025E 6000                       		dc.w $6000
00020260 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
00020264 8000                       		dc.w $8000
00020266 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0002026A 8E00                       		dc.w $8E00
0002026C 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
00020270 A540                       		dc.w $A540
00020272                            		even
00020272                            		even
00020272                            
00020272                            		incbin	misc\padding.bin
00020360                            		even
00020360                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
000207C2                            		even
000207C2                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
000208BA                            		even
000208BA                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
000209B4                            		even
000209B4                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00021980                            		even
00021980                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
0002332A 00                         		even
0002332A                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
0002336C                            		even
0002336C                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
0002342A                            		even
0002342A                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000238D2                            		even
000238D2                            ; ---------------------------------------------------------------------------
000238D2                            ; Sprite mappings - Sonic
000238D2                            ; ---------------------------------------------------------------------------
000238D2                            Map_Sonic:
000238D2                            	include "_maps\Sonic.asm"
000238D2                            ; ---------------------------------------------------------------------------
000238D2                            ; Sprite mappings - Sonic
000238D2                            ; ---------------------------------------------------------------------------
000238D2 0000 0000                  		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
000238D6 0000 0000                  		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
000238DA 0000 0000                  		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
000238DE 0000 0000                  		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
000238E2 0000 0000                  		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
000238E6 0000 0000                  		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
000238EA 0000 0000                  		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
000238EE 0000 0000                  		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
000238F2 0000 0000                  		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
000238F6 0000 0000                  		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
000238FA 0000 0000                  		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
000238FE 0000 0000                  		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
00023902 0000 0000                  		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
00023906 0000 0000                  		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
0002390A 0000 0000                  		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
0002390E 0000 0000                  		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
00023912 0000 0000                  		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
00023916 0000 0000                  		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
0002391A 0000 0000                  		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
0002391E 0000 0000                  		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
00023922 0000 0000                  		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
00023926 0000 0000                  		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
0002392A 0000 0000                  		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
0002392E 0000 0000                  		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
00023932 0000 0000                  		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
00023936 0000 0000                  		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
0002393A 0000 0000                  		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
0002393E 0000 0000                  		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
00023942 0000 0000                  		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
00023946 0000 0000                  		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
0002394A 0000 0000                  		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
0002394E 0000 0000                  		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
00023952 0000 0000                  		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
00023956 0000 0000                  		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
0002395A 0000 0000                  		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
0002395E 0000 0000                  		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
00023962 0000 0000                  		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
00023966 0000 0000                  		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
0002396A 0000 0000                  		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
0002396E 0000 0000                  		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
00023972 0000 0000                  		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
00023976 0000 0000                  		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
0002397A 0000 0000                  		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
0002397E 0000 0000                  		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
00023982 00                         byte_21292:	dc.b 0
00023983 04                         byte_21293:	dc.b 4			; standing
00023984 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023989 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
0002398E 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
00023993 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
00023998 03                         byte_212A8:	dc.b 3			; waiting 1
00023999 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
0002399E FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000239A3 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000239A8 03                         byte_212B8:	dc.b 3			; waiting 2
000239A9 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000239AE FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000239B3 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000239B8 03                         byte_212C8:	dc.b 3			; waiting 3
000239B9 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000239BE FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000239C3 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000239C8 03                         byte_212D8:	dc.b 3			; looking up
000239C9 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
000239CE 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
000239D3 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000239D8 04                         byte_212E8:	dc.b 4			; walking 1-1
000239D9 EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
000239DE FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
000239E3 FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
000239E8 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
000239ED 02                         byte_212FD:	dc.b 2			; walking 1-2
000239EE EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
000239F3 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
000239F8 02                         byte_21308:	dc.b 2			; walking 1-3
000239F9 ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
000239FE FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
00023A03 04                         byte_21313:	dc.b 4			; walking 1-4
00023A04 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00023A09 FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
00023A0E FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
00023A13 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
00023A18 02                         byte_21328:	dc.b 2			; walking 1-5
00023A19 EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
00023A1E FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
00023A23 03                         byte_21333:	dc.b 3			; walking 1-6
00023A24 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
00023A29 FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
00023A2E 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
00023A33 05                         byte_21343:	dc.b 5			; walking 2-1
00023A34 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00023A39 EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
00023A3E FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
00023A43 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
00023A48 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
00023A4D 06                         byte_2135D:	dc.b 6			; walking 2-2
00023A4E EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00023A53 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00023A58 FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
00023A5D 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
00023A62 FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
00023A67 F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
00023A6C 04                         byte_2137C:	dc.b 4			; walking 2-3
00023A6D ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00023A72 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00023A77 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
00023A7C 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
00023A81 05                         byte_21391:	dc.b 5			; walking 2-4
00023A82 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00023A87 EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
00023A8C FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
00023A91 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
00023A96 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
00023A9B 04                         byte_213AB:	dc.b 4			; walking 2-5
00023A9C EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00023AA1 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00023AA6 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
00023AAB 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
00023AB0 05                         byte_213C0:	dc.b 5			; walking 2-6
00023AB1 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00023AB6 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00023ABB FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
00023AC0 FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
00023AC5 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
00023ACA 04                         byte_213DA:	dc.b 4			; walking 3-1
00023ACB F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
00023AD0 EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
00023AD5 FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
00023ADA 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
00023ADF 02                         byte_213EF:	dc.b 2			; walking 3-2
00023AE0 F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
00023AE5 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
00023AEA 02                         byte_213FA:	dc.b 2			; walking 3-3
00023AEB F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
00023AF0 F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
00023AF5 04                         byte_21405:	dc.b 4			; walking 3-4
00023AF6 F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
00023AFB EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
00023B00 FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
00023B05 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
00023B0A 02                         byte_2141A:	dc.b 2			; walking 3-5
00023B0B F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
00023B10 F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
00023B15 03                         byte_21425:	dc.b 3			; walking 3-6
00023B16 F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
00023B1B EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
00023B20 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
00023B25 06                         byte_21435:	dc.b 6			; walking 4-1
00023B26 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00023B2B ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
00023B30 F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
00023B35 F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
00023B3A 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
00023B3F FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
00023B44 06                         byte_21454:	dc.b 6			; walking 4-2
00023B45 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00023B4A E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
00023B4F EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
00023B54 F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
00023B59 F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
00023B5E 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
00023B63 04                         byte_21473:	dc.b 4			; walking 4-3
00023B64 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00023B69 F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
00023B6E EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
00023B73 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00023B78 05                         byte_21488:	dc.b 5			; walking 4-4
00023B79 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00023B7E ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
00023B83 F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
00023B88 F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
00023B8D 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
00023B92 04                         byte_214A2:	dc.b 4			; walking 4-5
00023B93 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00023B98 F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
00023B9D EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
00023BA2 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
00023BA7 05                         byte_214B7:	dc.b 5			; walking 4-6
00023BA8 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00023BAD EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
00023BB2 F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
00023BB7 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00023BBC 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
00023BC1 02                         byte_214D1:	dc.b 2			; running 1-1
00023BC2 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023BC7 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023BCC 02                         byte_214DC:	dc.b 2			; running 1-2
00023BCD EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023BD2 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023BD7 02                         byte_214E7:	dc.b 2			; running 1-3
00023BD8 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023BDD FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023BE2 02                         byte_214F2:	dc.b 2			; running 1-4
00023BE3 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023BE8 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023BED 04                         byte_214FD:	dc.b 4			; running 2-1
00023BEE EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00023BF3 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023BF8 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023BFD FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00023C02 03                         byte_21512:	dc.b 3			; running 2-2
00023C03 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00023C08 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023C0D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023C12 04                         byte_21522:	dc.b 4			; running 2-3
00023C13 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00023C18 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023C1D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023C22 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00023C27 03                         byte_21537:	dc.b 3			; running 2-4
00023C28 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00023C2D EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023C32 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023C37 02                         byte_21547:	dc.b 2			; running 3-1
00023C38 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023C3D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023C42 02                         byte_21552:	dc.b 2			; running 3-2
00023C43 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023C48 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023C4D 02                         byte_2155D:	dc.b 2			; running 3-3
00023C4E F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023C53 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023C58 02                         byte_21568:	dc.b 2			; running 3-4
00023C59 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023C5E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023C63 04                         byte_21573:	dc.b 4			; running 4-1
00023C64 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00023C69 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00023C6E EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023C73 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00023C78 02                         byte_21588:	dc.b 2			; running 4-2
00023C79 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00023C7E EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023C83 04                         byte_21593:	dc.b 4			; running 4-3
00023C84 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00023C89 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00023C8E EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023C93 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00023C98 02                         byte_215A8:	dc.b 2			; running 4-4
00023C99 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00023C9E EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023CA3 01                         byte_215B3:	dc.b 1			; rolling 1
00023CA4 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023CA9 01                         byte_215B9:	dc.b 1			; rolling 2
00023CAA F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023CAF 01                         byte_215BF:	dc.b 1			; rolling 3
00023CB0 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023CB5 01                         byte_215C5:	dc.b 1			; rolling 4
00023CB6 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023CBB 01                         byte_215CB:	dc.b 1			; rolling 5
00023CBC F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023CC1 02                         byte_215D1:	dc.b 2			; warped 1 (unused)
00023CC2 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
00023CC7 F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
00023CCC 01                         byte_215DC:	dc.b 1			; warped 2 (unused)
00023CCD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023CD2 02                         byte_215E2:	dc.b 2			; warped 3 (unused)
00023CD3 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
00023CD8 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
00023CDD 01                         byte_215ED:	dc.b 1			; warped 4 (unused)
00023CDE F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023CE3 02                         byte_215F3:	dc.b 2			; stopping 1
00023CE4 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00023CE9 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
00023CEE 04                         byte_215FE:	dc.b 4			; stopping 2
00023CEF ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00023CF4 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
00023CF9 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
00023CFE 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
00023D03 04                         byte_21613:	dc.b 4			; ducking
00023D04 F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
00023D09 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
00023D0E 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
00023D13 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
00023D18 03                         byte_21628:	dc.b 3			; balancing 1
00023D19 EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
00023D1E F402 0803 00               		dc.b $F4, 2, 8,	3, 0
00023D23 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
00023D28 03                         byte_21638:	dc.b 3			; balancing 2
00023D29 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
00023D2E 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
00023D33 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
00023D38 03                         byte_21648:	dc.b 3			; spinning 1 (LZ)
00023D39 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00023D3E FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00023D43 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00023D48 02                         byte_21658:	dc.b 2			; spinning 2 (LZ)
00023D49 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
00023D4E F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
00023D53 03                         byte_21663:	dc.b 3			; spinning 3 (LZ)
00023D54 F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
00023D59 FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
00023D5E 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
00023D63 03                         byte_21673:	dc.b 3			; spinning 4 (LZ)
00023D64 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00023D69 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00023D6E 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00023D73 03                         byte_21683:	dc.b 3			; bouncing
00023D74 E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
00023D79 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
00023D7E 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
00023D83 04                         byte_21693:	dc.b 4			; hanging 1 (LZ)
00023D84 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023D89 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00023D8E F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00023D93 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00023D98 04                         byte_216A8:	dc.b 4			; hanging 2 (LZ)
00023D99 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023D9E 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00023DA3 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00023DA8 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00023DAD 05                         byte_216BD:	dc.b 5			; celebration leap 1 (unused)
00023DAE E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00023DB3 F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
00023DB8 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00023DBD 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00023DC2 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00023DC7 05                         byte_216D7:	dc.b 5			; celebration leap 2 (unused)
00023DC8 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00023DCD E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
00023DD2 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00023DD7 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00023DDC 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00023DE1 02                         byte_216F1:	dc.b 2			; pushing 1
00023DE2 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00023DE7 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00023DEC 03                         byte_216FC:	dc.b 3			; pushing 2
00023DED EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00023DF2 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00023DF7 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00023DFC 02                         byte_2170C:	dc.b 2			; pushing 3
00023DFD ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00023E02 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00023E07 03                         byte_21717:	dc.b 3			; pushing 4
00023E08 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00023E0D 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00023E12 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00023E17 02                         byte_21727:	dc.b 2			; surfing or sliding (unused)
00023E18 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023E1D FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
00023E22 03                         byte_21732:	dc.b 3			; collecting bubble (unused)
00023E23 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00023E28 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
00023E2D E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
00023E32 03                         byte_21742:	dc.b 3			; death	1
00023E33 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023E38 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023E3D F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
00023E42 05                         byte_21752:	dc.b 5			; drowning
00023E43 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023E48 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023E4D F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00023E52 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00023E57 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00023E5C 05                         byte_2176C:	dc.b 5			; death	2
00023E5D E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023E62 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023E67 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00023E6C 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00023E71 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00023E76 02                         byte_21786:	dc.b 2			; shrinking 1 (unused)
00023E77 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023E7C F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
00023E81 03                         byte_21791:	dc.b 3			; shrinking 2 (unused)
00023E82 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023E87 F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
00023E8C 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
00023E91 01                         byte_217A1:	dc.b 1			; shrinking 3 (unused)
00023E92 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
00023E97 01                         byte_217A7:	dc.b 1			; shrinking 4 (unused)
00023E98 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00023E9D 01                         byte_217AD:	dc.b 1			; shrinking 5 (unused)
00023E9E F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
00023EA3 03                         byte_217B3:	dc.b 3			; injury
00023EA4 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
00023EA9 FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
00023EAE 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
00023EB3 03                         byte_217C3:	dc.b 3			; spinning 5 (LZ)
00023EB4 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
00023EB9 FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
00023EBE 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
00023EC3 03                         byte_217D3:	dc.b 3			; spinning 6 (LZ)
00023EC4 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
00023EC9 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00023ECE 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
00023ED3 03                         byte_217E3:	dc.b 3			; collecting bubble (LZ)
00023ED4 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00023ED9 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
00023EDE 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
00023EE3 02                         byte_217F3:	dc.b 2			; water	slide (LZ)
00023EE4 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
00023EE9 F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
00023EEE                            		even
00023EEE                            		even
00023EEE                            
00023EEE                            ; ---------------------------------------------------------------------------
00023EEE                            ; Uncompressed graphics	loading	array for Sonic
00023EEE                            ; ---------------------------------------------------------------------------
00023EEE                            SonicDynPLC:
00023EEE                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023EEE                            ; ---------------------------------------------------------------------------
00023EEE                            ; Uncompressed graphics	loading	array for Sonic
00023EEE                            ; ---------------------------------------------------------------------------
00023EEE 0000                       		dc.w SonPLC_Blank-SonicDynPLC
00023EF0 0000                       		dc.w SonPLC_Stand-SonicDynPLC
00023EF2 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
00023EF4 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
00023EF6 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
00023EF8 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
00023EFA 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
00023EFC 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
00023EFE 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
00023F00 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
00023F02 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
00023F04 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
00023F06 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
00023F08 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
00023F0A 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
00023F0C 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
00023F0E 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
00023F10 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
00023F12 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
00023F14 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
00023F16 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
00023F18 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
00023F1A 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
00023F1C 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
00023F1E 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
00023F20 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
00023F22 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
00023F24 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
00023F26 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
00023F28 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
00023F2A 0000                       		dc.w SonPLC_Run11-SonicDynPLC
00023F2C 0000                       		dc.w SonPLC_Run12-SonicDynPLC
00023F2E 0000                       		dc.w SonPLC_Run13-SonicDynPLC
00023F30 0000                       		dc.w SonPLC_Run14-SonicDynPLC
00023F32 0000                       		dc.w SonPLC_Run21-SonicDynPLC
00023F34 0000                       		dc.w SonPLC_Run22-SonicDynPLC
00023F36 0000                       		dc.w SonPLC_Run23-SonicDynPLC
00023F38 0000                       		dc.w SonPLC_Run24-SonicDynPLC
00023F3A 0000                       		dc.w SonPLC_Run31-SonicDynPLC
00023F3C 0000                       		dc.w SonPLC_Run32-SonicDynPLC
00023F3E 0000                       		dc.w SonPLC_Run33-SonicDynPLC
00023F40 0000                       		dc.w SonPLC_Run34-SonicDynPLC
00023F42 0000                       		dc.w SonPLC_Run41-SonicDynPLC
00023F44 0000                       		dc.w SonPLC_Run42-SonicDynPLC
00023F46 0000                       		dc.w SonPLC_Run43-SonicDynPLC
00023F48 0000                       		dc.w SonPLC_Run44-SonicDynPLC
00023F4A 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
00023F4C 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
00023F4E 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
00023F50 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
00023F52 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
00023F54 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
00023F56 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
00023F58 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
00023F5A 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
00023F5C 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
00023F5E 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
00023F60 0000                       		dc.w SonPLC_Duck-SonicDynPLC
00023F62 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
00023F64 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
00023F66 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00023F68 0000                       		dc.w SonPLC_Float2-SonicDynPLC
00023F6A 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023F6C 0000                       		dc.w SonPLC_Float4-SonicDynPLC
00023F6E 0000                       		dc.w SonPLC_Spring-SonicDynPLC
00023F70 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
00023F72 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
00023F74 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
00023F76 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
00023F78 0000                       		dc.w SonPLC_Push1-SonicDynPLC
00023F7A 0000                       		dc.w SonPLC_Push2-SonicDynPLC
00023F7C 0000                       		dc.w SonPLC_Push3-SonicDynPLC
00023F7E 0000                       		dc.w SonPLC_Push4-SonicDynPLC
00023F80 0000                       		dc.w SonPLC_Slide-SonicDynPLC
00023F82 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
00023F84 0000                       		dc.w SonPLC_Death1-SonicDynPLC
00023F86 0000                       		dc.w SonPLC_Drown-SonicDynPLC
00023F88 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
00023F8A 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
00023F8C 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
00023F8E 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
00023F90 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
00023F92 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
00023F94 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00023F96 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023F98 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
00023F9A 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
00023F9C 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
00023F9E 00                         SonPLC_Blank:	dc.b 0
00023F9F 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
00023FA8 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
00023FAF 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
00023FB6 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
00023FBD 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
00023FC4 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
00023FCD 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
00023FD2 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
00023FD7 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
00023FE0 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
00023FE5 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
00023FEC 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
00023FF7 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
00024004 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
0002400D 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
00024018 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
00024021 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
0002402C 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
00024035 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
0002403A 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
0002403F 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
00024048 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
0002404D 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
00024054 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
00024061 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
0002406E 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
00024077 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00024082 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
0002408B 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
00024096 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
0002409B 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
000240A0 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
000240A5 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
000240AA 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
000240B3 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
000240BA 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
000240C3 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
000240CA 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
000240CF 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
000240D4 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
000240D9 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
000240DE 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
000240E7 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
000240EC 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
000240F5 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
000240FA 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
000240FD 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
00024100 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
00024103 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
00024106 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
00024109 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
0002410E 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
00024111 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
00024116 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
00024119 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
0002411E 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
00024127 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
00024130 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
00024137 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
0002413E 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
00024145 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
00024148 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
0002414F 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
00024156 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
0002415D 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
00024166 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
0002416F 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
0002417A 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
00024185 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
0002418A 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
00024191 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
00024196 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
0002419D 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
000241A2 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
000241A9 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
000241B0 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
000241BB 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
000241C6 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
000241CB 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
000241D2 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
000241D5 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
000241D8 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
000241DB 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
000241E2 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
000241E9 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
000241EE                            		even
000241EE                            		even
000241EE                            
000241EE                            ; ---------------------------------------------------------------------------
000241EE                            ; Uncompressed graphics	- Sonic
000241EE                            ; ---------------------------------------------------------------------------
000241EE                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002E30E                            		even
0002E30E                            
0002E30E                            ; ---------------------------------------------------------------------------
0002E30E                            ; Uncompressed graphics	- Sonime
0002E30E                            ; ---------------------------------------------------------------------------
0002E30E                            Art_Sonime_Torso:	incbin	artunc\sonime_torso.bin
0002E48E                            		even
0002E48E                            Art_Sonime_Head:	incbin	artunc\sonime_head.bin
0002E70E                            		even
0002E70E                            Art_Sonime_Hair:	incbin	artunc\sonime_hair.bin
0002E80E                            		even
0002E80E                            Art_Sonime_Faces:	incbin	artunc\sonime_faces.bin
0002F10E                            		even
0002F10E                            Art_Sonime_LeftEar:	incbin	artunc\sonime_leftear.bin
0002F14E                            		even
0002F14E                            Art_Sonime_RightEar:	incbin	artunc\sonime_rightear.bin
0002F1CE                            		even
0002F1CE                            
0002F1CE                            ; ---------------------------------------------------------------------------
0002F1CE                            ; Compressed graphics - various
0002F1CE                            ; ---------------------------------------------------------------------------
0002F1CE                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002F2D2                            		even
0002F2D2                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002F30C                            		even
0002F30C                            UnC_Shield:	incbin	artunc\shield.bin	; shield
0002F66C                            		even
0002F66C                            ArtUnc_InvStars:	incbin	artunc\invstars.bin	; invincibility stars
0002FA6C                            		even
0002FA6C                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002FB76                            		even
0002FB76                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002FBC8                            		even
0002FBC8                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002FE10                            		even
0002FE10                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002FF96                            		even
0002FF96                            ; ---------------------------------------------------------------------------
0002FF96                            ; Sprite mappings - walls of the special stage
0002FF96                            ; ---------------------------------------------------------------------------
0002FF96                            Map_SSWalls:
0002FF96                            	include "_maps\SSwalls.asm"
0002FF96                            ; ---------------------------------------------------------------------------
0002FF96                            ; Sprite mappings - walls of the special stage
0002FF96                            ; ---------------------------------------------------------------------------
0002FF96 0000                       Map_SSWalls2:	dc.w byte_2C584-Map_SSWalls2
0002FF98 01                         byte_2C584:	dc.b 1
0002FF99 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002FF9E                            		even
0002FF9E                            		even
0002FF9E                            ; ---------------------------------------------------------------------------
0002FF9E                            ; Compressed graphics - special stage
0002FF9E                            ; ---------------------------------------------------------------------------
0002FF9E                            Art_SSWalls:	incbin	artunc\sswalls.bin	; special stage walls
00031F9E                            		even
00031F9E                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000320D2                            		even
000320D2                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032D62                            		even
00032D62                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00033062                            		even
00033062                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033556                            		even
00033556                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033644                            		even
00033644                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033714                            		even
00033714                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0003380A                            		even
0003380A                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033868                            		even
00033868                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000338FA                            		even
000338FA                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000339BC                            		even
000339BC                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033A8A                            		even
00033A8A                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033B56                            		even
00033B56                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033C1E                            		even
00033C1E                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033CE8                            		even
00033CE8                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033DB8                            		even
00033DB8                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033FAC                            		even
00033FAC                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00034114                            		even
00034114                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000341C4                            		even
000341C4                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003429E                            		even
0003429E                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00034322                            		even
00034322                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000344A0                            		even
000344A0                            ; ---------------------------------------------------------------------------
000344A0                            ; Compressed graphics - GHZ stuff
000344A0                            ; ---------------------------------------------------------------------------
000344A0                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000344EA                            		even
000344EA                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034604                            		even
00034604                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
000346F0                            		even
000346F0                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034738                            		even
00034738                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000348D6                            		even
000348D6                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034952                            		even
00034952                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034B66                            		even
00034B66                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034C92                            		even
00034C92                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034DC0                            		even
00034DC0                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034E5E                            		even
00034E5E                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034EBE                            		even
00034EBE                            ; ---------------------------------------------------------------------------
00034EBE                            ; Compressed graphics - LZ stuff
00034EBE                            ; ---------------------------------------------------------------------------
00034EBE                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034FE2                            		even
00034FE2                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000357D6                            		even
000357D6                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035956                            		even
00035956                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035AC0                            		even
00035AC0                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000360AA 00                         		even
000360AA                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036160                            		even
00036160                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00036202                            		even
00036202                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003635E                            		even
0003635E                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000363C2                            		even
000363C2                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036514                            		even
00036514                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000369F6                            		even
000369F6                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036B66                            		even
00036B66                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036E1E                            		even
00036E1E                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036F56                            		even
00036F56                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037080                            		even
00037080                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037190                            		even
00037190                            ; ---------------------------------------------------------------------------
00037190                            ; Compressed graphics - MZ stuff
00037190                            ; ---------------------------------------------------------------------------
00037190                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003741E                            		even
0003741E                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000374DC                            		even
000374DC                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037594                            		even
00037594                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000375E8                            		even
000375E8                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000378C6                            		even
000378C6                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000381DC                            		even
000381DC                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038340                            		even
00038340                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000383C8                            		even
000383C8                            ; ---------------------------------------------------------------------------
000383C8                            ; Compressed graphics - SLZ stuff
000383C8                            ; ---------------------------------------------------------------------------
000383C8                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038604                            		even
00038604                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0003874A                            		even
0003874A                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003898E                            		even
0003898E                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000389F0                            		even
000389F0                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038AD2                            		even
00038AD2                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038CB4                            		even
00038CB4                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038DC0                            		even
00038DC0                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038E64                            		even
00038E64                            ; ---------------------------------------------------------------------------
00038E64                            ; Compressed graphics - SYZ stuff
00038E64                            ; ---------------------------------------------------------------------------
00038E64                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038FCE                            		even
00038FCE                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00039030                            		even
00039030                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00039112                            		even
00039112                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000393A0                            		even
000393A0                            ; ---------------------------------------------------------------------------
000393A0                            ; Compressed graphics - SBZ stuff
000393A0                            ; ---------------------------------------------------------------------------
000393A0                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000393F4                            		even
000393F4                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039690                            		even
00039690                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039894                            		even
00039894                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039A32                            		even
00039A32                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039D62                            		even
00039D62                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039F40                            		even
00039F40                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039F98                            		even
00039F98                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A118                            		even
0003A118                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A216                            		even
0003A216                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A3A2                            		even
0003A3A2                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A3F2                            		even
0003A3F2                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A44A                            		even
0003A44A                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A546                            		even
0003A546                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A65C                            		even
0003A65C                            ; ---------------------------------------------------------------------------
0003A65C                            ; Compressed graphics - enemies
0003A65C                            ; ---------------------------------------------------------------------------
0003A65C                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003AA1C                            		even
0003AA1C                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AF0A                            		even
0003AF0A                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B2B0                            		even
0003B2B0                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B498                            		even
0003B498                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003BB82                            		even
0003BB82                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BDEA                            		even
0003BDEA                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003C066 00                         		even
0003C066                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C58A                            		even
0003C58A                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C814                            		even
0003C814                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CE32                            		even
0003CE32                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003D21A                            		even
0003D21A                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D516                            		even
0003D516                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D75E                            		even
0003D75E                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D9F6                            		even
0003D9F6                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003DBD4                            		even
0003DBD4                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DD62                            		even
0003DD62                            ; ---------------------------------------------------------------------------
0003DD62                            ; Compressed graphics - various
0003DD62                            ; ---------------------------------------------------------------------------
0003DD62                            Nem_TitleCard:      incbin  artnem\ttlcards.bin ; title cards
0003ED62                            Nem_TitleCard_End:  even
0003ED62                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003EE58                            		even
0003EE58                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003EF5E                            		even
0003EF5E                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003F052                            		even
0003F052                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003F404 00                         		even
0003F404                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003FA6A                            		even
0003FA6A                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003FB1A                            		even
0003FB1A                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003FCAC                            		even
0003FCAC                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003FDAE                            		even
0003FDAE                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003FE8A                            		even
0003FE8A                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
00040306                            		even
00040306                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
000403C6                            		even
000403C6                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0004053A                            		even
0004053A                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0004083C                            		even
0004083C                            ; ---------------------------------------------------------------------------
0004083C                            ; Compressed graphics - continue screen
0004083C                            ; ---------------------------------------------------------------------------
0004083C                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00040AEC                            		even
00040AEC                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00040D26                            		even
00040D26                            ; ---------------------------------------------------------------------------
00040D26                            ; Compressed graphics - animals
00040D26                            ; ---------------------------------------------------------------------------
00040D26                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040E7E                            		even
00040E7E                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00040FDA                            		even
00040FDA                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00041156                            		even
00041156                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00041272                            		even
00041272                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000413A8                            		even
000413A8                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000414E2                            		even
000414E2                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004163E                            		even
0004163E                            ; ---------------------------------------------------------------------------
0004163E                            ; Compressed graphics - primary patterns and block mappings
0004163E                            ; ---------------------------------------------------------------------------
0004163E                            Blk16_GHZ:	incbin	map16\ghz.bin
00041F52                            		even
00041F52                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
000435B2                            		even
000435B2                            Nem_GHZ_2nd:	incbin	artkos\8x8ghz.kos	; GHZ secondary patterns
00045B38                            		even
00045B38                            Blk256_GHZ:	incbin	map256_u\ghz.bin
0004FF38                            		even
0004FF38                            Blk16_LZ:	incbin	map16\lz.bin
0005033C                            		even
0005033C                            Nem_LZ:		incbin	artkos\8x8lz.kos	; LZ primary patterns
00051EAC                            		even
00051EAC                            Blk256_LZ:	incbin	map256_u\lz.bin
0005BEAC                            		even
0005BEAC                            Blk16_MZ:	incbin	map16\mz.bin
0005C6B6                            		even
0005C6B6                            Nem_MZ:		incbin	artkos\8x8mz.kos	; MZ primary patterns
0005E670                            		even
0005E670                            Blk256_MZ:	incbin	map256_u\mz.bin
00068A70                            		even
00068A70                            Blk16_SLZ:	incbin	map16\slz.bin
00069254                            		even
00069254                            Nem_SLZ:	incbin	artkos\8x8slz.kos	; SLZ primary patterns
0006B94E                            		even
0006B94E                            Blk256_SLZ:	incbin	map256_u\slz.bin
00075D4E                            		even
00075D4E                            Blk16_SYZ:	incbin	map16\syz.bin
000765FC                            		even
000765FC                            Nem_SYZ:	incbin	artkos\8x8syz.kos	; SYZ primary patterns
00078C70                            		even
00078C70                            Blk256_SYZ:	incbin	map256_u\syz.bin
00083070                            		even
00083070                            Blk16_SBZ:	incbin	map16\sbz.bin
00083E30                            		even
00083E30                            Nem_SBZ:	incbin	artkos\8x8sbz.kos	; SBZ primary patterns
0008605E                            		even
0008605E                            Blk256_SBZ:	incbin	map256_u\sbz.bin
0009045E                            		even
0009045E                            ; ---------------------------------------------------------------------------
0009045E                            ; Compressed graphics - bosses and ending sequence
0009045E                            ; ---------------------------------------------------------------------------
0009045E                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00090CC2                            		even
00090CC2                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00090FAC                            		even
00090FAC                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00091830                            		even
00091830                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0009205C                            		even
0009205C                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000927C4                            		even
000927C4                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00092D44                            		even
00092D44                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00092E64                            		even
00092E64                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00093062                            		even
00093062                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00094240                            		even
00094240                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00094B84                            		even
00094B84                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00094F5A                            		even
00094F5A                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000954EA                            		even
000954EA                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00095772                            		even
00095772                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00095D70                            		even
00095D70                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00095FF8                            		even
00095FF8                            		incbin	misc\padding2.bin
000960FC                            		even
000960FC                            ; ---------------------------------------------------------------------------
000960FC                            ; Collision data
000960FC                            ; ---------------------------------------------------------------------------
000960FC                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
000961FC                            		even
000961FC                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
000971FC                            		even
000971FC                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
000981FC                            		even
000981FC                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000983B4 00                         		even
000983B4                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0009849A                            		even
0009849A                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0009862A                            		even
0009862A                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0009881E                            		even
0009881E                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00098A12                            		even
00098A12                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00098C6A                            		even
00098C6A                            ; ---------------------------------------------------------------------------
00098C6A                            ; Special layouts
00098C6A                            ; ---------------------------------------------------------------------------
00098C6A                            SS_1:		incbin	sslayout\1.bin
00098EE4                            		even
00098EE4                            SS_2:		incbin	sslayout\2.bin
000992F6                            		even
000992F6                            SS_3:		incbin	sslayout\3.bin
00099652                            		even
00099652                            SS_4:		incbin	sslayout\4.bin
00099B2C                            		even
00099B2C                            SS_5:		incbin	sslayout\5.bin
00099FFE                            		even
00099FFE                            SS_6:		incbin	sslayout\6.bin
0009A30E                            		even
0009A30E                            ; ---------------------------------------------------------------------------
0009A30E                            ; Animated uncompressed graphics
0009A30E                            ; ---------------------------------------------------------------------------
0009A30E                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0009A50E                            		even
0009A50E                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0009A90E                            		even
0009A90E                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0009AD8E                            		even
0009AD8E                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0009B08E                            		even
0009B08E                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0009B68E                            		even
0009B68E                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0009B98E                            		even
0009B98E                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0009C40E                            		even
0009C40E                            
0009C40E                            ; ---------------------------------------------------------------------------
0009C40E                            ; Level	layout index
0009C40E                            ; ---------------------------------------------------------------------------
0009C40E 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0009C414 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0009C41A 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0009C420 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0009C426 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0009C42C 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0009C432 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0009C438 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0009C43E 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0009C444 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0009C44A 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0009C450 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0009C456 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009C45C 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009C462 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009C468 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0009C46E 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0009C474 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0009C47A 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0009C480 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0009C486 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0009C48C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0009C492 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0009C498 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0009C49E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009C4A4 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009C4AA 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009C4B0 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009C4B6                            
0009C4B6                            Level_GHZ1:	incbin	levels\ghz1.bin
0009C5A8                            		even
0009C5A8 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0009C5AC                            Level_GHZ2:	incbin	levels\ghz2.bin
0009C674                            		even
0009C674 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0009C678                            Level_GHZ3:	incbin	levels\ghz3.bin
0009C79A                            		even
0009C79A                            Level_GHZbg:	incbin	levels\ghzbg.bin
0009C7BC                            		even
0009C7BC 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0009C7C0 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0009C7C4                            
0009C7C4                            Level_LZ1:	incbin	levels\lz1.bin
0009C8C6                            		even
0009C8C6                            Level_LZbg:	incbin	levels\lzbg.bin
0009C9C8                            		even
0009C9C8 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0009C9CC                            Level_LZ2:	incbin	levels\lz2.bin
0009CA66                            		even
0009CA66 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0009CA6A                            Level_LZ3:	incbin	levels\lz3.bin
0009CB84                            		even
0009CB84 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0009CB88                            Level_SBZ3:	incbin	levels\sbz3.bin
0009CC42                            		even
0009CC42 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0009CC46                            
0009CC46                            Level_MZ1:	incbin	levels\mz1.bin
0009CCE4                            		even
0009CCE4                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0009CD5E                            		even
0009CD5E                            Level_MZ2:	incbin	levels\mz2.bin
0009CE02                            		even
0009CE02                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0009CE94                            		even
0009CE94 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0009CE98                            Level_MZ3:	incbin	levels\mz3.bin
0009CF7A                            		even
0009CF7A                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0009D01E                            		even
0009D01E 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0009D022 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0009D026                            
0009D026                            Level_SLZ1:	incbin	levels\slz1.bin
0009D138                            		even
0009D138                            Level_SLZbg:	incbin	levels\slzbg.bin
0009D1B2                            		even
0009D1B2                            Level_SLZ2:	incbin	levels\slz2.bin
0009D2A2                            		even
0009D2A2                            Level_SLZ3:	incbin	levels\slz3.bin
0009D3BC                            		even
0009D3BC 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0009D3C0                            
0009D3C0                            Level_SYZ1:	incbin	levels\syz1.bin
0009D47C                            		even
0009D47C                            Level_SYZbg:	incbin	levels\syzbg.bin
0009D4B6                            		even
0009D4B6 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0009D4BA                            Level_SYZ2:	incbin	levels\syz2.bin
0009D5BE                            		even
0009D5BE 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0009D5C2                            Level_SYZ3:	incbin	levels\syz3.bin
0009D71C                            		even
0009D71C 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0009D720 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0009D724                            
0009D724                            Level_SBZ1:	incbin	levels\sbz1.bin
0009D846                            		even
0009D846                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0009D884                            		even
0009D884                            Level_SBZ2:	incbin	levels\sbz2.bin
0009D9C6                            		even
0009D9C6                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0009DB30                            		even
0009DB30 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0009DB34 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0009DB38                            Level_End:	incbin	levels\ending.bin
0009DB68 00                         		even
0009DB68 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0009DB6C                            
0009DB6C                            ; ---------------------------------------------------------------------------
0009DB6C                            ; Animated uncompressed giant ring graphics
0009DB6C                            ; ---------------------------------------------------------------------------
0009DB6C                            Art_BigRing:	incbin	artunc\bigring.bin
0009E7AC                            		even
0009E7AC                            
0009E7AC                            		incbin	misc\padding3.bin
0009E848                            		even
0009E848                            
0009E848                            ; ---------------------------------------------------------------------------
0009E848                            ; Sprite locations index
0009E848                            ; ---------------------------------------------------------------------------
0009E848 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E84C 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E850 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E854 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E858 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E85C 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E860 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E864 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E868 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E86C 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E870 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E874 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E878 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E87C 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E880 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E884 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E888 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E88C 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E890 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E894 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E898 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E89C 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E8A0 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E8A4 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E8A8 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E8AC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E8B0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E8B4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E8B8 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E8BC 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0009E8C0 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009E8C4 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E8C8 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E8CC 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0009E8D0 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009E8D4 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E8D8 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0009E8DE                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0009EBFC                            		even
0009EBFC                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0009EFFE                            		even
0009EFFE                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0009F4FC                            		even
0009F4FC                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0009F8E0                            		even
0009F8E0                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0009FB98                            		even
0009FB98                            ObjPos_LZ3:	incbin	objpos\lz3.bin
000A01A4                            		even
000A01A4                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000A060C                            		even
000A060C                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000A063E                            		even
000A063E                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000A0670                            		even
000A0670                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000A06A2                            		even
000A06A2                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000A06D4                            		even
000A06D4                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000A071E                            		even
000A071E                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000A075C                            		even
000A075C                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000A09F6                            		even
000A09F6                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000A0E16                            		even
000A0E16                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000A12D2                            		even
000A12D2                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000A16CE                            		even
000A16CE                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000A19B0                            		even
000A19B0                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000A1E0C                            		even
000A1E0C                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000A219C                            		even
000A219C                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000A2574                            		even
000A2574                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000A2A66                            		even
000A2A66                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000A3096                            		even
000A3096                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000A3612                            		even
000A3612                            ObjPos_FZ:	incbin	objpos\fz.bin
000A3624                            		even
000A3624                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000A3656                            		even
000A3656                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000A3688                            		even
000A3688                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000A36BA                            		even
000A36BA                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000A36EC                            		even
000A36EC                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000A371E                            		even
000A371E                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000A3756                            		even
000A3756                            ObjPos_End:	incbin	objpos\ending.bin
000A38B2                            		even
000A38B2 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000A38B8                            ; ---------------------------------------------------------------------------
000A38B8                            ; Sprite locations index
000A38B8                            ; ---------------------------------------------------------------------------
000A38B8 0000 0000                  RingPos_Index:	dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A38BC 0000 0000                  		dc.w Rings_GHZ2-RingPos_Index, Rings_Null-RingPos_Index
000A38C0 0000 0000                  		dc.w Rings_GHZ3-RingPos_Index, Rings_Null-RingPos_Index
000A38C4 0000 0000                  		dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A38C8 0000 0000                  		dc.w Rings_LZ1-RingPos_Index, Rings_Null-RingPos_Index
000A38CC 0000 0000                  		dc.w Rings_LZ2-RingPos_Index, Rings_Null-RingPos_Index
000A38D0 0000 0000                  		dc.w Rings_LZ3-RingPos_Index, Rings_Null-RingPos_Index
000A38D4 0000 0000                  		dc.w Rings_SBZ3-RingPos_Index, Rings_Null-RingPos_Index
000A38D8 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A38DC 0000 0000                  		dc.w Rings_MZ2-RingPos_Index, Rings_Null-RingPos_Index
000A38E0 0000 0000                  		dc.w Rings_MZ3-RingPos_Index, Rings_Null-RingPos_Index
000A38E4 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A38E8 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A38EC 0000 0000                  		dc.w Rings_SLZ2-RingPos_Index, Rings_Null-RingPos_Index
000A38F0 0000 0000                  		dc.w Rings_SLZ3-RingPos_Index, Rings_Null-RingPos_Index
000A38F4 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A38F8 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A38FC 0000 0000                  		dc.w Rings_SYZ2-RingPos_Index, Rings_Null-RingPos_Index
000A3900 0000 0000                  		dc.w Rings_SYZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3904 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3908 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A390C 0000 0000                  		dc.w Rings_SBZ2-RingPos_Index, Rings_Null-RingPos_Index
000A3910 0000 0000                  		dc.w Rings_FZ-RingPos_Index, Rings_Null-RingPos_Index
000A3914 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3918 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A391C 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3920 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3924 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3928                            Rings_GHZ1:	incbin	rings\ghz1_INDIVIDUAL.bin
000A3B9A                            		even
000A3B9A                            Rings_GHZ2:	incbin	rings\ghz2_INDIVIDUAL.bin
000A3D8C                            		even
000A3D8C                            Rings_GHZ3:	incbin	rings\ghz3_INDIVIDUAL.bin
000A3F7E                            		even
000A3F7E                            Rings_LZ1:	incbin	rings\lz1_INDIVIDUAL.bin
000A4098                            		even
000A4098                            Rings_LZ2:	incbin	rings\lz2_INDIVIDUAL.bin
000A4182                            		even
000A4182                            Rings_LZ3:	incbin	rings\lz3_INDIVIDUAL.bin
000A41F8                            		even
000A41F8                            Rings_SBZ3:	incbin	rings\sbz3_INDIVIDUAL.bin
000A43AE                            		even
000A43AE                            Rings_MZ1:	incbin	rings\mz1_INDIVIDUAL.bin
000A44AC                            		even
000A44AC                            Rings_MZ2:	incbin	rings\mz2_INDIVIDUAL.bin
000A458E                            		even
000A458E                            Rings_MZ3:	incbin	rings\mz3_INDIVIDUAL.bin
000A46B4                            		even
000A46B4                            Rings_SLZ1:	incbin	rings\slz1_INDIVIDUAL.bin
000A48F6                            		even
000A48F6                            Rings_SLZ2:	incbin	rings\slz2_INDIVIDUAL.bin
000A4BC8                            		even
000A4BC8                            Rings_SLZ3:	incbin	rings\slz3_INDIVIDUAL.bin
000A4E9A                            		even
000A4E9A                            Rings_SYZ1:	incbin	rings\syz1_INDIVIDUAL.bin
000A5114                            		even
000A5114                            Rings_SYZ2:	incbin	rings\syz2_INDIVIDUAL.bin
000A5492                            		even
000A5492                            Rings_SYZ3:	incbin	rings\syz3_INDIVIDUAL.bin
000A5724                            		even
000A5724                            Rings_SBZ1:	incbin	rings\sbz1_INDIVIDUAL.bin
000A5A3E                            		even
000A5A3E                            Rings_SBZ2:	incbin	rings\sbz2_INDIVIDUAL.bin
000A5CA8                            		even
000A5CA8                            Rings_FZ:	incbin	rings\fz_INDIVIDUAL.bin
000A5CAE                            		even
000A5CAE                            Rings_End:	incbin	rings\ending_INDIVIDUAL.bin
000A5CB4                            		even
000A5CB4 FFFF 0000                  Rings_Null:	dc.b $FF, $FF, 0, 0
000A5CB8                            ; ---------------------------------------------------------------------------
000A5CB8                            ; ---------------------------------------------------------------------------
000A5CB8                            		incbin	misc\padding4.bin
000A62E2                            		even
000A62E2 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000A62E6 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000A62EA 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000A62EE 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000A62F2 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000A62F6 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000A62FA                            ; ---------------------------------------------------------------------------
000A62FA                            ; PSG instruments used in music
000A62FA                            ; ---------------------------------------------------------------------------
000A62FA 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000A6306 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000A6312 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000A631E                            PSG1:		incbin	sound\psg1.bin
000A6335                            PSG2:		incbin	sound\psg2.bin
000A633C                            PSG3:		incbin	sound\psg3.bin
000A634D                            PSG4:		incbin	sound\psg4.bin
000A6358                            PSG6:		incbin	sound\psg6.bin
000A6367                            PSG5:		incbin	sound\psg5.bin
000A6391                            PSG7:		incbin	sound\psg7.bin
000A63AD                            PSG8:		incbin	sound\psg8.bin
000A63D5                            PSG9:		incbin	sound\psg9.bin
000A63E6                            
000A63E6 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000A63EE                            ; ---------------------------------------------------------------------------
000A63EE                            ; Music	Pointers
000A63EE                            ; ---------------------------------------------------------------------------
000A63EE 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000A63F6 0000 0000 0000 0000        		dc.l Music83, Music84
000A63FE 0000 0000 0000 0000        		dc.l Music85, Music86
000A6406 0000 0000 0000 0000        		dc.l Music87, Music88
000A640E 0000 0000 0000 0000        		dc.l Music89, Music8A
000A6416 0000 0000 0000 0000        		dc.l Music8B, Music8C
000A641E 0000 0000 0000 0000        		dc.l Music8D, Music8E
000A6426 0000 0000 0000 0000        		dc.l Music8F, Music90
000A642E 0000 0000 0000 0000        		dc.l Music91, Music92
000A6436 0000 0000                  		dc.l Music93
000A643A                            ; ---------------------------------------------------------------------------
000A643A                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000A643A                            ; ---------------------------------------------------------------------------
000A643A 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000A644A 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000A645A 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000A646A 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000A647A 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000A648A 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000A649A 9090 9090                  		dc.b $90, $90, $90, $90
000A649E                            
000A649E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A649E                            
000A649E                            sub_71B4C:	
000A649E 4DF9 00FF F000             		lea	($FFF000).l,a6
000A64A4                            
000A64A4 41F9 00A0 0C68             		lea	($A00000+YM_Buffer).l,a0		; CHG: load buffer ID address
000A64AA 33FC 0100 00A1 1100 0839+  		StopZ80						; CHG: request Z80 stop on
000A64BC 1010                       		move.b	(a0),d0					; CHG: load buffer ID
000A64BE 33FC 0000 00A1 1100        		StartZ80					; CHG: request Z80 stop off
000A64C6 B02E 0010                  		cmp.b	$10(a6),d0				; CHG: has the 68k recently written to this buffer?
000A64CA 6600                       		bne.s	SD_ValidList				; CHG: if not, branch
000A64CC 4E75                       		rts						; CHG: return (cannot write to YM cue until Z80 is finished with it)
000A64CE                            
000A64CE                            SD_ValidList:
000A64CE 2D7C 00A0 1000 0010        		move.l	#$A00000+YM_Buffer1,$10(a6)		; set the cue address to buffer 1
000A64D6 4A00                       		tst.b	d0					; is the Z80 accessing buffer 1?
000A64D8 6600                       		bne.s	SD_WriteBuffer1				; if not, branch
000A64DA 2D7C 00A0 1400 0010        		move.l	#$A00000+YM_Buffer2,$10(a6)		; set the cue address to buffer 2
000A64E2                            
000A64E2                            SD_WriteBuffer1:
000A64E2 1D40 0010                  		move.b	d0,$10(a6)				; set buffer ID the 68k is writing to
000A64E6 422E 000E                  		clr.b	$E(a6)
000A64EA 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000A64EE 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000A64F2 532E 0001                  		subq.b	#1,1(a6)
000A64F6 6600                       		bne.s	loc_71B9E
000A64F8 4EBA 0000                  		jsr	sub_7260C(pc)
000A64FC                            
000A64FC                            loc_71B9E:
000A64FC 102E 0004                  		move.b	4(a6),d0
000A6500 6700                       		beq.s	loc_71BA8
000A6502 4EBA 0000                  		jsr	sub_72504(pc)
000A6506                            
000A6506                            loc_71BA8:
000A6506 4A2E 0024                  		tst.b	$24(a6)
000A650A 6700                       		beq.s	loc_71BB2
000A650C 4EBA 0000                  		jsr	sub_7267C(pc)
000A6510                            
000A6510                            loc_71BB2:
000A6510 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000A6514 6700                       		beq.s	loc_71BBC	; if not, branch
000A6516 4EBA 0000                  		jsr	Sound_Play(pc)
000A651A                            
000A651A                            loc_71BBC:
000A651A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A6520 6700                       		beq.s	loc_71BC8
000A6522 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000A6526                            
000A6526                            loc_71BC8:
000A6526 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
000A652A 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
000A652C 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
000A6532                            
000A6532                            SD_NextPCM:
000A6532 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
000A6536 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
000A653A 4A15                       		tst.b	(a5)
000A653C 6A00                       		bpl.s	loc_71BD4
000A653E 4EBA 0000                  		jsr	sub_71C4E(pc)
000A6542                            
000A6542                            loc_71BD4:
000A6542 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
000A6546 422E 0008                  		clr.b	8(a6)
000A654A 7E05                       		moveq	#5,d7
000A654C                            
000A654C                            loc_71BDA:
000A654C DAFC 0030                  		adda.w	#$30,a5
000A6550 4A15                       		tst.b	(a5)
000A6552 6A00                       		bpl.s	loc_71BE6
000A6554 4EBA 0000                  		jsr	sub_71CCA(pc)
000A6558                            
000A6558                            loc_71BE6:
000A6558 51CF FFF2                  		dbf	d7,loc_71BDA
000A655C                            
000A655C 7E02                       		moveq	#2,d7
000A655E                            
000A655E                            loc_71BEC:
000A655E DAFC 0030                  		adda.w	#$30,a5
000A6562 4A15                       		tst.b	(a5)
000A6564 6A00                       		bpl.s	loc_71BF8
000A6566 4EBA 0000                  		jsr	sub_72850(pc)
000A656A                            
000A656A                            loc_71BF8:
000A656A 51CF FFF2                  		dbf	d7,loc_71BEC
000A656E                            
000A656E 1D7C 0080 000E             		move.b	#$80,$E(a6)
000A6574 7E02                       		moveq	#2,d7
000A6576                            
000A6576                            loc_71C04:
000A6576 DAFC 0030                  		adda.w	#$30,a5
000A657A 4A15                       		tst.b	(a5)
000A657C 6A00                       		bpl.s	loc_71C10
000A657E 4EBA 0000                  		jsr	sub_71CCA(pc)
000A6582                            
000A6582                            loc_71C10:
000A6582 51CF FFF2                  		dbf	d7,loc_71C04
000A6586                            
000A6586 7E02                       		moveq	#2,d7
000A6588                            
000A6588                            loc_71C16:
000A6588 DAFC 0030                  		adda.w	#$30,a5
000A658C 4A15                       		tst.b	(a5)
000A658E 6A00                       		bpl.s	loc_71C22
000A6590 4EBA 0000                  		jsr	sub_72850(pc)
000A6594                            
000A6594                            loc_71C22:
000A6594 51CF FFF2                  		dbf	d7,loc_71C16
000A6598 1D7C 0040 000E             		move.b	#$40,$E(a6)
000A659E DAFC 0030                  		adda.w	#$30,a5
000A65A2 4A15                       		tst.b	(a5)
000A65A4 6A00                       		bpl.s	loc_71C38
000A65A6 4EBA 0000                  		jsr	sub_71CCA(pc)
000A65AA                            
000A65AA                            loc_71C38:
000A65AA DAFC 0030                  		adda.w	#$30,a5
000A65AE 4A15                       		tst.b	(a5)
000A65B0 6A00                       		bpl.s	loc_71C44
000A65B2 4EBA 0000                  		jsr	sub_72850(pc)
000A65B6                            
000A65B6                            loc_71C44:
000A65B6 4E75                       		rts	
000A65B8                            
000A65B8                            ; End of function sub_71B4C
000A65B8                            
000A65B8                            
000A65B8                            ; ===========================================================================
000A65B8                            ; ---------------------------------------------------------------------------
000A65B8                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A65B8                            ; ---------------------------------------------------------------------------
000A65B8                            
000A65B8                            SDAC_CheckMute:
000A65B8 102D 0021                  	move.b	$21(a5),d0
000A65BC B02D 0022                  	cmp.b	$22(a5),d0
000A65C0 6700                       	beq.s	S71C4E_NoCHG
000A65C2 4A00                       	tst.b	d0
000A65C4 6A00                       	bpl.s	S71C4E_NoMute
000A65C6                            
000A65C6 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A65C8 49F9 0000 0000             		lea	(StopSample).l,a4		; MUTE
000A65CE 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A65D4 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A65DA 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A65E0 6600                       		bne.s	SDAC_CM_NotePCM2				; if not, branch for PCM 2 writing
000A65E2 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A65E8 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A65EE                            
000A65EE                            SDAC_CM_NotePCM2:
000A65EE 33FC 0100 00A1 1100 0839+  		StopZ80
000A6600 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A6602 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6604 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6606 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A6608 12DC                       		move.b	(a4)+,(a1)+				; ''
000A660A 12DC                       		move.b	(a4)+,(a1)+				; ''
000A660C 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A660E 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6610 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6612 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A6614 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6616 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6618 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A661A 33FC 0000 00A1 1100        		StartZ80
000A6622                            
000A6622                            ;	jsr	sub_726FE(pc)
000A6622                            ;	move.b	$0A(a5),d1
000A6622                            ;	andi.b	#%00111111,d1
000A6622                            ;	move.b	#$B4,d0
000A6622                            ;	jsr	loc_72716
000A6622 08D5 0006                  	bset.b	#$06,(a5)
000A6626 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A662C                            
000A662C                            S71C4E_NoCHG:
000A662C 4E75                       	rts
000A662E                            
000A662E                            S71C4E_NoMute:
000A662E 1B40 0022                  	move.b	d0,$22(a5)
000A6632                            ;	move.b	$0B(a5),d0
000A6632                            ;	jsr	SFM_UpdateVoice(pc)
000A6632                            ;	move.b	$0A(a5),d1
000A6632                            ;	move.b	#$B4,d0
000A6632                            ;	jsr	loc_72716
000A6632 08D5 0006                  	bset.b	#$06,(a5)
000A6636 4E75                       	rts
000A6638                            
000A6638                            ; ===========================================================================
000A6638                            ; ---------------------------------------------------------------------------
000A6638                            ; Subroutine to run a DAC channel ; CHG: The entire routine...
000A6638                            ; ---------------------------------------------------------------------------
000A6638                            
000A6638                            sub_71C4E:
000A6638 6100 FF7E                  	bsr.w	SDAC_CheckMute			; EXTRA - ON/OFF
000A663C                            
000A663C                            	; Volume is being done first, as it'll update with a single
000A663C                            	; frame delay, the PCM playback is a frame behind, as is the
000A663C                            	; pitch control, but the volume change happens immediately,
000A663C                            	; thus, a delay is needed.
000A663C                            
000A663C                            	; *VOLUME DELAY WAS HERE*
000A663C                            
000A663C                            		; And now back to the normal DAC
000A663C                            		; SMPS routine
000A663C                            
000A663C 532D 000E                  		subq.b	#$01,$0E(a5)				; decrease note timer
000A6640 6600 0000                  		bne.w	SDAC_HoldNote				; if still running, branch
000A6644 0895 0004                  		bclr.b	#$04,(a5)				; disable softkey
000A6648 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A664C 286D 0004                  		movea.l	$04(a5),a4				; load tracker address
000A6650 6000                       		bra.s	SDAC_ReadTracker			; continue into loop
000A6652                            
000A6652                            SDAC_ReadFlag:
000A6652 4EBA 0000                  		jsr	sub_72A5A(pc)				; run flags subroutine
000A6656                            
000A6656                            SDAC_ReadTracker:
000A6656 7A00                       		moveq	#$00,d5					; clear d5
000A6658 1A1C                       		move.b	(a4)+,d5				; load byte from SMPS track
000A665A 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A665E 0C05 00E0                  		cmpi.b	#$E0,d5					; is it a flag?
000A6662 64EE                       		bcc.s	SDAC_ReadFlag				; if so, branch
000A6664 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A6668                            
000A6668                            	SDAC_Update:				; EXTRA
000A6668 08D5 0001                  		bset.b	#$01,(a5)				; set channel as resting
000A666C 0405 0080                  		subi.b	#$80,d5					; minus starting note
000A6670 6700                       		beq.s	SDAC_NoFrequency			; if it's mute, branch
000A6672 5515                       		subq.b	#$02,(a5)				; set channel as NOT resting
000A6674 DA2D 0008                  		add.b	$08(a5),d5				; add pitch to it
000A6678 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A667C DA45                       		add.w	d5,d5					; multiply by size of word
000A667E 3B7B 5000 0010             		move.w	(FrequenciesPCM-2)(pc,d5.w),$10(a5)	; save frequency to use
000A6684                            
000A6684                            SDAC_NoFrequency:
000A6684                            
000A6684 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6688 6600 0000                  	bne.w	SDAC_Frequency			; EXTRA
000A668C 1A1C                       		move.b	(a4)+,d5				; load next note
000A668E 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A6692 534C                       		subq.w	#$01,a4					; move back (it's not a timer after all)
000A6694 1B6D 000F 000E             		move.b	$0F(a5),$0E(a5)				; reset timer
000A669A 6000 0000                  		bra.w	SDAC_PlayNote				; continue
000A669E                            
000A669E                            ; ---------------------------------------------------------------------------
000A669E                            ; Note to PCM frequency conversion table
000A669E                            ; ---------------------------------------------------------------------------
000A669E                            ; The octave numbers below assume the samples are playing a default pitch/note
000A669E                            ; of C3 (A5)
000A669E                            ; ---------------------------------------------------------------------------
000A669E                            
000A669E                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000A669E                            
000A669E 0010 0011 0012 0013 0014+  FrequenciesPCM:	dc.w	$0010,$0011,$0012,$0013,$0014,$0015,$0017,$0018,$0019,$001B,$001D,$001E   ; Octave 0 - (81 - 8C)
000A66B6 0020 0022 0024 0026 0028+  		dc.w	$0020,$0022,$0024,$0026,$0028,$002B,$002D,$0030,$0033,$0036,$0039,$003C   ; Octave 1 - (8D - 98)
000A66CE 0040 0044 0048 004C 0051+  		dc.w	$0040,$0044,$0048,$004C,$0051,$0055,$005B,$0060,$0066,$006C,$0072,$0079   ; Octave 2 - (99 - A4)
000A66E6 0080 0088 0090 0098 00A1+  		dc.w	$0080,$0088,$0090,$0098,$00A1,$00AB,$00B5,$00C0,$00CB,$00D7,$00E4,$00F2   ; Octave 3 - (A5 - B0)
000A66FE 0100 010F 011F 0130 0143+  		dc.w	$0100,$010F,$011F,$0130,$0143,$0156,$016A,$0180,$0196,$01AF,$01C8,$01E3   ; Octave 4 - (B1 - BC)
000A6716 0200 021E 023F 0261 0285+  		dc.w	$0200,$021E,$023F,$0261,$0285,$02AB,$02D4,$02FF,$032D,$035D,$0390,$03C7   ; Octave 5 - (BD - C8)
000A672E 0400 043D 047D 04C2 050A+  		dc.w	$0400,$043D,$047D,$04C2,$050A,$0557,$05A8,$05FE,$0659,$06BA,$0721,$078D   ; Octave 6 - (C9 - D4)
000A6746 0800 087A 08FB 0983 0A14+  		dc.w	$0800,$087A,$08FB,$0983,$0A14,$0AAE,$0B50,$0BFD,$0CB3,$0D74,$0E41,$0F1A   ; Octave 7 - (D5 - DF)
000A675E                            
000A675E                            ; ---------------------------------------------------------------------------
000A675E                            ; Writing the sample to Dual PCM
000A675E                            ; ---------------------------------------------------------------------------
000A675E                            
000A675E                            SDAC_Timer:
000A675E 4EBA 0000                  		jsr	sub_71D40(pc)				; correct timer
000A6762                            
000A6762                            SDAC_PlayNote:
000A6762 2B4C 0004                  		move.l	a4,$04(a5)				; update tracker address
000A6766                            
000A6766                            	SDAC_MuteNote:
000A6766 49F9 0000 0000             		lea	(StopSample).l,a4			; load "stop sample" address
000A676C 4A2D 0022                  	tst.b	$22(a5)
000A6770 6B00                       	bmi.s	SDAC_Rest
000A6772 1015                       		move.b	(a5),d0					; load flags
000A6774 0800 0004                  		btst	#$04,d0					; is soft key set?
000A6778 6600                       		bne.s	SDAC_SoftKey				; if so, branch
000A677A E610                       		roxr.b	#$03,d0					; rotate around
000A677C 6500 0000                  		bcs.w	SDAC_Return				; if the channel is being interrupted (bit 2), branch
000A6780 6B00                       		bmi.s	SDAC_Rest				; if the rest bit was set, branch
000A6782 7000                       		moveq	#$00,d0					; clear d0
000A6784 102D 000B                  		move.b	$0B(a5),d0				; load sample ID
000A6788 D040                       		add.w	d0,d0					; multiply by 4 (long-word size)
000A678A D040                       		add.w	d0,d0					; ''
000A678C 49F9 0000 0000             		lea	(SampleList).l,a4			; load sample list
000A6792 2874 0000                  		move.l	(a4,d0.w),a4				; load correct sample z80 pointer address
000A6796                            
000A6796                            SDAC_Rest:
000A6796 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A6798 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A679E 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A67A4 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A67AA 6600                       		bne.s	SDAC_NotePCM2				; if not, branch for PCM 2 writing
000A67AC 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A67B2 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A67B8                            
000A67B8                            SDAC_NotePCM2:
000A67B8 33FC 0100 00A1 1100 0839+  		StopZ80
000A67CA 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A67CC 12DC                       		move.b	(a4)+,(a1)+				; ''
000A67CE 12DC                       		move.b	(a4)+,(a1)+				; ''
000A67D0 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A67D2 12DC                       		move.b	(a4)+,(a1)+				; ''
000A67D4 12DC                       		move.b	(a4)+,(a1)+				; ''
000A67D6 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A67D8 12DC                       		move.b	(a4)+,(a1)+				; ''
000A67DA 12DC                       		move.b	(a4)+,(a1)+				; ''
000A67DC 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A67DE 12DC                       		move.b	(a4)+,(a1)+				; ''
000A67E0 12DC                       		move.b	(a4)+,(a1)+				; ''
000A67E2 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A67E4 33FC 0000 00A1 1100        		StartZ80
000A67EC                            
000A67EC                            SDAC_SoftKey:
000A67EC                            
000A67EC                            	SDAC_Frequency:
000A67EC                            
000A67EC 102D 0009                  		move.b	$09(a5),d0				; load current volume
000A67F0 7200                       	moveq	#$00,d1				; EXTRA
000A67F2 122E 0016                  	move.b	$16(a6),d1			; EXTRA
000A67F6                            ;	lea	(FOP_VolumeList).l,a0		; EXTRA
000A67F6                            ;	move.b	(a0,d1.w),d1			; EXTRA
000A67F6 D201                       	add.b	d1,d1
000A67F8 D001                       	add.b	d1,d0
000A67FA                            
000A67FA 1200                       		move.b	d0,d1					; copy volume to d1
000A67FC 6A00                       		bpl.s	SDAC_ValidVolume			; if it is between 00 and 80, branch
000A67FE 7080                       		moveq	#$FFFFFF80,d0				; set volume to mute (81 - FF is out of bounds)
000A6800                            
000A6800                            SDAC_ValidVolume:
000A6800 B02D 000C                  		cmp.b	$0C(a5),d0				; has the volume changed?
000A6804 6700                       		beq.s	SDAC_NoVolume				; if not, branch (don't bother)
000A6806 1B40 000C                  		move.b	d0,$0C(a5)				; update volume
000A680A 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A680C 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; load volume change instruction address
000A6812 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; load PCM 2 volume address
000A6818 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A681E 6600                       		bne.s	SDAC_VolumePCM2				; if not, branch for PCM 2 writing
000A6820 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; load PCM 1 volume address
000A6826                            
000A6826                            SDAC_VolumePCM2:
000A6826 33FC 0100 00A1 1100 0839+  		StopZ80
000A6838 1080                       		move.b	d0,(a0)					; change PCM volume
000A683A 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A683C 33FC 0000 00A1 1100        		StartZ80
000A6844                            
000A6844                            SDAC_NoVolume:
000A6844                            
000A6844 3C2D 0010                  		move.w	$10(a5),d6				; load frequency
000A6848 0815 0003                  		btst	#$03,(a5)				; is modulation turned on?
000A684C 6700                       		beq.s	SDAC_WriteFrequency			; if not, branch
000A684E 286D 0014                  		movea.l	$14(a5),a4				; load modulation address
000A6852 43ED 0018                  		lea	$18(a5),a1				; load modulation settings RAM
000A6856 0815 0004                  		btst.b	#$04,(a5)				; is soft key set?
000A685A 6600                       		bne.s	SDAC_NoResetModulation			; if so, branch
000A685C 12DC                       		move.b	(a4)+,(a1)+				; reset settings...
000A685E 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6860 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6862 101C                       		move.b	(a4)+,d0				; ''
000A6864 E208                       		lsr.b	#$01,d0					; ''
000A6866 12C0                       		move.b	d0,(a1)+				; ''
000A6868 4259                       		clr.w	(a1)+					; clear modulation frequency
000A686A                            
000A686A                            SDAC_NoResetModulation:
000A686A DC6D 001C                  		add.w	$1C(a5),d6				; add modulation pitch
000A686E 6000                       		bra.s	SDAC_WriteFrequency			; continue
000A6870                            
000A6870                            ; ---------------------------------------------------------------------------
000A6870                            ; Holding a note...
000A6870                            ; ---------------------------------------------------------------------------
000A6870                            
000A6870                            SDAC_HoldNote:
000A6870 1015                       		move.b	(a5),d0					; load flags
000A6872 0200 0003                  		andi.b	#%00000011,d0				; is the channel being interrupted by an SFX, or is resting?
000A6876 6600 0000                  		bne.w	SDAC_Return				; if so, branch
000A687A                            
000A687A 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A687E 6700                       	beq.s	SDAC_NoUpdate			; EXTRA
000A6880 7A00                       	moveq	#$00,d5				; EXTRA
000A6882 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A6886 6000 FDE0                  	bra.w	SDAC_Update			; EXTRA
000A688A                            
000A688A                            	SDAC_NoUpdate:				; EXTRA
000A688A 4EBA 0000                  		jsr	sub_71D9E(pc)				; check for release
000A688E 4EBA 0000                  		jsr	sub_71DC6(pc)				; run modulation and get right frequency to d6
000A6892                            
000A6892                            	; d6 = frequency
000A6892                            
000A6892                            SDAC_WriteFrequency:
000A6892 102D 001E                  		move.b	$1E(a5),d0				; load detune
000A6896 4880                       		ext.w	d0					; sign extend to word
000A6898 D046                       		add.w	d6,d0					; add to frequency (move it up or down subtly)
000A689A 0815 0005                  		btst.b	#$05,(a5)				; is the reverse flag set?
000A689E 6700                       		beq.s	SDAC_NoReverse				; if not, branch
000A68A0 4440                       		neg.w	d0					; reverse
000A68A2                            	;	subi.w	#$0100*2,d0				; move back to Dual PCM's neutral
000A68A2                            
000A68A2                            SDAC_NoReverse:
000A68A2                            	;	move.w	d0,d3					; copy to d3
000A68A2                            	;	smi	d2					; set extend byte if value is negative
000A68A2                            	;	addi.w	#$0100,d3				; convert to true neutral (for overflow)
000A68A2                            	;	muls.w	#Z80E_Read,d3				; multiply by number of reads the Z80 performs (read 18 vs playback 10)
000A68A2                            	;	move.b	d3,d5					; load fraction to d5
000A68A2                            	;	asr.l	#$08,d3					; divide by 100
000A68A2                            	;	move.w	d3,-(sp)				; get upper byte of overflow value
000A68A2                            	;	move.b	(sp),d4					; ''
000A68A2                            	;	move.w	d0,(sp)					; get upper byte of pitch/frequency
000A68A2                            	;	move.b	(sp),d1					; ''
000A68A2                            	;	addq.w	#$02,sp					; move stack forwards (would've done via increment and back...
000A68A2                            								; ...index, but interrupts could be a problem).
000A68A2                            	; d0 = XXXX.DD
000A68A2                            	; d1 = XXQQ.XX
000A68A2                            	; d2 = QQXX.XX
000A68A2                            	; d3 = XXVV.XX
000A68A2                            	; d4 = VVXX.XX
000A68A2                            	; d5 = XXXX.OO
000A68A2                            
000A68A2 74D2                       		moveq	#$FFFFFF00|%11010010,d2
000A68A4 1200                       		move.b	d0,d1
000A68A6 E048                       		lsr.w	#$08,d0
000A68A8 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A68AE 6600                       		bne.s	SDAC_FrequePCM2				; if not, branch for PCM 2 writing
000A68B0 33FC 0100 00A1 1100 0839+  		StopZ80
000A68C2                            	;	move.b	d0,($A00000+PCM1_RateDiv+1)		; write pitch main dividend
000A68C2                            	;	move.b	d1,($A00000+PCM1_RateQuo+1)		; write pitch quotient low
000A68C2                            	;	move.b	d2,($A00000+PCM1_RateQuo+2)		; write pitch quotient high
000A68C2                            	;	move.b	d3,($A00000+PCM1_Overflow+1)		; write low overflow
000A68C2                            	;	move.b	d4,($A00000+PCM1_Overflow+2)		; write high overflow
000A68C2                            	;	move.b	d5,($A00000+PCM1_OverDiv+1)		; write dividend overflow
000A68C2                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A68C2                            
000A68C2 13C0 00A0 05DD             		move.b	d0,($A00000+PCM1_PitchHigh+1)
000A68C8 13C1 00A0 05E8             		move.b	d1,($A00000+PCM1_PitchLow+1)
000A68CE 13C2 00A0 05D2             		move.b	d2,($A00000+PCM1_ChangePitch)		; change "JP C" to "JP NC"
000A68D4 33FC 0000 00A1 1100        		StartZ80
000A68DC                            
000A68DC                            SDAC_Return:
000A68DC 4E75                       		rts						; return
000A68DE                            
000A68DE                            SDAC_FrequePCM2:
000A68DE 33FC 0100 00A1 1100 0839+  		StopZ80
000A68F0                            	;	move.b	d0,($A00000+PCM2_RateDiv+1)		; write pitch main dividend
000A68F0                            	;	move.b	d1,($A00000+PCM2_RateQuo+1)		; write pitch quotient low
000A68F0                            	;	move.b	d2,($A00000+PCM2_RateQuo+2)		; write pitch quotient high
000A68F0                            	;	move.b	d3,($A00000+PCM2_Overflow+1)		; write low overflow
000A68F0                            	;	move.b	d4,($A00000+PCM2_Overflow+2)		; write high overflow
000A68F0                            	;	move.b	d5,($A00000+PCM2_OverDiv+1)		; write dividend overflow
000A68F0                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A68F0                            
000A68F0 13C0 00A0 060E             		move.b	d0,($A00000+PCM2_PitchHigh+1)
000A68F6 13C1 00A0 0619             		move.b	d1,($A00000+PCM2_PitchLow+1)
000A68FC 13C2 00A0 0603             		move.b	d2,($A00000+PCM2_ChangePitch)		; change "JP C" to "JP NC"
000A6902 33FC 0000 00A1 1100        		StartZ80
000A690A 4E75                       		rts						; return
000A690C                            
000A690C                            ; ===========================================================================
000A690C                            ; ---------------------------------------------------------------------------
000A690C                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A690C                            ; ---------------------------------------------------------------------------
000A690C                            
000A690C                            SFM_CheckMute:
000A690C 4A2E 000E                  	tst.b	$0E(a6)
000A6910 6600                       	bne.s	S71CCA_NoCHG
000A6912 102D 0021                  	move.b	$21(a5),d0
000A6916 B02D 0022                  	cmp.b	$22(a5),d0
000A691A 6700                       	beq.s	S71CCA_NoCHG
000A691C 4A00                       	tst.b	d0
000A691E 6A00                       	bpl.s	S71CCA_NoMute
000A6920 4EBA 0000                  	jsr	sub_726FE(pc)
000A6924 122D 000A                  	move.b	$0A(a5),d1
000A6928 0201 003F                  	andi.b	#%00111111,d1
000A692C 103C 00B4                  	move.b	#$B4,d0
000A6930 4EB9 0000 0000             	jsr	loc_72716
000A6936 08D5 0006                  	bset.b	#$06,(a5)
000A693A 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A6940                            
000A6940                            S71CCA_NoCHG:
000A6940 4E75                       	rts
000A6942                            
000A6942                            S71CCA_NoMute:
000A6942 1B40 0022                  	move.b	d0,$22(a5)
000A6946 102D 000B                  	move.b	$0B(a5),d0
000A694A 4EBA 0000                  	jsr	SFM_UpdateVoice(pc)
000A694E                            ;	jsr	loc_726E2(pc)
000A694E 122D 000A                  	move.b	$0A(a5),d1
000A6952 103C 00B4                  	move.b	#$B4,d0
000A6956 4EB9 0000 0000             	jsr	loc_72716
000A695C 08D5 0006                  	bset.b	#$06,(a5)
000A6960 4E75                       	rts
000A6962                            
000A6962                            ; ===========================================================================
000A6962                            ; ---------------------------------------------------------------------------
000A6962                            ; Subroutine to run an FM channel
000A6962                            ; ---------------------------------------------------------------------------
000A6962                            
000A6962                            sub_71CCA:				; XREF: sub_71B4C
000A6962 61A8                       	bsr.s	SFM_CheckMute			; EXTRA - ON/OFF
000A6964                            
000A6964 532D 000E                  		subq.b	#1,$E(a5)
000A6968 6600                       		bne.s	loc_71CE0
000A696A 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A696E 0895 0004                  		bclr	#4,(a5)
000A6972 4EBA 0000                  		jsr	sub_71CEC(pc)
000A6976 4EBA 0000                  		jsr	sub_71E18(pc)
000A697A 6000 0000                  		bra.w	loc_726E2
000A697E                            ; ===========================================================================
000A697E                            
000A697E                            loc_71CE0:
000A697E 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6982 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A6984 4EB9 0000 0000             	jsr	sub_72CB4			; EXTRA
000A698A 7A00                       	moveq	#$00,d5				; EXTRA
000A698C 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A6990 0405 0080                  	subi.b	#$80,d5				; EXTRA
000A6994 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A6996 4EB9 0000 0000             	jsr	SFM_UpdateFreque		; EXTRA
000A699C 6000 0000                  	bra.w	loc_71E24			; EXTRA
000A69A0                            
000A69A0                            	SFM_NoUpdate:				; EXTRA
000A69A0 4EBA 0000                  		jsr	sub_71D9E(pc)
000A69A4 4EBA 0000                  		jsr	sub_71DC6(pc)
000A69A8 6000 0000                  		bra.w	loc_71E24
000A69AC                            ; End of function sub_71CCA
000A69AC                            
000A69AC                            
000A69AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A69AC                            
000A69AC                            
000A69AC                            sub_71CEC:				; XREF: sub_71CCA
000A69AC 286D 0004                  		movea.l	4(a5),a4
000A69B0 0895 0001                  		bclr	#1,(a5)
000A69B4                            
000A69B4                            loc_71CF4:
000A69B4 7A00                       		moveq	#0,d5
000A69B6 1A1C                       		move.b	(a4)+,d5
000A69B8 0C05 00E0                  		cmpi.b	#-$20,d5
000A69BC 6500                       		bcs.s	loc_71D04
000A69BE 4EBA 0000                  		jsr	sub_72A5A(pc)
000A69C2 60F0                       		bra.s	loc_71CF4
000A69C4                            ; ===========================================================================
000A69C4                            
000A69C4                            loc_71D04:
000A69C4 4EBA 0000                  		jsr	sub_726FE(pc)
000A69C8 4A05                       		tst.b	d5
000A69CA 6A00                       		bpl.s	loc_71D1A
000A69CC 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A69D0 4EBA 0000                  		jsr	sub_71D22(pc)
000A69D4 1A1C                       		move.b	(a4)+,d5
000A69D6 6A00                       		bpl.s	loc_71D1A
000A69D8 534C                       		subq.w	#1,a4
000A69DA 6000 0000                  		bra.w	sub_71D60
000A69DE                            ; ===========================================================================
000A69DE                            
000A69DE                            loc_71D1A:
000A69DE 4EBA 0000                  		jsr	sub_71D40(pc)
000A69E2 6000 0000                  		bra.w	sub_71D60
000A69E6                            ; End of function sub_71CEC
000A69E6                            
000A69E6                            
000A69E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A69E6                            
000A69E6                            
000A69E6                            sub_71D22:				; XREF: sub_71CEC
000A69E6 0405 0080                  		subi.b	#$80,d5
000A69EA 6700                       		beq.s	loc_71D58
000A69EC                            
000A69EC                            	SFM_UpdateFreque:			; EXTRA
000A69EC DA2D 0008                  		add.b	8(a5),d5
000A69F0 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A69F4 0245 007F                  		andi.w	#$7F,d5
000A69F8 E34D                       		lsl.w	#1,d5
000A69FA 41FA 0000                  		lea	word_72790(pc),a0
000A69FE 3C30 5000                  		move.w	(a0,d5.w),d6
000A6A02 3B46 0010                  		move.w	d6,$10(a5)
000A6A06 4E75                       		rts	
000A6A08                            ; End of function sub_71D22
000A6A08                            
000A6A08                            
000A6A08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6A08                            
000A6A08                            
000A6A08                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A6A08 1005                       		move.b	d5,d0
000A6A0A 122D 0002                  		move.b	2(a5),d1
000A6A0E                            
000A6A0E                            loc_71D46:
000A6A0E 5301                       		subq.b	#1,d1
000A6A10 6700                       		beq.s	loc_71D4E
000A6A12 D005                       		add.b	d5,d0
000A6A14 60F8                       		bra.s	loc_71D46
000A6A16                            ; ===========================================================================
000A6A16                            
000A6A16                            loc_71D4E:
000A6A16 1B40 000F                  		move.b	d0,$F(a5)
000A6A1A 1B40 000E                  		move.b	d0,$E(a5)
000A6A1E 4E75                       		rts	
000A6A20                            ; End of function sub_71D40
000A6A20                            
000A6A20                            ; ===========================================================================
000A6A20                            
000A6A20                            loc_71D58:				; XREF: sub_71D22
000A6A20 08D5 0001                  		bset	#1,(a5)
000A6A24 426D 0010                  		clr.w	$10(a5)
000A6A28                            
000A6A28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6A28                            
000A6A28                            
000A6A28                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000A6A28 2B4C 0004                  		move.l	a4,4(a5)
000A6A2C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000A6A32 0815 0004                  		btst	#4,(a5)
000A6A36 6600                       		bne.s	locret_71D9C
000A6A38 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000A6A3E 422D 000C                  		clr.b	$C(a5)
000A6A42 0815 0003                  		btst	#3,(a5)
000A6A46 6700                       		beq.s	locret_71D9C
000A6A48 206D 0014                  		movea.l	$14(a5),a0
000A6A4C 1B58 0018                  		move.b	(a0)+,$18(a5)
000A6A50 1B58 0019                  		move.b	(a0)+,$19(a5)
000A6A54 1B58 001A                  		move.b	(a0)+,$1A(a5)
000A6A58 1018                       		move.b	(a0)+,d0
000A6A5A E208                       		lsr.b	#1,d0
000A6A5C 1B40 001B                  		move.b	d0,$1B(a5)
000A6A60 426D 001C                  		clr.w	$1C(a5)
000A6A64                            
000A6A64                            locret_71D9C:
000A6A64 4E75                       		rts	
000A6A66                            ; End of function sub_71D60
000A6A66                            
000A6A66                            
000A6A66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6A66                            
000A6A66                            
000A6A66                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000A6A66 4A2D 0012                  		tst.b	$12(a5)
000A6A6A 6700                       		beq.s	locret_71DC4
000A6A6C 532D 0012                  		subq.b	#1,$12(a5)
000A6A70 6600                       		bne.s	locret_71DC4
000A6A72 4A2E 0008                  		tst.b	$08(a6)						; CHG: is this a PCM channel?
000A6A76 6B00                       		bmi.s	SDCR_StopPCM					; if so, branch (skipping rest flag setting)
000A6A78 08D5 0001                  		bset	#1,(a5)
000A6A7C 4A2D 0001                  		tst.b	1(a5)
000A6A80 6B00 0000                  		bmi.w	loc_71DBE
000A6A84 4EBA 0000                  		jsr	sub_726FE(pc)
000A6A88 584F                       		addq.w	#4,sp
000A6A8A 4E75                       		rts	
000A6A8C                            ; ===========================================================================
000A6A8C                            
000A6A8C                            loc_71DBE:
000A6A8C 4EBA 0000                  		jsr	sub_729A0(pc)
000A6A90 584F                       		addq.w	#4,sp
000A6A92                            
000A6A92                            locret_71DC4:
000A6A92 4E75                       		rts	
000A6A94                            ; End of function sub_71D9E
000A6A94                            
000A6A94                            SDCR_StopPCM:
000A6A94 33FC 0100 00A1 1100 0839+  		StopZ80
000A6AA6 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6AAC 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A6AB2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6AB4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AB6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AB8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6ABA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6ABC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6ABE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6AC0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AC2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AC4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6AC6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AC8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6ACA 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6AD2 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6AD8 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A6ADE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6AE0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AE2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AE4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6AE6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AE8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AEA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6AEC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AEE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AF0 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6AF2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AF4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6AF6 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6AFE 33FC 0000 00A1 1100        		StartZ80
000A6B06 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6B08 4E75                       		rts							; CHG: return
000A6B0A                            
000A6B0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6B0A                            
000A6B0A                            
000A6B0A                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000A6B0A 0815 0003                  		btst	#3,(a5)
000A6B0E 6700                       		beq.s	locret_71E16
000A6B10 4A2D 0018                  		tst.b	$18(a5)
000A6B14 6700                       		beq.s	loc_71DDA
000A6B16 532D 0018                  		subq.b	#1,$18(a5)
000A6B1A 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6B1C 4E75                       		rts	
000A6B1E                            ; ===========================================================================
000A6B1E                            
000A6B1E                            loc_71DDA:
000A6B1E 532D 0019                  		subq.b	#1,$19(a5)
000A6B22 6700                       		beq.s	loc_71DE2
000A6B24 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6B26 4E75                       		rts	
000A6B28                            ; ===========================================================================
000A6B28                            
000A6B28                            loc_71DE2:
000A6B28 206D 0014                  		movea.l	$14(a5),a0
000A6B2C 1B68 0001 0019             		move.b	1(a0),$19(a5)
000A6B32 4A2D 001B                  		tst.b	$1B(a5)
000A6B36 6600                       		bne.s	loc_71DFE
000A6B38 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000A6B3E 442D 001A                  		neg.b	$1A(a5)
000A6B42 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6B44 4E75                       		rts	
000A6B46                            ; ===========================================================================
000A6B46                            
000A6B46                            loc_71DFE:
000A6B46 532D 001B                  		subq.b	#1,$1B(a5)
000A6B4A 1C2D 001A                  		move.b	$1A(a5),d6
000A6B4E 4886                       		ext.w	d6
000A6B50 DC6D 001C                  		add.w	$1C(a5),d6
000A6B54 3B46 001C                  		move.w	d6,$1C(a5)
000A6B58 DC6D 0010                  		add.w	$10(a5),d6
000A6B5C 4E75                       		rts							; CHG: return (don't skip)
000A6B5E                            
000A6B5E                            locret_71E16:
000A6B5E 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6B60 4E75                       		rts	
000A6B62                            ; End of function sub_71DC6
000A6B62                            
000A6B62                            
000A6B62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6B62                            
000A6B62                            
000A6B62                            sub_71E18:				; XREF: sub_71CCA
000A6B62 0815 0001                  		btst	#1,(a5)
000A6B66 6600                       		bne.s	locret_71E48
000A6B68 3C2D 0010                  		move.w	$10(a5),d6
000A6B6C 6700                       		beq.s	loc_71E4A
000A6B6E                            
000A6B6E                            loc_71E24:				; XREF: sub_71CCA
000A6B6E 102D 001E                  		move.b	$1E(a5),d0
000A6B72 4880                       		ext.w	d0
000A6B74 DC40                       		add.w	d0,d6
000A6B76 0815 0002                  		btst	#2,(a5)
000A6B7A 6600                       		bne.s	locret_71E48
000A6B7C 4A2E 000E                  	tst.b	$0E(a6)
000A6B80 6600                       	bne.s	locret_71E48_2
000A6B82 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6B86 6600                       	bne.s	locret_71E48
000A6B88                            
000A6B88                            	locret_71E48_2:
000A6B88 3206                       		move.w	d6,d1
000A6B8A E049                       		lsr.w	#8,d1
000A6B8C 103C 00A4                  		move.b	#-$5C,d0
000A6B90 4EBA 0000                  		jsr	sub_72722(pc)
000A6B94 1206                       		move.b	d6,d1
000A6B96 103C 00A0                  		move.b	#-$60,d0
000A6B9A 4EBA 0000                  		jsr	sub_72722(pc)
000A6B9E                            
000A6B9E                            locret_71E48:
000A6B9E 4E75                       		rts	
000A6BA0                            ; ===========================================================================
000A6BA0                            
000A6BA0                            loc_71E4A:
000A6BA0 08D5 0001                  		bset	#1,(a5)
000A6BA4 4E75                       		rts	
000A6BA6                            ; End of function sub_71E18
000A6BA6                            
000A6BA6                            ; ===========================================================================
000A6BA6                            
000A6BA6                            loc_71E50:				; XREF: sub_71B4C
000A6BA6 6B00                       		bmi.s	loc_71E94
000A6BA8 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000A6BAE 6700 0000                  		beq.w	loc_71EFE
000A6BB2 1D7C 0002 0003             		move.b	#2,3(a6)
000A6BB8 7602                       		moveq	#2,d3
000A6BBA 103C 00B4                  		move.b	#-$4C,d0
000A6BBE 7200                       		moveq	#0,d1
000A6BC0                            
000A6BC0                            loc_71E6A:
000A6BC0 4EBA 0000                  		jsr	sub_7272E(pc)
000A6BC4 4EBA 0000                  		jsr	sub_72764(pc)
000A6BC8 5200                       		addq.b	#1,d0
000A6BCA 51CB FFF4                  		dbf	d3,loc_71E6A
000A6BCE                            
000A6BCE 7602                       		moveq	#2,d3
000A6BD0 7028                       		moveq	#$28,d0
000A6BD2                            
000A6BD2                            loc_71E7C:
000A6BD2 1203                       		move.b	d3,d1
000A6BD4 4EBA 0000                  		jsr	sub_7272E(pc)
000A6BD8 5801                       		addq.b	#4,d1
000A6BDA 4EBA 0000                  		jsr	sub_7272E(pc)
000A6BDE 51CB FFF2                  		dbf	d3,loc_71E7C
000A6BE2                            
000A6BE2 4EBA 0000                  		jsr	sub_729B6(pc)
000A6BE6 6000 F9CE                  		bra.w	loc_71C44
000A6BEA                            ; ===========================================================================
000A6BEA                            
000A6BEA                            loc_71E94:				; XREF: loc_71E50
000A6BEA 422E 0003                  		clr.b	3(a6)
000A6BEE 7630                       		moveq	#$30,d3
000A6BF0 4BEE 0040                  		lea	$40(a6),a5
000A6BF4 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
000A6BF6                            
000A6BF6                            loc_71EA0:
000A6BF6 0815 0007                  		btst	#7,(a5)
000A6BFA 6700                       		beq.s	loc_71EB8
000A6BFC 0815 0002                  		btst	#2,(a5)
000A6C00 6600                       		bne.s	loc_71EB8
000A6C02 4A2E 000E                  	tst.b	$0E(a6)
000A6C06 6600                       	bne.s	loc_71EB8_2
000A6C08 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6C0C 6600                       	bne.s	loc_71EB8
000A6C0E                            
000A6C0E                            	loc_71EB8_2:
000A6C0E 103C 00B4                  		move.b	#-$4C,d0
000A6C12 122D 000A                  		move.b	$A(a5),d1
000A6C16 4EBA 0000                  		jsr	sub_72722(pc)
000A6C1A                            
000A6C1A                            loc_71EB8:
000A6C1A DAC3                       		adda.w	d3,a5
000A6C1C 51CC FFD8                  		dbf	d4,loc_71EA0
000A6C20                            
000A6C20 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6C24 7802                       		moveq	#2,d4
000A6C26                            
000A6C26                            loc_71EC4:
000A6C26 0815 0007                  		btst	#7,(a5)
000A6C2A 6700                       		beq.s	loc_71EDC
000A6C2C 0815 0002                  		btst	#2,(a5)
000A6C30 6600                       		bne.s	loc_71EDC
000A6C32 4A2E 000E                  	tst.b	$0E(a6)
000A6C36 6600                       	bne.s	loc_71EDC_2
000A6C38 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6C3C 6600                       	bne.s	loc_71EDC
000A6C3E                            
000A6C3E                            	loc_71EDC_2:
000A6C3E 103C 00B4                  		move.b	#-$4C,d0
000A6C42 122D 000A                  		move.b	$A(a5),d1
000A6C46 4EBA 0000                  		jsr	sub_72722(pc)
000A6C4A                            
000A6C4A                            loc_71EDC:
000A6C4A DAC3                       		adda.w	d3,a5
000A6C4C 51CC FFD8                  		dbf	d4,loc_71EC4
000A6C50                            
000A6C50 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6C54 0815 0007                  		btst	#7,(a5)
000A6C58 6700                       		beq.s	loc_71EFE
000A6C5A 0815 0002                  		btst	#2,(a5)
000A6C5E 6600                       		bne.s	loc_71EFE
000A6C60 4A2E 000E                  	tst.b	$0E(a6)
000A6C64 6600                       	bne.s	loc_71EFE_2
000A6C66 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6C6A 6600                       	bne.s	loc_71EFE
000A6C6C                            
000A6C6C                            	loc_71EFE_2:
000A6C6C 103C 00B4                  		move.b	#-$4C,d0
000A6C70 122D 000A                  		move.b	$A(a5),d1
000A6C74 4EBA 0000                  		jsr	sub_72722(pc)
000A6C78                            
000A6C78                            loc_71EFE:
000A6C78 6000 F93C                  		bra.w	loc_71C44
000A6C7C                            
000A6C7C                            ; ---------------------------------------------------------------------------
000A6C7C                            ; Subroutine to	play a sound or	music track
000A6C7C                            ; ---------------------------------------------------------------------------
000A6C7C                            
000A6C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6C7C                            
000A6C7C                            
000A6C7C                            Sound_Play:				; XREF: sub_71B4C
000A6C7C 2079 000A 62E2             		movea.l	(Go_SoundTypes).l,a0
000A6C82 43EE 000A                  		lea	$A(a6),a1	; load music track number
000A6C86 1616                       		move.b	0(a6),d3
000A6C88 7802                       		moveq	#2,d4
000A6C8A                            
000A6C8A                            loc_71F12:
000A6C8A 1011                       		move.b	(a1),d0		; move track number to d0
000A6C8C 1200                       		move.b	d0,d1
000A6C8E 4219                       		clr.b	(a1)+
000A6C90 0400 0081                  		subi.b	#$81,d0
000A6C94 6500                       		bcs.s	loc_71F3E
000A6C96 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A6C9C 6700                       		beq.s	loc_71F2C
000A6C9E 1D41 000A                  		move.b	d1,$A(a6)
000A6CA2 6000                       		bra.s	loc_71F3E
000A6CA4                            ; ===========================================================================
000A6CA4                            
000A6CA4                            loc_71F2C:
000A6CA4 0240 007F                  		andi.w	#$7F,d0
000A6CA8 1430 0000                  		move.b	(a0,d0.w),d2
000A6CAC B403                       		cmp.b	d3,d2
000A6CAE 6500                       		bcs.s	loc_71F3E
000A6CB0 1602                       		move.b	d2,d3
000A6CB2 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000A6CB6                            
000A6CB6                            loc_71F3E:
000A6CB6 51CC FFD2                  		dbf	d4,loc_71F12
000A6CBA                            
000A6CBA 4A03                       		tst.b	d3
000A6CBC 6B00                       		bmi.s	locret_71F4A
000A6CBE 1C83                       		move.b	d3,0(a6)
000A6CC0                            
000A6CC0                            locret_71F4A:
000A6CC0 4E75                       		rts	
000A6CC2                            ; End of function Sound_Play
000A6CC2                            
000A6CC2                            
000A6CC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6CC2                            
000A6CC2                            
000A6CC2                            Sound_ChkValue:				; XREF: sub_71B4C
000A6CC2 7E00                       		moveq	#0,d7
000A6CC4 1E2E 0009                  		move.b	9(a6),d7
000A6CC8 6700 0000                  		beq.w	Sound_E4
000A6CCC 6A00                       		bpl.s	locret_71F8C
000A6CCE 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000A6CD4 0C07 009F                  		cmpi.b	#$9F,d7
000A6CD8 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000A6CDC 0C07 00A0                  		cmpi.b	#$A0,d7
000A6CE0 6500 0000                  		bcs.w	locret_71F8C
000A6CE4 0C07 00CF                  		cmpi.b	#$CF,d7
000A6CE8 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000A6CEC 0C07 00D0                  		cmpi.b	#$D0,d7
000A6CF0 6500 0000                  		bcs.w	locret_71F8C
000A6CF4 0C07 00E0                  		cmpi.b	#$E0,d7
000A6CF8 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000A6CFC 0C07 00E4                  		cmpi.b	#$E4,d7
000A6D00 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
000A6D02                            
000A6D02                            locret_71F8C:
000A6D02 4E75                       		rts	
000A6D04                            ; ===========================================================================
000A6D04                            
000A6D04                            Sound_E0toE4:				; XREF: Sound_ChkValue
000A6D04 0407 00E0                  		subi.b	#$E0,d7
000A6D08 E54F                       		lsl.w	#2,d7
000A6D0A 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000A6D0E                            ; ===========================================================================
000A6D0E                            
000A6D0E                            Sound_ExIndex:
000A6D0E 6000 0000                  		bra.w	Sound_E0
000A6D12                            ; ===========================================================================
000A6D12 6000 0000                  		bra.w	Sound_E1
000A6D16                            ; ===========================================================================
000A6D16 6000 0000                  		bra.w	Sound_E2
000A6D1A                            ; ===========================================================================
000A6D1A 6000 0000                  		bra.w	Sound_E3
000A6D1E                            ; ===========================================================================
000A6D1E 6000 0000                  		bra.w	Sound_E4
000A6D22                            ; ===========================================================================
000A6D22                            ; ---------------------------------------------------------------------------
000A6D22                            ; Play "Say-gaa" PCM sound
000A6D22                            ; ---------------------------------------------------------------------------
000A6D22                            
000A6D22                            Sound_E1:
000A6D22 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
000A6D34 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
000A6D3A 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
000A6D40 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
000A6D44 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
000A6D4A 3604                       		move.w	d4,d3					; MJ: get lower word size
000A6D4C 4844                       		swap	d4					; MJ: get upper word size
000A6D4E                            
000A6D4E                            PlayPCM_Loop:
000A6D4E 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
000A6D50 702B                       		moveq	#$2B,d0					; MJ: set delay time
000A6D52 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
000A6D56 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
000A6D5A 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
000A6D5E 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
000A6D62 584F                       		addq.w	#$04,sp					; MJ: skip return address
000A6D64 534B                       		subq.w	#$01,a3					; MJ: move back to address port
000A6D66 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
000A6D68 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
000A6D6A 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
000A6D6E 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
000A6D76 4E75                       		rts						; MJ: return
000A6D78                            
000A6D78                            ; ===========================================================================
000A6D78                            ; ---------------------------------------------------------------------------
000A6D78                            ; Play music track $81-$9F
000A6D78                            ; ---------------------------------------------------------------------------
000A6D78                            
000A6D78                            Sound_81to9F:
000A6D78 33FC 0100 00A1 1100 0839+  		StopZ80
000A6D8A 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6D90 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A6D96 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6D98 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D9A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D9C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6D9E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DA0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DA2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6DA4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DA6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DA8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6DAA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DAC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DAE 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6DB6 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6DBC 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A6DC2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6DC4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DC6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DC8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6DCA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DCC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DCE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6DD0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DD2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DD4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6DD6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DD8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DDA 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6DE2 33FC 0000 00A1 1100        		StartZ80
000A6DEA                            
000A6DEA 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000A6DEE 6600                       		bne.s	loc_72024	; if not, branch
000A6DF0 4A2E 0027                  		tst.b	$27(a6)
000A6DF4 6600 0000                  		bne.w	loc_721B6
000A6DF8 4BEE 0040                  		lea	$40(a6),a5
000A6DFC 700A                       		moveq	#10,d0					; MJ: number of channels in total
000A6DFE                            
000A6DFE                            loc_71FE6:
000A6DFE 0895 0002                  		bclr	#2,(a5)
000A6E02 DAFC 0030                  		adda.w	#$30,a5
000A6E06 51C8 FFF6                  		dbf	d0,loc_71FE6
000A6E0A                            
000A6E0A 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6E0E 7005                       		moveq	#5,d0
000A6E10                            
000A6E10                            loc_71FF8:
000A6E10 0895 0007                  		bclr	#7,(a5)
000A6E14 DAFC 0030                  		adda.w	#$30,a5
000A6E18 51C8 FFF6                  		dbf	d0,loc_71FF8
000A6E1C 4216                       		clr.b	0(a6)
000A6E1E 204E                       		movea.l	a6,a0
000A6E20 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A6E24 303C 0087                  		move.w	#$87,d0
000A6E28                            
000A6E28                            loc_72012:
000A6E28 22D8                       		move.l	(a0)+,(a1)+
000A6E2A 51C8 FFFC                  		dbf	d0,loc_72012
000A6E2E                            
000A6E2E 1D7C 0080 0027             		move.b	#$80,$27(a6)
000A6E34 4216                       		clr.b	0(a6)
000A6E36 6000                       		bra.s	loc_7202C
000A6E38                            ; ===========================================================================
000A6E38                            
000A6E38                            loc_72024:
000A6E38 422E 0027                  		clr.b	$27(a6)
000A6E3C 422E 0026                  		clr.b	$26(a6)
000A6E40                            
000A6E40                            loc_7202C:
000A6E40 4EBA 0000                  		jsr	sub_725CA(pc)
000A6E44                            
000A6E44 2879 000A 62F2             		movea.l	(off_719A0).l,a4
000A6E4A 0407 0081                  		subi.b	#$81,d7
000A6E4E 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000A6E54 2879 000A 62EA             		movea.l	(Go_MusicIndex).l,a4
000A6E5A E54F                       		lsl.w	#2,d7
000A6E5C 2874 7000                  		movea.l	(a4,d7.w),a4
000A6E60 7000                       		moveq	#0,d0
000A6E62 3014                       		move.w	(a4),d0
000A6E64 D08C                       		add.l	a4,d0
000A6E66 2D40 0018                  		move.l	d0,$18(a6)
000A6E6A 102C 0005                  		move.b	5(a4),d0
000A6E6E 1D40 0028                  		move.b	d0,$28(a6)
000A6E72 4A2E 002A                  		tst.b	$2A(a6)
000A6E76 6700                       		beq.s	loc_72068
000A6E78 102E 0029                  		move.b	$29(a6),d0
000A6E7C                            
000A6E7C                            loc_72068:
000A6E7C 1D40 0002                  		move.b	d0,2(a6)
000A6E80 1D40 0001                  		move.b	d0,1(a6)
000A6E84 7200                       		moveq	#0,d1
000A6E86 264C                       		movea.l	a4,a3
000A6E88 5C4C                       		addq.w	#6,a4
000A6E8A 7E00                       		moveq	#0,d7
000A6E8C 1E2B 0002                  		move.b	2(a3),d7
000A6E90 6700 0000                  		beq.w	loc_72114
000A6E94 5307                       		subq.b	#1,d7
000A6E96 123C 00C0                  		move.b	#-$40,d1
000A6E9A 182B 0004                  		move.b	4(a3),d4
000A6E9E 7C30                       		moveq	#$30,d6
000A6EA0 1A3C 0001                  		move.b	#1,d5
000A6EA4 43EE 0040                  		lea	$40(a6),a1
000A6EA8 45FA 0000                  		lea	byte_721BA(pc),a2
000A6EAC                            
000A6EAC                            loc_72098:
000A6EAC 08D1 0007                  		bset	#7,(a1)
000A6EB0 135A 0001                  		move.b	(a2)+,1(a1)
000A6EB4 1344 0002                  		move.b	d4,2(a1)
000A6EB8 1346 000D                  		move.b	d6,$D(a1)
000A6EBC 1341 000A                  		move.b	d1,$A(a1)
000A6EC0 1345 000E                  		move.b	d5,$E(a1)
000A6EC4 7000                       		moveq	#0,d0
000A6EC6 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
000A6ECA 137C 0080 000C             		move.b	#$80,$0C(a1)				; MJ: set last frame's volume to something impossible (volume is from C0 - 40)
000A6ED0 301C                       		move.w	(a4)+,d0
000A6ED2 D08B                       		add.l	a3,d0
000A6ED4 2340 0004                  		move.l	d0,4(a1)
000A6ED8 335C 0008                  		move.w	(a4)+,8(a1)
000A6EDC D2C6                       		adda.w	d6,a1
000A6EDE 51CF FFCC                  		dbf	d7,loc_72098
000A6EE2 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
000A6EE4 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
000A6EE8 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
000A6EEE 6600                       		bne.s	loc_720D8
000A6EF0                            	;	moveq	#$2B,d0					; MJ: removed...
000A6EF0 7200                       		moveq	#0,d1
000A6EF2 4EBA 0000                  		jsr	sub_7272E(pc)
000A6EF6 6000 0000                  		bra.w	loc_72114
000A6EFA                            ; ===========================================================================
000A6EFA                            
000A6EFA                            loc_720D8:
000A6EFA 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
000A6EFE                            
000A6EFE                            	; --- Key off FM 6 ---
000A6EFE                            
000A6EFE 7028                       		moveq	#$28,d0
000A6F00 7206                       		moveq	#6,d1
000A6F02 4EBA 0000                  		jsr	sub_7272E(pc)
000A6F06                            
000A6F06                            	; --- Sets FM 6 to mute ---
000A6F06                            
000A6F06 103C 0042                  		move.b	#$42,d0
000A6F0A 727F                       		moveq	#$7F,d1
000A6F0C 4EBA 0000                  		jsr	sub_72764(pc)
000A6F10 103C 004A                  		move.b	#$4A,d0
000A6F14 727F                       		moveq	#$7F,d1
000A6F16 4EBA 0000                  		jsr	sub_72764(pc)
000A6F1A 103C 0046                  		move.b	#$46,d0
000A6F1E 727F                       		moveq	#$7F,d1
000A6F20 4EBA 0000                  		jsr	sub_72764(pc)
000A6F24 103C 004E                  		move.b	#$4E,d0
000A6F28 727F                       		moveq	#$7F,d1
000A6F2A 4EBA 0000                  		jsr	sub_72764(pc)
000A6F2E 103C 00B6                  		move.b	#-$4A,d0
000A6F32 123C 00C0                  		move.b	#-$40,d1
000A6F36 4EBA 0000                  		jsr	sub_72764(pc)
000A6F3A                            
000A6F3A                            loc_72114:
000A6F3A 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A6F3C 7E00                       		moveq	#0,d7
000A6F3E 1E2B 0003                  		move.b	3(a3),d7
000A6F42 6700                       		beq.s	loc_72154
000A6F44 5307                       		subq.b	#1,d7
000A6F46 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
000A6F4A 45FA 0000                  		lea	byte_721C2(pc),a2
000A6F4E                            
000A6F4E                            loc_72126:
000A6F4E 08D1 0007                  		bset	#7,(a1)
000A6F52 135A 0001                  		move.b	(a2)+,1(a1)
000A6F56 1344 0002                  		move.b	d4,2(a1)
000A6F5A 1346 000D                  		move.b	d6,$D(a1)
000A6F5E 1345 000E                  		move.b	d5,$E(a1)
000A6F62 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
000A6F68 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
000A6F6E 7000                       		moveq	#0,d0
000A6F70 301C                       		move.w	(a4)+,d0
000A6F72 D08B                       		add.l	a3,d0
000A6F74 2340 0004                  		move.l	d0,4(a1)
000A6F78 335C 0008                  		move.w	(a4)+,8(a1)
000A6F7C 101C                       		move.b	(a4)+,d0
000A6F7E 135C 000B                  		move.b	(a4)+,$B(a1)
000A6F82 D2C6                       		adda.w	d6,a1
000A6F84 51CF FFC8                  		dbf	d7,loc_72126
000A6F88                            
000A6F88                            loc_72154:
000A6F88 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000A6F8C 7E05                       		moveq	#5,d7
000A6F8E                            
000A6F8E                            loc_7215A:
000A6F8E 4A11                       		tst.b	(a1)
000A6F90 6A00 0000                  		bpl.w	loc_7217C
000A6F94 7000                       		moveq	#0,d0
000A6F96 1029 0001                  		move.b	1(a1),d0
000A6F9A 6B00                       		bmi.s	loc_7216E
000A6F9C 5500                       		subq.b	#2,d0
000A6F9E E508                       		lsl.b	#2,d0
000A6FA0 6000                       		bra.s	loc_72170
000A6FA2                            ; ===========================================================================
000A6FA2                            
000A6FA2                            loc_7216E:
000A6FA2 E608                       		lsr.b	#3,d0
000A6FA4                            
000A6FA4                            loc_72170:
000A6FA4 41FA 0000                  		lea	dword_722CC(pc),a0
000A6FA8 2070 0000                  		movea.l	(a0,d0.w),a0
000A6FAC 08D0 0002                  		bset	#2,(a0)
000A6FB0                            
000A6FB0                            loc_7217C:
000A6FB0 D2C6                       		adda.w	d6,a1
000A6FB2 51CF FFDA                  		dbf	d7,loc_7215A
000A6FB6                            
000A6FB6 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
000A6FBA 6A00                       		bpl.s	loc_7218E
000A6FBC 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A6FC2                            
000A6FC2                            loc_7218E:
000A6FC2 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
000A6FC6 6A00                       		bpl.s	loc_7219A
000A6FC8 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A6FCE                            
000A6FCE                            
000A6FCE                            loc_7219A:
000A6FCE 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000A6FD2 7805                       		moveq	#5,d4
000A6FD4                            
000A6FD4                            loc_721A0:
000A6FD4 4EBA 0000                  		jsr	sub_726FE(pc)
000A6FD8 DAC6                       		adda.w	d6,a5
000A6FDA 51CC FFF8                  		dbf	d4,loc_721A0
000A6FDE 7802                       		moveq	#2,d4
000A6FE0                            
000A6FE0                            loc_721AC:
000A6FE0 4EBA 0000                  		jsr	sub_729A0(pc)
000A6FE4 DAC6                       		adda.w	d6,a5
000A6FE6 51CC FFF8                  		dbf	d4,loc_721AC
000A6FEA                            
000A6FEA                            loc_721B6:
000A6FEA 584F                       		addq.w	#4,sp
000A6FEC 4E75                       		rts	
000A6FEE                            ; ===========================================================================
000A6FEE 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
000A6FF8 00                         		even
000A6FF8 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000A6FFC                            		even
000A6FFC                            ; ===========================================================================
000A6FFC                            ; ---------------------------------------------------------------------------
000A6FFC                            ; Play normal sound effect
000A6FFC                            ; ---------------------------------------------------------------------------
000A6FFC                            
000A6FFC                            Sound_A0toCF:				; XREF: Sound_ChkValue
000A6FFC 4A2E 0027                  		tst.b	$27(a6)
000A7000 6600 0000                  		bne.w	loc_722C6
000A7004 4A2E 0004                  		tst.b	4(a6)
000A7008 6600 0000                  		bne.w	loc_722C6
000A700C 4A2E 0024                  		tst.b	$24(a6)
000A7010 6600 0000                  		bne.w	loc_722C6
000A7014 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000A7018 6600                       		bne.s	Sound_notB5	; if not, branch
000A701A 4A2E 002B                  		tst.b	$2B(a6)
000A701E 6600                       		bne.s	loc_721EE
000A7020 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000A7024                            
000A7024                            loc_721EE:
000A7024 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000A702A                            
000A702A                            Sound_notB5:
000A702A 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000A702E 6600                       		bne.s	Sound_notA7	; if not, branch
000A7030 4A2E 002C                  		tst.b	$2C(a6)
000A7034 6600 0000                  		bne.w	locret_722C4
000A7038 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000A703E                            
000A703E                            Sound_notA7:
000A703E 2079 000A 62EE             		movea.l	(Go_SoundIndex).l,a0
000A7044 0407 00A0                  		subi.b	#$A0,d7
000A7048 E54F                       		lsl.w	#2,d7
000A704A 2670 7000                  		movea.l	(a0,d7.w),a3
000A704E 224B                       		movea.l	a3,a1
000A7050 7200                       		moveq	#0,d1
000A7052 3219                       		move.w	(a1)+,d1
000A7054 D28B                       		add.l	a3,d1
000A7056 1A19                       		move.b	(a1)+,d5
000A7058 1E19                       		move.b	(a1)+,d7
000A705A 5307                       		subq.b	#1,d7
000A705C 7C30                       		moveq	#$30,d6
000A705E                            
000A705E                            loc_72228:
000A705E 7600                       		moveq	#0,d3
000A7060 1629 0001                  		move.b	1(a1),d3
000A7064 7403                       		moveq	#$03,d2					; EXT: set PSG to delay for 2 extra frames (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A7066 1803                       		move.b	d3,d4
000A7068 6B00                       		bmi.s	loc_72244
000A706A 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
000A706E 5543                       		subq.w	#2,d3
000A7070 E54B                       		lsl.w	#2,d3
000A7072 4BFA 0000                  		lea	dword_722CC(pc),a5
000A7076 2A75 3000                  		movea.l	(a5,d3.w),a5
000A707A 08D5 0002                  		bset	#2,(a5)
000A707E 6000                       		bra.s	loc_7226E
000A7080                            ; ===========================================================================
000A7080                            
000A7080                            loc_72244:
000A7080 E64B                       		lsr.w	#3,d3
000A7082 4BFA 0000                  		lea	dword_722CC(pc),a5
000A7086 2A75 3000                  		movea.l	(a5,d3.w),a5
000A708A 08D5 0002                  		bset	#2,(a5)
000A708E 0C04 00C0                  		cmpi.b	#$C0,d4
000A7092 6600                       		bne.s	loc_7226E
000A7094 1004                       		move.b	d4,d0
000A7096 0000 001F                  		ori.b	#$1F,d0
000A709A 13C0 00C0 0011             		move.b	d0,($C00011).l
000A70A0 0840 0005                  		bchg	#5,d0
000A70A4 13C0 00C0 0011             		move.b	d0,($C00011).l
000A70AA                            
000A70AA                            loc_7226E:
000A70AA 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000A70AE 244D                       		movea.l	a5,a2
000A70B0 700B                       		moveq	#$B,d0
000A70B2                            
000A70B2                            loc_72276:
000A70B2 429A                       		clr.l	(a2)+
000A70B4 51C8 FFFC                  		dbf	d0,loc_72276
000A70B8                            
000A70B8 3A99                       		move.w	(a1)+,(a5)
000A70BA 1B45 0002                  		move.b	d5,2(a5)
000A70BE 7000                       		moveq	#0,d0
000A70C0 3019                       		move.w	(a1)+,d0
000A70C2 D08B                       		add.l	a3,d0
000A70C4 2B40 0004                  		move.l	d0,4(a5)
000A70C8 3B59 0008                  		move.w	(a1)+,8(a5)
000A70CC 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
000A70D0 1B46 000D                  		move.b	d6,$D(a5)
000A70D4 3B7C FFFF 0010             		move.w	#$FFFF,$10(a5)				; CHG: clear PSG's frequency (ensures no frequency writing)
000A70DA 4A04                       		tst.b	d4
000A70DC 6B00                       		bmi.s	loc_722A8
000A70DE 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A70E4 2B41 0020                  		move.l	d1,$20(a5)
000A70E8                            
000A70E8                            loc_722A8:
000A70E8 51CF FF74                  		dbf	d7,loc_72228
000A70EC                            
000A70EC 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A70F0 6A00                       		bpl.s	loc_722B8
000A70F2 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A70F8                            
000A70F8                            loc_722B8:
000A70F8 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A70FC 6A00                       		bpl.s	locret_722C4
000A70FE 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A7104                            
000A7104                            locret_722C4:
000A7104 4E75                       		rts	
000A7106                            ; ===========================================================================
000A7106                            
000A7106                            loc_722C6:
000A7106 4216                       		clr.b	0(a6)
000A7108 4E75                       		rts	
000A710A                            ; ===========================================================================
000A710A 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
000A710E 0000 0000                  		dc.l 0
000A7112 00FF F130                  		dc.l $FFF100+$30
000A7116 00FF F160                  		dc.l $FFF130+$30
000A711A 00FF F1C0                  		dc.l $FFF190+$30
000A711E 00FF F1F0                  		dc.l $FFF1C0+$30
000A7122 00FF F220                  		dc.l $FFF1F0+$30
000A7126 00FF F220                  		dc.l $FFF1F0+$30
000A712A 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000A712E 0000 0000                  		dc.l 0
000A7132 00FF F280                  		dc.l $FFF250+$30
000A7136 00FF F2B0                  		dc.l $FFF280+$30
000A713A 00FF F2E0                  		dc.l $FFF2B0+$30
000A713E 00FF F310                  		dc.l $FFF2E0+$30
000A7142 00FF F340                  		dc.l $FFF310+$30
000A7146 00FF F340                  		dc.l $FFF310+$30
000A714A                            ; ===========================================================================
000A714A                            ; ---------------------------------------------------------------------------
000A714A                            ; Play GHZ waterfall sound
000A714A                            ; ---------------------------------------------------------------------------
000A714A                            
000A714A                            Sound_D0toDF:				; XREF: Sound_ChkValue
000A714A 4A2E 0027                  		tst.b	$27(a6)
000A714E 6600 0000                  		bne.w	locret_723C6
000A7152 4A2E 0004                  		tst.b	4(a6)
000A7156 6600 0000                  		bne.w	locret_723C6
000A715A 4A2E 0024                  		tst.b	$24(a6)
000A715E 6600 0000                  		bne.w	locret_723C6
000A7162 2079 000A 62E6             		movea.l	(Go_SoundD0).l,a0
000A7168 0407 00D0                  		subi.b	#$D0,d7
000A716C E54F                       		lsl.w	#2,d7
000A716E 2670 7000                  		movea.l	(a0,d7.w),a3
000A7172 224B                       		movea.l	a3,a1
000A7174 7000                       		moveq	#0,d0
000A7176 3019                       		move.w	(a1)+,d0
000A7178 D08B                       		add.l	a3,d0
000A717A 2D40 0020                  		move.l	d0,$20(a6)
000A717E 1A19                       		move.b	(a1)+,d5
000A7180 1E19                       		move.b	(a1)+,d7
000A7182 5307                       		subq.b	#1,d7
000A7184 7C30                       		moveq	#$30,d6
000A7186                            
000A7186                            loc_72348:
000A7186 1829 0001                  		move.b	1(a1),d4
000A718A 6B00                       		bmi.s	loc_7235A
000A718C 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A7192 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A7196 6000                       		bra.s	loc_72364
000A7198                            ; ===========================================================================
000A7198                            
000A7198                            loc_7235A:
000A7198 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A719E 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A71A2                            
000A71A2                            loc_72364:
000A71A2 244D                       		movea.l	a5,a2
000A71A4 700B                       		moveq	#$B,d0
000A71A6                            
000A71A6                            loc_72368:
000A71A6 429A                       		clr.l	(a2)+
000A71A8 51C8 FFFC                  		dbf	d0,loc_72368
000A71AC                            
000A71AC 3A99                       		move.w	(a1)+,(a5)
000A71AE 1B45 0002                  		move.b	d5,2(a5)
000A71B2 7000                       		moveq	#0,d0
000A71B4 3019                       		move.w	(a1)+,d0
000A71B6 D08B                       		add.l	a3,d0
000A71B8 2B40 0004                  		move.l	d0,4(a5)
000A71BC 3B59 0008                  		move.w	(a1)+,8(a5)
000A71C0 1B7C 0001 000E             		move.b	#1,$E(a5)
000A71C6 1B46 000D                  		move.b	d6,$D(a5)
000A71CA 4A04                       		tst.b	d4
000A71CC 6B00                       		bmi.s	loc_72396
000A71CE 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A71D4                            
000A71D4                            loc_72396:
000A71D4 51CF FFB0                  		dbf	d7,loc_72348
000A71D8                            
000A71D8 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A71DC 6A00                       		bpl.s	loc_723A6
000A71DE 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A71E4                            
000A71E4                            loc_723A6:
000A71E4 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A71E8 6A00                       		bpl.s	locret_723C6
000A71EA 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A71F0 0004 001F                  		ori.b	#$1F,d4
000A71F4 13C4 00C0 0011             		move.b	d4,($C00011).l
000A71FA 0844 0005                  		bchg	#5,d4
000A71FE 13C4 00C0 0011             		move.b	d4,($C00011).l
000A7204                            
000A7204                            locret_723C6:
000A7204 4E75                       		rts	
000A7206                            ; End of function Sound_ChkValue
000A7206                            
000A7206                            ; ===========================================================================
000A7206 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
000A720A 00FF F220                  		dc.l $FFF1F0+$30
000A720E 00FF F280                  		dc.l $FFF250+$30
000A7212 00FF F340                  		dc.l $FFF310+$30
000A7216 00FF F370                  		dc.l $FFF340+$30
000A721A 00FF F3A0                  		dc.l $FFF370+$30
000A721E                            
000A721E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A721E                            
000A721E                            
000A721E                            Snd_FadeOut1:				; XREF: Sound_E0
000A721E 4216                       		clr.b	0(a6)
000A7220 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A7224 7E05                       		moveq	#5,d7
000A7226                            
000A7226                            loc_723EA:
000A7226 4A15                       		tst.b	(a5)
000A7228 6A00 0000                  		bpl.w	loc_72472
000A722C 0895 0007                  		bclr	#7,(a5)
000A7230 7600                       		moveq	#0,d3
000A7232 162D 0001                  		move.b	1(a5),d3
000A7236 6B00                       		bmi.s	loc_7243C
000A7238 4EBA 0000                  		jsr	sub_726FE(pc)
000A723C 0C03 0004                  		cmpi.b	#4,d3
000A7240 6600                       		bne.s	loc_72416
000A7242 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A7246 6A00                       		bpl.s	loc_72416
000A7248 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A724C 226E 0020                  		movea.l	$20(a6),a1
000A7250 6000                       		bra.s	loc_72428
000A7252                            ; ===========================================================================
000A7252                            
000A7252                            loc_72416:
000A7252 5503                       		subq.b	#2,d3
000A7254 E50B                       		lsl.b	#2,d3
000A7256 41FA FEB2                  		lea	dword_722CC(pc),a0
000A725A 264D                       		movea.l	a5,a3
000A725C 2A70 3000                  		movea.l	(a0,d3.w),a5
000A7260 226E 0018                  		movea.l	$18(a6),a1
000A7264                            
000A7264                            loc_72428:
000A7264 0895 0002                  		bclr	#2,(a5)
000A7268 08D5 0001                  		bset	#1,(a5)
000A726C 102D 000B                  		move.b	$B(a5),d0
000A7270 4EBA 0000                  		jsr	sub_72C4E(pc)
000A7274 2A4B                       		movea.l	a3,a5
000A7276 6000                       		bra.s	loc_72472
000A7278                            ; ===========================================================================
000A7278                            
000A7278                            loc_7243C:
000A7278 4EBA 0000                  		jsr	sub_729A0(pc)
000A727C 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A7280 0C03 00E0                  		cmpi.b	#$E0,d3
000A7284 6700                       		beq.s	loc_7245A
000A7286 0C03 00C0                  		cmpi.b	#$C0,d3
000A728A 6700                       		beq.s	loc_7245A
000A728C E60B                       		lsr.b	#3,d3
000A728E 41FA FE7A                  		lea	dword_722CC(pc),a0
000A7292 2070 3000                  		movea.l	(a0,d3.w),a0
000A7296                            
000A7296                            loc_7245A:
000A7296 0890 0002                  		bclr	#2,(a0)
000A729A 08D0 0001                  		bset	#1,(a0)
000A729E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A72A4 6600                       		bne.s	loc_72472
000A72A6 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A72AE                            
000A72AE                            loc_72472:
000A72AE DAFC 0030                  		adda.w	#$30,a5
000A72B2 51CF FF72                  		dbf	d7,loc_723EA
000A72B6                            
000A72B6 4E75                       		rts	
000A72B8                            ; End of function Snd_FadeOut1
000A72B8                            
000A72B8                            
000A72B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A72B8                            
000A72B8                            
000A72B8                            Snd_FadeOut2:				; XREF: Sound_E0
000A72B8 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A72BC 4A15                       		tst.b	(a5)
000A72BE 6A00                       		bpl.s	loc_724AE
000A72C0 0895 0007                  		bclr	#7,(a5)
000A72C4 0815 0002                  		btst	#2,(a5)
000A72C8 6600                       		bne.s	loc_724AE
000A72CA 4A2E 000E                  	tst.b	$0E(a6)
000A72CE 6600                       	bne.s	loc_724AE_2
000A72D0 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A72D4 6600                       	bne.s	loc_724AE
000A72D6                            
000A72D6                            	loc_724AE_2:
000A72D6 4EBA 0000                  		jsr	loc_7270A(pc)
000A72DA 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A72DE 0895 0002                  		bclr	#2,(a5)
000A72E2 08D5 0001                  		bset	#1,(a5)
000A72E6 4A15                       		tst.b	(a5)
000A72E8 6A00                       		bpl.s	loc_724AE
000A72EA 226E 0018                  		movea.l	$18(a6),a1
000A72EE 102D 000B                  		move.b	$B(a5),d0
000A72F2 4EBA 0000                  		jsr	sub_72C4E(pc)
000A72F6                            
000A72F6                            loc_724AE:
000A72F6 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A72FA 4A15                       		tst.b	(a5)
000A72FC 6A00                       		bpl.s	locret_724E4
000A72FE 0895 0007                  		bclr	#7,(a5)
000A7302 0815 0002                  		btst	#2,(a5)
000A7306 6600                       		bne.s	locret_724E4
000A7308 4A2E 000E                  	tst.b	$0E(a6)
000A730C 6600                       	bne.s	locret_724E4_2
000A730E 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7312 6600                       	bne.s	locret_724E4
000A7314                            
000A7314                            	locret_724E4_2:
000A7314 4EBA 0000                  		jsr	loc_729A6(pc)
000A7318 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
000A731C 0895 0002                  		bclr	#2,(a5)
000A7320 08D5 0001                  		bset	#1,(a5)
000A7324 4A15                       		tst.b	(a5)
000A7326 6A00                       		bpl.s	locret_724E4
000A7328 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000A732E 6600                       		bne.s	locret_724E4
000A7330 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000A7338                            
000A7338                            locret_724E4:
000A7338 4E75                       		rts	
000A733A                            ; End of function Snd_FadeOut2
000A733A                            
000A733A                            ; ===========================================================================
000A733A                            ; ---------------------------------------------------------------------------
000A733A                            ; Fade out music
000A733A                            ; ---------------------------------------------------------------------------
000A733A                            
000A733A                            Sound_E0:				; XREF: Sound_ExIndex
000A733A 4EBA FEE2                  		jsr	Snd_FadeOut1(pc)
000A733E 4EBA FF78                  		jsr	Snd_FadeOut2(pc)
000A7342 1D7C 0003 0006             		move.b	#3,6(a6)
000A7348 1D7C 0028 0004             		move.b	#$28,4(a6)
000A734E                            	;	clr.b	$40(a6)
000A734E                            	;	clr.b	$70(a6)					; MJ: stop PCM 2 as well
000A734E 422E 002A                  		clr.b	$2A(a6)
000A7352 4E75                       		rts	
000A7354                            
000A7354                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7354                            
000A7354                            
000A7354                            sub_72504:				; XREF: sub_71B4C
000A7354 102E 0006                  		move.b	6(a6),d0
000A7358 6700                       		beq.s	loc_72510
000A735A 532E 0006                  		subq.b	#1,6(a6)
000A735E 4E75                       		rts	
000A7360                            ; ===========================================================================
000A7360                            
000A7360                            loc_72510:
000A7360 532E 0004                  		subq.b	#1,4(a6)
000A7364 6700 0000                  		beq.w	Sound_E4
000A7368 1D7C 0003 0006             		move.b	#3,6(a6)
000A736E                            
000A736E                            
000A736E 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; CHG: load volume change instruction address
000A7374 7C00                       		moveq	#$00,d6					; CHG: clear d6
000A7376 1C2E 0004                  		move.b	$04(a6),d6				; CHG: load fade counter
000A737A 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A737C 4BEE 0040                  		lea	$40(a6),a5				; CHG: load PCM 1 address
000A7380 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; CHG: load PCM 1 volume address
000A7386 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 1
000A7388 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; CHG: load PCM 2 volume address
000A738E 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 2
000A7390 6000 0000                  		bra.w	FadeOut_FM				; CHG: continue to FM fade out
000A7394                            
000A7394                            FadeOut_PCM:
000A7394 4A15                       		tst.b	(a5)					; CHG: is the channel running?
000A7396 6A00                       		bpl.s	FOP_NotRunning				; CHG: if not, branch
000A7398 7000                       		moveq	#$00,d0					; CHG: clear d0
000A739A 102D 0009                  		move.b	$09(a5),d0				; CHG: load volume
000A739E 6A00                       		bpl.s	FOP_NoMute				; CHG: if the channel is not mute (not from 80 - FF), branch
000A73A0 7080                       		moveq	#$FFFFFF80,d0				; CHG: force volume 80 (mute)
000A73A2 0895 0007                  		bclr	#$07,(a5)				; CHG: stop PCM channel
000A73A6 6000                       		bra.s	FOP_Mute				; CHG: continue to mute the channel
000A73A8                            
000A73A8                            FOP_NoMute:
000A73A8                            	;	add.b	FOP_FadeList(pc,d0.w),d0		; CHG: reduce the volume
000A73A8 5400                       	addq.b	#$02,d0					; reduce the volume
000A73AA                            
000A73AA                            FOP_Mute:
000A73AA 1B40 0009                  		move.b	d0,$09(a5)				; CHG: update
000A73AE B02D 000C                  		cmp.b	$0C(a5),d0				; CHG: has the volume changed?
000A73B2 6700                       		beq.s	FOP_NotRunning				; CHG: if not, branch
000A73B4 1B40 000C                  		move.b	d0,$0C(a5)				; CHG: update volume
000A73B8 142E 0004                  	move.b	$04(a6),d2				; CHG: load fade timer
000A73BC 0202 0003                  	andi.b	#$03,d2					; CHG: has it been four frames?
000A73C0 6600                       	bne.s	FOP_NotRunning				; CHG: if not, branch (temp until Z80 volume struggling is fixed)
000A73C2 33FC 0100 00A1 1100 0839+  		StopZ80
000A73D4 1080                       		move.b	d0,(a0)					; change PCM volume
000A73D6 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A73D8 33FC 0000 00A1 1100        		StartZ80
000A73E0                            
000A73E0                            FOP_NotRunning:
000A73E0 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A73E4 4E75                       		rts						; CHG: return
000A73E6                            
000A73E6                            ;FOP_FadeList:	dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A73E6                            ;		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A73E6                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A73E6                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A73E6                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A73E6                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A73E6                            ;		dc.b	$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000A73E6                            ;		dc.b	$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
000A73E6                            
000A73E6                            ;FOP_VolumeList:	dc.b	$00,$0C,$18,$20,$28,$30,$34,$38,$3C,$40,$44,$48,$4C,$50,$56,$5A
000A73E6                            ;		dc.b	$60,$63,$66,$69,$6B,$6D,$6F,$70,$71,$72,$73,$74,$75,$76,$76,$77
000A73E6                            ;		dc.b	$77,$78,$78,$79,$79,$79,$7A,$7A,$7A,$7B,$7B,$7B,$7C,$7C,$7C,$7C
000A73E6                            ;		dc.b	$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7E,$7E,$7E,$7E,$7E,$7E,$7E,$7E
000A73E6                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A73E6                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A73E6                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A73E6                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A73E6                            
000A73E6                            ; ===========================================================================
000A73E6                            
000A73E6                            FadeOut_FM:
000A73E6 7E05                       		moveq	#5,d7
000A73E8                            
000A73E8                            loc_72524:
000A73E8 4A15                       		tst.b	(a5)
000A73EA 6A00                       		bpl.s	loc_72538
000A73EC 522D 0009                  		addq.b	#1,9(a5)
000A73F0 6A00                       		bpl.s	loc_72534
000A73F2 0895 0007                  		bclr	#7,(a5)
000A73F6 6000                       		bra.s	loc_72538
000A73F8                            ; ===========================================================================
000A73F8                            
000A73F8                            loc_72534:
000A73F8 4EBA 0000                  		jsr	sub_72CB4(pc)
000A73FC                            
000A73FC                            loc_72538:
000A73FC DAFC 0030                  		adda.w	#$30,a5
000A7400 51CF FFE6                  		dbf	d7,loc_72524
000A7404                            
000A7404 7E02                       		moveq	#2,d7
000A7406                            
000A7406                            loc_72542:
000A7406 4A15                       		tst.b	(a5)
000A7408 6A00                       		bpl.s	loc_72560
000A740A 522D 0009                  		addq.b	#1,9(a5)
000A740E 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000A7414 6500                       		bcs.s	loc_72558
000A7416 0895 0007                  		bclr	#7,(a5)
000A741A 6000                       		bra.s	loc_72560
000A741C                            ; ===========================================================================
000A741C                            
000A741C                            loc_72558:
000A741C 1C2D 0009                  		move.b	9(a5),d6
000A7420 DC2E 0016                  	add.b	$16(a6),d6			; EXTRA
000A7424 4EBA 0000                  		jsr	sub_7296A(pc)
000A7428                            
000A7428                            loc_72560:
000A7428 DAFC 0030                  		adda.w	#$30,a5
000A742C 51CF FFD8                  		dbf	d7,loc_72542
000A7430                            
000A7430 4E75                       		rts	
000A7432                            ; End of function sub_72504
000A7432                            
000A7432                            
000A7432                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7432                            
000A7432                            
000A7432                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000A7432 7602                       		moveq	#2,d3
000A7434 7028                       		moveq	#$28,d0
000A7436                            
000A7436                            loc_7256E:
000A7436 1203                       		move.b	d3,d1
000A7438 4EBA 0000                  		jsr	sub_7272E(pc)
000A743C 5801                       		addq.b	#4,d1
000A743E 4EBA 0000                  		jsr	sub_7272E(pc)
000A7442 51CB FFF2                  		dbf	d3,loc_7256E
000A7446                            
000A7446 7040                       		moveq	#$40,d0
000A7448 727F                       		moveq	#$7F,d1
000A744A 7802                       		moveq	#2,d4
000A744C                            
000A744C                            loc_72584:
000A744C 7603                       		moveq	#3,d3
000A744E                            
000A744E                            loc_72586:
000A744E 4EBA 0000                  		jsr	sub_7272E(pc)
000A7452 4EBA 0000                  		jsr	sub_72764(pc)
000A7456 5840                       		addq.w	#4,d0
000A7458 51CB FFF4                  		dbf	d3,loc_72586
000A745C                            
000A745C 0400 000F                  		subi.b	#$F,d0
000A7460 51CC FFEA                  		dbf	d4,loc_72584
000A7464                            
000A7464 4E75                       		rts	
000A7466                            ; End of function sub_7256A
000A7466                            
000A7466                            ; ===========================================================================
000A7466                            ; ---------------------------------------------------------------------------
000A7466                            ; Stop music
000A7466                            ; ---------------------------------------------------------------------------
000A7466                            
000A7466                            Sound_E4:
000A7466 33FC 0100 00A1 1100 0839+  		StopZ80
000A7478 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A747E 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A7484 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7486 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7488 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A748A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A748C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A748E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7490 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7492 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7494 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7496 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7498 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A749A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A749C 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A74A4 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A74AA 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A74B0 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A74B2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A74B4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A74B6 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A74B8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A74BA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A74BC 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A74BE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A74C0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A74C2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A74C4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A74C6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A74C8 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A74D0 33FC 0000 00A1 1100        		StartZ80
000A74D8                            
000A74D8 702B                       		moveq	#$2B,d0
000A74DA 123C 0080                  		move.b	#$80,d1
000A74DE 4EBA 0000                  		jsr	sub_7272E(pc)
000A74E2 7027                       		moveq	#$27,d0
000A74E4 7200                       		moveq	#0,d1
000A74E6 4EBA 0000                  		jsr	sub_7272E(pc)
000A74EA 204E                       		movea.l	a6,a0
000A74EC 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A74F0 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A74F4 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
000A74F8                            
000A74F8                            loc_725B6:
000A74F8 4298                       		clr.l	(a0)+
000A74FA 51C8 FFFC                  		dbf	d0,loc_725B6
000A74FE                            
000A74FE 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A7502 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A7506 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000A750C 4EBA FF24                  		jsr	sub_7256A(pc)
000A7510 6000 0000                  		bra.w	sub_729B6
000A7514                            
000A7514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7514                            
000A7514                            
000A7514                            sub_725CA:				; XREF: Sound_ChkValue
000A7514 204E                       		movea.l	a6,a0
000A7516 1216                       		move.b	0(a6),d1
000A7518 142E 0027                  		move.b	$27(a6),d2
000A751C 162E 002A                  		move.b	$2A(a6),d3
000A7520 182E 0026                  		move.b	$26(a6),d4
000A7524 3A2E 000A                  		move.w	$A(a6),d5
000A7528 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A752C 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A7530 303C 0093                  		move.w	#$93,d0						; MJ: new size
000A7534                            
000A7534                            loc_725E4:
000A7534 4298                       		clr.l	(a0)+
000A7536 51C8 FFFC                  		dbf	d0,loc_725E4
000A753A                            
000A753A 1C81                       		move.b	d1,0(a6)
000A753C 1D42 0027                  		move.b	d2,$27(a6)
000A7540 1D43 002A                  		move.b	d3,$2A(a6)
000A7544 1D44 0026                  		move.b	d4,$26(a6)
000A7548 3D45 000A                  		move.w	d5,$A(a6)
000A754C 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A7550 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A7554 1D7C 0080 0009             		move.b	#$80,9(a6)
000A755A 4EBA FED6                  		jsr	sub_7256A(pc)
000A755E 6000 0000                  		bra.w	sub_729B6
000A7562                            ; End of function sub_725CA
000A7562                            
000A7562                            
000A7562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7562                            
000A7562                            
000A7562                            sub_7260C:				; XREF: sub_71B4C
000A7562                            	;	move.b	2(a6),1(a6)
000A7562 102E 0015                  	move.b	$15(a6),d0			; EXTRA
000A7566 6A00                       	bpl.s	STempo_CheckMax			; EXTRA
000A7568 D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A756C 0C00 0002                  	cmpi.b	#$02,d0				; EXTRA
000A7570 6A00                       	bpl.s	STempo_Valid			; EXTRA
000A7572 7002                       	moveq	#$02,d0				; EXTRA
000A7574 6000                       	bra.s	STempo_Valid			; EXTRA
000A7576                            
000A7576                            STempo_CheckMax:
000A7576 D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A757A                            
000A757A                            STempo_Valid:
000A757A 1D40 0001                  	move.b	d0,$01(a6)			; EXTRA
000A757E                            
000A757E 41EE 004E                  		lea	$4E(a6),a0
000A7582 7030                       		moveq	#$30,d0
000A7584 720A                       		moveq	#10,d1						; MJ: new number of channels
000A7586                            
000A7586                            loc_7261A:
000A7586 5210                       		addq.b	#1,(a0)
000A7588 D0C0                       		adda.w	d0,a0
000A758A 51C9 FFFA                  		dbf	d1,loc_7261A
000A758E                            
000A758E 4E75                       		rts	
000A7590                            ; End of function sub_7260C
000A7590                            
000A7590                            ; ===========================================================================
000A7590                            ; ---------------------------------------------------------------------------
000A7590                            ; Speed	up music
000A7590                            ; ---------------------------------------------------------------------------
000A7590                            
000A7590                            Sound_E2:				; XREF: Sound_ExIndex
000A7590 4A2E 0027                  		tst.b	$27(a6)
000A7594 6600                       		bne.s	loc_7263E
000A7596 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000A759C 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000A75A2 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000A75A8 4E75                       		rts	
000A75AA                            ; ===========================================================================
000A75AA                            
000A75AA                            loc_7263E:
000A75AA 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
000A75B0 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
000A75B6 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
000A75BC 4E75                       		rts	
000A75BE                            ; ===========================================================================
000A75BE                            ; ---------------------------------------------------------------------------
000A75BE                            ; Change music back to normal speed
000A75BE                            ; ---------------------------------------------------------------------------
000A75BE                            
000A75BE                            Sound_E3:				; XREF: Sound_ExIndex
000A75BE 4A2E 0027                  		tst.b	$27(a6)
000A75C2 6600                       		bne.s	loc_7266A
000A75C4 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000A75CA 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000A75D0 422E 002A                  		clr.b	$2A(a6)
000A75D4 4E75                       		rts	
000A75D6                            ; ===========================================================================
000A75D6                            
000A75D6                            loc_7266A:
000A75D6 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
000A75DC 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
000A75E2 422E 03FA                  		clr.b	$3FA(a6)
000A75E6 4E75                       		rts	
000A75E8                            
000A75E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A75E8                            
000A75E8                            
000A75E8                            sub_7267C:				; XREF: sub_71B4C
000A75E8 4A2E 0025                  		tst.b	$25(a6)
000A75EC 6700                       		beq.s	loc_72688
000A75EE 532E 0025                  		subq.b	#1,$25(a6)
000A75F2 4E75                       		rts	
000A75F4                            ; ===========================================================================
000A75F4                            
000A75F4                            loc_72688:
000A75F4 4A2E 0026                  		tst.b	$26(a6)
000A75F8 6700                       		beq.s	loc_726D6
000A75FA 532E 0026                  		subq.b	#1,$26(a6)
000A75FE 1D7C 0002 0025             		move.b	#2,$25(a6)
000A7604                            
000A7604 4BEE 0040                  		lea	$40(a6),a5				; CHG: load starting from PCM channels
000A7608 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to alter
000A760A                            
000A760A                            FadeIn_NextPCM:
000A760A 4A15                       		tst.b	(a5)					; CHG: is this channel running?
000A760C 6A00                       		bpl.s	FadeIn_NoPCM				; CHG: if not, branch
000A760E 572D 0009                  		subq.b	#$03,$09(a5)				; CHG: increase volume
000A7612                            
000A7612                            FadeIn_NoPCM:
000A7612 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A7616 51CF FFF2                  		dbf	d7,FadeIn_NextPCM			; CHG: repeat for all channels
000A761A                            
000A761A                            	;	lea	$A0(a6),a5				; MJ: new SFX location
000A761A                            
000A761A 7E05                       		moveq	#5,d7
000A761C                            
000A761C                            loc_7269E:
000A761C 4A15                       		tst.b	(a5)
000A761E 6A00                       		bpl.s	loc_726AA
000A7620 532D 0009                  		subq.b	#1,9(a5)
000A7624 4EBA 0000                  		jsr	sub_72CB4(pc)
000A7628                            
000A7628                            loc_726AA:
000A7628 DAFC 0030                  		adda.w	#$30,a5
000A762C 51CF FFEE                  		dbf	d7,loc_7269E
000A7630 7E02                       		moveq	#2,d7
000A7632                            
000A7632                            loc_726B4:
000A7632 4A15                       		tst.b	(a5)
000A7634 6A00                       		bpl.s	loc_726CC
000A7636 532D 0009                  		subq.b	#1,9(a5)
000A763A 1C2D 0009                  		move.b	9(a5),d6
000A763E 0C06 0010                  		cmpi.b	#$10,d6
000A7642 6500                       		bcs.s	loc_726C8
000A7644 7C0F                       		moveq	#$F,d6
000A7646                            
000A7646                            loc_726C8:
000A7646 4EBA 0000                  		jsr	sub_7296A(pc)
000A764A                            
000A764A                            loc_726CC:
000A764A DAFC 0030                  		adda.w	#$30,a5
000A764E 51CF FFE2                  		dbf	d7,loc_726B4
000A7652 4E75                       		rts	
000A7654                            ; ===========================================================================
000A7654                            
000A7654                            loc_726D6:
000A7654                            	;	bclr	#2,$40(a6)
000A7654                            	;	bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
000A7654 422E 0024                  		clr.b	$24(a6)
000A7658 4E75                       		rts	
000A765A                            ; End of function sub_7267C
000A765A                            
000A765A                            ; ===========================================================================
000A765A                            
000A765A                            loc_726E2:				; XREF: sub_71CCA
000A765A 0815 0001                  		btst	#1,(a5)
000A765E 6600                       		bne.s	locret_726FC
000A7660 0815 0002                  		btst	#2,(a5)
000A7664 6600                       		bne.s	locret_726FC
000A7666 4A2E 000E                  	tst.b	$0E(a6)
000A766A 6600                       	bne.s	locret_726FC_2
000A766C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7670 6600                       	bne.s	locret_726FC
000A7672                            
000A7672                            	locret_726FC_2:
000A7672 7028                       		moveq	#$28,d0
000A7674 122D 0001                  		move.b	1(a5),d1
000A7678 0001 00F0                  		ori.b	#-$10,d1
000A767C 6000 0000                  		bra.w	sub_7272E
000A7680                            ; ===========================================================================
000A7680                            
000A7680                            locret_726FC:
000A7680 4E75                       		rts	
000A7682                            
000A7682                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7682                            
000A7682                            
000A7682                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000A7682 0815 0004                  		btst	#4,(a5)
000A7686 6600                       		bne.s	locret_72714
000A7688 0815 0002                  		btst	#2,(a5)
000A768C 6600                       		bne.s	locret_72714
000A768E 4A2E 000E                  	tst.b	$0E(a6)
000A7692 6600                       	bne.s	loc_7270A
000A7694 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7698 6600                       	bne.s	locret_72714
000A769A                            
000A769A                            loc_7270A:				; XREF: Snd_FadeOut2
000A769A 7028                       		moveq	#$28,d0
000A769C 122D 0001                  		move.b	1(a5),d1
000A76A0 6000 0000                  		bra.w	sub_7272E
000A76A4                            ; ===========================================================================
000A76A4                            
000A76A4                            locret_72714:
000A76A4 4E75                       		rts	
000A76A6                            ; End of function sub_726FE
000A76A6                            
000A76A6                            ; ===========================================================================
000A76A6                            
000A76A6                            loc_72716:				; XREF: sub_72A5A
000A76A6 0815 0002                  		btst	#2,(a5)
000A76AA 6600                       		bne.s	locret_72720
000A76AC 4A2E 000E                  	tst.b	$0E(a6)
000A76B0 6600                       	bne.s	sub_72722
000A76B2 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A76B6 6600                       	bne.s	locret_72720
000A76B8 6000 0000                  		bra.w	sub_72722
000A76BC                            ; ===========================================================================
000A76BC                            
000A76BC                            locret_72720:
000A76BC 4E75                       		rts	
000A76BE                            
000A76BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A76BE                            
000A76BE                            
000A76BE                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000A76BE 082D 0002 0001             		btst	#2,1(a5)
000A76C4 6600                       		bne.s	loc_7275A
000A76C6 D02D 0001                  		add.b	1(a5),d0
000A76CA                            ; End of function sub_72722
000A76CA                            
000A76CA                            
000A76CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A76CA                            
000A76CA                            sub_7272E:
000A76CA 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A76CE 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A76D2 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
000A76D6 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A76E8 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A76EA 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A76EC 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A76EE 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A76F0 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A76F8 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A76FC 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A7700 4E75                       		rts						; EXT: return
000A7702                            
000A7702                            ; ===========================================================================
000A7702                            
000A7702                            loc_7275A:				; XREF: sub_72722
000A7702 142D 0001                  		move.b	1(a5),d2
000A7706 0882 0002                  		bclr	#2,d2
000A770A D002                       		add.b	d2,d0
000A770C                            
000A770C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A770C                            
000A770C                            
000A770C                            sub_72764:
000A770C 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A7710 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A7714 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
000A7718 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A772A 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A772C 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A772E 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A7730 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A7732 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A773A 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A773E 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A7742 4E75                       		rts						; EXT: return
000A7744                            
000A7744                            ; ===========================================================================
000A7744 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000A7756 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000A7768 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000A7778 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000A7788 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000A7798 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000A77A8 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000A77B8 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000A77C8 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000A77D8 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000A77E8 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000A77F8 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000A7804                            
000A7804                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7804                            
000A7804                            
000A7804                            ; ===========================================================================
000A7804                            ; ---------------------------------------------------------------------------
000A7804                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A7804                            ; ---------------------------------------------------------------------------
000A7804                            
000A7804                            SPSG_CheckMute:
000A7804 4A2E 000E                  	tst.b	$0E(a6)
000A7808 6600                       	bne.s	S72850_NoCHG
000A780A 102D 0021                  	move.b	$21(a5),d0
000A780E B02D 0022                  	cmp.b	$22(a5),d0
000A7812 6700                       	beq.s	S72850_NoCHG
000A7814 4A00                       	tst.b	d0
000A7816 6A00                       	bpl.s	S72850_NoMute
000A7818 08D5 0006                  	bset.b	#$06,(a5)
000A781C 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A7822 4EB9 0000 0000             	jsr	SPSG_UpdateTone
000A7828                            
000A7828                            S72850_NoCHG:
000A7828 4E75                       	rts
000A782A                            
000A782A                            S72850_NoMute:
000A782A 1B40 0022                  	move.b	d0,$22(a5)
000A782E 08D5 0006                  	bset.b	#$06,(a5)
000A7832 4EB9 0000 0000             	jsr	loc_7292E
000A7838 4E75                       	rts
000A783A                            
000A783A                            ; ===========================================================================
000A783A                            ; ---------------------------------------------------------------------------
000A783A                            ; Subroutine to run a PSG channel
000A783A                            ; ---------------------------------------------------------------------------
000A783A                            
000A783A                            sub_72850:				; XREF: sub_71B4C
000A783A 61C8                       	bsr.s	SPSG_CheckMute			; EXTRA - ON/OFF
000A783C 532D 000E                  		subq.b	#1,$E(a5)
000A7840 6600                       		bne.s	loc_72866
000A7842 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A7846 0895 0004                  		bclr	#4,(a5)
000A784A 4EBA 0000                  		jsr	sub_72878(pc)
000A784E 4EBA 0000                  		jsr	sub_728DC(pc)
000A7852 6000 0000                  		bra.w	loc_7292E
000A7856                            ; ===========================================================================
000A7856                            
000A7856                            loc_72866:
000A7856 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A785A 6700                       	beq.s	SPSG_NoUpdate			; EXTRA
000A785C 7A00                       	moveq	#$00,d5				; EXTRA
000A785E 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A7862 0405 0081                  	subi.b	#$81,d5				; EXTRA
000A7866 6500                       	bcs.s	SPSG_NoUpdate			; EXTRA
000A7868 4EB9 0000 0000             	jsr	SPSG_UpdateFreque		; EXTRA
000A786E 3C2D 0010                  	move.w	$10(a5),d6			; EXTRA
000A7872 6000 0000                  	bra.w	SPSG_Update			; EXTRA
000A7876                            
000A7876                            	SPSG_NoUpdate:				; EXTRA
000A7876 4EBA F1EE                  		jsr	sub_71D9E(pc)
000A787A 4EBA 0000                  		jsr	sub_72926(pc)
000A787E 4EBA F28A                  		jsr	sub_71DC6(pc)
000A7882                            
000A7882                            	SPSG_Update:				; EXTRA
000A7882 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A7886 4EBA 0000                  		jsr	sub_728E2(pc)
000A788A 4E75                       		rts	
000A788C                            ; End of function sub_72850
000A788C                            
000A788C                            
000A788C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A788C                            
000A788C                            
000A788C                            sub_72878:				; XREF: sub_72850
000A788C 0895 0001                  		bclr	#1,(a5)
000A7890 286D 0004                  		movea.l	4(a5),a4
000A7894                            
000A7894                            loc_72880:
000A7894 7A00                       		moveq	#0,d5
000A7896 1A1C                       		move.b	(a4)+,d5
000A7898 0C05 00E0                  		cmpi.b	#$E0,d5
000A789C 6500                       		bcs.s	loc_72890
000A789E 4EBA 0000                  		jsr	sub_72A5A(pc)
000A78A2 60F0                       		bra.s	loc_72880
000A78A4                            ; ===========================================================================
000A78A4                            
000A78A4                            loc_72890:
000A78A4 4A05                       		tst.b	d5
000A78A6 6A00                       		bpl.s	loc_728A4
000A78A8 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A78AC 4EBA 0000                  		jsr	sub_728AC(pc)
000A78B0 1A1C                       		move.b	(a4)+,d5
000A78B2 4A05                       		tst.b	d5
000A78B4 6A00                       		bpl.s	loc_728A4
000A78B6 534C                       		subq.w	#1,a4
000A78B8 6000 F16E                  		bra.w	sub_71D60
000A78BC                            ; ===========================================================================
000A78BC                            
000A78BC                            loc_728A4:
000A78BC 4EBA F14A                  		jsr	sub_71D40(pc)
000A78C0 6000 F166                  		bra.w	sub_71D60
000A78C4                            ; End of function sub_72878
000A78C4                            
000A78C4                            
000A78C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A78C4                            
000A78C4                            
000A78C4                            sub_728AC:				; XREF: sub_72878
000A78C4 0405 0081                  		subi.b	#$81,d5
000A78C8 6500                       		bcs.s	loc_728CA
000A78CA                            
000A78CA                            	SPSG_UpdateFreque:			; EXTRA
000A78CA DA2D 0008                  		add.b	8(a5),d5
000A78CE DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A78D2 0245 007F                  		andi.w	#$7F,d5
000A78D6 E34D                       		lsl.w	#1,d5
000A78D8 41FA 0000                  		lea	word_729CE(pc),a0
000A78DC 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000A78E2 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A78E6 669A                       	bne.s	SPSG_Update			; EXTRA
000A78E8 6000 F13E                  		bra.w	sub_71D60
000A78EC                            ; ===========================================================================
000A78EC                            
000A78EC                            loc_728CA:
000A78EC 08D5 0001                  		bset	#1,(a5)
000A78F0 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000A78F6 4EBA F130                  		jsr	sub_71D60(pc)
000A78FA 6000 0000                  		bra.w	sub_729A0
000A78FE                            ; End of function sub_728AC
000A78FE                            
000A78FE                            
000A78FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A78FE                            
000A78FE                            
000A78FE                            sub_728DC:				; XREF: sub_72850
000A78FE 3C2D 0010                  		move.w	$10(a5),d6
000A7902 6B00                       		bmi.s	loc_72920
000A7904                            ; End of function sub_728DC
000A7904                            
000A7904                            
000A7904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7904                            
000A7904                            
000A7904                            sub_728E2:				; XREF: sub_72850
000A7904 102D 001E                  		move.b	$1E(a5),d0
000A7908 4880                       		ext.w	d0
000A790A DC40                       		add.w	d0,d6
000A790C 0815 0002                  		btst	#2,(a5)
000A7910 6600                       		bne.s	locret_7291E
000A7912 4A2E 000E                  	tst.b	$0E(a6)
000A7916 6600                       	bne.s	locret_7291E_2
000A7918 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A791C 6600                       	bne.s	locret_7291E
000A791E                            
000A791E                            	locret_7291E_2:
000A791E 0815 0001                  		btst	#1,(a5)
000A7922 6600                       		bne.s	locret_7291E
000A7924 102D 0001                  		move.b	1(a5),d0
000A7928 0C00 00E0                  		cmpi.b	#$E0,d0
000A792C 6600                       		bne.s	loc_72904
000A792E 103C 00C0                  		move.b	#$C0,d0
000A7932                            
000A7932                            loc_72904:
000A7932 3206                       		move.w	d6,d1
000A7934 0201 000F                  		andi.b	#$F,d1
000A7938 8001                       		or.b	d1,d0
000A793A E84E                       		lsr.w	#4,d6
000A793C 0206 003F                  		andi.b	#$3F,d6
000A7940 13C0 00C0 0011             		move.b	d0,($C00011).l
000A7946 13C6 00C0 0011             		move.b	d6,($C00011).l
000A794C                            
000A794C                            locret_7291E:
000A794C 4E75                       		rts	
000A794E                            ; End of function sub_728E2
000A794E                            
000A794E                            ; ===========================================================================
000A794E                            
000A794E                            loc_72920:				; XREF: sub_728DC
000A794E 08D5 0001                  		bset	#1,(a5)
000A7952 4E75                       		rts	
000A7954                            
000A7954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7954                            
000A7954                            
000A7954                            sub_72926:				; XREF: sub_72850
000A7954 4A2D 000B                  		tst.b	$B(a5)
000A7958 6700 0000                  		beq.w	locret_7298A
000A795C                            
000A795C                            loc_7292E:				; XREF: sub_72850
000A795C                            	;	move.b	9(a5),d6
000A795C 1C2E 0016                  	move.b	$16(a6),d6			; EXTRA
000A7960 E406                       	asr.b	#$02,d6				; EXTRA
000A7962 DC2D 0009                  	add.b	$09(a5),d6			; EXTRA
000A7966 7000                       		moveq	#0,d0
000A7968 102D 000B                  		move.b	$B(a5),d0
000A796C 6700                       		beq.s	sub_7296A
000A796E 2079 000A 62F6             		movea.l	(Go_PSGIndex).l,a0
000A7974 5340                       		subq.w	#1,d0
000A7976 E548                       		lsl.w	#2,d0
000A7978 2070 0000                  		movea.l	(a0,d0.w),a0
000A797C 102D 000C                  		move.b	$C(a5),d0
000A7980 1030 0000                  		move.b	(a0,d0.w),d0
000A7984 522D 000C                  		addq.b	#1,$C(a5)
000A7988 0800 0007                  		btst	#7,d0
000A798C 6700                       		beq.s	loc_72960
000A798E 0C00 0080                  		cmpi.b	#$80,d0
000A7992 6700                       		beq.s	loc_7299A
000A7994                            
000A7994                            loc_72960:
000A7994 DC40                       		add.w	d0,d6
000A7996 0C06 0010                  		cmpi.b	#$10,d6
000A799A 6500                       		bcs.s	sub_7296A
000A799C 7C0F                       		moveq	#$F,d6
000A799E                            ; End of function sub_72926
000A799E                            
000A799E                            
000A799E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A799E                            
000A799E                            
000A799E                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000A799E 0815 0001                  		btst	#1,(a5)
000A79A2 6600                       		bne.s	locret_7298A
000A79A4                            
000A79A4                            	SPSG_UpdateTone:
000A79A4 0815 0002                  		btst	#2,(a5)
000A79A8 6600                       		bne.s	locret_7298A
000A79AA 4A2E 000E                  	tst.b	$0E(a6)
000A79AE 6600                       	bne.s	locret_7298A_2
000A79B0 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A79B4 6700                       	beq.s	locret_7298A_2
000A79B6 1C2D 0001                  	move.b	$01(a5),d6
000A79BA 0606 0010                  	addi.b	#$10,d6
000A79BE 0006 000F                  	ori.b	#$0F,d6
000A79C2 13C6 00C0 0011             	move.b	d6,($C00011).l
000A79C8 4E75                       	rts
000A79CA                            
000A79CA                            	locret_7298A_2:
000A79CA 0815 0004                  		btst	#4,(a5)
000A79CE 6600                       		bne.s	loc_7298C
000A79D0                            
000A79D0                            loc_7297C:
000A79D0 8C2D 0001                  		or.b	1(a5),d6
000A79D4 0606 0010                  		addi.b	#$10,d6
000A79D8 13C6 00C0 0011             		move.b	d6,($C00011).l
000A79DE                            
000A79DE                            locret_7298A:
000A79DE 4E75                       		rts	
000A79E0                            ; ===========================================================================
000A79E0                            
000A79E0                            loc_7298C:
000A79E0 4A2D 0013                  		tst.b	$13(a5)
000A79E4 67EA                       		beq.s	loc_7297C
000A79E6 4A2D 0012                  		tst.b	$12(a5)
000A79EA 66E4                       		bne.s	loc_7297C
000A79EC 4E75                       		rts	
000A79EE                            ; End of function sub_7296A
000A79EE                            
000A79EE                            ; ===========================================================================
000A79EE                            
000A79EE                            loc_7299A:				; XREF: sub_72926
000A79EE 532D 000C                  		subq.b	#1,$C(a5)
000A79F2 4E75                       		rts	
000A79F4                            
000A79F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A79F4                            
000A79F4                            
000A79F4                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000A79F4 0815 0002                  		btst	#2,(a5)
000A79F8 6600                       		bne.s	locret_729B4
000A79FA 4A2E 000E                  	tst.b	$0E(a6)
000A79FE 6600                       	bne.s	loc_729A6
000A7A00 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7A04 6600                       	bne.s	locret_729B4
000A7A06                            
000A7A06                            loc_729A6:				; XREF: Snd_FadeOut2
000A7A06 102D 0001                  		move.b	1(a5),d0
000A7A0A 0000 001F                  		ori.b	#$1F,d0
000A7A0E 13C0 00C0 0011             		move.b	d0,($C00011).l
000A7A14                            
000A7A14                            locret_729B4:
000A7A14 4E75                       		rts	
000A7A16                            ; End of function sub_729A0
000A7A16                            
000A7A16                            
000A7A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7A16                            
000A7A16                            
000A7A16                            sub_729B6:				; XREF: loc_71E7C
000A7A16 41F9 00C0 0011             		lea	($C00011).l,a0
000A7A1C 10BC 009F                  		move.b	#$9F,(a0)
000A7A20 10BC 00BF                  		move.b	#$BF,(a0)
000A7A24 10BC 00DF                  		move.b	#$DF,(a0)
000A7A28 10BC 00FF                  		move.b	#$FF,(a0)
000A7A2C 4E75                       		rts	
000A7A2E                            ; End of function sub_729B6
000A7A2E                            
000A7A2E                            ; ===========================================================================
000A7A2E 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000A7A40 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000A7A52 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000A7A66 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000A7A7A 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000A7A8E 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000A7AA2 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000A7AB6 0011 0000                  		dc.w $11, 0
000A7ABA                            
000A7ABA                            	; PSG can overflow here by accident (SYZ does when it plays low notes
000A7ABA                            	; but the pitch of the channel is low, and wraps to high).
000A7ABA                            
000A7ABA                            	; The flag pointers have been altered slightly, causing the frequencies
000A7ABA                            	; to be different, even though it's wrong in the first place, this
000A7ABA                            	; table will ensure it's put back the original way (not correct, just
000A7ABA                            	; original).
000A7ABA                            
000A7ABA 0445 00E0 E54D 4EFB 5002+  		dc.w	$0445,$00E0,$E54D,$4EFB,$5002,$6000,$0066,$6000	; CHG: end of table
000A7ACA 0082 6000 0084 6000 0086+  		dc.w	$0082,$6000,$0084,$6000,$0086,$6000,$009E,$6000
000A7ADA 0124 6000 0126 6000 012C+  		dc.w	$0124,$6000,$0126,$6000,$012C,$6000,$012E,$6000
000A7AEA 0134 6000 0138 6000 013E+  		dc.w	$0134,$6000,$0138,$6000,$013E,$6000,$0150,$6000
000A7AFA 0154 6000 0156 6000 0184+  		dc.w	$0154,$6000,$0156,$6000,$0184,$6000,$028A,$6000
000A7B0A 02A8 6000 02AA 6000 0354+  		dc.w	$02A8,$6000,$02AA,$6000,$0354,$6000,$036A,$6000
000A7B1A 036C 6000 036E 6000 0376+  		dc.w	$036C,$6000,$036E,$6000,$0376,$6000,$038C,$6000
000A7B2A 039A 121C                  		dc.w	$039A,$121C
000A7B2E                            
000A7B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7B2E                            
000A7B2E                            
000A7B2E                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A7B2E 0445 00E0                  		subi.w	#$E0,d5
000A7B32 E54D                       		lsl.w	#2,d5
000A7B34 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000A7B38                            ; End of function sub_72A5A
000A7B38                            
000A7B38                            ; ===========================================================================
000A7B38                            
000A7B38                            loc_72A64:
000A7B38 6000 0000                  		bra.w	loc_72ACC			; E0
000A7B3C                            ; ===========================================================================
000A7B3C 6000 0000                  		bra.w	loc_72AEC			; E1
000A7B40                            ; ===========================================================================
000A7B40 6000 0000                  		bra.w	loc_72AF2			; E2
000A7B44                            ; ===========================================================================
000A7B44 6000 0000                  		bra.w	loc_72AF8			; E3
000A7B48                            ; ===========================================================================
000A7B48 6000 0000                  		bra.w	loc_72B14			; E4
000A7B4C                            ; ===========================================================================
000A7B4C 6000 0000                  		bra.w	loc_72B9E			; E5
000A7B50                            ; ===========================================================================
000A7B50 6000 0000                  		bra.w	loc_72BA4			; E6
000A7B54                            ; ===========================================================================
000A7B54 6000 0000                  		bra.w	loc_72BAE			; E7
000A7B58                            ; ===========================================================================
000A7B58 6000 0000                  		bra.w	loc_72BB4			; E8
000A7B5C                            ; ===========================================================================
000A7B5C 6000 0000                  		bra.w	loc_72BBE			; E9
000A7B60                            ; ===========================================================================
000A7B60 6000 0000                  		bra.w	loc_72BC6			; EA
000A7B64                            ; ===========================================================================
000A7B64 6000 0000                  		bra.w	loc_72BD0			; EB
000A7B68                            ; ===========================================================================
000A7B68 6000 0000                  		bra.w	loc_72BE6			; EC
000A7B6C                            ; ===========================================================================
000A7B6C 6000 0000                  		bra.w	loc_72BEE			; ED
000A7B70                            ; ===========================================================================
000A7B70 6000 0000                  		bra.w	loc_72BF4			; EE
000A7B74                            ; ===========================================================================
000A7B74 6000 0000                  		bra.w	loc_72C26			; EF
000A7B78                            ; ===========================================================================
000A7B78 6000 0000                  		bra.w	loc_72D30			; F0
000A7B7C                            ; ===========================================================================
000A7B7C 6000 0000                  		bra.w	loc_72D52			; F1
000A7B80                            ; ===========================================================================
000A7B80 6000 0000                  		bra.w	loc_72D58			; F2
000A7B84                            ; ===========================================================================
000A7B84 6000 0000                  		bra.w	loc_72E06			; F3
000A7B88                            ; ===========================================================================
000A7B88 6000 0000                  		bra.w	loc_72E20			; F4
000A7B8C                            ; ===========================================================================
000A7B8C 6000 0000                  		bra.w	loc_72E26			; F5
000A7B90                            ; ===========================================================================
000A7B90 6000 0000                  		bra.w	loc_72E2C			; F6
000A7B94                            ; ===========================================================================
000A7B94 6000 0000                  		bra.w	loc_72E38			; F7
000A7B98                            ; ===========================================================================
000A7B98 6000 0000                  		bra.w	loc_72E52			; F8
000A7B9C                            ; ===========================================================================
000A7B9C 6000 0000                  		bra.w	loc_72E64			; F9
000A7BA0                            ; ===========================================================================
000A7BA0                            ; ---------------------------------------------------------------------------
000A7BA0                            ; Flag FA - Reverse flag
000A7BA0                            ; ---------------------------------------------------------------------------
000A7BA0                            
000A7BA0                            FlagFA:
000A7BA0 0855 0005                  		bchg.b	#$05,(a5)			; CHG: change reverse flag
000A7BA4 4E75                       		rts					; CHG: return
000A7BA6                            
000A7BA6                            ; ===========================================================================
000A7BA6                            
000A7BA6                            loc_72ACC:				; XREF: loc_72A64
000A7BA6 121C                       		move.b	(a4)+,d1
000A7BA8 4A2D 0001                  		tst.b	1(a5)
000A7BAC 6B00                       		bmi.s	locret_72AEA
000A7BAE 102D 000A                  		move.b	$A(a5),d0
000A7BB2 0200 0037                  		andi.b	#$37,d0
000A7BB6 8200                       		or.b	d0,d1
000A7BB8 1B41 000A                  		move.b	d1,$A(a5)
000A7BBC 103C 00B4                  		move.b	#$B4,d0
000A7BC0 6000 FAE4                  		bra.w	loc_72716
000A7BC4                            ; ===========================================================================
000A7BC4                            
000A7BC4                            locret_72AEA:
000A7BC4 4E75                       		rts	
000A7BC6                            ; ===========================================================================
000A7BC6                            
000A7BC6                            loc_72AEC:				; XREF: loc_72A64
000A7BC6 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000A7BCA 4E75                       		rts	
000A7BCC                            ; ===========================================================================
000A7BCC                            
000A7BCC                            loc_72AF2:				; XREF: loc_72A64
000A7BCC 1D5C 0007                  		move.b	(a4)+,7(a6)
000A7BD0 4E75                       		rts	
000A7BD2                            ; ===========================================================================
000A7BD2                            
000A7BD2                            loc_72AF8:				; XREF: loc_72A64
000A7BD2 7000                       		moveq	#0,d0
000A7BD4 102D 000D                  		move.b	$D(a5),d0
000A7BD8 2875 0000                  		movea.l	(a5,d0.w),a4
000A7BDC 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000A7BE4 544C                       		addq.w	#2,a4
000A7BE6 5800                       		addq.b	#4,d0
000A7BE8 1B40 000D                  		move.b	d0,$D(a5)
000A7BEC 4E75                       		rts	
000A7BEE                            ; ===========================================================================
000A7BEE                            
000A7BEE                            loc_72B14:				; XREF: loc_72A64
000A7BEE 204E                       		movea.l	a6,a0
000A7BF0 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A7BF4 236E 0010 0010             	move.l	$10(a6),$10(a1)				; CHG: copy buffer address across
000A7BFA 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
000A7BFE                            
000A7BFE                            loc_72B1E:
000A7BFE 20D9                       		move.l	(a1)+,(a0)+
000A7C00 51C8 FFFC                  		dbf	d0,loc_72B1E
000A7C04                            
000A7C04                            	;	bset	#2,$40(a6)
000A7C04                            	;	bset	#2,$70(a6)				; MJ: enable PCM 2
000A7C04 264D                       		movea.l	a5,a3
000A7C06 1C3C 0028                  		move.b	#$28,d6
000A7C0A 9C2E 0026                  		sub.b	$26(a6),d6
000A7C0E 1A06                       	move.b	d6,d5
000A7C10 DA05                       	add.b	d5,d5
000A7C12 DA06                       	add.b	d6,d5
000A7C14                            
000A7C14 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to do
000A7C16 4BEE 0040                  		lea	$40(a6),a5				; CHG: start from PCM 1
000A7C1A                            
000A7C1A                            FE4_NextPCM:
000A7C1A 0815 0007                  		btst	#$07,(a5)				; CHG: is the channel running?
000A7C1E 6700                       		beq.s	FE4_NoPCM				; CHG: if not, branch
000A7C20                            	;	bset	#$01,(a5)				; CHG: set the channel as resting
000A7C20 DB2D 0009                  		add.b	d5,$09(a5)				; CHG: reduce its volume
000A7C24                            
000A7C24                            FE4_NoPCM:
000A7C24 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A7C28 51CF FFF0                  		dbf	d7,FE4_NextPCM				; CHG: repeat for all channels
000A7C2C                            
000A7C2C 7E05                       		moveq	#5,d7
000A7C2E                            	;	lea	$A0(a6),a5				; MJ: new FM location
000A7C2E                            
000A7C2E                            loc_72B3A:
000A7C2E 0815 0007                  		btst	#7,(a5)
000A7C32 6700                       		beq.s	loc_72B5C
000A7C34 08D5 0001                  		bset	#1,(a5)
000A7C38 DD2D 0009                  		add.b	d6,9(a5)
000A7C3C 0815 0002                  		btst	#2,(a5)
000A7C40 6600                       		bne.s	loc_72B5C
000A7C42 4A2E 000E                  	tst.b	$0E(a6)
000A7C46 6600                       	bne.s	locret_72B5C_2
000A7C48 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7C4C 6600                       	bne.s	loc_72B5C
000A7C4E                            
000A7C4E                            	locret_72B5C_2:
000A7C4E 7000                       		moveq	#0,d0
000A7C50 102D 000B                  		move.b	$B(a5),d0
000A7C54 226E 0018                  		movea.l	$18(a6),a1
000A7C58 4EBA 0000                  		jsr	sub_72C4E(pc)
000A7C5C                            
000A7C5C                            loc_72B5C:
000A7C5C DAFC 0030                  		adda.w	#$30,a5
000A7C60 51CF FFCC                  		dbf	d7,loc_72B3A
000A7C64                            
000A7C64 7E02                       		moveq	#2,d7
000A7C66                            
000A7C66                            loc_72B66:
000A7C66 0815 0007                  		btst	#7,(a5)
000A7C6A 6700                       		beq.s	loc_72B78
000A7C6C 08D5 0001                  		bset	#1,(a5)
000A7C70 4EBA FD82                  		jsr	sub_729A0(pc)
000A7C74 DD2D 0009                  		add.b	d6,9(a5)
000A7C78                            
000A7C78                            loc_72B78:
000A7C78 DAFC 0030                  		adda.w	#$30,a5
000A7C7C 51CF FFE8                  		dbf	d7,loc_72B66
000A7C80 2A4B                       		movea.l	a3,a5
000A7C82 1D7C 0080 0024             		move.b	#$80,$24(a6)
000A7C88 1D7C 0028 0026             		move.b	#$28,$26(a6)
000A7C8E 422E 0027                  		clr.b	$27(a6)
000A7C92 504F                       		addq.w	#8,sp
000A7C94 4E75                       		rts	
000A7C96                            ; ===========================================================================
000A7C96                            
000A7C96                            loc_72B9E:				; XREF: loc_72A64
000A7C96 1B5C 0002                  		move.b	(a4)+,2(a5)
000A7C9A 4E75                       		rts	
000A7C9C                            ; ===========================================================================
000A7C9C                            
000A7C9C                            loc_72BA4:				; XREF: loc_72A64
000A7C9C 101C                       		move.b	(a4)+,d0
000A7C9E D12D 0009                  		add.b	d0,9(a5)
000A7CA2 6000 0000                  		bra.w	sub_72CB4
000A7CA6                            ; ===========================================================================
000A7CA6                            
000A7CA6                            loc_72BAE:				; XREF: loc_72A64
000A7CA6 08D5 0004                  		bset	#4,(a5)
000A7CAA 4E75                       		rts	
000A7CAC                            ; ===========================================================================
000A7CAC                            
000A7CAC                            loc_72BB4:				; XREF: loc_72A64
000A7CAC 1B54 0012                  		move.b	(a4),$12(a5)
000A7CB0 1B5C 0013                  		move.b	(a4)+,$13(a5)
000A7CB4 4E75                       		rts	
000A7CB6                            ; ===========================================================================
000A7CB6                            
000A7CB6                            loc_72BBE:				; XREF: loc_72A64
000A7CB6 101C                       		move.b	(a4)+,d0
000A7CB8 D12D 0008                  		add.b	d0,8(a5)
000A7CBC 4E75                       		rts	
000A7CBE                            ; ===========================================================================
000A7CBE                            
000A7CBE                            loc_72BC6:				; XREF: loc_72A64
000A7CBE 1D54 0002                  		move.b	(a4),2(a6)
000A7CC2 1D5C 0001                  		move.b	(a4)+,1(a6)
000A7CC6 4E75                       		rts	
000A7CC8                            ; ===========================================================================
000A7CC8                            
000A7CC8                            loc_72BD0:				; XREF: loc_72A64
000A7CC8 41EE 0040                  		lea	$40(a6),a0
000A7CCC 101C                       		move.b	(a4)+,d0
000A7CCE 7230                       		moveq	#$30,d1
000A7CD0 740A                       		moveq	#10,d2				; MJ: extra channel
000A7CD2                            
000A7CD2                            loc_72BDA:
000A7CD2 1140 0002                  		move.b	d0,2(a0)
000A7CD6 D0C1                       		adda.w	d1,a0
000A7CD8 51CA FFF8                  		dbf	d2,loc_72BDA
000A7CDC                            
000A7CDC 4E75                       		rts	
000A7CDE                            ; ===========================================================================
000A7CDE                            
000A7CDE                            loc_72BE6:				; XREF: loc_72A64
000A7CDE 101C                       		move.b	(a4)+,d0
000A7CE0 D12D 0009                  		add.b	d0,9(a5)
000A7CE4 4E75                       		rts	
000A7CE6                            ; ===========================================================================
000A7CE6                            
000A7CE6                            loc_72BEE:				; XREF: loc_72A64
000A7CE6 422E 002C                  		clr.b	$2C(a6)
000A7CEA 4E75                       		rts	
000A7CEC                            ; ===========================================================================
000A7CEC                            
000A7CEC                            loc_72BF4:				; XREF: loc_72A64
000A7CEC 0895 0007                  		bclr	#7,(a5)
000A7CF0 0895 0004                  		bclr	#4,(a5)
000A7CF4 4EBA F98C                  		jsr	sub_726FE(pc)
000A7CF8 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A7CFC 6B00                       		bmi.s	loc_72C22
000A7CFE 264D                       		movea.l	a5,a3
000A7D00 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A7D04 226E 0018                  		movea.l	$18(a6),a1
000A7D08 0895 0002                  		bclr	#2,(a5)
000A7D0C 08D5 0001                  		bset	#1,(a5)
000A7D10 102D 000B                  		move.b	$B(a5),d0
000A7D14 4EBA 0000                  		jsr	sub_72C4E(pc)
000A7D18 2A4B                       		movea.l	a3,a5
000A7D1A                            
000A7D1A                            loc_72C22:
000A7D1A 504F                       		addq.w	#8,sp
000A7D1C 4E75                       		rts	
000A7D1E                            ; ===========================================================================
000A7D1E                            
000A7D1E                            loc_72C26:				; XREF: loc_72A64
000A7D1E 7000                       		moveq	#0,d0
000A7D20 101C                       		move.b	(a4)+,d0
000A7D22 1B40 000B                  		move.b	d0,$B(a5)
000A7D26                            
000A7D26                            SFM_UpdateVoice:
000A7D26 0815 0002                  		btst	#2,(a5)
000A7D2A 6600 0000                  		bne.w	locret_72CAA
000A7D2E 4A2E 000E                  	tst.b	$0E(a6)
000A7D32 6600                       	bne.s	locret_72CAA_2
000A7D34 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7D38 6600                       	bne.s	locret_72CAA
000A7D3A                            
000A7D3A                            	locret_72CAA_2:
000A7D3A                            
000A7D3A 226E 0018                  		movea.l	$18(a6),a1
000A7D3E 4A2E 000E                  		tst.b	$E(a6)
000A7D42 6700                       		beq.s	sub_72C4E
000A7D44 226D 0020                  		movea.l	$20(a5),a1	; ERROR HERE...
000A7D48 4A2E 000E                  		tst.b	$E(a6)
000A7D4C 6B00                       		bmi.s	sub_72C4E
000A7D4E 226E 0020                  		movea.l	$20(a6),a1
000A7D52                            
000A7D52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7D52                            
000A7D52                            
000A7D52                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000A7D52 5340                       		subq.w	#1,d0
000A7D54 6B00                       		bmi.s	loc_72C5C
000A7D56 323C 0019                  		move.w	#$19,d1
000A7D5A                            
000A7D5A                            loc_72C56:
000A7D5A D2C1                       		adda.w	d1,a1
000A7D5C 51C8 FFFC                  		dbf	d0,loc_72C56
000A7D60                            
000A7D60                            loc_72C5C:
000A7D60 1219                       		move.b	(a1)+,d1
000A7D62 1B41 001F                  		move.b	d1,$1F(a5)
000A7D66 1801                       		move.b	d1,d4
000A7D68 103C 00B0                  		move.b	#$B0,d0
000A7D6C 4EBA F950                  		jsr	sub_72722(pc)
000A7D70 45FA 0000                  		lea	byte_72D18(pc),a2
000A7D74 7613                       		moveq	#$13,d3
000A7D76                            
000A7D76                            loc_72C72:
000A7D76 101A                       		move.b	(a2)+,d0
000A7D78 1219                       		move.b	(a1)+,d1
000A7D7A 4EBA F942                  		jsr	sub_72722(pc)
000A7D7E 51CB FFF6                  		dbf	d3,loc_72C72
000A7D82 7A03                       		moveq	#3,d5
000A7D84 0244 0007                  		andi.w	#7,d4
000A7D88 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000A7D8C 162D 0009                  		move.b	9(a5),d3
000A7D90 D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A7D94                            
000A7D94                            loc_72C8C:
000A7D94 101A                       		move.b	(a2)+,d0
000A7D96 1219                       		move.b	(a1)+,d1
000A7D98 E20C                       		lsr.b	#1,d4
000A7D9A 6400                       		bcc.s	loc_72C96
000A7D9C D203                       		add.b	d3,d1
000A7D9E                            
000A7D9E                            loc_72C96:
000A7D9E 4EBA F91E                  		jsr	sub_72722(pc)
000A7DA2 51CD FFF0                  		dbf	d5,loc_72C8C
000A7DA6 103C 00B4                  		move.b	#$B4,d0
000A7DAA 122D 000A                  		move.b	$A(a5),d1
000A7DAE 4EBA F90E                  		jsr	sub_72722(pc)
000A7DB2                            
000A7DB2                            locret_72CAA:
000A7DB2 4E75                       		rts	
000A7DB4                            ; End of function sub_72C4E
000A7DB4                            
000A7DB4                            ; ===========================================================================
000A7DB4 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000A7DBC                            
000A7DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7DBC                            
000A7DBC                            
000A7DBC                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000A7DBC 0815 0002                  		btst	#2,(a5)
000A7DC0 6600                       		bne.s	locret_72D16
000A7DC2                            
000A7DC2 4A2E 000E                  	tst.b	$0E(a6)
000A7DC6 6600                       	bne.s	locret_72D16_2
000A7DC8 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7DCC 6600                       	bne.s	locret_72D16
000A7DCE                            
000A7DCE                            	locret_72D16_2:
000A7DCE 7000                       		moveq	#0,d0
000A7DD0 102D 000B                  		move.b	$B(a5),d0
000A7DD4 226E 0018                  		movea.l	$18(a6),a1
000A7DD8 4A2E 000E                  		tst.b	$E(a6)
000A7DDC 6700                       		beq.s	loc_72CD8
000A7DDE 226D 0020                  		movea.l	$20(a5),a1
000A7DE2 4A2E 000E                  		tst.b	$E(a6)
000A7DE6 6B00                       		bmi.s	loc_72CD8
000A7DE8 226E 0020                  		movea.l	$20(a6),a1
000A7DEC                            
000A7DEC                            loc_72CD8:
000A7DEC 5340                       		subq.w	#1,d0
000A7DEE 6B00                       		bmi.s	loc_72CE6
000A7DF0 323C 0019                  		move.w	#$19,d1
000A7DF4                            
000A7DF4                            loc_72CE0:
000A7DF4 D2C1                       		adda.w	d1,a1
000A7DF6 51C8 FFFC                  		dbf	d0,loc_72CE0
000A7DFA                            
000A7DFA                            loc_72CE6:
000A7DFA D2FC 0015                  		adda.w	#$15,a1
000A7DFE 45FA 0000                  		lea	byte_72D2C(pc),a2
000A7E02 102D 001F                  		move.b	$1F(a5),d0
000A7E06 0240 0007                  		andi.w	#7,d0
000A7E0A 183B 00A8                  		move.b	byte_72CAC(pc,d0.w),d4
000A7E0E 162D 0009                  		move.b	9(a5),d3
000A7E12 D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A7E16 6B00                       		bmi.s	locret_72D16
000A7E18 7A03                       		moveq	#3,d5
000A7E1A                            
000A7E1A                            loc_72D02:
000A7E1A 101A                       		move.b	(a2)+,d0
000A7E1C 1219                       		move.b	(a1)+,d1
000A7E1E E20C                       		lsr.b	#1,d4
000A7E20 6400                       		bcc.s	loc_72D12
000A7E22 D203                       		add.b	d3,d1
000A7E24 6500                       		bcs.s	loc_72D12
000A7E26 4EBA F896                  		jsr	sub_72722(pc)
000A7E2A                            
000A7E2A                            loc_72D12:
000A7E2A 51CD FFEE                  		dbf	d5,loc_72D02
000A7E2E                            
000A7E2E                            locret_72D16:
000A7E2E 4E75                       		rts	
000A7E30                            ; End of function sub_72CB4
000A7E30                            
000A7E30                            ; ===========================================================================
000A7E30 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000A7E3A 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000A7E44 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000A7E48                            ; ===========================================================================
000A7E48                            
000A7E48                            loc_72D30:				; XREF: loc_72A64
000A7E48 08D5 0003                  		bset	#3,(a5)
000A7E4C 2B4C 0014                  		move.l	a4,$14(a5)
000A7E50 1B5C 0018                  		move.b	(a4)+,$18(a5)
000A7E54 1B5C 0019                  		move.b	(a4)+,$19(a5)
000A7E58 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000A7E5C 101C                       		move.b	(a4)+,d0
000A7E5E E208                       		lsr.b	#1,d0
000A7E60 1B40 001B                  		move.b	d0,$1B(a5)
000A7E64 426D 001C                  		clr.w	$1C(a5)
000A7E68 4E75                       		rts	
000A7E6A                            ; ===========================================================================
000A7E6A                            
000A7E6A                            loc_72D52:				; XREF: loc_72A64
000A7E6A 08D5 0003                  		bset	#3,(a5)
000A7E6E 206D 0014                  		movea.l	$14(a5),a0				; CHG: load modulation address
000A7E72 43ED 0018                  		lea	$18(a5),a1				; CHG: load modulation settings RAM
000A7E76 12D8                       		move.b	(a0)+,(a1)+				; CHG: reset settings...
000A7E78 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A7E7A 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A7E7C 1018                       		move.b	(a0)+,d0				; CHG: ''
000A7E7E E208                       		lsr.b	#$01,d0					; CHG: ''
000A7E80 12C0                       		move.b	d0,(a1)+				; CHG: ''
000A7E82 4259                       		clr.w	(a1)+					; CHG: clear modulation frequency
000A7E84 4E75                       		rts	
000A7E86                            ; ===========================================================================
000A7E86                            
000A7E86                            loc_72D58:				; XREF: loc_72A64
000A7E86 0895 0007                  		bclr	#7,(a5)
000A7E8A 0895 0004                  		bclr	#4,(a5)
000A7E8E 4A2D 0001                  		tst.b	1(a5)
000A7E92 6B00                       		bmi.s	loc_72D74
000A7E94 4A2E 0008                  		tst.b	8(a6)
000A7E98 6B00 0000                  		bmi.w	SF2_MutePCM				; CHG: for PCM, branch to a differen mute routine
000A7E9C 4EBA F7E4                  		jsr	sub_726FE(pc)
000A7EA0 6000                       		bra.s	loc_72D78
000A7EA2                            ; ===========================================================================
000A7EA2                            
000A7EA2                            loc_72D74:
000A7EA2 4EBA FB50                  		jsr	sub_729A0(pc)
000A7EA6                            
000A7EA6                            loc_72D78:
000A7EA6 4A2E 000E                  		tst.b	$E(a6)
000A7EAA 6A00 0000                  		bpl.w	loc_72E02
000A7EAE 4216                       		clr.b	0(a6)
000A7EB0 7000                       		moveq	#0,d0
000A7EB2 102D 0001                  		move.b	1(a5),d0
000A7EB6 6B00                       		bmi.s	loc_72DCC
000A7EB8 41FA F250                  		lea	dword_722CC(pc),a0
000A7EBC 264D                       		movea.l	a5,a3
000A7EBE 0C00 0004                  		cmpi.b	#4,d0
000A7EC2 6600                       		bne.s	loc_72DA8
000A7EC4 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A7EC8 6A00                       		bpl.s	loc_72DA8
000A7ECA 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A7ECE 226E 0020                  		movea.l	$20(a6),a1
000A7ED2 6000                       		bra.s	loc_72DB8
000A7ED4                            ; ===========================================================================
000A7ED4                            
000A7ED4                            loc_72DA8:
000A7ED4 5500                       		subq.b	#2,d0
000A7ED6 E508                       		lsl.b	#2,d0
000A7ED8 2A70 0000                  		movea.l	(a0,d0.w),a5
000A7EDC 4A15                       		tst.b	(a5)
000A7EDE 6A00                       		bpl.s	loc_72DC8
000A7EE0 226E 0018                  		movea.l	$18(a6),a1
000A7EE4                            
000A7EE4                            loc_72DB8:
000A7EE4 0895 0002                  		bclr	#2,(a5)
000A7EE8 08D5 0001                  		bset	#1,(a5)
000A7EEC 102D 000B                  		move.b	$B(a5),d0
000A7EF0 4EBA FE60                  		jsr	sub_72C4E(pc)
000A7EF4                            
000A7EF4                            loc_72DC8:
000A7EF4 2A4B                       		movea.l	a3,a5
000A7EF6 6000                       		bra.s	loc_72E02
000A7EF8                            ; ===========================================================================
000A7EF8                            
000A7EF8                            loc_72DCC:
000A7EF8 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A7EFC 4A10                       		tst.b	(a0)
000A7EFE 6A00                       		bpl.s	loc_72DE0
000A7F00 0C00 00E0                  		cmpi.b	#$E0,d0
000A7F04 6700                       		beq.s	loc_72DEA
000A7F06 0C00 00C0                  		cmpi.b	#$C0,d0
000A7F0A 6700                       		beq.s	loc_72DEA
000A7F0C                            
000A7F0C                            loc_72DE0:
000A7F0C 41FA F1FC                  		lea	dword_722CC(pc),a0
000A7F10 E608                       		lsr.b	#3,d0
000A7F12 2070 0000                  		movea.l	(a0,d0.w),a0
000A7F16                            
000A7F16                            loc_72DEA:
000A7F16 0890 0002                  		bclr	#2,(a0)
000A7F1A 08D0 0001                  		bset	#1,(a0)
000A7F1E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A7F24 6600                       		bne.s	loc_72E02
000A7F26 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A7F2E                            
000A7F2E                            loc_72E02:
000A7F2E 504F                       		addq.w	#$04*2,sp					; CHG: skip return addresses (returns back outside of the sound driver)
000A7F30 4E75                       		rts	
000A7F32                            
000A7F32                            SF2_MutePCM:
000A7F32 584F                       		addq.w	#4,sp						; CHG: go back, but not out of sound driver
000A7F34 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)					; CHG: is this PCM 1?
000A7F3A 6600                       		bne.s	SF2_MutePCM2					; CHG: if not, branch to mute PCM 2
000A7F3C 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7F42 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A7F48 33FC 0100 00A1 1100 0839+  		StopZ80
000A7F5A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7F5C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7F5E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7F60 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7F62 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7F64 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7F66 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7F68 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7F6A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7F6C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7F6E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7F70 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7F72 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A7F7A 33FC 0000 00A1 1100        		StartZ80
000A7F82 4E75                       		rts							; CHG: return
000A7F84                            
000A7F84                            SF2_MutePCM2:
000A7F84 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7F8A 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 1 slot address
000A7F90 33FC 0100 00A1 1100 0839+  		StopZ80
000A7FA2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7FA4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7FA6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7FA8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7FAA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7FAC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7FAE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7FB0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7FB2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7FB4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7FB6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7FB8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7FBA 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A7FC2 33FC 0000 00A1 1100        		StartZ80
000A7FCA 4E75                       		rts							; CHG: return
000A7FCC                            
000A7FCC                            ; ===========================================================================
000A7FCC                            
000A7FCC                            loc_72E06:				; XREF: loc_72A64
000A7FCC 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000A7FD2 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000A7FD6 0815 0002                  		btst	#2,(a5)
000A7FDA 6600                       		bne.s	locret_72E1E 
000A7FDC 4A2E 000E                  	tst.b	$0E(a6)
000A7FE0 6600                       	bne.s	locret_72E1E_2
000A7FE2 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7FE6 6600                       	bne.s	locret_72E1E 
000A7FE8                            
000A7FE8                            	locret_72E1E_2:
000A7FE8 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
000A7FEC 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
000A7FF2 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
000A7FF6 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
000A7FFA 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
000A7FFC 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
000A8004                            
000A8004                            locret_72E1E:
000A8004 4E75                       		rts	
000A8006                            ; ===========================================================================
000A8006                            
000A8006                            loc_72E20:				; XREF: loc_72A64
000A8006 0895 0003                  		bclr	#3,(a5)
000A800A 4E75                       		rts	
000A800C                            ; ===========================================================================
000A800C                            
000A800C                            loc_72E26:				; XREF: loc_72A64
000A800C 1B5C 000B                  		move.b	(a4)+,$B(a5)
000A8010 4E75                       		rts	
000A8012                            ; ===========================================================================
000A8012                            
000A8012                            loc_72E2C:				; XREF: loc_72A64
000A8012 101C                       		move.b	(a4)+,d0
000A8014 E148                       		lsl.w	#8,d0
000A8016 101C                       		move.b	(a4)+,d0
000A8018 D8C0                       		adda.w	d0,a4
000A801A 534C                       		subq.w	#1,a4
000A801C 4E75                       		rts	
000A801E                            ; ===========================================================================
000A801E                            
000A801E                            loc_72E38:				; XREF: loc_72A64
000A801E 7000                       		moveq	#0,d0
000A8020 101C                       		move.b	(a4)+,d0
000A8022 121C                       		move.b	(a4)+,d1
000A8024 4A35 0024                  		tst.b	$24(a5,d0.w)
000A8028 6600                       		bne.s	loc_72E48
000A802A 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000A802E                            
000A802E                            loc_72E48:
000A802E 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000A8032 66DE                       		bne.s	loc_72E2C
000A8034 544C                       		addq.w	#2,a4
000A8036 4E75                       		rts	
000A8038                            ; ===========================================================================
000A8038                            
000A8038                            loc_72E52:				; XREF: loc_72A64
000A8038 7000                       		moveq	#0,d0
000A803A 102D 000D                  		move.b	$D(a5),d0
000A803E 5900                       		subq.b	#4,d0
000A8040 2B8C 0000                  		move.l	a4,(a5,d0.w)
000A8044 1B40 000D                  		move.b	d0,$D(a5)
000A8048 60C8                       		bra.s	loc_72E2C
000A804A                            ; ===========================================================================
000A804A                            
000A804A                            loc_72E64:				; XREF: loc_72A64
000A804A 103C 0088                  		move.b	#$88,d0
000A804E 123C 000F                  		move.b	#$F,d1
000A8052 4EBA F676                  		jsr	sub_7272E(pc)
000A8056 103C 008C                  		move.b	#$8C,d0
000A805A 123C 000F                  		move.b	#$F,d1
000A805E 6000 F66A                  		bra.w	sub_7272E
000A8062                            ; ===========================================================================
000A8062                            Music81:	incbin	sound\music81.bin
000A8840 00                         		even
000A8840                            Music82:	incbin	sound\music82.bin
000A8D6E 00                         		even
000A8D6E                            Music83:	incbin	sound\music83.bin
000A91E8 00                         		even
000A91E8                            Music84:	incbin	sound\music84.bin
000A9666 00                         		even
000A9666                            Music85:	incbin	sound\music85.bin
000A9BBE 00                         		even
000A9BBE                            Music86:	incbin	sound\music86.bin
000AA2F2                            		even
000AA2F2                            Music87:	incbin	sound\music87.bin
000AA598 00                         		even
000AA598                            Music88:	incbin	sound\music88.bin
000AA6A4 00                         		even
000AA6A4                            Music89:	incbin	sound\music89.bin
000AA9D8 00                         		even
000AA9D8                            Music8A:	incbin	sound\music8A.bin
000AABF0                            		even
000AABF0                            Music8B:	incbin	sound\music8B.bin
000AAF1C                            		even
000AAF1C                            Music8C:	incbin	sound\music8C.bin
000AB1DA 00                         		even
000AB1DA                            Music8D:	incbin	sound\music8D.bin
000AB47C                            		even
000AB47C                            Music8E:	incbin	sound\music8E.bin
000AB612 00                         		even
000AB612                            Music8F:	incbin	sound\music8F.bin
000AB774 00                         		even
000AB774                            Music90:	incbin	sound\music90.bin
000AB8F4 00                         		even
000AB8F4                            Music91:	incbin	sound\music91.bin
000ACF1C 00                         		even
000ACF1C                            Music92:	incbin	sound\music92.bin
000AD064 00                         		even
000AD064                            Music93:	incbin	sound\music93.bin
000AD13C 00                         		even
000AD13C                            ; ---------------------------------------------------------------------------
000AD13C                            ; Sound	effect pointers
000AD13C                            ; ---------------------------------------------------------------------------
000AD13C 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000AD148 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000AD154 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000AD160 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000AD16C 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000AD178 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000AD184 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000AD190 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000AD19C 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000AD1A8 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000AD1B4 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000AD1C0 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000AD1CC 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000AD1D8 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000AD1E4 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000AD1F0 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000AD1FC 0000 0000                  SoundD0Index:	dc.l SoundD0
000AD200                            SoundA0:	incbin	sound\soundA0.bin
000AD216                            		even
000AD216                            SoundA1:	incbin	sound\soundA1.bin
000AD240                            		even
000AD240                            SoundA2:	incbin	sound\soundA2.bin
000AD260                            		even
000AD260                            SoundA3:	incbin	sound\soundA3.bin
000AD292                            		even
000AD292                            SoundA4:	incbin	sound\soundA4.bin
000AD2C8                            		even
000AD2C8                            SoundA5:	incbin	sound\soundA5.bin
000AD2F4                            		even
000AD2F4                            SoundA6:	incbin	sound\soundA6.bin
000AD324                            		even
000AD324                            SoundA7:	incbin	sound\soundA7.bin
000AD354                            		even
000AD354                            SoundA8:	incbin	sound\soundA8.bin
000AD388                            		even
000AD388                            SoundA9:	incbin	sound\soundA9.bin
000AD39A                            		even
000AD39A                            SoundAA:	incbin	sound\soundAA.bin
000AD3DC                            		even
000AD3DC                            SoundAB:	incbin	sound\soundAB.bin
000AD3FC                            		even
000AD3FC                            SoundAC:	incbin	sound\soundAC.bin
000AD430                            		even
000AD430                            SoundAD:	incbin	sound\soundAD.bin
000AD466                            		even
000AD466                            SoundAE:	incbin	sound\soundAE.bin
000AD4B0                            		even
000AD4B0                            SoundAF:	incbin	sound\soundAF.bin
000AD4DE                            		even
000AD4DE                            SoundB0:	incbin	sound\soundB0.bin
000AD510                            		even
000AD510                            SoundB1:	incbin	sound\soundB1.bin
000AD53C                            		even
000AD53C                            SoundB2:	incbin	sound\soundB2.bin
000AD58C                            		even
000AD58C                            SoundB3:	incbin	sound\soundB3.bin
000AD5D6                            		even
000AD5D6                            SoundB4:	incbin	sound\soundB4.bin
000AD632                            		even
000AD632                            SoundB5:	incbin	sound\soundB5.bin
000AD660                            		even
000AD660                            SoundB6:	incbin	sound\soundB6.bin
000AD67E                            		even
000AD67E                            SoundB7:	incbin	sound\soundB7.bin
000AD6BA                            		even
000AD6BA                            SoundB8:	incbin	sound\soundB8.bin
000AD6D8                            		even
000AD6D8                            SoundB9:	incbin	sound\soundB9.bin
000AD73C                            		even
000AD73C                            SoundBA:	incbin	sound\soundBA.bin
000AD764                            		even
000AD764                            SoundBB:	incbin	sound\soundBB.bin
000AD790                            		even
000AD790                            SoundBC:	incbin	sound\soundBC.bin
000AD7D2                            		even
000AD7D2                            SoundBD:	incbin	sound\soundBD.bin
000AD826                            		even
000AD826                            SoundBE:	incbin	sound\soundBE.bin
000AD860                            		even
000AD860                            SoundBF:	incbin	sound\soundBF.bin
000AD8D2                            		even
000AD8D2                            SoundC0:	incbin	sound\soundC0.bin
000AD900                            		even
000AD900                            SoundC1:	incbin	sound\soundC1.bin
000AD93A                            		even
000AD93A                            SoundC2:	incbin	sound\soundC2.bin
000AD964                            		even
000AD964                            SoundC3:	incbin	sound\soundC3.bin
000AD9DE                            		even
000AD9DE                            SoundC4:	incbin	sound\soundC4.bin
000ADA06                            		even
000ADA06                            SoundC5:	incbin	sound\soundC5.bin
000ADA6E                            		even
000ADA6E                            SoundC6:	incbin	sound\soundC6.bin
000ADAB0                            		even
000ADAB0                            SoundC7:	incbin	sound\soundC7.bin
000ADADE                            		even
000ADADE                            SoundC8:	incbin	sound\soundC8.bin
000ADAF0                            		even
000ADAF0                            SoundC9:	incbin	sound\soundC9.bin
000ADB1E                            		even
000ADB1E                            SoundCA:	incbin	sound\soundCA.bin
000ADB4C                            		even
000ADB4C                            SoundCB:	incbin	sound\soundCB.bin
000ADB98                            		even
000ADB98                            SoundCC:	incbin	sound\soundCC.bin
000ADBD2                            		even
000ADBD2                            SoundCD:	incbin	sound\soundCD.bin
000ADBE0                            		even
000ADBE0                            SoundCE:	incbin	sound\soundCE.bin
000ADC0E                            		even
000ADC0E                            SoundCF:	incbin	sound\soundCF.bin
000ADC46                            		even
000ADC46                            SoundD0:	incbin	sound\soundD0.bin
000ADC80                            		even
000ADC80                            SegaPCM:	incbin	"Dual PCM\Samples\incswf\Sega.swf",$3A
000B3AC6                            SegaPCM_End:	even
000B3AC6                            
000B3AC6                            ; ===========================================================================
000B3AC6                            ; ---------------------------------------------------------------------------
000B3AC6                            ; Z80 ROM address
000B3AC6                            ; ---------------------------------------------------------------------------
000B3AC6                            
000B3AC6                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
000B55FE 00                         Z80ROM_End:	even
000B55FE                            
000B55FE                            ; ===========================================================================
000B55FE                            ; ---------------------------------------------------------------------------
000B55FE                            ; Sample 68k PCM list
000B55FE                            ; ---------------------------------------------------------------------------
000B55FE                            ; SampleList:
000B55FE                            		include	"Dual PCM\Samples.asm"
000B55FE                            ; ===========================================================================
000B55FE                            ; ---------------------------------------------------------------------------
000B55FE                            ; Sample 68k PCM list
000B55FE                            ; ---------------------------------------------------------------------------
000B55FE                            
000B55FE                            SampleList:
000B55FE                            
000B55FE                            	; --- Sonic 1 Samples ---
000B55FE                            
000B55FE 0000 0000                  		dc.l	Sonic1Kick			; 00
000B5602 0000 0000                  		dc.l	Sonic1Snare			; 01
000B5606 0000 0000                  		dc.l	Sonic1Timpani		; 02
000B560A 0000 0000                  		dc.l	SonimeDies			; 03
000B560E 0000 0000                  		dc.l	SonimeFrustrated	; 04
000B5612 0000 0000                  		dc.l	SonimeHappy			; 05
000B5616 0000 0000                  		dc.l	SonimeHappy2		; 06
000B561A 0000 0000                  		dc.l	SonimeHurt			; 07
000B561E 0000 0000                  		dc.l	SonimeImpatient		; 08
000B5622 0000 0000                  		dc.l	SonimeInvincibility	; 09
000B5626 0000 0000                  		dc.l	SonimeSpikey	; 0A
000B562A 0000 0000                  		dc.l	SonimeSpeed	; 0B
000B562E 0000 0000                  		dc.l	SonimeBossDefeated	; 0C
000B5632                            		
000B5632                            ; ---------------------------------------------------------------------------
000B5632                            ; Sample z80 pointers
000B5632                            ; ---------------------------------------------------------------------------
000B5632 =000036B0                  Sec	=	14000	; Hz per second
000B5632 =000003E8                  Mil	=	1000	; centi-seconds per second
000B5632                            
000B5632                            	; --- Stop Sample (used by note 80) ---
000B5632                            
000B5632 0000 0000 0000 0000 0000+  StopSample:				dcz80	SWF_StopSample,		SWF_StopSample_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B563E                            
000B563E                            	; --- Sonic 1 Samples ---
000B563E                            
000B563E 0000 0000 0000 0000 0000+  Sonic1Kick:				dcz80	SWF_S1_Kick,		SWF_S1_Kick_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B564A 0000 0000 0000 0000 0000+  Sonic1Snare:			dcz80	SWF_S1_Snare,		SWF_S1_Snare_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B5656 0000 0000 0000 0000 0000+  Sonic1Timpani:			dcz80	SWF_S1_Timpani,		SWF_S1_Timpani,			SWF_StopSample,		SWF_StopSample_Rev
000B5662 0000 0000 0000 0000 0000+  SonimeDies:				dcz80	SWF_Dies,			SWF_Dies_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B566E 0000 0000 0000 0000 0000+  SonimeFrustrated:		dcz80	SWF_Frustrated,		SWF_Frustrated_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B567A 0000 0000 0000 0000 0000+  SonimeHappy:			dcz80	SWF_Happy,			SWF_Happy_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B5686 0000 0000 0000 0000 0000+  SonimeHappy2:			dcz80	SWF_Happy2,			SWF_Happy2_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B5692 0000 0000 0000 0000 0000+  SonimeHurt:				dcz80	SWF_Hurt,			SWF_Hurt_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B569E 0000 0000 0000 0000 0000+  SonimeImpatient:		dcz80	SWF_Impatient,		SWF_Impatient_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B56AA 0000 0000 0000 0000 0000+  SonimeInvincibility:	dcz80	SWF_Invincibility,	SWF_Invincibility_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B56B6 0000 0000 0000 0000 0000+  SonimeSpikey:	dcz80	SWF_Spikey,	SWF_Spikey_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B56C2 0000 0000 0000 0000 0000+  SonimeSpeed:		dcz80	SWF_Speed,		SWF_Speed_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B56CE 0000 0000 0000 0000 0000+  SonimeBossDefeated:		dcz80	SWF_BossDefeated,		SWF_BossDefeated_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B56DA                            ; ---------------------------------------------------------------------------
000B56DA                            ; Sample file includes
000B56DA                            ; ---------------------------------------------------------------------------
000B56DA                            			align	$8000,$FF
000B8000                            ; ---------------------------------------------------------------------------
000B8000                            
000B8000                            	; --- Volume tables ---
000B8000                            
000B8000                            PCM_Volumes:		incbin	"Dual PCM\Volume Maker\Volumes.bin"
000C0000                            
000C0000                            	; --- Stop Sample (used by note 80) ---
000C0000                            
000C0000                            			EndMarker
000C0198                            SWF_StopSample:		dcb.b	$8000-((Z80E_Read*(($1000+$100)/$100))*2),$80
000C7E68                            SWF_StopSample_Rev:	EndMarker
000C8000                            
000C8000                            	; --- Sonic 1 Samples ---
000C8000                            
000C8000                            SWF_S1_Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
000C8894                            SWF_S1_Kick_Rev:	EndMarker
000C8A2C                            SWF_S1_Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
000C9303                            SWF_S1_Snare_Rev:	EndMarker
000C949B                            SWF_S1_Timpani:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani.swf"
000CC41F                            SWF_S1_Timpani_Rev:	EndMarker
000CC5B7                            SWF_Dies:			incbin	"Dual PCM\Samples\incswf\dies.swf"
000D0D24                            SWF_Dies_Rev:		EndMarker
000D0EBC                            SWF_Frustrated:		incbin	"Dual PCM\Samples\incswf\frustrated.swf"
000D8283                            SWF_Frustrated_Rev:	EndMarker
000D841B                            SWF_Happy:			incbin	"Dual PCM\Samples\incswf\happy.swf"
000DF3D3                            SWF_Happy_Rev:		EndMarker
000DF56B                            SWF_Happy2:			incbin	"Dual PCM\Samples\incswf\happy 2.swf"
000ECBB7                            SWF_Happy2_Rev:		EndMarker
000ECD4F                            SWF_Hurt:			incbin	"Dual PCM\Samples\incswf\hurt.swf"
000EF942                            SWF_Hurt_Rev:		EndMarker
000EFADA                            SWF_Impatient:		incbin	"Dual PCM\Samples\incswf\impatient.swf"
000F922E                            SWF_Impatient_Rev:	EndMarker
000F93C6                            SWF_Invincibility:	incbin	"Dual PCM\Samples\incswf\invincibility.swf"
001107C1                            SWF_Invincibility_Rev:	EndMarker
00110959                            SWF_Spikey:	incbin	"Dual PCM\Samples\incswf\spikey.swf"
00114934                            SWF_Spikey_Rev:	EndMarker
00114ACC                            SWF_Speed:	incbin	"Dual PCM\Samples\incswf\goingatsupersonicspeed.swf"
0011F331                            SWF_Speed_Rev:	EndMarker
0011F4C9                            SWF_BossDefeated:	incbin	"Dual PCM\Samples\incswf\bossdefeated.swf"
0012783F                            SWF_BossDefeated_Rev:	EndMarker
001279D7                            ; ===========================================================================
001279D7                            ; ===========================================================================
001279D8 00                         		even
001279D8                            
001279D8                            ; ===========================================================================
001279D8                            
001279D8                            SHC2021:    incbin "SHC21_Lite_Sonic12.bin"
0012DC3C                                        even
0012DC3C                            
0012DC3C                            ; ===============================================================
0012DC3C                            ; ---------------------------------------------------------------
0012DC3C                            ; Error handling module
0012DC3C                            ; ---------------------------------------------------------------
0012DC3C                            
0012DC3C 4EBA 0000                  BusError:	jsr	ErrorHandler(pc)
0012DC40 4255 5320 4552 524F 5200   		dc.b	"BUS ERROR",0			; text
0012DC4A 01                         		dc.b	1				; extended stack frame
0012DC4C 00                         		even
0012DC4C                            
0012DC4C 4EBA 0000                  AddressError:	jsr	ErrorHandler(pc)
0012DC50 4144 4452 4553 5320 4552+  		dc.b	"ADDRESS ERROR",0		; text
0012DC5E 01                         		dc.b	1				; extended stack frame
0012DC60 00                         		even
0012DC60                            
0012DC60 4EBA 0000                  IllegalInstr:	jsr	ErrorHandler(pc)
0012DC64 494C 4C45 4741 4C20 494E+  		dc.b	"ILLEGAL INSTRUCTION",0		; text
0012DC78 00                         		dc.b	0				; extended stack frame
0012DC7A 00                         		even
0012DC7A                            
0012DC7A 4EBA 0000                  ZeroDivide:	jsr	ErrorHandler(pc)
0012DC7E 5A45 524F 2044 4956 4944+  		dc.b	"ZERO DIVIDE",0  		; text
0012DC8A 00                         		dc.b	0				; extended stack frame
0012DC8C 00                         		even
0012DC8C                            
0012DC8C 4EBA 0000                  ChkInstr:	jsr	ErrorHandler(pc)
0012DC90 4348 4B20 494E 5354 5255+  		dc.b	"CHK INSTRUCTION",0  		; text
0012DCA0 00                         		dc.b	0				; extended stack frame
0012DCA2 00                         		even
0012DCA2                            
0012DCA2 4EBA 0000                  TrapvInstr:	jsr	ErrorHandler(pc)
0012DCA6 5452 4150 5620 494E 5354+  		dc.b	"TRAPV INSTRUCTION",0  		; text
0012DCB8 00                         		dc.b	0				; extended stack frame
0012DCBA 00                         		even
0012DCBA                            
0012DCBA 4EBA 0000                  PrivilegeViol:	jsr	ErrorHandler(pc)
0012DCBE 5052 4956 494C 4547 4520+  		dc.b	"PRIVILEGE VIOLATION",0  	; text
0012DCD2 00                         		dc.b	0				; extended stack frame
0012DCD4 00                         		even
0012DCD4                            
0012DCD4 4EBA 0000                  Trace:		jsr	ErrorHandler(pc)
0012DCD8 5452 4143 4500             		dc.b	"TRACE",0 	  		; text
0012DCDE 00                         		dc.b	0				; extended stack frame
0012DCE0 00                         		even
0012DCE0                            
0012DCE0 4EBA 0000                  Line1010Emu:	jsr	ErrorHandler(pc)
0012DCE4 4C49 4E45 2031 3031 3020+  		dc.b	"LINE 1010 EMULATOR",0  	; text
0012DCF7 00                         		dc.b	0				; extended stack frame
0012DCF8                            		even
0012DCF8                            
0012DCF8 4EBA 0000                  Line1111Emu:	jsr	ErrorHandler(pc)
0012DCFC 4C49 4E45 2031 3131 3120+  		dc.b	"LINE 1111 EMULATOR",0  	; text
0012DD0F 00                         		dc.b	0				; extended stack frame
0012DD10                            		even
0012DD10                            
0012DD10 4EBA 0000                  ErrorExcept:	jsr	ErrorHandler(pc)
0012DD14 4552 524F 5220 4558 4345+  		dc.b	"ERROR EXCEPTION",0    		; text
0012DD24 00                         		dc.b	0				; extended stack frame
0012DD26 00                         		even
0012DD26                            
0012DD26                            ErrorHandler:	incbin	"ErrorHandler.bin"
0012F73A                            
0012F73A                            ; end of 'ROM'
0012F73A                            EndOfRom:
0012F73A                            
0012F73A                            
