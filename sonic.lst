00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            		include	"Equates.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =FFFFFF90                  HBlankRAM	=	$FFFFFF90		; word	; jmp $00000000
00000000 =FFFFFF92                  HBlankRout	=	HBlankRAM+$02		; long	; ''
00000000 =FFFFFF96                  VBlankRAM	=	HBlankRout+$04		; word	; jmp $00000000
00000000 =FFFFFF98                  VBlankRout	=	VBlankRAM+$02		; long	; ''
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000018                  Z80E_Read = $18 
00000000 =000000DD                  x = $DD 
00000000 =000000FD                  y = $FD 
00000000 =00000000                  ldin = $0 
00000000 =00000000                  deci = $0 
00000000 =00000000                  inci = $0 
00000000 =00000000                  M_Read = $0 
00000000 =00000000                  M_CapPCM = $0 
00000000 =00000000                  M_Flush01 = $0 
00000000 =00000000                  M_Flush02 = $0 
00000000 =00000000                  M_Revert01 = $0 
00000000 =00000000                  M_Revert02 = $0 
00000000 =00000000                  M_Wrap = $0 
00000000 =00000000                  M_WrapCondition = $0 
00000000 =00000000                  Z80_Start = $0 
00000000 =00000010                  Z80_Stack = $10 
00000000 =00000010                  BreakLate = $10 
00000000 =00000028                  PCM1_ResetJmp = $28 
00000000 =00000030                  PCM2_ResetJmp = $30 
00000000 =00000038                  BreakVBlank = $38 
00000000 =00000040                  BVB_Check = $40 
00000000 =00000046                  BreakPrep = $46 
00000000 =00000063                  BreakDMA = $63 
00000000 =00000074                  BDMA_NoExchange = $74 
00000000 =00000082                  BDMA_NoFixVolume = $82 
00000000 =00000083                  BDMA_NoFixFlush = $83 
00000000 =00000084                  BDMA_ReadSet = $84 
00000000 =00000084                  BreakBank = $84 
00000000 =00000090                  BDMA_NoMax = $90 
00000000 =0000009A                  BDMA_FlushLoop = $9A 
00000000 =0000009A                  Z80_VBlank2 = $9A 
00000000 =0000009E                  BDMA_Flush02 = $9E 
00000000 =000000B3                  Z80_VBlank1 = $B3 
00000000 =000000B7                  BDMA_Flush01 = $B7 
00000000 =00000107                  BDMA_NoRestore = $107 
00000000 =00000107                  YM_FlushTimer = $107 
00000000 =00000116                  YMF_Buff1 = $116 
00000000 =00000120                  YM_Flush = $120 
00000000 =00000123                  YMF_NextByte = $123 
00000000 =00000142                  Z80_DelayYM1 = $142 
00000000 =00000169                  Z80_DelayYM2 = $169 
00000000 =00000189                  YMF_Finish02 = $189 
00000000 =0000018E                  Z80_DelayYM3 = $18E 
00000000 =00000192                  YMF_Finish01 = $192 
00000000 =00000197                  Z80_DelayYM4 = $197 
00000000 =0000019B                  PCM_Flush_exx = $19B 
00000000 =0000019C                  PCM_Flush = $19C 
00000000 =0000019F                  PCM_NextByte = $19F 
00000000 =000001B3                  Z80_DelayEnd1 = $1B3 
00000000 =000001B5                  YMF_Enter02 = $1B5 
00000000 =000001CC                  Z80_DelayEnd2 = $1CC 
00000000 =000001CE                  YMF_Enter01 = $1CE 
00000000 =000001F6                  YMF_SetBuff1 = $1F6 
00000000 =00000202                  VB_PCM1_VolOK = $202 
00000000 =0000020C                  VB_PCM2_VolOK = $20C 
00000000 =0000020D                  PCM_VolChangeDel = $20D 
00000000 =00000218                  PCM1_VolumeNext = $218 
00000000 =0000021D                  PCM2_VolumeNext = $21D 
00000000 =00000222                  PCM_VolChangeNo = $222 
00000000 =00000229                  Z80_Int1 = $229 
00000000 =0000022D                  Z80_Init = $22D 
00000000 =00000291                  CatchUp = $291 
00000000 =00000292                  CatchUp_Exx = $292 
00000000 =000002A6                  Z80_Int2 = $2A6 
00000000 =000002A7                  PCM1_MuteRet = $2A7 
00000000 =000002AC                  Int1_nop = $2AC 
00000000 =000002AD                  PCM1_Switch = $2AD 
00000000 =000002B8                  PCM1_OverflwCur = $2B8 
00000000 =000002C1                  PCM1_OverflwDiv = $2C1 
00000000 =000002DF                  Int1_lda = $2DF 
00000000 =000002E4                  PCM1_PrepRet = $2E4 
00000000 =000002E4                  PCM1_SampCur = $2E4 
00000000 =000002E7                  PCM1_Buffer = $2E7 
00000000 =000002EA                  PCM1_PitchQuo = $2EA 
00000000 =000002ED                  PCM1_PitchDiv = $2ED 
00000000 =000002F0                  PCM1_PitchCur = $2F0 
00000000 =000002F2                  PCM1_PreInst01 = $2F2 
00000000 =000002F7                  PCM1_PreInst02 = $2F7 
00000000 =000002FC                  PCM1_PreInst03 = $2FC 
00000000 =00000318                  PCM1_PreInst04 = $318 
00000000 =0000031D                  PCM1_PreInst05 = $31D 
00000000 =00000322                  PCM1_PreInst06 = $322 
00000000 =00000327                  PCM1_PreInst07 = $327 
00000000 =00000343                  PCM1_PreInst08 = $343 
00000000 =00000348                  PCM1_PreInst09 = $348 
00000000 =0000034D                  PCM1_PreInst0A = $34D 
00000000 =00000352                  PCM1_PreInst0B = $352 
00000000 =00000357                  PCM1_PreInst0C = $357 
00000000 =00000373                  PCM1_PreInst0D = $373 
00000000 =00000378                  PCM1_PreInst0E = $378 
00000000 =0000037D                  PCM1_PreInst0F = $37D 
00000000 =00000382                  PCM1_PreInst10 = $382 
00000000 =0000039E                  PCM1_PreInst11 = $39E 
00000000 =000003A3                  PCM1_PreInst12 = $3A3 
00000000 =000003A8                  PCM1_PreInst13 = $3A8 
00000000 =000003AD                  PCM1_PreInst14 = $3AD 
00000000 =000003B2                  PCM1_PreInst15 = $3B2 
00000000 =000003CE                  PCM1_PreInst16 = $3CE 
00000000 =000003D3                  PCM1_PreInst17 = $3D3 
00000000 =000003D8                  PCM1_PreInst18 = $3D8 
00000000 =00000403                  PCM2_MuteRet = $403 
00000000 =00000408                  Int2_nop = $408 
00000000 =00000409                  PCM2_Switch = $409 
00000000 =00000414                  PCM2_OverflwCur = $414 
00000000 =00000432                  PCM2_OverflwDiv = $432 
00000000 =0000043B                  Int2_lda = $43B 
00000000 =00000440                  PCM2_PrepRet = $440 
00000000 =00000440                  PCM2_SampCur = $440 
00000000 =00000443                  PCM2_Buffer = $443 
00000000 =00000446                  PCM2_PitchQuo = $446 
00000000 =00000449                  PCM2_PitchDiv = $449 
00000000 =0000044C                  PCM2_PitchCur = $44C 
00000000 =0000044E                  PCM2_PreInst01 = $44E 
00000000 =0000046A                  PCM2_PreInst02 = $46A 
00000000 =0000046F                  PCM2_PreInst03 = $46F 
00000000 =00000474                  PCM2_PreInst04 = $474 
00000000 =00000479                  PCM2_PreInst05 = $479 
00000000 =0000047E                  PCM2_PreInst06 = $47E 
00000000 =0000049A                  PCM2_PreInst07 = $49A 
00000000 =0000049F                  PCM2_PreInst08 = $49F 
00000000 =000004A4                  PCM2_PreInst09 = $4A4 
00000000 =000004A9                  PCM2_PreInst0A = $4A9 
00000000 =000004C5                  PCM2_PreInst0B = $4C5 
00000000 =000004CA                  PCM2_PreInst0C = $4CA 
00000000 =000004CF                  PCM2_PreInst0D = $4CF 
00000000 =000004D4                  PCM2_PreInst0E = $4D4 
00000000 =000004D9                  PCM2_PreInst0F = $4D9 
00000000 =000004F5                  PCM2_PreInst10 = $4F5 
00000000 =000004FA                  PCM2_PreInst11 = $4FA 
00000000 =000004FF                  PCM2_PreInst12 = $4FF 
00000000 =00000504                  PCM2_PreInst13 = $504 
00000000 =00000520                  PCM2_PreInst14 = $520 
00000000 =00000525                  PCM2_PreInst15 = $525 
00000000 =0000052A                  PCM2_PreInst16 = $52A 
00000000 =0000052F                  PCM2_PreInst17 = $52F 
00000000 =00000534                  PCM2_PreInst18 = $534 
00000000 =0000055F                  UPD1_Buffer = $55F 
00000000 =00000565                  UPD1_SampCur = $565 
00000000 =0000056B                  UPD1_PitchCur = $56B 
00000000 =000005A3                  PCM_BuffNoReset = $5A3 
00000000 =000005A4                  PCM1_ChangeBank = $5A4 
00000000 =000005BB                  PCM1_IgnoreBank = $5BB 
00000000 =000005BB                  PCM2_ChangeBank = $5BB 
00000000 =000005D2                  PCM2_IgnoreBank = $5D2 
00000000 =000005D2                  PCM1_ChangePitch = $5D2 
00000000 =000005DC                  PCM1_PitchHigh = $5DC 
00000000 =000005E7                  PCM1_PitchLow = $5E7 
00000000 =00000603                  PCM1_IgnorePitch = $603 
00000000 =00000603                  PCM2_ChangePitch = $603 
00000000 =0000060D                  PCM2_PitchHigh = $60D 
00000000 =00000618                  PCM2_PitchLow = $618 
00000000 =00000634                  PCM2_IgnorePitch = $634 
00000000 =00000634                  PCM_ChangeVolume = $634 
00000000 =00000641                  PCM1_Volume = $641 
00000000 =00000646                  PCM2_Volume = $646 
00000000 =0000064B                  PCM_VolumeAlter = $64B 
00000000 =0000064E                  PCM_VolumeRet = $64E 
00000000 =0000064E                  PCM1_NewRET = $64E 
00000000 =00000651                  PCM2_NewRET = $651 
00000000 =00000654                  PCM_NoUpdate = $654 
00000000 =0000066A                  CU_ValidDist = $66A 
00000000 =0000066F                  CU_Flush = $66F 
00000000 =00000673                  FL_NextByte = $673 
00000000 =00000687                  Z80_Flush1 = $687 
00000000 =000006A1                  Z80_Flush2 = $6A1 
00000000 =000006BC                  PCM1_Mute = $6BC 
00000000 =000006CE                  PCM1_Normal = $6CE 
00000000 =000006D4                  PCM1_Reverse = $6D4 
00000000 =000006ED                  PCM1_PrepReset = $6ED 
00000000 =000006FC                  PCM1_PrepCount = $6FC 
00000000 =0000070A                  PCM1_PrepLoc = $70A 
00000000 =0000072E                  Int1_jp = $72E 
00000000 =00000731                  PCM1_Reset = $731 
00000000 =00000745                  PCM1_ValueAdd = $745 
00000000 =00000770                  Int1_ldhl = $770 
00000000 =00000782                  PCM1_ResInst = $782 
00000000 =00000787                  PCM1_ResSamp = $787 
00000000 =0000078A                  PCM1_ResBuff = $78A 
00000000 =0000078D                  PCM1_ResDiv = $78D 
00000000 =00000790                  PCM1_ResPitCur = $790 
00000000 =00000794                  PCM1_ResQuo = $794 
00000000 =00000797                  PCM1_ResJump = $797 
00000000 =0000079A                  PCM1_NewSample = $79A 
00000000 =000007AA                  PCM1_NewNormal = $7AA 
00000000 =000007B0                  PCM1_NewReverse = $7B0 
00000000 =000007C7                  PCM2_Mute = $7C7 
00000000 =000007D9                  PCM2_Normal = $7D9 
00000000 =000007DF                  PCM2_Reverse = $7DF 
00000000 =000007F8                  PCM2_PrepReset = $7F8 
00000000 =00000807                  PCM2_PrepCount = $807 
00000000 =00000815                  PCM2_PrepLoc = $815 
00000000 =00000824                  Int2_jp = $824 
00000000 =00000827                  PCM2_Reset = $827 
00000000 =0000083B                  PCM2_ValueAdd = $83B 
00000000 =00000866                  Int2_ldhl = $866 
00000000 =00000878                  PCM2_ResInst = $878 
00000000 =0000087D                  PCM2_ResSamp = $87D 
00000000 =00000880                  PCM2_ResBuff = $880 
00000000 =00000883                  PCM2_ResDiv = $883 
00000000 =00000886                  PCM2_ResPitCur = $886 
00000000 =0000088A                  PCM2_ResQuo = $88A 
00000000 =0000088D                  PCM2_ResJump = $88D 
00000000 =00000890                  PCM2_NewSample = $890 
00000000 =000008A0                  PCM2_NewNormal = $8A0 
00000000 =000008A6                  PCM2_NewReverse = $8A6 
00000000 =00000A00                  PCM_Volume1 = $A00 
00000000 =00000B00                  PCM_Volume2 = $B00 
00000000 =00000C00                  PCM1_PrepTable = $C00 
00000000 =00000C30                  PCM2_PrepTable = $C30 
00000000 =00000C60                  PCM1_BankCur = $C60 
00000000 =00000C61                  PCM2_BankCur = $C61 
00000000 =00000C62                  MuteSample = $C62 
00000000 =00000C64                  MuteBank = $C64 
00000000 =00000C65                  MuteSample_Rev = $C65 
00000000 =00000C67                  MuteBank_Rev = $C67 
00000000 =00000C68                  YM_Buffer = $C68 
00000000 =00000C69                  PCM1_Sample = $C69 
00000000 =00000C6B                  PCM1_Bank = $C6B 
00000000 =00000C6C                  PCM1_Sample_Rev = $C6C 
00000000 =00000C6E                  PCM1_Bank_Rev = $C6E 
00000000 =00000C6F                  PCM1_SampleNext = $C6F 
00000000 =00000C71                  PCM1_BankNext = $C71 
00000000 =00000C72                  PCM1_SampleNext_Rev = $C72 
00000000 =00000C74                  PCM1_BankNext_Rev = $C74 
00000000 =00000C75                  PCM2_Sample = $C75 
00000000 =00000C77                  PCM2_Bank = $C77 
00000000 =00000C78                  PCM2_Sample_Rev = $C78 
00000000 =00000C7A                  PCM2_Bank_Rev = $C7A 
00000000 =00000C7B                  PCM2_SampleNext = $C7B 
00000000 =00000C7D                  PCM2_BankNext = $C7D 
00000000 =00000C7E                  PCM2_SampleNext_Rev = $C7E 
00000000 =00000C80                  PCM2_BankNext_Rev = $C80 
00000000 =00000CB0                  PCM_Buffer1 = $CB0 
00000000 =00000EB0                  PCM_Buffer2 = $EB0 
00000000 =00001000                  YM_Buffer1 = $1000 
00000000 =00001400                  YM_Buffer2 = $1400 
00000000 =00001800                  PCM_OverflwCalc = $1800 
00000000 =00001A00                  PCM_VolumeControl = $1A00 
00000000 =00001A06                  PCM1_VolumeNew = $1A06 
00000000 =00001A08                  PCM1_VolumeCur = $1A08 
00000000 =00001A13                  PCM1_VolTimer = $1A13 
00000000 =00001A1B                  PCM1_NoVolume = $1A1B 
00000000 =00001A1B                  PCM2_VolumeNew = $1A1B 
00000000 =00001A1D                  PCM2_VolumeCur = $1A1D 
00000000 =00001A28                  PCM2_VolTimer = $1A28 
00000000 =00001A30                  PCM2_NoVolume = $1A30 
00000000 =00001A35                  SwitchVolume = $1A35 
00000000 =00001A38                  SV_VolumeBank = $1A38 
00000000 =00001A55                  SV_NoMute = $1A55 
00000000 =00001A5A                  SV_LoadVolume = $1A5A 
00000000 =00001A6E                  SV_Flush = $1A6E 
00000000 =00001A91                  SVF_NoMute = $1A91 
00000000 =00001A96                  SVF_LoadVolume = $1A96 
00000000 =00001AAB                  SVF_StartVolume = $1AAB 
00000000 =00001AFC                  SwitchBank = $1AFC 
00000000 =00001B03                  SetBank = $1B03 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000 =000007A0                  torsoart = $7A0 ($C tiles)
00000000 =000007AC                  headart = $7AC ($14 tiles)
00000000 =00000798                  hairart = $798 (8 tiles)
00000000 =000006BA                  ringart = $6BA ($E tiles)
00000000 =00000568                  pointsart = $568 (9 tiles)
00000000 =00000571                  lamppostart = $571 ($A tiles)
00000000                            
00000000 =0000022D                  ssringart = $22D ($E tiles)
00000000                            
00000000 =FFFFF5C0                  SonimeSST = $FFFFF5C0
00000000 =FFFFFFF9                  v_ssangleprev = $FFFFFFF9
00000000 =FFFFF601                  FromSEGA = $FFFFF601
00000000                            
00000000 =00000000                  sonime_headtimer = 0
00000000 =00000002                  sonime_headx = 2
00000000 =00000003                  sonime_heady = 3
00000000 =00000004                  sonime_routine = 4
00000000 =00000005                  sonime_routine2 = 5
00000000 =00000006                  sonime_headx2 = 6
00000000 =00000007                  sonime_headx3 = 7
00000000 =00000009                  sonime_hairx = 9
00000000 =0000000A                  sonime_heady2 = $A
00000000 =0000000B                  sonime_heady3 = $B
00000000 =0000000D                  sonime_hairy = $D
00000000 =0000000E                  sonime_face = $E
00000000 =0000000F                  sonime_faceold = $F
00000000 =00000010                  sonime_facetimer = $10
00000000 =00000012                  sonime_ear = $12
00000000 =00000013                  sonime_earold = $13
00000000 =00000014                  sonime_eartimer = $14
00000000 =00000016                  sonime_torsox = $16
00000000 =00000017                  sonime_movein = $17
00000000 =00000018                  sonime_waittimer = $18
00000000 =00000019                  sonime_waittimer2 = $19
00000000 =00000020                  sonime_pausetimer = $20
00000000 =00000022                  sonime_airtimer = $22
00000000                            
00000000 =00000000                  face_neutrall = 0
00000000 =00000001                  face_blink = 1
00000000 =00000002                  face_neutrallm = 2
00000000 =00000003                  face_neutralm = 3
00000000 =00000004                  face_neutralr = 4
00000000 =00000005                  face_frustrated = 5
00000000 =00000006                  face_surprised = 6
00000000 =00000007                  face_happy = 7
00000000 =00000008                  face_confused = 8
00000000 =00000009                  face_meltdown = 9
00000000 =0000000A                  face_panic = $A
00000000 =0000000B                  face_impatient = $B
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            ResetZ80	macro
00000000                            		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00000000                            		endm
00000000                            
00000000                            NeglectZ80	macro
00000000                            		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- DMA to (a6) containing C00004 ---
00000000                            
00000000                            DMA:		macro	Size, Source, Destination
00000000                            		move.l	#(((((Size/$02)<<$08)&$FF0000)+((Size/$02)&$FF))+$94009300),(a6)
00000000                            		move.l	#((((((Source&$FFFFFF)/$02)<<$08)&$FF0000)+(((Source&$FFFFFF)/$02)&$FF))+$96009500),(a6)
00000000                            		move.l	#(((((Source&$FFFFFF)/$02)&$7F0000)+$97000000)+((Destination>>$10)&$FFFF)),(a6)
00000000                            		move.w	#((Destination&$FF7F)|$80),(a6)
00000000                            		endm
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample, SampleRev, SampleLoop, SampleLoopRev
00000000                            		dc.b	((Sample)&$FF)
00000000                            		dc.b	((((Sample)>>$08)&$7F)|$80)
00000000                            		dc.b	(((Sample)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleRev)-1)&$FF)
00000000                            		dc.b	(((((SampleRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleRev)-1)&$7F8000)>>$0F)
00000000                            		dc.b	((SampleLoop)&$FF)
00000000                            		dc.b	((((SampleLoop)>>$08)&$7F)|$80)
00000000                            		dc.b	(((SampleLoop)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleLoopRev)-1)&$FF)
00000000                            		dc.b	(((((SampleLoopRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleLoopRev)-1)&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            	; --- End marker for PCM samples ---
00000000                            
00000000                            EndMarker	macro
00000000                            		dcb.b	Z80E_Read*(($1000+$100)/$100),$00
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            PlayPCM2	macro	Sample
00000000                            		move.l	a0,-(sp)
00000000                            		move.l	a1,-(sp)
00000000                            		lea (Sample).l,a0 ; load sample pointers
00000000                            		lea ($A00C75).l,a1 ; load PCM2 pointers
00000000                            		move.w #$0100,($A11100).l ; request Z80 stop (ON)
00000000                            		btst.b #$00,($A11100).l ; has the Z80 stopped yet?
00000000                            		bne.s *-$08 ; if not, branch
00000000                            		move.b #0,($A00647).l ; set volume
00000000                            		move.b (a0)+,(a1)+ ; set address of sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b #%11011010,($A00651).l ; set request
00000000                            		move.w #$0000,($A11100).l ; request Z80 stop (OFF)
00000000                            		move.l	(sp)+,a1
00000000                            		move.l	(sp)+,a0
00000000                            		endm
00000000                            
00000000 =000001FF                  Max_Rings = 511 ; default. maximum number possible is 759
00000000 =00000400                  Rings_Space = (Max_Rings+1)*2
00000000                            
00000000 =FFFF8000                  Object_Respawn_Table = $FFFF8000
00000000 =FFFFFE2A                  Camera_X_pos_last = $FFFFFE2A
00000000 =FFFFF76E                  Camera_Y_pos_last = $FFFFF76E
00000000                            
00000000 =FFFF8300                  Ring_Positions = $FFFF8300
00000000 =FFFF8700                  Ring_start_addr_ROM = Ring_Positions+Rings_Space
00000000 =FFFF8704                  Ring_end_addr_ROM = Ring_Positions+Rings_Space+4
00000000 =FFFF8708                  Ring_start_addr_RAM = Ring_Positions+Rings_Space+8
00000000 =FFFF870A                  Perfect_rings_left = Ring_Positions+Rings_Space+$A
00000000 =FFFF870C                  Rings_manager_routine = Ring_Positions+Rings_Space+$C
00000000 =FFFF870D                  Level_started_flag = Ring_Positions+Rings_Space+$D
00000000 =FFFF870E                  Ring_consumption_table = Ring_Positions+Rings_Space+$E
00000000 =00000014                  respawn_index = $14	
00000000                            
00000000 =FFFFF60E                  v_pocketbottom = $FFFFF60E
00000000 =FFFFF610                  v_pocketx = $FFFFF610
00000000 =FFFFF612                  f_insidepocket = $FFFFF612
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6	
00000000                            	
00000000 =00000001                  Yes		=	1
00000000 =00000000                  No		=	0
00000000                            
00000000 =00000000                  MUTEDAC		=	No
00000000 =00000000                  MUTEFM		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 5654 5542 4552 2049 4E20+  Title_Local:	dc.b 'VTUBER IN SONIC 1                               ' ; Domestic name
00000150 5654 5542 4552 2049 4E20+  Title_Int:	dc.b 'VTUBER IN SONIC 1                               ' ; International name
00000180 474D 2030 3030 3034 3034+  Serial:					dc.b "GM 00004049-01" ; Serial/version number (Rev01)
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E                            
0000030E                            loc_348:
0000030E 2CC7                       		move.l	d7,(a6)+
00000310 51CE FFFC                  		dbf	d6,loc_348
00000314 1039 00A1 0001             		move.b	($A10001).l,d0
0000031A 0200 00C0                  		andi.b	#$C0,d0
0000031E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000322 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000032A                            
0000032A                            GameInit:
0000032A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000330 7E00                       		moveq	#0,d7
00000332 3C3C 3F7F                  		move.w	#$3F7F,d6
00000336                            
00000336                            GameClrRAM:
00000336 2CC7                       		move.l	d7,(a6)+
00000338 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000033C 6100 0000                  		bsr.w	VDPSetupGame
00000340 6100 0000                  		bsr.w	SoundDriverLoad
00000344 6100 0000                  		bsr.w	JoypadInit
00000348 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000034E                            
0000034E 41FA 0000                  		lea	GML_Int(pc),a0				; load interrupt list
00000352 3258                       		movea.w	(a0)+,a1				; load dump address
00000354 22D8                       		move.l	(a0)+,(a1)+				; jmp $0000
00000356 22D8                       		move.l	(a0)+,(a1)+				; $0000 jmp
00000358 22D8                       		move.l	(a0)+,(a1)+				; $00000000
0000035A                            
0000035A                            MainGameLoop:
0000035A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000035E 0240 001C                  		andi.w	#$1C,d0
00000362 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000366 60F2                       		bra.s	MainGameLoop
00000368                            
00000368 FF90                       GML_Int:	dc.w	HBlankRAM&$FFFF
0000036A 4EF9 0000 0000             		jmp	PalToCRAM
00000370 4EF9 0000 0000             		jmp	loc_B10
00000376                            
00000376 4E73                       NullBlank:	rte
00000378                            
00000378                            ; ===========================================================================
00000378                            ; ---------------------------------------------------------------------------
00000378                            ; Main game mode array
00000378                            ; ---------------------------------------------------------------------------
00000378                            
00000378                            GameModeArray:
00000378 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000037C                            ; ===========================================================================
0000037C 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000380                            ; ===========================================================================
00000380 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000384                            ; ===========================================================================
00000384 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000388                            ; ===========================================================================
00000388 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
0000038C                            ; ===========================================================================
0000038C 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
00000390                            ; ===========================================================================
00000390 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
00000394                            ; ===========================================================================
00000394 6000 0000                  		bra.w	Credits		; Credits ($1C)
00000398                            ; ===========================================================================
00000398 4E75                       		rts	
0000039A                            ; ===========================================================================
0000039A                            
0000039A                            loc_43A:
0000039A 46FC 2700                  		move	#$2700,sr
0000039E 544F                       		addq.w	#2,sp
000003A0 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003A4 544F                       		addq.w	#2,sp
000003A6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003AC 6100 0000                  		bsr.w	ShowErrorMsg
000003B0 202F 0002                  		move.l	2(sp),d0
000003B4 6100 0000                  		bsr.w	sub_5BA
000003B8 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003BC 6100 0000                  		bsr.w	sub_5BA
000003C0 6000                       		bra.s	loc_478
000003C2                            ; ===========================================================================
000003C2                            
000003C2                            loc_462:
000003C2 46FC 2700                  		move	#$2700,sr
000003C6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003CC 6100 0000                  		bsr.w	ShowErrorMsg
000003D0 202F 0002                  		move.l	2(sp),d0
000003D4 6100 0000                  		bsr.w	sub_5BA
000003D8                            
000003D8                            loc_478:
000003D8 6100 0000                  		bsr.w	ErrorWaitForC
000003DC 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000003E2 46FC 2300                  		move	#$2300,sr
000003E6 4E73                       		rte	
000003E8                            
000003E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000003E8                            
000003E8                            
000003E8                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000003E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000003EE 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000003F8 41F9 0000 0000             		lea	(Art_Text).l,a0
000003FE 323C 027F                  		move.w	#$27F,d1
00000402                            
00000402                            Error_LoadGfx:
00000402 3C98                       		move.w	(a0)+,(a6)
00000404 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000408 7000                       		moveq	#0,d0		; clear	d0
0000040A 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000040E 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000412 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000416 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000420 7212                       		moveq	#$12,d1		; number of characters
00000422                            
00000422                            Error_LoopChars:
00000422 7000                       		moveq	#0,d0
00000424 1018                       		move.b	(a0)+,d0
00000426 0640 0790                  		addi.w	#$790,d0
0000042A 3C80                       		move.w	d0,(a6)
0000042C 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000430 4E75                       		rts	
00000432                            ; End of function ShowErrorMsg
00000432                            
00000432                            ; ===========================================================================
00000432 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000436 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000043A 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000043E 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000442 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000446 0000                       		dc.w asc_5A6-ErrorText
00000448 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000045B 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000046E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000481 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000494 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004A7 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004BA 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
000004CD 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000004E0 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000004F3 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000506 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
0000051A 00                         		even
0000051A                            
0000051A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000051A                            
0000051A                            
0000051A                            sub_5BA:				; XREF: loc_43A; loc_462
0000051A 3CBC 07CA                  		move.w	#$7CA,(a6)
0000051E 7407                       		moveq	#7,d2
00000520                            
00000520                            loc_5C0:
00000520 E998                       		rol.l	#4,d0
00000522 6100                       		bsr.s	sub_5CA
00000524 51CA FFFA                  		dbf	d2,loc_5C0
00000528 4E75                       		rts	
0000052A                            ; End of function sub_5BA
0000052A                            
0000052A                            
0000052A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000052A                            
0000052A                            
0000052A                            sub_5CA:				; XREF: sub_5BA
0000052A 3200                       		move.w	d0,d1
0000052C 0241 000F                  		andi.w	#$F,d1
00000530 0C41 000A                  		cmpi.w	#$A,d1
00000534 6500                       		bcs.s	loc_5D8
00000536 5E41                       		addq.w	#7,d1
00000538                            
00000538                            loc_5D8:
00000538 0641 07C0                  		addi.w	#$7C0,d1
0000053C 3C81                       		move.w	d1,(a6)
0000053E 4E75                       		rts	
00000540                            ; End of function sub_5CA
00000540                            
00000540                            
00000540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000540                            
00000540                            
00000540                            ErrorWaitForC:				; XREF: loc_478
00000540 6100 0000                  		bsr.w	ReadJoypads
00000544 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000054A 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000054E 4E75                       		rts	
00000550                            ; End of function ErrorWaitForC
00000550                            
00000550                            ; ===========================================================================
00000550                            
00000550                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000A70                            		even
00000A70                            
00000A70                            ; ===========================================================================
00000A70                            
00000A70                            loc_B10:				; XREF: Vectors
00000A70 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000A74 4A38 F62A                  		tst.b	($FFFFF62A).w
00000A78 6700                       		beq.s	loc_B88
00000A7A 3039 00C0 0004             		move.w	($C00004).l,d0
00000A80 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000A8A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000A92 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000A98 6700                       		beq.s	loc_B42
00000A9A 303C 0700                  		move.w	#$700,d0
00000A9E                            
00000A9E                            loc_B3E:
00000A9E 51C8 FFFE                  		dbf	d0,loc_B3E
00000AA2                            
00000AA2                            loc_B42:
00000AA2 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AA6 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AAC 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AB2 0240 003E                  		andi.w	#$3E,d0
00000AB6 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000ABA 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000ABE                            
00000ABE                            loc_B5E:				; XREF: loc_B88
00000ABE 4EB9 0000 0000             		jsr	sub_71B4C
00000AC4                            
00000AC4                            loc_B64:				; XREF: loc_D50
00000AC4 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000AC8 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000ACC 4E73                       		rte	
00000ACE                            ; ===========================================================================
00000ACE 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000AD2 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000AD6 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000ADA 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000ADE 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000AE2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000AE6 0000                       		dc.w loc_E72-off_B6E
00000AE8                            ; ===========================================================================
00000AE8                            
00000AE8                            loc_B88:				; XREF: loc_B10; off_B6E
00000AE8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000AEE 6700                       		beq.s	loc_B9A
00000AF0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000AF6 6600 FFC6                  		bne.w	loc_B5E
00000AFA                            
00000AFA                            loc_B9A:
00000AFA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B00 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B04 3039 00C0 0004             		move.w	($C00004).l,d0
00000B0A 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B10 6700                       		beq.s	loc_BBA
00000B12 303C 0700                  		move.w	#$700,d0
00000B16                            
00000B16                            loc_BB6:
00000B16 51C8 FFFE                  		dbf	d0,loc_BB6
00000B1A                            
00000B1A                            loc_BBA:
00000B1A 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B20 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B24 6600                       		bne.s	loc_BFE
00000B26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B2C 3ABC 8C81                  		move.w	#$8C81,(a5)
00000B30 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B36 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B3C 3ABC 977F                  		move.w	#$977F,(a5)
00000B40 3ABC C000                  		move.w	#$C000,(a5)
00000B44 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B4E 6000                       		bra.s	loc_C22
00000B50                            ; ===========================================================================
00000B50                            
00000B50                            loc_BFE:				; XREF: loc_BC8
00000B50 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B56 3ABC 8C89                  		move.w	#$8C89,(a5)
00000B5A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B60 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B66 3ABC 977F                  		move.w	#$977F,(a5)
00000B6A 3ABC C000                  		move.w	#$C000,(a5)
00000B6E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B78                            
00000B78                            loc_C22:				; XREF: loc_BC8
00000B78 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000B7C 6000 FF40                  		bra.w	loc_B5E
00000B80                            ; ===========================================================================
00000B80                            
00000B80                            loc_C32:				; XREF: off_B6E
00000B80 6100 0000                  		bsr.w	sub_106E
00000B84                            
00000B84                            loc_C36:				; XREF: off_B6E
00000B84 4A78 F614                  		tst.w	($FFFFF614).w
00000B88 6700 0000                  		beq.w	locret_C42
00000B8C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000B90                            
00000B90                            locret_C42:
00000B90 4E75                       		rts	
00000B92                            ; ===========================================================================
00000B92                            
00000B92                            loc_C44:				; XREF: off_B6E
00000B92 6100 0000                  		bsr.w	sub_106E
00000B96 6100 0000                  		bsr.w	sub_6886
00000B9A 6100 0000                  		bsr.w	sub_1642
00000B9E 4A78 F614                  		tst.w	($FFFFF614).w
00000BA2 6700 0000                  		beq.w	locret_C5C
00000BA6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BAA                            
00000BAA                            locret_C5C:
00000BAA 4E75                       		rts	
00000BAC                            ; ===========================================================================
00000BAC                            
00000BAC                            loc_C5E:				; XREF: off_B6E
00000BAC 6100 0000                  		bsr.w	sub_106E
00000BB0 4E75                       		rts
00000BB2                            
00000BB2                            ; Return:
00000BB2 6100 0000                  		bsr.w	ReadJoypads
00000BB6 4E75                       		rts	
00000BB8                            ; ===========================================================================
00000BB8                            
00000BB8                            loc_C64:				; XREF: off_B6E
00000BB8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000BBE 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000BC2                            
00000BC2                            loc_C6E:				; XREF: off_B6E
00000BC2 6100 0000                  		bsr.w	ReadJoypads
00000BC6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BCA 6600                       		bne.s	loc_CB0
00000BCC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BD2 3ABC 8C81                  		move.w	#$8C81,(a5)
00000BD6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BDC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BE2 3ABC 977F                  		move.w	#$977F,(a5)
00000BE6 3ABC C000                  		move.w	#$C000,(a5)
00000BEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BF4 6000                       		bra.s	loc_CD4
00000BF6                            ; ===========================================================================
00000BF6                            
00000BF6                            loc_CB0:				; XREF: loc_C76
00000BF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BFC 3ABC 8C89                  		move.w	#$8C89,(a5)
00000C00 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C06 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C0C 3ABC 977F                  		move.w	#$977F,(a5)
00000C10 3ABC C000                  		move.w	#$C000,(a5)
00000C14 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C1E                            
00000C1E                            loc_CD4:				; XREF: loc_C76
00000C1E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C28 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C2E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C34 3ABC 977F                  		move.w	#$977F,(a5)
00000C38 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C3C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C4C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000C52 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000C58 3ABC 977F                  		move.w	#$977F,(a5)
00000C5C 3ABC 7800                  		move.w	#$7800,(a5)
00000C60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C6A 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000C70                            
00000C70                            loc_D50:
00000C70 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000C76 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000C7C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000C82 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000C88 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000C8E 6400                       		bcc.s	Demo_Time
00000C90 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000C96 588F                       		addq.l	#4,sp
00000C98 6000 FE2A                  		bra.w	loc_B64
00000C9C                            
00000C9C                            ; ---------------------------------------------------------------------------
00000C9C                            ; Subroutine to	run a demo for an amount of time
00000C9C                            ; ---------------------------------------------------------------------------
00000C9C                            
00000C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000C9C                            
00000C9C                            
00000C9C                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000C9C 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CA0 4EB9 0000 0000             		jsr	AniArt_Load
00000CA6 4EB9 0000 0000             		jsr	HudUpdate
00000CAC 6100 0000                  		bsr.w	sub_165E
00000CB0 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000CB4 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000CB8 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000CBC                            
00000CBC                            Demo_TimeEnd:
00000CBC 4E75                       		rts	
00000CBE                            ; End of function Demo_Time
00000CBE                            
00000CBE                            ; ===========================================================================
00000CBE                            
00000CBE                            loc_DA6:				; XREF: off_B6E
00000CBE 6100 0000                  		bsr.w	ReadJoypads
00000CC2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CC8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CCE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000CD4 3ABC 977F                  		move.w	#$977F,(a5)
00000CD8 3ABC C000                  		move.w	#$C000,(a5)
00000CDC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CE2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CEC 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CF2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CF8 3ABC 977F                  		move.w	#$977F,(a5)
00000CFC 3ABC 7800                  		move.w	#$7800,(a5)
00000D00 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D0A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D10 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D16 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D1C 3ABC 977F                  		move.w	#$977F,(a5)
00000D20 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D24 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D2A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D2E 6100 0000                  		bsr.w	PalCycle_SS
00000D32 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D38                            
00000D38                            loc_E64:
00000D38 0C38 0060 F625             		cmpi.b	#96,($FFFFF625).w
00000D3E 6400                       		bcc.s	@update
00000D40 6000 0000                  		bra.w	locret_E70
00000D44                            
00000D44                            	@update:
00000D44 4EB9 0000 0000             		jsr	SS_LoadWalls
00000D4A 4A78 F614                  		tst.w	($FFFFF614).w
00000D4E 6700 0000                  		beq.w	locret_E70
00000D52 5378 F614                  		subq.w	#1,($FFFFF614).w
00000D56                            
00000D56                            locret_E70:
00000D56 4E75                       		rts	
00000D58                            ; ===========================================================================
00000D58                            
00000D58                            loc_E72:				; XREF: off_B6E
00000D58 6100 0000                  		bsr.w	ReadJoypads
00000D5C 4A38 F64E                  		tst.b	($FFFFF64E).w
00000D60 6600                       		bne.s	loc_EB4
00000D62 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D68 3ABC 8C81                  		move.w	#$8C81,(a5)
00000D6C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D72 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D78 3ABC 977F                  		move.w	#$977F,(a5)
00000D7C 3ABC C000                  		move.w	#$C000,(a5)
00000D80 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D86 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D8A 6000                       		bra.s	loc_ED8
00000D8C                            ; ===========================================================================
00000D8C                            
00000D8C                            loc_EB4:				; XREF: loc_E7A
00000D8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D92 3ABC 8C89                  		move.w	#$8C89,(a5)
00000D96 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D9C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DA2 3ABC 977F                  		move.w	#$977F,(a5)
00000DA6 3ABC C000                  		move.w	#$C000,(a5)
00000DAA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DB0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DB4                            
00000DB4                            loc_ED8:				; XREF: loc_E7A
00000DB4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000DB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DBE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DC4 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DCA                            
00000DCA                            loc_EEE:
00000DCA 3ABC 977F                  		move.w	#$977F,(a5)
00000DCE 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DD2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DD8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE2 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DE8 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DEE 3ABC 977F                  		move.w	#$977F,(a5)
00000DF2 3ABC 7800                  		move.w	#$7800,(a5)
00000DF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E00 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E06                            
00000E06                            loc_F54:
00000E06 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E0C 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E12 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E18 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E1E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E22 4EB9 0000 0000             		jsr	AniArt_Load
00000E28 4EB9 0000 0000             		jsr	HudUpdate
00000E2E 6100 0000                  		bsr.w	sub_1642
00000E32 4E75                       		rts	
00000E34                            ; ===========================================================================
00000E34                            
00000E34                            loc_F8A:				; XREF: off_B6E
00000E34 6100 0000                  		bsr.w	sub_106E
00000E38 5238 F628                  		addq.b	#1,($FFFFF628).w
00000E3C 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000E42 4E75                       		rts	
00000E44                            ; ===========================================================================
00000E44                            
00000E44                            loc_F9A:				; XREF: off_B6E
00000E44 6100 0000                  		bsr.w	sub_106E
00000E48 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4C 6000 0000                  		bra.w	sub_1642
00000E50                            ; ===========================================================================
00000E50                            
00000E50                            loc_FA6:				; XREF: off_B6E
00000E50 6100 0000                  		bsr.w	ReadJoypads
00000E54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E5A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E60 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E66 3ABC 977F                  		move.w	#$977F,(a5)
00000E6A 3ABC C000                  		move.w	#$C000,(a5)
00000E6E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E78 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E7E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E84 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E8A 3ABC 977F                  		move.w	#$977F,(a5)
00000E8E 3ABC 7800                  		move.w	#$7800,(a5)
00000E92 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E98 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E9C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EA8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EAE 3ABC 977F                  		move.w	#$977F,(a5)
00000EB2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EB6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EBC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC0 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000EC6                            
00000EC6                            loc_1060:
00000EC6 4A78 F614                  		tst.w	($FFFFF614).w
00000ECA 6700 0000                  		beq.w	locret_106C
00000ECE 5378 F614                  		subq.w	#1,($FFFFF614).w
00000ED2                            
00000ED2                            locret_106C:
00000ED2 4E75                       		rts	
00000ED4                            
00000ED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000ED4                            
00000ED4                            
00000ED4                            sub_106E:				; XREF: loc_C32; et al
00000ED4 6100 0000                  		bsr.w	ReadJoypads
00000ED8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EDC 6600                       		bne.s	loc_10B0
00000EDE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE4 3ABC 8C81                  		move.w	#$8C81,(a5)
00000EE8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EEE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EF4 3ABC 977F                  		move.w	#$977F,(a5)
00000EF8 3ABC C000                  		move.w	#$C000,(a5)
00000EFC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F06                            
00000F06                            PAL1_LOAD:
00000F06 6000                       		bra.s	loc_10D4
00000F08                            ; ===========================================================================
00000F08                            
00000F08                            loc_10B0:
00000F08 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F0E 3ABC 8C89                  		move.w	#$8C89,(a5)
00000F12 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F18 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F1E 3ABC 977F                  		move.w	#$977F,(a5)
00000F22 3ABC C000                  		move.w	#$C000,(a5)
00000F26 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F2C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F30                            loc_10D4:
00000F30 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F36 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F3C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F42 3ABC 977F                  		move.w	#$977F,(a5)
00000F46 3ABC 7800                  		move.w	#$7800,(a5)
00000F4A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F50 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F5A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F60 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F66 3ABC 977F                  		move.w	#$977F,(a5)
00000F6A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F6E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F78 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F7E 4E75                       		rts	
00000F80                            ; End of function sub_106E
00000F80                            
00000F80                            ; ---------------------------------------------------------------------------
00000F80                            ; Subroutine to	move pallets from the RAM to CRAM
00000F80                            ; ---------------------------------------------------------------------------
00000F80                            
00000F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F80                            
00000F80                            
00000F80                            PalToCRAM:
00000F80 46FC 2700                  		move	#$2700,sr
00000F84 4A78 F644                  		tst.w	($FFFFF644).w
00000F88 6700                       		beq.s	locret_119C
00000F8A 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000F90 2F08                       		move.l	a0,-(sp)
00000F92 41F9 00C0 0004             		lea	($C00004).l,a0
00000F98 30BC 8C89                  		move.w	#$8C89,(a0)
00000F9C 30BC 8ADF                  		move.w	#$8ADF,(a0)
00000FA0 205F                       		move.l	(sp)+,a0
00000FA2 4A38 F64F                  		tst.b	($FFFFF64F).w
00000FA6 6600                       		bne.s	loc_119E
00000FA8                            
00000FA8                            locret_119C:
00000FA8 4E73                       		rte	
00000FAA                            ; ===========================================================================
00000FAA                            
00000FAA                            loc_119E:				; XREF: PalToCRAM
00000FAA 4238 F64F                  		clr.b	($FFFFF64F).w
00000FAE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000FB2 6100 FCE8                  		bsr.w	Demo_Time
00000FB6 4EB9 0000 0000             		jsr	sub_71B4C
00000FBC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000FC0 4E73                       		rte	
00000FC2                            ; End of function PalToCRAM
00000FC2                            
00000FC2                            ; ---------------------------------------------------------------------------
00000FC2                            ; Subroutine to	initialise joypads
00000FC2                            ; ---------------------------------------------------------------------------
00000FC2                            
00000FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FC2                            
00000FC2                            
00000FC2                            JoypadInit:				; XREF: GameClrRAM
00000FC2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCA                            
00000FCA                            Joypad_WaitZ80:
00000FCA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00000FD2 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00000FD4 7040                       		moveq	#$40,d0
00000FD6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00000FDC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00000FE2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00000FE8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000FF0 4E75                       		rts	
00000FF2                            ; End of function JoypadInit
00000FF2                            
00000FF2                            ; ---------------------------------------------------------------------------
00000FF2                            ; Subroutine to	read joypad input, and send it to the RAM
00000FF2                            ; ---------------------------------------------------------------------------
00000FF2                            
00000FF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FF2                            
00000FF2                            
00000FF2                            ReadJoypads:
00000FF2 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00000FF6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00000FFC 6100                       		bsr.s	Joypad_Read	; do the first joypad
00000FFE 5449                       		addq.w	#2,a1		; do the second	joypad
00001000                            
00001000                            Joypad_Read:
00001000 12BC 0000                  		move.b	#0,(a1)
00001004 4E71                       		nop	
00001006 4E71                       		nop	
00001008 1011                       		move.b	(a1),d0
0000100A E508                       		lsl.b	#2,d0
0000100C 0200 00C0                  		andi.b	#$C0,d0
00001010 12BC 0040                  		move.b	#$40,(a1)
00001014 4E71                       		nop	
00001016 4E71                       		nop	
00001018 1211                       		move.b	(a1),d1
0000101A 0201 003F                  		andi.b	#$3F,d1
0000101E 8001                       		or.b	d1,d0
00001020 4600                       		not.b	d0
00001022 1210                       		move.b	(a0),d1
00001024 B101                       		eor.b	d0,d1
00001026 10C0                       		move.b	d0,(a0)+
00001028 C200                       		and.b	d0,d1
0000102A 10C1                       		move.b	d1,(a0)+
0000102C 4E75                       		rts	
0000102E                            ; End of function ReadJoypads
0000102E                            
0000102E                            
0000102E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000102E                            
0000102E                            
0000102E                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000102E 41F9 00C0 0004             		lea	($C00004).l,a0
00001034 43F9 00C0 0000             		lea	($C00000).l,a1
0000103A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001040 7E12                       		moveq	#$12,d7
00001042                            
00001042                            VDP_Loop:
00001042 309A                       		move.w	(a2)+,(a0)
00001044 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001048                            
00001048 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000104E 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001052 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001058 7000                       		moveq	#0,d0
0000105A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001064 3E3C 003F                  		move.w	#$3F,d7
00001068                            
00001068                            VDP_ClrCRAM:
00001068 3280                       		move.w	d0,(a1)
0000106A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000106E                            
0000106E 42B8 F616                  		clr.l	($FFFFF616).w
00001072 42B8 F61A                  		clr.l	($FFFFF61A).w
00001076 2F01                       		move.l	d1,-(sp)
00001078 4BF9 00C0 0004             		lea	($C00004).l,a5
0000107E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001082 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001088 3ABC 9780                  		move.w	#$9780,(a5)
0000108C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001092 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000109A                            
0000109A                            loc_128E:
0000109A 3215                       		move.w	(a5),d1
0000109C 0801 0001                  		btst	#1,d1
000010A0 66F8                       		bne.s	loc_128E
000010A2                            
000010A2 3ABC 8F02                  		move.w	#$8F02,(a5)
000010A6 221F                       		move.l	(sp)+,d1
000010A8 4E75                       		rts	
000010AA                            ; End of function VDPSetupGame
000010AA                            
000010AA                            ; ===========================================================================
000010AA 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000010B2 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000010BA 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000010C2 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000010CA 9001 9100 9200             		dc.w $9001, $9100, $9200
000010D0                            
000010D0                            ; ---------------------------------------------------------------------------
000010D0                            ; Subroutine to	clear the screen
000010D0                            ; ---------------------------------------------------------------------------
000010D0                            
000010D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010D0                            
000010D0                            
000010D0                            ClearScreen:
000010D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000010D6 3ABC 8F01                  		move.w	#$8F01,(a5)
000010DA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000010E0 3ABC 9780                  		move.w	#$9780,(a5)
000010E4 2ABC 4000 0083             		move.l	#$40000083,(a5)
000010EA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000010F2                            
000010F2                            loc_12E6:
000010F2 3215                       		move.w	(a5),d1
000010F4 0801 0001                  		btst	#1,d1
000010F8 66F8                       		bne.s	loc_12E6
000010FA                            
000010FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000010FE 4BF9 00C0 0004             		lea	($C00004).l,a5
00001104 3ABC 8F01                  		move.w	#$8F01,(a5)
00001108 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000110E 3ABC 9780                  		move.w	#$9780,(a5)
00001112 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001118 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001120                            
00001120                            loc_1314:
00001120 3215                       		move.w	(a5),d1
00001122 0801 0001                  		btst	#1,d1
00001126 66F8                       		bne.s	loc_1314
00001128                            
00001128 3ABC 8F02                  		move.w	#$8F02,(a5)
0000112C 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001134 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000113C 43F8 F838                  		lea	($FFFFF838).w,a1
00001140 7000                       		moveq	#0,d0
00001142 323C 0092                  		move.w	#$92,d1
00001146                            
00001146                            loc_133A:
00001146 22C0                       		move.l	d0,(a1)+
00001148 51C9 FFFC                  		dbf	d1,loc_133A
0000114C                            
0000114C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001150 7000                       		moveq	#0,d0
00001152 323C 0100                  		move.w	#$100,d1
00001156                            
00001156                            loc_134A:
00001156 22C0                       		move.l	d0,(a1)+
00001158 51C9 FFFC                  		dbf	d1,loc_134A
0000115C 4E75                       		rts	
0000115E                            ; End of function ClearScreen
0000115E                            
0000115E                            ; ---------------------------------------------------------------------------
0000115E                            ; Subroutine to	load the sound driver
0000115E                            ; ---------------------------------------------------------------------------
0000115E                            
0000115E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000115E                            
0000115E                            
0000115E                            SoundDriverLoad:
0000115E 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
00001164 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
0000116A 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
0000116E 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00001176 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
0000117E 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00001186 66F6                       		bne.s	*-$08					; if not, branch
00001188                            
00001188                            SM_LoadZ80:
00001188 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
0000118A 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
0000118E 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
00001194 43F9 00A0 0C62             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
0000119A 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
0000119C 12D8                       		move.b	(a0)+,(a1)+				; ''
0000119E 12D8                       		move.b	(a0)+,(a1)+				; ''
000011A0 12D8                       		move.b	(a0)+,(a1)+				; CHG: copy "reverse" pointer over into Z80
000011A2 12D8                       		move.b	(a0)+,(a1)+				; ''
000011A4 12D8                       		move.b	(a0)+,(a1)+				; ''
000011A6 43F9 00A0 1A38             		lea	($A00000+SV_VolumeBank).l,a1		; load volume bank address write routine
000011AC 12FC 0000                  		move.b 	#$74|((PCM_Volumes>>$0F)&1),(a1)+	; write "ld  (hl),?" instructions
000011B0 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$10)&1),(a1)+	; ''
000011B4 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$11)&1),(a1)+	; ''
000011B8 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$12)&1),(a1)+	; ''
000011BC 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$13)&1),(a1)+	; ''
000011C0 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$14)&1),(a1)+	; ''
000011C4 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$15)&1),(a1)+	; ''
000011C8 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$16)&1),(a1)+	; ''
000011CC 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$17)&1),(a1)+	; ''
000011D0 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
000011D8 727F                       		moveq	#$7F,d1					; set repeat times
000011DA 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
000011DE 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
000011E6 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
000011EE 4E75                       		rts						; return
000011F0                            ; End of function SoundDriverLoad
000011F0                            
000011F0                            ; ---------------------------------------------------------------------------
000011F0                            ; Subroutine to	play a sound or	music track
000011F0                            ; ---------------------------------------------------------------------------
000011F0                            
000011F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F0                            
000011F0                            
000011F0                            PlaySound:
000011F0 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000011F4 4E75                       		rts	
000011F6                            ; End of function PlaySound
000011F6                            
000011F6                            ; ---------------------------------------------------------------------------
000011F6                            ; Subroutine to	play a special sound/music (E0-E4)
000011F6                            ;
000011F6                            ; E0 - Fade out
000011F6                            ; E1 - Sega
000011F6                            ; E2 - Speed up
000011F6                            ; E3 - Normal speed
000011F6                            ; E4 - Stop
000011F6                            ; ---------------------------------------------------------------------------
000011F6                            
000011F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F6                            
000011F6                            
000011F6                            PlaySound_Special:
000011F6 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000011FA 4E75                       		rts	
000011FC                            ; End of function PlaySound_Special
000011FC                            
000011FC                            ; ===========================================================================
000011FC                            ; ---------------------------------------------------------------------------
000011FC                            ; Unused sound/music subroutine
000011FC                            ; ---------------------------------------------------------------------------
000011FC                            
000011FC                            PlaySound_Unk:
000011FC 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001200 4E75                       		rts	
00001202                            
00001202                            ; ---------------------------------------------------------------------------
00001202                            ; Subroutine to	pause the game
00001202                            ; ---------------------------------------------------------------------------
00001202                            
00001202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001202                            
00001202                            
00001202                            PauseGame:				; XREF: Level_MainLoop; et al
00001202 4E71                       		nop	
00001204 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001208 6700 0000                  		beq.w	Unpause		; if not, branch
0000120C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001210 6600                       		bne.s	loc_13BE	; if yes, branch
00001212 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001218 6700 0000                  		beq.w	Pause_DoNothing	; if not, branch
0000121C                            
0000121C                            loc_13BE:
0000121C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001222 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001228                            
00001228                            loc_13CA:
00001228 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
0000122E 6100 0000                  		bsr.w	DelayProgram
00001232 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001236 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001238 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0000123E 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001240 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001246 4E71                       		nop	
00001248 6000                       		bra.s	loc_1404
0000124A                            ; ===========================================================================
0000124A                            
0000124A                            Pause_ChkBC:				; XREF: PauseGame
0000124A 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001250 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001252 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001258 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000125A                            
0000125A                            Pause_ChkStart:				; XREF: PauseGame
0000125A 4A78 F5E0                  		tst.w	(SonimeSST+sonime_pausetimer).w
0000125E 6600                       		bne.s	@waitlonger
00001260 11FC 0001 F5CE             		move.b	#face_blink,(SonimeSST+sonime_face).w
00001266 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000126C 6000                       		bra.s	@cont
0000126E                            
0000126E                            	@waitlonger:
0000126E 5378 F5E0                  		subi.w	#1,(SonimeSST+sonime_pausetimer).w
00001272                            
00001272                            	@cont:
00001272 41F8 D000                  		lea	($FFFFD000).w,a0 ; a0=object
00001276 7000                       		moveq	#0,d0
00001278 7E7F                       		moveq	#$7F,d7 ; run the first $80 objects out of levels
0000127A 4EB9 0000 0000             		jsr		loc_D368
00001280 4EB9 0000 0000             		jsr		BuildSprites
00001286 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000128C 6600                       		bne.s	@notss
0000128E 4EB9 0000 0000             		jsr	SS_ShowLayout
00001294                            
00001294                            	@notss:
00001294 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000129A 678C                       		beq.s	loc_13CA	; if not, branch
0000129C 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
000012A2                            
000012A2                            loc_1404:				; XREF: PauseGame
000012A2 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012A8                            
000012A8                            Unpause:				; XREF: PauseGame
000012A8 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000012AE                            
000012AE                            Pause_DoNothing:			; XREF: PauseGame
000012AE 4E75                       		rts	
000012B0                            ; ===========================================================================
000012B0                            
000012B0                            Pause_SlowMo:				; XREF: PauseGame
000012B0 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000012B6 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012BC 4E75                       		rts	
000012BE                            ; End of function PauseGame
000012BE                            
000012BE                            ; ---------------------------------------------------------------------------
000012BE                            ; Subroutine to	display	patterns via the VDP
000012BE                            ; ---------------------------------------------------------------------------
000012BE                            
000012BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012BE                            
000012BE                            
000012BE                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000012BE 4DF9 00C0 0000             		lea	($C00000).l,a6
000012C4 283C 0080 0000             		move.l	#$800000,d4
000012CA                            
000012CA                            loc_142C:
000012CA 2D40 0004                  		move.l	d0,4(a6)
000012CE 3601                       		move.w	d1,d3
000012D0                            
000012D0                            loc_1432:
000012D0 3C99                       		move.w	(a1)+,(a6)
000012D2 51CB FFFC                  		dbf	d3,loc_1432
000012D6 D084                       		add.l	d4,d0
000012D8 51CA FFF0                  		dbf	d2,loc_142C
000012DC 4E75                       		rts	
000012DE                            ; End of function ShowVDPGraphics
000012DE                            
000012DE                            ; ==============================================================================
000012DE                            ; ------------------------------------------------------------------------------
000012DE                            ; Nemesis decompression routine
000012DE                            ; ------------------------------------------------------------------------------
000012DE                            ; Optimized by vladikcomper
000012DE                            ; ------------------------------------------------------------------------------
000012DE                             
000012DE                            NemDec_RAM:
000012DE 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012E2 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
000012E6 6000                           bra.s   NemDec_Main
000012E8                             
000012E8                            ; ------------------------------------------------------------------------------
000012E8                            NemDec:
000012E8 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012EC 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
000012F2 47FA 0000                      lea NemDec_WriteRowToVDP(pc),a3
000012F6                             
000012F6                            NemDec_Main:
000012F6 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
000012FA 3418                           move.w  (a0)+,d2        ; get number of patterns
000012FC 6A00                           bpl.s   @0          ; are we in Mode 0?
000012FE 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001302 E74A                       @0  lsl.w   #3,d2
00001304 3A42                           movea.w d2,a5
00001306 7607                           moveq   #7,d3
00001308 7400                           moveq   #0,d2
0000130A 7800                           moveq   #0,d4
0000130C 6100 0000                      bsr.w   NemDec4
00001310 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001312 E145                           asl.w   #8,d5           ; shift up by a byte
00001314 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
00001316 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
0000131A 6100                           bsr.s   NemDec2
0000131C 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001320 4E75                           rts
00001322                             
00001322                            ; ---------------------------------------------------------------------------
00001322                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001322                            ; ---------------------------------------------------------------------------
00001322                             
00001322                            NemDec2:
00001322 3E06                           move.w  d6,d7
00001324 5147                           subq.w  #8,d7           ; get shift value
00001326 3205                           move.w  d5,d1
00001328 EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
0000132A 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
0000132E 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001330 0241 00FF                      andi.w  #$FF,d1
00001334 D241                           add.w   d1,d1
00001336 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
0000133A 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
0000133E 6400                           bcc.s   @0          ; if not, branch
00001340 5046                           addq.w  #8,d6
00001342 E145                           asl.w   #8,d5
00001344 1A18                           move.b  (a0)+,d5        ; read next byte
00001346 1231 1001                  @0  move.b  1(a1,d1.w),d1
0000134A 3001                           move.w  d1,d0
0000134C 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001350 0240 00F0                      andi.w  #$F0,d0
00001354                             
00001354                            NemDec_GetRepeatCount:
00001354 E848                           lsr.w   #4,d0           ; get repeat count
00001356                             
00001356                            NemDec_WritePixel:
00001356 E98C                           lsl.l   #4,d4           ; shift up by a nybble
00001358 8801                           or.b    d1,d4           ; write pixel
0000135A 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
0000135E 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
00001360                            ; ---------------------------------------------------------------------------
00001360                             
00001360                            NemDec3:
00001360 7800                           moveq   #0,d4           ; reset row
00001362 7607                           moveq   #7,d3           ; reset nybble counter
00001364                             
00001364                            NemDec_WritePixelLoop:
00001364 51C8 FFF0                      dbf d0,NemDec_WritePixel
00001368 60B8                           bra.s   NemDec2
0000136A                            ; ---------------------------------------------------------------------------
0000136A                             
0000136A                            NemDec_InlineData:
0000136A 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
0000136C 0C46 0009                      cmpi.w  #9,d6
00001370 6400                           bcc.s   @0
00001372 5046                           addq.w  #8,d6
00001374 E145                           asl.w   #8,d5
00001376 1A18                           move.b  (a0)+,d5
00001378 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
0000137A 3205                           move.w  d5,d1
0000137C EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
0000137E 3001                           move.w  d1,d0
00001380 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001384 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
00001388 0C46 0009                      cmpi.w  #9,d6
0000138C 64C6                           bcc.s   NemDec_GetRepeatCount
0000138E 5046                           addq.w  #8,d6
00001390 E145                           asl.w   #8,d5
00001392 1A18                           move.b  (a0)+,d5
00001394 60BE                           bra.s   NemDec_GetRepeatCount
00001396                             
00001396                            ; ---------------------------------------------------------------------------
00001396                            ; Subroutines to output decompressed entry
00001396                            ; Selected depending on current decompression mode
00001396                            ; ---------------------------------------------------------------------------
00001396                             
00001396                            NemDec_WriteRowToVDP:
00001396                            loc_1502:
00001396 2884                           move.l  d4,(a4)         ; write 8-pixel row
00001398 534D                           subq.w  #1,a5
0000139A 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
0000139C 66C2                           bne.s   NemDec3         ; if not, branch
0000139E 4E75                           rts
000013A0                            ; ---------------------------------------------------------------------------
000013A0                             
000013A0                            NemDec_WriteRowToVDP_XOR:
000013A0 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013A2 2882                           move.l  d2,(a4)         ; and write the result
000013A4 534D                           subq.w  #1,a5
000013A6 380D                           move.w  a5,d4
000013A8 66B6                           bne.s   NemDec3
000013AA 4E75                           rts
000013AC                            ; ---------------------------------------------------------------------------
000013AC                             
000013AC                            NemDec_WriteRowToRAM:
000013AC 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013AE 534D                           subq.w  #1,a5
000013B0 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013B2 66AC                           bne.s   NemDec3         ; if not, branch
000013B4 4E75                           rts
000013B6                            ; ---------------------------------------------------------------------------
000013B6                             
000013B6                            NemDec_WriteRowToRAM_XOR:
000013B6 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013B8 28C2                           move.l  d2,(a4)+        ; and write the result
000013BA 534D                           subq.w  #1,a5
000013BC 380D                           move.w  a5,d4
000013BE 66A0                           bne.s   NemDec3
000013C0 4E75                           rts
000013C2                             
000013C2                            ; ---------------------------------------------------------------------------
000013C2                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013C2                            ; ---------------------------------------------------------------------------
000013C2                             
000013C2                            NemDec4:
000013C2 1018                           move.b  (a0)+,d0        ; read first byte
000013C4                             
000013C4                            @ChkEnd:
000013C4 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013C8 6600                           bne.s   @NewPalIndex        ; if not, branch
000013CA 4E75                           rts
000013CC                            ; ---------------------------------------------------------------------------
000013CC                             
000013CC                            @NewPalIndex:
000013CC 3E00                           move.w  d0,d7
000013CE                             
000013CE                            @ItemLoop:
000013CE 1018                           move.b  (a0)+,d0        ; read next byte
000013D0 6BF2                           bmi.s   @ChkEnd         ; ~~
000013D2 1200                           move.b  d0,d1
000013D4 0247 000F                      andi.w  #$F,d7          ; get palette index
000013D8 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000013DC 8E41                           or.w    d1,d7           ; combine the two
000013DE 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000013E2 1200                           move.b  d0,d1
000013E4 E149                           lsl.w   #8,d1
000013E6 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
000013E8 7208                           moveq   #8,d1
000013EA 9240                           sub.w   d0,d1           ; is the code 8 bits long?
000013EC 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
000013EE 1018                           move.b  (a0)+,d0        ; get code
000013F0 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
000013F2 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
000013F6 60D6                           bra.s   @ItemLoop       ; repeat
000013F8                            ; ---------------------------------------------------------------------------
000013F8                             
000013F8                            @ItemShortCode:
000013F8 1018                           move.b  (a0)+,d0        ; get code
000013FA E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
000013FC D040                           add.w   d0,d0           ; get index into code table
000013FE 7A01                           moveq   #1,d5
00001400 E36D                           lsl.w   d1,d5
00001402 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
00001404 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
00001408                             
00001408                            @ItemShortCodeLoop:
00001408 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
0000140A 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
0000140E 60BE                           bra.s   @ItemLoop
00001410                            
00001410                            ; ===============================================================
00001410                            ; ---------------------------------------------------------------
00001410                            ; uncompressed art to VRAM loader
00001410                            ; ---------------------------------------------------------------
00001410                            ; INPUT:
00001410                            ;       a0      - Source Offset
00001410                            ;   d0  - length in tiles
00001410                            ; ---------------------------------------------------------------
00001410                            LoadUncArt:
00001410 46FC 2700                          move    #$2700,sr   ; disable interrupts
00001414 4DF9 00C0 0000                     lea $C00000.l,a6    ; get VDP data port
0000141A                             
0000141A                            LoadArt_Loop:
0000141A 2C98                               move.l  (a0)+,(a6)  ; transfer 4 bytes
0000141C 2C98                               move.l  (a0)+,(a6)  ; transfer 4 more bytes
0000141E 2C98                               move.l  (a0)+,(a6)  ; and so on and so forth
00001420 2C98                               move.l  (a0)+,(a6)  ;
00001422 2C98                               move.l  (a0)+,(a6)  ;
00001424 2C98                               move.l  (a0)+,(a6)  ;
00001426 2C98                               move.l  (a0)+,(a6)  ; in total transfer 32 bytes
00001428 2C98                               move.l  (a0)+,(a6)  ; which is 1 full tile
0000142A                             
0000142A 51C8 FFEE                          dbf d0, LoadArt_Loop; loop until d0 = 0
0000142E 46FC 2300                          move    #$2300,sr   ; enable interrupts
00001432 4E75                               rts	
00001434                            
00001434                            ; ---------------------------------------------------------------------------
00001434                            ; Subroutine to	load pattern load cues
00001434                            ; ---------------------------------------------------------------------------
00001434                            
00001434                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001434                            
00001434                            
00001434                            LoadPLC:
00001434 48E7 0060                  		movem.l	a1-a2,-(sp)
00001438 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000143E D040                       		add.w	d0,d0
00001440 3031 0000                  		move.w	(a1,d0.w),d0
00001444 43F1 0000                  		lea	(a1,d0.w),a1
00001448 45F8 F680                  		lea	($FFFFF680).w,a2
0000144C                            
0000144C                            loc_1598:
0000144C 4A92                       		tst.l	(a2)
0000144E 6700                       		beq.s	loc_15A0
00001450 5C4A                       		addq.w	#6,a2
00001452 60F8                       		bra.s	loc_1598
00001454                            ; ===========================================================================
00001454                            
00001454                            loc_15A0:				; XREF: LoadPLC
00001454 3019                       		move.w	(a1)+,d0
00001456 6B00                       		bmi.s	loc_15AC
00001458                            
00001458                            loc_15A4:
00001458 24D9                       		move.l	(a1)+,(a2)+
0000145A 34D9                       		move.w	(a1)+,(a2)+
0000145C 51C8 FFFA                  		dbf	d0,loc_15A4
00001460                            
00001460                            loc_15AC:
00001460 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001464 4E75                       		rts	
00001466                            ; End of function LoadPLC
00001466                            
00001466                            
00001466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001466                            
00001466                            
00001466                            LoadPLC2:
00001466 48E7 0060                  		movem.l	a1-a2,-(sp)
0000146A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001470 D040                       		add.w	d0,d0
00001472 3031 0000                  		move.w	(a1,d0.w),d0
00001476 43F1 0000                  		lea	(a1,d0.w),a1
0000147A 6100                       		bsr.s	ClearPLC
0000147C 45F8 F680                  		lea	($FFFFF680).w,a2
00001480 3019                       		move.w	(a1)+,d0
00001482 6B00                       		bmi.s	loc_15D8
00001484                            
00001484                            loc_15D0:
00001484 24D9                       		move.l	(a1)+,(a2)+
00001486 34D9                       		move.w	(a1)+,(a2)+
00001488 51C8 FFFA                  		dbf	d0,loc_15D0
0000148C                            
0000148C                            loc_15D8:
0000148C 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001490 4E75                       		rts	
00001492                            ; End of function LoadPLC2
00001492                            
00001492                            ; ---------------------------------------------------------------------------
00001492                            ; Subroutine to	clear the pattern load cues
00001492                            ; ---------------------------------------------------------------------------
00001492                            
00001492                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001492                            
00001492                            
00001492                            ClearPLC:				; XREF: LoadPLC2
00001492 45F8 F680                  		lea	($FFFFF680).w,a2
00001496 701F                       		moveq	#$1F,d0
00001498                            
00001498                            ClearPLC_Loop:
00001498 429A                       		clr.l	(a2)+
0000149A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000149E 4E75                       		rts	
000014A0                            ; End of function ClearPLC
000014A0                            
000014A0                            ; ---------------------------------------------------------------------------
000014A0                            ; Subroutine to	use graphics listed in a pattern load cue
000014A0                            ; ---------------------------------------------------------------------------
000014A0                            
000014A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014A0                            
000014A0                            
000014A0                            RunPLC_RAM:				; XREF: Pal_FadeTo
000014A0 4AB8 F680                  		tst.l	($FFFFF680).w
000014A4 6700                       		beq.s	locret_1640
000014A6 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000014AA 6600                       		bne.s	locret_1640
000014AC 2078 F680                  		movea.l	($FFFFF680).w,a0
000014B0 47F9 0000 1396             		lea	(loc_1502).l,a3
000014B6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000014BA 3418                       		move.w	(a0)+,d2
000014BC 6A00                       		bpl.s	loc_160E
000014BE D6FC 000A                  		adda.w	#$A,a3
000014C2                            
000014C2                            loc_160E:
000014C2 0242 7FFF                  		andi.w	#$7FFF,d2
000014C6 6100 FEFA                  		bsr.w	NemDec4
000014CA 1A18                       		move.b	(a0)+,d5
000014CC E145                       		asl.w	#8,d5
000014CE 1A18                       		move.b	(a0)+,d5
000014D0 7C10                       		moveq	#$10,d6
000014D2 7000                       		moveq	#0,d0
000014D4 21C8 F680                  		move.l	a0,($FFFFF680).w
000014D8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000014DC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000014E0 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000014E4 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000014E8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000014EC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000014F0 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
000014F4                            		
000014F4                            locret_1640:
000014F4 4E75                       		rts	
000014F6                            ; End of function RunPLC_RAM
000014F6                            
000014F6                            
000014F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014F6                            
000014F6                            
000014F6                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000014F6 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000014FA 6700 0000                  		beq.w	locret_16DA
000014FE 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001504 7000                       		moveq	#0,d0
00001506 3038 F684                  		move.w	($FFFFF684).w,d0
0000150A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001510 6000                       		bra.s	loc_1676
00001512                            ; End of function sub_1642
00001512                            
00001512                            
00001512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001512                            
00001512                            
00001512                            sub_165E:				; XREF: Demo_Time
00001512 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001516 6700                       		beq.s	locret_16DA
00001518 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000151E 7000                       		moveq	#0,d0
00001520 3038 F684                  		move.w	($FFFFF684).w,d0
00001524 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000152A                            
0000152A                            loc_1676:				; XREF: sub_1642
0000152A 49F9 00C0 0004             		lea	($C00004).l,a4
00001530 E588                       		lsl.l	#2,d0
00001532 E448                       		lsr.w	#2,d0
00001534 0040 4000                  		ori.w	#$4000,d0
00001538 4840                       		swap	d0
0000153A 2880                       		move.l	d0,(a4)
0000153C 594C                       		subq.w	#4,a4
0000153E 2078 F680                  		movea.l	($FFFFF680).w,a0
00001542 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001546 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000154A 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000154E 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001552 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001556 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
0000155A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000155E                            
0000155E                            loc_16AA:				; XREF: sub_165E
0000155E 3A7C 0008                  		movea.w	#8,a5
00001562 6100 FDFC                  		bsr.w	NemDec3
00001566 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
0000156A 6700                       		beq.s	loc_16DC
0000156C 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001570 66EC                       		bne.s	loc_16AA
00001572 21C8 F680                  		move.l	a0,($FFFFF680).w
00001576 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000157A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000157E 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001582 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001586 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000158A 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000158E                            
0000158E                            locret_16DA:				; XREF: sub_1642
0000158E 4E75                       		rts	
00001590                            ; ===========================================================================
00001590                            
00001590                            loc_16DC:				; XREF: sub_165E
00001590 41F8 F680                  		lea	($FFFFF680).w,a0
00001594 7015                       		moveq	#$15,d0
00001596                            
00001596                            loc_16E2:				; XREF: sub_165E
00001596 20E8 0006                  		move.l	6(a0),(a0)+
0000159A 51C8 FFFA                  		dbf	d0,loc_16E2
0000159E 4E75                       		rts	
000015A0                            ; End of function sub_165E
000015A0                            
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            ; Subroutine to	execute	the pattern load cue
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            
000015A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015A0                            
000015A0                            
000015A0                            RunPLC_ROM:
000015A0 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000015A6 D040                       		add.w	d0,d0
000015A8 3031 0000                  		move.w	(a1,d0.w),d0
000015AC 43F1 0000                  		lea	(a1,d0.w),a1
000015B0 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000015B2                            
000015B2                            RunPLC_Loop:
000015B2 2059                       		movea.l	(a1)+,a0	; get art pointer
000015B4 7000                       		moveq	#0,d0
000015B6 3019                       		move.w	(a1)+,d0	; get VRAM address
000015B8 E588                       		lsl.l	#2,d0		; divide address by $20
000015BA E448                       		lsr.w	#2,d0
000015BC 0040 4000                  		ori.w	#$4000,d0
000015C0 4840                       		swap	d0
000015C2 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000015C8 6100 FD1E                  		bsr.w	NemDec		; decompress
000015CC 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000015D0 4E75                       		rts	
000015D2                            ; End of function RunPLC_ROM
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Enigma decompression algorithm
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            EniDec:
000015D2 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000015D6 3640                       		movea.w	d0,a3
000015D8 1018                       		move.b	(a0)+,d0
000015DA 4880                       		ext.w	d0
000015DC 3A40                       		movea.w	d0,a5
000015DE 1818                       		move.b	(a0)+,d4
000015E0 E70C                       		lsl.b	#3,d4
000015E2 3458                       		movea.w	(a0)+,a2
000015E4 D4CB                       		adda.w	a3,a2
000015E6 3858                       		movea.w	(a0)+,a4
000015E8 D8CB                       		adda.w	a3,a4
000015EA 1A18                       		move.b	(a0)+,d5
000015EC E145                       		asl.w	#8,d5
000015EE 1A18                       		move.b	(a0)+,d5
000015F0 7C10                       		moveq	#$10,d6
000015F2                            
000015F2                            loc_173E:				; XREF: loc_1768
000015F2 7007                       		moveq	#7,d0
000015F4 3E06                       		move.w	d6,d7
000015F6 9E40                       		sub.w	d0,d7
000015F8 3205                       		move.w	d5,d1
000015FA EE69                       		lsr.w	d7,d1
000015FC 0241 007F                  		andi.w	#$7F,d1
00001600 3401                       		move.w	d1,d2
00001602 0C41 0040                  		cmpi.w	#$40,d1
00001606 6400                       		bcc.s	loc_1758
00001608 7006                       		moveq	#6,d0
0000160A E24A                       		lsr.w	#1,d2
0000160C                            
0000160C                            loc_1758:
0000160C 6100 0000                  		bsr.w	sub_188C
00001610 0242 000F                  		andi.w	#$F,d2
00001614 E849                       		lsr.w	#4,d1
00001616 D241                       		add.w	d1,d1
00001618 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000161C                            ; End of function EniDec
0000161C                            
0000161C                            ; ===========================================================================
0000161C                            
0000161C                            loc_1768:				; XREF: loc_17B4
0000161C 32CA                       		move.w	a2,(a1)+
0000161E 524A                       		addq.w	#1,a2
00001620 51CA FFFA                  		dbf	d2,loc_1768
00001624 60CC                       		bra.s	loc_173E
00001626                            ; ===========================================================================
00001626                            
00001626                            loc_1772:				; XREF: loc_17B4
00001626 32CC                       		move.w	a4,(a1)+
00001628 51CA FFFC                  		dbf	d2,loc_1772
0000162C 60C4                       		bra.s	loc_173E
0000162E                            ; ===========================================================================
0000162E                            
0000162E                            loc_177A:				; XREF: loc_17B4
0000162E 6100 0000                  		bsr.w	loc_17DC
00001632                            
00001632                            loc_177E:
00001632 32C1                       		move.w	d1,(a1)+
00001634 51CA FFFC                  		dbf	d2,loc_177E
00001638 60B8                       		bra.s	loc_173E
0000163A                            ; ===========================================================================
0000163A                            
0000163A                            loc_1786:				; XREF: loc_17B4
0000163A 6100 0000                  		bsr.w	loc_17DC
0000163E                            
0000163E                            loc_178A:
0000163E 32C1                       		move.w	d1,(a1)+
00001640 5241                       		addq.w	#1,d1
00001642 51CA FFFA                  		dbf	d2,loc_178A
00001646 60AA                       		bra.s	loc_173E
00001648                            ; ===========================================================================
00001648                            
00001648                            loc_1794:				; XREF: loc_17B4
00001648 6100 0000                  		bsr.w	loc_17DC
0000164C                            
0000164C                            loc_1798:
0000164C 32C1                       		move.w	d1,(a1)+
0000164E 5341                       		subq.w	#1,d1
00001650 51CA FFFA                  		dbf	d2,loc_1798
00001654 609C                       		bra.s	loc_173E
00001656                            ; ===========================================================================
00001656                            
00001656                            loc_17A2:				; XREF: loc_17B4
00001656 0C42 000F                  		cmpi.w	#$F,d2
0000165A 6700                       		beq.s	loc_17C4
0000165C                            
0000165C                            loc_17A8:
0000165C 6100 0000                  		bsr.w	loc_17DC
00001660 32C1                       		move.w	d1,(a1)+
00001662 51CA FFF8                  		dbf	d2,loc_17A8
00001666 608A                       		bra.s	loc_173E
00001668                            ; ===========================================================================
00001668                            
00001668                            loc_17B4:				; XREF: EniDec
00001668 60B2                       		bra.s	loc_1768
0000166A                            ; ===========================================================================
0000166A 60B0                       		bra.s	loc_1768
0000166C                            ; ===========================================================================
0000166C 60B8                       		bra.s	loc_1772
0000166E                            ; ===========================================================================
0000166E 60B6                       		bra.s	loc_1772
00001670                            ; ===========================================================================
00001670 60BC                       		bra.s	loc_177A
00001672                            ; ===========================================================================
00001672 60C6                       		bra.s	loc_1786
00001674                            ; ===========================================================================
00001674 60D2                       		bra.s	loc_1794
00001676                            ; ===========================================================================
00001676 60DE                       		bra.s	loc_17A2
00001678                            ; ===========================================================================
00001678                            
00001678                            loc_17C4:				; XREF: loc_17A2
00001678 5348                       		subq.w	#1,a0
0000167A 0C46 0010                  		cmpi.w	#$10,d6
0000167E 6600                       		bne.s	loc_17CE
00001680 5348                       		subq.w	#1,a0
00001682                            
00001682                            loc_17CE:
00001682 3008                       		move.w	a0,d0
00001684 E248                       		lsr.w	#1,d0
00001686 6400                       		bcc.s	loc_17D6
00001688 5248                       		addq.w	#1,a0
0000168A                            
0000168A                            loc_17D6:
0000168A 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
0000168E 4E75                       		rts	
00001690                            ; ===========================================================================
00001690                            
00001690                            loc_17DC:				; XREF: loc_17A2
00001690 360B                       		move.w	a3,d3
00001692 1204                       		move.b	d4,d1
00001694 D201                       		add.b	d1,d1
00001696 6400                       		bcc.s	loc_17EE
00001698 5346                       		subq.w	#1,d6
0000169A 0D05                       		btst	d6,d5
0000169C 6700                       		beq.s	loc_17EE
0000169E 0043 8000                  		ori.w	#-$8000,d3
000016A2                            
000016A2                            loc_17EE:
000016A2 D201                       		add.b	d1,d1
000016A4 6400                       		bcc.s	loc_17FC
000016A6 5346                       		subq.w	#1,d6
000016A8 0D05                       		btst	d6,d5
000016AA 6700                       		beq.s	loc_17FC
000016AC 0643 4000                  		addi.w	#$4000,d3
000016B0                            
000016B0                            loc_17FC:
000016B0 D201                       		add.b	d1,d1
000016B2 6400                       		bcc.s	loc_180A
000016B4 5346                       		subq.w	#1,d6
000016B6 0D05                       		btst	d6,d5
000016B8 6700                       		beq.s	loc_180A
000016BA 0643 2000                  		addi.w	#$2000,d3
000016BE                            
000016BE                            loc_180A:
000016BE D201                       		add.b	d1,d1
000016C0 6400                       		bcc.s	loc_1818
000016C2 5346                       		subq.w	#1,d6
000016C4 0D05                       		btst	d6,d5
000016C6 6700                       		beq.s	loc_1818
000016C8 0043 1000                  		ori.w	#$1000,d3
000016CC                            
000016CC                            loc_1818:
000016CC D201                       		add.b	d1,d1
000016CE 6400                       		bcc.s	loc_1826
000016D0 5346                       		subq.w	#1,d6
000016D2 0D05                       		btst	d6,d5
000016D4 6700                       		beq.s	loc_1826
000016D6 0043 0800                  		ori.w	#$800,d3
000016DA                            
000016DA                            loc_1826:
000016DA 3205                       		move.w	d5,d1
000016DC 3E06                       		move.w	d6,d7
000016DE 9E4D                       		sub.w	a5,d7
000016E0 6400                       		bcc.s	loc_1856
000016E2 3C07                       		move.w	d7,d6
000016E4 0646 0010                  		addi.w	#$10,d6
000016E8 4447                       		neg.w	d7
000016EA EF69                       		lsl.w	d7,d1
000016EC 1A10                       		move.b	(a0),d5
000016EE EF3D                       		rol.b	d7,d5
000016F0 DE47                       		add.w	d7,d7
000016F2 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000016F6 D245                       		add.w	d5,d1
000016F8                            
000016F8                            loc_1844:				; XREF: loc_1868
000016F8 300D                       		move.w	a5,d0
000016FA D040                       		add.w	d0,d0
000016FC C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001700 D243                       		add.w	d3,d1
00001702 1A18                       		move.b	(a0)+,d5
00001704 E14D                       		lsl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708 4E75                       		rts	
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            loc_1856:				; XREF: loc_1826
0000170A 6700                       		beq.s	loc_1868
0000170C EE69                       		lsr.w	d7,d1
0000170E 300D                       		move.w	a5,d0
00001710 D040                       		add.w	d0,d0
00001712 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001716 D243                       		add.w	d3,d1
00001718 300D                       		move.w	a5,d0
0000171A 6000                       		bra.s	sub_188C
0000171C                            ; ===========================================================================
0000171C                            
0000171C                            loc_1868:				; XREF: loc_1856
0000171C 7C10                       		moveq	#$10,d6
0000171E                            
0000171E                            loc_186A:
0000171E 60D8                       		bra.s	loc_1844
00001720                            ; ===========================================================================
00001720 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001736 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001740                            
00001740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001740                            
00001740                            
00001740                            sub_188C:				; XREF: EniDec
00001740 9C40                       		sub.w	d0,d6
00001742 0C46 0009                  		cmpi.w	#9,d6
00001746 6400                       		bcc.s	locret_189A
00001748 5046                       		addq.w	#8,d6
0000174A E145                       		asl.w	#8,d5
0000174C 1A18                       		move.b	(a0)+,d5
0000174E                            
0000174E                            locret_189A:
0000174E 4E75                       		rts	
00001750                            ; End of function sub_188C
00001750                            
00001750                            ; ===========================================================================
00001750                            ; ---------------------------------------------------------------------------
00001750                            ; Kosinski decompression routine
00001750                            ;
00001750                            ; Created by vladikcomper
00001750                            ; Special thanks to flamewing and MarkeyJester
00001750                            ; ---------------------------------------------------------------------------
00001750                             
00001750                            _Kos_RunBitStream macro
00001750                                dbf d2,@skip\@
00001750                                moveq   #7,d2
00001750                                move.b  d1,d0
00001750                                swap    d3
00001750                                bpl.s   @skip\@
00001750                                move.b  (a0)+,d0            ; get desc. bitfield
00001750                                move.b  (a0)+,d1            ;
00001750                                move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
00001750                                move.b  (a4,d1.w),d1            ;
00001750                            @skip\@
00001750                                endm
00001750                            ; ---------------------------------------------------------------------------
00001750                             
00001750                            KosDec:
00001750 7E07                           moveq   #7,d7
00001752 7000                           moveq   #0,d0
00001754 7200                           moveq   #0,d1
00001756 49FA 0000                      lea KosDec_ByteMap(pc),a4
0000175A 1018                           move.b  (a0)+,d0            ; get desc field low-byte
0000175C 1218                           move.b  (a0)+,d1            ; get desc field hi-byte
0000175E 1034 0000                      move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
00001762 1234 1000                      move.b  (a4,d1.w),d1            ;
00001766 7407                           moveq   #7,d2               ; set repeat count to 8
00001768 76FF                           moveq   #-1,d3              ; d3 will be desc field switcher
0000176A 4243                           clr.w   d3              ;
0000176C 6000                           bra.s   KosDec_FetchNewCode
0000176E                             
0000176E                            KosDec_FetchCodeLoop:
0000176E                                ; code 1 (Uncompressed byte)
0000176E 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001786 12D8                           move.b  (a0)+,(a1)+
00001788                             
00001788                            KosDec_FetchNewCode:
00001788 D000                           add.b   d0,d0               ; get a bit from the bitstream
0000178A 65E2                           bcs.s   KosDec_FetchCodeLoop        ; if code = 0, branch
0000178C                             
0000178C                                ; codes 00 and 01
0000178C 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017A4 7800                           moveq   #0,d4               ; d4 will contain copy count
000017A6 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017A8 6500                           bcs.s   KosDec_Code_01
000017AA                             
000017AA                                ; code 00 (Dictionary ref. short)
000017AA 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017C2 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017C4 D944                           addx.w  d4,d4
000017C6 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017DE D000                           add.b   d0,d0               ; get a bit from the bitstream
000017E0 D944                           addx.w  d4,d4
000017E2 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017FA 7AFF                           moveq   #-1,d5
000017FC 1A18                           move.b  (a0)+,d5            ; d5 = displacement
000017FE                             
000017FE                            KosDec_StreamCopy:
000017FE 47F1 5000                      lea (a1,d5),a3
00001802 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
00001804                             
00001804                            KosDec_copy:
00001804 12DB                           move.b  (a3)+,(a1)+
00001806 51CC FFFC                      dbf d4,KosDec_copy
0000180A 6000 FF7C                      bra.w   KosDec_FetchNewCode
0000180E                            ; ---------------------------------------------------------------------------
0000180E                            KosDec_Code_01:
0000180E                                ; code 01 (Dictionary ref. long / special)
0000180E 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001826 1C18                           move.b  (a0)+,d6            ; d6 = %LLLLLLLL
00001828 1818                           move.b  (a0)+,d4            ; d4 = %HHHHHCCC
0000182A 7AFF                           moveq   #-1,d5
0000182C 1A04                           move.b  d4,d5               ; d5 = %11111111 HHHHHCCC
0000182E EB4D                           lsl.w   #5,d5               ; d5 = %111HHHHH CCC00000
00001830 1A06                           move.b  d6,d5               ; d5 = %111HHHHH LLLLLLLL
00001832 C847                           and.w   d7,d4               ; d4 = %00000CCC
00001834 66C8                           bne.s   KosDec_StreamCopy       ; if CCC=0, branch
00001836                             
00001836                                ; special mode (extended counter)
00001836 1818                           move.b  (a0)+,d4            ; read cnt
00001838 6700                           beq.s   KosDec_Quit         ; if cnt=0, quit decompression
0000183A 5304                           subq.b  #1,d4
0000183C 6700 FF4A                      beq.w   KosDec_FetchNewCode     ; if cnt=1, fetch a new code
00001840                             
00001840 47F1 5000                      lea (a1,d5),a3
00001844 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
00001846 3C04                           move.w  d4,d6
00001848 4646                           not.w   d6
0000184A CC47                           and.w   d7,d6
0000184C DC46                           add.w   d6,d6
0000184E E64C                           lsr.w   #3,d4
00001850 4EFB 6000                      jmp KosDec_largecopy(pc,d6.w)
00001854                             
00001854                            KosDec_largecopy:
00001854                                rept 8
00001854                                move.b  (a3)+,(a1)+
00001854 12DB 12DB 12DB 12DB 12DB+      endr
00001864 51CC FFEE                      dbf d4,KosDec_largecopy
00001868 6000 FF1E                      bra.w   KosDec_FetchNewCode
0000186C                             
0000186C                            KosDec_Quit:
0000186C 4E75                           rts
0000186E                             
0000186E                            ; ---------------------------------------------------------------------------
0000186E                            ; A look-up table to invert bits order in desc. field bytes
0000186E                            ; ---------------------------------------------------------------------------
0000186E                             
0000186E                            KosDec_ByteMap:
0000186E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
0000187E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
0000188E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
0000189E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
000018AE 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
000018BE 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
000018CE 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
000018DE 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
000018EE 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
000018FE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
0000190E 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
0000191E 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
0000192E 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
0000193E 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
0000194E 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
0000195E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
0000196E                             
0000196E                            ; ===========================================================================
0000196E                            
0000196E                            ; ---------------------------------------------------------------------------
0000196E                            ; Pallet cycling routine loading subroutine
0000196E                            ; ---------------------------------------------------------------------------
0000196E                            
0000196E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000196E                            
0000196E                            
0000196E                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000196E 7400                       		moveq	#0,d2
00001970 7000                       		moveq	#0,d0
00001972 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001976 D040                       		add.w	d0,d0		; multiply by 2
00001978 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000197C 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001980                            ; End of function PalCycle_Load
00001980                            
00001980                            ; ===========================================================================
00001980                            ; ---------------------------------------------------------------------------
00001980                            ; Pallet cycling routines
00001980                            ; ---------------------------------------------------------------------------
00001980 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001982 0000                       		dc.w PalCycle_LZ-PalCycle
00001984 0000                       		dc.w PalCycle_MZ-PalCycle
00001986 0000                       		dc.w PalCycle_SLZ-PalCycle
00001988 0000                       		dc.w PalCycle_SYZ-PalCycle
0000198A 0000                       		dc.w PalCycle_SBZ-PalCycle
0000198C 0000                       		dc.w PalCycle_GHZ-PalCycle
0000198E                            
0000198E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000198E                            
0000198E                            
0000198E                            PalCycle_Title:				; XREF: TitleScreen
0000198E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001994 6000                       		bra.s	loc_196A
00001996                            ; ===========================================================================
00001996                            
00001996                            PalCycle_GHZ:				; XREF: PalCycle
00001996 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000199C                            
0000199C                            loc_196A:				; XREF: PalCycle_Title
0000199C 5378 F634                  		subq.w	#1,($FFFFF634).w
000019A0 6A00                       		bpl.s	locret_1990
000019A2 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000019A8 3038 F632                  		move.w	($FFFFF632).w,d0
000019AC 5278 F632                  		addq.w	#1,($FFFFF632).w
000019B0 0240 0003                  		andi.w	#3,d0
000019B4 E748                       		lsl.w	#3,d0
000019B6 43F8 FB50                  		lea	($FFFFFB50).w,a1
000019BA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019BE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019C2                            
000019C2                            locret_1990:
000019C2 4E75                       		rts	
000019C4                            ; End of function PalCycle_Title
000019C4                            
000019C4                            
000019C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019C4                            
000019C4                            
000019C4                            PalCycle_LZ:				; XREF: PalCycle
000019C4 5378 F634                  		subq.w	#1,($FFFFF634).w
000019C8 6A00                       		bpl.s	loc_19D8
000019CA 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000019D0 3038 F632                  		move.w	($FFFFF632).w,d0
000019D4 5278 F632                  		addq.w	#1,($FFFFF632).w
000019D8 0240 0003                  		andi.w	#3,d0
000019DC E748                       		lsl.w	#3,d0
000019DE 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019E4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000019EA 6600                       		bne.s	loc_19C0
000019EC 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000019F2                            
000019F2                            loc_19C0:
000019F2 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019F6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019FA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019FE 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001A02 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A06 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A0A                            
00001A0A                            loc_19D8:
00001A0A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001A0E 0240 0007                  		andi.w	#7,d0
00001A12 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001A16 6700                       		beq.s	locret_1A3A
00001A18 7201                       		moveq	#1,d1
00001A1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001A1E 6700                       		beq.s	loc_19F0
00001A20 4441                       		neg.w	d1
00001A22                            
00001A22                            loc_19F0:
00001A22 3038 F650                  		move.w	($FFFFF650).w,d0
00001A26 0240 0003                  		andi.w	#3,d0
00001A2A D041                       		add.w	d1,d0
00001A2C 0C40 0003                  		cmpi.w	#3,d0
00001A30 6500                       		bcs.s	loc_1A0A
00001A32 3200                       		move.w	d0,d1
00001A34 7000                       		moveq	#0,d0
00001A36 4A41                       		tst.w	d1
00001A38 6A00                       		bpl.s	loc_1A0A
00001A3A 7002                       		moveq	#2,d0
00001A3C                            
00001A3C                            loc_1A0A:
00001A3C 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A40 D040                       		add.w	d0,d0
00001A42 3200                       		move.w	d0,d1
00001A44 D040                       		add.w	d0,d0
00001A46 D041                       		add.w	d1,d0
00001A48 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A4E 43F8 FB78                  		lea	($FFFFFB78).w,a1
00001A52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A5A 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A60 43F8 FAF8                  		lea	($FFFFFAF8).w,a1
00001A64 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A68 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A6C                            
00001A6C                            locret_1A3A:
00001A6C 4E75                       		rts	
00001A6E                            ; End of function PalCycle_LZ
00001A6E                            
00001A6E                            ; ===========================================================================
00001A6E 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            PalCycle_MZ:				; XREF: PalCycle
00001A76 4E75                       		rts	
00001A78                            
00001A78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A78                            
00001A78                            
00001A78                            PalCycle_SLZ:				; XREF: PalCycle
00001A78 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A7C 6A00                       		bpl.s	locret_1A80
00001A7E 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A84 3038 F632                  		move.w	($FFFFF632).w,d0
00001A88 5240                       		addq.w	#1,d0
00001A8A 0C40 0006                  		cmpi.w	#6,d0
00001A8E 6500                       		bcs.s	loc_1A60
00001A90 7000                       		moveq	#0,d0
00001A92                            
00001A92                            loc_1A60:
00001A92 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A96 3200                       		move.w	d0,d1
00001A98 D241                       		add.w	d1,d1
00001A9A D041                       		add.w	d1,d0
00001A9C D040                       		add.w	d0,d0
00001A9E 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001AA4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001AA8 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001AAC 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001AB2                            
00001AB2                            locret_1A80:
00001AB2 4E75                       		rts	
00001AB4                            ; End of function PalCycle_SLZ
00001AB4                            
00001AB4                            
00001AB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB4                            
00001AB4                            
00001AB4                            PalCycle_SYZ:				; XREF: PalCycle
00001AB4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AB8 6A00                       		bpl.s	locret_1AC6
00001ABA 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AC0 3038 F632                  		move.w	($FFFFF632).w,d0
00001AC4 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AC8 0240 0003                  		andi.w	#3,d0
00001ACC E548                       		lsl.w	#2,d0
00001ACE 3200                       		move.w	d0,d1
00001AD0 D040                       		add.w	d0,d0
00001AD2 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001AD8 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001ADC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AE0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AE4 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001AEA 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001AEE 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001AF2 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001AF8                            
00001AF8                            locret_1AC6:
00001AF8 4E75                       		rts	
00001AFA                            ; End of function PalCycle_SYZ
00001AFA                            
00001AFA                            
00001AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AFA                            
00001AFA                            
00001AFA                            PalCycle_SBZ:				; XREF: PalCycle
00001AFA 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001B00 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B04 6700                       		beq.s	loc_1ADA
00001B06 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B0C                            
00001B0C                            loc_1ADA:
00001B0C 43F8 F650                  		lea	($FFFFF650).w,a1
00001B10 321A                       		move.w	(a2)+,d1
00001B12                            
00001B12                            loc_1AE0:
00001B12 5311                       		subq.b	#1,(a1)
00001B14 6B00                       		bmi.s	loc_1AEA
00001B16 5489                       		addq.l	#2,a1
00001B18 5C8A                       		addq.l	#6,a2
00001B1A 6000                       		bra.s	loc_1B06
00001B1C                            ; ===========================================================================
00001B1C                            
00001B1C                            loc_1AEA:				; XREF: PalCycle_SBZ
00001B1C 12DA                       		move.b	(a2)+,(a1)+
00001B1E 1011                       		move.b	(a1),d0
00001B20 5200                       		addq.b	#1,d0
00001B22 B01A                       		cmp.b	(a2)+,d0
00001B24 6500                       		bcs.s	loc_1AF6
00001B26 7000                       		moveq	#0,d0
00001B28                            
00001B28                            loc_1AF6:
00001B28 12C0                       		move.b	d0,(a1)+
00001B2A 0240 000F                  		andi.w	#$F,d0
00001B2E D040                       		add.w	d0,d0
00001B30 305A                       		movea.w	(a2)+,a0
00001B32 365A                       		movea.w	(a2)+,a3
00001B34 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B38                            
00001B38                            loc_1B06:				; XREF: PalCycle_SBZ
00001B38 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B3C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B40 6A00                       		bpl.s	locret_1B64
00001B42 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B48 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B4E 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B52 6700                       		beq.s	loc_1B2E
00001B54 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B5A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B60                            
00001B60                            loc_1B2E:
00001B60 72FF                       		moveq	#-1,d1
00001B62 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B66 6700                       		beq.s	loc_1B38
00001B68 4441                       		neg.w	d1
00001B6A                            
00001B6A                            loc_1B38:
00001B6A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B6E 0240 0003                  		andi.w	#3,d0
00001B72 D041                       		add.w	d1,d0
00001B74 0C40 0003                  		cmpi.w	#3,d0
00001B78 6500                       		bcs.s	loc_1B52
00001B7A 3200                       		move.w	d0,d1
00001B7C 7000                       		moveq	#0,d0
00001B7E 4A41                       		tst.w	d1
00001B80 6A00                       		bpl.s	loc_1B52
00001B82 7002                       		moveq	#2,d0
00001B84                            
00001B84                            loc_1B52:
00001B84 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B88 D040                       		add.w	d0,d0
00001B8A 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B8E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B92 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B96                            
00001B96                            locret_1B64:
00001B96 4E75                       		rts	
00001B98                            ; End of function PalCycle_SBZ
00001B98                            
00001B98                            ; ===========================================================================
00001B98                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001BB8                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001BD8                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001BF8                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001C0A                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001C1C                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C84                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001CA8                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001CC8                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001CD8                            
00001CD8                            Pal_SBZCycList:
00001CD8                            	include "_inc\SBZ pallet script 1.asm"
00001CD8                            ; ---------------------------------------------------------------------------
00001CD8                            ; Scrap Brain Zone 1 pallet cycling script
00001CD8                            ; ---------------------------------------------------------------------------
00001CD8 0008                       	dc.w 8			; number of entries - 1
00001CDA 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001CDC 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001CDE FB50                       	dc.w $FB50		; RAM address
00001CE0 0D08                       	dc.b $D, 8
00001CE2 0000                       	dc.w Pal_SBZCyc2
00001CE4 FB52                       	dc.w $FB52
00001CE6 0E08                       	dc.b $E, 8
00001CE8 0000                       	dc.w Pal_SBZCyc3
00001CEA FB6E                       	dc.w $FB6E
00001CEC 0B08                       	dc.b $B, 8
00001CEE 0000                       	dc.w Pal_SBZCyc5
00001CF0 FB70                       	dc.w $FB70
00001CF2 0708                       	dc.b 7,	8
00001CF4 0000                       	dc.w Pal_SBZCyc6
00001CF6 FB72                       	dc.w $FB72
00001CF8 1C10                       	dc.b $1C, $10
00001CFA 0000                       	dc.w Pal_SBZCyc7
00001CFC FB7E                       	dc.w $FB7E
00001CFE 0303                       	dc.b 3,	3
00001D00 0000                       	dc.w Pal_SBZCyc8
00001D02 FB78                       	dc.w $FB78
00001D04 0303                       	dc.b 3,	3
00001D06 0000                       	dc.w Pal_SBZCyc8+2
00001D08 FB7A                       	dc.w $FB7A
00001D0A 0303                       	dc.b 3,	3
00001D0C 0000                       	dc.w Pal_SBZCyc8+4
00001D0E FB7C                       	dc.w $FB7C
00001D10                            	even
00001D10                            	even
00001D10                            
00001D10                            Pal_SBZCycList2:
00001D10                            	include "_inc\SBZ pallet script 2.asm"
00001D10                            ; ---------------------------------------------------------------------------
00001D10                            ; Scrap Brain Zone 2 pallet cycling script
00001D10                            ; ---------------------------------------------------------------------------
00001D10 0006                       	dc.w 6
00001D12 0708                       	dc.b 7,	8
00001D14 0000                       	dc.w Pal_SBZCyc1
00001D16 FB50                       	dc.w $FB50
00001D18 0D08                       	dc.b $D, 8
00001D1A 0000                       	dc.w Pal_SBZCyc2
00001D1C FB52                       	dc.w $FB52
00001D1E 0908                       	dc.b 9,	8
00001D20 0000                       	dc.w Pal_SBZCyc9
00001D22 FB70                       	dc.w $FB70
00001D24 0708                       	dc.b 7,	8
00001D26 0000                       	dc.w Pal_SBZCyc6
00001D28 FB72                       	dc.w $FB72
00001D2A 0303                       	dc.b 3,	3
00001D2C 0000                       	dc.w Pal_SBZCyc8
00001D2E FB78                       	dc.w $FB78
00001D30 0303                       	dc.b 3,	3
00001D32 0000                       	dc.w Pal_SBZCyc8+2
00001D34 FB7A                       	dc.w $FB7A
00001D36 0303                       	dc.b 3,	3
00001D38 0000                       	dc.w Pal_SBZCyc8+4
00001D3A FB7C                       	dc.w $FB7C
00001D3C                            	even
00001D3C                            	even
00001D3C                            
00001D3C                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D4C                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D5C                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D6C                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D78                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D88                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D98                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001DB8                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001DC2                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DD2                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001DDE                            ; ---------------------------------------------------------------------------
00001DDE                            ; Subroutine to	fade out and fade in
00001DDE                            ; ---------------------------------------------------------------------------
00001DDE                            
00001DDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DDE                            
00001DDE                            
00001DDE                            Pal_FadeTo:
00001DDE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001DE4                            
00001DE4                            Pal_FadeTo2:
00001DE4 7000                       		moveq	#0,d0
00001DE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DEA 1038 F626                  		move.b	($FFFFF626).w,d0
00001DEE D0C0                       		adda.w	d0,a0
00001DF0 7200                       		moveq	#0,d1
00001DF2 1038 F627                  		move.b	($FFFFF627).w,d0
00001DF6                            
00001DF6                            Pal_ToBlack:
00001DF6 30C1                       		move.w	d1,(a0)+
00001DF8 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001DFC                            
00001DFC 383C 0015                  		move.w	#$15,d4
00001E00                            
00001E00                            loc_1DCE:
00001E00 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E06 6100 0000                  		bsr.w	DelayProgram
00001E0A 6100                       		bsr.s	Pal_FadeIn
00001E0C 6100 F692                  		bsr.w	RunPLC_RAM
00001E10 51CC FFEE                  		dbf	d4,loc_1DCE
00001E14 4E75                       		rts	
00001E16                            ; End of function Pal_FadeTo
00001E16                            
00001E16                            ; ---------------------------------------------------------------------------
00001E16                            ; Pallet fade-in subroutine
00001E16                            ; ---------------------------------------------------------------------------
00001E16                            
00001E16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E16                            
00001E16                            
00001E16                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001E16 7000                       		moveq	#0,d0
00001E18 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E1C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001E20 1038 F626                  		move.b	($FFFFF626).w,d0
00001E24 D0C0                       		adda.w	d0,a0
00001E26 D2C0                       		adda.w	d0,a1
00001E28 1038 F627                  		move.b	($FFFFF627).w,d0
00001E2C                            
00001E2C                            loc_1DFA:
00001E2C 6100                       		bsr.s	Pal_AddColor
00001E2E 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E32                            
00001E32                            locret_1E24:
00001E32 4E75                       		rts	
00001E34                            ; End of function Pal_FadeIn
00001E34                            
00001E34                            
00001E34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E34                            
00001E34                            
00001E34                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E34 3419                       		move.w	(a1)+,d2
00001E36 3610                       		move.w	(a0),d3
00001E38 B642                       		cmp.w	d2,d3
00001E3A 6700                       		beq.s	loc_1E4E
00001E3C 3203                       		move.w	d3,d1
00001E3E 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E42 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E44 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E46 30C1                       		move.w	d1,(a0)+	; update pallet
00001E48 4E75                       		rts	
00001E4A                            ; ===========================================================================
00001E4A                            
00001E4A                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E4A 3203                       		move.w	d3,d1
00001E4C 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E50 B242                       		cmp.w	d2,d1
00001E52 6200                       		bhi.s	Pal_AddRed
00001E54 30C1                       		move.w	d1,(a0)+	; update pallet
00001E56 4E75                       		rts	
00001E58                            ; ===========================================================================
00001E58                            
00001E58                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E58 5458                       		addq.w	#2,(a0)+	; increase red value
00001E5A 4E75                       		rts	
00001E5C                            ; ===========================================================================
00001E5C                            
00001E5C                            loc_1E4E:				; XREF: Pal_AddColor
00001E5C 5448                       		addq.w	#2,a0
00001E5E 4E75                       		rts	
00001E60                            ; End of function Pal_AddColor
00001E60                            
00001E60                            
00001E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E60                            
00001E60                            
00001E60                            Pal_FadeFrom:
00001E60 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001E66                            
00001E66                            Pal_FadeFrom2:
00001E66 383C 0015                  		move.w	#$15,d4
00001E6A                            
00001E6A                            loc_1E5C:
00001E6A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E70 6100 0000                  		bsr.w	DelayProgram
00001E74 6100                       		bsr.s	Pal_FadeOut
00001E76 6100 F628                  		bsr.w	RunPLC_RAM
00001E7A 51CC FFEE                  		dbf	d4,loc_1E5C
00001E7E 4E75                       		rts	
00001E80                            ; End of function Pal_FadeFrom
00001E80                            
00001E80                            ; ---------------------------------------------------------------------------
00001E80                            ; Pallet fade-out subroutine
00001E80                            ; ---------------------------------------------------------------------------
00001E80                            
00001E80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E80                            
00001E80                            
00001E80                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E80 7000                       		moveq	#0,d0
00001E82 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E86 1038 F626                  		move.b	($FFFFF626).w,d0
00001E8A D0C0                       		adda.w	d0,a0
00001E8C 1038 F627                  		move.b	($FFFFF627).w,d0
00001E90                            
00001E90                            loc_1E82:
00001E90 6100                       		bsr.s	Pal_DecColor
00001E92 51C8 FFFC                  		dbf	d0,loc_1E82
00001E96                            
00001E96 7000                       		moveq	#0,d0
00001E98 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E9C 1038 F626                  		move.b	($FFFFF626).w,d0
00001EA0 D0C0                       		adda.w	d0,a0
00001EA2 1038 F627                  		move.b	($FFFFF627).w,d0
00001EA6                            
00001EA6                            loc_1E98:
00001EA6 6100                       		bsr.s	Pal_DecColor
00001EA8 51C8 FFFC                  		dbf	d0,loc_1E98
00001EAC 4E75                       		rts	
00001EAE                            ; End of function Pal_FadeOut
00001EAE                            
00001EAE                            
00001EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EAE                            
00001EAE                            
00001EAE                            Pal_DecColor:				; XREF: Pal_FadeOut
00001EAE 3410                       		move.w	(a0),d2
00001EB0 6700                       		beq.s	loc_1ECC
00001EB2 3202                       		move.w	d2,d1
00001EB4 0241 000E                  		andi.w	#$E,d1
00001EB8 6700                       		beq.s	Pal_DecGreen
00001EBA 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EBC 4E75                       		rts	
00001EBE                            ; ===========================================================================
00001EBE                            
00001EBE                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EBE 3202                       		move.w	d2,d1
00001EC0 0241 00E0                  		andi.w	#$E0,d1
00001EC4 6700                       		beq.s	Pal_DecBlue
00001EC6 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001ECA 4E75                       		rts	
00001ECC                            ; ===========================================================================
00001ECC                            
00001ECC                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001ECC 3202                       		move.w	d2,d1
00001ECE 0241 0E00                  		andi.w	#$E00,d1
00001ED2 6700                       		beq.s	loc_1ECC
00001ED4 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001ED8 4E75                       		rts	
00001EDA                            ; ===========================================================================
00001EDA                            
00001EDA                            loc_1ECC:				; XREF: Pal_DecColor
00001EDA 5448                       		addq.w	#2,a0
00001EDC 4E75                       		rts	
00001EDE                            ; End of function Pal_DecColor
00001EDE                            
00001EDE                            ; ---------------------------------------------------------------------------
00001EDE                            ; Subroutine to	fill the pallet	with white (special stage)
00001EDE                            ; ---------------------------------------------------------------------------
00001EDE                            
00001EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EDE                            
00001EDE                            
00001EDE                            Pal_MakeWhite:				; XREF: SpecialStage
00001EDE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001EE4 7000                       		moveq	#0,d0
00001EE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EEA 1038 F626                  		move.b	($FFFFF626).w,d0
00001EEE D0C0                       		adda.w	d0,a0
00001EF0 323C 0EEE                  		move.w	#$EEE,d1
00001EF4 1038 F627                  		move.b	($FFFFF627).w,d0
00001EF8                            
00001EF8                            PalWhite_Loop:
00001EF8 30C1                       		move.w	d1,(a0)+
00001EFA 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EFE 383C 0015                  		move.w	#$15,d4
00001F02                            
00001F02                            loc_1EF4:
00001F02 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F08 6100 0000                  		bsr.w	DelayProgram
00001F0C 6100                       		bsr.s	Pal_WhiteToBlack
00001F0E 6100 F590                  		bsr.w	RunPLC_RAM
00001F12 51CC FFEE                  		dbf	d4,loc_1EF4
00001F16 4E75                       		rts	
00001F18                            ; End of function Pal_MakeWhite
00001F18                            
00001F18                            
00001F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F18                            
00001F18                            
00001F18                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F18 7000                       		moveq	#0,d0
00001F1A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F1E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F22 1038 F626                  		move.b	($FFFFF626).w,d0
00001F26 D0C0                       		adda.w	d0,a0
00001F28 D2C0                       		adda.w	d0,a1
00001F2A 1038 F627                  		move.b	($FFFFF627).w,d0
00001F2E                            
00001F2E                            loc_1F20:
00001F2E 6100                       		bsr.s	Pal_DecColor2
00001F30 51C8 FFFC                  		dbf	d0,loc_1F20
00001F34                            
00001F34                            locret_1F4A:
00001F34 4E75                       		rts	
00001F36                            ; End of function Pal_WhiteToBlack
00001F36                            
00001F36                            
00001F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F36                            
00001F36                            
00001F36                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F36 3419                       		move.w	(a1)+,d2
00001F38 3610                       		move.w	(a0),d3
00001F3A B642                       		cmp.w	d2,d3
00001F3C 6700                       		beq.s	loc_1F78
00001F3E 3203                       		move.w	d3,d1
00001F40 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F44 6500                       		bcs.s	loc_1F64
00001F46 B242                       		cmp.w	d2,d1
00001F48 6500                       		bcs.s	loc_1F64
00001F4A 30C1                       		move.w	d1,(a0)+
00001F4C 4E75                       		rts	
00001F4E                            ; ===========================================================================
00001F4E                            
00001F4E                            loc_1F64:				; XREF: Pal_DecColor2
00001F4E 3203                       		move.w	d3,d1
00001F50 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F54 6500                       		bcs.s	loc_1F74
00001F56 B242                       		cmp.w	d2,d1
00001F58 6500                       		bcs.s	loc_1F74
00001F5A 30C1                       		move.w	d1,(a0)+
00001F5C 4E75                       		rts	
00001F5E                            ; ===========================================================================
00001F5E                            
00001F5E                            loc_1F74:				; XREF: loc_1F64
00001F5E 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F60 4E75                       		rts	
00001F62                            ; ===========================================================================
00001F62                            
00001F62                            loc_1F78:				; XREF: Pal_DecColor2
00001F62 5448                       		addq.w	#2,a0
00001F64 4E75                       		rts	
00001F66                            ; End of function Pal_DecColor2
00001F66                            
00001F66                            ; ---------------------------------------------------------------------------
00001F66                            ; Subroutine to	make a white flash when	you enter a special stage
00001F66                            ; ---------------------------------------------------------------------------
00001F66                            
00001F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F66                            
00001F66                            
00001F66                            Pal_MakeFlash:				; XREF: SpecialStage
00001F66 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001F6C 383C 0015                  		move.w	#$15,d4
00001F70                            
00001F70                            loc_1F86:
00001F70 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F76 6100 0000                  		bsr.w	DelayProgram
00001F7A 6100                       		bsr.s	Pal_ToWhite
00001F7C 6100 F522                  		bsr.w	RunPLC_RAM
00001F80 51CC FFEE                  		dbf	d4,loc_1F86
00001F84 4E75                       		rts	
00001F86                            ; End of function Pal_MakeFlash
00001F86                            
00001F86                            
00001F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F86                            
00001F86                            
00001F86                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F86 7000                       		moveq	#0,d0
00001F88 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F8C 1038 F626                  		move.b	($FFFFF626).w,d0
00001F90 D0C0                       		adda.w	d0,a0
00001F92 1038 F627                  		move.b	($FFFFF627).w,d0
00001F96                            
00001F96                            loc_1FAC:
00001F96 6100                       		bsr.s	Pal_AddColor2
00001F98 51C8 FFFC                  		dbf	d0,loc_1FAC
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAC                            
00001FAC                            loc_1FC2:
00001FAC 6100                       		bsr.s	Pal_AddColor2
00001FAE 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FB2 4E75                       		rts	
00001FB4                            ; End of function Pal_ToWhite
00001FB4                            
00001FB4                            
00001FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB4                            
00001FB4                            
00001FB4                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FB4 3410                       		move.w	(a0),d2
00001FB6 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FBA 6700                       		beq.s	loc_2006
00001FBC 3202                       		move.w	d2,d1
00001FBE 0241 000E                  		andi.w	#$E,d1
00001FC2 0C41 000E                  		cmpi.w	#$E,d1
00001FC6 6700                       		beq.s	loc_1FE2
00001FC8 5458                       		addq.w	#2,(a0)+	; increase red value
00001FCA 4E75                       		rts	
00001FCC                            ; ===========================================================================
00001FCC                            
00001FCC                            loc_1FE2:				; XREF: Pal_AddColor2
00001FCC 3202                       		move.w	d2,d1
00001FCE 0241 00E0                  		andi.w	#$E0,d1
00001FD2 0C41 00E0                  		cmpi.w	#$E0,d1
00001FD6 6700                       		beq.s	loc_1FF4
00001FD8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FDC 4E75                       		rts	
00001FDE                            ; ===========================================================================
00001FDE                            
00001FDE                            loc_1FF4:				; XREF: loc_1FE2
00001FDE 3202                       		move.w	d2,d1
00001FE0 0241 0E00                  		andi.w	#$E00,d1
00001FE4 0C41 0E00                  		cmpi.w	#$E00,d1
00001FE8 6700                       		beq.s	loc_2006
00001FEA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001FEE 4E75                       		rts	
00001FF0                            ; ===========================================================================
00001FF0                            
00001FF0                            loc_2006:				; XREF: Pal_AddColor2
00001FF0 5448                       		addq.w	#2,a0
00001FF2 4E75                       		rts	
00001FF4                            ; End of function Pal_AddColor2
00001FF4                            
00001FF4                            ; ---------------------------------------------------------------------------
00001FF4                            ; Pallet cycling routine - Sega	logo
00001FF4                            ; ---------------------------------------------------------------------------
00001FF4                            
00001FF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF4                            
00001FF4                            
00001FF4                            PalCycle_Sega:				; XREF: SegaScreen
00001FF4 4A38 F635                  		tst.b	($FFFFF635).w
00001FF8 6600                       		bne.s	loc_206A
00001FFA 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001FFE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002004 7205                       		moveq	#5,d1
00002006 3038 F632                  		move.w	($FFFFF632).w,d0
0000200A                            
0000200A                            loc_2020:
0000200A 6A00                       		bpl.s	loc_202A
0000200C 5448                       		addq.w	#2,a0
0000200E 5341                       		subq.w	#1,d1
00002010 5440                       		addq.w	#2,d0
00002012 60F6                       		bra.s	loc_2020
00002014                            ; ===========================================================================
00002014                            
00002014                            loc_202A:				; XREF: PalCycle_Sega
00002014 3400                       		move.w	d0,d2
00002016 0242 001E                  		andi.w	#$1E,d2
0000201A 6600                       		bne.s	loc_2034
0000201C 5440                       		addq.w	#2,d0
0000201E                            
0000201E                            loc_2034:
0000201E 0C40 0060                  		cmpi.w	#$60,d0
00002022 6400                       		bcc.s	loc_203E
00002024 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002028                            
00002028                            loc_203E:
00002028 5440                       		addq.w	#2,d0
0000202A 51C9 FFE8                  		dbf	d1,loc_202A
0000202E 3038 F632                  		move.w	($FFFFF632).w,d0
00002032 5440                       		addq.w	#2,d0
00002034 3400                       		move.w	d0,d2
00002036 0242 001E                  		andi.w	#$1E,d2
0000203A 6600                       		bne.s	loc_2054
0000203C 5440                       		addq.w	#2,d0
0000203E                            
0000203E                            loc_2054:
0000203E 0C40 0064                  		cmpi.w	#$64,d0
00002042 6D00                       		blt.s	loc_2062
00002044 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000204A 70F4                       		moveq	#-$C,d0
0000204C                            
0000204C                            loc_2062:
0000204C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002050 7001                       		moveq	#1,d0
00002052 4E75                       		rts	
00002054                            ; ===========================================================================
00002054                            
00002054                            loc_206A:				; XREF: loc_202A
00002054 5338 F634                  		subq.b	#1,($FFFFF634).w
00002058 6A00                       		bpl.s	loc_20BC
0000205A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002060 3038 F632                  		move.w	($FFFFF632).w,d0
00002064 0640 000C                  		addi.w	#$C,d0
00002068 0C40 0030                  		cmpi.w	#$30,d0
0000206C 6500                       		bcs.s	loc_2088
0000206E 7000                       		moveq	#0,d0
00002070 4E75                       		rts	
00002072                            ; ===========================================================================
00002072                            
00002072                            loc_2088:				; XREF: loc_206A
00002072 31C0 F632                  		move.w	d0,($FFFFF632).w
00002076 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000207C 41F0 0000                  		lea	(a0,d0.w),a0
00002080 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002084 22D8                       		move.l	(a0)+,(a1)+
00002086 22D8                       		move.l	(a0)+,(a1)+
00002088 3298                       		move.w	(a0)+,(a1)
0000208A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000208E 7000                       		moveq	#0,d0
00002090 722C                       		moveq	#$2C,d1
00002092                            
00002092                            loc_20A8:
00002092 3400                       		move.w	d0,d2
00002094 0242 001E                  		andi.w	#$1E,d2
00002098 6600                       		bne.s	loc_20B2
0000209A 5440                       		addq.w	#2,d0
0000209C                            
0000209C                            loc_20B2:
0000209C 3390 0000                  		move.w	(a0),(a1,d0.w)
000020A0 5440                       		addq.w	#2,d0
000020A2 51C9 FFEE                  		dbf	d1,loc_20A8
000020A6                            
000020A6                            loc_20BC:
000020A6 7001                       		moveq	#1,d0
000020A8 4E75                       		rts	
000020AA                            ; End of function PalCycle_Sega
000020AA                            
000020AA                            ; ===========================================================================
000020AA                            
000020AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000020B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000020E6                            
000020E6                            ; ---------------------------------------------------------------------------
000020E6                            ; Subroutines to load pallets
000020E6                            ; ---------------------------------------------------------------------------
000020E6                            
000020E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E6                            
000020E6                            
000020E6                            PalLoad1:
000020E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000020EC E748                       		lsl.w	#3,d0
000020EE D2C0                       		adda.w	d0,a1
000020F0 2459                       		movea.l	(a1)+,a2
000020F2 3659                       		movea.w	(a1)+,a3
000020F4 D6FC 0080                  		adda.w	#$80,a3
000020F8 3E19                       		move.w	(a1)+,d7
000020FA                            
000020FA                            loc_2110:
000020FA 26DA                       		move.l	(a2)+,(a3)+
000020FC 51CF FFFC                  		dbf	d7,loc_2110
00002100 4E75                       		rts	
00002102                            ; End of function PalLoad1
00002102                            
00002102                            
00002102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002102                            
00002102                            
00002102                            PalLoad2:
00002102 43F9 0000 0000             		lea	(PalPointers).l,a1
00002108 E748                       		lsl.w	#3,d0
0000210A D2C0                       		adda.w	d0,a1
0000210C 2459                       		movea.l	(a1)+,a2
0000210E 3659                       		movea.w	(a1)+,a3
00002110 3E19                       		move.w	(a1)+,d7
00002112                            
00002112                            loc_2128:
00002112 26DA                       		move.l	(a2)+,(a3)+
00002114 51CF FFFC                  		dbf	d7,loc_2128
00002118 4E75                       		rts	
0000211A                            ; End of function PalLoad2
0000211A                            
0000211A                            ; ---------------------------------------------------------------------------
0000211A                            ; Underwater pallet loading subroutine
0000211A                            ; ---------------------------------------------------------------------------
0000211A                            
0000211A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000211A                            
0000211A                            
0000211A                            PalLoad3_Water:
0000211A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002120 E748                       		lsl.w	#3,d0
00002122 D2C0                       		adda.w	d0,a1
00002124 2459                       		movea.l	(a1)+,a2
00002126 3659                       		movea.w	(a1)+,a3
00002128 96FC 0080                  		suba.w	#$80,a3
0000212C 3E19                       		move.w	(a1)+,d7
0000212E                            
0000212E                            loc_2144:
0000212E 26DA                       		move.l	(a2)+,(a3)+
00002130 51CF FFFC                  		dbf	d7,loc_2144
00002134 4E75                       		rts	
00002136                            ; End of function PalLoad3_Water
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            PalLoad4_Water:
00002136 43F9 0000 0000             		lea	(PalPointers).l,a1
0000213C E748                       		lsl.w	#3,d0
0000213E D2C0                       		adda.w	d0,a1
00002140 2459                       		movea.l	(a1)+,a2
00002142 3659                       		movea.w	(a1)+,a3
00002144 96FC 0100                  		suba.w	#$100,a3
00002148 3E19                       		move.w	(a1)+,d7
0000214A                            
0000214A                            loc_2160:
0000214A 26DA                       		move.l	(a2)+,(a3)+
0000214C 51CF FFFC                  		dbf	d7,loc_2160
00002150 4E75                       		rts	
00002152                            ; End of function PalLoad4_Water
00002152                            
00002152                            ; ===========================================================================
00002152                            ; ---------------------------------------------------------------------------
00002152                            ; Pallet pointers
00002152                            ; ---------------------------------------------------------------------------
00002152                            PalPointers:
00002152                            	include "_inc\Pallet pointers.asm"
00002152                            ; ---------------------------------------------------------------------------
00002152                            ; Pallet pointers
00002152                            ; ---------------------------------------------------------------------------
00002152 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002156 FB00                       	dc.w $FB00		; RAM address
00002158 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000215A 0000 0000                  	dc.l Pal_Title
0000215E FB00                       	dc.w $FB00
00002160 001F                       	dc.w $1F
00002162 0000 0000                  	dc.l Pal_LevelSel
00002166 FB00                       	dc.w $FB00
00002168 001F                       	dc.w $1F
0000216A 0000 0000                  	dc.l Pal_Sonic
0000216E FB00                       	dc.w $FB00
00002170 0007                       	dc.w 7
00002172 0000 0000                  	dc.l Pal_GHZ
00002176 FB20                       	dc.w $FB20
00002178 0017                       	dc.w $17
0000217A 0000 0000                  	dc.l Pal_LZ
0000217E FB20                       	dc.w $FB20
00002180 0017                       	dc.w $17
00002182 0000 0000                  	dc.l Pal_MZ
00002186 FB20                       	dc.w $FB20
00002188 0017                       	dc.w $17
0000218A 0000 0000                  	dc.l Pal_SLZ
0000218E FB20                       	dc.w $FB20
00002190 0017                       	dc.w $17
00002192 0000 0000                  	dc.l Pal_SYZ
00002196 FB20                       	dc.w $FB20
00002198 0017                       	dc.w $17
0000219A 0000 0000                  	dc.l Pal_SBZ1
0000219E FB20                       	dc.w $FB20
000021A0 0017                       	dc.w $17
000021A2 0000 0000                  	dc.l Pal_Special
000021A6 FB00                       	dc.w $FB00
000021A8 001F                       	dc.w $1F
000021AA 0000 0000                  	dc.l Pal_LZWater
000021AE FB00                       	dc.w $FB00
000021B0 001F                       	dc.w $1F
000021B2 0000 0000                  	dc.l Pal_SBZ3
000021B6 FB20                       	dc.w $FB20
000021B8 0017                       	dc.w $17
000021BA 0000 0000                  	dc.l Pal_SBZ3Water
000021BE FB00                       	dc.w $FB00
000021C0 001F                       	dc.w $1F
000021C2 0000 0000                  	dc.l Pal_SBZ2
000021C6 FB20                       	dc.w $FB20
000021C8 0017                       	dc.w $17
000021CA 0000 0000                  	dc.l Pal_LZSonWater
000021CE FB00                       	dc.w $FB00
000021D0 0007                       	dc.w 7
000021D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000021D6 FB00                       	dc.w $FB00
000021D8 0007                       	dc.w 7
000021DA 0000 0000                  	dc.l Pal_SpeResult
000021DE FB00                       	dc.w $FB00
000021E0 001F                       	dc.w $1F
000021E2 0000 0000                  	dc.l Pal_SpeContinue
000021E6 FB00                       	dc.w $FB00
000021E8 000F                       	dc.w $F
000021EA 0000 0000                  	dc.l Pal_Ending
000021EE FB00                       	dc.w $FB00
000021F0 001F                       	dc.w $1F
000021F2 0000 0000                  	dc.l Pal_Sonic
000021F6 FB20                       	dc.w $FB20
000021F8 0007                       	dc.w 7
000021F8 0007                       	dc.w 7
000021FA                            
000021FA                            ; ---------------------------------------------------------------------------
000021FA                            ; Pallet data
000021FA                            ; ---------------------------------------------------------------------------
000021FA                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000227A                            Pal_Title:	incbin	pallet\title.bin
000022FA                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000237A                            Pal_Sonic:	incbin	pallet\sonic.bin
0000239A                            Pal_GHZ:	incbin	pallet\ghz.bin
000023FA                            Pal_LZ:		incbin	pallet\lz.bin
0000245A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024DA                            Pal_MZ:		incbin	pallet\mz.bin
0000253A                            Pal_SLZ:	incbin	pallet\slz.bin
0000259A                            Pal_SYZ:	incbin	pallet\syz.bin
000025FA                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000265A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026BA                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000273A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
0000279A                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
0000281A                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
0000283A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
0000285A                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028DA                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
0000291A                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
0000299A                            
0000299A                            ; ---------------------------------------------------------------------------
0000299A                            ; Subroutine to	delay the program by ($FFFFF62A) frames
0000299A                            ; ---------------------------------------------------------------------------
0000299A                            
0000299A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000299A                            
0000299A                            WaitVBlank:
0000299A                            DelayProgram:				; XREF: PauseGame
0000299A 46FC 2300                  		move	#$2300,sr
0000299E                            
0000299E                            loc_29AC:
0000299E 4A38 F62A                  		tst.b	($FFFFF62A).w
000029A2 66FA                       		bne.s	loc_29AC
000029A4 4E75                       		rts	
000029A6                            ; End of function DelayProgram
000029A6                            
000029A6                            ; ---------------------------------------------------------------------------
000029A6                            ; Subroutine to	generate a pseudo-random number	in d0
000029A6                            ; ---------------------------------------------------------------------------
000029A6                            
000029A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A6                            
000029A6                            
000029A6                            RandomNumber:
000029A6 2238 F636                  		move.l	($FFFFF636).w,d1
000029AA 6600                       		bne.s	loc_29C0
000029AC 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029B2                            
000029B2                            loc_29C0:
000029B2 2001                       		move.l	d1,d0
000029B4 E581                       		asl.l	#2,d1
000029B6 D280                       		add.l	d0,d1
000029B8 E781                       		asl.l	#3,d1
000029BA D280                       		add.l	d0,d1
000029BC 3001                       		move.w	d1,d0
000029BE 4841                       		swap	d1
000029C0 D041                       		add.w	d1,d0
000029C2 3200                       		move.w	d0,d1
000029C4 4841                       		swap	d1
000029C6 21C1 F636                  		move.l	d1,($FFFFF636).w
000029CA 4E75                       		rts	
000029CC                            ; End of function RandomNumber
000029CC                            
000029CC                            
000029CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029CC                            
000029CC                            
000029CC                            CalcSine:
000029CC 0240 00FF                          andi.w  #$FF,d0
000029D0 5040                               addq.w  #8,d0
000029D2 D040                               add.w   d0,d0
000029D4 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
000029D8 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
000029DC 4E75                               rts
000029DE                            ; End of function CalcSine
000029DE                            
000029DE                            ; ===========================================================================
000029DE                            
000029DE                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002C5E                            
00002C5E                            ; ===========================================================================
00002C5E 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C62 3200                       		move.w	d0,d1
00002C64 4841                       		swap	d1
00002C66 7000                       		moveq	#0,d0
00002C68 3200                       		move.w	d0,d1
00002C6A 7407                       		moveq	#7,d2
00002C6C                            
00002C6C                            loc_2C80:
00002C6C E599                       		rol.l	#2,d1
00002C6E D040                       		add.w	d0,d0
00002C70 5240                       		addq.w	#1,d0
00002C72 9240                       		sub.w	d0,d1
00002C74 6400                       		bcc.s	loc_2C9A
00002C76 D240                       		add.w	d0,d1
00002C78 5340                       		subq.w	#1,d0
00002C7A 51CA FFF0                  		dbf	d2,loc_2C80
00002C7E E248                       		lsr.w	#1,d0
00002C80 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C84 4E75                       		rts	
00002C86                            ; ===========================================================================
00002C86                            
00002C86                            loc_2C9A:
00002C86 5240                       		addq.w	#1,d0
00002C88 51CA FFE2                  		dbf	d2,loc_2C80
00002C8C E248                       		lsr.w	#1,d0
00002C8E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C92 4E75                       		rts	
00002C94                            
00002C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C94                            
00002C94                            
00002C94                            CalcAngle:
00002C94 48E7 1800                  		movem.l	d3-d4,-(sp)
00002C98 7600                       		moveq	#0,d3
00002C9A 7800                       		moveq	#0,d4
00002C9C 3601                       		move.w	d1,d3
00002C9E 3802                       		move.w	d2,d4
00002CA0 8843                       		or.w	d3,d4
00002CA2 6700                       		beq.s	loc_2D04
00002CA4 3802                       		move.w	d2,d4
00002CA6 4A43                       		tst.w	d3
00002CA8 6A00 0000                  		bpl.w	loc_2CC2
00002CAC 4443                       		neg.w	d3
00002CAE                            
00002CAE                            loc_2CC2:
00002CAE 4A44                       		tst.w	d4
00002CB0 6A00 0000                  		bpl.w	loc_2CCA
00002CB4 4444                       		neg.w	d4
00002CB6                            
00002CB6                            loc_2CCA:
00002CB6 B843                       		cmp.w	d3,d4
00002CB8 6400 0000                  		bcc.w	loc_2CDC
00002CBC E18C                       		lsl.l	#8,d4
00002CBE 88C3                       		divu.w	d3,d4
00002CC0 7000                       		moveq	#0,d0
00002CC2 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CC6 6000                       		bra.s	loc_2CE6
00002CC8                            ; ===========================================================================
00002CC8                            
00002CC8                            loc_2CDC:				; XREF: CalcAngle
00002CC8 E18B                       		lsl.l	#8,d3
00002CCA 86C4                       		divu.w	d4,d3
00002CCC 7040                       		moveq	#$40,d0
00002CCE 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CD2                            
00002CD2                            loc_2CE6:
00002CD2 4A41                       		tst.w	d1
00002CD4 6A00 0000                  		bpl.w	loc_2CF2
00002CD8 4440                       		neg.w	d0
00002CDA 0640 0080                  		addi.w	#$80,d0
00002CDE                            
00002CDE                            loc_2CF2:
00002CDE 4A42                       		tst.w	d2
00002CE0 6A00 0000                  		bpl.w	loc_2CFE
00002CE4 4440                       		neg.w	d0
00002CE6 0640 0100                  		addi.w	#$100,d0
00002CEA                            
00002CEA                            loc_2CFE:
00002CEA 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CEE 4E75                       		rts	
00002CF0                            ; ===========================================================================
00002CF0                            
00002CF0                            loc_2D04:				; XREF: CalcAngle
00002CF0 303C 0040                  		move.w	#$40,d0
00002CF4 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CF8 4E75                       		rts	
00002CFA                            ; End of function CalcAngle
00002CFA                            
00002CFA                            ; ===========================================================================
00002CFA                            
00002CFA                            Angle_Data:	incbin	misc\angles.bin
00002DFC                            
00002DFC                            ; ===========================================================================
00002DFC                            
00002DFC                            ; ---------------------------------------------------------------------------
00002DFC                            ; Sega screen
00002DFC                            ; ---------------------------------------------------------------------------
00002DFC                            
00002DFC                            SegaScreen:				; XREF: GameModeArray
00002DFC 103C 00E4                  		move.b	#$E4,d0
00002E00 6100 E3F4                  		bsr.w	PlaySound_Special ; stop music
00002E04 6100 E68C                  		bsr.w	ClearPLC
00002E08 6100 F056                  		bsr.w	Pal_FadeFrom
00002E0C 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E12 3CBC 8004                  		move.w	#$8004,(a6)
00002E16 3CBC 8230                  		move.w	#$8230,(a6)
00002E1A 3CBC 8407                  		move.w	#$8407,(a6)
00002E1E 3CBC 8700                  		move.w	#$8700,(a6)
00002E22 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E26 4238 F64E                  		clr.b	($FFFFF64E).w
00002E2A 46FC 2700                  		move	#$2700,sr
00002E2E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E32 0200 00BF                  		andi.b	#$BF,d0
00002E36 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E3C 6100 E292                  		bsr.w	ClearScreen
00002E40 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E4A 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E50 6100 E496                  		bsr.w	NemDec
00002E54 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E5A 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E60 303C 0000                  		move.w	#0,d0
00002E64 6100 E76C                  		bsr.w	EniDec
00002E68 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E6E 203C 6510 0003             		move.l	#$65100003,d0
00002E74 7217                       		moveq	#$17,d1
00002E76 7407                       		moveq	#7,d2
00002E78 6100 E444                  		bsr.w	ShowVDPGraphics
00002E7C 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E82 203C 4000 0003             		move.l	#$40000003,d0
00002E88 7227                       		moveq	#$27,d1
00002E8A 741B                       		moveq	#$1B,d2
00002E8C 6100 E430                  		bsr.w	ShowVDPGraphics
00002E90 7000                       		moveq	#0,d0
00002E92 6100 F26E                  		bsr.w	PalLoad2	; load Sega logo pallet
00002E96 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002E9C 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002EA2 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002EA8 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002EAE 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00002EB4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EB8 0000 0040                  		ori.b	#$40,d0
00002EBC 33C0 00C0 0004             		move.w	d0,($C00004).l
00002EC2                            
00002EC2                            Sega_WaitPallet:
00002EC2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EC8 6100 FAD0                  		bsr.w	DelayProgram
00002ECC 6100 F126                  		bsr.w	PalCycle_Sega
00002ED0 66F0                       		bne.s	Sega_WaitPallet
00002ED2                            
00002ED2 103C 00E1                  		move.b	#$E1,d0
00002ED6 6100 E31E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EDA 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002EE0 6100 FAB8                  		bsr.w	DelayProgram
00002EE4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002EEA                            
00002EEA                            Sega_WaitEnd:
00002EEA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EF0 6100 FAA8                  		bsr.w	DelayProgram
00002EF4 4A78 F614                  		tst.w	($FFFFF614).w
00002EF8 6700                       		beq.s	Sega_GotoTitle
00002EFA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F00 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F02                            
00002F02                            Sega_GotoTitle:
00002F02 11FC 0001 F601             		move.b	#1,(FromSEGA).w
00002F08 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F0E 103C 00E4                  		move.b	#$E4,d0
00002F12 6100 E2E2                  		bsr.w	PlaySound_Special ; stop music
00002F16 6100 E57A                  		bsr.w	ClearPLC
00002F1A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002F20 6100 EF44                  		bsr.w	Pal_FadeFrom2
00002F24 46FC 2700                  		move	#$2700,sr
00002F28 6100 E234                  		bsr.w	SoundDriverLoad
00002F2C 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F32 3CBC 8004                  		move.w	#$8004,(a6)
00002F36 3CBC 8230                  		move.w	#$8230,(a6)
00002F3A 3CBC 8407                  		move.w	#$8407,(a6)
00002F3E 3CBC 9001                  		move.w	#$9001,(a6)
00002F42 3CBC 9200                  		move.w	#$9200,(a6)
00002F46 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F4A 3CBC 8720                  		move.w	#$8720,(a6)
00002F4E 4238 F64E                  		clr.b	($FFFFF64E).w
00002F52 6100 E17C                  		bsr.w	ClearScreen
00002F56 4EB9 0000 0000             		jsr SHC2021
00002F5C 6000                       		bra.s	TitleSkip
00002F5E                            ; ===========================================================================
00002F5E                            
00002F5E                            ; ---------------------------------------------------------------------------
00002F5E                            ; Title	screen
00002F5E                            ; ---------------------------------------------------------------------------
00002F5E                            
00002F5E                            TitleScreen:				; XREF: GameModeArray
00002F5E 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00002F64 103C 00E4                  		move.b	#$E4,d0
00002F68 6100 E28C                  		bsr.w	PlaySound_Special ; stop music
00002F6C 6100 E524                  		bsr.w	ClearPLC
00002F70 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002F76 6100 EEEE                  		bsr.w	Pal_FadeFrom2
00002F7A 46FC 2700                  		move	#$2700,sr
00002F7E 6100 E1DE                  		bsr.w	SoundDriverLoad
00002F82 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F88 3CBC 8004                  		move.w	#$8004,(a6)
00002F8C 3CBC 8230                  		move.w	#$8230,(a6)
00002F90 3CBC 8407                  		move.w	#$8407,(a6)
00002F94 3CBC 9001                  		move.w	#$9001,(a6)
00002F98 3CBC 9200                  		move.w	#$9200,(a6)
00002F9C 3CBC 8B03                  		move.w	#$8B03,(a6)
00002FA0 3CBC 8720                  		move.w	#$8720,(a6)
00002FA4 4238 F64E                  		clr.b	($FFFFF64E).w
00002FA8 6100 E126                  		bsr.w	ClearScreen
00002FAC                            
00002FAC                            TitleSkip:
00002FAC 43F8 D000                  		lea	($FFFFD000).w,a1
00002FB0 7000                       		moveq	#0,d0
00002FB2 323C 07FF                  		move.w	#$7FF,d1
00002FB6                            
00002FB6                            Title_ClrObjRam:
00002FB6 22C0                       		move.l	d0,(a1)+
00002FB8 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002FBC                            
00002FBC 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002FC6 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002FCC 6100 E31A                  		bsr.w	NemDec
00002FD0 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002FDA 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002FE0 6100 E306                  		bsr.w	NemDec
00002FE4 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FEA 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002FF0 303C 0000                  		move.w	#0,d0
00002FF4 6100 E5DC                  		bsr.w	EniDec
00002FF8 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FFE 203C 4000 0003             		move.l	#$40000003,d0
00003004 7227                       		moveq	#$27,d1
00003006 741B                       		moveq	#$1B,d2
00003008 6100 E2B4                  		bsr.w	ShowVDPGraphics
0000300C                            
0000300C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003010 7000                       		moveq	#0,d0
00003012 323C 001F                  		move.w	#$1F,d1
00003016                            
00003016                            Title_ClrPallet:
00003016 22C0                       		move.l	d0,(a1)+
00003018 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
0000301C                            
0000301C 7014                       		moveq	#$14,d0		; load Sonic's pallet
0000301E 6100 F0C6                  		bsr.w	PalLoad1
00003022 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003028 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
0000302E 4EB9 0000 0000             		jsr	ObjectsLoad
00003034 4EB9 0000 0000             		jsr	BuildSprites
0000303A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003040 4A38 F601                  		tst.b	(FromSEGA).w
00003044 6700 0000                  		beq.w	@skip
00003048 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000304E                            
0000304E                            	@skip:
0000304E 6100 ED94                  		bsr.w	Pal_FadeTo2
00003052 46FC 2700                  		move	#$2700,sr
00003056 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003060 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003066 6100 E280                  		bsr.w	NemDec
0000306A 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003074 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000307A 6100 E26C                  		bsr.w	NemDec
0000307E 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003088 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000308E 6100 E258                  		bsr.w	NemDec
00003092 4DF9 00C0 0000             		lea	($C00000).l,a6
00003098 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000030A0 4BF9 0000 0550             		lea	(Art_Text).l,a5
000030A6 323C 028F                  		move.w	#$28F,d1
000030AA                            
000030AA                            Title_LoadText:
000030AA 3C9D                       		move.w	(a5)+,(a6)
000030AC 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000030B0                            
000030B0 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000030B6 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000030BC 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000030C2 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000030C8 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000030CE 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000030D4 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
000030DA 6100 0000                  		bsr.w	LevelSizeLoad
000030DE 6100 0000                  		bsr.w	DeformBgLayer
000030E2 43F8 B000                  		lea	($FFFFB000).w,a1
000030E6 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000030EC 303C 0000                  		move.w	#0,d0
000030F0 6100 E4E0                  		bsr.w	EniDec
000030F4 6100 0000                  		bsr.w	LevelLayoutLoad
000030F8 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000030FE 4A38 F601                  		tst.b	(FromSEGA).w
00003102 6700                       		beq.s	@notSEGA
00003104 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000310A                            
0000310A                            	@notSEGA:
0000310A 6100 ED5A                  		bsr.w	Pal_FadeFrom2
0000310E 46FC 2700                  		move	#$2700,sr
00003112 6100 DFBC                  		bsr.w	ClearScreen
00003116 4BF9 00C0 0004             		lea	($C00004).l,a5
0000311C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003122 47F8 F708                  		lea	($FFFFF708).w,a3
00003126 49F8 A440                  		lea	($FFFFA440).w,a4
0000312A 343C 6000                  		move.w	#$6000,d2
0000312E 6100 0000                  		bsr.w	LoadTilesFromStart2
00003132 43F9 00FF 0000             		lea	($FF0000).l,a1
00003138 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000313E 303C 0000                  		move.w	#0,d0
00003142 6100 E48E                  		bsr.w	EniDec
00003146 43F9 00FF 0000             		lea	($FF0000).l,a1
0000314C 203C 4206 0003             		move.l	#$42060003,d0
00003152 7221                       		moveq	#$21,d1
00003154 7415                       		moveq	#$15,d2
00003156 6100 E166                  		bsr.w	ShowVDPGraphics
0000315A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003164 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000316A 6100 E17C                  		bsr.w	NemDec
0000316E 7001                       		moveq	#1,d0		; load title screen pallet
00003170 6100 EF74                  		bsr.w	PalLoad1
00003174 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003178 6100 E07C                  		bsr.w	PlaySound_Special
0000317C 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003182                            		;move.b	#1,($FFFFFFE1).w ; enable slow-mo mode
00003182 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003188 43F8 D080                  		lea	($FFFFD080).w,a1
0000318C 7000                       		moveq	#0,d0
0000318E 323C 0007                  		move.w	#7,d1
00003192                            
00003192                            Title_ClrObjRam2:
00003192 22C0                       		move.l	d0,(a1)+
00003194 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003198                            
00003198 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000319E 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000031A4 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000031AA 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000031B0 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000031B6 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000031BC 4EB9 0000 0000             		jsr	ObjectsLoad
000031C2 6100 0000                  		bsr.w	DeformBgLayer
000031C6 4EB9 0000 0000             		jsr	BuildSprites
000031CC 7000                       		moveq	#0,d0
000031CE 6100 E296                  		bsr.w	LoadPLC2
000031D2 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000031D8 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000031DE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031E2 0000 0040                  		ori.b	#$40,d0
000031E6 33C0 00C0 0004             		move.w	d0,($C00004).l
000031EC 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000031F2 4A38 F601                  		tst.b	(FromSEGA).w
000031F6 6700                       		beq.s	@notSEGA
000031F8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000031FE 11FC 0000 F5C4             		move.b	#0,(SonimeSST+sonime_routine).w
00003204 11FC 0000 F601             		move.b	#0,(FromSEGA).w
0000320A                            
0000320A                            	@notSEGA:
0000320A 6100 EBD8                  		bsr.w	Pal_FadeTo2
0000320E                            
0000320E                            loc_317C:
0000320E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003214 6100 F784                  		bsr.w	DelayProgram
00003218 4EB9 0000 0000             		jsr	ObjectsLoad
0000321E 6100 0000                  		bsr.w	DeformBgLayer
00003222 4EB9 0000 0000             		jsr	BuildSprites
00003228 6100 E764                  		bsr.w	PalCycle_Title
0000322C 6100 E272                  		bsr.w	RunPLC_RAM
00003230 3038 D008                  		move.w	($FFFFD008).w,d0
00003234 5440                       		addq.w	#2,d0
00003236 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
0000323A 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000323E 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003240 6000 FD1C                  		bra.w	TitleScreen
00003244                            ; ===========================================================================
00003244                            
00003244                            Title_ChkRegion:
00003244 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003248 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000324A 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003250 6000                       		bra.s	Title_EnterCheat
00003252                            ; ===========================================================================
00003252                            
00003252                            Title_RegionJ:				; XREF: Title_ChkRegion
00003252 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003258                            
00003258                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003258 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
0000325C D0C0                       		adda.w	d0,a0
0000325E 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003262 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003266 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003268 6600                       		bne.s	loc_3210	; if not, branch
0000326A 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
0000326E 4A00                       		tst.b	d0
00003270 6600                       		bne.s	Title_CountC
00003272 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003276 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
0000327A E249                       		lsr.w	#1,d1
0000327C 0241 0003                  		andi.w	#3,d1
00003280 6700                       		beq.s	Title_PlayRing
00003282 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003286 6A00                       		bpl.s	Title_PlayRing
00003288 7201                       		moveq	#1,d1
0000328A 1181 1001                  		move.b	d1,1(a0,d1.w)
0000328E                            
0000328E                            Title_PlayRing:
0000328E 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003294 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003298 6100 DF5C                  		bsr.w	PlaySound_Special
0000329C 6000                       		bra.s	Title_CountC
0000329E                            ; ===========================================================================
0000329E                            
0000329E                            loc_3210:				; XREF: Title_EnterCheat
0000329E 4A00                       		tst.b	d0
000032A0 6700                       		beq.s	Title_CountC
000032A2 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000032A8 6700                       		beq.s	Title_CountC
000032AA 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000032B0                            
000032B0                            Title_CountC:
000032B0 1038 F605                  		move.b	($FFFFF605).w,d0
000032B4 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000032B8 6700                       		beq.s	loc_3230	; if not, branch
000032BA 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000032BE                            
000032BE                            loc_3230:
000032BE 4A78 F614                  		tst.w	($FFFFF614).w
000032C2 6700 0000                  		beq.w	Demo
000032C6 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000032CC 6700 FF40                  		beq.w	loc_317C	; if not, branch
000032D0                            
000032D0                            Title_ChkLevSel:
000032D0 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000032D4 6700 0000                  		beq.w	PlayLevel	; if not, play level
000032D8 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000032DE 6700 0000                  		beq.w	PlayLevel	; if not, play level
000032E2 7002                       		moveq	#2,d0
000032E4 6100 EE1C                  		bsr.w	PalLoad2	; load level select pallet
000032E8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000032EC 7000                       		moveq	#0,d0
000032EE 323C 00DF                  		move.w	#$DF,d1
000032F2                            
000032F2                            Title_ClrScroll:
000032F2 22C0                       		move.l	d0,(a1)+
000032F4 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000032F8                            
000032F8 21C0 F616                  		move.l	d0,($FFFFF616).w
000032FC 46FC 2700                  		move	#$2700,sr
00003300 4DF9 00C0 0000             		lea	($C00000).l,a6
00003306 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003310 323C 03FF                  		move.w	#$3FF,d1
00003314                            
00003314                            Title_ClrVram:
00003314 2C80                       		move.l	d0,(a6)
00003316 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000331A                            
0000331A 6100 0000                  		bsr.w	LevSelTextLoad
0000331E                            
0000331E                            ; ---------------------------------------------------------------------------
0000331E                            ; Level	Select
0000331E                            ; ---------------------------------------------------------------------------
0000331E                            
0000331E                            LevelSelect:
0000331E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003324 6100 F674                  		bsr.w	DelayProgram
00003328 4EB9 0000 0000             		jsr		BuildSprites
0000332E 6100 0000                  		bsr.w	LevSelControls
00003332 6100 E16C                  		bsr.w	RunPLC_RAM
00003336 4AB8 F680                  		tst.l	($FFFFF680).w
0000333A 66E2                       		bne.s	LevelSelect
0000333C 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003342 67DA                       		beq.s	LevelSelect	; if not, branch
00003344 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003348 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
0000334C 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000334E 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003352 0640 0080                  		addi.w	#$80,d0
00003356 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
0000335A 6700                       		beq.s	LevSel_NoCheat	; if not, branch
0000335C 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00003360 6700                       		beq.s	LevSel_Ending	; if yes, branch
00003362 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00003366 6700                       		beq.s	LevSel_Credits	; if yes, branch
00003368                            
00003368                            LevSel_NoCheat:
00003368 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
0000336C 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
0000336E 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00003372 65AA                       		bcs.s	LevelSelect	; if yes, branch
00003374                            
00003374                            LevSel_PlaySnd:
00003374 6100 DE80                  		bsr.w	PlaySound_Special
00003378 60A4                       		bra.s	LevelSelect
0000337A                            ; ===========================================================================
0000337A                            
0000337A                            LevSel_Ending:				; XREF: LevelSelect
0000337A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003380 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003386                            	;	move.b	#0,($FFFFFE57).w ; clear emeralds
00003386 4E75                       		rts	
00003388                            ; ===========================================================================
00003388                            
00003388                            LevSel_Credits:				; XREF: LevelSelect
00003388 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
0000338E 103C 0091                  		move.b	#$91,d0
00003392 6100 DE62                  		bsr.w	PlaySound_Special ; play credits music
00003396 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000339C 4E75                       		rts	
0000339E                            ; ===========================================================================
0000339E                            
0000339E                            LevSel_Level_SS:			; XREF: LevelSelect
0000339E D040                       		add.w	d0,d0
000033A0 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000033A4 6B00 FF78                  		bmi.w	LevelSelect
000033A8 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000033AC 6600                       		bne.s	LevSel_Level	; if not, branch
000033AE 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000033B4 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000033B8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000033BE 7000                       		moveq	#0,d0
000033C0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000033C4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000033C8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000033CC 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000033D0                            	;	move.l	#$00010203,($FFFFFE58).w ; clear emeralds
000033D0                            	;	move.l	#$04050000,($FFFFFE5C).w ; clear emeralds
000033D0 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)	
000033D8 4E75                       		rts	
000033DA                            ; ===========================================================================
000033DA                            ; ---------------------------------------------------------------------------
000033DA                            ; Level	select - level pointers
000033DA                            ; ---------------------------------------------------------------------------
000033DA                            LSelectPointers:
000033DA                            		incbin	misc\ls_point.bin
00003404                            		even
00003404                            
00003404                            LevSel_Level:				; XREF: LevSel_Level_SS
00003404 0240 3FFF                  		andi.w	#$3FFF,d0
00003408 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000340C                            
0000340C                            PlayLevel:				; XREF: ROM:00003246j ...
0000340C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003412 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003418 7000                       		moveq	#0,d0
0000341A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000341E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003422 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003426 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000342A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000342E                            	;	move.l	#$01020304,($FFFFFE58).w ; clear emeralds
0000342E                            	;	move.l	#$05000000,($FFFFFE5C).w ; clear emeralds
0000342E 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003432 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
0000343A 103C 00E0                  		move.b	#$E0,d0
0000343E 6100 DDB6                  		bsr.w	PlaySound_Special ; fade out music
00003442 4E75                       		rts	
00003444                            ; ===========================================================================
00003444                            ; ---------------------------------------------------------------------------
00003444                            ; Level	select codes
00003444                            ; ---------------------------------------------------------------------------
00003444                            LevelSelectCode_J:
00003444                            		incbin	misc\ls_jcode.bin
0000344A                            		even
0000344A                            
0000344A                            LevelSelectCode_US:
0000344A                            		incbin	misc\ls_ucode.bin
00003450                            		even
00003450                            ; ===========================================================================
00003450                            
00003450                            ; ---------------------------------------------------------------------------
00003450                            ; Demo mode
00003450                            ; ---------------------------------------------------------------------------
00003450                            
00003450                            Demo:					; XREF: TitleScreen
00003450 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003456                            
00003456                            loc_33B6:				; XREF: loc_33E4
00003456 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000345C 6100 F53C                  		bsr.w	DelayProgram
00003460 6100 0000                  		bsr.w	DeformBgLayer
00003464 6100 E508                  		bsr.w	PalCycle_Load
00003468 6100 E036                  		bsr.w	RunPLC_RAM
0000346C 3038 D008                  		move.w	($FFFFD008).w,d0
00003470 5440                       		addq.w	#2,d0
00003472 31C0 D008                  		move.w	d0,($FFFFD008).w
00003476 0C40 1C00                  		cmpi.w	#$1C00,d0
0000347A 6500                       		bcs.s	loc_33E4
0000347C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 0
00003482 4E75                       		rts	
00003484                            ; ===========================================================================
00003484                            
00003484                            loc_33E4:				; XREF: Demo
00003484 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000348A 6600 FE44                  		bne.w	Title_ChkLevSel	; if yes, branch
0000348E 4A78 F614                  		tst.w	($FFFFF614).w
00003492 6600 FFC2                  		bne.w	loc_33B6
00003496 103C 00E0                  		move.b	#$E0,d0
0000349A 6100 DD5A                  		bsr.w	PlaySound_Special ; fade out music
0000349E 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000034A2 0240 0007                  		andi.w	#7,d0
000034A6 D040                       		add.w	d0,d0
000034A8 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000034AC 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000034B0 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000034B4 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000034BA 6500                       		bcs.s	loc_3422	; if yes, branch
000034BC 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000034C2                            
000034C2                            loc_3422:
000034C2 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000034C8 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000034CE 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000034D2 6600                       		bne.s	Demo_Level	; if not, branch
000034D4 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000034DA 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000034DE 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000034E2                            
000034E2                            Demo_Level:
000034E2 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000034E8 7000                       		moveq	#0,d0
000034EA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000034EE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000034F2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000034F6 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)		
000034FE 4E75                       		rts	
00003500                            ; ===========================================================================
00003500                            ; ---------------------------------------------------------------------------
00003500                            ; Levels used in demos
00003500                            ; ---------------------------------------------------------------------------
00003500                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003508                            		even
00003508                            
00003508                            ; ---------------------------------------------------------------------------
00003508                            ; Subroutine to	change what you're selecting in the level select
00003508                            ; ---------------------------------------------------------------------------
00003508                            
00003508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003508                            
00003508                            
00003508                            LevSelControls:				; XREF: LevelSelect
00003508 1238 F605                  		move.b	($FFFFF605).w,d1
0000350C 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003510 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003512 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003516 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003518                            
00003518                            LevSel_UpDown:
00003518 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000351E 1238 F604                  		move.b	($FFFFF604).w,d1
00003522 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003526 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003528 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000352C 0801 0000                  		btst	#0,d1		; is up	pressed?
00003530 6700                       		beq.s	LevSel_Down	; if not, branch
00003532 5340                       		subq.w	#1,d0		; move up 1 selection
00003534 6400                       		bcc.s	LevSel_Down
00003536 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003538                            
00003538                            LevSel_Down:
00003538 0801 0001                  		btst	#1,d1		; is down pressed?
0000353C 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000353E 5240                       		addq.w	#1,d0		; move down 1 selection
00003540 0C40 0015                  		cmpi.w	#$15,d0
00003544 6500                       		bcs.s	LevSel_Refresh
00003546 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003548                            
00003548                            LevSel_Refresh:
00003548 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
0000354C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003550 4E75                       		rts	
00003552                            ; ===========================================================================
00003552                            
00003552                            LevSel_SndTest:				; XREF: LevSelControls
00003552 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003558 6600                       		bne.s	LevSel_NoMove	; if not, branch
0000355A 1238 F605                  		move.b	($FFFFF605).w,d1
0000355E 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003562 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003564 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003568 0801 0002                  		btst	#2,d1		; is left pressed?
0000356C 6700                       		beq.s	LevSel_Right	; if not, branch
0000356E 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003570 6400                       		bcc.s	LevSel_Right
00003572 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003574                            
00003574                            LevSel_Right:
00003574 0801 0003                  		btst	#3,d1		; is right pressed?
00003578 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000357A 5240                       		addq.w	#1,d0		; add 1	to sound test
0000357C 0C40 0050                  		cmpi.w	#$50,d0
00003580 6500                       		bcs.s	LevSel_Refresh2
00003582 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003584                            
00003584                            LevSel_Refresh2:
00003584 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003588 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000358C                            
0000358C                            LevSel_NoMove:
0000358C 4E75                       		rts	
0000358E                            ; End of function LevSelControls
0000358E                            
0000358E                            ; ---------------------------------------------------------------------------
0000358E                            ; Subroutine to load level select text
0000358E                            ; ---------------------------------------------------------------------------
0000358E                            
0000358E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000358E                            
0000358E                            
0000358E                            LevSelTextLoad:				; XREF: TitleScreen
0000358E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003594 4DF9 00C0 0000             		lea	($C00000).l,a6
0000359A 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000035A0 363C E680                  		move.w	#$E680,d3	; VRAM setting
000035A4 7214                       		moveq	#$14,d1		; number of lines of text
000035A6                            
000035A6                            loc_34FE:				; XREF: LevSelTextLoad+26j
000035A6 2D44 0004                  		move.l	d4,4(a6)
000035AA 6100 0000                  		bsr.w	LevSel_ChgLine
000035AE 0684 0080 0000             		addi.l	#$800000,d4
000035B4 51C9 FFF0                  		dbf	d1,loc_34FE
000035B8 7000                       		moveq	#0,d0
000035BA 3038 FF82                  		move.w	($FFFFFF82).w,d0
000035BE 3200                       		move.w	d0,d1
000035C0 283C 6210 0003             		move.l	#$62100003,d4
000035C6 EF48                       		lsl.w	#7,d0
000035C8 4840                       		swap	d0
000035CA D880                       		add.l	d0,d4
000035CC 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000035D2 E749                       		lsl.w	#3,d1
000035D4 3001                       		move.w	d1,d0
000035D6 D241                       		add.w	d1,d1
000035D8 D240                       		add.w	d0,d1
000035DA D2C1                       		adda.w	d1,a1
000035DC 363C C680                  		move.w	#$C680,d3
000035E0 2D44 0004                  		move.l	d4,4(a6)
000035E4 6100 0000                  		bsr.w	LevSel_ChgLine
000035E8 363C E680                  		move.w	#$E680,d3
000035EC 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000035F2 6600                       		bne.s	loc_3550
000035F4 363C C680                  		move.w	#$C680,d3
000035F8                            
000035F8                            loc_3550:
000035F8 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003602 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003606 0640 0080                  		addi.w	#$80,d0
0000360A                            
0000360A                            DRAWNUMBER:
0000360A 1400                       		move.b	d0,d2
0000360C E808                       		lsr.b	#4,d0
0000360E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003612 1002                       		move.b	d2,d0
00003614 6100 0000                  		bsr.w	LevSel_ChgSnd
00003618 4E75                       		rts	
0000361A                            ; End of function LevSelTextLoad
0000361A                            
0000361A                            
0000361A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000361A                            
0000361A                            
0000361A                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000361A 0240 000F                  		andi.w	#$F,d0
0000361E 0C00 000A                  		cmpi.b	#$A,d0
00003622 6500                       		bcs.s	loc_3580
00003624 5E00                       		addi.b	#7,d0
00003626                            
00003626                            loc_3580:
00003626 D043                       		add.w	d3,d0
00003628 3C80                       		move.w	d0,(a6)
0000362A 4E75                       		rts	
0000362C                            ; End of function LevSel_ChgSnd
0000362C                            
0000362C                            
0000362C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000362C                            
0000362C                            
0000362C                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000362C 7417                       		moveq	#$17,d2		; number of characters per line
0000362E                            
0000362E                            loc_3588:
0000362E 7000                       		moveq	#0,d0
00003630 1019                       		move.b	(a1)+,d0
00003632 6A00                       		bpl.s	loc_3598
00003634 3CBC 0000                  		move.w	#0,(a6)
00003638 51CA FFF4                  		dbf	d2,loc_3588
0000363C 4E75                       		rts	
0000363E                            ; ===========================================================================
0000363E                            
0000363E                            loc_3598:				; XREF: LevSel_ChgLine
0000363E D043                       		add.w	d3,d0
00003640 3C80                       		move.w	d0,(a6)
00003642 51CA FFEA                  		dbf	d2,loc_3588
00003646 4E75                       		rts	
00003648                            ; End of function LevSel_ChgLine
00003648                            
00003648                            ; ===========================================================================
00003648                            ; ---------------------------------------------------------------------------
00003648                            ; Level	select menu text
00003648                            ; ---------------------------------------------------------------------------
00003648                            LevelMenuText:	incbin	misc\menutext.bin
00003840                            		even
00003840                            ; ---------------------------------------------------------------------------
00003840                            ; Music	playlist
00003840                            ; ---------------------------------------------------------------------------
00003840                            MusicList:	incbin	misc\muslist1.bin
00003848                            		even
00003848                            ; ===========================================================================
00003848                            
00003848                            ; ---------------------------------------------------------------------------
00003848                            ; Level
00003848                            ; ---------------------------------------------------------------------------
00003848                            
00003848                            Level:					; XREF: GameModeArray
00003848 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
0000384E 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00003854 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003858 6B00                       		bmi.s	loc_37B6
0000385A 103C 00E0                  		move.b	#$E0,d0
0000385E 6100 D996                  		bsr.w	PlaySound_Special ; fade out music
00003862                            
00003862                            loc_37B6:
00003862 6100 DC2E                  		bsr.w	ClearPLC
00003866 6100 E5F8                  		bsr.w	Pal_FadeFrom
0000386A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000386E 6B00                       		bmi.s	Level_ClrRam
00003870 46FC 2700                  		move	#$2700,sr
00003874 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
0000387E 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00003884 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
0000388A 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
0000388E 46FC 2300                  		move	#$2300,sr
00003892 7000                       		moveq	#0,d0
00003894 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003898 E948                       		lsl.w	#4,d0
0000389A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000038A0 45F2 0000                  		lea	(a2,d0.w),a2
000038A4 7000                       		moveq	#0,d0
000038A6 1012                       		move.b	(a2),d0
000038A8 6700                       		beq.s	loc_37FC
000038AA 6100 DB88                  		bsr.w	LoadPLC		; load level patterns
000038AE                            
000038AE                            loc_37FC:
000038AE 7001                       		moveq	#1,d0
000038B0 6100 DB82                  		bsr.w	LoadPLC		; load standard	patterns
000038B4                            
000038B4                            Level_ClrRam:
000038B4 43F8 D000                  		lea	($FFFFD000).w,a1
000038B8 7000                       		moveq	#0,d0
000038BA 323C 07FF                  		move.w	#$7FF,d1
000038BE                            
000038BE                            Level_ClrObjRam:
000038BE 22C0                       		move.l	d0,(a1)+
000038C0 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000038C4                            
000038C4 43F8 F628                  		lea	($FFFFF628).w,a1
000038C8 7000                       		moveq	#0,d0
000038CA 323C 0015                  		move.w	#$15,d1
000038CE                            
000038CE                            Level_ClrVars:
000038CE 22C0                       		move.l	d0,(a1)+
000038D0 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
000038D4                            
000038D4 43F8 F700                  		lea	($FFFFF700).w,a1
000038D8 7000                       		moveq	#0,d0
000038DA 323C 003F                  		move.w	#$3F,d1
000038DE                            
000038DE                            Level_ClrVars2:
000038DE 22C0                       		move.l	d0,(a1)+
000038E0 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000038E4                            
000038E4 43F8 FE60                  		lea	($FFFFFE60).w,a1
000038E8 7000                       		moveq	#0,d0
000038EA 323C 0047                  		move.w	#$47,d1
000038EE                            
000038EE                            Level_ClrVars3:
000038EE 22C0                       		move.l	d0,(a1)+
000038F0 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000038F4 46FC 2700                  		move	#$2700,sr
000038F8 6100 D7D6                  		bsr.w	ClearScreen
000038FC 4DF9 00C0 0004             		lea	($C00004).l,a6
00003902 3CBC 8B03                  		move.w	#$8B03,(a6)
00003906 3CBC 8230                  		move.w	#$8230,(a6)
0000390A 3CBC 8407                  		move.w	#$8407,(a6)
0000390E 3CBC 857C                  		move.w	#$857C,(a6)
00003912 3CBC 9001                  		move.w	#$9001,(a6)
00003916 3CBC 8004                  		move.w	#$8004,(a6)
0000391A 3CBC 8720                  		move.w	#$8720,(a6)
0000391E 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003924 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003928 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000392E 6600                       		bne.s	Level_LoadPal	; if not, branch
00003930 3CBC 8014                  		move.w	#$8014,(a6)
00003934 7000                       		moveq	#0,d0
00003936 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000393A D040                       		add.w	d0,d0
0000393C 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003942 3031 0000                  		move.w	(a1,d0.w),d0
00003946 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000394A 31C0 F648                  		move.w	d0,($FFFFF648).w
0000394E 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003952 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003956 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000395A 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003960                            
00003960                            Level_LoadPal:
00003960 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003966 46FC 2300                  		move	#$2300,sr
0000396A 7003                       		moveq	#3,d0
0000396C 6100 E794                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003970 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003976 6600                       		bne.s	Level_GetBgm	; if not, branch
00003978 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
0000397A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003980 6600                       		bne.s	Level_WaterPal	; if not, branch
00003982 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003984                            
00003984                            Level_WaterPal:
00003984 6100 E794                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003988 4A38 FE30                  		tst.b	($FFFFFE30).w
0000398C 6700                       		beq.s	Level_GetBgm
0000398E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003994                            
00003994                            Level_GetBgm:
00003994 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003998 6B00                       		bmi.s	loc_3946
0000399A 7000                       		moveq	#0,d0
0000399C 1038 FE10                  		move.b	($FFFFFE10).w,d0
000039A0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000039A6 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000039A8 7005                       		moveq	#5,d0		; move 5 to d0
000039AA                            
000039AA                            Level_BgmNotLZ4:
000039AA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000039B0 6600                       		bne.s	Level_PlayBgm	; if not, branch
000039B2 7006                       		moveq	#6,d0		; move 6 to d0
000039B4                            
000039B4                            Level_PlayBgm:
000039B4 43F9 0000 3840             		lea	(MusicList).l,a1 ; load	music playlist
000039BA 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
000039BE 6100 D830                  		bsr.w	PlaySound	; play music
000039C2 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
000039C8                            
000039C8                            Level_TtlCard:
000039C8 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000039CE 6100 EFCA                  		bsr.w	DelayProgram
000039D2 4EB9 0000 0000             		jsr	ObjectsLoad
000039D8 4EB9 0000 0000             		jsr	BuildSprites
000039DE 6100 DAC0                  		bsr.w	RunPLC_RAM
000039E2 3038 D108                  		move.w	($FFFFD108).w,d0
000039E6 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000039EA 66DC                       		bne.s	Level_TtlCard	; if not, branch
000039EC 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000039F0 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000039F2 4EB9 0000 0000             		jsr	Hud_Base
000039F8                            
000039F8                            loc_3946:
000039F8 7003                       		moveq	#3,d0
000039FA 6100 E6EA                  		bsr.w	PalLoad1	; load Sonic's pallet line
000039FE 6100 0000                  		bsr.w	LevelSizeLoad
00003A02 6100 0000                  		bsr.w	DeformBgLayer
00003A06 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003A0C 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
00003A10 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003A14 6100 0000                  		bsr.w	LoadTilesFromStart
00003A18 4EB9 0000 0000             		jsr	FloorLog_Unk
00003A1E 6100 0000                  		bsr.w	ColIndexLoad
00003A22 6100 0000                  		bsr.w	LZWaterEffects
00003A26 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003A2C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A30 6B00                       		bmi.s	Level_ChkDebug
00003A32 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003A38 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
00003A3E                            		
00003A3E                            Level_ChkDebug:
00003A3E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003A42 6700                       		beq.s	Level_ChkWater	; if not, branch
00003A44 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003A4A 6700                       		beq.s	Level_ChkWater	; if not, branch
00003A4C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003A52                            
00003A52                            Level_ChkWater:
00003A52 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003A58 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003A5E 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00003A64 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003A6A 6600                       		bne.s	Level_LoadObj	; if not, branch
00003A6C 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003A72 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003A78 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003A7E 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003A84                            
00003A84                            Level_LoadObj:
00003A84 4EB9 0000 0000             		jsr	ObjPosLoad
00003A8A 11FC 0000 870C             		move.b	#0,(Rings_manager_routine).w
00003A90 4EB9 0000 0000             		jsr	RingsManager				
00003A96 4EB9 0000 0000             		jsr	ObjectsLoad
00003A9C 4EB9 0000 0000             		jsr	BuildSprites
00003AA2 7000                       		moveq	#0,d0
00003AA4 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003AA8 6600                       		bne.s	loc_39E8	; if yes, branch
00003AAA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003AAE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003AB2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003AB6                            
00003AB6                            loc_39E8:
00003AB6 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003ABA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003ABE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003AC2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003AC6 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00003ACA 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003ACE 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003AD2 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003AD6 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00003ADA 6100 0000                  		bsr.w	OscillateNumInit
00003ADE 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003AE4 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003AEA 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003AF0 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003AF6 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003AFC 7000                       		moveq	#0,d0
00003AFE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B02 E548                       		lsl.w	#2,d0
00003B04 2271 0000                  		movea.l	(a1,d0.w),a1
00003B08 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B0C 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003B0E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003B14 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003B18 5340                       		subq.w	#1,d0
00003B1A E548                       		lsl.w	#2,d0
00003B1C 2271 0000                  		movea.l	(a1,d0.w),a1
00003B20                            
00003B20                            Level_Demo:
00003B20 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003B26 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003B2A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003B30 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B34 6A00                       		bpl.s	Level_ChkWaterPal
00003B36 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003B3C 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003B42 6600                       		bne.s	Level_ChkWaterPal
00003B44 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003B4A                            
00003B4A                            Level_ChkWaterPal:
00003B4A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003B50 6600                       		bne.s	Level_Delay	; if not, branch
00003B52 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003B54 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003B5A 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003B5C 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003B5E                            
00003B5E                            Level_WaterPal2:
00003B5E 6100 E5D6                  		bsr.w	PalLoad4_Water
00003B62                            
00003B62                            Level_Delay:
00003B62 323C 0003                  		move.w	#3,d1
00003B66                            
00003B66                            Level_DelayLoop:
00003B66 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B6C 6100 EE2C                  		bsr.w	DelayProgram
00003B70 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003B74                            
00003B74 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003B7A 6100 E268                  		bsr.w	Pal_FadeTo2
00003B7E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B82 6B00                       		bmi.s	Level_ClrCardArt
00003B84 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003B88 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003B8C 5838 D124                  		addq.b	#4,($FFFFD124).w
00003B90 5838 D164                  		addq.b	#4,($FFFFD164).w
00003B94 6000                       		bra.s	Level_StartGame
00003B96                            ; ===========================================================================
00003B96                            
00003B96                            Level_ClrCardArt:
00003B96 7002                       		moveq	#2,d0
00003B98 4EB9 0000 1434             		jsr	(LoadPLC).l	; load explosion patterns
00003B9E 7000                       		moveq	#0,d0
00003BA0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003BA4 0640 0015                  		addi.w	#$15,d0
00003BA8 4EB9 0000 1434             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003BAE                            
00003BAE                            Level_StartGame:
00003BAE 11FC 0001 870D             		move.b	#1,(Level_started_flag).w
00003BB4 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003BBA                            
00003BBA                            ; ---------------------------------------------------------------------------
00003BBA                            ; Main level loop (when	all title card and loading sequences are finished)
00003BBA                            ; ---------------------------------------------------------------------------
00003BBA                            
00003BBA                            Level_MainLoop:
00003BBA 6100 D646                  		bsr.w	PauseGame
00003BBE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003BC4 6100 EDD4                  		bsr.w	DelayProgram
00003BC8 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003BCC 6100 0000                  		bsr.w	MoveSonicInDemo
00003BD0 6100 0000                  		bsr.w	LZWaterEffects
00003BD4 4EB9 0000 0000             		jsr	ObjectsLoad
00003BDA 4A78 FE08                  		tst.w	($FFFFFE08).w
00003BDE 6600                       		bne.s	loc_3B10
00003BE0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003BE6 6400                       		bcc.s	loc_3B14
00003BE8                            
00003BE8                            loc_3B10:
00003BE8 6100 0000                  		bsr.w	DeformBgLayer
00003BEC                            
00003BEC                            loc_3B14:
00003BEC 4EB9 0000 0000             		jsr	BuildSprites
00003BF2 4EB9 0000 0000             		jsr	ObjPosLoad
00003BF8 4EB9 0000 0000             		jsr	RingsManager
00003BFE 6100 DD6E                  		bsr.w	PalCycle_Load
00003C02 6100 D89C                  		bsr.w	RunPLC_RAM
00003C06 6100 0000                  		bsr.w	OscillateNumDo
00003C0A 6100 0000                  		bsr.w	ChangeRingFrame
00003C0E 6100 0000                  		bsr.w	SignpostArtLoad
00003C12 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C18 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003C1A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003C1E 6600 FC28                  		bne.w	Level		; if yes, branch
00003C22 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003C28 6700 FF90                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003C2C 4E75                       		rts	
00003C2E                            ; ===========================================================================
00003C2E                            
00003C2E                            Level_ChkDemo:				; XREF: Level_MainLoop
00003C2E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003C32 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003C34 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003C38 6700                       		beq.s	Level_EndDemo	; if not, branch
00003C3A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C40 6700 FF78                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003C44 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003C4A 4E75                       		rts	
00003C4C                            ; ===========================================================================
00003C4C                            
00003C4C                            Level_EndDemo:				; XREF: Level_ChkDemo
00003C4C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003C52 6600                       		bne.s	loc_3B88	; if not, branch
00003C54 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003C5A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003C5E 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003C60 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003C66                            
00003C66                            loc_3B88:
00003C66 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003C6C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003C72 4278 F794                  		clr.w	($FFFFF794).w
00003C76                            
00003C76                            loc_3B98:
00003C76 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003C7C 6100 ED1C                  		bsr.w	DelayProgram
00003C80 6100 0000                  		bsr.w	MoveSonicInDemo
00003C84 4EB9 0000 0000             		jsr	ObjectsLoad
00003C8A 4EB9 0000 0000             		jsr	BuildSprites
00003C90 4EB9 0000 0000             		jsr	ObjPosLoad
00003C96 5378 F794                  		subq.w	#1,($FFFFF794).w
00003C9A 6A00                       		bpl.s	loc_3BC8
00003C9C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003CA2 6100 E1DC                  		bsr.w	Pal_FadeOut
00003CA6                            
00003CA6                            loc_3BC8:
00003CA6 4A78 F614                  		tst.w	($FFFFF614).w
00003CAA 66CA                       		bne.s	loc_3B98
00003CAC 4E75                       		rts	
00003CAE                            ; ===========================================================================
00003CAE                            ; ---------------------------------------------------------------------------
00003CAE                            ; Subroutine to	do special water effects in Labyrinth Zone
00003CAE                            ; ---------------------------------------------------------------------------
00003CAE                            
00003CAE                            LZWaterEffects:				; XREF: Level
00003CAE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003CB4 6600                       		bne.s	locret_3C28	; if not, branch
00003CB6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003CBC 6400                       		bcc.s	LZMoveWater
00003CBE 6100 0000                  		bsr.w	LZWindTunnels
00003CC2 6100 0000                  		bsr.w	LZWaterSlides
00003CC6 6100 0000                  		bsr.w	LZDynamicWater
00003CCA                            
00003CCA                            LZMoveWater:
00003CCA 4238 F64E                  		clr.b	($FFFFF64E).w
00003CCE 7000                       		moveq	#0,d0
00003CD0 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003CD4 E248                       		lsr.w	#1,d0
00003CD6 D078 F648                  		add.w	($FFFFF648).w,d0
00003CDA 31C0 F646                  		move.w	d0,($FFFFF646).w
00003CDE 3038 F646                  		move.w	($FFFFF646).w,d0
00003CE2 9078 F704                  		sub.w	($FFFFF704).w,d0
00003CE6 6400                       		bcc.s	loc_3C1A
00003CE8 4A40                       		tst.w	d0
00003CEA 6A00                       		bpl.s	loc_3C1A
00003CEC 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003CF2 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003CF8                            
00003CF8                            loc_3C1A:
00003CF8 0C40 00DF                  		cmpi.w	#$DF,d0
00003CFC 6500                       		bcs.s	loc_3C24
00003CFE 303C 00DF                  		move.w	#$DF,d0
00003D02                            
00003D02                            loc_3C24:
00003D02 11C0 F625                  		move.b	d0,($FFFFF625).w
00003D06                            
00003D06                            locret_3C28:
00003D06 4E75                       		rts	
00003D08                            ; ===========================================================================
00003D08                            ; ---------------------------------------------------------------------------
00003D08                            ; Labyrinth default water heights
00003D08                            ; ---------------------------------------------------------------------------
00003D08                            WaterHeight:	incbin	misc\lz_heigh.bin
00003D10                            		even
00003D10                            ; ===========================================================================
00003D10                            
00003D10                            ; ---------------------------------------------------------------------------
00003D10                            ; Labyrinth dynamic water routines
00003D10                            ; ---------------------------------------------------------------------------
00003D10                            
00003D10                            LZDynamicWater:				; XREF: LZWaterEffects
00003D10 7000                       		moveq	#0,d0
00003D12 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D16 D040                       		add.w	d0,d0
00003D18 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003D1C 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003D20 7200                       		moveq	#0,d1
00003D22 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003D26 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003D2A 9078 F648                  		sub.w	($FFFFF648).w,d0
00003D2E 6700                       		beq.s	locret_3C5A
00003D30 6400                       		bcc.s	loc_3C56
00003D32 4441                       		neg.w	d1
00003D34                            
00003D34                            loc_3C56:
00003D34 D378 F648                  		add.w	d1,($FFFFF648).w
00003D38                            
00003D38                            locret_3C5A:
00003D38 4E75                       		rts	
00003D3A                            ; ===========================================================================
00003D3A 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003D3C 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003D3E 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003D40 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003D42                            ; ===========================================================================
00003D42                            
00003D42                            DynWater_LZ1:				; XREF: DynWater_Index
00003D42 3038 F700                  		move.w	($FFFFF700).w,d0
00003D46 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003D4A 6600                       		bne.s	loc_3CD0
00003D4C 323C 00B8                  		move.w	#$B8,d1
00003D50 0C40 0600                  		cmpi.w	#$600,d0
00003D54 6500                       		bcs.s	loc_3CB4
00003D56 323C 0108                  		move.w	#$108,d1
00003D5A 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003D60 6500                       		bcs.s	loc_3CBA
00003D62 0C40 0C00                  		cmpi.w	#$C00,d0
00003D66 6500                       		bcs.s	loc_3CB4
00003D68 323C 0318                  		move.w	#$318,d1
00003D6C 0C40 1080                  		cmpi.w	#$1080,d0
00003D70 6500                       		bcs.s	loc_3CB4
00003D72 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003D78 323C 05C8                  		move.w	#$5C8,d1
00003D7C 0C40 1380                  		cmpi.w	#$1380,d0
00003D80 6500                       		bcs.s	loc_3CB4
00003D82 323C 03A8                  		move.w	#$3A8,d1
00003D86 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003D8A 6600                       		bne.s	loc_3CB4
00003D8C 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003D92                            
00003D92                            loc_3CB4:
00003D92 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D96 4E75                       		rts	
00003D98                            ; ===========================================================================
00003D98                            
00003D98                            loc_3CBA:				; XREF: DynWater_LZ1
00003D98 0C40 0C80                  		cmpi.w	#$C80,d0
00003D9C 65F4                       		bcs.s	loc_3CB4
00003D9E 323C 00E8                  		move.w	#$E8,d1
00003DA2 0C40 1500                  		cmpi.w	#$1500,d0
00003DA6 65EA                       		bcs.s	loc_3CB4
00003DA8 323C 0108                  		move.w	#$108,d1
00003DAC 60E4                       		bra.s	loc_3CB4
00003DAE                            ; ===========================================================================
00003DAE                            
00003DAE                            loc_3CD0:				; XREF: DynWater_LZ1
00003DAE 5302                       		subq.b	#1,d2
00003DB0 6600                       		bne.s	locret_3CF4
00003DB2 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003DB8 6400                       		bcc.s	locret_3CF4
00003DBA 323C 03A8                  		move.w	#$3A8,d1
00003DBE 0C40 1300                  		cmpi.w	#$1300,d0
00003DC2 6500                       		bcs.s	loc_3CF0
00003DC4 323C 0108                  		move.w	#$108,d1
00003DC8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003DCE                            
00003DCE                            loc_3CF0:
00003DCE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DD2                            
00003DD2                            locret_3CF4:
00003DD2 4E75                       		rts	
00003DD4                            ; ===========================================================================
00003DD4                            
00003DD4                            DynWater_LZ2:				; XREF: DynWater_Index
00003DD4 3038 F700                  		move.w	($FFFFF700).w,d0
00003DD8 323C 0328                  		move.w	#$328,d1
00003DDC 0C40 0500                  		cmpi.w	#$500,d0
00003DE0 6500                       		bcs.s	loc_3D12
00003DE2 323C 03C8                  		move.w	#$3C8,d1
00003DE6 0C40 0B00                  		cmpi.w	#$B00,d0
00003DEA 6500                       		bcs.s	loc_3D12
00003DEC 323C 0428                  		move.w	#$428,d1
00003DF0                            
00003DF0                            loc_3D12:
00003DF0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DF4 4E75                       		rts	
00003DF6                            ; ===========================================================================
00003DF6                            
00003DF6                            DynWater_LZ3:				; XREF: DynWater_Index
00003DF6 3038 F700                  		move.w	($FFFFF700).w,d0
00003DFA 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003DFE 6600                       		bne.s	loc_3D5E
00003E00 323C 0900                  		move.w	#$900,d1
00003E04 0C40 0600                  		cmpi.w	#$600,d0
00003E08 6500                       		bcs.s	loc_3D54
00003E0A 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003E10 6500                       		bcs.s	loc_3D54
00003E12 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003E18 6400                       		bcc.s	loc_3D54
00003E1A 323C 04C8                  		move.w	#$4C8,d1
00003E1E 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003E24 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003E2A 303C 00B7                  		move.w	#$B7,d0
00003E2E 6100 D3C6                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003E32                            
00003E32                            loc_3D54:
00003E32 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E36 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E3A 4E75                       		rts	
00003E3C                            ; ===========================================================================
00003E3C                            
00003E3C                            loc_3D5E:				; XREF: DynWater_LZ3
00003E3C 5302                       		subq.b	#1,d2
00003E3E 6600                       		bne.s	loc_3DA8
00003E40 323C 04C8                  		move.w	#$4C8,d1
00003E44 0C40 0770                  		cmpi.w	#$770,d0
00003E48 6500                       		bcs.s	loc_3DA2
00003E4A 323C 0308                  		move.w	#$308,d1
00003E4E 0C40 1400                  		cmpi.w	#$1400,d0
00003E52 6500                       		bcs.s	loc_3DA2
00003E54 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003E5A 6700                       		beq.s	loc_3D8E
00003E5C 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003E62 6400                       		bcc.s	loc_3D8E
00003E64 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003E6A 6400                       		bcc.s	loc_3DA2
00003E6C                            
00003E6C                            loc_3D8E:
00003E6C 323C 0508                  		move.w	#$508,d1
00003E70 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E74 0C40 1770                  		cmpi.w	#$1770,d0
00003E78 6500                       		bcs.s	loc_3DA2
00003E7A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003E80                            
00003E80                            loc_3DA2:
00003E80 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E84 4E75                       		rts	
00003E86                            ; ===========================================================================
00003E86                            
00003E86                            loc_3DA8:
00003E86 5302                       		subq.b	#1,d2
00003E88 6600                       		bne.s	loc_3DD2
00003E8A 323C 0508                  		move.w	#$508,d1
00003E8E 0C40 1860                  		cmpi.w	#$1860,d0
00003E92 6500                       		bcs.s	loc_3DCC
00003E94 323C 0188                  		move.w	#$188,d1
00003E98 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003E9C 6400                       		bcc.s	loc_3DC6
00003E9E B278 F648                  		cmp.w	($FFFFF648).w,d1
00003EA2 6600                       		bne.s	loc_3DCC
00003EA4                            
00003EA4                            loc_3DC6:
00003EA4 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003EAA                            
00003EAA                            loc_3DCC:
00003EAA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003EAE 4E75                       		rts	
00003EB0                            ; ===========================================================================
00003EB0                            
00003EB0                            loc_3DD2:
00003EB0 5302                       		subq.b	#1,d2
00003EB2 6600                       		bne.s	loc_3E0E
00003EB4 323C 0188                  		move.w	#$188,d1
00003EB8 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003EBC 6500                       		bcs.s	loc_3E04
00003EBE 323C 0900                  		move.w	#$900,d1
00003EC2 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003EC6 6500                       		bcs.s	loc_3E04
00003EC8 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003ECE 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003ED4 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003EDA 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003EE0 4E75                       		rts	
00003EE2                            ; ===========================================================================
00003EE2                            
00003EE2                            loc_3E04:
00003EE2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003EE6 31C1 F648                  		move.w	d1,($FFFFF648).w
00003EEA 4E75                       		rts	
00003EEC                            ; ===========================================================================
00003EEC                            
00003EEC                            loc_3E0E:
00003EEC 0C40 1E00                  		cmpi.w	#$1E00,d0
00003EF0 6500                       		bcs.s	locret_3E1A
00003EF2 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003EF8                            
00003EF8                            locret_3E1A:
00003EF8 4E75                       		rts	
00003EFA                            ; ===========================================================================
00003EFA                            
00003EFA                            DynWater_SBZ3:				; XREF: DynWater_Index
00003EFA 323C 0228                  		move.w	#$228,d1
00003EFE 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003F04 6500                       		bcs.s	loc_3E2C
00003F06 323C 04C8                  		move.w	#$4C8,d1
00003F0A                            
00003F0A                            loc_3E2C:
00003F0A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F0E 4E75                       		rts
00003F10                            
00003F10                            ; ---------------------------------------------------------------------------
00003F10                            ; Labyrinth Zone "wind tunnels"	subroutine
00003F10                            ; ---------------------------------------------------------------------------
00003F10                            
00003F10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F10                            
00003F10                            
00003F10                            LZWindTunnels:				; XREF: LZWaterEffects
00003F10 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003F14 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003F18 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003F1E 7000                       		moveq	#0,d0
00003F20 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F24 E748                       		lsl.w	#3,d0
00003F26 D4C0                       		adda.w	d0,a2
00003F28 7200                       		moveq	#0,d1
00003F2A 4A38 FE11                  		tst.b	($FFFFFE11).w
00003F2E 6600                       		bne.s	loc_3E56
00003F30 7201                       		moveq	#1,d1
00003F32 514A                       		subq.w	#8,a2
00003F34                            
00003F34                            loc_3E56:
00003F34 43F8 D000                  		lea	($FFFFD000).w,a1
00003F38                            
00003F38                            LZWind_Loop:
00003F38 3029 0008                  		move.w	8(a1),d0
00003F3C B052                       		cmp.w	(a2),d0
00003F3E 6500 0000                  		bcs.w	loc_3EF4
00003F42 B06A 0004                  		cmp.w	4(a2),d0
00003F46 6400 0000                  		bcc.w	loc_3EF4
00003F4A 3429 000C                  		move.w	$C(a1),d2
00003F4E B46A 0002                  		cmp.w	2(a2),d2
00003F52 6500                       		bcs.s	loc_3EF4
00003F54 B46A 0006                  		cmp.w	6(a2),d2
00003F58 6400                       		bcc.s	loc_3EF4
00003F5A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003F5E 0200 003F                  		andi.b	#$3F,d0
00003F62 6600                       		bne.s	loc_3E90
00003F64 303C 00D0                  		move.w	#$D0,d0
00003F68 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003F6E                            
00003F6E                            loc_3E90:
00003F6E 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003F72 6600 0000                  		bne.w	locret_3F0A
00003F76 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003F7C 6400                       		bcc.s	loc_3F06
00003F7E 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003F84 0440 0080                  		subi.w	#$80,d0
00003F88 B052                       		cmp.w	(a2),d0
00003F8A 6400                       		bcc.s	LZWind_Move
00003F8C 7002                       		moveq	#2,d0
00003F8E 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003F94 6600                       		bne.s	loc_3EBA
00003F96 4440                       		neg.w	d0
00003F98                            
00003F98                            loc_3EBA:
00003F98 D169 000C                  		add.w	d0,$C(a1)
00003F9C                            
00003F9C                            LZWind_Move:
00003F9C 5869 0008                  		addq.w	#4,8(a1)
00003FA0 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003FA6 337C 0000 0012             		move.w	#0,$12(a1)
00003FAC 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003FB2 08E9 0001 0022             		bset	#1,$22(a1)
00003FB8 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003FBE 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003FC0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003FC4                            
00003FC4                            LZWind_MoveDown:
00003FC4 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003FCA 6700                       		beq.s	locret_3EF2	; if not, branch
00003FCC 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003FD0                            
00003FD0                            locret_3EF2:
00003FD0 4E75                       		rts	
00003FD2                            ; ===========================================================================
00003FD2                            
00003FD2                            loc_3EF4:				; XREF: LZWindTunnels
00003FD2 504A                       		addq.w	#8,a2
00003FD4 51C9 FF62                  		dbf	d1,LZWind_Loop
00003FD8 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003FDC 6700                       		beq.s	locret_3F0A
00003FDE 137C 0000 001C             		move.b	#0,$1C(a1)
00003FE4                            
00003FE4                            loc_3F06:
00003FE4 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003FE8                            
00003FE8                            locret_3F0A:
00003FE8 4E75                       		rts	
00003FEA                            ; End of function LZWindTunnels
00003FEA                            
00003FEA                            ; ===========================================================================
00003FEA 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003FF2 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004004 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004012                            					; XREF: LZWindTunnels
00004012                            		even
00004012                            
00004012                            ; ---------------------------------------------------------------------------
00004012                            ; Labyrinth Zone water slide subroutine
00004012                            ; ---------------------------------------------------------------------------
00004012                            
00004012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004012                            
00004012                            
00004012                            LZWaterSlides:				; XREF: LZWaterEffects
00004012 43F8 D000                  		lea	($FFFFD000).w,a1
00004016 0829 0001 0022             		btst	#1,$22(a1)
0000401C 6600                       		bne.s	loc_3F6A
0000401E 3029 000C                  		move.w	$C(a1),d0
00004022 E248                       		lsr.w	#1,d0
00004024 0240 0380                  		andi.w	#$380,d0
00004028 1229 0008                  		move.b	8(a1),d1
0000402C 0241 007F                  		andi.w	#$7F,d1
00004030 D041                       		add.w	d1,d0
00004032 45F8 A400                  		lea	($FFFFA400).w,a2
00004036 1032 0000                  		move.b	(a2,d0.w),d0
0000403A 45FA 0000                  		lea	byte_3FCF(pc),a2
0000403E 7206                       		moveq	#6,d1
00004040                            
00004040                            loc_3F62:
00004040 B022                       		cmp.b	-(a2),d0
00004042 57C9 FFFC                  		dbeq	d1,loc_3F62
00004046 6700                       		beq.s	LZSlide_Move
00004048                            
00004048                            loc_3F6A:
00004048 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0000404C 6700                       		beq.s	locret_3F7A
0000404E 337C 0005 003E             		move.w	#5,$3E(a1)
00004054 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004058                            
00004058                            locret_3F7A:
00004058 4E75                       		rts	
0000405A                            ; ===========================================================================
0000405A                            
0000405A                            LZSlide_Move:				; XREF: LZWaterSlides
0000405A 0C41 0003                  		cmpi.w	#3,d1
0000405E 6400                       		bcc.s	loc_3F84
00004060 4E71                       		nop	
00004062                            
00004062                            loc_3F84:
00004062 08A9 0000 0022             		bclr	#0,$22(a1)
00004068 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
0000406C 1340 0020                  		move.b	d0,$20(a1)
00004070 6A00                       		bpl.s	loc_3F9A
00004072 08E9 0000 0022             		bset	#0,$22(a1)
00004078                            
00004078                            loc_3F9A:
00004078 4229 0021                  		clr.b	$21(a1)
0000407C 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004082 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004088 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000408C 0200 001F                  		andi.b	#$1F,d0
00004090 6600                       		bne.s	locret_3FBE
00004092 303C 00D0                  		move.w	#$D0,d0
00004096 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play water sound
0000409C                            
0000409C                            locret_3FBE:
0000409C 4E75                       		rts	
0000409E                            ; End of function LZWaterSlides
0000409E                            
0000409E                            ; ===========================================================================
0000409E 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000040AD 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000040AE                            		even
000040AE                            
000040AE                            ; ---------------------------------------------------------------------------
000040AE                            ; Subroutine to	move Sonic in demo mode
000040AE                            ; ---------------------------------------------------------------------------
000040AE                            
000040AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040AE                            
000040AE                            
000040AE                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000040AE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040B2 6600                       		bne.s	MoveDemo_On	; if yes, branch
000040B4 4E75                       		rts	
000040B6                            ; ===========================================================================
000040B6                            
000040B6                            ; This is an unused subroutine for recording a demo
000040B6                            
000040B6                            MoveDemo_Record:
000040B6 43F9 0008 0000             		lea	($80000).l,a1
000040BC 3038 F790                  		move.w	($FFFFF790).w,d0
000040C0 D2C0                       		adda.w	d0,a1
000040C2 1038 F604                  		move.b	($FFFFF604).w,d0
000040C6 B011                       		cmp.b	(a1),d0
000040C8 6600                       		bne.s	loc_3FFA
000040CA 5229 0001                  		addq.b	#1,1(a1)
000040CE 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000040D4 6700                       		beq.s	loc_3FFA
000040D6 4E75                       		rts	
000040D8                            ; ===========================================================================
000040D8                            
000040D8                            loc_3FFA:				; XREF: MoveDemo_Record
000040D8 1340 0002                  		move.b	d0,2(a1)
000040DC 137C 0000 0003             		move.b	#0,3(a1)
000040E2 5478 F790                  		addq.w	#2,($FFFFF790).w
000040E6 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000040EC 4E75                       		rts	
000040EE                            ; ===========================================================================
000040EE                            
000040EE                            MoveDemo_On:				; XREF: MoveSonicInDemo
000040EE 4A38 F604                  		tst.b	($FFFFF604).w
000040F2 6A00                       		bpl.s	loc_4022
000040F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000040F8 6B00                       		bmi.s	loc_4022
000040FA 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004100                            
00004100                            loc_4022:
00004100 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004106 7000                       		moveq	#0,d0
00004108 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000410C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004112 6600                       		bne.s	loc_4038
00004114 7006                       		moveq	#6,d0
00004116                            
00004116                            loc_4038:
00004116 E548                       		lsl.w	#2,d0
00004118 2271 0000                  		movea.l	(a1,d0.w),a1
0000411C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004120 6A00                       		bpl.s	loc_4056
00004122 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004128 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000412C 5340                       		subq.w	#1,d0
0000412E E548                       		lsl.w	#2,d0
00004130 2271 0000                  		movea.l	(a1,d0.w),a1
00004134                            
00004134                            loc_4056:
00004134 3038 F790                  		move.w	($FFFFF790).w,d0
00004138 D2C0                       		adda.w	d0,a1
0000413A 1011                       		move.b	(a1),d0
0000413C 41F8 F604                  		lea	($FFFFF604).w,a0
00004140 1200                       		move.b	d0,d1
00004142 1428 FFFE                  		move.b	-2(a0),d2
00004146 B500                       		eor.b	d2,d0
00004148 10C1                       		move.b	d1,(a0)+
0000414A C001                       		and.b	d1,d0
0000414C 10C0                       		move.b	d0,(a0)+
0000414E 5338 F792                  		subq.b	#1,($FFFFF792).w
00004152 6400                       		bcc.s	locret_407E
00004154 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000415A 5478 F790                  		addq.w	#2,($FFFFF790).w
0000415E                            
0000415E                            locret_407E:
0000415E 4E75                       		rts	
00004160                            ; End of function MoveSonicInDemo
00004160                            
00004160                            ; ===========================================================================
00004160                            ; ---------------------------------------------------------------------------
00004160                            ; Demo sequence	pointers
00004160                            ; ---------------------------------------------------------------------------
00004160                            Demo_Index:
00004160                            	include "_inc\Demo pointers for intro.asm"
00004160                            ; ---------------------------------------------------------------------------
00004160                            ; Demo sequence	pointers
00004160                            ; ---------------------------------------------------------------------------
00004160 0000 0000                  	dc.l Demo_GHZ
00004164 0000 0000                  	dc.l Demo_GHZ
00004168 0000 0000                  	dc.l Demo_MZ
0000416C 0000 0000                  	dc.l Demo_MZ
00004170 0000 0000                  	dc.l Demo_SYZ
00004174 0000 0000                  	dc.l Demo_SYZ
00004178 0000 0000                  	dc.l Demo_SS
0000417C 0000 0000                  	dc.l Demo_SS
0000417C 0000 0000                  	dc.l Demo_SS
00004180                            
00004180                            Demo_EndIndex:
00004180                            	include "_inc\Demo pointers for ending.asm"
00004180                            ; ---------------------------------------------------------------------------
00004180                            ; Demo (ending) sequence pointers
00004180                            ; ---------------------------------------------------------------------------
00004180 0000 0000                  	dc.l Demo_EndGHZ1
00004184 0000 0000                  	dc.l Demo_EndMZ
00004188 0000 0000                  	dc.l Demo_EndSYZ
0000418C 0000 0000                  	dc.l Demo_EndLZ
00004190 0000 0000                  	dc.l Demo_EndSLZ
00004194 0000 0000                  	dc.l Demo_EndSBZ1
00004198 0000 0000                  	dc.l Demo_EndSBZ2
0000419C 0000 0000                  	dc.l Demo_EndGHZ2
0000419C 0000 0000                  	dc.l Demo_EndGHZ2
000041A0                            
000041A0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000041B0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000041C0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000041D0                            		even
000041D0                            
000041D0                            ; ---------------------------------------------------------------------------
000041D0                            ; Collision index loading subroutine
000041D0                            ; ---------------------------------------------------------------------------
000041D0                            
000041D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041D0                            
000041D0                            
000041D0                            ColIndexLoad:				; XREF: Level
000041D0 7000                       		moveq	#0,d0
000041D2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000041D6 E548                       		lsl.w	#2,d0
000041D8 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000041DE 4E75                       		rts	
000041E0                            ; End of function ColIndexLoad
000041E0                            
000041E0                            ; ===========================================================================
000041E0                            ; ---------------------------------------------------------------------------
000041E0                            ; Collision index pointers
000041E0                            ; ---------------------------------------------------------------------------
000041E0                            ColPointers:
000041E0                            	include "_inc\Collision index pointers.asm"
000041E0                            ; ---------------------------------------------------------------------------
000041E0                            ; Collision index pointers
000041E0                            ; ---------------------------------------------------------------------------
000041E0 0000 0000                  	dc.l Col_GHZ
000041E4 0000 0000                  	dc.l Col_LZ
000041E8 0000 0000                  	dc.l Col_MZ
000041EC 0000 0000                  	dc.l Col_SLZ
000041F0 0000 0000                  	dc.l Col_SYZ
000041F4 0000 0000                  	dc.l Col_SBZ
000041F4 0000 0000                  	dc.l Col_SBZ
000041F8                            
000041F8                            ; ---------------------------------------------------------------------------
000041F8                            ; Oscillating number subroutine
000041F8                            ; ---------------------------------------------------------------------------
000041F8                            
000041F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041F8                            
000041F8                            
000041F8                            OscillateNumInit:			; XREF: Level
000041F8 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000041FC 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004202 7220                       		moveq	#$20,d1
00004204                            
00004204                            Osc_Loop:
00004204 32DA                       		move.w	(a2)+,(a1)+
00004206 51C9 FFFC                  		dbf	d1,Osc_Loop
0000420A 4E75                       		rts	
0000420C                            ; End of function OscillateNumInit
0000420C                            
0000420C                            ; ===========================================================================
0000420C 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004210 0000 0080                  		dc.w 0,	$80
00004214 0000 0080                  		dc.w 0,	$80
00004218 0000 0080                  		dc.w 0,	$80
0000421C 0000 0080                  		dc.w 0,	$80
00004220 0000 0080                  		dc.w 0,	$80
00004224 0000 0080                  		dc.w 0,	$80
00004228 0000 0080                  		dc.w 0,	$80
0000422C 0000 0080                  		dc.w 0,	$80
00004230 0000 50F0                  		dc.w 0,	$50F0
00004234 011E 2080                  		dc.w $11E, $2080
00004238 00B4 3080                  		dc.w $B4, $3080
0000423C 010E 5080                  		dc.w $10E, $5080
00004240 01C2 7080                  		dc.w $1C2, $7080
00004244 0276 0080                  		dc.w $276, $80
00004248 0000 0080                  		dc.w 0,	$80
0000424C 0000                       		dc.w 0
0000424E                            		even
0000424E                            
0000424E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000424E                            
0000424E                            
0000424E                            OscillateNumDo:				; XREF: Level
0000424E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004254 6400                       		bcc.s	locret_41C4
00004256 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000425A 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004260 3619                       		move.w	(a1)+,d3
00004262 720F                       		moveq	#$F,d1
00004264                            
00004264                            loc_4184:
00004264 341A                       		move.w	(a2)+,d2
00004266 381A                       		move.w	(a2)+,d4
00004268 0303                       		btst	d1,d3
0000426A 6600                       		bne.s	loc_41A4
0000426C 3029 0002                  		move.w	2(a1),d0
00004270 D042                       		add.w	d2,d0
00004272 3340 0002                  		move.w	d0,2(a1)
00004276 D151                       		add.w	d0,0(a1)
00004278 B811                       		cmp.b	0(a1),d4
0000427A 6200                       		bhi.s	loc_41BA
0000427C 03C3                       		bset	d1,d3
0000427E 6000                       		bra.s	loc_41BA
00004280                            ; ===========================================================================
00004280                            
00004280                            loc_41A4:				; XREF: OscillateNumDo
00004280 3029 0002                  		move.w	2(a1),d0
00004284 9042                       		sub.w	d2,d0
00004286 3340 0002                  		move.w	d0,2(a1)
0000428A D151                       		add.w	d0,0(a1)
0000428C B811                       		cmp.b	0(a1),d4
0000428E 6300                       		bls.s	loc_41BA
00004290 0383                       		bclr	d1,d3
00004292                            
00004292                            loc_41BA:
00004292 5849                       		addq.w	#4,a1
00004294 51C9 FFCE                  		dbf	d1,loc_4184
00004298 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000429C                            
0000429C                            locret_41C4:
0000429C 4E75                       		rts	
0000429E                            ; End of function OscillateNumDo
0000429E                            
0000429E                            ; ===========================================================================
0000429E 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000042A2 0002 0018                  		dc.w 2,	$18
000042A6 0002 0020                  		dc.w 2,	$20
000042AA 0002 0030                  		dc.w 2,	$30
000042AE 0004 0020                  		dc.w 4,	$20
000042B2 0008 0008                  		dc.w 8,	8
000042B6 0008 0040                  		dc.w 8,	$40
000042BA 0004 0040                  		dc.w 4,	$40
000042BE 0002 0050                  		dc.w 2,	$50
000042C2 0002 0050                  		dc.w 2,	$50
000042C6 0002 0020                  		dc.w 2,	$20
000042CA 0003 0030                  		dc.w 3,	$30
000042CE 0005 0050                  		dc.w 5,	$50
000042D2 0007 0070                  		dc.w 7,	$70
000042D6 0002 0010                  		dc.w 2,	$10
000042DA 0002 0010                  		dc.w 2,	$10
000042DE                            		even
000042DE                            
000042DE                            ; ---------------------------------------------------------------------------
000042DE                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000042DE                            ; ---------------------------------------------------------------------------
000042DE                            
000042DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042DE                            
000042DE                            
000042DE                            ChangeRingFrame:			; XREF: Level
000042DE 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000042E2 6A00                       		bpl.s	loc_421C
000042E4 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000042EA 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000042EE 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000042F4                            
000042F4                            loc_421C:
000042F4 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000042F8 6A00                       		bpl.s	loc_4232
000042FA 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004300 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004304 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000430A                            
0000430A                            loc_4232:
0000430A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000430E 6A00                       		bpl.s	loc_4250
00004310 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004316 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000431A 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004320 6500                       		bcs.s	loc_4250
00004322 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004328                            
00004328                            loc_4250:
00004328 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000432C 6700                       		beq.s	locret_4272
0000432E 7000                       		moveq	#0,d0
00004330 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004334 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004338 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000433C EF58                       		rol.w	#7,d0
0000433E 0240 0003                  		andi.w	#3,d0
00004342 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004346 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000434A                            
0000434A                            locret_4272:
0000434A 4E75                       		rts	
0000434C                            ; End of function ChangeRingFrame
0000434C                            
0000434C                            ; ---------------------------------------------------------------------------
0000434C                            ; End-of-act signpost pattern loading subroutine
0000434C                            ; ---------------------------------------------------------------------------
0000434C                            
0000434C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000434C                            
0000434C                            
0000434C                            SignpostArtLoad:			; XREF: Level
0000434C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004350 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004354 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000435A 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000435C 3038 F700                  		move.w	($FFFFF700).w,d0
00004360 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004364 0441 0100                  		subi.w	#$100,d1
00004368 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000436A 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000436C 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004370 6700                       		beq.s	Signpost_Exit
00004372 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004376 6700                       		beq.s	Signpost_Exit
00004378 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000437C 7012                       		moveq	#$12,d0
0000437E 6000 D0E6                  		bra.w	LoadPLC2	; load signpost	patterns
00004382                            ; ===========================================================================
00004382                            
00004382                            Signpost_Exit:
00004382 4E75                       		rts	
00004384                            ; End of function SignpostArtLoad
00004384                            
00004384                            ; ===========================================================================
00004384                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004404                            Demo_MZ:	incbin	demodata\i_mz.bin
00004534                            Demo_SYZ:	incbin	demodata\i_syz.bin
000045B4                            Demo_SS:	incbin	demodata\i_ss.bin
000046B4                            ; ===========================================================================
000046B4                            
000046B4                            ; ---------------------------------------------------------------------------
000046B4                            ; Special Stage
000046B4                            ; ---------------------------------------------------------------------------
000046B4                            
000046B4                            SpecialStage:				; XREF: GameModeArray
000046B4 303C 00CA                  		move.w	#$CA,d0
000046B8 6100 CB3C                  		bsr.w	PlaySound_Special ; play special stage entry sound
000046BC 4EB9 0000 0000             		jsr	BuildSprites
000046C2 6100 D8A2                  		bsr.w	Pal_MakeFlash
000046C6 46FC 2700                  		move	#$2700,sr
000046CA 4DF9 00C0 0004             		lea	($C00004).l,a6
000046D0 3CBC 8B03                  		move.w	#$8B03,(a6)
000046D4 3CBC 8004                  		move.w	#$8004,(a6)
000046D8 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000046DE 3CBC 9011                  		move.w	#$9011,(a6)
000046E2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000046E6 0200 00BF                  		andi.b	#$BF,d0
000046EA 33C0 00C0 0004             		move.w	d0,($C00004).l
000046F0 6100 C9DE                  		bsr.w	ClearScreen
000046F4 46FC 2300                  		move	#$2300,sr
000046F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000046FE 3ABC 8F01                  		move.w	#$8F01,(a5)
00004702 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004708 3ABC 9780                  		move.w	#$9780,(a5)
0000470C 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004712 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000471A                            
0000471A                            loc_463C:
0000471A 3215                       		move.w	(a5),d1
0000471C 0801 0001                  		btst	#1,d1
00004720 66F8                       		bne.s	loc_463C
00004722 3ABC 8F02                  		move.w	#$8F02,(a5)
00004726 6100 0000                  		bsr.w	SS_BGLoad
0000472A 7014                       		moveq	#$14,d0
0000472C 6100 CE72                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004730                            
00004730 43F8 D000                  		lea	($FFFFD000).w,a1
00004734 7000                       		moveq	#0,d0
00004736 323C 07FF                  		move.w	#$7FF,d1
0000473A                            
0000473A                            SS_ClrObjRam:
0000473A 22C0                       		move.l	d0,(a1)+
0000473C 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004740                            
00004740 43F8 F700                  		lea	($FFFFF700).w,a1
00004744 7000                       		moveq	#0,d0
00004746 323C 003F                  		move.w	#$3F,d1
0000474A                            
0000474A                            SS_ClrRam:
0000474A 22C0                       		move.l	d0,(a1)+
0000474C 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004750                            
00004750 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004754 7000                       		moveq	#0,d0
00004756 323C 0027                  		move.w	#$27,d1
0000475A                            
0000475A                            SS_ClrRam2:
0000475A 22C0                       		move.l	d0,(a1)+
0000475C 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004760                            
00004760 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004764 7000                       		moveq	#0,d0
00004766 323C 007F                  		move.w	#$7F,d1
0000476A                            
0000476A                            SS_ClrNemRam:
0000476A 22C0                       		move.l	d0,(a1)+
0000476C 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004770 4238 F64E                  		clr.b	($FFFFF64E).w
00004774 4278 FE02                  		clr.w	($FFFFFE02).w
00004778 700A                       		moveq	#$A,d0
0000477A 6100 D96A                  		bsr.w	PalLoad1	; load special stage pallet
0000477E 4EB9 0000 0000             		jsr	SS_Load
00004784 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
0000478A 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004792 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
0000479A 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000047A0 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
000047A6 6100 0000                  		bsr.w	PalCycle_SS
000047AA 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000047AE 11FC 00FF FFF9             		move.b	#$FF,(v_ssangleprev).w	; fill previous angle with obviously false value to force an update
000047B4 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000047BA 303C 0089                  		move.w	#$89,d0
000047BE 6100 CA30                  		bsr.w	PlaySound	; play special stage BG	music
000047C2 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000047C8 43F9 0000 4160             		lea	(Demo_Index).l,a1
000047CE 7006                       		moveq	#6,d0
000047D0 E548                       		lsl.w	#2,d0
000047D2 2271 0000                  		movea.l	(a1,d0.w),a1
000047D6 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000047DC 5338 F792                  		subq.b	#1,($FFFFF792).w
000047E0 4278 FE20                  		clr.w	($FFFFFE20).w
000047E4 4238 FE1B                  		clr.b	($FFFFFE1B).w
000047E8 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000047EE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000047F4 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000047F8 6700                       		beq.s	SS_NoDebug	; if not, branch
000047FA 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004800 6700                       		beq.s	SS_NoDebug	; if not, branch
00004802 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004808                            
00004808                            SS_NoDebug:
00004808 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000480C 0000 0040                  		ori.b	#$40,d0
00004810 33C0 00C0 0004             		move.w	d0,($C00004).l
00004816 6100 D6C6                  		bsr.w	Pal_MakeWhite
0000481A                            
0000481A                            ; ---------------------------------------------------------------------------
0000481A                            ; Main Special Stage loop
0000481A                            ; ---------------------------------------------------------------------------
0000481A                            
0000481A                            SS_MainLoop:
0000481A 6100 C9E6                  		bsr.w	PauseGame
0000481E 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004824 6100 E174                  		bsr.w	DelayProgram
00004828 6100 F884                  		bsr.w	MoveSonicInDemo
0000482C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004832 4EB9 0000 0000             		jsr	ObjectsLoad
00004838 4EB9 0000 0000             		jsr	BuildSprites
0000483E 4EB9 0000 0000             		jsr	SS_ShowLayout
00004844 6100 0000                  		bsr.w	SS_BGAnimate
00004848 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000484C 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000484E 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004852 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004856                            
00004856                            SS_ChkEnd:
00004856 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000485C 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004860                            
00004860 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004864 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004868 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000486E 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004874 6500                       		bcs.s	SS_End		; if not, branch
00004876 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000487A                            
0000487A                            SS_End:
0000487A 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004880 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004886 4278 F794                  		clr.w	($FFFFF794).w
0000488A                            
0000488A                            SS_EndLoop:
0000488A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004890 6100 E108                  		bsr.w	DelayProgram
00004894 6100 F818                  		bsr.w	MoveSonicInDemo
00004898 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000489E 4EB9 0000 0000             		jsr	ObjectsLoad
000048A4 4EB9 0000 0000             		jsr	BuildSprites
000048AA 4EB9 0000 0000             		jsr	SS_ShowLayout
000048B0 6100 0000                  		bsr.w	SS_BGAnimate
000048B4 5378 F794                  		subq.w	#1,($FFFFF794).w
000048B8 6A00                       		bpl.s	loc_47D4
000048BA 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000048C0 6100 D6C4                  		bsr.w	Pal_ToWhite
000048C4                            
000048C4                            loc_47D4:
000048C4 4A78 F614                  		tst.w	($FFFFF614).w
000048C8 66C0                       		bne.s	SS_EndLoop
000048CA                            
000048CA 46FC 2700                  		move	#$2700,sr
000048CE 4DF9 00C0 0004             		lea	($C00004).l,a6
000048D4 3CBC 8230                  		move.w	#$8230,(a6)
000048D8 3CBC 8407                  		move.w	#$8407,(a6)
000048DC 3CBC 9001                  		move.w	#$9001,(a6)
000048E0 6100 C7EE                  		bsr.w	ClearScreen
000048E4 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
000048EE 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
000048F4 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
000048FA 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
000048FE 4EB9 0000 0000             		jsr	Hud_Base
00004904 46FC 2300                  		move	#$2300,sr
00004908 7011                       		moveq	#$11,d0
0000490A 6100 D7F6                  		bsr.w	PalLoad2	; load results screen pallet
0000490E 7000                       		moveq	#0,d0
00004910 6100 CB54                  		bsr.w	LoadPLC2
00004914 701B                       		moveq	#$1B,d0
00004916 6100 CB1C                  		bsr.w	LoadPLC		; load results screen patterns
0000491A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004920 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004926 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000492A C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000492E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004932 303C 008E                  		move.w	#$8E,d0
00004936 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000493C 43F8 D000                  		lea	($FFFFD000).w,a1
00004940 7000                       		moveq	#0,d0
00004942 323C 07FF                  		move.w	#$7FF,d1
00004946                            
00004946                            SS_EndClrObjRam:
00004946 22C0                       		move.l	d0,(a1)+
00004948 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000494C                            
0000494C 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004952                            
00004952                            SS_NormalExit:
00004952 6100 C8AE                  		bsr.w	PauseGame
00004956 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000495C 6100 E03C                  		bsr.w	DelayProgram
00004960 4EB9 0000 0000             		jsr	ObjectsLoad
00004966 4EB9 0000 0000             		jsr	BuildSprites
0000496C 6100 CB32                  		bsr.w	RunPLC_RAM
00004970 4A78 FE02                  		tst.w	($FFFFFE02).w
00004974 67DC                       		beq.s	SS_NormalExit
00004976 4AB8 F680                  		tst.l	($FFFFF680).w
0000497A 66D6                       		bne.s	SS_NormalExit
0000497C 303C 00CA                  		move.w	#$CA,d0
00004980 6100 C874                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004984 6100 D5E0                  		bsr.w	Pal_MakeFlash
00004988 4E75                       		rts	
0000498A                            ; ===========================================================================
0000498A                            
0000498A                            SS_ToSegaScreen:
0000498A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004990 4E75                       		rts
00004992                            
00004992                            ; ---------------------------------------------------------------------------
00004992                            ; Special stage	background loading subroutine
00004992                            ; ---------------------------------------------------------------------------
00004992                            
00004992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004992                            
00004992                            
00004992                            SS_BGLoad:				; XREF: SpecialStage
00004992 43F9 00FF 0000             		lea	($FF0000).l,a1
00004998 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000499E 303C 4051                  		move.w	#$4051,d0
000049A2 6100 CC2E                  		bsr.w	EniDec
000049A6 263C 5000 0001             		move.l	#$50000001,d3
000049AC 45F9 00FF 0080             		lea	($FF0080).l,a2
000049B2 7E06                       		moveq	#6,d7
000049B4                            
000049B4                            loc_48BE:
000049B4 2003                       		move.l	d3,d0
000049B6 7C03                       		moveq	#3,d6
000049B8 7800                       		moveq	#0,d4
000049BA 0C47 0003                  		cmpi.w	#3,d7
000049BE 6400                       		bcc.s	loc_48CC
000049C0 7801                       		moveq	#1,d4
000049C2                            
000049C2                            loc_48CC:
000049C2 7A07                       		moveq	#7,d5
000049C4                            
000049C4                            loc_48CE:
000049C4 224A                       		movea.l	a2,a1
000049C6 0A04 0001                  		eori.b	#1,d4
000049CA 6600                       		bne.s	loc_48E2
000049CC 0C47 0006                  		cmpi.w	#6,d7
000049D0 6600                       		bne.s	loc_48F2
000049D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000049D8                            
000049D8                            loc_48E2:
000049D8 48E7 F800                  		movem.l	d0-d4,-(sp)
000049DC 7207                       		moveq	#7,d1
000049DE 7407                       		moveq	#7,d2
000049E0 6100 C8DC                  		bsr.w	ShowVDPGraphics
000049E4 4CDF 001F                  		movem.l	(sp)+,d0-d4
000049E8                            
000049E8                            loc_48F2:
000049E8 0680 0010 0000             		addi.l	#$100000,d0
000049EE 51CD FFD4                  		dbf	d5,loc_48CE
000049F2 0680 0380 0000             		addi.l	#$3800000,d0
000049F8 0A04 0001                  		eori.b	#1,d4
000049FC 51CE FFC4                  		dbf	d6,loc_48CC
00004A00 0683 1000 0000             		addi.l	#$10000000,d3
00004A06 6A00                       		bpl.s	loc_491C
00004A08 4843                       		swap	d3
00004A0A 0683 0000 C000             		addi.l	#$C000,d3
00004A10 4843                       		swap	d3
00004A12                            
00004A12                            loc_491C:
00004A12 D4FC 0080                  		adda.w	#$80,a2
00004A16 51CF FF9C                  		dbf	d7,loc_48BE
00004A1A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A20 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004A26 303C 4000                  		move.w	#$4000,d0
00004A2A 6100 CBA6                  		bsr.w	EniDec
00004A2E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A34 203C 4000 0003             		move.l	#$40000003,d0
00004A3A 723F                       		moveq	#$3F,d1
00004A3C 741F                       		moveq	#$1F,d2
00004A3E 6100 C87E                  		bsr.w	ShowVDPGraphics
00004A42 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A48 203C 5000 0003             		move.l	#$50000003,d0
00004A4E 723F                       		moveq	#$3F,d1
00004A50 743F                       		moveq	#$3F,d2
00004A52 6100 C86A                  		bsr.w	ShowVDPGraphics
00004A56 4E75                       		rts	
00004A58                            ; End of function SS_BGLoad
00004A58                            
00004A58                            ; ---------------------------------------------------------------------------
00004A58                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00004A58                            ; to be issued the next time ProcessDMAQueue is called.
00004A58                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00004A58                            ; by issuing the commands (this subroutine DOES check for overflow)
00004A58                            ; ---------------------------------------------------------------------------
00004A58                            ; In case you wish to use this queue system outside of the spin dash, this is the
00004A58                            ; registers in which it expects data in:
00004A58                            ; d1.l: Address to data (In 68k address space)
00004A58                            ; d2.w: Destination in VRAM
00004A58                            ; d3.w: Length of data
00004A58                            ; ---------------------------------------------------------------------------
00004A58                            
00004A58                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004A58                            
00004A58                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00004A58                            QueueDMATransfer:
00004A58 2278 C8FC                  		movea.l ($FFFFC8FC).w,a1
00004A5C B2FC C8FC                  		cmpa.w #$C8FC,a1
00004A60 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004A62                            
00004A62                            ; piece together some VDP commands and store them for later...
00004A62 303C 9300                  		move.w #$9300,d0 ; command to specify DMA transfer length & $00FF
00004A66 1003                       		move.b d3,d0
00004A68 32C0                       		move.w d0,(a1)+ ; store command
00004A6A                            
00004A6A 303C 9400                  		move.w #$9400,d0 ; command to specify DMA transfer length & $FF00
00004A6E E04B                       		lsr.w #8,d3
00004A70 1003                       		move.b d3,d0
00004A72 32C0                       		move.w d0,(a1)+ ; store command
00004A74                            
00004A74 303C 9500                  		move.w #$9500,d0 ; command to specify source address & $0001FE
00004A78 E289                       		lsr.l #1,d1
00004A7A 1001                       		move.b d1,d0
00004A7C 32C0                       		move.w d0,(a1)+ ; store command
00004A7E                            
00004A7E 303C 9600                  		move.w #$9600,d0 ; command to specify source address & $01FE00
00004A82 E089                       		lsr.l #8,d1
00004A84 1001                       		move.b d1,d0
00004A86 32C0                       		move.w d0,(a1)+ ; store command
00004A88                            
00004A88 303C 9700                  		move.w #$9700,d0 ; command to specify source address & $FE0000
00004A8C E089                       		lsr.l #8,d1
00004A8E 1001                       		move.b d1,d0
00004A90 32C0                       		move.w d0,(a1)+ ; store command
00004A92                            
00004A92 0282 0000 FFFF             		andi.l #$FFFF,d2 ; command to specify destination address and begin DMA
00004A98 E58A                       		lsl.l #2,d2
00004A9A E44A                       		lsr.w #2,d2
00004A9C 4842                       		swap d2
00004A9E 0082 4000 0080             		ori.l #$40000080,d2 ; set bits to specify VRAM transfer
00004AA4 22C2                       		move.l d2,(a1)+ ; store command
00004AA6                            
00004AA6 21C9 C8FC                  		move.l a1,($FFFFC8FC).w ; set the next free slot address
00004AAA B2FC C8FC                  		cmpa.w #$C8FC,a1
00004AAE 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004AB0 32BC 0000                  		move.w #0,(a1) ; put a stop token at the end of the used part of the buffer
00004AB4                            ; return_14AA:
00004AB4                            QueueDMATransfer_Done:
00004AB4 4E75                       		rts
00004AB6                            ; End of function QueueDMATransfer
00004AB6                            
00004AB6                            ; ---------------------------------------------------------------------------
00004AB6                            ; Subroutine for issuing all VDP commands that were queued
00004AB6                            ; (by earlier calls to QueueDMATransfer)
00004AB6                            ; Resets the queue when it's done
00004AB6                            ; ---------------------------------------------------------------------------
00004AB6                            
00004AB6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004AB6                            
00004AB6                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00004AB6                            ProcessDMAQueue:
00004AB6 4BF9 00C0 0004             		lea ($C00004).l,a5
00004ABC 43F8 C800                  		lea ($FFFFC800).w,a1
00004AC0                            ; loc_14B6:
00004AC0                            ProcessDMAQueue_Loop:
00004AC0 3019                       		move.w (a1)+,d0
00004AC2 6700                       		beq.s ProcessDMAQueue_Done ; branch if we reached a stop token
00004AC4                            		; issue a set of VDP commands...
00004AC4 3A80                       		move.w d0,(a5) ; transfer length
00004AC6 3A99                       		move.w (a1)+,(a5) ; transfer length
00004AC8 3A99                       		move.w (a1)+,(a5) ; source address
00004ACA 3A99                       		move.w (a1)+,(a5) ; source address
00004ACC 3A99                       		move.w (a1)+,(a5) ; source address
00004ACE 3A99                       		move.w (a1)+,(a5) ; destination
00004AD0 3A99                       		move.w (a1)+,(a5) ; destination
00004AD2 B2FC C8FC                  		cmpa.w #$C8FC,a1
00004AD6 66E8                       		bne.s ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00004AD8                            ; loc_14CE:
00004AD8                            ProcessDMAQueue_Done:
00004AD8 31FC 0000 C800             		move.w #0,($FFFFC800).w
00004ADE 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
00004AE6 4E75                       		rts
00004AE8                            ; End of function ProcessDMAQueue
00004AE8                            
00004AE8                            ; ---------------------------------------------------------------------------
00004AE8                            ; Pallet cycling routine - special stage
00004AE8                            ; ---------------------------------------------------------------------------
00004AE8                            
00004AE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004AE8                            
00004AE8                            
00004AE8                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004AE8 4A78 F63A                  		tst.w	($FFFFF63A).w
00004AEC 6600                       		bne.s	locret_49E6
00004AEE 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004AF2 6A00                       		bpl.s	locret_49E6
00004AF4 4DF9 00C0 0004             		lea	($C00004).l,a6
00004AFA 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004AFE 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004B02 0240 001F                  		andi.w	#$1F,d0
00004B06 E548                       		lsl.w	#2,d0
00004B08 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004B0E D0C0                       		adda.w	d0,a0
00004B10 1018                       		move.b	(a0)+,d0
00004B12 6A00                       		bpl.s	loc_4992
00004B14 303C 01FF                  		move.w	#$1FF,d0
00004B18                            
00004B18                            loc_4992:
00004B18 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004B1C 7000                       		moveq	#0,d0
00004B1E 1018                       		move.b	(a0)+,d0
00004B20 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004B24 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004B2A 43F1 0000                  		lea	(a1,d0.w),a1
00004B2E 303C 8200                  		move.w	#-$7E00,d0
00004B32 1019                       		move.b	(a1)+,d0
00004B34 3C80                       		move.w	d0,(a6)
00004B36 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004B3A 303C 8400                  		move.w	#-$7C00,d0
00004B3E 1018                       		move.b	(a0)+,d0
00004B40 3C80                       		move.w	d0,(a6)
00004B42 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004B4C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004B54 7000                       		moveq	#0,d0
00004B56 1018                       		move.b	(a0)+,d0
00004B58 6B00                       		bmi.s	loc_49E8
00004B5A 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004B60 D2C0                       		adda.w	d0,a1
00004B62 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004B66 24D9                       		move.l	(a1)+,(a2)+
00004B68 24D9                       		move.l	(a1)+,(a2)+
00004B6A 24D9                       		move.l	(a1)+,(a2)+
00004B6C                            
00004B6C                            locret_49E6:
00004B6C 4E75                       		rts	
00004B6E                            ; ===========================================================================
00004B6E                            
00004B6E                            loc_49E8:				; XREF: PalCycle_SS
00004B6E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004B72 0C40 008A                  		cmpi.w	#$8A,d0
00004B76 6500                       		bcs.s	loc_49F4
00004B78 5241                       		addq.w	#1,d1
00004B7A                            
00004B7A                            loc_49F4:
00004B7A C2FC 002A                  		mulu.w	#$2A,d1
00004B7E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004B84 D2C1                       		adda.w	d1,a1
00004B86 0240 007F                  		andi.w	#$7F,d0
00004B8A 0880 0000                  		bclr	#0,d0
00004B8E 6700                       		beq.s	loc_4A18
00004B90 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004B94 24D1                       		move.l	(a1),(a2)+
00004B96 24E9 0004                  		move.l	4(a1),(a2)+
00004B9A 24E9 0008                  		move.l	8(a1),(a2)+
00004B9E                            
00004B9E                            loc_4A18:
00004B9E D2FC 000C                  		adda.w	#$C,a1
00004BA2 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004BA6 0C40 000A                  		cmpi.w	#$A,d0
00004BAA 6500                       		bcs.s	loc_4A2E
00004BAC 0440 000A                  		subi.w	#$A,d0
00004BB0 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004BB4                            
00004BB4                            loc_4A2E:
00004BB4 3200                       		move.w	d0,d1
00004BB6 D040                       		add.w	d0,d0
00004BB8 D041                       		add.w	d1,d0
00004BBA D2C0                       		adda.w	d0,a1
00004BBC 24D9                       		move.l	(a1)+,(a2)+
00004BBE 34D9                       		move.w	(a1)+,(a2)+
00004BC0 4E75                       		rts	
00004BC2                            ; End of function PalCycle_SS
00004BC2                            
00004BC2                            ; ===========================================================================
00004BC2 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004BD2                            					; XREF: PalCycle_SS
00004BD2 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004BE2 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004BF2 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004C02 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004C12 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004C22 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004C32 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004C42                            		even
00004C42 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004C50                            					; XREF: PalCycle_SS
00004C50                            		even
00004C50                            
00004C50                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004C98                            		even
00004C98                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004D6A                            		even
00004D6A                            
00004D6A                            ; ---------------------------------------------------------------------------
00004D6A                            ; Subroutine to	make the special stage background animated
00004D6A                            ; ---------------------------------------------------------------------------
00004D6A                            
00004D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D6A                            
00004D6A                            
00004D6A                            SS_BGAnimate:				; XREF: SpecialStage
00004D6A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004D6E 6600                       		bne.s	loc_4BF6
00004D70 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004D76 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004D7C                            
00004D7C                            loc_4BF6:
00004D7C 0C40 0008                  		cmpi.w	#8,d0
00004D80 6400                       		bcc.s	loc_4C4E
00004D82 0C40 0006                  		cmpi.w	#6,d0
00004D86 6600                       		bne.s	loc_4C10
00004D88 5278 F718                  		addq.w	#1,($FFFFF718).w
00004D8C 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004D90 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004D96                            
00004D96                            loc_4C10:
00004D96 7000                       		moveq	#0,d0
00004D98 3038 F708                  		move.w	($FFFFF708).w,d0
00004D9C 4440                       		neg.w	d0
00004D9E 4840                       		swap	d0
00004DA0 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004DA6 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004DAA 7609                       		moveq	#9,d3
00004DAC                            
00004DAC                            loc_4C26:
00004DAC 302B 0002                  		move.w	2(a3),d0
00004DB0 6100 DC1A                  		bsr.w	CalcSine
00004DB4 7400                       		moveq	#0,d2
00004DB6 1419                       		move.b	(a1)+,d2
00004DB8 C1C2                       		muls.w	d2,d0
00004DBA E080                       		asr.l	#8,d0
00004DBC 36C0                       		move.w	d0,(a3)+
00004DBE 1419                       		move.b	(a1)+,d2
00004DC0 4882                       		ext.w	d2
00004DC2 D55B                       		add.w	d2,(a3)+
00004DC4 51CB FFE6                  		dbf	d3,loc_4C26
00004DC8 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004DCC 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004DD2 6000                       		bra.s	loc_4C7E
00004DD4                            ; ===========================================================================
00004DD4                            
00004DD4                            loc_4C4E:				; XREF: SS_BGAnimate
00004DD4 0C40 000C                  		cmpi.w	#$C,d0
00004DD8 6600                       		bne.s	loc_4C74
00004DDA 5378 F718                  		subq.w	#1,($FFFFF718).w
00004DDE 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004DE2 243C 0001 8000             		move.l	#$18000,d2
00004DE8 7206                       		moveq	#6,d1
00004DEA                            
00004DEA                            loc_4C64:
00004DEA 2013                       		move.l	(a3),d0
00004DEC 9082                       		sub.l	d2,d0
00004DEE 26C0                       		move.l	d0,(a3)+
00004DF0 0482 0000 2000             		subi.l	#$2000,d2
00004DF6 51C9 FFF2                  		dbf	d1,loc_4C64
00004DFA                            
00004DFA                            loc_4C74:
00004DFA 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004DFE 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004E04                            
00004E04                            loc_4C7E:
00004E04 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004E08 3038 F718                  		move.w	($FFFFF718).w,d0
00004E0C 4440                       		neg.w	d0
00004E0E 4840                       		swap	d0
00004E10 7600                       		moveq	#0,d3
00004E12 161A                       		move.b	(a2)+,d3
00004E14 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004E18 4442                       		neg.w	d2
00004E1A 0242 00FF                  		andi.w	#$FF,d2
00004E1E E54A                       		lsl.w	#2,d2
00004E20                            
00004E20                            loc_4C9A:
00004E20 301B                       		move.w	(a3)+,d0
00004E22 544B                       		addq.w	#2,a3
00004E24 7200                       		moveq	#0,d1
00004E26 121A                       		move.b	(a2)+,d1
00004E28 5341                       		subq.w	#1,d1
00004E2A                            
00004E2A                            loc_4CA4:
00004E2A 2380 2000                  		move.l	d0,(a1,d2.w)
00004E2E 5842                       		addq.w	#4,d2
00004E30 0242 03FC                  		andi.w	#$3FC,d2
00004E34 51C9 FFF4                  		dbf	d1,loc_4CA4
00004E38 51CB FFE6                  		dbf	d3,loc_4C9A
00004E3C 4E75                       		rts	
00004E3E                            ; End of function SS_BGAnimate
00004E3E                            
00004E3E                            ; ===========================================================================
00004E3E 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004E4A                            		even
00004E4A 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004E52                            		even
00004E52 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004E66                            		even
00004E66                            					; XREF: SS_BGAnimate
00004E66                            ; ===========================================================================
00004E66                            
00004E66                            ; ---------------------------------------------------------------------------
00004E66                            ; Continue screen
00004E66                            ; ---------------------------------------------------------------------------
00004E66                            
00004E66                            ContinueScreen:				; XREF: GameModeArray
00004E66 6100 CFF8                  		bsr.w	Pal_FadeFrom
00004E6A 46FC 2700                  		move	#$2700,sr
00004E6E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004E72 0200 00BF                  		andi.b	#$BF,d0
00004E76 33C0 00C0 0004             		move.w	d0,($C00004).l
00004E7C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E82 3CBC 8004                  		move.w	#$8004,(a6)
00004E86 3CBC 8700                  		move.w	#$8700,(a6)
00004E8A 6100 C244                  		bsr.w	ClearScreen
00004E8E 43F8 D000                  		lea	($FFFFD000).w,a1
00004E92 7000                       		moveq	#0,d0
00004E94 323C 07FF                  		move.w	#$7FF,d1
00004E98                            
00004E98                            Cont_ClrObjRam:
00004E98 22C0                       		move.l	d0,(a1)+
00004E9A 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004E9E                            
00004E9E 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00004EA8 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00004EAE 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
00004EB4 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
00004EB8 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004EC2 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004EC8 6100 C41E                  		bsr.w	NemDec
00004ECC 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004ED6 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004EDC 6100 C40A                  		bsr.w	NemDec
00004EE0 720A                       		moveq	#10,d1
00004EE2 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004EE8 7012                       		moveq	#$12,d0
00004EEA 6100 D1FA                  		bsr.w	PalLoad1	; load continue	screen pallet
00004EEE 103C 0090                  		move.b	#$90,d0
00004EF2 6100 C2FC                  		bsr.w	PlaySound	; play continue	music
00004EF6 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004EFC 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00004F02 42B8 F700                  		clr.l	($FFFFF700).w
00004F06 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004F0E 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004F14 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004F1A 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004F20 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004F26 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004F2C 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004F32 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004F38 11FC 0000 FFD0             		move.b    #0,($FFFFFFD0).w
00004F3E 4EB9 0000 0000             		jsr	ObjectsLoad
00004F44 4EB9 0000 0000             		jsr	BuildSprites
00004F4A 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004F4E 0000 0040                  		ori.b	#$40,d0
00004F52 33C0 00C0 0004             		move.w	d0,($C00004).l
00004F58 6100 CE84                  		bsr.w	Pal_FadeTo
00004F5C                            
00004F5C                            ; ---------------------------------------------------------------------------
00004F5C                            ; Continue screen main loop
00004F5C                            ; ---------------------------------------------------------------------------
00004F5C                            
00004F5C                            Cont_MainLoop:
00004F5C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004F62 6100 DA36                  		bsr.w	DelayProgram
00004F66 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F6C 6400                       		bcc.s	loc_4DF2
00004F6E 46FC 2700                  		move	#$2700,sr
00004F72 3238 F614                  		move.w	($FFFFF614).w,d1
00004F76 82FC 003C                  		divu.w	#$3C,d1
00004F7A 0281 0000 000F             		andi.l	#$F,d1
00004F80 4EB9 0000 0000             		jsr	ContScrCounter
00004F86 46FC 2300                  		move	#$2300,sr
00004F8A                            
00004F8A                            loc_4DF2:
00004F8A 4EB9 0000 0000             		jsr	ObjectsLoad
00004F90 4EB9 0000 0000             		jsr	BuildSprites
00004F96 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004F9C 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004F9E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004FA4 64B6                       		bcc.s	Cont_MainLoop
00004FA6 0C78 0100 F614             		cmpi.w	#$100,($FFFFF614).w
00004FAC 6E00 FFAE                  		bgt.w	Cont_MainLoop
00004FB0 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00004FB6 0C78 0040 F614             		cmpi.w	#$40,($FFFFF614).w
00004FBC 6E00 FF9E                  		bgt.w	Cont_MainLoop
00004FC0 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
00004FC6 4A78 F614                  		tst.w	($FFFFF614).w
00004FCA 6600 FF90                  		bne.w	Cont_MainLoop
00004FCE 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00004FD4 4E75                       		rts	
00004FD6                            ; ===========================================================================
00004FD6                            
00004FD6                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004FD6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004FDC 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004FE2 7000                       		moveq	#0,d0
00004FE4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004FE8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004FEC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004FF0 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004FF4 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004FF8 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
00005000 4E75                       		rts	
00005002                            ; ===========================================================================
00005002                            
00005002                            ; ---------------------------------------------------------------------------
00005002                            ; Object 80 - Continue screen elements
00005002                            ; ---------------------------------------------------------------------------
00005002                            
00005002                            Obj80:					; XREF: Obj_Index
00005002 7000                       		moveq	#0,d0
00005004 1028 0024                  		move.b	$24(a0),d0
00005008 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000500C 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005010                            ; ===========================================================================
00005010 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005012 0000                       		dc.w Obj80_Display-Obj80_Index
00005014 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005016 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005018                            ; ===========================================================================
00005018                            
00005018                            Obj80_Main:				; XREF: Obj80_Index
00005018 5428 0024                  		addq.b	#2,$24(a0)
0000501C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005024 317C 8500 0002             		move.w	#$8500,2(a0)
0000502A 117C 0000 0001             		move.b	#0,1(a0)
00005030 117C 003C 0019             		move.b	#$3C,$19(a0)
00005036 317C 0120 0008             		move.w	#$120,8(a0)
0000503C 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005042 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005048                            
00005048                            Obj80_Display:				; XREF: Obj80_Index
00005048 4EF9 0000 0000             		jmp	DisplaySprite
0000504E                            ; ===========================================================================
0000504E                            Obj80_MiniSonicPos:
0000504E 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005060 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000506C                            ; ===========================================================================
0000506C                            
0000506C                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000506C 2248                       		movea.l	a0,a1
0000506E 45F9 0000 504E             		lea	(Obj80_MiniSonicPos).l,a2
00005074 7200                       		moveq	#0,d1
00005076 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000507A 5501                       		subq.b	#2,d1
0000507C 6400                       		bcc.s	loc_4EC4
0000507E 4EF9 0000 0000             		jmp	DeleteObject
00005084                            ; ===========================================================================
00005084                            
00005084                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005084 7601                       		moveq	#1,d3
00005086 0C01 000E                  		cmpi.b	#$E,d1
0000508A 6500                       		bcs.s	loc_4ED0
0000508C 7600                       		moveq	#0,d3
0000508E 720E                       		moveq	#$E,d1
00005090                            
00005090                            loc_4ED0:
00005090 1401                       		move.b	d1,d2
00005092 0202 0001                  		andi.b	#1,d2
00005096                            
00005096                            Obj80_MiniSonLoop:
00005096 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000509A 335A 0008                  		move.w	(a2)+,8(a1)
0000509E 4A02                       		tst.b	d2
000050A0 6700                       		beq.s	loc_4EEA
000050A2 0469 000A 0008             		subi.w	#$A,8(a1)
000050A8                            
000050A8                            loc_4EEA:
000050A8 337C 00D0 000A             		move.w	#$D0,$A(a1)
000050AE 137C 0006 001A             		move.b	#6,$1A(a1)
000050B4 137C 0006 0024             		move.b	#6,$24(a1)
000050BA 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000050C2 337C 8551 0002             		move.w	#$8551,2(a1)
000050C8 137C 0000 0001             		move.b	#0,1(a1)
000050CE 43E9 0040                  		lea	$40(a1),a1
000050D2 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000050D6 43E9 FFC0                  		lea	-$40(a1),a1
000050DA 1343 0028                  		move.b	d3,$28(a1)
000050DE                            
000050DE                            Obj80_ChkType:				; XREF: Obj80_Index
000050DE 4A28 0028                  		tst.b	$28(a0)
000050E2 6700                       		beq.s	loc_4F40
000050E4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000050EA 6500                       		bcs.s	loc_4F40
000050EC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000050F0 0200 0001                  		andi.b	#1,d0
000050F4 6600                       		bne.s	loc_4F40
000050F6 4A78 D010                  		tst.w	($FFFFD010).w
000050FA 6600                       		bne.s	Obj80_Delete
000050FC 4E75                       		rts	
000050FE                            ; ===========================================================================
000050FE                            
000050FE                            loc_4F40:				; XREF: Obj80_ChkType
000050FE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005102 0200 000F                  		andi.b	#$F,d0
00005106 6600                       		bne.s	Obj80_Display2
00005108 0868 0000 001A             		bchg	#0,$1A(a0)
0000510E                            
0000510E                            Obj80_Display2:
0000510E 4EF9 0000 0000             		jmp	DisplaySprite
00005114                            ; ===========================================================================
00005114                            
00005114                            Obj80_Delete:				; XREF: Obj80_ChkType
00005114 4EF9 0000 0000             		jmp	DeleteObject
0000511A                            ; ===========================================================================
0000511A                            
0000511A                            ; ---------------------------------------------------------------------------
0000511A                            ; Object 81 - Sonic on the continue screen
0000511A                            ; ---------------------------------------------------------------------------
0000511A                            
0000511A                            Obj81:					; XREF: Obj_Index
0000511A 7000                       		moveq	#0,d0
0000511C 1028 0024                  		move.b	$24(a0),d0
00005120 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005124 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005128 4EF9 0000 0000             		jmp	DisplaySprite
0000512E                            ; ===========================================================================
0000512E 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005130 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005132 0000                       		dc.w Obj81_Animate-Obj81_Index
00005134 0000                       		dc.w Obj81_Run-Obj81_Index
00005136                            ; ===========================================================================
00005136                            
00005136                            Obj81_Main:				; XREF: Obj81_Index
00005136 5428 0024                  		addq.b	#2,$24(a0)
0000513A 317C 00A0 0008             		move.w	#$A0,8(a0)
00005140 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005146 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000514E 317C 0780 0002             		move.w	#$780,2(a0)
00005154 117C 0004 0001             		move.b	#4,1(a0)
0000515A 117C 0002 0018             		move.b	#2,$18(a0)
00005160 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005166 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000516C                            
0000516C                            Obj81_ChkLand:				; XREF: Obj81_Index
0000516C 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005172 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005174 5428 0024                  		addq.b	#2,$24(a0)
00005178 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000517C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005184 317C 8500 0002             		move.w	#$8500,2(a0)
0000518A 117C 0000 001C             		move.b	#0,$1C(a0)
00005190 6000                       		bra.s	Obj81_Animate
00005192                            ; ===========================================================================
00005192                            
00005192                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005192 4EB9 0000 0000             		jsr	SpeedToPos
00005198 4EB9 0000 0000             		jsr	Sonic_Animate
0000519E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000051A4                            ; ===========================================================================
000051A4                            
000051A4                            Obj81_Animate:				; XREF: Obj81_Index
000051A4 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000051A8 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000051AA 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000051B0 4EF9 0000 0000             		jmp	AnimateSprite
000051B6                            ; ===========================================================================
000051B6                            
000051B6                            Obj81_GetUp:				; XREF: Obj81_Animate
000051B6 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
000051BC 5428 0024                  		addq.b	#2,$24(a0)
000051C0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000051C8 317C 0780 0002             		move.w	#$780,2(a0)
000051CE 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000051D4 4268 0020                  		clr.w	$20(a0)
000051D8 5168 000C                  		subq.w	#8,$C(a0)
000051DC 103C 00E0                  		move.b	#$E0,d0
000051E0 6100 C014                  		bsr.w	PlaySound_Special ; fade out music
000051E4                            
000051E4                            Obj81_Run:				; XREF: Obj81_Index
000051E4 0C68 0800 0020             		cmpi.w	#$800,$20(a0)	; check	Sonic's "run speed" (not moving)
000051EA 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000051EC 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000051F2 6000                       		bra.s	Obj81_ShowRun
000051F4                            ; ===========================================================================
000051F4                            
000051F4                            Obj81_AddSpeed:				; XREF: Obj81_Run
000051F4 0668 0020 0020             		addi.w	#$20,$20(a0)	; increase "run	speed"
000051FA                            
000051FA                            Obj81_ShowRun:				; XREF: Obj81_Run
000051FA 4EB9 0000 0000             		jsr	SpeedToPos
00005200 4EB9 0000 0000             		jsr	Sonic_Animate
00005206 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000520C                            ; ===========================================================================
0000520C                            Ani_obj81:
0000520C                            	include "_anim\obj81.asm"
0000520C                            ; ---------------------------------------------------------------------------
0000520C                            ; Animation script - Sonic on the continue screen
0000520C                            ; ---------------------------------------------------------------------------
0000520C 0000                       		dc.w byte_504A-Ani_obj81
0000520E 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000521A 00                         		even
0000521A 00                         		even
0000521A                            
0000521A                            ; ---------------------------------------------------------------------------
0000521A                            ; Sprite mappings - Continue screen
0000521A                            ; ---------------------------------------------------------------------------
0000521A                            Map_obj80:
0000521A                            	include "_maps\obj80.asm"
0000521A                            ; ---------------------------------------------------------------------------
0000521A                            ; Sprite mappings - Continue screen
0000521A                            ; ---------------------------------------------------------------------------
0000521A 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000521E 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005222 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005226 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000522A 0B                         byte_5066:	dc.b $B
0000522B F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005230 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005235 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000523A F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000523F F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005244 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005249 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000524E F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005253 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005258 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000525D 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005262 03                         byte_509E:	dc.b 3
00005263 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005268 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000526D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005272 03                         byte_50AE:	dc.b 3
00005273 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005278 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000527D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005282 03                         byte_50BE:	dc.b 3
00005283 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005288 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000528D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005292 02                         byte_50CE:	dc.b 2
00005293 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005298 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000529D 01                         byte_50D9:	dc.b 1
0000529E 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000052A3 01                         byte_50DF:	dc.b 1
000052A4 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000052AA 00                         		even
000052AA 00                         		even
000052AA                            
000052AA                            ; ===========================================================================
000052AA                            ; ---------------------------------------------------------------------------
000052AA                            ; Ending sequence in Green Hill	Zone
000052AA                            ; ---------------------------------------------------------------------------
000052AA                            
000052AA                            EndingSequence:				; XREF: GameModeArray
000052AA 103C 00E4                  		move.b	#$E4,d0
000052AE 6100 BF46                  		bsr.w	PlaySound_Special ; stop music
000052B2 6100 CBAC                  		bsr.w	Pal_FadeFrom
000052B6 43F8 D000                  		lea	($FFFFD000).w,a1
000052BA 7000                       		moveq	#0,d0
000052BC 323C 07FF                  		move.w	#$7FF,d1
000052C0                            
000052C0                            End_ClrObjRam:
000052C0 22C0                       		move.l	d0,(a1)+
000052C2 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000052C6                            
000052C6 43F8 F628                  		lea	($FFFFF628).w,a1
000052CA 7000                       		moveq	#0,d0
000052CC 323C 0015                  		move.w	#$15,d1
000052D0                            
000052D0                            End_ClrRam:
000052D0 22C0                       		move.l	d0,(a1)+
000052D2 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000052D6                            
000052D6 43F8 F700                  		lea	($FFFFF700).w,a1
000052DA 7000                       		moveq	#0,d0
000052DC 323C 003F                  		move.w	#$3F,d1
000052E0                            
000052E0                            End_ClrRam2:
000052E0 22C0                       		move.l	d0,(a1)+
000052E2 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000052E6                            
000052E6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000052EA 7000                       		moveq	#0,d0
000052EC 323C 0047                  		move.w	#$47,d1
000052F0                            
000052F0                            End_ClrRam3:
000052F0 22C0                       		move.l	d0,(a1)+
000052F2 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000052F6                            
000052F6 46FC 2700                  		move	#$2700,sr
000052FA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000052FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005304 6100 BDCA                  		bsr.w	ClearScreen
00005308 4DF9 00C0 0004             		lea	($C00004).l,a6
0000530E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005312 3CBC 8230                  		move.w	#$8230,(a6)
00005316 3CBC 8407                  		move.w	#$8407,(a6)
0000531A 3CBC 857C                  		move.w	#$857C,(a6)
0000531E 3CBC 9001                  		move.w	#$9001,(a6)
00005322 3CBC 8004                  		move.w	#$8004,(a6)
00005326 3CBC 8720                  		move.w	#$8720,(a6)
0000532A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005330 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005334 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000533A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005340 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005346 6700                       		beq.s	End_LoadData	; if yes, branch
00005348 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000534E                            
0000534E                            End_LoadData:
0000534E 701C                       		moveq	#$1C,d0
00005350 6100 C24E                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005354 4EB9 0000 0000             		jsr	Hud_Base
0000535A 6100 0000                  		bsr.w	LevelSizeLoad
0000535E 6100 0000                  		bsr.w	DeformBgLayer
00005362 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005368 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
0000536C 6100 0000                  		bsr.w	MainLoadBlockLoad
00005370 6100 0000                  		bsr.w	LoadTilesFromStart
00005374 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000537C 46FC 2300                  		move	#$2300,sr
00005380 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005386 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000538A 6100 C3C4                  		bsr.w	KosDec
0000538E 7003                       		moveq	#3,d0
00005390 6100 CD54                  		bsr.w	PalLoad1	; load Sonic's pallet
00005394 303C 008B                  		move.w	#$8B,d0
00005398 6100 BE56                  		bsr.w	PlaySound	; play ending sequence music
0000539C 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000053A2 6700                       		beq.s	End_LoadSonic	; if not, branch
000053A4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000053AA                            
000053AA                            End_LoadSonic:
000053AA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000053B0 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000053B6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000053BC 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000053C2 31FC F800 D020             		move.w	#$F800,($FFFFD020).w ; set Sonic's speed
000053C8 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000053CE 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
000053D4 4EB9 0000 0000             		jsr	ObjPosLoad
000053DA 4EB9 0000 0000             		jsr	ObjectsLoad
000053E0 4EB9 0000 0000             		jsr	BuildSprites
000053E6 7000                       		moveq	#0,d0
000053E8 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000053EC 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000053F0 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000053F4 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000053F8 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000053FC 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005400 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005404 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005408 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000540C 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005410 6100 EDE6                  		bsr.w	OscillateNumInit
00005414 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000541A 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005420 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005426 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000542C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005432 6100 D566                  		bsr.w	DelayProgram
00005436 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000543A 0000 0040                  		ori.b	#$40,d0
0000543E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005444 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000544A 6100 C992                  		bsr.w	Pal_FadeTo
0000544E                            
0000544E                            ; ---------------------------------------------------------------------------
0000544E                            ; Main ending sequence loop
0000544E                            ; ---------------------------------------------------------------------------
0000544E                            
0000544E                            End_MainLoop:
0000544E 6100 BDB2                  		bsr.w	PauseGame
00005452 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005458 6100 D540                  		bsr.w	DelayProgram
0000545C 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005460 6100 0000                  		bsr.w	End_MoveSonic
00005464 4EB9 0000 0000             		jsr	ObjectsLoad
0000546A 6100 0000                  		bsr.w	DeformBgLayer
0000546E 4EB9 0000 0000             		jsr	BuildSprites
00005474 4EB9 0000 0000             		jsr	ObjPosLoad
0000547A 6100 C4F2                  		bsr.w	PalCycle_Load
0000547E 6100 EDCE                  		bsr.w	OscillateNumDo
00005482 6100 EE5A                  		bsr.w	ChangeRingFrame
00005486 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000548C 6700                       		beq.s	loc_52DA	; if yes, branch
0000548E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005494 103C 0091                  		move.b	#$91,d0
00005498 6100 BD5C                  		bsr.w	PlaySound_Special ; play credits music
0000549C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000054A2 4E75                       		rts	
000054A4                            ; ===========================================================================
000054A4                            
000054A4                            loc_52DA:
000054A4 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000054A8 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000054AC                            
000054AC 4278 FE02                  		clr.w	($FFFFFE02).w
000054B0 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000054B6 4278 F794                  		clr.w	($FFFFF794).w
000054BA                            
000054BA                            End_AllEmlds:				; XREF: loc_5334
000054BA 6100 BD46                  		bsr.w	PauseGame
000054BE 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000054C4 6100 D4D4                  		bsr.w	DelayProgram
000054C8 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000054CC 6100 0000                  		bsr.w	End_MoveSonic
000054D0 4EB9 0000 0000             		jsr	ObjectsLoad
000054D6 6100 0000                  		bsr.w	DeformBgLayer
000054DA 4EB9 0000 0000             		jsr	BuildSprites
000054E0 4EB9 0000 0000             		jsr	ObjPosLoad
000054E6 6100 ED66                  		bsr.w	OscillateNumDo
000054EA 6100 EDF2                  		bsr.w	ChangeRingFrame
000054EE 5378 F794                  		subq.w	#1,($FFFFF794).w
000054F2 6A00                       		bpl.s	loc_5334
000054F4 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000054FA 6100 CA8A                  		bsr.w	Pal_ToWhite
000054FE                            
000054FE                            loc_5334:
000054FE 4A78 FE02                  		tst.w	($FFFFFE02).w
00005502 6700 FFB6                  		beq.w	End_AllEmlds
00005506 4278 FE02                  		clr.w	($FFFFFE02).w
0000550A 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005510 4BF9 00C0 0004             		lea	($C00004).l,a5
00005516 4DF9 00C0 0000             		lea	($C00000).l,a6
0000551C 47F8 F700                  		lea	($FFFFF700).w,a3
00005520 49F8 A400                  		lea	($FFFFA400).w,a4
00005524 343C 4000                  		move.w	#$4000,d2
00005528 6100 0000                  		bsr.w	LoadTilesFromStart2
0000552C 7013                       		moveq	#$13,d0
0000552E 6100 CBB6                  		bsr.w	PalLoad1	; load ending pallet
00005532 6100 C9AA                  		bsr.w	Pal_MakeWhite
00005536 6000 FF16                  		bra.w	End_MainLoop
0000553A                            
0000553A                            ; ---------------------------------------------------------------------------
0000553A                            ; Subroutine controlling Sonic on the ending sequence
0000553A                            ; ---------------------------------------------------------------------------
0000553A                            
0000553A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000553A                            
0000553A                            
0000553A                            End_MoveSonic:				; XREF: End_MainLoop
0000553A 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000553E 6600                       		bne.s	End_MoveSonic2
00005540 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005546 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005548 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000554C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005552 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005558 4E75                       		rts	
0000555A                            ; ===========================================================================
0000555A                            
0000555A                            End_MoveSonic2:				; XREF: End_MoveSonic
0000555A 5500                       		subq.b	#2,d0
0000555C 6600                       		bne.s	End_MoveSonic3
0000555E 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005564 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005566 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000556A 7000                       		moveq	#0,d0
0000556C 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005570 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005574 31C0 D020                  		move.w	d0,($FFFFD020).w
00005578 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
0000557E 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005584 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000558A 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005590 4E75                       		rts	
00005592                            ; ===========================================================================
00005592                            
00005592                            End_MoveSonic3:				; XREF: End_MoveSonic
00005592 5500                       		subq.b	#2,d0
00005594 6600                       		bne.s	End_MoveSonExit
00005596 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000559A 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000055A0 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000055A6 4278 D024                  		clr.w	($FFFFD024).w
000055AA                            
000055AA                            End_MoveSonExit:
000055AA 4E75                       		rts	
000055AC                            ; End of function End_MoveSonic
000055AC                            
000055AC                            ; ===========================================================================
000055AC                            ; ---------------------------------------------------------------------------
000055AC                            ; Object 87 - Sonic on ending sequence
000055AC                            ; ---------------------------------------------------------------------------
000055AC                            
000055AC                            Obj87:					; XREF: Obj_Index
000055AC 7000                       		moveq	#0,d0
000055AE 1028 0025                  		move.b	$25(a0),d0
000055B2 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000055B6 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000055BA 4EF9 0000 0000             		jmp	DisplaySprite
000055C0                            ; ===========================================================================
000055C0 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000055C4 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000055C8 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000055CC 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000055D0 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000055D4                            ; ===========================================================================
000055D4                            
000055D4                            Obj87_Main:				; XREF: Obj87_Index
000055D4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000055DA 6700                       		beq.s	Obj87_Main2	; if yes, branch
000055DC 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000055E2 317C 00D8 0030             		move.w	#$D8,$30(a0)
000055E8 4E75                       		rts	
000055EA                            ; ===========================================================================
000055EA                            
000055EA                            Obj87_Main2:				; XREF: Obj87_Main
000055EA 5428 0025                  		addq.b	#2,$25(a0)
000055EE 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000055F6 317C 03E1 0002             		move.w	#$3E1,2(a0)
000055FC 117C 0004 0001             		move.b	#4,1(a0)
00005602 4228 0022                  		clr.b	$22(a0)
00005606 117C 0002 0018             		move.b	#2,$18(a0)
0000560C 117C 0000 001A             		move.b	#0,$1A(a0)
00005612 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005618                            
00005618                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005618 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000561C 6600                       		bne.s	Obj87_Wait
0000561E 5428 0025                  		addq.b	#2,$25(a0)
00005622 317C 0001 001C             		move.w	#1,$1C(a0)
00005628 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000562E                            
0000562E                            Obj87_Wait:
0000562E 4E75                       		rts	
00005630                            ; ===========================================================================
00005630                            
00005630                            Obj87_LookUp:				; XREF: Obj87_Index
00005630 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005638 6600                       		bne.s	locret_5480
0000563A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005640 317C 005A 0030             		move.w	#$5A,$30(a0)
00005646 5428 0025                  		addq.b	#2,$25(a0)
0000564A                            
0000564A                            locret_5480:
0000564A 4E75                       		rts	
0000564C                            ; ===========================================================================
0000564C                            
0000564C                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000564C 5368 0030                  		subq.w	#1,$30(a0)
00005650 6600                       		bne.s	Obj87_Wait2
00005652 43F8 D400                  		lea	($FFFFD400).w,a1
00005656 323C 00FF                  		move.w	#$FF,d1
0000565A                            
0000565A                            Obj87_ClrLoop:
0000565A 4299                       		clr.l	(a1)+
0000565C 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005660 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005666 5428 0025                  		addq.b	#2,$25(a0)
0000566A 117C 0001 001C             		move.b	#1,$1C(a0)
00005670 317C 003C 0030             		move.w	#$3C,$30(a0)
00005676                            
00005676                            Obj87_Wait2:
00005676 4E75                       		rts	
00005678                            ; ===========================================================================
00005678                            
00005678                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005678 5368 0030                  		subq.w	#1,$30(a0)
0000567C 6600                       		bne.s	Obj87_Wait3
0000567E 5428 0025                  		addq.b	#2,$25(a0)
00005682 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005688 117C 0002 001C             		move.b	#2,$1C(a0)
0000568E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005694                            
00005694                            Obj87_Wait3:
00005694 4E75                       		rts	
00005696                            ; ===========================================================================
00005696                            
00005696                            Obj87_Animate:				; XREF: Obj87_Index
00005696 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000569C 4EF9 0000 0000             		jmp	AnimateSprite
000056A2                            ; ===========================================================================
000056A2                            
000056A2                            Obj87_Leap:				; XREF: Obj87_Index
000056A2 5368 0030                  		subq.w	#1,$30(a0)
000056A6 6600                       		bne.s	Obj87_Wait4
000056A8 5428 0025                  		addq.b	#2,$25(a0)
000056AC 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000056B4 317C 03E1 0002             		move.w	#$3E1,2(a0)
000056BA 117C 0004 0001             		move.b	#4,1(a0)
000056C0 4228 0022                  		clr.b	$22(a0)
000056C4 117C 0002 0018             		move.b	#2,$18(a0)
000056CA 117C 0005 001A             		move.b	#5,$1A(a0)
000056D0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000056D6 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000056DC 60B8                       		bra.s	Obj87_Animate
000056DE                            ; ===========================================================================
000056DE                            
000056DE                            Obj87_Wait4:				; XREF: Obj87_Leap
000056DE 4E75                       		rts	
000056E0                            ; ===========================================================================
000056E0                            Ani_obj87:
000056E0                            	include "_anim\obj87.asm"
000056E0                            ; ---------------------------------------------------------------------------
000056E0                            ; Animation script - Sonic on the ending sequence
000056E0                            ; ---------------------------------------------------------------------------
000056E0 0000                       		dc.w byte_551C-Ani_obj87
000056E2 0000                       		dc.w byte_552A-Ani_obj87
000056E4 0000                       		dc.w byte_5534-Ani_obj87
000056E6 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000056F4 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000056FE 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005706                            		even
00005706                            		even
00005706                            
00005706                            ; ===========================================================================
00005706                            ; ---------------------------------------------------------------------------
00005706                            ; Object 88 - chaos emeralds on	the ending sequence
00005706                            ; ---------------------------------------------------------------------------
00005706                            
00005706                            Obj88:					; XREF: Obj_Index
00005706 7000                       		moveq	#0,d0
00005708 1028 0024                  		move.b	$24(a0),d0
0000570C 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005710 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005714 4EF9 0000 0000             		jmp	DisplaySprite
0000571A                            ; ===========================================================================
0000571A 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000571C 0000                       		dc.w Obj88_Move-Obj88_Index
0000571E                            ; ===========================================================================
0000571E                            
0000571E                            Obj88_Main:				; XREF: Obj88_Index
0000571E 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005724 6700                       		beq.s	Obj88_Main2
00005726 588F                       		addq.l	#4,sp
00005728 4E75                       		rts	
0000572A                            ; ===========================================================================
0000572A                            
0000572A                            Obj88_Main2:				; XREF: Obj88_Main
0000572A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005730 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005736 2248                       		movea.l	a0,a1
00005738 7600                       		moveq	#0,d3
0000573A 7401                       		moveq	#1,d2
0000573C 7205                       		moveq	#5,d1
0000573E                            
0000573E                            Obj88_MainLoop:
0000573E 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005742 5429 0024                  		addq.b	#2,$24(a1)
00005746 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000574E 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005754 137C 0004 0001             		move.b	#4,1(a1)
0000575A 137C 0001 0018             		move.b	#1,$18(a1)
00005760 3368 0008 0038             		move.w	8(a0),$38(a1)
00005766 3368 000C 003A             		move.w	$C(a0),$3A(a1)
0000576C 1342 001C                  		move.b	d2,$1C(a1)
00005770 1342 001A                  		move.b	d2,$1A(a1)
00005774 5202                       		addq.b	#1,d2
00005776 1343 0026                  		move.b	d3,$26(a1)
0000577A 0603 002A                  		addi.b	#$2A,d3
0000577E 43E9 0040                  		lea	$40(a1),a1
00005782 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005786                            
00005786                            Obj88_Move:				; XREF: Obj88_Index
00005786 3028 003E                  		move.w	$3E(a0),d0
0000578A D168 0026                  		add.w	d0,$26(a0)
0000578E 1028 0026                  		move.b	$26(a0),d0
00005792 4EB9 0000 29CC             		jsr	(CalcSine).l
00005798 7800                       		moveq	#0,d4
0000579A 1828 003C                  		move.b	$3C(a0),d4
0000579E C3C4                       		muls.w	d4,d1
000057A0 E081                       		asr.l	#8,d1
000057A2 C1C4                       		muls.w	d4,d0
000057A4 E080                       		asr.l	#8,d0
000057A6 D268 0038                  		add.w	$38(a0),d1
000057AA D068 003A                  		add.w	$3A(a0),d0
000057AE 3141 0008                  		move.w	d1,8(a0)
000057B2 3140 000C                  		move.w	d0,$C(a0)
000057B6 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000057BC 6700                       		beq.s	loc_55FA
000057BE 0668 0020 003C             		addi.w	#$20,$3C(a0)
000057C4                            
000057C4                            loc_55FA:
000057C4 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000057CA 6700                       		beq.s	loc_5608
000057CC 0668 0020 003E             		addi.w	#$20,$3E(a0)
000057D2                            
000057D2                            loc_5608:
000057D2 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
000057D8 6700                       		beq.s	locret_5614
000057DA 5368 003A                  		subq.w	#1,$3A(a0)
000057DE                            
000057DE                            locret_5614:
000057DE 4E75                       		rts	
000057E0                            ; ===========================================================================
000057E0                            ; ---------------------------------------------------------------------------
000057E0                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000057E0                            ; ---------------------------------------------------------------------------
000057E0                            
000057E0                            Obj89:					; XREF: Obj_Index
000057E0 7000                       		moveq	#0,d0
000057E2 1028 0024                  		move.b	$24(a0),d0
000057E6 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
000057EA 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
000057EE                            ; ===========================================================================
000057EE 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
000057F0 0000                       		dc.w Obj89_Move-Obj89_Index
000057F2 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
000057F4                            ; ===========================================================================
000057F4                            
000057F4                            Obj89_Main:				; XREF: Obj89_Index
000057F4 5428 0024                  		addq.b	#2,$24(a0)
000057F8 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
000057FE 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005804 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000580C 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005812 117C 0000 0001             		move.b	#0,1(a0)
00005818 117C 0000 0018             		move.b	#0,$18(a0)
0000581E                            
0000581E                            Obj89_Move:				; XREF: Obj89_Index
0000581E 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005824 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005826 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000582C 4EF9 0000 0000             		jmp	DisplaySprite
00005832                            ; ===========================================================================
00005832                            
00005832                            Obj89_Delay:				; XREF: Obj89_Move
00005832 5428 0024                  		addq.b	#2,$24(a0)
00005836 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000583C                            
0000583C                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000583C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005840 6A00                       		bpl.s	Obj89_Display
00005842 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005848                            
00005848                            Obj89_Display:
00005848 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000584E                            ; ===========================================================================
0000584E                            ; ---------------------------------------------------------------------------
0000584E                            ; Sprite mappings - Sonic on the ending	sequence
0000584E                            ; ---------------------------------------------------------------------------
0000584E                            Map_obj87:
0000584E                            	include "_maps\obj87.asm"
0000584E                            ; ---------------------------------------------------------------------------
0000584E                            ; Sprite mappings - Sonic on the ending	sequence
0000584E                            ; ---------------------------------------------------------------------------
0000584E 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005852 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005856 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
0000585A 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000585E 02                         byte_5690:	dc.b 2
0000585F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005864 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005869 03                         byte_569B:	dc.b 3
0000586A FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000586F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005874 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005879 02                         byte_56AB:	dc.b 2
0000587A EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000587F FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005884 02                         byte_56B6:	dc.b 2
00005885 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000588A FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
0000588F 02                         byte_56C1:	dc.b 2
00005890 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005895 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000589A 03                         byte_56CC:	dc.b 3
0000589B EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000058A0 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000058A5 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000058AA 07                         byte_56DC:	dc.b 7
000058AB B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000058B0 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000058B5 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000058BA CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000058BF DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000058C4 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000058C9 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000058CE 18                         byte_5700:	dc.b $18
000058CF 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000058D4 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000058D9 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000058DE 980B 0098 30               		dc.b $98, $B, 0, $98, $30
000058E3 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
000058E8 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
000058ED 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
000058F2 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000058F7 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
000058FC B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005901 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005906 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000590B C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005910 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005915 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000591A D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000591F D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005924 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005929 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000592E E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005933 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005938 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000593D F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005942 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005948 00                         		even
00005948 00                         		even
00005948                            
00005948                            ; ---------------------------------------------------------------------------
00005948                            ; Sprite mappings - chaos emeralds on the ending sequence
00005948                            ; ---------------------------------------------------------------------------
00005948                            Map_obj88:
00005948                            	include "_maps\obj88.asm"
00005948                            ; ---------------------------------------------------------------------------
00005948                            ; Sprite mappings - chaos emeralds on the ending sequence
00005948                            ; ---------------------------------------------------------------------------
00005948 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000594C 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005950 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005954 0000                       		dc.w byte_57AC-Map_obj88
00005956 01                         byte_5788:	dc.b 1
00005957 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000595C 01                         byte_578E:	dc.b 1
0000595D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005962 01                         byte_5794:	dc.b 1
00005963 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005968 01                         byte_579A:	dc.b 1
00005969 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000596E 01                         byte_57A0:	dc.b 1
0000596F F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005974 01                         byte_57A6:	dc.b 1
00005975 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0000597A 01                         byte_57AC:	dc.b 1
0000597B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005980                            		even
00005980                            		even
00005980                            
00005980                            ; ---------------------------------------------------------------------------
00005980                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005980                            ; ---------------------------------------------------------------------------
00005980                            Map_obj89:
00005980                            	include "_maps\obj89.asm"
00005980                            ; ---------------------------------------------------------------------------
00005980                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005980                            ; ---------------------------------------------------------------------------
00005980 0000                       		dc.w byte_57B4-Map_obj89
00005982 03                         byte_57B4:	dc.b 3
00005983 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005988 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000598D F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005992                            		even
00005992                            		even
00005992                            
00005992                            ; ===========================================================================
00005992                            ; ---------------------------------------------------------------------------
00005992                            ; Credits ending sequence
00005992                            ; ---------------------------------------------------------------------------
00005992                            
00005992                            Credits:				; XREF: GameModeArray
00005992 6100 BAFE                  		bsr.w	ClearPLC
00005996 6100 C4C8                  		bsr.w	Pal_FadeFrom
0000599A 4DF9 00C0 0004             		lea	($C00004).l,a6
000059A0 3CBC 8004                  		move.w	#$8004,(a6)
000059A4 3CBC 8230                  		move.w	#$8230,(a6)
000059A8 3CBC 8407                  		move.w	#$8407,(a6)
000059AC 3CBC 9001                  		move.w	#$9001,(a6)
000059B0 3CBC 9200                  		move.w	#$9200,(a6)
000059B4 3CBC 8B03                  		move.w	#$8B03,(a6)
000059B8 3CBC 8720                  		move.w	#$8720,(a6)
000059BC 4238 F64E                  		clr.b	($FFFFF64E).w
000059C0 6100 B70E                  		bsr.w	ClearScreen
000059C4 43F8 D000                  		lea	($FFFFD000).w,a1
000059C8 7000                       		moveq	#0,d0
000059CA 323C 07FF                  		move.w	#$7FF,d1
000059CE                            
000059CE                            Cred_ClrObjRam:
000059CE 22C0                       		move.l	d0,(a1)+
000059D0 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
000059D4                            
000059D4 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000059DE 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
000059E4 6100 B902                  		bsr.w	NemDec
000059E8 43F8 FB80                  		lea	($FFFFFB80).w,a1
000059EC 7000                       		moveq	#0,d0
000059EE 323C 001F                  		move.w	#$1F,d1
000059F2                            
000059F2                            Cred_ClrPallet:
000059F2 22C0                       		move.l	d0,(a1)+
000059F4 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
000059F8                            
000059F8 7014                       		moveq	#$14,d0
000059FA 6100 C6EA                  		bsr.w	PalLoad1	; load Sonic's pallet
000059FE 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005A04 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
00005A0A 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00005A10 4EB9 0000 0000             		jsr	ObjectsLoad
00005A16 4EB9 0000 0000             		jsr	BuildSprites
00005A1C 6100 0000                  		bsr.w	EndingDemoLoad
00005A20 7000                       		moveq	#0,d0
00005A22 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A26 E948                       		lsl.w	#4,d0
00005A28 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005A2E 45F2 0000                  		lea	(a2,d0.w),a2
00005A32 7000                       		moveq	#0,d0
00005A34 1012                       		move.b	(a2),d0
00005A36 6700                       		beq.s	loc_5862
00005A38 6100 B9FA                  		bsr.w	LoadPLC		; load level patterns
00005A3C                            
00005A3C                            loc_5862:
00005A3C 7001                       		moveq	#1,d0
00005A3E 6100 B9F4                  		bsr.w	LoadPLC		; load standard	level patterns
00005A42 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005A48 6100 C394                  		bsr.w	Pal_FadeTo
00005A4C                            
00005A4C                            Cred_WaitLoop:
00005A4C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005A52 6100 CF46                  		bsr.w	DelayProgram
00005A56 6100 BA48                  		bsr.w	RunPLC_RAM
00005A5A 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005A5E 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005A60 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005A64 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005A66 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005A6C 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005A70 4E75                       		rts	
00005A72                            
00005A72                            ; ---------------------------------------------------------------------------
00005A72                            ; Ending sequence demo loading subroutine
00005A72                            ; ---------------------------------------------------------------------------
00005A72                            
00005A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A72                            
00005A72                            
00005A72                            EndingDemoLoad:				; XREF: Credits
00005A72 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005A76 0240 000F                  		andi.w	#$F,d0
00005A7A D040                       		add.w	d0,d0
00005A7C 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005A80 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005A84 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005A88 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005A8E 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005A90 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005A96 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005A9C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005AA2 7000                       		moveq	#0,d0
00005AA4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005AA8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005AAC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005AB0 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005AB4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005ABA 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005ABC 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005AC2 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005AC6 303C 0008                  		move.w	#8,d0
00005ACA                            
00005ACA                            EndDemo_LampLoad:
00005ACA 24D9                       		move.l	(a1)+,(a2)+
00005ACC 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005AD0                            
00005AD0                            EndDemo_Exit:
00005AD0 4E75                       		rts	
00005AD2                            ; End of function EndingDemoLoad
00005AD2                            
00005AD2                            ; ===========================================================================
00005AD2                            ; ---------------------------------------------------------------------------
00005AD2                            ; Levels used in the end sequence demos
00005AD2                            ; ---------------------------------------------------------------------------
00005AD2                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005AE2                            
00005AE2                            ; ---------------------------------------------------------------------------
00005AE2                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005AE2                            ; ---------------------------------------------------------------------------
00005AE2                            EndDemo_LampVar:
00005AE2 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005AE4 0A00 062C 000D             		dc.w $A00, $62C, $D
00005AEA 0000 0000                  		dc.l 0
00005AEE 0000                       		dc.b 0,	0
00005AF0 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005B04 0101                       		dc.b 1,	1
00005B06                            ; ===========================================================================
00005B06                            ; ---------------------------------------------------------------------------
00005B06                            ; "TRY AGAIN" and "END"	screens
00005B06                            ; ---------------------------------------------------------------------------
00005B06                            
00005B06                            TryAgainEnd:				; XREF: Credits
00005B06 6100 B98A                  		bsr.w	ClearPLC
00005B0A 6100 C354                  		bsr.w	Pal_FadeFrom
00005B0E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B14 3CBC 8004                  		move.w	#$8004,(a6)
00005B18 3CBC 8230                  		move.w	#$8230,(a6)
00005B1C 3CBC 8407                  		move.w	#$8407,(a6)
00005B20 3CBC 9001                  		move.w	#$9001,(a6)
00005B24 3CBC 9200                  		move.w	#$9200,(a6)
00005B28 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B2C 3CBC 8720                  		move.w	#$8720,(a6)
00005B30 4238 F64E                  		clr.b	($FFFFF64E).w
00005B34 6100 B59A                  		bsr.w	ClearScreen
00005B38 43F8 D000                  		lea	($FFFFD000).w,a1
00005B3C 7000                       		moveq	#0,d0
00005B3E 323C 07FF                  		move.w	#$7FF,d1
00005B42                            
00005B42                            TryAg_ClrObjRam:
00005B42 22C0                       		move.l	d0,(a1)+
00005B44 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005B48                            
00005B48 701D                       		moveq	#$1D,d0
00005B4A 6100 BA54                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005B4E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B52 7000                       		moveq	#0,d0
00005B54 323C 001F                  		move.w	#$1F,d1
00005B58                            
00005B58                            TryAg_ClrPallet:
00005B58 22C0                       		move.l	d0,(a1)+
00005B5A 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005B5E                            
00005B5E 7013                       		moveq	#$13,d0
00005B60 6100 C584                  		bsr.w	PalLoad1	; load ending pallet
00005B64 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005B68 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005B6E 4EB9 0000 0000             		jsr	ObjectsLoad
00005B74 4EB9 0000 0000             		jsr	BuildSprites
00005B7A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005B80 6100 C25C                  		bsr.w	Pal_FadeTo
00005B84                            
00005B84                            ; ---------------------------------------------------------------------------
00005B84                            ; "TRY AGAIN" and "END"	screen main loop
00005B84                            ; ---------------------------------------------------------------------------
00005B84                            TryAg_MainLoop:
00005B84 6100 B67C                  		bsr.w	PauseGame
00005B88 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005B8E 6100 CE0A                  		bsr.w	DelayProgram
00005B92 4EB9 0000 0000             		jsr	ObjectsLoad
00005B98 4EB9 0000 0000             		jsr	BuildSprites
00005B9E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005BA4 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005BA6 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005BAA 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005BAC 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005BB2 67D0                       		beq.s	TryAg_MainLoop
00005BB4                            
00005BB4                            TryAg_Exit:
00005BB4 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00005BBA 4E75                       		rts	
00005BBC                            
00005BBC                            ; ===========================================================================
00005BBC                            ; ---------------------------------------------------------------------------
00005BBC                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005BBC                            ; ---------------------------------------------------------------------------
00005BBC                            
00005BBC                            Obj8B:					; XREF: Obj_Index
00005BBC 7000                       		moveq	#0,d0
00005BBE 1028 0024                  		move.b	$24(a0),d0
00005BC2 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005BC6 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005BCA 4EF9 0000 0000             		jmp	DisplaySprite
00005BD0                            ; ===========================================================================
00005BD0 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005BD2 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005BD4 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005BD6 0000                       		dc.w loc_5A8E-Obj8B_Index
00005BD8                            ; ===========================================================================
00005BD8                            
00005BD8                            Obj8B_Main:				; XREF: Obj8B_Index
00005BD8 5428 0024                  		addq.b	#2,$24(a0)
00005BDC 317C 0120 0008             		move.w	#$120,8(a0)
00005BE2 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005BE8 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005BF0 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005BF6 117C 0000 0001             		move.b	#0,1(a0)
00005BFC 117C 0002 0018             		move.b	#2,$18(a0)
00005C02 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005C08 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00005C0E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005C14 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005C16 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00005C1C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005C22 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005C28 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005C2E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005C34                            
00005C34                            Obj8B_Animate:				; XREF: Obj8B_Index
00005C34 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005C3A 4EF9 0000 0000             		jmp	AnimateSprite
00005C40                            ; ===========================================================================
00005C40                            
00005C40                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005C40 5428 0024                  		addq.b	#2,$24(a0)
00005C44 7002                       		moveq	#2,d0
00005C46 0828 0000 001C             		btst	#0,$1C(a0)
00005C4C 6700                       		beq.s	loc_5A6A
00005C4E 4440                       		neg.w	d0
00005C50                            
00005C50                            loc_5A6A:
00005C50 43F8 D800                  		lea	($FFFFD800).w,a1
00005C54 7205                       		moveq	#5,d1
00005C56                            
00005C56                            loc_5A70:
00005C56 1340 003E                  		move.b	d0,$3E(a1)
00005C5A 3400                       		move.w	d0,d2
00005C5C E742                       		asl.w	#3,d2
00005C5E D529 0026                  		add.b	d2,$26(a1)
00005C62 43E9 0040                  		lea	$40(a1),a1
00005C66 51C9 FFEE                  		dbf	d1,loc_5A70
00005C6A 5228 001A                  		addq.b	#1,$1A(a0)
00005C6E 317C 0070 0030             		move.w	#112,$30(a0)
00005C74                            
00005C74                            loc_5A8E:				; XREF: Obj8B_Index
00005C74 5368 0030                  		subq.w	#1,$30(a0)
00005C78 6A00                       		bpl.s	locret_5AA0
00005C7A 0868 0000 001C             		bchg	#0,$1C(a0)
00005C80 117C 0002 0024             		move.b	#2,$24(a0)
00005C86                            
00005C86                            locret_5AA0:
00005C86 4E75                       		rts	
00005C88                            ; ===========================================================================
00005C88                            Ani_obj8B:
00005C88                            	include "_anim\obj8B.asm"
00005C88                            ; ---------------------------------------------------------------------------
00005C88                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005C88                            ; ---------------------------------------------------------------------------
00005C88 0000                       		dc.w byte_5AA8-Ani_obj8B
00005C8A 0000                       		dc.w byte_5AAC-Ani_obj8B
00005C8C 0000                       		dc.w byte_5AB0-Ani_obj8B
00005C8E 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005C92 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005C96 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005CA8                            		even
00005CA8                            		even
00005CA8                            
00005CA8                            ; ===========================================================================
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8                            
00005CA8                            Obj8C:					; XREF: Obj_Index
00005CA8 7000                       		moveq	#0,d0
00005CAA 1028 0024                  		move.b	$24(a0),d0
00005CAE 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005CB2 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005CB6 4EF9 0000 0000             		jmp	DisplaySprite
00005CBC                            ; ===========================================================================
00005CBC 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005CBE 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005CC0                            ; ===========================================================================
00005CC0                            
00005CC0                            Obj8C_Main:				; XREF: Obj8C_Index
00005CC0 2248                       		movea.l	a0,a1
00005CC2 7400                       		moveq	#0,d2
00005CC4 7600                       		moveq	#0,d3
00005CC6 7205                       		moveq	#5,d1
00005CC8 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005CCC                            
00005CCC                            Obj8C_MakeEms:				; XREF: loc_5B42
00005CCC 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005CD0 5429 0024                  		addq.b	#2,$24(a1)
00005CD4 237C 0000 5948 0004        		move.l	#Map_obj88,4(a1)
00005CDC 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005CE2 137C 0000 0001             		move.b	#0,1(a1)
00005CE8 137C 0001 0018             		move.b	#1,$18(a1)
00005CEE 337C 0104 0008             		move.w	#$104,8(a1)
00005CF4 337C 0120 0038             		move.w	#$120,$38(a1)
00005CFA 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005D00 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005D06 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005D0C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005D10                            
00005D10                            Obj8C_ChkEms:
00005D10 7000                       		moveq	#0,d0
00005D12 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005D16 5340                       		subq.w	#1,d0
00005D18 6500                       		bcs.s	loc_5B42
00005D1A                            
00005D1A                            Obj8C_ChkEmLoop:
00005D1A B433 0000                  		cmp.b	(a3,d0.w),d2
00005D1E 6600                       		bne.s	loc_5B3E
00005D20 5202                       		addq.b	#1,d2
00005D22 60EC                       		bra.s	Obj8C_ChkEms
00005D24                            ; ===========================================================================
00005D24                            
00005D24                            loc_5B3E:
00005D24 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005D28                            
00005D28                            loc_5B42:
00005D28 1342 001A                  		move.b	d2,$1A(a1)
00005D2C 5229 001A                  		addq.b	#1,$1A(a1)
00005D30 5202                       		addq.b	#1,d2
00005D32 137C 0080 0026             		move.b	#$80,$26(a1)
00005D38 1343 001E                  		move.b	d3,$1E(a1)
00005D3C 1343 001F                  		move.b	d3,$1F(a1)
00005D40 0643 000A                  		addi.w	#$A,d3
00005D44 43E9 0040                  		lea	$40(a1),a1
00005D48 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005D4C                            
00005D4C                            Obj8C_Move:				; XREF: Obj8C_Index
00005D4C 4A68 003E                  		tst.w	$3E(a0)
00005D50 6700                       		beq.s	locret_5BBA
00005D52 4A28 001E                  		tst.b	$1E(a0)
00005D56 6700                       		beq.s	loc_5B78
00005D58 5328 001E                  		subq.b	#1,$1E(a0)
00005D5C 6600                       		bne.s	loc_5B80
00005D5E                            
00005D5E                            loc_5B78:
00005D5E 3028 003E                  		move.w	$3E(a0),d0
00005D62 D168 0026                  		add.w	d0,$26(a0)
00005D66                            
00005D66                            loc_5B80:
00005D66 1028 0026                  		move.b	$26(a0),d0
00005D6A 6700                       		beq.s	loc_5B8C
00005D6C 0C00 0080                  		cmpi.b	#$80,d0
00005D70 6600                       		bne.s	loc_5B96
00005D72                            
00005D72                            loc_5B8C:
00005D72 4268 003E                  		clr.w	$3E(a0)
00005D76 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005D7C                            
00005D7C                            loc_5B96:
00005D7C 4EB9 0000 29CC             		jsr	(CalcSine).l
00005D82 7800                       		moveq	#0,d4
00005D84 1828 003C                  		move.b	$3C(a0),d4
00005D88 C3C4                       		muls.w	d4,d1
00005D8A E081                       		asr.l	#8,d1
00005D8C C1C4                       		muls.w	d4,d0
00005D8E E080                       		asr.l	#8,d0
00005D90 D268 0038                  		add.w	$38(a0),d1
00005D94 D068 003A                  		add.w	$3A(a0),d0
00005D98 3141 0008                  		move.w	d1,8(a0)
00005D9C 3140 000A                  		move.w	d0,$A(a0)
00005DA0                            
00005DA0                            locret_5BBA:
00005DA0 4E75                       		rts	
00005DA2                            ; ===========================================================================
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            Map_obj8B:
00005DA2                            	include "_maps\obj8B.asm"
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005DA6 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005DAA 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005DAE 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005DB2 08                         byte_5BCC:	dc.b 8
00005DB3 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005DB8 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005DBD E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005DC2 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005DC7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005DCC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005DD1 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005DD6 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005DDB 08                         byte_5BF5:	dc.b 8
00005DDC E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005DE1 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005DE6 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005DEB F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005DF0 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005DF5 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005DFA 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005DFF 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E04 08                         byte_5C1E:	dc.b 8
00005E05 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005E0A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005E0F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005E14 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005E19 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E1E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E23 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E28 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E2D 08                         byte_5C47:	dc.b 8
00005E2E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005E33 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005E38 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005E3D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005E42 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005E47 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005E4C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E51 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E56 0C                         byte_5C70:	dc.b $C
00005E57 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005E5C F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005E61 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005E66 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005E6B ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005E70 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005E75 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005E7A 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005E7F 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005E84 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005E89 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005E8E 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005E93 0A                         byte_5CAD:	dc.b $A
00005E94 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005E99 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005E9E F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005EA3 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005EA8 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005EAD F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005EB2 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005EB7 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005EBC 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005EC1 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005EC6 0A                         byte_5CE0:	dc.b $A
00005EC7 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005ECC E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005ED1 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005ED6 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005EDB E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005EE0 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005EE5 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005EEA 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005EEF 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005EF4 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005EF9 0C                         byte_5D13:	dc.b $C
00005EFA F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005EFF FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005F04 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005F09 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005F0E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005F13 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005F18 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005F1D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005F22 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005F27 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005F2C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005F31 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005F36                            		even
00005F36                            		even
00005F36                            
00005F36                            ; ---------------------------------------------------------------------------
00005F36                            ; Ending sequence demos
00005F36                            ; ---------------------------------------------------------------------------
00005F36                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005F64                            		even
00005F64                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005FA4                            		even
00005FA4                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005FD4                            		even
00005FD4                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006004                            		even
00006004                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006024                            		even
00006024                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006044                            		even
00006044                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006074                            		even
00006074                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000060A4                            		even
000060A4                            
000060A4                            ; ---------------------------------------------------------------------------
000060A4                            ; Subroutine to	load level boundaries and start	locations
000060A4                            ; ---------------------------------------------------------------------------
000060A4                            
000060A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000060A4                            
000060A4                            
000060A4                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000060A4 7000                       		moveq	#0,d0
000060A6 11C0 F740                  		move.b	d0,($FFFFF740).w
000060AA 11C0 F741                  		move.b	d0,($FFFFF741).w
000060AE 11C0 F746                  		move.b	d0,($FFFFF746).w
000060B2 11C0 F748                  		move.b	d0,($FFFFF748).w
000060B6 11C0 F742                  		move.b	d0,($FFFFF742).w
000060BA 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060BE ED08                       		lsl.b	#6,d0
000060C0 E848                       		lsr.w	#4,d0
000060C2 3200                       		move.w	d0,d1
000060C4 D040                       		add.w	d0,d0
000060C6 D041                       		add.w	d1,d0
000060C8 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000060CC 3018                       		move.w	(a0)+,d0
000060CE 31C0 F730                  		move.w	d0,($FFFFF730).w
000060D2 2018                       		move.l	(a0)+,d0
000060D4 21C0 F728                  		move.l	d0,($FFFFF728).w
000060D8 21C0 F720                  		move.l	d0,($FFFFF720).w
000060DC 2018                       		move.l	(a0)+,d0
000060DE 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000060E2 21C0 F724                  		move.l	d0,($FFFFF724).w
000060E6 3038 F728                  		move.w	($FFFFF728).w,d0
000060EA 0640 0240                  		addi.w	#$240,d0
000060EE 31C0 F732                  		move.w	d0,($FFFFF732).w
000060F2 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000060F8 3018                       		move.w	(a0)+,d0
000060FA 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000060FE 6000 0000                  		bra.w	LevSz_ChkLamp
00006102                            ; ===========================================================================
00006102                            ; ---------------------------------------------------------------------------
00006102                            ; Level size array and ending start location array
00006102                            ; ---------------------------------------------------------------------------
00006102                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006252                            		even
00006252                            
00006252                            EndingStLocArray:
00006252                            		incbin	misc\sloc_end.bin
00006272                            		even
00006272                            
00006272                            ; ===========================================================================
00006272                            
00006272                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006272 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006276 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006278 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000627E 3238 D008                  		move.w	($FFFFD008).w,d1
00006282 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006286 6000                       		bra.s	loc_60D0
00006288                            ; ===========================================================================
00006288                            
00006288                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006288 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000628C ED08                       		lsl.b	#6,d0
0000628E E848                       		lsr.w	#4,d0
00006290 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006294 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006298 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000629A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000629E 5340                       		subq.w	#1,d0
000062A0 E548                       		lsl.w	#2,d0
000062A2 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000062A6                            
000062A6                            LevSz_SonicPos:
000062A6 7200                       		moveq	#0,d1
000062A8 3219                       		move.w	(a1)+,d1
000062AA 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000062AE 7000                       		moveq	#0,d0
000062B0 3011                       		move.w	(a1),d0
000062B2 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000062B6                            
000062B6                            loc_60D0:				; XREF: LevSz_ChkLamp
000062B6 0441 00A0                  		subi.w	#$A0,d1
000062BA 6400                       		bcc.s	loc_60D8
000062BC 7200                       		moveq	#0,d1
000062BE                            
000062BE                            loc_60D8:
000062BE 3438 F72A                  		move.w	($FFFFF72A).w,d2
000062C2 B242                       		cmp.w	d2,d1
000062C4 6500                       		bcs.s	loc_60E2
000062C6 3202                       		move.w	d2,d1
000062C8                            
000062C8                            loc_60E2:
000062C8 31C1 F700                  		move.w	d1,($FFFFF700).w
000062CC 0440 0060                  		subi.w	#$60,d0
000062D0 6400                       		bcc.s	loc_60EE
000062D2 7000                       		moveq	#0,d0
000062D4                            
000062D4                            loc_60EE:
000062D4 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000062D8 6D00                       		blt.s	loc_60F8
000062DA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000062DE                            
000062DE                            loc_60F8:
000062DE 31C0 F704                  		move.w	d0,($FFFFF704).w
000062E2 6100 0000                  		bsr.w	BgScrollSpeed
000062E6 7000                       		moveq	#0,d0
000062E8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062EC E508                       		lsl.b	#2,d0
000062EE 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000062F4 6000 0000                  		bra.w	LevSz_Unk
000062F8                            ; ===========================================================================
000062F8                            ; ---------------------------------------------------------------------------
000062F8                            ; Sonic	start location array
000062F8                            ; ---------------------------------------------------------------------------
000062F8                            StartLocArray:	incbin	misc\sloc_lev.bin
00006368                            		even
00006368                            
00006368                            ; ---------------------------------------------------------------------------
00006368                            ; Which	256x256	tiles contain loops or roll-tunnels
00006368                            ; ---------------------------------------------------------------------------
00006368                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006368                            ; loop,	loop, tunnel, tunnel
00006368                            ; ---------------------------------------------------------------------------
00006368                            LoopTileNums:	incbin	misc\loopnums.bin
00006384                            		even
00006384                            
00006384                            ; ===========================================================================
00006384                            
00006384                            LevSz_Unk:				; XREF: LevelSizeLoad
00006384 7000                       		moveq	#0,d0
00006386 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000638A E748                       		lsl.w	#3,d0
0000638C 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006390 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006394 24D9                       		move.l	(a1)+,(a2)+
00006396 24D9                       		move.l	(a1)+,(a2)+
00006398 4E75                       		rts	
0000639A                            ; End of function LevelSizeLoad
0000639A                            
0000639A                            ; ===========================================================================
0000639A 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000063A2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063AA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063B2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063BA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063C2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063CA 0070 0100 0100 0100        		dc.l $700100, $1000100
000063D2                            
000063D2                            ; ---------------------------------------------------------------------------
000063D2                            ; Subroutine to	set scroll speed of some backgrounds
000063D2                            ; ---------------------------------------------------------------------------
000063D2                            
000063D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063D2                            
000063D2                            
000063D2                            BgScrollSpeed:				; XREF: LevelSizeLoad
000063D2 4A38 FE30                  		tst.b	($FFFFFE30).w
000063D6 6600                       		bne.s	loc_6206
000063D8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000063DC 31C0 F714                  		move.w	d0,($FFFFF714).w
000063E0 31C1 F708                  		move.w	d1,($FFFFF708).w
000063E4 31C1 F710                  		move.w	d1,($FFFFF710).w
000063E8 31C1 F718                  		move.w	d1,($FFFFF718).w
000063EC                            
000063EC                            loc_6206:
000063EC 7400                       		moveq	#0,d2
000063EE 1438 FE10                  		move.b	($FFFFFE10).w,d2
000063F2 D442                       		add.w	d2,d2
000063F4 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000063F8 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000063FC                            ; End of function BgScrollSpeed
000063FC                            
000063FC                            ; ===========================================================================
000063FC 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006400 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006404 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006408 0000                       		dc.w BgScroll_End-BgScroll_Index
0000640A                            ; ===========================================================================
0000640A                            
0000640A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000640A 42B8 F708                  		clr.l	($FFFFF708).w
0000640E 42B8 F70C                  		clr.l	($FFFFF70C).w
00006412 42B8 F714                  		clr.l	($FFFFF714).w
00006416 42B8 F71C                  		clr.l	($FFFFF71C).w
0000641A 45F8 A800                  		lea	($FFFFA800).w,a2
0000641E 429A                       		clr.l	(a2)+
00006420 429A                       		clr.l	(a2)+
00006422 429A                       		clr.l	(a2)+
00006424 4E75                       		rts 
00006426                            ; ===========================================================================
00006426                            
00006426                            BgScroll_LZ:				; XREF: BgScroll_Index
00006426 E280                       		asr.l	#1,d0
00006428 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000642C 4E75                       		rts	
0000642E                            ; ===========================================================================
0000642E                            
0000642E                            BgScroll_MZ:				; XREF: BgScroll_Index
0000642E 4E75                       		rts	
00006430                            ; ===========================================================================
00006430                            
00006430                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006430 E280                       		asr.l	#1,d0
00006432 0640 00C0                  		addi.w	#$C0,d0
00006436 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000643A 42B8 F708                  		clr.l	($FFFFF708).w
0000643E 4E75                       		rts	
00006440                            ; ===========================================================================
00006440                            
00006440                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006440 E980                       		asl.l	#4,d0
00006442 2400                       		move.l	d0,d2
00006444 E380                       		asl.l	#1,d0
00006446 D082                       		add.l	d2,d0
00006448 E080                       		asr.l	#8,d0
0000644A 5240                       		addq.w	#1,d0
0000644C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006450 42B8 F708                  		clr.l	($FFFFF708).w
00006454 4E75                       		rts	
00006456                            ; ===========================================================================
00006456                            
00006456                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006456 0240 07F8                  		andi.w	#$7F8,d0
0000645A E640                       		asr.w	#3,d0
0000645C 5240                       		addq.w	#1,d0
0000645E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006462 4E75                       		rts	
00006464                            ; ===========================================================================
00006464                            
00006464                            BgScroll_End:				; XREF: BgScroll_Index
00006464 3038 F700                  		move.w	($FFFFF700).w,d0
00006468 E240                       		asr.w	#1,d0
0000646A 31C0 F708                  		move.w	d0,($FFFFF708).w
0000646E 31C0 F710                  		move.w	d0,($FFFFF710).w
00006472 E440                       		asr.w	#2,d0
00006474 3200                       		move.w	d0,d1
00006476 D040                       		add.w	d0,d0
00006478 D041                       		add.w	d1,d0
0000647A 31C0 F718                  		move.w	d0,($FFFFF718).w
0000647E 42B8 F70C                  		clr.l	($FFFFF70C).w
00006482 42B8 F714                  		clr.l	($FFFFF714).w
00006486 42B8 F71C                  		clr.l	($FFFFF71C).w
0000648A 45F8 A800                  		lea	($FFFFA800).w,a2
0000648E 429A                       		clr.l	(a2)+
00006490 429A                       		clr.l	(a2)+
00006492 429A                       		clr.l	(a2)+
00006494 4E75                       		rts
00006496                            
00006496                            ; ---------------------------------------------------------------------------
00006496                            ; Background layer deformation subroutines
00006496                            ; ---------------------------------------------------------------------------
00006496                            
00006496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006496                            
00006496                            
00006496                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006496 4A38 F744                  		tst.b	($FFFFF744).w
0000649A 6700                       		beq.s	loc_628E
0000649C 4E75                       		rts	
0000649E                            ; ===========================================================================
0000649E                            
0000649E                            loc_628E:
0000649E 4278 F754                  		clr.w	($FFFFF754).w
000064A2 4278 F756                  		clr.w	($FFFFF756).w
000064A6 4278 F758                  		clr.w	($FFFFF758).w
000064AA 4278 F75A                  		clr.w	($FFFFF75A).w
000064AE 6100 0000                  		bsr.w	ScrollHoriz
000064B2 6100 0000                  		bsr.w	ScrollVertical
000064B6 6100 0000                  		bsr.w	DynScrResizeLoad
000064BA 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000064C0 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000064C6 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000064CC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000064D2 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000064D8 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000064DE 7000                       		moveq	#0,d0
000064E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064E4 D040                       		add.w	d0,d0
000064E6 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000064EA 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000064EE                            ; End of function DeformBgLayer
000064EE                            
000064EE                            ; ===========================================================================
000064EE                            ; ---------------------------------------------------------------------------
000064EE                            ; Offset index for background layer deformation	code
000064EE                            ; ---------------------------------------------------------------------------
000064EE 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000064F2 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000064F6 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000064FA 0000                       		dc.w Deform_GHZ-Deform_Index
000064FC                            ; ---------------------------------------------------------------------------
000064FC                            ; Green	Hill Zone background layer deformation code
000064FC                            ; ---------------------------------------------------------------------------
000064FC                            
000064FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064FC                            
000064FC                            
000064FC                            Deform_GHZ:
000064FC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006500 48C4                       		ext.l	d4
00006502 EB84                       		asl.l	#5,d4
00006504 2204                       		move.l	d4,d1
00006506 E384                       		asl.l	#1,d4
00006508 D881                       		add.l	d1,d4
0000650A 7C00                       		moveq	#0,d6
0000650C 6100 0000                  		bsr.w	ScrollBlock6
00006510 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006514 48C4                       		ext.l	d4
00006516 EF84                       		asl.l	#7,d4
00006518 7C00                       		moveq	#0,d6
0000651A 6100 0000                  		bsr.w	ScrollBlock5
0000651E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006522 3038 F704                  		move.w	($FFFFF704).w,d0
00006526 0240 07FF                  		andi.w	#$7FF,d0
0000652A EA48                       		lsr.w	#5,d0
0000652C 4440                       		neg.w	d0
0000652E 0640 0020                  		addi.w	#$20,d0	; ' '
00006532 6A00                       		bpl.s	Deform_GHZ_1
00006534 7000                       		moveq	#0,d0
00006536                            
00006536                            Deform_GHZ_1:				; XREF: Deform_GHZ
00006536 3800                       		move.w	d0,d4
00006538 31C0 F618                  		move.w	d0,($FFFFF618).w
0000653C 3038 F700                  		move.w	($FFFFF700).w,d0
00006540 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006546 6600                       		bne.s	Deform_GHZ_2
00006548 7000                       		moveq	#0,d0
0000654A                            
0000654A                            Deform_GHZ_2:				; XREF: Deform_GHZ
0000654A 4440                       		neg.w	d0
0000654C 4840                       		swap	d0
0000654E 45F8 A800                  		lea	($FFFFA800).w,a2
00006552 069A 0001 0000             		addi.l	#$10000,(a2)+
00006558 069A 0000 C000             		addi.l	#$C000,(a2)+
0000655E 069A 0000 8000             		addi.l	#$8000,(a2)+
00006564 3038 A800                  		move.w	($FFFFA800).w,d0
00006568 D078 F718                  		add.w	($FFFFF718).w,d0
0000656C 4440                       		neg.w	d0
0000656E 323C 001F                  		move.w	#$1F,d1
00006572 9244                       		sub.w	d4,d1
00006574 6500                       		bcs.s	Deform_GHZ_4
00006576                            
00006576                            Deform_GHZ_3:				; XREF: Deform_GHZ
00006576 22C0                       		move.l	d0,(a1)+
00006578 51C9 FFFC                  		dbf	d1,Deform_GHZ_3
0000657C                            
0000657C                            Deform_GHZ_4:				; XREF: Deform_GHZ
0000657C 3038 A804                  		move.w	($FFFFA804).w,d0
00006580 D078 F718                  		add.w	($FFFFF718).w,d0
00006584 4440                       		neg.w	d0
00006586 323C 000F                  		move.w	#$F,d1
0000658A                            
0000658A                            Deform_GHZ_5:				; XREF: Deform_GHZ
0000658A 22C0                       		move.l	d0,(a1)+
0000658C 51C9 FFFC                  		dbf	d1,Deform_GHZ_5
00006590 3038 A808                  		move.w	($FFFFA808).w,d0
00006594 D078 F718                  		add.w	($FFFFF718).w,d0
00006598 4440                       		neg.w	d0
0000659A 323C 000F                  		move.w	#$F,d1
0000659E                            
0000659E                            Deform_GHZ_6:				; XREF: Deform_GHZ
0000659E 22C0                       		move.l	d0,(a1)+
000065A0 51C9 FFFC                  		dbf	d1,Deform_GHZ_6
000065A4 323C 002F                  		move.w	#$2F,d1	; '/'
000065A8 3038 F718                  		move.w	($FFFFF718).w,d0
000065AC 4440                       		neg.w	d0
000065AE                            
000065AE                            Deform_GHZ_7:				; XREF: Deform_GHZ
000065AE 22C0                       		move.l	d0,(a1)+
000065B0 51C9 FFFC                  		dbf	d1,Deform_GHZ_7
000065B4 323C 0027                  		move.w	#$27,d1	; '''
000065B8 3038 F710                  		move.w	($FFFFF710).w,d0
000065BC 4440                       		neg.w	d0
000065BE                            
000065BE                            Deform_GHZ_8:				; XREF: Deform_GHZ
000065BE 22C0                       		move.l	d0,(a1)+
000065C0 51C9 FFFC                  		dbf	d1,Deform_GHZ_8
000065C4 3038 F710                  		move.w	($FFFFF710).w,d0
000065C8 3438 F700                  		move.w	($FFFFF700).w,d2
000065CC 9440                       		sub.w	d0,d2
000065CE 48C2                       		ext.l	d2
000065D0 E182                       		asl.l	#8,d2
000065D2 85FC 0068                  		divs.w	#$68,d2	; 'h'
000065D6 48C2                       		ext.l	d2
000065D8 E182                       		asl.l	#8,d2
000065DA 7600                       		moveq	#0,d3
000065DC 3600                       		move.w	d0,d3
000065DE 323C 0047                  		move.w	#$47,d1	; 'G'
000065E2 D244                       		add.w	d4,d1
000065E4                            
000065E4                            Deform_GHZ_9:				; XREF: Deform_GHZ
000065E4 3003                       		move.w	d3,d0
000065E6 4440                       		neg.w	d0
000065E8 22C0                       		move.l	d0,(a1)+
000065EA 4843                       		swap	d3
000065EC D682                       		add.l	d2,d3
000065EE 4843                       		swap	d3
000065F0 51C9 FFF2                  		dbf	d1,Deform_GHZ_9
000065F4 4E75                       		rts	
000065F6                            ; End of function Deform_GHZ
000065F6                            
000065F6                            ; ===========================================================================
000065F6                            ; ---------------------------------------------------------------------------
000065F6                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
000065F6                            ; ---------------------------------------------------------------------------
000065F6                            
000065F6                            Deform_LZ:
000065F6 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
000065F8 3838 F73A                  		move.w	($FFFFF73A).w,d4			; load horizontal movement distance (Since last frame)
000065FC 48C4                       		ext.l	d4					; extend to long-word signed
000065FE E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
00006600 3A38 F73C                  		move.w	($FFFFF73C).w,d5			; load vertical movement distance (Since last frame)
00006604 48C5                       		ext.l	d5					; extend to long-word signed
00006606 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
00006608 6100 0000                  		bsr.w	ScrollBlock1				; adjust BG scroll positions (and set draw code direction flags)
0000660C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w		; set BG V-scroll position
00006612 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load H-scroll buffer
00006616 3038 F700                  		move.w	($FFFFF700).w,d0			; load FG X position
0000661A 4440                       		neg.w	d0					; reverse
0000661C 4840                       		swap	d0					; send to upper word
0000661E 3038 F708                  		move.w	($FFFFF708).w,d0			; load BG X position
00006622 4440                       		neg.w	d0					; reverse
00006624 7600                       		moveq	#$00,d3					; clear d3
00006626 1638 F7D8                  		move.b	($FFFFF7D8).w,d3			; load wave-scroll timer
0000662A 0678 0080 F7D8             		addi.w	#$0080,($FFFFF7D8).w			; increase wave-scroll timer
00006630 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
00006634 3238 F646                  		move.w	($FFFFF646).w,d1			; load water line position
00006638 9278 F704                  		sub.w	($FFFFF704).w,d1			; minus FG Y position
0000663C 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
0000663E B242                       		cmp.w	d2,d1					; is the water line below the screen?
00006640 6F00                       		ble.s	DLZ_NoWater				; if not, branch
00006642 3202                       		move.w	d2,d1					; set at maximum
00006644                            
00006644                            DLZ_NoWater:
00006644 9441                       		sub.w	d1,d2					; subtract from water-line count
00006646 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
00006648 5301                       		subq.b	#$01,d1					; decrease above water count
0000664A 6500                       		bcs.s	DLZ_Water				; if finished, branch
0000664C                            
0000664C                            DLZ_Above:
0000664C 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
0000664E 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
00006652                            
00006652                            DLZ_Water:
00006652 5302                       		subq.b	#$01,d2					; decrease below water count
00006654 6500                       		bcs.s	DLZ_Finish				; if finished, branch
00006656 3200                       		move.w	d0,d1					; copy BG position back to d1
00006658 4840                       		swap	d0					; move FG position back to lower word in d0
0000665A 3803                       		move.w	d3,d4					; copy sroll timer for BG use
0000665C D638 F705                  		add.b	($FFFFF704+$01).w,d3			; add FG Y position
00006660 D838 F70D                  		add.b	($FFFFF70C+$01).w,d4			; add BG Y position
00006664 D643                       		add.w	d3,d3					; multiply by word size (2)
00006666 D844                       		add.w	d4,d4					; ''
00006668 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
0000666E D6C4                       		adda.w	d4,a3					; advance to correct starting point
00006670 1813                       		move.b	(a3),d4					; get current position byte
00006672 E404                       		asr.b	#$02,d4					; get only the position bits
00006674 4884                       		ext.w	d4					; extend to word
00006676 D244                       		add.w	d4,d1					; adjust BG's current position
00006678 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
0000667C 1812                       		move.b	(a2),d4					; get current position byte
0000667E E404                       		asr.b	#$02,d4					; get only the position bits
00006680 4884                       		ext.w	d4					; extend to word
00006682 D044                       		add.w	d4,d0					; adjust FG's current position
00006684                            
00006684                            DLZ_Below:
00006684 D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
00006686 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
00006688 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
0000668A 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
0000668C 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
00006690                            
00006690                            DLZ_Finish:
00006690 4E75                       		rts						; return
00006692                            
00006692                            ; ---------------------------------------------------------------------------
00006692                            ; Scroll data for the FG
00006692                            ; ---------------------------------------------------------------------------
00006692                            
00006692                            DLZ_WaveFG:
00006692                            		rept	$02
00006692                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692 0001 0400 0401 0800 0801+  		endr
00006A92                            
00006A92                            ; ---------------------------------------------------------------------------
00006A92                            ; Scroll data for the BG
00006A92                            ; ---------------------------------------------------------------------------
00006A92                            
00006A92                            DLZ_WaveBG:	rept	$04
00006A92                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
00006A92                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
00006A92                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
00006A92                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
00006A92                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
00006A92                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
00006A92                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
00006A92                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
00006A92 FC01 0000 0000 0000 0000+  		endr
00006E92                            
00006E92                            ; ===========================================================================
00006E92                            
00006E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E92                            
00006E92                            
00006E92                            Deform_MZ:
00006E92 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E96 48C4                       		ext.l	d4
00006E98 ED84                       		asl.l	#6,d4
00006E9A 2204                       		move.l	d4,d1
00006E9C E384                       		asl.l	#1,d4
00006E9E D881                       		add.l	d1,d4
00006EA0 7C02                       		moveq	#2,d6
00006EA2 6100 0000                  		bsr.w	ScrollBlock4
00006EA6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EAA 48C4                       		ext.l	d4
00006EAC ED84                       		asl.l	#6,d4
00006EAE 7C06                       		moveq	#6,d6
00006EB0 6100 0000                  		bsr.w	ScrollBlock6
00006EB4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EB8 48C4                       		ext.l	d4
00006EBA EF84                       		asl.l	#7,d4
00006EBC 7C04                       		moveq	#4,d6
00006EBE 6100 0000                  		bsr.w	ScrollBlock5
00006EC2 303C 0200                  		move.w	#$200,d0
00006EC6 3238 F704                  		move.w	($FFFFF704).w,d1
00006ECA 0441 01C8                  		subi.w	#$1C8,d1
00006ECE 6500                       		bcs.s	Deform_MZ_1
00006ED0 3401                       		move.w	d1,d2
00006ED2 D241                       		add.w	d1,d1
00006ED4 D242                       		add.w	d2,d1
00006ED6 E441                       		asr.w	#2,d1
00006ED8 D041                       		add.w	d1,d0
00006EDA                            
00006EDA                            Deform_MZ_1:				; XREF: Deform_MZ
00006EDA 31C0 F714                  		move.w	d0,($FFFFF714).w
00006EDE 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00006EE2 6100 0000                  		bsr.w	ScrollBlock3
00006EE6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006EEC 1038 F756                  		move.b	($FFFFF756).w,d0
00006EF0 8038 F758                  		or.b	($FFFFF758).w,d0
00006EF4 8138 F75A                  		or.b	d0,($FFFFF75A).w
00006EF8 4238 F756                  		clr.b	($FFFFF756).w
00006EFC 4238 F758                  		clr.b	($FFFFF758).w
00006F00 43F8 A800                  		lea	($FFFFA800).w,a1
00006F04 3438 F700                  		move.w	($FFFFF700).w,d2
00006F08 4442                       		neg.w	d2
00006F0A 3002                       		move.w	d2,d0
00006F0C E440                       		asr.w	#2,d0
00006F0E 9042                       		sub.w	d2,d0
00006F10 48C0                       		ext.l	d0
00006F12 E780                       		asl.l	#3,d0
00006F14 81FC 0005                  		divs.w	#5,d0
00006F18 48C0                       		ext.l	d0
00006F1A E980                       		asl.l	#4,d0
00006F1C E180                       		asl.l	#8,d0
00006F1E 7600                       		moveq	#0,d3
00006F20 3602                       		move.w	d2,d3
00006F22 E243                       		asr.w	#1,d3
00006F24 323C 0004                  		move.w	#4,d1
00006F28                            
00006F28                            Deform_MZ_2:				; XREF: Deform_MZ
00006F28 32C3                       		move.w	d3,(a1)+
00006F2A 4843                       		swap	d3
00006F2C D680                       		add.l	d0,d3
00006F2E 4843                       		swap	d3
00006F30 51C9 FFF6                  		dbf	d1,Deform_MZ_2
00006F34 3038 F718                  		move.w	($FFFFF718).w,d0
00006F38 4440                       		neg.w	d0
00006F3A 323C 0001                  		move.w	#1,d1
00006F3E                            
00006F3E                            Deform_MZ_3:				; XREF: Deform_MZ
00006F3E 32C0                       		move.w	d0,(a1)+
00006F40 51C9 FFFC                  		dbf	d1,Deform_MZ_3
00006F44 3038 F710                  		move.w	($FFFFF710).w,d0
00006F48 4440                       		neg.w	d0
00006F4A 323C 0008                  		move.w	#8,d1
00006F4E                            
00006F4E                            Deform_MZ_4:				; XREF: Deform_MZ
00006F4E 32C0                       		move.w	d0,(a1)+
00006F50 51C9 FFFC                  		dbf	d1,Deform_MZ_4
00006F54 3038 F708                  		move.w	($FFFFF708).w,d0
00006F58 4440                       		neg.w	d0
00006F5A 323C 000F                  		move.w	#$F,d1
00006F5E                            
00006F5E                            Deform_MZ_5:				; XREF: Deform_MZ
00006F5E 32C0                       		move.w	d0,(a1)+
00006F60 51C9 FFFC                  		dbf	d1,Deform_MZ_5
00006F64 45F8 A800                  		lea	($FFFFA800).w,a2
00006F68 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006F6C 0440 0200                  		subi.w	#$200,d0
00006F70 3400                       		move.w	d0,d2
00006F72 0C40 0100                  		cmpi.w	#$100,d0
00006F76 6500                       		bcs.s	Deform_MZ_6
00006F78 303C 0100                  		move.w	#$100,d0
00006F7C                            
00006F7C                            Deform_MZ_6:				; XREF: Deform_MZ
00006F7C 0240 01F0                  		andi.w	#$1F0,d0
00006F80 E648                       		lsr.w	#3,d0
00006F82 45F2 0000                  		lea	(a2,d0.w),a2
00006F86 6000 0000                  		bra.w	Deform_All
00006F8A                            ; ===========================================================================
00006F8A                            
00006F8A                            Deform_SLZ:
00006F8A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006F8E 48C5                       		ext.l	d5
00006F90 EF85                       		asl.l	#7,d5
00006F92 6100 0000                  		bsr.w	ScrollBlock2
00006F96 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006F9C 43F8 A800                  		lea	($FFFFA800).w,a1
00006FA0 3438 F700                  		move.w	($FFFFF700).w,d2
00006FA4 4442                       		neg.w	d2
00006FA6 3002                       		move.w	d2,d0
00006FA8 E640                       		asr.w	#3,d0
00006FAA 9042                       		sub.w	d2,d0
00006FAC 48C0                       		ext.l	d0
00006FAE E980                       		asl.l	#4,d0
00006FB0 81FC 001C                  		divs.w	#$1C,d0
00006FB4 48C0                       		ext.l	d0
00006FB6 E980                       		asl.l	#4,d0
00006FB8 E180                       		asl.l	#8,d0
00006FBA 7600                       		moveq	#0,d3
00006FBC 3602                       		move.w	d2,d3
00006FBE 323C 001B                  		move.w	#$1B,d1
00006FC2                            
00006FC2                            Deform_SLZ_1:				; XREF: Deform_MZ
00006FC2 32C3                       		move.w	d3,(a1)+
00006FC4 4843                       		swap	d3
00006FC6 D680                       		add.l	d0,d3
00006FC8 4843                       		swap	d3
00006FCA 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
00006FCE 3002                       		move.w	d2,d0
00006FD0 E640                       		asr.w	#3,d0
00006FD2 3200                       		move.w	d0,d1
00006FD4 E241                       		asr.w	#1,d1
00006FD6 D041                       		add.w	d1,d0
00006FD8 323C 0004                  		move.w	#4,d1
00006FDC                            
00006FDC                            Deform_SLZ_2:				; XREF: Deform_MZ
00006FDC 32C0                       		move.w	d0,(a1)+
00006FDE 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
00006FE2 3002                       		move.w	d2,d0
00006FE4 E440                       		asr.w	#2,d0
00006FE6 323C 0004                  		move.w	#4,d1
00006FEA                            
00006FEA                            Deform_SLZ_3:				; XREF: Deform_MZ
00006FEA 32C0                       		move.w	d0,(a1)+
00006FEC 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
00006FF0 3002                       		move.w	d2,d0
00006FF2 E240                       		asr.w	#1,d0
00006FF4 323C 001D                  		move.w	#$1D,d1
00006FF8                            
00006FF8                            Deform_SLZ_4:				; XREF: Deform_MZ
00006FF8 32C0                       		move.w	d0,(a1)+
00006FFA 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
00006FFE 45F8 A800                  		lea	($FFFFA800).w,a2
00007002 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007006 3400                       		move.w	d0,d2
00007008 0440 00C0                  		subi.w	#$C0,d0	; 'À'
0000700C 0240 03F0                  		andi.w	#$3F0,d0
00007010 E648                       		lsr.w	#3,d0
00007012 45F2 0000                  		lea	(a2,d0.w),a2
00007016                            
00007016                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
00007016 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000701A 323C 000E                  		move.w	#$E,d1
0000701E 3038 F700                  		move.w	($FFFFF700).w,d0
00007022 4440                       		neg.w	d0
00007024 4840                       		swap	d0
00007026 0242 000F                  		andi.w	#$F,d2
0000702A D442                       		add.w	d2,d2
0000702C 301A                       		move.w	(a2)+,d0
0000702E 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
00007032                            ; End of function Deform_MZ
00007032                            
00007032                            ; ===========================================================================
00007032                            
00007032                            Deform_All_1:				; XREF: Deform_All
00007032 301A                       		move.w	(a2)+,d0
00007034                            
00007034                            Deform_All_2:
00007034 22C0                       		move.l	d0,(a1)+
00007036 22C0                       		move.l	d0,(a1)+
00007038 22C0                       		move.l	d0,(a1)+
0000703A 22C0                       		move.l	d0,(a1)+
0000703C 22C0                       		move.l	d0,(a1)+
0000703E 22C0                       		move.l	d0,(a1)+
00007040 22C0                       		move.l	d0,(a1)+
00007042 22C0                       		move.l	d0,(a1)+
00007044 22C0                       		move.l	d0,(a1)+
00007046 22C0                       		move.l	d0,(a1)+
00007048 22C0                       		move.l	d0,(a1)+
0000704A 22C0                       		move.l	d0,(a1)+
0000704C 22C0                       		move.l	d0,(a1)+
0000704E 22C0                       		move.l	d0,(a1)+
00007050 22C0                       		move.l	d0,(a1)+
00007052 22C0                       		move.l	d0,(a1)+
00007054 51C9 FFDC                  		dbf	d1,Deform_All_1
00007058 4E75                       		rts	
0000705A                            
0000705A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000705A                            
0000705A                            
0000705A                            Deform_SYZ:
0000705A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000705E 48C5                       		ext.l	d5
00007060 E985                       		asl.l	#4,d5
00007062 2205                       		move.l	d5,d1
00007064 E385                       		asl.l	#1,d5
00007066 DA81                       		add.l	d1,d5
00007068 6100 0000                  		bsr.w	ScrollBlock2
0000706C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007072 43F8 A800                  		lea	($FFFFA800).w,a1
00007076 3438 F700                  		move.w	($FFFFF700).w,d2
0000707A 4442                       		neg.w	d2
0000707C 3002                       		move.w	d2,d0
0000707E E640                       		asr.w	#3,d0
00007080 9042                       		sub.w	d2,d0
00007082 48C0                       		ext.l	d0
00007084 E780                       		asl.l	#3,d0
00007086 81FC 0008                  		divs.w	#8,d0
0000708A 48C0                       		ext.l	d0
0000708C E980                       		asl.l	#4,d0
0000708E E180                       		asl.l	#8,d0
00007090 7600                       		moveq	#0,d3
00007092 3602                       		move.w	d2,d3
00007094 E243                       		asr.w	#1,d3
00007096 323C 0007                  		move.w	#7,d1
0000709A                            
0000709A                            Deform_SYZ_1:				; XREF: Deform_SYZ
0000709A 32C3                       		move.w	d3,(a1)+
0000709C 4843                       		swap	d3
0000709E D680                       		add.l	d0,d3
000070A0 4843                       		swap	d3
000070A2 51C9 FFF6                  		dbf	d1,Deform_SYZ_1
000070A6 3002                       		move.w	d2,d0
000070A8 E640                       		asr.w	#3,d0
000070AA 323C 0004                  		move.w	#4,d1
000070AE                            
000070AE                            Deform_SYZ_2:				; XREF: Deform_SYZ
000070AE 32C0                       		move.w	d0,(a1)+
000070B0 51C9 FFFC                  		dbf	d1,Deform_SYZ_2
000070B4 3002                       		move.w	d2,d0
000070B6 E440                       		asr.w	#2,d0
000070B8 323C 0005                  		move.w	#5,d1
000070BC                            
000070BC                            Deform_SYZ_3:				; XREF: Deform_SYZ
000070BC 32C0                       		move.w	d0,(a1)+
000070BE 51C9 FFFC                  		dbf	d1,Deform_SYZ_3
000070C2 3002                       		move.w	d2,d0
000070C4 3202                       		move.w	d2,d1
000070C6 E241                       		asr.w	#1,d1
000070C8 9041                       		sub.w	d1,d0
000070CA 48C0                       		ext.l	d0
000070CC E980                       		asl.l	#4,d0
000070CE 81FC 000E                  		divs.w	#$E,d0
000070D2 48C0                       		ext.l	d0
000070D4 E980                       		asl.l	#4,d0
000070D6 E180                       		asl.l	#8,d0
000070D8 7600                       		moveq	#0,d3
000070DA 3602                       		move.w	d2,d3
000070DC E243                       		asr.w	#1,d3
000070DE 323C 000D                  		move.w	#$D,d1
000070E2                            
000070E2                            Deform_SYZ_4:				; XREF: Deform_SYZ
000070E2 32C3                       		move.w	d3,(a1)+
000070E4 4843                       		swap	d3
000070E6 D680                       		add.l	d0,d3
000070E8 4843                       		swap	d3
000070EA 51C9 FFF6                  		dbf	d1,Deform_SYZ_4
000070EE 45F8 A800                  		lea	($FFFFA800).w,a2
000070F2 3038 F70C                  		move.w	($FFFFF70C).w,d0
000070F6 3400                       		move.w	d0,d2
000070F8 0240 01F0                  		andi.w	#$1F0,d0
000070FC E648                       		lsr.w	#3,d0
000070FE 45F2 0000                  		lea	(a2,d0.w),a2
00007102 6000 FF12                  		bra.w	Deform_All
00007106                            ; End of function Deform_SYZ
00007106                            
00007106                            
00007106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007106                            
00007106                            
00007106                            Deform_SBZ:
00007106 4A38 FE11                  		tst.b	($FFFFFE11).w
0000710A 6600 0000                  		bne.w	Deform_SBZ_Act2
0000710E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007112 48C4                       		ext.l	d4
00007114 EF84                       		asl.l	#7,d4
00007116 7C02                       		moveq	#2,d6
00007118 6100 0000                  		bsr.w	ScrollBlock4
0000711C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007120 48C4                       		ext.l	d4
00007122 ED84                       		asl.l	#6,d4
00007124 7C06                       		moveq	#6,d6
00007126 6100 0000                  		bsr.w	ScrollBlock6
0000712A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000712E 48C4                       		ext.l	d4
00007130 EB84                       		asl.l	#5,d4
00007132 2204                       		move.l	d4,d1
00007134 E384                       		asl.l	#1,d4
00007136 D881                       		add.l	d1,d4
00007138 7C04                       		moveq	#4,d6
0000713A 6100 0000                  		bsr.w	ScrollBlock5
0000713E 7800                       		moveq	#0,d4
00007140 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007144 48C5                       		ext.l	d5
00007146 EB85                       		asl.l	#5,d5
00007148 6100 0000                  		bsr.w	ScrollBlock1_2
0000714C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007150 31C0 F714                  		move.w	d0,($FFFFF714).w
00007154 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00007158 31C0 F618                  		move.w	d0,($FFFFF618).w
0000715C 1038 F756                  		move.b	($FFFFF756).w,d0
00007160 8038 F75A                  		or.b	($FFFFF75A).w,d0
00007164 8138 F758                  		or.b	d0,($FFFFF758).w
00007168 4238 F756                  		clr.b	($FFFFF756).w
0000716C 4238 F75A                  		clr.b	($FFFFF75A).w
00007170 43F8 A800                  		lea	($FFFFA800).w,a1
00007174 3438 F700                  		move.w	($FFFFF700).w,d2
00007178 4442                       		neg.w	d2
0000717A E442                       		asr.w	#2,d2
0000717C 3002                       		move.w	d2,d0
0000717E E240                       		asr.w	#1,d0
00007180 9042                       		sub.w	d2,d0
00007182 48C0                       		ext.l	d0
00007184 E780                       		asl.l	#3,d0
00007186 81FC 0004                  		divs.w	#4,d0
0000718A 48C0                       		ext.l	d0
0000718C E980                       		asl.l	#4,d0
0000718E E180                       		asl.l	#8,d0
00007190 7600                       		moveq	#0,d3
00007192 3602                       		move.w	d2,d3
00007194 323C 0003                  		move.w	#3,d1
00007198                            
00007198                            Deform_SBZ_1:				; XREF: Deform_SBZ
00007198 32C3                       		move.w	d3,(a1)+
0000719A 4843                       		swap	d3
0000719C D680                       		add.l	d0,d3
0000719E 4843                       		swap	d3
000071A0 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
000071A4 3038 F718                  		move.w	($FFFFF718).w,d0
000071A8 4440                       		neg.w	d0
000071AA 323C 0009                  		move.w	#9,d1
000071AE                            
000071AE                            Deform_SBZ_2:				; XREF: Deform_SBZ
000071AE 32C0                       		move.w	d0,(a1)+
000071B0 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
000071B4 3038 F710                  		move.w	($FFFFF710).w,d0
000071B8 4440                       		neg.w	d0
000071BA 323C 0006                  		move.w	#6,d1
000071BE                            
000071BE                            Deform_SBZ_3:				; XREF: Deform_SBZ
000071BE 32C0                       		move.w	d0,(a1)+
000071C0 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
000071C4 3038 F708                  		move.w	($FFFFF708).w,d0
000071C8 4440                       		neg.w	d0
000071CA 323C 000A                  		move.w	#$A,d1
000071CE                            
000071CE                            Deform_SBZ_4:				; XREF: Deform_SBZ
000071CE 32C0                       		move.w	d0,(a1)+
000071D0 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
000071D4 45F8 A800                  		lea	($FFFFA800).w,a2
000071D8 3038 F70C                  		move.w	($FFFFF70C).w,d0
000071DC 3400                       		move.w	d0,d2
000071DE 0240 01F0                  		andi.w	#$1F0,d0
000071E2 E648                       		lsr.w	#3,d0
000071E4 45F2 0000                  		lea	(a2,d0.w),a2
000071E8 6000 FE2C                  		bra.w	Deform_All
000071EC                            ; ===========================================================================
000071EC                            
000071EC                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
000071EC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000071F0 48C4                       		ext.l	d4
000071F2 ED84                       		asl.l	#6,d4
000071F4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000071F8 48C5                       		ext.l	d5
000071FA EB85                       		asl.l	#5,d5
000071FC 6100 0000                  		bsr.w	ScrollBlock1
00007200 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007206 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000720A 323C 00DF                  		move.w	#$DF,d1	; 'ß'
0000720E 3038 F700                  		move.w	($FFFFF700).w,d0
00007212 4440                       		neg.w	d0
00007214 4840                       		swap	d0
00007216 3038 F708                  		move.w	($FFFFF708).w,d0
0000721A 4440                       		neg.w	d0
0000721C                            
0000721C                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
0000721C 22C0                       		move.l	d0,(a1)+
0000721E 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
00007222 4E75                       		rts	
00007224                            ; End of function Deform_SBZ
00007224                            
00007224                            ; ---------------------------------------------------------------------------
00007224                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007224                            ; ---------------------------------------------------------------------------
00007224                            
00007224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007224                            
00007224                            
00007224                            ScrollHoriz:				; XREF: DeformBgLayer
00007224 3838 F700                  		move.w	($FFFFF700).w,d4
00007228 6100                       		bsr.s	ScrollHoriz2
0000722A 3038 F700                  		move.w	($FFFFF700).w,d0
0000722E 0240 0010                  		andi.w	#$10,d0
00007232 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007236 B300                       		eor.b	d1,d0
00007238 6600                       		bne.s	locret_65B0
0000723A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00007240 3038 F700                  		move.w	($FFFFF700).w,d0
00007244 9044                       		sub.w	d4,d0
00007246 6A00                       		bpl.s	loc_65AA
00007248 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000724E 4E75                       		rts	
00007250                            ; ===========================================================================
00007250                            
00007250                            loc_65AA:
00007250 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007256                            
00007256                            locret_65B0:
00007256 4E75                       		rts	
00007258                            ; End of function ScrollHoriz
00007258                            
00007258                            
00007258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007258                            
00007258                            
00007258                            ScrollHoriz2:				; XREF: ScrollHoriz
00007258 3038 D008                  		move.w	($FFFFD008).w,d0
0000725C 9078 F700                  		sub.w	($FFFFF700).w,d0
00007260 0440 0090                  		subi.w	#$90,d0
00007264 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
00007266 0440 0010                  		subi.w	#$10,d0
0000726A 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
0000726C 4278 F73A                  		clr.w	($FFFFF73A).w
00007270 4E75                       		rts
00007272                            ; ===========================================================================
00007272                            
00007272                            loc_65CC:
00007272 0C40 0010                  		cmpi.w	#$10,d0
00007276 6500                       		bcs.s	loc_65D6
00007278 303C 0010                  		move.w	#$10,d0
0000727C                            
0000727C                            loc_65D6:
0000727C D078 F700                  		add.w	($FFFFF700).w,d0
00007280 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007284 6D00                       		blt.s	loc_65E4
00007286 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000728A                            
0000728A                            loc_65E4:
0000728A 3200                       		move.w	d0,d1
0000728C 9278 F700                  		sub.w	($FFFFF700).w,d1
00007290 E141                       		asl.w	#8,d1
00007292 31C0 F700                  		move.w	d0,($FFFFF700).w
00007296 31C1 F73A                  		move.w	d1,($FFFFF73A).w
0000729A 4E75                       		rts	
0000729C                            ; ===========================================================================
0000729C                            
0000729C                            loc_65F6:				; XREF: ScrollHoriz2
0000729C D078 F700                  		add.w	($FFFFF700).w,d0
000072A0 B078 F728                  		cmp.w	($FFFFF728).w,d0
000072A4 6EE4                       		bgt.s	loc_65E4
000072A6 3038 F728                  		move.w	($FFFFF728).w,d0
000072AA 60DE                       		bra.s	loc_65E4
000072AC                            ; End of function ScrollHoriz2
000072AC                            
000072AC                            ; ===========================================================================
000072AC 4A40                       		tst.w	d0
000072AE 6A00                       		bpl.s	loc_6610
000072B0 303C FFFE                  		move.w	#-2,d0
000072B4 60E6                       		bra.s	loc_65F6
000072B6                            ; ===========================================================================
000072B6                            
000072B6                            loc_6610:
000072B6 303C 0002                  		move.w	#2,d0
000072BA 60B6                       		bra.s	loc_65CC
000072BC                            
000072BC                            ; ---------------------------------------------------------------------------
000072BC                            ; Subroutine to	scroll the level vertically as Sonic moves
000072BC                            ; ---------------------------------------------------------------------------
000072BC                            
000072BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072BC                            
000072BC                            
000072BC                            ScrollVertical:				; XREF: DeformBgLayer
000072BC 7200                       		moveq	#0,d1
000072BE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000072C2 9078 F704                  		sub.w	($FFFFF704).w,d0
000072C6 0838 0002 D022             		btst	#2,($FFFFD022).w
000072CC 6700                       		beq.s	loc_662A
000072CE 5B40                       		subq.w	#5,d0
000072D0                            
000072D0                            loc_662A:
000072D0 0838 0001 D022             		btst	#1,($FFFFD022).w
000072D6 6700                       		beq.s	loc_664A
000072D8 0640 0020                  		addi.w	#$20,d0
000072DC 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000072E0 6500                       		bcs.s	loc_6696
000072E2 0440 0040                  		subi.w	#$40,d0
000072E6 6400                       		bcc.s	loc_6696
000072E8 4A38 F75C                  		tst.b	($FFFFF75C).w
000072EC 6600                       		bne.s	loc_66A8
000072EE 6000                       		bra.s	loc_6656
000072F0                            ; ===========================================================================
000072F0                            
000072F0                            loc_664A:
000072F0 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000072F4 6600                       		bne.s	loc_665C
000072F6 4A38 F75C                  		tst.b	($FFFFF75C).w
000072FA 6600                       		bne.s	loc_66A8
000072FC                            
000072FC                            loc_6656:
000072FC 4278 F73C                  		clr.w	($FFFFF73C).w
00007300 4E75                       		rts	
00007302                            ; ===========================================================================
00007302                            
00007302                            loc_665C:
00007302 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007308 6600                       		bne.s	loc_6684
0000730A 3238 D020                  		move.w	($FFFFD020).w,d1
0000730E 6A00                       		bpl.s	loc_666C
00007310 4441                       		neg.w	d1
00007312                            
00007312                            loc_666C:
00007312 0C41 0800                  		cmpi.w	#$800,d1
00007316 6400                       		bcc.s	loc_6696
00007318 323C 0600                  		move.w	#$600,d1
0000731C 0C40 0006                  		cmpi.w	#6,d0
00007320 6E00                       		bgt.s	loc_66F6
00007322 0C40 FFFA                  		cmpi.w	#-6,d0
00007326 6D00                       		blt.s	loc_66C0
00007328 6000                       		bra.s	loc_66AE
0000732A                            ; ===========================================================================
0000732A                            
0000732A                            loc_6684:
0000732A 323C 0200                  		move.w	#$200,d1
0000732E 0C40 0002                  		cmpi.w	#2,d0
00007332 6E00                       		bgt.s	loc_66F6
00007334 0C40 FFFE                  		cmpi.w	#-2,d0
00007338 6D00                       		blt.s	loc_66C0
0000733A 6000                       		bra.s	loc_66AE
0000733C                            ; ===========================================================================
0000733C                            
0000733C                            loc_6696:
0000733C 323C 1000                  		move.w	#$1000,d1
00007340 0C40 0010                  		cmpi.w	#$10,d0
00007344 6E00                       		bgt.s	loc_66F6
00007346 0C40 FFF0                  		cmpi.w	#-$10,d0
0000734A 6D00                       		blt.s	loc_66C0
0000734C 6000                       		bra.s	loc_66AE
0000734E                            ; ===========================================================================
0000734E                            
0000734E                            loc_66A8:
0000734E 7000                       		moveq	#0,d0
00007350 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00007354                            
00007354                            loc_66AE:
00007354 7200                       		moveq	#0,d1
00007356 3200                       		move.w	d0,d1
00007358 D278 F704                  		add.w	($FFFFF704).w,d1
0000735C 4A40                       		tst.w	d0
0000735E 6A00 0000                  		bpl.w	loc_6700
00007362 6000 0000                  		bra.w	loc_66CC
00007366                            ; ===========================================================================
00007366                            
00007366                            loc_66C0:
00007366 4441                       		neg.w	d1
00007368 48C1                       		ext.l	d1
0000736A E181                       		asl.l	#8,d1
0000736C D2B8 F704                  		add.l	($FFFFF704).w,d1
00007370 4841                       		swap	d1
00007372                            
00007372                            loc_66CC:
00007372 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007376 6E00                       		bgt.s	loc_6724
00007378 0C41 FF00                  		cmpi.w	#-$100,d1
0000737C 6E00                       		bgt.s	loc_66F0
0000737E 0241 07FF                  		andi.w	#$7FF,d1
00007382 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007388 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0000738E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007394 6000                       		bra.s	loc_6724
00007396                            ; ===========================================================================
00007396                            
00007396                            loc_66F0:
00007396 3238 F72C                  		move.w	($FFFFF72C).w,d1
0000739A 6000                       		bra.s	loc_6724
0000739C                            ; ===========================================================================
0000739C                            
0000739C                            loc_66F6:
0000739C 48C1                       		ext.l	d1
0000739E E181                       		asl.l	#8,d1
000073A0 D2B8 F704                  		add.l	($FFFFF704).w,d1
000073A4 4841                       		swap	d1
000073A6                            
000073A6                            loc_6700:
000073A6 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000073AA 6D00                       		blt.s	loc_6724
000073AC 0441 0800                  		subi.w	#$800,d1
000073B0 6500                       		bcs.s	loc_6720
000073B2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000073B8 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000073BE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000073C4 6000                       		bra.s	loc_6724
000073C6                            ; ===========================================================================
000073C6                            
000073C6                            loc_6720:
000073C6 3238 F72E                  		move.w	($FFFFF72E).w,d1
000073CA                            
000073CA                            loc_6724:
000073CA 3838 F704                  		move.w	($FFFFF704).w,d4
000073CE 4841                       		swap	d1
000073D0 2601                       		move.l	d1,d3
000073D2 96B8 F704                  		sub.l	($FFFFF704).w,d3
000073D6 E09B                       		ror.l	#8,d3
000073D8 31C3 F73C                  		move.w	d3,($FFFFF73C).w
000073DC 21C1 F704                  		move.l	d1,($FFFFF704).w
000073E0 3038 F704                  		move.w	($FFFFF704).w,d0
000073E4 0240 0010                  		andi.w	#$10,d0
000073E8 1238 F74B                  		move.b	($FFFFF74B).w,d1
000073EC B300                       		eor.b	d1,d0
000073EE 6600                       		bne.s	locret_6766
000073F0 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
000073F6 3038 F704                  		move.w	($FFFFF704).w,d0
000073FA 9044                       		sub.w	d4,d0
000073FC 6A00                       		bpl.s	loc_6760
000073FE 08F8 0000 F754             		bset	#0,($FFFFF754).w
00007404 4E75                       		rts	
00007406                            ; ===========================================================================
00007406                            
00007406                            loc_6760:
00007406 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000740C                            
0000740C                            locret_6766:
0000740C 4E75                       		rts	
0000740E                            ; End of function ScrollVertical
0000740E                            
0000740E                            
0000740E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000740E                            
0000740E                            
0000740E                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
0000740E 2438 F708                  		move.l	($FFFFF708).w,d2
00007412 2002                       		move.l	d2,d0
00007414 D084                       		add.l	d4,d0
00007416 21C0 F708                  		move.l	d0,($FFFFF708).w
0000741A 2200                       		move.l	d0,d1
0000741C 4841                       		swap	d1
0000741E 0241 0010                  		andi.w	#$10,d1
00007422 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007426 B701                       		eor.b	d3,d1
00007428 6600                       		bne.s	ScrollBlock1_2
0000742A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007430 9082                       		sub.l	d2,d0
00007432 6A00                       		bpl.s	ScrollBlock1_1
00007434 08F8 0002 F756             		bset	#2,($FFFFF756).w
0000743A 6000                       		bra.s	ScrollBlock1_2
0000743C                            ; ===========================================================================
0000743C                            
0000743C                            ScrollBlock1_1:				; XREF: ScrollBlock1
0000743C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007442                            
00007442                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
00007442 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007446 2003                       		move.l	d3,d0
00007448 D085                       		add.l	d5,d0
0000744A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000744E 2200                       		move.l	d0,d1
00007450 4841                       		swap	d1
00007452 0241 0010                  		andi.w	#$10,d1
00007456 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000745A B501                       		eor.b	d2,d1
0000745C 6600                       		bne.s	ScrollBlock1_End
0000745E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007464 9083                       		sub.l	d3,d0
00007466 6A00                       		bpl.s	ScrollBlock1_3
00007468 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000746E 4E75                       		rts	
00007470                            ; ===========================================================================
00007470                            
00007470                            ScrollBlock1_3:				; XREF: ScrollBlock1
00007470 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007476                            
00007476                            ScrollBlock1_End:			; XREF: ScrollBlock1
00007476 4E75                       		rts	
00007478                            ; End of function ScrollBlock1
00007478                            
00007478                            
00007478                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007478                            
00007478                            
00007478                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
00007478 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000747C 2003                       		move.l	d3,d0
0000747E D085                       		add.l	d5,d0
00007480 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007484 2200                       		move.l	d0,d1
00007486 4841                       		swap	d1
00007488 0241 0010                  		andi.w	#$10,d1
0000748C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007490 B501                       		eor.b	d2,d1
00007492 6600                       		bne.s	ScrollBlock2_End
00007494 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000749A 9083                       		sub.l	d3,d0
0000749C 6A00                       		bpl.s	ScrollBlock2_1
0000749E 08F8 0004 F756             		bset	#4,($FFFFF756).w
000074A4 4E75                       		rts	
000074A6                            ; ===========================================================================
000074A6                            
000074A6                            ScrollBlock2_1:				; XREF: ScrollBlock2
000074A6 08F8 0005 F756             		bset	#5,($FFFFF756).w
000074AC                            
000074AC                            ScrollBlock2_End:			; XREF: ScrollBlock2
000074AC 4E75                       		rts	
000074AE                            ; End of function ScrollBlock2
000074AE                            
000074AE                            
000074AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074AE                            
000074AE                            
000074AE                            ScrollBlock3:				; XREF: Deform_MZ
000074AE 3638 F70C                  		move.w	($FFFFF70C).w,d3
000074B2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000074B6 3200                       		move.w	d0,d1
000074B8 0241 0010                  		andi.w	#$10,d1
000074BC 1438 F74D                  		move.b	($FFFFF74D).w,d2
000074C0 B501                       		eor.b	d2,d1
000074C2 6600                       		bne.s	ScrollBlock3_End
000074C4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000074CA 9043                       		sub.w	d3,d0
000074CC 6A00                       		bpl.s	ScrollBlock3_1
000074CE 08F8 0000 F756             		bset	#0,($FFFFF756).w
000074D4 4E75                       		rts	
000074D6                            ; ===========================================================================
000074D6                            
000074D6                            ScrollBlock3_1:				; XREF: ScrollBlock3
000074D6 08F8 0001 F756             		bset	#1,($FFFFF756).w
000074DC                            
000074DC                            ScrollBlock3_End:			; XREF: ScrollBlock3
000074DC 4E75                       		rts	
000074DE                            ; End of function ScrollBlock3
000074DE                            
000074DE                            
000074DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074DE                            
000074DE                            
000074DE                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
000074DE 2438 F708                  		move.l	($FFFFF708).w,d2
000074E2 2002                       		move.l	d2,d0
000074E4 D084                       		add.l	d4,d0
000074E6 21C0 F708                  		move.l	d0,($FFFFF708).w
000074EA 2200                       		move.l	d0,d1
000074EC 4841                       		swap	d1
000074EE 0241 0010                  		andi.w	#$10,d1
000074F2 1638 F74C                  		move.b	($FFFFF74C).w,d3
000074F6 B701                       		eor.b	d3,d1
000074F8 6600                       		bne.s	ScrollBlock4_End
000074FA 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007500 9082                       		sub.l	d2,d0
00007502 6A00                       		bpl.s	ScrollBlock4_1
00007504 0DF8 F756                  		bset	d6,($FFFFF756).w
00007508 6000                       		bra.s	ScrollBlock4_End
0000750A                            ; ===========================================================================
0000750A                            
0000750A                            ScrollBlock4_1:				; XREF: ScrollBlock4
0000750A 5206                       		addq.b	#1,d6
0000750C 0DF8 F756                  		bset	d6,($FFFFF756).w
00007510                            
00007510                            ScrollBlock4_End:			; XREF: ScrollBlock4
00007510 4E75                       		rts	
00007512                            ; End of function ScrollBlock4
00007512                            
00007512                            
00007512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007512                            
00007512                            
00007512                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
00007512 2438 F710                  		move.l	($FFFFF710).w,d2
00007516 2002                       		move.l	d2,d0
00007518 D084                       		add.l	d4,d0
0000751A 21C0 F710                  		move.l	d0,($FFFFF710).w
0000751E 2200                       		move.l	d0,d1
00007520 4841                       		swap	d1
00007522 0241 0010                  		andi.w	#$10,d1
00007526 1638 F74E                  		move.b	($FFFFF74E).w,d3
0000752A B701                       		eor.b	d3,d1
0000752C 6600                       		bne.s	ScrollBlock5_End
0000752E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007534 9082                       		sub.l	d2,d0
00007536 6A00                       		bpl.s	ScrollBlock5_1
00007538 0DF8 F758                  		bset	d6,($FFFFF758).w
0000753C 6000                       		bra.s	ScrollBlock5_End
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            ScrollBlock5_1:				; XREF: ScrollBlock5
0000753E 5206                       		addq.b	#1,d6
00007540 0DF8 F758                  		bset	d6,($FFFFF758).w
00007544                            
00007544                            ScrollBlock5_End:			; XREF: ScrollBlock5
00007544 4E75                       		rts	
00007546                            ; End of function ScrollBlock5
00007546                            
00007546                            
00007546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007546                            
00007546                            
00007546                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
00007546 2438 F718                  		move.l	($FFFFF718).w,d2
0000754A 2002                       		move.l	d2,d0
0000754C D084                       		add.l	d4,d0
0000754E 21C0 F718                  		move.l	d0,($FFFFF718).w
00007552 2200                       		move.l	d0,d1
00007554 4841                       		swap	d1
00007556 0241 0010                  		andi.w	#$10,d1
0000755A 1638 F750                  		move.b	($FFFFF750).w,d3
0000755E B701                       		eor.b	d3,d1
00007560 6600                       		bne.s	ScrollBlock6_End
00007562 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
00007568 9082                       		sub.l	d2,d0
0000756A 6A00                       		bpl.s	ScrollBlock6_1
0000756C 0DF8 F75A                  		bset	d6,($FFFFF75A).w
00007570 6000                       		bra.s	ScrollBlock6_End
00007572                            ; ===========================================================================
00007572                            
00007572                            ScrollBlock6_1:				; XREF: ScrollBlock6
00007572 5206                       		addq.b	#1,d6
00007574 0DF8 F75A                  		bset	d6,($FFFFF75A).w
00007578                            
00007578                            ScrollBlock6_End:			; XREF: ScrollBlock6
00007578 4E75                       		rts	
0000757A                            ; End of function ScrollBlock6
0000757A                            
0000757A                            
0000757A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000757A                            
0000757A                            
0000757A                            sub_6886:		
0000757A 4BF9 00C0 0004             		lea	($C00004).l,a5
00007580 4DF9 00C0 0000             		lea	($C00000).l,a6
00007586 45F8 F756                  		lea	($FFFFF756).w,a2
0000758A 47F8 F708                  		lea	($FFFFF708).w,a3
0000758E 49F8 A440                  		lea	($FFFFA440).w,a4
00007592 343C 6000                  		move.w	#$6000,d2
00007596 6100 0000                  		bsr.w	sub_6D0A
0000759A 45F8 F758                  		lea	($FFFFF758).w,a2
0000759E 47F8 F710                  		lea	($FFFFF710).w,a3
000075A2 6000 0000                  		bra.w	sub_6DA6
000075A6                            ; End of function sub_6886
000075A6                            
000075A6                            ; ---------------------------------------------------------------------------
000075A6                            ; Subroutine to	display	correct	tiles as you move
000075A6                            ; ---------------------------------------------------------------------------
000075A6                            
000075A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075A6                            
000075A6                            
000075A6                            LoadTilesAsYouMove:			; XREF: Demo_Time
000075A6 4BF9 00C0 0004             		lea	($C00004).l,a5
000075AC 4DF9 00C0 0000             		lea	($C00000).l,a6
000075B2 45F8 FF32                  		lea	($FFFFFF32).w,a2
000075B6 47F8 FF18                  		lea	($FFFFFF18).w,a3
000075BA 49F8 A440                  		lea	($FFFFA440).w,a4
000075BE 343C 6000                  		move.w	#$6000,d2
000075C2 6100 0000                  		bsr.w	sub_6D0A
000075C6 45F8 FF34                  		lea	($FFFFFF34).w,a2
000075CA 47F8 FF20                  		lea	($FFFFFF20).w,a3
000075CE 6100 0000                  		bsr.w	sub_6DA6
000075D2 45F8 FF36                  		lea	($FFFFFF36).w,a2
000075D6 47F8 FF28                  		lea	($FFFFFF28).w,a3
000075DA 6100 0000                  		bsr.w	sub_6EA4
000075DE 45F8 FF30                  		lea	($FFFFFF30).w,a2
000075E2 47F8 FF10                  		lea	($FFFFFF10).w,a3
000075E6 49F8 A400                  		lea	($FFFFA400).w,a4
000075EA 343C 4000                  		move.w	#$4000,d2
000075EE 4A38 F745                  		tst.b	($FFFFF745).w
000075F2 6700                       		beq.s	Draw_FG
000075F4 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
000075FA 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
000075FC 7C0F                       		moveq	#$F,d6				;
000075FE                            
000075FE                            Draw_All:
000075FE 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
00007602 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
00007604 3204                       		move.w	d4,d1
00007606 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000760A 3801                       		move.w	d1,d4
0000760C 7AF0                       		moveq	#-$10,d5
0000760E 6100 0000                  		bsr.w	DrawTiles_LR
00007612 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007616 0644 0010                  		addi.w	#$10,d4
0000761A 51CE FFE2                  		dbf	d6,Draw_All
0000761E 4E75                       		rts	
00007620                            
00007620                            Draw_FG:
00007620 4A12                       		tst.b	(a2)
00007622 6700                       		beq.s	locret_6D08
00007624 0892 0000                  		bclr	#0,(a2)
00007628 6700                       		beq.s	loc_6CBE
0000762A 78F0                       		moveq	#-$10,d4
0000762C 7AF0                       		moveq	#-$10,d5
0000762E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007632 78F0                       		moveq	#-$10,d4
00007634 7AF0                       		moveq	#-$10,d5
00007636 6100 0000                  		bsr.w	DrawTiles_LR
0000763A                            
0000763A                            loc_6CBE:
0000763A 0892 0001                  		bclr	#1,(a2)
0000763E 6700                       		beq.s	loc_6CD8
00007640 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007644 7AF0                       		moveq	#-$10,d5
00007646 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000764A 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000764E 7AF0                       		moveq	#-$10,d5
00007650 6100 0000                  		bsr.w	DrawTiles_LR
00007654                            
00007654                            loc_6CD8:
00007654 0892 0002                  		bclr	#2,(a2)
00007658 6700                       		beq.s	loc_6CEE
0000765A 78F0                       		moveq	#-$10,d4
0000765C 7AF0                       		moveq	#-$10,d5
0000765E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007662 78F0                       		moveq	#-$10,d4
00007664 7AF0                       		moveq	#-$10,d5
00007666 6100 0000                  		bsr.w	DrawTiles_TB
0000766A                            
0000766A                            loc_6CEE:
0000766A 0892 0003                  		bclr	#3,(a2)
0000766E 6700                       		beq.s	locret_6D08
00007670 78F0                       		moveq	#-$10,d4
00007672 3A3C 0140                  		move.w	#$140,d5
00007676 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000767A 78F0                       		moveq	#-$10,d4
0000767C 3A3C 0140                  		move.w	#$140,d5
00007680 6100 0000                  		bsr.w	DrawTiles_TB
00007684                            
00007684                            locret_6D08:
00007684 4E75                       		rts	
00007686                            
00007686                            ; End of function LoadTilesAsYouMove
00007686                            
00007686                            
00007686                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007686                            
00007686                            
00007686                            sub_6D0A:
00007686 4A12                       		tst.b	(a2)
00007688 6700 0000                  		beq.w	locret_6DA4
0000768C 0892 0000                  		bclr	#0,(a2)
00007690 6700                       		beq.s	loc_6D26
00007692 78F0                       		moveq	#-$10,d4
00007694 7AF0                       		moveq	#-$10,d5
00007696 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000769A 78F0                       		moveq	#-$10,d4
0000769C 7AF0                       		moveq	#-$10,d5
0000769E 6100 0000                  		bsr.w	DrawTiles_LR
000076A2                            
000076A2                            loc_6D26:
000076A2 0892 0001                  		bclr	#1,(a2)
000076A6 6700                       		beq.s	loc_6D40
000076A8 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076AC 7AF0                       		moveq	#-$10,d5
000076AE 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076B2 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076B6 7AF0                       		moveq	#-$10,d5
000076B8 6100 0000                  		bsr.w	DrawTiles_LR
000076BC                            
000076BC                            loc_6D40:
000076BC 0892 0002                  		bclr	#2,(a2)
000076C0 6700                       		beq.s	loc_6D56
000076C2 78F0                       		moveq	#-$10,d4
000076C4 7AF0                       		moveq	#-$10,d5
000076C6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076CA 78F0                       		moveq	#-$10,d4
000076CC 7AF0                       		moveq	#-$10,d5
000076CE 6100 0000                  		bsr.w	DrawTiles_TB
000076D2                            
000076D2                            loc_6D56:
000076D2 0892 0003                  		bclr	#3,(a2)
000076D6 6700                       		beq.s	loc_6D70
000076D8 78F0                       		moveq	#-$10,d4
000076DA 3A3C 0140                  		move.w	#$140,d5
000076DE 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076E2 78F0                       		moveq	#-$10,d4
000076E4 3A3C 0140                  		move.w	#$140,d5
000076E8 6100 0000                  		bsr.w	DrawTiles_TB
000076EC                            
000076EC                            loc_6D70:
000076EC 0892 0004                  		bclr	#4,(a2)
000076F0 6700                       		beq.s	loc_6D88
000076F2 78F0                       		moveq	#-$10,d4
000076F4 7A00                       		moveq	#0,d5
000076F6 6100 0000                  		bsr.w	loc_7176
000076FA 78F0                       		moveq	#-$10,d4
000076FC 7A00                       		moveq	#0,d5
000076FE 7C1F                       		moveq	#$1F,d6
00007700 6100 0000                  		bsr.w	DrawTiles_LR3
00007704                            
00007704                            loc_6D88:
00007704 0892 0005                  		bclr	#5,(a2)
00007708 6700                       		beq.s	locret_6DA4
0000770A 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000770E 7A00                       		moveq	#0,d5
00007710 6100 0000                  		bsr.w	loc_7176
00007714 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007718 7A00                       		moveq	#0,d5
0000771A 7C1F                       		moveq	#$1F,d6
0000771C 6100 0000                  		bsr.w	DrawTiles_LR3
00007720                            
00007720                            locret_6DA4:
00007720 4E75                       		rts	
00007722                            ; End of function sub_6D0A
00007722                            
00007722                            
00007722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007722                            
00007722                            
00007722                            sub_6DA6:
00007722 4A12                       		tst.b	(a2)
00007724 6700 0000                  		beq.w	locret_6DF2
00007728 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
0000772E 6700 0000                  		beq.w	loc_6E16
00007732 0892 0000                  		bclr	#0,(a2)
00007736 6700                       		beq.s	loc_6DD2
00007738 383C 0070                  		move.w	#$70,d4	; 'p'
0000773C 7AF0                       		moveq	#-$10,d5
0000773E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007742 383C 0070                  		move.w	#$70,d4	; 'p'
00007746 7AF0                       		moveq	#-$10,d5
00007748 7C02                       		moveq	#2,d6
0000774A 6100 0000                  		bsr.w	DrawTiles_TB2
0000774E                            
0000774E                            loc_6DD2:
0000774E 0892 0001                  		bclr	#1,(a2)
00007752 6700                       		beq.s	locret_6DF2
00007754 383C 0070                  		move.w	#$70,d4	; 'p'
00007758 3A3C 0140                  		move.w	#$140,d5
0000775C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007760 383C 0070                  		move.w	#$70,d4	; 'p'
00007764 3A3C 0140                  		move.w	#$140,d5
00007768 7C02                       		moveq	#2,d6
0000776A 6100 0000                  		bsr.w	DrawTiles_TB2
0000776E                            
0000776E                            locret_6DF2:
0000776E 4E75                       		rts	
00007770                            ; ===========================================================================
00007770 00                         unk_6DF4:	dc.b   0 ;	 
00007771 00                         unk_6DF5:	dc.b   0 ;	 
00007772 00                         		dc.b   0 ;  
00007773 00                         		dc.b   0 ;  
00007774 00                         		dc.b   0 ;  
00007775 06                         		dc.b   6 ;  
00007776 06                         		dc.b   6 ;  
00007777 06                         		dc.b   6 ;  
00007778 06                         		dc.b   6 ;  
00007779 06                         		dc.b   6 ;  
0000777A 06                         		dc.b   6 ;  
0000777B 06                         		dc.b   6 ;  
0000777C 06                         		dc.b   6 ;  
0000777D 06                         		dc.b   6 ;  
0000777E 06                         		dc.b   6 ;  
0000777F 04                         		dc.b   4 ;  
00007780 04                         		dc.b   4 ;  
00007781 04                         		dc.b   4 ;  
00007782 04                         		dc.b   4 ;  
00007783 04                         		dc.b   4 ;  
00007784 04                         		dc.b   4 ;  
00007785 04                         		dc.b   4 ;  
00007786 02                         		dc.b   2 ;  
00007787 02                         		dc.b   2 ;  
00007788 02                         		dc.b   2 ;  
00007789 02                         		dc.b   2 ;  
0000778A 02                         		dc.b   2 ;  
0000778B 02                         		dc.b   2 ;  
0000778C 02                         		dc.b   2 ;  
0000778D 02                         		dc.b   2 ;  
0000778E 02                         		dc.b   2 ;  
0000778F 02                         		dc.b   2 ;  
00007790 02                         		dc.b   2 ;  
00007791 00                         		dc.b   0 ;  
00007792                            ; ===========================================================================
00007792                            
00007792                            loc_6E16:
00007792 78F0                       		moveq	#-$10,d4
00007794 0892 0000                  		bclr	#0,(a2)
00007798 6600                       		bne.s	loc_6E28
0000779A 0892 0001                  		bclr	#1,(a2)
0000779E 6700                       		beq.s	loc_6E72
000077A0 383C 00E0                  		move.w	#$E0,d4	; 'à'
000077A4                            
000077A4                            loc_6E28:
000077A4 41F9 0000 7771             		lea	(unk_6DF5).l,a0
000077AA 3038 F70C                  		move.w	($FFFFF70C).w,d0
000077AE D044                       		add.w	d4,d0
000077B0 0240 01F0                  		andi.w	#$1F0,d0
000077B4 E848                       		lsr.w	#4,d0
000077B6 1030 0000                  		move.b	(a0,d0.w),d0
000077BA 47F9 0000 0000             		lea	(unk_6FE4).l,a3
000077C0 3673 0000                  		movea.w	(a3,d0.w),a3
000077C4 6700                       		beq.s	loc_6E5E
000077C6 7AF0                       		moveq	#-$10,d5
000077C8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000077CC 6100 0000                  		bsr.w	Calc_VRAM_Pos
000077D0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000077D4 6100 0000                  		bsr.w	DrawTiles_LR
000077D8 6000                       		bra.s	loc_6E72
000077DA                            ; ===========================================================================
000077DA                            
000077DA                            loc_6E5E:
000077DA 7A00                       		moveq	#0,d5
000077DC 48E7 0C00                  		movem.l	d4-d5,-(sp)
000077E0 6100 0000                  		bsr.w	loc_7176
000077E4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000077E8 7C1F                       		moveq	#$1F,d6
000077EA 6100 0000                  		bsr.w	DrawTiles_LR3
000077EE                            
000077EE                            loc_6E72:
000077EE 4A12                       		tst.b	(a2)
000077F0 6600                       		bne.s	loc_6E78
000077F2 4E75                       		rts	
000077F4                            ; ===========================================================================
000077F4                            
000077F4                            loc_6E78:
000077F4 78F0                       		moveq	#-$10,d4
000077F6 7AF0                       		moveq	#-$10,d5
000077F8 1012                       		move.b	(a2),d0
000077FA 0200 00A8                  		andi.b	#-$58,d0
000077FE 6700                       		beq.s	loc_6E8C
00007800 E208                       		lsr.b	#1,d0
00007802 1480                       		move.b	d0,(a2)
00007804 3A3C 0140                  		move.w	#$140,d5
00007808                            
00007808                            loc_6E8C:
00007808 41F9 0000 7770             		lea	(unk_6DF4).l,a0
0000780E 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007812 0240 01F0                  		andi.w	#$1F0,d0
00007816 E848                       		lsr.w	#4,d0
00007818 41F0 0000                  		lea	(a0,d0.w),a0
0000781C 6000 0000                  		bra.w	loc_6FEC
00007820                            ; End of function sub_6DA6
00007820                            
00007820                            
00007820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007820                            
00007820                            
00007820                            sub_6EA4:
00007820 4A12                       		tst.b	(a2)
00007822 6700 0000                  		beq.w	locret_6EF0
00007826 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000782C 6700 0000                  		beq.w	loc_6F54
00007830 0892 0000                  		bclr	#0,(a2)
00007834 6700                       		beq.s	loc_6ED0_2
00007836 383C 0040                  		move.w	#$40,d4	; '@'
0000783A 7AF0                       		moveq	#-$10,d5
0000783C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007840 383C 0040                  		move.w	#$40,d4	; '@'
00007844 7AF0                       		moveq	#-$10,d5
00007846 7C02                       		moveq	#2,d6
00007848 6100 0000                  		bsr.w	DrawTiles_TB2
0000784C                            
0000784C                            loc_6ED0_2:
0000784C 0892 0001                  		bclr	#1,(a2)
00007850 6700                       		beq.s	locret_6EF0
00007852 383C 0040                  		move.w	#$40,d4	; '@'
00007856 3A3C 0140                  		move.w	#$140,d5
0000785A 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000785E 383C 0040                  		move.w	#$40,d4	; '@'
00007862 3A3C 0140                  		move.w	#$140,d5
00007866 7C02                       		moveq	#2,d6
00007868 6100 0000                  		bsr.w	DrawTiles_TB2
0000786C                            
0000786C                            locret_6EF0:
0000786C 4E75                       		rts	
0000786E                            ; ===========================================================================
0000786E 00                         unk_6EF2:	dc.b   0 ;	 
0000786F 00                         unk_6EF3:	dc.b   0 ;	 
00007870 00                         		dc.b   0 ;  
00007871 00                         		dc.b   0 ;  
00007872 00                         		dc.b   0 ;  
00007873 00                         		dc.b   0 ;  
00007874 06                         		dc.b   6 ;  
00007875 06                         		dc.b   6 ;  
00007876 04                         		dc.b   4 ;  
00007877 04                         		dc.b   4 ;  
00007878 04                         		dc.b   4 ;  
00007879 04                         		dc.b   4 ;  
0000787A 04                         		dc.b   4 ;  
0000787B 04                         		dc.b   4 ;  
0000787C 04                         		dc.b   4 ;  
0000787D 04                         		dc.b   4 ;  
0000787E 04                         		dc.b   4 ;  
0000787F 02                         		dc.b   2 ;  
00007880 02                         		dc.b   2 ;  
00007881 02                         		dc.b   2 ;  
00007882 02                         		dc.b   2 ;  
00007883 02                         		dc.b   2 ;  
00007884 02                         		dc.b   2 ;  
00007885 02                         		dc.b   2 ;  
00007886 02                         		dc.b   2 ;  
00007887 02                         		dc.b   2 ;  
00007888 02                         		dc.b   2 ;  
00007889 02                         		dc.b   2 ;  
0000788A 02                         		dc.b   2 ;  
0000788B 02                         		dc.b   2 ;  
0000788C 02                         		dc.b   2 ;  
0000788D 02                         		dc.b   2 ;  
0000788E 02                         		dc.b   2 ;  
0000788F 02                         		dc.b   2 ;  
00007890 02                         		dc.b   2 ;  
00007891 02                         		dc.b   2 ;  
00007892 02                         		dc.b   2 ;  
00007893 02                         		dc.b   2 ;  
00007894 02                         		dc.b   2 ;  
00007895 02                         		dc.b   2 ;  
00007896 02                         		dc.b   2 ;  
00007897 02                         		dc.b   2 ;  
00007898 02                         		dc.b   2 ;  
00007899 02                         		dc.b   2 ;  
0000789A 02                         		dc.b   2 ;  
0000789B 02                         		dc.b   2 ;  
0000789C 02                         		dc.b   2 ;  
0000789D 02                         		dc.b   2 ;  
0000789E 02                         		dc.b   2 ;  
0000789F 02                         		dc.b   2 ;  
000078A0 02                         		dc.b   2 ;  
000078A1 02                         		dc.b   2 ;  
000078A2 02                         		dc.b   2 ;  
000078A3 02                         		dc.b   2 ;  
000078A4 02                         		dc.b   2 ;  
000078A5 02                         		dc.b   2 ;  
000078A6 02                         		dc.b   2 ;  
000078A7 02                         		dc.b   2 ;  
000078A8 02                         		dc.b   2 ;  
000078A9 02                         		dc.b   2 ;  
000078AA 02                         		dc.b   2 ;  
000078AB 02                         		dc.b   2 ;  
000078AC 02                         		dc.b   2 ;  
000078AD 02                         		dc.b   2 ;  
000078AE 02                         		dc.b   2 ;  
000078AF 02                         		dc.b   2 ;  
000078B0 02                         		dc.b   2 ;  
000078B1 02                         		dc.b   2 ;  
000078B2 02                         		dc.b   2 ;  
000078B3 02                         		dc.b   2 ;  
000078B4 02                         		dc.b   2 ;  
000078B5 02                         		dc.b   2 ;  
000078B6 02                         		dc.b   2 ;  
000078B7 02                         		dc.b   2 ;  
000078B8 02                         		dc.b   2 ;  
000078B9 02                         		dc.b   2 ;  
000078BA 02                         		dc.b   2 ;  
000078BB 02                         		dc.b   2 ;  
000078BC 02                         		dc.b   2 ;  
000078BD 02                         		dc.b   2 ;  
000078BE 02                         		dc.b   2 ;  
000078BF 02                         		dc.b   2 ;  
000078C0 02                         		dc.b   2 ;  
000078C1 02                         		dc.b   2 ;  
000078C2 02                         		dc.b   2 ;  
000078C3 02                         		dc.b   2 ;  
000078C4 02                         		dc.b   2 ;  
000078C5 02                         		dc.b   2 ;  
000078C6 02                         		dc.b   2 ;  
000078C7 02                         		dc.b   2 ;  
000078C8 02                         		dc.b   2 ;  
000078C9 02                         		dc.b   2 ;  
000078CA 02                         		dc.b   2 ;  
000078CB 02                         		dc.b   2 ;  
000078CC 02                         		dc.b   2 ;  
000078CD 02                         		dc.b   2 ;  
000078CE 02                         		dc.b   2 ;  
000078CF 00                         		dc.b   0 ;  
000078D0                            ; ===========================================================================
000078D0                            
000078D0                            loc_6F54:
000078D0 78F0                       		moveq	#-$10,d4
000078D2 0892 0000                  		bclr	#0,(a2)
000078D6 6600                       		bne.s	loc_6F66
000078D8 0892 0001                  		bclr	#1,(a2)
000078DC 6700                       		beq.s	loc_6FAE
000078DE 383C 00E0                  		move.w	#$E0,d4	; 'à'
000078E2                            
000078E2                            loc_6F66:
000078E2 41F9 0000 786F             		lea	(unk_6EF3).l,a0
000078E8 3038 F70C                  		move.w	($FFFFF70C).w,d0
000078EC 0440 0200                  		subi.w	#$200,d0
000078F0 D044                       		add.w	d4,d0
000078F2 0240 07F0                  		andi.w	#$7F0,d0
000078F6 E848                       		lsr.w	#4,d0
000078F8 1030 0000                  		move.b	(a0,d0.w),d0
000078FC 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
00007900 6700                       		beq.s	loc_6F9A
00007902 7AF0                       		moveq	#-$10,d5
00007904 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007908 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000790C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007910 6100 0000                  		bsr.w	DrawTiles_LR
00007914 6000                       		bra.s	loc_6FAE
00007916                            ; ===========================================================================
00007916                            
00007916                            loc_6F9A:
00007916 7A00                       		moveq	#0,d5
00007918 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000791C 6100 0000                  		bsr.w	loc_7176
00007920 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007924 7C1F                       		moveq	#$1F,d6
00007926 6100 0000                  		bsr.w	DrawTiles_LR3
0000792A                            
0000792A                            loc_6FAE:
0000792A 4A12                       		tst.b	(a2)
0000792C 6600                       		bne.s	loc_6FB4
0000792E 4E75                       		rts	
00007930                            ; ===========================================================================
00007930                            
00007930                            loc_6FB4:
00007930 78F0                       		moveq	#-$10,d4
00007932 7AF0                       		moveq	#-$10,d5
00007934 1012                       		move.b	(a2),d0
00007936 0200 00A8                  		andi.b	#-$58,d0
0000793A 6700                       		beq.s	loc_6FC8
0000793C E208                       		lsr.b	#1,d0
0000793E 1480                       		move.b	d0,(a2)
00007940 3A3C 0140                  		move.w	#$140,d5
00007944                            
00007944                            loc_6FC8:
00007944 41F9 0000 786E             		lea	(unk_6EF2).l,a0
0000794A 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000794E 0440 0200                  		subi.w	#$200,d0
00007952 0240 07F0                  		andi.w	#$7F0,d0
00007956 E848                       		lsr.w	#4,d0
00007958 41F0 0000                  		lea	(a0,d0.w),a0
0000795C 6000 0000                  		bra.w	loc_6FEC
00007960                            ; ===========================================================================
00007960 FF                         unk_6FE4:	dc.b $FF ;  
00007961 18                         		dc.b $18 ;  
00007962 FF                         		dc.b $FF ;  
00007963 18                         		dc.b $18 ;  
00007964 FF                         		dc.b $FF ;  
00007965 20                         		dc.b $20 ;  
00007966 FF                         		dc.b $FF ;  
00007967 28                         		dc.b $28 ; (
00007968                            ; ===========================================================================
00007968                            
00007968                            loc_6FEC:
00007968 7C0F                       		moveq	#$F,d6
0000796A 2E3C 0080 0000             		move.l	#$800000,d7
00007970                            
00007970                            loc_6FF4:
00007970 7000                       		moveq	#0,d0
00007972 1018                       		move.b	(a0)+,d0
00007974 0112                       		btst	d0,(a2)
00007976 6700                       		beq.s	loc_701C
00007978 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
0000797C 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
00007980 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007984 6100 0000                  		bsr.w	sub_712A
00007988 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000798C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007990 6100 0000                  		bsr.w	sub_70AC
00007994 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
00007998                            
00007998                            loc_701C:
00007998 0644 0010                  		addi.w	#$10,d4
0000799C 51CE FFD2                  		dbf	d6,loc_6FF4
000079A0 4212                       		clr.b	(a2)
000079A2 4E75                       		rts	
000079A4                            ; End of function sub_6EA4
000079A4                            
000079A4                            
000079A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079A4                            
000079A4                            
000079A4                            DrawTiles_LR:
000079A4 7C15                       		moveq	#$15,d6
000079A6                            ; End of function DrawTiles_LR
000079A6                            
000079A6                            
000079A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079A6                            
000079A6                            
000079A6                            DrawTiles_LR2:
000079A6 2E3C 0080 0000             		move.l	#$800000,d7
000079AC 2200                       		move.l	d0,d1
000079AE                            
000079AE                            loc_7032:
000079AE 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079B2 6100 0000                  		bsr.w	sub_712A
000079B6 2001                       		move.l	d1,d0
000079B8 6100 0000                  		bsr.w	sub_70AC
000079BC 5801                       		addq.b	#4,d1
000079BE 0201 007F                  		andi.b	#$7F,d1	; '?'
000079C2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079C6 0645 0010                  		addi.w	#$10,d5
000079CA 51CE FFE2                  		dbf	d6,loc_7032
000079CE 4E75                       		rts	
000079D0                            ; End of function DrawTiles_LR2
000079D0                            
000079D0                            
000079D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079D0                            
000079D0                            
000079D0                            DrawTiles_LR3:
000079D0 2E3C 0080 0000             		move.l	#$800000,d7
000079D6 2200                       		move.l	d0,d1
000079D8                            
000079D8                            loc_705C:
000079D8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079DC 6100 0000                  		bsr.w	loc_712C
000079E0 2001                       		move.l	d1,d0
000079E2 6100 0000                  		bsr.w	sub_70AC
000079E6 5801                       		addq.b	#4,d1
000079E8 0201 007F                  		andi.b	#$7F,d1	; '?'
000079EC 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079F0 0645 0010                  		addi.w	#$10,d5
000079F4 51CE FFE2                  		dbf	d6,loc_705C
000079F8 4E75                       		rts	
000079FA                            ; End of function DrawTiles_LR3
000079FA                            
000079FA                            
000079FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FA                            
000079FA                            
000079FA                            DrawTiles_TB:
000079FA 7C0F                       		moveq	#$F,d6
000079FC                            ; End of function DrawTiles_TB
000079FC                            
000079FC                            
000079FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FC                            
000079FC                            
000079FC                            DrawTiles_TB2:
000079FC 2E3C 0080 0000             		move.l	#$800000,d7
00007A02 2200                       		move.l	d0,d1
00007A04                            
00007A04                            loc_7088:
00007A04 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A08 6100 0000                  		bsr.w	sub_712A
00007A0C 2001                       		move.l	d1,d0
00007A0E 6100 0000                  		bsr.w	sub_70AC
00007A12 0641 0100                  		addi.w	#$100,d1
00007A16 0241 0FFF                  		andi.w	#$FFF,d1
00007A1A 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A1E 0644 0010                  		addi.w	#$10,d4
00007A22 51CE FFE0                  		dbf	d6,loc_7088
00007A26 4E75                       		rts	
00007A28                            ; End of function DrawTiles_TB2
00007A28                            
00007A28                            
00007A28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A28                            
00007A28                            
00007A28                            sub_70AC:
00007A28 8042                       		or.w	d2,d0
00007A2A 4840                       		swap	d0
00007A2C 0810 0004                  		btst	#4,(a0)
00007A30 6600                       		bne.s	loc_70E8
00007A32 0810 0003                  		btst	#3,(a0)
00007A36 6600                       		bne.s	loc_70C8
00007A38 2A80                       		move.l	d0,(a5)
00007A3A 2C99                       		move.l	(a1)+,(a6)
00007A3C D087                       		add.l	d7,d0
00007A3E 2A80                       		move.l	d0,(a5)
00007A40 2C99                       		move.l	(a1)+,(a6)
00007A42 4E75                       		rts	
00007A44                            ; ===========================================================================
00007A44                            
00007A44                            loc_70C8:
00007A44 2A80                       		move.l	d0,(a5)
00007A46 2819                       		move.l	(a1)+,d4
00007A48 0A84 0800 0800             		eori.l	#$8000800,d4
00007A4E 4844                       		swap	d4
00007A50 2C84                       		move.l	d4,(a6)
00007A52 D087                       		add.l	d7,d0
00007A54 2A80                       		move.l	d0,(a5)
00007A56 2819                       		move.l	(a1)+,d4
00007A58 0A84 0800 0800             		eori.l	#$8000800,d4
00007A5E 4844                       		swap	d4
00007A60 2C84                       		move.l	d4,(a6)
00007A62 4E75                       		rts	
00007A64                            ; ===========================================================================
00007A64                            
00007A64                            loc_70E8:
00007A64 0810 0003                  		btst	#3,(a0)
00007A68 6600                       		bne.s	loc_710A
00007A6A 2A80                       		move.l	d0,(a5)
00007A6C 2A19                       		move.l	(a1)+,d5
00007A6E 2819                       		move.l	(a1)+,d4
00007A70 0A84 1000 1000             		eori.l	#$10001000,d4
00007A76 2C84                       		move.l	d4,(a6)
00007A78 D087                       		add.l	d7,d0
00007A7A 2A80                       		move.l	d0,(a5)
00007A7C 0A85 1000 1000             		eori.l	#$10001000,d5
00007A82 2C85                       		move.l	d5,(a6)
00007A84 4E75                       		rts	
00007A86                            ; ===========================================================================
00007A86                            
00007A86                            loc_710A:
00007A86 2A80                       		move.l	d0,(a5)
00007A88 2A19                       		move.l	(a1)+,d5
00007A8A 2819                       		move.l	(a1)+,d4
00007A8C 0A84 1800 1800             		eori.l	#$18001800,d4
00007A92 4844                       		swap	d4
00007A94 2C84                       		move.l	d4,(a6)
00007A96 D087                       		add.l	d7,d0
00007A98 2A80                       		move.l	d0,(a5)
00007A9A 0A85 1800 1800             		eori.l	#$18001800,d5
00007AA0 4845                       		swap	d5
00007AA2 2C85                       		move.l	d5,(a6)
00007AA4 4E75                       		rts	
00007AA6                            ; End of function sub_70AC
00007AA6                            
00007AA6                            
00007AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AA6                            
00007AA6                            
00007AA6                            sub_712A:
00007AA6 DA53                       		add.w	(a3),d5
00007AA8                            
00007AA8                            loc_712C:
00007AA8 D86B 0004                  		add.w	4(a3),d4
00007AAC 43F8 B000                  		lea	($FFFFB000).w,a1
00007AB0 3604                       		move.w	d4,d3
00007AB2 E24B                       		lsr.w	#1,d3
00007AB4 0243 0380                  		andi.w	#$380,d3
00007AB8 E64D                       		lsr.w	#3,d5
00007ABA 3005                       		move.w	d5,d0
00007ABC EA48                       		lsr.w	#5,d0
00007ABE 0240 007F                  		andi.w	#$7F,d0	; '?'
00007AC2 D043                       		add.w	d3,d0
00007AC4 4A38 FE10                  		tst.b	($FFFFFE10).w	
00007AC8 6700                       		beq.s	@ghz		
00007ACA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
00007AD0 6700                       		beq.s	@lz		
00007AD2 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
00007AD8 6700                       		beq.s	@mz		
00007ADA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
00007AE0 6700                       		beq.s	@slz		
00007AE2 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
00007AE8 6700                       		beq.s	@syz		
00007AEA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
00007AF0 6700                       		beq.s	@sbz				
00007AF2 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007AF8 6700                       		beq.s	@ghz		; if yes, branch
00007AFA 76FF                       		moveq	#-1,d3		; load chunks from RAM
00007AFC 6100                       		bsr.s	LocateBlock
00007AFE 6000                       		bra.s	@continue
00007B00                            
00007B00                            @ghz:
00007B00 7600                       		moveq	#0,d3
00007B02 6100                       		bsr.s	LocateBlock
00007B04 0683 0000 0000             		add.l	#Blk256_GHZ,d3
00007B0A 6000 0000                  		bra.w	@continue
00007B0E                            	
00007B0E                            @lz:
00007B0E 7600                       		moveq	#0,d3
00007B10 6100                       		bsr.s	LocateBlock
00007B12 0683 0000 0000             		add.l	#Blk256_LZ,d3
00007B18 6000 0000                  		bra.w	@continue
00007B1C                            		
00007B1C                            @mz:
00007B1C 7600                       		moveq	#0,d3
00007B1E 6100                       		bsr.s	LocateBlock
00007B20 0683 0000 0000             		add.l	#Blk256_MZ,d3
00007B26 6000 0000                  		bra.w	@continue
00007B2A                            		
00007B2A                            @slz:
00007B2A 7600                       		moveq	#0,d3
00007B2C 6100                       		bsr.s	LocateBlock
00007B2E 0683 0000 0000             		add.l	#Blk256_SLZ,d3
00007B34 6000 0000                  		bra.w	@continue
00007B38                            		
00007B38                            @syz:
00007B38 7600                       		moveq	#0,d3
00007B3A 6100                       		bsr.s	LocateBlock
00007B3C 0683 0000 0000             		add.l	#Blk256_SYZ,d3
00007B42 6000 0000                  		bra.w	@continue
00007B46                            		
00007B46                            @sbz:
00007B46 7600                       		moveq	#0,d3
00007B48 6100                       		bsr.s	LocateBlock
00007B4A 0683 0000 0000             		add.l	#Blk256_SBZ,d3		
00007B50 6000 0000                  		bra.w	@continue
00007B54                            		
00007B54                            @continue:
00007B54 2043                       		movea.l	d3,a0
00007B56 3610                       		move.w	(a0),d3
00007B58 0243 03FF                  		andi.w	#$3FF,d3
00007B5C E74B                       		lsl.w	#3,d3
00007B5E D2C3                       		adda.w	d3,a1
00007B60 4E75                       		rts	
00007B62                            ; ---------------------------------------------------------------------------
00007B62                            
00007B62                            LocateBlock:
00007B62 1634 0000                  		move.b	(a4,d0.w),d3	; load chunk ID in d3
00007B66 6700                       		beq.s	LocateBlock_EmptyChunk
00007B68 5303                       		subq.b	#1,d3
00007B6A 0243 007F                  		andi.w	#$7F,d3	; '?'
00007B6E EE5B                       		ror.w	#7,d3
00007B70 D844                       		add.w	d4,d4
00007B72 0244 01E0                  		andi.w	#$1E0,d4
00007B76 0245 001E                  		andi.w	#$1E,d5
00007B7A D644                       		add.w	d4,d3
00007B7C D645                       		add.w	d5,d3
00007B7E 4E75                       		rts
00007B80                            ; ---------------------------------------------------------------------------
00007B80                            
00007B80                            LocateBlock_EmptyChunk:
00007B80 584F                       		addq.w	#4,sp	; pop a stack frame to leave a1 pointing at the first tile
00007B82 4E75                       		rts
00007B84                            ; End of function sub_712A
00007B84                            
00007B84                            
00007B84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B84                            
00007B84                            
00007B84                            Calc_VRAM_Pos:
00007B84 DA53                       		add.w	(a3),d5
00007B86                            
00007B86                            loc_7176:
00007B86 D86B 0004                  		add.w	4(a3),d4
00007B8A 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007B8E 0245 01F0                  		andi.w	#$1F0,d5
00007B92 E94C                       		lsl.w	#4,d4
00007B94 E44D                       		lsr.w	#2,d5
00007B96 D845                       		add.w	d5,d4
00007B98 7003                       		moveq	#3,d0
00007B9A 4840                       		swap	d0
00007B9C 3004                       		move.w	d4,d0
00007B9E 4E75                       		rts	
00007BA0                            ; End of function Calc_VRAM_Pos
00007BA0                            
00007BA0                            ; ===========================================================================
00007BA0 D86B 0004                  		add.w	4(a3),d4
00007BA4 DA53                       		add.w	(a3),d5
00007BA6 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007BAA 0245 01F0                  		andi.w	#$1F0,d5
00007BAE E94C                       		lsl.w	#4,d4
00007BB0 E44D                       		lsr.w	#2,d5
00007BB2 D845                       		add.w	d5,d4
00007BB4 7002                       		moveq	#2,d0
00007BB6 4840                       		swap	d0
00007BB8 3004                       		move.w	d4,d0
00007BBA 4E75                       		rts	
00007BBC                            
00007BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BBC                            
00007BBC                            
00007BBC                            LoadTilesFromStart:
00007BBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00007BC2 4DF9 00C0 0000             		lea	($C00000).l,a6
00007BC8 47F8 F700                  		lea	($FFFFF700).w,a3
00007BCC 49F8 A400                  		lea	($FFFFA400).w,a4
00007BD0 343C 4000                  		move.w	#$4000,d2
00007BD4 6100                       		bsr.s	LoadTilesFromStart2
00007BD6 47F8 F708                  		lea	($FFFFF708).w,a3
00007BDA 49F8 A440                  		lea	($FFFFA440).w,a4
00007BDE 343C 6000                  		move.w	#$6000,d2
00007BE2 4A38 FE10                  		tst.b	($FFFFFE10).w
00007BE6 6700 0000                  		beq.w	loc_7220
00007BEA 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00007BF0 6700 0000                  		beq.w	loc_725A
00007BF4 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
00007BFA 6700 0000                  		beq.w	loc_7288
00007BFE 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
00007C04 6700 0000                  		beq.w	loc_7220
00007C08                            ; End of function LoadTilesFromStart
00007C08                            
00007C08                            
00007C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C08                            
00007C08                            
00007C08                            LoadTilesFromStart2:
00007C08 78F0                       		moveq	#-$10,d4
00007C0A 7C0F                       		moveq	#$F,d6
00007C0C                            
00007C0C                            loc_71FC:
00007C0C 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C10 7A00                       		moveq	#0,d5
00007C12 3204                       		move.w	d4,d1
00007C14 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00007C18 3801                       		move.w	d1,d4
00007C1A 7A00                       		moveq	#0,d5
00007C1C 7C1F                       		moveq	#$1F,d6
00007C1E 6100 FD86                  		bsr.w	DrawTiles_LR2
00007C22 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C26 0644 0010                  		addi.w	#$10,d4
00007C2A 51CE FFE0                  		dbf	d6,loc_71FC
00007C2E 4E75                       		rts	
00007C30                            ; End of function LoadTilesFromStart2
00007C30                            
00007C30                            ; ===========================================================================
00007C30                            
00007C30                            loc_7220:
00007C30 7800                       		moveq	#0,d4
00007C32 7C0F                       		moveq	#$F,d6
00007C34                            
00007C34                            loc_7224:
00007C34 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C38 41F9 0000 0000             		lea	(unk_724A).l,a0
00007C3E 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C42 D044                       		add.w	d4,d0
00007C44 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
00007C48 6100 0000                  		bsr.w	sub_72BA
00007C4C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C50 0644 0010                  		addi.w	#$10,d4
00007C54 51CE FFDE                  		dbf	d6,loc_7224
00007C58 4E75                       		rts	
00007C5A                            ; ===========================================================================
00007C5A 00                         unk_724A:	dc.b   0 ;	 
00007C5B 00                         		dc.b   0 ;  
00007C5C 00                         		dc.b   0 ;  
00007C5D 00                         		dc.b   0 ;  
00007C5E 06                         		dc.b   6 ;  
00007C5F 06                         		dc.b   6 ;  
00007C60 06                         		dc.b   6 ;  
00007C61 04                         		dc.b   4 ;  
00007C62 04                         		dc.b   4 ;  
00007C63 04                         		dc.b   4 ;  
00007C64 00                         		dc.b   0 ;  
00007C65 00                         		dc.b   0 ;  
00007C66 00                         		dc.b   0 ;  
00007C67 00                         		dc.b   0 ;  
00007C68 00                         		dc.b   0 ;  
00007C69 00                         		dc.b   0 ;  
00007C6A                            ; ===========================================================================
00007C6A                            
00007C6A                            loc_725A:
00007C6A 78F0                       		moveq	#-$10,d4
00007C6C 7C0F                       		moveq	#$F,d6
00007C6E                            
00007C6E                            loc_725E:
00007C6E 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C72 41F9 0000 786F             		lea	(unk_6EF3).l,a0
00007C78 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C7C 0440 0200                  		subi.w	#$200,d0
00007C80 D044                       		add.w	d4,d0
00007C82 0240 07F0                  		andi.w	#$7F0,d0
00007C86 6100 0000                  		bsr.w	sub_72BA
00007C8A 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C8E 0644 0010                  		addi.w	#$10,d4
00007C92 51CE FFDA                  		dbf	d6,loc_725E
00007C96 4E75                       		rts	
00007C98                            ; ===========================================================================
00007C98                            
00007C98                            loc_7288:
00007C98 78F0                       		moveq	#-$10,d4
00007C9A 7C0F                       		moveq	#$F,d6
00007C9C                            
00007C9C                            loc_728C:
00007C9C 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007CA0 41F9 0000 7771             		lea	(unk_6DF5).l,a0
00007CA6 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007CAA D044                       		add.w	d4,d0
00007CAC 0240 01F0                  		andi.w	#$1F0,d0
00007CB0 6100 0000                  		bsr.w	sub_72BA
00007CB4 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007CB8 0644 0010                  		addi.w	#$10,d4
00007CBC 51CE FFDE                  		dbf	d6,loc_728C
00007CC0 4E75                       		rts	
00007CC2                            ; ===========================================================================
00007CC2 F7                         unk_72B2:	dc.b $F7 ; ÷
00007CC3 08                         		dc.b   8 ;  
00007CC4 F7                         		dc.b $F7 ; ÷
00007CC5 08                         		dc.b   8 ;  
00007CC6 F7                         		dc.b $F7 ; ÷
00007CC7 10                         		dc.b $10 ;  
00007CC8 F7                         		dc.b $F7 ; ÷
00007CC9 18                         		dc.b $18 ;  
00007CCA                            
00007CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CCA                            
00007CCA                            
00007CCA                            sub_72BA:
00007CCA E848                       		lsr.w	#4,d0
00007CCC 1030 0000                  		move.b	(a0,d0.w),d0
00007CD0 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
00007CD4 6700                       		beq.s	loc_72DA
00007CD6 7AF0                       		moveq	#-$10,d5
00007CD8 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007CDC 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
00007CE0 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007CE4 6100 FCBE                  		bsr.w	DrawTiles_LR
00007CE8 6000                       		bra.s	locret_72EE
00007CEA                            ; ===========================================================================
00007CEA                            
00007CEA                            loc_72DA:
00007CEA 7A00                       		moveq	#0,d5
00007CEC 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007CF0 6100 FE94                  		bsr.w	loc_7176
00007CF4 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007CF8 7C1F                       		moveq	#$1F,d6
00007CFA 6100 FCD4                  		bsr.w	DrawTiles_LR3
00007CFE                            
00007CFE                            locret_72EE:
00007CFE 4E75                       		rts	
00007D00                            ; End of function sub_72BA
00007D00                            
00007D00                            LoadZoneTiles:
00007D00 7000                       		moveq	#0,d0			; Clear d0
00007D02 1038 FE10                  		move.b	($FFFFFE10).w,d0		; Load number of current zone to d0
00007D06 E948                       		lsl.w	#4,d0			; Multiply by $10, converting the zone ID into an offset
00007D08 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2	; Load LevelHeaders's address into a2
00007D0E 45F2 0000                  		lea	(a2,d0.w),a2		; Offset LevelHeaders by the zone-offset, and load the resultant address to a2
00007D12 201A                       		move.l	(a2)+,d0		; Move the first longword of data that a2 points to to d0, this contains the zone's first PLC ID and its art's address.
00007D14                            						; The auto increment is pointless as a2 is overwritten later, and nothing reads from a2 before then
00007D14 0280 00FF FFFF             		andi.l	#$FFFFFF,d0    		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
00007D1A 2040                       		movea.l	d0,a0			; Load the address of the zone's art into a0 (source)
00007D1C 43F9 00FF 0000             		lea	($FF0000).l,a1		; Load v_256x256/StartOfRAM (in this context, an art buffer) into a1 (destination)
00007D22 6100 9A2C                  		bsr.w	KosDec			; Decompress a0 to a1 (Kosinski compression)
00007D26                            
00007D26 3609                       		move.w	a1,d3			; Move a word of a1 to d3, note that a1 doesn't exactly contain the address of v_256x256/StartOfRAM anymore, after KosDec, a1 now contains v_256x256/StartOfRAM + the size of the file decompressed to it, d3 now contains the length of the file that was decompressed
00007D28 3E03                       		move.w	d3,d7			; Move d3 to d7, for use in seperate calculations
00007D2A                            
00007D2A 0243 0FFF                  		andi.w	#$FFF,d3		; Remove the high nibble of the high byte of the length of decompressed file, this nibble is how many $1000 bytes the decompressed art is
00007D2E E24B                       		lsr.w	#1,d3			; Half the value of 'length of decompressed file', d3 becomes the 'DMA transfer length'
00007D30                            
00007D30 E95F                       		rol.w	#4,d7			; Rotate (left) length of decompressed file by one nibble
00007D32 0247 000F                  		andi.w	#$F,d7			; Only keep the low nibble of low byte (the same one filtered out of d3 above), this nibble is how many $1000 bytes the decompressed art is
00007D36                            
00007D36 3407                       @loop:		move.w	d7,d2			; Move d7 to d2, note that the ahead dbf removes 1 byte from d7 each time it loops, meaning that the following calculations will have different results each time
00007D38 EF4A                       		lsl.w	#7,d2
00007D3A EB4A                       		lsl.w	#5,d2			; Shift (left) d2 by $C, making it high nibble of the high byte, d2 is now the size of the decompressed file rounded down to the nearest $1000 bytes, d2 becomes the 'destination address'
00007D3C                            
00007D3C 223C 00FF FFFF             		move.l	#$FFFFFF,d1		; Fill d1 with $FF
00007D42 3202                       		move.w	d2,d1			; Move d2 to d1, overwriting the last word of $FF's with d2, this turns d1 into 'StartOfRAM'+'However many $1000 bytes the decompressed art is', d1 becomes the 'source address'
00007D44                            
00007D44 4EB9 0000 4A58             		jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
00007D4A 3F07                       		move.w	d7,-(sp)		; Store d7 in the Stack
00007D4C 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00007D52 6100 AC46                  		bsr.w	DelayProgram
00007D56 6100 9748                  		bsr.w	RunPLC_RAM
00007D5A 3E1F                       		move.w	(sp)+,d7		; Restore d7 from the Stack
00007D5C 363C 0800                  		move.w	#$800,d3		; Force the DMA transfer length to be $1000/2 (the first cycle is dynamic because the art's DMA'd backwards)
00007D60 51CF FFD4                  		dbf	d7,@loop		; Loop for each $1000 bytes the decompressed art is
00007D64                            
00007D64 4E75                       		rts
00007D66                            ; End of function LoadZoneTiles
00007D66                            
00007D66                            ; ---------------------------------------------------------------------------
00007D66                            ; Main Load Block loading subroutine
00007D66                            ; ---------------------------------------------------------------------------
00007D66                            
00007D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D66                            
00007D66                            
00007D66                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007D66 7000                       		moveq	#0,d0
00007D68 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007D6C E948                       		lsl.w	#4,d0
00007D6E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007D74 45F2 0000                  		lea	(a2,d0.w),a2
00007D78 2F0A                       		move.l	a2,-(sp)
00007D7A 588A                       		addq.l	#4,a2
00007D7C 205A                       		movea.l	(a2)+,a0
00007D7E 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007D82 303C 0000                  		move.w	#0,d0
00007D86 6100 984A                  		bsr.w	EniDec
00007D8A 205A                       		movea.l	(a2)+,a0
00007D8C 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
00007D90 6700                       		beq.s	@no_dec		; if yes, branch
00007D92 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007D98 6700                       		beq.s	@no_dec		; if yes, branch
00007D9A 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007DA0 6100 99AE                  		bsr.w	KosDec
00007DA4                            
00007DA4                            @no_dec:		
00007DA4 6100 0000                  		bsr.w	LevelLayoutLoad
00007DA8 301A                       		move.w	(a2)+,d0
00007DAA 3012                       		move.w	(a2),d0
00007DAC 0240 00FF                  		andi.w	#$FF,d0
00007DB0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007DB6 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007DB8 700C                       		moveq	#$C,d0		; use SB3 pallet
00007DBA                            
00007DBA                            MLB_ChkSBZPal:
00007DBA 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007DC0 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007DC2 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007DC8 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007DCA                            
00007DCA                            MLB_UsePal0E:
00007DCA 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007DCC                            
00007DCC                            MLB_NormalPal:
00007DCC 6100 A318                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007DD0 245F                       		movea.l	(sp)+,a2
00007DD2 584A                       		addq.w	#4,a2
00007DD4 7000                       		moveq	#0,d0
00007DD6 1012                       		move.b	(a2),d0
00007DD8 6700                       		beq.s	locret_6D10
00007DDA 6100 9658                  		bsr.w	LoadPLC		; load pattern load cues
00007DDE                            
00007DDE                            locret_6D10:
00007DDE 4E75                       		rts	
00007DE0                            ; End of function MainLoadBlockLoad
00007DE0                            
00007DE0                            ; ---------------------------------------------------------------------------
00007DE0                            ; Level	layout loading subroutine
00007DE0                            ; ---------------------------------------------------------------------------
00007DE0                            
00007DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DE0                            
00007DE0                            
00007DE0                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007DE0 47F8 A400                  		lea	($FFFFA400).w,a3
00007DE4 323C 01FF                  		move.w	#$1FF,d1
00007DE8 7000                       		moveq	#0,d0
00007DEA                            
00007DEA                            LevLoad_ClrRam:
00007DEA 26C0                       		move.l	d0,(a3)+
00007DEC 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007DF0                            
00007DF0 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007DF4 7200                       		moveq	#0,d1
00007DF6 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007DFA 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007DFE 7202                       		moveq	#2,d1
00007E00                            ; End of function LevelLayoutLoad
00007E00                            
00007E00                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007E00                            
00007E00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E00                            
00007E00                            
00007E00                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007E00 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007E04 ED08                       		lsl.b	#6,d0
00007E06 EA48                       		lsr.w	#5,d0
00007E08 3400                       		move.w	d0,d2
00007E0A D040                       		add.w	d0,d0
00007E0C D042                       		add.w	d2,d0
00007E0E D041                       		add.w	d1,d0
00007E10 43F9 0000 0000             		lea	(Level_Index).l,a1
00007E16 3031 0000                  		move.w	(a1,d0.w),d0
00007E1A 43F1 0000                  		lea	(a1,d0.w),a1
00007E1E 7200                       		moveq	#0,d1
00007E20 3401                       		move.w	d1,d2
00007E22 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007E24 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007E26                            
00007E26                            LevLoad_NumRows:
00007E26 3001                       		move.w	d1,d0
00007E28 204B                       		movea.l	a3,a0
00007E2A                            
00007E2A                            LevLoad_Row:
00007E2A 10D9                       		move.b	(a1)+,(a0)+
00007E2C 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007E30 47EB 0080                  		lea	$80(a3),a3	; do next row
00007E34 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007E38 4E75                       		rts	
00007E3A                            ; End of function LevelLayoutLoad2
00007E3A                            
00007E3A                            ; ---------------------------------------------------------------------------
00007E3A                            ; Dynamic screen resize	loading	subroutine
00007E3A                            ; ---------------------------------------------------------------------------
00007E3A                            
00007E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E3A                            
00007E3A                            
00007E3A                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007E3A 7000                       		moveq	#0,d0
00007E3C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007E40 D040                       		add.w	d0,d0
00007E42 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007E46 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007E4A 7202                       		moveq	#2,d1
00007E4C 3038 F726                  		move.w	($FFFFF726).w,d0
00007E50 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007E54 6700                       		beq.s	locret_6DAA
00007E56 6400                       		bcc.s	loc_6DAC
00007E58 4441                       		neg.w	d1
00007E5A 3038 F704                  		move.w	($FFFFF704).w,d0
00007E5E B078 F726                  		cmp.w	($FFFFF726).w,d0
00007E62 6300                       		bls.s	loc_6DA0
00007E64 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007E68 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007E6E                            
00007E6E                            loc_6DA0:
00007E6E D378 F72E                  		add.w	d1,($FFFFF72E).w
00007E72 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007E78                            
00007E78                            locret_6DAA:
00007E78 4E75                       		rts	
00007E7A                            ; ===========================================================================
00007E7A                            
00007E7A                            loc_6DAC:				; XREF: DynScrResizeLoad
00007E7A 3038 F704                  		move.w	($FFFFF704).w,d0
00007E7E 5040                       		addq.w	#8,d0
00007E80 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007E84 6500                       		bcs.s	loc_6DC4
00007E86 0838 0001 D022             		btst	#1,($FFFFD022).w
00007E8C 6700                       		beq.s	loc_6DC4
00007E8E D241                       		add.w	d1,d1
00007E90 D241                       		add.w	d1,d1
00007E92                            
00007E92                            loc_6DC4:
00007E92 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007E96 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007E9C 4E75                       		rts	
00007E9E                            ; End of function DynScrResizeLoad
00007E9E                            
00007E9E                            ; ===========================================================================
00007E9E                            ; ---------------------------------------------------------------------------
00007E9E                            ; Offset index for dynamic screen resizing
00007E9E                            ; ---------------------------------------------------------------------------
00007E9E 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007EA2 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007EA6 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007EAA 0000                       		dc.w Resize_Ending-Resize_Index
00007EAC                            ; ===========================================================================
00007EAC                            ; ---------------------------------------------------------------------------
00007EAC                            ; Green	Hill Zone dynamic screen resizing
00007EAC                            ; ---------------------------------------------------------------------------
00007EAC                            
00007EAC                            Resize_GHZ:				; XREF: Resize_Index
00007EAC 7000                       		moveq	#0,d0
00007EAE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007EB2 D040                       		add.w	d0,d0
00007EB4 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007EB8 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007EBC                            ; ===========================================================================
00007EBC 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007EBE 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007EC0 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007EC2                            ; ===========================================================================
00007EC2                            
00007EC2                            Resize_GHZ1:
00007EC2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007EC8 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007ECE 6500                       		bcs.s	locret_6E08	; if not, branch
00007ED0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007ED6                            
00007ED6                            locret_6E08:
00007ED6 4E75                       		rts	
00007ED8                            ; ===========================================================================
00007ED8                            
00007ED8                            Resize_GHZ2:
00007ED8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007EDE 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007EE4 6500                       		bcs.s	locret_6E3A
00007EE6 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007EEC 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007EF2 6500                       		bcs.s	locret_6E3A
00007EF4 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007EFA 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007F00 6500                       		bcs.s	locret_6E3A
00007F02 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F08                            
00007F08                            locret_6E3A:
00007F08 4E75                       		rts	
00007F0A                            ; ===========================================================================
00007F0A                            
00007F0A                            Resize_GHZ3:
00007F0A 7000                       		moveq	#0,d0
00007F0C 1038 F742                  		move.b	($FFFFF742).w,d0
00007F10 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007F14 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007F18                            ; ===========================================================================
00007F18 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007F1A 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007F1C 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007F1E                            ; ===========================================================================
00007F1E                            
00007F1E                            Resize_GHZ3main:
00007F1E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F24 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007F2A 6500                       		bcs.s	locret_6E96
00007F2C 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007F32 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007F38 6500                       		bcs.s	locret_6E96
00007F3A 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007F40 6500                       		bcs.s	loc_6E98
00007F42 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007F48 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007F4E 6400                       		bcc.s	loc_6E8E
00007F50 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007F56 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007F5C                            
00007F5C                            loc_6E8E:
00007F5C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007F62 6400                       		bcc.s	loc_6E98
00007F64                            
00007F64                            locret_6E96:
00007F64 4E75                       		rts	
00007F66                            ; ===========================================================================
00007F66                            
00007F66                            loc_6E98:
00007F66 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F6C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F70 4E75                       		rts	
00007F72                            ; ===========================================================================
00007F72                            
00007F72                            Resize_GHZ3boss:
00007F72 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007F78 6400                       		bcc.s	loc_6EB0
00007F7A 5538 F742                  		subq.b	#2,($FFFFF742).w
00007F7E                            
00007F7E                            loc_6EB0:
00007F7E 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007F84 6500                       		bcs.s	locret_6EE8
00007F86 6100 0000                  		bsr.w	SingleObjLoad
00007F8A 6600                       		bne.s	loc_6ED0
00007F8C 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007F90 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007F96 337C 0280 000C             		move.w	#$280,$C(a1)
00007F9C                            
00007F9C                            loc_6ED0:
00007F9C 303C 008C                  		move.w	#$8C,d0
00007FA0 6100 924E                  		bsr.w	PlaySound	; play boss music
00007FA4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007FAA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FAE 7011                       		moveq	#$11,d0
00007FB0 6000 9482                  		bra.w	LoadPLC		; load boss patterns
00007FB4                            ; ===========================================================================
00007FB4                            
00007FB4                            locret_6EE8:
00007FB4 4E75                       		rts	
00007FB6                            ; ===========================================================================
00007FB6                            
00007FB6                            Resize_GHZ3end:
00007FB6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007FBC 4E75                       		rts	
00007FBE                            ; ===========================================================================
00007FBE                            ; ---------------------------------------------------------------------------
00007FBE                            ; Labyrinth Zone dynamic screen	resizing
00007FBE                            ; ---------------------------------------------------------------------------
00007FBE                            
00007FBE                            Resize_LZ:				; XREF: Resize_Index
00007FBE 7000                       		moveq	#0,d0
00007FC0 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007FC4 D040                       		add.w	d0,d0
00007FC6 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007FCA 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007FCE                            ; ===========================================================================
00007FCE 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007FD0 0000                       		dc.w Resize_LZ12-Resize_LZx
00007FD2 0000                       		dc.w Resize_LZ3-Resize_LZx
00007FD4 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007FD6                            ; ===========================================================================
00007FD6                            
00007FD6                            Resize_LZ12:
00007FD6 4E75                       		rts	
00007FD8                            ; ===========================================================================
00007FD8                            
00007FD8                            Resize_LZ3:
00007FD8 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00007FDC 6700                       		beq.s	loc_6F28	; if not, branch
00007FDE 43F8 A506                  		lea	($FFFFA506).w,a1
00007FE2 0C11 0007                  		cmpi.b	#7,(a1)
00007FE6 6700                       		beq.s	loc_6F28
00007FE8 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00007FEC 303C 00B7                  		move.w	#$B7,d0
00007FF0 6100 9204                  		bsr.w	PlaySound_Special ; play rumbling sound
00007FF4                            
00007FF4                            loc_6F28:
00007FF4 4A38 F742                  		tst.b	($FFFFF742).w
00007FF8 6600                       		bne.s	locret_6F64
00007FFA 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00008000 6500                       		bcs.s	locret_6F62
00008002 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00008008 6400                       		bcc.s	locret_6F62
0000800A 6100 0000                  		bsr.w	SingleObjLoad
0000800E 6600                       		bne.s	loc_6F4A
00008010 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00008014                            
00008014                            loc_6F4A:
00008014 303C 008C                  		move.w	#$8C,d0
00008018 6100 91D6                  		bsr.w	PlaySound	; play boss music
0000801C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008022 5438 F742                  		addq.b	#2,($FFFFF742).w
00008026 7011                       		moveq	#$11,d0
00008028 6000 940A                  		bra.w	LoadPLC		; load boss patterns
0000802C                            ; ===========================================================================
0000802C                            
0000802C                            locret_6F62:
0000802C 4E75                       		rts	
0000802E                            ; ===========================================================================
0000802E                            
0000802E                            locret_6F64:
0000802E 4E75                       		rts	
00008030                            ; ===========================================================================
00008030                            
00008030                            Resize_SBZ3:
00008030 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008036 6500                       		bcs.s	locret_6F8C
00008038 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000803E 6400                       		bcc.s	locret_6F8C	; if not, branch
00008040 4238 FE30                  		clr.b	($FFFFFE30).w
00008044 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000804A 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00008050 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00008056                            
00008056                            locret_6F8C:
00008056 4E75                       		rts	
00008058                            ; ===========================================================================
00008058                            ; ---------------------------------------------------------------------------
00008058                            ; Marble Zone dynamic screen resizing
00008058                            ; ---------------------------------------------------------------------------
00008058                            
00008058                            Resize_MZ:				; XREF: Resize_Index
00008058 7000                       		moveq	#0,d0
0000805A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000805E D040                       		add.w	d0,d0
00008060 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00008064 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00008068                            ; ===========================================================================
00008068 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000806A 0000                       		dc.w Resize_MZ2-Resize_MZx
0000806C 0000                       		dc.w Resize_MZ3-Resize_MZx
0000806E                            ; ===========================================================================
0000806E                            
0000806E                            Resize_MZ1:
0000806E 7000                       		moveq	#0,d0
00008070 1038 F742                  		move.b	($FFFFF742).w,d0
00008074 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00008078 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000807C                            ; ===========================================================================
0000807C 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000807E 0000                       		dc.w loc_6FEA-off_6FB2
00008080 0000                       		dc.w loc_702E-off_6FB2
00008082 0000                       		dc.w loc_7050-off_6FB2
00008084                            ; ===========================================================================
00008084                            
00008084                            loc_6FBA:
00008084 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000808A 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00008090 6500                       		bcs.s	locret_6FE8
00008092 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00008098 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000809E 6500                       		bcs.s	locret_6FE8
000080A0 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000080A6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000080AC 6500                       		bcs.s	locret_6FE8
000080AE 5438 F742                  		addq.b	#2,($FFFFF742).w
000080B2                            
000080B2                            locret_6FE8:
000080B2 4E75                       		rts	
000080B4                            ; ===========================================================================
000080B4                            
000080B4                            loc_6FEA:
000080B4 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000080BA 6400                       		bcc.s	loc_6FF8
000080BC 5538 F742                  		subq.b	#2,($FFFFF742).w
000080C0 4E75                       		rts	
000080C2                            ; ===========================================================================
000080C2                            
000080C2                            loc_6FF8:
000080C2 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000080C8 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000080CE 6400                       		bcc.s	locret_702C
000080D0 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000080D6 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000080DC 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000080E2 6400                       		bcc.s	locret_702C
000080E4 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000080EA 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000080F0 6500                       		bcs.s	locret_702C
000080F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000080F6                            
000080F6                            locret_702C:
000080F6 4E75                       		rts	
000080F8                            ; ===========================================================================
000080F8                            
000080F8                            loc_702E:
000080F8 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000080FE 6400                       		bcc.s	loc_703C
00008100 5538 F742                  		subq.b	#2,($FFFFF742).w
00008104 4E75                       		rts	
00008106                            ; ===========================================================================
00008106                            
00008106                            loc_703C:
00008106 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000810C 6500                       		bcs.s	locret_704E
0000810E 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00008114 5438 F742                  		addq.b	#2,($FFFFF742).w
00008118                            
00008118                            locret_704E:
00008118 4E75                       		rts	
0000811A                            ; ===========================================================================
0000811A                            
0000811A                            loc_7050:
0000811A 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00008120 6500                       		bcs.s	locret_7072
00008122 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008128 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000812E 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00008134 6500                       		bcs.s	locret_7072
00008136 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000813C                            
0000813C                            locret_7072:
0000813C 4E75                       		rts	
0000813E                            ; ===========================================================================
0000813E                            
0000813E                            Resize_MZ2:
0000813E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008144 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000814A 6500                       		bcs.s	locret_7088
0000814C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008152                            
00008152                            locret_7088:
00008152 4E75                       		rts	
00008154                            ; ===========================================================================
00008154                            
00008154                            Resize_MZ3:
00008154 7000                       		moveq	#0,d0
00008156 1038 F742                  		move.b	($FFFFF742).w,d0
0000815A 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000815E 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008162                            ; ===========================================================================
00008162 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00008164 0000                       		dc.w Resize_MZ3end-off_7098
00008166                            ; ===========================================================================
00008166                            
00008166                            Resize_MZ3boss:
00008166 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000816C 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00008172 6500                       		bcs.s	locret_70E8
00008174 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000817A 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00008180 6500                       		bcs.s	locret_70E8
00008182 6100 0000                  		bsr.w	SingleObjLoad
00008186 6600                       		bne.s	loc_70D0
00008188 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000818C 337C 19F0 0008             		move.w	#$19F0,8(a1)
00008192 337C 022C 000C             		move.w	#$22C,$C(a1)
00008198                            
00008198                            loc_70D0:
00008198 303C 008C                  		move.w	#$8C,d0
0000819C 6100 9052                  		bsr.w	PlaySound	; play boss music
000081A0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000081A6 5438 F742                  		addq.b	#2,($FFFFF742).w
000081AA 7011                       		moveq	#$11,d0
000081AC 6000 9286                  		bra.w	LoadPLC		; load boss patterns
000081B0                            ; ===========================================================================
000081B0                            
000081B0                            locret_70E8:
000081B0 4E75                       		rts	
000081B2                            ; ===========================================================================
000081B2                            
000081B2                            Resize_MZ3end:
000081B2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000081B8 4E75                       		rts	
000081BA                            ; ===========================================================================
000081BA                            ; ---------------------------------------------------------------------------
000081BA                            ; Star Light Zone dynamic screen resizing
000081BA                            ; ---------------------------------------------------------------------------
000081BA                            
000081BA                            Resize_SLZ:				; XREF: Resize_Index
000081BA 7000                       		moveq	#0,d0
000081BC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000081C0 D040                       		add.w	d0,d0
000081C2 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000081C6 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000081CA                            ; ===========================================================================
000081CA 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
000081CC 0000                       		dc.w Resize_SLZ12-Resize_SLZx
000081CE 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000081D0                            ; ===========================================================================
000081D0                            
000081D0                            Resize_SLZ12:
000081D0 4E75                       		rts	
000081D2                            ; ===========================================================================
000081D2                            
000081D2                            Resize_SLZ3:
000081D2 7000                       		moveq	#0,d0
000081D4 1038 F742                  		move.b	($FFFFF742).w,d0
000081D8 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000081DC 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000081E0                            ; ===========================================================================
000081E0 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000081E2 0000                       		dc.w Resize_SLZ3boss-off_7118
000081E4 0000                       		dc.w Resize_SLZ3end-off_7118
000081E6                            ; ===========================================================================
000081E6                            
000081E6                            Resize_SLZ3main:
000081E6 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000081EC 6500                       		bcs.s	locret_7130
000081EE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000081F4 5438 F742                  		addq.b	#2,($FFFFF742).w
000081F8                            
000081F8                            locret_7130:
000081F8 4E75                       		rts	
000081FA                            ; ===========================================================================
000081FA                            
000081FA                            Resize_SLZ3boss:
000081FA 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008200 6500                       		bcs.s	locret_715C
00008202 6100 0000                  		bsr.w	SingleObjLoad
00008206 6600                       		bne.s	loc_7144
00008208 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000820C                            
0000820C                            loc_7144:
0000820C 303C 008C                  		move.w	#$8C,d0
00008210 6100 8FDE                  		bsr.w	PlaySound	; play boss music
00008214 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000821A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000821E 7011                       		moveq	#$11,d0
00008220 6000 9212                  		bra.w	LoadPLC		; load boss patterns
00008224                            ; ===========================================================================
00008224                            
00008224                            locret_715C:
00008224 4E75                       		rts	
00008226                            ; ===========================================================================
00008226                            
00008226                            Resize_SLZ3end:
00008226 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000822C 4E75                       		rts
0000822E 4E75                       		rts
00008230                            ; ===========================================================================
00008230                            ; ---------------------------------------------------------------------------
00008230                            ; Spring Yard Zone dynamic screen resizing
00008230                            ; ---------------------------------------------------------------------------
00008230                            
00008230                            Resize_SYZ:				; XREF: Resize_Index
00008230 7000                       		moveq	#0,d0
00008232 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008236 D040                       		add.w	d0,d0
00008238 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000823C 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00008240                            ; ===========================================================================
00008240 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00008242 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00008244 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008246                            ; ===========================================================================
00008246                            
00008246                            Resize_SYZ1:
00008246 4E75                       		rts	
00008248                            ; ===========================================================================
00008248                            
00008248                            Resize_SYZ2:
00008248 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000824E 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00008254 6500                       		bcs.s	locret_71A2
00008256 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000825C 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00008262 6500                       		bcs.s	locret_71A2
00008264 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000826A                            
0000826A                            locret_71A2:
0000826A 4E75                       		rts	
0000826C                            ; ===========================================================================
0000826C                            
0000826C                            Resize_SYZ3:
0000826C 7000                       		moveq	#0,d0
0000826E 1038 F742                  		move.b	($FFFFF742).w,d0
00008272 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008276 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000827A                            ; ===========================================================================
0000827A 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000827C 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000827E 0000                       		dc.w Resize_SYZ3end-off_71B2
00008280                            ; ===========================================================================
00008280                            
00008280                            Resize_SYZ3main:
00008280 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00008286 6500                       		bcs.s	locret_71CE
00008288 6100 0000                  		bsr.w	SingleObjLoad
0000828C 6600                       		bne.s	locret_71CE
0000828E 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00008292 5438 F742                  		addq.b	#2,($FFFFF742).w
00008296                            
00008296                            locret_71CE:
00008296 4E75                       		rts	
00008298                            ; ===========================================================================
00008298                            
00008298                            Resize_SYZ3boss:
00008298 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000829E 6500                       		bcs.s	locret_7200
000082A0 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000082A6 6100 0000                  		bsr.w	SingleObjLoad
000082AA 6600                       		bne.s	loc_71EC
000082AC 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000082B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000082B4                            
000082B4                            loc_71EC:
000082B4 303C 008C                  		move.w	#$8C,d0
000082B8 6100 8F36                  		bsr.w	PlaySound	; play boss music
000082BC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000082C2 7011                       		moveq	#$11,d0
000082C4 6000 916E                  		bra.w	LoadPLC		; load boss patterns
000082C8                            ; ===========================================================================
000082C8                            
000082C8                            locret_7200:
000082C8 4E75                       		rts	
000082CA                            ; ===========================================================================
000082CA                            
000082CA                            Resize_SYZ3end:
000082CA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000082D0 4E75                       		rts	
000082D2                            ; ===========================================================================
000082D2                            ; ---------------------------------------------------------------------------
000082D2                            ; Scrap	Brain Zone dynamic screen resizing
000082D2                            ; ---------------------------------------------------------------------------
000082D2                            
000082D2                            Resize_SBZ:				; XREF: Resize_Index
000082D2 7000                       		moveq	#0,d0
000082D4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000082D8 D040                       		add.w	d0,d0
000082DA 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000082DE 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000082E2                            ; ===========================================================================
000082E2 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000082E4 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000082E6 0000                       		dc.w Resize_FZ-Resize_SBZx
000082E8                            ; ===========================================================================
000082E8                            
000082E8                            Resize_SBZ1:
000082E8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000082EE 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000082F4 6500                       		bcs.s	locret_7242
000082F6 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000082FC 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008302 6500                       		bcs.s	locret_7242
00008304 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000830A                            
0000830A                            locret_7242:
0000830A 4E75                       		rts	
0000830C                            ; ===========================================================================
0000830C                            
0000830C                            Resize_SBZ2:
0000830C 7000                       		moveq	#0,d0
0000830E 1038 F742                  		move.b	($FFFFF742).w,d0
00008312 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008316 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000831A                            ; ===========================================================================
0000831A 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000831C 0000                       		dc.w Resize_SBZ2boss-off_7252
0000831E 0000                       		dc.w Resize_SBZ2boss2-off_7252
00008320 0000                       		dc.w Resize_SBZ2end-off_7252
00008322                            ; ===========================================================================
00008322                            
00008322                            Resize_SBZ2main:
00008322 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008328 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000832E 6500                       		bcs.s	locret_727A
00008330 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008336 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000833C 6500                       		bcs.s	locret_727A
0000833E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008342                            
00008342                            locret_727A:
00008342 4E75                       		rts	
00008344                            ; ===========================================================================
00008344                            
00008344                            Resize_SBZ2boss:
00008344 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000834A 6500                       		bcs.s	locret_7298
0000834C 6100 0000                  		bsr.w	SingleObjLoad
00008350 6600                       		bne.s	locret_7298
00008352 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00008356 5438 F742                  		addq.b	#2,($FFFFF742).w
0000835A 701E                       		moveq	#$1E,d0
0000835C 6000 90D6                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00008360                            ; ===========================================================================
00008360                            
00008360                            locret_7298:
00008360 4E75                       		rts	
00008362                            ; ===========================================================================
00008362                            
00008362                            Resize_SBZ2boss2:
00008362 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00008368 6500                       		bcs.s	loc_72B6
0000836A 6100 0000                  		bsr.w	SingleObjLoad
0000836E 6600                       		bne.s	loc_72B0
00008370 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00008374 5438 F742                  		addq.b	#2,($FFFFF742).w
00008378                            
00008378                            loc_72B0:
00008378 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000837E                            
0000837E                            loc_72B6:
0000837E 6000                       		bra.s	loc_72C2
00008380                            ; ===========================================================================
00008380                            
00008380                            Resize_SBZ2end:
00008380 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00008386 6500                       		bcs.s	loc_72C2
00008388 4E75                       		rts	
0000838A                            ; ===========================================================================
0000838A                            
0000838A                            loc_72C2:
0000838A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008390 4E75                       		rts	
00008392                            ; ===========================================================================
00008392                            
00008392                            Resize_FZ:
00008392 7000                       		moveq	#0,d0
00008394 1038 F742                  		move.b	($FFFFF742).w,d0
00008398 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000839C 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000083A0                            ; ===========================================================================
000083A0 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000083A4 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000083A8 0000                       		dc.w Resize_FZend2-off_72D8
000083AA                            ; ===========================================================================
000083AA                            
000083AA                            Resize_FZmain:
000083AA 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000083B0 6500                       		bcs.s	loc_72F4
000083B2 5438 F742                  		addq.b	#2,($FFFFF742).w
000083B6 701F                       		moveq	#$1F,d0
000083B8 6100 907A                  		bsr.w	LoadPLC		; load FZ boss patterns
000083BC                            
000083BC                            loc_72F4:
000083BC 60CC                       		bra.s	loc_72C2
000083BE                            ; ===========================================================================
000083BE                            
000083BE                            Resize_FZboss:
000083BE 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000083C4 6500                       		bcs.s	loc_7312
000083C6 6100 0000                  		bsr.w	SingleObjLoad
000083CA 6600                       		bne.s	loc_7312
000083CC 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000083D0 5438 F742                  		addq.b	#2,($FFFFF742).w
000083D4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000083DA                            
000083DA                            loc_7312:
000083DA 60AE                       		bra.s	loc_72C2
000083DC                            ; ===========================================================================
000083DC                            
000083DC                            Resize_FZend:
000083DC 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000083E2 6500                       		bcs.s	loc_7320
000083E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000083E8                            
000083E8                            loc_7320:
000083E8 60A0                       		bra.s	loc_72C2
000083EA                            ; ===========================================================================
000083EA                            
000083EA                            locret_7322:
000083EA 4E75                       		rts	
000083EC                            ; ===========================================================================
000083EC                            
000083EC                            Resize_FZend2:
000083EC 609C                       		bra.s	loc_72C2
000083EE                            ; ===========================================================================
000083EE                            ; ---------------------------------------------------------------------------
000083EE                            ; Ending sequence dynamic screen resizing (empty)
000083EE                            ; ---------------------------------------------------------------------------
000083EE                            
000083EE                            Resize_Ending:				; XREF: Resize_Index
000083EE 4E75                       		rts	
000083F0                            ; ===========================================================================
000083F0                            ; ---------------------------------------------------------------------------
000083F0                            ; Object 11 - GHZ bridge
000083F0                            ; ---------------------------------------------------------------------------
000083F0                            
000083F0                            Obj11:					; XREF: Obj_Index
000083F0 7000                       		moveq	#0,d0
000083F2 1028 0024                  		move.b	$24(a0),d0
000083F6 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000083FA 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
000083FE                            ; ===========================================================================
000083FE 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00008402 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008406 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000840A                            ; ===========================================================================
0000840A                            
0000840A                            Obj11_Main:				; XREF: Obj11_Index
0000840A 5428 0024                  		addq.b	#2,$24(a0)
0000840E 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008416 317C 438E 0002             		move.w	#$438E,2(a0)
0000841C 117C 0004 0001             		move.b	#4,1(a0)
00008422 117C 0003 0018             		move.b	#3,$18(a0)
00008428 117C 0080 0019             		move.b	#$80,$19(a0)
0000842E 3428 000C                  		move.w	$C(a0),d2
00008432 3628 0008                  		move.w	8(a0),d3
00008436 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008438 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000843C 7200                       		moveq	#0,d1
0000843E 1212                       		move.b	(a2),d1		; copy a2 to d1
00008440 14FC 0000                  		move.b	#0,(a2)+
00008444 3001                       		move.w	d1,d0
00008446 E248                       		lsr.w	#1,d0
00008448 E948                       		lsl.w	#4,d0
0000844A 9640                       		sub.w	d0,d3
0000844C 5501                       		subq.b	#2,d1
0000844E 6500                       		bcs.s	Obj11_Action
00008450                            
00008450                            Obj11_MakeBdg:
00008450 6100 0000                  		bsr.w	SingleObjLoad
00008454 6600                       		bne.s	Obj11_Action
00008456 5228 0028                  		addq.b	#1,$28(a0)
0000845A B668 0008                  		cmp.w	8(a0),d3
0000845E 6600                       		bne.s	loc_73B8
00008460 0643 0010                  		addi.w	#$10,d3
00008464 3142 000C                  		move.w	d2,$C(a0)
00008468 3142 003C                  		move.w	d2,$3C(a0)
0000846C 3A08                       		move.w	a0,d5
0000846E 0445 D000                  		subi.w	#-$3000,d5
00008472 EC4D                       		lsr.w	#6,d5
00008474 0245 007F                  		andi.w	#$7F,d5
00008478 14C5                       		move.b	d5,(a2)+
0000847A 5228 0028                  		addq.b	#1,$28(a0)
0000847E                            
0000847E                            loc_73B8:				; XREF: ROM:00007398j
0000847E 3A09                       		move.w	a1,d5
00008480 0445 D000                  		subi.w	#-$3000,d5
00008484 EC4D                       		lsr.w	#6,d5
00008486 0245 007F                  		andi.w	#$7F,d5
0000848A 14C5                       		move.b	d5,(a2)+
0000848C 137C 000A 0024             		move.b	#$A,$24(a1)
00008492 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008494 3342 000C                  		move.w	d2,$C(a1)
00008498 3342 003C                  		move.w	d2,$3C(a1)
0000849C 3343 0008                  		move.w	d3,8(a1)
000084A0 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000084A8 337C 438E 0002             		move.w	#$438E,2(a1)
000084AE 137C 0004 0001             		move.b	#4,1(a1)
000084B4 137C 0003 0018             		move.b	#3,$18(a1)
000084BA 137C 0008 0019             		move.b	#8,$19(a1)
000084C0 0643 0010                  		addi.w	#$10,d3
000084C4 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000084C8                            
000084C8                            Obj11_Action:				; XREF: Obj11_Index
000084C8 6100                       		bsr.s	Obj11_Solid
000084CA 4A28 003E                  		tst.b	$3E(a0)
000084CE 6700                       		beq.s	Obj11_Display
000084D0 5928 003E                  		subq.b	#4,$3E(a0)
000084D4 6100 0000                  		bsr.w	Obj11_Bend
000084D8                            
000084D8                            Obj11_Display:
000084D8 6100 0000                  		bsr.w	DisplaySprite
000084DC 6000 0000                  		bra.w	Obj11_ChkDel
000084E0                            
000084E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084E0                            
000084E0                            
000084E0                            Obj11_Solid:				; XREF: Obj11_Action
000084E0 7200                       		moveq	#0,d1
000084E2 1228 0028                  		move.b	$28(a0),d1
000084E6 E749                       		lsl.w	#3,d1
000084E8 3401                       		move.w	d1,d2
000084EA 5041                       		addq.w	#8,d1
000084EC D442                       		add.w	d2,d2
000084EE 43F8 D000                  		lea	($FFFFD000).w,a1
000084F2 4A69 0012                  		tst.w	$12(a1)
000084F6 6B00 0000                  		bmi.w	locret_751E
000084FA 3029 0008                  		move.w	8(a1),d0
000084FE 9068 0008                  		sub.w	8(a0),d0
00008502 D041                       		add.w	d1,d0
00008504 6B00 0000                  		bmi.w	locret_751E
00008508 B042                       		cmp.w	d2,d0
0000850A 6400 0000                  		bcc.w	locret_751E
0000850E 6000                       		bra.s	Platform2
00008510                            ; End of function Obj11_Solid
00008510                            
00008510                            ; ---------------------------------------------------------------------------
00008510                            ; Platform subroutine
00008510                            ; ---------------------------------------------------------------------------
00008510                            
00008510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008510                            
00008510                            
00008510                            PlatformObject:
00008510 43F8 D000                  		lea	($FFFFD000).w,a1
00008514 4A69 0012                  		tst.w	$12(a1)
00008518 6B00 0000                  		bmi.w	locret_751E
0000851C 3029 0008                  		move.w	8(a1),d0
00008520 9068 0008                  		sub.w	8(a0),d0
00008524 D041                       		add.w	d1,d0
00008526 6B00 0000                  		bmi.w	locret_751E
0000852A D241                       		add.w	d1,d1
0000852C B041                       		cmp.w	d1,d0
0000852E 6400 0000                  		bcc.w	locret_751E
00008532                            
00008532                            Platform2:
00008532 3028 000C                  		move.w	$C(a0),d0
00008536 5140                       		subq.w	#8,d0
00008538                            
00008538                            Platform3:
00008538 3429 000C                  		move.w	$C(a1),d2
0000853C 1229 0016                  		move.b	$16(a1),d1
00008540 4881                       		ext.w	d1
00008542 D242                       		add.w	d2,d1
00008544 5841                       		addq.w	#4,d1
00008546 9041                       		sub.w	d1,d0
00008548 6200 0000                  		bhi.w	locret_751E
0000854C 0C40 FFF0                  		cmpi.w	#-$10,d0
00008550 6500 0000                  		bcs.w	locret_751E
00008554 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008558 6B00 0000                  		bmi.w	locret_751E
0000855C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00008562 6400 0000                  		bcc.w	locret_751E
00008566 D440                       		add.w	d0,d2
00008568 5642                       		addq.w	#3,d2
0000856A 3342 000C                  		move.w	d2,$C(a1)
0000856E 5428 0024                  		addq.b	#2,$24(a0)
00008572                            
00008572                            loc_74AE:
00008572 0829 0003 0022             		btst	#3,$22(a1)
00008578 6700                       		beq.s	loc_74DC
0000857A 7000                       		moveq	#0,d0
0000857C 1029 003D                  		move.b	$3D(a1),d0
00008580 ED48                       		lsl.w	#6,d0
00008582 0680 00FF D000             		addi.l	#$FFD000,d0
00008588 2440                       		movea.l	d0,a2
0000858A 08AA 0003 0022             		bclr	#3,$22(a2)
00008590 422A 0025                  		clr.b	$25(a2)
00008594 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
0000859A 6600                       		bne.s	loc_74DC
0000859C 552A 0024                  		subq.b	#2,$24(a2)
000085A0                            
000085A0                            loc_74DC:
000085A0 3008                       		move.w	a0,d0
000085A2 0440 D000                  		subi.w	#-$3000,d0
000085A6 EC48                       		lsr.w	#6,d0
000085A8 0240 007F                  		andi.w	#$7F,d0
000085AC 1340 003D                  		move.b	d0,$3D(a1)
000085B0 137C 0000 0026             		move.b	#0,$26(a1)
000085B6 337C 0000 0012             		move.w	#0,$12(a1)
000085BC 3369 0010 0020             		move.w	$10(a1),$20(a1)
000085C2 0829 0001 0022             		btst	#1,$22(a1)
000085C8 6700                       		beq.s	loc_7512
000085CA 2F08                       		move.l	a0,-(sp)
000085CC 2049                       		movea.l	a1,a0
000085CE 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000085D4 205F                       		movea.l	(sp)+,a0
000085D6                            
000085D6                            loc_7512:
000085D6 08E9 0003 0022             		bset	#3,$22(a1)
000085DC 08E8 0003 0022             		bset	#3,$22(a0)
000085E2                            
000085E2                            locret_751E:
000085E2 4E75                       		rts	
000085E4                            ; End of function PlatformObject
000085E4                            
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            
000085E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085E4                            
000085E4                            
000085E4                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
000085E4 43F8 D000                  		lea	($FFFFD000).w,a1
000085E8 4A69 0012                  		tst.w	$12(a1)
000085EC 6B00 FFF4                  		bmi.w	locret_751E
000085F0 3029 0008                  		move.w	8(a1),d0
000085F4 9068 0008                  		sub.w	8(a0),d0
000085F8 D041                       		add.w	d1,d0
000085FA 6BE6                       		bmi.s	locret_751E
000085FC D241                       		add.w	d1,d1
000085FE B041                       		cmp.w	d1,d0
00008600 64E0                       		bcc.s	locret_751E
00008602 0828 0000 0001             		btst	#0,1(a0)
00008608 6700                       		beq.s	loc_754A
0000860A 4640                       		not.w	d0
0000860C D041                       		add.w	d1,d0
0000860E                            
0000860E                            loc_754A:
0000860E E248                       		lsr.w	#1,d0
00008610 7600                       		moveq	#0,d3
00008612 1632 0000                  		move.b	(a2,d0.w),d3
00008616 3028 000C                  		move.w	$C(a0),d0
0000861A 9043                       		sub.w	d3,d0
0000861C 6000 FF1A                  		bra.w	Platform3
00008620                            ; End of function SlopeObject
00008620                            
00008620                            
00008620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008620                            
00008620                            
00008620                            Obj15_Solid:				; XREF: Obj15_SetSolid
00008620 43F8 D000                  		lea	($FFFFD000).w,a1
00008624 4A69 0012                  		tst.w	$12(a1)
00008628 6B00 FFB8                  		bmi.w	locret_751E
0000862C 3029 0008                  		move.w	8(a1),d0
00008630 9068 0008                  		sub.w	8(a0),d0
00008634 D041                       		add.w	d1,d0
00008636 6B00 FFAA                  		bmi.w	locret_751E
0000863A D241                       		add.w	d1,d1
0000863C B041                       		cmp.w	d1,d0
0000863E 6400 FFA2                  		bcc.w	locret_751E
00008642 3028 000C                  		move.w	$C(a0),d0
00008646 9043                       		sub.w	d3,d0
00008648 6000 FEEE                  		bra.w	Platform3
0000864C                            ; End of function Obj15_Solid
0000864C                            
0000864C                            ; ===========================================================================
0000864C                            
0000864C                            Obj11_Action2:				; XREF: Obj11_Index
0000864C 6100                       		bsr.s	Obj11_WalkOff
0000864E 6100 0000                  		bsr.w	DisplaySprite
00008652 6000 0000                  		bra.w	Obj11_ChkDel
00008656                            
00008656                            ; ---------------------------------------------------------------------------
00008656                            ; Subroutine allowing Sonic to walk off a bridge
00008656                            ; ---------------------------------------------------------------------------
00008656                            
00008656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008656                            
00008656                            
00008656                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008656 7200                       		moveq	#0,d1
00008658 1228 0028                  		move.b	$28(a0),d1
0000865C E749                       		lsl.w	#3,d1
0000865E 3401                       		move.w	d1,d2
00008660 5041                       		addq.w	#8,d1
00008662 6100                       		bsr.s	ExitPlatform2
00008664 6400                       		bcc.s	locret_75BE
00008666 E848                       		lsr.w	#4,d0
00008668 1140 003F                  		move.b	d0,$3F(a0)
0000866C 1028 003E                  		move.b	$3E(a0),d0
00008670 0C00 0040                  		cmpi.b	#$40,d0
00008674 6700                       		beq.s	loc_75B6
00008676 5828 003E                  		addq.b	#4,$3E(a0)
0000867A                            
0000867A                            loc_75B6:
0000867A 6100 0000                  		bsr.w	Obj11_Bend
0000867E 6100 0000                  		bsr.w	Obj11_MoveSonic
00008682                            
00008682                            locret_75BE:
00008682 4E75                       		rts	
00008684                            ; End of function Obj11_WalkOff
00008684                            
00008684                            ; ---------------------------------------------------------------------------
00008684                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008684                            ; ---------------------------------------------------------------------------
00008684                            
00008684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008684                            
00008684                            
00008684                            ExitPlatform:
00008684 3401                       		move.w	d1,d2
00008686                            
00008686                            ExitPlatform2:
00008686 D442                       		add.w	d2,d2
00008688 43F8 D000                  		lea	($FFFFD000).w,a1
0000868C 0829 0001 0022             		btst	#1,$22(a1)
00008692 6600                       		bne.s	loc_75E0
00008694 3029 0008                  		move.w	8(a1),d0
00008698 9068 0008                  		sub.w	8(a0),d0
0000869C D041                       		add.w	d1,d0
0000869E 6B00                       		bmi.s	loc_75E0
000086A0 B042                       		cmp.w	d2,d0
000086A2 6500                       		bcs.s	locret_75F2
000086A4                            
000086A4                            loc_75E0:
000086A4 08A9 0003 0022             		bclr	#3,$22(a1)
000086AA 117C 0002 0024             		move.b	#2,$24(a0)
000086B0 08A8 0003 0022             		bclr	#3,$22(a0)
000086B6                            
000086B6                            locret_75F2:
000086B6 4E75                       		rts	
000086B8                            ; End of function ExitPlatform
000086B8                            
000086B8                            
000086B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086B8                            
000086B8                            
000086B8                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000086B8 7000                       		moveq	#0,d0
000086BA 1028 003F                  		move.b	$3F(a0),d0
000086BE 1030 0029                  		move.b	$29(a0,d0.w),d0
000086C2 ED48                       		lsl.w	#6,d0
000086C4 0680 00FF D000             		addi.l	#$FFD000,d0
000086CA 2440                       		movea.l	d0,a2
000086CC 43F8 D000                  		lea	($FFFFD000).w,a1
000086D0 302A 000C                  		move.w	$C(a2),d0
000086D4 5140                       		subq.w	#8,d0
000086D6 7200                       		moveq	#0,d1
000086D8 1229 0016                  		move.b	$16(a1),d1
000086DC 9041                       		sub.w	d1,d0
000086DE 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000086E2 4E75                       		rts	
000086E4                            ; End of function Obj11_MoveSonic
000086E4                            
000086E4                            
000086E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086E4                            
000086E4                            
000086E4                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000086E4 1028 003E                  		move.b	$3E(a0),d0
000086E8 6100 A2E2                  		bsr.w	CalcSine
000086EC 3800                       		move.w	d0,d4
000086EE 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000086F4 7000                       		moveq	#0,d0
000086F6 1028 0028                  		move.b	$28(a0),d0
000086FA E948                       		lsl.w	#4,d0
000086FC 7600                       		moveq	#0,d3
000086FE 1628 003F                  		move.b	$3F(a0),d3
00008702 3403                       		move.w	d3,d2
00008704 D640                       		add.w	d0,d3
00008706 7A00                       		moveq	#0,d5
00008708 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
0000870E 1A35 3000                  		move.b	(a5,d3.w),d5
00008712 0243 000F                  		andi.w	#$F,d3
00008716 E94B                       		lsl.w	#4,d3
00008718 47F4 3000                  		lea	(a4,d3.w),a3
0000871C 45E8 0029                  		lea	$29(a0),a2
00008720                            
00008720                            loc_765C:
00008720 7000                       		moveq	#0,d0
00008722 101A                       		move.b	(a2)+,d0
00008724 ED48                       		lsl.w	#6,d0
00008726 0680 00FF D000             		addi.l	#$FFD000,d0
0000872C 2240                       		movea.l	d0,a1
0000872E 7000                       		moveq	#0,d0
00008730 101B                       		move.b	(a3)+,d0
00008732 5240                       		addq.w	#1,d0
00008734 C0C5                       		mulu.w	d5,d0
00008736 C0C4                       		mulu.w	d4,d0
00008738 4840                       		swap	d0
0000873A D069 003C                  		add.w	$3C(a1),d0
0000873E 3340 000C                  		move.w	d0,$C(a1)
00008742 51CA FFDC                  		dbf	d2,loc_765C
00008746 7000                       		moveq	#0,d0
00008748 1028 0028                  		move.b	$28(a0),d0
0000874C 7600                       		moveq	#0,d3
0000874E 1628 003F                  		move.b	$3F(a0),d3
00008752 5203                       		addq.b	#1,d3
00008754 9600                       		sub.b	d0,d3
00008756 4403                       		neg.b	d3
00008758 6B00                       		bmi.s	locret_76CA
0000875A 3403                       		move.w	d3,d2
0000875C E94B                       		lsl.w	#4,d3
0000875E 47F4 3000                  		lea	(a4,d3.w),a3
00008762 D6C2                       		adda.w	d2,a3
00008764 5342                       		subq.w	#1,d2
00008766 6500                       		bcs.s	locret_76CA
00008768                            
00008768                            loc_76A4:
00008768 7000                       		moveq	#0,d0
0000876A 101A                       		move.b	(a2)+,d0
0000876C ED48                       		lsl.w	#6,d0
0000876E 0680 00FF D000             		addi.l	#$FFD000,d0
00008774 2240                       		movea.l	d0,a1
00008776 7000                       		moveq	#0,d0
00008778 1023                       		move.b	-(a3),d0
0000877A 5240                       		addq.w	#1,d0
0000877C C0C5                       		mulu.w	d5,d0
0000877E C0C4                       		mulu.w	d4,d0
00008780 4840                       		swap	d0
00008782 D069 003C                  		add.w	$3C(a1),d0
00008786 3340 000C                  		move.w	d0,$C(a1)
0000878A 51CA FFDC                  		dbf	d2,loc_76A4
0000878E                            
0000878E                            locret_76CA:
0000878E 4E75                       		rts	
00008790                            ; End of function Obj11_Bend
00008790                            
00008790                            ; ===========================================================================
00008790                            ; ---------------------------------------------------------------------------
00008790                            ; GHZ bridge-bending data
00008790                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008790                            ; ---------------------------------------------------------------------------
00008790                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000088A0                            		even
000088A0                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000089A0                            		even
000089A0                            
000089A0                            ; ===========================================================================
000089A0                            
000089A0                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000089A0 3028 0008                  		move.w	8(a0),d0
000089A4 0240 FF80                  		andi.w	#$FF80,d0
000089A8 3238 F700                  		move.w	($FFFFF700).w,d1
000089AC 0441 0080                  		subi.w	#$80,d1
000089B0 0241 FF80                  		andi.w	#$FF80,d1
000089B4 9041                       		sub.w	d1,d0
000089B6 0C40 0280                  		cmpi.w	#$280,d0
000089BA 6300                       		bls.s	Obj11_NoDel
000089BC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000089C0 6700                       		beq.s	Obj11_DelAll		; if it's zero, don't remember object
000089C2 3440                       		movea.w	d0,a2	; load address into a2
000089C4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000089C8 6000                       		bra.s	Obj11_DelAll	; and delete object
000089CA                            
000089CA                            Obj11_NoDel:
000089CA 4E75                       		rts	
000089CC                            ; ===========================================================================
000089CC                            
000089CC                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000089CC 7400                       		moveq	#0,d2
000089CE 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000089D2 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000089D4 5302                       		subq.b	#1,d2		; subtract 1
000089D6 6500                       		bcs.s	Obj11_Delete
000089D8                            
000089D8                            Obj11_DelLoop:
000089D8 7000                       		moveq	#0,d0
000089DA 101A                       		move.b	(a2)+,d0
000089DC ED48                       		lsl.w	#6,d0
000089DE 0680 00FF D000             		addi.l	#$FFD000,d0
000089E4 2240                       		movea.l	d0,a1
000089E6 B048                       		cmp.w	a0,d0
000089E8 6700                       		beq.s	loc_791E
000089EA 6100 0000                  		bsr.w	DeleteObject2
000089EE                            
000089EE                            loc_791E:
000089EE 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000089F2                            
000089F2                            Obj11_Delete:
000089F2 6100 0000                  		bsr.w	DeleteObject
000089F6 4E75                       		rts	
000089F8                            ; ===========================================================================
000089F8                            
000089F8                            Obj11_Delete2:				; XREF: Obj11_Index
000089F8 6100 0000                  		bsr.w	DeleteObject
000089FC 4E75                       		rts	
000089FE                            ; ===========================================================================
000089FE                            
000089FE                            Obj11_Display2:				; XREF: Obj11_Index
000089FE 6100 0000                  		bsr.w	DisplaySprite
00008A02 4E75                       		rts	
00008A04                            ; ===========================================================================
00008A04                            ; ---------------------------------------------------------------------------
00008A04                            ; Sprite mappings - GHZ	bridge
00008A04                            ; ---------------------------------------------------------------------------
00008A04                            Map_obj11:
00008A04                            	include "_maps\obj11.asm"
00008A04                            ; ---------------------------------------------------------------------------
00008A04                            ; Sprite mappings - GHZ	bridge
00008A04                            ; ---------------------------------------------------------------------------
00008A04 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008A08 0000                       		dc.w byte_794B-Map_obj11
00008A0A 01                         byte_793A:	dc.b 1
00008A0B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008A10 02                         byte_7940:	dc.b 2
00008A11 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008A16 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008A1B 01                         byte_794B:	dc.b 1
00008A1C FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008A22 00                         		even
00008A22 00                         		even
00008A22                            
00008A22                            ; ===========================================================================
00008A22                            ; ---------------------------------------------------------------------------
00008A22                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008A22                            ;	    - spiked ball on a chain (SBZ)
00008A22                            ; ---------------------------------------------------------------------------
00008A22                            
00008A22                            Obj15:					; XREF: Obj_Index
00008A22 7000                       		moveq	#0,d0
00008A24 1028 0024                  		move.b	$24(a0),d0
00008A28 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008A2C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008A30                            ; ===========================================================================
00008A30 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008A34 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008A38 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008A3C 0000                       		dc.w Obj15_Action-Obj15_Index
00008A3E                            ; ===========================================================================
00008A3E                            
00008A3E                            Obj15_Main:				; XREF: Obj15_Index
00008A3E 5428 0024                  		addq.b	#2,$24(a0)
00008A42 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008A4A 317C 4380 0002             		move.w	#$4380,2(a0)
00008A50 117C 0004 0001             		move.b	#4,1(a0)
00008A56 117C 0003 0018             		move.b	#3,$18(a0)
00008A5C 117C 0018 0019             		move.b	#$18,$19(a0)
00008A62 117C 0008 0016             		move.b	#8,$16(a0)
00008A68 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008A6E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008A74 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A7A 6600                       		bne.s	Obj15_NotSLZ
00008A7C 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008A84 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008A8A 117C 0020 0019             		move.b	#$20,$19(a0)
00008A90 117C 0010 0016             		move.b	#$10,$16(a0)
00008A96 117C 0099 0020             		move.b	#$99,$20(a0)
00008A9C                            
00008A9C                            Obj15_NotSLZ:
00008A9C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008AA2 6600                       		bne.s	Obj15_SetLength
00008AA4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008AAC 317C 0391 0002             		move.w	#$391,2(a0)
00008AB2 117C 0018 0019             		move.b	#$18,$19(a0)
00008AB8 117C 0018 0016             		move.b	#$18,$16(a0)
00008ABE 117C 0086 0020             		move.b	#$86,$20(a0)
00008AC4 117C 000C 0024             		move.b	#$C,$24(a0)
00008ACA                            
00008ACA                            Obj15_SetLength:
00008ACA 1810                       		move.b	0(a0),d4
00008ACC 7200                       		moveq	#0,d1
00008ACE 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008AD2 1212                       		move.b	(a2),d1		; move a2 to d1
00008AD4 3F01                       		move.w	d1,-(sp)
00008AD6 0241 000F                  		andi.w	#$F,d1
00008ADA 14FC 0000                  		move.b	#0,(a2)+
00008ADE 3601                       		move.w	d1,d3
00008AE0 E94B                       		lsl.w	#4,d3
00008AE2 5003                       		addq.b	#8,d3
00008AE4 1143 003C                  		move.b	d3,$3C(a0)
00008AE8 5103                       		subq.b	#8,d3
00008AEA 4A28 001A                  		tst.b	$1A(a0)
00008AEE 6700                       		beq.s	Obj15_MakeChain
00008AF0 5003                       		addq.b	#8,d3
00008AF2 5341                       		subq.w	#1,d1
00008AF4                            
00008AF4                            Obj15_MakeChain:
00008AF4 6100 0000                  		bsr.w	SingleObjLoad
00008AF8 6600                       		bne.s	loc_7A92
00008AFA 5228 0028                  		addq.b	#1,$28(a0)
00008AFE 3A09                       		move.w	a1,d5
00008B00 0445 D000                  		subi.w	#-$3000,d5
00008B04 EC4D                       		lsr.w	#6,d5
00008B06 0245 007F                  		andi.w	#$7F,d5
00008B0A 14C5                       		move.b	d5,(a2)+
00008B0C 137C 000A 0024             		move.b	#$A,$24(a1)
00008B12 1284                       		move.b	d4,0(a1)	; load swinging	object
00008B14 2368 0004 0004             		move.l	4(a0),4(a1)
00008B1A 3368 0002 0002             		move.w	2(a0),2(a1)
00008B20 08A9 0006 0002             		bclr	#6,2(a1)
00008B26 137C 0004 0001             		move.b	#4,1(a1)
00008B2C 137C 0004 0018             		move.b	#4,$18(a1)
00008B32 137C 0008 0019             		move.b	#8,$19(a1)
00008B38 137C 0001 001A             		move.b	#1,$1A(a1)
00008B3E 1343 003C                  		move.b	d3,$3C(a1)
00008B42 0403 0010                  		subi.b	#$10,d3
00008B46 6400                       		bcc.s	loc_7A8E
00008B48 137C 0002 001A             		move.b	#2,$1A(a1)
00008B4E 137C 0003 0018             		move.b	#3,$18(a1)
00008B54 08E9 0006 0002             		bset	#6,2(a1)
00008B5A                            
00008B5A                            loc_7A8E:
00008B5A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008B5E                            
00008B5E                            loc_7A92:
00008B5E 3A08                       		move.w	a0,d5
00008B60 0445 D000                  		subi.w	#-$3000,d5
00008B64 EC4D                       		lsr.w	#6,d5
00008B66 0245 007F                  		andi.w	#$7F,d5
00008B6A 14C5                       		move.b	d5,(a2)+
00008B6C 317C 4080 0026             		move.w	#$4080,$26(a0)
00008B72 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008B78 321F                       		move.w	(sp)+,d1
00008B7A 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008B7E 6700                       		beq.s	loc_7AD4	; if not, branch
00008B80 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008B88 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008B8E 117C 0001 001A             		move.b	#1,$1A(a0)
00008B94 117C 0002 0018             		move.b	#2,$18(a0)
00008B9A 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008BA0                            
00008BA0                            loc_7AD4:
00008BA0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008BA6 6700                       		beq.s	Obj15_Action	; if yes, branch
00008BA8                            
00008BA8                            Obj15_SetSolid:				; XREF: Obj15_Index
00008BA8 7200                       		moveq	#0,d1
00008BAA 1228 0019                  		move.b	$19(a0),d1
00008BAE 7600                       		moveq	#0,d3
00008BB0 1628 0016                  		move.b	$16(a0),d3
00008BB4 6100 FA6A                  		bsr.w	Obj15_Solid
00008BB8                            
00008BB8                            Obj15_Action:				; XREF: Obj15_Index
00008BB8 6100 0000                  		bsr.w	Obj15_Move
00008BBC 6100 0000                  		bsr.w	DisplaySprite
00008BC0 6000 0000                  		bra.w	Obj15_ChkDel
00008BC4                            ; ===========================================================================
00008BC4                            
00008BC4                            Obj15_Action2:				; XREF: Obj15_Index
00008BC4 7200                       		moveq	#0,d1
00008BC6 1228 0019                  		move.b	$19(a0),d1
00008BCA 6100 FAB8                  		bsr.w	ExitPlatform
00008BCE 3F28 0008                  		move.w	8(a0),-(sp)
00008BD2 6100 0000                  		bsr.w	Obj15_Move
00008BD6 341F                       		move.w	(sp)+,d2
00008BD8 7600                       		moveq	#0,d3
00008BDA 1628 0016                  		move.b	$16(a0),d3
00008BDE 5203                       		addq.b	#1,d3
00008BE0 6100 0000                  		bsr.w	MvSonicOnPtfm
00008BE4 6100 0000                  		bsr.w	DisplaySprite
00008BE8 6000 0000                  		bra.w	Obj15_ChkDel
00008BEC                            
00008BEC 4E75                       		rts
00008BEE                            
00008BEE                            ; ---------------------------------------------------------------------------
00008BEE                            ; Subroutine to	change Sonic's position with a platform
00008BEE                            ; ---------------------------------------------------------------------------
00008BEE                            
00008BEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BEE                            
00008BEE                            
00008BEE                            MvSonicOnPtfm:
00008BEE 43F8 D000                  		lea	($FFFFD000).w,a1
00008BF2 3028 000C                  		move.w	$C(a0),d0
00008BF6 9043                       		sub.w	d3,d0
00008BF8 6000                       		bra.s	MvSonic2
00008BFA                            ; End of function MvSonicOnPtfm
00008BFA                            
00008BFA                            ; ---------------------------------------------------------------------------
00008BFA                            ; Subroutine to	change Sonic's position with a platform
00008BFA                            ; ---------------------------------------------------------------------------
00008BFA                            
00008BFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BFA                            
00008BFA                            
00008BFA                            MvSonicOnPtfm2:
00008BFA 43F8 D000                  		lea	($FFFFD000).w,a1
00008BFE 3028 000C                  		move.w	$C(a0),d0
00008C02 0440 0009                  		subi.w	#9,d0
00008C06                            
00008C06                            MvSonic2:
00008C06 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008C0A 6B00                       		bmi.s	locret_7B62
00008C0C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C12 6400                       		bcc.s	locret_7B62
00008C14 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C18 6600                       		bne.s	locret_7B62
00008C1A 9468 0008                  		sub.w	8(a0),d2
00008C1E 9569 0008                  		sub.w	d2,8(a1)
00008C22 7200                       		moveq	#0,d1
00008C24 1229 0016                  		move.b	$16(a1),d1
00008C28 9041                       		sub.w	d1,d0
00008C2A B069 000C                  		cmp.w	$C(a1),d0
00008C2E 6600                       		bne.s	@frustrated
00008C30 4A42                       		tst.w	d2
00008C32 6600                       		bne.s	@frustrated
00008C34 3340 000C                  		move.w	d0,$C(a1)	
00008C38 4A38 F5D9                  		tst.b	(SonimeSST+sonime_waittimer2).w
00008C3C 6700                       		beq.s	@resetwaittimer
00008C3E 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008C42 6600                       		bne.s	locret_7B62
00008C44 5338 F5D9                  		subi.b	#1,(SonimeSST+sonime_waittimer2).w
00008C48 6000                       		bra.s	@frustrated2
00008C4A                            
00008C4A                            	@frustrated:
00008C4A 11FC 0020 F5D9             		move.b	#$20,(SonimeSST+sonime_waittimer2).w
00008C50 3340 000C                  		move.w	d0,$C(a1)
00008C54 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008C58 6600                       		bne.s	@subtract
00008C5A                            
00008C5A                            	@frustrated2:
00008C5A 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
00008C60 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00008C66 4E75                       		rts
00008C68                            
00008C68                            	@subtract:
00008C68 5338 F5D8                  		subi.b	#1,(SonimeSST+sonime_waittimer).w
00008C6C 4E75                       		rts
00008C6E                            
00008C6E                            	@resetwaittimer:
00008C6E 11FC 0060 F5D8             		move.b	#$60,(SonimeSST+sonime_waittimer).w
00008C74                            
00008C74                            locret_7B62:
00008C74 4E75                       		rts	
00008C76                            ; End of function MvSonicOnPtfm2
00008C76                            
00008C76                            
00008C76                            CheckIfMoving:
00008C76                            
00008C76                            
00008C76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C76                            
00008C76                            
00008C76                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008C76 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008C7A 323C 0080                  		move.w	#$80,d1
00008C7E 0828 0000 0022             		btst	#0,$22(a0)
00008C84 6700                       		beq.s	loc_7B78
00008C86 4440                       		neg.w	d0
00008C88 D041                       		add.w	d1,d0
00008C8A                            
00008C8A                            loc_7B78:
00008C8A 6000                       		bra.s	Obj15_Move2
00008C8C                            ; End of function Obj15_Move
00008C8C                            
00008C8C                            
00008C8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C8C                            
00008C8C                            
00008C8C                            Obj48_Move:				; XREF: Obj48_Display2
00008C8C 4A28 003D                  		tst.b	$3D(a0)
00008C90 6600                       		bne.s	loc_7B9C
00008C92 3028 003E                  		move.w	$3E(a0),d0
00008C96 5040                       		addq.w	#8,d0
00008C98 3140 003E                  		move.w	d0,$3E(a0)
00008C9C D168 0026                  		add.w	d0,$26(a0)
00008CA0 0C40 0200                  		cmpi.w	#$200,d0
00008CA4 6600                       		bne.s	loc_7BB6
00008CA6 117C 0001 003D             		move.b	#1,$3D(a0)
00008CAC 6000                       		bra.s	loc_7BB6
00008CAE                            ; ===========================================================================
00008CAE                            
00008CAE                            loc_7B9C:
00008CAE 3028 003E                  		move.w	$3E(a0),d0
00008CB2 5140                       		subq.w	#8,d0
00008CB4 3140 003E                  		move.w	d0,$3E(a0)
00008CB8 D168 0026                  		add.w	d0,$26(a0)
00008CBC 0C40 FE00                  		cmpi.w	#-$200,d0
00008CC0 6600                       		bne.s	loc_7BB6
00008CC2 117C 0000 003D             		move.b	#0,$3D(a0)
00008CC8                            
00008CC8                            loc_7BB6:
00008CC8 1028 0026                  		move.b	$26(a0),d0
00008CCC                            ; End of function Obj48_Move
00008CCC                            
00008CCC                            
00008CCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CCC                            
00008CCC                            
00008CCC                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008CCC 6100 9CFE                  		bsr.w	CalcSine
00008CD0 3428 0038                  		move.w	$38(a0),d2
00008CD4 3628 003A                  		move.w	$3A(a0),d3
00008CD8 45E8 0028                  		lea	$28(a0),a2
00008CDC 7C00                       		moveq	#0,d6
00008CDE 1C1A                       		move.b	(a2)+,d6
00008CE0                            
00008CE0                            loc_7BCE:
00008CE0 7800                       		moveq	#0,d4
00008CE2 181A                       		move.b	(a2)+,d4
00008CE4 ED4C                       		lsl.w	#6,d4
00008CE6 0684 00FF D000             		addi.l	#$FFD000,d4
00008CEC 2244                       		movea.l	d4,a1
00008CEE 7800                       		moveq	#0,d4
00008CF0 1829 003C                  		move.b	$3C(a1),d4
00008CF4 2A04                       		move.l	d4,d5
00008CF6 C9C0                       		muls.w	d0,d4
00008CF8 E084                       		asr.l	#8,d4
00008CFA CBC1                       		muls.w	d1,d5
00008CFC E085                       		asr.l	#8,d5
00008CFE D842                       		add.w	d2,d4
00008D00 DA43                       		add.w	d3,d5
00008D02 3344 000C                  		move.w	d4,$C(a1)
00008D06 3345 0008                  		move.w	d5,8(a1)
00008D0A 51CE FFD4                  		dbf	d6,loc_7BCE
00008D0E 4E75                       		rts	
00008D10                            ; End of function Obj15_Move2
00008D10                            
00008D10                            ; ===========================================================================
00008D10                            
00008D10                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008D10 3028 003A                  		move.w	$3A(a0),d0
00008D14 0240 FF80                  		andi.w	#$FF80,d0
00008D18 3238 F700                  		move.w	($FFFFF700).w,d1
00008D1C 0441 0080                  		subi.w	#$80,d1
00008D20 0241 FF80                  		andi.w	#$FF80,d1
00008D24 9041                       		sub.w	d1,d0
00008D26 0C40 0280                  		cmpi.w	#$280,d0
00008D2A 6300                       		bls.s	Obj15_NoDel
00008D2C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008D30 6700                       		beq.s	Obj15_DelAll		; if it's zero, don't remember object
00008D32 3440                       		movea.w	d0,a2	; load address into a2
00008D34 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008D38 6000                       		bra.s	Obj15_DelAll	; and delete object
00008D3A                            
00008D3A                            Obj15_NoDel:
00008D3A 4E75                       		rts	
00008D3C                            ; ===========================================================================
00008D3C                            
00008D3C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008D3C 7400                       		moveq	#0,d2
00008D3E 45E8 0028                  		lea	$28(a0),a2
00008D42 141A                       		move.b	(a2)+,d2
00008D44                            
00008D44                            Obj15_DelLoop:
00008D44 7000                       		moveq	#0,d0
00008D46 101A                       		move.b	(a2)+,d0
00008D48 ED48                       		lsl.w	#6,d0
00008D4A 0680 00FF D000             		addi.l	#$FFD000,d0
00008D50 2240                       		movea.l	d0,a1
00008D52 6100 0000                  		bsr.w	DeleteObject2
00008D56 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008D5A 4E75                       		rts	
00008D5C                            ; ===========================================================================
00008D5C                            
00008D5C                            Obj15_Delete:				; XREF: Obj15_Index
00008D5C 6100 0000                  		bsr.w	DeleteObject
00008D60 4E75                       		rts	
00008D62                            ; ===========================================================================
00008D62                            
00008D62                            Obj15_Display:				; XREF: Obj15_Index
00008D62 6000 0000                  		bra.w	DisplaySprite
00008D66                            ; ===========================================================================
00008D66                            ; ---------------------------------------------------------------------------
00008D66                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008D66                            ; ---------------------------------------------------------------------------
00008D66                            Map_obj15:
00008D66                            	include "_maps\obj15ghz.asm"
00008D66                            ; ---------------------------------------------------------------------------
00008D66                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008D66                            ; ---------------------------------------------------------------------------
00008D66 0000                       		dc.w byte_7C4E-Map_obj15
00008D68 0000                       		dc.w byte_7C59-Map_obj15
00008D6A 0000                       		dc.w byte_7C5F-Map_obj15
00008D6C 02                         byte_7C4E:	dc.b 2
00008D6D F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008D72 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008D77 01                         byte_7C59:	dc.b 1
00008D78 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008D7D 01                         byte_7C5F:	dc.b 1
00008D7E F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008D84 00                         		even
00008D84 00                         		even
00008D84                            
00008D84                            ; ---------------------------------------------------------------------------
00008D84                            ; Sprite mappings - SLZ	swinging platforms
00008D84                            ; ---------------------------------------------------------------------------
00008D84                            Map_obj15a:
00008D84                            	include "_maps\obj15slz.asm"
00008D84                            ; ---------------------------------------------------------------------------
00008D84                            ; Sprite mappings - SLZ	swinging platforms
00008D84                            ; ---------------------------------------------------------------------------
00008D84 0000                       		dc.w byte_7C6C-Map_obj15a
00008D86 0000                       		dc.w byte_7C95-Map_obj15a
00008D88 0000                       		dc.w byte_7C9B-Map_obj15a
00008D8A 08                         byte_7C6C:	dc.b 8
00008D8B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008D90 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008D95 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008D9A F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008D9F 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008DA4 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008DA9 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008DAE 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008DB3 01                         byte_7C95:	dc.b 1
00008DB4 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008DB9 01                         byte_7C9B:	dc.b 1
00008DBA F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008DC0 00                         		even
00008DC0 00                         		even
00008DC0                            
00008DC0                            ; ===========================================================================
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            
00008DC0                            Obj17:					; XREF: Obj_Index
00008DC0 7000                       		moveq	#0,d0
00008DC2 1028 0024                  		move.b	$24(a0),d0
00008DC6 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008DCA 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008DCE                            ; ===========================================================================
00008DCE 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008DD0 0000                       		dc.w Obj17_Action-Obj17_Index
00008DD2 0000                       		dc.w Obj17_Action-Obj17_Index
00008DD4 0000                       		dc.w Obj17_Delete-Obj17_Index
00008DD6 0000                       		dc.w Obj17_Display-Obj17_Index
00008DD8                            ; ===========================================================================
00008DD8                            
00008DD8                            Obj17_Main:				; XREF: Obj17_Index
00008DD8 5428 0024                  		addq.b	#2,$24(a0)
00008DDC 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008DE4 317C 4398 0002             		move.w	#$4398,2(a0)
00008DEA 117C 0007 0022             		move.b	#7,$22(a0)
00008DF0 117C 0004 0001             		move.b	#4,1(a0)
00008DF6 117C 0003 0018             		move.b	#3,$18(a0)
00008DFC 117C 0008 0019             		move.b	#8,$19(a0)
00008E02 3428 000C                  		move.w	$C(a0),d2
00008E06 3628 0008                  		move.w	8(a0),d3
00008E0A 1810                       		move.b	0(a0),d4
00008E0C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008E10 7200                       		moveq	#0,d1
00008E12 1212                       		move.b	(a2),d1		; move a2 to d1
00008E14 14FC 0000                  		move.b	#0,(a2)+
00008E18 3001                       		move.w	d1,d0
00008E1A E248                       		lsr.w	#1,d0
00008E1C E948                       		lsl.w	#4,d0
00008E1E 9640                       		sub.w	d0,d3
00008E20 5501                       		subq.b	#2,d1
00008E22 6500                       		bcs.s	Obj17_Action
00008E24 7C00                       		moveq	#0,d6
00008E26                            
00008E26                            Obj17_MakeHelix:
00008E26 6100 0000                  		bsr.w	SingleObjLoad
00008E2A 6600                       		bne.s	Obj17_Action
00008E2C 5228 0028                  		addq.b	#1,$28(a0)
00008E30 3A09                       		move.w	a1,d5
00008E32 0445 D000                  		subi.w	#$D000,d5
00008E36 EC4D                       		lsr.w	#6,d5
00008E38 0245 007F                  		andi.w	#$7F,d5
00008E3C 14C5                       		move.b	d5,(a2)+
00008E3E 137C 0008 0024             		move.b	#8,$24(a1)
00008E44 1284                       		move.b	d4,0(a1)
00008E46 3342 000C                  		move.w	d2,$C(a1)
00008E4A 3343 0008                  		move.w	d3,8(a1)
00008E4E 2368 0004 0004             		move.l	4(a0),4(a1)
00008E54 337C 4398 0002             		move.w	#$4398,2(a1)
00008E5A 137C 0004 0001             		move.b	#4,1(a1)
00008E60 137C 0003 0018             		move.b	#3,$18(a1)
00008E66 137C 0008 0019             		move.b	#8,$19(a1)
00008E6C 1346 003E                  		move.b	d6,$3E(a1)
00008E70 5206                       		addq.b	#1,d6
00008E72 0206 0007                  		andi.b	#7,d6
00008E76 0643 0010                  		addi.w	#$10,d3
00008E7A B668 0008                  		cmp.w	8(a0),d3
00008E7E 6600                       		bne.s	loc_7D78
00008E80 1146 003E                  		move.b	d6,$3E(a0)
00008E84 5206                       		addq.b	#1,d6
00008E86 0206 0007                  		andi.b	#7,d6
00008E8A 0643 0010                  		addi.w	#$10,d3
00008E8E 5228 0028                  		addq.b	#1,$28(a0)
00008E92                            
00008E92                            loc_7D78:
00008E92 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008E96                            
00008E96                            Obj17_Action:				; XREF: Obj17_Index
00008E96 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008E9A 6100 0000                  		bsr.w	DisplaySprite
00008E9E 6000 0000                  		bra.w	Obj17_ChkDel
00008EA2                            
00008EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EA2                            
00008EA2                            
00008EA2                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008EA2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008EA6 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008EAC D028 003E                  		add.b	$3E(a0),d0
00008EB0 0200 0007                  		andi.b	#7,d0
00008EB4 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008EB8 6600                       		bne.s	locret_7DA6
00008EBA 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008EC0                            
00008EC0                            locret_7DA6:
00008EC0 4E75                       		rts	
00008EC2                            ; End of function Obj17_RotateSpikes
00008EC2                            
00008EC2                            ; ===========================================================================
00008EC2                            
00008EC2                            Obj17_ChkDel:				; XREF: Obj17_Action
00008EC2 3028 0008                  		move.w	8(a0),d0
00008EC6 0240 FF80                  		andi.w	#$FF80,d0
00008ECA 3238 F700                  		move.w	($FFFFF700).w,d1
00008ECE 0441 0080                  		subi.w	#$80,d1
00008ED2 0241 FF80                  		andi.w	#$FF80,d1
00008ED6 9041                       		sub.w	d1,d0
00008ED8 0C40 0280                  		cmpi.w	#$280,d0
00008EDC 6300                       		bls.s	Obj17_NoDel
00008EDE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008EE2 6700                       		beq.s	Obj17_DelAll		; if it's zero, don't remember object
00008EE4 3440                       		movea.w	d0,a2	; load address into a2
00008EE6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008EEA 6000                       		bra.s	Obj17_DelAll	; and delete object
00008EEC                            
00008EEC                            Obj17_NoDel:
00008EEC 4E75                       		rts	
00008EEE                            ; ===========================================================================
00008EEE                            
00008EEE                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008EEE 7400                       		moveq	#0,d2
00008EF0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008EF4 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008EF6 5502                       		subq.b	#2,d2
00008EF8 6500                       		bcs.s	Obj17_Delete
00008EFA                            
00008EFA                            Obj17_DelLoop:
00008EFA 7000                       		moveq	#0,d0
00008EFC 101A                       		move.b	(a2)+,d0
00008EFE ED48                       		lsl.w	#6,d0
00008F00 0680 00FF D000             		addi.l	#$FFD000,d0
00008F06 2240                       		movea.l	d0,a1
00008F08 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008F0C 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008F10                            
00008F10                            Obj17_Delete:				; XREF: Obj17_Index
00008F10 6100 0000                  		bsr.w	DeleteObject
00008F14 4E75                       		rts	
00008F16                            ; ===========================================================================
00008F16                            
00008F16                            Obj17_Display:				; XREF: Obj17_Index
00008F16 6100 FF8A                  		bsr.w	Obj17_RotateSpikes
00008F1A 6000 0000                  		bra.w	DisplaySprite
00008F1E                            ; ===========================================================================
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E                            Map_obj17:
00008F1E                            	include "_maps\obj17.asm"
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008F22 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008F26 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008F2A 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008F2E 01                         byte_7E08:	dc.b 1
00008F2F F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008F34 01                         byte_7E0E:	dc.b 1
00008F35 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008F3A 01                         byte_7E14:	dc.b 1
00008F3B F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008F40 01                         byte_7E1A:	dc.b 1
00008F41 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008F46 01                         byte_7E20:	dc.b 1
00008F47 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008F4C 01                         byte_7E26:	dc.b 1
00008F4D 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008F52 01                         byte_7E2C:	dc.b 1
00008F53 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008F58                            		even
00008F58                            		even
00008F58                            
00008F58                            ; ===========================================================================
00008F58                            ; ---------------------------------------------------------------------------
00008F58                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008F58                            ; ---------------------------------------------------------------------------
00008F58                            
00008F58                            Obj18:					; XREF: Obj_Index
00008F58 7000                       		moveq	#0,d0
00008F5A 1028 0024                  		move.b	$24(a0),d0
00008F5E 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008F62 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008F66                            ; ===========================================================================
00008F66 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008F68 0000                       		dc.w Obj18_Solid-Obj18_Index
00008F6A 0000                       		dc.w Obj18_Action2-Obj18_Index
00008F6C 0000                       		dc.w Obj18_Delete-Obj18_Index
00008F6E 0000                       		dc.w Obj18_Action-Obj18_Index
00008F70                            ; ===========================================================================
00008F70                            
00008F70                            Obj18_Main:				; XREF: Obj18_Index
00008F70 5428 0024                  		addq.b	#2,$24(a0)
00008F74 317C 4000 0002             		move.w	#$4000,2(a0)
00008F7A 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008F82 117C 0020 0019             		move.b	#$20,$19(a0)
00008F88 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008F8E 6600                       		bne.s	Obj18_NotSYZ
00008F90 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008F98 117C 0020 0019             		move.b	#$20,$19(a0)
00008F9E                            
00008F9E                            Obj18_NotSYZ:
00008F9E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008FA4 6600                       		bne.s	Obj18_NotSLZ
00008FA6 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008FAE 117C 0020 0019             		move.b	#$20,$19(a0)
00008FB4 317C 4000 0002             		move.w	#$4000,2(a0)
00008FBA 117C 0003 0028             		move.b	#3,$28(a0)
00008FC0                            
00008FC0                            Obj18_NotSLZ:
00008FC0 117C 0004 0001             		move.b	#4,1(a0)
00008FC6 117C 0004 0018             		move.b	#4,$18(a0)
00008FCC 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008FD2 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008FD8 3168 0008 0032             		move.w	8(a0),$32(a0)
00008FDE 317C 0080 0026             		move.w	#$80,$26(a0)
00008FE4 7200                       		moveq	#0,d1
00008FE6 1028 0028                  		move.b	$28(a0),d0
00008FEA 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008FEE 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008FF0 5201                       		addq.b	#1,d1		; use frame #1
00008FF2 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008FF8                            
00008FF8                            Obj18_SetFrame:
00008FF8 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008FFC                            
00008FFC                            Obj18_Solid:				; XREF: Obj18_Index
00008FFC 4A28 0038                  		tst.b	$38(a0)
00009000 6700                       		beq.s	loc_7EE0
00009002 5928 0038                  		subq.b	#4,$38(a0)
00009006                            
00009006                            loc_7EE0:
00009006 7200                       		moveq	#0,d1
00009008 1228 0019                  		move.b	$19(a0),d1
0000900C 6100 F502                  		bsr.w	PlatformObject
00009010                            
00009010                            Obj18_Action:				; XREF: Obj18_Index
00009010 6100 0000                  		bsr.w	Obj18_Move
00009014 6100 0000                  		bsr.w	Obj18_Nudge
00009018 6100 0000                  		bsr.w	DisplaySprite
0000901C 6000 0000                  		bra.w	Obj18_ChkDel
00009020                            ; ===========================================================================
00009020                            
00009020                            Obj18_Action2:				; XREF: Obj18_Index
00009020 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009026 6700                       		beq.s	loc_7F06
00009028 5828 0038                  		addq.b	#4,$38(a0)
0000902C                            
0000902C                            loc_7F06:
0000902C 7200                       		moveq	#0,d1
0000902E 1228 0019                  		move.b	$19(a0),d1
00009032 6100 F650                  		bsr.w	ExitPlatform
00009036 3F28 0008                  		move.w	8(a0),-(sp)
0000903A 6100 0000                  		bsr.w	Obj18_Move
0000903E 6100 0000                  		bsr.w	Obj18_Nudge
00009042 341F                       		move.w	(sp)+,d2
00009044 6100 FBB4                  		bsr.w	MvSonicOnPtfm2
00009048 6100 0000                  		bsr.w	DisplaySprite
0000904C 6000 0000                  		bra.w	Obj18_ChkDel
00009050                            
00009050 4E75                       		rts
00009052                            
00009052                            ; ---------------------------------------------------------------------------
00009052                            ; Subroutine to	move platform slightly when you	stand on it
00009052                            ; ---------------------------------------------------------------------------
00009052                            
00009052                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009052                            
00009052                            
00009052                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00009052 1028 0038                  		move.b	$38(a0),d0
00009056 6100 9974                  		bsr.w	CalcSine
0000905A 323C 0400                  		move.w	#$400,d1
0000905E C1C1                       		muls.w	d1,d0
00009060 4840                       		swap	d0
00009062 D068 002C                  		add.w	$2C(a0),d0
00009066 3140 000C                  		move.w	d0,$C(a0)
0000906A 4E75                       		rts	
0000906C                            ; End of function Obj18_Nudge
0000906C                            
0000906C                            ; ---------------------------------------------------------------------------
0000906C                            ; Subroutine to	move platforms
0000906C                            ; ---------------------------------------------------------------------------
0000906C                            
0000906C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000906C                            
0000906C                            
0000906C                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000906C 7000                       		moveq	#0,d0
0000906E 1028 0028                  		move.b	$28(a0),d0
00009072 0240 000F                  		andi.w	#$F,d0
00009076 D040                       		add.w	d0,d0
00009078 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000907C 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00009080                            ; End of function Obj18_Move
00009080                            
00009080                            ; ===========================================================================
00009080 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00009084 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00009088 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000908C 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00009090 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00009094 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00009098 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000909A                            ; ===========================================================================
0000909A                            
0000909A                            Obj18_Type00:
0000909A 4E75                       		rts			; platform 00 doesn't move
0000909C                            ; ===========================================================================
0000909C                            
0000909C                            Obj18_Type05:
0000909C 3028 0032                  		move.w	$32(a0),d0
000090A0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090A4 4401                       		neg.b	d1		; reverse platform-motion
000090A6 0601 0040                  		addi.b	#$40,d1
000090AA 6000                       		bra.s	Obj18_01_Move
000090AC                            ; ===========================================================================
000090AC                            
000090AC                            Obj18_Type01:
000090AC 3028 0032                  		move.w	$32(a0),d0
000090B0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090B4 0401 0040                  		subi.b	#$40,d1
000090B8                            
000090B8                            Obj18_01_Move:
000090B8 4881                       		ext.w	d1
000090BA D041                       		add.w	d1,d0
000090BC 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000090C0 6000 0000                  		bra.w	Obj18_ChgMotion
000090C4                            ; ===========================================================================
000090C4                            
000090C4                            Obj18_Type0C:
000090C4 3028 0034                  		move.w	$34(a0),d0
000090C8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000090CC 4401                       		neg.b	d1		; reverse platform-motion
000090CE 0601 0030                  		addi.b	#$30,d1
000090D2 6000                       		bra.s	Obj18_02_Move
000090D4                            ; ===========================================================================
000090D4                            
000090D4                            Obj18_Type0B:
000090D4 3028 0034                  		move.w	$34(a0),d0
000090D8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000090DC 0401 0030                  		subi.b	#$30,d1
000090E0 6000                       		bra.s	Obj18_02_Move
000090E2                            ; ===========================================================================
000090E2                            
000090E2                            Obj18_Type06:
000090E2 3028 0034                  		move.w	$34(a0),d0
000090E6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090EA 4401                       		neg.b	d1		; reverse platform-motion
000090EC 0601 0040                  		addi.b	#$40,d1
000090F0 6000                       		bra.s	Obj18_02_Move
000090F2                            ; ===========================================================================
000090F2                            
000090F2                            Obj18_Type02:
000090F2 3028 0034                  		move.w	$34(a0),d0
000090F6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090FA 0401 0040                  		subi.b	#$40,d1
000090FE                            
000090FE                            Obj18_02_Move:
000090FE 4881                       		ext.w	d1
00009100 D041                       		add.w	d1,d0
00009102 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009106 6000 0000                  		bra.w	Obj18_ChgMotion
0000910A                            ; ===========================================================================
0000910A                            
0000910A                            Obj18_Type03:
0000910A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000910E 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00009110 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00009116 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00009118 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000911E                            
0000911E                            Obj18_03_NoMove:
0000911E 4E75                       		rts	
00009120                            ; ===========================================================================
00009120                            
00009120                            Obj18_03_Wait:
00009120 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009124 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00009126 317C 0020 003A             		move.w	#32,$3A(a0)
0000912C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00009130 4E75                       		rts	
00009132                            ; ===========================================================================
00009132                            
00009132                            Obj18_Type04:
00009132 4A68 003A                  		tst.w	$3A(a0)
00009136 6700                       		beq.s	loc_8048
00009138 5368 003A                  		subq.w	#1,$3A(a0)
0000913C 6600                       		bne.s	loc_8048
0000913E 0828 0003 0022             		btst	#3,$22(a0)
00009144 6700                       		beq.s	loc_8042
00009146 08E9 0001 0022             		bset	#1,$22(a1)
0000914C 08A9 0003 0022             		bclr	#3,$22(a1)
00009152 137C 0002 0024             		move.b	#2,$24(a1)
00009158 08A8 0003 0022             		bclr	#3,$22(a0)
0000915E 4228 0025                  		clr.b	$25(a0)
00009162 3368 0012 0012             		move.w	$12(a0),$12(a1)
00009168                            
00009168                            loc_8042:
00009168 117C 0008 0024             		move.b	#8,$24(a0)
0000916E                            
0000916E                            loc_8048:
0000916E 2628 002C                  		move.l	$2C(a0),d3
00009172 3028 0012                  		move.w	$12(a0),d0
00009176 48C0                       		ext.l	d0
00009178 E180                       		asl.l	#8,d0
0000917A D680                       		add.l	d0,d3
0000917C 2143 002C                  		move.l	d3,$2C(a0)
00009180 0668 0038 0012             		addi.w	#$38,$12(a0)
00009186 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000918A 0640 00E0                  		addi.w	#$E0,d0
0000918E B068 002C                  		cmp.w	$2C(a0),d0
00009192 6400                       		bcc.s	locret_8074
00009194 117C 0006 0024             		move.b	#6,$24(a0)
0000919A                            
0000919A                            locret_8074:
0000919A 4E75                       		rts	
0000919C                            ; ===========================================================================
0000919C                            
0000919C                            Obj18_Type07:
0000919C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000091A0 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000091A2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000091A6 7000                       		moveq	#0,d0
000091A8 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000091AC E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000091AE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000091B2 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000091B4 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000091BA                            
000091BA                            Obj18_07_NoMove:
000091BA 4E75                       		rts	
000091BC                            ; ===========================================================================
000091BC                            
000091BC                            Obj18_07_Wait:
000091BC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000091C0 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000091C2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000091C6 4E75                       		rts	
000091C8                            ; ===========================================================================
000091C8                            
000091C8                            Obj18_Type08:
000091C8 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000091CC 3028 0034                  		move.w	$34(a0),d0
000091D0 0440 0200                  		subi.w	#$200,d0
000091D4 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000091D8 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000091DA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000091DE                            
000091DE                            Obj18_08_NoStop:
000091DE 4E75                       		rts	
000091E0                            ; ===========================================================================
000091E0                            
000091E0                            Obj18_Type0A:
000091E0 3028 0034                  		move.w	$34(a0),d0
000091E4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000091E8 0401 0040                  		subi.b	#$40,d1
000091EC 4881                       		ext.w	d1
000091EE E241                       		asr.w	#1,d1
000091F0 D041                       		add.w	d1,d0
000091F2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000091F6                            
000091F6                            Obj18_ChgMotion:
000091F6 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000091FC 4E75                       		rts	
000091FE                            ; ===========================================================================
000091FE                            
000091FE                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000091FE 3028 0032                  		move.w	$32(a0),d0
00009202 0240 FF80                  		andi.w	#$FF80,d0
00009206 3238 F700                  		move.w	($FFFFF700).w,d1
0000920A 0441 0080                  		subi.w	#$80,d1
0000920E 0241 FF80                  		andi.w	#$FF80,d1
00009212 9041                       		sub.w	d1,d0
00009214 0C40 0280                  		cmpi.w	#$280,d0
00009218 6300                       		bls.s	Obj18_NoDel
0000921A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000921E 6700                       		beq.s	Obj18_Delete		; if it's zero, don't remember object
00009220 3440                       		movea.w	d0,a2	; load address into a2
00009222 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009226 6000                       		bra.s	Obj18_Delete	; and delete object
00009228                            
00009228                            Obj18_NoDel:
00009228 4E75                       		rts	
0000922A                            ; ===========================================================================
0000922A                            
0000922A                            Obj18_Delete:				; XREF: Obj18_Index
0000922A 6000 0000                  		bra.w	DeleteObject
0000922E                            ; ===========================================================================
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            ; Sprite mappings - unused
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            Map_obj18x:
0000922E                            	include "_maps\obj18x.asm"
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            ; Sprite mappings - unused
0000922E                            ; ---------------------------------------------------------------------------
0000922E 0000                       		dc.w byte_80FE-Map_obj18x
00009230 0000                       		dc.w byte_8109-Map_obj18x
00009232 02                         byte_80FE:	dc.b 2
00009233 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009238 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000923D 0A                         byte_8109:	dc.b $A
0000923E F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009243 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009248 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000924D 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009252 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009257 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000925C 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009261 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009266 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000926B 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009270                            		even
00009270                            		even
00009270                            
00009270                            ; ---------------------------------------------------------------------------
00009270                            ; Sprite mappings - GHZ	platforms
00009270                            ; ---------------------------------------------------------------------------
00009270                            Map_obj18:
00009270                            	include "_maps\obj18ghz.asm"
00009270                            ; ---------------------------------------------------------------------------
00009270                            ; Sprite mappings - GHZ	platforms
00009270                            ; ---------------------------------------------------------------------------
00009270 0000                       		dc.w byte_8140-Map_obj18
00009272 0000                       		dc.w byte_8155-Map_obj18
00009274 04                         byte_8140:	dc.b 4
00009275 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000927A F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000927F F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009284 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009289 0A                         byte_8155:	dc.b $A
0000928A F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000928F 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009294 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009299 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000929E 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000092A3 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000092A8 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000092AD 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000092B2 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000092B7 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000092BC                            		even
000092BC                            		even
000092BC                            
000092BC                            ; ---------------------------------------------------------------------------
000092BC                            ; Sprite mappings - SYZ	platforms
000092BC                            ; ---------------------------------------------------------------------------
000092BC                            Map_obj18a:
000092BC                            	include "_maps\obj18syz.asm"
000092BC                            ; ---------------------------------------------------------------------------
000092BC                            ; Sprite mappings - SYZ	platforms
000092BC                            ; ---------------------------------------------------------------------------
000092BC 0000                       		dc.w byte_818A-Map_obj18a
000092BE 03                         byte_818A:	dc.b 3
000092BF F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000092C4 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000092C9 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000092CE                            		even
000092CE                            		even
000092CE                            
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            ; Sprite mappings - SLZ	platforms
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            Map_obj18b:
000092CE                            	include "_maps\obj18slz.asm"
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            ; Sprite mappings - SLZ	platforms
000092CE                            ; ---------------------------------------------------------------------------
000092CE 0000                       		dc.w byte_819C-Map_obj18b
000092D0 02                         byte_819C:	dc.b 2
000092D1 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000092D6 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000092DC 00                         		even
000092DC 00                         		even
000092DC                            
000092DC                            ; ===========================================================================
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            ; Object 19 - blank
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            
000092DC                            Obj19:					; XREF: Obj_Index
000092DC 4E75                       		rts	
000092DE                            ; ===========================================================================
000092DE                            ; ---------------------------------------------------------------------------
000092DE                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000092DE                            ; ---------------------------------------------------------------------------
000092DE                            Map_obj48:
000092DE                            	include "_maps\obj48.asm"
000092DE                            ; ---------------------------------------------------------------------------
000092DE                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000092DE                            ; ---------------------------------------------------------------------------
000092DE 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000092E2 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000092E6 06                         byte_81B2:	dc.b 6
000092E7 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000092EC F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000092F1 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000092F6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000092FB 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009300 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009305 04                         byte_81D1:	dc.b 4
00009306 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000930B E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009310 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009315 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000931A 04                         byte_81E6:	dc.b 4
0000931B E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009320 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009325 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000932A 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000932F 04                         byte_81FB:	dc.b 4
00009330 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009335 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000933A 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000933F 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009344                            		even
00009344                            		even
00009344                            
00009344                            ; ===========================================================================
00009344                            ; ---------------------------------------------------------------------------
00009344                            ; Object 1A - GHZ collapsing ledge
00009344                            ; ---------------------------------------------------------------------------
00009344                            
00009344                            Obj1A:					; XREF: Obj_Index
00009344 7000                       		moveq	#0,d0
00009346 1028 0024                  		move.b	$24(a0),d0
0000934A 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000934E 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00009352                            ; ===========================================================================
00009352 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00009356 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000935A 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000935E                            ; ===========================================================================
0000935E                            
0000935E                            Obj1A_Main:				; XREF: Obj1A_Index
0000935E 5428 0024                  		addq.b	#2,$24(a0)
00009362 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000936A 317C 4000 0002             		move.w	#$4000,2(a0)
00009370 0028 0004 0001             		ori.b	#4,1(a0)
00009376 117C 0004 0018             		move.b	#4,$18(a0)
0000937C 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00009382 117C 0064 0019             		move.b	#$64,$19(a0)
00009388 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000938E 117C 0038 0016             		move.b	#$38,$16(a0)
00009394 08E8 0004 0001             		bset	#4,1(a0)
0000939A                            
0000939A                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000939A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000939E 6700                       		beq.s	Obj1A_Slope	; if not, branch
000093A0 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000093A4 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000093A8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000093AC                            
000093AC                            Obj1A_Slope:
000093AC 323C 0030                  		move.w	#$30,d1
000093B0 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000093B6 6100 F22C                  		bsr.w	SlopeObject
000093BA 6000 0000                  		bra.w	MarkObjGone
000093BE                            ; ===========================================================================
000093BE                            
000093BE                            Obj1A_Touch:				; XREF: Obj1A_Index
000093BE 4A28 0038                  		tst.b	$38(a0)
000093C2 6700 0000                  		beq.w	loc_847A
000093C6 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000093CC 5328 0038                  		subq.b	#1,$38(a0)
000093D0                            
000093D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093D0                            
000093D0                            
000093D0                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000093D0 323C 0030                  		move.w	#$30,d1
000093D4 6100 F2AE                  		bsr.w	ExitPlatform
000093D8 323C 0030                  		move.w	#$30,d1
000093DC 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000093E2 3428 0008                  		move.w	8(a0),d2
000093E6 6100 0000                  		bsr.w	SlopeObject2
000093EA 6000 0000                  		bra.w	MarkObjGone
000093EE                            ; End of function Obj1A_WalkOff
000093EE                            
000093EE                            ; ===========================================================================
000093EE                            
000093EE                            Obj1A_Display:				; XREF: Obj1A_Index
000093EE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000093F2 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000093F4 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000093F8 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000093FC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009400 6000 0000                  		bra.w	DisplaySprite
00009404                            ; ===========================================================================
00009404                            
00009404                            loc_82D0:				; XREF: Obj1A_Display
00009404 5328 0038                  		subq.b	#1,$38(a0)
00009408 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000940C 43F8 D000                  		lea	($FFFFD000).w,a1
00009410 0829 0003 0022             		btst	#3,$22(a1)
00009416 6700                       		beq.s	loc_82FC
00009418 4A28 0038                  		tst.b	$38(a0)
0000941C 6600                       		bne.s	locret_8308
0000941E 08A9 0003 0022             		bclr	#3,$22(a1)
00009424 08A9 0005 0022             		bclr	#5,$22(a1)
0000942A 137C 0001 001D             		move.b	#1,$1D(a1)
00009430                            
00009430                            loc_82FC:
00009430 117C 0000 003A             		move.b	#0,$3A(a0)
00009436 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000943C                            
0000943C                            locret_8308:
0000943C 4E75                       		rts	
0000943E                            ; ===========================================================================
0000943E                            
0000943E                            Obj1A_TimeZero:				; XREF: Obj1A_Display
0000943E 6100 0000                  		bsr.w	ObjectFall
00009442 6100 0000                  		bsr.w	DisplaySprite
00009446 4A28 0001                  		tst.b	1(a0)
0000944A 6A00                       		bpl.s	Obj1A_Delete
0000944C 4E75                       		rts	
0000944E                            ; ===========================================================================
0000944E                            
0000944E                            Obj1A_Delete:				; XREF: Obj1A_Index
0000944E 6100 0000                  		bsr.w	DeleteObject
00009452 4E75                       		rts	
00009454                            ; ===========================================================================
00009454                            ; ---------------------------------------------------------------------------
00009454                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009454                            ; ---------------------------------------------------------------------------
00009454                            
00009454                            Obj53:					; XREF: Obj_Index
00009454 7000                       		moveq	#0,d0
00009456 1028 0024                  		move.b	$24(a0),d0
0000945A 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
0000945E 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00009462                            ; ===========================================================================
00009462 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00009466 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000946A 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000946E                            ; ===========================================================================
0000946E                            
0000946E                            Obj53_Main:				; XREF: Obj53_Index
0000946E 5428 0024                  		addq.b	#2,$24(a0)
00009472 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000947A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00009480 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00009486 6600                       		bne.s	Obj53_NotSLZ
00009488 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
0000948E 5428 001A                  		addq.b	#2,$1A(a0)
00009492                            
00009492                            Obj53_NotSLZ:
00009492 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00009498 6600                       		bne.s	Obj53_NotSBZ
0000949A 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000094A0                            
000094A0                            Obj53_NotSBZ:
000094A0 0028 0004 0001             		ori.b	#4,1(a0)
000094A6 117C 0004 0018             		move.b	#4,$18(a0)
000094AC 117C 0007 0038             		move.b	#7,$38(a0)
000094B2 117C 0044 0019             		move.b	#$44,$19(a0)
000094B8                            
000094B8                            Obj53_ChkTouch:				; XREF: Obj53_Index
000094B8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000094BC 6700                       		beq.s	Obj53_Solid	; if not, branch
000094BE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000094C2 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000094C6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000094CA                            
000094CA                            Obj53_Solid:
000094CA 323C 0020                  		move.w	#$20,d1
000094CE 6100 F040                  		bsr.w	PlatformObject
000094D2 4A28 0028                  		tst.b	$28(a0)
000094D6 6A00                       		bpl.s	Obj53_MarkAsGone
000094D8 0829 0003 0022             		btst	#3,$22(a1)
000094DE 6700                       		beq.s	Obj53_MarkAsGone
000094E0 08A8 0000 0001             		bclr	#0,1(a0)
000094E6 3029 0008                  		move.w	8(a1),d0
000094EA 9068 0008                  		sub.w	8(a0),d0
000094EE 6400                       		bcc.s	Obj53_MarkAsGone
000094F0 08E8 0000 0001             		bset	#0,1(a0)
000094F6                            
000094F6                            Obj53_MarkAsGone:
000094F6 6000 0000                  		bra.w	MarkObjGone
000094FA                            ; ===========================================================================
000094FA                            
000094FA                            Obj53_Touch:				; XREF: Obj53_Index
000094FA 4A28 0038                  		tst.b	$38(a0)
000094FE 6700 0000                  		beq.w	loc_8458
00009502 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009508 5328 0038                  		subq.b	#1,$38(a0)
0000950C                            
0000950C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000950C                            
0000950C                            
0000950C                            Obj53_WalkOff:				; XREF: Obj53_Index
0000950C 323C 0020                  		move.w	#$20,d1
00009510 6100 F172                  		bsr.w	ExitPlatform
00009514 3428 0008                  		move.w	8(a0),d2
00009518 6100 F6E0                  		bsr.w	MvSonicOnPtfm2
0000951C 6000 0000                  		bra.w	MarkObjGone
00009520                            ; End of function Obj53_WalkOff
00009520                            
00009520                            ; ===========================================================================
00009520                            
00009520                            Obj53_Display:				; XREF: Obj53_Index
00009520 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009524 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009526 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000952A 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000952E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009532 6000 0000                  		bra.w	DisplaySprite
00009536                            ; ===========================================================================
00009536                            
00009536                            loc_8402:
00009536 5328 0038                  		subq.b	#1,$38(a0)
0000953A 6100 FFD0                  		bsr.w	Obj53_WalkOff
0000953E 43F8 D000                  		lea	($FFFFD000).w,a1
00009542 0829 0003 0022             		btst	#3,$22(a1)
00009548 6700                       		beq.s	loc_842E
0000954A 4A28 0038                  		tst.b	$38(a0)
0000954E 6600                       		bne.s	locret_843A
00009550 08A9 0003 0022             		bclr	#3,$22(a1)
00009556 08A9 0005 0022             		bclr	#5,$22(a1)
0000955C 137C 0001 001D             		move.b	#1,$1D(a1)
00009562                            
00009562                            loc_842E:
00009562 117C 0000 003A             		move.b	#0,$3A(a0)
00009568 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
0000956E                            
0000956E                            locret_843A:
0000956E 4E75                       		rts	
00009570                            ; ===========================================================================
00009570                            
00009570                            Obj53_TimeZero:				; XREF: Obj53_Display
00009570 6100 0000                  		bsr.w	ObjectFall
00009574 6100 0000                  		bsr.w	DisplaySprite
00009578 4A28 0001                  		tst.b	1(a0)
0000957C 6A00                       		bpl.s	Obj53_Delete
0000957E 4E75                       		rts	
00009580                            ; ===========================================================================
00009580                            
00009580                            Obj53_Delete:				; XREF: Obj53_Index
00009580 6100 0000                  		bsr.w	DeleteObject
00009584 4E75                       		rts	
00009586                            ; ===========================================================================
00009586                            
00009586                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00009586 117C 0000 003A             		move.b	#0,$3A(a0)
0000958C                            
0000958C                            loc_8458:				; XREF: Obj53_Touch
0000958C 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00009592 0828 0000 0028             		btst	#0,$28(a0)
00009598 6700                       		beq.s	loc_846C
0000959A 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000095A0                            
000095A0                            loc_846C:
000095A0 7207                       		moveq	#7,d1
000095A2 5228 001A                  		addq.b	#1,$1A(a0)
000095A6 6000                       		bra.s	loc_8486
000095A8                            ; ===========================================================================
000095A8                            
000095A8                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000095A8 117C 0000 003A             		move.b	#0,$3A(a0)
000095AE                            
000095AE                            loc_847A:				; XREF: Obj1A_Touch
000095AE 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000095B4 7218                       		moveq	#$18,d1
000095B6 5428 001A                  		addq.b	#2,$1A(a0)
000095BA                            
000095BA                            loc_8486:				; XREF: Obj53_Collapse
000095BA 7000                       		moveq	#0,d0
000095BC 1028 001A                  		move.b	$1A(a0),d0
000095C0 D040                       		add.w	d0,d0
000095C2 2668 0004                  		movea.l	4(a0),a3
000095C6 D6F3 0000                  		adda.w	(a3,d0.w),a3
000095CA 524B                       		addq.w	#1,a3
000095CC 08E8 0005 0001             		bset	#5,1(a0)
000095D2 1810                       		move.b	0(a0),d4
000095D4 1A28 0001                  		move.b	1(a0),d5
000095D8 2248                       		movea.l	a0,a1
000095DA 6000                       		bra.s	loc_84B2
000095DC                            ; ===========================================================================
000095DC                            
000095DC                            loc_84AA:
000095DC 6100 0000                  		bsr.w	SingleObjLoad
000095E0 6600                       		bne.s	loc_84F2
000095E2 5A4B                       		addq.w	#5,a3
000095E4                            
000095E4                            loc_84B2:
000095E4 137C 0006 0024             		move.b	#6,$24(a1)
000095EA 1284                       		move.b	d4,0(a1)
000095EC 234B 0004                  		move.l	a3,4(a1)
000095F0 1345 0001                  		move.b	d5,1(a1)
000095F4 3368 0008 0008             		move.w	8(a0),8(a1)
000095FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009600 3368 0002 0002             		move.w	2(a0),2(a1)
00009606 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000960C 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009612 135C 0038                  		move.b	(a4)+,$38(a1)
00009616 B3C8                       		cmpa.l	a0,a1
00009618 6400                       		bcc.s	loc_84EE
0000961A 6100 0000                  		bsr.w	DisplaySprite2
0000961E                            
0000961E                            loc_84EE:
0000961E 51C9 FFBC                  		dbf	d1,loc_84AA
00009622                            
00009622                            loc_84F2:
00009622 6100 0000                  		bsr.w	DisplaySprite
00009626 303C 00B9                  		move.w	#$B9,d0
0000962A 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009630                            ; ===========================================================================
00009630                            ; ---------------------------------------------------------------------------
00009630                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009630                            ; ---------------------------------------------------------------------------
00009630 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009640 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000964A 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009652 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000965A                            
0000965A                            ; ---------------------------------------------------------------------------
0000965A                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000965A                            ; ---------------------------------------------------------------------------
0000965A                            
0000965A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000965A                            
0000965A                            
0000965A                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
0000965A 43F8 D000                  		lea	($FFFFD000).w,a1
0000965E 0829 0003 0022             		btst	#3,$22(a1)
00009664 6700                       		beq.s	locret_856E
00009666 3029 0008                  		move.w	8(a1),d0
0000966A 9068 0008                  		sub.w	8(a0),d0
0000966E D041                       		add.w	d1,d0
00009670 E248                       		lsr.w	#1,d0
00009672 0828 0000 0001             		btst	#0,1(a0)
00009678 6700                       		beq.s	loc_854E
0000967A 4640                       		not.w	d0
0000967C D041                       		add.w	d1,d0
0000967E                            
0000967E                            loc_854E:
0000967E 7200                       		moveq	#0,d1
00009680 1232 0000                  		move.b	(a2,d0.w),d1
00009684 3028 000C                  		move.w	$C(a0),d0
00009688 9041                       		sub.w	d1,d0
0000968A 7200                       		moveq	#0,d1
0000968C 1229 0016                  		move.b	$16(a1),d1
00009690 9041                       		sub.w	d1,d0
00009692 3340 000C                  		move.w	d0,$C(a1)
00009696 9468 0008                  		sub.w	8(a0),d2
0000969A 9569 0008                  		sub.w	d2,8(a1)
0000969E                            
0000969E                            locret_856E:
0000969E 4E75                       		rts	
000096A0                            ; End of function SlopeObject2
000096A0                            
000096A0                            ; ===========================================================================
000096A0                            ; ---------------------------------------------------------------------------
000096A0                            ; Collision data for GHZ collapsing ledge
000096A0                            ; ---------------------------------------------------------------------------
000096A0                            Obj1A_SlopeData:
000096A0                            		incbin	misc\ghzledge.bin
000096D0                            		even
000096D0                            
000096D0                            ; ---------------------------------------------------------------------------
000096D0                            ; Sprite mappings - GHZ	collapsing ledge
000096D0                            ; ---------------------------------------------------------------------------
000096D0                            Map_obj1A:
000096D0                            	include "_maps\obj1A.asm"
000096D0                            ; ---------------------------------------------------------------------------
000096D0                            ; Sprite mappings - GHZ	collapsing ledge
000096D0                            ; ---------------------------------------------------------------------------
000096D0 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000096D4 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000096D8 10                         byte_85A8:	dc.b $10
000096D9 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000096DE D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000096E3 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000096E8 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000096ED D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000096F2 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000096F7 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000096FC F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009701 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009706 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000970B 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009710 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009715 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000971A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000971F 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009724 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009729 10                         byte_85F9:	dc.b $10
0000972A C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000972F D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009734 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009739 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000973E D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009743 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009748 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000974D F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009752 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009757 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000975C 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009761 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009766 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000976B 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009770 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009775 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000977A 19                         byte_864A:	dc.b $19
0000977B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009780 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009785 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000978A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000978F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009794 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009799 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000979E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000097A3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000097A8 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000097AD F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000097B2 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000097B7 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000097BC F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000097C1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000097C6 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000097CB 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000097D0 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000097D5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000097DA 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000097DF 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000097E4 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000097E9 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000097EE 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000097F3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000097F8 19                         byte_86C8:	dc.b $19
000097F9 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000097FE C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009803 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009808 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000980D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009812 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009817 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000981C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009821 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009826 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000982B F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009830 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009835 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000983A F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000983F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009844 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009849 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000984E 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009853 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009858 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000985D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009862 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009867 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000986C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009871 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009876                            		even
00009876                            		even
00009876                            
00009876                            ; ---------------------------------------------------------------------------
00009876                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009876                            ; ---------------------------------------------------------------------------
00009876                            Map_obj53:
00009876                            	include "_maps\obj53.asm"
00009876                            ; ---------------------------------------------------------------------------
00009876                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009876                            ; ---------------------------------------------------------------------------
00009876 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000987A 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000987E 04                         byte_874E:	dc.b 4
0000987F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00009884 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00009889 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000988E 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00009893 08                         byte_8763:	dc.b 8
00009894 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009899 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000989E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000098A3 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000098A8 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
000098AD 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
000098B2 0805 0000 00               		dc.b 8,	5, 0, 0, 0
000098B7 0805 0000 10               		dc.b 8,	5, 0, 0, $10
000098BC 04                         byte_878C:	dc.b 4
000098BD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
000098C2 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
000098C7 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000098CC 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
000098D1 08                         byte_87A1:	dc.b 8
000098D2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000098D7 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000098DC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000098E1 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000098E6 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000098EB 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000098F0 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000098F5 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000098FA                            		even
000098FA                            		even
000098FA                            
000098FA                            ; ===========================================================================
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            
000098FA                            Obj1C:					; XREF: Obj_Index
000098FA 7000                       		moveq	#0,d0
000098FC 1028 0024                  		move.b	$24(a0),d0
00009900 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009904 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009908                            ; ===========================================================================
00009908 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000990A 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000990C                            ; ===========================================================================
0000990C                            
0000990C                            Obj1C_Main:				; XREF: Obj1C_Index
0000990C 5428 0024                  		addq.b	#2,$24(a0)
00009910 7000                       		moveq	#0,d0
00009912 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009916 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000991A 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000991E 2159 0004                  		move.l	(a1)+,4(a0)
00009922 3159 0002                  		move.w	(a1)+,2(a0)
00009926 0028 0004 0001             		ori.b	#4,1(a0)
0000992C 1159 001A                  		move.b	(a1)+,$1A(a0)
00009930 1159 0019                  		move.b	(a1)+,$19(a0)
00009934 1159 0018                  		move.b	(a1)+,$18(a0)
00009938 1159 0020                  		move.b	(a1)+,$20(a0)
0000993C                            
0000993C                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000993C 3028 0008                  		move.w	8(a0),d0
00009940 0240 FF80                  		andi.w	#$FF80,d0
00009944 3238 F700                  		move.w	($FFFFF700).w,d1
00009948 0441 0080                  		subi.w	#$80,d1
0000994C 0241 FF80                  		andi.w	#$FF80,d1
00009950 9041                       		sub.w	d1,d0
00009952 0C40 0280                  		cmpi.w	#$280,d0
00009956 6300 0000                  		bls.w	DisplaySprite
0000995A 6000 0000                  		bra.w	DeleteObject	; and delete object
0000995E                            ; ===========================================================================
0000995E                            ; ---------------------------------------------------------------------------
0000995E                            ; Variables for	object $1C are stored in an array
0000995E                            ; ---------------------------------------------------------------------------
0000995E 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00009962 44D8                       		dc.w $44D8		; VRAM setting
00009964 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009968 0000 0000                  		dc.l Map_obj1C
0000996C 44D8                       		dc.w $44D8
0000996E 0008 0200                  		dc.b 0,	8, 2, 0
00009972 0000 0000                  		dc.l Map_obj1C
00009976 44D8                       		dc.w $44D8
00009978 0008 0200                  		dc.b 0,	8, 2, 0
0000997C 0000 8A04                  		dc.l Map_obj11
00009980 438E                       		dc.w $438E
00009982 0110 0100                  		dc.b 1,	$10, 1,	0
00009986 0000 0000                  		dc.l Map_obj1C
0000998A 4000                       		dc.w $4000
0000998C 0110 0000                  		dc.b 1,	$10, 0, 0
00009990 0000 0000                  		dc.l Map_obj1C
00009994 4000                       		dc.w $4000
00009996 0210 0000                  		dc.b 2,	$10, 0, 0
0000999A 0000 0000                  		dc.l Map_obj1C
0000999E 4000                       		dc.w $4000
000099A0 0310 0000                  		dc.b 3,	$10, 0, 0
000099A4 0000 0000                  		dc.l Map_obj1C
000099A8 4000                       		dc.w $4000
000099AA 0460 0700                  		dc.b 4,	$60, 7, 0
000099AE                            ; ---------------------------------------------------------------------------
000099AE                            ; Sprite mappings - SLZ	lava thrower
000099AE                            ; ---------------------------------------------------------------------------
000099AE                            Map_obj1C:
000099AE                            	include "_maps\obj1C.asm"
000099AE                            Mappings:
000099AE 0000                       Mappings_0: 	dc.w Mappings_A-Mappings
000099B0 0000                       Mappings_2: 	dc.w Mappings_10-Mappings
000099B2 0000                       Mappings_4: 	dc.w Mappings_16-Mappings
000099B4 0000                       Mappings_6: 	dc.w Mappings_1C-Mappings
000099B6 0000                       Mappings_8: 	dc.w Mappings_22-Mappings
000099B8 01                         Mappings_A: 	dc.b $1
000099B9 F007 0000 F8               	dc.b $F0, $7, $0, $0, $F8
000099BE 01                         Mappings_10: 	dc.b $1
000099BF F00F 0001 F0               	dc.b $F0, $F, $0, $1, $F0
000099C4 01                         Mappings_16: 	dc.b $1
000099C5 F00F 0011 F0               	dc.b $F0, $F, $0, $11, $F0
000099CA 01                         Mappings_1C: 	dc.b $1
000099CB F00F 0042 F0               	dc.b $F0, $F, $0, $42, $F0
000099D0 18                         Mappings_22: 	dc.b $18
000099D1 E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
000099D6 E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
000099DB E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
000099E0 E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
000099E5 E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
000099EA E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
000099EF 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
000099F4 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
000099F9 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
000099FE 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009A03 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009A08 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009A0D 200F 01C6 A0               	dc.b $20, $F, $1, $C6, $A0
00009A12 200F 01D6 C0               	dc.b $20, $F, $1, $D6, $C0
00009A17 200F 09D6 E0               	dc.b $20, $F, $9, $D6, $E0
00009A1C 200F 01E6 00               	dc.b $20, $F, $1, $E6, $0
00009A21 200F 09C6 20               	dc.b $20, $F, $9, $C6, $20
00009A26 200F 01F6 40               	dc.b $20, $F, $1, $F6, $40
00009A2B C00F 01D6 C0               	dc.b $C0, $F, $1, $D6, $C0
00009A30 C00F 09D6 E0               	dc.b $C0, $F, $9, $D6, $E0
00009A35 C00F 09CA 00               	dc.b $C0, $F, $9, $CA, $0
00009A3A C00F 01E6 20               	dc.b $C0, $F, $1, $E6, $20
00009A3F D00D 01C6 A1               	dc.b $D0, $D, $1, $C6, $A1
00009A44 D00D 01F6 40               	dc.b $D0, $D, $1, $F6, $40
00009A4A 00                         	even
00009A4A 00                         	even
00009A4A                            
00009A4A                            ; ===========================================================================
00009A4A                            ; ---------------------------------------------------------------------------
00009A4A                            ; Object 03 - LZ Air Pockets
00009A4A                            ; ---------------------------------------------------------------------------
00009A4A                            
00009A4A                            Obj03:					; XREF: Obj_Index
00009A4A 7000                       		moveq	#0,d0
00009A4C 1028 0024                  		move.b	$24(a0),d0
00009A50 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
00009A54 4EFB 1000                  		jmp	Obj03_Index(pc,d1.w)
00009A58                            ; ===========================================================================
00009A58 0000                       Obj03_Index:	dc.w Obj03_Main-Obj03_Index
00009A5A 0000                       		dc.w Obj03_ChkDel-Obj03_Index
00009A5C                            ; ===========================================================================
00009A5C                            
00009A5C                            Obj03_Main:				; XREF: Obj03_Index
00009A5C 5428 0024                  		addq.b	#2,$24(a0)
00009A60 217C 0000 0000 0004        		move.l	#Map_Obj03,4(a0)
00009A68 317C 4000 0002             		move.w	#$4000,2(a0)
00009A6E 0028 0004 0001             		ori.b	#4,1(a0)
00009A74 117C 0060 0019             		move.b	#$60,$19(a0)
00009A7A 117C 0007 0018             		move.b	#7,$18(a0)
00009A80 117C 0000 001A             		move.b	#0,$1A(a0)
00009A86 3028 0008                  		move.w	8(a0),d0
00009A8A 31C0 F610                  		move.w	d0,(v_pocketx).w
00009A8E 3028 000C                  		move.w	$C(a0),d0
00009A92 0640 0040                  		addi.w	#$40,d0
00009A96 31C0 F60E                  		move.w	d0,(v_pocketbottom).w
00009A9A                            
00009A9A                            Obj03_ChkDel:				; XREF: Obj03_Index
00009A9A 43F8 D000                  		lea	($FFFFD000).w,a1
00009A9E 3029 0008                  		move.w	8(a1),d0
00009AA2 9068 0008                  		sub.w	8(a0),d0
00009AA6 0640 0060                  		addi.w	#$60,d0
00009AAA 6B00                       		bmi.s	@outpocket
00009AAC 0C40 00C0                  		cmpi.w	#$C0,d0
00009AB0 6400                       		bcc.s	@outpocket
00009AB2 3028 000C                  		move.w	$C(a0),d0
00009AB6 9069 000C                  		sub.w	$C(a1),d0
00009ABA 0640 0040                  		addi.w	#$40,d0
00009ABE 6B00                       		bmi.s	@outpocket
00009AC0 0C40 0080                  		cmpi.w	#$80,d0
00009AC4 6400                       		bcc.s	@outpocket
00009AC6                            
00009AC6 50F8 F612                  		st		(f_insidepocket).w
00009ACA 6000                       		bra.s	@chkgone
00009ACC                            
00009ACC                            	@outpocket:
00009ACC 51F8 F612                  		sf		(f_insidepocket).w
00009AD0                            
00009AD0                            	@chkgone:
00009AD0 3028 0008                  		move.w	8(a0),d0
00009AD4 0240 FF80                  		andi.w	#$FF80,d0
00009AD8 3238 F700                  		move.w	($FFFFF700).w,d1
00009ADC 0441 0080                  		subi.w	#$80,d1
00009AE0 0241 FF80                  		andi.w	#$FF80,d1
00009AE4 9041                       		sub.w	d1,d0
00009AE6 0C40 0280                  		cmpi.w	#$280,d0
00009AEA 6300 0000                  		bls.w	DisplaySprite
00009AEE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009AF2 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
00009AF6 3440                       		movea.w	d0,a2	; load address into a2
00009AF8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009AFC 6000 0000                  		bra.w	DeleteObject	; and delete object
00009B00                            ; ---------------------------------------------------------------------------
00009B00                            ; Sprite mappings - LZ Air Pockets
00009B00                            ; ---------------------------------------------------------------------------
00009B00                            Map_Obj03:
00009B00                            	include "_maps\obj03.asm"
00009B00                            obj03map:
00009B00 0000                       obj03map_0: 	dc.w obj03map_2-obj03map
00009B02 18                         obj03map_2: 	dc.b $18
00009B03 E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
00009B08 E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
00009B0D E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
00009B12 E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
00009B17 E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
00009B1C E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
00009B21 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009B26 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009B2B 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009B30 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009B35 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009B3A 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009B3F 200F 01C6 A0               	dc.b $20, $F, $1, $C6, $A0
00009B44 200F 01D6 C0               	dc.b $20, $F, $1, $D6, $C0
00009B49 200F 09D6 E0               	dc.b $20, $F, $9, $D6, $E0
00009B4E 200F 01E6 00               	dc.b $20, $F, $1, $E6, $0
00009B53 200F 09C6 20               	dc.b $20, $F, $9, $C6, $20
00009B58 200F 01F6 40               	dc.b $20, $F, $1, $F6, $40
00009B5D C00F 01D6 C0               	dc.b $C0, $F, $1, $D6, $C0
00009B62 C00F 09D6 E0               	dc.b $C0, $F, $9, $D6, $E0
00009B67 C00F 09CA 00               	dc.b $C0, $F, $9, $CA, $0
00009B6C C00F 01E6 20               	dc.b $C0, $F, $1, $E6, $20
00009B71 D00D 01C6 A1               	dc.b $D0, $D, $1, $C6, $A1
00009B76 D00D 01F6 40               	dc.b $D0, $D, $1, $F6, $40
00009B7C 00                         	even
00009B7C 00                         	even
00009B7C                            
00009B7C                            ; ===========================================================================
00009B7C                            ; ---------------------------------------------------------------------------
00009B7C                            ; Object 1D - switch that activates when Sonic touches it
00009B7C                            ; (this	is not used anywhere in	the game)
00009B7C                            ; ---------------------------------------------------------------------------
00009B7C                            
00009B7C                            Obj1D:					; XREF: Obj_Index
00009B7C 7000                       		moveq	#0,d0
00009B7E 1028 0024                  		move.b	$24(a0),d0
00009B82 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009B86 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009B8A                            ; ===========================================================================
00009B8A 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009B8C 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009B8E 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009B90                            ; ===========================================================================
00009B90                            
00009B90                            Obj1D_Main:				; XREF: Obj1D_Index
00009B90 5428 0024                  		addq.b	#2,$24(a0)
00009B94 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009B9C 317C 4000 0002             		move.w	#$4000,2(a0)
00009BA2 117C 0004 0001             		move.b	#4,1(a0)
00009BA8 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009BAE 117C 0010 0019             		move.b	#$10,$19(a0)
00009BB4 117C 0005 0018             		move.b	#5,$18(a0)
00009BBA                            
00009BBA                            Obj1D_Action:				; XREF: Obj1D_Index
00009BBA 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009BC0 323C 0010                  		move.w	#$10,d1
00009BC4 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009BC8 6700                       		beq.s	Obj1D_ChkDel
00009BCA 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009BCE 7001                       		moveq	#1,d0
00009BD0 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009BD4                            
00009BD4                            Obj1D_ChkDel:
00009BD4 6100 0000                  		bsr.w	DisplaySprite
00009BD8 3028 0008                  		move.w	8(a0),d0
00009BDC 0240 FF80                  		andi.w	#$FF80,d0
00009BE0 3238 F700                  		move.w	($FFFFF700).w,d1
00009BE4 0441 0080                  		subi.w	#$80,d1
00009BE8 0241 FF80                  		andi.w	#$FF80,d1
00009BEC 9041                       		sub.w	d1,d0
00009BEE 0C40 0280                  		cmpi.w	#$280,d0
00009BF2 6300                       		bls.s	Obj1D_NoDel
00009BF4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009BF8 6700                       		beq.s	Obj1D_Delete		; if it's zero, don't remember object
00009BFA 3440                       		movea.w	d0,a2	; load address into a2
00009BFC 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009C00 6000                       		bra.s	Obj1D_Delete	; and delete object
00009C02                            
00009C02                            Obj1D_NoDel:
00009C02 4E75                       		rts	
00009C04                            ; ===========================================================================
00009C04                            
00009C04                            Obj1D_Delete:				; XREF: Obj1D_Index
00009C04 6100 0000                  		bsr.w	DeleteObject
00009C08 4E75                       		rts	
00009C0A                            ; ---------------------------------------------------------------------------
00009C0A                            ; Subroutine to	check if Sonic touches the object
00009C0A                            ; ---------------------------------------------------------------------------
00009C0A                            
00009C0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C0A                            
00009C0A                            
00009C0A                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009C0A 43F8 D000                  		lea	($FFFFD000).w,a1
00009C0E 3029 0008                  		move.w	8(a1),d0
00009C12 9068 0008                  		sub.w	8(a0),d0
00009C16 D041                       		add.w	d1,d0
00009C18 6B00                       		bmi.s	loc_8918
00009C1A D241                       		add.w	d1,d1
00009C1C B041                       		cmp.w	d1,d0
00009C1E 6400                       		bcc.s	loc_8918
00009C20 3429 000C                  		move.w	$C(a1),d2
00009C24 1229 0016                  		move.b	$16(a1),d1
00009C28 4881                       		ext.w	d1
00009C2A D242                       		add.w	d2,d1
00009C2C 3028 000C                  		move.w	$C(a0),d0
00009C30 0440 0010                  		subi.w	#$10,d0
00009C34 9041                       		sub.w	d1,d0
00009C36 6200                       		bhi.s	loc_8918
00009C38 0C40 FFF0                  		cmpi.w	#-$10,d0
00009C3C 6500                       		bcs.s	loc_8918
00009C3E 70FF                       		moveq	#-1,d0
00009C40 4E75                       		rts	
00009C42                            ; ===========================================================================
00009C42                            
00009C42                            loc_8918:
00009C42 7000                       		moveq	#0,d0
00009C44 4E75                       		rts	
00009C46                            ; End of function Obj1D_ChkTouch
00009C46                            
00009C46                            ; ===========================================================================
00009C46                            ; ---------------------------------------------------------------------------
00009C46                            ; Sprite mappings - object 1D
00009C46                            ; ---------------------------------------------------------------------------
00009C46                            Map_obj1D:
00009C46                            	include "_maps\obj1D.asm"
00009C46                            ; ---------------------------------------------------------------------------
00009C46                            ; Sprite mappings - object 1D
00009C46                            ; ---------------------------------------------------------------------------
00009C46 0000                       		dc.w byte_891E-Map_obj1D
00009C48 04                         byte_891E:	dc.b 4
00009C49 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009C4E 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009C53 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009C58 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009C5E 00                         		even
00009C5E 00                         		even
00009C5E                            
00009C5E                            ; ===========================================================================
00009C5E                            ; ---------------------------------------------------------------------------
00009C5E                            ; Object 2A - doors (SBZ)
00009C5E                            ; ---------------------------------------------------------------------------
00009C5E                            
00009C5E                            Obj2A:					; XREF: Obj_Index
00009C5E 7000                       		moveq	#0,d0
00009C60 1028 0024                  		move.b	$24(a0),d0
00009C64 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009C68 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009C6C                            ; ===========================================================================
00009C6C 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009C6E 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009C70                            ; ===========================================================================
00009C70                            
00009C70                            Obj2A_Main:				; XREF: Obj2A_Index
00009C70 5428 0024                  		addq.b	#2,$24(a0)
00009C74 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009C7C 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009C82 0028 0004 0001             		ori.b	#4,1(a0)
00009C88 117C 0008 0019             		move.b	#8,$19(a0)
00009C8E 117C 0004 0018             		move.b	#4,$18(a0)
00009C94                            
00009C94                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009C94 323C 0040                  		move.w	#$40,d1
00009C98 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009C9C 3038 D008                  		move.w	($FFFFD008).w,d0
00009CA0 D041                       		add.w	d1,d0
00009CA2 B068 0008                  		cmp.w	8(a0),d0
00009CA6 6500                       		bcs.s	Obj2A_Animate
00009CA8 9041                       		sub.w	d1,d0
00009CAA 9041                       		sub.w	d1,d0
00009CAC B068 0008                  		cmp.w	8(a0),d0
00009CB0 6400                       		bcc.s	Obj2A_Animate
00009CB2 D041                       		add.w	d1,d0
00009CB4 B068 0008                  		cmp.w	8(a0),d0
00009CB8 6400                       		bcc.s	loc_899A
00009CBA 0828 0000 0022             		btst	#0,$22(a0)
00009CC0 6600                       		bne.s	Obj2A_Animate
00009CC2 6000                       		bra.s	Obj2A_Open
00009CC4                            ; ===========================================================================
00009CC4                            
00009CC4                            loc_899A:				; XREF: Obj2A_OpenShut
00009CC4 0828 0000 0022             		btst	#0,$22(a0)
00009CCA 6700                       		beq.s	Obj2A_Animate
00009CCC                            
00009CCC                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009CCC 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009CD2                            
00009CD2                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009CD2 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009CD8 6100 0000                  		bsr.w	AnimateSprite
00009CDC 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009CE0 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009CE2 323C 0011                  		move.w	#$11,d1
00009CE6 343C 0020                  		move.w	#$20,d2
00009CEA 3602                       		move.w	d2,d3
00009CEC 5243                       		addq.w	#1,d3
00009CEE 3828 0008                  		move.w	8(a0),d4
00009CF2 6100 0000                  		bsr.w	SolidObject
00009CF6                            
00009CF6                            Obj2A_MarkAsUsed:
00009CF6 6000 0000                  		bra.w	MarkObjGone
00009CFA                            ; ===========================================================================
00009CFA                            Ani_obj2A:
00009CFA                            	include "_anim\obj2A.asm"
00009CFA                            ; ---------------------------------------------------------------------------
00009CFA                            ; Animation script - doors (SBZ)
00009CFA                            ; ---------------------------------------------------------------------------
00009CFA 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009CFC 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009CFE 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009D0A 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009D16                            		even
00009D16                            		even
00009D16                            
00009D16                            ; ---------------------------------------------------------------------------
00009D16                            ; Sprite mappings - doors (SBZ)
00009D16                            ; ---------------------------------------------------------------------------
00009D16                            Map_obj2A:
00009D16                            	include "_maps\obj2A.asm"
00009D16                            ; ---------------------------------------------------------------------------
00009D16                            ; Sprite mappings - doors (SBZ)
00009D16                            ; ---------------------------------------------------------------------------
00009D16 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009D1A 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009D1E 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009D22 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009D26 0000                       		dc.w byte_8A56-Map_obj2A
00009D28 02                         byte_89FE:	dc.b 2
00009D29 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009D2E 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009D33 02                         byte_8A09:	dc.b 2
00009D34 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009D39 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009D3E 02                         byte_8A14:	dc.b 2
00009D3F D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009D44 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009D49 02                         byte_8A1F:	dc.b 2
00009D4A D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009D4F 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009D54 02                         byte_8A2A:	dc.b 2
00009D55 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009D5A 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009D5F 02                         byte_8A35:	dc.b 2
00009D60 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009D65 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009D6A 02                         byte_8A40:	dc.b 2
00009D6B C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009D70 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009D75 02                         byte_8A4B:	dc.b 2
00009D76 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009D7B 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009D80 02                         byte_8A56:	dc.b 2
00009D81 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009D86 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009D8C 00                         		even
00009D8C 00                         		even
00009D8C                            
00009D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D8C                            
00009D8C                            
00009D8C                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009D8C 6100 0000                  		bsr.w	Obj44_SolidWall2
00009D90 6700                       		beq.s	loc_8AA8
00009D92 6B00 0000                  		bmi.w	loc_8AC4
00009D96 4A40                       		tst.w	d0
00009D98 6700 0000                  		beq.w	loc_8A92
00009D9C 6B00                       		bmi.s	loc_8A7C
00009D9E 4A69 0010                  		tst.w	$10(a1)
00009DA2 6B00                       		bmi.s	loc_8A92
00009DA4 6000                       		bra.s	loc_8A82
00009DA6                            ; ===========================================================================
00009DA6                            
00009DA6                            loc_8A7C:
00009DA6 4A69 0010                  		tst.w	$10(a1)
00009DAA 6A00                       		bpl.s	loc_8A92
00009DAC                            
00009DAC                            loc_8A82:
00009DAC 9169 0008                  		sub.w	d0,8(a1)
00009DB0 337C 0000 0020             		move.w	#0,$20(a1)
00009DB6 337C 0000 0010             		move.w	#0,$10(a1)
00009DBC                            
00009DBC                            loc_8A92:
00009DBC 0829 0001 0022             		btst	#1,$22(a1)
00009DC2 6600                       		bne.s	loc_8AB6
00009DC4 08E9 0005 0022             		bset	#5,$22(a1)
00009DCA 08E8 0005 0022             		bset	#5,$22(a0)
00009DD0 4E75                       		rts	
00009DD2                            ; ===========================================================================
00009DD2                            
00009DD2                            loc_8AA8:
00009DD2 0828 0005 0022             		btst	#5,$22(a0)
00009DD8 6700                       		beq.s	locret_8AC2
00009DDA 337C 0001 001C             		move.w	#1,$1C(a1)
00009DE0                            
00009DE0                            loc_8AB6:
00009DE0 08A8 0005 0022             		bclr	#5,$22(a0)
00009DE6 08A9 0005 0022             		bclr	#5,$22(a1)
00009DEC                            
00009DEC                            locret_8AC2:
00009DEC 4E75                       		rts	
00009DEE                            ; ===========================================================================
00009DEE                            
00009DEE                            loc_8AC4:
00009DEE 4A69 0012                  		tst.w	$12(a1)
00009DF2 6A00                       		bpl.s	locret_8AD8
00009DF4 4A43                       		tst.w	d3
00009DF6 6A00                       		bpl.s	locret_8AD8
00009DF8 9769 000C                  		sub.w	d3,$C(a1)
00009DFC 337C 0000 0012             		move.w	#0,$12(a1)
00009E02                            
00009E02                            locret_8AD8:
00009E02 4E75                       		rts	
00009E04                            ; End of function Obj44_SolidWall
00009E04                            
00009E04                            
00009E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E04                            
00009E04                            
00009E04                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009E04 43F8 D000                  		lea	($FFFFD000).w,a1
00009E08 3029 0008                  		move.w	8(a1),d0
00009E0C 9068 0008                  		sub.w	8(a0),d0
00009E10 D041                       		add.w	d1,d0
00009E12 6B00                       		bmi.s	loc_8B48
00009E14 3601                       		move.w	d1,d3
00009E16 D643                       		add.w	d3,d3
00009E18 B043                       		cmp.w	d3,d0
00009E1A 6200                       		bhi.s	loc_8B48
00009E1C 1629 0016                  		move.b	$16(a1),d3
00009E20 4883                       		ext.w	d3
00009E22 D443                       		add.w	d3,d2
00009E24 3629 000C                  		move.w	$C(a1),d3
00009E28 9668 000C                  		sub.w	$C(a0),d3
00009E2C D642                       		add.w	d2,d3
00009E2E 6B00                       		bmi.s	loc_8B48
00009E30 3802                       		move.w	d2,d4
00009E32 D844                       		add.w	d4,d4
00009E34 B644                       		cmp.w	d4,d3
00009E36 6400                       		bcc.s	loc_8B48
00009E38 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009E3C 6B00                       		bmi.s	loc_8B48
00009E3E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009E44 6400                       		bcc.s	loc_8B48
00009E46 4A78 FE08                  		tst.w	($FFFFFE08).w
00009E4A 6600                       		bne.s	loc_8B48
00009E4C 3A00                       		move.w	d0,d5
00009E4E B240                       		cmp.w	d0,d1
00009E50 6400                       		bcc.s	loc_8B30
00009E52 D241                       		add.w	d1,d1
00009E54 9041                       		sub.w	d1,d0
00009E56 3A00                       		move.w	d0,d5
00009E58 4445                       		neg.w	d5
00009E5A                            
00009E5A                            loc_8B30:
00009E5A 3203                       		move.w	d3,d1
00009E5C B443                       		cmp.w	d3,d2
00009E5E 6400                       		bcc.s	loc_8B3C
00009E60 9644                       		sub.w	d4,d3
00009E62 3203                       		move.w	d3,d1
00009E64 4441                       		neg.w	d1
00009E66                            
00009E66                            loc_8B3C:
00009E66 BA41                       		cmp.w	d1,d5
00009E68 6200                       		bhi.s	loc_8B44
00009E6A 7801                       		moveq	#1,d4
00009E6C 4E75                       		rts	
00009E6E                            ; ===========================================================================
00009E6E                            
00009E6E                            loc_8B44:
00009E6E 78FF                       		moveq	#-1,d4
00009E70 4E75                       		rts	
00009E72                            ; ===========================================================================
00009E72                            
00009E72                            loc_8B48:
00009E72 7800                       		moveq	#0,d4
00009E74 4E75                       		rts	
00009E76                            ; End of function Obj44_SolidWall2
00009E76                            
00009E76                            ; ===========================================================================
00009E76                            ; ---------------------------------------------------------------------------
00009E76                            ; Object 1E - Ball Hog enemy (SBZ)
00009E76                            ; ---------------------------------------------------------------------------
00009E76                            
00009E76                            Obj1E:					; XREF: Obj_Index
00009E76 7000                       		moveq	#0,d0
00009E78 1028 0024                  		move.b	$24(a0),d0
00009E7C 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009E80 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009E84                            ; ===========================================================================
00009E84 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009E86 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009E88                            ; ===========================================================================
00009E88                            
00009E88                            Obj1E_Main:				; XREF: Obj1E_Index
00009E88 117C 0013 0016             		move.b	#$13,$16(a0)
00009E8E 117C 0008 0017             		move.b	#8,$17(a0)
00009E94 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009E9C 317C 2302 0002             		move.w	#$2302,2(a0)
00009EA2 117C 0004 0001             		move.b	#4,1(a0)
00009EA8 117C 0004 0018             		move.b	#4,$18(a0)
00009EAE 117C 0005 0020             		move.b	#5,$20(a0)
00009EB4 117C 000C 0019             		move.b	#$C,$19(a0)
00009EBA 6100 0000                  		bsr.w	ObjectFall
00009EBE 4EB9 0000 0000             		jsr	ObjHitFloor
00009EC4 4A41                       		tst.w	d1
00009EC6 6A00                       		bpl.s	locret_8BAC
00009EC8 D368 000C                  		add.w	d1,$C(a0)
00009ECC 317C 0000 0012             		move.w	#0,$12(a0)
00009ED2 5428 0024                  		addq.b	#2,$24(a0)
00009ED6                            
00009ED6                            locret_8BAC:
00009ED6 4E75                       		rts	
00009ED8                            ; ===========================================================================
00009ED8                            
00009ED8                            Obj1E_Action:				; XREF: Obj1E_Index
00009ED8 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009EDE 6100 0000                  		bsr.w	AnimateSprite
00009EE2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009EE8 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009EEA 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009EEE 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009EF0 6000                       		bra.s	Obj1E_MarkAsGone
00009EF2                            ; ===========================================================================
00009EF2                            
00009EF2                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009EF2 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009EF6                            
00009EF6                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009EF6 6000 0000                  		bra.w	MarkObjGone
00009EFA                            ; ===========================================================================
00009EFA                            
00009EFA                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009EFA 117C 0001 0032             		move.b	#1,$32(a0)
00009F00 6100 0000                  		bsr.w	SingleObjLoad
00009F04 6600                       		bne.s	loc_8C1A
00009F06 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009F0A 3368 0008 0008             		move.w	8(a0),8(a1)
00009F10 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F16 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009F1C 337C 0000 0012             		move.w	#0,$12(a1)
00009F22 70FC                       		moveq	#-4,d0
00009F24 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009F2A 6700                       		beq.s	loc_8C0A	; if not, branch
00009F2C 4440                       		neg.w	d0
00009F2E 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009F32                            
00009F32                            loc_8C0A:
00009F32 D169 0008                  		add.w	d0,8(a1)
00009F36 0669 000C 000C             		addi.w	#$C,$C(a1)
00009F3C 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009F42                            
00009F42                            loc_8C1A:
00009F42 60B2                       		bra.s	Obj1E_MarkAsGone
00009F44                            ; ===========================================================================
00009F44                            ; ---------------------------------------------------------------------------
00009F44                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009F44                            ; ---------------------------------------------------------------------------
00009F44                            
00009F44                            Obj20:					; XREF: Obj_Index
00009F44 7000                       		moveq	#0,d0
00009F46 1028 0024                  		move.b	$24(a0),d0
00009F4A 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009F4E 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009F52                            ; ===========================================================================
00009F52 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009F54 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009F56                            ; ===========================================================================
00009F56                            
00009F56                            Obj20_Main:				; XREF: Obj20_Index
00009F56 5428 0024                  		addq.b	#2,$24(a0)
00009F5A 117C 0007 0016             		move.b	#7,$16(a0)
00009F60 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009F68 317C 2302 0002             		move.w	#$2302,2(a0)
00009F6E 117C 0004 0001             		move.b	#4,1(a0)
00009F74 117C 0003 0018             		move.b	#3,$18(a0)
00009F7A 117C 0087 0020             		move.b	#$87,$20(a0)
00009F80 117C 0008 0019             		move.b	#8,$19(a0)
00009F86 7000                       		moveq	#0,d0
00009F88 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009F8C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009F90 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009F94 117C 0004 001A             		move.b	#4,$1A(a0)
00009F9A                            
00009F9A                            Obj20_Bounce:				; XREF: Obj20_Index
00009F9A 4EB9 0000 0000             		jsr	ObjectFall
00009FA0 4A68 0012                  		tst.w	$12(a0)
00009FA4 6B00                       		bmi.s	Obj20_ChkExplode
00009FA6 4EB9 0000 0000             		jsr	ObjHitFloor
00009FAC 4A41                       		tst.w	d1
00009FAE 6A00                       		bpl.s	Obj20_ChkExplode
00009FB0 D368 000C                  		add.w	d1,$C(a0)
00009FB4 317C FD00 0012             		move.w	#-$300,$12(a0)
00009FBA 4A03                       		tst.b	d3
00009FBC 6700                       		beq.s	Obj20_ChkExplode
00009FBE 6B00                       		bmi.s	loc_8CA4
00009FC0 4A68 0010                  		tst.w	$10(a0)
00009FC4 6A00                       		bpl.s	Obj20_ChkExplode
00009FC6 4468 0010                  		neg.w	$10(a0)
00009FCA 6000                       		bra.s	Obj20_ChkExplode
00009FCC                            ; ===========================================================================
00009FCC                            
00009FCC                            loc_8CA4:				; XREF: Obj20_Bounce
00009FCC 4A68 0010                  		tst.w	$10(a0)
00009FD0 6B00                       		bmi.s	Obj20_ChkExplode
00009FD2 4468 0010                  		neg.w	$10(a0)
00009FD6                            
00009FD6                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009FD6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009FDA 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009FDC 10BC 0024                  		move.b	#$24,0(a0)
00009FE0 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009FE4 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009FEA 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009FEE                            ; ===========================================================================
00009FEE                            
00009FEE                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009FEE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009FF2 6A00                       		bpl.s	Obj20_Display
00009FF4 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009FFA 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000A000                            
0000A000                            Obj20_Display:
0000A000 6100 0000                  		bsr.w	DisplaySprite
0000A004 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A008 0640 00E0                  		addi.w	#$E0,d0
0000A00C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000A010 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A014 4E75                       		rts	
0000A016                            ; ===========================================================================
0000A016                            ; ---------------------------------------------------------------------------
0000A016                            ; Object 24 - explosion	from a destroyed monitor
0000A016                            ; ---------------------------------------------------------------------------
0000A016                            
0000A016                            Obj24:					; XREF: Obj_Index
0000A016 7000                       		moveq	#0,d0
0000A018 1028 0024                  		move.b	$24(a0),d0
0000A01C 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000A020 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000A024                            ; ===========================================================================
0000A024 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000A026 0000                       		dc.w Obj24_Animate-Obj24_Index
0000A028                            ; ===========================================================================
0000A028                            
0000A028                            Obj24_Main:				; XREF: Obj24_Index
0000A028 5428 0024                  		addq.b	#2,$24(a0)
0000A02C 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000A034 317C 041C 0002             		move.w	#$41C,2(a0)
0000A03A 117C 0004 0001             		move.b	#4,1(a0)
0000A040 117C 0001 0018             		move.b	#1,$18(a0)
0000A046 117C 0000 0020             		move.b	#0,$20(a0)
0000A04C 117C 000C 0019             		move.b	#$C,$19(a0)
0000A052 117C 0009 001E             		move.b	#9,$1E(a0)
0000A058 117C 0000 001A             		move.b	#0,$1A(a0)
0000A05E 303C 00A5                  		move.w	#$A5,d0
0000A062 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play explosion sound
0000A068                            
0000A068                            Obj24_Animate:				; XREF: Obj24_Index
0000A068 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A06C 6A00                       		bpl.s	Obj24_Display
0000A06E 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000A074 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A078 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000A07E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A082                            
0000A082                            Obj24_Display:
0000A082 6000 0000                  		bra.w	DisplaySprite
0000A086                            ; ===========================================================================
0000A086                            ; ---------------------------------------------------------------------------
0000A086                            ; Object 27 - explosion	from a destroyed enemy
0000A086                            ; ---------------------------------------------------------------------------
0000A086                            
0000A086                            Obj27:					; XREF: Obj_Index
0000A086 7000                       		moveq	#0,d0
0000A088 1028 0024                  		move.b	$24(a0),d0
0000A08C 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000A090 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000A094                            ; ===========================================================================
0000A094 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000A096 0000                       		dc.w Obj27_Main-Obj27_Index
0000A098 0000                       		dc.w Obj27_Animate-Obj27_Index
0000A09A                            ; ===========================================================================
0000A09A                            
0000A09A                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000A09A 5428 0024                  		addq.b	#2,$24(a0)
0000A09E 6100 0000                  		bsr.w	SingleObjLoad
0000A0A2 6600                       		bne.s	Obj27_Main
0000A0A4 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000A0A8 3368 0008 0008             		move.w	8(a0),8(a1)
0000A0AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0B4 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A0BA                            
0000A0BA                            Obj27_Main:				; XREF: Obj27_Index
0000A0BA 5428 0024                  		addq.b	#2,$24(a0)
0000A0BE 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000A0C6 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A0CC 117C 0004 0001             		move.b	#4,1(a0)
0000A0D2 117C 0001 0018             		move.b	#1,$18(a0)
0000A0D8 117C 0000 0020             		move.b	#0,$20(a0)
0000A0DE 117C 000C 0019             		move.b	#$C,$19(a0)
0000A0E4 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A0EA 117C 0000 001A             		move.b	#0,$1A(a0)
0000A0F0 303C 00C1                  		move.w	#$C1,d0
0000A0F4 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000A0FA                            
0000A0FA                            Obj27_Animate:				; XREF: Obj27_Index
0000A0FA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A0FE 6A00                       		bpl.s	Obj27_Display
0000A100 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A106 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A10A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000A110 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A114                            
0000A114                            Obj27_Display:
0000A114 6000 0000                  		bra.w	DisplaySprite
0000A118                            ; ===========================================================================
0000A118                            ; ---------------------------------------------------------------------------
0000A118                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A118                            ; ---------------------------------------------------------------------------
0000A118                            
0000A118                            Obj3F:					; XREF: Obj_Index
0000A118 7000                       		moveq	#0,d0
0000A11A 1028 0024                  		move.b	$24(a0),d0
0000A11E 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000A122 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A126                            ; ===========================================================================
0000A126 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A128 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A12A                            ; ===========================================================================
0000A12A                            
0000A12A                            Obj3F_Main:				; XREF: Obj3F_Index
0000A12A 5428 0024                  		addq.b	#2,$24(a0)
0000A12E 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A136 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A13C 117C 0004 0001             		move.b	#4,1(a0)
0000A142 117C 0001 0018             		move.b	#1,$18(a0)
0000A148 117C 0000 0020             		move.b	#0,$20(a0)
0000A14E 117C 000C 0019             		move.b	#$C,$19(a0)
0000A154 117C 0007 001E             		move.b	#7,$1E(a0)
0000A15A 117C 0000 001A             		move.b	#0,$1A(a0)
0000A160 303C 00C4                  		move.w	#$C4,d0
0000A164 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A16A                            ; ===========================================================================
0000A16A                            Ani_obj1E:
0000A16A                            	include "_anim\obj1E.asm"
0000A16A                            ; ---------------------------------------------------------------------------
0000A16A                            ; Animation script - doors (SBZ)
0000A16A                            ; ---------------------------------------------------------------------------
0000A16A 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A16C 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A184 00                         		even
0000A184 00                         		even
0000A184                            
0000A184                            ; ---------------------------------------------------------------------------
0000A184                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A184                            ; ---------------------------------------------------------------------------
0000A184                            Map_obj1E:
0000A184                            	include "_maps\obj1E.asm"
0000A184                            ; ---------------------------------------------------------------------------
0000A184                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A184                            ; ---------------------------------------------------------------------------
0000A184 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A188 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A18C 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A190 02                         byte_8E6E:	dc.b 2
0000A191 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A196 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A19B 02                         byte_8E79:	dc.b 2
0000A19C EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A1A1 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A1A6 02                         byte_8E84:	dc.b 2
0000A1A7 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A1AC 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A1B1 02                         byte_8E8F:	dc.b 2
0000A1B2 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A1B7 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A1BC 01                         byte_8E9A:	dc.b 1
0000A1BD F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A1C2 01                         byte_8EA0:	dc.b 1
0000A1C3 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A1C8                            		even
0000A1C8                            		even
0000A1C8                            
0000A1C8                            ; ---------------------------------------------------------------------------
0000A1C8                            ; Sprite mappings - explosion
0000A1C8                            ; ---------------------------------------------------------------------------
0000A1C8                            Map_obj24:
0000A1C8                            	include "_maps\obj24.asm"
0000A1C8                            ; ---------------------------------------------------------------------------
0000A1C8                            ; Sprite mappings - explosion
0000A1C8                            ; ---------------------------------------------------------------------------
0000A1C8 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A1CC 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A1D0 01                         byte_8EAE:	dc.b 1
0000A1D1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A1D6 01                         byte_8EB4:	dc.b 1
0000A1D7 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A1DC 01                         byte_8EBA:	dc.b 1
0000A1DD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A1E2 01                         byte_8EC0:	dc.b 1
0000A1E3 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A1E8                            		even
0000A1E8                            		even
0000A1E8                            
0000A1E8                            ; ---------------------------------------------------------------------------
0000A1E8                            ; Sprite mappings - explosion
0000A1E8                            ; ---------------------------------------------------------------------------
0000A1E8 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A1EC 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A1F0 0000                       		dc.w byte_8EF7-Map_obj27
0000A1F2 01                         byte_8ED0:	dc.b 1
0000A1F3 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A1F8 01                         byte_8ED6:	dc.b 1
0000A1F9 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A1FE 01                         byte_8EDC:	dc.b 1
0000A1FF F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A204 04                         byte_8EE2:	dc.b 4
0000A205 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A20A EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A20F 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A214 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A219 04                         byte_8EF7:	dc.b 4
0000A21A EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A21F EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A224 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A229 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A22E                            		even
0000A22E                            ; ---------------------------------------------------------------------------
0000A22E                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A22E                            ; ---------------------------------------------------------------------------
0000A22E FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A230 0000                       		dc.w byte_8F16-Map_obj3F
0000A232 0000                       		dc.w byte_8F1C-Map_obj3F
0000A234 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A236 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A238 01                         byte_8F16:	dc.b 1
0000A239 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A23E 01                         byte_8F1C:	dc.b 1
0000A23F F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A244                            		even
0000A244                            ; ===========================================================================
0000A244                            ; ---------------------------------------------------------------------------
0000A244                            ; Object 28 - animals
0000A244                            ; ---------------------------------------------------------------------------
0000A244                            
0000A244                            Obj28:					; XREF: Obj_Index
0000A244 7000                       		moveq	#0,d0
0000A246 1028 0024                  		move.b	$24(a0),d0
0000A24A 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A24E 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A252                            ; ===========================================================================
0000A252 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A256 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A25A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A25E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A262 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A266 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A26A 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A26E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A272 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A276 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A27A 0000                       		dc.w loc_92D6-Obj28_Index
0000A27C                            
0000A27C 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A288                            
0000A288 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A28C 0000 0000                  		dc.l Map_obj28
0000A290 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A294 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A298 FE80 FD00                  		dc.w $FE80, $FD00
0000A29C 0000 0000                  		dc.l Map_obj28
0000A2A0 FEC0 FE80                  		dc.w $FEC0, $FE80
0000A2A4 0000 0000                  		dc.l Map_obj28a
0000A2A8 FE40 FD00                  		dc.w $FE40, $FD00
0000A2AC 0000 0000                  		dc.l Map_obj28b
0000A2B0 FD00 FC00                  		dc.w $FD00, $FC00
0000A2B4 0000 0000                  		dc.l Map_obj28a
0000A2B8 FD80 FC80                  		dc.w $FD80, $FC80
0000A2BC 0000 0000                  		dc.l Map_obj28b
0000A2C0                            
0000A2C0 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A2D0 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A2E0 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A2EC                            
0000A2EC 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A300 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A314 0000 0000                  		dc.l Map_obj28b
0000A318                            
0000A318 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A32A 0565 05B3                  		dc.w $565, $5B3
0000A32E                            ; ===========================================================================
0000A32E                            
0000A32E                            Obj28_Ending:				; XREF: Obj28_Index
0000A32E 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A332 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A336 7000                       		moveq	#0,d0
0000A338 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A33C D040                       		add.w	d0,d0		; multiply d0 by 2
0000A33E 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A342 0440 0014                  		subi.w	#$14,d0
0000A346 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A34C D040                       		add.w	d0,d0
0000A34E 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A354 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A358 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A35E 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A364 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A36A 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A370 117C 000C 0016             		move.b	#$C,$16(a0)
0000A376 117C 0004 0001             		move.b	#4,1(a0)
0000A37C 08E8 0000 0001             		bset	#0,1(a0)
0000A382 117C 0006 0018             		move.b	#6,$18(a0)
0000A388 117C 0008 0019             		move.b	#8,$19(a0)
0000A38E 117C 0007 001E             		move.b	#7,$1E(a0)
0000A394 6000 0000                  		bra.w	DisplaySprite
0000A398                            ; ===========================================================================
0000A398                            
0000A398                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A398 5428 0024                  		addq.b	#2,$24(a0)
0000A39C 6100 8608                  		bsr.w	RandomNumber
0000A3A0 0240 0001                  		andi.w	#1,d0
0000A3A4 7200                       		moveq	#0,d1
0000A3A6 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A3AA D241                       		add.w	d1,d1
0000A3AC D240                       		add.w	d0,d1
0000A3AE 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000A3B2 1031 1000                  		move.b	(a1,d1.w),d0
0000A3B6 1140 0030                  		move.b	d0,$30(a0)
0000A3BA E748                       		lsl.w	#3,d0
0000A3BC 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A3C0 D2C0                       		adda.w	d0,a1
0000A3C2 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A3C6 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A3CA 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A3CE 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A3D4 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A3DA 6700                       		beq.s	loc_90C0	; if yes, branch
0000A3DC 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A3E2                            
0000A3E2                            loc_90C0:
0000A3E2 117C 000C 0016             		move.b	#$C,$16(a0)
0000A3E8 117C 0004 0001             		move.b	#4,1(a0)
0000A3EE 08E8 0000 0001             		bset	#0,1(a0)
0000A3F4 117C 0006 0018             		move.b	#6,$18(a0)
0000A3FA 117C 0008 0019             		move.b	#8,$19(a0)
0000A400 117C 0007 001E             		move.b	#7,$1E(a0)
0000A406 117C 0002 001A             		move.b	#2,$1A(a0)
0000A40C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A412 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A416 6600                       		bne.s	loc_911C
0000A418 6100 0000                  		bsr.w	SingleObjLoad
0000A41C 6600                       		bne.s	Obj28_Display
0000A41E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000A422 3368 0008 0008             		move.w	8(a0),8(a1)
0000A428 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A42E 3028 003E                  		move.w	$3E(a0),d0
0000A432 E248                       		lsr.w	#1,d0
0000A434 1340 001A                  		move.b	d0,$1A(a1)
0000A438                            
0000A438                            Obj28_Display:
0000A438 6000 0000                  		bra.w	DisplaySprite
0000A43C                            ; ===========================================================================
0000A43C                            
0000A43C                            loc_911C:
0000A43C 117C 0012 0024             		move.b	#$12,$24(a0)
0000A442 4268 0010                  		clr.w	$10(a0)
0000A446 6000 0000                  		bra.w	DisplaySprite
0000A44A                            ; ===========================================================================
0000A44A                            
0000A44A                            loc_912A:				; XREF: Obj28_Index
0000A44A 4A28 0001                  		tst.b	1(a0)
0000A44E 6A00 0000                  		bpl.w	DeleteObject
0000A452 6100 0000                  		bsr.w	ObjectFall
0000A456 4A68 0012                  		tst.w	$12(a0)
0000A45A 6B00                       		bmi.s	loc_9180
0000A45C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A462 4A41                       		tst.w	d1
0000A464 6A00                       		bpl.s	loc_9180
0000A466 D368 000C                  		add.w	d1,$C(a0)
0000A46A 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A470 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A476 117C 0001 001A             		move.b	#1,$1A(a0)
0000A47C 1028 0030                  		move.b	$30(a0),d0
0000A480 D000                       		add.b	d0,d0
0000A482 5800                       		addq.b	#4,d0
0000A484 1140 0024                  		move.b	d0,$24(a0)
0000A488 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A48C 6700                       		beq.s	loc_9180
0000A48E 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A494 6700                       		beq.s	loc_9180
0000A496 4468 0010                  		neg.w	$10(a0)
0000A49A 0868 0000 0001             		bchg	#0,1(a0)
0000A4A0                            
0000A4A0                            loc_9180:
0000A4A0 6000 0000                  		bra.w	DisplaySprite
0000A4A4                            ; ===========================================================================
0000A4A4                            
0000A4A4                            loc_9184:				; XREF: Obj28_Index
0000A4A4 6100 0000                  		bsr.w	ObjectFall
0000A4A8 117C 0001 001A             		move.b	#1,$1A(a0)
0000A4AE 4A68 0012                  		tst.w	$12(a0)
0000A4B2 6B00                       		bmi.s	loc_91AE
0000A4B4 117C 0000 001A             		move.b	#0,$1A(a0)
0000A4BA 4EB9 0000 0000             		jsr	ObjHitFloor
0000A4C0 4A41                       		tst.w	d1
0000A4C2 6A00                       		bpl.s	loc_91AE
0000A4C4 D368 000C                  		add.w	d1,$C(a0)
0000A4C8 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A4CE                            
0000A4CE                            loc_91AE:
0000A4CE 4A28 0028                  		tst.b	$28(a0)
0000A4D2 6600                       		bne.s	loc_9224
0000A4D4 4A28 0001                  		tst.b	1(a0)
0000A4D8 6A00 0000                  		bpl.w	DeleteObject
0000A4DC 6000 0000                  		bra.w	DisplaySprite
0000A4E0                            ; ===========================================================================
0000A4E0                            
0000A4E0                            loc_91C0:				; XREF: Obj28_Index
0000A4E0 6100 0000                  		bsr.w	SpeedToPos
0000A4E4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A4EA 4A68 0012                  		tst.w	$12(a0)
0000A4EE 6B00                       		bmi.s	loc_91FC
0000A4F0 4EB9 0000 0000             		jsr	ObjHitFloor
0000A4F6 4A41                       		tst.w	d1
0000A4F8 6A00                       		bpl.s	loc_91FC
0000A4FA D368 000C                  		add.w	d1,$C(a0)
0000A4FE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A504 4A28 0028                  		tst.b	$28(a0)
0000A508 6700                       		beq.s	loc_91FC
0000A50A 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A510 6700                       		beq.s	loc_91FC
0000A512 4468 0010                  		neg.w	$10(a0)
0000A516 0868 0000 0001             		bchg	#0,1(a0)
0000A51C                            
0000A51C                            loc_91FC:
0000A51C 5328 001E                  		subq.b	#1,$1E(a0)
0000A520 6A00                       		bpl.s	loc_9212
0000A522 117C 0001 001E             		move.b	#1,$1E(a0)
0000A528 5228 001A                  		addq.b	#1,$1A(a0)
0000A52C 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A532                            
0000A532                            loc_9212:
0000A532 4A28 0028                  		tst.b	$28(a0)
0000A536 6600                       		bne.s	loc_9224
0000A538 4A28 0001                  		tst.b	1(a0)
0000A53C 6A00 0000                  		bpl.w	DeleteObject
0000A540 6000 0000                  		bra.w	DisplaySprite
0000A544                            ; ===========================================================================
0000A544                            
0000A544                            loc_9224:				; XREF: Obj28_Index
0000A544 3028 0008                  		move.w	8(a0),d0
0000A548 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A54C 6500                       		bcs.s	loc_923C
0000A54E 0440 0180                  		subi.w	#$180,d0
0000A552 6A00                       		bpl.s	loc_923C
0000A554 4A28 0001                  		tst.b	1(a0)
0000A558 6A00 0000                  		bpl.w	DeleteObject
0000A55C                            
0000A55C                            loc_923C:
0000A55C 6000 0000                  		bra.w	DisplaySprite
0000A560                            ; ===========================================================================
0000A560                            
0000A560                            loc_9240:				; XREF: Obj28_Index
0000A560 4A28 0001                  		tst.b	1(a0)
0000A564 6A00 0000                  		bpl.w	DeleteObject
0000A568 5368 0036                  		subq.w	#1,$36(a0)
0000A56C 6600 0000                  		bne.w	loc_925C
0000A570 117C 0002 0024             		move.b	#2,$24(a0)
0000A576 117C 0003 0018             		move.b	#3,$18(a0)
0000A57C                            
0000A57C                            loc_925C:
0000A57C 6000 0000                  		bra.w	DisplaySprite
0000A580                            ; ===========================================================================
0000A580                            
0000A580                            loc_9260:				; XREF: Obj28_Index
0000A580 6100 0000                  		bsr.w	sub_9404
0000A584 6400                       		bcc.s	loc_927C
0000A586 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A58C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A592 117C 000E 0024             		move.b	#$E,$24(a0)
0000A598 6000 FF46                  		bra.w	loc_91C0
0000A59C                            ; ===========================================================================
0000A59C                            
0000A59C                            loc_927C:
0000A59C 6000 FFA6                  		bra.w	loc_9224
0000A5A0                            ; ===========================================================================
0000A5A0                            
0000A5A0                            loc_9280:				; XREF: Obj28_Index
0000A5A0 6100 0000                  		bsr.w	sub_9404
0000A5A4 6A00                       		bpl.s	loc_92B6
0000A5A6 4268 0010                  		clr.w	$10(a0)
0000A5AA 4268 0032                  		clr.w	$32(a0)
0000A5AE 6100 0000                  		bsr.w	SpeedToPos
0000A5B2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A5B8 6100 0000                  		bsr.w	loc_93C4
0000A5BC 6100 0000                  		bsr.w	loc_93EC
0000A5C0 5328 001E                  		subq.b	#1,$1E(a0)
0000A5C4 6A00                       		bpl.s	loc_92B6
0000A5C6 117C 0001 001E             		move.b	#1,$1E(a0)
0000A5CC 5228 001A                  		addq.b	#1,$1A(a0)
0000A5D0 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A5D6                            
0000A5D6                            loc_92B6:
0000A5D6 6000 FF6C                  		bra.w	loc_9224
0000A5DA                            ; ===========================================================================
0000A5DA                            
0000A5DA                            loc_92BA:				; XREF: Obj28_Index
0000A5DA 6100 0000                  		bsr.w	sub_9404
0000A5DE 6A00                       		bpl.s	loc_9310
0000A5E0 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A5E6 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A5EC 117C 0004 0024             		move.b	#4,$24(a0)
0000A5F2 6000 FEB0                  		bra.w	loc_9184
0000A5F6                            ; ===========================================================================
0000A5F6                            
0000A5F6                            loc_92D6:				; XREF: Obj28_Index
0000A5F6 6100 0000                  		bsr.w	ObjectFall
0000A5FA 117C 0001 001A             		move.b	#1,$1A(a0)
0000A600 4A68 0012                  		tst.w	$12(a0)
0000A604 6B00                       		bmi.s	loc_9310
0000A606 117C 0000 001A             		move.b	#0,$1A(a0)
0000A60C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A612 4A41                       		tst.w	d1
0000A614 6A00                       		bpl.s	loc_9310
0000A616 4628 0029                  		not.b	$29(a0)
0000A61A 6600                       		bne.s	loc_9306
0000A61C 4468 0010                  		neg.w	$10(a0)
0000A620 0868 0000 0001             		bchg	#0,1(a0)
0000A626                            
0000A626                            loc_9306:
0000A626 D368 000C                  		add.w	d1,$C(a0)
0000A62A 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A630                            
0000A630                            loc_9310:
0000A630 6000 FF12                  		bra.w	loc_9224
0000A634                            ; ===========================================================================
0000A634                            
0000A634                            loc_9314:				; XREF: Obj28_Index
0000A634 6100 0000                  		bsr.w	sub_9404
0000A638 6A00                       		bpl.s	loc_932E
0000A63A 4268 0010                  		clr.w	$10(a0)
0000A63E 4268 0032                  		clr.w	$32(a0)
0000A642 6100 0000                  		bsr.w	ObjectFall
0000A646 6100 0000                  		bsr.w	loc_93C4
0000A64A 6100 0000                  		bsr.w	loc_93EC
0000A64E                            
0000A64E                            loc_932E:
0000A64E 6000 FEF4                  		bra.w	loc_9224
0000A652                            ; ===========================================================================
0000A652                            
0000A652                            loc_9332:				; XREF: Obj28_Index
0000A652 6100 0000                  		bsr.w	sub_9404
0000A656 6A00                       		bpl.s	loc_936C
0000A658 6100 0000                  		bsr.w	ObjectFall
0000A65C 117C 0001 001A             		move.b	#1,$1A(a0)
0000A662 4A68 0012                  		tst.w	$12(a0)
0000A666 6B00                       		bmi.s	loc_936C
0000A668 117C 0000 001A             		move.b	#0,$1A(a0)
0000A66E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A674 4A41                       		tst.w	d1
0000A676 6A00                       		bpl.s	loc_936C
0000A678 4468 0010                  		neg.w	$10(a0)
0000A67C 0868 0000 0001             		bchg	#0,1(a0)
0000A682 D368 000C                  		add.w	d1,$C(a0)
0000A686 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A68C                            
0000A68C                            loc_936C:
0000A68C 6000 FEB6                  		bra.w	loc_9224
0000A690                            ; ===========================================================================
0000A690                            
0000A690                            loc_9370:				; XREF: Obj28_Index
0000A690 6100 0000                  		bsr.w	sub_9404
0000A694 6A00                       		bpl.s	loc_93C0
0000A696 6100 0000                  		bsr.w	SpeedToPos
0000A69A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A6A0 4A68 0012                  		tst.w	$12(a0)
0000A6A4 6B00                       		bmi.s	loc_93AA
0000A6A6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6AC 4A41                       		tst.w	d1
0000A6AE 6A00                       		bpl.s	loc_93AA
0000A6B0 4628 0029                  		not.b	$29(a0)
0000A6B4 6600                       		bne.s	loc_93A0
0000A6B6 4468 0010                  		neg.w	$10(a0)
0000A6BA 0868 0000 0001             		bchg	#0,1(a0)
0000A6C0                            
0000A6C0                            loc_93A0:
0000A6C0 D368 000C                  		add.w	d1,$C(a0)
0000A6C4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A6CA                            
0000A6CA                            loc_93AA:
0000A6CA 5328 001E                  		subq.b	#1,$1E(a0)
0000A6CE 6A00                       		bpl.s	loc_93C0
0000A6D0 117C 0001 001E             		move.b	#1,$1E(a0)
0000A6D6 5228 001A                  		addq.b	#1,$1A(a0)
0000A6DA 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A6E0                            
0000A6E0                            loc_93C0:
0000A6E0 6000 FE62                  		bra.w	loc_9224
0000A6E4                            ; ===========================================================================
0000A6E4                            
0000A6E4                            loc_93C4:
0000A6E4 117C 0001 001A             		move.b	#1,$1A(a0)
0000A6EA 4A68 0012                  		tst.w	$12(a0)
0000A6EE 6B00                       		bmi.s	locret_93EA
0000A6F0 117C 0000 001A             		move.b	#0,$1A(a0)
0000A6F6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6FC 4A41                       		tst.w	d1
0000A6FE 6A00                       		bpl.s	locret_93EA
0000A700 D368 000C                  		add.w	d1,$C(a0)
0000A704 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A70A                            
0000A70A                            locret_93EA:
0000A70A 4E75                       		rts	
0000A70C                            ; ===========================================================================
0000A70C                            
0000A70C                            loc_93EC:
0000A70C 08E8 0000 0001             		bset	#0,1(a0)
0000A712 3028 0008                  		move.w	8(a0),d0
0000A716 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A71A 6400                       		bcc.s	locret_9402
0000A71C 08A8 0000 0001             		bclr	#0,1(a0)
0000A722                            
0000A722                            locret_9402:
0000A722 4E75                       		rts	
0000A724                            
0000A724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A724                            
0000A724                            
0000A724                            sub_9404:
0000A724 3038 D008                  		move.w	($FFFFD008).w,d0
0000A728 9068 0008                  		sub.w	8(a0),d0
0000A72C 0440 00B8                  		subi.w	#$B8,d0
0000A730 4E75                       		rts	
0000A732                            ; End of function sub_9404
0000A732                            
0000A732                            ; ===========================================================================
0000A732                            ; ---------------------------------------------------------------------------
0000A732                            ; Object 29 - points that appear when you destroy something
0000A732                            ; ---------------------------------------------------------------------------
0000A732                            
0000A732                            Obj29:					; XREF: Obj_Index
0000A732 7000                       		moveq	#0,d0
0000A734 1028 0024                  		move.b	$24(a0),d0
0000A738 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000A73C 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000A740 6000 0000                  		bra.w	DisplaySprite
0000A744                            ; ===========================================================================
0000A744 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000A746 0000                       		dc.w Obj29_Slower-Obj29_Index
0000A748                            ; ===========================================================================
0000A748                            
0000A748                            Obj29_Main:				; XREF: Obj29_Index
0000A748 5428 0024                  		addq.b	#2,$24(a0)
0000A74C 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000A754 317C 2568 0002             		move.w	#($2000+pointsart),2(a0)
0000A75A 117C 0004 0001             		move.b	#4,1(a0)
0000A760 117C 0001 0018             		move.b	#1,$18(a0)
0000A766 117C 0008 0019             		move.b	#8,$19(a0)
0000A76C 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000A772                            
0000A772                            Obj29_Slower:				; XREF: Obj29_Index
0000A772 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A776 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000A77A 6100 0000                  		bsr.w	SpeedToPos
0000A77E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A784 4E75                       		rts	
0000A786                            ; ===========================================================================
0000A786                            ; ---------------------------------------------------------------------------
0000A786                            ; Sprite mappings - animals
0000A786                            ; ---------------------------------------------------------------------------
0000A786                            Map_obj28:
0000A786                            	include "_maps\obj28.asm"
0000A786                            ; ---------------------------------------------------------------------------
0000A786                            ; Sprite mappings - animals
0000A786                            ; ---------------------------------------------------------------------------
0000A786 0000                       		dc.w byte_9472-Map_obj28
0000A788 0000                       		dc.w byte_9478-Map_obj28
0000A78A 0000                       		dc.w byte_946C-Map_obj28
0000A78C 01                         byte_946C:	dc.b 1
0000A78D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A792 01                         byte_9472:	dc.b 1
0000A793 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000A798 01                         byte_9478:	dc.b 1
0000A799 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000A79E                            		even
0000A79E                            		even
0000A79E                            
0000A79E                            Map_obj28a:
0000A79E                            	include "_maps\obj28a.asm"
0000A79E                            ; ---------------------------------------------------------------------------
0000A79E                            ; Sprite mappings - animals
0000A79E                            ; ---------------------------------------------------------------------------
0000A79E 0000                       		dc.w byte_948A-Map_obj28a
0000A7A0 0000                       		dc.w byte_9490-Map_obj28a
0000A7A2 0000                       		dc.w byte_9484-Map_obj28a
0000A7A4 01                         byte_9484:	dc.b 1
0000A7A5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A7AA 01                         byte_948A:	dc.b 1
0000A7AB FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000A7B0 01                         byte_9490:	dc.b 1
0000A7B1 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000A7B6                            		even
0000A7B6                            		even
0000A7B6                            
0000A7B6                            Map_obj28b:
0000A7B6                            	include "_maps\obj28b.asm"
0000A7B6                            ; ---------------------------------------------------------------------------
0000A7B6                            ; Sprite mappings - animals
0000A7B6                            ; ---------------------------------------------------------------------------
0000A7B6 0000                       		dc.w byte_94A2-Map_obj28b
0000A7B8 0000                       		dc.w byte_94A8-Map_obj28b
0000A7BA 0000                       		dc.w byte_949C-Map_obj28b
0000A7BC 01                         byte_949C:	dc.b 1
0000A7BD F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A7C2 01                         byte_94A2:	dc.b 1
0000A7C3 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000A7C8 01                         byte_94A8:	dc.b 1
0000A7C9 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000A7CE                            		even
0000A7CE                            		even
0000A7CE                            
0000A7CE                            ; ---------------------------------------------------------------------------
0000A7CE                            ; Sprite mappings - points that	appear when you	destroy	something
0000A7CE                            ; ---------------------------------------------------------------------------
0000A7CE                            Map_obj29:
0000A7CE                            	include "_maps\obj29.asm"
0000A7CE                            ; ---------------------------------------------------------------------------
0000A7CE                            ; Sprite mappings - points that	appear when you	destroy	something
0000A7CE                            ; ---------------------------------------------------------------------------
0000A7CE 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000A7D2 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000A7D6 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A7DA 0000                       		dc.w byte_94E5-Map_obj29
0000A7DC 01                         byte_94BC:	dc.b 1
0000A7DD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A7E2 01                         byte_94C2:	dc.b 1
0000A7E3 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A7E8 01                         byte_94C8:	dc.b 1
0000A7E9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A7EE 01                         byte_94CE:	dc.b 1
0000A7EF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A7F4 01                         byte_94D4:	dc.b 1
0000A7F5 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A7FA 02                         byte_94DA:	dc.b 2
0000A7FB FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A800 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A805 02                         byte_94E5:	dc.b 2
0000A806 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A80B FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A810                            		even
0000A810                            		even
0000A810                            
0000A810                            ; ===========================================================================
0000A810                            ; ---------------------------------------------------------------------------
0000A810                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A810                            ; ---------------------------------------------------------------------------
0000A810                            
0000A810                            Obj1F:					; XREF: Obj_Index
0000A810 7000                       		moveq	#0,d0
0000A812 1028 0024                  		move.b	$24(a0),d0
0000A816 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A81A 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A81E                            ; ===========================================================================
0000A81E 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A820 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A822 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A824 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A826 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A828                            ; ===========================================================================
0000A828                            
0000A828                            Obj1F_Main:				; XREF: Obj1F_Index
0000A828 117C 0010 0016             		move.b	#$10,$16(a0)
0000A82E 117C 0008 0017             		move.b	#8,$17(a0)
0000A834 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A83C 317C 0400 0002             		move.w	#$400,2(a0)
0000A842 117C 0004 0001             		move.b	#4,1(a0)
0000A848 117C 0003 0018             		move.b	#3,$18(a0)
0000A84E 117C 0006 0020             		move.b	#6,$20(a0)
0000A854 117C 0015 0019             		move.b	#$15,$19(a0)
0000A85A 6100 0000                  		bsr.w	ObjectFall
0000A85E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A864 4A41                       		tst.w	d1
0000A866 6A00                       		bpl.s	locret_955A
0000A868 D368 000C                  		add.w	d1,$C(a0)
0000A86C 1143 0026                  		move.b	d3,$26(a0)
0000A870 317C 0000 0012             		move.w	#0,$12(a0)
0000A876 5428 0024                  		addq.b	#2,$24(a0)
0000A87A                            
0000A87A                            locret_955A:
0000A87A 4E75                       		rts	
0000A87C                            ; ===========================================================================
0000A87C                            
0000A87C                            Obj1F_Action:				; XREF: Obj1F_Index
0000A87C 7000                       		moveq	#0,d0
0000A87E 1028 0025                  		move.b	$25(a0),d0
0000A882 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A886 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A88A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A890 6100 0000                  		bsr.w	AnimateSprite
0000A894 6000 0000                  		bra.w	MarkObjGone
0000A898                            ; ===========================================================================
0000A898 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A89A 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A89C                            ; ===========================================================================
0000A89C                            
0000A89C                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A89C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A8A0 6A00                       		bpl.s	locret_95B6
0000A8A2 4A28 0001                  		tst.b	1(a0)
0000A8A6 6A00                       		bpl.s	Obj1F_Move
0000A8A8 0868 0001 0032             		bchg	#1,$32(a0)
0000A8AE 6600                       		bne.s	Obj1F_MakeFire
0000A8B0                            
0000A8B0                            Obj1F_Move:
0000A8B0 5428 0025                  		addq.b	#2,$25(a0)
0000A8B4 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A8BA 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A8C0 6100 0000                  		bsr.w	Obj1F_SetAni
0000A8C4 5600                       		addq.b	#3,d0
0000A8C6 1140 001C                  		move.b	d0,$1C(a0)
0000A8CA 0868 0000 0022             		bchg	#0,$22(a0)
0000A8D0 6600                       		bne.s	locret_95B6
0000A8D2 4468 0010                  		neg.w	$10(a0)		; change direction
0000A8D6                            
0000A8D6                            locret_95B6:
0000A8D6 4E75                       		rts	
0000A8D8                            ; ===========================================================================
0000A8D8                            
0000A8D8                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A8D8 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A8DE 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A8E4 6100 0000                  		bsr.w	SingleObjLoad
0000A8E8 6600                       		bne.s	Obj1F_MakeFire2
0000A8EA 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A8EE 137C 0006 0024             		move.b	#6,$24(a1)
0000A8F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A8FA 0469 0010 0008             		subi.w	#$10,8(a1)
0000A900 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A906 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A90C                            
0000A90C                            Obj1F_MakeFire2:
0000A90C 6100 0000                  		bsr.w	SingleObjLoad
0000A910 6600                       		bne.s	locret_9618
0000A912 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A916 137C 0006 0024             		move.b	#6,$24(a1)
0000A91C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A922 0669 0010 0008             		addi.w	#$10,8(a1)
0000A928 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A92E 337C 0100 0010             		move.w	#$100,$10(a1)
0000A934                            
0000A934                            locret_9618:
0000A934 4E75                       		rts	
0000A936                            ; ===========================================================================
0000A936                            
0000A936                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A936 5368 0030                  		subq.w	#1,$30(a0)
0000A93A 6B00                       		bmi.s	loc_966E
0000A93C 6100 0000                  		bsr.w	SpeedToPos
0000A940 0868 0000 0032             		bchg	#0,$32(a0)
0000A946 6600                       		bne.s	loc_9654
0000A948 3628 0008                  		move.w	8(a0),d3
0000A94C 0643 0010                  		addi.w	#$10,d3
0000A950 0828 0000 0022             		btst	#0,$22(a0)
0000A956 6700                       		beq.s	loc_9640
0000A958 0443 0020                  		subi.w	#$20,d3
0000A95C                            
0000A95C                            loc_9640:
0000A95C 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A962 0C41 FFF8                  		cmpi.w	#-8,d1
0000A966 6D00                       		blt.s	loc_966E
0000A968 0C41 000C                  		cmpi.w	#$C,d1
0000A96C 6C00                       		bge.s	loc_966E
0000A96E 4E75                       		rts	
0000A970                            ; ===========================================================================
0000A970                            
0000A970                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A970 4EB9 0000 0000             		jsr	ObjHitFloor
0000A976 D368 000C                  		add.w	d1,$C(a0)
0000A97A 1143 0026                  		move.b	d3,$26(a0)
0000A97E 6100 0000                  		bsr.w	Obj1F_SetAni
0000A982 5600                       		addq.b	#3,d0
0000A984 1140 001C                  		move.b	d0,$1C(a0)
0000A988 4E75                       		rts	
0000A98A                            ; ===========================================================================
0000A98A                            
0000A98A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A98A 5528 0025                  		subq.b	#2,$25(a0)
0000A98E 317C 003B 0030             		move.w	#59,$30(a0)
0000A994 317C 0000 0010             		move.w	#0,$10(a0)
0000A99A 6100 0000                  		bsr.w	Obj1F_SetAni
0000A99E 1140 001C                  		move.b	d0,$1C(a0)
0000A9A2 4E75                       		rts	
0000A9A4                            ; ---------------------------------------------------------------------------
0000A9A4                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A9A4                            ; ---------------------------------------------------------------------------
0000A9A4                            
0000A9A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A9A4                            
0000A9A4                            
0000A9A4                            Obj1F_SetAni:				; XREF: loc_966E
0000A9A4 7000                       		moveq	#0,d0
0000A9A6 1628 0026                  		move.b	$26(a0),d3
0000A9AA 6B00                       		bmi.s	loc_96A4
0000A9AC 0C03 0006                  		cmpi.b	#6,d3
0000A9B0 6500                       		bcs.s	locret_96A2
0000A9B2 7001                       		moveq	#1,d0
0000A9B4 0828 0000 0022             		btst	#0,$22(a0)
0000A9BA 6600                       		bne.s	locret_96A2
0000A9BC 7002                       		moveq	#2,d0
0000A9BE                            
0000A9BE                            locret_96A2:
0000A9BE 4E75                       		rts	
0000A9C0                            ; ===========================================================================
0000A9C0                            
0000A9C0                            loc_96A4:				; XREF: Obj1F_SetAni
0000A9C0 0C03 00FA                  		cmpi.b	#-6,d3
0000A9C4 6200                       		bhi.s	locret_96B6
0000A9C6 7002                       		moveq	#2,d0
0000A9C8 0828 0000 0022             		btst	#0,$22(a0)
0000A9CE 6600                       		bne.s	locret_96B6
0000A9D0 7001                       		moveq	#1,d0
0000A9D2                            
0000A9D2                            locret_96B6:
0000A9D2 4E75                       		rts	
0000A9D4                            ; End of function Obj1F_SetAni
0000A9D4                            
0000A9D4                            ; ===========================================================================
0000A9D4                            
0000A9D4                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A9D4 6100 0000                  		bsr.w	DeleteObject
0000A9D8 4E75                       		rts	
0000A9DA                            ; ===========================================================================
0000A9DA                            ; ---------------------------------------------------------------------------
0000A9DA                            ; Sub-object - missile that the	Crabmeat throws
0000A9DA                            ; ---------------------------------------------------------------------------
0000A9DA                            
0000A9DA                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A9DA 5428 0024                  		addq.b	#2,$24(a0)
0000A9DE 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A9E6 317C 0400 0002             		move.w	#$400,2(a0)
0000A9EC 117C 0004 0001             		move.b	#4,1(a0)
0000A9F2 117C 0003 0018             		move.b	#3,$18(a0)
0000A9F8 117C 0087 0020             		move.b	#$87,$20(a0)
0000A9FE 117C 0008 0019             		move.b	#8,$19(a0)
0000AA04 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AA0A 117C 0007 001C             		move.b	#7,$1C(a0)
0000AA10                            
0000AA10                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000AA10 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000AA16 6100 0000                  		bsr.w	AnimateSprite
0000AA1A 6100 0000                  		bsr.w	ObjectFall
0000AA1E 6100 0000                  		bsr.w	DisplaySprite
0000AA22 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AA26 0640 00E0                  		addi.w	#$E0,d0
0000AA2A B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AA2E 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000AA30 4E75                       		rts	
0000AA32                            ; ===========================================================================
0000AA32                            
0000AA32                            Obj1F_Delete2:
0000AA32 6000 0000                  		bra.w	DeleteObject
0000AA36                            ; ===========================================================================
0000AA36                            Ani_obj1F:
0000AA36                            	include "_anim\obj1F.asm"
0000AA36                            ; ---------------------------------------------------------------------------
0000AA36                            ; Animation script - Crabmeat enemy
0000AA36                            ; ---------------------------------------------------------------------------
0000AA36 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000AA3C 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000AA42 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000AA46 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000AA4A 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000AA4E 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000AA52 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000AA58 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000AA5E 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000AA64 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000AA68 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000AA6C                            		even
0000AA6C                            		even
0000AA6C                            
0000AA6C                            ; ---------------------------------------------------------------------------
0000AA6C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AA6C                            ; ---------------------------------------------------------------------------
0000AA6C                            Map_obj1F:
0000AA6C                            	include "_maps\obj1F.asm"
0000AA6C                            ; ---------------------------------------------------------------------------
0000AA6C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AA6C                            ; ---------------------------------------------------------------------------
0000AA6C 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000AA70 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000AA74 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000AA78 0000                       		dc.w byte_97D7-Map_obj1F
0000AA7A 04                         byte_975E:	dc.b 4
0000AA7B F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000AA80 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000AA85 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000AA8A 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000AA8F 04                         byte_9773:	dc.b 4
0000AA90 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000AA95 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000AA9A 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000AA9F 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000AAA4 04                         byte_9788:	dc.b 4
0000AAA5 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000AAAA EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000AAAF FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000AAB4 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000AAB9 04                         byte_979D:	dc.b 4
0000AABA EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000AABF EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000AAC4 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000AAC9 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000AACE 06                         byte_97B2:	dc.b 6
0000AACF F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000AAD4 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000AAD9 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000AADE F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000AAE3 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000AAE8 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000AAED 01                         byte_97D1:	dc.b 1
0000AAEE F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000AAF3 01                         byte_97D7:	dc.b 1
0000AAF4 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000AAFA 00                         		even
0000AAFA 00                         		even
0000AAFA                            
0000AAFA                            ; ===========================================================================
0000AAFA                            ; ---------------------------------------------------------------------------
0000AAFA                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000AAFA                            ; ---------------------------------------------------------------------------
0000AAFA                            
0000AAFA                            Obj22:					; XREF: Obj_Index
0000AAFA 7000                       		moveq	#0,d0
0000AAFC 1028 0024                  		move.b	$24(a0),d0
0000AB00 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000AB04 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000AB08                            ; ===========================================================================
0000AB08 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000AB0A 0000                       		dc.w Obj22_Action-Obj22_Index
0000AB0C 0000                       		dc.w Obj22_Delete-Obj22_Index
0000AB0E                            ; ===========================================================================
0000AB0E                            
0000AB0E                            Obj22_Main:				; XREF: Obj22_Index
0000AB0E 5428 0024                  		addq.b	#2,$24(a0)
0000AB12 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000AB1A 317C 0444 0002             		move.w	#$444,2(a0)
0000AB20 117C 0004 0001             		move.b	#4,1(a0)
0000AB26 117C 0003 0018             		move.b	#3,$18(a0)
0000AB2C 117C 0008 0020             		move.b	#8,$20(a0)
0000AB32 117C 0018 0019             		move.b	#$18,$19(a0)
0000AB38                            
0000AB38                            Obj22_Action:				; XREF: Obj22_Index
0000AB38 7000                       		moveq	#0,d0
0000AB3A 1028 0025                  		move.b	$25(a0),d0
0000AB3E 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000AB42 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000AB46 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000AB4C 6100 0000                  		bsr.w	AnimateSprite
0000AB50 6000 0000                  		bra.w	MarkObjGone
0000AB54                            ; ===========================================================================
0000AB54 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000AB56 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000AB58                            ; ===========================================================================
0000AB58                            
0000AB58                            Obj22_Move:				; XREF: Obj22_Index2
0000AB58 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AB5C 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000AB5E 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000AB64 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000AB66 5428 0025                  		addq.b	#2,$25(a0)
0000AB6A 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000AB70 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000AB76 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000AB7C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000AB82 6600                       		bne.s	locret_986C	; if not, branch
0000AB84 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000AB88                            
0000AB88                            locret_986C:
0000AB88 4E75                       		rts	
0000AB8A                            ; ===========================================================================
0000AB8A                            
0000AB8A                            Obj22_Fire:				; XREF: Obj22_Move
0000AB8A 6100 0000                  		bsr.w	SingleObjLoad
0000AB8E 6600                       		bne.s	locret_98D0
0000AB90 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000AB94 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB9A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ABA0 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000ABA6 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000ABAC 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000ABB2 303C 0018                  		move.w	#$18,d0
0000ABB6 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000ABBC 6600                       		bne.s	loc_98AA	; if not, branch
0000ABBE 4440                       		neg.w	d0
0000ABC0 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000ABC4                            
0000ABC4                            loc_98AA:
0000ABC4 D169 0008                  		add.w	d0,8(a1)
0000ABC8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000ABCE 337C 000E 0032             		move.w	#$E,$32(a1)
0000ABD4 2348 003C                  		move.l	a0,$3C(a1)
0000ABD8 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000ABDE 317C 003B 0032             		move.w	#$3B,$32(a0)
0000ABE4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000ABEA                            
0000ABEA                            locret_98D0:
0000ABEA 4E75                       		rts	
0000ABEC                            ; ===========================================================================
0000ABEC                            
0000ABEC                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000ABEC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000ABF0 6B00                       		bmi.s	Obj22_ChgDir
0000ABF2 6100 0000                  		bsr.w	SpeedToPos
0000ABF6 4A28 0034                  		tst.b	$34(a0)
0000ABFA 6600                       		bne.s	locret_992A
0000ABFC 3038 D008                  		move.w	($FFFFD008).w,d0
0000AC00 9068 0008                  		sub.w	8(a0),d0
0000AC04 6A00                       		bpl.s	Obj22_SetNrSonic
0000AC06 4440                       		neg.w	d0
0000AC08                            
0000AC08                            Obj22_SetNrSonic:
0000AC08 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000AC0C 6400                       		bcc.s	locret_992A	; if not, branch
0000AC0E 4A28 0001                  		tst.b	1(a0)
0000AC12 6A00                       		bpl.s	locret_992A
0000AC14 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000AC1A 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000AC20 6000                       		bra.s	Obj22_Stop
0000AC22                            ; ===========================================================================
0000AC22                            
0000AC22                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000AC22 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000AC28 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000AC2E 317C 003B 0032             		move.w	#59,$32(a0)
0000AC34                            
0000AC34                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000AC34 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000AC38 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000AC3E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000AC44                            
0000AC44                            locret_992A:
0000AC44 4E75                       		rts	
0000AC46                            ; ===========================================================================
0000AC46                            
0000AC46                            Obj22_Delete:				; XREF: Obj22_Index
0000AC46 6100 0000                  		bsr.w	DeleteObject
0000AC4A 4E75                       		rts	
0000AC4C                            ; ===========================================================================
0000AC4C                            ; ---------------------------------------------------------------------------
0000AC4C                            ; Object 23 - missile that Buzz	Bomber throws
0000AC4C                            ; ---------------------------------------------------------------------------
0000AC4C                            
0000AC4C                            Obj23:					; XREF: Obj_Index
0000AC4C 7000                       		moveq	#0,d0
0000AC4E 1028 0024                  		move.b	$24(a0),d0
0000AC52 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000AC56 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000AC5A                            ; ===========================================================================
0000AC5A 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000AC5C 0000                       		dc.w Obj23_Animate-Obj23_Index
0000AC5E 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000AC60 0000                       		dc.w Obj23_Delete-Obj23_Index
0000AC62 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000AC64                            ; ===========================================================================
0000AC64                            
0000AC64                            Obj23_Main:				; XREF: Obj23_Index
0000AC64 5368 0032                  		subq.w	#1,$32(a0)
0000AC68 6A00                       		bpl.s	Obj23_ChkCancel
0000AC6A 5428 0024                  		addq.b	#2,$24(a0)
0000AC6E 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000AC76 317C 2444 0002             		move.w	#$2444,2(a0)
0000AC7C 117C 0004 0001             		move.b	#4,1(a0)
0000AC82 117C 0003 0018             		move.b	#3,$18(a0)
0000AC88 117C 0008 0019             		move.b	#8,$19(a0)
0000AC8E 0228 0003 0022             		andi.b	#3,$22(a0)
0000AC94 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000AC98 6700                       		beq.s	Obj23_Animate	; if not, branch
0000AC9A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000ACA0 117C 0087 0020             		move.b	#$87,$20(a0)
0000ACA6 117C 0001 001C             		move.b	#1,$1C(a0)
0000ACAC 6000                       		bra.s	Obj23_Animate2
0000ACAE                            ; ===========================================================================
0000ACAE                            
0000ACAE                            Obj23_Animate:				; XREF: Obj23_Index
0000ACAE 6100                       		bsr.s	Obj23_ChkCancel
0000ACB0 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000ACB6 6100 0000                  		bsr.w	AnimateSprite
0000ACBA 6000 0000                  		bra.w	DisplaySprite
0000ACBE                            ; ---------------------------------------------------------------------------
0000ACBE                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000ACBE                            ; destroyed, and if it has, then cancel	the missile
0000ACBE                            ; ---------------------------------------------------------------------------
0000ACBE                            
0000ACBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACBE                            
0000ACBE                            
0000ACBE                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000ACBE 2268 003C                  		movea.l	$3C(a0),a1
0000ACC2 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000ACC6 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000ACC8 4E75                       		rts	
0000ACCA                            ; End of function Obj23_ChkCancel
0000ACCA                            
0000ACCA                            ; ===========================================================================
0000ACCA                            
0000ACCA                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000ACCA 0828 0007 0022             		btst	#7,$22(a0)
0000ACD0 6600                       		bne.s	Obj23_Explode
0000ACD2 117C 0087 0020             		move.b	#$87,$20(a0)
0000ACD8 117C 0001 001C             		move.b	#1,$1C(a0)
0000ACDE 6100 0000                  		bsr.w	SpeedToPos
0000ACE2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000ACE8 6100 0000                  		bsr.w	AnimateSprite
0000ACEC 6100 0000                  		bsr.w	DisplaySprite
0000ACF0 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000ACF4 0640 00E0                  		addi.w	#$E0,d0
0000ACF8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000ACFC 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000ACFE 4E75                       		rts	
0000AD00                            ; ===========================================================================
0000AD00                            
0000AD00                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000AD00 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000AD04 117C 0000 0024             		move.b	#0,$24(a0)
0000AD0A 6000 F30A                  		bra.w	Obj24
0000AD0E                            ; ===========================================================================
0000AD0E                            
0000AD0E                            Obj23_Delete:				; XREF: Obj23_Index
0000AD0E 6100 0000                  		bsr.w	DeleteObject
0000AD12 4E75                       		rts	
0000AD14                            ; ===========================================================================
0000AD14                            
0000AD14                            Obj23_FromNewt:				; XREF: Obj23_Index
0000AD14 4A28 0001                  		tst.b	1(a0)
0000AD18 6AF4                       		bpl.s	Obj23_Delete
0000AD1A 6100 0000                  		bsr.w	SpeedToPos
0000AD1E                            
0000AD1E                            Obj23_Animate2:				; XREF: Obj23_Main
0000AD1E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AD24 6100 0000                  		bsr.w	AnimateSprite
0000AD28 6100 0000                  		bsr.w	DisplaySprite
0000AD2C 4E75                       		rts	
0000AD2E                            ; ===========================================================================
0000AD2E                            Ani_obj22:
0000AD2E                            	include "_anim\obj22.asm"
0000AD2E                            ; ---------------------------------------------------------------------------
0000AD2E                            ; Animation script - Buzz Bomber enemy
0000AD2E                            ; ---------------------------------------------------------------------------
0000AD2E 0000                       		dc.w byte_9A1E-Ani_obj22
0000AD30 0000                       		dc.w byte_9A22-Ani_obj22
0000AD32 0000                       		dc.w byte_9A26-Ani_obj22
0000AD34 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000AD38 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000AD3C 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000AD40                            		even
0000AD40                            		even
0000AD40                            
0000AD40                            Ani_obj23:
0000AD40                            	include "_anim\obj23.asm"
0000AD40                            ; ---------------------------------------------------------------------------
0000AD40                            ; Animation script - missile that Buzz Bomber throws
0000AD40                            ; ---------------------------------------------------------------------------
0000AD40 0000                       		dc.w byte_9A2E-Ani_obj23
0000AD42 0000                       		dc.w byte_9A32-Ani_obj23
0000AD44 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000AD48 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000AD4C                            		even
0000AD4C                            		even
0000AD4C                            
0000AD4C                            ; ---------------------------------------------------------------------------
0000AD4C                            ; Sprite mappings - Buzz Bomber	enemy
0000AD4C                            ; ---------------------------------------------------------------------------
0000AD4C                            Map_obj22:
0000AD4C                            	include "_maps\obj22.asm"
0000AD4C                            ; ---------------------------------------------------------------------------
0000AD4C                            ; Sprite mappings - Buzz Bomber	enemy
0000AD4C                            ; ---------------------------------------------------------------------------
0000AD4C 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000AD50 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000AD54 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000AD58 06                         byte_9A42:	dc.b 6
0000AD59 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AD5E F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AD63 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AD68 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AD6D F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AD72 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AD77 06                         byte_9A61:	dc.b 6
0000AD78 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AD7D F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AD82 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AD87 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AD8C F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AD91 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AD96 07                         byte_9A80:	dc.b 7
0000AD97 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000AD9C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ADA1 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ADA6 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ADAB 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000ADB0 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000ADB5 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000ADBA 07                         byte_9AA4:	dc.b 7
0000ADBB 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000ADC0 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ADC5 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ADCA 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ADCF 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000ADD4 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000ADD9 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000ADDE 06                         byte_9AC8:	dc.b 6
0000ADDF F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000ADE4 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000ADE9 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000ADEE 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000ADF3 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000ADF8 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000ADFD 04                         byte_9AE7:	dc.b 4
0000ADFE F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000AE03 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000AE08 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000AE0D 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000AE12 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AE17 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AE1C                            		even
0000AE1C                            		even
0000AE1C                            
0000AE1C                            ; ---------------------------------------------------------------------------
0000AE1C                            ; Sprite mappings - missile that Buzz Bomber throws
0000AE1C                            ; ---------------------------------------------------------------------------
0000AE1C                            Map_obj23:
0000AE1C                            	include "_maps\obj23.asm"
0000AE1C                            ; ---------------------------------------------------------------------------
0000AE1C                            ; Sprite mappings - missile that Buzz Bomber throws
0000AE1C                            ; ---------------------------------------------------------------------------
0000AE1C 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000AE20 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000AE24 01                         byte_9B0E:	dc.b 1
0000AE25 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000AE2A 01                         byte_9B14:	dc.b 1
0000AE2B F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000AE30 01                         byte_9B1A:	dc.b 1
0000AE31 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000AE36 01                         byte_9B20:	dc.b 1
0000AE37 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000AE3C                            		even
0000AE3C                            		even
0000AE3C                            
0000AE3C                            ; ===========================================================================
0000AE3C                            ; ---------------------------------------------------------------------------
0000AE3C                            ; Object 25 - rings
0000AE3C                            ; ---------------------------------------------------------------------------
0000AE3C                            
0000AE3C                            Obj25:					; XREF: Obj_Index
0000AE3C 7000                       		moveq	#0,d0
0000AE3E 1028 0024                  		move.b	$24(a0),d0
0000AE42 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000AE46 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000AE4A                            ; ===========================================================================
0000AE4A 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000AE4C 0000                       		dc.w Obj25_Animate-Obj25_Index
0000AE4E 0000                       		dc.w Obj25_Collect-Obj25_Index
0000AE50 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000AE52 0000                       		dc.w Obj25_Delete-Obj25_Index
0000AE54                            ; ===========================================================================
0000AE54                            
0000AE54                            Obj25_Main:				; XREF: Obj25_Index		addq.b	#2,$24(a0)
0000AE54 3168 0008 0032             		move.w	8(a0),$32(a0)
0000AE5A 217C 0000 0000 0004        		move.l	#Map_obj25,4(a0)
0000AE62 317C 26BA 0002             		move.w	#($2000+ringart),2(a0)
0000AE68 117C 0004 0001             		move.b	#4,1(a0)
0000AE6E 117C 0002 0018             		move.b	#2,$18(a0)
0000AE74 117C 0047 0020             		move.b	#$47,$20(a0)
0000AE7A 117C 0008 0019             		move.b	#8,$19(a0)
0000AE80                            
0000AE80                            Obj25_Animate:				; XREF: Obj25_Index
0000AE80 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000AE86 3028 0032                  		move.w	$32(a0),d0
0000AE8A 6000 0000                  		bra.w	MarkObjGone
0000AE8E                            ; ===========================================================================
0000AE8E                            
0000AE8E                            Obj25_Collect:				; XREF: Obj25_Index
0000AE8E 5428 0024                  		addq.b	#2,$24(a0)
0000AE92 117C 0000 0020             		move.b	#0,$20(a0)
0000AE98 317C 0080 0018             		move.w	#$80,$18(a0)
0000AE9E 6100 0000                  		bsr.w	CollectRing
0000AEA2                            
0000AEA2                            Obj25_Sparkle:				; XREF: Obj25_Index
0000AEA2 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AEA8 6100 0000                  		bsr.w	AnimateSprite
0000AEAC 6000 0000                  		bra.w	DisplaySprite
0000AEB0                            ; ===========================================================================
0000AEB0                            
0000AEB0                            Obj25_Delete:				; XREF: Obj25_Index
0000AEB0 6000 0000                  		bra.w	DeleteObject
0000AEB4                            
0000AEB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEB4                            
0000AEB4                            
0000AEB4                            CollectRing:				; XREF: Obj25_Collect
0000AEB4 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000AEB8 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000AEBE 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000AEC2 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000AEC8 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AECA 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000AED0 6700                       		beq.s	loc_9CA4
0000AED2 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000AED8 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AEDA 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000AEE0 6600                       		bne.s	Obj25_PlaySnd
0000AEE2                            
0000AEE2                            loc_9CA4:
0000AEE2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AEE6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AEEA 303C 0088                  		move.w	#$88,d0		; play extra life music
0000AEEE                            
0000AEEE                            Obj25_PlaySnd:
0000AEEE 4EF9 0000 11F6             		jmp	(PlaySound_Special).l
0000AEF4                            ; End of function CollectRing
0000AEF4                            
0000AEF4                            ; ===========================================================================
0000AEF4                            ; ---------------------------------------------------------------------------
0000AEF4                            ; Object 37 - rings flying out of Sonic	when he's hit
0000AEF4                            ; ---------------------------------------------------------------------------
0000AEF4                            
0000AEF4                            Obj37:					; XREF: Obj_Index
0000AEF4 7000                       		moveq	#0,d0
0000AEF6 1028 0024                  		move.b	$24(a0),d0
0000AEFA 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000AEFE 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000AF02                            ; ===========================================================================
0000AF02 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000AF04 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000AF06 0000                       		dc.w Obj37_Collect-Obj37_Index
0000AF08 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000AF0A 0000                       		dc.w Obj37_Delete-Obj37_Index
0000AF0C                            ; ===========================================================================
0000AF0C                            
0000AF0C                            Obj37_CountRings:			; XREF: Obj37_Index
0000AF0C 2248                       		movea.l	a0,a1
0000AF0E 7A00                       		moveq	#0,d5
0000AF10 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000AF14 7020                       		moveq	#32,d0
0000AF16 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000AF18 6500                       		bcs.s	loc_9CDE	; if not, branch
0000AF1A 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000AF1C                            
0000AF1C                            loc_9CDE:
0000AF1C 5345                       		subq.w	#1,d5
0000AF1E 383C 0288                  		move.w	#$288,d4
0000AF22 6000                       		bra.s	Obj37_MakeRings
0000AF24                            ; ===========================================================================
0000AF24                            
0000AF24                            Obj37_Loop:
0000AF24 6100 0000                  		bsr.w	SingleObjLoad
0000AF28 6600 0000                  		bne.w	Obj37_ResetCounter
0000AF2C                            
0000AF2C                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000AF2C 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000AF30 5429 0024                  		addq.b	#2,$24(a1)
0000AF34 137C 0008 0016             		move.b	#8,$16(a1)
0000AF3A 137C 0008 0017             		move.b	#8,$17(a1)
0000AF40 3368 0008 0008             		move.w	8(a0),8(a1)
0000AF46 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AF4C 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000AF54 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
0000AF5A 137C 0004 0001             		move.b	#4,1(a1)
0000AF60 137C 0003 0018             		move.b	#3,$18(a1)
0000AF66 137C 0047 0020             		move.b	#$47,$20(a1)
0000AF6C 137C 0008 0019             		move.b	#8,$19(a1)
0000AF72 4A44                       		tst.w	d4
0000AF74 6B00                       		bmi.s	loc_9D62
0000AF76 3004                       		move.w	d4,d0
0000AF78 4EB9 0000 29CC             		jsr	(CalcSine).l
0000AF7E 3404                       		move.w	d4,d2
0000AF80 E04A                       		lsr.w	#8,d2
0000AF82 E560                       		asl.w	d2,d0
0000AF84 E561                       		asl.w	d2,d1
0000AF86 3400                       		move.w	d0,d2
0000AF88 3601                       		move.w	d1,d3
0000AF8A 0604 0010                  		addi.b	#$10,d4
0000AF8E 6400                       		bcc.s	loc_9D62
0000AF90 0444 0080                  		subi.w	#$80,d4
0000AF94 6400                       		bcc.s	loc_9D62
0000AF96 383C 0288                  		move.w	#$288,d4
0000AF9A                            
0000AF9A                            loc_9D62:
0000AF9A 3342 0010                  		move.w	d2,$10(a1)
0000AF9E 3343 0012                  		move.w	d3,$12(a1)
0000AFA2 4442                       		neg.w	d2
0000AFA4 4444                       		neg.w	d4
0000AFA6 51CD FF7C                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000AFAA                            
0000AFAA                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000AFAA 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000AFB0 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000AFB6 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000AFBC 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000AFBE 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000AFC2 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)		
0000AFC6 303C 00C6                  		move.w	#$C6,d0
0000AFCA 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000AFD0                            
0000AFD0                            Obj37_Bounce:				; XREF: Obj37_Index
0000AFD0 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000AFD6 6100 0000                  		bsr.w	SpeedToPos
0000AFDA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AFE0 6B00                       		bmi.s	Obj37_ChkDel
0000AFE2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000AFE6 D007                       		add.b	d7,d0
0000AFE8 0200 0003                  		andi.b	#3,d0
0000AFEC 6600                       		bne.s	Obj37_ChkDel
0000AFEE 4EB9 0000 0000             		jsr	ObjHitFloor
0000AFF4 4A41                       		tst.w	d1
0000AFF6 6A00                       		bpl.s	Obj37_ChkDel
0000AFF8 D368 000C                  		add.w	d1,$C(a0)
0000AFFC 3028 0012                  		move.w	$12(a0),d0
0000B000 E440                       		asr.w	#2,d0
0000B002 9168 0012                  		sub.w	d0,$12(a0)
0000B006 4468 0012                  		neg.w	$12(a0)
0000B00A                            
0000B00A                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000B00A 5328 001F                  		subq.b	#1,$1F(a0)	; Subtract 1
0000B00E 6700 0000                  		beq.w	DeleteObject		; If 0, delete
0000B012 0C78 FF00 F72C             		cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000B018 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000B01C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B020 0640 00E0                  		addi.w	#$E0,d0
0000B024 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000B028 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000B02A 6000 0000                  		bra.w	DisplaySprite
0000B02E                            ; ===========================================================================
0000B02E                            
0000B02E                            Obj37_Collect:				; XREF: Obj37_Index
0000B02E 5428 0024                  		addq.b	#2,$24(a0)
0000B032 117C 0000 0020             		move.b	#0,$20(a0)
0000B038 117C 0001 0018             		move.b	#1,$18(a0)
0000B03E 6100 FE74                  		bsr.w	CollectRing
0000B042                            
0000B042                            Obj37_Sparkle:				; XREF: Obj37_Index
0000B042 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B048 6100 0000                  		bsr.w	AnimateSprite
0000B04C 6000 0000                  		bra.w	DisplaySprite
0000B050                            ; ===========================================================================
0000B050                            
0000B050                            Obj37_Delete:				; XREF: Obj37_Index
0000B050 6000 0000                  		bra.w	DeleteObject
0000B054                            ; ===========================================================================
0000B054                            ; ---------------------------------------------------------------------------
0000B054                            ; Object 4B - giant ring for entry to special stage
0000B054                            ; ---------------------------------------------------------------------------
0000B054                            
0000B054                            Obj4B:					; XREF: Obj_Index
0000B054 7000                       		moveq	#0,d0
0000B056 1028 0024                  		move.b	$24(a0),d0
0000B05A 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000B05E 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000B062                            ; ===========================================================================
0000B062 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000B064 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000B066 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000B068 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000B06A                            ; ===========================================================================
0000B06A                            
0000B06A                            Obj4B_Main:				; XREF: Obj4B_Index
0000B06A 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000B072 317C 2400 0002             		move.w	#$2400,2(a0)
0000B078 0028 0004 0001             		ori.b	#4,1(a0)
0000B07E 117C 0040 0019             		move.b	#$40,$19(a0)
0000B084 4A28 0001                  		tst.b	1(a0)
0000B088 6A00                       		bpl.s	Obj4B_Animate
0000B08A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000B090 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000B094 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000B09A 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000B09C 4EF9 0000 0000             		jmp	(DeleteObject).l
0000B0A2                            
0000B0A2                            ; ===========================================================================
0000B0A2                            
0000B0A2                            Obj4B_Okay:				; XREF: Obj4B_Main
0000B0A2 5428 0024                  		addq.b	#2,$24(a0)
0000B0A6 117C 0002 0018             		move.b	#2,$18(a0)
0000B0AC 117C 0052 0020             		move.b	#$52,$20(a0)
0000B0B2 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000B0B8                            
0000B0B8                            Obj4B_Animate:				; XREF: Obj4B_Index
0000B0B8 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B0BE 3028 0008                  		move.w	8(a0),d0
0000B0C2 0240 FF80                  		andi.w	#$FF80,d0
0000B0C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000B0CA 0441 0080                  		subi.w	#$80,d1
0000B0CE 0241 FF80                  		andi.w	#$FF80,d1
0000B0D2 9041                       		sub.w	d1,d0
0000B0D4 0C40 0280                  		cmpi.w	#$280,d0
0000B0D8 6300 0000                  		bls.w	DisplaySprite
0000B0DC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B0E0 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B0E4 3440                       		movea.w	d0,a2	; load address into a2
0000B0E6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B0EA 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B0EE                            ; ===========================================================================
0000B0EE                            
0000B0EE                            Obj4B_Collect:				; XREF: Obj4B_Index
0000B0EE 5528 0024                  		subq.b	#2,$24(a0)
0000B0F2 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B0F8 11FC 0040 F5D0             		move.b	#$40,(SonimeSST+sonime_facetimer).w
0000B0FE 117C 0000 0020             		move.b	#0,$20(a0)
0000B104 6100 0000                  		bsr.w	SingleObjLoad
0000B108 6600 0000                  		bne.w	Obj4B_PlaySnd
0000B10C 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000B110 3368 0008 0008             		move.w	8(a0),8(a1)
0000B116 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B11C 2348 003C                  		move.l	a0,$3C(a1)
0000B120 3038 D008                  		move.w	($FFFFD008).w,d0
0000B124 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B128 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B12A 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B130                            
0000B130                            Obj4B_PlaySnd:
0000B130 303C 00C3                  		move.w	#$C3,d0
0000B134 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B13A 6000 FF7C                  		bra.w	Obj4B_Animate
0000B13E                            ; ===========================================================================
0000B13E                            
0000B13E                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B13E 6000 0000                  		bra.w	DeleteObject
0000B142                            ; ===========================================================================
0000B142                            ; ---------------------------------------------------------------------------
0000B142                            ; Object 7C - flash effect when	you collect the	giant ring
0000B142                            ; ---------------------------------------------------------------------------
0000B142                            
0000B142                            Obj7C:					; XREF: Obj_Index
0000B142 7000                       		moveq	#0,d0
0000B144 1028 0024                  		move.b	$24(a0),d0
0000B148 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B14C 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B150                            ; ===========================================================================
0000B150 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B152 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B154 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B156                            ; ===========================================================================
0000B156                            
0000B156                            Obj7C_Main:				; XREF: Obj7C_Index
0000B156 5428 0024                  		addq.b	#2,$24(a0)
0000B15A 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B162 317C 2462 0002             		move.w	#$2462,2(a0)
0000B168 0028 0004 0001             		ori.b	#4,1(a0)
0000B16E 117C 0000 0018             		move.b	#0,$18(a0)
0000B174 117C 0020 0019             		move.b	#$20,$19(a0)
0000B17A 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000B180                            
0000B180                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000B180 6100                       		bsr.s	Obj7C_Collect
0000B182 3028 0008                  		move.w	8(a0),d0
0000B186 0240 FF80                  		andi.w	#$FF80,d0
0000B18A 3238 F700                  		move.w	($FFFFF700).w,d1
0000B18E 0441 0080                  		subi.w	#$80,d1
0000B192 0241 FF80                  		andi.w	#$FF80,d1
0000B196 9041                       		sub.w	d1,d0
0000B198 0C40 0280                  		cmpi.w	#$280,d0
0000B19C 6300 0000                  		bls.w	DisplaySprite
0000B1A0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B1A4 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B1A8 3440                       		movea.w	d0,a2	; load address into a2
0000B1AA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B1AE 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B1B2                            
0000B1B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B1B2                            
0000B1B2                            
0000B1B2                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B1B2 5328 001E                  		subq.b	#1,$1E(a0)
0000B1B6 6A00                       		bpl.s	locret_9F76
0000B1B8 117C 0001 001E             		move.b	#1,$1E(a0)
0000B1BE 5228 001A                  		addq.b	#1,$1A(a0)
0000B1C2 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B1C8 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B1CA 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B1D0 6600                       		bne.s	locret_9F76	; if not, branch
0000B1D2 2268 003C                  		movea.l	$3C(a0),a1
0000B1D6 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B1DC 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B1E2 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B1E8 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B1EC 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B1F0                            
0000B1F0                            locret_9F76:
0000B1F0 4E75                       		rts	
0000B1F2                            ; ===========================================================================
0000B1F2                            
0000B1F2                            Obj7C_End:				; XREF: Obj7C_Collect
0000B1F2 5428 0024                  		addq.b	#2,$24(a0)
0000B1F6 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B1FC 588F                       		addq.l	#4,sp
0000B1FE 4E75                       		rts	
0000B200                            ; End of function Obj7C_Collect
0000B200                            
0000B200                            ; ===========================================================================
0000B200                            
0000B200                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B200 6000 0000                  		bra.w	DeleteObject
0000B204                            ; ===========================================================================
0000B204                            Ani_obj25:
0000B204                            	include "_anim\obj25.asm"
0000B204                            ; ---------------------------------------------------------------------------
0000B204                            ; Animation script - ring
0000B204                            ; ---------------------------------------------------------------------------
0000B204 0000                       		dc.w byte_9F8C-Ani_obj25
0000B206 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B20C                            		even
0000B20C                            		even
0000B20C                            
0000B20C                            ; ---------------------------------------------------------------------------
0000B20C                            ; Sprite mappings - rings
0000B20C                            ; ---------------------------------------------------------------------------
0000B20C                            Map_obj25:
0000B20C                            	include "_maps\obj25.asm"
0000B20C                            ; ---------------------------------------------------------------------------
0000B20C                            ; Sprite mappings - rings
0000B20C                            ; ---------------------------------------------------------------------------
0000B20C 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B210 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B214 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B218 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B21C 01                         byte_9FA2:	dc.b 1
0000B21D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B222 01                         byte_9FA8:	dc.b 1
0000B223 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B228 01                         byte_9FAE:	dc.b 1
0000B229 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B22E 01                         byte_9FB4:	dc.b 1
0000B22F F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B234 01                         byte_9FBA:	dc.b 1
0000B235 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B23A 01                         byte_9FC0:	dc.b 1
0000B23B F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B240 01                         byte_9FC6:	dc.b 1
0000B241 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B246 01                         byte_9FCC:	dc.b 1
0000B247 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B24C                            		even
0000B24C                            		even
0000B24C                            
0000B24C                            ; ---------------------------------------------------------------------------
0000B24C                            ; Sprite mappings - giant ring
0000B24C                            ; ---------------------------------------------------------------------------
0000B24C                            Map_obj4B:
0000B24C                            	include "_maps\obj4B.asm"
0000B24C                            ; ---------------------------------------------------------------------------
0000B24C                            ; Sprite mappings - giant ring
0000B24C                            ; ---------------------------------------------------------------------------
0000B24C 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B250 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B254 0A                         byte_9FDA:	dc.b $A
0000B255 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B25A E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000B25F E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000B264 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000B269 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000B26E F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000B273 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000B278 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000B27D 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000B282 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000B287 08                         byte_A00D:	dc.b 8
0000B288 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000B28D E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000B292 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000B297 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000B29C F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000B2A1 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000B2A6 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000B2AB 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000B2B0 04                         byte_A036:	dc.b 4
0000B2B1 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000B2B6 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000B2BB 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000B2C0 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000B2C5 08                         byte_A04B:	dc.b 8
0000B2C6 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000B2CB E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000B2D0 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000B2D5 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000B2DA F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B2DF 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B2E4 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B2E9 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B2EE                            		even
0000B2EE                            		even
0000B2EE                            
0000B2EE                            ; ---------------------------------------------------------------------------
0000B2EE                            ; Sprite mappings - flash effect when you collect the giant ring
0000B2EE                            ; ---------------------------------------------------------------------------
0000B2EE                            Map_obj7C:
0000B2EE                            	include "_maps\obj7C.asm"
0000B2EE                            ; ---------------------------------------------------------------------------
0000B2EE                            ; Sprite mappings - flash effect when you collect the giant ring
0000B2EE                            ; ---------------------------------------------------------------------------
0000B2EE 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B2F2 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B2F6 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B2FA 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B2FE 02                         byte_A084:	dc.b 2
0000B2FF E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B304 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B309 04                         byte_A08F:	dc.b 4
0000B30A E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B30F E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B314 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B319 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B31E 04                         byte_A0A4:	dc.b 4
0000B31F E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B324 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B329 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B32E 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B333 04                         byte_A0B9:	dc.b 4
0000B334 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B339 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B33E 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B343 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B348 04                         byte_A0CE:	dc.b 4
0000B349 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B34E E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B353 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B358 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B35D 04                         byte_A0E3:	dc.b 4
0000B35E E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B363 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B368 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B36D 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B372 02                         byte_A0F8:	dc.b 2
0000B373 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B378 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B37D 04                         byte_A103:	dc.b 4
0000B37E E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B383 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B388 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B38D 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B392                            		even
0000B392                            		even
0000B392                            
0000B392                            ; ===========================================================================
0000B392                            ; ---------------------------------------------------------------------------
0000B392                            ; Object 26 - monitors
0000B392                            ; ---------------------------------------------------------------------------
0000B392                            
0000B392                            Obj26:					; XREF: Obj_Index
0000B392 7000                       		moveq	#0,d0
0000B394 1028 0024                  		move.b	$24(a0),d0
0000B398 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B39C 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B3A0                            ; ===========================================================================
0000B3A0 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B3A2 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B3A4 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B3A6 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B3A8 0000                       		dc.w Obj26_Display-Obj26_Index
0000B3AA                            ; ===========================================================================
0000B3AA                            
0000B3AA                            Obj26_Main:				; XREF: Obj26_Index
0000B3AA 5428 0024                  		addq.b	#2,$24(a0)
0000B3AE 117C 000E 0016             		move.b	#$E,$16(a0)
0000B3B4 117C 000E 0017             		move.b	#$E,$17(a0)
0000B3BA 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B3C2 317C 0680 0002             		move.w	#$680,2(a0)
0000B3C8 117C 0004 0001             		move.b	#4,1(a0)
0000B3CE 117C 0003 0018             		move.b	#3,$18(a0)
0000B3D4 117C 000F 0019             		move.b	#$F,$19(a0)
0000B3DA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B3DE 3440                       		movea.w	d0,a2	; load address into a2
0000B3E0 0812 0000                  		btst	#0,(a2)	; has monitor been broken?
0000B3E4 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B3E6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B3EC 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B3F2 4E75                       		rts	
0000B3F4                            ; ===========================================================================
0000B3F4                            
0000B3F4                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B3F4 117C 0046 0020             		move.b	#$46,$20(a0)
0000B3FA 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B400                            
0000B400                            Obj26_Solid:				; XREF: Obj26_Index
0000B400 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B404 6700                       		beq.s	loc_A1EC	; if not, branch
0000B406 5500                       		subq.b	#2,d0
0000B408 6600                       		bne.s	Obj26_Fall
0000B40A 7200                       		moveq	#0,d1
0000B40C 1228 0019                  		move.b	$19(a0),d1
0000B410 0641 000B                  		addi.w	#$B,d1
0000B414 6100 D26E                  		bsr.w	ExitPlatform
0000B418 0829 0003 0022             		btst	#3,$22(a1)
0000B41E 6600 0000                  		bne.w	loc_A1BC
0000B422 4228 0025                  		clr.b	$25(a0)
0000B426 6000 0000                  		bra.w	Obj26_Animate
0000B42A                            ; ===========================================================================
0000B42A                            
0000B42A                            loc_A1BC:				; XREF: Obj26_Solid
0000B42A 363C 0010                  		move.w	#$10,d3
0000B42E 3428 0008                  		move.w	8(a0),d2
0000B432 6100 D7BA                  		bsr.w	MvSonicOnPtfm
0000B436 6000 0000                  		bra.w	Obj26_Animate
0000B43A                            ; ===========================================================================
0000B43A                            
0000B43A                            Obj26_Fall:				; XREF: Obj26_Solid
0000B43A 6100 0000                  		bsr.w	ObjectFall
0000B43E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B444 4A41                       		tst.w	d1
0000B446 6A00 0000                  		bpl.w	Obj26_Animate
0000B44A D368 000C                  		add.w	d1,$C(a0)
0000B44E 4268 0012                  		clr.w	$12(a0)
0000B452 4228 0025                  		clr.b	$25(a0)
0000B456 6000 0000                  		bra.w	Obj26_Animate
0000B45A                            ; ===========================================================================
0000B45A                            
0000B45A                            loc_A1EC:				; XREF: Obj26_Solid
0000B45A 323C 001A                  		move.w	#$1A,d1
0000B45E 343C 000F                  		move.w	#$F,d2
0000B462 6100 0000                  		bsr.w	Obj26_SolidSides
0000B466 6700 0000                  		beq.w	loc_A25C
0000B46A 4A69 0012                  		tst.w	$12(a1)
0000B46E 6B00                       		bmi.s	loc_A20A
0000B470 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B476 6700                       		beq.s	loc_A25C	; if yes, branch
0000B478                            
0000B478                            loc_A20A:
0000B478 4A41                       		tst.w	d1
0000B47A 6A00                       		bpl.s	loc_A220
0000B47C 9769 000C                  		sub.w	d3,$C(a1)
0000B480 6100 D0F0                  		bsr.w	loc_74AE
0000B484 117C 0002 0025             		move.b	#2,$25(a0)
0000B48A 6000 0000                  		bra.w	Obj26_Animate
0000B48E                            ; ===========================================================================
0000B48E                            
0000B48E                            loc_A220:
0000B48E 4A40                       		tst.w	d0
0000B490 6700 0000                  		beq.w	loc_A246
0000B494 6B00                       		bmi.s	loc_A230
0000B496 4A69 0010                  		tst.w	$10(a1)
0000B49A 6B00                       		bmi.s	loc_A246
0000B49C 6000                       		bra.s	loc_A236
0000B49E                            ; ===========================================================================
0000B49E                            
0000B49E                            loc_A230:
0000B49E 4A69 0010                  		tst.w	$10(a1)
0000B4A2 6A00                       		bpl.s	loc_A246
0000B4A4                            
0000B4A4                            loc_A236:
0000B4A4 9169 0008                  		sub.w	d0,8(a1)
0000B4A8 337C 0000 0020             		move.w	#0,$20(a1)
0000B4AE 337C 0000 0010             		move.w	#0,$10(a1)
0000B4B4                            
0000B4B4                            loc_A246:
0000B4B4 0829 0001 0022             		btst	#1,$22(a1)
0000B4BA 6600                       		bne.s	loc_A26A
0000B4BC 08E9 0005 0022             		bset	#5,$22(a1)
0000B4C2 08E8 0005 0022             		bset	#5,$22(a0)
0000B4C8 6000                       		bra.s	Obj26_Animate
0000B4CA                            ; ===========================================================================
0000B4CA                            
0000B4CA                            loc_A25C:
0000B4CA 0828 0005 0022             		btst	#5,$22(a0)
0000B4D0 6700                       		beq.s	Obj26_Animate
0000B4D2 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000B4D8 6700                       		beq.s	loc_A26A
0000B4DA 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000B4E0 6700                       		beq.s	loc_A26A
0000B4E2 337C 0001 001C             		move.w	#1,$1C(a1)
0000B4E8                            
0000B4E8                            loc_A26A:
0000B4E8 08A8 0005 0022             		bclr	#5,$22(a0)
0000B4EE 08A9 0005 0022             		bclr	#5,$22(a1)
0000B4F4                            
0000B4F4                            Obj26_Animate:				; XREF: Obj26_Index
0000B4F4 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000B4FA 6100 0000                  		bsr.w	AnimateSprite
0000B4FE                            
0000B4FE                            Obj26_Display:				; XREF: Obj26_Index
0000B4FE 6000 0000                  		bra.w	MarkObjGone
0000B502                            ; ===========================================================================
0000B502                            
0000B502                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000B502 5428 0024                  		addq.b	#2,$24(a0)
0000B506 117C 0000 0020             		move.b	#0,$20(a0)
0000B50C 6100 0000                  		bsr.w	SingleObjLoad
0000B510 6600                       		bne.s	Obj26_Explode
0000B512 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000B516 3368 0008 0008             		move.w	8(a0),8(a1)
0000B51C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B522 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000B528                            
0000B528                            Obj26_Explode:
0000B528 6100 0000                  		bsr.w	SingleObjLoad
0000B52C 6600                       		bne.s	Obj26_SetBroken
0000B52E 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000B532 5429 0024                  		addq.b	#2,$24(a1)
0000B536 3368 0008 0008             		move.w	8(a0),8(a1)
0000B53C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B542                            
0000B542                            Obj26_SetBroken:
0000B542 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B546 6700                       		beq.s	@notremembered			; If it's zero, it isn't remembered
0000B548 3440                       		movea.w	d0,a2	; load address into a2
0000B54A 08D2 0000                  		bset	#0,(a2)
0000B54E                            
0000B54E                            	@notremembered:
0000B54E 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000B554 6000 0000                  		bra.w	DisplaySprite
0000B558                            ; ===========================================================================
0000B558                            ; ---------------------------------------------------------------------------
0000B558                            ; Object 2E - contents of monitors
0000B558                            ; ---------------------------------------------------------------------------
0000B558                            
0000B558                            Obj2E:					; XREF: Obj_Index
0000B558 7000                       		moveq	#0,d0
0000B55A 1028 0024                  		move.b	$24(a0),d0
0000B55E 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000B562 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000B566 6000 0000                  		bra.w	DisplaySprite
0000B56A                            ; ===========================================================================
0000B56A 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000B56C 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000B56E 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000B570                            ; ===========================================================================
0000B570                            
0000B570                            Obj2E_Main:				; XREF: Obj2E_Index
0000B570 5428 0024                  		addq.b	#2,$24(a0)
0000B574 317C 0680 0002             		move.w	#$680,2(a0)
0000B57A 117C 0024 0001             		move.b	#$24,1(a0)
0000B580 117C 0003 0018             		move.b	#3,$18(a0)
0000B586 117C 0008 0019             		move.b	#8,$19(a0)
0000B58C 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B592 7000                       		moveq	#0,d0
0000B594 1028 001C                  		move.b	$1C(a0),d0
0000B598 5400                       		addq.b	#2,d0
0000B59A 1140 001A                  		move.b	d0,$1A(a0)
0000B59E 227C 0000 0000             		movea.l	#Map_obj26,a1
0000B5A4 D000                       		add.b	d0,d0
0000B5A6 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000B5AA 5249                       		addq.w	#1,a1
0000B5AC 2149 0004                  		move.l	a1,4(a0)
0000B5B0                            
0000B5B0                            Obj2E_Move:				; XREF: Obj2E_Index
0000B5B0 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B5B4 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000B5B8 6100 0000                  		bsr.w	SpeedToPos
0000B5BC 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B5C2 4E75                       		rts	
0000B5C4                            ; ===========================================================================
0000B5C4                            
0000B5C4                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000B5C4 5428 0024                  		addq.b	#2,$24(a0)
0000B5C8 317C 001D 001E             		move.w	#29,$1E(a0)
0000B5CE 1028 001C                  		move.b	$1C(a0),d0
0000B5D2 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000B5D6 6600                       		bne.s	Obj2E_ChkSonic
0000B5D8 4E75                       		rts			; Eggman monitor does nothing
0000B5DA                            ; ===========================================================================
0000B5DA                            
0000B5DA                            Obj2E_ChkSonic:
0000B5DA 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000B5DE 6600                       		bne.s	Obj2E_ChkShoes
0000B5E0                            
0000B5E0                            ExtraLife:
0000B5E0 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B5E6 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B5EC 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B5F0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B5F4 303C 0088                  		move.w	#$88,d0
0000B5F8 4EF9 0000 11F0             		jmp	(PlaySound).l	; play extra life music
0000B5FE                            ; ===========================================================================
0000B5FE                            
0000B5FE                            Obj2E_ChkShoes:
0000B5FE 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000B602 6600                       		bne.s	Obj2E_ChkShield
0000B604 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000B60A 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000B610 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000B616 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000B61C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000B622 303C 00E2                  		move.w	#$E2,d0
0000B626 4EF9 0000 11F0             		jmp	(PlaySound).l	; Speed	up the music
0000B62C                            ; ===========================================================================
0000B62C                            
0000B62C                            Obj2E_ChkShield:
0000B62C 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000B630 6600                       		bne.s	Obj2E_ChkInvinc
0000B632 4A38 FE2C                  		tst.b	($FFFFFE2C).w
0000B636 6600                       		bne.s	@alreadyshield
0000B638 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B63E 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B644 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000B64A 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000B650                            
0000B650                            	@alreadyshield:
0000B650 303C 00AF                  		move.w	#$AF,d0
0000B654 4EF9 0000 11F0             		jmp	(PlaySound).l	; play shield sound
0000B65A                            ; ===========================================================================
0000B65A                            
0000B65A                            Obj2E_ChkInvinc:
0000B65A 0C00 0005                  		cmpi.b #5,d0 ; does monitor contain invincibility?
0000B65E 6600 0000                  		bne.w Obj2E_ChkRings
0000B662 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B668 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B66E 11FC 0001 FE2D             		move.b #1,($FFFFFE2D).w ; Set Invisibility to 1
0000B674 31FC 04B0 D032             		move.w #$4B0,($FFFFD032).w ; Set Invisibility timer to 4B0
0000B67A 11FC 004A D200             		move.b #$4A,($FFFFD200).w ; load stars object ($3801)
0000B680 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000B686 4A38 F7AA                  		tst.b ($FFFFF7AA).w ; is boss mode on?
0000B68A 6600                       		bne.s DontPlayMusic ; If so, don't play music
0000B68C 0C78 000C FE14             		cmpi.w #$C,($FFFFFE14).w ; Check if Sonic has air left
0000B692 6300                       		bls.s DontPlayMusic ; If so, don't play music
0000B694 303C 0087                  		move.w #$87,d0 ; Load Invisibility music
0000B698 4EF9 0000 11F0             		jmp (PlaySound).l
0000B69E                            
0000B69E                            DontPlayMusic:
0000B69E 4E75                       		rts
0000B6A0                            ; ===========================================================================
0000B6A0                            
0000B6A0                            Obj2E_NoMusic:
0000B6A0 4E75                       		rts	
0000B6A2                            ; ===========================================================================
0000B6A2                            
0000B6A2                            Obj2E_ChkRings:
0000B6A2 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000B6A6 6600                       		bne.s	Obj2E_ChkS
0000B6A8 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000B6AE 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000B6B4 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000B6BA 6500                       		bcs.s	Obj2E_RingSound
0000B6BC 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000B6C2 6700 FF1C                  		beq.w	ExtraLife
0000B6C6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000B6CC 6500                       		bcs.s	Obj2E_RingSound
0000B6CE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000B6D4 6700 FF0A                  		beq.w	ExtraLife
0000B6D8                            
0000B6D8                            Obj2E_RingSound:
0000B6D8 303C 00B5                  		move.w	#$B5,d0
0000B6DC 4EF9 0000 11F0             		jmp	(PlaySound).l	; play ring sound
0000B6E2                            ; ===========================================================================
0000B6E2                            
0000B6E2                            Obj2E_ChkS:
0000B6E2 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000B6E6 6600                       		bne.s	Obj2E_ChkEnd
0000B6E8 4E71                       		nop	
0000B6EA                            
0000B6EA                            Obj2E_ChkEnd:
0000B6EA 4E75                       		rts			; 'S' and goggles monitors do nothing
0000B6EC                            ; ===========================================================================
0000B6EC                            
0000B6EC                            Obj2E_Delete:				; XREF: Obj2E_Index
0000B6EC 5368 001E                  		subq.w	#1,$1E(a0)
0000B6F0 6B00 0000                  		bmi.w	DeleteObject
0000B6F4 4E75                       		rts	
0000B6F6                            ; ---------------------------------------------------------------------------
0000B6F6                            ; Subroutine to	make the sides of a monitor solid
0000B6F6                            ; ---------------------------------------------------------------------------
0000B6F6                            
0000B6F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6F6                            
0000B6F6                            
0000B6F6                            Obj26_SolidSides:			; XREF: loc_A1EC
0000B6F6 43F8 D000                  		lea	($FFFFD000).w,a1
0000B6FA 3029 0008                  		move.w	8(a1),d0
0000B6FE 9068 0008                  		sub.w	8(a0),d0
0000B702 D041                       		add.w	d1,d0
0000B704 6B00                       		bmi.s	loc_A4E6
0000B706 3601                       		move.w	d1,d3
0000B708 D643                       		add.w	d3,d3
0000B70A B043                       		cmp.w	d3,d0
0000B70C 6200                       		bhi.s	loc_A4E6
0000B70E 1629 0016                  		move.b	$16(a1),d3
0000B712 4883                       		ext.w	d3
0000B714 D443                       		add.w	d3,d2
0000B716 3629 000C                  		move.w	$C(a1),d3
0000B71A 9668 000C                  		sub.w	$C(a0),d3
0000B71E D642                       		add.w	d2,d3
0000B720 6B00                       		bmi.s	loc_A4E6
0000B722 D442                       		add.w	d2,d2
0000B724 B642                       		cmp.w	d2,d3
0000B726 6400                       		bcc.s	loc_A4E6
0000B728 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B72C 6B00                       		bmi.s	loc_A4E6
0000B72E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B734 6400                       		bcc.s	loc_A4E6
0000B736 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B73A 6600                       		bne.s	loc_A4E6
0000B73C B240                       		cmp.w	d0,d1
0000B73E 6400                       		bcc.s	loc_A4DC
0000B740 D241                       		add.w	d1,d1
0000B742 9041                       		sub.w	d1,d0
0000B744                            
0000B744                            loc_A4DC:
0000B744 0C43 0010                  		cmpi.w	#$10,d3
0000B748 6500                       		bcs.s	loc_A4EA
0000B74A                            
0000B74A                            loc_A4E2:
0000B74A 7201                       		moveq	#1,d1
0000B74C 4E75                       		rts	
0000B74E                            ; ===========================================================================
0000B74E                            
0000B74E                            loc_A4E6:
0000B74E 7200                       		moveq	#0,d1
0000B750 4E75                       		rts	
0000B752                            ; ===========================================================================
0000B752                            
0000B752                            loc_A4EA:
0000B752 7200                       		moveq	#0,d1
0000B754 1228 0019                  		move.b	$19(a0),d1
0000B758 5841                       		addq.w	#4,d1
0000B75A 3401                       		move.w	d1,d2
0000B75C D442                       		add.w	d2,d2
0000B75E D269 0008                  		add.w	8(a1),d1
0000B762 9268 0008                  		sub.w	8(a0),d1
0000B766 6BE2                       		bmi.s	loc_A4E2
0000B768 B242                       		cmp.w	d2,d1
0000B76A 64DE                       		bcc.s	loc_A4E2
0000B76C 72FF                       		moveq	#-1,d1
0000B76E 4E75                       		rts	
0000B770                            ; End of function Obj26_SolidSides
0000B770                            
0000B770                            ; ===========================================================================
0000B770                            Ani_obj26:
0000B770                            	include "_anim\obj26.asm"
0000B770                            ; ---------------------------------------------------------------------------
0000B770                            ; Animation script - monitors
0000B770                            ; ---------------------------------------------------------------------------
0000B770 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B776 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B77C 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B782 0000                       		dc.w byte_A582-Ani_obj26
0000B784 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B78A 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B796 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B7A2 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B7AE 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B7BA 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B7C6 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B7D2 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B7DE 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B7EA 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B7F2                            		even
0000B7F2                            		even
0000B7F2                            
0000B7F2                            ; ---------------------------------------------------------------------------
0000B7F2                            ; Sprite mappings - monitors
0000B7F2                            ; ---------------------------------------------------------------------------
0000B7F2                            Map_obj26:
0000B7F2                            	include "_maps\obj26.asm"
0000B7F2                            ; --------------------------------------------------------------------------------
0000B7F2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B7F2                            ; --------------------------------------------------------------------------------
0000B7F2                            
0000B7F2                            SME_XK1AB:	
0000B7F2 0000 0000                  		dc.w SME_XK1AB_18-SME_XK1AB, SME_XK1AB_1E-SME_XK1AB	
0000B7F6 0000 0000                  		dc.w SME_XK1AB_29-SME_XK1AB, SME_XK1AB_34-SME_XK1AB	
0000B7FA 0000 0000                  		dc.w SME_XK1AB_35-SME_XK1AB, SME_XK1AB_40-SME_XK1AB	
0000B7FE 0000 0000                  		dc.w SME_XK1AB_4B-SME_XK1AB, SME_XK1AB_56-SME_XK1AB	
0000B802 0000 0000                  		dc.w SME_XK1AB_61-SME_XK1AB, SME_XK1AB_6C-SME_XK1AB	
0000B806 0000 0000                  		dc.w SME_XK1AB_6D-SME_XK1AB, SME_XK1AB_6E-SME_XK1AB	
0000B80A 01                         SME_XK1AB_18:	dc.b 1	
0000B80B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B810 02                         SME_XK1AB_1E:	dc.b 2	
0000B811 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000B816 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B81B 02                         SME_XK1AB_29:	dc.b 2	
0000B81C F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000B821 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B826 00                         SME_XK1AB_34:	dc.b 0	
0000B827 02                         SME_XK1AB_35:	dc.b 2	
0000B828 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000B82D EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B832 02                         SME_XK1AB_40:	dc.b 2	
0000B833 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000B838 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B83D 02                         SME_XK1AB_4B:	dc.b 2	
0000B83E F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000B843 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B848 02                         SME_XK1AB_56:	dc.b 2	
0000B849 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000B84E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B853 02                         SME_XK1AB_61:	dc.b 2	
0000B854 F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
0000B859 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B85E 00                         SME_XK1AB_6C:	dc.b 0	
0000B85F 00                         SME_XK1AB_6D:	dc.b 0	
0000B860 01                         SME_XK1AB_6E:	dc.b 1	
0000B861 FF0D 002C F0               		dc.b $FF, $D, 0, $2C, $F0	
0000B866                            		even
0000B866                            		even
0000B866                            
0000B866                            ; ===========================================================================
0000B866                            ; ---------------------------------------------------------------------------
0000B866                            ; Object 0E - Sonic on the title screen
0000B866                            ; ---------------------------------------------------------------------------
0000B866                            
0000B866                            Obj0E:					; XREF: Obj_Index
0000B866 7000                       		moveq	#0,d0
0000B868 1028 0024                  		move.b	$24(a0),d0
0000B86C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B870 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B874                            ; ===========================================================================
0000B874 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B876 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B878 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B87A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B87C                            ; ===========================================================================
0000B87C                            
0000B87C                            Obj0E_Main:				; XREF: Obj0E_Index
0000B87C 5428 0024                  		addq.b	#2,$24(a0)
0000B880 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B886 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B88C 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B894 317C 0300 0002             		move.w	#$300,2(a0)
0000B89A 117C 0001 0018             		move.b	#1,$18(a0)
0000B8A0 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B8A6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B8AC 6100 0000                  		bsr.w	AnimateSprite
0000B8B0                            
0000B8B0                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B8B0 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B8B4 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B8B6 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B8BA 6000 0000                  		bra.w	DisplaySprite
0000B8BE                            ; ===========================================================================
0000B8BE                            
0000B8BE                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B8BE 4E75                       		rts	
0000B8C0                            ; ===========================================================================
0000B8C0                            
0000B8C0                            Obj0E_Move:				; XREF: Obj0E_Index
0000B8C0 5168 000A                  		subq.w	#8,$A(a0)
0000B8C4 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B8CA 6600                       		bne.s	Obj0E_Display
0000B8CC 5428 0024                  		addq.b	#2,$24(a0)
0000B8D0                            
0000B8D0                            Obj0E_Display:
0000B8D0 6000 0000                  		bra.w	DisplaySprite
0000B8D4                            ; ===========================================================================
0000B8D4 4E75                       		rts	
0000B8D6                            ; ===========================================================================
0000B8D6                            
0000B8D6                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B8D6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B8DC 6100 0000                  		bsr.w	AnimateSprite
0000B8E0 6000 0000                  		bra.w	DisplaySprite
0000B8E4                            ; ===========================================================================
0000B8E4 4E75                       		rts	
0000B8E6                            ; ===========================================================================
0000B8E6                            ; ---------------------------------------------------------------------------
0000B8E6                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B8E6                            ; ---------------------------------------------------------------------------
0000B8E6                            
0000B8E6                            Obj0F:					; XREF: Obj_Index
0000B8E6 7000                       		moveq	#0,d0
0000B8E8 1028 0024                  		move.b	$24(a0),d0
0000B8EC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B8F0 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B8F4 6000 0000                  		bra.w	DisplaySprite
0000B8F8                            ; ===========================================================================
0000B8F8 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B8FA 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B8FC 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B8FE                            ; ===========================================================================
0000B8FE                            
0000B8FE                            Obj0F_Main:				; XREF: Obj0F_Index
0000B8FE 5428 0024                  		addq.b	#2,$24(a0)
0000B902 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B908 317C 0130 000A             		move.w	#$130,$A(a0)
0000B90E 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B916 317C 2200 0002             		move.w	#$2200,2(a0)
0000B91C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B922 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B924 5428 0024                  		addq.b	#2,$24(a0)
0000B928 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B92E 6600                       		bne.s	locret_A6F8	; if not, branch
0000B930 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B936 317C 0170 0008             		move.w	#$170,8(a0)
0000B93C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B942                            
0000B942                            locret_A6F8:				; XREF: Obj0F_Index
0000B942 4E75                       		rts	
0000B944                            ; ===========================================================================
0000B944                            
0000B944                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B944 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B94A 6000 0000                  		bra.w	AnimateSprite
0000B94E                            ; ===========================================================================
0000B94E                            Ani_obj0E:
0000B94E                            	include "_anim\obj0E.asm"
0000B94E                            ; ---------------------------------------------------------------------------
0000B94E                            ; Animation script - Sonic on the title screen
0000B94E                            ; ---------------------------------------------------------------------------
0000B94E 0000                       		dc.w byte_A706-Ani_obj0E
0000B950 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B95C                            		even
0000B95C                            		even
0000B95C                            
0000B95C                            Ani_obj0F:
0000B95C                            	include "_anim\obj0F.asm"
0000B95C                            ; ---------------------------------------------------------------------------
0000B95C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B95C                            ; ---------------------------------------------------------------------------
0000B95C 0000                       		dc.w byte_A714-Ani_obj0F
0000B95E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B962                            		even
0000B962                            		even
0000B962                            
0000B962                            ; ---------------------------------------------------------------------------
0000B962                            ; Subroutine to	animate	a sprite using an animation script
0000B962                            ; ---------------------------------------------------------------------------
0000B962                            
0000B962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B962                            
0000B962                            
0000B962                            AnimateSprite:
0000B962 7000                       		moveq	#0,d0
0000B964 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B968 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B96C 6700                       		beq.s	Anim_Run	; if not, branch
0000B96E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B972 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B978 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B97E                            
0000B97E                            Anim_Run:
0000B97E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B982 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B984 D040                       		add.w	d0,d0
0000B986 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B98A 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B98E 7200                       		moveq	#0,d1
0000B990 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B994 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B998 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B99A                            
0000B99A                            Anim_Next:
0000B99A 1200                       		move.b	d0,d1
0000B99C 0200 001F                  		andi.b	#$1F,d0
0000B9A0 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B9A4 1028 0022                  		move.b	$22(a0),d0
0000B9A8 E719                       		rol.b	#3,d1
0000B9AA B101                       		eor.b	d0,d1
0000B9AC 0201 0003                  		andi.b	#3,d1
0000B9B0 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B9B6 8328 0001                  		or.b	d1,1(a0)
0000B9BA 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B9BE                            
0000B9BE                            Anim_Wait:
0000B9BE 4E75                       		rts	
0000B9C0                            ; ===========================================================================
0000B9C0                            
0000B9C0                            Anim_End_FF:
0000B9C0 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B9C2 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B9C4 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B9CA 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B9CE 60CA                       		bra.s	Anim_Next
0000B9D0                            ; ===========================================================================
0000B9D0                            
0000B9D0                            Anim_End_FE:
0000B9D0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B9D2 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B9D4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B9D8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B9DC 9200                       		sub.b	d0,d1
0000B9DE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B9E2 60B6                       		bra.s	Anim_Next
0000B9E4                            ; ===========================================================================
0000B9E4                            
0000B9E4                            Anim_End_FD:
0000B9E4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B9E6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B9E8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B9EE                            
0000B9EE                            Anim_End_FC:
0000B9EE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B9F0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B9F2 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B9F6                            
0000B9F6                            Anim_End_FB:
0000B9F6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B9F8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B9FA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000BA00 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000BA04                            
0000BA04                            Anim_End_FA:
0000BA04 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000BA06 6600                       		bne.s	Anim_End	; if not, branch
0000BA08 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000BA0C                            
0000BA0C                            Anim_End:
0000BA0C 4E75                       		rts	
0000BA0E                            ; End of function AnimateSprite
0000BA0E                            
0000BA0E                            ; ===========================================================================
0000BA0E                            ; ---------------------------------------------------------------------------
0000BA0E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BA0E                            ; ---------------------------------------------------------------------------
0000BA0E                            Map_obj0F:
0000BA0E                            	include "_maps\obj0F.asm"
0000BA0E                            ; ---------------------------------------------------------------------------
0000BA0E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BA0E                            ; ---------------------------------------------------------------------------
0000BA0E 0000                       		dc.w byte_A7CD-Map_obj0F
0000BA10 0000                       		dc.w byte_A7CC-Map_obj0F
0000BA12 0000                       		dc.w byte_A7EB-Map_obj0F
0000BA14 0000                       		dc.w byte_A882-Map_obj0F
0000BA16 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000BA17 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000BA1C 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000BA21 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000BA26 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000BA2B 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000BA30 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000BA35 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000BA36 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA3B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA40 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA45 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA4A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA4F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA54 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA59 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA5E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA63 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA68 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA6D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA72 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA77 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA7C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA81 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA86 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA8B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA90 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA95 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA9A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BA9F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAA4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAA9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAAE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAB3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAB8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BABD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAC2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAC7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BACC 01                         byte_A882:	dc.b 1			; "TM"
0000BACD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000BAD2                            		even
0000BAD2                            		even
0000BAD2                            
0000BAD2                            ; ---------------------------------------------------------------------------
0000BAD2                            ; Sprite mappings - Sonic on the title screen
0000BAD2                            ; ---------------------------------------------------------------------------
0000BAD2                            Map_obj0E:
0000BAD2                            	include "_maps\obj0E.asm"
0000BAD2                            ; ---------------------------------------------------------------------------
0000BAD2                            ; Sprite mappings - Sonic on the title screen
0000BAD2                            ; ---------------------------------------------------------------------------
0000BAD2 0000                       		dc.w byte_A898-Map_obj0E
0000BAD4 0000                       		dc.w byte_A8CB-Map_obj0E
0000BAD6 0000                       		dc.w byte_A917-Map_obj0E
0000BAD8 0000                       		dc.w byte_A96D-Map_obj0E
0000BADA 0000                       		dc.w byte_A9AF-Map_obj0E
0000BADC 0000                       		dc.w byte_A9E7-Map_obj0E
0000BADE 0000                       		dc.w byte_AA47-Map_obj0E
0000BAE0 0000                       		dc.w byte_AAB1-Map_obj0E
0000BAE2 0A                         byte_A898:	dc.b $A
0000BAE3 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000BAE8 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000BAED 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000BAF2 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000BAF7 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000BAFC 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000BB01 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000BB06 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000BB0B 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000BB10 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000BB15 0F                         byte_A8CB:	dc.b $F
0000BB16 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000BB1B 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000BB20 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000BB25 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000BB2A 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000BB2F 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BB34 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BB39 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BB3E 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BB43 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BB48 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BB4D 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BB52 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BB57 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BB5C 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BB61 11                         byte_A917:	dc.b $11
0000BB62 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000BB67 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000BB6C 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000BB71 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000BB76 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000BB7B 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000BB80 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000BB85 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BB8A 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BB8F 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BB94 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BB99 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BB9E 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BBA3 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BBA8 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BBAD 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BBB2 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BBB7 0D                         byte_A96D:	dc.b $D
0000BBB8 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000BBBD 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000BBC2 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000BBC7 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000BBCC 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000BBD1 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000BBD6 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000BBDB 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000BBE0 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000BBE5 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000BBEA 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000BBEF 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000BBF4 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000BBF9 0B                         byte_A9AF:	dc.b $B
0000BBFA 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000BBFF 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000BC04 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000BC09 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000BC0E 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000BC13 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000BC18 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000BC1D 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000BC22 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000BC27 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000BC2C 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000BC31 13                         byte_A9E7:	dc.b $13
0000BC32 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BC37 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BC3C 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BC41 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BC46 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BC4B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BC50 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BC55 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BC5A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BC5F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BC64 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BC69 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BC6E 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BC73 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BC78 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BC7D 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BC82 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BC87 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BC8C 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BC91 15                         byte_AA47:	dc.b $15
0000BC92 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BC97 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BC9C 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BCA1 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BCA6 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BCAB 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BCB0 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BCB5 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BCBA 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BCBF 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BCC4 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BCC9 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BCCE 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BCD3 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BCD8 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BCDD 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BCE2 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BCE7 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BCEC 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BCF1 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BCF6 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BCFB 16                         byte_AAB1:	dc.b $16
0000BCFC 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000BD01 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000BD06 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000BD0B 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000BD10 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000BD15 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BD1A 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BD1F 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BD24 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BD29 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BD2E 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BD33 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BD38 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BD3D 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BD42 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BD47 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BD4C 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BD51 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BD56 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BD5B 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BD60 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BD65 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BD6A                            		even
0000BD6A                            		even
0000BD6A                            
0000BD6A                            ; ===========================================================================
0000BD6A                            ; ---------------------------------------------------------------------------
0000BD6A                            ; Object 2B - Chopper enemy (GHZ)
0000BD6A                            ; ---------------------------------------------------------------------------
0000BD6A                            
0000BD6A                            Obj2B:					; XREF: Obj_Index
0000BD6A 7000                       		moveq	#0,d0
0000BD6C 1028 0024                  		move.b	$24(a0),d0
0000BD70 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000BD74 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000BD78 6000 0000                  		bra.w	MarkObjGone
0000BD7C                            ; ===========================================================================
0000BD7C 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000BD7E 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000BD80                            ; ===========================================================================
0000BD80                            
0000BD80                            Obj2B_Main:				; XREF: Obj2B_Index
0000BD80 5428 0024                  		addq.b	#2,$24(a0)
0000BD84 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000BD8C 317C 047B 0002             		move.w	#$47B,2(a0)
0000BD92 117C 0004 0001             		move.b	#4,1(a0)
0000BD98 117C 0004 0018             		move.b	#4,$18(a0)
0000BD9E 117C 0009 0020             		move.b	#9,$20(a0)
0000BDA4 117C 0010 0019             		move.b	#$10,$19(a0)
0000BDAA 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BDB0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000BDB6                            
0000BDB6                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000BDB6 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000BDBC 6100 FBA4                  		bsr.w	AnimateSprite
0000BDC0 6100 0000                  		bsr.w	SpeedToPos
0000BDC4 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000BDCA 3028 0030                  		move.w	$30(a0),d0
0000BDCE B068 000C                  		cmp.w	$C(a0),d0
0000BDD2 6400                       		bcc.s	Obj2B_ChgAni
0000BDD4 3140 000C                  		move.w	d0,$C(a0)
0000BDD8 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BDDE                            
0000BDDE                            Obj2B_ChgAni:
0000BDDE 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000BDE4 0440 00C0                  		subi.w	#$C0,d0
0000BDE8 B068 000C                  		cmp.w	$C(a0),d0
0000BDEC 6400                       		bcc.s	locret_ABB6
0000BDEE 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000BDF4 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000BDF8 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000BDFA 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000BE00                            
0000BE00                            locret_ABB6:
0000BE00 4E75                       		rts	
0000BE02                            ; ===========================================================================
0000BE02                            Ani_obj2B:
0000BE02                            	include "_anim\obj2B.asm"
0000BE02                            ; ---------------------------------------------------------------------------
0000BE02                            ; Animation script - Chopper enemy
0000BE02                            ; ---------------------------------------------------------------------------
0000BE02 0000                       		dc.w byte_ABBE-Ani_obj2B
0000BE04 0000                       		dc.w byte_ABC2-Ani_obj2B
0000BE06 0000                       		dc.w byte_ABC6-Ani_obj2B
0000BE08 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000BE0C 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000BE10 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000BE14 00                         		even
0000BE14 00                         		even
0000BE14                            
0000BE14                            ; ---------------------------------------------------------------------------
0000BE14                            ; Sprite mappings - Chopper enemy (GHZ)
0000BE14                            ; ---------------------------------------------------------------------------
0000BE14                            Map_obj2B:
0000BE14                            	include "_maps\obj2B.asm"
0000BE14                            ; ---------------------------------------------------------------------------
0000BE14                            ; Sprite mappings - Chopper enemy (GHZ)
0000BE14                            ; ---------------------------------------------------------------------------
0000BE14 0000                       		dc.w byte_ABCE-Map_obj2B
0000BE16 0000                       		dc.w byte_ABD4-Map_obj2B
0000BE18 01                         byte_ABCE:	dc.b 1
0000BE19 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000BE1E 01                         byte_ABD4:	dc.b 1
0000BE1F F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000BE24                            		even
0000BE24                            		even
0000BE24                            
0000BE24                            ; ===========================================================================
0000BE24                            ; ---------------------------------------------------------------------------
0000BE24                            ; Object 2C - Jaws enemy (LZ)
0000BE24                            ; ---------------------------------------------------------------------------
0000BE24                            
0000BE24                            Obj2C:					; XREF: Obj_Index
0000BE24 7000                       		moveq	#0,d0
0000BE26 1028 0024                  		move.b	$24(a0),d0
0000BE2A 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000BE2E 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000BE32                            ; ===========================================================================
0000BE32 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000BE34 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000BE36                            ; ===========================================================================
0000BE36                            
0000BE36                            Obj2C_Main:				; XREF: Obj2C_Index
0000BE36 5428 0024                  		addq.b	#2,$24(a0)
0000BE3A 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000BE42 317C 2486 0002             		move.w	#$2486,2(a0)
0000BE48 0028 0004 0001             		ori.b	#4,1(a0)
0000BE4E 117C 000A 0020             		move.b	#$A,$20(a0)
0000BE54 117C 0004 0018             		move.b	#4,$18(a0)
0000BE5A 117C 0010 0019             		move.b	#$10,$19(a0)
0000BE60 7000                       		moveq	#0,d0
0000BE62 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000BE66 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000BE68 5340                       		subq.w	#1,d0
0000BE6A 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000BE6E 3140 0032                  		move.w	d0,$32(a0)
0000BE72 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000BE78 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000BE7E 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000BE80 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000BE84                            
0000BE84                            Obj2C_Turn:				; XREF: Obj2C_Index
0000BE84 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000BE88 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000BE8A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000BE90 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000BE94 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000BE9A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BEA0                            
0000BEA0                            Obj2C_Animate:
0000BEA0 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000BEA6 6100 FABA                  		bsr.w	AnimateSprite
0000BEAA 6100 0000                  		bsr.w	SpeedToPos
0000BEAE 6000 0000                  		bra.w	MarkObjGone
0000BEB2                            ; ===========================================================================
0000BEB2                            Ani_obj2C:
0000BEB2                            	include "_anim\obj2C.asm"
0000BEB2                            ; ---------------------------------------------------------------------------
0000BEB2                            ; Animation script - Jaws enemy
0000BEB2                            ; ---------------------------------------------------------------------------
0000BEB2 0000                       		dc.w byte_AC6A-Ani_obj2C
0000BEB4 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000BEBA                            		even
0000BEBA                            		even
0000BEBA                            
0000BEBA                            ; ---------------------------------------------------------------------------
0000BEBA                            ; Sprite mappings - Jaws enemy (LZ)
0000BEBA                            ; ---------------------------------------------------------------------------
0000BEBA                            Map_obj2C:
0000BEBA                            	include "_maps\obj2C.asm"
0000BEBA                            mapjaws:
0000BEBA 0000                       mapjaws_0: 	dc.w mapjaws_8-mapjaws
0000BEBC 0000                       mapjaws_2: 	dc.w mapjaws_13-mapjaws
0000BEBE 0000                       mapjaws_4: 	dc.w mapjaws_1E-mapjaws
0000BEC0 0000                       mapjaws_6: 	dc.w mapjaws_29-mapjaws
0000BEC2 02                         mapjaws_8: 	dc.b $2
0000BEC3 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000BEC8 F505 4018 10               	dc.b $F5, $5, $40, $18, $10
0000BECD 02                         mapjaws_13: 	dc.b $2
0000BECE F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000BED3 F505 401C 10               	dc.b $F5, $5, $40, $1C, $10
0000BED8 02                         mapjaws_1E: 	dc.b $2
0000BED9 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000BEDE F505 5018 10               	dc.b $F5, $5, $50, $18, $10
0000BEE3 02                         mapjaws_29: 	dc.b $2
0000BEE4 F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000BEE9 F505 501C 10               	dc.b $F5, $5, $50, $1C, $10
0000BEEE                            	even
0000BEEE                            	even
0000BEEE                            
0000BEEE                            ; ===========================================================================
0000BEEE                            ; ---------------------------------------------------------------------------
0000BEEE                            ; Object 2D - Burrobot enemy (LZ)
0000BEEE                            ; ---------------------------------------------------------------------------
0000BEEE                            
0000BEEE                            Obj2D:					; XREF: Obj_Index
0000BEEE 7000                       		moveq	#0,d0
0000BEF0 1028 0024                  		move.b	$24(a0),d0
0000BEF4 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000BEF8 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000BEFC                            ; ===========================================================================
0000BEFC 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000BEFE 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000BF00                            ; ===========================================================================
0000BF00                            
0000BF00                            Obj2D_Main:				; XREF: Obj2D_Index
0000BF00 5428 0024                  		addq.b	#2,$24(a0)
0000BF04 117C 0013 0016             		move.b	#$13,$16(a0)
0000BF0A 117C 0008 0017             		move.b	#8,$17(a0)
0000BF10 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000BF18 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000BF1E 0028 0004 0001             		ori.b	#4,1(a0)
0000BF24 117C 0004 0018             		move.b	#4,$18(a0)
0000BF2A 117C 0005 0020             		move.b	#5,$20(a0)
0000BF30 117C 000C 0019             		move.b	#$C,$19(a0)
0000BF36 5028 0025                  		addq.b	#8,$25(a0)	; run "Obj2D_ChkSonic" routine
0000BF3A 117C 0004 001C             		move.b	#4,$1C(a0)
0000BF40                            
0000BF40                            Obj2D_Action:				; XREF: Obj2D_Index
0000BF40 7000                       		moveq	#0,d0
0000BF42 1028 0025                  		move.b	$25(a0),d0
0000BF46 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000BF4A 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000BF4E 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000BF54 6100 FA0C                  		bsr.w	AnimateSprite
0000BF58 6000 0000                  		bra.w	MarkObjGone
0000BF5C                            ; ===========================================================================
0000BF5C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000BF5E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000BF60 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000BF62 0000                       		dc.w Obj2D_Jump2-Obj2D_Index2
0000BF64 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000BF66                            ; ===========================================================================
0000BF66                            
0000BF66                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000BF66 5368 0030                  		subq.w	#1,$30(a0)
0000BF6A 6A00                       		bpl.s	locret_AD42
0000BF6C 5428 0025                  		addq.b	#2,$25(a0)
0000BF70 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BF76 317C 0080 0010             		move.w	#$80,$10(a0)
0000BF7C 117C 0001 001C             		move.b	#1,$1C(a0)
0000BF82 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000BF88 6700                       		beq.s	locret_AD42
0000BF8A 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000BF8E                            
0000BF8E                            locret_AD42:
0000BF8E 4E75                       		rts	
0000BF90                            ; ===========================================================================
0000BF90                            
0000BF90                            Obj2D_Move:				; XREF: Obj2D_Index2
0000BF90 5368 0030                  		subq.w	#1,$30(a0)
0000BF94 6B00                       		bmi.s	loc_AD84
0000BF96 6100 0000                  		bsr.w	SpeedToPos
0000BF9A 0868 0000 0032             		bchg	#0,$32(a0)
0000BFA0 6600                       		bne.s	loc_AD78
0000BFA2 3628 0008                  		move.w	8(a0),d3
0000BFA6 0643 000C                  		addi.w	#$C,d3
0000BFAA 0828 0000 0022             		btst	#0,$22(a0)
0000BFB0 6600                       		bne.s	loc_AD6A
0000BFB2 0443 0018                  		subi.w	#$18,d3
0000BFB6                            
0000BFB6                            loc_AD6A:
0000BFB6 4EB9 0000 0000             		jsr	ObjHitFloor2
0000BFBC 0C41 000C                  		cmpi.w	#$C,d1
0000BFC0 6C00                       		bge.s	loc_AD84
0000BFC2 4E75                       		rts	
0000BFC4                            ; ===========================================================================
0000BFC4                            
0000BFC4                            loc_AD78:				; XREF: Obj2D_Move
0000BFC4 4EB9 0000 0000             		jsr	ObjHitFloor
0000BFCA D368 000C                  		add.w	d1,$C(a0)
0000BFCE 4E75                       		rts	
0000BFD0                            ; ===========================================================================
0000BFD0                            
0000BFD0                            loc_AD84:				; XREF: Obj2D_Move
0000BFD0 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000BFD6 6700                       		beq.s	loc_ADA4
0000BFD8 5528 0025                  		subq.b	#2,$25(a0)
0000BFDC 317C 003B 0030             		move.w	#$3B,$30(a0)
0000BFE2 317C 0000 0010             		move.w	#0,$10(a0)
0000BFE8 117C 0000 001C             		move.b	#0,$1C(a0)
0000BFEE 4E75                       		rts	
0000BFF0                            ; ===========================================================================
0000BFF0                            
0000BFF0                            loc_ADA4:
0000BFF0 5428 0025                  		addq.b	#2,$25(a0)
0000BFF4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BFFA 117C 0002 001C             		move.b	#2,$1C(a0)
0000C000 4E75                       		rts	
0000C002                            ; ===========================================================================
0000C002                            
0000C002                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000C002 6100 0000                  		bsr.w	SpeedToPos
0000C006 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C00C 6B00                       		bmi.s	locret_ADF0
0000C00E 117C 0003 001C             		move.b	#3,$1C(a0)
0000C014 4EB9 0000 0000             		jsr	ObjHitFloor
0000C01A 4A41                       		tst.w	d1
0000C01C 6A00                       		bpl.s	locret_ADF0
0000C01E D368 000C                  		add.w	d1,$C(a0)
0000C022 317C 0000 0012             		move.w	#0,$12(a0)
0000C028 117C 0001 001C             		move.b	#1,$1C(a0)
0000C02E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C034 5528 0025                  		subq.b	#2,$25(a0)
0000C038 6000 0000                  		bra.w	Obj2D_ChkSonic2
0000C03C                            ; ===========================================================================
0000C03C                            
0000C03C                            Obj2D_Jump2:				; XREF: Obj2D_Index2
0000C03C 6100 0000                  		bsr.w	SpeedToPos
0000C040 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C046 5368 0030                  		subq.w	#1,$30(a0)
0000C04A 6A00                       		bpl.s	locret_ADF0
0000C04C 117C 0002 001C             		move.b	#2,$1C(a0)
0000C052 5528 0025                  		subq.b	#2,$25(a0)
0000C056                            
0000C056                            locret_ADF0:
0000C056 4E75                       		rts	
0000C058                            ; ===========================================================================
0000C058                            
0000C058                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000C058 343C 0060                  		move.w	#$60,d2
0000C05C 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C060 6400                       		bcc.s	locret_AE20
0000C062 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000C066 9068 000C                  		sub.w	$C(a0),d0
0000C06A 6400                       		bcc.s	locret_AE20
0000C06C 0C40 FF80                  		cmpi.w	#-$80,d0
0000C070 6500                       		bcs.s	locret_AE20
0000C072 4A78 FE08                  		tst.w	($FFFFFE08).w
0000C076 6600                       		bne.s	locret_AE20
0000C078 5528 0025                  		subq.b	#2,$25(a0)
0000C07C 317C 0004 0030             		move.w	#4,$30(a0)
0000C082 3141 0010                  		move.w	d1,$10(a0)
0000C086 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C08C                            
0000C08C                            locret_AE20:
0000C08C 4E75                       		rts	
0000C08E                            
0000C08E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C08E                            
0000C08E                            
0000C08E                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000C08E 323C 0080                  		move.w	#$80,d1
0000C092 08E8 0000 0022             		bset	#0,$22(a0)
0000C098 3038 D008                  		move.w	($FFFFD008).w,d0
0000C09C 9068 0008                  		sub.w	8(a0),d0
0000C0A0 6400                       		bcc.s	loc_AE40
0000C0A2 4440                       		neg.w	d0
0000C0A4 4441                       		neg.w	d1
0000C0A6 08A8 0000 0022             		bclr	#0,$22(a0)
0000C0AC                            
0000C0AC                            loc_AE40:
0000C0AC B042                       		cmp.w	d2,d0
0000C0AE 4E75                       		rts	
0000C0B0                            ; End of function Obj2D_ChkSonic2
0000C0B0                            
0000C0B0                            ; ===========================================================================
0000C0B0                            Ani_obj2D:
0000C0B0                            	include "_anim\obj2D.asm"
0000C0B0                            ; ---------------------------------------------------------------------------
0000C0B0                            ; Animation script - Burrobot enemy
0000C0B0                            ; ---------------------------------------------------------------------------
0000C0B0 0000                       		dc.w byte_AE4C-Ani_obj2D
0000C0B2 0000                       		dc.w byte_AE50-Ani_obj2D
0000C0B4 0000                       		dc.w byte_AE54-Ani_obj2D
0000C0B6 0000                       		dc.w byte_AE58-Ani_obj2D
0000C0B8 0000                       		dc.w byte_AE542-Ani_obj2D
0000C0BA 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000C0BE 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000C0C2 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000C0C6 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000C0C9 0307 08FF                  byte_AE542:	dc.b 3,	7, 8, $FF
0000C0CE 00                         		even
0000C0CE 00                         		even
0000C0CE                            
0000C0CE                            ; ---------------------------------------------------------------------------
0000C0CE                            ; Sprite mappings - Burrobot enemy (LZ)
0000C0CE                            ; ---------------------------------------------------------------------------
0000C0CE                            Map_obj2D:
0000C0CE                            	include "_maps\obj2D.asm"
0000C0CE                            burromap:
0000C0CE 0000                       burromap_0: 	dc.w burromap_12-burromap
0000C0D0 0000                       burromap_2: 	dc.w burromap_1D-burromap
0000C0D2 0000                       burromap_4: 	dc.w burromap_28-burromap
0000C0D4 0000                       burromap_6: 	dc.w burromap_33-burromap
0000C0D6 0000                       burromap_8: 	dc.w burromap_3E-burromap
0000C0D8 0000                       burromap_A: 	dc.w burromap_49-burromap
0000C0DA 0000                       burromap_C: 	dc.w burromap_54-burromap
0000C0DC 0000                       burromap_E: 	dc.w burromap_5F-burromap
0000C0DE 0000                       burromap_10: 	dc.w burromap_65-burromap
0000C0E0 02                         burromap_12: 	dc.b $2
0000C0E1 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0000C0E6 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C0EB 02                         burromap_1D: 	dc.b $2
0000C0EC EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C0F1 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
0000C0F6 02                         burromap_28: 	dc.b $2
0000C0F7 E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C0FC 000A 0027 F4               	dc.b $0, $A, $0, $27, $F4
0000C101 02                         burromap_33: 	dc.b $2
0000C102 E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C107 000A 0039 F4               	dc.b $0, $A, $0, $39, $F4
0000C10C 02                         burromap_3E: 	dc.b $2
0000C10D E80A 000F F0               	dc.b $E8, $A, $0, $F, $F0
0000C112 000A 0042 F4               	dc.b $0, $A, $0, $42, $F4
0000C117 02                         burromap_49: 	dc.b $2
0000C118 F406 004B E8               	dc.b $F4, $6, $0, $4B, $E8
0000C11D F40A 0051 F8               	dc.b $F4, $A, $0, $51, $F8
0000C122 02                         burromap_54: 	dc.b $2
0000C123 EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C128 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C12D 01                         burromap_5F: 	dc.b $1
0000C12E E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C133 01                         burromap_65: 	dc.b $1
0000C134 E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C13A 00                         	even
0000C13A 00                         	even
0000C13A                            
0000C13A                            ; ===========================================================================
0000C13A                            ; ---------------------------------------------------------------------------
0000C13A                            ; Object 2F - large moving platforms (MZ)
0000C13A                            ; ---------------------------------------------------------------------------
0000C13A                            
0000C13A                            Obj2F:					; XREF: Obj_Index
0000C13A 7000                       		moveq	#0,d0
0000C13C 1028 0024                  		move.b	$24(a0),d0
0000C140 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C144 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C148                            ; ===========================================================================
0000C148 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C14A 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C14C                            
0000C14C 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C14E 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C150 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C152 0140                       		dc.b 1,	$40
0000C154 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C156 0220                       		dc.b 2,	$20
0000C158                            ; ===========================================================================
0000C158                            
0000C158                            Obj2F_Main:				; XREF: Obj2F_Index
0000C158 5428 0024                  		addq.b	#2,$24(a0)
0000C15C 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C164 317C C000 0002             		move.w	#$C000,2(a0)
0000C16A 117C 0004 0001             		move.b	#4,1(a0)
0000C170 117C 0005 0018             		move.b	#5,$18(a0)
0000C176 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C17C 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C182 7000                       		moveq	#0,d0
0000C184 1028 0028                  		move.b	$28(a0),d0
0000C188 E448                       		lsr.w	#2,d0
0000C18A 0240 001C                  		andi.w	#$1C,d0
0000C18E 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C192 3019                       		move.w	(a1)+,d0
0000C194 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C198 214A 0030                  		move.l	a2,$30(a0)
0000C19C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C1A0 1151 0019                  		move.b	(a1),$19(a0)
0000C1A4 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C1AA 117C 0040 0016             		move.b	#$40,$16(a0)
0000C1B0 08E8 0004 0001             		bset	#4,1(a0)
0000C1B6                            
0000C1B6                            Obj2F_Action:				; XREF: Obj2F_Index
0000C1B6 6100 0000                  		bsr.w	Obj2F_Types
0000C1BA 4A28 0025                  		tst.b	$25(a0)
0000C1BE 6700                       		beq.s	Obj2F_Solid
0000C1C0 7200                       		moveq	#0,d1
0000C1C2 1228 0019                  		move.b	$19(a0),d1
0000C1C6 0641 000B                  		addi.w	#$B,d1
0000C1CA 6100 C4B8                  		bsr.w	ExitPlatform
0000C1CE 0829 0003 0022             		btst	#3,$22(a1)
0000C1D4 6600 0000                  		bne.w	Obj2F_Slope
0000C1D8 4228 0025                  		clr.b	$25(a0)
0000C1DC 6000                       		bra.s	Obj2F_Display
0000C1DE                            ; ===========================================================================
0000C1DE                            
0000C1DE                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C1DE 7200                       		moveq	#0,d1
0000C1E0 1228 0019                  		move.b	$19(a0),d1
0000C1E4 0641 000B                  		addi.w	#$B,d1
0000C1E8 2468 0030                  		movea.l	$30(a0),a2
0000C1EC 3428 0008                  		move.w	8(a0),d2
0000C1F0 6100 D468                  		bsr.w	SlopeObject2
0000C1F4 6000                       		bra.s	Obj2F_Display
0000C1F6                            ; ===========================================================================
0000C1F6                            
0000C1F6                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C1F6 7200                       		moveq	#0,d1
0000C1F8 1228 0019                  		move.b	$19(a0),d1
0000C1FC 0641 000B                  		addi.w	#$B,d1
0000C200 343C 0020                  		move.w	#$20,d2
0000C204 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C20A 6600                       		bne.s	loc_AF8E
0000C20C 343C 0030                  		move.w	#$30,d2
0000C210                            
0000C210                            loc_AF8E:
0000C210 2468 0030                  		movea.l	$30(a0),a2
0000C214 6100 0000                  		bsr.w	SolidObject2F
0000C218                            
0000C218                            Obj2F_Display:				; XREF: Obj2F_Action
0000C218 6100 0000                  		bsr.w	DisplaySprite
0000C21C 6000 0000                  		bra.w	Obj2F_ChkDel
0000C220                            
0000C220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C220                            
0000C220                            
0000C220                            Obj2F_Types:				; XREF: Obj2F_Action
0000C220 7000                       		moveq	#0,d0
0000C222 1028 0028                  		move.b	$28(a0),d0
0000C226 0240 0007                  		andi.w	#7,d0
0000C22A D040                       		add.w	d0,d0
0000C22C 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C230 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C234                            ; End of function Obj2F_Types
0000C234                            
0000C234                            ; ===========================================================================
0000C234 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C236 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C238 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C23A 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C23C 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C23E 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C240                            ; ===========================================================================
0000C240                            
0000C240                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C240 4E75                       		rts			; type 00 platform doesn't move
0000C242                            ; ===========================================================================
0000C242                            
0000C242                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C242 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C246 323C 0020                  		move.w	#$20,d1
0000C24A 6000                       		bra.s	Obj2F_Move
0000C24C                            ; ===========================================================================
0000C24C                            
0000C24C                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C24C 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C250 323C 0030                  		move.w	#$30,d1
0000C254 6000                       		bra.s	Obj2F_Move
0000C256                            ; ===========================================================================
0000C256                            
0000C256                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C256 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C25A 323C 0040                  		move.w	#$40,d1
0000C25E 6000                       		bra.s	Obj2F_Move
0000C260                            ; ===========================================================================
0000C260                            
0000C260                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C260 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C264 323C 0060                  		move.w	#$60,d1
0000C268                            
0000C268                            Obj2F_Move:
0000C268 0828 0003 0028             		btst	#3,$28(a0)
0000C26E 6700                       		beq.s	loc_AFF2
0000C270 4440                       		neg.w	d0
0000C272 D041                       		add.w	d1,d0
0000C274                            
0000C274                            loc_AFF2:
0000C274 3228 002C                  		move.w	$2C(a0),d1
0000C278 9240                       		sub.w	d0,d1
0000C27A 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C27E 4E75                       		rts	
0000C280                            ; ===========================================================================
0000C280                            
0000C280                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C280 1028 0034                  		move.b	$34(a0),d0
0000C284 4A28 0025                  		tst.b	$25(a0)
0000C288 6600                       		bne.s	loc_B010
0000C28A 5500                       		subq.b	#2,d0
0000C28C 6400                       		bcc.s	loc_B01C
0000C28E 7000                       		moveq	#0,d0
0000C290 6000                       		bra.s	loc_B01C
0000C292                            ; ===========================================================================
0000C292                            
0000C292                            loc_B010:
0000C292 5800                       		addq.b	#4,d0
0000C294 0C00 0040                  		cmpi.b	#$40,d0
0000C298 6500                       		bcs.s	loc_B01C
0000C29A 103C 0040                  		move.b	#$40,d0
0000C29E                            
0000C29E                            loc_B01C:
0000C29E 1140 0034                  		move.b	d0,$34(a0)
0000C2A2 4EB9 0000 29CC             		jsr	(CalcSine).l
0000C2A8 E848                       		lsr.w	#4,d0
0000C2AA 3200                       		move.w	d0,d1
0000C2AC D068 002C                  		add.w	$2C(a0),d0
0000C2B0 3140 000C                  		move.w	d0,$C(a0)
0000C2B4 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C2BA 6600                       		bne.s	loc_B07A
0000C2BC 4A28 0035                  		tst.b	$35(a0)
0000C2C0 6600                       		bne.s	loc_B07A
0000C2C2 117C 0001 0035             		move.b	#1,$35(a0)
0000C2C8 6100 0000                  		bsr.w	SingleObjLoad2
0000C2CC 6600                       		bne.s	loc_B07A
0000C2CE 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000C2D2 3368 0008 0008             		move.w	8(a0),8(a1)
0000C2D8 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C2DE 5069 002C                  		addq.w	#8,$2C(a1)
0000C2E2 5769 002C                  		subq.w	#3,$2C(a1)
0000C2E6 0469 0040 0008             		subi.w	#$40,8(a1)
0000C2EC 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C2F2 2348 0038                  		move.l	a0,$38(a1)
0000C2F6 2448                       		movea.l	a0,a2
0000C2F8 6100                       		bsr.s	sub_B09C
0000C2FA                            
0000C2FA                            loc_B07A:
0000C2FA 7400                       		moveq	#0,d2
0000C2FC 45E8 0036                  		lea	$36(a0),a2
0000C300 141A                       		move.b	(a2)+,d2
0000C302 5302                       		subq.b	#1,d2
0000C304 6500                       		bcs.s	locret_B09A
0000C306                            
0000C306                            loc_B086:
0000C306 7000                       		moveq	#0,d0
0000C308 101A                       		move.b	(a2)+,d0
0000C30A ED48                       		lsl.w	#6,d0
0000C30C 0640 D000                  		addi.w	#-$3000,d0
0000C310 3240                       		movea.w	d0,a1
0000C312 3341 003C                  		move.w	d1,$3C(a1)
0000C316 51CA FFEE                  		dbf	d2,loc_B086
0000C31A                            
0000C31A                            locret_B09A:
0000C31A 4E75                       		rts	
0000C31C                            
0000C31C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C31C                            
0000C31C                            
0000C31C                            sub_B09C:
0000C31C 45EA 0036                  		lea	$36(a2),a2
0000C320 7000                       		moveq	#0,d0
0000C322 1012                       		move.b	(a2),d0
0000C324 5212                       		addq.b	#1,(a2)
0000C326 45F2 0001                  		lea	1(a2,d0.w),a2
0000C32A 3009                       		move.w	a1,d0
0000C32C 0440 D000                  		subi.w	#-$3000,d0
0000C330 EC48                       		lsr.w	#6,d0
0000C332 0240 007F                  		andi.w	#$7F,d0
0000C336 1480                       		move.b	d0,(a2)
0000C338 4E75                       		rts	
0000C33A                            ; End of function sub_B09C
0000C33A                            
0000C33A                            ; ===========================================================================
0000C33A                            
0000C33A                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C33A 4A28 0035                  		tst.b	$35(a0)
0000C33E 6700                       		beq.s	loc_B0C6
0000C340 4A28 0001                  		tst.b	1(a0)
0000C344 6A00                       		bpl.s	Obj2F_DelFlames
0000C346                            
0000C346                            loc_B0C6:
0000C346 3028 002A                  		move.w	$2A(a0),d0
0000C34A 0240 FF80                  		andi.w	#$FF80,d0
0000C34E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C352 0441 0080                  		subi.w	#$80,d1
0000C356 0241 FF80                  		andi.w	#$FF80,d1
0000C35A 9041                       		sub.w	d1,d0
0000C35C 0C40 0280                  		cmpi.w	#$280,d0
0000C360 6300                       		bls.s	Obj2F_NoDel
0000C362 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C366 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000C36A 3440                       		movea.w	d0,a2	; load address into a2
0000C36C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C370 6000 0000                  		bra.w	DeleteObject	; and delete object
0000C374                            
0000C374                            Obj2F_NoDel:
0000C374 4E75                       		rts	
0000C376                            ; ===========================================================================
0000C376                            
0000C376                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C376 7400                       		moveq	#0,d2
0000C378                            
0000C378                            loc_B0E8:
0000C378 45E8 0036                  		lea	$36(a0),a2
0000C37C 1412                       		move.b	(a2),d2
0000C37E 421A                       		clr.b	(a2)+
0000C380 5302                       		subq.b	#1,d2
0000C382 6500                       		bcs.s	locret_B116
0000C384                            
0000C384                            loc_B0F4:
0000C384 7000                       		moveq	#0,d0
0000C386 1012                       		move.b	(a2),d0
0000C388 421A                       		clr.b	(a2)+
0000C38A ED48                       		lsl.w	#6,d0
0000C38C 0640 D000                  		addi.w	#-$3000,d0
0000C390 3240                       		movea.w	d0,a1
0000C392 6100 0000                  		bsr.w	DeleteObject2
0000C396 51CA FFEC                  		dbf	d2,loc_B0F4
0000C39A 117C 0000 0035             		move.b	#0,$35(a0)
0000C3A0 117C 0000 0034             		move.b	#0,$34(a0)
0000C3A6                            
0000C3A6                            locret_B116:
0000C3A6 4E75                       		rts	
0000C3A8                            ; ===========================================================================
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8                            ; Collision data for large moving platforms (MZ)
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C3F4                            		even
0000C3F4                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C420                            		even
0000C420                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C46C                            		even
0000C46C                            ; ===========================================================================
0000C46C                            ; ---------------------------------------------------------------------------
0000C46C                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C46C                            ; (appears when	you walk on sinking platforms)
0000C46C                            ; ---------------------------------------------------------------------------
0000C46C                            
0000C46C                            Obj35:					; XREF: Obj_Index
0000C46C 7000                       		moveq	#0,d0
0000C46E 1028 0024                  		move.b	$24(a0),d0
0000C472 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C476 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C47A                            ; ===========================================================================
0000C47A 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C47C 0000                       		dc.w loc_B238-Obj35_Index
0000C47E 0000                       		dc.w Obj35_Move-Obj35_Index
0000C480                            ; ===========================================================================
0000C480                            
0000C480                            Obj35_Main:				; XREF: Obj35_Index
0000C480 5428 0024                  		addq.b	#2,$24(a0)
0000C484 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C48C 317C 0345 0002             		move.w	#$345,2(a0)
0000C492 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C498 117C 0004 0001             		move.b	#4,1(a0)
0000C49E 117C 0001 0018             		move.b	#1,$18(a0)
0000C4A4 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C4AA 117C 0008 0019             		move.b	#8,$19(a0)
0000C4B0 303C 00C8                  		move.w	#$C8,d0
0000C4B4 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flame sound
0000C4BA 4A28 0028                  		tst.b	$28(a0)
0000C4BE 6700                       		beq.s	loc_B238
0000C4C0 5428 0024                  		addq.b	#2,$24(a0)
0000C4C4 6000 0000                  		bra.w	Obj35_Move
0000C4C8                            ; ===========================================================================
0000C4C8                            
0000C4C8                            loc_B238:				; XREF: Obj35_Index
0000C4C8 2268 0030                  		movea.l	$30(a0),a1
0000C4CC 3228 0008                  		move.w	8(a0),d1
0000C4D0 9268 002A                  		sub.w	$2A(a0),d1
0000C4D4 0641 000C                  		addi.w	#$C,d1
0000C4D8 3001                       		move.w	d1,d0
0000C4DA E248                       		lsr.w	#1,d0
0000C4DC 1031 0000                  		move.b	(a1,d0.w),d0
0000C4E0 4440                       		neg.w	d0
0000C4E2 D068 002C                  		add.w	$2C(a0),d0
0000C4E6 3400                       		move.w	d0,d2
0000C4E8 D068 003C                  		add.w	$3C(a0),d0
0000C4EC 3140 000C                  		move.w	d0,$C(a0)
0000C4F0 0C41 0084                  		cmpi.w	#$84,d1
0000C4F4 6400                       		bcc.s	loc_B2B0
0000C4F6 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C4FE 0C41 0080                  		cmpi.w	#$80,d1
0000C502 6400                       		bcc.s	loc_B2B0
0000C504 2028 0008                  		move.l	8(a0),d0
0000C508 0680 0008 0000             		addi.l	#$80000,d0
0000C50E 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000C514 6600                       		bne.s	loc_B2B0
0000C516 6100 0000                  		bsr.w	SingleObjLoad2
0000C51A 6600                       		bne.s	loc_B2B0
0000C51C 12BC 0035                  		move.b	#$35,0(a1)
0000C520 3368 0008 0008             		move.w	8(a0),8(a1)
0000C526 3342 002C                  		move.w	d2,$2C(a1)
0000C52A 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000C530 137C 0001 0028             		move.b	#1,$28(a1)
0000C536 2468 0038                  		movea.l	$38(a0),a2
0000C53A 6100 FDE0                  		bsr.w	sub_B09C
0000C53E                            
0000C53E                            loc_B2B0:
0000C53E 6000                       		bra.s	Obj35_Animate
0000C540                            ; ===========================================================================
0000C540                            
0000C540                            Obj35_Move:				; XREF: Obj35_Index
0000C540 3028 002C                  		move.w	$2C(a0),d0
0000C544 D068 003C                  		add.w	$3C(a0),d0
0000C548 3140 000C                  		move.w	d0,$C(a0)
0000C54C                            
0000C54C                            Obj35_Animate:				; XREF: loc_B238
0000C54C 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000C552 6100 F40E                  		bsr.w	AnimateSprite
0000C556 6000 0000                  		bra.w	DisplaySprite
0000C55A                            ; ===========================================================================
0000C55A                            Ani_obj35:
0000C55A                            	include "_anim\obj35.asm"
0000C55A                            ; ---------------------------------------------------------------------------
0000C55A                            ; Animation script - fireball that sits on the	floor (MZ)
0000C55A                            ; ---------------------------------------------------------------------------
0000C55A 0000                       		dc.w byte_B2CE-Ani_obj35
0000C55C 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000C562                            		even
0000C562                            		even
0000C562                            
0000C562                            ; ---------------------------------------------------------------------------
0000C562                            ; Sprite mappings - large moving platforms (MZ)
0000C562                            ; ---------------------------------------------------------------------------
0000C562                            Map_obj2F:
0000C562                            	include "_maps\obj2F.asm"
0000C562                            ; ---------------------------------------------------------------------------
0000C562                            ; Sprite mappings - large moving platforms (MZ)
0000C562                            ; ---------------------------------------------------------------------------
0000C562 0000                       		dc.w byte_B2DA-Map_obj2F
0000C564 0000                       		dc.w byte_B31C-Map_obj2F
0000C566 0000                       		dc.w byte_B34F-Map_obj2F
0000C568 0D                         byte_B2DA:	dc.b $D
0000C569 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000C56E F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000C573 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C578 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000C57D F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000C582 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C587 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000C58C D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000C591 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000C596 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C59B 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000C5A0 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000C5A5 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000C5AA 0A                         byte_B31C:	dc.b $A
0000C5AB D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000C5B0 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000C5B5 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C5BA C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000C5BF E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000C5C4 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C5C9 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000C5CE E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000C5D3 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000C5D8 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000C5DD 06                         byte_B34F:	dc.b 6
0000C5DE D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000C5E3 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C5E8 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000C5ED D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000C5F2 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C5F7 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000C5FC                            		even
0000C5FC                            		even
0000C5FC                            
0000C5FC                            ; ---------------------------------------------------------------------------
0000C5FC                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C5FC                            ; ---------------------------------------------------------------------------
0000C5FC                            Map_obj14:
0000C5FC                            	include "_maps\obj14.asm"
0000C5FC                            ; ---------------------------------------------------------------------------
0000C5FC                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C5FC                            ; ---------------------------------------------------------------------------
0000C5FC 0000                       		dc.w byte_B37A-Map_obj14
0000C5FE 0000                       		dc.w byte_B380-Map_obj14
0000C600 0000                       		dc.w byte_B386-Map_obj14
0000C602 0000                       		dc.w byte_B38C-Map_obj14
0000C604 0000                       		dc.w byte_B392-Map_obj14
0000C606 0000                       		dc.w byte_B398-Map_obj14
0000C608 01                         byte_B37A:	dc.b 1
0000C609 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000C60E 01                         byte_B380:	dc.b 1
0000C60F E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000C614 01                         byte_B386:	dc.b 1
0000C615 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000C61A 01                         byte_B38C:	dc.b 1
0000C61B F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000C620 01                         byte_B392:	dc.b 1
0000C621 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000C626 01                         byte_B398:	dc.b 1
0000C627 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000C62C                            		even
0000C62C                            		even
0000C62C                            
0000C62C                            ; ===========================================================================
0000C62C                            ; ---------------------------------------------------------------------------
0000C62C                            ; Object 30 - large green glassy blocks	(MZ)
0000C62C                            ; ---------------------------------------------------------------------------
0000C62C                            
0000C62C                            Obj30:					; XREF: Obj_Index
0000C62C 7000                       		moveq	#0,d0
0000C62E 1028 0024                  		move.b	$24(a0),d0
0000C632 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000C636 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000C63A 3028 0008                  		move.w	8(a0),d0
0000C63E 0240 FF80                  		andi.w	#$FF80,d0
0000C642 3238 F700                  		move.w	($FFFFF700).w,d1
0000C646 0441 0080                  		subi.w	#$80,d1
0000C64A 0241 FF80                  		andi.w	#$FF80,d1
0000C64E 9041                       		sub.w	d1,d0
0000C650 0C40 0280                  		cmpi.w	#$280,d0
0000C654 6300 0000                  		bls.w	DisplaySprite
0000C658 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C65C 6700                       		beq.s	Obj30_Delete		; if it's zero, don't remember object
0000C65E 3440                       		movea.w	d0,a2	; load address into a2
0000C660 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C664                            
0000C664                            Obj30_Delete:
0000C664 6000 0000                  		bra.w	DeleteObject
0000C668                            ; ===========================================================================
0000C668 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000C66A 0000                       		dc.w Obj30_Block012-Obj30_Index
0000C66C 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000C66E 0000                       		dc.w Obj30_Block34-Obj30_Index
0000C670 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000C672                            
0000C672 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000C675 0400 01                    		dc.b 4,	0, 1
0000C678 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000C67B 0800 01                    		dc.b 8,	0, 1
0000C67E                            ; ===========================================================================
0000C67E                            
0000C67E                            Obj30_Main:				; XREF: Obj30_Index
0000C67E 45F9 0000 C672             		lea	(Obj30_Vars1).l,a2
0000C684 7201                       		moveq	#1,d1
0000C686 117C 0048 0016             		move.b	#$48,$16(a0)
0000C68C 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000C692 6500                       		bcs.s	loc_B40C	; if yes, branch
0000C694 45F9 0000 C678             		lea	(Obj30_Vars2).l,a2
0000C69A 7201                       		moveq	#1,d1
0000C69C 117C 0038 0016             		move.b	#$38,$16(a0)
0000C6A2                            
0000C6A2                            loc_B40C:
0000C6A2 2248                       		movea.l	a0,a1
0000C6A4 6000                       		bra.s	Obj30_Load	; load main object
0000C6A6                            ; ===========================================================================
0000C6A6                            
0000C6A6                            Obj30_Loop:
0000C6A6 6100 0000                  		bsr.w	SingleObjLoad2
0000C6AA 6600                       		bne.s	loc_B480
0000C6AC                            
0000C6AC                            Obj30_Load:				; XREF: Obj30_Main
0000C6AC 135A 0024                  		move.b	(a2)+,$24(a1)
0000C6B0 12BC 0030                  		move.b	#$30,0(a1)
0000C6B4 3368 0008 0008             		move.w	8(a0),8(a1)
0000C6BA 101A                       		move.b	(a2)+,d0
0000C6BC 4880                       		ext.w	d0
0000C6BE D068 000C                  		add.w	$C(a0),d0
0000C6C2 3340 000C                  		move.w	d0,$C(a1)
0000C6C6 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000C6CE 337C C38E 0002             		move.w	#$C38E,2(a1)
0000C6D4 137C 0004 0001             		move.b	#4,1(a1)
0000C6DA 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C6E0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C6E6 137C 0020 0019             		move.b	#$20,$19(a1)
0000C6EC 137C 0004 0018             		move.b	#4,$18(a1)
0000C6F2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C6F6 2348 003C                  		move.l	a0,$3C(a1)
0000C6FA 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000C6FE                            
0000C6FE 137C 0010 0019             		move.b	#$10,$19(a1)
0000C704 137C 0003 0018             		move.b	#3,$18(a1)
0000C70A 5029 0028                  		addq.b	#8,$28(a1)
0000C70E 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C714                            
0000C714                            loc_B480:
0000C714 317C 0090 0032             		move.w	#$90,$32(a0)
0000C71A 08E8 0004 0001             		bset	#4,1(a0)
0000C720                            
0000C720                            Obj30_Block012:				; XREF: Obj30_Index
0000C720 6100 0000                  		bsr.w	Obj30_Types
0000C724 323C 002B                  		move.w	#$2B,d1
0000C728 343C 0048                  		move.w	#$48,d2
0000C72C 363C 0049                  		move.w	#$49,d3
0000C730 3828 0008                  		move.w	8(a0),d4
0000C734 6000 0000                  		bra.w	SolidObject
0000C738                            ; ===========================================================================
0000C738                            
0000C738                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C738 2268 003C                  		movea.l	$3C(a0),a1
0000C73C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C742 6000 0000                  		bra.w	Obj30_Types
0000C746                            ; ===========================================================================
0000C746                            
0000C746                            Obj30_Block34:				; XREF: Obj30_Index
0000C746 6100 0000                  		bsr.w	Obj30_Types
0000C74A 323C 002B                  		move.w	#$2B,d1
0000C74E 343C 0038                  		move.w	#$38,d2
0000C752 363C 0039                  		move.w	#$39,d3
0000C756 3828 0008                  		move.w	8(a0),d4
0000C75A 6000 0000                  		bra.w	SolidObject
0000C75E                            ; ===========================================================================
0000C75E                            
0000C75E                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C75E 2268 003C                  		movea.l	$3C(a0),a1
0000C762 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C768 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C76E 6000 0002                  		bra.w	*+4
0000C772                            
0000C772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C772                            
0000C772                            
0000C772                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C772 7000                       		moveq	#0,d0
0000C774 1028 0028                  		move.b	$28(a0),d0
0000C778 0240 0007                  		andi.w	#7,d0
0000C77C D040                       		add.w	d0,d0
0000C77E 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C782 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C786                            ; End of function Obj30_Types
0000C786                            
0000C786                            ; ===========================================================================
0000C786 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C788 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C78A 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C78C 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C78E 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C790                            ; ===========================================================================
0000C790                            
0000C790                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C790 4E75                       		rts	
0000C792                            ; ===========================================================================
0000C792                            
0000C792                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C792 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C796 323C 0040                  		move.w	#$40,d1
0000C79A 6000                       		bra.s	loc_B514
0000C79C                            ; ===========================================================================
0000C79C                            
0000C79C                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C79C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C7A0 323C 0040                  		move.w	#$40,d1
0000C7A4 4440                       		neg.w	d0
0000C7A6 D041                       		add.w	d1,d0
0000C7A8                            
0000C7A8                            loc_B514:				; XREF: Obj30_Type01
0000C7A8 0828 0003 0028             		btst	#3,$28(a0)
0000C7AE 6700                       		beq.s	loc_B526
0000C7B0 4440                       		neg.w	d0
0000C7B2 D041                       		add.w	d1,d0
0000C7B4 E208                       		lsr.b	#1,d0
0000C7B6 0640 0020                  		addi.w	#$20,d0
0000C7BA                            
0000C7BA                            loc_B526:
0000C7BA 6000 0000                  		bra.w	loc_B5EE
0000C7BE                            ; ===========================================================================
0000C7BE                            
0000C7BE                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C7BE 0828 0003 0028             		btst	#3,$28(a0)
0000C7C4 6700                       		beq.s	loc_B53E
0000C7C6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C7CA 0440 0010                  		subi.w	#$10,d0
0000C7CE 6000 0000                  		bra.w	loc_B5EE
0000C7D2                            ; ===========================================================================
0000C7D2                            
0000C7D2                            loc_B53E:
0000C7D2 0828 0003 0022             		btst	#3,$22(a0)
0000C7D8 6600                       		bne.s	loc_B54E
0000C7DA 08A8 0000 0034             		bclr	#0,$34(a0)
0000C7E0 6000                       		bra.s	loc_B582
0000C7E2                            ; ===========================================================================
0000C7E2                            
0000C7E2                            loc_B54E:
0000C7E2 4A28 0034                  		tst.b	$34(a0)
0000C7E6 6600                       		bne.s	loc_B582
0000C7E8 117C 0001 0034             		move.b	#1,$34(a0)
0000C7EE 08E8 0000 0035             		bset	#0,$35(a0)
0000C7F4 6700                       		beq.s	loc_B582
0000C7F6 08E8 0007 0034             		bset	#7,$34(a0)
0000C7FC 317C 0010 0036             		move.w	#$10,$36(a0)
0000C802 117C 000A 0038             		move.b	#$A,$38(a0)
0000C808 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C80E 6600                       		bne.s	loc_B582
0000C810 317C 0040 0036             		move.w	#$40,$36(a0)
0000C816                            
0000C816                            loc_B582:
0000C816 4A28 0034                  		tst.b	$34(a0)
0000C81A 6A00                       		bpl.s	loc_B5AA
0000C81C 4A28 0038                  		tst.b	$38(a0)
0000C820 6700                       		beq.s	loc_B594
0000C822 5328 0038                  		subq.b	#1,$38(a0)
0000C826 6600                       		bne.s	loc_B5AA
0000C828                            
0000C828                            loc_B594:
0000C828 4A68 0032                  		tst.w	$32(a0)
0000C82C 6700                       		beq.s	loc_B5A4
0000C82E 5368 0032                  		subq.w	#1,$32(a0)
0000C832 5368 0036                  		subq.w	#1,$36(a0)
0000C836 6600                       		bne.s	loc_B5AA
0000C838                            
0000C838                            loc_B5A4:
0000C838 08A8 0007 0034             		bclr	#7,$34(a0)
0000C83E                            
0000C83E                            loc_B5AA:
0000C83E 3028 0032                  		move.w	$32(a0),d0
0000C842 6000                       		bra.s	loc_B5EE
0000C844                            ; ===========================================================================
0000C844                            
0000C844                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C844 0828 0003 0028             		btst	#3,$28(a0)
0000C84A 6700                       		beq.s	Obj30_ChkSwitch
0000C84C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C850 0440 0010                  		subi.w	#$10,d0
0000C854 6000                       		bra.s	loc_B5EE
0000C856                            ; ===========================================================================
0000C856                            
0000C856                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C856 4A28 0034                  		tst.b	$34(a0)
0000C85A 6600                       		bne.s	loc_B5E0
0000C85C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C860 7000                       		moveq	#0,d0
0000C862 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C866 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C868 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C86C 6700                       		beq.s	loc_B5EA	; if not, branch
0000C86E 117C 0001 0034             		move.b	#1,$34(a0)
0000C874                            
0000C874                            loc_B5E0:
0000C874 4A68 0032                  		tst.w	$32(a0)
0000C878 6700                       		beq.s	loc_B5EA
0000C87A 5568 0032                  		subq.w	#2,$32(a0)
0000C87E                            
0000C87E                            loc_B5EA:
0000C87E 3028 0032                  		move.w	$32(a0),d0
0000C882                            
0000C882                            loc_B5EE:
0000C882 3228 0030                  		move.w	$30(a0),d1
0000C886 9240                       		sub.w	d0,d1
0000C888 3141 000C                  		move.w	d1,$C(a0)
0000C88C 4E75                       		rts	
0000C88E                            ; ===========================================================================
0000C88E                            ; ---------------------------------------------------------------------------
0000C88E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C88E                            ; ---------------------------------------------------------------------------
0000C88E                            Map_obj30:
0000C88E                            	include "_maps\obj30.asm"
0000C88E                            ; ---------------------------------------------------------------------------
0000C88E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C88E                            ; ---------------------------------------------------------------------------
0000C88E 0000                       		dc.w byte_B600-Map_obj30
0000C890 0000                       		dc.w byte_B63D-Map_obj30
0000C892 0000                       		dc.w byte_B648-Map_obj30
0000C894 0C                         byte_B600:	dc.b $C
0000C895 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C89A B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C89F C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C8A4 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C8A9 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C8AE E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C8B3 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C8B8 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C8BD 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C8C2 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C8C7 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C8CC 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C8D1 02                         byte_B63D:	dc.b 2
0000C8D2 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C8D7 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C8DC 0A                         byte_B648:	dc.b $A
0000C8DD C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C8E2 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C8E7 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C8EC D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C8F1 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C8F6 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C8FB 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C900 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C905 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C90A 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C910 00                         		even
0000C910 00                         		even
0000C910                            
0000C910                            ; ===========================================================================
0000C910                            ; ---------------------------------------------------------------------------
0000C910                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C910                            ; ---------------------------------------------------------------------------
0000C910                            
0000C910                            Obj31:					; XREF: Obj_Index
0000C910 7000                       		moveq	#0,d0
0000C912 1028 0024                  		move.b	$24(a0),d0
0000C916 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C91A 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C91E                            ; ===========================================================================
0000C91E 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C920 0000                       		dc.w loc_B798-Obj31_Index
0000C922 0000                       		dc.w loc_B7FE-Obj31_Index
0000C924 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C926 0000                       		dc.w loc_B7E2-Obj31_Index
0000C928                            
0000C928 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C92A 0100                       		dc.b 1,	0
0000C92C                            
0000C92C 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C92F 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C932 08CC 03                    		dc.b 8,	$CC, 3
0000C935 06F0 02                    		dc.b 6,	$F0, 2
0000C938                            
0000C938 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C93C 5000 7800                  		dc.w $5000, $7800
0000C940 3800 5800                  		dc.w $3800, $5800
0000C944 B800                       		dc.w $B800
0000C946                            ; ===========================================================================
0000C946                            
0000C946                            Obj31_Main:				; XREF: Obj31_Index
0000C946 7000                       		moveq	#0,d0
0000C948 1028 0028                  		move.b	$28(a0),d0
0000C94C 6A00                       		bpl.s	loc_B6CE
0000C94E 0240 007F                  		andi.w	#$7F,d0
0000C952 D040                       		add.w	d0,d0
0000C954 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C958 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C95C 101A                       		move.b	(a2)+,d0
0000C95E 1140 0028                  		move.b	d0,$28(a0)
0000C962                            
0000C962                            loc_B6CE:
0000C962 0200 000F                  		andi.b	#$F,d0
0000C966 D040                       		add.w	d0,d0
0000C968 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C96C 4A40                       		tst.w	d0
0000C96E 6600                       		bne.s	loc_B6E0
0000C970 3142 0032                  		move.w	d2,$32(a0)
0000C974                            
0000C974                            loc_B6E0:
0000C974 45F9 0000 C92C             		lea	(Obj31_Var).l,a2
0000C97A 2248                       		movea.l	a0,a1
0000C97C 7203                       		moveq	#3,d1
0000C97E 6000                       		bra.s	Obj31_MakeStomper
0000C980                            ; ===========================================================================
0000C980                            
0000C980                            Obj31_Loop:
0000C980 6100 0000                  		bsr.w	SingleObjLoad2
0000C984 6600 0000                  		bne.w	Obj31_SetSize
0000C988                            
0000C988                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C988 135A 0024                  		move.b	(a2)+,$24(a1)
0000C98C 12BC 0031                  		move.b	#$31,0(a1)
0000C990 3368 0008 0008             		move.w	8(a0),8(a1)
0000C996 101A                       		move.b	(a2)+,d0
0000C998 4880                       		ext.w	d0
0000C99A D068 000C                  		add.w	$C(a0),d0
0000C99E 3340 000C                  		move.w	d0,$C(a1)
0000C9A2 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C9AA 337C 0300 0002             		move.w	#$300,2(a1)
0000C9B0 137C 0004 0001             		move.b	#4,1(a1)
0000C9B6 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C9BC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C9C2 137C 0010 0019             		move.b	#$10,$19(a1)
0000C9C8 3342 0034                  		move.w	d2,$34(a1)
0000C9CC 137C 0004 0018             		move.b	#4,$18(a1)
0000C9D2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C9D6 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C9DC 6600                       		bne.s	loc_B76A
0000C9DE 5341                       		subq.w	#1,d1
0000C9E0 1028 0028                  		move.b	$28(a0),d0
0000C9E4 0240 00F0                  		andi.w	#$F0,d0
0000C9E8 0C40 0020                  		cmpi.w	#$20,d0
0000C9EC 679A                       		beq.s	Obj31_MakeStomper
0000C9EE 137C 0038 0019             		move.b	#$38,$19(a1)
0000C9F4 137C 0090 0020             		move.b	#$90,$20(a1)
0000C9FA 5241                       		addq.w	#1,d1
0000C9FC                            
0000C9FC                            loc_B76A:
0000C9FC 2348 003C                  		move.l	a0,$3C(a1)
0000CA00 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000CA04                            
0000CA04 137C 0003 0018             		move.b	#3,$18(a1)
0000CA0A                            
0000CA0A                            Obj31_SetSize:
0000CA0A 7000                       		moveq	#0,d0
0000CA0C 1028 0028                  		move.b	$28(a0),d0
0000CA10 E648                       		lsr.w	#3,d0
0000CA12 0200 000E                  		andi.b	#$E,d0
0000CA16 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000CA1A 115A 0019                  		move.b	(a2)+,$19(a0)
0000CA1E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CA22 6000                       		bra.s	loc_B798
0000CA24                            ; ===========================================================================
0000CA24 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000CA26 3009                       		dc.b $30, 9
0000CA28 100A                       		dc.b $10, $A
0000CA2A                            ; ===========================================================================
0000CA2A                            
0000CA2A                            loc_B798:				; XREF: Obj31_Index
0000CA2A 6100 0000                  		bsr.w	Obj31_Types
0000CA2E 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000CA34 7200                       		moveq	#0,d1
0000CA36 1228 0019                  		move.b	$19(a0),d1
0000CA3A 0641 000B                  		addi.w	#$B,d1
0000CA3E 343C 000C                  		move.w	#$C,d2
0000CA42 363C 000D                  		move.w	#$D,d3
0000CA46 3828 0008                  		move.w	8(a0),d4
0000CA4A 6100 0000                  		bsr.w	SolidObject
0000CA4E 0828 0003 0022             		btst	#3,$22(a0)
0000CA54 6700                       		beq.s	Obj31_Display
0000CA56 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CA5C 6400                       		bcc.s	Obj31_Display
0000CA5E 2448                       		movea.l	a0,a2
0000CA60 41F8 D000                  		lea	($FFFFD000).w,a0
0000CA64 4EB9 0000 0000             		jsr	KillSonic
0000CA6A 204A                       		movea.l	a2,a0
0000CA6C 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000CA72 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0000CA78                            
0000CA78                            Obj31_Display:
0000CA78 6100 0000                  		bsr.w	DisplaySprite
0000CA7C 6000 0000                  		bra.w	Obj31_ChkDel
0000CA80                            ; ===========================================================================
0000CA80                            
0000CA80                            loc_B7E2:				; XREF: Obj31_Index
0000CA80 117C 0080 0016             		move.b	#$80,$16(a0)
0000CA86 08E8 0004 0001             		bset	#4,1(a0)
0000CA8C 2268 003C                  		movea.l	$3C(a0),a1
0000CA90 1029 0032                  		move.b	$32(a1),d0
0000CA94 EA08                       		lsr.b	#5,d0
0000CA96 5600                       		addq.b	#3,d0
0000CA98 1140 001A                  		move.b	d0,$1A(a0)
0000CA9C                            
0000CA9C                            loc_B7FE:				; XREF: Obj31_Index
0000CA9C 2268 003C                  		movea.l	$3C(a0),a1
0000CAA0 7000                       		moveq	#0,d0
0000CAA2 1029 0032                  		move.b	$32(a1),d0
0000CAA6 D068 0030                  		add.w	$30(a0),d0
0000CAAA 3140 000C                  		move.w	d0,$C(a0)
0000CAAE                            
0000CAAE                            Obj31_Display2:				; XREF: Obj31_Index
0000CAAE 6100 0000                  		bsr.w	DisplaySprite
0000CAB2                            
0000CAB2                            Obj31_ChkDel:				; XREF: Obj31_Display
0000CAB2 3028 0008                  		move.w	8(a0),d0
0000CAB6 0240 FF80                  		andi.w	#$FF80,d0
0000CABA 3238 F700                  		move.w	($FFFFF700).w,d1
0000CABE 0441 0080                  		subi.w	#$80,d1
0000CAC2 0241 FF80                  		andi.w	#$FF80,d1
0000CAC6 9041                       		sub.w	d1,d0
0000CAC8 0C40 0280                  		cmpi.w	#$280,d0
0000CACC 6300                       		bls.s	Obj31_NoDel
0000CACE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CAD2 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CAD6 3640                       		movea.w	d0,a3	; load address into a2
0000CAD8 0893 0007                  		bclr	#7,(a3)	; clear respawn table entry, so object can be loaded again
0000CADC 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CAE0                            
0000CAE0                            Obj31_NoDel:
0000CAE0 4E75                       		rts	
0000CAE2                            ; ===========================================================================
0000CAE2                            
0000CAE2                            Obj31_Types:				; XREF: loc_B798
0000CAE2 1028 0028                  		move.b	$28(a0),d0
0000CAE6 0240 000F                  		andi.w	#$F,d0
0000CAEA D040                       		add.w	d0,d0
0000CAEC 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000CAF0 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000CAF4                            ; ===========================================================================
0000CAF4 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000CAF6 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CAF8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CAFA 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CAFC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CAFE 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CB00 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB02                            ; ===========================================================================
0000CB02                            
0000CB02                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000CB02 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000CB06 7000                       		moveq	#0,d0
0000CB08 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000CB0C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000CB10 6700                       		beq.s	loc_B8A8	; if not, branch
0000CB12 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000CB16 6A00                       		bpl.s	loc_B872
0000CB18 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CB1E 6700                       		beq.s	loc_B8A0
0000CB20                            
0000CB20                            loc_B872:
0000CB20 4A68 0032                  		tst.w	$32(a0)
0000CB24 6700                       		beq.s	loc_B8A0
0000CB26 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB2A 0200 000F                  		andi.b	#$F,d0
0000CB2E 6600                       		bne.s	loc_B892
0000CB30 4A28 0001                  		tst.b	1(a0)
0000CB34 6A00                       		bpl.s	loc_B892
0000CB36 303C 00C7                  		move.w	#$C7,d0
0000CB3A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CB40                            
0000CB40                            loc_B892:
0000CB40 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CB46 6400                       		bcc.s	Obj31_Restart
0000CB48 317C 0000 0032             		move.w	#0,$32(a0)
0000CB4E                            
0000CB4E                            loc_B8A0:
0000CB4E 317C 0000 0012             		move.w	#0,$12(a0)
0000CB54 6000                       		bra.s	Obj31_Restart
0000CB56                            ; ===========================================================================
0000CB56                            
0000CB56                            loc_B8A8:				; XREF: Obj31_Type00
0000CB56 3228 0034                  		move.w	$34(a0),d1
0000CB5A B268 0032                  		cmp.w	$32(a0),d1
0000CB5E 6700                       		beq.s	Obj31_Restart
0000CB60 3028 0012                  		move.w	$12(a0),d0
0000CB64 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CB6A D168 0032                  		add.w	d0,$32(a0)
0000CB6E B268 0032                  		cmp.w	$32(a0),d1
0000CB72 6200                       		bhi.s	Obj31_Restart
0000CB74 3141 0032                  		move.w	d1,$32(a0)
0000CB78 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CB7E 4A28 0001                  		tst.b	1(a0)
0000CB82 6A00                       		bpl.s	Obj31_Restart
0000CB84 303C 00BD                  		move.w	#$BD,d0
0000CB88 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CB8E                            
0000CB8E                            Obj31_Restart:
0000CB8E 7000                       		moveq	#0,d0
0000CB90 1028 0032                  		move.b	$32(a0),d0
0000CB94 D068 0030                  		add.w	$30(a0),d0
0000CB98 3140 000C                  		move.w	d0,$C(a0)
0000CB9C 4E75                       		rts	
0000CB9E                            ; ===========================================================================
0000CB9E                            
0000CB9E                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000CB9E 4A68 0036                  		tst.w	$36(a0)
0000CBA2 6700                       		beq.s	loc_B938
0000CBA4 4A68 0038                  		tst.w	$38(a0)
0000CBA8 6700                       		beq.s	loc_B902
0000CBAA 5368 0038                  		subq.w	#1,$38(a0)
0000CBAE 6000                       		bra.s	loc_B97C
0000CBB0                            ; ===========================================================================
0000CBB0                            
0000CBB0                            loc_B902:
0000CBB0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CBB4 0200 000F                  		andi.b	#$F,d0
0000CBB8 6600                       		bne.s	loc_B91C
0000CBBA 4A28 0001                  		tst.b	1(a0)
0000CBBE 6A00                       		bpl.s	loc_B91C
0000CBC0 303C 00C7                  		move.w	#$C7,d0
0000CBC4 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CBCA                            
0000CBCA                            loc_B91C:
0000CBCA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CBD0 6400                       		bcc.s	loc_B97C
0000CBD2 317C 0000 0032             		move.w	#0,$32(a0)
0000CBD8 317C 0000 0012             		move.w	#0,$12(a0)
0000CBDE 317C 0000 0036             		move.w	#0,$36(a0)
0000CBE4 6000                       		bra.s	loc_B97C
0000CBE6                            ; ===========================================================================
0000CBE6                            
0000CBE6                            loc_B938:				; XREF: Obj31_Type01
0000CBE6 3228 0034                  		move.w	$34(a0),d1
0000CBEA B268 0032                  		cmp.w	$32(a0),d1
0000CBEE 6700                       		beq.s	loc_B97C
0000CBF0 3028 0012                  		move.w	$12(a0),d0
0000CBF4 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CBFA D168 0032                  		add.w	d0,$32(a0)
0000CBFE B268 0032                  		cmp.w	$32(a0),d1
0000CC02 6200                       		bhi.s	loc_B97C
0000CC04 3141 0032                  		move.w	d1,$32(a0)
0000CC08 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CC0E 317C 0001 0036             		move.w	#1,$36(a0)
0000CC14 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CC1A 4A28 0001                  		tst.b	1(a0)
0000CC1E 6A00                       		bpl.s	loc_B97C
0000CC20 303C 00BD                  		move.w	#$BD,d0
0000CC24 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CC2A                            
0000CC2A                            loc_B97C:
0000CC2A 6000 FF62                  		bra.w	Obj31_Restart
0000CC2E                            ; ===========================================================================
0000CC2E                            
0000CC2E                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000CC2E 3038 D008                  		move.w	($FFFFD008).w,d0
0000CC32 9068 0008                  		sub.w	8(a0),d0
0000CC36 6400                       		bcc.s	loc_B98C
0000CC38 4440                       		neg.w	d0
0000CC3A                            
0000CC3A                            loc_B98C:
0000CC3A 0C40 0090                  		cmpi.w	#$90,d0
0000CC3E 6400                       		bcc.s	loc_B996
0000CC40 5228 0028                  		addq.b	#1,$28(a0)
0000CC44                            
0000CC44                            loc_B996:
0000CC44 6000 FF48                  		bra.w	Obj31_Restart
0000CC48                            ; ===========================================================================
0000CC48                            ; ---------------------------------------------------------------------------
0000CC48                            ; Object 45 - spiked metal block from beta version (MZ)
0000CC48                            ; ---------------------------------------------------------------------------
0000CC48                            
0000CC48                            Obj45:					; XREF: Obj_Index
0000CC48 7000                       		moveq	#0,d0
0000CC4A 1028 0024                  		move.b	$24(a0),d0
0000CC4E 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000CC52 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000CC56                            ; ===========================================================================
0000CC56 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000CC58 0000                       		dc.w Obj45_Solid-Obj45_Index
0000CC5A 0000                       		dc.w loc_BA8E-Obj45_Index
0000CC5C 0000                       		dc.w Obj45_Display-Obj45_Index
0000CC5E 0000                       		dc.w loc_BA7A-Obj45_Index
0000CC60                            
0000CC60 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000CC63 04E4 01                    		dc.b	4, $E4,	  1
0000CC66 0834 03                    		dc.b	8, $34,	  3
0000CC69 0628 02                    		dc.b	6, $28,	  2
0000CC6C                            
0000CC6C 3800                       word_B9BE:	dc.w $3800
0000CC6E A000                       		dc.w -$6000
0000CC70 5000                       		dc.w $5000
0000CC72                            ; ===========================================================================
0000CC72                            
0000CC72                            Obj45_Main:				; XREF: Obj45_Index
0000CC72 7000                       		moveq	#0,d0
0000CC74 1028 0028                  		move.b	$28(a0),d0
0000CC78 D040                       		add.w	d0,d0
0000CC7A 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000CC7E 45F9 0000 CC60             		lea	(Obj45_Var).l,a2
0000CC84 2248                       		movea.l	a0,a1
0000CC86 7203                       		moveq	#3,d1
0000CC88 6000                       		bra.s	Obj45_Load
0000CC8A                            ; ===========================================================================
0000CC8A                            
0000CC8A                            Obj45_Loop:
0000CC8A 6100 0000                  		bsr.w	SingleObjLoad2
0000CC8E 6600                       		bne.s	loc_BA52
0000CC90                            
0000CC90                            Obj45_Load:				; XREF: Obj45_Main
0000CC90 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC94 12BC 0045                  		move.b	#$45,0(a1)
0000CC98 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CC9E 101A                       		move.b	(a2)+,d0
0000CCA0 4880                       		ext.w	d0
0000CCA2 D068 0008                  		add.w	8(a0),d0
0000CCA6 3340 0008                  		move.w	d0,8(a1)
0000CCAA 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000CCB2 337C 0300 0002             		move.w	#$300,2(a1)
0000CCB8 137C 0004 0001             		move.b	#4,1(a1)
0000CCBE 3369 0008 0030             		move.w	8(a1),$30(a1)
0000CCC4 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000CCCA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CCD0 137C 0020 0019             		move.b	#$20,$19(a1)
0000CCD6 3342 0034                  		move.w	d2,$34(a1)
0000CCDA 137C 0004 0018             		move.b	#4,$18(a1)
0000CCE0 0C12 0001                  		cmpi.b	#1,(a2)
0000CCE4 6600                       		bne.s	loc_BA40
0000CCE6 137C 0091 0020             		move.b	#$91,$20(a1)
0000CCEC                            
0000CCEC                            loc_BA40:
0000CCEC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CCF0 2348 003C                  		move.l	a0,$3C(a1)
0000CCF4 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000CCF8                            
0000CCF8 137C 0003 0018             		move.b	#3,$18(a1)
0000CCFE                            
0000CCFE                            loc_BA52:
0000CCFE 117C 0010 0019             		move.b	#$10,$19(a0)
0000CD04                            
0000CD04                            Obj45_Solid:				; XREF: Obj45_Index
0000CD04 3F28 0008                  		move.w	8(a0),-(sp)
0000CD08 6100 0000                  		bsr.w	Obj45_Move
0000CD0C 323C 0017                  		move.w	#$17,d1
0000CD10 343C 0020                  		move.w	#$20,d2
0000CD14 363C 0020                  		move.w	#$20,d3
0000CD18 381F                       		move.w	(sp)+,d4
0000CD1A 6100 0000                  		bsr.w	SolidObject
0000CD1E 6100 0000                  		bsr.w	DisplaySprite
0000CD22 6000 0000                  		bra.w	Obj45_ChkDel
0000CD26                            ; ===========================================================================
0000CD26                            
0000CD26                            loc_BA7A:				; XREF: Obj45_Index
0000CD26 2268 003C                  		movea.l	$3C(a0),a1
0000CD2A 1029 0032                  		move.b	$32(a1),d0
0000CD2E 0600 0010                  		addi.b	#$10,d0
0000CD32 EA08                       		lsr.b	#5,d0
0000CD34 5600                       		addq.b	#3,d0
0000CD36 1140 001A                  		move.b	d0,$1A(a0)
0000CD3A                            
0000CD3A                            loc_BA8E:				; XREF: Obj45_Index
0000CD3A 2268 003C                  		movea.l	$3C(a0),a1
0000CD3E 7000                       		moveq	#0,d0
0000CD40 1029 0032                  		move.b	$32(a1),d0
0000CD44 4440                       		neg.w	d0
0000CD46 D068 0030                  		add.w	$30(a0),d0
0000CD4A 3140 0008                  		move.w	d0,8(a0)
0000CD4E                            
0000CD4E                            Obj45_Display:				; XREF: Obj45_Index
0000CD4E 6100 0000                  		bsr.w	DisplaySprite
0000CD52                            
0000CD52                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000CD52 3028 003A                  		move.w	$3A(a0),d0
0000CD56 0240 FF80                  		andi.w	#$FF80,d0
0000CD5A 3238 F700                  		move.w	($FFFFF700).w,d1
0000CD5E 0441 0080                  		subi.w	#$80,d1
0000CD62 0241 FF80                  		andi.w	#$FF80,d1
0000CD66 9041                       		sub.w	d1,d0
0000CD68 0C40 0280                  		cmpi.w	#$280,d0
0000CD6C 6300                       		bls.s	Obj45_NoDel
0000CD6E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CD72 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CD76 3440                       		movea.w	d0,a2	; load address into a2
0000CD78 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000CD7C 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CD80                            
0000CD80                            Obj45_NoDel:
0000CD80 4E75                       		rts	
0000CD82                            
0000CD82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CD82                            
0000CD82                            
0000CD82                            Obj45_Move:				; XREF: Obj45_Solid
0000CD82 7000                       		moveq	#0,d0
0000CD84 1028 0028                  		move.b	$28(a0),d0
0000CD88 D040                       		add.w	d0,d0
0000CD8A 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000CD8E 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000CD92                            ; End of function Obj45_Move
0000CD92                            
0000CD92                            ; ===========================================================================
0000CD92 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000CD94 0000                       		dc.w loc_BADA-off_BAD6
0000CD96                            ; ===========================================================================
0000CD96                            
0000CD96                            loc_BADA:				; XREF: off_BAD6
0000CD96 4A68 0036                  		tst.w	$36(a0)
0000CD9A 6700                       		beq.s	loc_BB08
0000CD9C 4A68 0038                  		tst.w	$38(a0)
0000CDA0 6700                       		beq.s	loc_BAEC
0000CDA2 5368 0038                  		subq.w	#1,$38(a0)
0000CDA6 6000                       		bra.s	loc_BB3C
0000CDA8                            ; ===========================================================================
0000CDA8                            
0000CDA8                            loc_BAEC:
0000CDA8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CDAE 6400                       		bcc.s	loc_BB3C
0000CDB0 317C 0000 0032             		move.w	#0,$32(a0)
0000CDB6 317C 0000 0010             		move.w	#0,$10(a0)
0000CDBC 317C 0000 0036             		move.w	#0,$36(a0)
0000CDC2 6000                       		bra.s	loc_BB3C
0000CDC4                            ; ===========================================================================
0000CDC4                            
0000CDC4                            loc_BB08:				; XREF: loc_BADA
0000CDC4 3228 0034                  		move.w	$34(a0),d1
0000CDC8 B268 0032                  		cmp.w	$32(a0),d1
0000CDCC 6700                       		beq.s	loc_BB3C
0000CDCE 3028 0010                  		move.w	$10(a0),d0
0000CDD2 0668 0070 0010             		addi.w	#$70,$10(a0)
0000CDD8 D168 0032                  		add.w	d0,$32(a0)
0000CDDC B268 0032                  		cmp.w	$32(a0),d1
0000CDE0 6200                       		bhi.s	loc_BB3C
0000CDE2 3141 0032                  		move.w	d1,$32(a0)
0000CDE6 317C 0000 0010             		move.w	#0,$10(a0)
0000CDEC 317C 0001 0036             		move.w	#1,$36(a0)
0000CDF2 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CDF8                            
0000CDF8                            loc_BB3C:
0000CDF8 7000                       		moveq	#0,d0
0000CDFA 1028 0032                  		move.b	$32(a0),d0
0000CDFE 4440                       		neg.w	d0
0000CE00 D068 0030                  		add.w	$30(a0),d0
0000CE04 3140 0008                  		move.w	d0,8(a0)
0000CE08 4E75                       		rts	
0000CE0A                            ; ===========================================================================
0000CE0A                            ; ---------------------------------------------------------------------------
0000CE0A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CE0A                            ; ---------------------------------------------------------------------------
0000CE0A                            Map_obj31:
0000CE0A                            	include "_maps\obj31.asm"
0000CE0A                            ; ---------------------------------------------------------------------------
0000CE0A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CE0A                            ; ---------------------------------------------------------------------------
0000CE0A 0000                       		dc.w byte_BB64-Map_obj31
0000CE0C 0000                       		dc.w byte_BB7E-Map_obj31
0000CE0E 0000                       		dc.w byte_BB98-Map_obj31
0000CE10 0000                       		dc.w byte_BB9E-Map_obj31
0000CE12 0000                       		dc.w byte_BBA9-Map_obj31
0000CE14 0000                       		dc.w byte_BBBE-Map_obj31
0000CE16 0000                       		dc.w byte_BBDD-Map_obj31
0000CE18 0000                       		dc.w byte_BC06-Map_obj31
0000CE1A 0000                       		dc.w byte_BC06-Map_obj31
0000CE1C 0000                       		dc.w byte_BC39-Map_obj31
0000CE1E 0000                       		dc.w byte_BC53-Map_obj31
0000CE20 05                         byte_BB64:	dc.b 5
0000CE21 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000CE26 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000CE2B EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CE30 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000CE35 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000CE3A 05                         byte_BB7E:	dc.b 5
0000CE3B F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000CE40 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000CE45 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000CE4A F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000CE4F F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000CE54 01                         byte_BB98:	dc.b 1
0000CE55 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000CE5A 02                         byte_BB9E:	dc.b 2
0000CE5B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CE60 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CE65 04                         byte_BBA9:	dc.b 4
0000CE66 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CE6B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CE70 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CE75 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CE7A 06                         byte_BBBE:	dc.b 6
0000CE7B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CE80 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CE85 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CE8A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CE8F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CE94 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CE99 08                         byte_BBDD:	dc.b 8
0000CE9A A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CE9F B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CEA4 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CEA9 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CEAE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CEB3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CEB8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEBD 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CEC2 0A                         byte_BC06:	dc.b $A
0000CEC3 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000CEC8 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000CECD A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CED2 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CED7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CEDC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CEE1 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CEE6 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CEEB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEF0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CEF5 05                         byte_BC39:	dc.b 5
0000CEF6 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000CEFB F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000CF00 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000CF05 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000CF0A EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CF0F 01                         byte_BC53:	dc.b 1
0000CF10 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000CF16 00                         		even
0000CF16 00                         		even
0000CF16                            
0000CF16                            ; ---------------------------------------------------------------------------
0000CF16                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CF16                            ; ---------------------------------------------------------------------------
0000CF16                            Map_obj45:
0000CF16                            	include "_maps\obj45.asm"
0000CF16                            ; ---------------------------------------------------------------------------
0000CF16                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CF16                            ; ---------------------------------------------------------------------------
0000CF16 0000                       		dc.w byte_BC6C-Map_obj45
0000CF18 0000                       		dc.w byte_BC7C-Map_obj45
0000CF1A 0000                       		dc.w byte_BC8C-Map_obj45
0000CF1C 0000                       		dc.w byte_BC92-Map_obj45
0000CF1E 0000                       		dc.w byte_BC9D-Map_obj45
0000CF20 0000                       		dc.w byte_BCB2-Map_obj45
0000CF22 0000                       		dc.w byte_BCD1-Map_obj45
0000CF24 0000                       		dc.w byte_BCFA-Map_obj45
0000CF26 0000                       		dc.w byte_BCFA-Map_obj45
0000CF28 03                         byte_BC6C:	dc.b 3
0000CF29 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000CF2E 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000CF33 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000CF38 03                         byte_BC7C:	dc.b 3
0000CF39 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000CF3E FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000CF43 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000CF48 01                         byte_BC8C:	dc.b 1
0000CF49 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000CF4E 02                         byte_BC92:	dc.b 2
0000CF4F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CF54 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CF59 04                         byte_BC9D:	dc.b 4
0000CF5A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CF5F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CF64 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CF69 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CF6E 06                         byte_BCB2:	dc.b 6
0000CF6F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CF74 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CF79 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CF7E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CF83 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CF88 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CF8D 08                         byte_BCD1:	dc.b 8
0000CF8E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CF93 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CF98 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CF9D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CFA2 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CFA7 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CFAC F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CFB1 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CFB6 08                         byte_BCFA:	dc.b 8
0000CFB7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFBC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFC1 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CFC6 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CFCB F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CFD0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CFD5 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CFDA F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CFDF F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000CFE4 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000CFEA 00                         		even
0000CFEA 00                         		even
0000CFEA                            
0000CFEA                            ; ===========================================================================
0000CFEA                            ; ---------------------------------------------------------------------------
0000CFEA                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000CFEA                            ; ---------------------------------------------------------------------------
0000CFEA                            
0000CFEA                            Obj32:					; XREF: Obj_Index
0000CFEA 7000                       		moveq	#0,d0
0000CFEC 1028 0024                  		move.b	$24(a0),d0
0000CFF0 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000CFF4 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000CFF8                            ; ===========================================================================
0000CFF8 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000CFFA 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000CFFC                            ; ===========================================================================
0000CFFC                            
0000CFFC                            Obj32_Main:				; XREF: Obj32_Index
0000CFFC 5428 0024                  		addq.b	#2,$24(a0)
0000D000 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000D008 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000D00E 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000D014 6700                       		beq.s	loc_BD60
0000D016 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000D01C                            
0000D01C                            loc_BD60:
0000D01C 117C 0004 0001             		move.b	#4,1(a0)
0000D022 117C 0010 0019             		move.b	#$10,$19(a0)
0000D028 117C 0004 0018             		move.b	#4,$18(a0)
0000D02E 5668 000C                  		addq.w	#3,$C(a0)
0000D032                            
0000D032                            Obj32_Pressed:				; XREF: Obj32_Index
0000D032 4A28 0001                  		tst.b	1(a0)
0000D036 6A00                       		bpl.s	Obj32_Display
0000D038 323C 001B                  		move.w	#$1B,d1
0000D03C 343C 0005                  		move.w	#5,d2
0000D040 363C 0005                  		move.w	#5,d3
0000D044 3828 0008                  		move.w	8(a0),d4
0000D048 6100 0000                  		bsr.w	SolidObject
0000D04C 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000D052 1028 0028                  		move.b	$28(a0),d0
0000D056 0240 000F                  		andi.w	#$F,d0
0000D05A 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000D05E 47F3 0000                  		lea	(a3,d0.w),a3
0000D062 7600                       		moveq	#0,d3
0000D064 0828 0006 0028             		btst	#6,$28(a0)
0000D06A 6700                       		beq.s	loc_BDB2
0000D06C 7607                       		moveq	#7,d3
0000D06E                            
0000D06E                            loc_BDB2:
0000D06E 4A28 0028                  		tst.b	$28(a0)
0000D072 6A00                       		bpl.s	loc_BDBE
0000D074 6100 0000                  		bsr.w	Obj32_MZBlock
0000D078 6600                       		bne.s	loc_BDC8
0000D07A                            
0000D07A                            loc_BDBE:
0000D07A 4A28 0025                  		tst.b	$25(a0)
0000D07E 6600                       		bne.s	loc_BDC8
0000D080 0793                       		bclr	d3,(a3)
0000D082 6000                       		bra.s	loc_BDDE
0000D084                            ; ===========================================================================
0000D084                            
0000D084                            loc_BDC8:
0000D084 4A13                       		tst.b	(a3)
0000D086 6600                       		bne.s	loc_BDD6
0000D088 303C 00CD                  		move.w	#$CD,d0
0000D08C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play switch sound
0000D092                            
0000D092                            loc_BDD6:
0000D092 07D3                       		bset	d3,(a3)
0000D094 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000D09A                            
0000D09A                            loc_BDDE:
0000D09A 0828 0005 0028             		btst	#5,$28(a0)
0000D0A0 6700                       		beq.s	Obj32_Display
0000D0A2 5328 001E                  		subq.b	#1,$1E(a0)
0000D0A6 6A00                       		bpl.s	Obj32_Display
0000D0A8 117C 0007 001E             		move.b	#7,$1E(a0)
0000D0AE 0868 0001 001A             		bchg	#1,$1A(a0)
0000D0B4                            
0000D0B4                            Obj32_Display:
0000D0B4 6100 0000                  		bsr.w	DisplaySprite
0000D0B8 3028 0008                  		move.w	8(a0),d0
0000D0BC 0240 FF80                  		andi.w	#$FF80,d0
0000D0C0 3238 F700                  		move.w	($FFFFF700).w,d1
0000D0C4 0441 0080                  		subi.w	#$80,d1
0000D0C8 0241 FF80                  		andi.w	#$FF80,d1
0000D0CC 9041                       		sub.w	d1,d0
0000D0CE 0C40 0280                  		cmpi.w	#$280,d0
0000D0D2 6300                       		bls.s	Obj32_NoDel
0000D0D4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D0D8 6700                       		beq.s	Obj32_Delete		; if it's zero, don't remember object
0000D0DA 3440                       		movea.w	d0,a2	; load address into a2
0000D0DC 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D0E0 6000                       		bra.s	Obj32_Delete	; and delete object
0000D0E2                            
0000D0E2                            Obj32_NoDel:
0000D0E2 4E75                       		rts	
0000D0E4                            ; ===========================================================================
0000D0E4                            
0000D0E4                            Obj32_Delete:
0000D0E4 6100 0000                  		bsr.w	DeleteObject
0000D0E8 4E75                       		rts	
0000D0EA                            
0000D0EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D0EA                            
0000D0EA                            
0000D0EA                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000D0EA 3F03                       		move.w	d3,-(sp)
0000D0EC 3428 0008                  		move.w	8(a0),d2
0000D0F0 3628 000C                  		move.w	$C(a0),d3
0000D0F4 0442 0010                  		subi.w	#$10,d2
0000D0F8 5143                       		subq.w	#8,d3
0000D0FA 383C 0020                  		move.w	#$20,d4
0000D0FE 3A3C 0010                  		move.w	#$10,d5
0000D102 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000D106 3C3C 005F                  		move.w	#$5F,d6
0000D10A                            
0000D10A                            Obj32_MZLoop:
0000D10A 4A29 0001                  		tst.b	1(a1)
0000D10E 6A00                       		bpl.s	loc_BE4E
0000D110 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000D114 6700                       		beq.s	loc_BE5E	; if yes, branch
0000D116                            
0000D116                            loc_BE4E:
0000D116 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000D11A 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000D11E                            
0000D11E 361F                       		move.w	(sp)+,d3
0000D120 7000                       		moveq	#0,d0
0000D122                            
0000D122                            locret_BE5A:
0000D122 4E75                       		rts	
0000D124                            ; ===========================================================================
0000D124 1010                       Obj32_MZData:	dc.b $10, $10
0000D126                            ; ===========================================================================
0000D126                            
0000D126                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D126 7001                       		moveq	#1,d0
0000D128 0240 003F                  		andi.w	#$3F,d0
0000D12C D040                       		add.w	d0,d0
0000D12E 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D132 121A                       		move.b	(a2)+,d1
0000D134 4881                       		ext.w	d1
0000D136 3029 0008                  		move.w	8(a1),d0
0000D13A 9041                       		sub.w	d1,d0
0000D13C 9042                       		sub.w	d2,d0
0000D13E 6400                       		bcc.s	loc_BE80
0000D140 D241                       		add.w	d1,d1
0000D142 D041                       		add.w	d1,d0
0000D144 6500                       		bcs.s	loc_BE84
0000D146 60CE                       		bra.s	loc_BE4E
0000D148                            ; ===========================================================================
0000D148                            
0000D148                            loc_BE80:
0000D148 B044                       		cmp.w	d4,d0
0000D14A 62CA                       		bhi.s	loc_BE4E
0000D14C                            
0000D14C                            loc_BE84:
0000D14C 121A                       		move.b	(a2)+,d1
0000D14E 4881                       		ext.w	d1
0000D150 3029 000C                  		move.w	$C(a1),d0
0000D154 9041                       		sub.w	d1,d0
0000D156 9043                       		sub.w	d3,d0
0000D158 6400                       		bcc.s	loc_BE9A
0000D15A D241                       		add.w	d1,d1
0000D15C D041                       		add.w	d1,d0
0000D15E 6500                       		bcs.s	loc_BE9E
0000D160 60B4                       		bra.s	loc_BE4E
0000D162                            ; ===========================================================================
0000D162                            
0000D162                            loc_BE9A:
0000D162 B045                       		cmp.w	d5,d0
0000D164 62B0                       		bhi.s	loc_BE4E
0000D166                            
0000D166                            loc_BE9E:
0000D166 361F                       		move.w	(sp)+,d3
0000D168 7001                       		moveq	#1,d0
0000D16A 4E75                       		rts	
0000D16C                            ; End of function Obj32_MZBlock
0000D16C                            
0000D16C                            ; ===========================================================================
0000D16C                            ; ---------------------------------------------------------------------------
0000D16C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D16C                            ; ---------------------------------------------------------------------------
0000D16C                            Map_obj32:
0000D16C                            	include "_maps\obj32.asm"
0000D16C                            ; ---------------------------------------------------------------------------
0000D16C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D16C                            ; ---------------------------------------------------------------------------
0000D16C 0000                       		dc.w byte_BEAC-Map_obj32
0000D16E 0000                       		dc.w byte_BEB7-Map_obj32
0000D170 0000                       		dc.w byte_BEC2-Map_obj32
0000D172 0000                       		dc.w byte_BEB7-Map_obj32
0000D174 02                         byte_BEAC:	dc.b 2
0000D175 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D17A F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D17F 02                         byte_BEB7:	dc.b 2
0000D180 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D185 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D18A 02                         byte_BEC2:	dc.b 2
0000D18B F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D190 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D195 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D19A                            		even
0000D19A                            		even
0000D19A                            
0000D19A                            ; ===========================================================================
0000D19A                            ; ---------------------------------------------------------------------------
0000D19A                            ; Object 33 - pushable blocks (MZ, LZ)
0000D19A                            ; ---------------------------------------------------------------------------
0000D19A                            
0000D19A                            Obj33:					; XREF: Obj_Index
0000D19A 7000                       		moveq	#0,d0
0000D19C 1028 0024                  		move.b	$24(a0),d0
0000D1A0 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D1A4 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D1A8                            ; ===========================================================================
0000D1A8 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D1AA 0000                       		dc.w loc_BF6E-Obj33_Index
0000D1AC 0000                       		dc.w loc_C02C-Obj33_Index
0000D1AE                            
0000D1AE 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D1B0 4001                       		dc.b $40, 1
0000D1B2                            ; ===========================================================================
0000D1B2                            
0000D1B2                            Obj33_Main:				; XREF: Obj33_Index
0000D1B2 5428 0024                  		addq.b	#2,$24(a0)
0000D1B6 117C 000F 0016             		move.b	#$F,$16(a0)
0000D1BC 117C 000F 0017             		move.b	#$F,$17(a0)
0000D1C2 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D1CA 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D1D0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D1D6 6600                       		bne.s	loc_BF16
0000D1D8 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D1DE                            
0000D1DE                            loc_BF16:
0000D1DE 117C 0004 0001             		move.b	#4,1(a0)
0000D1E4 117C 0003 0018             		move.b	#3,$18(a0)
0000D1EA 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D1F0 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D1F6 7000                       		moveq	#0,d0
0000D1F8 1028 0028                  		move.b	$28(a0),d0
0000D1FC D040                       		add.w	d0,d0
0000D1FE 0240 000E                  		andi.w	#$E,d0
0000D202 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D206 115A 0019                  		move.b	(a2)+,$19(a0)
0000D20A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D20E 4A28 0028                  		tst.b	$28(a0)
0000D212 6700                       		beq.s	Obj33_ChkGone
0000D214 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D21A                            
0000D21A                            Obj33_ChkGone:
0000D21A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D21E 6700                       		beq.s	loc_BF6E		; if it's zero, don't remember object
0000D220 3440                       		movea.w	d0,a2	; load address into a2
0000D222 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D226 08D2 0000                  		bset	#0,(a2)
0000D22A 6600 0000                  		bne.w	DeleteObject
0000D22E                            
0000D22E                            loc_BF6E:				; XREF: Obj33_Index
0000D22E 4A28 0032                  		tst.b	$32(a0)
0000D232 6600 0000                  		bne.w	loc_C046
0000D236 7200                       		moveq	#0,d1
0000D238 1228 0019                  		move.b	$19(a0),d1
0000D23C 0641 000B                  		addi.w	#$B,d1
0000D240 343C 0010                  		move.w	#$10,d2
0000D244 363C 0011                  		move.w	#$11,d3
0000D248 3828 0008                  		move.w	8(a0),d4
0000D24C 6100 0000                  		bsr.w	loc_C186
0000D250 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D256 6600                       		bne.s	loc_BFC6	; if not, branch
0000D258 08A8 0007 0028             		bclr	#7,$28(a0)
0000D25E 3028 0008                  		move.w	8(a0),d0
0000D262 0C40 0A20                  		cmpi.w	#$A20,d0
0000D266 6500                       		bcs.s	loc_BFC6
0000D268 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D26C 6400                       		bcc.s	loc_BFC6
0000D26E 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D272 0440 001C                  		subi.w	#$1C,d0
0000D276 3140 000C                  		move.w	d0,$C(a0)
0000D27A 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D280 08E8 0007 0028             		bset	#7,$28(a0)
0000D286                            
0000D286                            loc_BFC6:
0000D286 3028 0008                  		move.w	8(a0),d0
0000D28A 0240 FF80                  		andi.w	#$FF80,d0
0000D28E 3238 F700                  		move.w	($FFFFF700).w,d1
0000D292 0441 0080                  		subi.w	#$80,d1
0000D296 0241 FF80                  		andi.w	#$FF80,d1
0000D29A 9041                       		sub.w	d1,d0
0000D29C 0C40 0280                  		cmpi.w	#$280,d0
0000D2A0 6300 0000                  		bls.w	DisplaySprite
0000D2A4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D2A8 6700                       		beq.s	loc_BFE6	; if it's zero, don't remember object
0000D2AA 3440                       		movea.w	d0,a2	; load address into a2
0000D2AC 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D2B0                            
0000D2B0                            loc_BFE6:
0000D2B0 3028 0034                  		move.w	$34(a0),d0
0000D2B4 0240 FF80                  		andi.w	#$FF80,d0
0000D2B8 3238 F700                  		move.w	($FFFFF700).w,d1
0000D2BC 0441 0080                  		subi.w	#$80,d1
0000D2C0 0241 FF80                  		andi.w	#$FF80,d1
0000D2C4 9041                       		sub.w	d1,d0
0000D2C6 0C40 0280                  		cmpi.w	#$280,d0
0000D2CA 6200                       		bhi.s	loc_C016
0000D2CC 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D2D2 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D2D8 117C 0004 0024             		move.b	#4,$24(a0)
0000D2DE 6000                       		bra.s	loc_C02C
0000D2E0                            ; ===========================================================================
0000D2E0                            
0000D2E0                            loc_C016:
0000D2E0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D2E4 6700                       		beq.s	loc_C028		; if it's zero, don't remember object
0000D2E6 3440                       		movea.w	d0,a2	; load address into a2
0000D2E8 0892 0000                  		bclr	#0,(a2)
0000D2EC                            
0000D2EC                            loc_C028:
0000D2EC 6000 0000                  		bra.w	DeleteObject
0000D2F0                            ; ===========================================================================
0000D2F0                            
0000D2F0                            loc_C02C:				; XREF: Obj33_Index
0000D2F0 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D2F4 6700                       		beq.s	locret_C044
0000D2F6 117C 0002 0024             		move.b	#2,$24(a0)
0000D2FC 4228 0032                  		clr.b	$32(a0)
0000D300 4268 0010                  		clr.w	$10(a0)
0000D304 4268 0012                  		clr.w	$12(a0)
0000D308                            
0000D308                            locret_C044:
0000D308 4E75                       		rts	
0000D30A                            ; ===========================================================================
0000D30A                            
0000D30A                            loc_C046:				; XREF: loc_BF6E
0000D30A 3F28 0008                  		move.w	8(a0),-(sp)
0000D30E 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D314 6400                       		bcc.s	loc_C056
0000D316 6100 0000                  		bsr.w	SpeedToPos
0000D31A                            
0000D31A                            loc_C056:
0000D31A 0828 0001 0022             		btst	#1,$22(a0)
0000D320 6700                       		beq.s	loc_C0A0
0000D322 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D328 4EB9 0000 0000             		jsr	ObjHitFloor
0000D32E 4A41                       		tst.w	d1
0000D330 6A00 0000                  		bpl.w	loc_C09E
0000D334 D368 000C                  		add.w	d1,$C(a0)
0000D338 4268 0012                  		clr.w	$12(a0)
0000D33C 08A8 0001 0022             		bclr	#1,$22(a0)
0000D342 3011                       		move.w	(a1),d0
0000D344 0240 03FF                  		andi.w	#$3FF,d0
0000D348 0C40 016A                  		cmpi.w	#$16A,d0
0000D34C 6500                       		bcs.s	loc_C09E
0000D34E 3028 0030                  		move.w	$30(a0),d0
0000D352 E640                       		asr.w	#3,d0
0000D354 3140 0010                  		move.w	d0,$10(a0)
0000D358 117C 0001 0032             		move.b	#1,$32(a0)
0000D35E 4268 000E                  		clr.w	$E(a0)
0000D362                            
0000D362                            loc_C09E:
0000D362 6000                       		bra.s	loc_C0E6
0000D364                            ; ===========================================================================
0000D364                            
0000D364                            loc_C0A0:
0000D364 4A68 0010                  		tst.w	$10(a0)
0000D368 6700 0000                  		beq.w	loc_C0D6
0000D36C 6B00                       		bmi.s	loc_C0BC
0000D36E 7600                       		moveq	#0,d3
0000D370 1628 0019                  		move.b	$19(a0),d3
0000D374 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D37A 4A41                       		tst.w	d1		; has block touched a wall?
0000D37C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D37E 6000                       		bra.s	loc_C0E6
0000D380                            ; ===========================================================================
0000D380                            
0000D380                            loc_C0BC:
0000D380 7600                       		moveq	#0,d3
0000D382 1628 0019                  		move.b	$19(a0),d3
0000D386 4643                       		not.w	d3
0000D388 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D38E 4A41                       		tst.w	d1		; has block touched a wall?
0000D390 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D392 6000                       		bra.s	loc_C0E6
0000D394                            ; ===========================================================================
0000D394                            
0000D394                            Obj33_StopPush:
0000D394 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D398 6000                       		bra.s	loc_C0E6
0000D39A                            ; ===========================================================================
0000D39A                            
0000D39A                            loc_C0D6:
0000D39A 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D3A2 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D3A8 6400                       		bcc.s	loc_C104
0000D3AA                            
0000D3AA                            loc_C0E6:
0000D3AA 7200                       		moveq	#0,d1
0000D3AC 1228 0019                  		move.b	$19(a0),d1
0000D3B0 0641 000B                  		addi.w	#$B,d1
0000D3B4 343C 0010                  		move.w	#$10,d2
0000D3B8 363C 0011                  		move.w	#$11,d3
0000D3BC 381F                       		move.w	(sp)+,d4
0000D3BE 6100 0000                  		bsr.w	loc_C186
0000D3C2 6100                       		bsr.s	Obj33_ChkLava
0000D3C4 6000 FEC0                  		bra.w	loc_BFC6
0000D3C8                            ; ===========================================================================
0000D3C8                            
0000D3C8                            loc_C104:
0000D3C8 381F                       		move.w	(sp)+,d4
0000D3CA 43F8 D000                  		lea	($FFFFD000).w,a1
0000D3CE 08A9 0003 0022             		bclr	#3,$22(a1)
0000D3D4 08A8 0003 0022             		bclr	#3,$22(a0)
0000D3DA 6000 FED4                  		bra.w	loc_BFE6
0000D3DE                            ; ===========================================================================
0000D3DE                            
0000D3DE                            Obj33_ChkLava:
0000D3DE 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D3E4 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D3E6 343C FFE0                  		move.w	#-$20,d2
0000D3EA 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D3F0 6700                       		beq.s	Obj33_LoadLava
0000D3F2 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D3F8 6700                       		beq.s	Obj33_LoadLava
0000D3FA 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D400 6700                       		beq.s	Obj33_LoadLava
0000D402 4E75                       		rts	
0000D404                            ; ===========================================================================
0000D404                            
0000D404                            Obj33_ChkLava2:
0000D404 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D40A 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D40C 343C 0020                  		move.w	#$20,d2
0000D410 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D416 6700                       		beq.s	Obj33_LoadLava
0000D418 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D41E 6700                       		beq.s	Obj33_LoadLava
0000D420                            
0000D420                            Obj33_NoLava:
0000D420 4E75                       		rts	
0000D422                            ; ===========================================================================
0000D422                            
0000D422                            Obj33_LoadLava:
0000D422 6100 0000                  		bsr.w	SingleObjLoad
0000D426 6600                       		bne.s	locret_C184
0000D428 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000D42C 3368 0008 0008             		move.w	8(a0),8(a1)
0000D432 D569 0008                  		add.w	d2,8(a1)
0000D436 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D43C 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D442 2348 003C                  		move.l	a0,$3C(a1)
0000D446                            
0000D446                            locret_C184:
0000D446 4E75                       		rts	
0000D448                            ; ===========================================================================
0000D448                            
0000D448                            loc_C186:				; XREF: loc_BF6E
0000D448 1028 0025                  		move.b	$25(a0),d0
0000D44C 6700 0000                  		beq.w	loc_C218
0000D450 5500                       		subq.b	#2,d0
0000D452 6600                       		bne.s	loc_C1AA
0000D454 6100 B22E                  		bsr.w	ExitPlatform
0000D458 0829 0003 0022             		btst	#3,$22(a1)
0000D45E 6600                       		bne.s	loc_C1A4
0000D460 4228 0025                  		clr.b	$25(a0)
0000D464 4E75                       		rts	
0000D466                            ; ===========================================================================
0000D466                            
0000D466                            loc_C1A4:
0000D466 3404                       		move.w	d4,d2
0000D468 6000 B784                  		bra.w	MvSonicOnPtfm
0000D46C                            ; ===========================================================================
0000D46C                            
0000D46C                            loc_C1AA:
0000D46C 5500                       		subq.b	#2,d0
0000D46E 6600                       		bne.s	loc_C1F2
0000D470 6100 0000                  		bsr.w	SpeedToPos
0000D474 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D47A 4EB9 0000 0000             		jsr	ObjHitFloor
0000D480 4A41                       		tst.w	d1
0000D482 6A00 0000                  		bpl.w	locret_C1F0
0000D486 D368 000C                  		add.w	d1,$C(a0)
0000D48A 4268 0012                  		clr.w	$12(a0)
0000D48E 4228 0025                  		clr.b	$25(a0)
0000D492 3011                       		move.w	(a1),d0
0000D494 0240 03FF                  		andi.w	#$3FF,d0
0000D498 0C40 016A                  		cmpi.w	#$16A,d0
0000D49C 6500                       		bcs.s	locret_C1F0
0000D49E 3028 0030                  		move.w	$30(a0),d0
0000D4A2 E640                       		asr.w	#3,d0
0000D4A4 3140 0010                  		move.w	d0,$10(a0)
0000D4A8 117C 0001 0032             		move.b	#1,$32(a0)
0000D4AE 4268 000E                  		clr.w	$E(a0)
0000D4B2                            
0000D4B2                            locret_C1F0:
0000D4B2 4E75                       		rts	
0000D4B4                            ; ===========================================================================
0000D4B4                            
0000D4B4                            loc_C1F2:
0000D4B4 6100 0000                  		bsr.w	SpeedToPos
0000D4B8 3028 0008                  		move.w	8(a0),d0
0000D4BC 0240 000C                  		andi.w	#$C,d0
0000D4C0 6600 0000                  		bne.w	locret_C2E4
0000D4C4 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D4CA 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D4D0 4268 0010                  		clr.w	$10(a0)
0000D4D4 5528 0025                  		subq.b	#2,$25(a0)
0000D4D8 4E75                       		rts	
0000D4DA                            ; ===========================================================================
0000D4DA                            
0000D4DA                            loc_C218:
0000D4DA 6100 0000                  		bsr.w	loc_FAC8
0000D4DE 4A44                       		tst.w	d4
0000D4E0 6700 0000                  		beq.w	locret_C2E4
0000D4E4 6B00 0000                  		bmi.w	locret_C2E4
0000D4E8 4A28 0032                  		tst.b	$32(a0)
0000D4EC 6700                       		beq.s	loc_C230
0000D4EE 6000 0000                  		bra.w	locret_C2E4
0000D4F2                            ; ===========================================================================
0000D4F2                            
0000D4F2                            loc_C230:
0000D4F2 4A40                       		tst.w	d0
0000D4F4 6700 0000                  		beq.w	locret_C2E4
0000D4F8 6B00                       		bmi.s	loc_C268
0000D4FA 0829 0000 0022             		btst	#0,$22(a1)
0000D500 6600 0000                  		bne.w	locret_C2E4
0000D504 3F00                       		move.w	d0,-(sp)
0000D506 7600                       		moveq	#0,d3
0000D508 1628 0019                  		move.b	$19(a0),d3
0000D50C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D512 301F                       		move.w	(sp)+,d0
0000D514 4A41                       		tst.w	d1
0000D516 6B00 0000                  		bmi.w	locret_C2E4
0000D51A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D522 7001                       		moveq	#1,d0
0000D524 323C 0040                  		move.w	#$40,d1
0000D528 6000                       		bra.s	loc_C294
0000D52A                            ; ===========================================================================
0000D52A                            
0000D52A                            loc_C268:
0000D52A 0829 0000 0022             		btst	#0,$22(a1)
0000D530 6700                       		beq.s	locret_C2E4
0000D532 3F00                       		move.w	d0,-(sp)
0000D534 7600                       		moveq	#0,d3
0000D536 1628 0019                  		move.b	$19(a0),d3
0000D53A 4643                       		not.w	d3
0000D53C 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D542 301F                       		move.w	(sp)+,d0
0000D544 4A41                       		tst.w	d1
0000D546 6B00                       		bmi.s	locret_C2E4
0000D548 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000D550 70FF                       		moveq	#-1,d0
0000D552 323C FFC0                  		move.w	#-$40,d1
0000D556                            
0000D556                            loc_C294:
0000D556 43F8 D000                  		lea	($FFFFD000).w,a1
0000D55A D169 0008                  		add.w	d0,8(a1)
0000D55E 3341 0020                  		move.w	d1,$20(a1)
0000D562 337C 0000 0010             		move.w	#0,$10(a1)
0000D568 3F00                       		move.w	d0,-(sp)
0000D56A 303C 00A7                  		move.w	#$A7,d0
0000D56E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play pushing sound
0000D574 301F                       		move.w	(sp)+,d0
0000D576 4A28 0028                  		tst.b	$28(a0)
0000D57A 6B00                       		bmi.s	locret_C2E4
0000D57C 3F00                       		move.w	d0,-(sp)
0000D57E 4EB9 0000 0000             		jsr	ObjHitFloor
0000D584 301F                       		move.w	(sp)+,d0
0000D586 0C41 0004                  		cmpi.w	#4,d1
0000D58A 6F00                       		ble.s	loc_C2E0
0000D58C 317C 0400 0010             		move.w	#$400,$10(a0)
0000D592 4A40                       		tst.w	d0
0000D594 6A00                       		bpl.s	loc_C2D8
0000D596 4468 0010                  		neg.w	$10(a0)
0000D59A                            
0000D59A                            loc_C2D8:
0000D59A 117C 0006 0025             		move.b	#6,$25(a0)
0000D5A0 6000                       		bra.s	locret_C2E4
0000D5A2                            ; ===========================================================================
0000D5A2                            
0000D5A2                            loc_C2E0:
0000D5A2 D368 000C                  		add.w	d1,$C(a0)
0000D5A6                            
0000D5A6                            locret_C2E4:
0000D5A6 4E75                       		rts	
0000D5A8                            ; ===========================================================================
0000D5A8                            ; ---------------------------------------------------------------------------
0000D5A8                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D5A8                            ; ---------------------------------------------------------------------------
0000D5A8                            Map_obj33:
0000D5A8                            	include "_maps\obj33.asm"
0000D5A8                            ; ---------------------------------------------------------------------------
0000D5A8                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D5A8                            ; ---------------------------------------------------------------------------
0000D5A8 0000                       		dc.w byte_C2EA-Map_obj33
0000D5AA 0000                       		dc.w byte_C2F0-Map_obj33
0000D5AC 01                         byte_C2EA:	dc.b 1
0000D5AD F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000D5B2 04                         byte_C2F0:	dc.b 4
0000D5B3 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000D5B8 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000D5BD F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000D5C2 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000D5C8 00                         		even
0000D5C8 00                         		even
0000D5C8                            
0000D5C8                            ; ===========================================================================
0000D5C8                            ; ---------------------------------------------------------------------------
0000D5C8                            ; Object 34 - zone title cards
0000D5C8                            ; ---------------------------------------------------------------------------
0000D5C8                            
0000D5C8                            Obj34:					; XREF: Obj_Index
0000D5C8 7000                       		moveq	#0,d0
0000D5CA 1028 0024                  		move.b	$24(a0),d0
0000D5CE 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000D5D2 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000D5D6                            ; ===========================================================================
0000D5D6 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000D5D8 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000D5DA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D5DC 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D5DE                            ; ===========================================================================
0000D5DE                            
0000D5DE                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000D5DE 2248                       		movea.l	a0,a1
0000D5E0 7000                       		moveq	#0,d0
0000D5E2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D5E6 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000D5EC 6600                       		bne.s	Obj34_CheckFZ
0000D5EE 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000D5F0                            
0000D5F0                            Obj34_CheckFZ:
0000D5F0 3400                       		move.w	d0,d2
0000D5F2 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000D5F8 6600                       		bne.s	Obj34_LoadConfig
0000D5FA 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000D5FC 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D5FE                            
0000D5FE                            Obj34_LoadConfig:
0000D5FE 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000D604 E948                       		lsl.w	#4,d0
0000D606 D6C0                       		adda.w	d0,a3
0000D608 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000D60E 7203                       		moveq	#3,d1
0000D610                            
0000D610                            Obj34_Loop:
0000D610 12BC 0034                  		move.b	#$34,0(a1)
0000D614 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000D618 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000D61C 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000D620 335A 000A                  		move.w	(a2)+,$A(a1)
0000D624 135A 0024                  		move.b	(a2)+,$24(a1)
0000D628 101A                       		move.b	(a2)+,d0
0000D62A 6600                       		bne.s	Obj34_ActNumber
0000D62C 1002                       		move.b	d2,d0
0000D62E                            
0000D62E                            Obj34_ActNumber:
0000D62E 0C00 0007                  		cmpi.b	#7,d0
0000D632 6600                       		bne.s	Obj34_MakeSprite
0000D634 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000D638 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000D63E 6600                       		bne.s	Obj34_MakeSprite
0000D640 5300                       		subq.b	#1,d0
0000D642                            
0000D642                            Obj34_MakeSprite:
0000D642 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000D646 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000D64E 337C 8580 0002             		move.w	#$8580,2(a1)
0000D654 137C 0078 0019             		move.b	#$78,$19(a1)
0000D65A 137C 0000 0001             		move.b	#0,1(a1)
0000D660 137C 0000 0018             		move.b	#0,$18(a1)
0000D666 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000D66C 43E9 0040                  		lea	$40(a1),a1	; next object
0000D670 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000D674                            
0000D674                            Obj34_ChkPos:				; XREF: Obj34_Index
0000D674 7210                       		moveq	#$10,d1		; set horizontal speed
0000D676 3028 0030                  		move.w	$30(a0),d0
0000D67A B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000D67E 6700                       		beq.s	loc_C3C8	; if yes, branch
0000D680 6C00                       		bge.s	Obj34_Move
0000D682 4441                       		neg.w	d1
0000D684                            
0000D684                            Obj34_Move:
0000D684 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D688                            
0000D688                            loc_C3C8:
0000D688 3028 0008                  		move.w	8(a0),d0
0000D68C 6B00                       		bmi.s	locret_C3D8
0000D68E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D692 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000D694 6000 0000                  		bra.w	DisplaySprite
0000D698                            ; ===========================================================================
0000D698                            
0000D698                            locret_C3D8:
0000D698 4E75                       		rts	
0000D69A                            ; ===========================================================================
0000D69A                            
0000D69A                            Obj34_Wait:				; XREF: Obj34_Index
0000D69A 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000D69E 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000D6A0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000D6A4 6000 0000                  		bra.w	DisplaySprite
0000D6A8                            ; ===========================================================================
0000D6A8                            
0000D6A8                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000D6A8 4A28 0001                  		tst.b	1(a0)
0000D6AC 6A00                       		bpl.s	Obj34_ChangeArt
0000D6AE 7220                       		moveq	#$20,d1
0000D6B0 3028 0032                  		move.w	$32(a0),d0
0000D6B4 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000D6B8 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000D6BA 6C00                       		bge.s	Obj34_Move2
0000D6BC 4441                       		neg.w	d1
0000D6BE                            
0000D6BE                            Obj34_Move2:
0000D6BE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D6C2 3028 0008                  		move.w	8(a0),d0
0000D6C6 6B00                       		bmi.s	locret_C412
0000D6C8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D6CC 6400                       		bcc.s	locret_C412	; if yes, branch
0000D6CE 6000 0000                  		bra.w	DisplaySprite
0000D6D2                            ; ===========================================================================
0000D6D2                            
0000D6D2                            locret_C412:
0000D6D2 4E75                       		rts	
0000D6D4                            ; ===========================================================================
0000D6D4                            
0000D6D4                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000D6D4 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D6DA 6600                       		bne.s	Obj34_Delete
0000D6DC 7002                       		moveq	#2,d0
0000D6DE 4EB9 0000 1434             		jsr	(LoadPLC).l	; load explosion patterns
0000D6E4 7000                       		moveq	#0,d0
0000D6E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D6EA 0640 0015                  		addi.w	#$15,d0
0000D6EE 4EB9 0000 1434             		jsr	(LoadPLC).l	; load animal patterns
0000D6F4                            
0000D6F4                            Obj34_Delete:
0000D6F4 6000 0000                  		bra.w	DeleteObject
0000D6F8                            ; ===========================================================================
0000D6F8 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000D6FA 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000D6FC 00E4                       		dc.w $E4
0000D6FE 0206                       		dc.b 2,	6
0000D700 00EA                       		dc.w $EA
0000D702 0207                       		dc.b 2,	7
0000D704 00E0                       		dc.w $E0
0000D706 020A                       		dc.b 2,	$A
0000D708                            ; ---------------------------------------------------------------------------
0000D708                            ; Title	card configuration data
0000D708                            ; Format:
0000D708                            ; 4 bytes per item (YYYY XXXX)
0000D708                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000D708                            ; ---------------------------------------------------------------------------
0000D708 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D718 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000D728 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D738 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D748 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D758 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D768 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D778                            ; ===========================================================================
0000D778                            ; ---------------------------------------------------------------------------
0000D778                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D778                            ; ---------------------------------------------------------------------------
0000D778                            
0000D778                            Obj39:					; XREF: Obj_Index
0000D778 7000                       		moveq	#0,d0
0000D77A 1028 0024                  		move.b	$24(a0),d0
0000D77E 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D782 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D786                            ; ===========================================================================
0000D786 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D788 0000                       		dc.w loc_C50C-Obj39_Index
0000D78A 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D78C                            ; ===========================================================================
0000D78C                            
0000D78C                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D78C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D790 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D792 4E75                       		rts	
0000D794                            ; ===========================================================================
0000D794                            
0000D794                            Obj39_Main:
0000D794 5428 0024                  		addq.b	#2,$24(a0)
0000D798 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D79E 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D7A4 6700                       		beq.s	loc_C4EC	; if not, branch
0000D7A6 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D7AC                            
0000D7AC                            loc_C4EC:
0000D7AC 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D7B2 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D7BA 317C 855E 0002             		move.w	#$855E,2(a0)
0000D7C0 117C 0000 0001             		move.b	#0,1(a0)
0000D7C6 117C 0000 0018             		move.b	#0,$18(a0)
0000D7CC                            
0000D7CC                            loc_C50C:				; XREF: Obj39_Index
0000D7CC 7210                       		moveq	#$10,d1		; set horizontal speed
0000D7CE 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D7D4 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D7D6 6500                       		bcs.s	Obj39_Move
0000D7D8 4441                       		neg.w	d1
0000D7DA                            
0000D7DA                            Obj39_Move:
0000D7DA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D7DE 6000 0000                  		bra.w	DisplaySprite
0000D7E2                            ; ===========================================================================
0000D7E2                            
0000D7E2                            Obj39_SetWait:				; XREF: Obj39_Main
0000D7E2 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D7E8 5428 0024                  		addq.b	#2,$24(a0)
0000D7EC 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000D7F2 4A38 FE18                  		tst.b	($FFFFFE18).w
0000D7F6 6600                       		bne.s	@nocontinues
0000D7F8 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
0000D7FE                            
0000D7FE                            	@nocontinues:
0000D7FE 4E75                       		rts	
0000D800                            ; ===========================================================================
0000D800                            
0000D800                            Obj39_Wait:				; XREF: Obj39_Index
0000D800 1038 F605                  		move.b	($FFFFF605).w,d0
0000D804 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D808 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D80A 0828 0000 001A             		btst	#0,$1A(a0)
0000D810 6600                       		bne.s	Obj39_Display
0000D812 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D816 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D818 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D81C 6000 0000                  		bra.w	DisplaySprite
0000D820                            ; ===========================================================================
0000D820                            
0000D820                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D820 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D824 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D826 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D82C 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D830 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D832 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D838 6000                       		bra.s	Obj39_Display
0000D83A                            ; ===========================================================================
0000D83A                            
0000D83A                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D83A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D840                            
0000D840                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D840 6000 0000                  		bra.w	DisplaySprite
0000D844                            ; ===========================================================================
0000D844                            ; ---------------------------------------------------------------------------
0000D844                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D844                            ; ---------------------------------------------------------------------------
0000D844                            
0000D844                            Obj3A:					; XREF: Obj_Index
0000D844 7000                       		moveq	#0,d0
0000D846 1028 0024                  		move.b	$24(a0),d0
0000D84A 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D84E 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D852                            ; ===========================================================================
0000D852 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D854 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D856 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D858 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D85A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D85C 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D85E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D860 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D862 0000                       		dc.w loc_C766-Obj3A_Index
0000D864                            ; ===========================================================================
0000D864                            
0000D864                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D864 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D868 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D86A 4E75                       		rts	
0000D86C                            ; ===========================================================================
0000D86C                            
0000D86C                            Obj3A_Main:
0000D86C 2248                       		movea.l	a0,a1
0000D86E 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D874 7206                       		moveq	#6,d1
0000D876                            
0000D876                            Obj3A_Loop:
0000D876 12BC 003A                  		move.b	#$3A,0(a1)
0000D87A 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D87E 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D882 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D886 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D88A 135A 0024                  		move.b	(a2)+,$24(a1)
0000D88E 101A                       		move.b	(a2)+,d0
0000D890 0C00 0006                  		cmpi.b	#6,d0
0000D894 6600                       		bne.s	loc_C5CA
0000D896 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D89A                            
0000D89A                            loc_C5CA:
0000D89A 1340 001A                  		move.b	d0,$1A(a1)
0000D89E 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D8A6 337C 8580 0002             		move.w	#$8580,2(a1)
0000D8AC 137C 0000 0001             		move.b	#0,1(a1)
0000D8B2 43E9 0040                  		lea	$40(a1),a1
0000D8B6 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D8BA                            
0000D8BA                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D8BA 7210                       		moveq	#$10,d1		; set horizontal speed
0000D8BC 3028 0030                  		move.w	$30(a0),d0
0000D8C0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D8C4 6700                       		beq.s	loc_C61A	; if yes, branch
0000D8C6 6C00                       		bge.s	Obj3A_Move
0000D8C8 4441                       		neg.w	d1
0000D8CA                            
0000D8CA                            Obj3A_Move:
0000D8CA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D8CE                            
0000D8CE                            loc_C5FE:				; XREF: loc_C61A
0000D8CE 3028 0008                  		move.w	8(a0),d0
0000D8D2 6B00                       		bmi.s	locret_C60E
0000D8D4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D8D8 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D8DA 6000 0000                  		bra.w	DisplaySprite
0000D8DE                            ; ===========================================================================
0000D8DE                            
0000D8DE                            locret_C60E:
0000D8DE 4E75                       		rts	
0000D8E0                            ; ===========================================================================
0000D8E0                            
0000D8E0                            loc_C610:				; XREF: loc_C61A
0000D8E0 117C 000E 0024             		move.b	#$E,$24(a0)
0000D8E6 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D8EA                            ; ===========================================================================
0000D8EA                            
0000D8EA                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D8EA 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D8F0 67EE                       		beq.s	loc_C610
0000D8F2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D8F8 66D4                       		bne.s	loc_C5FE
0000D8FA 5428 0024                  		addq.b	#2,$24(a0)
0000D8FE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D904                            
0000D904                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D904 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D908 6600                       		bne.s	Obj3A_Display
0000D90A 5428 0024                  		addq.b	#2,$24(a0)
0000D90E                            
0000D90E                            Obj3A_Display:
0000D90E 6000 0000                  		bra.w	DisplaySprite
0000D912                            ; ===========================================================================
0000D912                            
0000D912                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D912 6100 0000                  		bsr.w	DisplaySprite
0000D916 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D91C 7000                       		moveq	#0,d0
0000D91E 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D922 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D924 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D928 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D92E                            
0000D92E                            Obj3A_RingBonus:
0000D92E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D932 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D934 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D938 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D93E                            
0000D93E                            Obj3A_ChkBonus:
0000D93E 4A40                       		tst.w	d0		; is there any bonus?
0000D940 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D942 303C 00C5                  		move.w	#$C5,d0
0000D946 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D94C 5428 0024                  		addq.b	#2,$24(a0)
0000D950 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D956 6600                       		bne.s	Obj3A_SetDelay
0000D958 5828 0024                  		addq.b	#4,$24(a0)
0000D95C                            
0000D95C                            Obj3A_SetDelay:
0000D95C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D962                            
0000D962                            locret_C692:
0000D962 4E75                       		rts	
0000D964                            ; ===========================================================================
0000D964                            
0000D964                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D964 4EB9 0000 0000             		jsr	AddPoints
0000D96A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D96E 0200 0003                  		andi.b	#3,d0
0000D972 66EE                       		bne.s	locret_C692
0000D974 303C 00CD                  		move.w	#$CD,d0
0000D978 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D97E                            ; ===========================================================================
0000D97E                            
0000D97E                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D97E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D982 0240 0007                  		andi.w	#7,d0
0000D986 E748                       		lsl.w	#3,d0
0000D988 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D98C 0241 0003                  		andi.w	#3,d1
0000D990 D241                       		add.w	d1,d1
0000D992 D041                       		add.w	d1,d0
0000D994 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D998 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D99C 4A40                       		tst.w	d0
0000D99E 6600                       		bne.s	Obj3A_ChkSS
0000D9A0 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to level (00)
0000D9A6 6000                       		bra.s	Obj3A_Display2
0000D9A8                            ; ===========================================================================
0000D9A8                            
0000D9A8                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D9A8 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D9AC 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D9B0 6700                       		beq.s	loc_C6EA	; if not, branch
0000D9B2 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D9B8 6000                       		bra.s	Obj3A_Display2
0000D9BA                            ; ===========================================================================
0000D9BA                            
0000D9BA                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D9BA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D9C0                            
0000D9C0                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D9C0 6000 0000                  		bra.w	DisplaySprite
0000D9C4                            ; ===========================================================================
0000D9C4                            ; ---------------------------------------------------------------------------
0000D9C4                            ; Level	order array
0000D9C4                            ; ---------------------------------------------------------------------------
0000D9C4                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D9F4                            		even
0000D9F4                            ; ===========================================================================
0000D9F4                            
0000D9F4                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D9F4 7220                       		moveq	#$20,d1		; set horizontal speed
0000D9F6 3028 0032                  		move.w	$32(a0),d0
0000D9FA B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D9FE 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000DA00 6C00                       		bge.s	Obj3A_Move2
0000DA02 4441                       		neg.w	d1
0000DA04                            
0000DA04                            Obj3A_Move2:
0000DA04 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DA08 3028 0008                  		move.w	8(a0),d0
0000DA0C 6B00                       		bmi.s	locret_C748
0000DA0E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DA12 6400                       		bcc.s	locret_C748	; if yes, branch
0000DA14 6000 0000                  		bra.w	DisplaySprite
0000DA18                            ; ===========================================================================
0000DA18                            
0000DA18                            locret_C748:
0000DA18 4E75                       		rts	
0000DA1A                            ; ===========================================================================
0000DA1A                            
0000DA1A                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000DA1A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000DA20 6600 0000                  		bne.w	DeleteObject
0000DA24 5428 0024                  		addq.b	#2,$24(a0)
0000DA28 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000DA2C 303C 008D                  		move.w	#$8D,d0
0000DA30 4EF9 0000 11F0             		jmp	(PlaySound).l	; play FZ music
0000DA36                            ; ===========================================================================
0000DA36                            
0000DA36                            loc_C766:				; XREF: Obj3A_Index
0000DA36 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000DA3A 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000DA40 6700 0000                  		beq.w	DeleteObject
0000DA44 4E75                       		rts	
0000DA46                            ; ===========================================================================
0000DA46 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000DA4C 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000DA4E FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000DA54 0201                       		dc.b 2,	1
0000DA56 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000DA5C 0206                       		dc.b 2,	6
0000DA5E 0520 0120 00EC             		dc.w $520, $120, $EC
0000DA64 0202                       		dc.b 2,	2
0000DA66 0540 0120 00FC             		dc.w $540, $120, $FC
0000DA6C 0203                       		dc.b 2,	3
0000DA6E 0560 0120 010C             		dc.w $560, $120, $10C
0000DA74 0204                       		dc.b 2,	4
0000DA76 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000DA7C 0205                       		dc.b 2,	5
0000DA7E                            ; ===========================================================================
0000DA7E                            ; ---------------------------------------------------------------------------
0000DA7E                            ; Object 7E - special stage results screen
0000DA7E                            ; ---------------------------------------------------------------------------
0000DA7E                            
0000DA7E                            Obj7E:					; XREF: Obj_Index
0000DA7E 7000                       		moveq	#0,d0
0000DA80 1028 0024                  		move.b	$24(a0),d0
0000DA84 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000DA88 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000DA8C                            ; ===========================================================================
0000DA8C 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000DA8E 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000DA90 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DA92 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000DA94 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DA96 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000DA98 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DA9A 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000DA9C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DA9E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000DAA0 0000                       		dc.w loc_C91A-Obj7E_Index
0000DAA2                            ; ===========================================================================
0000DAA2                            
0000DAA2                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000DAA2 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DAA6 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000DAA8 4E75                       		rts	
0000DAAA                            ; ===========================================================================
0000DAAA                            
0000DAAA                            Obj7E_Main:
0000DAAA 2248                       		movea.l	a0,a1
0000DAAC 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000DAB2 7203                       		moveq	#3,d1
0000DAB4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000DABA 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000DABC 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000DABE                            
0000DABE                            Obj7E_Loop:
0000DABE 12BC 007E                  		move.b	#$7E,0(a1)
0000DAC2 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000DAC6 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000DACA 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000DACE 135A 0024                  		move.b	(a2)+,$24(a1)
0000DAD2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000DAD6 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000DADE 337C A580 0002             		move.w	#$A580,2(a1)
0000DAE4 137C 0000 0001             		move.b	#0,1(a1)
0000DAEA 43E9 0040                  		lea	$40(a1),a1
0000DAEE 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000DAF2                            
0000DAF2 7007                       		moveq	#7,d0
0000DAF4 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000DAF8 6700                       		beq.s	loc_C842
0000DAFA 7000                       		moveq	#0,d0
0000DAFC 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000DB00 6600                       		bne.s	loc_C842	; if not, branch
0000DB02 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000DB04 317C 0018 0008             		move.w	#$18,8(a0)
0000DB0A 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000DB10                            
0000DB10                            loc_C842:
0000DB10 1140 001A                  		move.b	d0,$1A(a0)
0000DB14                            
0000DB14                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000DB14 7210                       		moveq	#$10,d1		; set horizontal speed
0000DB16 3028 0030                  		move.w	$30(a0),d0
0000DB1A B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000DB1E 6700                       		beq.s	loc_C86C	; if yes, branch
0000DB20 6C00                       		bge.s	Obj7E_Move
0000DB22 4441                       		neg.w	d1
0000DB24                            
0000DB24                            Obj7E_Move:
0000DB24 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DB28                            
0000DB28                            loc_C85A:				; XREF: loc_C86C
0000DB28 3028 0008                  		move.w	8(a0),d0
0000DB2C 6B00                       		bmi.s	locret_C86A
0000DB2E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DB32 6400                       		bcc.s	locret_C86A	; if yes, branch
0000DB34 6000 0000                  		bra.w	DisplaySprite
0000DB38                            ; ===========================================================================
0000DB38                            
0000DB38                            locret_C86A:
0000DB38 4E75                       		rts	
0000DB3A                            ; ===========================================================================
0000DB3A                            
0000DB3A                            loc_C86C:				; XREF: Obj7E_ChkPos
0000DB3A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DB40 66E6                       		bne.s	loc_C85A
0000DB42 5428 0024                  		addq.b	#2,$24(a0)
0000DB46 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DB4C 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000DB52                            
0000DB52                            Obj7E_Wait:				; XREF: Obj7E_Index
0000DB52 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DB56 6600                       		bne.s	Obj7E_Display
0000DB58 5428 0024                  		addq.b	#2,$24(a0)
0000DB5C                            
0000DB5C                            Obj7E_Display:
0000DB5C 6000 0000                  		bra.w	DisplaySprite
0000DB60                            ; ===========================================================================
0000DB60                            
0000DB60                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000DB60 6100 0000                  		bsr.w	DisplaySprite
0000DB64 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000DB6A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000DB6E 6700                       		beq.s	loc_C8C4	; if yes, branch
0000DB70 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000DB76 700A                       		moveq	#10,d0		; add 10 to score
0000DB78 4EB9 0000 0000             		jsr	AddPoints
0000DB7E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DB82 0200 0003                  		andi.b	#3,d0
0000DB86 6600                       		bne.s	locret_C8EA
0000DB88 303C 00CD                  		move.w	#$CD,d0
0000DB8C 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000DB92                            ; ===========================================================================
0000DB92                            
0000DB92                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000DB92 303C 00C5                  		move.w	#$C5,d0
0000DB96 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000DB9C 5428 0024                  		addq.b	#2,$24(a0)
0000DBA0 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DBA6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000DBAC 6500                       		bcs.s	locret_C8EA	; if not, branch
0000DBAE 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000DBB4 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000DBB8                            
0000DBB8                            locret_C8EA:
0000DBB8 4E75                       		rts	
0000DBBA                            ; ===========================================================================
0000DBBA                            
0000DBBA                            Obj7E_Exit:				; XREF: Obj7E_Index
0000DBBA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DBC0 6000 0000                  		bra.w	DisplaySprite
0000DBC4                            ; ===========================================================================
0000DBC4                            
0000DBC4                            Obj7E_Continue:				; XREF: Obj7E_Index
0000DBC4 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000DBCA 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000DBD0 303C 00BF                  		move.w	#$BF,d0
0000DBD4 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play continues music
0000DBDA 5428 0024                  		addq.b	#2,$24(a0)
0000DBDE 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000DBE4 6000 0000                  		bra.w	DisplaySprite
0000DBE8                            ; ===========================================================================
0000DBE8                            
0000DBE8                            loc_C91A:				; XREF: Obj7E_Index
0000DBE8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DBEC 0200 000F                  		andi.b	#$F,d0
0000DBF0 6600                       		bne.s	Obj7E_Display2
0000DBF2 0868 0000 001A             		bchg	#0,$1A(a0)
0000DBF8                            
0000DBF8                            Obj7E_Display2:
0000DBF8 6000 0000                  		bra.w	DisplaySprite
0000DBFC                            ; ===========================================================================
0000DBFC 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000DC02 0200                       		dc.b 2,	0		; rountine number, frame number
0000DC04 0320 0120 0118             		dc.w $320, $120, $118
0000DC0A 0201                       		dc.b 2,	1
0000DC0C 0360 0120 0128             		dc.w $360, $120, $128
0000DC12 0202                       		dc.b 2,	2
0000DC14 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000DC1A 0203                       		dc.b 2,	3
0000DC1C 03A0 0120 0138             		dc.w $3A0, $120, $138
0000DC22 0206                       		dc.b 2,	6
0000DC24                            ; ===========================================================================
0000DC24                            ; ---------------------------------------------------------------------------
0000DC24                            ; Object 7F - chaos emeralds from the special stage results screen
0000DC24                            ; ---------------------------------------------------------------------------
0000DC24                            
0000DC24                            Obj7F:					; XREF: Obj_Index
0000DC24 7000                       		moveq	#0,d0
0000DC26 1028 0024                  		move.b	$24(a0),d0
0000DC2A 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000DC2E 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000DC32                            ; ===========================================================================
0000DC32 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000DC34 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000DC36                            
0000DC36                            ; ---------------------------------------------------------------------------
0000DC36                            ; X-axis positions for chaos emeralds
0000DC36                            ; ---------------------------------------------------------------------------
0000DC36 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000DC42                            ; ===========================================================================
0000DC42                            
0000DC42                            Obj7F_Main:				; XREF: Obj7F_Index
0000DC42 2248                       		movea.l	a0,a1
0000DC44 45F9 0000 DC36             		lea	(Obj7F_PosData).l,a2
0000DC4A 7400                       		moveq	#0,d2
0000DC4C 7200                       		moveq	#0,d1
0000DC4E 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000DC52 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000DC54 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000DC58                            
0000DC58                            Obj7F_Loop:
0000DC58 12BC 007F                  		move.b	#$7F,0(a1)
0000DC5C 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000DC60 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000DC66 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000DC6A 1633 2000                  		move.b	(a3,d2.w),d3
0000DC6E 1343 001A                  		move.b	d3,$1A(a1)
0000DC72 1343 001C                  		move.b	d3,$1C(a1)
0000DC76 5202                       		addq.b	#1,d2
0000DC78 5429 0024                  		addq.b	#2,$24(a1)
0000DC7C 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000DC84 337C 8541 0002             		move.w	#$8541,2(a1)
0000DC8A 137C 0000 0001             		move.b	#0,1(a1)
0000DC90 43E9 0040                  		lea	$40(a1),a1	; next object
0000DC94 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000DC98                            
0000DC98                            Obj7F_Flash:				; XREF: Obj7F_Index
0000DC98 1028 001A                  		move.b	$1A(a0),d0
0000DC9C 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000DCA2 0C00 0006                  		cmpi.b	#6,d0
0000DCA6 6600                       		bne.s	Obj7F_Display
0000DCA8 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000DCAE                            
0000DCAE                            Obj7F_Display:
0000DCAE 6000 0000                  		bra.w	DisplaySprite
0000DCB2                            ; ===========================================================================
0000DCB2                            ; ---------------------------------------------------------------------------
0000DCB2                            ; Sprite mappings - zone title cards
0000DCB2                            ; ---------------------------------------------------------------------------
0000DCB2 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000DCB4 0000                       		dc.w byte_CA2C-Map_obj34
0000DCB6 0000                       		dc.w byte_CA5A-Map_obj34
0000DCB8 0000                       		dc.w byte_CA7A-Map_obj34
0000DCBA 0000                       		dc.w byte_CAA8-Map_obj34
0000DCBC 0000                       		dc.w byte_CADC-Map_obj34
0000DCBE 0000                       		dc.w byte_CB10-Map_obj34
0000DCC0 0000                       		dc.w byte_CB26-Map_obj34
0000DCC2 0000                       		dc.w byte_CB31-Map_obj34
0000DCC4 0000                       		dc.w byte_CB3C-Map_obj34
0000DCC6 0000                       		dc.w byte_CB47-Map_obj34
0000DCC8 0000                       		dc.w byte_CB8A-Map_obj34
0000DCCA 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000DCCB F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000DCD0 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000DCD5 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000DCDA F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000DCDF F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DCE4 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000DCE9 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000DCEE F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000DCF3 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000DCF8 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000DCF9 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000DCFE F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000DD03 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000DD08 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000DD0D F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000DD12 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000DD17 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000DD1C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DD21 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000DD26 06                         byte_CA5A:	dc.b 6			; MARBLE
0000DD27 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000DD2C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DD31 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000DD36 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000DD3B F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000DD40 F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000DD45 00                         		dc.b 0
0000DD46 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000DD47 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000DD4C F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000DD51 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000DD56 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000DD5B F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000DD60 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000DD65 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000DD6A F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000DD6F F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000DD74 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000DD75 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DD7A F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000DD7F F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DD84 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DD89 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000DD8E F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000DD93 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000DD98 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000DD9D F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000DDA2 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000DDA7 00                         		dc.b 0
0000DDA8 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000DDA9 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DDAE F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000DDB3 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DDB8 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000DDBD F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000DDC2 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000DDC7 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000DDCC F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000DDD1 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000DDD6 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000DDDB 00                         		dc.b 0
0000DDDC 04                         byte_CB10:	dc.b 4			; ZONE
0000DDDD F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000DDE2 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000DDE7 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000DDEC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DDF1 00                         		dc.b 0
0000DDF2 02                         byte_CB26:	dc.b 2			; ACT 1
0000DDF3 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DDF8 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000DDFD 02                         byte_CB31:	dc.b 2			; ACT 2
0000DDFE 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE03 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000DE08 02                         byte_CB3C:	dc.b 2			; ACT 3
0000DE09 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE0E F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000DE13 0D                         byte_CB47:	dc.b $D			; Oval
0000DE14 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000DE19 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000DE1E EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000DE23 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000DE28 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000DE2D 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000DE32 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000DE37 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000DE3C EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000DE41 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000DE46 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000DE4B 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000DE50 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000DE55 00                         		dc.b 0
0000DE56 05                         byte_CB8A:	dc.b 5			; FINAL
0000DE57 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000DE5C F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000DE61 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DE66 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000DE6B F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000DE70                            		even
0000DE70                            ; ---------------------------------------------------------------------------
0000DE70                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DE70                            ; ---------------------------------------------------------------------------
0000DE70                            Map_obj39:
0000DE70                            	include "_maps\obj39.asm"
0000DE70                            ; ---------------------------------------------------------------------------
0000DE70                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DE70                            ; ---------------------------------------------------------------------------
0000DE70 0000                       		dc.w byte_CBAC-Map_obj39
0000DE72 0000                       		dc.w byte_CBB7-Map_obj39
0000DE74 0000                       		dc.w byte_CBC2-Map_obj39
0000DE76 0000                       		dc.w byte_CBCD-Map_obj39
0000DE78 02                         byte_CBAC:	dc.b 2
0000DE79 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000DE7E F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000DE83 02                         byte_CBB7:	dc.b 2
0000DE84 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000DE89 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000DE8E 02                         byte_CBC2:	dc.b 2
0000DE8F F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000DE94 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000DE99 02                         byte_CBCD:	dc.b 2
0000DE9A F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000DE9F F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000DEA4                            		even
0000DEA4                            		even
0000DEA4                            
0000DEA4                            ; ---------------------------------------------------------------------------
0000DEA4                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000DEA4                            ; ---------------------------------------------------------------------------
0000DEA4 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000DEA6 0000                       		dc.w byte_CC13-Map_obj3A
0000DEA8 0000                       		dc.w byte_CC32-Map_obj3A
0000DEAA 0000                       		dc.w byte_CC51-Map_obj3A
0000DEAC 0000                       		dc.w byte_CC75-Map_obj3A
0000DEAE FF6F                       		dc.w byte_CB47-Map_obj3A
0000DEB0 FF4E                       		dc.w byte_CB26-Map_obj3A
0000DEB2 FF59                       		dc.w byte_CB31-Map_obj3A
0000DEB4 FF64                       		dc.w byte_CB3C-Map_obj3A
0000DEB6 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000DEB7 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000DEBC F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000DEC1 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000DEC6 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000DECB F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000DED0 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000DED5 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000DEDA F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000DEDF 06                         byte_CC13:	dc.b 6			; PASSED
0000DEE0 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000DEE5 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DEEA F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000DEEF F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000DEF4 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DEF9 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000DEFE 06                         byte_CC32:	dc.b 6			; SCORE
0000DEFF F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DF04 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DF09 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DF0E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DF13 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DF18 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DF1D 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000DF1E F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000DF23 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DF28 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DF2D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DF32 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DF37 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000DF3C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DF41 07                         byte_CC75:	dc.b 7			; RING BONUS
0000DF42 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DF47 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DF4C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DF51 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DF56 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DF5B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DF60 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DF66 00                         		even
0000DF66                            ; ---------------------------------------------------------------------------
0000DF66                            ; Sprite mappings - special stage results screen
0000DF66                            ; ---------------------------------------------------------------------------
0000DF66 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000DF68 0000                       		dc.w byte_CCEE-Map_obj7E
0000DF6A 0000                       		dc.w byte_CD0D-Map_obj7E
0000DF6C FEAD                       		dc.w byte_CB47-Map_obj7E
0000DF6E 0000                       		dc.w byte_CD31-Map_obj7E
0000DF70 0000                       		dc.w byte_CD46-Map_obj7E
0000DF72 0000                       		dc.w byte_CD5B-Map_obj7E
0000DF74 0000                       		dc.w byte_CD6B-Map_obj7E
0000DF76 0000                       		dc.w byte_CDA8-Map_obj7E
0000DF78 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000DF79 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000DF7E F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000DF83 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000DF88 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000DF8D F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000DF92 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000DF97 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000DF9C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DFA1 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000DFA6 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000DFAB F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000DFB0 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000DFB5 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000DFBA 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000DFBB F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DFC0 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DFC5 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DFCA F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DFCF F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DFD4 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DFD9 07                         byte_CD0D:	dc.b 7
0000DFDA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DFDF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DFE4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DFE9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DFEE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DFF3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DFF8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DFFD 04                         byte_CD31:	dc.b 4
0000DFFE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E003 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E008 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E00D F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000E012 04                         byte_CD46:	dc.b 4
0000E013 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E018 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E01D F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E022 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000E027 03                         byte_CD5B:	dc.b 3
0000E028 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E02D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E032 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E037 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000E038 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000E03D F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000E042 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000E047 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000E04C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E051 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000E056 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000E05B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000E060 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E065 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000E06A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000E06F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000E074 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000E075 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000E07A F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000E07F F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000E084 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000E089 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000E08E F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000E093 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000E098 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000E09D F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000E0A2 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000E0A7 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000E0AC F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000E0B1 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000E0B6 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000E0BB F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000E0C0                            		even
0000E0C0                            ; ---------------------------------------------------------------------------
0000E0C0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E0C0                            ; ---------------------------------------------------------------------------
0000E0C0                            Map_obj7F:
0000E0C0                            	include "_maps\obj7F.asm"
0000E0C0                            ; ---------------------------------------------------------------------------
0000E0C0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E0C0                            ; ---------------------------------------------------------------------------
0000E0C0 0000                       		dc.w byte_CE02-Map_obj7F
0000E0C2 0000                       		dc.w byte_CE08-Map_obj7F
0000E0C4 0000                       		dc.w byte_CE0E-Map_obj7F
0000E0C6 0000                       		dc.w byte_CE14-Map_obj7F
0000E0C8 0000                       		dc.w byte_CE1A-Map_obj7F
0000E0CA 0000                       		dc.w byte_CE20-Map_obj7F
0000E0CC 0000                       		dc.w byte_CE26-Map_obj7F
0000E0CE 01                         byte_CE02:	dc.b 1
0000E0CF F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8
0000E0D4 01                         byte_CE08:	dc.b 1
0000E0D5 F805 2000 F8               		dc.b $F8, 5, $20,	0, $F8
0000E0DA 01                         byte_CE0E:	dc.b 1
0000E0DB F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000E0E0 01                         byte_CE14:	dc.b 1
0000E0E1 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000E0E6 01                         byte_CE1A:	dc.b 1
0000E0E7 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8
0000E0EC 01                         byte_CE20:	dc.b 1
0000E0ED F805 000C F8               		dc.b $F8, 5, 0, $C, $F8
0000E0F2 00                         byte_CE26:	dc.b 0			; Blank frame
0000E0F4 00                         		even
0000E0F4 00                         		even
0000E0F4                            
0000E0F4                            ; ===========================================================================
0000E0F4                            ; ---------------------------------------------------------------------------
0000E0F4                            ; Object 36 - spikes
0000E0F4                            ; ---------------------------------------------------------------------------
0000E0F4                            
0000E0F4                            Obj36:					; XREF: Obj_Index
0000E0F4 7000                       		moveq	#0,d0
0000E0F6 1028 0024                  		move.b	$24(a0),d0
0000E0FA 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000E0FE 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000E102                            ; ===========================================================================
0000E102 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000E104 0000                       		dc.w Obj36_Solid-Obj36_Index
0000E106                            
0000E106 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000E108 0110                       		dc.b 1,	$10
0000E10A 0204                       		dc.b 2,	4
0000E10C 031C                       		dc.b 3,	$1C
0000E10E 0440                       		dc.b 4,	$40
0000E110 0510                       		dc.b 5,	$10
0000E112                            ; ===========================================================================
0000E112                            
0000E112                            Obj36_Main:				; XREF: Obj36_Index
0000E112 5428 0024                  		addq.b	#2,$24(a0)
0000E116 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000E11E 317C 051B 0002             		move.w	#$51B,2(a0)
0000E124 0028 0004 0001             		ori.b	#4,1(a0)
0000E12A 117C 0004 0018             		move.b	#4,$18(a0)
0000E130 1028 0028                  		move.b	$28(a0),d0
0000E134 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E13A 0240 00F0                  		andi.w	#$F0,d0
0000E13E 43F9 0000 E106             		lea	(Obj36_Var).l,a1
0000E144 E648                       		lsr.w	#3,d0
0000E146 D2C0                       		adda.w	d0,a1
0000E148 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E14C 1159 0019                  		move.b	(a1)+,$19(a0)
0000E150 3168 0008 0030             		move.w	8(a0),$30(a0)
0000E156 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000E15C                            
0000E15C                            Obj36_Solid:				; XREF: Obj36_Index
0000E15C 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000E160 343C 0004                  		move.w	#4,d2
0000E164 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000E16A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000E16C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000E172 6600                       		bne.s	Obj36_Upright	; if not, branch
0000E174 343C 0014                  		move.w	#$14,d2
0000E178                            
0000E178                            ; Spikes types $1x and $5x face	sideways
0000E178                            
0000E178                            Obj36_SideWays:				; XREF: Obj36_Solid
0000E178 323C 001B                  		move.w	#$1B,d1
0000E17C 3602                       		move.w	d2,d3
0000E17E 5243                       		addq.w	#1,d3
0000E180 3828 0008                  		move.w	8(a0),d4
0000E184 6100 0000                  		bsr.w	SolidObject
0000E188 0828 0003 0022             		btst	#3,$22(a0)
0000E18E 6600                       		bne.s	Obj36_Display
0000E190 0C44 0001                  		cmpi.w	#1,d4
0000E194 6700                       		beq.s	Obj36_Hurt
0000E196 6000                       		bra.s	Obj36_Display
0000E198                            ; ===========================================================================
0000E198                            
0000E198                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E198                            
0000E198                            Obj36_Upright:				; XREF: Obj36_Solid
0000E198 7200                       		moveq	#0,d1
0000E19A 1228 0019                  		move.b	$19(a0),d1
0000E19E 0641 000B                  		addi.w	#$B,d1
0000E1A2 343C 0010                  		move.w	#$10,d2
0000E1A6 363C 0011                  		move.w	#$11,d3
0000E1AA 3828 0008                  		move.w	8(a0),d4
0000E1AE 6100 0000                  		bsr.w	SolidObject
0000E1B2 0828 0003 0022             		btst	#3,$22(a0)
0000E1B8 6600                       		bne.s	Obj36_Hurt
0000E1BA 4A44                       		tst.w	d4
0000E1BC 6A00                       		bpl.s	Obj36_Display
0000E1BE                            
0000E1BE                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E1BE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E1C2 6600                       		bne.s	Obj36_PreDisplay	; if yes, branch
0000E1C4 2F08                       		move.l	a0,-(sp)
0000E1C6 2448                       		movea.l	a0,a2
0000E1C8 41F8 D000                  		lea	($FFFFD000).w,a0
0000E1CC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E1D2 6400                       		bcc.s	loc_CF20
0000E1D4 2628 000C                  		move.l	$C(a0),d3
0000E1D8 3028 0012                  		move.w	$12(a0),d0
0000E1DC 48C0                       		ext.l	d0
0000E1DE E180                       		asl.l	#8,d0
0000E1E0 9680                       		sub.l	d0,d3
0000E1E2 2143 000C                  		move.l	d3,$C(a0)
0000E1E6 4EB9 0000 0000             		jsr	HurtSonic
0000E1EC                            
0000E1EC                            loc_CF20:
0000E1EC 205F                       		movea.l	(sp)+,a0
0000E1EE 6000                       		bra.s	Obj36_Display
0000E1F0                            
0000E1F0                            Obj36_PreDisplay:
0000E1F0 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0000E1F6 6E00                       		bgt.s	Obj36_Display
0000E1F8 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0000E1FE 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000E204                            
0000E204                            Obj36_Display:
0000E204 6100 0000                  		bsr.w	DisplaySprite
0000E208 3028 0030                  		move.w	$30(a0),d0
0000E20C 0240 FF80                  		andi.w	#$FF80,d0
0000E210 3238 F700                  		move.w	($FFFFF700).w,d1
0000E214 0441 0080                  		subi.w	#$80,d1
0000E218 0241 FF80                  		andi.w	#$FF80,d1
0000E21C 9041                       		sub.w	d1,d0
0000E21E 0C40 0280                  		cmpi.w	#$280,d0
0000E222 6300                       		bls.s	Obj36_NoDel
0000E224 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E228 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E22C 3440                       		movea.w	d0,a2	; load address into a2
0000E22E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E232 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E236                            
0000E236                            Obj36_NoDel:
0000E236 4E75                       		rts	
0000E238                            ; ===========================================================================
0000E238                            
0000E238                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E238 7000                       		moveq	#0,d0
0000E23A 1028 0028                  		move.b	$28(a0),d0
0000E23E D040                       		add.w	d0,d0
0000E240 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E244 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E248                            ; ===========================================================================
0000E248 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E24A 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E24C 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E24E                            ; ===========================================================================
0000E24E                            
0000E24E                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E24E 4E75                       		rts			; don't move the object
0000E250                            ; ===========================================================================
0000E250                            
0000E250                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E250 6100 0000                  		bsr.w	Obj36_Wait
0000E254 7000                       		moveq	#0,d0
0000E256 1028 0034                  		move.b	$34(a0),d0
0000E25A D068 0032                  		add.w	$32(a0),d0
0000E25E 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E262 4E75                       		rts	
0000E264                            ; ===========================================================================
0000E264                            
0000E264                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E264 6100 0000                  		bsr.w	Obj36_Wait
0000E268 7000                       		moveq	#0,d0
0000E26A 1028 0034                  		move.b	$34(a0),d0
0000E26E D068 0030                  		add.w	$30(a0),d0
0000E272 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E276 4E75                       		rts	
0000E278                            ; ===========================================================================
0000E278                            
0000E278                            Obj36_Wait:
0000E278 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E27C 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E27E 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E282 6600                       		bne.s	locret_CFE6
0000E284 4A28 0001                  		tst.b	1(a0)
0000E288 6A00                       		bpl.s	locret_CFE6
0000E28A 303C 00B6                  		move.w	#$B6,d0
0000E28E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E294 6000                       		bra.s	locret_CFE6
0000E296                            ; ===========================================================================
0000E296                            
0000E296                            loc_CFA4:
0000E296 4A68 0036                  		tst.w	$36(a0)
0000E29A 6700                       		beq.s	loc_CFC6
0000E29C 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E2A2 6400                       		bcc.s	locret_CFE6
0000E2A4 317C 0000 0034             		move.w	#0,$34(a0)
0000E2AA 317C 0000 0036             		move.w	#0,$36(a0)
0000E2B0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E2B6 6000                       		bra.s	locret_CFE6
0000E2B8                            ; ===========================================================================
0000E2B8                            
0000E2B8                            loc_CFC6:
0000E2B8 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E2BE 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E2C4 6500                       		bcs.s	locret_CFE6
0000E2C6 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E2CC 317C 0001 0036             		move.w	#1,$36(a0)
0000E2D2 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E2D8                            
0000E2D8                            locret_CFE6:
0000E2D8 4E75                       		rts	
0000E2DA                            ; ===========================================================================
0000E2DA                            ; ---------------------------------------------------------------------------
0000E2DA                            ; Sprite mappings - spikes
0000E2DA                            ; ---------------------------------------------------------------------------
0000E2DA                            Map_obj36:
0000E2DA                            	include "_maps\obj36.asm"
0000E2DA                            ; ---------------------------------------------------------------------------
0000E2DA                            ; Sprite mappings - spikes
0000E2DA                            ; ---------------------------------------------------------------------------
0000E2DA 0000                       		dc.w byte_CFF4-Map_obj36
0000E2DC 0000                       		dc.w byte_D004-Map_obj36
0000E2DE 0000                       		dc.w byte_D014-Map_obj36
0000E2E0 0000                       		dc.w byte_D01A-Map_obj36
0000E2E2 0000                       		dc.w byte_D02A-Map_obj36
0000E2E4 0000                       		dc.w byte_D049-Map_obj36
0000E2E6 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000E2E7 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000E2EC F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E2F1 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000E2F6 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000E2F7 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000E2FC FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E301 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000E306 01                         byte_D014:	dc.b 1			; 1 spike
0000E307 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E30C 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000E30D F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000E312 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E317 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000E31C 06                         byte_D02A:	dc.b 6			; 6 spikes
0000E31D F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000E322 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000E327 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000E32C F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000E331 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000E336 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000E33B 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000E33C FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E342 00                         		even
0000E342 00                         		even
0000E342                            
0000E342                            ; ===========================================================================
0000E342                            ; ---------------------------------------------------------------------------
0000E342                            ; Object 3B - purple rock (GHZ)
0000E342                            ; ---------------------------------------------------------------------------
0000E342                            
0000E342                            Obj3B:					; XREF: Obj_Index
0000E342 7000                       		moveq	#0,d0
0000E344 1028 0024                  		move.b	$24(a0),d0
0000E348 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000E34C 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000E350                            ; ===========================================================================
0000E350 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000E352 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000E354                            ; ===========================================================================
0000E354                            
0000E354                            Obj3B_Main:				; XREF: Obj3B_Index
0000E354 5428 0024                  		addq.b	#2,$24(a0)
0000E358 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000E360 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000E366 117C 0004 0001             		move.b	#4,1(a0)
0000E36C 117C 0013 0019             		move.b	#$13,$19(a0)
0000E372 117C 0004 0018             		move.b	#4,$18(a0)
0000E378                            
0000E378                            Obj3B_Solid:				; XREF: Obj3B_Index
0000E378 323C 001B                  		move.w	#$1B,d1
0000E37C 343C 0010                  		move.w	#$10,d2
0000E380 363C 0010                  		move.w	#$10,d3
0000E384 3828 0008                  		move.w	8(a0),d4
0000E388 6100 0000                  		bsr.w	SolidObject
0000E38C 6100 0000                  		bsr.w	DisplaySprite
0000E390 3028 0008                  		move.w	8(a0),d0
0000E394 0240 FF80                  		andi.w	#$FF80,d0
0000E398 3238 F700                  		move.w	($FFFFF700).w,d1
0000E39C 0441 0080                  		subi.w	#$80,d1
0000E3A0 0241 FF80                  		andi.w	#$FF80,d1
0000E3A4 9041                       		sub.w	d1,d0
0000E3A6 0C40 0280                  		cmpi.w	#$280,d0
0000E3AA 6300                       		bls.s	Obj3B_NoDel
0000E3AC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E3B0 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E3B4 3440                       		movea.w	d0,a2	; load address into a2
0000E3B6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E3BA 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E3BE                            
0000E3BE                            Obj3B_NoDel:
0000E3BE 4E75                       		rts	
0000E3C0                            ; ===========================================================================
0000E3C0                            ; ---------------------------------------------------------------------------
0000E3C0                            ; Object 49 - waterfall	sound effect (GHZ)
0000E3C0                            ; ---------------------------------------------------------------------------
0000E3C0                            
0000E3C0                            Obj49:					; XREF: Obj_Index
0000E3C0 7000                       		moveq	#0,d0
0000E3C2 1028 0024                  		move.b	$24(a0),d0
0000E3C6 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000E3CA 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000E3CE                            ; ===========================================================================
0000E3CE 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000E3D0 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000E3D2                            ; ===========================================================================
0000E3D2                            
0000E3D2                            Obj49_Main:				; XREF: Obj49_Index
0000E3D2 5428 0024                  		addq.b	#2,$24(a0)
0000E3D6 117C 0004 0001             		move.b	#4,1(a0)
0000E3DC                            
0000E3DC                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000E3DC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E3E0 0200 003F                  		andi.b	#$3F,d0
0000E3E4 6600                       		bne.s	Obj49_ChkDel
0000E3E6 303C 00D0                  		move.w	#$D0,d0
0000E3EA 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000E3F0                            
0000E3F0                            Obj49_ChkDel:
0000E3F0 3028 0008                  		move.w	8(a0),d0
0000E3F4 0240 FF80                  		andi.w	#$FF80,d0
0000E3F8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E3FC 0441 0080                  		subi.w	#$80,d1
0000E400 0241 FF80                  		andi.w	#$FF80,d1
0000E404 9041                       		sub.w	d1,d0
0000E406 0C40 0280                  		cmpi.w	#$280,d0
0000E40A 6300                       		bls.s	Obj49_NoDel
0000E40C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E410 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E414 3440                       		movea.w	d0,a2	; load address into a2
0000E416 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E41A 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E41E                            
0000E41E                            Obj49_NoDel:
0000E41E 4E75                       		rts	
0000E420                            ; ===========================================================================
0000E420                            ; ---------------------------------------------------------------------------
0000E420                            ; Sprite mappings - purple rock	(GHZ)
0000E420                            ; ---------------------------------------------------------------------------
0000E420                            Map_obj3B:
0000E420                            	include "_maps\obj3B.asm"
0000E420                            ; ---------------------------------------------------------------------------
0000E420                            ; Sprite mappings - purple rock	(GHZ)
0000E420                            ; ---------------------------------------------------------------------------
0000E420 0000                       		dc.w byte_D110-Map_obj3B
0000E422 02                         byte_D110:	dc.b 2
0000E423 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000E428 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000E42E 00                         		even
0000E42E 00                         		even
0000E42E                            
0000E42E                            ; ===========================================================================
0000E42E                            ; ---------------------------------------------------------------------------
0000E42E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000E42E                            ; ---------------------------------------------------------------------------
0000E42E                            
0000E42E                            Obj3C:					; XREF: Obj_Index
0000E42E 7000                       		moveq	#0,d0
0000E430 1028 0024                  		move.b	$24(a0),d0
0000E434 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000E438 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000E43C 6000 0000                  		bra.w	MarkObjGone
0000E440                            ; ===========================================================================
0000E440 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000E442 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000E444 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000E446                            ; ===========================================================================
0000E446                            
0000E446                            Obj3C_Main:				; XREF: Obj3C_Index
0000E446 5428 0024                  		addq.b	#2,$24(a0)
0000E44A 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000E452 317C 450F 0002             		move.w	#$450F,2(a0)
0000E458 117C 0004 0001             		move.b	#4,1(a0)
0000E45E 117C 0010 0019             		move.b	#$10,$19(a0)
0000E464 117C 0004 0018             		move.b	#4,$18(a0)
0000E46A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000E470                            
0000E470                            Obj3C_Solid:				; XREF: Obj3C_Index
0000E470 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000E476 323C 001B                  		move.w	#$1B,d1
0000E47A 343C 0020                  		move.w	#$20,d2
0000E47E 363C 0020                  		move.w	#$20,d3
0000E482 3828 0008                  		move.w	8(a0),d4
0000E486 6100 0000                  		bsr.w	SolidObject
0000E48A 0828 0005 0022             		btst	#5,$22(a0)
0000E490 6600                       		bne.s	Obj3C_ChkRoll
0000E492                            
0000E492                            locret_D180:
0000E492 4E75                       		rts	
0000E494                            ; ===========================================================================
0000E494                            
0000E494                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000E494 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000E49A 66F6                       		bne.s	locret_D180	; if not, branch
0000E49C 3028 0030                  		move.w	$30(a0),d0
0000E4A0 6A00                       		bpl.s	Obj3C_ChkSpeed
0000E4A2 4440                       		neg.w	d0
0000E4A4                            
0000E4A4                            Obj3C_ChkSpeed:
0000E4A4 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000E4A8 65E8                       		bcs.s	locret_D180	; if not, branch
0000E4AA 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000E4B0 5869 0008                  		addq.w	#4,8(a1)
0000E4B4 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000E4BA 3028 0008                  		move.w	8(a0),d0
0000E4BE B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000E4C2 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000E4C4 5169 0008                  		subq.w	#8,8(a1)
0000E4C8 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000E4CE                            
0000E4CE                            Obj3C_Smash:
0000E4CE 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000E4D4 08A8 0005 0022             		bclr	#5,$22(a0)
0000E4DA 08A9 0005 0022             		bclr	#5,$22(a1)
0000E4E0 7207                       		moveq	#7,d1		; load 8 fragments
0000E4E2 343C 0070                  		move.w	#$70,d2
0000E4E6 6100                       		bsr.s	SmashObject
0000E4E8                            
0000E4E8                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000E4E8 6100 0000                  		bsr.w	SpeedToPos
0000E4EC 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000E4F2 6100 0000                  		bsr.w	DisplaySprite
0000E4F6 4A28 0001                  		tst.b	1(a0)
0000E4FA 6A00 0000                  		bpl.w	DeleteObject
0000E4FE 4E75                       		rts	
0000E500                            
0000E500                            ; ---------------------------------------------------------------------------
0000E500                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000E500                            ; ---------------------------------------------------------------------------
0000E500                            
0000E500                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E500                            
0000E500                            
0000E500                            SmashObject:				; XREF: Obj3C_Smash
0000E500 7000                       		moveq	#0,d0
0000E502 1028 001A                  		move.b	$1A(a0),d0
0000E506 D040                       		add.w	d0,d0
0000E508 2668 0004                  		movea.l	4(a0),a3
0000E50C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000E510 524B                       		addq.w	#1,a3
0000E512 08E8 0005 0001             		bset	#5,1(a0)
0000E518 1810                       		move.b	0(a0),d4
0000E51A 1A28 0001                  		move.b	1(a0),d5
0000E51E 2248                       		movea.l	a0,a1
0000E520 6000                       		bra.s	Smash_LoadFrag
0000E522                            ; ===========================================================================
0000E522                            
0000E522                            Smash_Loop:
0000E522 6100 0000                  		bsr.w	SingleObjLoad
0000E526 6600                       		bne.s	Smash_PlaySnd
0000E528 5A4B                       		addq.w	#5,a3
0000E52A                            
0000E52A                            Smash_LoadFrag:				; XREF: SmashObject
0000E52A 137C 0004 0024             		move.b	#4,$24(a1)
0000E530 1284                       		move.b	d4,0(a1)
0000E532 234B 0004                  		move.l	a3,4(a1)
0000E536 1345 0001                  		move.b	d5,1(a1)
0000E53A 3368 0008 0008             		move.w	8(a0),8(a1)
0000E540 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E546 3368 0002 0002             		move.w	2(a0),2(a1)
0000E54C 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E552 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E558 335C 0010                  		move.w	(a4)+,$10(a1)
0000E55C 335C 0012                  		move.w	(a4)+,$12(a1)
0000E560 B3C8                       		cmpa.l	a0,a1
0000E562 6400                       		bcc.s	loc_D268
0000E564 2F08                       		move.l	a0,-(sp)
0000E566 2049                       		movea.l	a1,a0
0000E568 6100 0000                  		bsr.w	SpeedToPos
0000E56C D568 0012                  		add.w	d2,$12(a0)
0000E570 205F                       		movea.l	(sp)+,a0
0000E572 6100 0000                  		bsr.w	DisplaySprite2
0000E576                            
0000E576                            loc_D268:
0000E576 51C9 FFAA                  		dbf	d1,Smash_Loop
0000E57A                            
0000E57A                            Smash_PlaySnd:
0000E57A 303C 00CB                  		move.w	#$CB,d0
0000E57E 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play smashing sound
0000E584                            ; End of function SmashObject
0000E584                            
0000E584                            ; ===========================================================================
0000E584                            ; Smashed block	fragment speeds
0000E584                            ;
0000E584 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000E588 0600 FF00                  		dc.w $600, $FF00
0000E58C 0600 0100                  		dc.w $600, $100
0000E590 0400 0500                  		dc.w $400, $500
0000E594 0600 FA00                  		dc.w $600, $FA00
0000E598 0800 FE00                  		dc.w $800, $FE00
0000E59C 0800 0200                  		dc.w $800, $200
0000E5A0 0600 0600                  		dc.w $600, $600
0000E5A4                            
0000E5A4 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000E5A8 F800 FE00                  		dc.w $F800, $FE00
0000E5AC F800 0200                  		dc.w $F800, $200
0000E5B0 FA00 0600                  		dc.w $FA00, $600
0000E5B4 FC00 FB00                  		dc.w $FC00, $FB00
0000E5B8 FA00 FF00                  		dc.w $FA00, $FF00
0000E5BC FA00 0100                  		dc.w $FA00, $100
0000E5C0 FC00 0500                  		dc.w $FC00, $500
0000E5C4                            ; ---------------------------------------------------------------------------
0000E5C4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E5C4                            ; ---------------------------------------------------------------------------
0000E5C4                            Map_obj3C:
0000E5C4                            	include "_maps\obj3C.asm"
0000E5C4                            ; ---------------------------------------------------------------------------
0000E5C4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E5C4                            ; ---------------------------------------------------------------------------
0000E5C4 0000                       		dc.w byte_D2BC-Map_obj3C
0000E5C6 0000                       		dc.w byte_D2E5-Map_obj3C
0000E5C8 0000                       		dc.w byte_D30E-Map_obj3C
0000E5CA 08                         byte_D2BC:	dc.b 8
0000E5CB E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000E5D0 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000E5D5 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000E5DA 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000E5DF E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E5E4 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E5E9 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E5EE 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E5F3 08                         byte_D2E5:	dc.b 8
0000E5F4 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E5F9 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E5FE 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E603 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E608 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E60D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E612 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E617 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E61C 08                         byte_D30E:	dc.b 8
0000E61D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E622 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E627 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E62C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E631 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000E636 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000E63B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000E640 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000E646 00                         		even
0000E646 00                         		even
0000E646                            
0000E646                            ; ---------------------------------------------------------------------------
0000E646                            ; Object code loading subroutine
0000E646                            ; ---------------------------------------------------------------------------
0000E646                            
0000E646                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E646                            
0000E646                            
0000E646                            ObjectsLoad:				; XREF: TitleScreen; et al
0000E646 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000E64A 7E7F                       		moveq	#$7F,d7
0000E64C 7000                       		moveq	#0,d0
0000E64E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000E654 6400                       		bcc.s	loc_D362
0000E656                            
0000E656                            loc_D348:
0000E656 1010                       		move.b	(a0),d0		; load object number from RAM
0000E658 6700                       		beq.s	loc_D358
0000E65A D040                       		add.w	d0,d0
0000E65C D040                       		add.w	d0,d0
0000E65E 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000E662 4E91                       		jsr	(a1)		; run the object's code
0000E664 7000                       		moveq	#0,d0
0000E666                            
0000E666                            loc_D358:
0000E666 41E8 0040                  		lea	$40(a0),a0	; next object
0000E66A 51CF FFEA                  		dbf	d7,loc_D348
0000E66E 4E75                       		rts
0000E670                            ; ===========================================================================
0000E670                            
0000E670                            loc_D362:
0000E670 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000E676 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000E678 7E1F                       		moveq	#$1F,d7
0000E67A 61DA                       		bsr.s	loc_D348
0000E67C 7E5F                       		moveq	#$5F,d7
0000E67E                            
0000E67E                            loc_D368:
0000E67E 7000                       		moveq	#0,d0
0000E680 1010                       		move.b	(a0),d0
0000E682 6700                       		beq.s	loc_D378
0000E684 4A28 0001                  		tst.b	1(a0)
0000E688 6A00                       		bpl.s	loc_D378
0000E68A 6100 0000                  		bsr.w	DisplaySprite
0000E68E                            
0000E68E                            loc_D378:
0000E68E 41E8 0040                  		lea	$40(a0),a0
0000E692                            
0000E692                            loc_D37C:
0000E692 51CF FFEA                  		dbf	d7,loc_D368
0000E696 4E75                       		rts
0000E698                            ; End of function ObjectsLoad
0000E698                            
0000E698                            ; ===========================================================================
0000E698                            ; ---------------------------------------------------------------------------
0000E698                            ; Object pointers
0000E698                            ; ---------------------------------------------------------------------------
0000E698                            Obj_Index:
0000E698                            	include "_inc\Object pointers.asm"
0000E698                            ; ---------------------------------------------------------------------------
0000E698                            ; Object pointers
0000E698                            ; ---------------------------------------------------------------------------
0000E698 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj02,	Obj03, ObjectFall
0000E6A8 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000E6B8 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E6C8 0000 0000 0000 B866 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E6D8 0000 83F0 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E6E8 0000 8A22 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E6F8 0000 92DC 0000 9344 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E708 0000 9B7C 0000 9E76 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E718 0000 0000 0000 AAFA 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E728 0000 AE3C 0000 B392 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E738 0000 A732 0000 9C5E 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E748 0000 BEEE 0000 B558 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E758 0000 C910 0000 CFEA 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E768 0000 C46C 0000 E0F4 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E778 0000 D778 0000 D844 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E788 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E798 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E7A8 0000 CC48 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E7B8 0000 E3C0 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E7C8 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E7D8 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E7E8 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E7F8 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E808 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E818 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E828 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E838 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E848 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E858 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E868 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E878 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E888 0000 0000 0000 DA7E 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E898 0000 511A 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E8A8 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E8B8 0000 57E0 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E8B8 0000 57E0 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E8C8                            
0000E8C8                            ; ---------------------------------------------------------------------------
0000E8C8                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E8C8                            ; ---------------------------------------------------------------------------
0000E8C8                            
0000E8C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8C8                            
0000E8C8                            
0000E8C8                            ObjectFall:
0000E8C8 3028 0010                  		move.w	$10(a0),d0
0000E8CC 48C0                       		ext.l	d0
0000E8CE E188                       		lsl.l	#8,d0
0000E8D0 D1A8 0008                  		add.l	d0,8(a0)
0000E8D4 3028 0012                  		move.w	$12(a0),d0
0000E8D8 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E8DE 48C0                       		ext.l	d0
0000E8E0 E188                       		lsl.l	#8,d0
0000E8E2 D1A8 000C                  		add.l	d0,$C(a0)
0000E8E6 4E75                       		rts	
0000E8E8                            
0000E8E8                            ; End of function ObjectFall
0000E8E8                            
0000E8E8                            ; ---------------------------------------------------------------------------
0000E8E8                            ; Subroutine translating object	speed to update	object position
0000E8E8                            ; ---------------------------------------------------------------------------
0000E8E8                            
0000E8E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8E8                            
0000E8E8                            
0000E8E8                            SpeedToPos:
0000E8E8 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E8EC 48C0                       		ext.l	d0
0000E8EE E188                       		lsl.l	#8,d0		; multiply speed by $100
0000E8F0 D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000E8F4 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E8F8 48C0                       		ext.l	d0
0000E8FA E188                       		lsl.l	#8,d0		; multiply by $100
0000E8FC D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000E900 4E75                       		rts	
0000E902                            
0000E902                            ; End of function SpeedToPos
0000E902                            
0000E902                            ; ---------------------------------------------------------------------------
0000E902                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E902                            ; ---------------------------------------------------------------------------
0000E902                            
0000E902                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E902                            
0000E902                            
0000E902                            DisplaySprite:
0000E902 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E906 3028 0018                  		move.w	$18(a0),d0
0000E90A E248                       		lsr.w	#1,d0
0000E90C 0240 0380                  		andi.w	#$380,d0
0000E910 D2C0                       		adda.w	d0,a1
0000E912 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E916 6400                       		bcc.s	locret_D620
0000E918 5451                       		addq.w	#2,(a1)
0000E91A D2D1                       		adda.w	(a1),a1
0000E91C 3288                       		move.w	a0,(a1)
0000E91E                            
0000E91E                            locret_D620:
0000E91E 4E75                       		rts	
0000E920                            ; End of function DisplaySprite
0000E920                            
0000E920                            ; ---------------------------------------------------------------------------
0000E920                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E920                            ; ---------------------------------------------------------------------------
0000E920                            
0000E920                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E920                            
0000E920                            
0000E920                            DisplaySprite2:
0000E920 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E924 3029 0018                  		move.w	$18(a1),d0
0000E928 E248                       		lsr.w	#1,d0
0000E92A 0240 0380                  		andi.w	#$380,d0
0000E92E D4C0                       		adda.w	d0,a2
0000E930 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E934 6400                       		bcc.s	locret_D63E
0000E936 5452                       		addq.w	#2,(a2)
0000E938 D4D2                       		adda.w	(a2),a2
0000E93A 3489                       		move.w	a1,(a2)
0000E93C                            
0000E93C                            locret_D63E:
0000E93C 4E75                       		rts	
0000E93E                            ; End of function DisplaySprite2
0000E93E                            
0000E93E                            
0000E93E                            DisplaySprite3:
0000E93E 43F8 AC00                      lea    ($FFFFAC00).w,a1
0000E942 D2C0                           adda.w    d0,a1
0000E944 0C51 007E                      cmpi.w    #$7E,(a1)
0000E948 6400                           bhs.s    return_16542
0000E94A 5451                           addq.w    #2,(a1)
0000E94C D2D1                           adda.w    (a1),a1
0000E94E 3288                           move.w    a0,(a1)
0000E950                            
0000E950                            return_16542:
0000E950 4E75                           rts
0000E952                            ; ---------------------------------------------------------------------------
0000E952                            ; Subroutine to	delete an object
0000E952                            ; ---------------------------------------------------------------------------
0000E952                            
0000E952                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E952                            
0000E952                            
0000E952                            DeleteObject:
0000E952 2248                       		movea.l	a0,a1
0000E954                            
0000E954                            DeleteObject2:
0000E954 7200                       		moveq	#0,d1
0000E956 700F                       		moveq	#$F,d0
0000E958                            
0000E958                            loc_D646:
0000E958 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E95A 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E95E 4E75                       		rts	
0000E960                            ; End of function DeleteObject
0000E960                            
0000E960                            ; ===========================================================================
0000E960 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E964 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E968 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E96C 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E970                            ; ---------------------------------------------------------------------------
0000E970                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E970                            ; ---------------------------------------------------------------------------
0000E970                            
0000E970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E970                            
0000E970                            
0000E970                            BuildSprites:                ; XREF: TitleScreen; et al
0000E970 45F8 F800                          lea    ($FFFFF800).w,a2 ; set address for sprite table
0000E974 4EB9 0000 0000                     jsr		Obj02
0000E97A 4A38 FFD0                          tst.b    ($FFFFFFD0).w ; this was level_started_flag
0000E97E 6700                               beq.s    BuildSprites_2
0000E980 4EB9 0000 0000                     jsr    loc_40804
0000E986                            
0000E986                            BuildSprites_2:
0000E986 49F8 AC00                          lea    ($FFFFAC00).w,a4
0000E98A 7E07                               moveq    #7,d7
0000E98C                            
0000E98C                            loc_D66A:
0000E98C 0C47 0005                  		cmpi.w	#$07-$02,d7
0000E990 6600                       		bne.s	BuildSpritesCont
0000E992 4A38 870D                  		tst.b	(Level_started_flag).w
0000E996 6700                       		beq.s	BuildSpritesCont
0000E998 48E7 0108                  		movem.l	d7/a4,-(sp)
0000E99C 6100 0000                  		bsr.w	BuildRings
0000E9A0 4CDF 1080                  		movem.l	(sp)+,d7/a4
0000E9A4                            
0000E9A4                            BuildSpritesCont:
0000E9A4 4A54                       		tst.w	(a4)
0000E9A6 6700 0000                  		beq.w	loc_D72E
0000E9AA 7C02                       		moveq	#2,d6
0000E9AC                            
0000E9AC                            loc_D672:
0000E9AC 3074 6000                          movea.w    (a4,d6.w),a0
0000E9B0 4A10                               tst.b    (a0)
0000E9B2 6700 0000                          beq.w    loc_D726
0000E9B6 08A8 0007 0001                     bclr    #7,1(a0)
0000E9BC 1028 0001                          move.b    1(a0),d0
0000E9C0 1800                               move.b    d0,d4
0000E9C2 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000E9C6 6700                               beq.s    @skip    ; if it is, branch
0000E9C8 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000E9CC 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000E9D0                               @skip:
0000E9D0 0240 000C                  		andi.w	#$C,d0
0000E9D4 6700                       		beq.s	loc_D6DE
0000E9D6 227B 0088                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E9DA 7000                       		moveq	#0,d0
0000E9DC 1028 0019                  		move.b	$19(a0),d0
0000E9E0 3628 0008                  		move.w	8(a0),d3
0000E9E4 9651                       		sub.w	(a1),d3
0000E9E6 3203                       		move.w	d3,d1
0000E9E8 D240                       		add.w	d0,d1
0000E9EA 6B00 0000                  		bmi.w	loc_D726
0000E9EE 3203                       		move.w	d3,d1
0000E9F0 9240                       		sub.w	d0,d1
0000E9F2 0C41 0140                  		cmpi.w	#$140,d1
0000E9F6 6C00                       		bge.s	loc_D726
0000E9F8 0643 0080                  		addi.w	#$80,d3
0000E9FC 0804 0004                  		btst	#4,d4
0000EA00 6700                       		beq.s	loc_D6E8
0000EA02 7000                       		moveq	#0,d0
0000EA04 1028 0016                  		move.b	$16(a0),d0
0000EA08 3428 000C                  		move.w	$C(a0),d2
0000EA0C 9469 0004                  		sub.w	4(a1),d2
0000EA10 3202                       		move.w	d2,d1
0000EA12 D240                       		add.w	d0,d1
0000EA14 6B00                       		bmi.s	loc_D726
0000EA16 3202                       		move.w	d2,d1
0000EA18 9240                       		sub.w	d0,d1
0000EA1A 0C41 00E0                  		cmpi.w	#$E0,d1
0000EA1E 6C00                       		bge.s	loc_D726
0000EA20 0642 0080                  		addi.w	#$80,d2
0000EA24 6000                       		bra.s	loc_D700
0000EA26                            ; ===========================================================================
0000EA26                            
0000EA26                            loc_D6DE:
0000EA26 3428 000A                  		move.w	$A(a0),d2
0000EA2A 3628 0008                  		move.w	8(a0),d3
0000EA2E 6000                       		bra.s	loc_D700
0000EA30                            ; ===========================================================================
0000EA30                            
0000EA30                            loc_D6E8:
0000EA30 3428 000C                  		move.w	$C(a0),d2
0000EA34 9469 0004                  		sub.w	4(a1),d2
0000EA38 0642 0080                  		addi.w	#$80,d2
0000EA3C 0C42 0060                  		cmpi.w	#$60,d2
0000EA40 6500                       		bcs.s	loc_D726
0000EA42 0C42 0180                  		cmpi.w	#$180,d2
0000EA46 6400                       		bcc.s	loc_D726
0000EA48                            
0000EA48                            loc_D700:
0000EA48 2268 0004                  		movea.l	4(a0),a1
0000EA4C 7200                       		moveq	#0,d1
0000EA4E 0804 0005                  		btst	#5,d4
0000EA52 6600                       		bne.s	loc_D71C
0000EA54 1228 001A                  		move.b	$1A(a0),d1
0000EA58 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000EA5A D2F1 1000                  		adda.w	(a1,d1.w),a1
0000EA5E 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000EA60 1219                       		move.b	(a1)+,d1
0000EA62 5301                       		subq.b	#1,d1
0000EA64 6B00                       		bmi.s	loc_D720
0000EA66                            
0000EA66                            loc_D71C:
0000EA66 4EB9 0000 0000             		jsr	sub_D750
0000EA6C                            
0000EA6C                            loc_D720:
0000EA6C 08E8 0007 0001             		bset	#7,1(a0)
0000EA72                            
0000EA72                            loc_D726:
0000EA72 5446                       		addq.w	#2,d6
0000EA74 5554                       		subq.w	#2,(a4)
0000EA76 6600 FF34                  		bne.w	loc_D672
0000EA7A                            
0000EA7A                            loc_D72E:
0000EA7A 49EC 0080                  		lea	$80(a4),a4
0000EA7E 51CF FF0C                  		dbf	d7,loc_D66A
0000EA82 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000EA86 0C05 0050                  		cmpi.b	#$50,d5
0000EA8A 6700                       		beq.s	loc_D748
0000EA8C 24BC 0000 0000             		move.l	#0,(a2)
0000EA92 4E75                       		rts	
0000EA94                            ; ===========================================================================
0000EA94                            
0000EA94                            loc_D748:
0000EA94 157C 0000 FFFB             		move.b	#0,-5(a2)
0000EA9A 4E75                       		rts	
0000EA9C                            ; End of function BuildSprites
0000EA9C                            
0000EA9C                            BuildSprites_MultiDraw:
0000EA9C 2F0C                       	move.l	a4,-(sp)
0000EA9E 49F8 F700                  	lea	($FFFFF700).w,a4
0000EAA2 3668 0002                  	movea.w	2(a0),a3
0000EAA6 2A68 0004                  	movea.l	4(a0),a5
0000EAAA 7000                       	moveq	#0,d0
0000EAAC                            
0000EAAC                            	; check if object is within X bounds
0000EAAC 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000EAB0 3628 0008                  	move.w	8(a0),d3
0000EAB4 9654                       	sub.w	(a4),d3
0000EAB6 3203                       	move.w	d3,d1                            
0000EAB8 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000EABA 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000EABE 3203                       	move.w	d3,d1
0000EAC0 9240                       	sub.w	d0,d1
0000EAC2 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000EAC6 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000EACA 0643 0080                  	addi.w	#128,d3
0000EACE                            
0000EACE                            	; check if object is within Y bounds
0000EACE 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000EAD2 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000EAD4 7000                       	moveq	#0,d0
0000EAD6 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000EADA 3428 000C                  	move.w	$C(a0),d2
0000EADE 946C 0004                  	sub.w	4(a4),d2
0000EAE2 3202                       	move.w	d2,d1
0000EAE4 D240                       	add.w	d0,d1
0000EAE6 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000EAEA 3202                       	move.w	d2,d1
0000EAEC 9240                       	sub.w	d0,d1
0000EAEE 0C41 00E0                  	cmpi.w	#224,d1
0000EAF2 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000EAF6 0642 0080                  	addi.w	#128,d2
0000EAFA 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000EAFC                            BuildSpritesMulti_ApproxYCheck:
0000EAFC 3428 000C                  	move.w	$C(a0),d2
0000EB00 946C 0004                  	sub.w	4(a4),d2
0000EB04 0642 0080                  	addi.w	#128,d2
0000EB08 0242 07FF                  	andi.w	#$7FF,d2
0000EB0C 0C42 0060                  	cmpi.w	#-32+128,d2
0000EB10 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000EB12 0C42 0180                  	cmpi.w	#32+128+224,d2
0000EB16 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000EB18                            BuildSpritesMulti_DrawSprite:
0000EB18 7200                       	moveq	#0,d1
0000EB1A 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000EB1E 6700                       	beq.s	@noparenttodraw
0000EB20 D241                       	add.w	d1,d1
0000EB22 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000EB24 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EB28 7200                       	moveq	#0,d1
0000EB2A 1219                       	move.b	(a1)+,d1
0000EB2C 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EB2E 6B00                       	bmi.s	@noparenttodraw                  ; if there are 0 pieces, branch
0000EB30 3F04                       	move.w	d4,-(sp)
0000EB32 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000EB38 381F                       	move.w	(sp)+,d4
0000EB3A                            @noparenttodraw:
0000EB3A 0028 0080 0001             	ori.b	#$80,1(a0)	         ; set onscreen flag
0000EB40 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000EB44 7000                       	moveq	#0,d0
0000EB46 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000EB4A 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000EB4C 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000EB4E                            
0000EB4E                            @drawchildloop:
0000EB4E 4840                       	swap	d0
0000EB50 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000EB52 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000EB54 0643 0080                  	addi.w	#128,d3
0000EB58 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000EB5A 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000EB5E 0642 0080                  	addi.w	#128,d2
0000EB62 0242 07FF                  	andi.w	#$7FF,d2
0000EB66 524E                       	addq.w	#1,a6
0000EB68 7200                       	moveq	#0,d1
0000EB6A 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000EB6C D241                       	add.w	d1,d1
0000EB6E 224D                       	movea.l	a5,a1
0000EB70 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EB74 7200                       	moveq	#0,d1
0000EB76 1219                       	move.b	(a1)+,d1
0000EB78 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EB7A 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000EB7C 3F04                       	move.w	d4,-(sp)
0000EB7E 4EB9 0000 0000             	jsr	ChkDrawSprite
0000EB84 381F                       	move.w	(sp)+,d4
0000EB86                            @nochildleft:
0000EB86 4840                       	swap	d0
0000EB88 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000EB8C                            ; loc_16804:
0000EB8C                            BuildSprites_MultiDraw_NextObj:
0000EB8C 285F                       	movea.l	(sp)+,a4
0000EB8E 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000EB92                            
0000EB92                            
0000EB92                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EB92                            
0000EB92                            ; sub_1680A:
0000EB92                            ChkDrawSprite:
0000EB92 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000EB96 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000EB98 4E75                       	rts	; otherwise, return
0000EB9A                            
0000EB9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB9A                            
0000EB9A                            
0000EB9A                            sub_D750:				; XREF: BuildSprites
0000EB9A 3668 0002                  		movea.w	2(a0),a3
0000EB9E                            loc_1681C:
0000EB9E 0804 0000                  		btst	#0,d4
0000EBA2 6600                       		bne.s	loc_D796
0000EBA4 0804 0001                  		btst	#1,d4
0000EBA8 6600 0000                  		bne.w	loc_D7E4
0000EBAC                            ; End of function sub_D750
0000EBAC                            
0000EBAC                            
0000EBAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBAC                            
0000EBAC                            
0000EBAC                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000EBAC 0C05 0050                  		cmpi.b	#$50,d5
0000EBB0 6700                       		beq.s	locret_D794
0000EBB2                            DrawSprite_Loop:				; XREF: sub_D762; SS_ShowLayout	
0000EBB2 1019                       		move.b	(a1)+,d0
0000EBB4 4880                       		ext.w	d0
0000EBB6 D042                       		add.w	d2,d0
0000EBB8 34C0                       		move.w	d0,(a2)+
0000EBBA 14D9                       		move.b	(a1)+,(a2)+
0000EBBC 5205                       		addq.b	#1,d5
0000EBBE 14C5                       		move.b	d5,(a2)+
0000EBC0 1019                       		move.b	(a1)+,d0
0000EBC2 E148                       		lsl.w	#8,d0
0000EBC4 1019                       		move.b	(a1)+,d0
0000EBC6 D04B                       		add.w	a3,d0
0000EBC8 34C0                       		move.w	d0,(a2)+
0000EBCA 1019                       		move.b	(a1)+,d0
0000EBCC 4880                       		ext.w	d0
0000EBCE D043                       		add.w	d3,d0
0000EBD0 0240 01FF                  		andi.w	#$1FF,d0
0000EBD4 6600                       		bne.s	loc_D78E
0000EBD6 5240                       		addq.w	#1,d0
0000EBD8                            
0000EBD8                            loc_D78E:
0000EBD8 34C0                       		move.w	d0,(a2)+
0000EBDA 51C9 FFD0                  		dbf	d1,sub_D762
0000EBDE                            
0000EBDE                            locret_D794:
0000EBDE 4E75                       		rts	
0000EBE0                            ; End of function sub_D762
0000EBE0                            
0000EBE0                            ; ===========================================================================
0000EBE0                            
0000EBE0                            loc_D796:
0000EBE0 0804 0001                  		btst	#1,d4
0000EBE4 6600 0000                  		bne.w	loc_D82A
0000EBE8                            
0000EBE8                            loc_D79E:
0000EBE8 0C05 0050                  		cmpi.b	#$50,d5
0000EBEC 6700                       		beq.s	locret_D7E2
0000EBEE 1019                       		move.b	(a1)+,d0
0000EBF0 4880                       		ext.w	d0
0000EBF2 D042                       		add.w	d2,d0
0000EBF4 34C0                       		move.w	d0,(a2)+
0000EBF6 1819                       		move.b	(a1)+,d4
0000EBF8 14C4                       		move.b	d4,(a2)+
0000EBFA 5205                       		addq.b	#1,d5
0000EBFC 14C5                       		move.b	d5,(a2)+
0000EBFE 1019                       		move.b	(a1)+,d0
0000EC00 E148                       		lsl.w	#8,d0
0000EC02 1019                       		move.b	(a1)+,d0
0000EC04 D04B                       		add.w	a3,d0
0000EC06 0A40 0800                  		eori.w	#$800,d0
0000EC0A 34C0                       		move.w	d0,(a2)+
0000EC0C 1019                       		move.b	(a1)+,d0
0000EC0E 4880                       		ext.w	d0
0000EC10 4440                       		neg.w	d0
0000EC12 D804                       		add.b	d4,d4
0000EC14 0244 0018                  		andi.w	#$18,d4
0000EC18 5044                       		addq.w	#8,d4
0000EC1A 9044                       		sub.w	d4,d0
0000EC1C D043                       		add.w	d3,d0
0000EC1E 0240 01FF                  		andi.w	#$1FF,d0
0000EC22 6600                       		bne.s	loc_D7DC
0000EC24 5240                       		addq.w	#1,d0
0000EC26                            
0000EC26                            loc_D7DC:
0000EC26 34C0                       		move.w	d0,(a2)+
0000EC28 51C9 FFBE                  		dbf	d1,loc_D79E
0000EC2C                            
0000EC2C                            locret_D7E2:
0000EC2C 4E75                       		rts	
0000EC2E                            ; ===========================================================================
0000EC2E                            
0000EC2E                            loc_D7E4:				; XREF: sub_D750
0000EC2E 0C05 0050                  		cmpi.b	#$50,d5
0000EC32 6700                       		beq.s	locret_D828
0000EC34 1019                       		move.b	(a1)+,d0
0000EC36 1811                       		move.b	(a1),d4
0000EC38 4880                       		ext.w	d0
0000EC3A 4440                       		neg.w	d0
0000EC3C E70C                       		lsl.b	#3,d4
0000EC3E 0244 0018                  		andi.w	#$18,d4
0000EC42 5044                       		addq.w	#8,d4
0000EC44 9044                       		sub.w	d4,d0
0000EC46 D042                       		add.w	d2,d0
0000EC48 34C0                       		move.w	d0,(a2)+
0000EC4A 14D9                       		move.b	(a1)+,(a2)+
0000EC4C 5205                       		addq.b	#1,d5
0000EC4E 14C5                       		move.b	d5,(a2)+
0000EC50 1019                       		move.b	(a1)+,d0
0000EC52 E148                       		lsl.w	#8,d0
0000EC54 1019                       		move.b	(a1)+,d0
0000EC56 D04B                       		add.w	a3,d0
0000EC58 0A40 1000                  		eori.w	#$1000,d0
0000EC5C 34C0                       		move.w	d0,(a2)+
0000EC5E 1019                       		move.b	(a1)+,d0
0000EC60 4880                       		ext.w	d0
0000EC62 D043                       		add.w	d3,d0
0000EC64 0240 01FF                  		andi.w	#$1FF,d0
0000EC68 6600                       		bne.s	loc_D822
0000EC6A 5240                       		addq.w	#1,d0
0000EC6C                            
0000EC6C                            loc_D822:
0000EC6C 34C0                       		move.w	d0,(a2)+
0000EC6E 51C9 FFBE                  		dbf	d1,loc_D7E4
0000EC72                            
0000EC72                            locret_D828:
0000EC72 4E75                       		rts	
0000EC74                            ; ===========================================================================
0000EC74                            
0000EC74                            loc_D82A:
0000EC74 0C05 0050                  		cmpi.b	#$50,d5
0000EC78 6700                       		beq.s	locret_D87C
0000EC7A 1019                       		move.b	(a1)+,d0
0000EC7C 1811                       		move.b	(a1),d4
0000EC7E 4880                       		ext.w	d0
0000EC80 4440                       		neg.w	d0
0000EC82 E70C                       		lsl.b	#3,d4
0000EC84 0244 0018                  		andi.w	#$18,d4
0000EC88 5044                       		addq.w	#8,d4
0000EC8A 9044                       		sub.w	d4,d0
0000EC8C D042                       		add.w	d2,d0
0000EC8E 34C0                       		move.w	d0,(a2)+
0000EC90 1819                       		move.b	(a1)+,d4
0000EC92 14C4                       		move.b	d4,(a2)+
0000EC94 5205                       		addq.b	#1,d5
0000EC96 14C5                       		move.b	d5,(a2)+
0000EC98 1019                       		move.b	(a1)+,d0
0000EC9A E148                       		lsl.w	#8,d0
0000EC9C 1019                       		move.b	(a1)+,d0
0000EC9E D04B                       		add.w	a3,d0
0000ECA0 0A40 1800                  		eori.w	#$1800,d0
0000ECA4 34C0                       		move.w	d0,(a2)+
0000ECA6 1019                       		move.b	(a1)+,d0
0000ECA8 4880                       		ext.w	d0
0000ECAA 4440                       		neg.w	d0
0000ECAC D804                       		add.b	d4,d4
0000ECAE 0244 0018                  		andi.w	#$18,d4
0000ECB2 5044                       		addq.w	#8,d4
0000ECB4 9044                       		sub.w	d4,d0
0000ECB6 D043                       		add.w	d3,d0
0000ECB8 0240 01FF                  		andi.w	#$1FF,d0
0000ECBC 6600                       		bne.s	loc_D876
0000ECBE 5240                       		addq.w	#1,d0
0000ECC0                            
0000ECC0                            loc_D876:
0000ECC0 34C0                       		move.w	d0,(a2)+
0000ECC2 51C9 FFB0                  		dbf	d1,loc_D82A
0000ECC6                            
0000ECC6                            locret_D87C:
0000ECC6 4E75                       		rts	
0000ECC8                            ; ---------------------------------------------------------------------------
0000ECC8                            ; Subroutine to	check if an object is on the screen
0000ECC8                            ; ---------------------------------------------------------------------------
0000ECC8                            
0000ECC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ECC8                            
0000ECC8                            
0000ECC8                            ChkObjOnScreen:
0000ECC8 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000ECCC 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000ECD0 6B00                       		bmi.s	NotOnScreen
0000ECD2 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000ECD6 6C00                       		bge.s	NotOnScreen	; if not, branch
0000ECD8                            
0000ECD8 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000ECDC 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000ECE0 6B00                       		bmi.s	NotOnScreen
0000ECE2 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000ECE6 6C00                       		bge.s	NotOnScreen	; if not, branch
0000ECE8                            
0000ECE8 7000                       		moveq	#0,d0		; set flag to 0
0000ECEA 4E75                       		rts	
0000ECEC                            ; ===========================================================================
0000ECEC                            
0000ECEC                            NotOnScreen:				; XREF: ChkObjOnScreen
0000ECEC 7001                       		moveq	#1,d0		; set flag to 1
0000ECEE 4E75                       		rts	
0000ECF0                            ; End of function ChkObjOnScreen
0000ECF0                            
0000ECF0                            
0000ECF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ECF0                            
0000ECF0                            
0000ECF0                            ChkObjOnScreen2:
0000ECF0 7200                       		moveq	#0,d1
0000ECF2 1228 0019                  		move.b	$19(a0),d1
0000ECF6 3028 0008                  		move.w	8(a0),d0
0000ECFA 9078 F700                  		sub.w	($FFFFF700).w,d0
0000ECFE D041                       		add.w	d1,d0
0000ED00 6B00                       		bmi.s	NotOnScreen2
0000ED02 D241                       		add.w	d1,d1
0000ED04 9041                       		sub.w	d1,d0
0000ED06 0C40 0140                  		cmpi.w	#320,d0
0000ED0A 6C00                       		bge.s	NotOnScreen2
0000ED0C                            
0000ED0C 3228 000C                  		move.w	$C(a0),d1
0000ED10 9278 F704                  		sub.w	($FFFFF704).w,d1
0000ED14 6B00                       		bmi.s	NotOnScreen2
0000ED16 0C41 00E0                  		cmpi.w	#224,d1
0000ED1A 6C00                       		bge.s	NotOnScreen2
0000ED1C                            
0000ED1C 7000                       		moveq	#0,d0
0000ED1E 4E75                       		rts	
0000ED20                            ; ===========================================================================
0000ED20                            
0000ED20                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000ED20 7001                       		moveq	#1,d0
0000ED22 4E75                       		rts	
0000ED24                            ; End of function ChkObjOnScreen2
0000ED24                            
0000ED24                            ; ---------------------------------------------------------------------------
0000ED24                            ; Subroutine to	load a level's objects
0000ED24                            ; ---------------------------------------------------------------------------
0000ED24                            
0000ED24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED24                            
0000ED24                            
0000ED24                            ; ---------------------------------------------------------------------------
0000ED24                            ; Objects Manager
0000ED24                            ; Subroutine to load objects whenever they are close to the screen. Unlike in
0000ED24                            ; normal s2, in this version every object gets an entry in the respawn table.
0000ED24                            ; This is necessary to get the additional y-range checks to work.
0000ED24                            ;
0000ED24                            ; input variables:
0000ED24                            ;  -none-
0000ED24                            ;
0000ED24                            ; writes:
0000ED24                            ;  d0, d1, d2
0000ED24                            ;  d3 = upper boundary to load object
0000ED24                            ;  d4 = lower boundary to load object
0000ED24                            ;  d5 = #$FFF, used to filter out object's y position
0000ED24                            ;  d6 = camera position
0000ED24                            ;
0000ED24                            ;  a0 = address in object placement list
0000ED24                            ;  a3 = address in object respawn table
0000ED24                            ;  a6 = object loading routine
0000ED24                            ; ---------------------------------------------------------------------------
0000ED24                             
0000ED24                            ; loc_17AA4
0000ED24                            ObjPosLoad:
0000ED24 7000                       	moveq	#0,d0
0000ED26 1038 F76C                  	move.b	($FFFFF76C).w,d0
0000ED2A 4EFB 0000                  	jmp	ObjPosLoad_States(pc,d0.w)
0000ED2E                             
0000ED2E                            ; ============== JUMP TABLE	=============================================
0000ED2E                            ObjPosLoad_States:
0000ED2E 6000 0000                  	bra.w	ObjPosLoad_Init		; 0
0000ED32 6000 0000                  	bra.w	ObjPosLoad_Main		; 2
0000ED36                            ; ============== END JUMP TABLE	=============================================
0000ED36                             
0000ED36                            ObjPosLoad_Init:
0000ED36 5838 F76C                  	addq.b	#4,($FFFFF76C).w
0000ED3A                             
0000ED3A 41F8 8000                  	lea     (Object_Respawn_Table).w,a0
0000ED3E 7000                       	moveq   #0,d0
0000ED40 323C 00BF                  	move.w  #$BF,d1 ; set loop counter
0000ED44                            OPLBack1:
0000ED44 20C0                       	move.l  d0,(a0)+
0000ED46 51C9 FFFC                  	dbf     d1,OPLBack1
0000ED4A                             
0000ED4A 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000ED4E                            ;
0000ED4E                            ;	ror.b	#1,d0			; this is from s3k
0000ED4E                            ;	lsr.w	#5,d0
0000ED4E                            ;	lea	(Off_Objects).l,a0
0000ED4E                            ;	movea.l	(a0,d0.w),a0
0000ED4E                            ;
0000ED4E ED08                       	lsl.b	#6,d0
0000ED50 E848                       	lsr.w	#4,d0
0000ED52 41F9 0000 0000             	lea	(ObjPos_Index).l,a0	; load the first pointer in the object layout list pointer index,
0000ED58 D0F0 0000                  	adda.w	(a0,d0.w),a0		; load the pointer to the current object layout
0000ED5C                             
0000ED5C                            	; initialize each object load address with the first object in the layout
0000ED5C 21C8 F770                  	move.l	a0,($FFFFF770).w
0000ED60 21C8 F774                  	move.l	a0,($FFFFF774).w
0000ED64 47F8 8000                  	lea	(Object_Respawn_Table).w,a3
0000ED68                             
0000ED68 3C38 F700                  	move.w	($FFFFF700).w,d6
0000ED6C 0446 0080                  	subi.w	#$80,d6	; look one chunk to the left
0000ED70 6400                       	bcc.s	OPL1	; if the result was negative,
0000ED72 7C00                       	moveq	#0,d6	; cap at zero
0000ED74                            	OPL1:	
0000ED74 0246 FF80                  	andi.w	#$FF80,d6	; limit to increments of $80 (width of a chunk)
0000ED78                             
0000ED78 2078 F770                  	movea.l	($FFFFF770).w,a0	; get first object in layout
0000ED7C                             
0000ED7C                            OPLBack2:	; at the beginning of a level this gives respawn table entries to any object that is one chunk
0000ED7C                            	; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
0000ED7C BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000ED7E 6300                       	bls.s	OPL2		; if yes, branch
0000ED80 5C48                       	addq.w	#6,a0	; next object
0000ED82 524B                       	addq.w	#1,a3	; respawn index of next object going right
0000ED84 60F6                       	bra.s	OPLBack2
0000ED86                            ; ---------------------------------------------------------------------------
0000ED86                             
0000ED86                            OPL2:	
0000ED86 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember rightmost object that has been processed, so far (we still need to look forward)
0000ED8A 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000ED8E                             
0000ED8E 47F8 8000                  	lea	(Object_Respawn_Table).w,a3	; reset a3
0000ED92 2078 F774                  	movea.l	($FFFFF774).w,a0	; reset a0
0000ED96 0446 0080                  	subi.w	#$80,d6		; look even farther left (any object behind this is out of range)
0000ED9A 6500                       	bcs.s	OPL3		; branch, if camera position would be behind level's left boundary
0000ED9C                             
0000ED9C                             OPLBack3:	; count how many objects are behind the screen that are not in range and need to remember their state
0000ED9C BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000ED9E 6300                       	bls.s	OPL3		; if yes, branch
0000EDA0 5C48                       	addq.w	#6,a0
0000EDA2 524B                       	addq.w	#1,a3	; respawn index of next object going left
0000EDA4 60F6                       	bra.s	OPLBack3	; continue with next object
0000EDA6                            ; ---------------------------------------------------------------------------
0000EDA6                             
0000EDA6                            OPL3:	
0000EDA6 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EDAA 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EDAE                             
0000EDAE 31FC FFFF FE2A             	move.w	#-1,(Camera_X_Pos_last).w	; make sure ObjPosLoad_GoingForward is run
0000EDB4                             
0000EDB4 3038 F704                  	move.w	($FFFFF704).w,d0
0000EDB8 0240 FF80                  	andi.w	#$FF80,d0
0000EDBC 31C0 F76E                  	move.w	d0,(Camera_Y_pos_last).w	; make sure the Y check isn't run unnecessarily during initialization
0000EDC0                            ; ---------------------------------------------------------------------------
0000EDC0                             
0000EDC0                            ObjPosLoad_Main:
0000EDC0                            	; get coarse camera position
0000EDC0                            ;	move.w	($FFFFF704).w,d1
0000EDC0                            ;	subi.w	#$80,d1
0000EDC0                            ;	andi.w	#$FF80,d1
0000EDC0                            ;	move.w	d1,(Camera_Y_pos_coarse).w
0000EDC0                             
0000EDC0                            ;	move.w	($FFFFF700).w,d1
0000EDC0                            ;	subi.w	#$80,d1
0000EDC0                            ;	andi.w	#$FF80,d1
0000EDC0                            ;	move.w	d1,(Camera_X_pos_coarse).w
0000EDC0                             
0000EDC0 4A78 F726                  	tst.w	($FFFFF726).w	; does this level y-wrap?
0000EDC4 6A00                       	bpl.s	ObjMan_Main_NoYWrap	; if not, branch
0000EDC6 4DF9 0000 0000             	lea	(ChkLoadObj_YWrap).l,a6	; set object loading routine
0000EDCC 3638 F704                  	move.w	($FFFFF704).w,d3
0000EDD0 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000EDD4 3803                       	move.w	d3,d4
0000EDD6 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000EDDA 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000EDDE 6A00                       	bpl.s	OPL4		; branch, if upper boundary > 0
0000EDE0 0243 07FF                  	andi.w	#$7FF,d3	; wrap value
0000EDE4 6000                       	bra.s	ObjMan_Main_Cont
0000EDE6                            ; ---------------------------------------------------------------------------
0000EDE6                             
0000EDE6                            OPL4:	
0000EDE6 303C 07FF                  	move.w	#$7FF,d0
0000EDEA 5240                       	addq.w	#1,d0
0000EDEC B840                       	cmp.w	d0,d4
0000EDEE 6300                       	bls.s	OPL5		; branch, if lower boundary < $7FF
0000EDF0 0244 07FF                  	andi.w	#$7FF,d4	; wrap value
0000EDF4 6000                       	bra.s	ObjMan_Main_Cont
0000EDF6                            ; ---------------------------------------------------------------------------
0000EDF6                             
0000EDF6                            ObjMan_Main_NoYWrap:
0000EDF6 3638 F704                  	move.w	($FFFFF704).w,d3
0000EDFA 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000EDFE 3803                       	move.w	d3,d4
0000EE00 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000EE04 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000EE08 6A00                       	bpl.s	OPL5
0000EE0A 7600                       	moveq	#0,d3	; no negative values allowed
0000EE0C                             
0000EE0C                            OPL5:	
0000EE0C 4DF9 0000 0000             	lea	(ChkLoadObj).l,a6	; set object loading routine
0000EE12                             
0000EE12                            ObjMan_Main_Cont:
0000EE12 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000EE16 3C38 F700                  	move.w	($FFFFF700).w,d6
0000EE1A 0246 FF80                  	andi.w	#$FF80,d6
0000EE1E BC78 FE2A                  	cmp.w	(Camera_X_Pos_last).w,d6	; is the X range the same as last time?
0000EE22 6700 0000                  	beq.w	ObjPosLoad_SameXRange	; if yes, branch
0000EE26 6C00                       	bge.s	ObjPosLoad_GoingForward	; if new pos is greater than old pos, branch
0000EE28                             
0000EE28                            	; if the player is moving back
0000EE28 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w	; remember current position for next time
0000EE2C                             
0000EE2C 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object going left
0000EE30 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EE34                             
0000EE34 0446 0080                  	subi.w	#$80,d6			; look one chunk to the left
0000EE38 6500                       	bcs.s	ObjMan_GoingBack_Part2	; branch, if camera position would be behind level's left boundary
0000EE3A                             
0000EE3A 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000EE40 6600                       	bne.s	ObjMan_GoingBack_Part2		; branch, if there are none
0000EE42                            OPLBack4:	; load all objects left of the screen that are now in range
0000EE42 BC68 FFFA                  	cmp.w	-6(a0),d6		; is the previous object's X pos less than d6?
0000EE46 6C00                       	bge.s	ObjMan_GoingBack_Part2	; if it is, branch
0000EE48 5D48                       	subq.w	#6,a0		; get object's address
0000EE4A 534B                       	subq.w	#1,a3		; and respawn table index
0000EE4C 4E96                       	jsr	(a6)		; load object
0000EE4E 6600                       	bne.s	OPL6		; branch, if SST is full
0000EE50 5D48                       	subq.w	#6,a0
0000EE52 60EE                       	bra.s	OPLBack4	; continue with previous object
0000EE54                            ; ---------------------------------------------------------------------------
0000EE54                             
0000EE54                            OPL6:	
0000EE54                            	; undo a few things, if the object couldn't load
0000EE54 5C48                       	addq.w	#6,a0	; go back to last object
0000EE56 524B                       	addq.w	#1,a3	; since we didn't load the object, undo last change
0000EE58                             
0000EE58                            ObjMan_GoingBack_Part2:
0000EE58 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object going left
0000EE5C 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EE60 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object going right
0000EE64 3678 F778                  	movea.w	($FFFFF778).w,a3	; and its respawn table index
0000EE68 0646 0300                  	addi.w	#$300,d6	; look two chunks beyond the right edge of the screen
0000EE6C                             
0000EE6C                            OPLBack5:	; subtract number of objects that have been moved out of range (from the right side)
0000EE6C BC68 FFFA                  	cmp.w	-6(a0),d6	; is the previous object's X pos less than d6?
0000EE70 6E00                       	bgt.s	OPL7		; if it is, branch
0000EE72 5D48                       	subq.w	#6,a0		; get object's address
0000EE74 534B                       	subq.w	#1,a3		; and respawn table index
0000EE76 60F4                       	bra.s	OPLBack5	; continue with previous object
0000EE78                            ; ---------------------------------------------------------------------------
0000EE78                             
0000EE78                            OPL7:	
0000EE78 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object going right
0000EE7C 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EE80 6000                       	bra.s	ObjPosLoad_SameXRange
0000EE82                            ; ---------------------------------------------------------------------------
0000EE82                             
0000EE82                            ObjPosLoad_GoingForward:
0000EE82 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w
0000EE86                             
0000EE86 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object from the right
0000EE8A 3678 F778                  	movea.w ($FFFFF778).w,a3	; and its respawn table index
0000EE8E 0646 0280                  	addi.w	#$280,d6	; look two chunks forward
0000EE92 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000EE98 6600                       	bne.s	ObjMan_GoingForward_Part2	; branch, if there are none
0000EE9A                             
0000EE9A                            OPLBack6:	; load all objects right of the screen that are now in range
0000EE9A BC50                       	cmp.w	(a0),d6				; is object's x position >= d6?
0000EE9C 6300                       	bls.s	ObjMan_GoingForward_Part2	; if yes, branch
0000EE9E 4E96                       	jsr	(a6)		; load object (and get address of next object)
0000EEA0 524B                       	addq.w	#1,a3		; respawn index of next object to the right
0000EEA2 67F6                       	beq.s	OPLBack6	; continue loading objects, if the SST isn't full
0000EEA4                             
0000EEA4                            ObjMan_GoingForward_Part2:
0000EEA4 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object from the right
0000EEA8 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EEAC 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object from the left
0000EEB0 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EEB4 0446 0300                  	subi.w	#$300,d6		; look one chunk behind the left edge of the screen
0000EEB8 6500                       	bcs.s	ObjMan_GoingForward_End	; branch, if camera position would be behind level's left boundary
0000EEBA                             
0000EEBA                            OPLBack7:	; subtract number of objects that have been moved out of range (from the left)
0000EEBA BC50                       	cmp.w	(a0),d6			; is object's x position >= d6?
0000EEBC 6300                       	bls.s	ObjMan_GoingForward_End	; if yes, branch
0000EEBE 5C48                       	addq.w	#6,a0	; next object
0000EEC0 524B                       	addq.w	#1,a3	; respawn index of next object to the left
0000EEC2 60F6                       	bra.s	OPLBack7	; continue with next object
0000EEC4                            ; ---------------------------------------------------------------------------
0000EEC4                             
0000EEC4                            ObjMan_GoingForward_End:
0000EEC4 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EEC8 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EECC                             
0000EECC                            ObjPosLoad_SameXRange:
0000EECC 3C38 F704                  	move.w	($FFFFF704).w,d6
0000EED0 0246 FF80                  	andi.w	#$FF80,d6
0000EED4 3606                       	move.w	d6,d3
0000EED6 BC78 F76E                  	cmp.w	(Camera_Y_pos_last).w,d6	; is the y range the same as last time?
0000EEDA 6700 0000                  	beq.w	ObjPosLoad_SameYRange	; if yes, branch
0000EEDE 6C00                       	bge.s	ObjPosLoad_GoingDown	; if the player is moving down
0000EEE0                             
0000EEE0                            	; if the player is moving up
0000EEE0 4A78 F72C                  	tst.w	($FFFFF72C).w	; does the level y-wrap?
0000EEE4 6A00                       	bpl.s	ObjMan_GoingUp_NoYWrap	; if not, branch
0000EEE6 4A46                       	tst.w	d6
0000EEE8 6600                       	bne.s	ObjMan_GoingUp_YWrap
0000EEEA 0C78 0080 F76E             	cmpi.w	#$80,(Camera_Y_pos_last).w
0000EEF0 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000EEF2                             
0000EEF2                            ObjMan_GoingUp_YWrap:
0000EEF2 0443 0080                  	subi.w	#$80,d3			; look one chunk up
0000EEF6 6A00                       	bpl.s	ObjPosLoad_YCheck	; go to y check, if camera y position >= $80
0000EEF8 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000EEFC 6000                       	bra.s	ObjPosLoad_YCheck
0000EEFE                             
0000EEFE                            ; ---------------------------------------------------------------------------
0000EEFE                             
0000EEFE                            ObjMan_GoingUp_NoYWrap:
0000EEFE 0443 0080                  	subi.w	#$80,d3				; look one chunk up
0000EF02 6B00 0000                  	bmi.w	ObjPosLoad_SameYRange	; don't do anything if camera y position is < $80
0000EF06 6000                       	bra.s	ObjPosLoad_YCheck
0000EF08                            ; ---------------------------------------------------------------------------
0000EF08                             
0000EF08                            ObjPosLoad_GoingDown:
0000EF08 4A78 F72C                  	tst.w	($FFFFF72C).w		; does the level y-wrap?
0000EF0C 6A00                       	bpl.s	ObjMan_GoingDown_NoYWrap	; if not, branch
0000EF0E 4A78 F76E                  	tst.w	(Camera_Y_pos_last).w
0000EF12 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000EF14 0C46 0080                  	cmpi.w	#$80,d6
0000EF18 66D8                       	bne.s	ObjMan_GoingUp_YWrap
0000EF1A                             
0000EF1A                            ObjMan_GoingDown_YWrap:
0000EF1A 0643 0180                  	addi.w	#$180,d3		; look one chunk down
0000EF1E 0C43 07FF                  	cmpi.w	#$7FF,d3
0000EF22 6500                       	bcs.s	ObjPosLoad_YCheck	; go to  check, if camera y position < $7FF
0000EF24 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000EF28 6000                       	bra.s	ObjPosLoad_YCheck
0000EF2A                            ; ---------------------------------------------------------------------------
0000EF2A                             
0000EF2A                            ObjMan_GoingDown_NoYWrap:
0000EF2A 0643 0180                  	addi.w	#$180,d3			; look one chunk down
0000EF2E 0C43 07FF                  	cmpi.w	#$7FF,d3
0000EF32 6200                       	bhi.s	ObjPosLoad_SameYRange	; don't do anything, if camera is too close to bottom
0000EF34                             
0000EF34                            ObjPosLoad_YCheck:
0000EF34 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; get an empty object slot
0000EF3A 6600                       	bne.s	ObjPosLoad_SameYRange	; branch, if there are none
0000EF3C 3803                       	move.w	d3,d4
0000EF3E 0644 0080                  	addi.w	#$80,d4
0000EF42 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000EF46 2078 F774                  	movea.l	($FFFFF774).w,a0	; get next object going left
0000EF4A 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EF4E 2E38 F770                  	move.l	($FFFFF770).w,d7	; get next object going right
0000EF52 9E88                       	sub.l	a0,d7	; d7 = number of objects between the left and right boundaries * 6
0000EF54 6700                       	beq.s	ObjPosLoad_SameYRange	; branch if there are no objects inbetween
0000EF56 5448                       	addq.w	#2,a0	; align to object's y position
0000EF58                             
0000EF58                            OPLBack8:	; check, if current object needs to be loaded
0000EF58 4A13                       	tst.b	(a3)	; is object already loaded?
0000EF5A 6B00                       	bmi.s	OPL8	; if yes, branch
0000EF5C 3210                       	move.w	(a0),d1
0000EF5E C245                       	and.w	d5,d1	; get object's y position
0000EF60 B243                       	cmp.w	d3,d1
0000EF62 6500                       	bcs.s	OPL8	; branch, if object is out of range from the top
0000EF64 B244                       	cmp.w	d4,d1
0000EF66 6200                       	bhi.s	OPL8	; branch, if object is out of range from the bottom
0000EF68 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000EF6C                            	; load object
0000EF6C 3368 FFFE 0008             	move.w	-2(a0),8(a1)
0000EF72 3210                       	move.w	(a0),d1
0000EF74 3401                       	move.w	d1,d2
0000EF76 C245                       	and.w	d5,d1	; get object's y position
0000EF78 3341 000C                  	move.w	d1,$C(a1)
0000EF7C E75A                       	rol.w	#3,d2
0000EF7E 0242 0003                  	andi.w	#3,d2	; get object's render flags and status
0000EF82 1342 0001                  	move.b	d2,1(a1)
0000EF86 1342 0022                  	move.b	d2,$22(a1)
0000EF8A 7000                           moveq	#0,d0
0000EF8C 1028 0002                  	move.b	2(a0),d0
0000EF90 0200 007F                  	andi.b	#$7F,d0
0000EF94 1280                       	move.b	d0,0(a1)
0000EF96 1368 0003 0028             	move.b	3(a0),$28(a1)
0000EF9C 334B 0014                  	move.w	a3,respawn_index(a1)
0000EFA0 4EB9 0000 0000             	jsr	(SingleObjLoad).l	; find new object slot
0000EFA6 6600                       	bne.s	ObjPosLoad_SameYRange	; brach, if there are none left
0000EFA8                            OPL8:
0000EFA8 5C48                       	addq.w	#6,a0	; address of next object
0000EFAA 524B                       	addq.w	#1,a3	; and its respawn index
0000EFAC 5D47                       	subq.w	#6,d7	; subtract from size of remaining objects
0000EFAE 66A8                       	bne.s	OPLBack8	; branch, if there are more
0000EFB0                             
0000EFB0                            ObjPosLoad_SameYRange:
0000EFB0 31C6 F76E                  	move.w	d6,(Camera_Y_pos_last).w
0000EFB4 4E75                       	rts		
0000EFB6                            ; ===========================================================================
0000EFB6                            ; ---------------------------------------------------------------------------
0000EFB6                            ; Subroutines to check if an object needs to be loaded,
0000EFB6                            ; with and without y-wrapping enabled.
0000EFB6                            ;
0000EFB6                            ; input variables:
0000EFB6                            ;  d3 = upper boundary to load object
0000EFB6                            ;  d4 = lower boundary to load object
0000EFB6                            ;  d5 = #$FFF, used to filter out object's y position
0000EFB6                            ;
0000EFB6                            ;  a0 = address in object placement list
0000EFB6                            ;  a1 = object
0000EFB6                            ;  a3 = address in object respawn table
0000EFB6                            ;
0000EFB6                            ; writes:
0000EFB6                            ;  d1, d2, d7
0000EFB6                            ; ---------------------------------------------------------------------------
0000EFB6                            ChkLoadObj_YWrap:
0000EFB6 4A13                       	tst.b	(a3)	; is object already loaded?
0000EFB8 6A00                       	bpl.s	OPL9	; if not, branch
0000EFBA 5C48                       	addq.w	#6,a0	; address of next object
0000EFBC 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000EFBE 4E75                       	rts	
0000EFC0                            ; ---------------------------------------------------------------------------
0000EFC0                             
0000EFC0                            OPL9:	
0000EFC0 3E18                       	move.w	(a0)+,d7	; x_pos
0000EFC2 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000EFC4 3401                       	move.w	d1,d2	; does this object skip y-Checks?
0000EFC6 6B00                       	bmi.s	OPL10	; if yes, branch
0000EFC8 C245                       	and.w	d5,d1	; y_pos
0000EFCA B243                       	cmp.w	d3,d1
0000EFCC 6400                       	bcc.s	LoadObj_YWrap
0000EFCE B244                       	cmp.w	d4,d1
0000EFD0 6300                       	bls.s	LoadObj_YWrap
0000EFD2 5448                       	addq.w	#2,a0	; address of next object
0000EFD4 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000EFD6 4E75                       	rts	
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8                             
0000EFD8                            OPL10:	
0000EFD8 C245                       	and.w	d5,d1	; y_pos
0000EFDA                             
0000EFDA                            LoadObj_YWrap:
0000EFDA 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000EFDE 3347 0008                  	move.w	d7,8(a1)
0000EFE2 3341 000C                  	move.w	d1,$C(a1)
0000EFE6 E75A                       	rol.w	#3,d2	; adjust bits
0000EFE8 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000EFEC 1342 0001                  	move.b	d2,1(a1)
0000EFF0 1342 0022                  	move.b	d2,$22(a1)
0000EFF4 7000                           moveq	#0,d0
0000EFF6 1018                       	move.b	(a0)+,d0
0000EFF8 0200 007F                  	andi.b	#$7F,d0
0000EFFC 1280                       	move.b	d0,0(a1)
0000EFFE 1358 0028                  	move.b	(a0)+,$28(a1)
0000F002 334B 0014                  	move.w	a3,respawn_index(a1)
0000F006 6000                       	bra.s	SingleObjLoad	; find new object slot
0000F008                             
0000F008                            ;loc_17F36
0000F008                            ChkLoadObj:
0000F008 4A13                       	tst.b	(a3)	; is object already loaded?
0000F00A 6A00                       	bpl.s	OPL11	; if not, branch
0000F00C 5C48                       	addq.w	#6,a0	; address of next object
0000F00E 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F010 4E75                       	rts
0000F012                            ; ---------------------------------------------------------------------------
0000F012                             
0000F012                            OPL11:	
0000F012 3E18                       	move.w	(a0)+,d7	; x_pos
0000F014 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000F016 3401                       	move.w	d1,d2	; does this object skip y-Checks?	;*6
0000F018 6B00                       	bmi.s	OPL13	; if yes, branch
0000F01A C245                       	and.w	d5,d1	; y_pos
0000F01C B243                       	cmp.w	d3,d1
0000F01E 6500                       	bcs.s	OPL12	; branch, if object is out of range from the top
0000F020 B244                       	cmp.w	d4,d1
0000F022 6300                       	bls.s	LoadObj	; branch, if object is in range from the bottom
0000F024                            OPL12:
0000F024 5448                       	addq.w	#2,a0	; address of next object
0000F026 7200                       	moveq	#0,d1
0000F028 4E75                       	rts		
0000F02A                            ; ---------------------------------------------------------------------------
0000F02A                             
0000F02A                            OPL13:	
0000F02A C245                       	and.w	d5,d1	; y_pos
0000F02C                             
0000F02C                            LoadObj:
0000F02C 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000F030 3347 0008                  	move.w	d7,8(a1)
0000F034 3341 000C                  	move.w	d1,$C(a1)
0000F038 E75A                       	rol.w	#3,d2	; adjust bits
0000F03A 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000F03E 1342 0001                  	move.b	d2,1(a1)
0000F042 1342 0022                  	move.b	d2,$22(a1)
0000F046 7000                           moveq	#0,d0
0000F048 1018                           move.b	(a0)+,d0
0000F04A 0200 007F                  	andi.b	#$7F,d0
0000F04E 1280                       	move.b	d0,0(a1)
0000F050 1358 0028                  	move.b	(a0)+,$28(a1)
0000F054 334B 0014                  	move.w	a3,respawn_index(a1)
0000F058                            	; continue straight to SingleObjLoad
0000F058                            ; End of function ChkLoadObj
0000F058                            ; ===========================================================================
0000F058                            
0000F058                            ; ---------------------------------------------------------------------------
0000F058                            ; Single object	loading	subroutine
0000F058                            ; ---------------------------------------------------------------------------
0000F058                            
0000F058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F058                            
0000F058                            
0000F058                            SingleObjLoad:
0000F058 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000F05C 303C 005F                  		move.w	#$5F,d0
0000F060                            
0000F060                            loc_DA94:
0000F060 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F062 6700                       		beq.s	locret_DAA0	; if yes, branch
0000F064 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F068 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000F06C                            
0000F06C                            locret_DAA0:
0000F06C 4E75                       		rts	
0000F06E                            ; End of function SingleObjLoad
0000F06E                            
0000F06E                            
0000F06E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F06E                            
0000F06E                            
0000F06E                            SingleObjLoad2:
0000F06E 2248                       		movea.l	a0,a1
0000F070 303C F000                  		move.w	#-$1000,d0
0000F074 9048                       		sub.w	a0,d0
0000F076 EC48                       		lsr.w	#6,d0
0000F078 5340                       		subq.w	#1,d0
0000F07A 6500                       		bcs.s	locret_DABC
0000F07C                            
0000F07C                            loc_DAB0:
0000F07C 4A11                       		tst.b	(a1)
0000F07E 6700                       		beq.s	locret_DABC
0000F080 43E9 0040                  		lea	$40(a1),a1
0000F084 51C8 FFF6                  		dbf	d0,loc_DAB0
0000F088                            
0000F088                            locret_DABC:
0000F088 4E75                       		rts	
0000F08A                            ; End of function SingleObjLoad2
0000F08A                            
0000F08A                            ; ===========================================================================
0000F08A                            RingsManager:
0000F08A 7000                       	moveq	#0,d0
0000F08C 1038 870C                  	move.b	(Rings_manager_routine).w,d0
0000F090 303B 0000                  	move.w	RingsManager_States(pc,d0.w),d0
0000F094 4EFB 0000                  	jmp	RingsManager_States(pc,d0.w)
0000F098                            ; ===========================================================================
0000F098                            ; off_16F96:
0000F098                            RingsManager_States:
0000F098 0000                       	dc.w RingsManager_Init-RingsManager_States
0000F09A 0000                       	dc.w RingsManager_Main-RingsManager_States
0000F09C                            ; ===========================================================================
0000F09C                            ; loc_16F9A:
0000F09C                            RingsManager_Init:
0000F09C 5438 870C                  	addq.b	#2,(Rings_manager_routine).w ; => RingsManager_Main
0000F0A0 6100 0000                  	bsr.w	RingsManager_Setup
0000F0A4 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F0A8 45F8 8300                  	lea	(Ring_Positions).w,a2
0000F0AC 3838 F700                  	move.w	($FFFFF700).w,d4
0000F0B0 5144                       	subq.w	#8,d4
0000F0B2 6200                       	bhi.s	loc_16FB6
0000F0B4 7801                       	moveq	#1,d4
0000F0B6 6000                       	bra.s	loc_16FB6
0000F0B8                            ; ===========================================================================
0000F0B8                            
0000F0B8                            loc_16FB2:
0000F0B8 5849                       	addq.w	#4,a1
0000F0BA 544A                       	addq.w	#2,a2
0000F0BC                            
0000F0BC                            loc_16FB6:
0000F0BC B851                       	cmp.w	(a1),d4
0000F0BE 62F8                       	bhi.s	loc_16FB2
0000F0C0 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F0C4 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F0C8 0644 0150                  	addi.w	#$150,d4
0000F0CC 6000                       	bra.s	loc_16FCE
0000F0CE                            ; ===========================================================================
0000F0CE                            
0000F0CE                            loc_16FCA:
0000F0CE 5849                       	addq.w	#4,a1
0000F0D0                            
0000F0D0                            loc_16FCE:
0000F0D0 B851                       	cmp.w	(a1),d4
0000F0D2 62FA                       	bhi.s	loc_16FCA
0000F0D4 21C9 8704                  	move.l	a1,(Ring_end_addr_ROM).w
0000F0D8 4E75                       	rts
0000F0DA                            ; ===========================================================================
0000F0DA                            ; loc_16FDE:
0000F0DA                            RingsManager_Main:
0000F0DA 45F8 870E                  	lea	(Ring_consumption_table).w,a2
0000F0DE 321A                       	move.w	(a2)+,d1
0000F0E0 5341                       	subq.w	#1,d1
0000F0E2 6500                       	bcs.s	loc_17014
0000F0E4                            
0000F0E4                            loc_16FE8:
0000F0E4 301A                       	move.w	(a2)+,d0
0000F0E6 67FC                       	beq.s	loc_16FE8
0000F0E8 3240                       	movea.w	d0,a1
0000F0EA 5311                       	subq.b	#1,(a1)
0000F0EC 6600                       	bne.s	loc_17010
0000F0EE 12BC 0006                  	move.b	#6,(a1)
0000F0F2 5229 0001                  	addq.b	#1,1(a1)
0000F0F6 0C29 0008 0001             	cmpi.b	#8,1(a1)
0000F0FC 6600                       	bne.s	loc_17010
0000F0FE 32BC FFFF                  	move.w	#-1,(a1)
0000F102 357C 0000 FFFE             	move.w	#0,-2(a2)
0000F108 5378 870E                  	subq.w	#1,(Ring_consumption_table).w
0000F10C                            
0000F10C                            loc_17010:
0000F10C 51C9 FFD6                  	dbf	d1,loc_16FE8
0000F110                            
0000F110                            loc_17014:
0000F110 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F114 3478 8708                  	movea.w	(Ring_start_addr_RAM).w,a2
0000F118 3838 F700                  	move.w	($FFFFF700).w,d4
0000F11C 5144                       	subq.w	#8,d4
0000F11E 6200                       	bhi.s	loc_17028
0000F120 7801                       	moveq	#1,d4
0000F122 6000                       	bra.s	loc_17028
0000F124                            ; ===========================================================================
0000F124                            
0000F124                            loc_17024:
0000F124 5849                       	addq.w	#4,a1
0000F126 544A                       	addq.w	#2,a2
0000F128                            
0000F128                            loc_17028:
0000F128 B851                       	cmp.w	(a1),d4
0000F12A 62F8                       	bhi.s	loc_17024
0000F12C 6000                       	bra.s	loc_17032
0000F12E                            ; ===========================================================================
0000F12E                            
0000F12E                            loc_17030:
0000F12E 5949                       	subq.w	#4,a1
0000F130 554A                       	subq.w	#2,a2
0000F132                            
0000F132                            loc_17032:
0000F132 B869 FFFC                  	cmp.w	-4(a1),d4
0000F136 63F6                       	bls.s	loc_17030
0000F138 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F13C 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F140 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F144 0644 0150                  	addi.w	#$150,d4
0000F148 6000                       	bra.s	loc_1704A
0000F14A                            ; ===========================================================================
0000F14A                            
0000F14A                            loc_17046:
0000F14A 584A                       	addq.w	#4,a2
0000F14C                            
0000F14C                            loc_1704A:
0000F14C B852                       	cmp.w	(a2),d4
0000F14E 62FA                       	bhi.s	loc_17046
0000F150 6000                       	bra.s	loc_17054
0000F152                            ; ===========================================================================
0000F152                            
0000F152                            loc_17052:
0000F152 594A                       	subq.w	#4,a2
0000F154                            
0000F154                            loc_17054:
0000F154 B86A FFFC                  	cmp.w	-4(a2),d4
0000F158 63F8                       	bls.s	loc_17052
0000F15A 21CA 8704                  	move.l	a2,(Ring_end_addr_ROM).w
0000F15E 4E75                       	rts
0000F160                            
0000F160                            ; ===========================================================================
0000F160                            
0000F160                            Touch_Rings:
0000F160 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F164 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F168                            
0000F168                            loc_170D0:
0000F168 B5C9                       	cmpa.l	a1,a2
0000F16A 6700 0000                  	beq.w	return_17166
0000F16E 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F172 0C68 005A 0030             	cmpi.w	#$5A,$30(a0)
0000F178 6400 0000                  	bcc.w	return_17166
0000F17C                            	
0000F17C                            Touch_Rings_NoAttraction:
0000F17C 3428 0008                  	move.w	8(a0),d2
0000F180 3628 000C                  	move.w	$C(a0),d3
0000F184 5142                       	subi.w	#8,d2
0000F186 7A00                       	moveq	#0,d5
0000F188 1A28 0016                  	move.b	$16(a0),d5
0000F18C 5705                       	subq.b	#3,d5
0000F18E 9645                       	sub.w	d5,d3
0000F190 0C28 004D 0004             	cmpi.b	#$4D,4(a0)
0000F196 6600                       	bne.s	RM1
0000F198 0643 000C                  	addi.w	#$C,d3
0000F19C 7A0A                       	moveq	#$A,d5
0000F19E                            RM1:
0000F19E 323C 0006                  	move.w	#6,d1
0000F1A2 3C3C 000C                  	move.w	#$C,d6
0000F1A6 383C 0010                  	move.w	#$10,d4
0000F1AA DA45                       	add.w	d5,d5
0000F1AC                            
0000F1AC                            loc_17112:
0000F1AC 4A54                       	tst.w	(a4)
0000F1AE 6600 0000                  	bne.w	loc_1715C
0000F1B2 3011                       	move.w	(a1),d0
0000F1B4 9041                       	sub.w	d1,d0
0000F1B6 9042                       	sub.w	d2,d0
0000F1B8 6400                       	bcc.s	loc_1712A
0000F1BA D046                       	add.w	d6,d0
0000F1BC 6500                       	bcs.s	loc_17130
0000F1BE 6000 0000                  	bra.w	loc_1715C
0000F1C2                            ; ===========================================================================
0000F1C2                            
0000F1C2                            loc_1712A:
0000F1C2 B044                       	cmp.w	d4,d0
0000F1C4 6200 0000                  	bhi.w	loc_1715C
0000F1C8                            
0000F1C8                            loc_17130:
0000F1C8 3029 0002                  	move.w	2(a1),d0
0000F1CC 9041                       	sub.w	d1,d0
0000F1CE 9043                       	sub.w	d3,d0
0000F1D0 6400                       	bcc.s	loc_17142
0000F1D2 D046                       	add.w	d6,d0
0000F1D4 6500                       	bcs.s	loc_17148
0000F1D6 6000 0000                  	bra.w	loc_1715C
0000F1DA                            ; ===========================================================================
0000F1DA                            
0000F1DA                            loc_17142:
0000F1DA B045                       	cmp.w	d5,d0
0000F1DC 6200 0000                  	bhi.w	loc_1715C
0000F1E0                            
0000F1E0                            loc_17148:
0000F1E0 38BC 0604                  	move.w	#$604,(a4)
0000F1E4 6100                       	bsr.s	loc_17168
0000F1E6 47F8 8710                  	lea	(Ring_consumption_table+2).w,a3
0000F1EA                            
0000F1EA                            loc_17152:
0000F1EA 4A5B                       	tst.w	(a3)+
0000F1EC 66FC                       	bne.s	loc_17152
0000F1EE 370C                       	move.w	a4,-(a3)
0000F1F0 5278 870E                  	addq.w	#1,(Ring_consumption_table).w
0000F1F4                            
0000F1F4                            loc_1715C:
0000F1F4 5849                       	addq.w	#4,a1
0000F1F6 544C                       	addq.w	#2,a4
0000F1F8 B5C9                       	cmpa.l	a1,a2
0000F1FA 6600 FFB0                  	bne.w	loc_17112
0000F1FE                            
0000F1FE                            return_17166:
0000F1FE 4E75                       	rts
0000F200                            ; ===========================================================================
0000F200                            
0000F200                            loc_17168:
0000F200 5378 870A                  	subq.w	#1,(Perfect_rings_left).w
0000F204 6000 BCAE                  	bra.w	CollectRing
0000F208                            ; ===========================================================================
0000F208                            
0000F208                            BuildRings:
0000F208 2078 8700                  	movea.l	(Ring_start_addr_ROM).w,a0
0000F20C 2E38 8704                  	move.l	(Ring_end_addr_ROM).w,d7
0000F210 9E88                       	sub.l	a0,d7
0000F212 6600                       	bne.s	loc_17186
0000F214 4E75                       	rts
0000F216                            ; ===========================================================================
0000F216                            
0000F216                            loc_17186:
0000F216 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F21A 47F8 F700                  	lea	($FFFFF700).w,a3
0000F21E                            
0000F21E                            loc_1718A:
0000F21E 4A5C                       	tst.w	(a4)+
0000F220 6B00 0000                  	bmi.w	loc_171EC
0000F224 3610                       	move.w	(a0),d3
0000F226 9653                       	sub.w	(a3),d3
0000F228 0643 0080                  	addi.w	#$80,d3
0000F22C 3428 0002                  	move.w	2(a0),d2
0000F230 946B 0004                  	sub.w	4(a3),d2
0000F234 0242 07FF                  	andi.w	#$7FF,d2
0000F238 5042                       	addi.w	#8,d2
0000F23A 6B00                       	bmi.s	loc_171EC
0000F23C 0C42 00F0                  	cmpi.w	#$F0,d2
0000F240 6C00                       	bge.s	loc_171EC
0000F242 0642 0078                  	addi.w	#$78,d2
0000F246 43F9 0000 B20C             	lea	(Map_Obj25).l,a1
0000F24C 7200                       	moveq	#0,d1
0000F24E 122C FFFF                  	move.b	-1(a4),d1
0000F252 6600                       	bne.s	loc_171C8
0000F254 1238 FEC3                  	move.b	($FFFFFEC3).w,d1
0000F258                            
0000F258                            loc_171C8:
0000F258 D241                       	add.w	d1,d1
0000F25A D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F25E 7200                       	moveq	#$00,d1
0000F260 1219                       	move.b	(a1)+,d1
0000F262 5301                       	subq.b	#1,d1
0000F264 6B00                       	bmi.s	loc_171EC
0000F266 1019                       	move.b	(a1)+,d0
0000F268 4880                       	ext.w	d0
0000F26A D042                       	add.w	d2,d0
0000F26C 34C0                       	move.w	d0,(a2)+
0000F26E 14D9                       	move.b	(a1)+,(a2)+
0000F270 5205                       	addq.b	#1,d5
0000F272 14C5                       	move.b	d5,(a2)+
0000F274 1019                       	move.b	(a1)+,d0
0000F276 E148                       	lsl.w	#8,d0
0000F278 1019                       	move.b	(a1)+,d0
0000F27A 0640 26BA                  	addi.w	#($2000+ringart),d0
0000F27E 34C0                       	move.w	d0,(a2)+
0000F280 1019                       	move.b	(a1)+,d0
0000F282 4880                       	ext.w	d0
0000F284 D043                       	add.w	d3,d0
0000F286 34C0                       	move.w	d0,(a2)+
0000F288                            
0000F288                            loc_171EC:
0000F288 5848                       	addq.w	#4,a0
0000F28A 5947                       	subq.w	#4,d7
0000F28C 6600 FF90                  	bne.w	loc_1718A
0000F290 4E75                       	rts
0000F292                            ; ===========================================================================
0000F292                            
0000F292                            RingsManager_Setup:
0000F292 43F8 8300                  	lea	(Ring_Positions).w,a1
0000F296 7000                       	moveq	#0,d0
0000F298 323C 00FF                  	move.w	#Rings_Space/4-1,d1
0000F29C                            
0000F29C                            loc_172AE:				; CODE XREF: h+33Cj
0000F29C 22C0                       	move.l	d0,(a1)+
0000F29E 51C9 FFFC                  	dbf	d1,loc_172AE
0000F2A2                            
0000F2A2                            	; d0 = 0
0000F2A2 43F8 870E                  	lea	(Ring_consumption_table).w,a1
0000F2A6 323C 001F                  	move.w	#$1F,d1
0000F2AA                            RMBack1:
0000F2AA 22C0                       	move.l	d0,(a1)+
0000F2AC 51C9 FFFC                  	dbf	d1,RMBack1
0000F2B0                            
0000F2B0 7A00                       	moveq	#0,d5
0000F2B2 7000                       	moveq	#0,d0
0000F2B4 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000F2B8 ED08                       	lsl.b	#6,d0
0000F2BA E848                       	lsr.w	#4,d0
0000F2BC 43F9 0000 0000             	lea	(RingPos_Index).l,a1
0000F2C2 3031 0000                  	move.w	(a1,d0.w),d0
0000F2C6 43F1 0000                  	lea	(a1,d0.w),a1
0000F2CA 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F2CE 5849                       	addq.w	#4,a1
0000F2D0 7A00                       	moveq	#0,d5
0000F2D2 303C 01FE                  	move.w	#(Max_Rings-1),d0	
0000F2D6                            	
0000F2D6                            RMBack2:
0000F2D6 4A99                       	tst.l	(a1)+
0000F2D8 6B00                       	bmi.s	RM2
0000F2DA 5245                       	addq.w	#1,d5
0000F2DC 51C8 FFF8                  	dbf	d0,RMBack2
0000F2E0                            RM2:
0000F2E0 31C5 870A                  	move.w	d5,(Perfect_rings_left).w
0000F2E4 4E75                       	rts
0000F2E6                            ; ===========================================================================
0000F2E6                            
0000F2E6                            ; ===========================================================================
0000F2E6                            ; ---------------------------------------------------------------------------
0000F2E6                            ; Object 41 - springs
0000F2E6                            ; ---------------------------------------------------------------------------
0000F2E6                            
0000F2E6                            Obj41:					; XREF: Obj_Index
0000F2E6 7000                       		moveq	#0,d0
0000F2E8 1028 0024                  		move.b	$24(a0),d0
0000F2EC 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F2F0 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F2F4 6100 F60C                  		bsr.w	DisplaySprite
0000F2F8 3028 0008                  		move.w	8(a0),d0
0000F2FC 0240 FF80                  		andi.w	#$FF80,d0
0000F300 3238 F700                  		move.w	($FFFFF700).w,d1
0000F304 0441 0080                  		subi.w	#$80,d1
0000F308 0241 FF80                  		andi.w	#$FF80,d1
0000F30C 9041                       		sub.w	d1,d0
0000F30E 0C40 0280                  		cmpi.w	#$280,d0
0000F312 6300                       		bls.s	Obj41_NoDel
0000F314 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F318 6700 F638                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000F31C 3440                       		movea.w	d0,a2	; load address into a2
0000F31E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F322 6000 F62E                  		bra.w	DeleteObject	; and delete object
0000F326                            
0000F326                            Obj41_NoDel:
0000F326 4E75                       		rts	
0000F328                            ; ===========================================================================
0000F328 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F32A 0000                       		dc.w Obj41_Up-Obj41_Index
0000F32C 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F32E 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F330 0000                       		dc.w Obj41_LR-Obj41_Index
0000F332 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F334 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F336 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F338 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F33A 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F33C                            
0000F33C F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F33E F600                       		dc.w -$A00		; power	of yellow spring
0000F340                            ; ===========================================================================
0000F340                            
0000F340                            Obj41_Main:				; XREF: Obj41_Index
0000F340 5428 0024                  		addq.b	#2,$24(a0)
0000F344 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F34C 317C 0523 0002             		move.w	#$523,2(a0)
0000F352 0028 0004 0001             		ori.b	#4,1(a0)
0000F358 117C 0010 0019             		move.b	#$10,$19(a0)
0000F35E 117C 0004 0018             		move.b	#4,$18(a0)
0000F364 1028 0028                  		move.b	$28(a0),d0
0000F368 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F36C 6700                       		beq.s	loc_DB54	; if not, branch
0000F36E 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F374 117C 0001 001C             		move.b	#1,$1C(a0)
0000F37A 117C 0003 001A             		move.b	#3,$1A(a0)
0000F380 317C 0533 0002             		move.w	#$533,2(a0)
0000F386 117C 0008 0019             		move.b	#8,$19(a0)
0000F38C                            
0000F38C                            loc_DB54:
0000F38C 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F390 6700                       		beq.s	loc_DB66	; if not, branch
0000F392 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F398 08E8 0001 0022             		bset	#1,$22(a0)
0000F39E                            
0000F39E                            loc_DB66:
0000F39E 0800 0001                  		btst	#1,d0
0000F3A2 6700                       		beq.s	loc_DB72
0000F3A4 08E8 0005 0002             		bset	#5,2(a0)
0000F3AA                            
0000F3AA                            loc_DB72:
0000F3AA 0240 000F                  		andi.w	#$F,d0
0000F3AE 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F3B4 4E75                       		rts	
0000F3B6                            ; ===========================================================================
0000F3B6                            
0000F3B6                            Obj41_Up:				; XREF: Obj41_Index
0000F3B6 323C 001B                  		move.w	#$1B,d1
0000F3BA 343C 0008                  		move.w	#8,d2
0000F3BE 363C 0010                  		move.w	#$10,d3
0000F3C2 3828 0008                  		move.w	8(a0),d4
0000F3C6 6100 0000                  		bsr.w	SolidObject
0000F3CA 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F3CE 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F3D0 4E75                       		rts	
0000F3D2                            ; ===========================================================================
0000F3D2                            
0000F3D2                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F3D2 5428 0024                  		addq.b	#2,$24(a0)
0000F3D6 5069 000C                  		addq.w	#8,$C(a1)
0000F3DA 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F3E0 08E9 0001 0022             		bset	#1,$22(a1)
0000F3E6 08A9 0003 0022             		bclr	#3,$22(a1)
0000F3EC 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F3F2 137C 0002 0024             		move.b	#2,$24(a1)
0000F3F8 08A8 0003 0022             		bclr	#3,$22(a0)
0000F3FE 4228 0025                  		clr.b	$25(a0)
0000F402 303C 00CC                  		move.w	#$CC,d0
0000F406 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0000F40C                            
0000F40C                            Obj41_AniUp:				; XREF: Obj41_Index
0000F40C 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F412 6000 C54E                  		bra.w	AnimateSprite
0000F416                            ; ===========================================================================
0000F416                            
0000F416                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F416 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F41C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F420 4E75                       		rts	
0000F422                            ; ===========================================================================
0000F422                            
0000F422                            Obj41_LR:				; XREF: Obj41_Index
0000F422 323C 0013                  		move.w	#$13,d1
0000F426 343C 000E                  		move.w	#$E,d2
0000F42A 363C 000F                  		move.w	#$F,d3
0000F42E 3828 0008                  		move.w	8(a0),d4
0000F432 6100 0000                  		bsr.w	SolidObject
0000F436 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F43C 6600                       		bne.s	loc_DC0C
0000F43E 117C 0008 0024             		move.b	#8,$24(a0)
0000F444                            
0000F444                            loc_DC0C:
0000F444 0828 0005 0022             		btst	#5,$22(a0)
0000F44A 6600                       		bne.s	Obj41_BounceLR
0000F44C 4E75                       		rts	
0000F44E                            ; ===========================================================================
0000F44E                            
0000F44E                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F44E 5428 0024                  		addq.b	#2,$24(a0)
0000F452 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F458 5069 0008                  		addq.w	#8,8(a1)
0000F45C 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F462 6600                       		bne.s	loc_DC36	; if yes, branch
0000F464 0469 0010 0008             		subi.w	#$10,8(a1)
0000F46A 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F46E                            
0000F46E                            loc_DC36:
0000F46E 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F474 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000F47A 0869 0000 0022             		bchg	#0,$22(a1)
0000F480 0829 0002 0022             		btst	#2,$22(a1)
0000F486 6600                       		bne.s	loc_DC56
0000F488 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000F48E                            
0000F48E                            loc_DC56:
0000F48E 08A8 0005 0022             		bclr	#5,$22(a0)
0000F494 08A9 0005 0022             		bclr	#5,$22(a1)
0000F49A 303C 00CC                  		move.w	#$CC,d0
0000F49E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0000F4A4                            
0000F4A4                            Obj41_AniLR:				; XREF: Obj41_Index
0000F4A4 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F4AA 6000 C4B6                  		bra.w	AnimateSprite
0000F4AE                            ; ===========================================================================
0000F4AE                            
0000F4AE                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F4AE 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F4B4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F4B8 4E75                       		rts	
0000F4BA                            ; ===========================================================================
0000F4BA                            
0000F4BA                            Obj41_Dwn:				; XREF: Obj41_Index
0000F4BA 323C 001B                  		move.w	#$1B,d1
0000F4BE 343C 0008                  		move.w	#8,d2
0000F4C2 363C 0010                  		move.w	#$10,d3
0000F4C6 3828 0008                  		move.w	8(a0),d4
0000F4CA 6100 0000                  		bsr.w	SolidObject
0000F4CE 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F4D4 6600                       		bne.s	loc_DCA4
0000F4D6 117C 000E 0024             		move.b	#$E,$24(a0)
0000F4DC                            
0000F4DC                            loc_DCA4:
0000F4DC 4A28 0025                  		tst.b	$25(a0)
0000F4E0 6600                       		bne.s	locret_DCAE
0000F4E2 4A44                       		tst.w	d4
0000F4E4 6B00                       		bmi.s	Obj41_BounceDwn
0000F4E6                            
0000F4E6                            locret_DCAE:
0000F4E6 4E75                       		rts	
0000F4E8                            ; ===========================================================================
0000F4E8                            
0000F4E8                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F4E8 5428 0024                  		addq.b	#2,$24(a0)
0000F4EC 5169 000C                  		subq.w	#8,$C(a1)
0000F4F0 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F4F6 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F4FA 08E9 0001 0022             		bset	#1,$22(a1)
0000F500 08A9 0003 0022             		bclr	#3,$22(a1)
0000F506 137C 0002 0024             		move.b	#2,$24(a1)
0000F50C 08A8 0003 0022             		bclr	#3,$22(a0)
0000F512 4228 0025                  		clr.b	$25(a0)
0000F516 303C 00CC                  		move.w	#$CC,d0
0000F51A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0000F520                            
0000F520                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F520 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F526 6000 C43A                  		bra.w	AnimateSprite
0000F52A                            ; ===========================================================================
0000F52A                            
0000F52A                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F52A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F530 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F534 4E75                       		rts	
0000F536                            ; ===========================================================================
0000F536                            Ani_obj41:
0000F536                            	include "_anim\obj41.asm"
0000F536                            ; ---------------------------------------------------------------------------
0000F536                            ; Animation script - springs
0000F536                            ; ---------------------------------------------------------------------------
0000F536 0000                       		dc.w byte_DD02-Ani_obj41
0000F538 0000                       		dc.w byte_DD0E-Ani_obj41
0000F53A 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F546 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F552                            		even
0000F552                            		even
0000F552                            
0000F552                            ; ---------------------------------------------------------------------------
0000F552                            ; Sprite mappings - springs
0000F552                            ; ---------------------------------------------------------------------------
0000F552                            Map_obj41:
0000F552                            	include "_maps\obj41.asm"
0000F552                            ; ---------------------------------------------------------------------------
0000F552                            ; Sprite mappings - springs
0000F552                            ; ---------------------------------------------------------------------------
0000F552 0000                       		dc.w byte_DD26-Map_obj41
0000F554 0000                       		dc.w byte_DD31-Map_obj41
0000F556 0000                       		dc.w byte_DD37-Map_obj41
0000F558 0000                       		dc.w byte_DD47-Map_obj41
0000F55A 0000                       		dc.w byte_DD4D-Map_obj41
0000F55C 0000                       		dc.w byte_DD53-Map_obj41
0000F55E 02                         byte_DD26:	dc.b 2
0000F55F F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F564 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F569 01                         byte_DD31:	dc.b 1
0000F56A 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F56F 03                         byte_DD37:	dc.b 3
0000F570 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F575 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F57A 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F57F 01                         byte_DD47:	dc.b 1
0000F580 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F585 01                         byte_DD4D:	dc.b 1
0000F586 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F58B 04                         byte_DD53:	dc.b 4
0000F58C F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F591 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F596 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F59B 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F5A0                            		even
0000F5A0                            		even
0000F5A0                            
0000F5A0                            ; ===========================================================================
0000F5A0                            ; ---------------------------------------------------------------------------
0000F5A0                            ; Object 42 - Newtron enemy (GHZ)
0000F5A0                            ; ---------------------------------------------------------------------------
0000F5A0                            
0000F5A0                            Obj42:					; XREF: Obj_Index
0000F5A0 7000                       		moveq	#0,d0
0000F5A2 1028 0024                  		move.b	$24(a0),d0
0000F5A6 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F5AA 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F5AE                            ; ===========================================================================
0000F5AE 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F5B0 0000                       		dc.w Obj42_Action-Obj42_Index
0000F5B2 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F5B4                            ; ===========================================================================
0000F5B4                            
0000F5B4                            Obj42_Main:				; XREF: Obj42_Index
0000F5B4 5428 0024                  		addq.b	#2,$24(a0)
0000F5B8 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F5C0 317C 049B 0002             		move.w	#$49B,2(a0)
0000F5C6 117C 0004 0001             		move.b	#4,1(a0)
0000F5CC 117C 0004 0018             		move.b	#4,$18(a0)
0000F5D2 117C 0014 0019             		move.b	#$14,$19(a0)
0000F5D8 117C 0010 0016             		move.b	#$10,$16(a0)
0000F5DE 117C 0008 0017             		move.b	#8,$17(a0)
0000F5E4                            
0000F5E4                            Obj42_Action:				; XREF: Obj42_Index
0000F5E4 7000                       		moveq	#0,d0
0000F5E6 1028 0025                  		move.b	$25(a0),d0
0000F5EA 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F5EE 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F5F2 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F5F8 6100 C368                  		bsr.w	AnimateSprite
0000F5FC 6000 0000                  		bra.w	MarkObjGone
0000F600                            ; ===========================================================================
0000F600 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F602 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F604 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F606 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F608 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F60A                            ; ===========================================================================
0000F60A                            
0000F60A                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F60A 08E8 0000 0022             		bset	#0,$22(a0)
0000F610 3038 D008                  		move.w	($FFFFD008).w,d0
0000F614 9068 0008                  		sub.w	8(a0),d0
0000F618 6400                       		bcc.s	loc_DDEA
0000F61A 4440                       		neg.w	d0
0000F61C 08A8 0000 0022             		bclr	#0,$22(a0)
0000F622                            
0000F622                            loc_DDEA:
0000F622 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F626 6400                       		bcc.s	locret_DE12	; if not, branch
0000F628 5428 0025                  		addq.b	#2,$25(a0)
0000F62C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F632 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F636 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F638 317C 249B 0002             		move.w	#$249B,2(a0)
0000F63E 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F644 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F64A                            
0000F64A                            locret_DE12:
0000F64A 4E75                       		rts	
0000F64C                            ; ===========================================================================
0000F64C                            
0000F64C                            Obj42_Type00:				; XREF: Obj42_Index2
0000F64C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F652 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F654 08E8 0000 0022             		bset	#0,$22(a0)
0000F65A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F65E 9068 0008                  		sub.w	8(a0),d0
0000F662 6400                       		bcc.s	locret_DE32
0000F664 08A8 0000 0022             		bclr	#0,$22(a0)
0000F66A                            
0000F66A                            locret_DE32:
0000F66A 4E75                       		rts	
0000F66C                            ; ===========================================================================
0000F66C                            
0000F66C                            Obj42_Fall:				; XREF: Obj42_Type00
0000F66C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F672 6600                       		bne.s	loc_DE42
0000F674 117C 000C 0020             		move.b	#$C,$20(a0)
0000F67A                            
0000F67A                            loc_DE42:
0000F67A 6100 F24C                  		bsr.w	ObjectFall
0000F67E 6100 0000                  		bsr.w	ObjHitFloor
0000F682 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F684 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F686 D368 000C                  		add.w	d1,$C(a0)
0000F68A 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F690 5428 0025                  		addq.b	#2,$25(a0)
0000F694 117C 0002 001C             		move.b	#2,$1C(a0)
0000F69A 0828 0005 0002             		btst	#5,2(a0)
0000F6A0 6700                       		beq.s	Obj42_Move
0000F6A2 5228 001C                  		addq.b	#1,$1C(a0)
0000F6A6                            
0000F6A6                            Obj42_Move:
0000F6A6 117C 000D 0020             		move.b	#$D,$20(a0)
0000F6AC 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F6B2 0828 0000 0022             		btst	#0,$22(a0)
0000F6B8 6600                       		bne.s	locret_DE86
0000F6BA 4468 0010                  		neg.w	$10(a0)
0000F6BE                            
0000F6BE                            locret_DE86:
0000F6BE 4E75                       		rts	
0000F6C0                            ; ===========================================================================
0000F6C0                            
0000F6C0                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F6C0 6100 F226                  		bsr.w	SpeedToPos
0000F6C4 6100 0000                  		bsr.w	ObjHitFloor
0000F6C8 0C41 FFF8                  		cmpi.w	#-8,d1
0000F6CC 6D00                       		blt.s	loc_DEA2
0000F6CE 0C41 000C                  		cmpi.w	#$C,d1
0000F6D2 6C00                       		bge.s	loc_DEA2
0000F6D4 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F6D8 4E75                       		rts	
0000F6DA                            ; ===========================================================================
0000F6DA                            
0000F6DA                            loc_DEA2:
0000F6DA 5428 0025                  		addq.b	#2,$25(a0)
0000F6DE 4E75                       		rts	
0000F6E0                            ; ===========================================================================
0000F6E0                            
0000F6E0                            Obj42_Speed:				; XREF: Obj42_Index2
0000F6E0 6100 F206                  		bsr.w	SpeedToPos
0000F6E4 4E75                       		rts	
0000F6E6                            ; ===========================================================================
0000F6E6                            
0000F6E6                            Obj42_Type01:				; XREF: Obj42_Index2
0000F6E6 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F6EC 6600                       		bne.s	Obj42_FireMissile
0000F6EE 117C 000C 0020             		move.b	#$C,$20(a0)
0000F6F4                            
0000F6F4                            Obj42_FireMissile:
0000F6F4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F6FA 6600                       		bne.s	locret_DF14
0000F6FC 4A28 0032                  		tst.b	$32(a0)
0000F700 6600                       		bne.s	locret_DF14
0000F702 117C 0001 0032             		move.b	#1,$32(a0)
0000F708 6100 F94E                  		bsr.w	SingleObjLoad
0000F70C 6600                       		bne.s	locret_DF14
0000F70E 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F712 3368 0008 0008             		move.w	8(a0),8(a1)
0000F718 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F71E 5169 000C                  		subq.w	#8,$C(a1)
0000F722 337C 0200 0010             		move.w	#$200,$10(a1)
0000F728 303C 0014                  		move.w	#$14,d0
0000F72C 0828 0000 0022             		btst	#0,$22(a0)
0000F732 6600                       		bne.s	loc_DF04
0000F734 4440                       		neg.w	d0
0000F736 4469 0010                  		neg.w	$10(a1)
0000F73A                            
0000F73A                            loc_DF04:
0000F73A D169 0008                  		add.w	d0,8(a1)
0000F73E 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F744 137C 0001 0028             		move.b	#1,$28(a1)
0000F74A                            
0000F74A                            locret_DF14:
0000F74A 4E75                       		rts	
0000F74C                            ; ===========================================================================
0000F74C                            
0000F74C                            Obj42_Delete:				; XREF: Obj42_Index
0000F74C 6000 F204                  		bra.w	DeleteObject
0000F750                            ; ===========================================================================
0000F750                            Ani_obj42:
0000F750                            	include "_anim\obj42.asm"
0000F750                            ; ---------------------------------------------------------------------------
0000F750                            ; Animation script - Newtron enemy
0000F750                            ; ---------------------------------------------------------------------------
0000F750 0000                       		dc.w byte_DF24-Ani_obj42
0000F752 0000                       		dc.w byte_DF28-Ani_obj42
0000F754 0000                       		dc.w byte_DF30-Ani_obj42
0000F756 0000                       		dc.w byte_DF34-Ani_obj42
0000F758 0000                       		dc.w byte_DF38-Ani_obj42
0000F75A 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F75E 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F766 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F76A 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F76E 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F778                            		even
0000F778                            		even
0000F778                            
0000F778                            ; ---------------------------------------------------------------------------
0000F778                            ; Sprite mappings - Newtron enemy (GHZ)
0000F778                            ; ---------------------------------------------------------------------------
0000F778                            Map_obj42:
0000F778                            	include "_maps\obj42.asm"
0000F778                            ; ---------------------------------------------------------------------------
0000F778                            ; Sprite mappings - Newtron enemy (GHZ)
0000F778                            ; ---------------------------------------------------------------------------
0000F778 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F77C 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F780 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F784 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F788 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F78C 0000                       		dc.w byte_DFF8-Map_obj42
0000F78E 03                         byte_DF58:	dc.b 3
0000F78F EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F794 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F799 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F79E 03                         byte_DF68:	dc.b 3
0000F79F EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F7A4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F7A9 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F7AE 03                         byte_DF78:	dc.b 3
0000F7AF EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F7B4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F7B9 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F7BE 04                         byte_DF88:	dc.b 4
0000F7BF EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F7C4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F7C9 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F7CE 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F7D3 03                         byte_DF9D:	dc.b 3
0000F7D4 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F7D9 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F7DE 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F7E3 02                         byte_DFAD:	dc.b 2
0000F7E4 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F7E9 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F7EE 03                         byte_DFB8:	dc.b 3
0000F7EF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F7F4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F7F9 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F7FE 03                         byte_DFC8:	dc.b 3
0000F7FF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F804 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F809 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F80E 03                         byte_DFD8:	dc.b 3
0000F80F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F814 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F819 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F81E 03                         byte_DFE8:	dc.b 3
0000F81F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F824 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F829 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000F82E 00                         byte_DFF8:	dc.b 0
0000F830 00                         		even
0000F830 00                         		even
0000F830                            
0000F830                            ; ===========================================================================
0000F830                            ; ---------------------------------------------------------------------------
0000F830                            ; Object 43 - Roller enemy (SYZ)
0000F830                            ; ---------------------------------------------------------------------------
0000F830                            
0000F830                            Obj43:					; XREF: Obj_Index
0000F830 7000                       		moveq	#0,d0
0000F832 1028 0024                  		move.b	$24(a0),d0
0000F836 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000F83A 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000F83E                            ; ===========================================================================
0000F83E 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000F840 0000                       		dc.w Obj43_Action-Obj43_Index
0000F842                            ; ===========================================================================
0000F842                            
0000F842                            Obj43_Main:				; XREF: Obj43_Index
0000F842 117C 000E 0016             		move.b	#$E,$16(a0)
0000F848 117C 0008 0017             		move.b	#8,$17(a0)
0000F84E 6100 F078                  		bsr.w	ObjectFall
0000F852 6100 0000                  		bsr.w	ObjHitFloor
0000F856 4A41                       		tst.w	d1
0000F858 6A00                       		bpl.s	locret_E052
0000F85A D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000F85E 317C 0000 0012             		move.w	#0,$12(a0)
0000F864 5428 0024                  		addq.b	#2,$24(a0)
0000F868 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000F870 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000F876 117C 0004 0001             		move.b	#4,1(a0)
0000F87C 117C 0004 0018             		move.b	#4,$18(a0)
0000F882 117C 0010 0019             		move.b	#$10,$19(a0)
0000F888                            
0000F888                            locret_E052:
0000F888 4E75                       		rts	
0000F88A                            ; ===========================================================================
0000F88A                            
0000F88A                            Obj43_Action:				; XREF: Obj43_Index
0000F88A 7000                       		moveq	#0,d0
0000F88C 1028 0025                  		move.b	$25(a0),d0
0000F890 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000F894 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000F898 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000F89E 6100 C0C2                  		bsr.w	AnimateSprite
0000F8A2 3028 0008                  		move.w	8(a0),d0
0000F8A6 0240 FF80                  		andi.w	#$FF80,d0
0000F8AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F8AE 0441 0080                  		subi.w	#$80,d1
0000F8B2 0241 FF80                  		andi.w	#$FF80,d1
0000F8B6 9041                       		sub.w	d1,d0
0000F8B8 0C40 0280                  		cmpi.w	#$280,d0
0000F8BC 6E00 0000                  		bgt.w	Obj43_ChkGone
0000F8C0 6000 F040                  		bra.w	DisplaySprite
0000F8C4                            ; ===========================================================================
0000F8C4                            
0000F8C4                            Obj43_ChkGone:				; XREF: Obj43_Action
0000F8C4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F8C8 6700                       		beq.s	Obj43_Delete		; if it's zero, don't remember object
0000F8CA 3440                       		movea.w	d0,a2	; load address into a2
0000F8CC 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F8D0                            
0000F8D0                            Obj43_Delete:
0000F8D0 6000 F080                  		bra.w	DeleteObject
0000F8D4                            ; ===========================================================================
0000F8D4 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000F8D6 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000F8D8 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000F8DA 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000F8DC                            ; ===========================================================================
0000F8DC                            
0000F8DC                            Obj43_RollChk:				; XREF: Obj43_Index2
0000F8DC 3038 D008                  		move.w	($FFFFD008).w,d0
0000F8E0 0440 0100                  		subi.w	#$100,d0
0000F8E4 6500                       		bcs.s	loc_E0D2
0000F8E6 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000F8EA 6500                       		bcs.s	loc_E0D2
0000F8EC 5828 0025                  		addq.b	#4,$25(a0)
0000F8F0 117C 0002 001C             		move.b	#2,$1C(a0)
0000F8F6 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000F8FC 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000F902                            
0000F902                            loc_E0D2:
0000F902 588F                       		addq.l	#4,sp
0000F904 4E75                       		rts	
0000F906                            ; ===========================================================================
0000F906                            
0000F906                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000F906 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000F90C 6700                       		beq.s	loc_E0F8
0000F90E 5368 0030                  		subq.w	#1,$30(a0)
0000F912 6A00                       		bpl.s	locret_E0F6
0000F914 117C 0001 001C             		move.b	#1,$1C(a0)
0000F91A 317C 0700 0010             		move.w	#$700,$10(a0)
0000F920 117C 008E 0020             		move.b	#$8E,$20(a0)
0000F926                            
0000F926                            locret_E0F6:
0000F926 4E75                       		rts	
0000F928                            ; ===========================================================================
0000F928                            
0000F928                            loc_E0F8:
0000F928 5428 0025                  		addq.b	#2,$25(a0)
0000F92C 4E75                       		rts	
0000F92E                            ; ===========================================================================
0000F92E                            
0000F92E                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000F92E 6100 0000                  		bsr.w	Obj43_Stop
0000F932 6100 EFB4                  		bsr.w	SpeedToPos
0000F936 6100 0000                  		bsr.w	ObjHitFloor
0000F93A 0C41 FFF8                  		cmpi.w	#-8,d1
0000F93E 6D00                       		blt.s	Obj43_Jump
0000F940 0C41 000C                  		cmpi.w	#$C,d1
0000F944 6C00                       		bge.s	Obj43_Jump
0000F946 D368 000C                  		add.w	d1,$C(a0)
0000F94A 4E75                       		rts	
0000F94C                            ; ===========================================================================
0000F94C                            
0000F94C                            Obj43_Jump:
0000F94C 5428 0025                  		addq.b	#2,$25(a0)
0000F950 08E8 0000 0032             		bset	#0,$32(a0)
0000F956 6700                       		beq.s	locret_E12E
0000F958 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000F95E                            
0000F95E                            locret_E12E:
0000F95E 4E75                       		rts	
0000F960                            ; ===========================================================================
0000F960                            
0000F960                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000F960 6100 EF66                  		bsr.w	ObjectFall
0000F964 4A68 0012                  		tst.w	$12(a0)
0000F968 6B00                       		bmi.s	locret_E150
0000F96A 6100 0000                  		bsr.w	ObjHitFloor
0000F96E 4A41                       		tst.w	d1
0000F970 6A00                       		bpl.s	locret_E150
0000F972 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000F976 5528 0025                  		subq.b	#2,$25(a0)
0000F97A 317C 0000 0012             		move.w	#0,$12(a0)
0000F980                            
0000F980                            locret_E150:
0000F980 4E75                       		rts	
0000F982                            
0000F982                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F982                            
0000F982                            
0000F982                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000F982 4A28 0032                  		tst.b	$32(a0)
0000F986 6B00                       		bmi.s	locret_E188
0000F988 3038 D008                  		move.w	($FFFFD008).w,d0
0000F98C 0440 0030                  		subi.w	#$30,d0
0000F990 9068 0008                  		sub.w	8(a0),d0
0000F994 6400                       		bcc.s	locret_E188
0000F996 117C 0000 001C             		move.b	#0,$1C(a0)
0000F99C 117C 000E 0020             		move.b	#$E,$20(a0)
0000F9A2 4268 0010                  		clr.w	$10(a0)
0000F9A6 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000F9AC 117C 0002 0025             		move.b	#2,$25(a0)
0000F9B2 08E8 0007 0032             		bset	#7,$32(a0)
0000F9B8                            
0000F9B8                            locret_E188:
0000F9B8 4E75                       		rts	
0000F9BA                            ; End of function Obj43_Stop
0000F9BA                            
0000F9BA                            ; ===========================================================================
0000F9BA                            Ani_obj43:
0000F9BA                            	include "_anim\obj43.asm"
0000F9BA                            ; ---------------------------------------------------------------------------
0000F9BA                            ; Animation script - Roller enemy
0000F9BA                            ; ---------------------------------------------------------------------------
0000F9BA 0000                       		dc.w byte_E190-Ani_obj43
0000F9BC 0000                       		dc.w byte_E196-Ani_obj43
0000F9BE 0000                       		dc.w byte_E19C-Ani_obj43
0000F9C0 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000F9C6 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000F9CC 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000F9D2 00                         		even
0000F9D2 00                         		even
0000F9D2                            
0000F9D2                            ; ---------------------------------------------------------------------------
0000F9D2                            ; Sprite mappings - Roller enemy (SYZ)
0000F9D2                            ; ---------------------------------------------------------------------------
0000F9D2                            Map_obj43:
0000F9D2                            	include "_maps\obj43.asm"
0000F9D2                            ; ---------------------------------------------------------------------------
0000F9D2                            ; Sprite mappings - Roller enemy (SYZ)
0000F9D2                            ; ---------------------------------------------------------------------------
0000F9D2 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000F9D6 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000F9DA 0000                       		dc.w byte_E1CE-Map_obj43
0000F9DC 02                         byte_E1AC:	dc.b 2
0000F9DD DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000F9E2 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000F9E7 02                         byte_E1B7:	dc.b 2
0000F9E8 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000F9ED FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000F9F2 01                         byte_E1C2:	dc.b 1
0000F9F3 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000F9F8 01                         byte_E1C8:	dc.b 1
0000F9F9 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000F9FE 01                         byte_E1CE:	dc.b 1
0000F9FF F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000FA04                            		even
0000FA04                            		even
0000FA04                            
0000FA04                            ; ===========================================================================
0000FA04                            ; ---------------------------------------------------------------------------
0000FA04                            ; Object 44 - walls (GHZ)
0000FA04                            ; ---------------------------------------------------------------------------
0000FA04                            
0000FA04                            Obj44:					; XREF: Obj_Index
0000FA04 7000                       		moveq	#0,d0
0000FA06 1028 0024                  		move.b	$24(a0),d0
0000FA0A 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000FA0E 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000FA12                            ; ===========================================================================
0000FA12 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000FA14 0000                       		dc.w Obj44_Solid-Obj44_Index
0000FA16 0000                       		dc.w Obj44_Display-Obj44_Index
0000FA18                            ; ===========================================================================
0000FA18                            
0000FA18                            Obj44_Main:				; XREF: Obj44_Index
0000FA18 5428 0024                  		addq.b	#2,$24(a0)
0000FA1C 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000FA24 317C 434C 0002             		move.w	#$434C,2(a0)
0000FA2A 0028 0004 0001             		ori.b	#4,1(a0)
0000FA30 117C 0008 0019             		move.b	#8,$19(a0)
0000FA36 117C 0006 0018             		move.b	#6,$18(a0)
0000FA3C 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000FA42 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000FA48 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000FA4A 5428 0024                  		addq.b	#2,$24(a0)
0000FA4E 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000FA50                            ; ===========================================================================
0000FA50                            
0000FA50                            Obj44_Solid:				; XREF: Obj44_Index
0000FA50 323C 0013                  		move.w	#$13,d1
0000FA54 343C 0028                  		move.w	#$28,d2
0000FA58 6100 A332                  		bsr.w	Obj44_SolidWall
0000FA5C                            
0000FA5C                            Obj44_Display:				; XREF: Obj44_Index
0000FA5C 6100 EEA4                  		bsr.w	DisplaySprite
0000FA60 3028 0008                  		move.w	8(a0),d0
0000FA64 0240 FF80                  		andi.w	#$FF80,d0
0000FA68 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA6C 0441 0080                  		subi.w	#$80,d1
0000FA70 0241 FF80                  		andi.w	#$FF80,d1
0000FA74 9041                       		sub.w	d1,d0
0000FA76 0C40 0280                  		cmpi.w	#$280,d0
0000FA7A 6300                       		bls.s	Obj44_NoDel
0000FA7C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FA80 6700 EED0                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000FA84 3440                       		movea.w	d0,a2	; load address into a2
0000FA86 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FA8A 6000 EEC6                  		bra.w	DeleteObject	; and delete object
0000FA8E                            
0000FA8E                            Obj44_NoDel:
0000FA8E 4E75                       		rts	
0000FA90                            ; ===========================================================================
0000FA90                            ; ---------------------------------------------------------------------------
0000FA90                            ; Sprite mappings - walls (GHZ)
0000FA90                            ; ---------------------------------------------------------------------------
0000FA90                            Map_obj44:
0000FA90                            	include "_maps\obj44.asm"
0000FA90                            ; ---------------------------------------------------------------------------
0000FA90                            ; Sprite mappings - walls (GHZ)
0000FA90                            ; ---------------------------------------------------------------------------
0000FA90 0000                       		dc.w byte_E256-Map_obj44
0000FA92 0000                       		dc.w byte_E26B-Map_obj44
0000FA94 0000                       		dc.w byte_E280-Map_obj44
0000FA96 04                         byte_E256:	dc.b 4
0000FA97 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000FA9C F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FAA1 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FAA6 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FAAB 04                         byte_E26B:	dc.b 4
0000FAAC E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000FAB1 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FAB6 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FABB 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FAC0 04                         byte_E280:	dc.b 4
0000FAC1 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000FAC6 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000FACB 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000FAD0 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000FAD6 00                         		even
0000FAD6 00                         		even
0000FAD6                            
0000FAD6                            ; ===========================================================================
0000FAD6                            ; ---------------------------------------------------------------------------
0000FAD6                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000FAD6                            ; ---------------------------------------------------------------------------
0000FAD6                            
0000FAD6                            Obj13:					; XREF: Obj_Index
0000FAD6 7000                       		moveq	#0,d0
0000FAD8 1028 0024                  		move.b	$24(a0),d0
0000FADC 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000FAE0 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000FAE4 6000 0000                  		bra.w	Obj14_ChkDel
0000FAE8                            ; ===========================================================================
0000FAE8 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000FAEA 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000FAEC                            ; ---------------------------------------------------------------------------
0000FAEC                            ;
0000FAEC                            ; Lava ball production rates
0000FAEC                            ;
0000FAEC 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000FAF2                            ; ===========================================================================
0000FAF2                            
0000FAF2                            Obj13_Main:				; XREF: Obj13_Index
0000FAF2 5428 0024                  		addq.b	#2,$24(a0)
0000FAF6 1028 0028                  		move.b	$28(a0),d0
0000FAFA E848                       		lsr.w	#4,d0
0000FAFC 0240 000F                  		andi.w	#$F,d0
0000FB00 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000FB06 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000FB0C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FB12                            
0000FB12                            Obj13_MakeLava:				; XREF: Obj13_Index
0000FB12 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000FB16 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000FB18 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000FB1E 6100 F1A8                  		bsr.w	ChkObjOnScreen
0000FB22 6600                       		bne.s	locret_E302
0000FB24 6100 F532                  		bsr.w	SingleObjLoad
0000FB28 6600                       		bne.s	locret_E302
0000FB2A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FB2E 3368 0008 0008             		move.w	8(a0),8(a1)
0000FB34 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FB3A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FB40                            
0000FB40                            locret_E302:
0000FB40 4E75                       		rts	
0000FB42                            ; ===========================================================================
0000FB42                            ; ---------------------------------------------------------------------------
0000FB42                            ; Object 14 - lava balls (MZ, SLZ)
0000FB42                            ; ---------------------------------------------------------------------------
0000FB42                            
0000FB42                            Obj14:					; XREF: Obj_Index
0000FB42 7000                       		moveq	#0,d0
0000FB44 1028 0024                  		move.b	$24(a0),d0
0000FB48 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FB4C 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FB50 6000 EDB0                  		bra.w	DisplaySprite
0000FB54                            ; ===========================================================================
0000FB54 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FB56 0000                       		dc.w Obj14_Action-Obj14_Index
0000FB58 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FB5A                            
0000FB5A FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FB64 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FB6C                            ; ===========================================================================
0000FB6C                            
0000FB6C                            Obj14_Main:				; XREF: Obj14_Index
0000FB6C 5428 0024                  		addq.b	#2,$24(a0)
0000FB70 117C 0008 0016             		move.b	#8,$16(a0)
0000FB76 117C 0008 0017             		move.b	#8,$17(a0)
0000FB7C 217C 0000 C5FC 0004        		move.l	#Map_obj14,4(a0)
0000FB84 317C 0345 0002             		move.w	#$345,2(a0)
0000FB8A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FB90 6600                       		bne.s	loc_E35A
0000FB92 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FB98                            
0000FB98                            loc_E35A:
0000FB98 117C 0004 0001             		move.b	#4,1(a0)
0000FB9E 117C 0003 0018             		move.b	#3,$18(a0)
0000FBA4 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FBAA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FBB0 4A28 0029                  		tst.b	$29(a0)
0000FBB4 6700                       		beq.s	Obj14_SetSpeed
0000FBB6 5428 0018                  		addq.b	#2,$18(a0)
0000FBBA                            
0000FBBA                            Obj14_SetSpeed:
0000FBBA 7000                       		moveq	#0,d0
0000FBBC 1028 0028                  		move.b	$28(a0),d0
0000FBC0 D040                       		add.w	d0,d0
0000FBC2 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FBC8 117C 0008 0019             		move.b	#8,$19(a0)
0000FBCE 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FBD4 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FBD6 117C 0010 0019             		move.b	#$10,$19(a0)
0000FBDC 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FBE2 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FBE8 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FBEE                            
0000FBEE                            Obj14_PlaySnd:
0000FBEE 303C 00AE                  		move.w	#$AE,d0
0000FBF2 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FBF8                            
0000FBF8                            Obj14_Action:				; XREF: Obj14_Index
0000FBF8 7000                       		moveq	#0,d0
0000FBFA 1028 0028                  		move.b	$28(a0),d0
0000FBFE D040                       		add.w	d0,d0
0000FC00 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FC04 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FC08 6100 ECDE                  		bsr.w	SpeedToPos
0000FC0C 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FC12 6100 BD4E                  		bsr.w	AnimateSprite
0000FC16                            
0000FC16                            Obj14_ChkDel:				; XREF: Obj13
0000FC16 3028 0008                  		move.w	8(a0),d0
0000FC1A 0240 FF80                  		andi.w	#$FF80,d0
0000FC1E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC22 0441 0080                  		subi.w	#$80,d1
0000FC26 0241 FF80                  		andi.w	#$FF80,d1
0000FC2A 9041                       		sub.w	d1,d0
0000FC2C 0C40 0280                  		cmpi.w	#$280,d0
0000FC30 6300                       		bls.s	Obj14_NoDel
0000FC32 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FC36 6700 ED1A                  		beq.w	DeleteObject	; if it's zero, don't remember object
0000FC3A 3440                       		movea.w	d0,a2	; load address into a2
0000FC3C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FC40 6000 ED10                  		bra.w	DeleteObject	; and delete object
0000FC44                            
0000FC44                            Obj14_NoDel:
0000FC44 4E75                       		rts	
0000FC46                            ; ===========================================================================
0000FC46 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FC4A 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FC4E 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FC52 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FC56 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FC58                            ; ===========================================================================
0000FC58                            ; lavaball types 00-03 fly up and fall back down
0000FC58                            
0000FC58                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FC58 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FC5E 3028 0030                  		move.w	$30(a0),d0
0000FC62 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FC66 6400                       		bcc.s	loc_E41E	; if not, branch
0000FC68 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FC6C                            
0000FC6C                            loc_E41E:
0000FC6C 08A8 0001 0022             		bclr	#1,$22(a0)
0000FC72 4A68 0012                  		tst.w	$12(a0)
0000FC76 6A00                       		bpl.s	locret_E430
0000FC78 08E8 0001 0022             		bset	#1,$22(a0)
0000FC7E                            
0000FC7E                            locret_E430:
0000FC7E 4E75                       		rts	
0000FC80                            ; ===========================================================================
0000FC80                            ; lavaball type	04 flies up until it hits the ceiling
0000FC80                            
0000FC80                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FC80 08E8 0001 0022             		bset	#1,$22(a0)
0000FC86 6100 0000                  		bsr.w	ObjHitCeiling
0000FC8A 4A41                       		tst.w	d1
0000FC8C 6A00                       		bpl.s	locret_E452
0000FC8E 117C 0008 0028             		move.b	#8,$28(a0)
0000FC94 117C 0001 001C             		move.b	#1,$1C(a0)
0000FC9A 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FCA0                            
0000FCA0                            locret_E452:
0000FCA0 4E75                       		rts	
0000FCA2                            ; ===========================================================================
0000FCA2                            ; lavaball type	05 falls down until it hits the	floor
0000FCA2                            
0000FCA2                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FCA2 08A8 0001 0022             		bclr	#1,$22(a0)
0000FCA8 6100 0000                  		bsr.w	ObjHitFloor
0000FCAC 4A41                       		tst.w	d1
0000FCAE 6A00                       		bpl.s	locret_E474
0000FCB0 117C 0008 0028             		move.b	#8,$28(a0)
0000FCB6 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCBC 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000FCC2                            
0000FCC2                            locret_E474:
0000FCC2 4E75                       		rts	
0000FCC4                            ; ===========================================================================
0000FCC4                            ; lavaball types 06-07 move sideways
0000FCC4                            
0000FCC4                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000FCC4 08E8 0000 0022             		bset	#0,$22(a0)
0000FCCA 76F8                       		moveq	#-8,d3
0000FCCC 6100 0000                  		bsr.w	ObjHitWallLeft
0000FCD0 4A41                       		tst.w	d1
0000FCD2 6A00                       		bpl.s	locret_E498
0000FCD4 117C 0008 0028             		move.b	#8,$28(a0)
0000FCDA 117C 0003 001C             		move.b	#3,$1C(a0)
0000FCE0 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FCE6                            
0000FCE6                            locret_E498:
0000FCE6 4E75                       		rts	
0000FCE8                            ; ===========================================================================
0000FCE8                            
0000FCE8                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000FCE8 08A8 0000 0022             		bclr	#0,$22(a0)
0000FCEE 7608                       		moveq	#8,d3
0000FCF0 6100 0000                  		bsr.w	ObjHitWallRight
0000FCF4 4A41                       		tst.w	d1
0000FCF6 6A00                       		bpl.s	locret_E4BC
0000FCF8 117C 0008 0028             		move.b	#8,$28(a0)
0000FCFE 117C 0003 001C             		move.b	#3,$1C(a0)
0000FD04 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FD0A                            
0000FD0A                            locret_E4BC:
0000FD0A 4E75                       		rts	
0000FD0C                            ; ===========================================================================
0000FD0C                            
0000FD0C                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000FD0C 4E75                       		rts	
0000FD0E                            ; ===========================================================================
0000FD0E                            
0000FD0E                            Obj14_Delete:				; XREF: Obj14_Index
0000FD0E 6000 EC42                  		bra.w	DeleteObject
0000FD12                            ; ===========================================================================
0000FD12                            Ani_obj14:
0000FD12                            	include "_anim\obj14.asm"
0000FD12                            ; ---------------------------------------------------------------------------
0000FD12                            ; Animation script - lava balls
0000FD12                            ; ---------------------------------------------------------------------------
0000FD12 0000                       		dc.w byte_E4CC-Ani_obj14
0000FD14 0000                       		dc.w byte_E4D2-Ani_obj14
0000FD16 0000                       		dc.w byte_E4D6-Ani_obj14
0000FD18 0000                       		dc.w byte_E4DC-Ani_obj14
0000FD1A 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000FD20 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000FD24 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000FD2A 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000FD2E                            		even
0000FD2E                            		even
0000FD2E                            
0000FD2E                            ; ===========================================================================
0000FD2E                            ; ---------------------------------------------------------------------------
0000FD2E                            ; Object 6D - flame thrower (SBZ)
0000FD2E                            ; ---------------------------------------------------------------------------
0000FD2E                            
0000FD2E                            Obj6D:					; XREF: Obj_Index
0000FD2E 7000                       		moveq	#0,d0
0000FD30 1028 0024                  		move.b	$24(a0),d0
0000FD34 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000FD38 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000FD3C                            ; ===========================================================================
0000FD3C 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000FD3E 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000FD40                            ; ===========================================================================
0000FD40                            
0000FD40                            Obj6D_Main:				; XREF: Obj6D_Index
0000FD40 5428 0024                  		addq.b	#2,$24(a0)
0000FD44 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000FD4C 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000FD52 0028 0004 0001             		ori.b	#4,1(a0)
0000FD58 117C 0001 0018             		move.b	#1,$18(a0)
0000FD5E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FD64 117C 000C 0019             		move.b	#$C,$19(a0)
0000FD6A 1028 0028                  		move.b	$28(a0),d0
0000FD6E 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000FD72 D040                       		add.w	d0,d0		; multiply by 2
0000FD74 3140 0030                  		move.w	d0,$30(a0)
0000FD78 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000FD7C 1028 0028                  		move.b	$28(a0),d0
0000FD80 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000FD84 EB48                       		lsl.w	#5,d0		; multiply by $20
0000FD86 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000FD8A 117C 000A 0036             		move.b	#$A,$36(a0)
0000FD90 0828 0001 0022             		btst	#1,$22(a0)
0000FD96 6700                       		beq.s	Obj6D_Action
0000FD98 117C 0002 001C             		move.b	#2,$1C(a0)
0000FD9E 117C 0015 0036             		move.b	#$15,$36(a0)
0000FDA4                            
0000FDA4                            Obj6D_Action:				; XREF: Obj6D_Index
0000FDA4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000FDA8 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000FDAA 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000FDB0 0868 0000 001C             		bchg	#0,$1C(a0)
0000FDB6 6700                       		beq.s	loc_E57A
0000FDB8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000FDBE 303C 00B3                  		move.w	#$B3,d0
0000FDC2 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flame sound
0000FDC8                            
0000FDC8                            loc_E57A:
0000FDC8 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000FDCE 6100 BB92                  		bsr.w	AnimateSprite
0000FDD2 117C 0000 0020             		move.b	#0,$20(a0)
0000FDD8 1028 0036                  		move.b	$36(a0),d0
0000FDDC B028 001A                  		cmp.b	$1A(a0),d0
0000FDE0 6600                       		bne.s	Obj6D_ChkDel
0000FDE2 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000FDE8                            
0000FDE8                            Obj6D_ChkDel:
0000FDE8 3028 0008                  		move.w	8(a0),d0
0000FDEC 0240 FF80                  		andi.w	#$FF80,d0
0000FDF0 3238 F700                  		move.w	($FFFFF700).w,d1
0000FDF4 0441 0080                  		subi.w	#$80,d1
0000FDF8 0241 FF80                  		andi.w	#$FF80,d1
0000FDFC 9041                       		sub.w	d1,d0
0000FDFE 0C40 0280                  		cmpi.w	#$280,d0
0000FE02 6300 EAFE                  		bls.w	DisplaySprite
0000FE06 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FE0A 6700 EB46                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
0000FE0E 3440                       		movea.w	d0,a2	; load address into a2
0000FE10 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0000FE14 6000 EB3C                  		bra.w	DeleteObject
0000FE18                            ; ===========================================================================
0000FE18                            Ani_obj6D:
0000FE18                            	include "_anim\obj6D.asm"
0000FE18                            ; ---------------------------------------------------------------------------
0000FE18                            ; Animation script - flamethrower (SBZ)
0000FE18                            ; ---------------------------------------------------------------------------
0000FE18 0000                       		dc.w byte_E5C4-Ani_obj6D
0000FE1A 0000                       		dc.w byte_E5D2-Ani_obj6D
0000FE1C 0000                       		dc.w byte_E5DC-Ani_obj6D
0000FE1E 0000                       		dc.w byte_E5EA-Ani_obj6D
0000FE20 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000FE2E 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000FE38 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000FE46 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000FE50                            		even
0000FE50                            		even
0000FE50                            
0000FE50                            ; ---------------------------------------------------------------------------
0000FE50                            ; Sprite mappings - flame thrower (SBZ)
0000FE50                            ; ---------------------------------------------------------------------------
0000FE50                            Map_obj6D:
0000FE50                            	include "_maps\obj6D.asm"
0000FE50                            ; ---------------------------------------------------------------------------
0000FE50                            ; Sprite mappings - flame thrower (SBZ)
0000FE50                            ; ---------------------------------------------------------------------------
0000FE50 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000FE54 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000FE58 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000FE5C 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000FE60 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000FE64 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000FE68 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000FE6C 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000FE70 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000FE74 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000FE78 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000FE7C 01                         byte_E620:	dc.b 1
0000FE7D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FE82 02                         byte_E626:	dc.b 2
0000FE83 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FE88 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FE8D 02                         byte_E631:	dc.b 2
0000FE8E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FE93 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FE98 03                         byte_E63C:	dc.b 3
0000FE99 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FE9E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FEA3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEA8 03                         byte_E64C:	dc.b 3
0000FEA9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FEAE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FEB3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEB8 04                         byte_E65C:	dc.b 4
0000FEB9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FEBE 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FEC3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FEC8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FECD 04                         byte_E671:	dc.b 4
0000FECE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FED3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FED8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FEDD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEE2 05                         byte_E686:	dc.b 5
0000FEE3 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000FEE8 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FEED 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FEF2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FEF7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEFC 05                         byte_E6A0:	dc.b 5
0000FEFD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FF02 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FF07 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF0C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF11 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF16 06                         byte_E6BA:	dc.b 6
0000FF17 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000FF1C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000FF21 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FF26 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000FF2B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF30 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF35 06                         byte_E6D9:	dc.b 6
0000FF36 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000FF3B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FF40 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000FF45 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF4A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF4F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF54 01                         byte_E6F8:	dc.b 1
0000FF55 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF5A 02                         byte_E6FE:	dc.b 2
0000FF5B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF60 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF65 02                         byte_E709:	dc.b 2
0000FF66 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF6B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF70 03                         byte_E714:	dc.b 3
0000FF71 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FF76 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF7B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF80 03                         byte_E724:	dc.b 3
0000FF81 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF86 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF8B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF90 04                         byte_E734:	dc.b 4
0000FF91 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FF96 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FF9B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFA0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FFA5 04                         byte_E749:	dc.b 4
0000FFA6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FFAB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FFB0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFB5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FFBA 05                         byte_E75E:	dc.b 5
0000FFBB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000FFC0 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FFC5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FFCA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFCF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FFD4 05                         byte_E778:	dc.b 5
0000FFD5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FFDA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FFDF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FFE4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFE9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FFEE 06                         byte_E792:	dc.b 6
0000FFEF E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000FFF4 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000FFF9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FFFE 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010003 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010008 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001000D 06                         byte_E7B1:	dc.b 6
0001000E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010013 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010018 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001001D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010022 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010027 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001002C                            		even
0001002C                            		even
0001002C                            
0001002C                            ; ===========================================================================
0001002C                            ; ---------------------------------------------------------------------------
0001002C                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0001002C                            ; ---------------------------------------------------------------------------
0001002C                            
0001002C                            Obj46:					; XREF: Obj_Index
0001002C 7000                       		moveq	#0,d0
0001002E 1028 0024                  		move.b	$24(a0),d0
00010032 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
00010036 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0001003A                            ; ===========================================================================
0001003A 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0001003C 0000                       		dc.w Obj46_Action-Obj46_Index
0001003E                            ; ===========================================================================
0001003E                            
0001003E                            Obj46_Main:				; XREF: Obj46_Index
0001003E 5428 0024                  		addq.b	#2,$24(a0)
00010042 117C 000F 0016             		move.b	#$F,$16(a0)
00010048 117C 000F 0017             		move.b	#$F,$17(a0)
0001004E 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
00010056 317C 4000 0002             		move.w	#$4000,2(a0)
0001005C 117C 0004 0001             		move.b	#4,1(a0)
00010062 117C 0003 0018             		move.b	#3,$18(a0)
00010068 117C 0010 0019             		move.b	#$10,$19(a0)
0001006E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010074 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0001007A                            
0001007A                            Obj46_Action:				; XREF: Obj46_Index
0001007A 4A28 0001                  		tst.b	1(a0)
0001007E 6A00                       		bpl.s	Obj46_ChkDel
00010080 7000                       		moveq	#0,d0
00010082 1028 0028                  		move.b	$28(a0),d0	; get object type
00010086 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0001008A D040                       		add.w	d0,d0
0001008C 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
00010090 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
00010094 323C 001B                  		move.w	#$1B,d1
00010098 343C 0010                  		move.w	#$10,d2
0001009C 363C 0011                  		move.w	#$11,d3
000100A0 3828 0008                  		move.w	8(a0),d4
000100A4 6100 0000                  		bsr.w	SolidObject
000100A8                            
000100A8                            Obj46_ChkDel:
000100A8 6100 E858                  		bsr.w	DisplaySprite
000100AC 3028 0008                  		move.w	8(a0),d0
000100B0 0240 FF80                  		andi.w	#$FF80,d0
000100B4 3238 F700                  		move.w	($FFFFF700).w,d1
000100B8 0441 0080                  		subi.w	#$80,d1
000100BC 0241 FF80                  		andi.w	#$FF80,d1
000100C0 9041                       		sub.w	d1,d0
000100C2 0C40 0280                  		cmpi.w	#$280,d0
000100C6 6300                       		bls.s	Obj46_NoDel
000100C8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000100CC 6700 E884                  		beq.w	DeleteObject		; if it's zero, don't remember object
000100D0 3440                       		movea.w	d0,a2	; load address into a2
000100D2 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000100D6 6000 E87A                  		bra.w	DeleteObject	; and delete object
000100DA                            
000100DA                            Obj46_NoDel:
000100DA 4E75                       		rts	
000100DC                            ; ===========================================================================
000100DC 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
000100DE 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
000100E0 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
000100E2 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
000100E4 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
000100E6                            ; ===========================================================================
000100E6                            
000100E6                            Obj46_Type00:				; XREF: Obj46_TypeIndex
000100E6 4E75                       		rts	
000100E8                            ; ===========================================================================
000100E8                            
000100E8                            Obj46_Type02:				; XREF: Obj46_TypeIndex
000100E8 3038 D008                  		move.w	($FFFFD008).w,d0
000100EC 9068 0008                  		sub.w	8(a0),d0
000100F0 6400                       		bcc.s	loc_E888
000100F2 4440                       		neg.w	d0
000100F4                            
000100F4                            loc_E888:
000100F4 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
000100F8 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
000100FA 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
00010100                            
00010100                            Obj46_Type01:				; XREF: Obj46_TypeIndex
00010100 7000                       		moveq	#0,d0
00010102 1038 FE74                  		move.b	($FFFFFE74).w,d0
00010106 0828 0003 0028             		btst	#3,$28(a0)
0001010C 6700                       		beq.s	loc_E8A8
0001010E 4440                       		neg.w	d0
00010110 0640 0010                  		addi.w	#$10,d0
00010114                            
00010114                            loc_E8A8:
00010114 3228 0030                  		move.w	$30(a0),d1
00010118 9240                       		sub.w	d0,d1
0001011A 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0001011E 4E75                       		rts	
00010120                            ; ===========================================================================
00010120                            
00010120                            Obj46_Type03:				; XREF: Obj46_TypeIndex
00010120 6100 E7C6                  		bsr.w	SpeedToPos
00010124 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0001012A 6100 0000                  		bsr.w	ObjHitFloor
0001012E 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010130 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010134 D368 000C                  		add.w	d1,$C(a0)
00010138 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0001013C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010142 117C 0004 0028             		move.b	#4,$28(a0)
00010148 3011                       		move.w	(a1),d0
0001014A 0240 03FF                  		andi.w	#$3FF,d0
0001014E 0C40 02E8                  		cmpi.w	#$2E8,d0
00010152 6400                       		bcc.s	locret_E8EE
00010154 117C 0000 0028             		move.b	#0,$28(a0)
0001015A                            
0001015A                            locret_E8EE:
0001015A 4E75                       		rts	
0001015C                            ; ===========================================================================
0001015C                            
0001015C                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0001015C 7000                       		moveq	#0,d0
0001015E 1038 FE70                  		move.b	($FFFFFE70).w,d0
00010162 E648                       		lsr.w	#3,d0
00010164 3228 0030                  		move.w	$30(a0),d1
00010168 9240                       		sub.w	d0,d1
0001016A 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0001016E 4E75                       		rts	
00010170                            ; ===========================================================================
00010170                            ; ---------------------------------------------------------------------------
00010170                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010170                            ; ---------------------------------------------------------------------------
00010170                            Map_obj46:
00010170                            	include "_maps\obj46.asm"
00010170                            ; ---------------------------------------------------------------------------
00010170                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010170                            ; ---------------------------------------------------------------------------
00010170 0000                       		dc.w byte_E906-Map_obj46
00010172 01                         byte_E906:	dc.b 1
00010173 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010178                            		even
00010178                            		even
00010178                            
00010178                            ; ===========================================================================
00010178                            ; ---------------------------------------------------------------------------
00010178                            ; Object 12 - lamp (SYZ)
00010178                            ; ---------------------------------------------------------------------------
00010178                            
00010178                            Obj12:					; XREF: Obj_Index
00010178 7000                       		moveq	#0,d0
0001017A 1028 0024                  		move.b	$24(a0),d0
0001017E 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
00010182 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
00010186                            ; ===========================================================================
00010186 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
00010188 0000                       		dc.w Obj12_Animate-Obj12_Index
0001018A                            ; ===========================================================================
0001018A                            
0001018A                            Obj12_Main:				; XREF: Obj12_Index
0001018A 5428 0024                  		addq.b	#2,$24(a0)
0001018E 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
00010196 317C 0000 0002             		move.w	#0,2(a0)
0001019C 117C 0004 0001             		move.b	#4,1(a0)
000101A2 117C 0010 0019             		move.b	#$10,$19(a0)
000101A8 117C 0006 0018             		move.b	#6,$18(a0)
000101AE                            
000101AE                            Obj12_Animate:				; XREF: Obj12_Index
000101AE 5328 001E                  		subq.b	#1,$1E(a0)
000101B2 6A00                       		bpl.s	Obj12_ChkDel
000101B4 117C 0007 001E             		move.b	#7,$1E(a0)
000101BA 5228 001A                  		addq.b	#1,$1A(a0)
000101BE 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000101C4 6500                       		bcs.s	Obj12_ChkDel
000101C6 117C 0000 001A             		move.b	#0,$1A(a0)
000101CC                            
000101CC                            Obj12_ChkDel:
000101CC 3028 0008                  		move.w	8(a0),d0
000101D0 0240 FF80                  		andi.w	#$FF80,d0
000101D4 3238 F700                  		move.w	($FFFFF700).w,d1
000101D8 0441 0080                  		subi.w	#$80,d1
000101DC 0241 FF80                  		andi.w	#$FF80,d1
000101E0 9041                       		sub.w	d1,d0
000101E2 0C40 0280                  		cmpi.w	#$280,d0
000101E6 6300 E71A                  		bls.w	DisplaySprite
000101EA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000101EE 6700 E762                  		beq.w	DeleteObject		; if it's zero, don't remember object
000101F2 3440                       		movea.w	d0,a2	; load address into a2
000101F4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000101F8 6000 E758                  		bra.w	DeleteObject	; and delete object
000101FC                            ; ===========================================================================
000101FC                            ; ---------------------------------------------------------------------------
000101FC                            ; Sprite mappings - lamp (SYZ)
000101FC                            ; ---------------------------------------------------------------------------
000101FC                            Map_obj12:
000101FC                            	include "_maps\obj12.asm"
000101FC                            ; ---------------------------------------------------------------------------
000101FC                            ; Sprite mappings - lamp (SYZ)
000101FC                            ; ---------------------------------------------------------------------------
000101FC 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
00010200 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00010204 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00010208 02                         byte_E98E:	dc.b 2
00010209 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0001020E 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
00010213 02                         byte_E999:	dc.b 2
00010214 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00010219 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0001021E 02                         byte_E9A4:	dc.b 2
0001021F F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
00010224 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00010229 02                         byte_E9AF:	dc.b 2
0001022A F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0001022F 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
00010234 02                         byte_E9BA:	dc.b 2
00010235 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0001023A 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0001023F 02                         byte_E9C5:	dc.b 2
00010240 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
00010245 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0001024A                            		even
0001024A                            		even
0001024A                            
0001024A                            ; ===========================================================================
0001024A                            ; ---------------------------------------------------------------------------
0001024A                            ; Object 47 - pinball bumper (SYZ)
0001024A                            ; ---------------------------------------------------------------------------
0001024A                            
0001024A                            Obj47:					; XREF: Obj_Index
0001024A 7000                       		moveq	#0,d0
0001024C 1028 0024                  		move.b	$24(a0),d0
00010250 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
00010254 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
00010258                            ; ===========================================================================
00010258 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0001025A 0000                       		dc.w Obj47_Hit-Obj47_Index
0001025C                            ; ===========================================================================
0001025C                            
0001025C                            Obj47_Main:				; XREF: Obj47_Index
0001025C 5428 0024                  		addq.b	#2,$24(a0)
00010260 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
00010268 317C 0380 0002             		move.w	#$380,2(a0)
0001026E 117C 0004 0001             		move.b	#4,1(a0)
00010274 117C 0010 0019             		move.b	#$10,$19(a0)
0001027A 117C 0001 0018             		move.b	#1,$18(a0)
00010280 117C 00D7 0020             		move.b	#$D7,$20(a0)
00010286                            
00010286                            Obj47_Hit:				; XREF: Obj47_Index
00010286 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0001028A 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0001028E 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
00010294 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001029A 4228 0021                  		clr.b	$21(a0)
0001029E 43F8 D000                  		lea	($FFFFD000).w,a1
000102A2 3228 0008                  		move.w	8(a0),d1
000102A6 3428 000C                  		move.w	$C(a0),d2
000102AA 9269 0008                  		sub.w	8(a1),d1
000102AE 9469 000C                  		sub.w	$C(a1),d2
000102B2 4EB9 0000 2C94             		jsr	(CalcAngle).l
000102B8 4EB9 0000 29CC             		jsr	(CalcSine).l
000102BE C3FC F900                  		muls.w	#-$700,d1
000102C2 E081                       		asr.l	#8,d1
000102C4 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
000102C8 C1FC F900                  		muls.w	#-$700,d0
000102CC E080                       		asr.l	#8,d0
000102CE 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
000102D2 08E9 0001 0022             		bset	#1,$22(a1)
000102D8 08A9 0004 0022             		bclr	#4,$22(a1)
000102DE 08A9 0005 0022             		bclr	#5,$22(a1)
000102E4 4229 003C                  		clr.b	$3C(a1)
000102E8 117C 0001 001C             		move.b	#1,$1C(a0)
000102EE 303C 00B4                  		move.w	#$B4,d0
000102F2 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play bumper sound
000102F8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000102FC 6700                       		beq.s	Obj47_Score		; if it's zero, don't remember object
000102FE 3440                       		movea.w	d0,a2	; load address into a2
00010300 0C12 008A                  		cmpi.b	#$8A,(a2)	; has bumper been hit $8A times?
00010304 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
00010306 5212                       		addq.b	#1,(a2)
00010308                            
00010308                            Obj47_Score:
00010308 7001                       		moveq	#1,d0
0001030A 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
00010310 6100 ED46                  		bsr.w	SingleObjLoad
00010314 6600                       		bne.s	Obj47_Display
00010316 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0001031A 3368 0008 0008             		move.w	8(a0),8(a1)
00010320 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010326 137C 0004 001A             		move.b	#4,$1A(a1)
0001032C                            
0001032C                            Obj47_Display:
0001032C 43F9 0000 0000             		lea	(Ani_obj47).l,a1
00010332 6100 B62E                  		bsr.w	AnimateSprite
00010336 3028 0008                  		move.w	8(a0),d0
0001033A 0240 FF80                  		andi.w	#$FF80,d0
0001033E 3238 F700                  		move.w	($FFFFF700).w,d1
00010342 0441 0080                  		subi.w	#$80,d1
00010346 0241 FF80                  		andi.w	#$FF80,d1
0001034A 9041                       		sub.w	d1,d0
0001034C 0C40 0280                  		cmpi.w	#$280,d0
00010350 6200                       		bhi.s	Obj47_ChkHit
00010352 6000 E5AE                  		bra.w	DisplaySprite
00010356                            ; ===========================================================================
00010356                            
00010356                            Obj47_ChkHit:				; XREF: Obj47_Display
00010356 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001035A 6700                       		beq.s	Obj47_Delete		; if it's zero, don't remember object
0001035C 3440                       		movea.w	d0,a2	; load address into a2
0001035E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010362                            
00010362                            Obj47_Delete:
00010362 6000 E5EE                  		bra.w	DeleteObject
00010366                            ; ===========================================================================
00010366                            Ani_obj47:
00010366                            	include "_anim\obj47.asm"
00010366                            ; ---------------------------------------------------------------------------
00010366                            ; Animation script - flamethrower (SBZ)
00010366                            ; ---------------------------------------------------------------------------
00010366 0000                       		dc.w byte_EAF4-Ani_obj47
00010368 0000                       		dc.w byte_EAF8-Ani_obj47
0001036A 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0001036E 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
00010376                            		even
00010376                            		even
00010376                            
00010376                            ; ---------------------------------------------------------------------------
00010376                            ; Sprite mappings - pinball bumper (SYZ)
00010376                            ; ---------------------------------------------------------------------------
00010376                            Map_obj47:
00010376                            	include "_maps\obj47.asm"
00010376                            ; ---------------------------------------------------------------------------
00010376                            ; Sprite mappings - pinball bumper (SYZ)
00010376                            ; ---------------------------------------------------------------------------
00010376 0000                       		dc.w byte_EB06-Map_obj47
00010378 0000                       		dc.w byte_EB11-Map_obj47
0001037A 0000                       		dc.w byte_EB1C-Map_obj47
0001037C 02                         byte_EB06:	dc.b 2
0001037D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010382 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010387 02                         byte_EB11:	dc.b 2
00010388 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0001038D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010392 02                         byte_EB1C:	dc.b 2
00010393 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010398 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0001039E 00                         		even
0001039E 00                         		even
0001039E                            
0001039E                            ; ===========================================================================
0001039E                            ; ---------------------------------------------------------------------------
0001039E                            ; Object 0D - signpost at the end of a level
0001039E                            ; ---------------------------------------------------------------------------
0001039E                            
0001039E                            Obj0D:					; XREF: Obj_Index
0001039E 7000                       		moveq	#0,d0
000103A0 1028 0024                  		move.b	$24(a0),d0
000103A4 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
000103A8 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
000103AC 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
000103B2 6100 B5AE                  		bsr.w	AnimateSprite
000103B6 6100 E54A                  		bsr.w	DisplaySprite
000103BA 3028 0008                  		move.w	8(a0),d0
000103BE 0240 FF80                  		andi.w	#$FF80,d0
000103C2 3238 F700                  		move.w	($FFFFF700).w,d1
000103C6 0441 0080                  		subi.w	#$80,d1
000103CA 0241 FF80                  		andi.w	#$FF80,d1
000103CE 9041                       		sub.w	d1,d0
000103D0 0C40 0280                  		cmpi.w	#$280,d0
000103D4 6300                       		bls.s	Obj0D_NoDel
000103D6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000103DA 6700 E576                  		beq.w	DeleteObject		; if it's zero, don't remember object
000103DE 3440                       		movea.w	d0,a2	; load address into a2
000103E0 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000103E4 6000 E56C                  		bra.w	DeleteObject	; and delete object
000103E8                            
000103E8                            Obj0D_NoDel:
000103E8 4E75                       		rts	
000103EA                            ; ===========================================================================
000103EA 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
000103EC 0000                       		dc.w Obj0D_Touch-Obj0D_Index
000103EE 0000                       		dc.w Obj0D_Spin-Obj0D_Index
000103F0 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
000103F2 0000                       		dc.w locret_ED1A-Obj0D_Index
000103F4                            ; ===========================================================================
000103F4                            
000103F4                            Obj0D_Main:				; XREF: Obj0D_Index
000103F4 5428 0024                  		addq.b	#2,$24(a0)
000103F8 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
00010400 317C 0680 0002             		move.w	#$680,2(a0)
00010406 117C 0004 0001             		move.b	#4,1(a0)
0001040C 117C 0018 0019             		move.b	#$18,$19(a0)
00010412 117C 0004 0018             		move.b	#4,$18(a0)
00010418                            
00010418                            Obj0D_Touch:				; XREF: Obj0D_Index
00010418 3038 D008                  		move.w	($FFFFD008).w,d0
0001041C 9068 0008                  		sub.w	8(a0),d0
00010420 6500                       		bcs.s	locret_EBBA
00010422 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010426 6400                       		bcc.s	locret_EBBA	; if not, branch
00010428 303C 00CF                  		move.w	#$CF,d0
0001042C 4EB9 0000 11F0             		jsr	(PlaySound).l	; play signpost	sound
00010432 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010436 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0001043C 5428 0024                  		addq.b	#2,$24(a0)
00010440                            
00010440                            locret_EBBA:
00010440 4E75                       		rts	
00010442                            ; ===========================================================================
00010442                            
00010442                            Obj0D_Spin:				; XREF: Obj0D_Index
00010442 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00010446 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00010448 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0001044E 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
00010452 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
00010458 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0001045A 5428 0024                  		addq.b	#2,$24(a0)
0001045E                            
0001045E                            Obj0D_Sparkle:
0001045E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00010462 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00010464 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0001046A 7000                       		moveq	#0,d0
0001046C 1028 0034                  		move.b	$34(a0),d0
00010470 5428 0034                  		addq.b	#2,$34(a0)
00010474 0228 000E 0034             		andi.b	#$E,$34(a0)
0001047A 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0001047E 6100 EBD8                  		bsr.w	SingleObjLoad
00010482 6600                       		bne.s	locret_EC42
00010484 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
00010488 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0001048E 101A                       		move.b	(a2)+,d0
00010490 4880                       		ext.w	d0
00010492 D068 0008                  		add.w	8(a0),d0
00010496 3340 0008                  		move.w	d0,8(a1)
0001049A 101A                       		move.b	(a2)+,d0
0001049C 4880                       		ext.w	d0
0001049E D068 000C                  		add.w	$C(a0),d0
000104A2 3340 000C                  		move.w	d0,$C(a1)
000104A6 237C 0000 B20C 0004        		move.l	#Map_obj25,4(a1)
000104AE 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
000104B4 137C 0004 0001             		move.b	#4,1(a1)
000104BA 137C 0002 0018             		move.b	#2,$18(a1)
000104C0 137C 0008 0019             		move.b	#8,$19(a1)
000104C6                            
000104C6                            locret_EC42:
000104C6 4E75                       		rts	
000104C8                            ; ===========================================================================
000104C8 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
000104CA 0808                       		dc.b	8,   8
000104CC F000                       		dc.b -$10,   0
000104CE 18F8                       		dc.b  $18,  -8
000104D0 00F8                       		dc.b	0,  -8
000104D2 1000                       		dc.b  $10,   0
000104D4 E808                       		dc.b -$18,   8
000104D6 1810                       		dc.b  $18, $10
000104D8                            ; ===========================================================================
000104D8                            
000104D8                            Obj0D_SonicRun:				; XREF: Obj0D_Index
000104D8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000104DC 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
000104E0 0838 0001 D022             		btst	#1,($FFFFD022).w
000104E6 6600                       		bne.s	loc_EC70
000104E8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000104EE 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
000104F4                            
000104F4                            loc_EC70:
000104F4 4A38 D000                  		tst.b	($FFFFD000).w
000104F8 6700                       		beq.s	loc_EC86
000104FA 3038 D008                  		move.w	($FFFFD008).w,d0
000104FE 3238 F72A                  		move.w	($FFFFF72A).w,d1
00010502 0641 0128                  		addi.w	#$128,d1
00010506 B041                       		cmp.w	d1,d0
00010508 6500                       		bcs.s	locret_ECEE
0001050A                            
0001050A                            loc_EC86:
0001050A 5428 0024                  		addq.b	#2,$24(a0)
0001050E                            
0001050E                            ; ---------------------------------------------------------------------------
0001050E                            ; Subroutine to	set up bonuses at the end of an	act
0001050E                            ; ---------------------------------------------------------------------------
0001050E                            
0001050E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001050E                            
0001050E                            
0001050E                            GotThroughAct:				; XREF: Obj3E_EndAct
0001050E 4A38 D5C0                  		tst.b	($FFFFD5C0).w
00010512 6600                       		bne.s	locret_ECEE
00010514 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0001051A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0001051E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010522 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00010528 2F08                               move.l  a0,-(sp)            ; save object address to stack
0001052A 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00010534 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
0001053A 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
00010540 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
00010544 205F                               move.l  (sp)+,a0            ; get object address from stack
00010546 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0001054C 7000                       		moveq	#0,d0
0001054E 1038 FE23                  		move.b	($FFFFFE23).w,d0
00010552 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010556 7200                       		moveq	#0,d1
00010558 1238 FE24                  		move.b	($FFFFFE24).w,d1
0001055C D041                       		add.w	d1,d0		; add up your time
0001055E 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010562 7214                       		moveq	#$14,d1
00010564 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010566 6500                       		bcs.s	loc_ECD0	; if not, branch
00010568 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0001056A                            
0001056A                            loc_ECD0:
0001056A D040                       		add.w	d0,d0
0001056C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
00010572 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
00010576 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0001057A 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0001057E 303C 008E                  		move.w	#$8E,d0
00010582 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
00010588                            
00010588                            locret_ECEE:
00010588 4E75                       		rts	
0001058A                            ; End of function GotThroughAct
0001058A                            
0001058A                            ; ===========================================================================
0001058A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0001059E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000105B4                            ; ===========================================================================
000105B4                            
000105B4                            locret_ED1A:				; XREF: Obj0D_Index
000105B4 4E75                       		rts	
000105B6                            ; ===========================================================================
000105B6                            Ani_obj0D:
000105B6                            	include "_anim\obj0D.asm"
000105B6                            ; ---------------------------------------------------------------------------
000105B6                            ; Animation script - signpost
000105B6                            ; ---------------------------------------------------------------------------
000105B6 0000                       		dc.w byte_ED24-Ani_obj0D
000105B8 0000                       		dc.w byte_ED28-Ani_obj0D
000105BA 0000                       		dc.w byte_ED2E-Ani_obj0D
000105BC 0000                       		dc.w byte_ED34-Ani_obj0D
000105BE 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
000105C2 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
000105C8 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
000105CE 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
000105D2 00                         		even
000105D2 00                         		even
000105D2                            
000105D2                            ; ---------------------------------------------------------------------------
000105D2                            ; Sprite mappings - signpost
000105D2                            ; ---------------------------------------------------------------------------
000105D2                            Map_obj0D:
000105D2                            	include "_maps\obj0D.asm"
000105D2                            ; ---------------------------------------------------------------------------
000105D2                            ; Sprite mappings - signpost
000105D2                            ; ---------------------------------------------------------------------------
000105D2 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
000105D6 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
000105DA 0000                       		dc.w byte_ED73-Map_obj0D
000105DC 03                         byte_ED42:	dc.b 3
000105DD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
000105E2 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
000105E7 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
000105EC 02                         byte_ED52:	dc.b 2
000105ED F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
000105F2 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
000105F7 02                         byte_ED5D:	dc.b 2
000105F8 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
000105FD 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010602 02                         byte_ED68:	dc.b 2
00010603 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00010608 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0001060D 03                         byte_ED73:	dc.b 3
0001060E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
00010613 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00010618 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001061E 00                         		even
0001061E 00                         		even
0001061E                            
0001061E                            ; ===========================================================================
0001061E                            ; ---------------------------------------------------------------------------
0001061E                            ; Object 4C - lava geyser / lavafall producer (MZ)
0001061E                            ; ---------------------------------------------------------------------------
0001061E                            
0001061E                            Obj4C:					; XREF: Obj_Index
0001061E 7000                       		moveq	#0,d0
00010620 1028 0024                  		move.b	$24(a0),d0
00010624 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00010628 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0001062C 6000 0000                  		bra.w	Obj4D_ChkDel
00010630                            ; ===========================================================================
00010630 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
00010632 0000                       		dc.w loc_EDCC-Obj4C_Index
00010634 0000                       		dc.w loc_EE3E-Obj4C_Index
00010636 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00010638 0000                       		dc.w Obj4C_Display-Obj4C_Index
0001063A 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0001063C                            ; ===========================================================================
0001063C                            
0001063C                            Obj4C_Main:				; XREF: Obj4C_Index
0001063C 5428 0024                  		addq.b	#2,$24(a0)
00010640 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00010648 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0001064E 117C 0004 0001             		move.b	#4,1(a0)
00010654 117C 0001 0018             		move.b	#1,$18(a0)
0001065A 117C 0038 0019             		move.b	#$38,$19(a0)
00010660 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
00010666                            
00010666                            loc_EDCC:				; XREF: Obj4C_Index
00010666 5368 0032                  		subq.w	#1,$32(a0)
0001066A 6A00                       		bpl.s	locret_EDF0
0001066C 3168 0034 0032             		move.w	$34(a0),$32(a0)
00010672 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010676 3228 000C                  		move.w	$C(a0),d1
0001067A B041                       		cmp.w	d1,d0
0001067C 6400                       		bcc.s	locret_EDF0
0001067E 0441 0170                  		subi.w	#$170,d1
00010682 B041                       		cmp.w	d1,d0
00010684 6500                       		bcs.s	locret_EDF0
00010686 5428 0024                  		addq.b	#2,$24(a0)
0001068A                            
0001068A                            locret_EDF0:
0001068A 4E75                       		rts	
0001068C                            ; ===========================================================================
0001068C                            
0001068C                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0001068C 5428 0024                  		addq.b	#2,$24(a0)
00010690 6100 E9DC                  		bsr.w	SingleObjLoad2
00010694 6600                       		bne.s	loc_EE18
00010696 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0001069A 3368 0008 0008             		move.w	8(a0),8(a1)
000106A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000106A6 1368 0028 0028             		move.b	$28(a0),$28(a1)
000106AC 2348 003C                  		move.l	a0,$3C(a1)
000106B0                            
000106B0                            loc_EE18:
000106B0 117C 0001 001C             		move.b	#1,$1C(a0)
000106B6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000106BA 6700                       		beq.s	Obj4C_Type00	; if yes, branch
000106BC 117C 0004 001C             		move.b	#4,$1C(a0)
000106C2 6000                       		bra.s	Obj4C_Display
000106C4                            ; ===========================================================================
000106C4                            
000106C4                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
000106C4 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
000106C8 08E9 0001 0022             		bset	#1,$22(a1)
000106CE 337C FA80 0012             		move.w	#-$580,$12(a1)
000106D4 6000                       		bra.s	Obj4C_Display
000106D6                            ; ===========================================================================
000106D6                            
000106D6                            loc_EE3E:				; XREF: Obj4C_Index
000106D6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000106DA 6700                       		beq.s	Obj4C_Display	; if yes, branch
000106DC 5428 0024                  		addq.b	#2,$24(a0)
000106E0 4E75                       		rts	
000106E2                            ; ===========================================================================
000106E2                            
000106E2                            Obj4C_Display:				; XREF: Obj4C_Index
000106E2 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
000106E8 6100 B278                  		bsr.w	AnimateSprite
000106EC 6100 E214                  		bsr.w	DisplaySprite
000106F0 4E75                       		rts	
000106F2                            ; ===========================================================================
000106F2                            
000106F2                            Obj4C_Delete:				; XREF: Obj4C_Index
000106F2 117C 0000 001C             		move.b	#0,$1C(a0)
000106F8 117C 0002 0024             		move.b	#2,$24(a0)
000106FE 4A28 0028                  		tst.b	$28(a0)
00010702 6700 E24E                  		beq.w	DeleteObject
00010706 4E75                       		rts	
00010708                            ; ===========================================================================
00010708                            ; ---------------------------------------------------------------------------
00010708                            ; Object 4D - lava geyser / lavafall (MZ)
00010708                            ; ---------------------------------------------------------------------------
00010708                            
00010708                            Obj4D:					; XREF: Obj_Index
00010708 7000                       		moveq	#0,d0
0001070A 1028 0024                  		move.b	$24(a0),d0
0001070E 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
00010712 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
00010716 6000 E1EA                  		bra.w	DisplaySprite
0001071A                            ; ===========================================================================
0001071A 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0001071C 0000                       		dc.w Obj4D_Action-Obj4D_Index
0001071E 0000                       		dc.w loc_EFFC-Obj4D_Index
00010720 0000                       		dc.w Obj4D_Delete-Obj4D_Index
00010722                            
00010722 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
00010726                            ; ===========================================================================
00010726                            
00010726                            Obj4D_Main:				; XREF: Obj4D_Index
00010726 5428 0024                  		addq.b	#2,$24(a0)
0001072A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010730 4A28 0028                  		tst.b	$28(a0)
00010734 6700                       		beq.s	loc_EEA4
00010736 0468 0250 000C             		subi.w	#$250,$C(a0)
0001073C                            
0001073C                            loc_EEA4:
0001073C 7000                       		moveq	#0,d0
0001073E 1028 0028                  		move.b	$28(a0),d0
00010742 D040                       		add.w	d0,d0
00010744 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0001074A 2248                       		movea.l	a0,a1
0001074C 7201                       		moveq	#1,d1
0001074E 6100                       		bsr.s	Obj4D_MakeLava
00010750 6000                       		bra.s	loc_EF10
00010752                            ; ===========================================================================
00010752                            
00010752                            Obj4D_Loop:
00010752 6100 E91A                  		bsr.w	SingleObjLoad2
00010756 6600                       		bne.s	loc_EF0A
00010758                            
00010758                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00010758 12BC 004D                  		move.b	#$4D,0(a1)
0001075C 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00010764 337C 63A8 0002             		move.w	#$63A8,2(a1)
0001076A 137C 0004 0001             		move.b	#4,1(a1)
00010770 137C 0020 0019             		move.b	#$20,$19(a1)
00010776 3368 0008 0008             		move.w	8(a0),8(a1)
0001077C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010782 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010788 137C 0001 0018             		move.b	#1,$18(a1)
0001078E 137C 0005 001C             		move.b	#5,$1C(a1)
00010794 4A28 0028                  		tst.b	$28(a0)
00010798 6700                       		beq.s	loc_EF0A
0001079A 137C 0002 001C             		move.b	#2,$1C(a1)
000107A0                            
000107A0                            loc_EF0A:
000107A0 51C9 FFB0                  		dbf	d1,Obj4D_Loop
000107A4 4E75                       		rts	
000107A6                            ; ===========================================================================
000107A6                            
000107A6                            loc_EF10:				; XREF: Obj4D_Main
000107A6 0669 0060 000C             		addi.w	#$60,$C(a1)
000107AC 3368 0030 0030             		move.w	$30(a0),$30(a1)
000107B2 0669 0060 0030             		addi.w	#$60,$30(a1)
000107B8 137C 0093 0020             		move.b	#$93,$20(a1)
000107BE 137C 0080 0016             		move.b	#$80,$16(a1)
000107C4 08E9 0004 0001             		bset	#4,1(a1)
000107CA 5829 0024                  		addq.b	#4,$24(a1)
000107CE 2348 003C                  		move.l	a0,$3C(a1)
000107D2 4A28 0028                  		tst.b	$28(a0)
000107D6 6700                       		beq.s	Obj4D_PlaySnd
000107D8 7200                       		moveq	#0,d1
000107DA 6100 FF76                  		bsr.w	Obj4D_Loop
000107DE 5429 0024                  		addq.b	#2,$24(a1)
000107E2 08E9 0004 0002             		bset	#4,2(a1)
000107E8 0669 0100 000C             		addi.w	#$100,$C(a1)
000107EE 137C 0000 0018             		move.b	#0,$18(a1)
000107F4 3368 0030 0030             		move.w	$30(a0),$30(a1)
000107FA 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010800 117C 0000 0028             		move.b	#0,$28(a0)
00010806                            
00010806                            Obj4D_PlaySnd:
00010806 303C 00C8                  		move.w	#$C8,d0
0001080A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flame sound
00010810                            
00010810                            Obj4D_Action:				; XREF: Obj4D_Index
00010810 7000                       		moveq	#0,d0
00010812 1028 0028                  		move.b	$28(a0),d0
00010816 D040                       		add.w	d0,d0
00010818 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0001081C 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00010820 6100 E0C6                  		bsr.w	SpeedToPos
00010824 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0001082A 6100 B136                  		bsr.w	AnimateSprite
0001082E                            
0001082E                            Obj4D_ChkDel:				; XREF: Obj4C
0001082E 3028 0008                  		move.w	8(a0),d0
00010832 0240 FF80                  		andi.w	#$FF80,d0
00010836 3238 F700                  		move.w	($FFFFF700).w,d1
0001083A 0441 0080                  		subi.w	#$80,d1
0001083E 0241 FF80                  		andi.w	#$FF80,d1
00010842 9041                       		sub.w	d1,d0
00010844 0C40 0280                  		cmpi.w	#$280,d0
00010848 6300                       		bls.s	Obj4D_NoDel
0001084A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001084E 6700 E102                  		beq.w	DeleteObject	; if it's zero, don't remember object
00010852 3440                       		movea.w	d0,a2	; load address into a2
00010854 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010858 6000 E0F8                  		bra.w	DeleteObject	; and delete object
0001085C                            
0001085C                            Obj4D_NoDel:
0001085C 4E75                       		rts	
0001085E                            ; ===========================================================================
0001085E 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
00010860 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00010862                            ; ===========================================================================
00010862                            
00010862                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00010862 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010868 3028 0030                  		move.w	$30(a0),d0
0001086C B068 000C                  		cmp.w	$C(a0),d0
00010870 6400                       		bcc.s	locret_EFDA
00010872 5828 0024                  		addq.b	#4,$24(a0)
00010876 2268 003C                  		movea.l	$3C(a0),a1
0001087A 137C 0003 001C             		move.b	#3,$1C(a1)
00010880                            
00010880                            locret_EFDA:
00010880 4E75                       		rts	
00010882                            ; ===========================================================================
00010882                            
00010882                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
00010882 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010888 3028 0030                  		move.w	$30(a0),d0
0001088C B068 000C                  		cmp.w	$C(a0),d0
00010890 6400                       		bcc.s	locret_EFFA
00010892 5828 0024                  		addq.b	#4,$24(a0)
00010896 2268 003C                  		movea.l	$3C(a0),a1
0001089A 137C 0001 001C             		move.b	#1,$1C(a1)
000108A0                            
000108A0                            locret_EFFA:
000108A0 4E75                       		rts	
000108A2                            ; ===========================================================================
000108A2                            
000108A2                            loc_EFFC:				; XREF: Obj4D_Index
000108A2 2268 003C                  		movea.l	$3C(a0),a1
000108A6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000108AC 6700 0000                  		beq.w	Obj4D_Delete
000108B0 3029 000C                  		move.w	$C(a1),d0
000108B4 0640 0060                  		addi.w	#$60,d0
000108B8 3140 000C                  		move.w	d0,$C(a0)
000108BC 9068 0030                  		sub.w	$30(a0),d0
000108C0 4440                       		neg.w	d0
000108C2 7208                       		moveq	#8,d1
000108C4 0C40 0040                  		cmpi.w	#$40,d0
000108C8 6C00                       		bge.s	loc_F026
000108CA 720B                       		moveq	#$B,d1
000108CC                            
000108CC                            loc_F026:
000108CC 0C40 0080                  		cmpi.w	#$80,d0
000108D0 6F00                       		ble.s	loc_F02E
000108D2 720E                       		moveq	#$E,d1
000108D4                            
000108D4                            loc_F02E:
000108D4 5328 001E                  		subq.b	#1,$1E(a0)
000108D8 6A00                       		bpl.s	loc_F04C
000108DA 117C 0007 001E             		move.b	#7,$1E(a0)
000108E0 5228 001B                  		addq.b	#1,$1B(a0)
000108E4 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
000108EA 6500                       		bcs.s	loc_F04C
000108EC 117C 0000 001B             		move.b	#0,$1B(a0)
000108F2                            
000108F2                            loc_F04C:
000108F2 1028 001B                  		move.b	$1B(a0),d0
000108F6 D001                       		add.b	d1,d0
000108F8 1140 001A                  		move.b	d0,$1A(a0)
000108FC 6000 FF30                  		bra.w	Obj4D_ChkDel
00010900                            ; ===========================================================================
00010900                            
00010900                            Obj4D_Delete:				; XREF: Obj4D_Index
00010900 6000 E050                  		bra.w	DeleteObject
00010904                            ; ===========================================================================
00010904                            ; ---------------------------------------------------------------------------
00010904                            ; Object 4E - advancing	wall of	lava (MZ)
00010904                            ; ---------------------------------------------------------------------------
00010904                            
00010904                            Obj4E:					; XREF: Obj_Index
00010904 7000                       		moveq	#0,d0
00010906 1028 0024                  		move.b	$24(a0),d0
0001090A 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0001090E 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00010912                            ; ===========================================================================
00010912 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00010914 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00010916 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010918 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0001091A 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0001091C                            ; ===========================================================================
0001091C                            
0001091C                            Obj4E_Main:				; XREF: Obj4E_Index
0001091C 5828 0024                  		addq.b	#4,$24(a0)
00010920 2248                       		movea.l	a0,a1
00010922 7201                       		moveq	#1,d1
00010924 6000                       		bra.s	Obj4E_Main2
00010926                            ; ===========================================================================
00010926                            
00010926                            Obj4E_Loop:
00010926 6100 E746                  		bsr.w	SingleObjLoad2
0001092A 6600                       		bne.s	loc_F0C8
0001092C                            
0001092C                            Obj4E_Main2:				; XREF: Obj4E_Main
0001092C 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00010930 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010938 337C 63A8 0002             		move.w	#$63A8,2(a1)
0001093E 137C 0004 0001             		move.b	#4,1(a1)
00010944 137C 0050 0019             		move.b	#$50,$19(a1)
0001094A 3368 0008 0008             		move.w	8(a0),8(a1)
00010950 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010956 137C 0001 0018             		move.b	#1,$18(a1)
0001095C 137C 0000 001C             		move.b	#0,$1C(a1)
00010962 137C 0094 0020             		move.b	#$94,$20(a1)
00010968 2348 003C                  		move.l	a0,$3C(a1)
0001096C                            
0001096C                            loc_F0C8:
0001096C 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
00010970                            
00010970 5C29 0024                  		addq.b	#6,$24(a1)
00010974 137C 0004 001A             		move.b	#4,$1A(a1)
0001097A                            
0001097A                            Obj4E_Action:				; XREF: Obj4E_Index
0001097A 3038 D008                  		move.w	($FFFFD008).w,d0
0001097E 9068 0008                  		sub.w	8(a0),d0
00010982 6400                       		bcc.s	Obj4E_ChkSonic
00010984 4440                       		neg.w	d0
00010986                            
00010986                            Obj4E_ChkSonic:
00010986 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0001098A 6400                       		bcc.s	Obj4E_Move	; if not, branch
0001098C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010990 9068 000C                  		sub.w	$C(a0),d0
00010994 6400                       		bcc.s	loc_F0F4
00010996 4440                       		neg.w	d0
00010998                            
00010998                            loc_F0F4:
00010998 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0001099C 6400                       		bcc.s	Obj4E_Move	; if not, branch
0001099E 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
000109A4 6000                       		bra.s	Obj4E_Solid
000109A6                            ; ===========================================================================
000109A6                            
000109A6                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
000109A6 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
000109AA 6700                       		beq.s	Obj4E_Solid	; if not, branch
000109AC 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
000109B2 5528 0024                  		subq.b	#2,$24(a0)
000109B6                            
000109B6                            Obj4E_Solid:				; XREF: Obj4E_Index
000109B6 323C 002B                  		move.w	#$2B,d1
000109BA 343C 0018                  		move.w	#$18,d2
000109BE 3602                       		move.w	d2,d3
000109C0 5243                       		addq.w	#1,d3
000109C2 3828 0008                  		move.w	8(a0),d4
000109C6 1028 0024                  		move.b	$24(a0),d0
000109CA 3F00                       		move.w	d0,-(sp)
000109CC 6100 0000                  		bsr.w	SolidObject
000109D0 301F                       		move.w	(sp)+,d0
000109D2 1140 0024                  		move.b	d0,$24(a0)
000109D6 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
000109DC 6600                       		bne.s	Obj4E_Animate	; if not, branch
000109DE 4268 0010                  		clr.w	$10(a0)		; stop object moving
000109E2 4228 0036                  		clr.b	$36(a0)
000109E6                            
000109E6                            Obj4E_Animate:
000109E6 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
000109EC 6100 AF74                  		bsr.w	AnimateSprite
000109F0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000109F6 6400                       		bcc.s	Obj4E_ChkDel
000109F8 6100 DEEE                  		bsr.w	SpeedToPos
000109FC                            
000109FC                            Obj4E_ChkDel:
000109FC 6100 DF04                  		bsr.w	DisplaySprite
00010A00 4A28 0036                  		tst.b	$36(a0)
00010A04 6600                       		bne.s	locret_F17E
00010A06 3028 0008                  		move.w	8(a0),d0
00010A0A 0240 FF80                  		andi.w	#$FF80,d0
00010A0E 3238 F700                  		move.w	($FFFFF700).w,d1
00010A12 0441 0080                  		subi.w	#$80,d1
00010A16 0241 FF80                  		andi.w	#$FF80,d1
00010A1A 9041                       		sub.w	d1,d0
00010A1C 0C40 0280                  		cmpi.w	#$280,d0
00010A20 6200                       		bhi.s	Obj4E_ChkGone
00010A22                            
00010A22                            locret_F17E:
00010A22 4E75                       		rts	
00010A24                            ; ===========================================================================
00010A24                            
00010A24                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010A24 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010A28 3440                       		movea.w	d0,a2	; load address into a2
00010A2A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010A2E 117C 0008 0024             		move.b	#8,$24(a0)
00010A34 4E75                       		rts	
00010A36                            ; ===========================================================================
00010A36                            
00010A36                            Obj4E_Move2:				; XREF: Obj4E_Index
00010A36 2268 003C                  		movea.l	$3C(a0),a1
00010A3A 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010A40 6700                       		beq.s	Obj4E_Delete
00010A42 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010A48 0468 0080 0008             		subi.w	#$80,8(a0)
00010A4E 6000 DEB2                  		bra.w	DisplaySprite
00010A52                            ; ===========================================================================
00010A52                            
00010A52                            Obj4E_Delete:				; XREF: Obj4E_Index
00010A52 6000 DEFE                  		bra.w	DeleteObject
00010A56                            ; ===========================================================================
00010A56                            ; ---------------------------------------------------------------------------
00010A56                            ; Object 54 - invisible	lava tag (MZ)
00010A56                            ; ---------------------------------------------------------------------------
00010A56                            
00010A56                            Obj54:					; XREF: Obj_Index
00010A56 7000                       		moveq	#0,d0
00010A58 1028 0024                  		move.b	$24(a0),d0
00010A5C 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010A60 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010A64                            ; ===========================================================================
00010A64 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010A66 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010A68                            
00010A68 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010A6C                            ; ===========================================================================
00010A6C                            
00010A6C                            Obj54_Main:				; XREF: Obj54_Index
00010A6C 5428 0024                  		addq.b	#2,$24(a0)
00010A70 7000                       		moveq	#0,d0
00010A72 1028 0028                  		move.b	$28(a0),d0
00010A76 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010A7C 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010A84 117C 0084 0001             		move.b	#$84,1(a0)
00010A8A                            
00010A8A                            Obj54_ChkDel:				; XREF: Obj54_Index
00010A8A 3028 0008                  		move.w	8(a0),d0
00010A8E 0240 FF80                  		andi.w	#$FF80,d0
00010A92 3238 F700                  		move.w	($FFFFF700).w,d1
00010A96 0441 0080                  		subi.w	#$80,d1
00010A9A 0241 FF80                  		andi.w	#$FF80,d1
00010A9E 9041                       		sub.w	d1,d0
00010AA0 6B00 DEB0                  		bmi.w	DeleteObject
00010AA4 0C40 0280                  		cmpi.w	#$280,d0
00010AA8 6300                       		bls.s	Obj54_NoDel
00010AAA                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00010AAA                            	;	beq.w	DeleteObject		; if it's zero, don't remember object
00010AAA                            	;	movea.w	d0,a2	; load address into a2
00010AAA                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010AAA 6000 DEA6                  		bra.w	DeleteObject	; and delete object
00010AAE                            
00010AAE                            Obj54_NoDel:
00010AAE 4E75                       		rts	
00010AB0                            ; ===========================================================================
00010AB0                            ; ---------------------------------------------------------------------------
00010AB0                            ; Sprite mappings - invisible lava tag (MZ)
00010AB0                            ; ---------------------------------------------------------------------------
00010AB0                            Map_obj54:
00010AB0                            	include "_maps\obj54.asm"
00010AB0                            ; ---------------------------------------------------------------------------
00010AB0                            ; Sprite mappings - invisible lava tag (MZ)
00010AB0                            ; ---------------------------------------------------------------------------
00010AB0 0000                       		dc.w byte_F212-Map_obj54
00010AB2 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010AB4 00                         		even
00010AB4 00                         		even
00010AB4                            
00010AB4                            Ani_obj4C:
00010AB4                            	include "_anim\obj4C.asm"
00010AB4                            ; ---------------------------------------------------------------------------
00010AB4                            ; Animation script - geyser of lava (MZ)
00010AB4                            ; ---------------------------------------------------------------------------
00010AB4 0000                       		dc.w byte_F220-Ani_obj4C
00010AB6 0000                       		dc.w byte_F22A-Ani_obj4C
00010AB8 0000                       		dc.w byte_F22E-Ani_obj4C
00010ABA 0000                       		dc.w byte_F232-Ani_obj4C
00010ABC 0000                       		dc.w byte_F23A-Ani_obj4C
00010ABE 0000                       		dc.w byte_F23E-Ani_obj4C
00010AC0 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010ACA 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010ACE 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010AD2 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010ADA 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010ADE 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010AE2                            		even
00010AE2                            		even
00010AE2                            
00010AE2                            Ani_obj4E:
00010AE2                            	include "_anim\obj4E.asm"
00010AE2                            ; ---------------------------------------------------------------------------
00010AE2                            ; Animation script - advancing wall of lava (MZ)
00010AE2                            ; ---------------------------------------------------------------------------
00010AE2 0000                       		dc.w byte_F244-Ani_obj4E
00010AE4 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010AEA                            		even
00010AEA                            		even
00010AEA                            
00010AEA                            ; ---------------------------------------------------------------------------
00010AEA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010AEA                            ; ---------------------------------------------------------------------------
00010AEA                            Map_obj4C:
00010AEA                            	include "_maps\obj4C.asm"
00010AEA                            ; ---------------------------------------------------------------------------
00010AEA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010AEA                            ; ---------------------------------------------------------------------------
00010AEA 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00010AEE 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010AF2 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010AF6 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010AFA 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00010AFE 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010B02 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010B06 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010B0A 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00010B0E 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010B12 02                         byte_F272:	dc.b 2
00010B13 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010B18 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00010B1D 02                         byte_F27D:	dc.b 2
00010B1E EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010B23 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010B28 04                         byte_F288:	dc.b 4
00010B29 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010B2E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010B33 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010B38 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010B3D 04                         byte_F29D:	dc.b 4
00010B3E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010B43 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010B48 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010B4D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010B52 06                         byte_F2B2:	dc.b 6
00010B53 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010B58 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010B5D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010B62 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010B67 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010B6C E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010B71 06                         byte_F2D1:	dc.b 6
00010B72 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010B77 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010B7C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010B81 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010B86 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010B8B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010B90 02                         byte_F2F0:	dc.b 2
00010B91 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010B96 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010B9B 02                         byte_F2FB:	dc.b 2
00010B9C E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010BA1 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010BA6 0A                         byte_F306:	dc.b $A
00010BA7 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010BAC 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010BB1 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010BB6 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010BBB D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010BC0 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010BC5 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010BCA F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010BCF 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010BD4 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010BD9 0A                         byte_F339:	dc.b $A
00010BDA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010BDF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010BE4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010BE9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010BEE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010BF3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010BF8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010BFD F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010C02 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010C07 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010C0C 0A                         byte_F36C:	dc.b $A
00010C0D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010C12 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010C17 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010C1C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010C21 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010C26 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010C2B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010C30 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010C35 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010C3A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010C3F 06                         byte_F39F:	dc.b 6
00010C40 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010C45 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010C4A B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010C4F B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010C54 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010C59 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010C5E 06                         byte_F3BE:	dc.b 6
00010C5F 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010C64 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010C69 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010C6E B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010C73 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010C78 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010C7D 06                         byte_F3DD:	dc.b 6
00010C7E 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010C83 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010C88 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010C8D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010C92 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010C97 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010C9C 10                         byte_F3FC:	dc.b $10
00010C9D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010CA2 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010CA7 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010CAC B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010CB1 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010CB6 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010CBB F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010CC0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010CC5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010CCA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010CCF 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010CD4 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010CD9 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010CDE 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010CE3 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010CE8 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010CED 10                         byte_F44D:	dc.b $10
00010CEE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010CF3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010CF8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010CFD B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010D02 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010D07 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010D0C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010D11 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010D16 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010D1B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010D20 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010D25 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010D2A 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010D2F 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010D34 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010D39 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010D3E 10                         byte_F49E:	dc.b $10
00010D3F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010D44 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010D49 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010D4E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010D53 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010D58 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010D5D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010D62 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010D67 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010D6C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010D71 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010D76 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010D7B 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010D80 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010D85 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010D8A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010D8F 06                         byte_F4EF:	dc.b 6
00010D90 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010D95 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010D9A E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010D9F E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010DA4 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010DA9 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010DAE 06                         byte_F50E:	dc.b 6
00010DAF E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010DB4 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010DB9 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010DBE E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010DC3 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010DC8 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010DCD 00                         byte_F52D:	dc.b 0
00010DCE                            		even
00010DCE                            		even
00010DCE                            
00010DCE                            ; ---------------------------------------------------------------------------
00010DCE                            ; Sprite mappings - advancing wall of lava (MZ)
00010DCE                            ; ---------------------------------------------------------------------------
00010DCE                            Map_obj4E:
00010DCE                            	include "_maps\obj4E.asm"
00010DCE                            ; ---------------------------------------------------------------------------
00010DCE                            ; Sprite mappings - advancing wall of lava (MZ)
00010DCE                            ; ---------------------------------------------------------------------------
00010DCE 0000                       		dc.w byte_F538-Map_obj4E
00010DD0 0000                       		dc.w byte_F566-Map_obj4E
00010DD2 0000                       		dc.w byte_F594-Map_obj4E
00010DD4 0000                       		dc.w byte_F5C2-Map_obj4E
00010DD6 0000                       		dc.w byte_F5F0-Map_obj4E
00010DD8 09                         byte_F538:	dc.b 9
00010DD9 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00010DDE 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010DE3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010DE8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010DED 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010DF2 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010DF7 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010DFC E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E01 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E06 09                         byte_F566:	dc.b 9
00010E07 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010E0C 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010E11 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E16 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E1B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E20 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E25 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E2A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E2F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E34 09                         byte_F594:	dc.b 9
00010E35 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00010E3A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010E3F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E44 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E49 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E4E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E53 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E58 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E5D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E62 09                         byte_F5C2:	dc.b 9
00010E63 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010E68 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00010E6D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E72 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E77 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E7C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E81 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E86 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E8B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E90 08                         byte_F5F0:	dc.b 8
00010E91 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010E96 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E9B E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010EA0 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010EA5 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010EAA 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010EAF E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010EB4 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010EBA 00                         		even
00010EBA 00                         		even
00010EBA                            
00010EBA                            ; ===========================================================================
00010EBA                            ; ---------------------------------------------------------------------------
00010EBA                            ; Object 40 - Moto Bug enemy (GHZ)
00010EBA                            ; ---------------------------------------------------------------------------
00010EBA                            
00010EBA                            Obj40:					; XREF: Obj_Index
00010EBA 7000                       		moveq	#0,d0
00010EBC 1028 0024                  		move.b	$24(a0),d0
00010EC0 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010EC4 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010EC8                            ; ===========================================================================
00010EC8 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010ECA 0000                       		dc.w Obj40_Action-Obj40_Index
00010ECC 0000                       		dc.w Obj40_Animate-Obj40_Index
00010ECE 0000                       		dc.w Obj40_Delete-Obj40_Index
00010ED0                            ; ===========================================================================
00010ED0                            
00010ED0                            Obj40_Main:				; XREF: Obj40_Index
00010ED0 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010ED8 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010EDE 117C 0004 0001             		move.b	#4,1(a0)
00010EE4 117C 0004 0018             		move.b	#4,$18(a0)
00010EEA 117C 0014 0019             		move.b	#$14,$19(a0)
00010EF0 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010EF4 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010EF6 117C 000E 0016             		move.b	#$E,$16(a0)
00010EFC 117C 0008 0017             		move.b	#8,$17(a0)
00010F02 117C 000C 0020             		move.b	#$C,$20(a0)
00010F08 6100 D9BE                  		bsr.w	ObjectFall
00010F0C 4EB9 0000 0000             		jsr	ObjHitFloor
00010F12 4A41                       		tst.w	d1
00010F14 6A00                       		bpl.s	locret_F68A
00010F16 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010F1A 317C 0000 0012             		move.w	#0,$12(a0)
00010F20 5428 0024                  		addq.b	#2,$24(a0)
00010F24 0868 0000 0022             		bchg	#0,$22(a0)
00010F2A                            
00010F2A                            locret_F68A:
00010F2A 4E75                       		rts	
00010F2C                            ; ===========================================================================
00010F2C                            
00010F2C                            Obj40_SetSmoke:				; XREF: Obj40_Main
00010F2C 5828 0024                  		addq.b	#4,$24(a0)
00010F30 6000 0000                  		bra.w	Obj40_Animate
00010F34                            ; ===========================================================================
00010F34                            
00010F34                            Obj40_Action:				; XREF: Obj40_Index
00010F34 7000                       		moveq	#0,d0
00010F36 1028 0025                  		move.b	$25(a0),d0
00010F3A 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010F3E 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00010F42 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010F48 6100 AA18                  		bsr.w	AnimateSprite
00010F4C                            
00010F4C                            ; ---------------------------------------------------------------------------
00010F4C                            ; Routine to mark an enemy/monitor/ring	as destroyed
00010F4C                            ; ---------------------------------------------------------------------------
00010F4C                            
00010F4C                            MarkObjGone:
00010F4C 3028 0008                  		move.w	8(a0),d0
00010F50 0240 FF80                  		andi.w	#$FF80,d0
00010F54 3238 F700                  		move.w	($FFFFF700).w,d1
00010F58 0441 0080                  		subi.w	#$80,d1
00010F5C 0241 FF80                  		andi.w	#$FF80,d1
00010F60 9041                       		sub.w	d1,d0
00010F62 0C40 0280                  		cmpi.w	#$280,d0
00010F66 6200 0000                  		bhi.w	Mark_ChkGone
00010F6A 6000 D996                  		bra.w	DisplaySprite
00010F6E                            ; ===========================================================================
00010F6E                            
00010F6E                            Mark_ChkGone:
00010F6E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010F72 6700 D9DE                  		beq.w	DeleteObject	; if it's zero, don't remember object
00010F76 3440                       		movea.w	d0,a2	; load address into a2
00010F78 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010F7C                            
00010F7C                            Mark_Delete:
00010F7C 6000 D9D4                  		bra.w	DeleteObject
00010F80                            
00010F80                            ; ===========================================================================
00010F80 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010F82 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010F84                            ; ===========================================================================
00010F84                            
00010F84                            Obj40_Move:				; XREF: Obj40_Index2
00010F84 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010F88 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00010F8A 5428 0025                  		addq.b	#2,$25(a0)
00010F8E 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010F94 117C 0001 001C             		move.b	#1,$1C(a0)
00010F9A 0868 0000 0022             		bchg	#0,$22(a0)
00010FA0 6600                       		bne.s	locret_F70A
00010FA2 4468 0010                  		neg.w	$10(a0)		; change direction
00010FA6                            
00010FA6                            locret_F70A:
00010FA6 4E75                       		rts	
00010FA8                            ; ===========================================================================
00010FA8                            
00010FA8                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010FA8 6100 D93E                  		bsr.w	SpeedToPos
00010FAC 4EB9 0000 0000             		jsr	ObjHitFloor
00010FB2 0C41 FFF8                  		cmpi.w	#-8,d1
00010FB6 6D00                       		blt.s	Obj40_Pause
00010FB8 0C41 000C                  		cmpi.w	#$C,d1
00010FBC 6C00                       		bge.s	Obj40_Pause
00010FBE D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010FC2 5328 0033                  		subq.b	#1,$33(a0)
00010FC6 6A00                       		bpl.s	locret_F756
00010FC8 117C 000F 0033             		move.b	#$F,$33(a0)
00010FCE 6100 E088                  		bsr.w	SingleObjLoad
00010FD2 6600                       		bne.s	locret_F756
00010FD4 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00010FD8 3368 0008 0008             		move.w	8(a0),8(a1)
00010FDE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010FE4 1368 0022 0022             		move.b	$22(a0),$22(a1)
00010FEA 137C 0002 001C             		move.b	#2,$1C(a1)
00010FF0                            
00010FF0                            locret_F756:
00010FF0 4E75                       		rts	
00010FF2                            ; ===========================================================================
00010FF2                            
00010FF2                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010FF2 5528 0025                  		subq.b	#2,$25(a0)
00010FF6 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010FFC 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00011002 117C 0000 001C             		move.b	#0,$1C(a0)
00011008 4E75                       		rts	
0001100A                            ; ===========================================================================
0001100A                            
0001100A                            Obj40_Animate:				; XREF: Obj40_Index
0001100A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011010 6100 A950                  		bsr.w	AnimateSprite
00011014 6000 D8EC                  		bra.w	DisplaySprite
00011018                            ; ===========================================================================
00011018                            
00011018                            Obj40_Delete:				; XREF: Obj40_Index
00011018 6000 D938                  		bra.w	DeleteObject
0001101C                            ; ===========================================================================
0001101C                            Ani_obj40:
0001101C                            	include "_anim\obj40.asm"
0001101C                            ; ---------------------------------------------------------------------------
0001101C                            ; Animation script - Motobug enemy
0001101C                            ; ---------------------------------------------------------------------------
0001101C 0000                       		dc.w byte_F788-Ani_obj40
0001101E 0000                       		dc.w byte_F78C-Ani_obj40
00011020 0000                       		dc.w byte_F792-Ani_obj40
00011022 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00011026 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0001102C 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0001103A                            		even
0001103A                            		even
0001103A                            
0001103A                            ; ---------------------------------------------------------------------------
0001103A                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001103A                            ; ---------------------------------------------------------------------------
0001103A                            Map_obj40:
0001103A                            	include "_maps\obj40.asm"
0001103A                            ; ---------------------------------------------------------------------------
0001103A                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001103A                            ; ---------------------------------------------------------------------------
0001103A 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0001103E 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
00011042 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00011046 0000                       		dc.w byte_F804-Map_obj40
00011048 04                         byte_F7AE:	dc.b 4
00011049 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0001104E 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
00011053 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00011058 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0001105D 04                         byte_F7C3:	dc.b 4
0001105E F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
00011063 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
00011068 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0001106D 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
00011072 05                         byte_F7D8:	dc.b 5
00011073 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00011078 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0001107D F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00011082 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
00011087 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0001108C 01                         byte_F7F2:	dc.b 1
0001108D FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
00011092 01                         byte_F7F8:	dc.b 1
00011093 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
00011098 01                         byte_F7FE:	dc.b 1
00011099 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
0001109E 00                         byte_F804:	dc.b 0
000110A0 00                         		even
000110A0 00                         		even
000110A0                            
000110A0                            ; ===========================================================================
000110A0                            ; ---------------------------------------------------------------------------
000110A0                            ; Object 4F - blank
000110A0                            ; ---------------------------------------------------------------------------
000110A0                            
000110A0                            Obj4F:					; XREF: Obj_Index
000110A0 4E75                       		rts	
000110A2                            
000110A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000110A2                            
000110A2                            
000110A2                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000110A2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000110A6 D047                       		add.w	d7,d0
000110A8 0240 0003                  		andi.w	#3,d0
000110AC 6600                       		bne.s	loc_F836
000110AE 7600                       		moveq	#0,d3
000110B0 1628 0019                  		move.b	$19(a0),d3
000110B4 4A68 0010                  		tst.w	$10(a0)
000110B8 6B00                       		bmi.s	loc_F82C
000110BA 6100 0000                  		bsr.w	ObjHitWallRight
000110BE 4A41                       		tst.w	d1
000110C0 6A00                       		bpl.s	loc_F836
000110C2                            
000110C2                            loc_F828:
000110C2 7001                       		moveq	#1,d0
000110C4 4E75                       		rts	
000110C6                            ; ===========================================================================
000110C6                            
000110C6                            loc_F82C:
000110C6 4643                       		not.w	d3
000110C8 6100 0000                  		bsr.w	ObjHitWallLeft
000110CC 4A41                       		tst.w	d1
000110CE 6BF2                       		bmi.s	loc_F828
000110D0                            
000110D0                            loc_F836:
000110D0 7000                       		moveq	#0,d0
000110D2 4E75                       		rts	
000110D4                            ; End of function Obj50_ChkWall
000110D4                            
000110D4                            ; ===========================================================================
000110D4                            ; ---------------------------------------------------------------------------
000110D4                            ; Object 50 - Yadrin enemy (SYZ)
000110D4                            ; ---------------------------------------------------------------------------
000110D4                            
000110D4                            Obj50:					; XREF: Obj_Index
000110D4 7000                       		moveq	#0,d0
000110D6 1028 0024                  		move.b	$24(a0),d0
000110DA 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
000110DE 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000110E2                            ; ===========================================================================
000110E2 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000110E4 0000                       		dc.w Obj50_Action-Obj50_Index
000110E6                            ; ===========================================================================
000110E6                            
000110E6                            Obj50_Main:				; XREF: Obj50_Index
000110E6 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000110EE 317C 247B 0002             		move.w	#$247B,2(a0)
000110F4 117C 0004 0001             		move.b	#4,1(a0)
000110FA 117C 0004 0018             		move.b	#4,$18(a0)
00011100 117C 0014 0019             		move.b	#$14,$19(a0)
00011106 117C 0011 0016             		move.b	#$11,$16(a0)
0001110C 117C 0008 0017             		move.b	#8,$17(a0)
00011112 117C 00CC 0020             		move.b	#$CC,$20(a0)
00011118 6100 D7AE                  		bsr.w	ObjectFall
0001111C 6100 0000                  		bsr.w	ObjHitFloor
00011120 4A41                       		tst.w	d1
00011122 6A00                       		bpl.s	locret_F89E
00011124 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011128 317C 0000 0012             		move.w	#0,$12(a0)
0001112E 5428 0024                  		addq.b	#2,$24(a0)
00011132 0868 0000 0022             		bchg	#0,$22(a0)
00011138                            
00011138                            locret_F89E:
00011138 4E75                       		rts	
0001113A                            ; ===========================================================================
0001113A                            
0001113A                            Obj50_Action:				; XREF: Obj50_Index
0001113A 7000                       		moveq	#0,d0
0001113C 1028 0025                  		move.b	$25(a0),d0
00011140 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00011144 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00011148 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0001114E 6100 A812                  		bsr.w	AnimateSprite
00011152 6000 FDF8                  		bra.w	MarkObjGone
00011156                            ; ===========================================================================
00011156 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00011158 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0001115A                            ; ===========================================================================
0001115A                            
0001115A                            Obj50_Move:				; XREF: Obj50_Index2
0001115A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001115E 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011160 5428 0025                  		addq.b	#2,$25(a0)
00011164 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0001116A 117C 0001 001C             		move.b	#1,$1C(a0)
00011170 0868 0000 0022             		bchg	#0,$22(a0)
00011176 6600                       		bne.s	locret_F8E2
00011178 4468 0010                  		neg.w	$10(a0)		; change direction
0001117C                            
0001117C                            locret_F8E2:
0001117C 4E75                       		rts	
0001117E                            ; ===========================================================================
0001117E                            
0001117E                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0001117E 6100 D768                  		bsr.w	SpeedToPos
00011182 6100 0000                  		bsr.w	ObjHitFloor
00011186 0C41 FFF8                  		cmpi.w	#-8,d1
0001118A 6D00                       		blt.s	Obj50_Pause
0001118C 0C41 000C                  		cmpi.w	#$C,d1
00011190 6C00                       		bge.s	Obj50_Pause
00011192 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00011196 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001119A 6600                       		bne.s	Obj50_Pause
0001119C 4E75                       		rts	
0001119E                            ; ===========================================================================
0001119E                            
0001119E                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0001119E 5528 0025                  		subq.b	#2,$25(a0)
000111A2 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000111A8 317C 0000 0010             		move.w	#0,$10(a0)
000111AE 117C 0000 001C             		move.b	#0,$1C(a0)
000111B4 4E75                       		rts	
000111B6                            ; ===========================================================================
000111B6                            Ani_obj50:
000111B6                            	include "_anim\obj50.asm"
000111B6                            ; ---------------------------------------------------------------------------
000111B6                            ; Animation script - Yadrin enemy
000111B6                            ; ---------------------------------------------------------------------------
000111B6 0000                       		dc.w byte_F920-Ani_obj50
000111B8 0000                       		dc.w byte_F924-Ani_obj50
000111BA 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000111BE 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000111C8                            		even
000111C8                            		even
000111C8                            
000111C8                            ; ---------------------------------------------------------------------------
000111C8                            ; Sprite mappings - Yadrin enemy (SYZ)
000111C8                            ; ---------------------------------------------------------------------------
000111C8                            Map_obj50:
000111C8                            	include "_maps\obj50.asm"
000111C8                            ; ---------------------------------------------------------------------------
000111C8                            ; Sprite mappings - Yadrin enemy (SYZ)
000111C8                            ; ---------------------------------------------------------------------------
000111C8 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
000111CC 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
000111D0 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
000111D4 05                         byte_F93A:	dc.b 5
000111D5 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
000111DA FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
000111DF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000111E4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000111E9 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000111EE 05                         byte_F954:	dc.b 5
000111EF F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000111F4 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000111F9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000111FE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011203 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011208 05                         byte_F96E:	dc.b 5
00011209 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001120E 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00011213 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011218 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001121D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011222 05                         byte_F988:	dc.b 5
00011223 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011228 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001122D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011232 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011237 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001123C 05                         byte_F9A2:	dc.b 5
0001123D F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00011242 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011247 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001124C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011251 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011256 05                         byte_F9BC:	dc.b 5
00011257 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001125C 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00011261 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011266 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001126B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011270                            		even
00011270                            		even
00011270                            
00011270                            ; ---------------------------------------------------------------------------
00011270                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011270                            ;
00011270                            ; variables:
00011270                            ; d1 = width
00011270                            ; d2 = height /	2 (when	jumping)
00011270                            ; d3 = height /	2 (when	walking)
00011270                            ; d4 = x-axis position
00011270                            ; ---------------------------------------------------------------------------
00011270                            
00011270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011270                            
00011270                            
00011270                            SolidObject:
00011270 4A28 0025                  		tst.b	$25(a0)
00011274 6700 0000                  		beq.w	loc_FAC8
00011278 3401                       		move.w	d1,d2
0001127A D442                       		add.w	d2,d2
0001127C 43F8 D000                  		lea	($FFFFD000).w,a1
00011280 0829 0001 0022             		btst	#1,$22(a1)
00011286 6600                       		bne.s	loc_F9FE
00011288 3029 0008                  		move.w	8(a1),d0
0001128C 9068 0008                  		sub.w	8(a0),d0
00011290 D041                       		add.w	d1,d0
00011292 6B00                       		bmi.s	loc_F9FE
00011294 B042                       		cmp.w	d2,d0
00011296 6500                       		bcs.s	loc_FA12
00011298                            
00011298                            loc_F9FE:
00011298 08A9 0003 0022             		bclr	#3,$22(a1)
0001129E 08A8 0003 0022             		bclr	#3,$22(a0)
000112A4 4228 0025                  		clr.b	$25(a0)
000112A8 7800                       		moveq	#0,d4
000112AA 4E75                       		rts	
000112AC                            ; ===========================================================================
000112AC                            
000112AC                            loc_FA12:
000112AC 3404                       		move.w	d4,d2
000112AE 4EB9 0000 8BEE             		jsr	(MvSonicOnPtfm).l
000112B4 7800                       		moveq	#0,d4
000112B6 4E75                       		rts	
000112B8                            ; ===========================================================================
000112B8                            
000112B8                            SolidObject71:				; XREF: Obj71_Solid
000112B8 4A28 0025                  		tst.b	$25(a0)
000112BC 6700 0000                  		beq.w	loc_FAD0
000112C0 3401                       		move.w	d1,d2
000112C2 D442                       		add.w	d2,d2
000112C4 43F8 D000                  		lea	($FFFFD000).w,a1
000112C8 0829 0001 0022             		btst	#1,$22(a1)
000112CE 6600                       		bne.s	loc_FA44
000112D0 3029 0008                  		move.w	8(a1),d0
000112D4 9068 0008                  		sub.w	8(a0),d0
000112D8 D041                       		add.w	d1,d0
000112DA 6B00                       		bmi.s	loc_FA44
000112DC B042                       		cmp.w	d2,d0
000112DE 6500                       		bcs.s	loc_FA58
000112E0                            
000112E0                            loc_FA44:
000112E0 08A9 0003 0022             		bclr	#3,$22(a1)
000112E6 08A8 0003 0022             		bclr	#3,$22(a0)
000112EC 4228 0025                  		clr.b	$25(a0)
000112F0 7800                       		moveq	#0,d4
000112F2 4E75                       		rts	
000112F4                            ; ===========================================================================
000112F4                            
000112F4                            loc_FA58:
000112F4 3404                       		move.w	d4,d2
000112F6 4EB9 0000 8BEE             		jsr	(MvSonicOnPtfm).l
000112FC 7800                       		moveq	#0,d4
000112FE 4E75                       		rts	
00011300                            ; ===========================================================================
00011300                            
00011300                            SolidObject2F:				; XREF: Obj2F_Solid
00011300 43F8 D000                  		lea	($FFFFD000).w,a1
00011304 4A28 0001                  		tst.b	1(a0)
00011308 6A00 0000                  		bpl.w	loc_FB92
0001130C 3029 0008                  		move.w	8(a1),d0
00011310 9068 0008                  		sub.w	8(a0),d0
00011314 D041                       		add.w	d1,d0
00011316 6B00 0000                  		bmi.w	loc_FB92
0001131A 3601                       		move.w	d1,d3
0001131C D643                       		add.w	d3,d3
0001131E B043                       		cmp.w	d3,d0
00011320 6200 0000                  		bhi.w	loc_FB92
00011324 3A00                       		move.w	d0,d5
00011326 0828 0000 0001             		btst	#0,1(a0)
0001132C 6700                       		beq.s	loc_FA94
0001132E 4645                       		not.w	d5
00011330 DA43                       		add.w	d3,d5
00011332                            
00011332                            loc_FA94:
00011332 E24D                       		lsr.w	#1,d5
00011334 7600                       		moveq	#0,d3
00011336 1632 5000                  		move.b	(a2,d5.w),d3
0001133A 9612                       		sub.b	(a2),d3
0001133C 3A28 000C                  		move.w	$C(a0),d5
00011340 9A43                       		sub.w	d3,d5
00011342 1629 0016                  		move.b	$16(a1),d3
00011346 4883                       		ext.w	d3
00011348 D443                       		add.w	d3,d2
0001134A 3629 000C                  		move.w	$C(a1),d3
0001134E 9645                       		sub.w	d5,d3
00011350 5843                       		addq.w	#4,d3
00011352 D642                       		add.w	d2,d3
00011354 6B00 0000                  		bmi.w	loc_FB92
00011358 3802                       		move.w	d2,d4
0001135A D844                       		add.w	d4,d4
0001135C B644                       		cmp.w	d4,d3
0001135E 6400 0000                  		bcc.w	loc_FB92
00011362 6000 0000                  		bra.w	loc_FB0E
00011366                            ; ===========================================================================
00011366                            
00011366                            loc_FAC8:
00011366 4A28 0001                  		tst.b	1(a0)
0001136A 6A00 0000                  		bpl.w	loc_FB92
0001136E                            
0001136E                            loc_FAD0:
0001136E 43F8 D000                  		lea	($FFFFD000).w,a1
00011372 3029 0008                  		move.w	8(a1),d0
00011376 9068 0008                  		sub.w	8(a0),d0
0001137A D041                       		add.w	d1,d0
0001137C 6B00 0000                  		bmi.w	loc_FB92
00011380 3601                       		move.w	d1,d3
00011382 D643                       		add.w	d3,d3
00011384 B043                       		cmp.w	d3,d0
00011386 6200 0000                  		bhi.w	loc_FB92
0001138A 1629 0016                  		move.b	$16(a1),d3
0001138E 4883                       		ext.w	d3
00011390 D443                       		add.w	d3,d2
00011392 3629 000C                  		move.w	$C(a1),d3
00011396 9668 000C                  		sub.w	$C(a0),d3
0001139A 5843                       		addq.w	#4,d3
0001139C D642                       		add.w	d2,d3
0001139E 6B00 0000                  		bmi.w	loc_FB92
000113A2 3802                       		move.w	d2,d4
000113A4 D844                       		add.w	d4,d4
000113A6 B644                       		cmp.w	d4,d3
000113A8 6400 0000                  		bcc.w	loc_FB92
000113AC                            
000113AC                            loc_FB0E:
000113AC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000113B0 6B00 0000                  		bmi.w	loc_FB92
000113B4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000113BA 6400 0000                  		bcc.w	loc_FB92
000113BE 4A78 FE08                  		tst.w	($FFFFFE08).w
000113C2 6600 0000                  		bne.w	loc_FBAC
000113C6 3A00                       		move.w	d0,d5
000113C8 B240                       		cmp.w	d0,d1
000113CA 6400                       		bcc.s	loc_FB36
000113CC D241                       		add.w	d1,d1
000113CE 9041                       		sub.w	d1,d0
000113D0 3A00                       		move.w	d0,d5
000113D2 4445                       		neg.w	d5
000113D4                            
000113D4                            loc_FB36:
000113D4 3203                       		move.w	d3,d1
000113D6 B443                       		cmp.w	d3,d2
000113D8 6400                       		bcc.s	loc_FB44
000113DA 5943                       		subq.w	#4,d3
000113DC 9644                       		sub.w	d4,d3
000113DE 3203                       		move.w	d3,d1
000113E0 4441                       		neg.w	d1
000113E2                            
000113E2                            loc_FB44:
000113E2 BA41                       		cmp.w	d1,d5
000113E4 6200 0000                  		bhi.w	loc_FBB0
000113E8 0C41 0004                  		cmpi.w	#4,d1
000113EC 6300                       		bls.s	loc_FB8C
000113EE 4A40                       		tst.w	d0
000113F0 6700                       		beq.s	loc_FB70
000113F2 6B00                       		bmi.s	loc_FB5E
000113F4 4A69 0010                  		tst.w	$10(a1)
000113F8 6B00                       		bmi.s	loc_FB70
000113FA 6000                       		bra.s	loc_FB64
000113FC                            ; ===========================================================================
000113FC                            
000113FC                            loc_FB5E:
000113FC 4A69 0010                  		tst.w	$10(a1)
00011400 6A00                       		bpl.s	loc_FB70
00011402                            
00011402                            loc_FB64:
00011402 337C 0000 0020             		move.w	#0,$20(a1)	; stop Sonic moving
00011408 337C 0000 0010             		move.w	#0,$10(a1)
0001140E                            
0001140E                            loc_FB70:
0001140E 9169 0008                  		sub.w	d0,8(a1)
00011412 0829 0001 0022             		btst	#1,$22(a1)
00011418 6600                       		bne.s	loc_FB8C
0001141A 08E9 0005 0022             		bset	#5,$22(a1)
00011420 08E8 0005 0022             		bset	#5,$22(a0)
00011426 7801                       		moveq	#1,d4
00011428 4E75                       		rts	
0001142A                            ; ===========================================================================
0001142A                            
0001142A                            loc_FB8C:
0001142A 6100                       		bsr.s	loc_FBA0
0001142C 7801                       		moveq	#1,d4
0001142E 4E75                       		rts	
00011430                            ; ===========================================================================
00011430                            loc_FB92:
00011430 0828 0005 0022             		btst	#5,$22(a0)
00011436 6700                       		beq.s	loc_FBAC
00011438 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0001143E 6700                       		beq.s	loc_FBA0
00011440 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
00011446 6700                       		beq.s	loc_FBA0
00011448 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
0001144E 6700                       		beq.s	loc_FBA0
00011450 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00011456                            
00011456                            loc_FBA0:
00011456 08A8 0005 0022             		bclr	#5,$22(a0)
0001145C 08A9 0005 0022             		bclr	#5,$22(a1)
00011462                            
00011462                            loc_FBAC:
00011462 7800                       		moveq	#0,d4
00011464 4E75                       		rts	
00011466                            ; ===========================================================================
00011466                            
00011466                            loc_FBB0:
00011466 4A43                       		tst.w	d3
00011468 6B00                       		bmi.s	loc_FBBC
0001146A 0C43 0010                  		cmpi.w	#$10,d3
0001146E 6500                       		bcs.s	loc_FBEE
00011470 60BE                       		bra.s	loc_FB92
00011472                            ; ===========================================================================
00011472                            
00011472                            loc_FBBC:
00011472 4A69 0012                  		tst.w	$12(a1)
00011476 6700                       		beq.s	loc_FBD6
00011478 6A00                       		bpl.s	loc_FBD2
0001147A 4A43                       		tst.w	d3
0001147C 6A00                       		bpl.s	loc_FBD2
0001147E 9769 000C                  		sub.w	d3,$C(a1)
00011482 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00011488                            
00011488                            loc_FBD2:
00011488 78FF                       		moveq	#-1,d4
0001148A 4E75                       		rts	
0001148C                            ; ===========================================================================
0001148C                            
0001148C                            loc_FBD6:
0001148C 0829 0001 0022             		btst	#1,$22(a1)
00011492 66F4                       		bne.s	loc_FBD2
00011494 2F08                       		move.l	a0,-(sp)
00011496 2049                       		movea.l	a1,a0
00011498 4EB9 0000 0000             		jsr	KillSonic
0001149E 205F                       		movea.l	(sp)+,a0
000114A0 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
000114A6 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
000114AC 78FF                       		moveq	#-1,d4
000114AE 4E75                       		rts	
000114B0                            ; ===========================================================================
000114B0                            
000114B0                            loc_FBEE:
000114B0 5943                       		subq.w	#4,d3
000114B2 7200                       		moveq	#0,d1
000114B4 1228 0019                  		move.b	$19(a0),d1
000114B8 3401                       		move.w	d1,d2
000114BA D442                       		add.w	d2,d2
000114BC D269 0008                  		add.w	8(a1),d1
000114C0 9268 0008                  		sub.w	8(a0),d1
000114C4 6B00                       		bmi.s	loc_FC28
000114C6 B242                       		cmp.w	d2,d1
000114C8 6400                       		bcc.s	loc_FC28
000114CA 4A69 0012                  		tst.w	$12(a1)
000114CE 6B00                       		bmi.s	loc_FC28
000114D0 9769 000C                  		sub.w	d3,$C(a1)
000114D4 5369 000C                  		subq.w	#1,$C(a1)
000114D8 6100                       		bsr.s	sub_FC2C
000114DA 117C 0002 0025             		move.b	#2,$25(a0)
000114E0 08E8 0003 0022             		bset	#3,$22(a0)
000114E6 78FF                       		moveq	#-1,d4
000114E8 4E75                       		rts	
000114EA                            ; ===========================================================================
000114EA                            
000114EA                            loc_FC28:
000114EA 7800                       		moveq	#0,d4
000114EC 4E75                       		rts	
000114EE                            ; End of function SolidObject
000114EE                            
000114EE                            
000114EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000114EE                            
000114EE                            
000114EE                            sub_FC2C:				; XREF: SolidObject
000114EE 0829 0003 0022             		btst	#3,$22(a1)
000114F4 6700                       		beq.s	loc_FC4E
000114F6 7000                       		moveq	#0,d0
000114F8 1029 003D                  		move.b	$3D(a1),d0
000114FC ED48                       		lsl.w	#6,d0
000114FE 0680 00FF D000             		addi.l	#$FFD000,d0
00011504 2440                       		movea.l	d0,a2
00011506 08AA 0003 0022             		bclr	#3,$22(a2)
0001150C 422A 0025                  		clr.b	$25(a2)
00011510                            
00011510                            loc_FC4E:
00011510 3008                       		move.w	a0,d0
00011512 0440 D000                  		subi.w	#-$3000,d0
00011516 EC48                       		lsr.w	#6,d0
00011518 0240 007F                  		andi.w	#$7F,d0
0001151C 1340 003D                  		move.b	d0,$3D(a1)
00011520 137C 0000 0026             		move.b	#0,$26(a1)
00011526 337C 0000 0012             		move.w	#0,$12(a1)
0001152C 3369 0010 0020             		move.w	$10(a1),$20(a1)
00011532 0829 0001 0022             		btst	#1,$22(a1)
00011538 6700                       		beq.s	loc_FC84
0001153A 2F08                       		move.l	a0,-(sp)
0001153C 2049                       		movea.l	a1,a0
0001153E 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00011544 205F                       		movea.l	(sp)+,a0
00011546                            
00011546                            loc_FC84:
00011546 08E9 0003 0022             		bset	#3,$22(a1)
0001154C 08E8 0003 0022             		bset	#3,$22(a0)
00011552 4E75                       		rts	
00011554                            ; End of function sub_FC2C
00011554                            
00011554                            ; ===========================================================================
00011554                            ; ---------------------------------------------------------------------------
00011554                            ; Object 51 - smashable	green block (MZ)
00011554                            ; ---------------------------------------------------------------------------
00011554                            
00011554                            Obj51:					; XREF: Obj_Index
00011554 7000                       		moveq	#0,d0
00011556 1028 0024                  		move.b	$24(a0),d0
0001155A 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001155E 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00011562 6000 F9E8                  		bra.w	MarkObjGone
00011566                            ; ===========================================================================
00011566 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00011568 0000                       		dc.w Obj51_Solid-Obj51_Index
0001156A 0000                       		dc.w Obj51_Display-Obj51_Index
0001156C                            ; ===========================================================================
0001156C                            
0001156C                            Obj51_Main:				; XREF: Obj51_Index
0001156C 5428 0024                  		addq.b	#2,$24(a0)
00011570 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00011578 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001157E 117C 0004 0001             		move.b	#4,1(a0)
00011584 117C 0010 0019             		move.b	#$10,$19(a0)
0001158A 117C 0004 0018             		move.b	#4,$18(a0)
00011590 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00011596                            
00011596                            Obj51_Solid:				; XREF: Obj51_Index
00011596 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001159C 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000115A2 323C 001B                  		move.w	#$1B,d1
000115A6 343C 0010                  		move.w	#$10,d2
000115AA 363C 0011                  		move.w	#$11,d3
000115AE 3828 0008                  		move.w	8(a0),d4
000115B2 6100 FCBC                  		bsr.w	SolidObject
000115B6 0828 0003 0022             		btst	#3,$22(a0)
000115BC 6600                       		bne.s	Obj51_Smash
000115BE                            
000115BE                            locret_FCFC:
000115BE 4E75                       		rts	
000115C0                            ; ===========================================================================
000115C0                            
000115C0                            Obj51_Smash:				; XREF: Obj51_Solid
000115C0 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000115C6 66F6                       		bne.s	locret_FCFC	; if not, branch
000115C8 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000115CE 08E9 0002 0022             		bset	#2,$22(a1)
000115D4 137C 000E 0016             		move.b	#$E,$16(a1)
000115DA 137C 0007 0017             		move.b	#7,$17(a1)
000115E0 137C 0002 001C             		move.b	#2,$1C(a1)
000115E6 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000115EC 08E9 0001 0022             		bset	#1,$22(a1)
000115F2 08A9 0003 0022             		bclr	#3,$22(a1)
000115F8 137C 0002 0024             		move.b	#2,$24(a1)
000115FE 08A8 0003 0022             		bclr	#3,$22(a0)
00011604 4228 0025                  		clr.b	$25(a0)
00011608 117C 0001 001A             		move.b	#1,$1A(a0)
0001160E 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00011614 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011616 343C 0038                  		move.w	#$38,d2
0001161A 6100 CEE4                  		bsr.w	SmashObject
0001161E 6100 DA38                  		bsr.w	SingleObjLoad
00011622 6600                       		bne.s	Obj51_Display
00011624 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011628 3368 0008 0008             		move.w	8(a0),8(a1)
0001162E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011634 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00011638 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001163C 0C42 0006                  		cmpi.w	#6,d2
00011640 6500                       		bcs.s	Obj51_Bonus
00011642 7406                       		moveq	#6,d2
00011644                            
00011644                            Obj51_Bonus:
00011644 7000                       		moveq	#0,d0
00011646 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0001164A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00011650 6500                       		bcs.s	loc_FD98	; if not, branch
00011652 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011656 740A                       		moveq	#10,d2
00011658                            
00011658                            loc_FD98:
00011658 4EB9 0000 0000             		jsr	AddPoints
0001165E E24A                       		lsr.w	#1,d2
00011660 1342 001A                  		move.b	d2,$1A(a1)
00011664                            
00011664                            Obj51_Display:				; XREF: Obj51_Index
00011664 6100 D282                  		bsr.w	SpeedToPos
00011668 0668 0038 0012             		addi.w	#$38,$12(a0)
0001166E 6100 D292                  		bsr.w	DisplaySprite
00011672 4A28 0001                  		tst.b	1(a0)
00011676 6A00 D2DA                  		bpl.w	DeleteObject
0001167A 4E75                       		rts	
0001167C                            ; ===========================================================================
0001167C FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00011680 FF00 FF00                  		dc.w $FF00, $FF00
00011684 0200 FE00                  		dc.w $200, $FE00
00011688 0100 FF00                  		dc.w $100, $FF00
0001168C                            
0001168C 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00011694                            ; ---------------------------------------------------------------------------
00011694                            ; Sprite mappings - smashable green block (MZ)
00011694                            ; ---------------------------------------------------------------------------
00011694                            Map_obj51:
00011694                            	include "_maps\obj51.asm"
00011694                            ; ---------------------------------------------------------------------------
00011694                            ; Sprite mappings - smashable green block (MZ)
00011694                            ; ---------------------------------------------------------------------------
00011694 0000                       		dc.w byte_FDD8-Map_obj51
00011696 0000                       		dc.w byte_FDE3-Map_obj51
00011698 02                         byte_FDD8:	dc.b 2
00011699 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0001169E 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000116A3 04                         byte_FDE3:	dc.b 4
000116A4 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000116A9 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000116AE F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000116B3 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000116B8                            		even
000116B8                            		even
000116B8                            
000116B8                            ; ===========================================================================
000116B8                            ; ---------------------------------------------------------------------------
000116B8                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000116B8                            ; ---------------------------------------------------------------------------
000116B8                            
000116B8                            Obj52:					; XREF: Obj_Index
000116B8 7000                       		moveq	#0,d0
000116BA 1028 0024                  		move.b	$24(a0),d0
000116BE 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000116C2 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000116C6                            ; ===========================================================================
000116C6 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000116C8 0000                       		dc.w Obj52_Platform-Obj52_Index
000116CA 0000                       		dc.w Obj52_StandOn-Obj52_Index
000116CC                            
000116CC 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000116CE 2001                       		dc.b $20, 1
000116D0 2002                       		dc.b $20, 2
000116D2 4003                       		dc.b $40, 3
000116D4 3004                       		dc.b $30, 4
000116D6                            ; ===========================================================================
000116D6                            
000116D6                            Obj52_Main:				; XREF: Obj52_Index
000116D6 5428 0024                  		addq.b	#2,$24(a0)
000116DA 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000116E2 317C 42B8 0002             		move.w	#$42B8,2(a0)
000116E8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000116EE 6600                       		bne.s	loc_FE44
000116F0 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000116F8 317C 43BC 0002             		move.w	#$43BC,2(a0)
000116FE 117C 0007 0016             		move.b	#7,$16(a0)
00011704                            
00011704                            loc_FE44:
00011704 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001170A 6600                       		bne.s	loc_FE60
0001170C 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00011712 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00011718 6700                       		beq.s	loc_FE60	; if yes, branch
0001171A 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00011720                            
00011720                            loc_FE60:
00011720 117C 0004 0001             		move.b	#4,1(a0)
00011726 7000                       		moveq	#0,d0
00011728 1028 0028                  		move.b	$28(a0),d0
0001172C E648                       		lsr.w	#3,d0
0001172E 0240 001E                  		andi.w	#$1E,d0
00011732 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00011736 115A 0019                  		move.b	(a2)+,$19(a0)
0001173A 115A 001A                  		move.b	(a2)+,$1A(a0)
0001173E 117C 0004 0018             		move.b	#4,$18(a0)
00011744 3168 0008 0030             		move.w	8(a0),$30(a0)
0001174A 3168 000C 0032             		move.w	$C(a0),$32(a0)
00011750 0228 000F 0028             		andi.b	#$F,$28(a0)
00011756                            
00011756                            Obj52_Platform:				; XREF: Obj52_Index
00011756 6100 0000                  		bsr.w	Obj52_Move
0001175A 7200                       		moveq	#0,d1
0001175C 1228 0019                  		move.b	$19(a0),d1
00011760 4EB9 0000 8510             		jsr	(PlatformObject).l
00011766 6000                       		bra.s	Obj52_ChkDel
00011768                            ; ===========================================================================
00011768                            
00011768                            Obj52_StandOn:				; XREF: Obj52_Index
00011768 7200                       		moveq	#0,d1
0001176A 1228 0019                  		move.b	$19(a0),d1
0001176E 4EB9 0000 8684             		jsr	(ExitPlatform).l
00011774 3F28 0008                  		move.w	8(a0),-(sp)
00011778 6100 0000                  		bsr.w	Obj52_Move
0001177C 341F                       		move.w	(sp)+,d2
0001177E 4EB9 0000 8BFA             		jsr	(MvSonicOnPtfm2).l
00011784                            
00011784                            Obj52_ChkDel:				; XREF: Obj52_Platform
00011784 3028 0030                  		move.w	$30(a0),d0
00011788 0240 FF80                  		andi.w	#$FF80,d0
0001178C 3238 F700                  		move.w	($FFFFF700).w,d1
00011790 0441 0080                  		subi.w	#$80,d1
00011794 0241 FF80                  		andi.w	#$FF80,d1
00011798 9041                       		sub.w	d1,d0
0001179A 0C40 0280                  		cmpi.w	#$280,d0
0001179E 6300 D162                  		bls.w	DisplaySprite
000117A2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000117A6 6700 D1AA                  		beq.w	DeleteObject		; if it's zero, don't remember object
000117AA 3440                       		movea.w	d0,a2	; load address into a2
000117AC 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000117B0 6000 D1A0                  		bra.w	DeleteObject	; and delete object
000117B4                            ; ===========================================================================
000117B4                            
000117B4                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000117B4 7000                       		moveq	#0,d0
000117B6 1028 0028                  		move.b	$28(a0),d0
000117BA 0240 000F                  		andi.w	#$F,d0
000117BE D040                       		add.w	d0,d0
000117C0 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000117C4 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000117C8                            ; ===========================================================================
000117C8 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000117CC 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000117D0 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000117D4 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000117D8 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000117DC 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000117DE                            ; ===========================================================================
000117DE                            
000117DE                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000117DE 4E75                       		rts	
000117E0                            ; ===========================================================================
000117E0                            
000117E0                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000117E0 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000117E4 323C 0060                  		move.w	#$60,d1
000117E8 0828 0000 0022             		btst	#0,$22(a0)
000117EE 6700                       		beq.s	loc_FF26
000117F0 4440                       		neg.w	d0
000117F2 D041                       		add.w	d1,d0
000117F4                            
000117F4                            loc_FF26:
000117F4 3228 0030                  		move.w	$30(a0),d1
000117F8 9240                       		sub.w	d0,d1
000117FA 3141 0008                  		move.w	d1,8(a0)
000117FE 4E75                       		rts	
00011800                            ; ===========================================================================
00011800                            
00011800                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00011800 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011806 6600                       		bne.s	Obj52_02_Wait
00011808 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001180C                            
0001180C                            Obj52_02_Wait:
0001180C 4E75                       		rts	
0001180E                            ; ===========================================================================
0001180E                            
0001180E                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001180E 7600                       		moveq	#0,d3
00011810 1628 0019                  		move.b	$19(a0),d3
00011814 6100 0000                  		bsr.w	ObjHitWallRight
00011818 4A41                       		tst.w	d1		; has the platform hit a wall?
0001181A 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001181C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011820 3168 0008 0030             		move.w	8(a0),$30(a0)
00011826 4E75                       		rts	
00011828                            ; ===========================================================================
00011828                            
00011828                            Obj52_03_End:
00011828 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0001182C 4E75                       		rts	
0001182E                            ; ===========================================================================
0001182E                            
0001182E                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001182E 7600                       		moveq	#0,d3
00011830 1628 0019                  		move.b	$19(a0),d3
00011834 6100 0000                  		bsr.w	ObjHitWallRight
00011838 4A41                       		tst.w	d1		; has the platform hit a wall?
0001183A 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001183C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011840 3168 0008 0030             		move.w	8(a0),$30(a0)
00011846 4E75                       		rts	
00011848                            ; ===========================================================================
00011848                            
00011848                            Obj52_05_End:
00011848 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0001184C 4E75                       		rts	
0001184E                            ; ===========================================================================
0001184E                            
0001184E                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001184E 6100 D098                  		bsr.w	SpeedToPos
00011852 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00011858 6100 0000                  		bsr.w	ObjHitFloor
0001185C 4A41                       		tst.w	d1		; has platform hit the floor?
0001185E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00011862 D368 000C                  		add.w	d1,$C(a0)
00011866 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0001186A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001186E                            
0001186E                            locret_FFA0:
0001186E 4E75                       		rts	
00011870                            ; ===========================================================================
00011870                            
00011870                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00011870 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00011874 6700                       		beq.s	Obj52_07_ChkDel
00011876 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001187A                            
0001187A                            Obj52_07_ChkDel:
0001187A 588F                       		addq.l	#4,sp
0001187C 3028 0030                  		move.w	$30(a0),d0
00011880 0240 FF80                  		andi.w	#$FF80,d0
00011884 3238 F700                  		move.w	($FFFFF700).w,d1
00011888 0441 0080                  		subi.w	#$80,d1
0001188C 0241 FF80                  		andi.w	#$FF80,d1
00011890 9041                       		sub.w	d1,d0
00011892 0C40 0280                  		cmpi.w	#$280,d0
00011896 6200 D0BA                  		bhi.w	DeleteObject
0001189A 4E75                       		rts	
0001189C                            ; ===========================================================================
0001189C                            
0001189C                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0001189C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000118A0 323C 0080                  		move.w	#$80,d1
000118A4 0828 0000 0022             		btst	#0,$22(a0)
000118AA 6700                       		beq.s	loc_FFE2
000118AC 4440                       		neg.w	d0
000118AE D041                       		add.w	d1,d0
000118B0                            
000118B0                            loc_FFE2:
000118B0 3228 0032                  		move.w	$32(a0),d1
000118B4 9240                       		sub.w	d0,d1
000118B6 3141 000C                  		move.w	d1,$C(a0)
000118BA 4E75                       		rts	
000118BC                            ; ===========================================================================
000118BC                            
000118BC                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000118BC 7600                       		moveq	#0,d3
000118BE 1628 0019                  		move.b	$19(a0),d3
000118C2 D643                       		add.w	d3,d3
000118C4 7208                       		moveq	#8,d1
000118C6 0828 0000 0022             		btst	#0,$22(a0)
000118CC 6700                       		beq.s	loc_10004
000118CE 4441                       		neg.w	d1
000118D0 4443                       		neg.w	d3
000118D2                            
000118D2                            loc_10004:
000118D2 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000118D6 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000118D8 3028 0008                  		move.w	8(a0),d0
000118DC 9068 0030                  		sub.w	$30(a0),d0
000118E0 B043                       		cmp.w	d3,d0
000118E2 6700                       		beq.s	Obj52_0A_Wait
000118E4 D368 0008                  		add.w	d1,8(a0)	; move platform
000118E8 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000118EE 4E75                       		rts	
000118F0                            ; ===========================================================================
000118F0                            
000118F0                            Obj52_0A_Wait:
000118F0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000118F4 6600                       		bne.s	locret_1002E	; if time remains, branch
000118F6 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000118FC                            
000118FC                            locret_1002E:
000118FC 4E75                       		rts	
000118FE                            ; ===========================================================================
000118FE                            
000118FE                            Obj52_0A_Back:
000118FE 3028 0008                  		move.w	8(a0),d0
00011902 9068 0030                  		sub.w	$30(a0),d0
00011906 6700                       		beq.s	Obj52_0A_Reset
00011908 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0001190C 4E75                       		rts	
0001190E                            ; ===========================================================================
0001190E                            
0001190E                            Obj52_0A_Reset:
0001190E 4268 0036                  		clr.w	$36(a0)
00011912 5328 0028                  		subq.b	#1,$28(a0)
00011916 4E75                       		rts	
00011918                            ; ===========================================================================
00011918                            ; ---------------------------------------------------------------------------
00011918                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011918                            ; ---------------------------------------------------------------------------
00011918                            Map_obj52:
00011918                            	include "_maps\obj52mz.asm"
00011918                            ; ---------------------------------------------------------------------------
00011918                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011918                            ; ---------------------------------------------------------------------------
00011918 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0001191C 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00011920 0000                       		dc.w byte_1008F-Map_obj52
00011922 01                         byte_10054:	dc.b 1
00011923 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011928 02                         byte_1005A:	dc.b 2
00011929 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001192E F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00011933 04                         byte_10065:	dc.b 4
00011934 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011939 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001193E F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00011943 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011948 04                         byte_1007A:	dc.b 4
00011949 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001194E F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00011953 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00011958 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001195D 03                         byte_1008F:	dc.b 3
0001195E F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00011963 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011968 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001196E 00                         		even
0001196E 00                         		even
0001196E                            
0001196E                            ; ---------------------------------------------------------------------------
0001196E                            ; Sprite mappings - moving block (LZ)
0001196E                            ; ---------------------------------------------------------------------------
0001196E                            Map_obj52a:
0001196E                            	include "_maps\obj52lz.asm"
0001196E                            ; ---------------------------------------------------------------------------
0001196E                            ; Sprite mappings - moving block (LZ)
0001196E                            ; ---------------------------------------------------------------------------
0001196E 0000                       		dc.w byte_100A2-Map_obj52a
00011970 01                         byte_100A2:	dc.b 1
00011971 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00011976                            		even
00011976                            		even
00011976                            
00011976                            ; ===========================================================================
00011976                            ; ---------------------------------------------------------------------------
00011976                            ; Object 55 - Basaran enemy (MZ)
00011976                            ; ---------------------------------------------------------------------------
00011976                            
00011976                            Obj55:					; XREF: Obj_Index
00011976 7000                       		moveq	#0,d0
00011978 1028 0024                  		move.b	$24(a0),d0
0001197C 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00011980 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00011984                            ; ===========================================================================
00011984 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011986 0000                       		dc.w Obj55_Action-Obj55_Index
00011988                            ; ===========================================================================
00011988                            
00011988                            Obj55_Main:				; XREF: Obj55_Index
00011988 5428 0024                  		addq.b	#2,$24(a0)
0001198C 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00011994 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001199A 117C 0004 0001             		move.b	#4,1(a0)
000119A0 117C 000C 0016             		move.b	#$C,$16(a0)
000119A6 117C 0002 0018             		move.b	#2,$18(a0)
000119AC 117C 000B 0020             		move.b	#$B,$20(a0)
000119B2 117C 0010 0019             		move.b	#$10,$19(a0)
000119B8                            
000119B8                            Obj55_Action:				; XREF: Obj55_Index
000119B8 7000                       		moveq	#0,d0
000119BA 1028 0025                  		move.b	$25(a0),d0
000119BE 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000119C2 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000119C6 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000119CC 6100 9F94                  		bsr.w	AnimateSprite
000119D0 6000 F57A                  		bra.w	MarkObjGone
000119D4                            ; ===========================================================================
000119D4 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000119D6 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000119D8 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000119DA 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000119DC                            ; ===========================================================================
000119DC                            
000119DC                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000119DC 343C 0080                  		move.w	#$80,d2
000119E0 6100 0000                  		bsr.w	Obj55_ChkSonic
000119E4 6400                       		bcc.s	Obj55_NoDrop
000119E6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000119EA 3140 0036                  		move.w	d0,$36(a0)
000119EE 9068 000C                  		sub.w	$C(a0),d0
000119F2 6500                       		bcs.s	Obj55_NoDrop
000119F4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000119F8 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000119FA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000119FE 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011A00 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011A04 D007                       		add.b	d7,d0
00011A06 0200 0007                  		andi.b	#7,d0
00011A0A 6600                       		bne.s	Obj55_NoDrop
00011A0C 117C 0001 001C             		move.b	#1,$1C(a0)
00011A12 5428 0025                  		addq.b	#2,$25(a0)
00011A16                            
00011A16                            Obj55_NoDrop:
00011A16 4E75                       		rts	
00011A18                            ; ===========================================================================
00011A18                            
00011A18                            Obj55_DropFly:				; XREF: Obj55_Index2
00011A18 6100 CECE                  		bsr.w	SpeedToPos
00011A1C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00011A22 343C 0080                  		move.w	#$80,d2
00011A26 6100 0000                  		bsr.w	Obj55_ChkSonic
00011A2A 3028 0036                  		move.w	$36(a0),d0
00011A2E 9068 000C                  		sub.w	$C(a0),d0
00011A32 6500                       		bcs.s	Obj55_ChkDel
00011A34 0C40 0010                  		cmpi.w	#$10,d0
00011A38 6400                       		bcc.s	locret_10180
00011A3A 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00011A3E 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011A44 117C 0002 001C             		move.b	#2,$1C(a0)
00011A4A 5428 0025                  		addq.b	#2,$25(a0)
00011A4E                            
00011A4E                            locret_10180:
00011A4E 4E75                       		rts	
00011A50                            ; ===========================================================================
00011A50                            
00011A50                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00011A50 4A28 0001                  		tst.b	1(a0)
00011A54 6A00 CEFC                  		bpl.w	DeleteObject
00011A58 4E75                       		rts	
00011A5A                            ; ===========================================================================
00011A5A                            
00011A5A                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011A5A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011A5E 0200 000F                  		andi.b	#$F,d0
00011A62 6600                       		bne.s	loc_101A0
00011A64 303C 00C0                  		move.w	#$C0,d0
00011A68 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flapping sound
00011A6E                            
00011A6E                            loc_101A0:
00011A6E 6100 CE78                  		bsr.w	SpeedToPos
00011A72 3038 D008                  		move.w	($FFFFD008).w,d0
00011A76 9068 0008                  		sub.w	8(a0),d0
00011A7A 6400                       		bcc.s	loc_101B0
00011A7C 4440                       		neg.w	d0
00011A7E                            
00011A7E                            loc_101B0:
00011A7E 0C40 0080                  		cmpi.w	#$80,d0
00011A82 6500                       		bcs.s	locret_101C6
00011A84 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011A88 D007                       		add.b	d7,d0
00011A8A 0200 0007                  		andi.b	#7,d0
00011A8E 6600                       		bne.s	locret_101C6
00011A90 5428 0025                  		addq.b	#2,$25(a0)
00011A94                            
00011A94                            locret_101C6:
00011A94 4E75                       		rts	
00011A96                            ; ===========================================================================
00011A96                            
00011A96                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011A96 6100 CE50                  		bsr.w	SpeedToPos
00011A9A 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011AA0 6100 0000                  		bsr.w	ObjHitCeiling
00011AA4 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011AA6 6A00                       		bpl.s	locret_101F4	; if not, branch
00011AA8 9368 000C                  		sub.w	d1,$C(a0)
00011AAC 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011AB2 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011AB6 4268 0012                  		clr.w	$12(a0)
00011ABA 4228 001C                  		clr.b	$1C(a0)
00011ABE 4228 0025                  		clr.b	$25(a0)
00011AC2                            
00011AC2                            locret_101F4:
00011AC2 4E75                       		rts	
00011AC4                            ; ===========================================================================
00011AC4                            
00011AC4                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011AC4 323C 0100                  		move.w	#$100,d1
00011AC8 08E8 0000 0022             		bset	#0,$22(a0)
00011ACE 3038 D008                  		move.w	($FFFFD008).w,d0
00011AD2 9068 0008                  		sub.w	8(a0),d0
00011AD6 6400                       		bcc.s	loc_10214
00011AD8 4440                       		neg.w	d0
00011ADA 4441                       		neg.w	d1
00011ADC 08A8 0000 0022             		bclr	#0,$22(a0)
00011AE2                            
00011AE2                            loc_10214:
00011AE2 B042                       		cmp.w	d2,d0
00011AE4 4E75                       		rts	
00011AE6                            ; ===========================================================================
00011AE6 6100 CE00                  		bsr.w	SpeedToPos
00011AEA 6100 CE16                  		bsr.w	DisplaySprite
00011AEE 4A28 0001                  		tst.b	1(a0)
00011AF2 6A00 CE5E                  		bpl.w	DeleteObject
00011AF6 4E75                       		rts	
00011AF8                            ; ===========================================================================
00011AF8                            Ani_obj55:
00011AF8                            	include "_anim\obj55.asm"
00011AF8                            ; ---------------------------------------------------------------------------
00011AF8                            ; Animation script - Basaran enemy
00011AF8                            ; ---------------------------------------------------------------------------
00011AF8 0000                       		dc.w byte_10230-Ani_obj55
00011AFA 0000                       		dc.w byte_10234-Ani_obj55
00011AFC 0000                       		dc.w byte_10238-Ani_obj55
00011AFE 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011B02 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011B06 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011B0C                            		even
00011B0C                            		even
00011B0C                            
00011B0C                            ; ---------------------------------------------------------------------------
00011B0C                            ; Sprite mappings - Basaran enemy (MZ)
00011B0C                            ; ---------------------------------------------------------------------------
00011B0C                            Map_obj55:
00011B0C                            	include "_maps\obj55.asm"
00011B0C                            ; ---------------------------------------------------------------------------
00011B0C                            ; Sprite mappings - Basaran enemy (MZ)
00011B0C                            ; ---------------------------------------------------------------------------
00011B0C 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011B10 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011B14 01                         byte_10246:	dc.b 1
00011B15 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011B1A 03                         byte_1024C:	dc.b 3
00011B1B F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011B20 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011B25 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011B2A 04                         byte_1025C:	dc.b 4
00011B2B F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011B30 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011B35 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011B3A 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011B3F 04                         byte_10271:	dc.b 4
00011B40 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011B45 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011B4A 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011B4F FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011B54                            		even
00011B54                            		even
00011B54                            
00011B54                            ; ===========================================================================
00011B54                            ; ---------------------------------------------------------------------------
00011B54                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011B54                            ; ---------------------------------------------------------------------------
00011B54                            
00011B54                            Obj56:					; XREF: Obj_Index
00011B54 7000                       		moveq	#0,d0
00011B56 1028 0024                  		move.b	$24(a0),d0
00011B5A 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011B5E 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011B62                            ; ===========================================================================
00011B62 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011B64 0000                       		dc.w Obj56_Action-Obj56_Index
00011B66                            
00011B66 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011B68 2020                       		dc.b  $20, $20
00011B6A 1020                       		dc.b  $10, $20
00011B6C 201A                       		dc.b  $20, $1A
00011B6E 1027                       		dc.b  $10, $27
00011B70 1010                       		dc.b  $10, $10
00011B72 0820                       		dc.b	8, $20
00011B74 4010                       		dc.b  $40, $10
00011B76                            ; ===========================================================================
00011B76                            
00011B76                            Obj56_Main:				; XREF: Obj56_Index
00011B76 5428 0024                  		addq.b	#2,$24(a0)
00011B7A 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011B82 317C 4000 0002             		move.w	#$4000,2(a0)
00011B88 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011B8E 6600                       		bne.s	loc_102C8
00011B90 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011B96                            
00011B96                            loc_102C8:
00011B96 117C 0004 0001             		move.b	#4,1(a0)
00011B9C 117C 0003 0018             		move.b	#3,$18(a0)
00011BA2 7000                       		moveq	#0,d0
00011BA4 1028 0028                  		move.b	$28(a0),d0
00011BA8 E648                       		lsr.w	#3,d0
00011BAA 0240 000E                  		andi.w	#$E,d0
00011BAE 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011BB2 115A 0019                  		move.b	(a2)+,$19(a0)
00011BB6 1152 0016                  		move.b	(a2),$16(a0)
00011BBA E248                       		lsr.w	#1,d0
00011BBC 1140 001A                  		move.b	d0,$1A(a0)
00011BC0 3168 0008 0034             		move.w	8(a0),$34(a0)
00011BC6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011BCC 7000                       		moveq	#0,d0
00011BCE 1012                       		move.b	(a2),d0
00011BD0 D040                       		add.w	d0,d0
00011BD2 3140 003A                  		move.w	d0,$3A(a0)
00011BD6 7000                       		moveq	#0,d0
00011BD8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011BDE 6700                       		beq.s	loc_10332
00011BE0 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011BE4 0240 000F                  		andi.w	#$F,d0
00011BE8 5140                       		subq.w	#8,d0
00011BEA 6500                       		bcs.s	loc_10332
00011BEC E548                       		lsl.w	#2,d0
00011BEE 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011BF2 45F2 0000                  		lea	(a2,d0.w),a2
00011BF6 4A52                       		tst.w	(a2)
00011BF8 6A00                       		bpl.s	loc_10332
00011BFA 0868 0000 0022             		bchg	#0,$22(a0)
00011C00                            
00011C00                            loc_10332:
00011C00 1028 0028                  		move.b	$28(a0),d0
00011C04 6A00                       		bpl.s	Obj56_Action
00011C06 0200 000F                  		andi.b	#$F,d0
00011C0A 1140 003C                  		move.b	d0,$3C(a0)
00011C0E 117C 0005 0028             		move.b	#5,$28(a0)
00011C14 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011C1A 6600                       		bne.s	Obj56_ChkGone
00011C1C 117C 000C 0028             		move.b	#$C,$28(a0)
00011C22 317C 0080 003A             		move.w	#$80,$3A(a0)
00011C28                            
00011C28                            Obj56_ChkGone:
00011C28 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011C2C 6700                       		beq.s	Obj56_Action		; if it's zero, don't remember object
00011C2E 3440                       		movea.w	d0,a2	; load address into a2
00011C30 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00011C34 0812 0000                  		btst	#0,(a2)
00011C38 6700                       		beq.s	Obj56_Action
00011C3A 5228 0028                  		addq.b	#1,$28(a0)
00011C3E 4268 003A                  		clr.w	$3A(a0)
00011C42                            
00011C42                            Obj56_Action:				; XREF: Obj56_Index
00011C42 3F28 0008                  		move.w	8(a0),-(sp)
00011C46 7000                       		moveq	#0,d0
00011C48 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C4C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011C50 D040                       		add.w	d0,d0
00011C52 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011C56 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011C5A 381F                       		move.w	(sp)+,d4
00011C5C 4A28 0001                  		tst.b	1(a0)
00011C60 6A00                       		bpl.s	Obj56_ChkDel
00011C62 7200                       		moveq	#0,d1
00011C64 1228 0019                  		move.b	$19(a0),d1
00011C68 0641 000B                  		addi.w	#$B,d1
00011C6C 7400                       		moveq	#0,d2
00011C6E 1428 0016                  		move.b	$16(a0),d2
00011C72 3602                       		move.w	d2,d3
00011C74 5243                       		addq.w	#1,d3
00011C76 6100 F5F8                  		bsr.w	SolidObject
00011C7A                            
00011C7A                            Obj56_ChkDel:
00011C7A 3028 0034                  		move.w	$34(a0),d0
00011C7E 0240 FF80                  		andi.w	#$FF80,d0
00011C82 3238 F700                  		move.w	($FFFFF700).w,d1
00011C86 0441 0080                  		subi.w	#$80,d1
00011C8A 0241 FF80                  		andi.w	#$FF80,d1
00011C8E 9041                       		sub.w	d1,d0
00011C90 0C40 0280                  		cmpi.w	#$280,d0
00011C94 6300 CC6C                  		bls.w	DisplaySprite
00011C98 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011C9C 6700 CCB4                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00011CA0 3440                       		movea.w	d0,a2	; load address into a2
00011CA2 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00011CA6 6000 CCAA                  		bra.w	DeleteObject
00011CAA                            ; ===========================================================================
00011CAA 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011CAE 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011CB2 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011CB6 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011CBA 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011CBE 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011CC2 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011CC6                            ; ===========================================================================
00011CC6                            
00011CC6                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011CC6 4E75                       		rts	
00011CC8                            ; ===========================================================================
00011CC8                            
00011CC8                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011CC8 323C 0040                  		move.w	#$40,d1
00011CCC 7000                       		moveq	#0,d0
00011CCE 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011CD2 6000                       		bra.s	Obj56_Move_LR
00011CD4                            ; ===========================================================================
00011CD4                            
00011CD4                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011CD4 323C 0080                  		move.w	#$80,d1
00011CD8 7000                       		moveq	#0,d0
00011CDA 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011CDE                            
00011CDE                            Obj56_Move_LR:
00011CDE 0828 0000 0022             		btst	#0,$22(a0)
00011CE4 6700                       		beq.s	loc_10416
00011CE6 4440                       		neg.w	d0
00011CE8 D041                       		add.w	d1,d0
00011CEA                            
00011CEA                            loc_10416:
00011CEA 3228 0034                  		move.w	$34(a0),d1
00011CEE 9240                       		sub.w	d0,d1
00011CF0 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011CF4 4E75                       		rts	
00011CF6                            ; ===========================================================================
00011CF6                            
00011CF6                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011CF6 323C 0040                  		move.w	#$40,d1
00011CFA 7000                       		moveq	#0,d0
00011CFC 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011D00 6000                       		bra.s	Obj56_Move_UD
00011D02                            ; ===========================================================================
00011D02                            
00011D02                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011D02 323C 0080                  		move.w	#$80,d1
00011D06 7000                       		moveq	#0,d0
00011D08 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011D0C                            
00011D0C                            Obj56_Move_UD:
00011D0C 0828 0000 0022             		btst	#0,$22(a0)
00011D12 6700                       		beq.s	loc_10444
00011D14 4440                       		neg.w	d0
00011D16 D041                       		add.w	d1,d0
00011D18                            
00011D18                            loc_10444:
00011D18 3228 0030                  		move.w	$30(a0),d1
00011D1C 9240                       		sub.w	d0,d1
00011D1E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011D22 4E75                       		rts	
00011D24                            ; ===========================================================================
00011D24                            
00011D24                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011D24 4A28 0038                  		tst.b	$38(a0)
00011D28 6600                       		bne.s	loc_104A4
00011D2A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011D30 6600                       		bne.s	loc_1047A	; if not, branch
00011D32 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00011D38 6600                       		bne.s	loc_1047A
00011D3A 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011D3E 3038 D008                  		move.w	($FFFFD008).w,d0
00011D42 B068 0008                  		cmp.w	8(a0),d0
00011D46 6400                       		bcc.s	loc_1047A
00011D48 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00011D4E                            
00011D4E                            loc_1047A:
00011D4E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011D52 7000                       		moveq	#0,d0
00011D54 1028 003C                  		move.b	$3C(a0),d0
00011D58 0832 0000 0000             		btst	#0,(a2,d0.w)
00011D5E 6700                       		beq.s	loc_104AE
00011D60 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011D66 6600                       		bne.s	loc_1049E	; if not, branch
00011D68 0C00 0003                  		cmpi.b	#3,d0
00011D6C 6600                       		bne.s	loc_1049E
00011D6E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011D72                            
00011D72                            loc_1049E:
00011D72 117C 0001 0038             		move.b	#1,$38(a0)
00011D78                            
00011D78                            loc_104A4:
00011D78 4A68 003A                  		tst.w	$3A(a0)
00011D7C 6700                       		beq.s	loc_104C8
00011D7E 5568 003A                  		subq.w	#2,$3A(a0)
00011D82                            
00011D82                            loc_104AE:
00011D82 3028 003A                  		move.w	$3A(a0),d0
00011D86 0828 0000 0022             		btst	#0,$22(a0)
00011D8C 6700                       		beq.s	loc_104BC
00011D8E 4440                       		neg.w	d0
00011D90                            
00011D90                            loc_104BC:
00011D90 3228 0030                  		move.w	$30(a0),d1
00011D94 D240                       		add.w	d0,d1
00011D96 3141 000C                  		move.w	d1,$C(a0)
00011D9A 4E75                       		rts	
00011D9C                            ; ===========================================================================
00011D9C                            
00011D9C                            loc_104C8:
00011D9C 5228 0028                  		addq.b	#1,$28(a0)
00011DA0 4228 0038                  		clr.b	$38(a0)
00011DA4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011DA8 67D8                       		beq.s	loc_104AE		; if it's zero, don't remember object
00011DAA 3440                       		movea.w	d0,a2	; load address into a2
00011DAC 08D2 0000                  		bset	#0,(a2)
00011DB0 60D0                       		bra.s	loc_104AE
00011DB2                            ; ===========================================================================
00011DB2                            
00011DB2                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011DB2 4A28 0038                  		tst.b	$38(a0)
00011DB6 6600                       		bne.s	loc_10500
00011DB8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011DBC 7000                       		moveq	#0,d0
00011DBE 1028 003C                  		move.b	$3C(a0),d0
00011DC2 4A32 0000                  		tst.b	(a2,d0.w)
00011DC6 6A00                       		bpl.s	loc_10512
00011DC8 117C 0001 0038             		move.b	#1,$38(a0)
00011DCE                            
00011DCE                            loc_10500:
00011DCE 7000                       		moveq	#0,d0
00011DD0 1028 0016                  		move.b	$16(a0),d0
00011DD4 D040                       		add.w	d0,d0
00011DD6 B068 003A                  		cmp.w	$3A(a0),d0
00011DDA 6700                       		beq.s	loc_1052C
00011DDC 5468 003A                  		addq.w	#2,$3A(a0)
00011DE0                            
00011DE0                            loc_10512:
00011DE0 3028 003A                  		move.w	$3A(a0),d0
00011DE4 0828 0000 0022             		btst	#0,$22(a0)
00011DEA 6700                       		beq.s	loc_10520
00011DEC 4440                       		neg.w	d0
00011DEE                            
00011DEE                            loc_10520:
00011DEE 3228 0030                  		move.w	$30(a0),d1
00011DF2 D240                       		add.w	d0,d1
00011DF4 3141 000C                  		move.w	d1,$C(a0)
00011DF8 4E75                       		rts	
00011DFA                            ; ===========================================================================
00011DFA                            
00011DFA                            loc_1052C:
00011DFA 5328 0028                  		subq.b	#1,$28(a0)
00011DFE 4228 0038                  		clr.b	$38(a0)
00011E02 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011E06 67D8                       		beq.s	loc_10512		; if it's zero, don't remember object
00011E08 3440                       		movea.w	d0,a2	; load address into a2
00011E0A 0892 0000                  		bclr	#0,(a2)
00011E0E 60D0                       		bra.s	loc_10512
00011E10                            ; ===========================================================================
00011E10                            
00011E10                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011E10 4A28 0038                  		tst.b	$38(a0)
00011E14 6600                       		bne.s	loc_1055E
00011E16 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011E1A 6700                       		beq.s	locret_10578
00011E1C 117C 0001 0038             		move.b	#1,$38(a0)
00011E22 4268 003A                  		clr.w	$3A(a0)
00011E26                            
00011E26                            loc_1055E:
00011E26 5268 0008                  		addq.w	#1,8(a0)
00011E2A 3168 0008 0034             		move.w	8(a0),$34(a0)
00011E30 5268 003A                  		addq.w	#1,$3A(a0)
00011E34 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00011E3A 6600                       		bne.s	locret_10578
00011E3C 4228 0028                  		clr.b	$28(a0)
00011E40                            
00011E40                            locret_10578:
00011E40 4E75                       		rts	
00011E42                            ; ===========================================================================
00011E42                            
00011E42                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00011E42 4A28 0038                  		tst.b	$38(a0)
00011E46 6600                       		bne.s	loc_10598
00011E48 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011E4C 7000                       		moveq	#0,d0
00011E4E 1028 003C                  		move.b	$3C(a0),d0
00011E52 0832 0000 0000             		btst	#0,(a2,d0.w)
00011E58 6700                       		beq.s	loc_105A2
00011E5A 117C 0001 0038             		move.b	#1,$38(a0)
00011E60                            
00011E60                            loc_10598:
00011E60 4A68 003A                  		tst.w	$3A(a0)
00011E64 6700                       		beq.s	loc_105C0
00011E66 5568 003A                  		subq.w	#2,$3A(a0)
00011E6A                            
00011E6A                            loc_105A2:
00011E6A 3028 003A                  		move.w	$3A(a0),d0
00011E6E 0828 0000 0022             		btst	#0,$22(a0)
00011E74 6700                       		beq.s	loc_105B4
00011E76 4440                       		neg.w	d0
00011E78 0640 0080                  		addi.w	#$80,d0
00011E7C                            
00011E7C                            loc_105B4:
00011E7C 3228 0034                  		move.w	$34(a0),d1
00011E80 D240                       		add.w	d0,d1
00011E82 3141 0008                  		move.w	d1,8(a0)
00011E86 4E75                       		rts	
00011E88                            ; ===========================================================================
00011E88                            
00011E88                            loc_105C0:
00011E88 5228 0028                  		addq.b	#1,$28(a0)
00011E8C 4228 0038                  		clr.b	$38(a0)
00011E90 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011E94 67D4                       		beq.s	loc_105A2		; if it's zero, don't remember object
00011E96 3440                       		movea.w	d0,a2	; load address into a2
00011E98 08D2 0000                  		bset	#0,(a2)
00011E9C 60CC                       		bra.s	loc_105A2
00011E9E                            ; ===========================================================================
00011E9E                            
00011E9E                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011E9E 4A28 0038                  		tst.b	$38(a0)
00011EA2 6600                       		bne.s	loc_105F8
00011EA4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011EA8 7000                       		moveq	#0,d0
00011EAA 1028 003C                  		move.b	$3C(a0),d0
00011EAE 4A32 0000                  		tst.b	(a2,d0.w)
00011EB2 6A00                       		bpl.s	loc_10606
00011EB4 117C 0001 0038             		move.b	#1,$38(a0)
00011EBA                            
00011EBA                            loc_105F8:
00011EBA 303C 0080                  		move.w	#$80,d0
00011EBE B068 003A                  		cmp.w	$3A(a0),d0
00011EC2 6700                       		beq.s	loc_10624
00011EC4 5468 003A                  		addq.w	#2,$3A(a0)
00011EC8                            
00011EC8                            loc_10606:
00011EC8 3028 003A                  		move.w	$3A(a0),d0
00011ECC 0828 0000 0022             		btst	#0,$22(a0)
00011ED2 6700                       		beq.s	loc_10618
00011ED4 4440                       		neg.w	d0
00011ED6 0640 0080                  		addi.w	#$80,d0
00011EDA                            
00011EDA                            loc_10618:
00011EDA 3228 0034                  		move.w	$34(a0),d1
00011EDE D240                       		add.w	d0,d1
00011EE0 3141 0008                  		move.w	d1,8(a0)
00011EE4 4E75                       		rts	
00011EE6                            ; ===========================================================================
00011EE6                            
00011EE6                            loc_10624:
00011EE6 5328 0028                  		subq.b	#1,$28(a0)
00011EEA 4228 0038                  		clr.b	$38(a0)
00011EEE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011EF2 67D4                       		beq.s	loc_10606		; if it's zero, don't remember object
00011EF4 3440                       		movea.w	d0,a2	; load address into a2
00011EF6 0892 0000                  		bclr	#0,(a2)
00011EFA 60CC                       		bra.s	loc_10606
00011EFC                            ; ===========================================================================
00011EFC                            
00011EFC                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011EFC 323C 0010                  		move.w	#$10,d1
00011F00 7000                       		moveq	#0,d0
00011F02 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011F06 E248                       		lsr.w	#1,d0
00011F08 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011F0C 6000                       		bra.s	Obj56_Move_Sqr
00011F0E                            ; ===========================================================================
00011F0E                            
00011F0E                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011F0E 323C 0030                  		move.w	#$30,d1
00011F12 7000                       		moveq	#0,d0
00011F14 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011F18 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011F1C 6000                       		bra.s	Obj56_Move_Sqr
00011F1E                            ; ===========================================================================
00011F1E                            
00011F1E                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00011F1E 323C 0050                  		move.w	#$50,d1
00011F22 7000                       		moveq	#0,d0
00011F24 1038 FE90                  		move.b	($FFFFFE90).w,d0
00011F28 3638 FE92                  		move.w	($FFFFFE92).w,d3
00011F2C 6000                       		bra.s	Obj56_Move_Sqr
00011F2E                            ; ===========================================================================
00011F2E                            
00011F2E                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00011F2E 323C 0070                  		move.w	#$70,d1
00011F32 7000                       		moveq	#0,d0
00011F34 1038 FE94                  		move.b	($FFFFFE94).w,d0
00011F38 3638 FE96                  		move.w	($FFFFFE96).w,d3
00011F3C                            
00011F3C                            Obj56_Move_Sqr:
00011F3C 4A43                       		tst.w	d3
00011F3E 6600                       		bne.s	loc_1068E
00011F40 5228 0022                  		addq.b	#1,$22(a0)
00011F44 0228 0003 0022             		andi.b	#3,$22(a0)
00011F4A                            
00011F4A                            loc_1068E:
00011F4A 1428 0022                  		move.b	$22(a0),d2
00011F4E 0202 0003                  		andi.b	#3,d2
00011F52 6600                       		bne.s	loc_106AE
00011F54 9041                       		sub.w	d1,d0
00011F56 D068 0034                  		add.w	$34(a0),d0
00011F5A 3140 0008                  		move.w	d0,8(a0)
00011F5E 4441                       		neg.w	d1
00011F60 D268 0030                  		add.w	$30(a0),d1
00011F64 3141 000C                  		move.w	d1,$C(a0)
00011F68 4E75                       		rts	
00011F6A                            ; ===========================================================================
00011F6A                            
00011F6A                            loc_106AE:
00011F6A 5302                       		subq.b	#1,d2
00011F6C 6600                       		bne.s	loc_106CC
00011F6E 5341                       		subq.w	#1,d1
00011F70 9041                       		sub.w	d1,d0
00011F72 4440                       		neg.w	d0
00011F74 D068 0030                  		add.w	$30(a0),d0
00011F78 3140 000C                  		move.w	d0,$C(a0)
00011F7C 5241                       		addq.w	#1,d1
00011F7E D268 0034                  		add.w	$34(a0),d1
00011F82 3141 0008                  		move.w	d1,8(a0)
00011F86 4E75                       		rts	
00011F88                            ; ===========================================================================
00011F88                            
00011F88                            loc_106CC:
00011F88 5302                       		subq.b	#1,d2
00011F8A 6600                       		bne.s	loc_106EA
00011F8C 5341                       		subq.w	#1,d1
00011F8E 9041                       		sub.w	d1,d0
00011F90 4440                       		neg.w	d0
00011F92 D068 0034                  		add.w	$34(a0),d0
00011F96 3140 0008                  		move.w	d0,8(a0)
00011F9A 5241                       		addq.w	#1,d1
00011F9C D268 0030                  		add.w	$30(a0),d1
00011FA0 3141 000C                  		move.w	d1,$C(a0)
00011FA4 4E75                       		rts	
00011FA6                            ; ===========================================================================
00011FA6                            
00011FA6                            loc_106EA:
00011FA6 9041                       		sub.w	d1,d0
00011FA8 D068 0030                  		add.w	$30(a0),d0
00011FAC 3140 000C                  		move.w	d0,$C(a0)
00011FB0 4441                       		neg.w	d1
00011FB2 D268 0034                  		add.w	$34(a0),d1
00011FB6 3141 0008                  		move.w	d1,8(a0)
00011FBA 4E75                       		rts	
00011FBC                            ; ===========================================================================
00011FBC                            ; ---------------------------------------------------------------------------
00011FBC                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011FBC                            ; ---------------------------------------------------------------------------
00011FBC                            Map_obj56:
00011FBC                            	include "_maps\obj56.asm"
00011FBC                            ; ---------------------------------------------------------------------------
00011FBC                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011FBC                            ; ---------------------------------------------------------------------------
00011FBC 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011FC0 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011FC4 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011FC8 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011FCC 01                         byte_10710:	dc.b 1
00011FCD F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011FD2 04                         byte_10716:	dc.b 4
00011FD3 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011FD8 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011FDD 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011FE2 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011FE7 02                         byte_1072B:	dc.b 2
00011FE8 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011FED 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011FF2 04                         byte_10736:	dc.b 4
00011FF3 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011FF8 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011FFD 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012002 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012007 03                         byte_1074B:	dc.b 3
00012008 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001200D F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012012 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012017 01                         byte_1075B:	dc.b 1
00012018 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001201D 02                         byte_10761:	dc.b 2
0001201E E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012023 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012028 04                         byte_1076C:	dc.b 4
00012029 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001202E F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012033 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012038 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001203E 00                         		even
0001203E 00                         		even
0001203E                            
0001203E                            ; ===========================================================================
0001203E                            ; ---------------------------------------------------------------------------
0001203E                            ; Object 57 - spiked balls (SYZ, LZ)
0001203E                            ; ---------------------------------------------------------------------------
0001203E                            
0001203E                            Obj57:					; XREF: Obj_Index
0001203E 7000                       		moveq	#0,d0
00012040 1028 0024                  		move.b	$24(a0),d0
00012044 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00012048 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0001204C                            ; ===========================================================================
0001204C 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001204E 0000                       		dc.w Obj57_Move-Obj57_Index
00012050 0000                       		dc.w Obj57_Display-Obj57_Index
00012052                            ; ===========================================================================
00012052                            
00012052                            Obj57_Main:				; XREF: Obj57_Index
00012052 5428 0024                  		addq.b	#2,$24(a0)
00012056 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001205E 317C 03BA 0002             		move.w	#$3BA,2(a0)
00012064 117C 0004 0001             		move.b	#4,1(a0)
0001206A 117C 0004 0018             		move.b	#4,$18(a0)
00012070 117C 0008 0019             		move.b	#8,$19(a0)
00012076 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001207C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00012082 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00012088 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001208E 6600                       		bne.s	loc_107E8
00012090 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00012096 317C 0310 0002             		move.w	#$310,2(a0)
0001209C 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000120A4                            
000120A4                            loc_107E8:
000120A4 1228 0028                  		move.b	$28(a0),d1	; get object type
000120A8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000120AC 4881                       		ext.w	d1
000120AE E741                       		asl.w	#3,d1		; multiply by 8
000120B0 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000120B4 1028 0022                  		move.b	$22(a0),d0
000120B8 E418                       		ror.b	#2,d0
000120BA 0200 00C0                  		andi.b	#-$40,d0
000120BE 1140 0026                  		move.b	d0,$26(a0)
000120C2 45E8 0029                  		lea	$29(a0),a2
000120C6 1228 0028                  		move.b	$28(a0),d1	; get object type
000120CA 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000120CE 14FC 0000                  		move.b	#0,(a2)+
000120D2 3601                       		move.w	d1,d3
000120D4 E94B                       		lsl.w	#4,d3
000120D6 1143 003C                  		move.b	d3,$3C(a0)
000120DA 5341                       		subq.w	#1,d1		; set chain length (type-1)
000120DC 6500                       		bcs.s	loc_10894
000120DE 0828 0003 0028             		btst	#3,$28(a0)
000120E4 6700                       		beq.s	Obj57_MakeChain
000120E6 5341                       		subq.w	#1,d1
000120E8 6500                       		bcs.s	loc_10894
000120EA                            
000120EA                            Obj57_MakeChain:
000120EA 6100 CF6C                  		bsr.w	SingleObjLoad
000120EE 6600                       		bne.s	loc_10894
000120F0 5228 0029                  		addq.b	#1,$29(a0)
000120F4 3A09                       		move.w	a1,d5
000120F6 0445 D000                  		subi.w	#-$3000,d5
000120FA EC4D                       		lsr.w	#6,d5
000120FC 0245 007F                  		andi.w	#$7F,d5
00012100 14C5                       		move.b	d5,(a2)+
00012102 137C 0004 0024             		move.b	#4,$24(a1)
00012108 1290                       		move.b	0(a0),0(a1)
0001210A 2368 0004 0004             		move.l	4(a0),4(a1)
00012110 3368 0002 0002             		move.w	2(a0),2(a1)
00012116 1368 0001 0001             		move.b	1(a0),1(a1)
0001211C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00012122 1368 0019 0019             		move.b	$19(a0),$19(a1)
00012128 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001212E 0403 0010                  		subi.b	#$10,d3
00012132 1343 003C                  		move.b	d3,$3C(a1)
00012136 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001213C 6600                       		bne.s	loc_10890
0001213E 4A03                       		tst.b	d3
00012140 6600                       		bne.s	loc_10890
00012142 137C 0002 001A             		move.b	#2,$1A(a1)
00012148                            
00012148                            loc_10890:
00012148 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0001214C                            
0001214C                            loc_10894:
0001214C 3A08                       		move.w	a0,d5
0001214E 0445 D000                  		subi.w	#-$3000,d5
00012152 EC4D                       		lsr.w	#6,d5
00012154 0245 007F                  		andi.w	#$7F,d5
00012158 14C5                       		move.b	d5,(a2)+
0001215A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012160 6600                       		bne.s	Obj57_Move
00012162 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00012168 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001216E                            
0001216E                            Obj57_Move:				; XREF: Obj57_Index
0001216E 6100 0000                  		bsr.w	Obj57_MoveSub
00012172 6000 0000                  		bra.w	Obj57_ChkDel
00012176                            ; ===========================================================================
00012176                            
00012176                            Obj57_MoveSub:				; XREF: Obj57_Move
00012176 3028 003E                  		move.w	$3E(a0),d0
0001217A D168 0026                  		add.w	d0,$26(a0)
0001217E 1028 0026                  		move.b	$26(a0),d0
00012182 4EB9 0000 29CC             		jsr	(CalcSine).l
00012188 3428 0038                  		move.w	$38(a0),d2
0001218C 3628 003A                  		move.w	$3A(a0),d3
00012190 45E8 0029                  		lea	$29(a0),a2
00012194 7C00                       		moveq	#0,d6
00012196 1C1A                       		move.b	(a2)+,d6
00012198                            
00012198                            Obj57_MoveLoop:
00012198 7800                       		moveq	#0,d4
0001219A 181A                       		move.b	(a2)+,d4
0001219C ED4C                       		lsl.w	#6,d4
0001219E 0684 00FF D000             		addi.l	#$FFD000,d4
000121A4 2244                       		movea.l	d4,a1
000121A6 7800                       		moveq	#0,d4
000121A8 1829 003C                  		move.b	$3C(a1),d4
000121AC 2A04                       		move.l	d4,d5
000121AE C9C0                       		muls.w	d0,d4
000121B0 E084                       		asr.l	#8,d4
000121B2 CBC1                       		muls.w	d1,d5
000121B4 E085                       		asr.l	#8,d5
000121B6 D842                       		add.w	d2,d4
000121B8 DA43                       		add.w	d3,d5
000121BA 3344 000C                  		move.w	d4,$C(a1)
000121BE 3345 0008                  		move.w	d5,8(a1)
000121C2 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000121C6 4E75                       		rts	
000121C8                            ; ===========================================================================
000121C8                            
000121C8                            Obj57_ChkDel:				; XREF: Obj57_Move
000121C8 3028 003A                  		move.w	$3A(a0),d0
000121CC 0240 FF80                  		andi.w	#$FF80,d0
000121D0 3238 F700                  		move.w	($FFFFF700).w,d1
000121D4 0441 0080                  		subi.w	#$80,d1
000121D8 0241 FF80                  		andi.w	#$FF80,d1
000121DC 9041                       		sub.w	d1,d0
000121DE 0C40 0280                  		cmpi.w	#$280,d0
000121E2 6300 C71E                  		bls.w	DisplaySprite
000121E6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000121EA 6700                       		beq.s	Obj57_Delete	; if it's zero, object was placed in debug mode
000121EC 3440                       		movea.w	d0,a2	; load address into a2
000121EE 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000121F2                            ; ===========================================================================
000121F2                            
000121F2                            Obj57_Delete:				; XREF: Obj57_ChkDel
000121F2 7400                       		moveq	#0,d2
000121F4 45E8 0029                  		lea	$29(a0),a2
000121F8 141A                       		move.b	(a2)+,d2
000121FA                            
000121FA                            Obj57_DelLoop:
000121FA 7000                       		moveq	#0,d0
000121FC 101A                       		move.b	(a2)+,d0
000121FE ED48                       		lsl.w	#6,d0
00012200 0680 00FF D000             		addi.l	#$FFD000,d0
00012206 2240                       		movea.l	d0,a1
00012208 6100 C74A                  		bsr.w	DeleteObject2
0001220C 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00012210                            
00012210 4E75                       		rts	
00012212                            ; ===========================================================================
00012212                            
00012212                            Obj57_Display:				; XREF: Obj57_Index
00012212 6000 C6EE                  		bra.w	DisplaySprite
00012216                            ; ===========================================================================
00012216                            ; ---------------------------------------------------------------------------
00012216                            ; Sprite mappings - chain of spiked balls (SYZ)
00012216                            ; ---------------------------------------------------------------------------
00012216                            Map_obj57:
00012216                            	include "_maps\obj57syz.asm"
00012216                            ; ---------------------------------------------------------------------------
00012216                            ; Sprite mappings - chain of spiked balls (SYZ)
00012216                            ; ---------------------------------------------------------------------------
00012216 0000                       		dc.w byte_10958-Map_obj57
00012218 01                         byte_10958:	dc.b 1
00012219 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001221E                            		even
0001221E                            		even
0001221E                            
0001221E                            ; ---------------------------------------------------------------------------
0001221E                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001221E                            ; ---------------------------------------------------------------------------
0001221E                            Map_obj57a:
0001221E                            	include "_maps\obj57lz.asm"
0001221E                            ; ---------------------------------------------------------------------------
0001221E                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001221E                            ; ---------------------------------------------------------------------------
0001221E 0000                       		dc.w byte_10964-Map_obj57a
00012220 0000                       		dc.w byte_1096A-Map_obj57a
00012222 0000                       		dc.w byte_10970-Map_obj57a
00012224 01                         byte_10964:	dc.b 1
00012225 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001222A 01                         byte_1096A:	dc.b 1
0001222B F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00012230 01                         byte_10970:	dc.b 1
00012231 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00012236                            		even
00012236                            		even
00012236                            
00012236                            ; ===========================================================================
00012236                            ; ---------------------------------------------------------------------------
00012236                            ; Object 58 - giant spiked balls (SYZ)
00012236                            ; ---------------------------------------------------------------------------
00012236                            
00012236                            Obj58:					; XREF: Obj_Index
00012236 7000                       		moveq	#0,d0
00012238 1028 0024                  		move.b	$24(a0),d0
0001223C 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00012240 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00012244                            ; ===========================================================================
00012244 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00012246 0000                       		dc.w Obj58_Move-Obj58_Index
00012248                            ; ===========================================================================
00012248                            
00012248                            Obj58_Main:				; XREF: Obj58_Index
00012248 5428 0024                  		addq.b	#2,$24(a0)
0001224C 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00012254 317C 0396 0002             		move.w	#$396,2(a0)
0001225A 117C 0004 0001             		move.b	#4,1(a0)
00012260 117C 0004 0018             		move.b	#4,$18(a0)
00012266 117C 0018 0019             		move.b	#$18,$19(a0)
0001226C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00012272 3168 000C 0038             		move.w	$C(a0),$38(a0)
00012278 117C 0086 0020             		move.b	#$86,$20(a0)
0001227E 1228 0028                  		move.b	$28(a0),d1	; get object type
00012282 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012286 4881                       		ext.w	d1
00012288 E741                       		asl.w	#3,d1		; multiply by 8
0001228A 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001228E 1028 0022                  		move.b	$22(a0),d0
00012292 E418                       		ror.b	#2,d0
00012294 0200 00C0                  		andi.b	#$C0,d0
00012298 1140 0026                  		move.b	d0,$26(a0)
0001229C 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000122A2                            
000122A2                            Obj58_Move:				; XREF: Obj58_Index
000122A2 7000                       		moveq	#0,d0
000122A4 1028 0028                  		move.b	$28(a0),d0	; get object type
000122A8 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000122AC D040                       		add.w	d0,d0
000122AE 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000122B2 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000122B6 3028 003A                  		move.w	$3A(a0),d0
000122BA 0240 FF80                  		andi.w	#$FF80,d0
000122BE 3238 F700                  		move.w	($FFFFF700).w,d1
000122C2 0441 0080                  		subi.w	#$80,d1
000122C6 0241 FF80                  		andi.w	#$FF80,d1
000122CA 9041                       		sub.w	d1,d0
000122CC 0C40 0280                  		cmpi.w	#$280,d0
000122D0 6300 C630                  		bls.w	DisplaySprite
000122D4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000122D8 6700 C678                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000122DC 3440                       		movea.w	d0,a2	; load address into a2
000122DE 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000122E2 6000 C66E                  		bra.w	DeleteObject
000122E6                            ; ===========================================================================
000122E6 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000122E8 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000122EA 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000122EC 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000122EE                            ; ===========================================================================
000122EE                            
000122EE                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000122EE 4E75                       		rts	
000122F0                            ; ===========================================================================
000122F0                            
000122F0                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000122F0 323C 0060                  		move.w	#$60,d1
000122F4 7000                       		moveq	#0,d0
000122F6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000122FA 0828 0000 0022             		btst	#0,$22(a0)
00012300 6700                       		beq.s	loc_10A38
00012302 4440                       		neg.w	d0
00012304 D041                       		add.w	d1,d0
00012306                            
00012306                            loc_10A38:
00012306 3228 003A                  		move.w	$3A(a0),d1
0001230A 9240                       		sub.w	d0,d1
0001230C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00012310 4E75                       		rts	
00012312                            ; ===========================================================================
00012312                            
00012312                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00012312 323C 0060                  		move.w	#$60,d1
00012316 7000                       		moveq	#0,d0
00012318 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001231C 0828 0000 0022             		btst	#0,$22(a0)
00012322 6700                       		beq.s	loc_10A5C
00012324 4440                       		neg.w	d0
00012326 0640 0080                  		addi.w	#$80,d0
0001232A                            
0001232A                            loc_10A5C:
0001232A 3228 0038                  		move.w	$38(a0),d1
0001232E 9240                       		sub.w	d0,d1
00012330 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00012334 4E75                       		rts	
00012336                            ; ===========================================================================
00012336                            
00012336                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00012336 3028 003E                  		move.w	$3E(a0),d0
0001233A D168 0026                  		add.w	d0,$26(a0)
0001233E 1028 0026                  		move.b	$26(a0),d0
00012342 4EB9 0000 29CC             		jsr	(CalcSine).l
00012348 3428 0038                  		move.w	$38(a0),d2
0001234C 3628 003A                  		move.w	$3A(a0),d3
00012350 7800                       		moveq	#0,d4
00012352 1828 003C                  		move.b	$3C(a0),d4
00012356 2A04                       		move.l	d4,d5
00012358 C9C0                       		muls.w	d0,d4
0001235A E084                       		asr.l	#8,d4
0001235C CBC1                       		muls.w	d1,d5
0001235E E085                       		asr.l	#8,d5
00012360 D842                       		add.w	d2,d4
00012362 DA43                       		add.w	d3,d5
00012364 3144 000C                  		move.w	d4,$C(a0)
00012368 3145 0008                  		move.w	d5,8(a0)
0001236C 4E75                       		rts	
0001236E                            ; ===========================================================================
0001236E                            ; ---------------------------------------------------------------------------
0001236E                            ; Sprite mappings - SBZ	spiked ball on a chain
0001236E                            ; ---------------------------------------------------------------------------
0001236E                            Map_obj15b:
0001236E                            	include "_maps\obj15sbz.asm"
0001236E                            ; ---------------------------------------------------------------------------
0001236E                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001236E                            ; ---------------------------------------------------------------------------
0001236E 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00012372 0000                       		dc.w byte_10AC6-Map_obj15b
00012374 05                         byte_10AA6:	dc.b 5
00012375 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0001237A F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001237F F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00012384 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00012389 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001238E 01                         byte_10AC0:	dc.b 1
0001238F F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00012394 02                         byte_10AC6:	dc.b 2
00012395 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0001239A E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000123A0 00                         		even
000123A0 00                         		even
000123A0                            
000123A0                            ; ===========================================================================
000123A0                            ; ---------------------------------------------------------------------------
000123A0                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000123A0                            ; ---------------------------------------------------------------------------
000123A0                            
000123A0                            Obj59:					; XREF: Obj_Index
000123A0 7000                       		moveq	#0,d0
000123A2 1028 0024                  		move.b	$24(a0),d0
000123A6 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000123AA 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000123AE 3028 0032                  		move.w	$32(a0),d0
000123B2 0240 FF80                  		andi.w	#$FF80,d0
000123B6 3238 F700                  		move.w	($FFFFF700).w,d1
000123BA 0441 0080                  		subi.w	#$80,d1
000123BE 0241 FF80                  		andi.w	#$FF80,d1
000123C2 9041                       		sub.w	d1,d0
000123C4 0C40 0280                  		cmpi.w	#$280,d0
000123C8 6300 C538                  		bls.w	DisplaySprite
000123CC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000123D0 6700 C580                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000123D4 3440                       		movea.w	d0,a2	; load address into a2
000123D6 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000123DA 6000 C576                  		bra.w	DeleteObject
000123DE                            ; ===========================================================================
000123DE 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000123E0 0000                       		dc.w Obj59_Platform-Obj59_Index
000123E2 0000                       		dc.w Obj59_Action-Obj59_Index
000123E4 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000123E6                            
000123E6 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000123E8                            
000123E8 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000123EA 2001                       		dc.b $20, 1
000123EC 3401                       		dc.b $34, 1
000123EE 1003                       		dc.b $10, 3
000123F0 2003                       		dc.b $20, 3
000123F2 3403                       		dc.b $34, 3
000123F4 1401                       		dc.b $14, 1
000123F6 2401                       		dc.b $24, 1
000123F8 2C01                       		dc.b $2C, 1
000123FA 1403                       		dc.b $14, 3
000123FC 2403                       		dc.b $24, 3
000123FE 2C03                       		dc.b $2C, 3
00012400 2005                       		dc.b $20, 5
00012402 2007                       		dc.b $20, 7
00012404 3009                       		dc.b $30, 9
00012406                            ; ===========================================================================
00012406                            
00012406                            Obj59_Main:				; XREF: Obj59_Index
00012406 5428 0024                  		addq.b	#2,$24(a0)
0001240A 7000                       		moveq	#0,d0
0001240C 1028 0028                  		move.b	$28(a0),d0
00012410 6A00                       		bpl.s	Obj59_Main2
00012412 5828 0024                  		addq.b	#4,$24(a0)
00012416 0240 007F                  		andi.w	#$7F,d0
0001241A C0FC 0006                  		mulu.w	#6,d0
0001241E 3140 003C                  		move.w	d0,$3C(a0)
00012422 3140 003E                  		move.w	d0,$3E(a0)
00012426 588F                       		addq.l	#4,sp
00012428 4E75                       		rts	
0001242A                            ; ===========================================================================
0001242A                            
0001242A                            Obj59_Main2:
0001242A E648                       		lsr.w	#3,d0
0001242C 0240 001E                  		andi.w	#$1E,d0
00012430 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00012434 115A 0019                  		move.b	(a2)+,$19(a0)
00012438 115A 001A                  		move.b	(a2)+,$1A(a0)
0001243C 7000                       		moveq	#0,d0
0001243E 1028 0028                  		move.b	$28(a0),d0
00012442 D040                       		add.w	d0,d0
00012444 0240 001E                  		andi.w	#$1E,d0
00012448 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001244C 101A                       		move.b	(a2)+,d0
0001244E E548                       		lsl.w	#2,d0
00012450 3140 003C                  		move.w	d0,$3C(a0)
00012454 115A 0028                  		move.b	(a2)+,$28(a0)
00012458 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00012460 317C 4000 0002             		move.w	#$4000,2(a0)
00012466 117C 0004 0001             		move.b	#4,1(a0)
0001246C 117C 0004 0018             		move.b	#4,$18(a0)
00012472 3168 0008 0032             		move.w	8(a0),$32(a0)
00012478 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001247E                            
0001247E                            Obj59_Platform:				; XREF: Obj59_Index
0001247E 7200                       		moveq	#0,d1
00012480 1228 0019                  		move.b	$19(a0),d1
00012484 4EB9 0000 8510             		jsr	(PlatformObject).l
0001248A 6000 0000                  		bra.w	Obj59_Types
0001248E                            ; ===========================================================================
0001248E                            
0001248E                            Obj59_Action:				; XREF: Obj59_Index
0001248E 7200                       		moveq	#0,d1
00012490 1228 0019                  		move.b	$19(a0),d1
00012494 4EB9 0000 8684             		jsr	(ExitPlatform).l
0001249A 3F28 0008                  		move.w	8(a0),-(sp)
0001249E 6100 0000                  		bsr.w	Obj59_Types
000124A2 341F                       		move.w	(sp)+,d2
000124A4 4A10                       		tst.b	0(a0)
000124A6 6700                       		beq.s	locret_10BD4
000124A8 4EF9 0000 8BFA             		jmp	(MvSonicOnPtfm2).l
000124AE                            ; ===========================================================================
000124AE                            
000124AE                            locret_10BD4:
000124AE 4E75                       		rts	
000124B0                            ; ===========================================================================
000124B0                            
000124B0                            Obj59_Types:
000124B0 7000                       		moveq	#0,d0
000124B2 1028 0028                  		move.b	$28(a0),d0
000124B6 0240 000F                  		andi.w	#$F,d0
000124BA D040                       		add.w	d0,d0
000124BC 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000124C0 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000124C4                            ; ===========================================================================
000124C4 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000124C8 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000124CC 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000124D0 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000124D4 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000124D8                            ; ===========================================================================
000124D8                            
000124D8                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000124D8 4E75                       		rts	
000124DA                            ; ===========================================================================
000124DA                            
000124DA                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000124DA 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000124E0 6600                       		bne.s	locret_10C0C
000124E2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000124E6                            
000124E6                            locret_10C0C:
000124E6 4E75                       		rts	
000124E8                            ; ===========================================================================
000124E8                            
000124E8                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000124E8 6100 0000                  		bsr.w	Obj59_Move
000124EC 3028 0034                  		move.w	$34(a0),d0
000124F0 4440                       		neg.w	d0
000124F2 D068 0030                  		add.w	$30(a0),d0
000124F6 3140 000C                  		move.w	d0,$C(a0)
000124FA 4E75                       		rts	
000124FC                            ; ===========================================================================
000124FC                            
000124FC                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000124FC 6100 0000                  		bsr.w	Obj59_Move
00012500 3028 0034                  		move.w	$34(a0),d0
00012504 D068 0030                  		add.w	$30(a0),d0
00012508 3140 000C                  		move.w	d0,$C(a0)
0001250C 4E75                       		rts	
0001250E                            ; ===========================================================================
0001250E                            
0001250E                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001250E 6100 0000                  		bsr.w	Obj59_Move
00012512 3028 0034                  		move.w	$34(a0),d0
00012516 E240                       		asr.w	#1,d0
00012518 4440                       		neg.w	d0
0001251A D068 0030                  		add.w	$30(a0),d0
0001251E 3140 000C                  		move.w	d0,$C(a0)
00012522 3028 0034                  		move.w	$34(a0),d0
00012526 D068 0032                  		add.w	$32(a0),d0
0001252A 3140 0008                  		move.w	d0,8(a0)
0001252E 4E75                       		rts	
00012530                            ; ===========================================================================
00012530                            
00012530                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00012530 6100 0000                  		bsr.w	Obj59_Move
00012534 3028 0034                  		move.w	$34(a0),d0
00012538 E240                       		asr.w	#1,d0
0001253A D068 0030                  		add.w	$30(a0),d0
0001253E 3140 000C                  		move.w	d0,$C(a0)
00012542 3028 0034                  		move.w	$34(a0),d0
00012546 4440                       		neg.w	d0
00012548 D068 0032                  		add.w	$32(a0),d0
0001254C 3140 0008                  		move.w	d0,8(a0)
00012550 4E75                       		rts	
00012552                            ; ===========================================================================
00012552                            
00012552                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00012552 6100 0000                  		bsr.w	Obj59_Move
00012556 3028 0034                  		move.w	$34(a0),d0
0001255A 4440                       		neg.w	d0
0001255C D068 0030                  		add.w	$30(a0),d0
00012560 3140 000C                  		move.w	d0,$C(a0)
00012564 4A28 0028                  		tst.b	$28(a0)
00012568 6700 0000                  		beq.w	loc_10C94
0001256C 4E75                       		rts	
0001256E                            ; ===========================================================================
0001256E                            
0001256E                            loc_10C94:
0001256E 0828 0003 0022             		btst	#3,$22(a0)
00012574 6700                       		beq.s	Obj59_Delete
00012576 08E9 0001 0022             		bset	#1,$22(a1)
0001257C 08A9 0003 0022             		bclr	#3,$22(a1)
00012582 137C 0002 0024             		move.b	#2,$24(a1)
00012588                            
00012588                            Obj59_Delete:
00012588 6000 C3C8                  		bra.w	DeleteObject
0001258C                            
0001258C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001258C                            
0001258C                            
0001258C                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001258C 3028 0038                  		move.w	$38(a0),d0
00012590 4A28 003A                  		tst.b	$3A(a0)
00012594 6600                       		bne.s	loc_10CC8
00012596 0C40 0800                  		cmpi.w	#$800,d0
0001259A 6400                       		bcc.s	loc_10CD0
0001259C 0640 0010                  		addi.w	#$10,d0
000125A0 6000                       		bra.s	loc_10CD0
000125A2                            ; ===========================================================================
000125A2                            
000125A2                            loc_10CC8:
000125A2 4A40                       		tst.w	d0
000125A4 6700                       		beq.s	loc_10CD0
000125A6 0440 0010                  		subi.w	#$10,d0
000125AA                            
000125AA                            loc_10CD0:
000125AA 3140 0038                  		move.w	d0,$38(a0)
000125AE 48C0                       		ext.l	d0
000125B0 E180                       		asl.l	#8,d0
000125B2 D0A8 0034                  		add.l	$34(a0),d0
000125B6 2140 0034                  		move.l	d0,$34(a0)
000125BA 4840                       		swap	d0
000125BC 3428 003C                  		move.w	$3C(a0),d2
000125C0 B042                       		cmp.w	d2,d0
000125C2 6300                       		bls.s	loc_10CF0
000125C4 117C 0001 003A             		move.b	#1,$3A(a0)
000125CA                            
000125CA                            loc_10CF0:
000125CA D442                       		add.w	d2,d2
000125CC B042                       		cmp.w	d2,d0
000125CE 6600                       		bne.s	locret_10CFA
000125D0 4228 0028                  		clr.b	$28(a0)
000125D4                            
000125D4                            locret_10CFA:
000125D4 4E75                       		rts	
000125D6                            ; End of function Obj59_Move
000125D6                            
000125D6                            ; ===========================================================================
000125D6                            
000125D6                            Obj59_MakeMulti:			; XREF: Obj59_Index
000125D6 5368 003C                  		subq.w	#1,$3C(a0)
000125DA 6600                       		bne.s	Obj59_ChkDel
000125DC 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000125E2 6100 CA74                  		bsr.w	SingleObjLoad
000125E6 6600                       		bne.s	Obj59_ChkDel
000125E8 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000125EC 3368 0008 0008             		move.w	8(a0),8(a1)
000125F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000125F8 137C 000E 0028             		move.b	#$E,$28(a1)
000125FE                            
000125FE                            Obj59_ChkDel:
000125FE 588F                       		addq.l	#4,sp
00012600 3028 0008                  		move.w	8(a0),d0
00012604 0240 FF80                  		andi.w	#$FF80,d0
00012608 3238 F700                  		move.w	($FFFFF700).w,d1
0001260C 0441 0080                  		subi.w	#$80,d1
00012610 0241 FF80                  		andi.w	#$FF80,d1
00012614 9041                       		sub.w	d1,d0
00012616 0C40 0280                  		cmpi.w	#$280,d0
0001261A 6200 C336                  		bhi.w	DeleteObject
0001261E 4E75                       		rts	
00012620                            ; ===========================================================================
00012620                            ; ---------------------------------------------------------------------------
00012620                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012620                            ; ---------------------------------------------------------------------------
00012620                            Map_obj59:
00012620                            	include "_maps\obj59.asm"
00012620                            ; ---------------------------------------------------------------------------
00012620                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012620                            ; ---------------------------------------------------------------------------
00012620 0000                       		dc.w byte_10D4A-Map_obj59
00012622 03                         byte_10D4A:	dc.b 3
00012623 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012628 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001262D F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012632                            		even
00012632                            		even
00012632                            
00012632                            ; ===========================================================================
00012632                            ; ---------------------------------------------------------------------------
00012632                            ; Object 5A - platforms	moving in circles (SLZ)
00012632                            ; ---------------------------------------------------------------------------
00012632                            
00012632                            Obj5A:					; XREF: Obj_Index
00012632 7000                       		moveq	#0,d0
00012634 1028 0024                  		move.b	$24(a0),d0
00012638 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001263C 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00012640 3028 0032                  		move.w	$32(a0),d0
00012644 0240 FF80                  		andi.w	#$FF80,d0
00012648 3238 F700                  		move.w	($FFFFF700).w,d1
0001264C 0441 0080                  		subi.w	#$80,d1
00012650 0241 FF80                  		andi.w	#$FF80,d1
00012654 9041                       		sub.w	d1,d0
00012656 0C40 0280                  		cmpi.w	#$280,d0
0001265A 6300 C2A6                  		bls.w	DisplaySprite
0001265E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012662 6700 C2EE                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00012666 3440                       		movea.w	d0,a2	; load address into a2
00012668 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0001266C 6000 C2E4                  		bra.w	DeleteObject
00012670                            ; ===========================================================================
00012670 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00012672 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00012674 0000                       		dc.w Obj5A_Action-Obj5A_Index
00012676                            ; ===========================================================================
00012676                            
00012676                            Obj5A_Main:				; XREF: Obj5A_Index
00012676 5428 0024                  		addq.b	#2,$24(a0)
0001267A 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00012682 317C 4000 0002             		move.w	#$4000,2(a0)
00012688 117C 0004 0001             		move.b	#4,1(a0)
0001268E 117C 0004 0018             		move.b	#4,$18(a0)
00012694 117C 0018 0019             		move.b	#$18,$19(a0)
0001269A 3168 0008 0032             		move.w	8(a0),$32(a0)
000126A0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000126A6                            
000126A6                            Obj5A_Platform:				; XREF: Obj5A_Index
000126A6 7200                       		moveq	#0,d1
000126A8 1228 0019                  		move.b	$19(a0),d1
000126AC 4EB9 0000 8510             		jsr	(PlatformObject).l
000126B2 6000 0000                  		bra.w	Obj5A_Types
000126B6                            ; ===========================================================================
000126B6                            
000126B6                            Obj5A_Action:				; XREF: Obj5A_Index
000126B6 7200                       		moveq	#0,d1
000126B8 1228 0019                  		move.b	$19(a0),d1
000126BC 4EB9 0000 8684             		jsr	(ExitPlatform).l
000126C2 3F28 0008                  		move.w	8(a0),-(sp)
000126C6 6100 0000                  		bsr.w	Obj5A_Types
000126CA 341F                       		move.w	(sp)+,d2
000126CC 4EF9 0000 8BFA             		jmp	(MvSonicOnPtfm2).l
000126D2                            ; ===========================================================================
000126D2                            
000126D2                            Obj5A_Types:
000126D2 7000                       		moveq	#0,d0
000126D4 1028 0028                  		move.b	$28(a0),d0
000126D8 0240 000C                  		andi.w	#$C,d0
000126DC E248                       		lsr.w	#1,d0
000126DE 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000126E2 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000126E6                            ; ===========================================================================
000126E6 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000126E8 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000126EA                            ; ===========================================================================
000126EA                            
000126EA                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000126EA 1238 FE80                  		move.b	($FFFFFE80).w,d1
000126EE 0401 0050                  		subi.b	#$50,d1
000126F2 4881                       		ext.w	d1
000126F4 1438 FE84                  		move.b	($FFFFFE84).w,d2
000126F8 0402 0050                  		subi.b	#$50,d2
000126FC 4882                       		ext.w	d2
000126FE 0828 0000 0028             		btst	#0,$28(a0)
00012704 6700                       		beq.s	loc_10E24
00012706 4441                       		neg.w	d1
00012708 4442                       		neg.w	d2
0001270A                            
0001270A                            loc_10E24:
0001270A 0828 0001 0028             		btst	#1,$28(a0)
00012710 6700                       		beq.s	loc_10E30
00012712 4441                       		neg.w	d1
00012714 C342                       		exg	d1,d2
00012716                            
00012716                            loc_10E30:
00012716 D268 0032                  		add.w	$32(a0),d1
0001271A 3141 0008                  		move.w	d1,8(a0)
0001271E D468 0030                  		add.w	$30(a0),d2
00012722 3142 000C                  		move.w	d2,$C(a0)
00012726 4E75                       		rts	
00012728                            ; ===========================================================================
00012728                            
00012728                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00012728 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001272C 0401 0050                  		subi.b	#$50,d1
00012730 4881                       		ext.w	d1
00012732 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012736 0402 0050                  		subi.b	#$50,d2
0001273A 4882                       		ext.w	d2
0001273C 0828 0000 0028             		btst	#0,$28(a0)
00012742 6700                       		beq.s	loc_10E62
00012744 4441                       		neg.w	d1
00012746 4442                       		neg.w	d2
00012748                            
00012748                            loc_10E62:
00012748 0828 0001 0028             		btst	#1,$28(a0)
0001274E 6700                       		beq.s	loc_10E6E
00012750 4441                       		neg.w	d1
00012752 C342                       		exg	d1,d2
00012754                            
00012754                            loc_10E6E:
00012754 4441                       		neg.w	d1
00012756 D268 0032                  		add.w	$32(a0),d1
0001275A 3141 0008                  		move.w	d1,8(a0)
0001275E D468 0030                  		add.w	$30(a0),d2
00012762 3142 000C                  		move.w	d2,$C(a0)
00012766 4E75                       		rts	
00012768                            ; ===========================================================================
00012768                            ; ---------------------------------------------------------------------------
00012768                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012768                            ; ---------------------------------------------------------------------------
00012768                            Map_obj5A:
00012768                            	include "_maps\obj5A.asm"
00012768                            ; ---------------------------------------------------------------------------
00012768                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012768                            ; ---------------------------------------------------------------------------
00012768 0000                       		dc.w byte_10E84-Map_obj5A
0001276A 02                         byte_10E84:	dc.b 2
0001276B F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00012770 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012776 00                         		even
00012776 00                         		even
00012776                            
00012776                            ; ===========================================================================
00012776                            ; ---------------------------------------------------------------------------
00012776                            ; Object 5B - blocks that form a staircase (SLZ)
00012776                            ; ---------------------------------------------------------------------------
00012776                            
00012776                            Obj5B:					; XREF: Obj_Index
00012776 7000                       		moveq	#0,d0
00012778 1028 0024                  		move.b	$24(a0),d0
0001277C 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00012780 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00012784 3028 0030                  		move.w	$30(a0),d0
00012788 0240 FF80                  		andi.w	#$FF80,d0
0001278C 3238 F700                  		move.w	($FFFFF700).w,d1
00012790 0441 0080                  		subi.w	#$80,d1
00012794 0241 FF80                  		andi.w	#$FF80,d1
00012798 9041                       		sub.w	d1,d0
0001279A 0C40 0280                  		cmpi.w	#$280,d0
0001279E 6300 C162                  		bls.w	DisplaySprite
000127A2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000127A6 6700 C1AA                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000127AA 3440                       		movea.w	d0,a2	; load address into a2
000127AC 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000127B0 6000 C1A0                  		bra.w	DeleteObject
000127B4                            ; ===========================================================================
000127B4 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000127B6 0000                       		dc.w Obj5B_Move-Obj5B_Index
000127B8 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000127BA                            ; ===========================================================================
000127BA                            
000127BA                            Obj5B_Main:				; XREF: Obj5B_Index
000127BA 5428 0024                  		addq.b	#2,$24(a0)
000127BE 7638                       		moveq	#$38,d3
000127C0 7801                       		moveq	#1,d4
000127C2 0828 0000 0022             		btst	#0,$22(a0)
000127C8 6700                       		beq.s	loc_10EDA
000127CA 763B                       		moveq	#$3B,d3
000127CC 78FF                       		moveq	#-1,d4
000127CE                            
000127CE                            loc_10EDA:
000127CE 3428 0008                  		move.w	8(a0),d2
000127D2 2248                       		movea.l	a0,a1
000127D4 7203                       		moveq	#3,d1
000127D6 6000                       		bra.s	Obj5B_MakeBlocks
000127D8                            ; ===========================================================================
000127D8                            
000127D8                            Obj5B_Loop:
000127D8 6100 C894                  		bsr.w	SingleObjLoad2
000127DC 6600 0000                  		bne.w	Obj5B_Move
000127E0 137C 0004 0024             		move.b	#4,$24(a1)
000127E6                            
000127E6                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000127E6 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000127EA 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000127F2 337C 4000 0002             		move.w	#$4000,2(a1)
000127F8 137C 0004 0001             		move.b	#4,1(a1)
000127FE 137C 0003 0018             		move.b	#3,$18(a1)
00012804 137C 0010 0019             		move.b	#$10,$19(a1)
0001280A 1368 0028 0028             		move.b	$28(a0),$28(a1)
00012810 3342 0008                  		move.w	d2,8(a1)
00012814 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001281A 3368 0008 0030             		move.w	8(a0),$30(a1)
00012820 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012826 0642 0020                  		addi.w	#$20,d2
0001282A 1343 0037                  		move.b	d3,$37(a1)
0001282E 2348 003C                  		move.l	a0,$3C(a1)
00012832 D604                       		add.b	d4,d3
00012834 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012838                            
00012838                            Obj5B_Move:				; XREF: Obj5B_Index
00012838 7000                       		moveq	#0,d0
0001283A 1028 0028                  		move.b	$28(a0),d0
0001283E 0240 0007                  		andi.w	#7,d0
00012842 D040                       		add.w	d0,d0
00012844 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012848 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001284C                            
0001284C                            Obj5B_Solid:				; XREF: Obj5B_Index
0001284C 2468 003C                  		movea.l	$3C(a0),a2
00012850 7000                       		moveq	#0,d0
00012852 1028 0037                  		move.b	$37(a0),d0
00012856 1032 0000                  		move.b	(a2,d0.w),d0
0001285A D068 0032                  		add.w	$32(a0),d0
0001285E 3140 000C                  		move.w	d0,$C(a0)
00012862 7200                       		moveq	#0,d1
00012864 1228 0019                  		move.b	$19(a0),d1
00012868 0641 000B                  		addi.w	#$B,d1
0001286C 343C 0010                  		move.w	#$10,d2
00012870 363C 0011                  		move.w	#$11,d3
00012874 3828 0008                  		move.w	8(a0),d4
00012878 6100 E9F6                  		bsr.w	SolidObject
0001287C 4A04                       		tst.b	d4
0001287E 6A00                       		bpl.s	loc_10F92
00012880 1544 0036                  		move.b	d4,$36(a2)
00012884                            
00012884                            loc_10F92:
00012884 0828 0003 0022             		btst	#3,$22(a0)
0001288A 6700                       		beq.s	locret_10FA0
0001288C 157C 0001 0036             		move.b	#1,$36(a2)
00012892                            
00012892                            locret_10FA0:
00012892 4E75                       		rts	
00012894                            ; ===========================================================================
00012894 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00012896 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012898 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001289A 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001289C                            ; ===========================================================================
0001289C                            
0001289C                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001289C 4A68 0034                  		tst.w	$34(a0)
000128A0 6600                       		bne.s	loc_10FC0
000128A2 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000128A8 6600                       		bne.s	locret_10FBE
000128AA 317C 001E 0034             		move.w	#$1E,$34(a0)
000128B0                            
000128B0                            locret_10FBE:
000128B0 4E75                       		rts	
000128B2                            ; ===========================================================================
000128B2                            
000128B2                            loc_10FC0:
000128B2 5368 0034                  		subq.w	#1,$34(a0)
000128B6 66F8                       		bne.s	locret_10FBE
000128B8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000128BC 4E75                       		rts	
000128BE                            ; ===========================================================================
000128BE                            
000128BE                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000128BE 4A68 0034                  		tst.w	$34(a0)
000128C2 6600                       		bne.s	loc_10FE0
000128C4 4A28 0036                  		tst.b	$36(a0)
000128C8 6A00                       		bpl.s	locret_10FDE
000128CA 317C 003C 0034             		move.w	#$3C,$34(a0)
000128D0                            
000128D0                            locret_10FDE:
000128D0 4E75                       		rts	
000128D2                            ; ===========================================================================
000128D2                            
000128D2                            loc_10FE0:
000128D2 5368 0034                  		subq.w	#1,$34(a0)
000128D6 6600                       		bne.s	loc_10FEC
000128D8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000128DC 4E75                       		rts	
000128DE                            ; ===========================================================================
000128DE                            
000128DE                            loc_10FEC:
000128DE 43E8 0038                  		lea	$38(a0),a1
000128E2 3028 0034                  		move.w	$34(a0),d0
000128E6 E408                       		lsr.b	#2,d0
000128E8 0200 0001                  		andi.b	#1,d0
000128EC 12C0                       		move.b	d0,(a1)+
000128EE 0A00 0001                  		eori.b	#1,d0
000128F2 12C0                       		move.b	d0,(a1)+
000128F4 0A00 0001                  		eori.b	#1,d0
000128F8 12C0                       		move.b	d0,(a1)+
000128FA 0A00 0001                  		eori.b	#1,d0
000128FE 12C0                       		move.b	d0,(a1)+
00012900 4E75                       		rts	
00012902                            ; ===========================================================================
00012902                            
00012902                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00012902 43E8 0038                  		lea	$38(a0),a1
00012906 0C11 0080                  		cmpi.b	#$80,(a1)
0001290A 6700                       		beq.s	locret_11038
0001290C 5211                       		addq.b	#1,(a1)
0001290E 7200                       		moveq	#0,d1
00012910 1219                       		move.b	(a1)+,d1
00012912 4841                       		swap	d1
00012914 E289                       		lsr.l	#1,d1
00012916 2401                       		move.l	d1,d2
00012918 E289                       		lsr.l	#1,d1
0001291A 2601                       		move.l	d1,d3
0001291C D682                       		add.l	d2,d3
0001291E 4841                       		swap	d1
00012920 4842                       		swap	d2
00012922 4843                       		swap	d3
00012924 12C3                       		move.b	d3,(a1)+
00012926 12C2                       		move.b	d2,(a1)+
00012928 12C1                       		move.b	d1,(a1)+
0001292A                            
0001292A                            locret_11038:
0001292A 4E75                       		rts	
0001292C 4E75                       		rts	
0001292E                            ; ===========================================================================
0001292E                            ; ---------------------------------------------------------------------------
0001292E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001292E                            ; ---------------------------------------------------------------------------
0001292E                            Map_obj5B:
0001292E                            	include "_maps\obj5B.asm"
0001292E                            ; ---------------------------------------------------------------------------
0001292E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001292E                            ; ---------------------------------------------------------------------------
0001292E 0000                       		dc.w byte_1103E-Map_obj5B
00012930 01                         byte_1103E:	dc.b 1
00012931 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012936                            		even
00012936                            		even
00012936                            
00012936                            ; ===========================================================================
00012936                            ; ---------------------------------------------------------------------------
00012936                            ; Object 5C - metal girders in foreground (SLZ)
00012936                            ; ---------------------------------------------------------------------------
00012936                            
00012936                            Obj5C:					; XREF: Obj_Index
00012936 7000                       		moveq	#0,d0
00012938 1028 0024                  		move.b	$24(a0),d0
0001293C 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00012940 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012944                            ; ===========================================================================
00012944 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012946 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012948                            ; ===========================================================================
00012948                            
00012948                            Obj5C_Main:				; XREF: Obj5C_Index
00012948 5428 0024                  		addq.b	#2,$24(a0)
0001294C 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012954 317C 83CC 0002             		move.w	#$83CC,2(a0)
0001295A 117C 0010 0019             		move.b	#$10,$19(a0)
00012960                            
00012960                            Obj5C_Display:				; XREF: Obj5C_Index
00012960 2238 F700                  		move.l	($FFFFF700).w,d1
00012964 D281                       		add.l	d1,d1
00012966 4841                       		swap	d1
00012968 4441                       		neg.w	d1
0001296A 3141 0008                  		move.w	d1,8(a0)
0001296E 2238 F704                  		move.l	($FFFFF704).w,d1
00012972 D281                       		add.l	d1,d1
00012974 4841                       		swap	d1
00012976 0241 003F                  		andi.w	#$3F,d1
0001297A 4441                       		neg.w	d1
0001297C 0641 0100                  		addi.w	#$100,d1
00012980 3141 000A                  		move.w	d1,$A(a0)
00012984 6000 BF7C                  		bra.w	DisplaySprite
00012988                            ; ===========================================================================
00012988                            ; ---------------------------------------------------------------------------
00012988                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012988                            ; ---------------------------------------------------------------------------
00012988                            Map_obj5C:
00012988                            	include "_maps\obj5C.asm"
00012988                            ; ---------------------------------------------------------------------------
00012988                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012988                            ; ---------------------------------------------------------------------------
00012988 0000                       		dc.w byte_11098-Map_obj5C
0001298A 09                         byte_11098:	dc.b 9
0001298B 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00012990 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00012995 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001299A E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001299F 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000129A4 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000129A9 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000129AE 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000129B3 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000129B8                            		even
000129B8                            		even
000129B8                            
000129B8                            ; ===========================================================================
000129B8                            ; ---------------------------------------------------------------------------
000129B8                            ; Object 1B - water surface (LZ)
000129B8                            ; ---------------------------------------------------------------------------
000129B8                            
000129B8                            Obj1B:					; XREF: Obj_Index
000129B8 7000                       		moveq	#0,d0
000129BA 1028 0024                  		move.b	$24(a0),d0
000129BE 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000129C2 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000129C6                            ; ===========================================================================
000129C6 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000129C8 0000                       		dc.w Obj1B_Action-Obj1B_Index
000129CA                            ; ===========================================================================
000129CA                            
000129CA                            Obj1B_Main:				; XREF: Obj1B_Index
000129CA 5428 0024                  		addq.b	#2,$24(a0)
000129CE 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
000129D6 317C C300 0002             		move.w	#$C300,2(a0)
000129DC 117C 0004 0001             		move.b	#4,1(a0)
000129E2 117C 0080 0019             		move.b	#$80,$19(a0)
000129E8 3168 0008 0030             		move.w	8(a0),$30(a0)
000129EE                            
000129EE                            Obj1B_Action:				; XREF: Obj1B_Index
000129EE 3238 F700                  		move.w	($FFFFF700).w,d1
000129F2 0241 FFE0                  		andi.w	#$FFE0,d1
000129F6 D268 0030                  		add.w	$30(a0),d1
000129FA 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012A00 6700                       		beq.s	loc_11114
00012A02 0641 0020                  		addi.w	#$20,d1
00012A06                            
00012A06                            loc_11114:
00012A06 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012A0A 3238 F646                  		move.w	($FFFFF646).w,d1
00012A0E 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012A12 4A28 0032                  		tst.b	$32(a0)
00012A16 6600                       		bne.s	Obj1B_Animate
00012A18 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012A1E 6700                       		beq.s	loc_1114A	; if not, branch
00012A20 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012A24 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012A2A 6000                       		bra.s	Obj1B_Display
00012A2C                            ; ===========================================================================
00012A2C                            
00012A2C                            Obj1B_Animate:				; XREF: loc_11114
00012A2C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012A30 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012A32 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012A38 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012A3C                            
00012A3C                            loc_1114A:				; XREF: loc_11114
00012A3C 5328 001E                  		subq.b	#1,$1E(a0)
00012A40 6A00                       		bpl.s	Obj1B_Display
00012A42 117C 0007 001E             		move.b	#7,$1E(a0)
00012A48 5228 001A                  		addq.b	#1,$1A(a0)
00012A4C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012A52 6500                       		bcs.s	Obj1B_Display
00012A54 117C 0000 001A             		move.b	#0,$1A(a0)
00012A5A                            
00012A5A                            Obj1B_Display:
00012A5A 6000 BEA6                  		bra.w	DisplaySprite
00012A5E                            ; ===========================================================================
00012A5E                            ; ---------------------------------------------------------------------------
00012A5E                            ; Sprite mappings - water surface (LZ)
00012A5E                            ; ---------------------------------------------------------------------------
00012A5E                            Map_obj1B:
00012A5E                            	include "_maps\obj1B.asm"
00012A5E                            ; ---------------------------------------------------------------------------
00012A5E                            ; Sprite mappings - water surface (LZ)
00012A5E                            ; ---------------------------------------------------------------------------
00012A5E 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012A62 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012A66 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012A6A 03                         byte_11178:	dc.b 3
00012A6B FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012A70 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012A75 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012A7A 03                         byte_11188:	dc.b 3
00012A7B FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012A80 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012A85 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012A8A 03                         byte_11198:	dc.b 3
00012A8B FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012A90 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012A95 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012A9A 06                         byte_111A8:	dc.b 6
00012A9B FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012AA0 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012AA5 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012AAA FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012AAF FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012AB4 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012AB9 06                         byte_111C7:	dc.b 6
00012ABA FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012ABF FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012AC4 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012AC9 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012ACE FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012AD3 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012AD8 06                         byte_111E6:	dc.b 6
00012AD9 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012ADE FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012AE3 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012AE8 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012AED FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012AF2 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012AF8 00                         		even
00012AF8 00                         		even
00012AF8                            
00012AF8                            ; ===========================================================================
00012AF8                            ; ---------------------------------------------------------------------------
00012AF8                            ; Object 0B - pole that	breaks (LZ)
00012AF8                            ; ---------------------------------------------------------------------------
00012AF8                            
00012AF8                            Obj0B:					; XREF: Obj_Index
00012AF8 7000                       		moveq	#0,d0
00012AFA 1028 0024                  		move.b	$24(a0),d0
00012AFE 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012B02 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012B06                            ; ===========================================================================
00012B06 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012B08 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012B0A 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012B0C                            ; ===========================================================================
00012B0C                            
00012B0C                            Obj0B_Main:				; XREF: Obj0B_Index
00012B0C 5428 0024                  		addq.b	#2,$24(a0)
00012B10 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012B18 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012B1E 117C 0004 0001             		move.b	#4,1(a0)
00012B24 117C 0008 0019             		move.b	#8,$19(a0)
00012B2A 117C 0004 0018             		move.b	#4,$18(a0)
00012B30 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012B36 7000                       		moveq	#0,d0
00012B38 1028 0028                  		move.b	$28(a0),d0	; get object type
00012B3C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012B40 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012B44                            
00012B44                            Obj0B_Action:				; XREF: Obj0B_Index
00012B44 4A28 0032                  		tst.b	$32(a0)
00012B48 6700                       		beq.s	Obj0B_Grab
00012B4A 4A68 0030                  		tst.w	$30(a0)
00012B4E 6700                       		beq.s	Obj0B_MoveUp
00012B50 5368 0030                  		subq.w	#1,$30(a0)
00012B54 6600                       		bne.s	Obj0B_MoveUp
00012B56 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012B5C 6000                       		bra.s	Obj0B_Release
00012B5E                            ; ===========================================================================
00012B5E                            
00012B5E                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012B5E 43F8 D000                  		lea	($FFFFD000).w,a1
00012B62 3028 000C                  		move.w	$C(a0),d0
00012B66 0440 0018                  		subi.w	#$18,d0
00012B6A 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00012B70 6700                       		beq.s	Obj0B_MoveDown
00012B72 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012B76 B069 000C                  		cmp.w	$C(a1),d0
00012B7A 6500                       		bcs.s	Obj0B_MoveDown
00012B7C 3340 000C                  		move.w	d0,$C(a1)
00012B80                            
00012B80                            Obj0B_MoveDown:
00012B80 0640 0024                  		addi.w	#$24,d0
00012B84 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012B8A 6700                       		beq.s	Obj0B_LetGo
00012B8C 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012B90 B069 000C                  		cmp.w	$C(a1),d0
00012B94 6400                       		bcc.s	Obj0B_LetGo
00012B96 3340 000C                  		move.w	d0,$C(a1)
00012B9A                            
00012B9A                            Obj0B_LetGo:
00012B9A 1038 F603                  		move.b	($FFFFF603).w,d0
00012B9E 0240 0070                  		andi.w	#$70,d0
00012BA2 6700                       		beq.s	Obj0B_Display
00012BA4                            
00012BA4                            Obj0B_Release:				; XREF: Obj0B_Action
00012BA4 4228 0020                  		clr.b	$20(a0)
00012BA8 5428 0024                  		addq.b	#2,$24(a0)
00012BAC 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012BB0 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012BB4 4228 0032                  		clr.b	$32(a0)
00012BB8 6000                       		bra.s	Obj0B_Display
00012BBA                            ; ===========================================================================
00012BBA                            
00012BBA                            Obj0B_Grab:				; XREF: Obj0B_Action
00012BBA 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012BBE 6700                       		beq.s	Obj0B_Display	; if not, branch
00012BC0 43F8 D000                  		lea	($FFFFD000).w,a1
00012BC4 3028 0008                  		move.w	8(a0),d0
00012BC8 0640 0014                  		addi.w	#$14,d0
00012BCC B069 0008                  		cmp.w	8(a1),d0
00012BD0 6400                       		bcc.s	Obj0B_Display
00012BD2 4228 0021                  		clr.b	$21(a0)
00012BD6 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012BDC 6400                       		bcc.s	Obj0B_Display
00012BDE 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012BE2 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012BE6 3028 0008                  		move.w	8(a0),d0
00012BEA 0640 0014                  		addi.w	#$14,d0
00012BEE 3340 0008                  		move.w	d0,8(a1)
00012BF2 08A9 0000 0022             		bclr	#0,$22(a1)
00012BF8 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012BFE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012C04 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012C0A 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012C10                            
00012C10                            Obj0B_Display:				; XREF: Obj0B_Index
00012C10 6000 E33A                  		bra.w	MarkObjGone
00012C14                            ; ===========================================================================
00012C14                            ; ---------------------------------------------------------------------------
00012C14                            ; Sprite mappings - pole that breaks (LZ)
00012C14                            ; ---------------------------------------------------------------------------
00012C14                            Map_obj0B:
00012C14                            	include "_maps\obj0B.asm"
00012C14                            ; ---------------------------------------------------------------------------
00012C14                            ; Sprite mappings - pole that breaks (LZ)
00012C14                            ; ---------------------------------------------------------------------------
00012C14 0000                       		dc.w byte_11326-Map_obj0B
00012C16 0000                       		dc.w byte_11331-Map_obj0B
00012C18 02                         byte_11326:	dc.b 2			; normal pole
00012C19 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012C1E 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012C23 04                         byte_11331:	dc.b 4			; broken pole
00012C24 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012C29 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012C2E 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012C33 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012C38                            		even
00012C38                            		even
00012C38                            
00012C38                            ; ===========================================================================
00012C38                            ; ---------------------------------------------------------------------------
00012C38                            ; Object 0C - flapping door (LZ)
00012C38                            ; ---------------------------------------------------------------------------
00012C38                            
00012C38                            Obj0C:					; XREF: Obj_Index
00012C38 7000                       		moveq	#0,d0
00012C3A 1028 0024                  		move.b	$24(a0),d0
00012C3E 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012C42 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012C46                            ; ===========================================================================
00012C46 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012C48 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012C4A                            ; ===========================================================================
00012C4A                            
00012C4A                            Obj0C_Main:				; XREF: Obj0C_Index
00012C4A 5428 0024                  		addq.b	#2,$24(a0)
00012C4E 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012C56 317C 4328 0002             		move.w	#$4328,2(a0)
00012C5C 0028 0004 0001             		ori.b	#4,1(a0)
00012C62 117C 0028 0019             		move.b	#$28,$19(a0)
00012C68 7000                       		moveq	#0,d0
00012C6A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C6E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012C72 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012C76                            
00012C76                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012C76 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012C7A 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012C7C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012C82 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012C88 4A28 0001                  		tst.b	1(a0)
00012C8C 6A00                       		bpl.s	Obj0C_Solid
00012C8E 303C 00BB                  		move.w	#$BB,d0
00012C92 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play door sound
00012C98                            
00012C98                            Obj0C_Solid:
00012C98 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012C9E 6100 8CC2                  		bsr.w	AnimateSprite
00012CA2 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012CA6 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012CAA 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012CAC 3038 D008                  		move.w	($FFFFD008).w,d0
00012CB0 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012CB4 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012CB6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012CBC 323C 0013                  		move.w	#$13,d1
00012CC0 343C 0020                  		move.w	#$20,d2
00012CC4 3602                       		move.w	d2,d3
00012CC6 5243                       		addq.w	#1,d3
00012CC8 3828 0008                  		move.w	8(a0),d4
00012CCC 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
00012CD0                            
00012CD0                            Obj0C_Display:
00012CD0 6000 E27A                  		bra.w	MarkObjGone
00012CD4                            ; ===========================================================================
00012CD4                            Ani_obj0C:
00012CD4                            	include "_anim\obj0C.asm"
00012CD4                            ; ---------------------------------------------------------------------------
00012CD4                            ; Animation script - flapping door (LZ)
00012CD4                            ; ---------------------------------------------------------------------------
00012CD4 0000                       		dc.w byte_113E6-Ani_obj0C
00012CD6 0000                       		dc.w byte_113EC-Ani_obj0C
00012CD8 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012CDE 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012CE4                            		even
00012CE4                            		even
00012CE4                            
00012CE4                            ; ---------------------------------------------------------------------------
00012CE4                            ; Sprite mappings - flapping door (LZ)
00012CE4                            ; ---------------------------------------------------------------------------
00012CE4                            Map_obj0C:
00012CE4                            	include "_maps\obj0C.asm"
00012CE4                            ; ---------------------------------------------------------------------------
00012CE4                            ; Sprite mappings - flapping door (LZ)
00012CE4                            ; ---------------------------------------------------------------------------
00012CE4 0000                       		dc.w byte_113F8-Map_obj0C
00012CE6 0000                       		dc.w byte_11403-Map_obj0C
00012CE8 0000                       		dc.w byte_1140E-Map_obj0C
00012CEA 02                         byte_113F8:	dc.b 2
00012CEB E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012CF0 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012CF5 02                         byte_11403:	dc.b 2
00012CF6 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012CFB 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012D00 02                         byte_1140E:	dc.b 2
00012D01 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012D06 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012D0C 00                         		even
00012D0C 00                         		even
00012D0C                            
00012D0C                            ; ===========================================================================
00012D0C                            ; ---------------------------------------------------------------------------
00012D0C                            ; Object 71 - invisible	solid blocks
00012D0C                            ; ---------------------------------------------------------------------------
00012D0C                            
00012D0C                            Obj71:					; XREF: Obj_Index
00012D0C 7000                       		moveq	#0,d0
00012D0E 1028 0024                  		move.b	$24(a0),d0
00012D12 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012D16 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012D1A                            ; ===========================================================================
00012D1A 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012D1C 0000                       		dc.w Obj71_Solid-Obj71_Index
00012D1E                            ; ===========================================================================
00012D1E                            
00012D1E                            Obj71_Main:				; XREF: Obj71_Index
00012D1E 5428 0024                  		addq.b	#2,$24(a0)
00012D22 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012D2A 317C 8680 0002             		move.w	#$8680,2(a0)
00012D30 0028 0004 0001             		ori.b	#4,1(a0)
00012D36 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D3A 1200                       		move.b	d0,d1
00012D3C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012D40 0640 0010                  		addi.w	#$10,d0
00012D44 E248                       		lsr.w	#1,d0
00012D46 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012D4A 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012D4E 5241                       		addq.w	#1,d1
00012D50 E749                       		lsl.w	#3,d1
00012D52 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012D56                            
00012D56                            Obj71_Solid:				; XREF: Obj71_Index
00012D56 6100 BF70                  		bsr.w	ChkObjOnScreen
00012D5A 6600                       		bne.s	Obj71_ChkDel
00012D5C 7200                       		moveq	#0,d1
00012D5E 1228 0019                  		move.b	$19(a0),d1
00012D62 0641 000B                  		addi.w	#$B,d1
00012D66 7400                       		moveq	#0,d2
00012D68 1428 0016                  		move.b	$16(a0),d2
00012D6C 3602                       		move.w	d2,d3
00012D6E 5243                       		addq.w	#1,d3
00012D70 3828 0008                  		move.w	8(a0),d4
00012D74 6100 E542                  		bsr.w	SolidObject71
00012D78                            
00012D78                            Obj71_ChkDel:
00012D78 3028 0008                  		move.w	8(a0),d0
00012D7C 0240 FF80                  		andi.w	#$FF80,d0
00012D80 3238 F700                  		move.w	($FFFFF700).w,d1
00012D84 0441 0080                  		subi.w	#$80,d1
00012D88 0241 FF80                  		andi.w	#$FF80,d1
00012D8C 9041                       		sub.w	d1,d0
00012D8E 0C40 0280                  		cmpi.w	#$280,d0
00012D92 6300                       		bls.s	Obj71_NoDel
00012D94 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012D98 6700                       		beq.s	Obj71_Delete		; if it's zero, don't remember object
00012D9A 3440                       		movea.w	d0,a2	; load address into a2
00012D9C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012DA0 6000                       		bra.s	Obj71_Delete	; and delete object
00012DA2                            
00012DA2                            Obj71_NoDel:
00012DA2 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012DA6 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012DA8 4EFA BB58                  		jmp	DisplaySprite	; if yes, display the object
00012DAC                            ; ===========================================================================
00012DAC                            
00012DAC                            Obj71_NoDisplay:
00012DAC 4E75                       		rts	
00012DAE                            ; ===========================================================================
00012DAE                            
00012DAE                            Obj71_Delete:
00012DAE 4EFA BBA2                  		jmp	DeleteObject
00012DB2                            ; ===========================================================================
00012DB2                            ; ---------------------------------------------------------------------------
00012DB2                            ; Sprite mappings - invisible solid blocks
00012DB2                            ; ---------------------------------------------------------------------------
00012DB2                            Map_obj71:
00012DB2                            	include "_maps\obj71.asm"
00012DB2                            ; ---------------------------------------------------------------------------
00012DB2                            ; Sprite mappings - invisible solid blocks
00012DB2                            ; ---------------------------------------------------------------------------
00012DB2 0000                       		dc.w byte_114BC-Map_obj71
00012DB4 0000                       		dc.w byte_114D1-Map_obj71
00012DB6 0000                       		dc.w byte_114E6-Map_obj71
00012DB8 04                         byte_114BC:	dc.b 4
00012DB9 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012DBE F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012DC3 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012DC8 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012DCD 04                         byte_114D1:	dc.b 4
00012DCE E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012DD3 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012DD8 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012DDD 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012DE2 04                         byte_114E6:	dc.b 4
00012DE3 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012DE8 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012DED 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012DF2 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012DF8 00                         		even
00012DF8 00                         		even
00012DF8                            
00012DF8                            ; ===========================================================================
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8                            ; Object 5D - fans (SLZ)
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8                            
00012DF8                            Obj5D:					; XREF: Obj_Index
00012DF8 7000                       		moveq	#0,d0
00012DFA 1028 0024                  		move.b	$24(a0),d0
00012DFE 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012E02 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012E06                            ; ===========================================================================
00012E06 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012E08 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012E0A                            ; ===========================================================================
00012E0A                            
00012E0A                            Obj5D_Main:				; XREF: Obj5D_Index
00012E0A 5428 0024                  		addq.b	#2,$24(a0)
00012E0E 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012E16 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012E1C 0028 0004 0001             		ori.b	#4,1(a0)
00012E22 117C 0010 0019             		move.b	#$10,$19(a0)
00012E28 117C 0004 0018             		move.b	#4,$18(a0)
00012E2E                            
00012E2E                            Obj5D_Delay:				; XREF: Obj5D_Index
00012E2E 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012E34 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012E36 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012E3A 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012E3C 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012E42 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012E48 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012E4A 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012E50                            
00012E50                            Obj5D_Blow:
00012E50 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012E54 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012E58 43F8 D000                  		lea	($FFFFD000).w,a1
00012E5C 3029 0008                  		move.w	8(a1),d0
00012E60 9068 0008                  		sub.w	8(a0),d0
00012E64 0828 0000 0022             		btst	#0,$22(a0)
00012E6A 6600                       		bne.s	Obj5D_ChkSonic
00012E6C 4440                       		neg.w	d0
00012E6E                            
00012E6E                            Obj5D_ChkSonic:
00012E6E 0640 0050                  		addi.w	#$50,d0
00012E72 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00012E76 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00012E78 3229 000C                  		move.w	$C(a1),d1
00012E7C 0641 0060                  		addi.w	#$60,d1
00012E80 9268 000C                  		sub.w	$C(a0),d1
00012E84 6500                       		bcs.s	Obj5D_Animate
00012E86 0C41 0070                  		cmpi.w	#$70,d1
00012E8A 6400                       		bcc.s	Obj5D_Animate
00012E8C 0440 0050                  		subi.w	#$50,d0
00012E90 6400                       		bcc.s	loc_1159A
00012E92 4640                       		not.w	d0
00012E94 D040                       		add.w	d0,d0
00012E96                            
00012E96                            loc_1159A:
00012E96 0640 0060                  		addi.w	#$60,d0
00012E9A 0828 0000 0022             		btst	#0,$22(a0)
00012EA0 6600                       		bne.s	loc_115A8
00012EA2 4440                       		neg.w	d0
00012EA4                            
00012EA4                            loc_115A8:
00012EA4 4400                       		neg.b	d0
00012EA6 E840                       		asr.w	#4,d0
00012EA8 0828 0000 0028             		btst	#0,$28(a0)
00012EAE 6700                       		beq.s	Obj5D_MoveSonic
00012EB0 4440                       		neg.w	d0
00012EB2                            
00012EB2                            Obj5D_MoveSonic:
00012EB2 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00012EB6                            
00012EB6                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00012EB6 5328 001E                  		subq.b	#1,$1E(a0)
00012EBA 6A00                       		bpl.s	Obj5D_ChkDel
00012EBC 117C 0000 001E             		move.b	#0,$1E(a0)
00012EC2 5228 001B                  		addq.b	#1,$1B(a0)
00012EC6 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012ECC 6500                       		bcs.s	loc_115D8
00012ECE 117C 0000 001B             		move.b	#0,$1B(a0)
00012ED4                            
00012ED4                            loc_115D8:
00012ED4 7000                       		moveq	#0,d0
00012ED6 0828 0000 0028             		btst	#0,$28(a0)
00012EDC 6700                       		beq.s	loc_115E4
00012EDE 7002                       		moveq	#2,d0
00012EE0                            
00012EE0                            loc_115E4:
00012EE0 D028 001B                  		add.b	$1B(a0),d0
00012EE4 1140 001A                  		move.b	d0,$1A(a0)
00012EE8                            
00012EE8                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012EE8 6100 BA18                  		bsr.w	DisplaySprite
00012EEC 3028 0008                  		move.w	8(a0),d0
00012EF0 0240 FF80                  		andi.w	#$FF80,d0
00012EF4 3238 F700                  		move.w	($FFFFF700).w,d1
00012EF8 0441 0080                  		subi.w	#$80,d1
00012EFC 0241 FF80                  		andi.w	#$FF80,d1
00012F00 9041                       		sub.w	d1,d0
00012F02 0C40 0280                  		cmpi.w	#$280,d0
00012F06 6300                       		bls.s	Obj5D_NoDel
00012F08 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012F0C 6700 BA44                  		beq.w	DeleteObject		; if it's zero, don't remember object
00012F10 3440                       		movea.w	d0,a2	; load address into a2
00012F12 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012F16 6000 BA3A                  		bra.w	DeleteObject	; and delete object
00012F1A                            
00012F1A                            Obj5D_NoDel:
00012F1A 4E75                       		rts	
00012F1C                            ; ===========================================================================
00012F1C                            ; ---------------------------------------------------------------------------
00012F1C                            ; Sprite mappings - fans (SLZ)
00012F1C                            ; ---------------------------------------------------------------------------
00012F1C                            Map_obj5D:
00012F1C                            	include "_maps\obj5D.asm"
00012F1C                            ; ---------------------------------------------------------------------------
00012F1C                            ; Sprite mappings - fans (SLZ)
00012F1C                            ; ---------------------------------------------------------------------------
00012F1C 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012F20 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012F24 0000                       		dc.w byte_1161A-Map_obj5D
00012F26 02                         byte_1161A:	dc.b 2
00012F27 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012F2C 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012F31 02                         byte_11625:	dc.b 2
00012F32 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012F37 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012F3C 02                         byte_11630:	dc.b 2
00012F3D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012F42 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012F48 00                         		even
00012F48 00                         		even
00012F48                            
00012F48                            ; ===========================================================================
00012F48                            ; ---------------------------------------------------------------------------
00012F48                            ; Object 5E - seesaws (SLZ)
00012F48                            ; ---------------------------------------------------------------------------
00012F48                            
00012F48                            Obj5E:					; XREF: Obj_Index
00012F48 7000                       		moveq	#0,d0
00012F4A 1028 0024                  		move.b	$24(a0),d0
00012F4E 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012F52 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012F56 3028 0030                  		move.w	$30(a0),d0
00012F5A 0240 FF80                  		andi.w	#$FF80,d0
00012F5E 3238 F700                  		move.w	($FFFFF700).w,d1
00012F62 0441 0080                  		subi.w	#$80,d1
00012F66 0241 FF80                  		andi.w	#$FF80,d1
00012F6A 9041                       		sub.w	d1,d0
00012F6C 6B00 B9E4                  		bmi.w	DeleteObject
00012F70 0C40 0280                  		cmpi.w	#$280,d0
00012F74 6300 B98C                  		bls.w	DisplaySprite
00012F78 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012F7C 6700 B9D4                  		beq.w	DeleteObject		; if it's zero, don't remember object
00012F80 3440                       		movea.w	d0,a2	; load address into a2
00012F82 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012F86 6000 B9CA                  		bra.w	DeleteObject	; and delete object		
00012F8A                            ; ===========================================================================
00012F8A 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012F8C 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012F8E 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012F90 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012F92 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00012F94 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00012F96                            ; ===========================================================================
00012F96                            
00012F96                            Obj5E_Main:				; XREF: Obj5E_Index
00012F96 5428 0024                  		addq.b	#2,$24(a0)
00012F9A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00012FA2 317C 0374 0002             		move.w	#$374,2(a0)
00012FA8 0028 0004 0001             		ori.b	#4,1(a0)
00012FAE 117C 0004 0018             		move.b	#4,$18(a0)
00012FB4 117C 0030 0019             		move.b	#$30,$19(a0)
00012FBA 3168 0008 0030             		move.w	8(a0),$30(a0)
00012FC0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00012FC4 6600                       		bne.s	loc_116D2	; if not, branch
00012FC6 6100 C0A6                  		bsr.w	SingleObjLoad2
00012FCA 6600                       		bne.s	loc_116D2
00012FCC 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00012FD0 5C29 0024                  		addq.b	#6,$24(a1)
00012FD4 3368 0008 0008             		move.w	8(a0),8(a1)
00012FDA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012FE0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012FE6 2348 003C                  		move.l	a0,$3C(a1)
00012FEA                            
00012FEA                            loc_116D2:
00012FEA 0828 0000 0022             		btst	#0,$22(a0)
00012FF0 6700                       		beq.s	loc_116E0
00012FF2 117C 0002 001A             		move.b	#2,$1A(a0)
00012FF8                            
00012FF8                            loc_116E0:
00012FF8 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00012FFE                            
00012FFE                            Obj5E_Slope:				; XREF: Obj5E_Index
00012FFE 1228 003A                  		move.b	$3A(a0),d1
00013002 6100 0000                  		bsr.w	loc_11766
00013006 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001300C 0828 0000 001A             		btst	#0,$1A(a0)
00013012 6700                       		beq.s	loc_11702
00013014 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001301A                            
0001301A                            loc_11702:
0001301A 43F8 D000                  		lea	($FFFFD000).w,a1
0001301E 3169 0012 0038             		move.w	$12(a1),$38(a0)
00013024 323C 0030                  		move.w	#$30,d1
00013028 4EB9 0000 85E4             		jsr	(SlopeObject).l
0001302E 4E75                       		rts	
00013030                            ; ===========================================================================
00013030                            
00013030                            Obj5E_Slope2:				; XREF: Obj5E_Index
00013030 6100 0000                  		bsr.w	loc_1174A
00013034 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001303A 0828 0000 001A             		btst	#0,$1A(a0)
00013040 6700                       		beq.s	loc_11730
00013042 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013048                            
00013048                            loc_11730:
00013048 323C 0030                  		move.w	#$30,d1
0001304C 4EB9 0000 8684             		jsr	(ExitPlatform).l
00013052 323C 0030                  		move.w	#$30,d1
00013056 3428 0008                  		move.w	8(a0),d2
0001305A 4EB9 0000 965A             		jsr	SlopeObject2
00013060 4E75                       		rts	
00013062                            ; ===========================================================================
00013062                            
00013062                            loc_1174A:				; XREF: Obj5E_Slope2
00013062 7202                       		moveq	#2,d1
00013064 43F8 D000                  		lea	($FFFFD000).w,a1
00013068 3028 0008                  		move.w	8(a0),d0
0001306C 9069 0008                  		sub.w	8(a1),d0
00013070 6400                       		bcc.s	loc_1175E
00013072 4440                       		neg.w	d0
00013074 7200                       		moveq	#0,d1
00013076                            
00013076                            loc_1175E:
00013076 0C40 0008                  		cmpi.w	#8,d0
0001307A 6400                       		bcc.s	loc_11766
0001307C 7201                       		moveq	#1,d1
0001307E                            
0001307E                            loc_11766:
0001307E 1028 001A                  		move.b	$1A(a0),d0
00013082 B001                       		cmp.b	d1,d0
00013084 6700                       		beq.s	locret_11790
00013086 6400                       		bcc.s	loc_11772
00013088 5400                       		addq.b	#2,d0
0001308A                            
0001308A                            loc_11772:
0001308A 5300                       		subq.b	#1,d0
0001308C 1140 001A                  		move.b	d0,$1A(a0)
00013090 1141 003A                  		move.b	d1,$3A(a0)
00013094 08A8 0000 0001             		bclr	#0,1(a0)
0001309A 0828 0001 001A             		btst	#1,$1A(a0)
000130A0 6700                       		beq.s	locret_11790
000130A2 08E8 0000 0001             		bset	#0,1(a0)
000130A8                            
000130A8                            locret_11790:
000130A8 4E75                       		rts	
000130AA                            ; ===========================================================================
000130AA                            
000130AA                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000130AA 5428 0024                  		addq.b	#2,$24(a0)
000130AE 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000130B6 317C 04F0 0002             		move.w	#$4F0,2(a0)
000130BC 0028 0004 0001             		ori.b	#4,1(a0)
000130C2 117C 0004 0018             		move.b	#4,$18(a0)
000130C8 117C 008B 0020             		move.b	#$8B,$20(a0)
000130CE 117C 000C 0019             		move.b	#$C,$19(a0)
000130D4 3168 0008 0030             		move.w	8(a0),$30(a0)
000130DA 0668 0028 0008             		addi.w	#$28,8(a0)
000130E0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000130E6 117C 0001 001A             		move.b	#1,$1A(a0)
000130EC 0828 0000 0022             		btst	#0,$22(a0)
000130F2 6700                       		beq.s	Obj5E_MoveSpike
000130F4 0468 0050 0008             		subi.w	#$50,8(a0)
000130FA 117C 0002 003A             		move.b	#2,$3A(a0)
00013100                            
00013100                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00013100 2268 003C                  		movea.l	$3C(a0),a1
00013104 7000                       		moveq	#0,d0
00013106 1028 003A                  		move.b	$3A(a0),d0
0001310A 9029 003A                  		sub.b	$3A(a1),d0
0001310E 6700                       		beq.s	loc_1183E
00013110 6400                       		bcc.s	loc_117FC
00013112 4400                       		neg.b	d0
00013114                            
00013114                            loc_117FC:
00013114 323C F7E8                  		move.w	#-$818,d1
00013118 343C FEEC                  		move.w	#-$114,d2
0001311C 0C00 0001                  		cmpi.b	#1,d0
00013120 6700                       		beq.s	loc_11822
00013122 323C F510                  		move.w	#-$AF0,d1
00013126 343C FF34                  		move.w	#-$CC,d2
0001312A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013130 6D00                       		blt.s	loc_11822
00013132 323C F200                  		move.w	#-$E00,d1
00013136 343C FF60                  		move.w	#-$A0,d2
0001313A                            
0001313A                            loc_11822:
0001313A 3141 0012                  		move.w	d1,$12(a0)
0001313E 3142 0010                  		move.w	d2,$10(a0)
00013142 3028 0008                  		move.w	8(a0),d0
00013146 9068 0030                  		sub.w	$30(a0),d0
0001314A 6400                       		bcc.s	loc_11838
0001314C 4468 0010                  		neg.w	$10(a0)
00013150                            
00013150                            loc_11838:
00013150 5428 0024                  		addq.b	#2,$24(a0)
00013154 6000                       		bra.s	Obj5E_SpikeFall
00013156                            ; ===========================================================================
00013156                            
00013156                            loc_1183E:				; XREF: Obj5E_MoveSpike
00013156 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001315C 7000                       		moveq	#0,d0
0001315E 1029 001A                  		move.b	$1A(a1),d0
00013162 343C 0028                  		move.w	#$28,d2
00013166 3228 0008                  		move.w	8(a0),d1
0001316A 9268 0030                  		sub.w	$30(a0),d1
0001316E 6400                       		bcc.s	loc_1185C
00013170 4442                       		neg.w	d2
00013172 5440                       		addq.w	#2,d0
00013174                            
00013174                            loc_1185C:
00013174 D040                       		add.w	d0,d0
00013176 3228 0034                  		move.w	$34(a0),d1
0001317A D272 0000                  		add.w	(a2,d0.w),d1
0001317E 3141 000C                  		move.w	d1,$C(a0)
00013182 D468 0030                  		add.w	$30(a0),d2
00013186 3142 0008                  		move.w	d2,8(a0)
0001318A 4268 000E                  		clr.w	$E(a0)
0001318E 4268 000A                  		clr.w	$A(a0)
00013192 4E75                       		rts	
00013194                            ; ===========================================================================
00013194                            
00013194                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00013194 4A68 0012                  		tst.w	$12(a0)
00013198 6A00                       		bpl.s	loc_1189A
0001319A 6100 B72C                  		bsr.w	ObjectFall
0001319E 3028 0034                  		move.w	$34(a0),d0
000131A2 0440 002F                  		subi.w	#$2F,d0
000131A6 B068 000C                  		cmp.w	$C(a0),d0
000131AA 6E00                       		bgt.s	locret_11898
000131AC 6100 B71A                  		bsr.w	ObjectFall
000131B0                            
000131B0                            locret_11898:
000131B0 4E75                       		rts	
000131B2                            ; ===========================================================================
000131B2                            
000131B2                            loc_1189A:				; XREF: Obj5E_SpikeFall
000131B2 6100 B714                  		bsr.w	ObjectFall
000131B6 2268 003C                  		movea.l	$3C(a0),a1
000131BA 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000131C0 7000                       		moveq	#0,d0
000131C2 1029 001A                  		move.b	$1A(a1),d0
000131C6 3228 0008                  		move.w	8(a0),d1
000131CA 9268 0030                  		sub.w	$30(a0),d1
000131CE 6400                       		bcc.s	loc_118BA
000131D0 5440                       		addq.w	#2,d0
000131D2                            
000131D2                            loc_118BA:
000131D2 D040                       		add.w	d0,d0
000131D4 3228 0034                  		move.w	$34(a0),d1
000131D8 D272 0000                  		add.w	(a2,d0.w),d1
000131DC B268 000C                  		cmp.w	$C(a0),d1
000131E0 6E00                       		bgt.s	locret_11938
000131E2 2268 003C                  		movea.l	$3C(a0),a1
000131E6 7202                       		moveq	#2,d1
000131E8 4A68 0010                  		tst.w	$10(a0)
000131EC 6B00                       		bmi.s	Obj5E_Spring
000131EE 7200                       		moveq	#0,d1
000131F0                            
000131F0                            Obj5E_Spring:
000131F0 1341 003A                  		move.b	d1,$3A(a1)
000131F4 1141 003A                  		move.b	d1,$3A(a0)
000131F8 B229 001A                  		cmp.b	$1A(a1),d1
000131FC 6700                       		beq.s	loc_1192C
000131FE 08A9 0003 0022             		bclr	#3,$22(a1)
00013204 6700                       		beq.s	loc_1192C
00013206 4229 0025                  		clr.b	$25(a1)
0001320A 137C 0002 0024             		move.b	#2,$24(a1)
00013210 45F8 D000                  		lea	($FFFFD000).w,a2
00013214 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001321A 446A 0012                  		neg.w	$12(a2)
0001321E 08EA 0001 0022             		bset	#1,$22(a2)
00013224 08AA 0003 0022             		bclr	#3,$22(a2)
0001322A 422A 003C                  		clr.b	$3C(a2)
0001322E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00013234 157C 0002 0024             		move.b	#2,$24(a2)
0001323A 303C 00CC                  		move.w	#$CC,d0
0001323E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
00013244                            
00013244                            loc_1192C:
00013244 4268 0010                  		clr.w	$10(a0)
00013248 4268 0012                  		clr.w	$12(a0)
0001324C 5528 0024                  		subq.b	#2,$24(a0)
00013250                            
00013250                            locret_11938:
00013250 4E75                       		rts	
00013252                            ; ===========================================================================
00013252 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001325C                            
0001325C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001328C                            		even
0001328C                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000132BC                            		even
000132BC                            ; ---------------------------------------------------------------------------
000132BC                            ; Sprite mappings - seesaws (SLZ)
000132BC                            ; ---------------------------------------------------------------------------
000132BC                            Map_obj5E:
000132BC                            	include "_maps\obj5E.asm"
000132BC                            ; ---------------------------------------------------------------------------
000132BC                            ; Sprite mappings - seesaws (SLZ)
000132BC                            ; ---------------------------------------------------------------------------
000132BC 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000132C0 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000132C4 07                         byte_119AC:	dc.b 7
000132C5 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000132CA DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000132CF E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000132D4 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000132D9 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000132DE F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000132E3 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000132E8 04                         byte_119D0:	dc.b 4
000132E9 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000132EE E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000132F3 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000132F8 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000132FE 00                         		even
000132FE 00                         		even
000132FE                            
000132FE                            ; ---------------------------------------------------------------------------
000132FE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000132FE                            ; ---------------------------------------------------------------------------
000132FE                            Map_obj5Ea:
000132FE                            	include "_maps\obj5Eballs.asm"
000132FE                            ; ---------------------------------------------------------------------------
000132FE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000132FE                            ; ---------------------------------------------------------------------------
000132FE 0000                       		dc.w byte_119EA-Map_obj5Ea
00013300 0000                       		dc.w byte_119F0-Map_obj5Ea
00013302 01                         byte_119EA:	dc.b 1
00013303 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013308 01                         byte_119F0:	dc.b 1
00013309 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001330E                            		even
0001330E                            		even
0001330E                            
0001330E                            ; ===========================================================================
0001330E                            ; ---------------------------------------------------------------------------
0001330E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001330E                            ; ---------------------------------------------------------------------------
0001330E                            
0001330E                            Obj5F:					; XREF: Obj_Index
0001330E 7000                       		moveq	#0,d0
00013310 1028 0024                  		move.b	$24(a0),d0
00013314 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00013318 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001331C                            ; ===========================================================================
0001331C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001331E 0000                       		dc.w Obj5F_Action-Obj5F_Index
00013320 0000                       		dc.w Obj5F_Display-Obj5F_Index
00013322 0000                       		dc.w Obj5F_End-Obj5F_Index
00013324                            ; ===========================================================================
00013324                            
00013324                            Obj5F_Main:				; XREF: Obj5F_Index
00013324 5428 0024                  		addq.b	#2,$24(a0)
00013328 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00013330 317C 0400 0002             		move.w	#$400,2(a0)
00013336 0028 0004 0001             		ori.b	#4,1(a0)
0001333C 117C 0003 0018             		move.b	#3,$18(a0)
00013342 117C 000C 0019             		move.b	#$C,$19(a0)
00013348 1028 0028                  		move.b	$28(a0),d0
0001334C 6700                       		beq.s	loc_11A3C
0001334E 1140 0024                  		move.b	d0,$24(a0)
00013352 4E75                       		rts	
00013354                            ; ===========================================================================
00013354                            
00013354                            loc_11A3C:
00013354 117C 009A 0020             		move.b	#$9A,$20(a0)
0001335A 0868 0000 0022             		bchg	#0,$22(a0)
00013360                            
00013360                            Obj5F_Action:				; XREF: Obj5F_Index
00013360 7000                       		moveq	#0,d0
00013362 1028 0025                  		move.b	$25(a0),d0
00013366 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001336A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001336E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013374 6100 85EC                  		bsr.w	AnimateSprite
00013378 6000 DBD2                  		bra.w	MarkObjGone
0001337C                            ; ===========================================================================
0001337C 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001337E 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00013380 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00013382                            ; ===========================================================================
00013382                            
00013382                            Obj5F_Walk:				; XREF: Obj5F_Index2
00013382 6100 0000                  		bsr.w	Obj5F_ChkSonic
00013386 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001338A 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001338C 5428 0025                  		addq.b	#2,$25(a0)
00013390 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00013396 317C 0010 0010             		move.w	#$10,$10(a0)
0001339C 117C 0001 001C             		move.b	#1,$1C(a0)
000133A2 0868 0000 0022             		bchg	#0,$22(a0)
000133A8 6700                       		beq.s	locret_11A96
000133AA 4468 0010                  		neg.w	$10(a0)		; change direction
000133AE                            
000133AE                            locret_11A96:
000133AE 4E75                       		rts	
000133B0                            ; ===========================================================================
000133B0                            
000133B0                            Obj5F_Wait:				; XREF: Obj5F_Index2
000133B0 6100 0000                  		bsr.w	Obj5F_ChkSonic
000133B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000133B8 6B00                       		bmi.s	loc_11AA8
000133BA 6100 B52C                  		bsr.w	SpeedToPos
000133BE 4E75                       		rts	
000133C0                            ; ===========================================================================
000133C0                            
000133C0                            loc_11AA8:
000133C0 5528 0025                  		subq.b	#2,$25(a0)
000133C4 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000133CA 4268 0010                  		clr.w	$10(a0)		; stop walking
000133CE 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000133D4 4E75                       		rts	
000133D6                            ; ===========================================================================
000133D6                            
000133D6                            Obj5F_Explode:				; XREF: Obj5F_Index2
000133D6 5368 0030                  		subq.w	#1,$30(a0)
000133DA 6A00                       		bpl.s	locret_11AD0
000133DC 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000133E0 117C 0000 0024             		move.b	#0,$24(a0)
000133E6                            
000133E6                            locret_11AD0:
000133E6 4E75                       		rts	
000133E8                            ; ===========================================================================
000133E8                            
000133E8                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000133E8 3038 D008                  		move.w	($FFFFD008).w,d0
000133EC 9068 0008                  		sub.w	8(a0),d0
000133F0 6400                       		bcc.s	loc_11ADE
000133F2 4440                       		neg.w	d0
000133F4                            
000133F4                            loc_11ADE:
000133F4 0C40 0060                  		cmpi.w	#$60,d0
000133F8 6400                       		bcc.s	locret_11B5E
000133FA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000133FE 9068 000C                  		sub.w	$C(a0),d0
00013402 6400                       		bcc.s	Obj5F_MakeFuse
00013404 4440                       		neg.w	d0
00013406                            
00013406                            Obj5F_MakeFuse:
00013406 0C40 0060                  		cmpi.w	#$60,d0
0001340A 6400                       		bcc.s	locret_11B5E
0001340C 4A78 FE08                  		tst.w	($FFFFFE08).w
00013410 6600                       		bne.s	locret_11B5E
00013412 117C 0004 0025             		move.b	#4,$25(a0)
00013418 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001341E 4268 0010                  		clr.w	$10(a0)
00013422 117C 0002 001C             		move.b	#2,$1C(a0)
00013428 6100 BC44                  		bsr.w	SingleObjLoad2
0001342C 6600                       		bne.s	locret_11B5E
0001342E 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00013432 3368 0008 0008             		move.w	8(a0),8(a1)
00013438 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001343E 3368 000C 0034             		move.w	$C(a0),$34(a1)
00013444 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001344A 137C 0004 0028             		move.b	#4,$28(a1)
00013450 137C 0003 001C             		move.b	#3,$1C(a1)
00013456 337C 0010 0012             		move.w	#$10,$12(a1)
0001345C 0828 0001 0022             		btst	#1,$22(a0)
00013462 6700                       		beq.s	loc_11B54
00013464 4469 0012                  		neg.w	$12(a1)
00013468                            
00013468                            loc_11B54:
00013468 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001346E 2348 003C                  		move.l	a0,$3C(a1)
00013472                            
00013472                            locret_11B5E:
00013472 4E75                       		rts	
00013474                            ; ===========================================================================
00013474                            
00013474                            Obj5F_Display:				; XREF: Obj5F_Index
00013474 6100                       		bsr.s	loc_11B70
00013476 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001347C 6100 84E4                  		bsr.w	AnimateSprite
00013480 6000 DACA                  		bra.w	MarkObjGone
00013484                            ; ===========================================================================
00013484                            
00013484                            loc_11B70:
00013484 5368 0030                  		subq.w	#1,$30(a0)
00013488 6B00                       		bmi.s	loc_11B7C
0001348A 6100 B45C                  		bsr.w	SpeedToPos
0001348E 4E75                       		rts	
00013490                            ; ===========================================================================
00013490                            
00013490                            loc_11B7C:
00013490 4268 0030                  		clr.w	$30(a0)
00013494 4228 0024                  		clr.b	$24(a0)
00013498 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001349E 7203                       		moveq	#3,d1
000134A0 2248                       		movea.l	a0,a1
000134A2 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000134A8 6000                       		bra.s	Obj5F_MakeShrap
000134AA                            ; ===========================================================================
000134AA                            
000134AA                            Obj5F_Loop:
000134AA 6100 BBC2                  		bsr.w	SingleObjLoad2
000134AE 6600                       		bne.s	loc_11BCE
000134B0                            
000134B0                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000134B0 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000134B4 3368 0008 0008             		move.w	8(a0),8(a1)
000134BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000134C0 137C 0006 0028             		move.b	#6,$28(a1)
000134C6 137C 0004 001C             		move.b	#4,$1C(a1)
000134CC 335A 0010                  		move.w	(a2)+,$10(a1)
000134D0 335A 0012                  		move.w	(a2)+,$12(a1)
000134D4 137C 0098 0020             		move.b	#$98,$20(a1)
000134DA 08E9 0007 0001             		bset	#7,1(a1)
000134E0                            
000134E0                            loc_11BCE:
000134E0 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000134E4                            
000134E4 117C 0006 0024             		move.b	#6,$24(a0)
000134EA                            
000134EA                            Obj5F_End:				; XREF: Obj5F_Index
000134EA 6100 B3FC                  		bsr.w	SpeedToPos
000134EE 0668 0018 0012             		addi.w	#$18,$12(a0)
000134F4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000134FA 6100 8466                  		bsr.w	AnimateSprite
000134FE 4A28 0001                  		tst.b	1(a0)
00013502 6A00 B44E                  		bpl.w	DeleteObject
00013506 6000 B3FA                  		bra.w	DisplaySprite
0001350A                            ; ===========================================================================
0001350A FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001351A                            
0001351A                            Ani_obj5F:
0001351A                            	include "_anim\obj5F.asm"
0001351A                            ; ---------------------------------------------------------------------------
0001351A                            ; Animation script - Bomb enemy
0001351A                            ; ---------------------------------------------------------------------------
0001351A 0000                       		dc.w byte_11C12-Ani_obj5F
0001351C 0000                       		dc.w byte_11C16-Ani_obj5F
0001351E 0000                       		dc.w byte_11C1C-Ani_obj5F
00013520 0000                       		dc.w byte_11C20-Ani_obj5F
00013522 0000                       		dc.w byte_11C24-Ani_obj5F
00013524 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00013528 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001352E 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00013532 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00013536 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001353A                            		even
0001353A                            		even
0001353A                            
0001353A                            ; ---------------------------------------------------------------------------
0001353A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001353A                            ; ---------------------------------------------------------------------------
0001353A                            Map_obj5F:
0001353A                            	include "_maps\obj5F.asm"
0001353A                            ; ---------------------------------------------------------------------------
0001353A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001353A                            ; ---------------------------------------------------------------------------
0001353A 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001353E 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00013542 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00013546 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001354A 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001354E 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00013552 03                         byte_11C40:	dc.b 3
00013553 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013558 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001355D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013562 03                         byte_11C50:	dc.b 3
00013563 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013568 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001356D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013572 03                         byte_11C60:	dc.b 3
00013573 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013578 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001357D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013582 03                         byte_11C70:	dc.b 3
00013583 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013588 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001358D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013592 03                         byte_11C80:	dc.b 3
00013593 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013598 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001359D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000135A2 03                         byte_11C90:	dc.b 3
000135A3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000135A8 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000135AD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135B2 02                         byte_11CA0:	dc.b 2
000135B3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000135B8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000135BD 02                         byte_11CAB:	dc.b 2
000135BE F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000135C3 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000135C8 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000135C9 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000135CE 01                         byte_11CBC:	dc.b 1			; fuse
000135CF E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000135D4 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000135D5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000135DA 01                         byte_11CC8:	dc.b 1			; fireball
000135DB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000135E0                            		even
000135E0                            		even
000135E0                            
000135E0                            ; ===========================================================================
000135E0                            ; ---------------------------------------------------------------------------
000135E0                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000135E0                            ; ---------------------------------------------------------------------------
000135E0                            
000135E0                            Obj60:					; XREF: Obj_Index
000135E0 7000                       		moveq	#0,d0
000135E2 1028 0024                  		move.b	$24(a0),d0
000135E6 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000135EA 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000135EE                            ; ===========================================================================
000135EE 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000135F0 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000135F2 0000                       		dc.w Obj60_Display-Obj60_Index
000135F4 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000135F6 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000135F8                            ; ===========================================================================
000135F8                            
000135F8                            Obj60_Main:				; XREF: Obj60_Index
000135F8 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00013600 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00013606 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001360C 6700                       		beq.s	loc_11D02
0001360E 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00013614                            
00013614                            loc_11D02:
00013614 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001361A 6600                       		bne.s	loc_11D10
0001361C 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00013622                            
00013622                            loc_11D10:
00013622 0028 0004 0001             		ori.b	#4,1(a0)
00013628 117C 0004 0018             		move.b	#4,$18(a0)
0001362E 117C 000B 0020             		move.b	#$B,$20(a0)
00013634 117C 000C 0019             		move.b	#$C,$19(a0)
0001363A 7400                       		moveq	#0,d2
0001363C 45E8 0037                  		lea	$37(a0),a2
00013640 264A                       		movea.l	a2,a3
00013642 524A                       		addq.w	#1,a2
00013644 7203                       		moveq	#3,d1
00013646                            
00013646                            Obj60_MakeOrbs:
00013646 6100 BA26                  		bsr.w	SingleObjLoad2
0001364A 6600                       		bne.s	loc_11D90
0001364C 5213                       		addq.b	#1,(a3)
0001364E 3A09                       		move.w	a1,d5
00013650 0445 D000                  		subi.w	#-$3000,d5
00013654 EC4D                       		lsr.w	#6,d5
00013656 0245 007F                  		andi.w	#$7F,d5
0001365A 14C5                       		move.b	d5,(a2)+
0001365C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001365E 137C 0006 0024             		move.b	#6,$24(a1)
00013664 2368 0004 0004             		move.l	4(a0),4(a1)
0001366A 3368 0002 0002             		move.w	2(a0),2(a1)
00013670 0029 0004 0001             		ori.b	#4,1(a1)
00013676 137C 0004 0018             		move.b	#4,$18(a1)
0001367C 137C 0008 0019             		move.b	#8,$19(a1)
00013682 137C 0003 001A             		move.b	#3,$1A(a1)
00013688 137C 0098 0020             		move.b	#$98,$20(a1)
0001368E 1342 0026                  		move.b	d2,$26(a1)
00013692 0602 0040                  		addi.b	#$40,d2
00013696 2348 003C                  		move.l	a0,$3C(a1)
0001369A 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001369E                            
0001369E                            loc_11D90:
0001369E 7001                       		moveq	#1,d0
000136A0 0828 0000 0022             		btst	#0,$22(a0)
000136A6 6700                       		beq.s	Obj60_Move
000136A8 4440                       		neg.w	d0
000136AA                            
000136AA                            Obj60_Move:
000136AA 1140 0036                  		move.b	d0,$36(a0)
000136AE 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000136B4 5428 0024                  		addq.b	#2,$24(a0)
000136B8 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000136BE 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000136C4 6700                       		beq.s	locret_11DBC	; if not, branch
000136C6 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000136CA                            
000136CA                            locret_11DBC:
000136CA 4E75                       		rts	
000136CC                            ; ===========================================================================
000136CC                            
000136CC                            Obj60_ChkSonic:				; XREF: Obj60_Index
000136CC 3038 D008                  		move.w	($FFFFD008).w,d0
000136D0 9068 0008                  		sub.w	8(a0),d0
000136D4 6400                       		bcc.s	loc_11DCA
000136D6 4440                       		neg.w	d0
000136D8                            
000136D8                            loc_11DCA:
000136D8 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000136DC 6400                       		bcc.s	Obj60_Animate	; if not, branch
000136DE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000136E2 9068 000C                  		sub.w	$C(a0),d0
000136E6 6400                       		bcc.s	loc_11DDC
000136E8 4440                       		neg.w	d0
000136EA                            
000136EA                            loc_11DDC:
000136EA 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000136EE 6400                       		bcc.s	Obj60_Animate	; if not, branch
000136F0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000136F4 6600                       		bne.s	Obj60_Animate	; if yes, branch
000136F6 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000136FC                            
000136FC                            Obj60_Animate:
000136FC 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00013702 6100 825E                  		bsr.w	AnimateSprite
00013706 6000 0000                  		bra.w	Obj60_ChkDel
0001370A                            ; ===========================================================================
0001370A                            
0001370A                            Obj60_Display:				; XREF: Obj60_Index
0001370A 6100 B1DC                  		bsr.w	SpeedToPos
0001370E                            
0001370E                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001370E 3028 0008                  		move.w	8(a0),d0
00013712 0240 FF80                  		andi.w	#$FF80,d0
00013716 3238 F700                  		move.w	($FFFFF700).w,d1
0001371A 0441 0080                  		subi.w	#$80,d1
0001371E 0241 FF80                  		andi.w	#$FF80,d1
00013722 9041                       		sub.w	d1,d0
00013724 0C40 0280                  		cmpi.w	#$280,d0
00013728 6200 0000                  		bhi.w	Obj60_ChkGone
0001372C 6000 B1D4                  		bra.w	DisplaySprite
00013730                            ; ===========================================================================
00013730                            
00013730                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00013730 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013734 6700                       		beq.s	loc_11E34		; if it's zero, don't remember object
00013736 3440                       		movea.w	d0,a2	; load address into a2
00013738 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001373C                            
0001373C                            loc_11E34:
0001373C 45E8 0037                  		lea	$37(a0),a2
00013740 7400                       		moveq	#0,d2
00013742 141A                       		move.b	(a2)+,d2
00013744 5342                       		subq.w	#1,d2
00013746 6500                       		bcs.s	Obj60_Delete
00013748                            
00013748                            loc_11E40:
00013748 7000                       		moveq	#0,d0
0001374A 101A                       		move.b	(a2)+,d0
0001374C ED48                       		lsl.w	#6,d0
0001374E 0680 00FF D000             		addi.l	#$FFD000,d0
00013754 2240                       		movea.l	d0,a1
00013756 6100 B1FC                  		bsr.w	DeleteObject2
0001375A 51CA FFEC                  		dbf	d2,loc_11E40
0001375E                            
0001375E                            Obj60_Delete:
0001375E 6000 B1F2                  		bra.w	DeleteObject
00013762                            ; ===========================================================================
00013762                            
00013762                            Obj60_MoveOrb:				; XREF: Obj60_Index
00013762 2268 003C                  		movea.l	$3C(a0),a1
00013766 0C11 0060                  		cmpi.b	#$60,0(a1)
0001376A 6600 B1E6                  		bne.w	DeleteObject
0001376E 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00013774 6600                       		bne.s	Obj60_Circle
00013776 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001377C 6600                       		bne.s	Obj60_Circle
0001377E 5428 0024                  		addq.b	#2,$24(a0)
00013782 5329 0037                  		subq.b	#1,$37(a1)
00013786 6600                       		bne.s	Obj60_FireOrb
00013788 5429 0024                  		addq.b	#2,$24(a1)
0001378C                            
0001378C                            Obj60_FireOrb:
0001378C 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00013792 0829 0000 0022             		btst	#0,$22(a1)
00013798 6700                       		beq.s	Obj60_Display2
0001379A 4468 0010                  		neg.w	$10(a0)
0001379E                            
0001379E                            Obj60_Display2:
0001379E 6000 B162                  		bra.w	DisplaySprite
000137A2                            ; ===========================================================================
000137A2                            
000137A2                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000137A2 1028 0026                  		move.b	$26(a0),d0
000137A6 4EB9 0000 29CC             		jsr	(CalcSine).l
000137AC E841                       		asr.w	#4,d1
000137AE D269 0008                  		add.w	8(a1),d1
000137B2 3141 0008                  		move.w	d1,8(a0)
000137B6 E840                       		asr.w	#4,d0
000137B8 D069 000C                  		add.w	$C(a1),d0
000137BC 3140 000C                  		move.w	d0,$C(a0)
000137C0 1029 0036                  		move.b	$36(a1),d0
000137C4 D128 0026                  		add.b	d0,$26(a0)
000137C8 6000 B138                  		bra.w	DisplaySprite
000137CC                            ; ===========================================================================
000137CC                            
000137CC                            Obj60_ChkDel2:				; XREF: Obj60_Index
000137CC 6100 B11A                  		bsr.w	SpeedToPos
000137D0 4A28 0001                  		tst.b	1(a0)
000137D4 6A00 B17C                  		bpl.w	DeleteObject
000137D8 6000 B128                  		bra.w	DisplaySprite
000137DC                            ; ===========================================================================
000137DC                            Ani_obj60:
000137DC                            	include "_anim\obj60.asm"
000137DC                            ; ---------------------------------------------------------------------------
000137DC                            ; Animation script - Orbinaut enemy
000137DC                            ; ---------------------------------------------------------------------------
000137DC 0000                       		dc.w byte_11EDA-Ani_obj60
000137DE 0000                       		dc.w byte_11EDE-Ani_obj60
000137E0 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000137E4 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000137EA                            		even
000137EA                            		even
000137EA                            
000137EA                            ; ---------------------------------------------------------------------------
000137EA                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000137EA                            ; ---------------------------------------------------------------------------
000137EA                            Map_obj60:
000137EA                            	include "_maps\obj60.asm"
000137EA                            ; ---------------------------------------------------------------------------
000137EA                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000137EA                            ; ---------------------------------------------------------------------------
000137EA 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000137EE 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000137F2 01                         byte_11EEC:	dc.b 1
000137F3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000137F8 01                         byte_11EF2:	dc.b 1
000137F9 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000137FE 01                         byte_11EF8:	dc.b 1
000137FF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00013804 01                         byte_11EFE:	dc.b 1
00013805 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001380A                            		even
0001380A                            		even
0001380A                            
0001380A                            ; ===========================================================================
0001380A                            ; ---------------------------------------------------------------------------
0001380A                            ; Object 16 - harpoon (LZ)
0001380A                            ; ---------------------------------------------------------------------------
0001380A                            
0001380A                            Obj16:					; XREF: Obj_Index
0001380A 7000                       		moveq	#0,d0
0001380C 1028 0024                  		move.b	$24(a0),d0
00013810 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00013814 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00013818                            ; ===========================================================================
00013818 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001381A 0000                       		dc.w Obj16_Move-Obj16_Index
0001381C 0000                       		dc.w Obj16_Wait-Obj16_Index
0001381E                            ; ===========================================================================
0001381E                            
0001381E                            Obj16_Main:				; XREF: Obj16_Index
0001381E 5428 0024                  		addq.b	#2,$24(a0)
00013822 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001382A 317C 03CC 0002             		move.w	#$3CC,2(a0)
00013830 0028 0004 0001             		ori.b	#4,1(a0)
00013836 117C 0004 0018             		move.b	#4,$18(a0)
0001383C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00013842 117C 0014 0019             		move.b	#$14,$19(a0)
00013848 317C 003C 0030             		move.w	#60,$30(a0)
0001384E                            
0001384E                            Obj16_Move:				; XREF: Obj16_Index
0001384E 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00013854 6100 810C                  		bsr.w	AnimateSprite
00013858 7000                       		moveq	#0,d0
0001385A 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001385E 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00013864 6000 D6E6                  		bra.w	MarkObjGone
00013868                            ; ===========================================================================
00013868 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001386E                            ; ===========================================================================
0001386E                            
0001386E                            Obj16_Wait:				; XREF: Obj16_Index
0001386E 5368 0030                  		subq.w	#1,$30(a0)
00013872 6A00                       		bpl.s	Obj16_ChkDel
00013874 317C 003C 0030             		move.w	#60,$30(a0)
0001387A 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001387E 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00013884                            
00013884                            Obj16_ChkDel:
00013884 6000 D6C6                  		bra.w	MarkObjGone
00013888                            ; ===========================================================================
00013888                            Ani_obj16:
00013888                            	include "_anim\obj16.asm"
00013888                            ; ---------------------------------------------------------------------------
00013888                            ; Animation script - harpoon (LZ)
00013888                            ; ---------------------------------------------------------------------------
00013888 0000                       		dc.w byte_11F8A-Ani_obj16
0001388A 0000                       		dc.w byte_11F8E-Ani_obj16
0001388C 0000                       		dc.w byte_11F92-Ani_obj16
0001388E 0000                       		dc.w byte_11F96-Ani_obj16
00013890 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00013894 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00013898 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
0001389C 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000138A0                            		even
000138A0                            		even
000138A0                            
000138A0                            ; ---------------------------------------------------------------------------
000138A0                            ; Sprite mappings - harpoon (LZ)
000138A0                            ; ---------------------------------------------------------------------------
000138A0                            Map_obj16:
000138A0                            	include "_maps\obj16.asm"
000138A0                            ; ---------------------------------------------------------------------------
000138A0                            ; Sprite mappings - harpoon (LZ)
000138A0                            ; ---------------------------------------------------------------------------
000138A0 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000138A4 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000138A8 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000138AC 01                         byte_11FA6:	dc.b 1
000138AD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000138B2 01                         byte_11FAC:	dc.b 1
000138B3 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000138B8 02                         byte_11FB2:	dc.b 2
000138B9 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000138BE FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000138C3 01                         byte_11FBD:	dc.b 1
000138C4 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000138C9 01                         byte_11FC3:	dc.b 1
000138CA E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000138CF 02                         byte_11FC9:	dc.b 2
000138D0 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000138D5 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000138DA                            		even
000138DA                            		even
000138DA                            
000138DA                            ; ===========================================================================
000138DA                            ; ---------------------------------------------------------------------------
000138DA                            ; Object 61 - blocks (LZ)
000138DA                            ; ---------------------------------------------------------------------------
000138DA                            
000138DA                            Obj61:					; XREF: Obj_Index
000138DA 7000                       		moveq	#0,d0
000138DC 1028 0024                  		move.b	$24(a0),d0
000138E0 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000138E4 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000138E8                            ; ===========================================================================
000138E8 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000138EA 0000                       		dc.w Obj61_Action-Obj61_Index
000138EC                            
000138EC 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000138EE 200C                       		dc.b $20, $C
000138F0 1010                       		dc.b $10, $10
000138F2 1010                       		dc.b $10, $10
000138F4                            ; ===========================================================================
000138F4                            
000138F4                            Obj61_Main:				; XREF: Obj61_Index
000138F4 5428 0024                  		addq.b	#2,$24(a0)
000138F8 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00013900 317C 43E6 0002             		move.w	#$43E6,2(a0)
00013906 117C 0004 0001             		move.b	#4,1(a0)
0001390C 117C 0003 0018             		move.b	#3,$18(a0)
00013912 7000                       		moveq	#0,d0
00013914 1028 0028                  		move.b	$28(a0),d0
00013918 E648                       		lsr.w	#3,d0
0001391A 0240 000E                  		andi.w	#$E,d0
0001391E 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00013922 115A 0019                  		move.b	(a2)+,$19(a0)
00013926 1152 0016                  		move.b	(a2),$16(a0)
0001392A E248                       		lsr.w	#1,d0
0001392C 1140 001A                  		move.b	d0,$1A(a0)
00013930 3168 0008 0034             		move.w	8(a0),$34(a0)
00013936 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001393C 1028 0028                  		move.b	$28(a0),d0
00013940 0200 000F                  		andi.b	#$F,d0
00013944 6700                       		beq.s	Obj61_Action
00013946 0C00 0007                  		cmpi.b	#7,d0
0001394A 6700                       		beq.s	Obj61_Action
0001394C 117C 0001 0038             		move.b	#1,$38(a0)
00013952                            
00013952                            Obj61_Action:				; XREF: Obj61_Index
00013952 3F28 0008                  		move.w	8(a0),-(sp)
00013956 7000                       		moveq	#0,d0
00013958 1028 0028                  		move.b	$28(a0),d0
0001395C 0240 000F                  		andi.w	#$F,d0
00013960 D040                       		add.w	d0,d0
00013962 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00013966 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
0001396A 381F                       		move.w	(sp)+,d4
0001396C 4A28 0001                  		tst.b	1(a0)
00013970 6A00                       		bpl.s	Obj61_ChkDel
00013972 7200                       		moveq	#0,d1
00013974 1228 0019                  		move.b	$19(a0),d1
00013978 0641 000B                  		addi.w	#$B,d1
0001397C 7400                       		moveq	#0,d2
0001397E 1428 0016                  		move.b	$16(a0),d2
00013982 3602                       		move.w	d2,d3
00013984 5243                       		addq.w	#1,d3
00013986 6100 D8E8                  		bsr.w	SolidObject
0001398A 1144 003F                  		move.b	d4,$3F(a0)
0001398E 6100 0000                  		bsr.w	loc_12180
00013992                            
00013992                            Obj61_ChkDel:
00013992 3028 0034                  		move.w	$34(a0),d0
00013996 0240 FF80                  		andi.w	#$FF80,d0
0001399A 3238 F700                  		move.w	($FFFFF700).w,d1
0001399E 0441 0080                  		subi.w	#$80,d1
000139A2 0241 FF80                  		andi.w	#$FF80,d1
000139A6 9041                       		sub.w	d1,d0
000139A8 0C40 0280                  		cmpi.w	#$280,d0
000139AC 6300 AF54                  		bls.w	DisplaySprite
000139B0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000139B4 6700 AF9C                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000139B8 3440                       		movea.w	d0,a2	; load address into a2
000139BA 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000139BE 6000 AF92                  		bra.w	DeleteObject
000139C2                            ; ===========================================================================
000139C2 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000139C6 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000139CA 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000139CE 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000139D2                            ; ===========================================================================
000139D2                            
000139D2                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000139D2 4E75                       		rts	
000139D4                            ; ===========================================================================
000139D4                            
000139D4                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000139D4 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000139D8 6600                       		bne.s	loc_120D6	; if yes, branch
000139DA 0828 0003 0022             		btst	#3,$22(a0)
000139E0 6700                       		beq.s	locret_120D4
000139E2 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
000139E8                            
000139E8                            locret_120D4:
000139E8 4E75                       		rts	
000139EA                            ; ===========================================================================
000139EA                            
000139EA                            loc_120D6:
000139EA 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000139EE 66F8                       		bne.s	locret_120D4	; if time remains, branch
000139F0 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000139F4 4228 0038                  		clr.b	$38(a0)
000139F8 4E75                       		rts	
000139FA                            ; ===========================================================================
000139FA                            
000139FA                            Obj61_Type02:				; XREF: Obj61_TypeIndex
000139FA 6100 AEEC                  		bsr.w	SpeedToPos
000139FE 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013A02 6100 0000                  		bsr.w	ObjHitFloor
00013A06 4A41                       		tst.w	d1
00013A08 6A00 0000                  		bpl.w	locret_12106
00013A0C 5241                       		addq.w	#1,d1
00013A0E D368 000C                  		add.w	d1,$C(a0)
00013A12 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013A16 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013A1A                            
00013A1A                            locret_12106:
00013A1A 4E75                       		rts	
00013A1C                            ; ===========================================================================
00013A1C                            
00013A1C                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013A1C 6100 AECA                  		bsr.w	SpeedToPos
00013A20 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013A24 6100 0000                  		bsr.w	ObjHitCeiling
00013A28 4A41                       		tst.w	d1
00013A2A 6A00 0000                  		bpl.w	locret_12126
00013A2E 9368 000C                  		sub.w	d1,$C(a0)
00013A32 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013A36 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013A3A                            
00013A3A                            locret_12126:
00013A3A 4E75                       		rts	
00013A3C                            ; ===========================================================================
00013A3C                            
00013A3C                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013A3C 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013A42 6600                       		bne.s	locret_12138	; if not, branch
00013A44 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013A48 4228 0038                  		clr.b	$38(a0)
00013A4C                            
00013A4C                            locret_12138:
00013A4C 4E75                       		rts	
00013A4E                            ; ===========================================================================
00013A4E                            
00013A4E                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013A4E 3038 F646                  		move.w	($FFFFF646).w,d0
00013A52 9068 000C                  		sub.w	$C(a0),d0
00013A56 6700                       		beq.s	locret_1217E
00013A58 6400                       		bcc.s	loc_12162
00013A5A 0C40 FFFE                  		cmpi.w	#-2,d0
00013A5E 6C00                       		bge.s	loc_1214E
00013A60 70FE                       		moveq	#-2,d0
00013A62                            
00013A62                            loc_1214E:
00013A62 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013A66 6100 0000                  		bsr.w	ObjHitCeiling
00013A6A 4A41                       		tst.w	d1
00013A6C 6A00 0000                  		bpl.w	locret_12160
00013A70 9368 000C                  		sub.w	d1,$C(a0)
00013A74                            
00013A74                            locret_12160:
00013A74 4E75                       		rts	
00013A76                            ; ===========================================================================
00013A76                            
00013A76                            loc_12162:				; XREF: Obj61_Type07
00013A76 0C40 0002                  		cmpi.w	#2,d0
00013A7A 6F00                       		ble.s	loc_1216A
00013A7C 7002                       		moveq	#2,d0
00013A7E                            
00013A7E                            loc_1216A:
00013A7E D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013A82 6100 0000                  		bsr.w	ObjHitFloor
00013A86 4A41                       		tst.w	d1
00013A88 6A00 0000                  		bpl.w	locret_1217E
00013A8C 5241                       		addq.w	#1,d1
00013A8E D368 000C                  		add.w	d1,$C(a0)
00013A92                            
00013A92                            locret_1217E:
00013A92 4E75                       		rts	
00013A94                            ; ===========================================================================
00013A94                            
00013A94                            loc_12180:				; XREF: Obj61_Action
00013A94 4A28 0038                  		tst.b	$38(a0)
00013A98 6700                       		beq.s	locret_121C0
00013A9A 0828 0003 0022             		btst	#3,$22(a0)
00013AA0 6600                       		bne.s	loc_1219A
00013AA2 4A28 003E                  		tst.b	$3E(a0)
00013AA6 6700                       		beq.s	locret_121C0
00013AA8 5928 003E                  		subq.b	#4,$3E(a0)
00013AAC 6000                       		bra.s	loc_121A6
00013AAE                            ; ===========================================================================
00013AAE                            
00013AAE                            loc_1219A:
00013AAE 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013AB4 6700                       		beq.s	locret_121C0
00013AB6 5828 003E                  		addq.b	#4,$3E(a0)
00013ABA                            
00013ABA                            loc_121A6:
00013ABA 1028 003E                  		move.b	$3E(a0),d0
00013ABE 4EB9 0000 29CC             		jsr	(CalcSine).l
00013AC4 323C 0400                  		move.w	#$400,d1
00013AC8 C1C1                       		muls.w	d1,d0
00013ACA 4840                       		swap	d0
00013ACC D068 0030                  		add.w	$30(a0),d0
00013AD0 3140 000C                  		move.w	d0,$C(a0)
00013AD4                            
00013AD4                            locret_121C0:
00013AD4 4E75                       		rts	
00013AD6                            ; ===========================================================================
00013AD6                            ; ---------------------------------------------------------------------------
00013AD6                            ; Sprite mappings - blocks (LZ)
00013AD6                            ; ---------------------------------------------------------------------------
00013AD6                            Map_obj61:
00013AD6                            	include "_maps\obj61.asm"
00013AD6                            ; ---------------------------------------------------------------------------
00013AD6                            ; Sprite mappings - blocks (LZ)
00013AD6                            ; ---------------------------------------------------------------------------
00013AD6 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013ADA 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013ADE 01                         byte_121CA:	dc.b 1
00013ADF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013AE4 02                         byte_121D0:	dc.b 2
00013AE5 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013AEA F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013AEF 01                         byte_121DB:	dc.b 1
00013AF0 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013AF5 01                         byte_121E1:	dc.b 1
00013AF6 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013AFC 00                         		even
00013AFC 00                         		even
00013AFC                            
00013AFC                            ; ===========================================================================
00013AFC                            ; ---------------------------------------------------------------------------
00013AFC                            ; Object 62 - gargoyle head (LZ)
00013AFC                            ; ---------------------------------------------------------------------------
00013AFC                            
00013AFC                            Obj62:					; XREF: Obj_Index
00013AFC 7000                       		moveq	#0,d0
00013AFE 1028 0024                  		move.b	$24(a0),d0
00013B02 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013B06 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013B0A 6000 D440                  		bra.w	MarkObjGone
00013B0E                            ; ===========================================================================
00013B0E 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013B10 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013B12 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013B14 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013B16                            
00013B16 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013B1E                            ; ===========================================================================
00013B1E                            
00013B1E                            Obj62_Main:				; XREF: Obj62_Index
00013B1E 5428 0024                  		addq.b	#2,$24(a0)
00013B22 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013B2A 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013B30 0028 0004 0001             		ori.b	#4,1(a0)
00013B36 117C 0003 0018             		move.b	#3,$18(a0)
00013B3C 117C 0010 0019             		move.b	#$10,$19(a0)
00013B42 1028 0028                  		move.b	$28(a0),d0	; get object type
00013B46 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013B4A 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013B50 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013B56 0228 000F 0028             		andi.b	#$F,$28(a0)
00013B5C                            
00013B5C                            Obj62_MakeFire:				; XREF: Obj62_Index
00013B5C 5328 001E                  		subq.b	#1,$1E(a0)
00013B60 6600                       		bne.s	Obj62_NoFire
00013B62 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013B68 6100 B15E                  		bsr.w	ChkObjOnScreen
00013B6C 6600                       		bne.s	Obj62_NoFire
00013B6E 6100 B4E8                  		bsr.w	SingleObjLoad
00013B72 6600                       		bne.s	Obj62_NoFire
00013B74 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013B78 5829 0024                  		addq.b	#4,$24(a1)
00013B7C 3368 0008 0008             		move.w	8(a0),8(a1)
00013B82 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013B88 1368 0001 0001             		move.b	1(a0),1(a1)
00013B8E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013B94                            
00013B94                            Obj62_NoFire:
00013B94 4E75                       		rts	
00013B96                            ; ===========================================================================
00013B96                            
00013B96                            Obj62_FireBall:				; XREF: Obj62_Index
00013B96 5428 0024                  		addq.b	#2,$24(a0)
00013B9A 117C 0008 0016             		move.b	#8,$16(a0)
00013BA0 117C 0008 0017             		move.b	#8,$17(a0)
00013BA6 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013BAE 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013BB4 0028 0004 0001             		ori.b	#4,1(a0)
00013BBA 117C 0004 0018             		move.b	#4,$18(a0)
00013BC0 117C 0098 0020             		move.b	#$98,$20(a0)
00013BC6 117C 0008 0019             		move.b	#8,$19(a0)
00013BCC 117C 0002 001A             		move.b	#2,$1A(a0)
00013BD2 5068 000C                  		addq.w	#8,$C(a0)
00013BD6 317C 0200 0010             		move.w	#$200,$10(a0)
00013BDC 0828 0000 0022             		btst	#0,$22(a0)
00013BE2 6600                       		bne.s	Obj62_Sound
00013BE4 4468 0010                  		neg.w	$10(a0)
00013BE8                            
00013BE8                            Obj62_Sound:
00013BE8 303C 00AE                  		move.w	#$AE,d0
00013BEC 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013BF2                            
00013BF2                            Obj62_AniFire:				; XREF: Obj62_Index
00013BF2 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013BF6 0200 0007                  		andi.b	#7,d0
00013BFA 6600                       		bne.s	Obj62_StopFire
00013BFC 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013C02                            
00013C02                            Obj62_StopFire:
00013C02 6100 ACE4                  		bsr.w	SpeedToPos
00013C06 0828 0000 0022             		btst	#0,$22(a0)
00013C0C 6600                       		bne.s	Obj62_StopFire2
00013C0E 76F8                       		moveq	#-8,d3
00013C10 6100 0000                  		bsr.w	ObjHitWallLeft
00013C14 4A41                       		tst.w	d1
00013C16 6B00 AD3A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013C1A 4E75                       		rts	
00013C1C                            ; ===========================================================================
00013C1C                            
00013C1C                            Obj62_StopFire2:
00013C1C 7608                       		moveq	#8,d3
00013C1E 6100 0000                  		bsr.w	ObjHitWallRight
00013C22 4A41                       		tst.w	d1
00013C24 6B00 AD2C                  		bmi.w	DeleteObject
00013C28 4E75                       		rts	
00013C2A                            ; ===========================================================================
00013C2A                            ; ---------------------------------------------------------------------------
00013C2A                            ; Sprite mappings - gargoyle head (LZ)
00013C2A                            ; ---------------------------------------------------------------------------
00013C2A                            Map_obj62:
00013C2A                            	include "_maps\obj62.asm"
00013C2A                            ; ---------------------------------------------------------------------------
00013C2A                            ; Sprite mappings - gargoyle head (LZ)
00013C2A                            ; ---------------------------------------------------------------------------
00013C2A 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013C2E 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013C32 03                         byte_12320:	dc.b 3
00013C33 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013C38 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013C3D 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013C42 01                         byte_12330:	dc.b 1
00013C43 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013C48 01                         byte_12336:	dc.b 1
00013C49 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013C4E                            		even
00013C4E                            		even
00013C4E                            
00013C4E                            ; ===========================================================================
00013C4E                            ; ---------------------------------------------------------------------------
00013C4E                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013C4E                            ; ---------------------------------------------------------------------------
00013C4E                            
00013C4E                            Obj63:					; XREF: Obj_Index
00013C4E 7000                       		moveq	#0,d0
00013C50 1028 0024                  		move.b	$24(a0),d0
00013C54 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013C58 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013C5C 3028 0030                  		move.w	$30(a0),d0
00013C60 0240 FF80                  		andi.w	#$FF80,d0
00013C64 3238 F700                  		move.w	($FFFFF700).w,d1
00013C68 0441 0080                  		subi.w	#$80,d1
00013C6C 0241 FF80                  		andi.w	#$FF80,d1
00013C70 9041                       		sub.w	d1,d0
00013C72 0C40 0280                  		cmpi.w	#$280,d0
00013C76 6300                       		bls.s	Obj63_Display
00013C78 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013C7C 6700                       		beq.s	loc_1236A		; if it's zero, don't remember object
00013C7E 3440                       		movea.w	d0,a2	; load address into a2
00013C80 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00013C84 6000                       		bra.s	loc_1236A	; and delete object
00013C86                            
00013C86                            Obj63_Display:				; XREF: loc_1236A
00013C86 6000 AC7A                  		bra.w	DisplaySprite
00013C8A                            ; ===========================================================================
00013C8A                            
00013C8A                            loc_1236A:				; XREF: Obj63
00013C8A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013C90 6600                       		bne.s	loc_12378
00013C92 0C40 FF80                  		cmpi.w	#-$80,d0
00013C96 64EE                       		bcc.s	Obj63_Display
00013C98                            
00013C98                            loc_12378:
00013C98 1028 002F                  		move.b	$2F(a0),d0
00013C9C 6A00 ACB4                  		bpl.w	DeleteObject
00013CA0 0240 007F                  		andi.w	#$7F,d0
00013CA4 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013CA8 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013CAE 6000 ACA2                  		bra.w	DeleteObject
00013CB2                            ; ===========================================================================
00013CB2 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013CB4 0000                       		dc.w loc_124B2-Obj63_Index
00013CB6 0000                       		dc.w loc_124C2-Obj63_Index
00013CB8 0000                       		dc.w loc_124DE-Obj63_Index
00013CBA                            ; ===========================================================================
00013CBA                            
00013CBA                            Obj63_Main:				; XREF: Obj63_Index
00013CBA 1028 0028                  		move.b	$28(a0),d0
00013CBE 6B00 0000                  		bmi.w	loc_12460
00013CC2 5428 0024                  		addq.b	#2,$24(a0)
00013CC6 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013CCE 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013CD4 0028 0004 0001             		ori.b	#4,1(a0)
00013CDA 117C 0010 0019             		move.b	#$10,$19(a0)
00013CE0 117C 0004 0018             		move.b	#4,$18(a0)
00013CE6 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013CEC 6600                       		bne.s	loc_123E2
00013CEE 5828 0024                  		addq.b	#4,$24(a0)
00013CF2 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013CF8 117C 0001 0018             		move.b	#1,$18(a0)
00013CFE 6000 0000                  		bra.w	loc_124DE
00013D02                            ; ===========================================================================
00013D02                            
00013D02                            loc_123E2:
00013D02 117C 0004 001A             		move.b	#4,$1A(a0)
00013D08 7000                       		moveq	#0,d0
00013D0A 1028 0028                  		move.b	$28(a0),d0
00013D0E 3200                       		move.w	d0,d1
00013D10 E648                       		lsr.w	#3,d0
00013D12 0240 001E                  		andi.w	#$1E,d0
00013D16 45FA 0000                  		lea	Obj63_Data(pc),a2
00013D1A D4F2 0000                  		adda.w	(a2,d0.w),a2
00013D1E 315A 0038                  		move.w	(a2)+,$38(a0)
00013D22 315A 0030                  		move.w	(a2)+,$30(a0)
00013D26 214A 003C                  		move.l	a2,$3C(a0)
00013D2A 0241 000F                  		andi.w	#$F,d1
00013D2E E549                       		lsl.w	#2,d1
00013D30 1141 0038                  		move.b	d1,$38(a0)
00013D34 117C 0004 003A             		move.b	#4,$3A(a0)
00013D3A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013D3E 6700                       		beq.s	loc_1244C
00013D40 117C 0001 003B             		move.b	#1,$3B(a0)
00013D46 4428 003A                  		neg.b	$3A(a0)
00013D4A 7200                       		moveq	#0,d1
00013D4C 1228 0038                  		move.b	$38(a0),d1
00013D50 D228 003A                  		add.b	$3A(a0),d1
00013D54 B228 0039                  		cmp.b	$39(a0),d1
00013D58 6500                       		bcs.s	loc_12448
00013D5A 1001                       		move.b	d1,d0
00013D5C 7200                       		moveq	#0,d1
00013D5E 4A00                       		tst.b	d0
00013D60 6A00                       		bpl.s	loc_12448
00013D62 1228 0039                  		move.b	$39(a0),d1
00013D66 5901                       		subq.b	#4,d1
00013D68                            
00013D68                            loc_12448:
00013D68 1141 0038                  		move.b	d1,$38(a0)
00013D6C                            
00013D6C                            loc_1244C:
00013D6C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013D72 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013D78 6100 0000                  		bsr.w	Obj63_ChangeDir
00013D7C 6000 0000                  		bra.w	loc_124B2
00013D80                            ; ===========================================================================
00013D80                            
00013D80                            loc_12460:				; XREF: Obj63_Main
00013D80 1140 002F                  		move.b	d0,$2F(a0)
00013D84 0240 007F                  		andi.w	#$7F,d0
00013D88 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013D8C 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013D92 6600 ABBE                  		bne.w	DeleteObject
00013D96 D040                       		add.w	d0,d0
00013D98 0240 001E                  		andi.w	#$1E,d0
00013D9C 0640 0070                  		addi.w	#$70,d0
00013DA0 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00013DA6 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013DAA 321A                       		move.w	(a2)+,d1
00013DAC 2248                       		movea.l	a0,a1
00013DAE 6000                       		bra.s	Obj63_MakePtfms
00013DB0                            ; ===========================================================================
00013DB0                            
00013DB0                            Obj63_Loop:
00013DB0 6100 B2A6                  		bsr.w	SingleObjLoad
00013DB4 6600                       		bne.s	loc_124AA
00013DB6                            
00013DB6                            Obj63_MakePtfms:			; XREF: loc_12460
00013DB6 12BC 0063                  		move.b	#$63,0(a1)
00013DBA 335A 0008                  		move.w	(a2)+,8(a1)
00013DBE 335A 000C                  		move.w	(a2)+,$C(a1)
00013DC2 301A                       		move.w	(a2)+,d0
00013DC4 1340 0028                  		move.b	d0,$28(a1)
00013DC8                            
00013DC8                            loc_124AA:
00013DC8 51C9 FFE6                  		dbf	d1,Obj63_Loop
00013DCC                            
00013DCC 588F                       		addq.l	#4,sp
00013DCE 4E75                       		rts	
00013DD0                            ; ===========================================================================
00013DD0                            
00013DD0                            loc_124B2:				; XREF: Obj63_Index
00013DD0 7200                       		moveq	#0,d1
00013DD2 1228 0019                  		move.b	$19(a0),d1
00013DD6 4EB9 0000 8510             		jsr	(PlatformObject).l
00013DDC 6000 0000                  		bra.w	sub_12502
00013DE0                            ; ===========================================================================
00013DE0                            
00013DE0                            loc_124C2:				; XREF: Obj63_Index
00013DE0 7200                       		moveq	#0,d1
00013DE2 1228 0019                  		move.b	$19(a0),d1
00013DE6 4EB9 0000 8684             		jsr	(ExitPlatform).l
00013DEC 3F28 0008                  		move.w	8(a0),-(sp)
00013DF0 6100 0000                  		bsr.w	sub_12502
00013DF4 341F                       		move.w	(sp)+,d2
00013DF6 4EF9 0000 8BFA             		jmp	(MvSonicOnPtfm2).l
00013DFC                            ; ===========================================================================
00013DFC                            
00013DFC                            loc_124DE:				; XREF: Obj63_Index
00013DFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013E00 0240 0003                  		andi.w	#3,d0
00013E04 6600                       		bne.s	loc_124FC
00013E06 7201                       		moveq	#1,d1
00013E08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013E0C 6700                       		beq.s	loc_124F2
00013E0E 4401                       		neg.b	d1
00013E10                            
00013E10                            loc_124F2:
00013E10 D328 001A                  		add.b	d1,$1A(a0)
00013E14 0228 0003 001A             		andi.b	#3,$1A(a0)
00013E1A                            
00013E1A                            loc_124FC:
00013E1A 588F                       		addq.l	#4,sp
00013E1C 6000 D12E                  		bra.w	MarkObjGone
00013E20                            
00013E20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E20                            
00013E20                            
00013E20                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013E20 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013E24 6700                       		beq.s	loc_12520
00013E26 4A28 003B                  		tst.b	$3B(a0)
00013E2A 6600                       		bne.s	loc_12520
00013E2C 117C 0001 003B             		move.b	#1,$3B(a0)
00013E32 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013E38 4428 003A                  		neg.b	$3A(a0)
00013E3C 6000                       		bra.s	loc_12534
00013E3E                            ; ===========================================================================
00013E3E                            
00013E3E                            loc_12520:
00013E3E 3028 0008                  		move.w	8(a0),d0
00013E42 B068 0034                  		cmp.w	$34(a0),d0
00013E46 6600                       		bne.s	loc_1256A
00013E48 3028 000C                  		move.w	$C(a0),d0
00013E4C B068 0036                  		cmp.w	$36(a0),d0
00013E50 6600                       		bne.s	loc_1256A
00013E52                            
00013E52                            loc_12534:
00013E52 7200                       		moveq	#0,d1
00013E54 1228 0038                  		move.b	$38(a0),d1
00013E58 D228 003A                  		add.b	$3A(a0),d1
00013E5C B228 0039                  		cmp.b	$39(a0),d1
00013E60 6500                       		bcs.s	loc_12552
00013E62 1001                       		move.b	d1,d0
00013E64 7200                       		moveq	#0,d1
00013E66 4A00                       		tst.b	d0
00013E68 6A00                       		bpl.s	loc_12552
00013E6A 1228 0039                  		move.b	$39(a0),d1
00013E6E 5901                       		subq.b	#4,d1
00013E70                            
00013E70                            loc_12552:
00013E70 1141 0038                  		move.b	d1,$38(a0)
00013E74 2268 003C                  		movea.l	$3C(a0),a1
00013E78 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013E7E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013E84 6100 0000                  		bsr.w	Obj63_ChangeDir
00013E88                            
00013E88                            loc_1256A:
00013E88 6100 AA5E                  		bsr.w	SpeedToPos
00013E8C 4E75                       		rts	
00013E8E                            ; End of function sub_12502
00013E8E                            
00013E8E                            
00013E8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E8E                            
00013E8E                            
00013E8E                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013E8E 7000                       		moveq	#0,d0
00013E90 343C FF00                  		move.w	#-$100,d2
00013E94 3028 0008                  		move.w	8(a0),d0
00013E98 9068 0034                  		sub.w	$34(a0),d0
00013E9C 6400                       		bcc.s	loc_12584
00013E9E 4440                       		neg.w	d0
00013EA0 4442                       		neg.w	d2
00013EA2                            
00013EA2                            loc_12584:
00013EA2 7200                       		moveq	#0,d1
00013EA4 363C FF00                  		move.w	#-$100,d3
00013EA8 3228 000C                  		move.w	$C(a0),d1
00013EAC 9268 0036                  		sub.w	$36(a0),d1
00013EB0 6400                       		bcc.s	loc_12598
00013EB2 4441                       		neg.w	d1
00013EB4 4443                       		neg.w	d3
00013EB6                            
00013EB6                            loc_12598:
00013EB6 B240                       		cmp.w	d0,d1
00013EB8 6500                       		bcs.s	loc_125C2
00013EBA 3028 0008                  		move.w	8(a0),d0
00013EBE 9068 0034                  		sub.w	$34(a0),d0
00013EC2 6700                       		beq.s	loc_125AE
00013EC4 48C0                       		ext.l	d0
00013EC6 E180                       		asl.l	#8,d0
00013EC8 81C1                       		divs.w	d1,d0
00013ECA 4440                       		neg.w	d0
00013ECC                            
00013ECC                            loc_125AE:
00013ECC 3140 0010                  		move.w	d0,$10(a0)
00013ED0 3143 0012                  		move.w	d3,$12(a0)
00013ED4 4840                       		swap	d0
00013ED6 3140 000A                  		move.w	d0,$A(a0)
00013EDA 4268 000E                  		clr.w	$E(a0)
00013EDE 4E75                       		rts	
00013EE0                            ; ===========================================================================
00013EE0                            
00013EE0                            loc_125C2:				; XREF: Obj63_ChangeDir
00013EE0 3228 000C                  		move.w	$C(a0),d1
00013EE4 9268 0036                  		sub.w	$36(a0),d1
00013EE8 6700                       		beq.s	loc_125D4
00013EEA 48C1                       		ext.l	d1
00013EEC E181                       		asl.l	#8,d1
00013EEE 83C0                       		divs.w	d0,d1
00013EF0 4441                       		neg.w	d1
00013EF2                            
00013EF2                            loc_125D4:
00013EF2 3141 0012                  		move.w	d1,$12(a0)
00013EF6 3142 0010                  		move.w	d2,$10(a0)
00013EFA 4841                       		swap	d1
00013EFC 3141 000E                  		move.w	d1,$E(a0)
00013F00 4268 000A                  		clr.w	$A(a0)
00013F04 4E75                       		rts	
00013F06                            ; End of function Obj63_ChangeDir
00013F06                            
00013F06                            ; ===========================================================================
00013F06 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013F08 0000                       		dc.w word_12610-Obj63_Data
00013F0A 0000                       		dc.w word_12628-Obj63_Data
00013F0C 0000                       		dc.w word_1263C-Obj63_Data
00013F0E 0000                       		dc.w word_12650-Obj63_Data
00013F10 0000                       		dc.w word_12668-Obj63_Data
00013F12 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013F22 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013F2E 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013F3E 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013F46 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013F5A 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013F6E 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013F86 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013F9A                            
00013F9A                            ; ---------------------------------------------------------------------------
00013F9A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013F9A                            ; ---------------------------------------------------------------------------
00013F9A                            Map_obj63:
00013F9A                            	include "_maps\obj63.asm"
00013F9A                            ; ---------------------------------------------------------------------------
00013F9A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013F9A                            ; ---------------------------------------------------------------------------
00013F9A 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013F9E 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013FA2 0000                       		dc.w byte_1269E-Map_obj63
00013FA4 01                         byte_12686:	dc.b 1
00013FA5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013FAA 01                         byte_1268C:	dc.b 1
00013FAB F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00013FB0 01                         byte_12692:	dc.b 1
00013FB1 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00013FB6 01                         byte_12698:	dc.b 1
00013FB7 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00013FBC 01                         byte_1269E:	dc.b 1
00013FBD F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00013FC2                            		even
00013FC2                            		even
00013FC2                            
00013FC2                            ; ===========================================================================
00013FC2                            ; ---------------------------------------------------------------------------
00013FC2                            ; Object 64 - bubbles (LZ)
00013FC2                            ; ---------------------------------------------------------------------------
00013FC2                            
00013FC2                            Obj64:					; XREF: Obj_Index
00013FC2 7000                       		moveq	#0,d0
00013FC4 1028 0024                  		move.b	$24(a0),d0
00013FC8 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00013FCC 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00013FD0                            ; ===========================================================================
00013FD0 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00013FD2 0000                       		dc.w Obj64_Animate-Obj64_Index
00013FD4 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00013FD6 0000                       		dc.w Obj64_Display2-Obj64_Index
00013FD8 0000                       		dc.w Obj64_Delete3-Obj64_Index
00013FDA 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00013FDC                            ; ===========================================================================
00013FDC                            
00013FDC                            Obj64_Main:				; XREF: Obj64_Index
00013FDC 5428 0024                  		addq.b	#2,$24(a0)
00013FE0 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00013FE8 317C 8348 0002             		move.w	#$8348,2(a0)
00013FEE 117C 0084 0001             		move.b	#$84,1(a0)
00013FF4 117C 0010 0019             		move.b	#$10,$19(a0)
00013FFA 117C 0001 0018             		move.b	#1,$18(a0)
00014000 1028 0028                  		move.b	$28(a0),d0	; get object type
00014004 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00014006 5028 0024                  		addq.b	#8,$24(a0)
0001400A 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001400E 1140 0032                  		move.b	d0,$32(a0)
00014012 1140 0033                  		move.b	d0,$33(a0)
00014016 117C 0006 001C             		move.b	#6,$1C(a0)
0001401C 6000 0000                  		bra.w	Obj64_BblMaker
00014020                            ; ===========================================================================
00014020                            
00014020                            Obj64_Bubble:				; XREF: Obj64_Main
00014020 1140 001C                  		move.b	d0,$1C(a0)
00014024 3168 0008 0030             		move.w	8(a0),$30(a0)
0001402A 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00014030 4EB9 0000 29A6             		jsr	(RandomNumber).l
00014036 1140 0026                  		move.b	d0,$26(a0)
0001403A                            
0001403A                            Obj64_Animate:				; XREF: Obj64_Index
0001403A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00014040 4EB9 0000 B962             		jsr	AnimateSprite
00014046 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001404C 6600                       		bne.s	Obj64_ChkWater
0001404E 117C 0001 002E             		move.b	#1,$2E(a0)
00014054                            
00014054                            Obj64_ChkWater:				; XREF: Obj64_Index
00014054 3038 F646                  		move.w	($FFFFF646).w,d0
00014058 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001405C 6400                       		bcc.s	Obj64_Burst	; if yes, branch
0001405E 3038 F60E                  		move.w	(v_pocketbottom).w,d0
00014062 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00014066 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00014068 3028 0008                  		move.w	8(a0),d0
0001406C 9078 F610                  		sub.w	(v_pocketx).w,d0
00014070 0640 0060                  		addi.w	#$60,d0
00014074 6B00                       		bmi.s	Obj64_Wobble
00014076 0C40 00C0                  		cmpi.w	#$C0,d0
0001407A 6400                       		bcc.s	Obj64_Wobble
0001407C                            
0001407C                            Obj64_Burst:				; XREF: Obj64_Wobble
0001407C 117C 0006 0024             		move.b	#6,$24(a0)
00014082 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00014086 6000 0000                  		bra.w	Obj64_Display2
0001408A                            ; ===========================================================================
0001408A                            
0001408A                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001408A 1028 0026                  		move.b	$26(a0),d0
0001408E 5228 0026                  		addq.b	#1,$26(a0)
00014092 0240 007F                  		andi.w	#$7F,d0
00014096 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001409C 1031 0000                  		move.b	(a1,d0.w),d0
000140A0 4880                       		ext.w	d0
000140A2 D068 0030                  		add.w	$30(a0),d0
000140A6 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000140AA 4A28 002E                  		tst.b	$2E(a0)
000140AE 6700                       		beq.s	Obj64_Display
000140B0 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000140B4 6700                       		beq.s	Obj64_Display	; if not, branch
000140B6                            
000140B6 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000140BA 303C 00AD                  		move.w	#$AD,d0
000140BE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000140C4 43F8 D000                  		lea	($FFFFD000).w,a1
000140C8 4269 0010                  		clr.w	$10(a1)
000140CC 4269 0012                  		clr.w	$12(a1)
000140D0 4269 0020                  		clr.w	$20(a1)
000140D4 137C 0015 001C             		move.b	#$15,$1C(a1)
000140DA 337C 0023 003E             		move.w	#$23,$3E(a1)
000140E0 137C 0000 003C             		move.b	#0,$3C(a1)
000140E6 08A9 0005 0022             		bclr	#5,$22(a1)
000140EC 08A9 0004 0022             		bclr	#4,$22(a1)
000140F2 0829 0002 0022             		btst	#2,$22(a1)
000140F8 6700 FF82                  		beq.w	Obj64_Burst
000140FC 08A9 0002 0022             		bclr	#2,$22(a1)
00014102 137C 0013 0016             		move.b	#$13,$16(a1)
00014108 137C 0009 0017             		move.b	#9,$17(a1)
0001410E 5B69 000C                  		subq.w	#5,$C(a1)
00014112 6000 FF68                  		bra.w	Obj64_Burst
00014116                            ; ===========================================================================
00014116                            
00014116                            Obj64_Display:				; XREF: Obj64_Wobble
00014116 6100 A7D0                  		bsr.w	SpeedToPos
0001411A 4A28 0001                  		tst.b	1(a0)
0001411E 6A00                       		bpl.s	Obj64_Delete
00014120 4EFA A7E0                  		jmp	DisplaySprite
00014124                            ; ===========================================================================
00014124                            
00014124                            Obj64_Delete:
00014124 4EFA A82C                  		jmp	DeleteObject
00014128                            ; ===========================================================================
00014128                            
00014128                            Obj64_Display2:				; XREF: Obj64_Index
00014128 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001412E 4EB9 0000 B962             		jsr	AnimateSprite
00014134 4A28 0001                  		tst.b	1(a0)
00014138 6A00                       		bpl.s	Obj64_Delete2
0001413A 4EFA A7C6                  		jmp	DisplaySprite
0001413E                            ; ===========================================================================
0001413E                            
0001413E                            Obj64_Delete2:
0001413E 4EFA A812                  		jmp	DeleteObject
00014142                            ; ===========================================================================
00014142                            
00014142                            Obj64_Delete3:				; XREF: Obj64_Index
00014142 6000 A80E                  		bra.w	DeleteObject
00014146                            ; ===========================================================================
00014146                            
00014146                            Obj64_BblMaker:				; XREF: Obj64_Index
00014146 4A68 0036                  		tst.w	$36(a0)
0001414A 6600                       		bne.s	loc_12874
0001414C 3038 F646                  		move.w	($FFFFF646).w,d0
00014150 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00014154 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00014158 3038 F60E                  		move.w	(v_pocketbottom).w,d0
0001415C B068 000C                  		cmp.w	$C(a0),d0
00014160 6500                       		bcs.s	Obj64_Cont
00014162 3028 0008                  		move.w	8(a0),d0
00014166 9078 F610                  		sub.w	(v_pocketx).w,d0
0001416A 0640 0060                  		addi.w	#$60,d0
0001416E 6B00                       		bmi.s	Obj64_Cont
00014170 0C40 00C0                  		cmpi.w	#$C0,d0
00014174 6400                       		bcc.s	Obj64_Cont
00014176 6000 0000                  		bra.w	Obj64_ChkDel
0001417A                            
0001417A                            Obj64_Cont:
0001417A 4A28 0001                  		tst.b	1(a0)
0001417E 6A00 0000                  		bpl.w	Obj64_ChkDel
00014182 5368 0038                  		subq.w	#1,$38(a0)
00014186 6A00 0000                  		bpl.w	loc_12914
0001418A 317C 0001 0036             		move.w	#1,$36(a0)
00014190                            
00014190                            loc_1283A:
00014190 4EB9 0000 29A6             		jsr	(RandomNumber).l
00014196 3200                       		move.w	d0,d1
00014198 0240 0007                  		andi.w	#7,d0
0001419C 0C40 0006                  		cmpi.w	#6,d0
000141A0 64EE                       		bcc.s	loc_1283A
000141A2                            
000141A2 1140 0034                  		move.b	d0,$34(a0)
000141A6 0241 000C                  		andi.w	#$C,d1
000141AA 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000141B0 D2C1                       		adda.w	d1,a1
000141B2 2149 003C                  		move.l	a1,$3C(a0)
000141B6 5328 0032                  		subq.b	#1,$32(a0)
000141BA 6A00                       		bpl.s	loc_12872
000141BC 1168 0033 0032             		move.b	$33(a0),$32(a0)
000141C2 08E8 0007 0036             		bset	#7,$36(a0)
000141C8                            
000141C8                            loc_12872:
000141C8 6000                       		bra.s	loc_1287C
000141CA                            ; ===========================================================================
000141CA                            
000141CA                            loc_12874:				; XREF: Obj64_BblMaker
000141CA 5368 0038                  		subq.w	#1,$38(a0)
000141CE 6A00 0000                  		bpl.w	loc_12914
000141D2                            
000141D2                            loc_1287C:
000141D2 4EB9 0000 29A6             		jsr	(RandomNumber).l
000141D8 0240 001F                  		andi.w	#$1F,d0
000141DC 3140 0038                  		move.w	d0,$38(a0)
000141E0 6100 AE76                  		bsr.w	SingleObjLoad
000141E4 6600                       		bne.s	loc_128F8
000141E6 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000141EA 3368 0008 0008             		move.w	8(a0),8(a1)
000141F0 4EB9 0000 29A6             		jsr	(RandomNumber).l
000141F6 0240 000F                  		andi.w	#$F,d0
000141FA 5140                       		subq.w	#8,d0
000141FC D169 0008                  		add.w	d0,8(a1)
00014200 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014206 7000                       		moveq	#0,d0
00014208 1028 0034                  		move.b	$34(a0),d0
0001420C 2468 003C                  		movea.l	$3C(a0),a2
00014210 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00014216 0828 0007 0036             		btst	#7,$36(a0)
0001421C 6700                       		beq.s	loc_128F8
0001421E 4EB9 0000 29A6             		jsr	(RandomNumber).l
00014224 0240 0003                  		andi.w	#3,d0
00014228 6600                       		bne.s	loc_128E4
0001422A 08E8 0006 0036             		bset	#6,$36(a0)
00014230 6600                       		bne.s	loc_128F8
00014232 137C 0002 0028             		move.b	#2,$28(a1)
00014238                            
00014238                            loc_128E4:
00014238 4A28 0034                  		tst.b	$34(a0)
0001423C 6600                       		bne.s	loc_128F8
0001423E 08E8 0006 0036             		bset	#6,$36(a0)
00014244 6600                       		bne.s	loc_128F8
00014246 137C 0002 0028             		move.b	#2,$28(a1)
0001424C                            
0001424C                            loc_128F8:
0001424C 5328 0034                  		subq.b	#1,$34(a0)
00014250 6A00                       		bpl.s	loc_12914
00014252 4EB9 0000 29A6             		jsr	(RandomNumber).l
00014258 0240 007F                  		andi.w	#$7F,d0
0001425C 0640 0080                  		addi.w	#$80,d0
00014260 D168 0038                  		add.w	d0,$38(a0)
00014264 4268 0036                  		clr.w	$36(a0)
00014268                            
00014268                            loc_12914:
00014268 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001426E 4EB9 0000 B962             		jsr	AnimateSprite
00014274                            
00014274                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00014274 3028 0008                  		move.w	8(a0),d0
00014278 0240 FF80                  		andi.w	#$FF80,d0
0001427C 3238 F700                  		move.w	($FFFFF700).w,d1
00014280 0441 0080                  		subi.w	#$80,d1
00014284 0241 FF80                  		andi.w	#$FF80,d1
00014288 9041                       		sub.w	d1,d0
0001428A 0C40 0280                  		cmpi.w	#$280,d0
0001428E 6300                       		bls.s	Obj64_NoDel
00014290 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00014294 6700 A6BC                  		beq.w	DeleteObject		; if it's zero, don't remember object
00014298 3440                       		movea.w	d0,a2	; load address into a2
0001429A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001429E 6000 A6B2                  		bra.w	DeleteObject	; and delete object
000142A2                            
000142A2                            Obj64_NoDel:	
000142A2 3038 F646                  		move.w	($FFFFF646).w,d0
000142A6 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000142AA 6400                       		bcc.s	Obj64_UW	; if not, branch
000142AC 3038 F60E                  		move.w	(v_pocketbottom).w,d0
000142B0 B068 000C                  		cmp.w	$C(a0),d0
000142B4 6500 A64C                  		bcs.w	DisplaySprite
000142B8 3028 0008                  		move.w	8(a0),d0
000142BC 9078 F610                  		sub.w	(v_pocketx).w,d0
000142C0 0640 0060                  		addi.w	#$60,d0
000142C4 6B00 A63C                  		bmi.w	DisplaySprite
000142C8 0C40 00C0                  		cmpi.w	#$C0,d0
000142CC 6400 A634                  		bcc.w	DisplaySprite
000142D0                            
000142D0                            Obj64_UW:
000142D0 4E75                       		rts	
000142D2                            ; ===========================================================================
000142D2                            ; bubble production sequence
000142D2                            
000142D2                            ; 0 = small bubble, 1 =	large bubble
000142D2                            
000142D2 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000142E4                            
000142E4                            ; ===========================================================================
000142E4                            
000142E4                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000142E4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000142E8 6B00                       		bmi.s	loc_12998
000142EA 43F8 D000                  		lea	($FFFFD000).w,a1
000142EE 3029 0008                  		move.w	8(a1),d0
000142F2 3228 0008                  		move.w	8(a0),d1
000142F6 0441 0010                  		subi.w	#$10,d1
000142FA B240                       		cmp.w	d0,d1
000142FC 6400                       		bcc.s	loc_12998
000142FE 0641 0020                  		addi.w	#$20,d1
00014302 B240                       		cmp.w	d0,d1
00014304 6500                       		bcs.s	loc_12998
00014306 3029 000C                  		move.w	$C(a1),d0
0001430A 3228 000C                  		move.w	$C(a0),d1
0001430E B240                       		cmp.w	d0,d1
00014310 6400                       		bcc.s	loc_12998
00014312 0641 0010                  		addi.w	#$10,d1
00014316 B240                       		cmp.w	d0,d1
00014318 6500                       		bcs.s	loc_12998
0001431A 7001                       		moveq	#1,d0
0001431C 4E75                       		rts	
0001431E                            ; ===========================================================================
0001431E                            
0001431E                            loc_12998:
0001431E 7000                       		moveq	#0,d0
00014320 4E75                       		rts	
00014322                            ; ===========================================================================
00014322                            Ani_obj64:
00014322                            	include "_anim\obj64.asm"
00014322                            ; ---------------------------------------------------------------------------
00014322                            ; Animation script - bubbles (LZ)
00014322                            ; ---------------------------------------------------------------------------
00014322 0000                       		dc.w byte_129AA-Ani_obj64
00014324 0000                       		dc.w byte_129B0-Ani_obj64
00014326 0000                       		dc.w byte_129B6-Ani_obj64
00014328 0000                       		dc.w byte_129BE-Ani_obj64
0001432A 0000                       		dc.w byte_129BE-Ani_obj64
0001432C 0000                       		dc.w byte_129C0-Ani_obj64
0001432E 0000                       		dc.w byte_129C6-Ani_obj64
00014330 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00014336 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001433C 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00014344 04FC                       byte_129BE:	dc.b 4,	$FC
00014346 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001434C 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00014352 00                         		even
00014352 00                         		even
00014352                            
00014352                            ; ---------------------------------------------------------------------------
00014352                            ; Sprite mappings - bubbles (LZ)
00014352                            ; ---------------------------------------------------------------------------
00014352                            Map_obj64:
00014352                            	include "_maps\obj64.asm"
00014352                            bubmap:
00014352 0000                       bubmap_0: 	dc.w bubmap_2E-bubmap
00014354 0000                       bubmap_2: 	dc.w bubmap_34-bubmap
00014356 0000                       bubmap_4: 	dc.w bubmap_3A-bubmap
00014358 0000                       bubmap_6: 	dc.w bubmap_40-bubmap
0001435A 0000                       bubmap_8: 	dc.w bubmap_46-bubmap
0001435C 0000                       bubmap_A: 	dc.w bubmap_4C-bubmap
0001435E 0000                       bubmap_C: 	dc.w bubmap_52-bubmap
00014360 0000                       bubmap_E: 	dc.w bubmap_58-bubmap
00014362 0000                       bubmap_10: 	dc.w bubmap_6D-bubmap
00014364 0000                       bubmap_12: 	dc.w bubmap_82-bubmap
00014366 0000                       bubmap_14: 	dc.w bubmap_88-bubmap
00014368 0000                       bubmap_16: 	dc.w bubmap_8E-bubmap
0001436A 0000                       bubmap_18: 	dc.w bubmap_94-bubmap
0001436C 0000                       bubmap_1A: 	dc.w bubmap_9A-bubmap
0001436E 0000                       bubmap_1C: 	dc.w bubmap_A0-bubmap
00014370 0000                       bubmap_1E: 	dc.w bubmap_A6-bubmap
00014372 0000                       bubmap_20: 	dc.w bubmap_AC-bubmap
00014374 0000                       bubmap_22: 	dc.w bubmap_B2-bubmap
00014376 0000                       bubmap_24: 	dc.w bubmap_B8-bubmap
00014378 0000                       bubmap_26: 	dc.w bubmap_BE-bubmap
0001437A 0000                       bubmap_28: 	dc.w bubmap_C4-bubmap
0001437C 0000                       bubmap_2A: 	dc.w bubmap_CA-bubmap
0001437E 0000                       bubmap_2C: 	dc.w bubmap_D0-bubmap
00014380 01                         bubmap_2E: 	dc.b $1
00014381 FC00 6000 FC               	dc.b $FC, $0, $60, $0, $FC
00014386 01                         bubmap_34: 	dc.b $1
00014387 FC00 6001 FC               	dc.b $FC, $0, $60, $1, $FC
0001438C 01                         bubmap_3A: 	dc.b $1
0001438D FC00 6002 FC               	dc.b $FC, $0, $60, $2, $FC
00014392 01                         bubmap_40: 	dc.b $1
00014393 F805 6003 F8               	dc.b $F8, $5, $60, $3, $F8
00014398 01                         bubmap_46: 	dc.b $1
00014399 F805 6007 F8               	dc.b $F8, $5, $60, $7, $F8
0001439E 01                         bubmap_4C: 	dc.b $1
0001439F F40A 600B F4               	dc.b $F4, $A, $60, $B, $F4
000143A4 01                         bubmap_52: 	dc.b $1
000143A5 F00F 6014 F0               	dc.b $F0, $F, $60, $14, $F0
000143AA 04                         bubmap_58: 	dc.b $4
000143AB F005 6024 F0               	dc.b $F0, $5, $60, $24, $F0
000143B0 F005 6824 00               	dc.b $F0, $5, $68, $24, $0
000143B5 0005 7024 F0               	dc.b $0, $5, $70, $24, $F0
000143BA 0005 7824 00               	dc.b $0, $5, $78, $24, $0
000143BF 04                         bubmap_6D: 	dc.b $4
000143C0 F005 6028 F0               	dc.b $F0, $5, $60, $28, $F0
000143C5 F005 6828 00               	dc.b $F0, $5, $68, $28, $0
000143CA 0005 7028 F0               	dc.b $0, $5, $70, $28, $F0
000143CF 0005 7828 00               	dc.b $0, $5, $78, $28, $0
000143D4 01                         bubmap_82: 	dc.b $1
000143D5 F406 002C F8               	dc.b $F4, $6, $0, $2C, $F8
000143DA 01                         bubmap_88: 	dc.b $1
000143DB F406 0032 F8               	dc.b $F4, $6, $0, $32, $F8
000143E0 01                         bubmap_8E: 	dc.b $1
000143E1 F406 0038 F8               	dc.b $F4, $6, $0, $38, $F8
000143E6 01                         bubmap_94: 	dc.b $1
000143E7 F406 003E F8               	dc.b $F4, $6, $0, $3E, $F8
000143EC 01                         bubmap_9A: 	dc.b $1
000143ED F406 2044 F8               	dc.b $F4, $6, $20, $44, $F8
000143F2 01                         bubmap_A0: 	dc.b $1
000143F3 F406 204A F8               	dc.b $F4, $6, $20, $4A, $F8
000143F8 01                         bubmap_A6: 	dc.b $1
000143F9 F406 2050 F8               	dc.b $F4, $6, $20, $50, $F8
000143FE 01                         bubmap_AC: 	dc.b $1
000143FF F406 2056 F8               	dc.b $F4, $6, $20, $56, $F8
00014404 01                         bubmap_B2: 	dc.b $1
00014405 F406 205C F8               	dc.b $F4, $6, $20, $5C, $F8
0001440A 01                         bubmap_B8: 	dc.b $1
0001440B F406 2062 F8               	dc.b $F4, $6, $20, $62, $F8
00014410 01                         bubmap_BE: 	dc.b $1
00014411 F805 6068 F8               	dc.b $F8, $5, $60, $68, $F8
00014416 01                         bubmap_C4: 	dc.b $1
00014417 F805 606C F8               	dc.b $F8, $5, $60, $6C, $F8
0001441C 01                         bubmap_CA: 	dc.b $1
0001441D F805 6070 F8               	dc.b $F8, $5, $60, $70, $F8
00014422 00                         bubmap_D0: 	dc.b $0
00014424 00                         	even
00014424 00                         	even
00014424                            
00014424                            ; ===========================================================================
00014424                            ; ---------------------------------------------------------------------------
00014424                            ; Object 65 - waterfalls (LZ)
00014424                            ; ---------------------------------------------------------------------------
00014424                            
00014424                            Obj65:					; XREF: Obj_Index
00014424 7000                       		moveq	#0,d0
00014426 1028 0024                  		move.b	$24(a0),d0
0001442A 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001442E 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00014432                            ; ===========================================================================
00014432 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00014434 0000                       		dc.w Obj65_Animate-Obj65_Index
00014436 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00014438 0000                       		dc.w Obj65_FixHeight-Obj65_Index
0001443A 0000                       		dc.w loc_12B36-Obj65_Index
0001443C                            ; ===========================================================================
0001443C                            
0001443C                            Obj65_Main:				; XREF: Obj65_Index
0001443C 5828 0024                  		addq.b	#4,$24(a0)
00014440 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00014448 317C 4259 0002             		move.w	#$4259,2(a0)
0001444E 0028 0004 0001             		ori.b	#4,1(a0)
00014454 117C 0018 0019             		move.b	#$18,$19(a0)
0001445A 117C 0001 0018             		move.b	#1,$18(a0)
00014460 1028 0028                  		move.b	$28(a0),d0	; get object type
00014464 6A00                       		bpl.s	loc_12AE6
00014466 08E8 0007 0002             		bset	#7,2(a0)
0001446C                            
0001446C                            loc_12AE6:
0001446C 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00014470 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00014474 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014478 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001447A 4228 0018                  		clr.b	$18(a0)
0001447E 5528 0024                  		subq.b	#2,$24(a0)
00014482 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00014488 6700                       		beq.s	loc_12B0A	; if not, branch
0001448A 117C 0006 0024             		move.b	#6,$24(a0)
00014490                            
00014490                            loc_12B0A:
00014490 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00014496 6700                       		beq.s	Obj65_Animate	; if not, branch
00014498 117C 0008 0024             		move.b	#8,$24(a0)
0001449E                            
0001449E                            Obj65_Animate:				; XREF: Obj65_Index
0001449E 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000144A4 4EB9 0000 B962             		jsr	AnimateSprite
000144AA                            
000144AA                            Obj65_ChkDel:				; XREF: Obj65_Index
000144AA 6000 CAA0                  		bra.w	MarkObjGone
000144AE                            ; ===========================================================================
000144AE                            
000144AE                            Obj65_FixHeight:			; XREF: Obj65_Index
000144AE 3038 F646                  		move.w	($FFFFF646).w,d0
000144B2 0440 0010                  		subi.w	#$10,d0
000144B6 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000144BA 60E2                       		bra.s	Obj65_Animate
000144BC                            ; ===========================================================================
000144BC                            
000144BC                            loc_12B36:				; XREF: Obj65_Index
000144BC 08A8 0007 0002             		bclr	#7,2(a0)
000144C2 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000144C8 6600                       		bne.s	Obj65_Animate2
000144CA 08E8 0007 0002             		bset	#7,2(a0)
000144D0                            
000144D0                            Obj65_Animate2:
000144D0 60CC                       		bra.s	Obj65_Animate
000144D2                            ; ===========================================================================
000144D2                            Ani_obj65:
000144D2                            	include "_anim\obj65.asm"
000144D2                            ; ---------------------------------------------------------------------------
000144D2                            ; Animation script - waterfall (LZ)
000144D2                            ; ---------------------------------------------------------------------------
000144D2 0000                       		dc.w byte_12B4E-Ani_obj65
000144D4 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000144DA 00                         		even
000144DA 00                         		even
000144DA                            
000144DA                            ; ---------------------------------------------------------------------------
000144DA                            ; Sprite mappings - waterfalls (LZ)
000144DA                            ; ---------------------------------------------------------------------------
000144DA                            Map_obj65:
000144DA                            	include "_maps\obj65.asm"
000144DA                            ; ---------------------------------------------------------------------------
000144DA                            ; Sprite mappings - waterfalls (LZ)
000144DA                            ; ---------------------------------------------------------------------------
000144DA 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000144DE 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000144E2 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000144E6 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000144EA 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000144EE 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000144F2 01                         byte_12B6C:	dc.b 1
000144F3 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000144F8 02                         byte_12B72:	dc.b 2
000144F9 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000144FE 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014503 02                         byte_12B7D:	dc.b 2
00014504 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014509 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001450E 01                         byte_12B88:	dc.b 1
0001450F F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014514 02                         byte_12B8E:	dc.b 2
00014515 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001451A 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001451F 01                         byte_12B99:	dc.b 1
00014520 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014525 01                         byte_12B9F:	dc.b 1
00014526 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
0001452B 01                         byte_12BA5:	dc.b 1
0001452C F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014531 02                         byte_12BAB:	dc.b 2
00014532 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014537 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001453C 02                         byte_12BB6:	dc.b 2
0001453D F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014542 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014547 02                         byte_12BC1:	dc.b 2
00014548 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001454D F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014552 02                         byte_12BCC:	dc.b 2
00014553 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014558 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001455E 00                         		even
0001455E 00                         		even
0001455E                            
0001455E                            ; ===========================================================================
0001455E                            ; ---------------------------------------------------------------------------
0001455E                            ; Object 01 - Sonic
0001455E                            ; ---------------------------------------------------------------------------
0001455E                            
0001455E                            Obj01:					; XREF: Obj_Index
0001455E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00014562 6700                       		beq.s	Obj01_Normal	; if not, branch
00014564 4EF9 0000 0000             		jmp	DebugMode
0001456A                            ; ===========================================================================
0001456A                            
0001456A                            Obj01_Normal:
0001456A 7000                       		moveq	#0,d0
0001456C 1028 0024                  		move.b	$24(a0),d0
00014570 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00014574 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00014578                            ; ===========================================================================
00014578 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001457A 0000                       		dc.w Obj01_Control-Obj01_Index
0001457C 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001457E 0000                       		dc.w Obj01_Death-Obj01_Index
00014580 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00014582 0000                       		dc.w Sonic_Drowned-Obj01_Index
00014584                            ;===========================================================================
00014584                            
00014584                            Obj01_Main:				; XREF: Obj01_Index
00014584 5428 0024                  		addq.b	#2,$24(a0)
00014588 117C 0013 0016             		move.b	#$13,$16(a0)
0001458E 117C 0009 0017             		move.b	#9,$17(a0)
00014594 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001459C 317C 0780 0002             		move.w	#$780,2(a0)
000145A2 117C 0002 0018             		move.b	#2,$18(a0)
000145A8 117C 0018 0019             		move.b	#$18,$19(a0)
000145AE 117C 0004 0001             		move.b	#4,1(a0)
000145B4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000145BA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000145C0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000145C6                            
000145C6                            Obj01_Control:				; XREF: Obj01_Index
000145C6 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000145CA 6700                       		beq.s	loc_12C58	; if not, branch
000145CC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000145D2 6700                       		beq.s	loc_12C58	; if not, branch
000145D4 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000145DA 4238 F7CC                  		clr.b	($FFFFF7CC).w
000145DE 4E75                       		rts	
000145E0                            ; ===========================================================================
000145E0                            
000145E0                            loc_12C58:
000145E0 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000145E4 6600                       		bne.s	loc_12C64	; if yes, branch
000145E6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000145EC                            
000145EC                            loc_12C64:
000145EC 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000145F2 6600                       		bne.s	loc_12C7E	; if yes, branch
000145F4 7000                       		moveq	#0,d0
000145F6 1028 0022                  		move.b	$22(a0),d0
000145FA 0240 0006                  		andi.w	#6,d0
000145FE 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00014602 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00014606                            
00014606                            loc_12C7E:
00014606 6100                       		bsr.s	Sonic_Display
00014608 6100 0000                  		bsr.w	Sonic_RecordPos
0001460C 6100 0000                  		bsr.w	Sonic_Water
00014610 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00014616 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001461C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014620 6700                       		beq.s	loc_12CA6
00014622 4A28 001C                  		tst.b	$1C(a0)
00014626 6600                       		bne.s	loc_12CA6
00014628 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001462E                            
0001462E                            loc_12CA6:
0001462E 6100 0000                  		bsr.w	Sonic_Animate
00014632 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014636 6B00                       		bmi.s	loc_12CB6
00014638 4EB9 0000 0000             		jsr	TouchResponse
0001463E                            
0001463E                            loc_12CB6:
0001463E 6100 0000                  		bsr.w	Sonic_Loops
00014642 6100 0000                  		bsr.w	LoadSonicDynPLC
00014646 4E75                       		rts	
00014648                            ; ===========================================================================
00014648 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001464A 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001464C 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001464E 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00014650                            ; ---------------------------------------------------------------------------
00014650                            ; Music	to play	after invincibility wears off
00014650                            ; ---------------------------------------------------------------------------
00014650                            MusicList2:	incbin	misc\muslist2.bin
00014656                            		even
00014656                            ; ===========================================================================
00014656                            
00014656                            Sonic_Display:				; XREF: loc_12C7E
00014656 3028 0030                  		move.w	$30(a0),d0
0001465A 6700                       		beq.s	Obj01_Display
0001465C 5368 0030                  		subq.w	#1,$30(a0)
00014660 E648                       		lsr.w	#3,d0
00014662 6400                       		bcc.s	Obj01_ChkInvin
00014664                            
00014664                            Obj01_Display:
00014664 4EBA A29C                  		jsr	DisplaySprite
00014668                            
00014668                            Obj01_ChkInvin:
00014668 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001466C 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
0001466E 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00014672 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00014674 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00014678 6600                       		bne.s	Obj01_ChkShoes
0001467A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001467E 6600                       		bne.s	Obj01_RmvInvin
00014680 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014686 6500                       		bcs.s	Obj01_RmvInvin
00014688 7000                       		moveq	#0,d0
0001468A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001468E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
00014694 6600                       		bne.s	Obj01_PlayMusic
00014696 7005                       		moveq	#5,d0		; play SBZ music
00014698                            
00014698                            Obj01_PlayMusic:
00014698 43F9 0001 4650             		lea	(MusicList2).l,a1
0001469E 1031 0000                  		move.b	(a1,d0.w),d0
000146A2 4EB9 0000 11F0             		jsr	(PlaySound).l	; play normal music
000146A8                            
000146A8                            Obj01_RmvInvin:
000146A8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000146AE                            
000146AE                            Obj01_ChkShoes:
000146AE 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000146B2 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000146B4 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000146B8 6700                       		beq.s	Obj01_ExitChk
000146BA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000146BE 6600                       		bne.s	Obj01_ExitChk
000146C0 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000146C6 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000146CC 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000146D2 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000146D8 303C 00E3                  		move.w	#$E3,d0
000146DC 4EF9 0000 11F0             		jmp	(PlaySound).l	; run music at normal speed
000146E2                            ; ===========================================================================
000146E2                            
000146E2                            Obj01_ExitChk:
000146E2 4E75                       		rts	
000146E4                            
000146E4                            ; ---------------------------------------------------------------------------
000146E4                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000146E4                            ; ---------------------------------------------------------------------------
000146E4                            
000146E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146E4                            
000146E4                            
000146E4                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000146E4 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000146E8 43F8 CB00                  		lea	($FFFFCB00).w,a1
000146EC 43F1 0000                  		lea	(a1,d0.w),a1
000146F0 32E8 0008                  		move.w	8(a0),(a1)+
000146F4 32E8 000C                  		move.w	$C(a0),(a1)+
000146F8 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000146FC 4E75                       		rts	
000146FE                            ; End of function Sonic_RecordPos
000146FE                            
000146FE                            ; ---------------------------------------------------------------------------
000146FE                            ; Subroutine for Sonic when he's underwater
000146FE                            ; ---------------------------------------------------------------------------
000146FE                            
000146FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146FE                            
000146FE                            
000146FE                            Sonic_Water:				; XREF: loc_12C7E
000146FE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00014704 6700                       		beq.s	Obj01_InWater	; if yes, branch
00014706                            
00014706                            locret_12D80:
00014706 4E75                       		rts	
00014708                            ; ===========================================================================
00014708                            
00014708                            Obj01_InWater:
00014708 3038 F646                  		move.w	($FFFFF646).w,d0
0001470C B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00014710 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00014712 4A38 F612                  		tst.b	(f_insidepocket).w
00014716 6600                       		bne.s	Obj01_OutWater
00014718 08E8 0006 0022             		bset	#6,$22(a0)
0001471E 66E6                       		bne.s	locret_12D80
00014720 6100 0000                  		bsr.w	ResumeMusic
00014724 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001472A 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00014730 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00014736 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001473C 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00014742 E0E8 0010                  		asr	$10(a0)
00014746 E0E8 0012                  		asr	$12(a0)
0001474A E0E8 0012                  		asr	$12(a0)
0001474E 67B6                       		beq.s	locret_12D80
00014750 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014756 303C 00AA                  		move.w	#$AA,d0
0001475A 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play splash sound
00014760                            ; ===========================================================================
00014760                            
00014760                            Obj01_OutWater:
00014760 08A8 0006 0022             		bclr	#6,$22(a0)
00014766 679E                       		beq.s	locret_12D80
00014768 6100 0000                  		bsr.w	ResumeMusic
0001476C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00014772 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00014778 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001477E E1E8 0012                  		asl	$12(a0)
00014782 6700 FF82                  		beq.w	locret_12D80
00014786 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001478C 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00014792 6E00                       		bgt.s	loc_12E0E
00014794 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001479A                            
0001479A                            loc_12E0E:
0001479A 303C 00AA                  		move.w	#$AA,d0
0001479E 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play splash sound
000147A4                            ; End of function Sonic_Water
000147A4                            
000147A4                            ; ===========================================================================
000147A4                            ; ---------------------------------------------------------------------------
000147A4                            ; Modes	for controlling	Sonic
000147A4                            ; ---------------------------------------------------------------------------
000147A4                            
000147A4                            Obj01_MdNormal:				; XREF: Obj01_Modes
000147A4 6100 0000                  		bsr.w	Sonic_Jump
000147A8 6100 0000                  		bsr.w	Sonic_SlopeResist
000147AC 6100 0000                  		bsr.w	Sonic_Move
000147B0 6100 0000                  		bsr.w	Sonic_Roll
000147B4 6100 0000                  		bsr.w	Sonic_LevelBound
000147B8 4EBA A12E                  		jsr	SpeedToPos
000147BC 6100 0000                  		bsr.w	Sonic_AnglePos
000147C0 6100 0000                  		bsr.w	Sonic_SlopeRepel
000147C4 4E75                       		rts	
000147C6                            ; ===========================================================================
000147C6                            
000147C6                            Obj01_MdJump:				; XREF: Obj01_Modes
000147C6 6100 0000                  		bsr.w	Sonic_JumpHeight
000147CA 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000147CE 6100 0000                  		bsr.w	Sonic_LevelBound
000147D2 4EBA A0F4                  		jsr	ObjectFall
000147D6 0828 0006 0022             		btst	#6,$22(a0)
000147DC 6700                       		beq.s	loc_12E5C
000147DE 0468 0028 0012             		subi.w	#$28,$12(a0)
000147E4                            
000147E4                            loc_12E5C:
000147E4 6100 0000                  		bsr.w	Sonic_JumpAngle
000147E8 6100 0000                  		bsr.w	Sonic_Floor
000147EC 0C38 0030 F5E2             		cmpi.b	#$30,(SonimeSST+sonime_airtimer).w
000147F2 6600                       		bne.s	@addtimer
000147F4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000147FA 6300                       		bls.s	@done
000147FC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
00014802 6700                       		beq.s	@done
00014804 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0001480A 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
00014810 6000                       		bra.s	@done
00014812                            
00014812                            
00014812                            	@addtimer:
00014812 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
00014816 4A38 D012                  		tst.b	($FFFFD012).w
0001481A 6A00                       		bpl.s	@done
0001481C 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00014820                            
00014820                            	@done:
00014820 4E75                       		rts	
00014822                            ; ===========================================================================
00014822                            
00014822                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014822 6100 0000                  		bsr.w	Sonic_Jump
00014826 6100 0000                  		bsr.w	Sonic_RollRepel
0001482A 6100 0000                  		bsr.w	Sonic_RollSpeed
0001482E 6100 0000                  		bsr.w	Sonic_LevelBound
00014832 4EBA A0B4                  		jsr	SpeedToPos
00014836 6100 0000                  		bsr.w	Sonic_AnglePos
0001483A 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001483E 4E75                       		rts	
00014840                            ; ===========================================================================
00014840                            
00014840                            Obj01_MdJump2:				; XREF: Obj01_Modes
00014840 6100 0000                  		bsr.w	Sonic_JumpHeight
00014844 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014848 6100 0000                  		bsr.w	Sonic_LevelBound
0001484C 4EBA A07A                  		jsr	ObjectFall
00014850 0828 0006 0022             		btst	#6,$22(a0)
00014856 6700                       		beq.s	loc_12EA6
00014858 0468 0028 0012             		subi.w	#$28,$12(a0)
0001485E                            
0001485E                            loc_12EA6:
0001485E 6100 0000                  		bsr.w	Sonic_JumpAngle
00014862 6100 0000                  		bsr.w	Sonic_Floor
00014866 0C38 0040 F5E2             		cmpi.b	#$40,(SonimeSST+sonime_airtimer).w
0001486C 6600                       		bne.s	@addtimer
0001486E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00014874 6300                       		bls.s	@done
00014876 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
0001487C 6700                       		beq.s	@done
0001487E 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00014884 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001488A 6000                       		bra.s	@done
0001488C                            
0001488C                            
0001488C                            	@addtimer:
0001488C 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
00014890 4A38 D012                  		tst.b	($FFFFD012).w
00014894 6A00                       		bpl.s	@done
00014896 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001489A                            
0001489A                            	@done:
0001489A 4E75                       		rts	
0001489C                            ; ---------------------------------------------------------------------------
0001489C                            ; Subroutine to	make Sonic walk/run
0001489C                            ; ---------------------------------------------------------------------------
0001489C                            
0001489C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001489C                            
0001489C                            
0001489C                            Sonic_Move:				; XREF: Obj01_MdNormal
0001489C 3C38 F760                  		move.w	($FFFFF760).w,d6
000148A0 3A38 F762                  		move.w	($FFFFF762).w,d5
000148A4 3838 F764                  		move.w	($FFFFF764).w,d4
000148A8 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000148AC 6600 0000                  		bne.w	loc_12FEE
000148B0 4A68 003E                  		tst.w	$3E(a0)
000148B4 6600 0000                  		bne.w	Obj01_ResetScr
000148B8 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000148BE 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000148C0 6100 0000                  		bsr.w	Sonic_MoveLeft
000148C4                            
000148C4                            Obj01_NotLeft:
000148C4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000148CA 6700                       		beq.s	Obj01_NotRight	; if not, branch
000148CC 6100 0000                  		bsr.w	Sonic_MoveRight
000148D0                            
000148D0                            Obj01_NotRight:
000148D0 1028 0026                  		move.b	$26(a0),d0
000148D4 0600 0020                  		addi.b	#$20,d0
000148D8 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000148DC 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000148E0 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
000148E4 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000148E8 08A8 0005 0022             		bclr	#5,$22(a0)
000148EE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000148F4 0828 0003 0022             		btst	#3,$22(a0)
000148FA 6700                       		beq.s	Sonic_Balance
000148FC 7000                       		moveq	#0,d0
000148FE 1028 003D                  		move.b	$3D(a0),d0
00014902 ED48                       		lsl.w	#6,d0
00014904 43F8 D000                  		lea	($FFFFD000).w,a1
00014908 43F1 0000                  		lea	(a1,d0.w),a1
0001490C 4A29 0022                  		tst.b	$22(a1)
00014910 6B00                       		bmi.s	Sonic_LookUp
00014912 7200                       		moveq	#0,d1
00014914 1229 0019                  		move.b	$19(a1),d1
00014918 3401                       		move.w	d1,d2
0001491A D442                       		add.w	d2,d2
0001491C 5942                       		subq.w	#4,d2
0001491E D268 0008                  		add.w	8(a0),d1
00014922 9269 0008                  		sub.w	8(a1),d1
00014926 0C41 0004                  		cmpi.w	#4,d1
0001492A 6D00                       		blt.s	loc_12F6A
0001492C B242                       		cmp.w	d2,d1
0001492E 6C00                       		bge.s	loc_12F5A
00014930 6000                       		bra.s	Sonic_LookUp
00014932                            ; ===========================================================================
00014932                            
00014932                            Sonic_Balance:
00014932 4EB9 0000 0000             		jsr	ObjHitFloor
00014938 0C41 000C                  		cmpi.w	#$C,d1
0001493C 6D00                       		blt.s	Sonic_LookUp
0001493E 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00014944 6600                       		bne.s	loc_12F62
00014946                            
00014946                            loc_12F5A:
00014946 08A8 0000 0022             		bclr	#0,$22(a0)
0001494C 6000                       		bra.s	loc_12F70
0001494E                            ; ===========================================================================
0001494E                            
0001494E                            loc_12F62:
0001494E 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00014954 6600                       		bne.s	Sonic_LookUp
00014956                            
00014956                            loc_12F6A:
00014956 08E8 0000 0022             		bset	#0,$22(a0)
0001495C                            
0001495C                            loc_12F70:
0001495C 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00014962 6000                       		bra.s	Obj01_ResetScr
00014964                            ; ===========================================================================
00014964                            
00014964                            Sonic_LookUp:
00014964 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001496A 6700                       		beq.s	Sonic_Duck	; if not, branch
0001496C 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00014972 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014978 6700                       		beq.s	loc_12FC2
0001497A 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001497E 6000                       		bra.s	loc_12FC2
00014980                            ; ===========================================================================
00014980                            
00014980                            Sonic_Duck:
00014980 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014986 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00014988 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001498E 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00014994 6700                       		beq.s	loc_12FC2
00014996 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001499A 6000                       		bra.s	loc_12FC2
0001499C                            ; ===========================================================================
0001499C                            
0001499C                            Obj01_ResetScr:
0001499C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000149A2 6700                       		beq.s	loc_12FC2	; if yes, branch
000149A4 6400                       		bcc.s	loc_12FBE
000149A6 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000149AA                            
000149AA                            loc_12FBE:
000149AA 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000149AE                            
000149AE                            loc_12FC2:
000149AE 1038 F602                  		move.b	($FFFFF602).w,d0
000149B2 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000149B6 6600                       		bne.s	loc_12FEE	; if yes, branch
000149B8 3028 0020                  		move.w	$20(a0),d0
000149BC 6700                       		beq.s	loc_12FEE
000149BE 6B00                       		bmi.s	loc_12FE2
000149C0 9045                       		sub.w	d5,d0
000149C2 6400                       		bcc.s	loc_12FDC
000149C4 303C 0000                  		move.w	#0,d0
000149C8                            
000149C8                            loc_12FDC:
000149C8 3140 0020                  		move.w	d0,$20(a0)
000149CC 6000                       		bra.s	loc_12FEE
000149CE                            ; ===========================================================================
000149CE                            
000149CE                            loc_12FE2:
000149CE D045                       		add.w	d5,d0
000149D0 6400                       		bcc.s	loc_12FEA
000149D2 303C 0000                  		move.w	#0,d0
000149D6                            
000149D6                            loc_12FEA:
000149D6 3140 0020                  		move.w	d0,$20(a0)
000149DA                            
000149DA                            loc_12FEE:
000149DA 1028 0026                  		move.b	$26(a0),d0
000149DE 4EB9 0000 29CC             		jsr	(CalcSine).l
000149E4 C3E8 0020                  		muls.w	$20(a0),d1
000149E8 E081                       		asr.l	#8,d1
000149EA 3141 0010                  		move.w	d1,$10(a0)
000149EE C1E8 0020                  		muls.w	$20(a0),d0
000149F2 E080                       		asr.l	#8,d0
000149F4 3140 0012                  		move.w	d0,$12(a0)
000149F8                            
000149F8                            loc_1300C:
000149F8 1028 0026                  		move.b	$26(a0),d0
000149FC 0600 0040                  		addi.b	#$40,d0
00014A00 6B00                       		bmi.s	locret_1307C
00014A02 123C 0040                  		move.b	#$40,d1
00014A06 4A68 0020                  		tst.w	$20(a0)
00014A0A 6700                       		beq.s	locret_1307C
00014A0C 6B00                       		bmi.s	loc_13024
00014A0E 4441                       		neg.w	d1
00014A10                            
00014A10                            loc_13024:
00014A10 1028 0026                  		move.b	$26(a0),d0
00014A14 D001                       		add.b	d1,d0
00014A16 3F00                       		move.w	d0,-(sp)
00014A18 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014A1C 301F                       		move.w	(sp)+,d0
00014A1E 4A41                       		tst.w	d1
00014A20 6A00                       		bpl.s	locret_1307C
00014A22 E141                       		asl.w	#8,d1
00014A24 0600 0020                  		addi.b	#$20,d0
00014A28 0200 00C0                  		andi.b	#$C0,d0
00014A2C 6700                       		beq.s	loc_13078
00014A2E 0C00 0040                  		cmpi.b	#$40,d0
00014A32 6700                       		beq.s	loc_13066
00014A34 0C00 0080                  		cmpi.b	#$80,d0
00014A38 6700                       		beq.s	loc_13060
00014A3A D368 0010                  		add.w	d1,$10(a0)
00014A3E 08E8 0005 0022             		bset	#5,$22(a0)
00014A44 317C 0000 0020             		move.w	#0,$20(a0)
00014A4A 4E75                       		rts	
00014A4C                            ; ===========================================================================
00014A4C                            
00014A4C                            loc_13060:
00014A4C 9368 0012                  		sub.w	d1,$12(a0)
00014A50 4E75                       		rts	
00014A52                            ; ===========================================================================
00014A52                            
00014A52                            loc_13066:
00014A52 9368 0010                  		sub.w	d1,$10(a0)
00014A56 08E8 0005 0022             		bset	#5,$22(a0)
00014A5C 317C 0000 0020             		move.w	#0,$20(a0)
00014A62 4E75                       		rts	
00014A64                            ; ===========================================================================
00014A64                            
00014A64                            loc_13078:
00014A64 D368 0012                  		add.w	d1,$12(a0)
00014A68                            
00014A68                            locret_1307C:
00014A68 4E75                       		rts	
00014A6A                            ; End of function Sonic_Move
00014A6A                            
00014A6A                            
00014A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A6A                            
00014A6A                            
00014A6A                            Sonic_MoveLeft:				; XREF: Sonic_Move
00014A6A 3028 0020                  		move.w	$20(a0),d0
00014A6E 6700                       		beq.s	loc_13086
00014A70 6A00                       		bpl.s	loc_130B2
00014A72                            
00014A72                            loc_13086:
00014A72 08E8 0000 0022             		bset	#0,$22(a0)
00014A78 6600                       		bne.s	loc_1309A
00014A7A 08A8 0005 0022             		bclr	#5,$22(a0)
00014A80 117C 0001 001D             		move.b	#1,$1D(a0)
00014A86                            
00014A86                            loc_1309A:
00014A86 9045                       		sub.w	d5,d0
00014A88 3206                       		move.w	d6,d1
00014A8A 4441                       		neg.w	d1
00014A8C B041                       		cmp.w	d1,d0
00014A8E 6E00                       		bgt.s	loc_130A6
00014A90 3001                       		move.w	d1,d0
00014A92                            
00014A92                            loc_130A6:
00014A92 3140 0020                  		move.w	d0,$20(a0)
00014A96 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014A9C 4E75                       		rts	
00014A9E                            ; ===========================================================================
00014A9E                            
00014A9E                            loc_130B2:				; XREF: Sonic_MoveLeft
00014A9E 9044                       		sub.w	d4,d0
00014AA0 6400                       		bcc.s	loc_130BA
00014AA2 303C FF80                  		move.w	#-$80,d0
00014AA6                            
00014AA6                            loc_130BA:
00014AA6 3140 0020                  		move.w	d0,$20(a0)
00014AAA 1028 0026                  		move.b	$26(a0),d0
00014AAE 0600 0020                  		addi.b	#$20,d0
00014AB2 0200 00C0                  		andi.b	#$C0,d0
00014AB6 6600                       		bne.s	locret_130E8
00014AB8 0C40 0400                  		cmpi.w	#$400,d0
00014ABC 6D00                       		blt.s	locret_130E8
00014ABE 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014AC4 08A8 0000 0022             		bclr	#0,$22(a0)
00014ACA 303C 00A4                  		move.w	#$A4,d0
00014ACE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stopping sound
00014AD4                            
00014AD4                            locret_130E8:
00014AD4 4E75                       		rts	
00014AD6                            ; End of function Sonic_MoveLeft
00014AD6                            
00014AD6                            
00014AD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AD6                            
00014AD6                            
00014AD6                            Sonic_MoveRight:			; XREF: Sonic_Move
00014AD6 3028 0020                  		move.w	$20(a0),d0
00014ADA 6B00                       		bmi.s	loc_13118
00014ADC 08A8 0000 0022             		bclr	#0,$22(a0)
00014AE2 6700                       		beq.s	loc_13104
00014AE4 08A8 0005 0022             		bclr	#5,$22(a0)
00014AEA 117C 0001 001D             		move.b	#1,$1D(a0)
00014AF0                            
00014AF0                            loc_13104:
00014AF0 D045                       		add.w	d5,d0
00014AF2 B046                       		cmp.w	d6,d0
00014AF4 6D00                       		blt.s	loc_1310C
00014AF6 3006                       		move.w	d6,d0
00014AF8                            
00014AF8                            loc_1310C:
00014AF8 3140 0020                  		move.w	d0,$20(a0)
00014AFC 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014B02 4E75                       		rts	
00014B04                            ; ===========================================================================
00014B04                            
00014B04                            loc_13118:				; XREF: Sonic_MoveRight
00014B04 D044                       		add.w	d4,d0
00014B06 6400                       		bcc.s	loc_13120
00014B08 303C 0080                  		move.w	#$80,d0
00014B0C                            
00014B0C                            loc_13120:
00014B0C 3140 0020                  		move.w	d0,$20(a0)
00014B10 1028 0026                  		move.b	$26(a0),d0
00014B14 0600 0020                  		addi.b	#$20,d0
00014B18 0200 00C0                  		andi.b	#$C0,d0
00014B1C 6600                       		bne.s	locret_1314E
00014B1E 0C40 FC00                  		cmpi.w	#-$400,d0
00014B22 6E00                       		bgt.s	locret_1314E
00014B24 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014B2A 08E8 0000 0022             		bset	#0,$22(a0)
00014B30 303C 00A4                  		move.w	#$A4,d0
00014B34 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stopping sound
00014B3A                            
00014B3A                            locret_1314E:
00014B3A 4E75                       		rts	
00014B3C                            ; End of function Sonic_MoveRight
00014B3C                            
00014B3C                            ; ---------------------------------------------------------------------------
00014B3C                            ; Subroutine to	change Sonic's speed as he rolls
00014B3C                            ; ---------------------------------------------------------------------------
00014B3C                            
00014B3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B3C                            
00014B3C                            
00014B3C                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00014B3C 3C38 F760                  		move.w	($FFFFF760).w,d6
00014B40 E346                       		asl.w	#1,d6
00014B42 3A38 F762                  		move.w	($FFFFF762).w,d5
00014B46 E245                       		asr.w	#1,d5
00014B48 3838 F764                  		move.w	($FFFFF764).w,d4
00014B4C E444                       		asr.w	#2,d4
00014B4E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014B52 6600 0000                  		bne.w	loc_131CC
00014B56 4A68 003E                  		tst.w	$3E(a0)
00014B5A 6600                       		bne.s	loc_13188
00014B5C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014B62 6700                       		beq.s	loc_1317C	; if not, branch
00014B64 6100 0000                  		bsr.w	Sonic_RollLeft
00014B68                            
00014B68                            loc_1317C:
00014B68 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014B6E 6700                       		beq.s	loc_13188	; if not, branch
00014B70 6100 0000                  		bsr.w	Sonic_RollRight
00014B74                            
00014B74                            loc_13188:
00014B74 3028 0020                  		move.w	$20(a0),d0
00014B78 6700                       		beq.s	loc_131AA
00014B7A 6B00                       		bmi.s	loc_1319E
00014B7C 9045                       		sub.w	d5,d0
00014B7E 6400                       		bcc.s	loc_13198
00014B80 303C 0000                  		move.w	#0,d0
00014B84                            
00014B84                            loc_13198:
00014B84 3140 0020                  		move.w	d0,$20(a0)
00014B88 6000                       		bra.s	loc_131AA
00014B8A                            ; ===========================================================================
00014B8A                            
00014B8A                            loc_1319E:				; XREF: Sonic_RollSpeed
00014B8A D045                       		add.w	d5,d0
00014B8C 6400                       		bcc.s	loc_131A6
00014B8E 303C 0000                  		move.w	#0,d0
00014B92                            
00014B92                            loc_131A6:
00014B92 3140 0020                  		move.w	d0,$20(a0)
00014B96                            
00014B96                            loc_131AA:
00014B96 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
00014B9A 6600                       		bne.s	loc_131CC	; if yes, branch
00014B9C                            
00014B9C                            	@NoReset:
00014B9C 08A8 0002 0022             		bclr	#2,$22(a0)
00014BA2 117C 0013 0016             		move.b	#$13,$16(a0)
00014BA8 117C 0009 0017             		move.b	#9,$17(a0)
00014BAE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014BB4 5B68 000C                  		subq.w	#5,$C(a0)
00014BB8                            
00014BB8                            loc_131CC:
00014BB8 1028 0026                  		move.b	$26(a0),d0
00014BBC 4EB9 0000 29CC             		jsr	(CalcSine).l
00014BC2 C1E8 0020                  		muls.w	$20(a0),d0
00014BC6 E080                       		asr.l	#8,d0
00014BC8 3140 0012                  		move.w	d0,$12(a0)
00014BCC C3E8 0020                  		muls.w	$20(a0),d1
00014BD0 E081                       		asr.l	#8,d1
00014BD2 0C41 1000                  		cmpi.w	#$1000,d1
00014BD6 6F00                       		ble.s	loc_131F0
00014BD8 323C 1000                  		move.w	#$1000,d1
00014BDC                            
00014BDC                            loc_131F0:
00014BDC 0C41 F000                  		cmpi.w	#-$1000,d1
00014BE0 6C00                       		bge.s	loc_131FA
00014BE2 323C F000                  		move.w	#-$1000,d1
00014BE6                            
00014BE6                            loc_131FA:
00014BE6 3141 0010                  		move.w	d1,$10(a0)
00014BEA 6000 FE0C                  		bra.w	loc_1300C
00014BEE                            ; End of function Sonic_RollSpeed
00014BEE                            
00014BEE                            
00014BEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BEE                            
00014BEE                            
00014BEE                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00014BEE 3028 0020                  		move.w	$20(a0),d0
00014BF2 6700                       		beq.s	loc_1320A
00014BF4 6A00                       		bpl.s	loc_13218
00014BF6                            
00014BF6                            loc_1320A:
00014BF6 08E8 0000 0022             		bset	#0,$22(a0)
00014BFC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014C02 4E75                       		rts	
00014C04                            ; ===========================================================================
00014C04                            
00014C04                            loc_13218:
00014C04 9044                       		sub.w	d4,d0
00014C06 6400                       		bcc.s	loc_13220
00014C08 303C FF80                  		move.w	#-$80,d0
00014C0C                            
00014C0C                            loc_13220:
00014C0C 3140 0020                  		move.w	d0,$20(a0)
00014C10 4E75                       		rts	
00014C12                            ; End of function Sonic_RollLeft
00014C12                            
00014C12                            
00014C12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C12                            
00014C12                            
00014C12                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00014C12 3028 0020                  		move.w	$20(a0),d0
00014C16 6B00                       		bmi.s	loc_1323A
00014C18 08A8 0000 0022             		bclr	#0,$22(a0)
00014C1E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014C24 4E75                       		rts	
00014C26                            ; ===========================================================================
00014C26                            
00014C26                            loc_1323A:
00014C26 D044                       		add.w	d4,d0
00014C28 6400                       		bcc.s	loc_13242
00014C2A 303C 0080                  		move.w	#$80,d0
00014C2E                            
00014C2E                            loc_13242:
00014C2E 3140 0020                  		move.w	d0,$20(a0)
00014C32 4E75                       		rts	
00014C34                            ; End of function Sonic_RollRight
00014C34                            
00014C34                            ; ---------------------------------------------------------------------------
00014C34                            ; Subroutine to	change Sonic's direction while jumping
00014C34                            ; ---------------------------------------------------------------------------
00014C34                            
00014C34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C34                            
00014C34                            
00014C34                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014C34 3C38 F760                  		move.w	($FFFFF760).w,d6
00014C38 3A38 F762                  		move.w	($FFFFF762).w,d5
00014C3C E345                       		asl.w	#1,d5
00014C3E 0828 0004 0022             		btst	#4,$22(a0)
00014C44 6600                       		bne.s	Obj01_ResetScr2
00014C46 3028 0010                  		move.w	$10(a0),d0
00014C4A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014C50 6700                       		beq.s	loc_13278	; if not, branch
00014C52 08E8 0000 0022             		bset	#0,$22(a0)
00014C58 9045                       		sub.w	d5,d0
00014C5A 3206                       		move.w	d6,d1
00014C5C 4441                       		neg.w	d1
00014C5E B041                       		cmp.w	d1,d0
00014C60 6E00                       		bgt.s	loc_13278
00014C62 3001                       		move.w	d1,d0
00014C64                            
00014C64                            loc_13278:
00014C64 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014C6A 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00014C6C 08A8 0000 0022             		bclr	#0,$22(a0)
00014C72 D045                       		add.w	d5,d0
00014C74 B046                       		cmp.w	d6,d0
00014C76 6D00                       		blt.s	Obj01_JumpMove
00014C78 3006                       		move.w	d6,d0
00014C7A                            
00014C7A                            Obj01_JumpMove:
00014C7A 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00014C7E                            
00014C7E                            Obj01_ResetScr2:
00014C7E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00014C84 6700                       		beq.s	loc_132A4	; if yes, branch
00014C86 6400                       		bcc.s	loc_132A0
00014C88 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014C8C                            
00014C8C                            loc_132A0:
00014C8C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014C90                            
00014C90                            loc_132A4:
00014C90 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00014C96 6500                       		bcs.s	locret_132D2	; if yes, branch
00014C98 3028 0010                  		move.w	$10(a0),d0
00014C9C 3200                       		move.w	d0,d1
00014C9E EA41                       		asr.w	#5,d1
00014CA0 6700                       		beq.s	locret_132D2
00014CA2 6B00                       		bmi.s	loc_132C6
00014CA4 9041                       		sub.w	d1,d0
00014CA6 6400                       		bcc.s	loc_132C0
00014CA8 303C 0000                  		move.w	#0,d0
00014CAC                            
00014CAC                            loc_132C0:
00014CAC 3140 0010                  		move.w	d0,$10(a0)
00014CB0 4E75                       		rts	
00014CB2                            ; ===========================================================================
00014CB2                            
00014CB2                            loc_132C6:
00014CB2 9041                       		sub.w	d1,d0
00014CB4 6500                       		bcs.s	loc_132CE
00014CB6 303C 0000                  		move.w	#0,d0
00014CBA                            
00014CBA                            loc_132CE:
00014CBA 3140 0010                  		move.w	d0,$10(a0)
00014CBE                            
00014CBE                            locret_132D2:
00014CBE 4E75                       		rts	
00014CC0                            ; End of function Sonic_ChgJumpDir
00014CC0                            
00014CC0                            ; ===========================================================================
00014CC0                            ; ---------------------------------------------------------------------------
00014CC0                            ; Unused subroutine to squash Sonic
00014CC0                            ; ---------------------------------------------------------------------------
00014CC0 1028 0026                  		move.b	$26(a0),d0
00014CC4 0600 0020                  		addi.b	#$20,d0
00014CC8 0200 00C0                  		andi.b	#$C0,d0
00014CCC 6600                       		bne.s	locret_13302
00014CCE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014CD2 4A41                       		tst.w	d1
00014CD4 6A00                       		bpl.s	locret_13302
00014CD6 317C 0000 0020             		move.w	#0,$20(a0)	; stop Sonic moving
00014CDC 317C 0000 0010             		move.w	#0,$10(a0)
00014CE2 317C 0000 0012             		move.w	#0,$12(a0)
00014CE8 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014CEE                            
00014CEE                            locret_13302:
00014CEE 4E75                       		rts	
00014CF0                            ; ---------------------------------------------------------------------------
00014CF0                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00014CF0                            ; ---------------------------------------------------------------------------
00014CF0                            
00014CF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CF0                            
00014CF0                            
00014CF0                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00014CF0 2228 0008                  		move.l	8(a0),d1
00014CF4 3028 0010                  		move.w	$10(a0),d0
00014CF8 48C0                       		ext.l	d0
00014CFA E180                       		asl.l	#8,d0
00014CFC D280                       		add.l	d0,d1
00014CFE 4841                       		swap	d1
00014D00 3038 F728                  		move.w	($FFFFF728).w,d0
00014D04 0640 0010                  		addi.w	#$10,d0
00014D08 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014D0A 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014D0C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014D10 0640 0128                  		addi.w	#$128,d0
00014D14 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014D18 6600                       		bne.s	loc_13332
00014D1A 0640 0040                  		addi.w	#$40,d0
00014D1E                            
00014D1E                            loc_13332:
00014D1E B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014D20 6300                       		bls.s	Boundary_Sides	; if yes, branch
00014D22                            
00014D22                            loc_13336:
00014D22 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014D26 0640 00E0                  		addi.w	#$E0,d0
00014D2A B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014D2E 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014D30 4E75                       		rts	
00014D32                            ; ===========================================================================
00014D32                            
00014D32                            Boundary_Bottom:
00014D32 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00014D38 6600                       		bne.s	JMPKillSonic	; if not, kill Sonic
00014D3A 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00014D40 6500                       		bcs.s	JMPKillSonic
00014D42 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00014D46 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014D4C 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00014D52 4E75                       		rts	
00014D54                            ; ===========================================================================
00014D54                            
00014D54                            Boundary_Sides:
00014D54 3140 0008                  		move.w	d0,8(a0)
00014D58 317C 0000 000A             		move.w	#0,$A(a0)
00014D5E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014D64 317C 0000 0020             		move.w	#0,$20(a0)
00014D6A 60B6                       		bra.s	loc_13336
00014D6C                            
00014D6C                            JMPKillSonic:
00014D6C 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00014D72 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00014D78 4EF9 0000 0000             		jmp	KillSonic
00014D7E                            ; End of function Sonic_LevelBound
00014D7E                            
00014D7E                            ; ---------------------------------------------------------------------------
00014D7E                            ; Subroutine allowing Sonic to roll when he's moving
00014D7E                            ; ---------------------------------------------------------------------------
00014D7E                            
00014D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D7E                            
00014D7E                            
00014D7E                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014D7E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014D82 6600                       		bne.s	Obj01_NoRoll
00014D84 3028 0020                  		move.w	$20(a0),d0
00014D88 6A00                       		bpl.s	loc_13392
00014D8A 4440                       		neg.w	d0
00014D8C                            
00014D8C                            loc_13392:
00014D8C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00014D90 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014D92 1038 F602                  		move.b	($FFFFF602).w,d0
00014D96 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00014D9A 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00014D9C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014DA2 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00014DA4                            
00014DA4                            Obj01_NoRoll:
00014DA4 4E75                       		rts	
00014DA6                            ; ===========================================================================
00014DA6                            
00014DA6                            Obj01_ChkRoll:
00014DA6 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00014DAC 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00014DAE 4E75                       		rts	
00014DB0                            ; ===========================================================================
00014DB0                            
00014DB0                            Obj01_DoRoll:
00014DB0 08E8 0002 0022             		bset	#2,$22(a0)
00014DB6 117C 000E 0016             		move.b	#$E,$16(a0)
00014DBC 117C 0007 0017             		move.b	#7,$17(a0)
00014DC2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014DC8 5A68 000C                  		addq.w	#5,$C(a0)
00014DCC 303C 00BE                  		move.w	#$BE,d0
00014DD0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rolling sound
00014DD6 4A68 0020                  		tst.w	$20(a0)
00014DDA 6600                       		bne.s	locret_133E8
00014DDC 317C 0200 0020             		move.w	#$200,$20(a0)
00014DE2                            
00014DE2                            locret_133E8:
00014DE2 4E75                       		rts	
00014DE4                            ; End of function Sonic_Roll
00014DE4                            
00014DE4                            ; ---------------------------------------------------------------------------
00014DE4                            ; Subroutine allowing Sonic to jump
00014DE4                            ; ---------------------------------------------------------------------------
00014DE4                            
00014DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DE4                            
00014DE4                            
00014DE4                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014DE4 1038 F603                  		move.b	($FFFFF603).w,d0
00014DE8 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014DEC 6700 0000                  		beq.w	locret_1348E	; if not, branch
00014DF0 31FC 6000 F5D8             		move.w	#$6000,(SonimeSST+sonime_waittimer).w
00014DF6 0C38 000B F5CE             		cmpi.b	#face_impatient,(SonimeSST+sonime_face).w
00014DFC 6600                       		bne.s	@notfrustrated
00014DFE 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00014E04                            
00014E04                            	@notfrustrated:
00014E04 7000                       		moveq	#0,d0
00014E06 1028 0026                  		move.b	$26(a0),d0
00014E0A 0600 0080                  		addi.b	#$80,d0
00014E0E 6100 0000                  		bsr.w	sub_14D48
00014E12 0C41 0006                  		cmpi.w	#6,d1
00014E16 6D00 0000                  		blt.w	locret_1348E
00014E1A 343C 0680                  		move.w	#$680,d2
00014E1E 0828 0006 0022             		btst	#6,$22(a0)
00014E24 6700                       		beq.s	loc_1341C
00014E26 343C 0380                  		move.w	#$380,d2
00014E2A                            
00014E2A                            loc_1341C:
00014E2A 7000                       		moveq	#0,d0
00014E2C 1028 0026                  		move.b	$26(a0),d0
00014E30 0400 0040                  		subi.b	#$40,d0
00014E34 4EB9 0000 29CC             		jsr	(CalcSine).l
00014E3A C3C2                       		muls.w	d2,d1
00014E3C E081                       		asr.l	#8,d1
00014E3E D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014E42 C1C2                       		muls.w	d2,d0
00014E44 E080                       		asr.l	#8,d0
00014E46 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014E4A 08E8 0001 0022             		bset	#1,$22(a0)
00014E50 08A8 0005 0022             		bclr	#5,$22(a0)
00014E56 588F                       		addq.l	#4,sp
00014E58 117C 0001 003C             		move.b	#1,$3C(a0)
00014E5E 4228 0038                  		clr.b	$38(a0)
00014E62 303C 00A0                  		move.w	#$A0,d0
00014E66 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play jumping sound
00014E6C 117C 0013 0016             		move.b	#$13,$16(a0)
00014E72 117C 0009 0017             		move.b	#9,$17(a0)
00014E78 0828 0002 0022             		btst	#2,$22(a0)
00014E7E 6600                       		bne.s	loc_13490
00014E80 117C 000E 0016             		move.b	#$E,$16(a0)
00014E86 117C 0007 0017             		move.b	#7,$17(a0)
00014E8C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014E92 08E8 0002 0022             		bset	#2,$22(a0)
00014E98 5A68 000C                  		addq.w	#5,$C(a0)
00014E9C                            
00014E9C                            locret_1348E:
00014E9C 4E75                       		rts	
00014E9E                            ; ===========================================================================
00014E9E                            
00014E9E                            loc_13490:
00014E9E 08E8 0004 0022             		bset	#4,$22(a0)
00014EA4 4E75                       		rts	
00014EA6                            ; End of function Sonic_Jump
00014EA6                            
00014EA6                            
00014EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EA6                            
00014EA6                            
00014EA6                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014EA6 4A28 003C                  		tst.b	$3C(a0)
00014EAA 6700                       		beq.s	loc_134C4
00014EAC 323C FC00                  		move.w	#-$400,d1
00014EB0 0828 0006 0022             		btst	#6,$22(a0)
00014EB6 6700                       		beq.s	loc_134AE
00014EB8 323C FE00                  		move.w	#-$200,d1
00014EBC                            
00014EBC                            loc_134AE:
00014EBC B268 0012                  		cmp.w	$12(a0),d1
00014EC0 6F00                       		ble.s	locret_134C2
00014EC2 1038 F602                  		move.b	($FFFFF602).w,d0
00014EC6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014ECA 6600                       		bne.s	locret_134C2	; if yes, branch
00014ECC 3141 0012                  		move.w	d1,$12(a0)
00014ED0                            
00014ED0                            locret_134C2:
00014ED0 4E75                       		rts	
00014ED2                            ; ===========================================================================
00014ED2                            
00014ED2                            loc_134C4:
00014ED2 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00014ED8 6C00                       		bge.s	locret_134D2
00014EDA 317C F040 0012             		move.w	#-$FC0,$12(a0)
00014EE0                            
00014EE0                            locret_134D2:
00014EE0 4E75                       		rts	
00014EE2                            ; End of function Sonic_JumpHeight
00014EE2                            
00014EE2                            ; ---------------------------------------------------------------------------
00014EE2                            ; Subroutine to	slow Sonic walking up a	slope
00014EE2                            ; ---------------------------------------------------------------------------
00014EE2                            
00014EE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EE2                            
00014EE2                            
00014EE2                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00014EE2 1028 0026                  		move.b	$26(a0),d0
00014EE6 0600 0060                  		addi.b	#$60,d0
00014EEA 0C00 00C0                  		cmpi.b	#$C0,d0
00014EEE 6400                       		bcc.s	locret_13508
00014EF0 1028 0026                  		move.b	$26(a0),d0
00014EF4 4EB9 0000 29CC             		jsr	(CalcSine).l
00014EFA C1FC 0020                  		muls.w	#$20,d0
00014EFE E080                       		asr.l	#8,d0
00014F00 4A68 0020                  		tst.w	$20(a0)
00014F04 6700                       		beq.s	locret_13508
00014F06 6B00                       		bmi.s	loc_13504
00014F08 4A40                       		tst.w	d0
00014F0A 6700                       		beq.s	locret_13502
00014F0C D168 0020                  		add.w	d0,$20(a0)	; change Sonic's inertia
00014F10                            
00014F10                            locret_13502:
00014F10 4E75                       		rts	
00014F12                            ; ===========================================================================
00014F12                            
00014F12                            loc_13504:
00014F12 D168 0020                  		add.w	d0,$20(a0)
00014F16                            
00014F16                            locret_13508:
00014F16 4E75                       		rts	
00014F18                            ; End of function Sonic_SlopeResist
00014F18                            
00014F18                            ; ---------------------------------------------------------------------------
00014F18                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014F18                            ; ---------------------------------------------------------------------------
00014F18                            
00014F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F18                            
00014F18                            
00014F18                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014F18 1028 0026                  		move.b	$26(a0),d0
00014F1C 0600 0060                  		addi.b	#$60,d0
00014F20 0C00 00C0                  		cmpi.b	#-$40,d0
00014F24 6400                       		bcc.s	locret_13544
00014F26 1028 0026                  		move.b	$26(a0),d0
00014F2A 4EB9 0000 29CC             		jsr	(CalcSine).l
00014F30 C1FC 0050                  		muls.w	#$50,d0
00014F34 E080                       		asr.l	#8,d0
00014F36 4A68 0020                  		tst.w	$20(a0)
00014F3A 6B00                       		bmi.s	loc_1353A
00014F3C 4A40                       		tst.w	d0
00014F3E 6A00                       		bpl.s	loc_13534
00014F40 E480                       		asr.l	#2,d0
00014F42                            
00014F42                            loc_13534:
00014F42 D168 0020                  		add.w	d0,$20(a0)
00014F46 4E75                       		rts	
00014F48                            ; ===========================================================================
00014F48                            
00014F48                            loc_1353A:
00014F48 4A40                       		tst.w	d0
00014F4A 6B00                       		bmi.s	loc_13540
00014F4C E480                       		asr.l	#2,d0
00014F4E                            
00014F4E                            loc_13540:
00014F4E D168 0020                  		add.w	d0,$20(a0)
00014F52                            
00014F52                            locret_13544:
00014F52 4E75                       		rts	
00014F54                            ; End of function Sonic_RollRepel
00014F54                            
00014F54                            ; ---------------------------------------------------------------------------
00014F54                            ; Subroutine to	push Sonic down	a slope
00014F54                            ; ---------------------------------------------------------------------------
00014F54                            
00014F54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F54                            
00014F54                            
00014F54                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014F54 4E71                       		nop	
00014F56 4A28 0038                  		tst.b	$38(a0)
00014F5A 6600                       		bne.s	locret_13580
00014F5C 4A68 003E                  		tst.w	$3E(a0)
00014F60 6600                       		bne.s	loc_13582
00014F62 1028 0026                  		move.b	$26(a0),d0
00014F66 0600 0020                  		addi.b	#$20,d0
00014F6A 0200 00C0                  		andi.b	#$C0,d0
00014F6E 6700                       		beq.s	locret_13580
00014F70 3028 0020                  		move.w	$20(a0),d0
00014F74 6A00                       		bpl.s	loc_1356A
00014F76 4440                       		neg.w	d0
00014F78                            
00014F78                            loc_1356A:
00014F78 0C40 0280                  		cmpi.w	#$280,d0
00014F7C 6400                       		bcc.s	locret_13580
00014F7E 4268 0020                  		clr.w	$20(a0)
00014F82 08E8 0001 0022             		bset	#1,$22(a0)
00014F88 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014F8E                            
00014F8E                            locret_13580:
00014F8E 4E75                       		rts	
00014F90                            ; ===========================================================================
00014F90                            
00014F90                            loc_13582:
00014F90 5368 003E                  		subq.w	#1,$3E(a0)
00014F94 4E75                       		rts	
00014F96                            ; End of function Sonic_SlopeRepel
00014F96                            
00014F96                            ; ---------------------------------------------------------------------------
00014F96                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014F96                            ; ---------------------------------------------------------------------------
00014F96                            
00014F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F96                            
00014F96                            
00014F96                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014F96 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014F9A 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014F9C 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014F9E                            
00014F9E 5400                       		addq.b	#2,d0		; increase angle
00014FA0 6400                       		bcc.s	loc_13596
00014FA2 7000                       		moveq	#0,d0
00014FA4                            
00014FA4                            loc_13596:
00014FA4 6000                       		bra.s	loc_1359E
00014FA6                            ; ===========================================================================
00014FA6                            
00014FA6                            loc_13598:
00014FA6 5500                       		subq.b	#2,d0		; decrease angle
00014FA8 6400                       		bcc.s	loc_1359E
00014FAA 7000                       		moveq	#0,d0
00014FAC                            
00014FAC                            loc_1359E:
00014FAC 1140 0026                  		move.b	d0,$26(a0)
00014FB0                            
00014FB0                            locret_135A2:
00014FB0 4E75                       		rts	
00014FB2                            ; End of function Sonic_JumpAngle
00014FB2                            
00014FB2                            ; ---------------------------------------------------------------------------
00014FB2                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014FB2                            ; ---------------------------------------------------------------------------
00014FB2                            
00014FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FB2                            
00014FB2                            
00014FB2                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014FB2 3228 0010                  		move.w	$10(a0),d1
00014FB6 3428 0012                  		move.w	$12(a0),d2
00014FBA 4EB9 0000 2C94             		jsr	(CalcAngle).l
00014FC0 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00014FC4 0400 0020                  		subi.b	#$20,d0
00014FC8 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00014FCC 0200 00C0                  		andi.b	#$C0,d0
00014FD0 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00014FD4 0C00 0040                  		cmpi.b	#$40,d0
00014FD8 6700 0000                  		beq.w	loc_13680
00014FDC 0C00 0080                  		cmpi.b	#$80,d0
00014FE0 6700 0000                  		beq.w	loc_136E2
00014FE4 0C00 00C0                  		cmpi.b	#-$40,d0
00014FE8 6700 0000                  		beq.w	loc_1373E
00014FEC 6100 0000                  		bsr.w	Sonic_HitWall
00014FF0 4A41                       		tst.w	d1
00014FF2 6A00                       		bpl.s	loc_135F0
00014FF4 9368 0008                  		sub.w	d1,8(a0)
00014FF8 317C 0000 0010             		move.w	#0,$10(a0)
00014FFE                            
00014FFE                            loc_135F0:
00014FFE 6100 0000                  		bsr.w	sub_14EB4
00015002 4A41                       		tst.w	d1
00015004 6A00                       		bpl.s	loc_13602
00015006 D368 0008                  		add.w	d1,8(a0)
0001500A 317C 0000 0010             		move.w	#0,$10(a0)
00015010                            
00015010                            loc_13602:
00015010 6100 0000                  		bsr.w	Sonic_HitFloor
00015014 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015018 4A41                       		tst.w	d1
0001501A 6A00                       		bpl.s	locret_1367E
0001501C 1428 0012                  		move.b	$12(a0),d2
00015020 5002                       		addq.b	#8,d2
00015022 4402                       		neg.b	d2
00015024 B202                       		cmp.b	d2,d1
00015026 6C00                       		bge.s	loc_1361E
00015028 B002                       		cmp.b	d2,d0
0001502A 6D00                       		blt.s	locret_1367E
0001502C                            
0001502C                            loc_1361E:
0001502C D368 000C                  		add.w	d1,$C(a0)
00015030 1143 0026                  		move.b	d3,$26(a0)
00015034 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015038 117C 0000 001C             		move.b	#0,$1C(a0)
0001503E 1003                       		move.b	d3,d0
00015040 0600 0020                  		addi.b	#$20,d0
00015044 0200 0040                  		andi.b	#$40,d0
00015048 6600                       		bne.s	loc_1365C
0001504A 1003                       		move.b	d3,d0
0001504C 0600 0010                  		addi.b	#$10,d0
00015050 0200 0020                  		andi.b	#$20,d0
00015054 6700                       		beq.s	loc_1364E
00015056 E0E8 0012                  		asr	$12(a0)
0001505A 6000                       		bra.s	loc_13670
0001505C                            ; ===========================================================================
0001505C                            
0001505C                            loc_1364E:
0001505C 317C 0000 0012             		move.w	#0,$12(a0)
00015062 3168 0010 0020             		move.w	$10(a0),$20(a0)
00015068 4E75                       		rts	
0001506A                            ; ===========================================================================
0001506A                            
0001506A                            loc_1365C:
0001506A 317C 0000 0010             		move.w	#0,$10(a0)
00015070 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00015076 6F00                       		ble.s	loc_13670
00015078 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001507E                            
0001507E                            loc_13670:
0001507E 3168 0012 0020             		move.w	$12(a0),$20(a0)
00015084 4A03                       		tst.b	d3
00015086 6A00                       		bpl.s	locret_1367E
00015088 4468 0020                  		neg.w	$20(a0)
0001508C                            
0001508C                            locret_1367E:
0001508C 4E75                       		rts	
0001508E                            ; ===========================================================================
0001508E                            
0001508E                            loc_13680:
0001508E 6100 0000                  		bsr.w	Sonic_HitWall
00015092 4A41                       		tst.w	d1
00015094 6A00                       		bpl.s	loc_1369A
00015096 9368 0008                  		sub.w	d1,8(a0)
0001509A 317C 0000 0010             		move.w	#0,$10(a0)
000150A0 3168 0012 0020             		move.w	$12(a0),$20(a0)
000150A6 4E75                       		rts	
000150A8                            ; ===========================================================================
000150A8                            
000150A8                            loc_1369A:
000150A8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000150AC 4A41                       		tst.w	d1
000150AE 6A00                       		bpl.s	loc_136B4
000150B0 9368 000C                  		sub.w	d1,$C(a0)
000150B4 4A68 0012                  		tst.w	$12(a0)
000150B8 6A00                       		bpl.s	locret_136B2
000150BA 317C 0000 0012             		move.w	#0,$12(a0)
000150C0                            
000150C0                            locret_136B2:
000150C0 4E75                       		rts	
000150C2                            ; ===========================================================================
000150C2                            
000150C2                            loc_136B4:
000150C2 4A68 0012                  		tst.w	$12(a0)
000150C6 6B00                       		bmi.s	locret_136E0
000150C8 6100 0000                  		bsr.w	Sonic_HitFloor
000150CC 4A41                       		tst.w	d1
000150CE 6A00                       		bpl.s	locret_136E0
000150D0 D368 000C                  		add.w	d1,$C(a0)
000150D4 1143 0026                  		move.b	d3,$26(a0)
000150D8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000150DC 117C 0000 001C             		move.b	#0,$1C(a0)
000150E2 317C 0000 0012             		move.w	#0,$12(a0)
000150E8 3168 0010 0020             		move.w	$10(a0),$20(a0)
000150EE                            
000150EE                            locret_136E0:
000150EE 4E75                       		rts	
000150F0                            ; ===========================================================================
000150F0                            
000150F0                            loc_136E2:
000150F0 6100 0000                  		bsr.w	Sonic_HitWall
000150F4 4A41                       		tst.w	d1
000150F6 6A00                       		bpl.s	loc_136F4
000150F8 9368 0008                  		sub.w	d1,8(a0)
000150FC 317C 0000 0010             		move.w	#0,$10(a0)
00015102                            
00015102                            loc_136F4:
00015102 6100 0000                  		bsr.w	sub_14EB4
00015106 4A41                       		tst.w	d1
00015108 6A00                       		bpl.s	loc_13706
0001510A D368 0008                  		add.w	d1,8(a0)
0001510E 317C 0000 0010             		move.w	#0,$10(a0)
00015114                            
00015114                            loc_13706:
00015114 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015118 4A41                       		tst.w	d1
0001511A 6A00                       		bpl.s	locret_1373C
0001511C 9368 000C                  		sub.w	d1,$C(a0)
00015120 1003                       		move.b	d3,d0
00015122 0600 0020                  		addi.b	#$20,d0
00015126 0200 0040                  		andi.b	#$40,d0
0001512A 6600                       		bne.s	loc_13726
0001512C 317C 0000 0012             		move.w	#0,$12(a0)
00015132 4E75                       		rts	
00015134                            ; ===========================================================================
00015134                            
00015134                            loc_13726:
00015134 1143 0026                  		move.b	d3,$26(a0)
00015138 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001513C 3168 0012 0020             		move.w	$12(a0),$20(a0)
00015142 4A03                       		tst.b	d3
00015144 6A00                       		bpl.s	locret_1373C
00015146 4468 0020                  		neg.w	$20(a0)
0001514A                            
0001514A                            locret_1373C:
0001514A 4E75                       		rts	
0001514C                            ; ===========================================================================
0001514C                            
0001514C                            loc_1373E:
0001514C 6100 0000                  		bsr.w	sub_14EB4
00015150 4A41                       		tst.w	d1
00015152 6A00                       		bpl.s	loc_13758
00015154 D368 0008                  		add.w	d1,8(a0)
00015158 317C 0000 0010             		move.w	#0,$10(a0)
0001515E 3168 0012 0020             		move.w	$12(a0),$20(a0)
00015164 4E75                       		rts	
00015166                            ; ===========================================================================
00015166                            
00015166                            loc_13758:
00015166 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001516A 4A41                       		tst.w	d1
0001516C 6A00                       		bpl.s	loc_13772
0001516E 9368 000C                  		sub.w	d1,$C(a0)
00015172 4A68 0012                  		tst.w	$12(a0)
00015176 6A00                       		bpl.s	locret_13770
00015178 317C 0000 0012             		move.w	#0,$12(a0)
0001517E                            
0001517E                            locret_13770:
0001517E 4E75                       		rts	
00015180                            ; ===========================================================================
00015180                            
00015180                            loc_13772:
00015180 4A68 0012                  		tst.w	$12(a0)
00015184 6B00                       		bmi.s	locret_1379E
00015186 6100 0000                  		bsr.w	Sonic_HitFloor
0001518A 4A41                       		tst.w	d1
0001518C 6A00                       		bpl.s	locret_1379E
0001518E D368 000C                  		add.w	d1,$C(a0)
00015192 1143 0026                  		move.b	d3,$26(a0)
00015196 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001519A 117C 0000 001C             		move.b	#0,$1C(a0)
000151A0 317C 0000 0012             		move.w	#0,$12(a0)
000151A6 3168 0010 0020             		move.w	$10(a0),$20(a0)
000151AC                            
000151AC                            locret_1379E:
000151AC 4E75                       		rts	
000151AE                            ; End of function Sonic_Floor
000151AE                            
000151AE                            ; ---------------------------------------------------------------------------
000151AE                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000151AE                            ; ---------------------------------------------------------------------------
000151AE                            
000151AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151AE                            
000151AE                            
000151AE                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000151AE 0828 0004 0022             		btst	#4,$22(a0)
000151B4 6700                       		beq.s	loc_137AE
000151B6 4E71                       		nop	
000151B8 4E71                       		nop	
000151BA 4E71                       		nop	
000151BC                            
000151BC                            loc_137AE:
000151BC 08A8 0005 0022             		bclr	#5,$22(a0)
000151C2 08A8 0001 0022             		bclr	#1,$22(a0)
000151C8 08A8 0004 0022             		bclr	#4,$22(a0)
000151CE 0828 0002 0022             		btst	#2,$22(a0)
000151D4 6700                       		beq.s	loc_137E4
000151D6 08A8 0002 0022             		bclr	#2,$22(a0)
000151DC 117C 0013 0016             		move.b	#$13,$16(a0)
000151E2 117C 0009 0017             		move.b	#9,$17(a0)
000151E8 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000151EE 5B68 000C                  		subq.w	#5,$C(a0)
000151F2                            
000151F2                            loc_137E4:
000151F2 117C 0000 003C             		move.b	#0,$3C(a0)
000151F8 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000151FE 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00015202                            
00015202                            	@NoReset:
00015202 4E75                       		rts	
00015204                            ; End of function Sonic_ResetOnFloor
00015204                            
00015204                            ; ===========================================================================
00015204                            ; ---------------------------------------------------------------------------
00015204                            ; Sonic	when he	gets hurt
00015204                            ; ---------------------------------------------------------------------------
00015204                            
00015204                            Obj01_Hurt:				; XREF: Obj01_Index
00015204 4EBA 96E2                  		jsr	SpeedToPos
00015208 0668 0030 0012             		addi.w	#$30,$12(a0)
0001520E 0828 0006 0022             		btst	#6,$22(a0)
00015214 6700                       		beq.s	loc_1380C
00015216 0468 0020 0012             		subi.w	#$20,$12(a0)
0001521C                            
0001521C                            loc_1380C:
0001521C 6100 0000                  		bsr.w	Sonic_HurtStop
00015220 6100 FACE                  		bsr.w	Sonic_LevelBound
00015224 6100 F4BE                  		bsr.w	Sonic_RecordPos
00015228 6100 0000                  		bsr.w	Sonic_Animate
0001522C 6100 0000                  		bsr.w	LoadSonicDynPLC
00015230 4EFA 96D0                  		jmp	DisplaySprite
00015234                            
00015234                            ; ---------------------------------------------------------------------------
00015234                            ; Subroutine to	stop Sonic falling after he's been hurt
00015234                            ; ---------------------------------------------------------------------------
00015234                            
00015234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015234                            
00015234                            
00015234                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00015234 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015238 0640 00E0                  		addi.w	#$E0,d0
0001523C B068 000C                  		cmp.w	$C(a0),d0
00015240 6500 FB2A                  		bcs.w	JMPKillSonic
00015244 6100 FD6C                  		bsr.w	Sonic_Floor
00015248 0828 0001 0022             		btst	#1,$22(a0)
0001524E 6600                       		bne.s	locret_13860
00015250 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00015256 7000                       		moveq	#0,d0
00015258 3140 0012                  		move.w	d0,$12(a0)
0001525C 3140 0010                  		move.w	d0,$10(a0)
00015260 3140 0020                  		move.w	d0,$20(a0)
00015264 117C 0000 001C             		move.b	#0,$1C(a0)
0001526A 5528 0024                  		subq.b	#2,$24(a0)
0001526E 317C 0078 0030             		move.w	#$78,$30(a0)
00015274                            
00015274                            locret_13860:
00015274 4E75                       		rts	
00015276                            ; End of function Sonic_HurtStop
00015276                            
00015276                            ; ===========================================================================
00015276                            ; ---------------------------------------------------------------------------
00015276                            ; Sonic	when he	dies
00015276                            ; ---------------------------------------------------------------------------
00015276                            
00015276                            Obj01_Death:				; XREF: Obj01_Index
00015276 6100 0000                  		bsr.w	GameOver
0001527A 4EBA 964C                  		jsr	ObjectFall
0001527E 6100 F464                  		bsr.w	Sonic_RecordPos
00015282 6100 0000                  		bsr.w	Sonic_Animate
00015286 6100 0000                  		bsr.w	LoadSonicDynPLC
0001528A 4EFA 9676                  		jmp	DisplaySprite
0001528E                            
0001528E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001528E                            
0001528E                            
0001528E                            GameOver:				; XREF: Obj01_Death
0001528E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015292 0640 0100                  		addi.w	#$100,d0
00015296 B068 000C                  		cmp.w	$C(a0),d0
0001529A 6400 0000                  		bcc.w	locret_13900
0001529E 317C FFC8 0012             		move.w	#-$38,$12(a0)
000152A4 5428 0024                  		addq.b	#2,$24(a0)
000152A8 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000152AC 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000152B0 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000152B4 6600                       		bne.s	loc_138D4
000152B6 317C 0000 003A             		move.w	#0,$3A(a0)
000152BC 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000152C2 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000152C8 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000152CE 4238 FE1A                  		clr.b	($FFFFFE1A).w
000152D2                            
000152D2                            loc_138C2:
000152D2 303C 008F                  		move.w	#$8F,d0
000152D6 4EB9 0000 11F0             		jsr	(PlaySound).l	; play game over music
000152DC 7003                       		moveq	#3,d0
000152DE 4EF9 0000 1434             		jmp	(LoadPLC).l	; load game over patterns
000152E4                            ; ===========================================================================
000152E4                            
000152E4                            loc_138D4:
000152E4 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000152EA 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000152EE 6700                       		beq.s	locret_13900	; if not, branch
000152F0 317C 0000 003A             		move.w	#0,$3A(a0)
000152F6 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000152FC 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015302 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00015308 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001530E 60C2                       		bra.s	loc_138C2
00015310                            ; ===========================================================================
00015310                            
00015310                            locret_13900:
00015310 4E75                       		rts	
00015312                            ; End of function GameOver
00015312                            
00015312                            ; ===========================================================================
00015312                            ; ---------------------------------------------------------------------------
00015312                            ; Sonic	when the level is restarted
00015312                            ; ---------------------------------------------------------------------------
00015312                            
00015312                            Obj01_ResetLevel:			; XREF: Obj01_Index
00015312 4A68 003A                  		tst.w	$3A(a0)
00015316 6700                       		beq.s	locret_13914
00015318 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001531C 6600                       		bne.s	locret_13914
0001531E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015324 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
0001532A                            
0001532A                            locret_13914:
0001532A 4E75                       		rts	
0001532C                            
0001532C                            ; ---------------------------------------------------------------------------
0001532C                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001532C                            ; ---------------------------------------------------------------------------
0001532C                            
0001532C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001532C                            
0001532C                            
0001532C                            Sonic_Loops:				; XREF: Obj01_Control
0001532C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00015332 6700                       		beq.s	loc_13926	; if yes, branch
00015334 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00015338 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001533C                            
0001533C                            loc_13926:
0001533C 3028 000C                  		move.w	$C(a0),d0
00015340 E248                       		lsr.w	#1,d0
00015342 0240 0380                  		andi.w	#$380,d0
00015346 1228 0008                  		move.b	8(a0),d1
0001534A 0241 007F                  		andi.w	#$7F,d1
0001534E D041                       		add.w	d1,d0
00015350 43F8 A400                  		lea	($FFFFA400).w,a1
00015354 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00015358 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001535C 6700 FA48                  		beq.w	Obj01_ChkRoll
00015360 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00015364 6700 FA40                  		beq.w	Obj01_ChkRoll
00015368 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
0001536C 6700                       		beq.s	loc_13976
0001536E B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00015372 6700                       		beq.s	loc_13966
00015374 08A8 0006 0001             		bclr	#6,1(a0)
0001537A 4E75                       		rts	
0001537C                            ; ===========================================================================
0001537C                            
0001537C                            loc_13966:
0001537C 0828 0001 0022             		btst	#1,$22(a0)
00015382 6700                       		beq.s	loc_13976
00015384 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001538A 4E75                       		rts	
0001538C                            ; ===========================================================================
0001538C                            
0001538C                            loc_13976:
0001538C 3428 0008                  		move.w	8(a0),d2
00015390 0C02 002C                  		cmpi.b	#$2C,d2
00015394 6400                       		bcc.s	loc_13988
00015396 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001539C 4E75                       		rts	
0001539E                            ; ===========================================================================
0001539E                            
0001539E                            loc_13988:
0001539E 0C02 00E0                  		cmpi.b	#-$20,d2
000153A2 6500                       		bcs.s	loc_13996
000153A4 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000153AA 4E75                       		rts	
000153AC                            ; ===========================================================================
000153AC                            
000153AC                            loc_13996:
000153AC 0828 0006 0001             		btst	#6,1(a0)
000153B2 6600                       		bne.s	loc_139B2
000153B4 1228 0026                  		move.b	$26(a0),d1
000153B8 6700                       		beq.s	locret_139C2
000153BA 0C01 0080                  		cmpi.b	#-$80,d1
000153BE 6200                       		bhi.s	locret_139C2
000153C0 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000153C6 4E75                       		rts	
000153C8                            ; ===========================================================================
000153C8                            
000153C8                            loc_139B2:
000153C8 1228 0026                  		move.b	$26(a0),d1
000153CC 0C01 0080                  		cmpi.b	#-$80,d1
000153D0 6300                       		bls.s	locret_139C2
000153D2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000153D8                            
000153D8                            locret_139C2:
000153D8 4E75                       		rts	
000153DA                            ; End of function Sonic_Loops
000153DA                            
000153DA                            ; ---------------------------------------------------------------------------
000153DA                            ; Sonic when he's drowning
000153DA                            ; ---------------------------------------------------------------------------
000153DA                             
000153DA                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
000153DA                             
000153DA                             
000153DA                            Sonic_Drowned:
000153DA 6100 950C                  		bsr.w   SpeedToPos		; Make Sonic able to move
000153DE 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
000153E4 6100 F2FE                  		bsr.w   Sonic_RecordPos	; Record position
000153E8 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
000153EA 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
000153EE 6000 9512                  		bra.w   DisplaySprite	; And finally, display Sonic
000153F2                            
000153F2                            ; ---------------------------------------------------------------------------
000153F2                            ; Subroutine to	animate	Sonic's sprites
000153F2                            ; ---------------------------------------------------------------------------
000153F2                            
000153F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153F2                            
000153F2                            
000153F2                            Sonic_Animate:				; XREF: Obj01_Control; et al
000153F2 43F9 0000 0000             		lea	(SonicAniData).l,a1
000153F8 7000                       		moveq	#0,d0
000153FA 1028 001C                  		move.b	$1C(a0),d0
000153FE B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00015402 6700                       		beq.s	SAnim_Do	; if not, branch
00015404 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00015408 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001540E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00015414                            
00015414                            SAnim_Do:
00015414 D040                       		add.w	d0,d0
00015416 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001541A 1011                       		move.b	(a1),d0
0001541C 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
0001541E 1228 0022                  		move.b	$22(a0),d1
00015422 0201 0001                  		andi.b	#1,d1
00015426 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001542C 8328 0001                  		or.b	d1,1(a0)
00015430 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015434 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00015436 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
0001543A                            
0001543A                            SAnim_Do2:
0001543A 7200                       		moveq	#0,d1
0001543C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00015440 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00015444 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00015446                            
00015446                            SAnim_Next:
00015446 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001544A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001544E                            
0001544E                            SAnim_Delay:
0001544E 4E75                       		rts	
00015450                            ; ===========================================================================
00015450                            
00015450                            SAnim_End_FF:
00015450 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00015452 6600                       		bne.s	SAnim_End_FE	; if not, branch
00015454 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0001545A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001545E 60E6                       		bra.s	SAnim_Next
00015460                            ; ===========================================================================
00015460                            
00015460                            SAnim_End_FE:
00015460 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00015462 6600                       		bne.s	SAnim_End_FD	; if not, branch
00015464 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00015468 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001546C 9200                       		sub.b	d0,d1
0001546E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00015472 60D2                       		bra.s	SAnim_Next
00015474                            ; ===========================================================================
00015474                            
00015474                            SAnim_End_FD:
00015474 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00015476 6600                       		bne.s	SAnim_End	; if not, branch
00015478 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001547E                            
0001547E                            SAnim_End:
0001547E 4E75                       		rts	
00015480                            ; ===========================================================================
00015480                            
00015480                            SAnim_WalkRun:				; XREF: SAnim_Do
00015480 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015484 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00015486 5200                       		addq.b	#1,d0		; is animation walking/running?
00015488 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001548C 7200                       		moveq	#0,d1
0001548E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00015492 1428 0022                  		move.b	$22(a0),d2
00015496 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001549A 6600                       		bne.s	loc_13A70	; if yes, branch
0001549C 4600                       		not.b	d0		; reverse angle
0001549E                            
0001549E                            loc_13A70:
0001549E 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000154A2 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000154A4 7203                       		moveq	#3,d1
000154A6                            
000154A6                            loc_13A78:
000154A6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000154AC B302                       		eor.b	d1,d2
000154AE 8528 0001                  		or.b	d2,1(a0)
000154B2 0828 0005 0022             		btst	#5,$22(a0)
000154B8 6600 0000                  		bne.w	SAnim_Push
000154BC E808                       		lsr.b	#4,d0		; divide angle by $10
000154BE 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000154C2 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
000154C6 6A00                       		bpl.s	loc_13A9C
000154C8 4442                       		neg.w	d2
000154CA                            
000154CA                            loc_13A9C:
000154CA 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000154D0 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000154D4 6400                       		bcc.s	loc_13AB4	; if yes, branch
000154D6 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000154DC 1200                       		move.b	d0,d1
000154DE E209                       		lsr.b	#1,d1
000154E0 D001                       		add.b	d1,d0
000154E2                            
000154E2                            loc_13AB4:
000154E2 D000                       		add.b	d0,d0
000154E4 1600                       		move.b	d0,d3
000154E6 4442                       		neg.w	d2
000154E8 0642 0800                  		addi.w	#$800,d2
000154EC 6A00                       		bpl.s	loc_13AC2
000154EE 7400                       		moveq	#0,d2
000154F0                            
000154F0                            loc_13AC2:
000154F0 E04A                       		lsr.w	#8,d2
000154F2 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000154F6 6100 FF42                  		bsr.w	SAnim_Do2
000154FA D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000154FE 4E75                       		rts	
00015500                            ; ===========================================================================
00015500                            
00015500                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00015500 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00015502 6600                       		bne.s	SAnim_Push	; if not, branch
00015504 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
00015508 6A00                       		bpl.s	loc_13ADE
0001550A 4442                       		neg.w	d2
0001550C                            
0001550C                            loc_13ADE:
0001550C 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00015512 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00015516 6400                       		bcc.s	loc_13AF0	; if yes, branch
00015518 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001551E                            
0001551E                            loc_13AF0:
0001551E 4442                       		neg.w	d2
00015520 0642 0400                  		addi.w	#$400,d2
00015524 6A00                       		bpl.s	loc_13AFA
00015526 7400                       		moveq	#0,d2
00015528                            
00015528                            loc_13AFA:
00015528 E04A                       		lsr.w	#8,d2
0001552A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001552E 1228 0022                  		move.b	$22(a0),d1
00015532 0201 0001                  		andi.b	#1,d1
00015536 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001553C 8328 0001                  		or.b	d1,1(a0)
00015540 6000 FEF8                  		bra.w	SAnim_Do2
00015544                            ; ===========================================================================
00015544                            
00015544                            SAnim_Push:				; XREF: SAnim_RollJump
00015544 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
00015548 6B00                       		bmi.s	loc_13B1E
0001554A 4442                       		neg.w	d2
0001554C                            
0001554C                            loc_13B1E:
0001554C 0642 0800                  		addi.w	#$800,d2
00015550 6A00                       		bpl.s	loc_13B26
00015552 7400                       		moveq	#0,d2
00015554                            
00015554                            loc_13B26:
00015554 EC4A                       		lsr.w	#6,d2
00015556 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001555A 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00015560 1228 0022                  		move.b	$22(a0),d1
00015564 0201 0001                  		andi.b	#1,d1
00015568 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001556E 8328 0001                  		or.b	d1,1(a0)
00015572 6000 FEC6                  		bra.w	SAnim_Do2
00015576                            ; End of function Sonic_Animate
00015576                            
00015576                            ; ===========================================================================
00015576                            SonicAniData:
00015576                            	include "_anim\Sonic.asm"
00015576                            ; ---------------------------------------------------------------------------
00015576                            ; Animation script - Sonic
00015576                            ; ---------------------------------------------------------------------------
00015576 0000                       		dc.w SonAni_Walk-SonicAniData
00015578 0000                       		dc.w SonAni_Run-SonicAniData
0001557A 0000                       		dc.w SonAni_Roll-SonicAniData
0001557C 0000                       		dc.w SonAni_Roll2-SonicAniData
0001557E 0000                       		dc.w SonAni_Push-SonicAniData
00015580 0000                       		dc.w SonAni_Wait-SonicAniData
00015582 0000                       		dc.w SonAni_Balance-SonicAniData
00015584 0000                       		dc.w SonAni_LookUp-SonicAniData
00015586 0000                       		dc.w SonAni_Duck-SonicAniData
00015588 0000                       		dc.w SonAni_Warp1-SonicAniData
0001558A 0000                       		dc.w SonAni_Warp2-SonicAniData
0001558C 0000                       		dc.w SonAni_Warp3-SonicAniData
0001558E 0000                       		dc.w SonAni_Warp4-SonicAniData
00015590 0000                       		dc.w SonAni_Stop-SonicAniData
00015592 0000                       		dc.w SonAni_Float1-SonicAniData
00015594 0000                       		dc.w SonAni_Float2-SonicAniData
00015596 0000                       		dc.w SonAni_Spring-SonicAniData
00015598 0000                       		dc.w SonAni_LZHang-SonicAniData
0001559A 0000                       		dc.w SonAni_Leap1-SonicAniData
0001559C 0000                       		dc.w SonAni_Leap2-SonicAniData
0001559E 0000                       		dc.w SonAni_Surf-SonicAniData
000155A0 0000                       		dc.w SonAni_Bubble-SonicAniData
000155A2 0000                       		dc.w SonAni_Death1-SonicAniData
000155A4 0000                       		dc.w SonAni_Drown-SonicAniData
000155A6 0000                       		dc.w SonAni_Death2-SonicAniData
000155A8 0000                       		dc.w SonAni_Shrink-SonicAniData
000155AA 0000                       		dc.w SonAni_Hurt-SonicAniData
000155AC 0000                       		dc.w SonAni_LZSlide-SonicAniData
000155AE 0000                       		dc.w SonAni_Blank-SonicAniData
000155B0 0000                       		dc.w SonAni_Float3-SonicAniData
000155B2 0000                       		dc.w SonAni_Float4-SonicAniData
000155B4 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
000155BC FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000155C4 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000155CC FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000155D4 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000155DC 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000155F2 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
000155F6 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000155FA 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000155FE 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00015602 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00015606 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
0001560A 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001560E 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00015612 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00015616 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001561E 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00015622 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00015626 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
0001562C 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00015632 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00015636 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001563E 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00015642 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00015646 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
0001564A 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00015654 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00015658 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001565C 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00015660 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00015668 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001566C                            		even
0001566C                            		even
0001566C                            
0001566C                            ; ---------------------------------------------------------------------------
0001566C                            ; Sonic	pattern	loading	subroutine
0001566C                            ; ---------------------------------------------------------------------------
0001566C                            
0001566C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001566C                            
0001566C                            
0001566C                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001566C 7000                       		moveq	#0,d0
0001566E 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00015672 B038 F766                  		cmp.b	($FFFFF766).w,d0
00015676 6700 0000                  		beq.w	locret_13C96
0001567A 11C0 F766                  		move.b	d0,($FFFFF766).w
0001567E 45F9 0000 0000             		lea	(SonicDynPLC).l,a2	
00015684 D040                       		add.w	d0,d0
00015686 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001568A 7A00                       		moveq	#0,d5
0001568C 1A1A                       		move.b	(a2)+,d5
0001568E 5345                       		subq.w	#1,d5
00015690 6B00                       		bmi.s	locret_13C96
00015692 383C F000                  		move.w	#$F000,d4
00015696 2C3C 0000 0000             		move.l	#Art_Sonic,d6
0001569C                            
0001569C                            SPLC_ReadEntry:
0001569C 7200                       		moveq	#0,d1
0001569E 121A                       		move.b	(a2)+,d1
000156A0 E149                       		lsl.w	#8,d1
000156A2 121A                       		move.b	(a2)+,d1
000156A4 3601                       		move.w	d1,d3
000156A6 E04B                       		lsr.w	#8,d3
000156A8 0243 00F0                  		andi.w	#$F0,d3
000156AC 0643 0010                  		addi.w	#$10,d3
000156B0 0241 0FFF                  		andi.w	#$FFF,d1
000156B4 EB89                       		lsl.l	#5,d1
000156B6 D286                       		add.l	d6,d1
000156B8 3404                       		move.w	d4,d2
000156BA D843                       		add.w	d3,d4
000156BC D843                       		add.w	d3,d4
000156BE 4EB9 0000 4A58             		jsr	(QueueDMATransfer).l
000156C4 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000156C8                             
000156C8                            locret_13C96:
000156C8 4E75                       		rts	
000156CA                            ; End of function LoadSonicDynPLC
000156CA                            
000156CA                            ; ===========================================================================
000156CA                            ; ---------------------------------------------------------------------------
000156CA                            ; Object 02 - Sonime
000156CA                            ; ---------------------------------------------------------------------------
000156CA                            
000156CA                            Obj02:
000156CA 7000                       		moveq	#0,d0
000156CC 41F8 F5C0                  		lea	(SonimeSST).w,a0
000156D0 1028 0004                  		move.b	sonime_routine(a0),d0
000156D4 323B 0000                  		move.w	Obj02_Index(pc,d0.w),d1
000156D8 4EFB 1000                  		jmp	Obj02_Index(pc,d1.w)
000156DC                            ; ===========================================================================
000156DC 0000                       Obj02_Index:	dc.w Obj02_Init-Obj02_Index
000156DE 0000                       		dc.w Obj02_MoveIn-Obj02_Index
000156E0 0000                       		dc.w Obj02_Animate-Obj02_Index
000156E2                            ; ===========================================================================
000156E2                            
000156E2                            Obj02_Init:				; XREF: Obj0A_Index
000156E2 5428 0004                  		addq.b	#2,sonime_routine(a0)
000156E6 223C 0000 0000             		move.l #Art_Sonime_Torso,d1
000156EC 343C F400                  		move.w #(torsoart*$20),d2
000156F0 363C 00C0                  		move.w #$C0,d3
000156F4 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
000156FA 223C 0000 0000             		move.l #Art_Sonime_Head,d1
00015700 343C F580                  		move.w #(headart*$20),d2
00015704 363C 0140                  		move.w #$140,d3
00015708 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
0001570E 223C 0000 0000             		move.l #Art_Sonime_Hair,d1
00015714 343C F300                  		move.w #(hairart*$20),d2
00015718 363C 0080                  		move.w #$80,d3
0001571C 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
00015722 117C 0030 0017             		move.b	#$30,sonime_movein(a0)
00015728 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
0001572E                            
0001572E                            Obj02_MoveIn:
0001572E 5528 0017                  		subq.b	#2,sonime_movein(a0)
00015732 1028 0017                  		move.b	sonime_movein(a0),d0
00015736 1140 0002                  		move.b	d0,sonime_headx(a0)
0001573A 1140 0016                  		move.b	d0,sonime_torsox(a0)
0001573E 1140 0009                  		move.b	d0,sonime_hairx(a0)
00015742 4A00                       		tst.b	d0
00015744 6600 0000                  		bne.w	Obj02_Display
00015748 5428 0004                  		addq.b	#2,sonime_routine(a0)
0001574C                            
0001574C                            Obj02_Animate:
0001574C 5350                       		subi.w	#1,sonime_headtimer(a0)
0001574E 6A00 0000                  		bpl.w	Obj02_Face
00015752 4EB8 29A6                  		jsr	RandomNumber
00015756 0240 003F                  		andi.w	#$3F,d0
0001575A 0640 0080                  		addi.w	#$80,d0
0001575E 3080                       		move.w	d0,sonime_headtimer(a0)
00015760 4EB8 29A6                  		jsr	RandomNumber
00015764 0240 0006                  		andi.w	#6,d0
00015768 303B 0000                  		move.w	Obj02_HeadIndex(pc,d0.w),d0
0001576C 4EFB 0000                  		jmp	Obj02_HeadIndex(pc,d0.w)
00015770                            
00015770                            ; ===========================================================================
00015770 0000                       Obj02_HeadIndex:	dc.w Obj02_Up-Obj02_HeadIndex
00015772 0000                       		dc.w Obj02_Down-Obj02_HeadIndex
00015774 0000                       		dc.w Obj02_Left-Obj02_HeadIndex
00015776 0000                       		dc.w Obj02_Right-Obj02_HeadIndex
00015778                            ; ===========================================================================
00015778                            
00015778                            Obj02_Up:
00015778 4A28 0003                  		tst.b	sonime_heady(a0)
0001577C 6D00                       		blt.s	Obj02_Down
0001577E 5328 0003                  		subi.b	#1,sonime_heady(a0)
00015782 6000                       		bra.s	Obj02_Face
00015784                            
00015784                            Obj02_Down:
00015784 4A28 0003                  		tst.b	sonime_heady(a0)
00015788 6EEE                       		bgt.s	Obj02_Up
0001578A 5228 0003                  		addi.b	#1,sonime_heady(a0)
0001578E 6000                       		bra.s	Obj02_Face
00015790                            
00015790                            Obj02_Left:
00015790 4A28 0002                  		tst.b	sonime_headx(a0)
00015794 6D00                       		blt.s	Obj02_Right
00015796 5328 0002                  		subi.b	#1,sonime_headx(a0)
0001579A 6000                       		bra.s	Obj02_Face
0001579C                            
0001579C                            Obj02_Right:
0001579C 4A28 0002                  		tst.b	sonime_headx(a0)
000157A0 6EEE                       		bgt.s	Obj02_Left
000157A2 5228 0002                  		addi.b	#1,sonime_headx(a0)
000157A6                            
000157A6                            Obj02_Face:
000157A6 4A38 FE12                  		tst.b	($FFFFFE12).w
000157AA 6700 0000                  		beq.w	@NoWait
000157AE 0C28 0001 000E             		cmpi.b	#face_blink,sonime_face(a0)
000157B4 6700                       		beq.s	@UnBlink
000157B6 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
000157BA 6A00 0000                  		bpl.w	@NoWait
000157BE 317C 0003 0010             		move.w	#3,sonime_facetimer(a0)
000157C4 117C 0001 000E             		move.b	#face_blink,sonime_face(a0)
000157CA 6000 0000                  		bra.w	@NoWait
000157CE                            
000157CE                            	@UnBlink:
000157CE 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
000157D2 6A00 0000                  		bpl.w	@NoWait
000157D6 117C 0004 000E             		move.b	#face_neutralr,sonime_face(a0)
000157DC 4EB8 29A6                  		jsr	RandomNumber
000157E0 0240 003F                  		andi.w	#$3F,d0
000157E4 0640 00B0                  		addi.w	#$B0,d0
000157E8 3140 0010                  		move.w	d0,sonime_facetimer(a0)
000157EC 4EB8 29A6                  		jsr	RandomNumber
000157F0 0200 000F                  		andi.b	#$F,d0
000157F4 4A00                       		tst.b	d0
000157F6 6700                       		beq.s	@NoBlink
000157F8 117C 0003 000E             		move.b	#face_neutralm,sonime_face(a0)
000157FE 0C00 0001                  		cmpi.b	#1,d0
00015802 6700                       		beq.s	@NoBlink
00015804 117C 0002 000E             		move.b	#face_neutrallm,sonime_face(a0)
0001580A 0C00 0002                  		cmpi.b	#2,d0
0001580E 6700                       		beq.s	@NoBlink
00015810 117C 0000 000E             		move.b	#face_neutrall,sonime_face(a0)
00015816                            
00015816                            	@NoBlink:
00015816 0C38 0005 D01C             		cmpi.b	#5,($FFFFD01C).w
0001581C 6600                       		bne.s	@NoWait
0001581E 0C38 000F D01B             		cmpi.b	#$F,($FFFFD01B).w
00015824 6500                       		bcs.s	@NoWait
00015826 117C 000B 000E             		move.b	#face_impatient,sonime_face(a0)
0001582C 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
00015882                            
00015882                            	@NoWait:
00015882 0C78 0800 D010             		cmpi.w	#$800,($FFFFD010).w
00015888 6D00                       		blt.s	@TooSlow
0001588A 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
00015890 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpeed
000158E6                            
000158E6                            	@TooSlow:
000158E6 0C78 F800 D010             		cmpi.w	#-$800,($FFFFD010).w
000158EC 6E00                       		bgt.s	@TooSlow2
000158EE 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
000158F4                            
000158F4                            	@TooSlow2:
000158F4 7800                       		moveq	#0,d4
000158F6 1828 000E                  		move.b	sonime_face(a0),d4
000158FA B828 000F                  		cmp.b	sonime_faceold(a0),d4
000158FE 6700                       		beq.s	Obj02_Ear
00015900 1144 000F                  		move.b	d4,sonime_faceold(a0)
00015904 ED4C                       		lsl.w	#6,d4
00015906 3A04                       		move.w	d4,d5
00015908 DA45                       		add.w	d5,d5
0001590A D845                       		add.w	d5,d4
0001590C 223C 0000 0000             		move.l #Art_Sonime_Faces,d1
00015912 D244                       		add.w	d4,d1
00015914 343C F5C0                  		move.w #(headart*$20+$40),d2
00015918 363C 0020                  		move.w #$20,d3
0001591C 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
00015922 223C 0000 0000             		move.l #(Art_Sonime_Faces+$40),d1
00015928 D244                       		add.w	d4,d1
0001592A 343C F640                  		move.w #(headart*$20+$C0),d2
0001592E 363C 0020                  		move.w #$20,d3
00015932 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
00015938 223C 0000 0000             		move.l #(Art_Sonime_Faces+$80),d1
0001593E D244                       		add.w	d4,d1
00015940 343C F6C0                  		move.w #(headart*$20+$140),d2
00015944 363C 0020                  		move.w #$20,d3
00015948 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
0001594E                            
0001594E                            Obj02_Ear:
0001594E 4A28 0012                  		tst.b	sonime_ear(a0)
00015952 6600                       		bne.s	@UnTwitch
00015954 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
00015958 6A00                       		bpl.s	@NoTwitch
0001595A 317C 000F 0014             		move.w	#$F,sonime_eartimer(a0)
00015960 4EB8 29A6                  		jsr	RandomNumber
00015964 0200 0001                  		andi.b	#1,d0
00015968 5200                       		addq.b	#1,d0
0001596A 1140 0012                  		move.b	d0,sonime_ear(a0)
0001596E 6000                       		bra.s	@NoTwitch
00015970                            
00015970                            	@UnTwitch:
00015970 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
00015974 6A00                       		bpl.s	@NoTwitch
00015976 117C 0000 0012             		move.b	#0,sonime_ear(a0)
0001597C 4EB8 29A6                  		jsr	RandomNumber
00015980 0240 007F                  		andi.w	#$7F,d0
00015984 0640 0100                  		addi.w	#$100,d0
00015988 3140 0014                  		move.w	d0,sonime_eartimer(a0)
0001598C                            
0001598C                            	@NoTwitch:
0001598C 7800                       		moveq	#0,d4
0001598E 1828 0012                  		move.b	sonime_ear(a0),d4
00015992 B828 0013                  		cmp.b	sonime_earold(a0),d4
00015996 6700                       		beq.s	Obj02_Display
00015998 1144 0013                  		move.b	d4,sonime_earold(a0)
0001599C EB0C                       		lsl.b	#5,d4
0001599E 0204 0020                  		andi.b	#$20,d4
000159A2 223C 0000 0000             		move.l #Art_Sonime_LeftEar,d1
000159A8 D284                       		add.l	d4,d1
000159AA 343C F580                  		move.w #(headart*$20),d2
000159AE 363C 0010                  		move.w #$10,d3
000159B2 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
000159B8 7800                       		moveq	#0,d4
000159BA 1828 0012                  		move.b	sonime_ear(a0),d4
000159BE EB0C                       		lsl.b	#5,d4
000159C0 0204 0040                  		andi.b	#$40,d4
000159C4 223C 0000 0000             		move.l #Art_Sonime_RightEar,d1
000159CA D284                       		add.l	d4,d1
000159CC 343C F680                  		move.w #(headart*$20+$100),d2
000159D0 363C 0020                  		move.w #$20,d3
000159D4 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
000159DA                            
000159DA                            Obj02_Display:
000159DA 7200                       		moveq	#0,d1
000159DC 7400                       		moveq	#0,d2
000159DE 7600                       		moveq	#0,d3
000159E0 7800                       		moveq	#0,d4
000159E2 7A00                       		moveq	#0,d5
000159E4 1628 0002                  		move.b	sonime_headx(a0),d3	; set X pos
000159E8 1428 0003                  		move.b	sonime_heady(a0),d2	; set Y pos
000159EC 4883                       		ext.w	d3
000159EE 4882                       		ext.w	d2
000159F0 0643 01A0                  		addi.w	#$1A0,d3
000159F4 0642 0140                  		addi.w	#$140,d2
000159F8 43F9 0000 0000             		lea	(Map_sonime_head).l,a1
000159FE 367C 87AC                  		movea.w	#($8000+headart),a3	; set art tile and flags
00015A02 D241                       		add.w	d1,d1
00015A04 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015A08 1219                       		move.b	(a1)+,d1
00015A0A 5301                       		subq.b	#1,d1
00015A0C 6B00                       		bmi.s	@nextspr
00015A0E 6100 91A2                  		bsr.w	DrawSprite_Loop
00015A12                            
00015A12                            	@nextspr:
00015A12 7200                       		moveq	#0,d1
00015A14 7600                       		moveq	#0,d3
00015A16 1628 0016                  		move.b	sonime_torsox(a0),d3
00015A1A 0643 01A0                  		add.w	#$1A0,d3	; set X pos
00015A1E 343C 0154                  		move.w	#$154,d2	; set Y pos
00015A22 43F9 0000 0000             		lea	(Map_sonime_torso).l,a1
00015A28 367C 87A0                  		movea.w	#($8000+torsoart),a3	; set art tile and flags
00015A2C D241                       		add.w	d1,d1
00015A2E D2F1 1000                  		adda.w	(a1,d1.w),a1
00015A32 1219                       		move.b	(a1)+,d1
00015A34 5301                       		subq.b	#1,d1
00015A36 6B00                       		bmi.s	@nextspr2
00015A38 6100 9178                  		bsr.w	DrawSprite_Loop
00015A3C                            
00015A3C                            	@nextspr2:
00015A3C 7200                       		moveq	#0,d1
00015A3E 7400                       		moveq	#0,d2
00015A40 7600                       		moveq	#0,d3
00015A42 1628 0009                  		move.b	sonime_hairx(a0),d3	; set X pos
00015A46 1428 000D                  		move.b	sonime_hairy(a0),d2	; set Y pos
00015A4A 4883                       		ext.w	d3
00015A4C 4882                       		ext.w	d2
00015A4E 0643 01A0                  		addi.w	#$1A0,d3
00015A52 0642 0153                  		addi.w	#$153,d2
00015A56 1168 0007 0009             		move.b	sonime_headx3(a0),sonime_hairx(a0)
00015A5C 1168 000B 000D             		move.b	sonime_heady3(a0),sonime_hairy(a0)
00015A62 1168 0006 0007             		move.b	sonime_headx2(a0),sonime_headx3(a0)
00015A68 1168 000A 000B             		move.b	sonime_heady2(a0),sonime_heady3(a0)
00015A6E 1168 0002 0006             		move.b	sonime_headx(a0),sonime_headx2(a0)
00015A74 1168 0003 000A             		move.b	sonime_heady(a0),sonime_heady2(a0)
00015A7A 43F9 0000 0000             		lea	(Map_sonime_hair).l,a1
00015A80 367C 8798                  		movea.w	#($8000+hairart),a3	; set art tile and flags
00015A84 D241                       		add.w	d1,d1
00015A86 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015A8A 1219                       		move.b	(a1)+,d1
00015A8C 5301                       		subq.b	#1,d1
00015A8E 6B00                       		bmi.s	Obj02_Done
00015A90 6100 9120                  		bsr.w	DrawSprite_Loop
00015A94                            
00015A94                            Obj02_Done:		
00015A94 4E75                       		rts	
00015A96                            
00015A96                            ; ---------------------------------------------------------------------------
00015A96                            ; Sprite mappings - sonime
00015A96                            ; ---------------------------------------------------------------------------
00015A96                            Map_sonime_torso:
00015A96                            	include "_maps\sonime_torso.asm"
00015A96                            ; ================================================================================
00015A96                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:06:55 GMT-0500 (Eastern Standard Time)
00015A96                            ; ================================================================================
00015A96                            
00015A96                            DATAUI6DX8OCWY:
00015A96 0000                       	dc.w DATAUI6DX8OCWY_0-DATAUI6DX8OCWY
00015A98 01                         DATAUI6DX8OCWY_0: dc.b $1
00015A99 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
00015A9E                            	even
00015A9E                            	even
00015A9E                            
00015A9E                            Map_sonime_head:
00015A9E                            	include "_maps\sonime_head.asm"
00015A9E                            ; ================================================================================
00015A9E                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:05:21 GMT-0500 (Eastern Standard Time)
00015A9E                            ; ================================================================================
00015A9E                            
00015A9E                            DATAYDZD849MEMA:
00015A9E 0000                       	dc.w DATAYDZD849MEMA_0-DATAYDZD849MEMA
00015AA0 03                         DATAYDZD849MEMA_0: dc.b $3
00015AA1 E80F 0000 F0               	dc.b $E8, $F, $0, $0, $F0
00015AA6 0808 0010 F0               	dc.b $8, $8, $0, $10, $F0
00015AAB 1000 0013 00               	dc.b $10, $0, $0, $13, $0
00015AB0                            	even
00015AB0                            	even
00015AB0                            
00015AB0                            Map_sonime_hair:
00015AB0                            	include "_maps\sonime_hair.asm"
00015AB0                            ; ================================================================================
00015AB0                            ; Sprite Mappings - generated by Flex 2 Sun Dec 20 2020 17:48:20 GMT-0500 (Eastern Standard Time)
00015AB0                            ; ================================================================================
00015AB0                            
00015AB0                            DATAQZ9CZ11E8T:
00015AB0 0000                       	dc.w DATAQZ9CZ11E8T_0-DATAQZ9CZ11E8T
00015AB2 03                         DATAQZ9CZ11E8T_0: dc.b $3
00015AB3 F40C 0000 F0               	dc.b $F4, $C, $0, $0, $F0
00015AB8 FC01 0004 F0               	dc.b $FC, $1, $0, $4, $F0
00015ABD FC01 0006 08               	dc.b $FC, $1, $0, $6, $8
00015AC2                            	even
00015AC2                            	even
00015AC2                            
00015AC2                            ; ===========================================================================
00015AC2                            ; ---------------------------------------------------------------------------
00015AC2                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015AC2                            ; ---------------------------------------------------------------------------
00015AC2                            
00015AC2                            Obj0A:					; XREF: Obj_Index
00015AC2 7000                       		moveq	#0,d0
00015AC4 1028 0024                  		move.b	$24(a0),d0
00015AC8 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015ACC 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015AD0                            ; ===========================================================================
00015AD0 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015AD4 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015AD8 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015ADC 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015AE0 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015AE2                            ; ===========================================================================
00015AE2                            
00015AE2                            Obj0A_Main:				; XREF: Obj0A_Index
00015AE2 5428 0024                  		addq.b	#2,$24(a0)
00015AE6 217C 0001 4352 0004        		move.l	#Map_obj64,4(a0)
00015AEE 317C 8348 0002             		move.w	#$8348,2(a0)
00015AF4 117C 0084 0001             		move.b	#$84,1(a0)
00015AFA 117C 0010 0019             		move.b	#$10,$19(a0)
00015B00 117C 0001 0018             		move.b	#1,$18(a0)
00015B06 1028 0028                  		move.b	$28(a0),d0
00015B0A 6A00                       		bpl.s	loc_13D00
00015B0C 5028 0024                  		addq.b	#8,$24(a0)
00015B10 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015B18 317C 0440 0002             		move.w	#$440,2(a0)
00015B1E 0240 007F                  		andi.w	#$7F,d0
00015B22 1140 0033                  		move.b	d0,$33(a0)
00015B26 6000 0000                  		bra.w	Obj0A_Countdown
00015B2A                            ; ===========================================================================
00015B2A                            
00015B2A                            loc_13D00:
00015B2A 1140 001C                  		move.b	d0,$1C(a0)
00015B2E 3168 0008 0030             		move.w	8(a0),$30(a0)
00015B34 317C FF78 0012             		move.w	#-$88,$12(a0)
00015B3A                            
00015B3A                            Obj0A_Animate:				; XREF: Obj0A_Index
00015B3A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015B40 4EB9 0000 B962             		jsr	AnimateSprite
00015B46                            
00015B46                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00015B46 3038 F646                  		move.w	($FFFFF646).w,d0
00015B4A B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00015B4E 6400                       		bcc.s	Obj0A_ChkDel	; if not, branch
00015B50 3038 F60E                  		move.w	(v_pocketbottom).w,d0
00015B54 B068 000C                  		cmp.w	$C(a0),d0
00015B58 6500                       		bcs.s	Obj0A_Wobble
00015B5A 3028 0008                  		move.w	8(a0),d0
00015B5E 9078 F610                  		sub.w	(v_pocketx).w,d0
00015B62 0640 0060                  		addi.w	#$60,d0
00015B66 6B00                       		bmi.s	Obj0A_Wobble
00015B68 0C40 00C0                  		cmpi.w	#$C0,d0
00015B6C 6400                       		bcc.s	Obj0A_Wobble
00015B6E                            
00015B6E                            Obj0A_ChkDel:
00015B6E 117C 0006 0024             		move.b	#6,$24(a0)
00015B74 5E28 001C                  		addq.b	#7,$1C(a0)
00015B78 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015B7E 6700                       		beq.s	Obj0A_Display
00015B80 6000                       		bra.s	Obj0A_Display
00015B82                            ; ===========================================================================
00015B82                            
00015B82                            Obj0A_Wobble:
00015B82 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015B86 6700                       		beq.s	loc_13D44
00015B88 5868 0030                  		addq.w	#4,$30(a0)
00015B8C                            
00015B8C                            loc_13D44:
00015B8C 1028 0026                  		move.b	$26(a0),d0
00015B90 5228 0026                  		addq.b	#1,$26(a0)
00015B94 0240 007F                  		andi.w	#$7F,d0
00015B98 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015B9E 1031 0000                  		move.b	(a1,d0.w),d0
00015BA2 4880                       		ext.w	d0
00015BA4 D068 0030                  		add.w	$30(a0),d0
00015BA8 3140 0008                  		move.w	d0,8(a0)
00015BAC 6100                       		bsr.s	Obj0A_ShowNumber
00015BAE 4EBA 8D38                  		jsr	SpeedToPos
00015BB2 4A28 0001                  		tst.b	1(a0)
00015BB6 6A00                       		bpl.s	Obj0A_Delete
00015BB8 4EFA 8D48                  		jmp	DisplaySprite
00015BBC                            ; ===========================================================================
00015BBC                            
00015BBC                            Obj0A_Delete:
00015BBC 4EFA 8D94                  		jmp	DeleteObject
00015BC0                            ; ===========================================================================
00015BC0                            
00015BC0                            Obj0A_Display:				; XREF: Obj0A_Index
00015BC0 6100                       		bsr.s	Obj0A_ShowNumber
00015BC2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015BC8 4EB9 0000 B962             		jsr	AnimateSprite
00015BCE 4EFA 8D32                  		jmp	DisplaySprite
00015BD2                            ; ===========================================================================
00015BD2                            
00015BD2                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015BD2 4EFA 8D7E                  		jmp	DeleteObject
00015BD6                            ; ===========================================================================
00015BD6                            
00015BD6                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015BD6 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015BDC 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015BDE 5368 0038                  		subq.w	#1,$38(a0)
00015BE2 6600                       		bne.s	Obj0A_Display2
00015BE4 117C 000E 0024             		move.b	#$E,$24(a0)
00015BEA 5E28 001C                  		addq.b	#7,$1C(a0)
00015BEE 60D0                       		bra.s	Obj0A_Display
00015BF0                            ; ===========================================================================
00015BF0                            
00015BF0                            Obj0A_Display2:
00015BF0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015BF6 4EB9 0000 B962             		jsr	AnimateSprite
00015BFC 4A28 0001                  		tst.b	1(a0)
00015C00 6A00                       		bpl.s	Obj0A_Delete3
00015C02 4EFA 8CFE                  		jmp	DisplaySprite
00015C06                            ; ===========================================================================
00015C06                            
00015C06                            Obj0A_Delete3:
00015C06 4EFA 8D4A                  		jmp	DeleteObject
00015C0A                            ; ===========================================================================
00015C0A                            
00015C0A                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015C0A 4A68 0038                  		tst.w	$38(a0)
00015C0E 6700                       		beq.s	locret_13E1A
00015C10 5368 0038                  		subq.w	#1,$38(a0)
00015C14 6600                       		bne.s	locret_13E1A
00015C16 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015C1C 6400                       		bcc.s	locret_13E1A
00015C1E 317C 000F 0038             		move.w	#$F,$38(a0)
00015C24 4268 0012                  		clr.w	$12(a0)
00015C28 117C 0080 0001             		move.b	#$80,1(a0)
00015C2E 3028 0008                  		move.w	8(a0),d0
00015C32 9078 F700                  		sub.w	($FFFFF700).w,d0
00015C36 0640 0080                  		addi.w	#$80,d0
00015C3A 3140 0008                  		move.w	d0,8(a0)
00015C3E 3028 000C                  		move.w	$C(a0),d0
00015C42 9078 F704                  		sub.w	($FFFFF704).w,d0
00015C46 0640 0080                  		addi.w	#$80,d0
00015C4A 3140 000A                  		move.w	d0,$A(a0)
00015C4E 117C 000C 0024             		move.b	#$C,$24(a0)
00015C54                            
00015C54                            locret_13E1A:
00015C54 4E75                       		rts	
00015C56                            ; ===========================================================================
00015C56                            Obj0A_WobbleData:
00015C56 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015C67 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015C78 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015C89 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015C99 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015CA6 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015CB3 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015CC0 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015CCD FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015CD6 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015CE7 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015CF8 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015D09 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015D19 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015D26 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015D33 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015D40 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015D4D FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015D56                            ;===========================================================================
00015D56                            
00015D56                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015D56 4A68 002C                  		tst.w	$2C(a0)
00015D5A 6600 0000                  		bne.w	loc_13F86
00015D5E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015D64 6400 0000                  		bcc.w	locret_1408C
00015D68 0838 0006 D022             		btst	#6,($FFFFD022).w
00015D6E 6700 0000                  		beq.w	locret_1408C
00015D72 5368 0038                  		subq.w	#1,$38(a0)
00015D76 6A00 0000                  		bpl.w	loc_13FAC
00015D7A 317C 003B 0038             		move.w	#59,$38(a0)
00015D80 317C 0001 0036             		move.w	#1,$36(a0)
00015D86 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015D8C 0240 0001                  		andi.w	#1,d0
00015D90 1140 0034                  		move.b	d0,$34(a0)
00015D94 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015D98 0C40 0019                  		cmpi.w	#$19,d0
00015D9C 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015D9E 0C40 0014                  		cmpi.w	#$14,d0
00015DA2 6700                       		beq.s	Obj0A_WarnSound
00015DA4 0C40 000F                  		cmpi.w	#$F,d0
00015DA8 6700                       		beq.s	Obj0A_WarnSound
00015DAA 0C40 000C                  		cmpi.w	#$C,d0
00015DAE 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015DB0 6600                       		bne.s	loc_13F02
00015DB2 303C 0092                  		move.w	#$92,d0
00015DB6 4EB9 0000 11F0             		jsr	(PlaySound).l	; play countdown music
00015DBC                            
00015DBC                            loc_13F02:
00015DBC 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00015DC2 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00015DC8 5328 0032                  		subq.b	#1,$32(a0)
00015DCC 6A00                       		bpl.s	Obj0A_ReduceAir
00015DCE 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015DD4 08E8 0007 0036             		bset	#7,$36(a0)
00015DDA 6000                       		bra.s	Obj0A_ReduceAir
00015DDC                            ; ===========================================================================
00015DDC                            
00015DDC                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015DDC 303C 00C2                  		move.w	#$C2,d0
00015DE0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00015DE6                            
00015DE6                            Obj0A_ReduceAir:
00015DE6 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015DEA 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015DEE 6100 0000                  		bsr.w	ResumeMusic
00015DF2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015DF8 303C 00B2                  		move.w	#$B2,d0
00015DFC 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play drowning sound
00015E02 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
00015E08 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00015E0E 117C 000A 0034             		move.b	#$A,$34(a0)
00015E14 317C 0001 0036             		move.w	#1,$36(a0)
00015E1A 317C 0078 002C             		move.w	#$78,$2C(a0)
00015E20 2F08                       		move.l	a0,-(sp)
00015E22 41F8 D000                  		lea	($FFFFD000).w,a0
00015E26 6100 F386                  		bsr.w	Sonic_ResetOnFloor
00015E2A 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015E30 08E8 0001 0022             		bset	#1,$22(a0)
00015E36 08E8 0007 0002             		bset	#7,2(a0)
00015E3C 317C 0000 0012             		move.w	#0,$12(a0)
00015E42 317C 0000 0010             		move.w	#0,$10(a0)
00015E48 317C 0000 0020             		move.w	#0,$20(a0)
00015E4E 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown		
00015E54 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015E5A 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately		
00015E60 205F                       		movea.l	(sp)+,a0
00015E62 4E75                       		rts	
00015E64                            ; ===========================================================================
00015E64                            
00015E64                            loc_13F86:
00015E64 5368 002C                  		subq.w	#1,$2C(a0)
00015E68 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
00015E6A 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
00015E70 4E75                       		rts
00015E72                            ; ===========================================================================
00015E72                            
00015E72                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015E72 6000                       		bra.s	Obj0A_MakeItem
00015E74                            ; ===========================================================================
00015E74                            
00015E74                            loc_13FAC:
00015E74 4A68 0036                  		tst.w	$36(a0)
00015E78 6700 0000                  		beq.w	locret_1408C
00015E7C 5368 003A                  		subq.w	#1,$3A(a0)
00015E80 6A00 0000                  		bpl.w	locret_1408C
00015E84                            
00015E84                            Obj0A_MakeItem:
00015E84 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015E8A 0240 000F                  		andi.w	#$F,d0
00015E8E 3140 003A                  		move.w	d0,$3A(a0)
00015E92 4EBA 91C4                  		jsr	SingleObjLoad
00015E96 6600 0000                  		bne.w	locret_1408C
00015E9A 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015E9E 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015EA4 7006                       		moveq	#6,d0
00015EA6 0838 0000 D022             		btst	#0,($FFFFD022).w
00015EAC 6700                       		beq.s	loc_13FF2
00015EAE 4440                       		neg.w	d0
00015EB0 137C 0040 0026             		move.b	#$40,$26(a1)
00015EB6                            
00015EB6                            loc_13FF2:
00015EB6 D169 0008                  		add.w	d0,8(a1)
00015EBA 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015EC0 137C 0006 0028             		move.b	#6,$28(a1)
00015EC6 4A68 002C                  		tst.w	$2C(a0)
00015ECA 6700 0000                  		beq.w	loc_1403E
00015ECE 0268 0007 003A             		andi.w	#7,$3A(a0)
00015ED4 0668 0000 003A             		addi.w	#0,$3A(a0)
00015EDA 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015EDE 0440 000C                  		subi.w	#$C,d0
00015EE2 3340 000C                  		move.w	d0,$C(a1)
00015EE6 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015EEC 1340 0026                  		move.b	d0,$26(a1)
00015EF0 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015EF4 0200 0003                  		andi.b	#3,d0
00015EF8 6600                       		bne.s	loc_14082
00015EFA 137C 000E 0028             		move.b	#$E,$28(a1)
00015F00 6000                       		bra.s	loc_14082
00015F02                            ; ===========================================================================
00015F02                            
00015F02                            loc_1403E:
00015F02 0828 0007 0036             		btst	#7,$36(a0)
00015F08 6700                       		beq.s	loc_14082
00015F0A 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015F0E E24A                       		lsr.w	#1,d2
00015F10 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015F16 0240 0003                  		andi.w	#3,d0
00015F1A 6600                       		bne.s	loc_1406A
00015F1C 08E8 0006 0036             		bset	#6,$36(a0)
00015F22 6600                       		bne.s	loc_14082
00015F24 1342 0028                  		move.b	d2,$28(a1)
00015F28 337C 001C 0038             		move.w	#$1C,$38(a1)
00015F2E                            
00015F2E                            loc_1406A:
00015F2E 4A28 0034                  		tst.b	$34(a0)
00015F32 6600                       		bne.s	loc_14082
00015F34 08E8 0006 0036             		bset	#6,$36(a0)
00015F3A 6600                       		bne.s	loc_14082
00015F3C 1342 0028                  		move.b	d2,$28(a1)
00015F40 337C 001C 0038             		move.w	#$1C,$38(a1)
00015F46                            
00015F46                            loc_14082:
00015F46 5328 0034                  		subq.b	#1,$34(a0)
00015F4A 6A00                       		bpl.s	locret_1408C
00015F4C 4268 0036                  		clr.w	$36(a0)
00015F50                            
00015F50                            locret_1408C:
00015F50 4E75                       		rts	
00015F52                            
00015F52                            ; ---------------------------------------------------------------------------
00015F52                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015F52                            ; ---------------------------------------------------------------------------
00015F52                            
00015F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F52                            
00015F52                            
00015F52                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015F52 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00015F58 6200                       		bhi.s	loc_140AC
00015F5A 303C 0082                  		move.w	#$82,d0		; play LZ music
00015F5E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00015F64 6600                       		bne.s	loc_140A6
00015F66 303C 0086                  		move.w	#$86,d0		; play SBZ music
00015F6A                            
00015F6A                            loc_140A6:
00015F6A 4EB9 0000 11F0             		jsr	(PlaySound).l
00015F70 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00015F76 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00015F7C                            
00015F7C                            loc_140AC:
00015F7C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015F82 4238 D372                  		clr.b	($FFFFD372).w
00015F86 4E75                       		rts	
00015F88                            ; End of function ResumeMusic
00015F88                            
00015F88                            ; ===========================================================================
00015F88                            Ani_obj0A:
00015F88                            	include "_anim\obj0A.asm"
00015F88                            ; ---------------------------------------------------------------------------
00015F88                            ; Animation script - countdown numbers and bubbles (LZ)
00015F88                            ; ---------------------------------------------------------------------------
00015F88 0000                       		dc.w byte_140D6-Ani_obj0A
00015F8A 0000                       		dc.w byte_140E0-Ani_obj0A
00015F8C 0000                       		dc.w byte_140EA-Ani_obj0A
00015F8E 0000                       		dc.w byte_140F4-Ani_obj0A
00015F90 0000                       		dc.w byte_140FE-Ani_obj0A
00015F92 0000                       		dc.w byte_14108-Ani_obj0A
00015F94 0000                       		dc.w byte_14112-Ani_obj0A
00015F96 0000                       		dc.w byte_14118-Ani_obj0A
00015F98 0000                       		dc.w byte_14120-Ani_obj0A
00015F9A 0000                       		dc.w byte_14128-Ani_obj0A
00015F9C 0000                       		dc.w byte_14130-Ani_obj0A
00015F9E 0000                       		dc.w byte_14138-Ani_obj0A
00015FA0 0000                       		dc.w byte_14140-Ani_obj0A
00015FA2 0000                       		dc.w byte_14148-Ani_obj0A
00015FA4 0000                       		dc.w byte_1414A-Ani_obj0A
00015FA6 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015FB0 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015FBA 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00015FC4 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00015FCE 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00015FD8 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00015FE2 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015FE8 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00015FF0 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015FF8 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00016000 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00016008 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00016010 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00016018 0EFC                       byte_14148:	dc.b $E, $FC
0001601A 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00016020                            		even
00016020                            		even
00016020                            
00016020                            ; ---------------------------------------------------------------------------
00016020                            ; Sprite mappings - drowning countdown numbers (LZ)
00016020                            ; ---------------------------------------------------------------------------
00016020                            Map_obj0A:
00016020                            	include "_maps\obj0A.asm"
00016020                            ; ---------------------------------------------------------------------------
00016020                            ; Sprite mappings - drowning countdown numbers (LZ)
00016020                            ; ---------------------------------------------------------------------------
00016020 0000                       		dc.w byte_14152-Map_obj0A
00016022 01                         byte_14152:	dc.b 1
00016023 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016028                            		even
00016028                            		even
00016028                            
00016028                            ; ===========================================================================
00016028                            ; ---------------------------------------------------------------------------
00016028                            ; Object 38 - shield
00016028                            ; ---------------------------------------------------------------------------
00016028                            
00016028                            Obj38: ; XREF: Obj_Index
00016028 223C 0000 0000             		move.l #UnC_Shield,d1 ; Call for Regular Shield Art
0001602E 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016032                            ; In this case, VRAM = $541*20
00016032 363C 0200                  		move.w #$200,d3
00016036 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
0001603C                            ; ---------------------------------------------------------------------------
0001603C                            
0001603C                            ShieldObj_Main:
0001603C 7000                       		moveq #0,d0
0001603E 1028 0024                  		move.b $24(a0),d0
00016042 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
00016046 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
0001604A                            ; ===========================================================================
0001604A                            Shield_Index:
0001604A 0000                       		dc.w Shield_Init-Shield_Index
0001604C 0000                       		dc.w ShieldChecks-Shield_Index
0001604E                            ; ===========================================================================
0001604E                            
0001604E                            Shield_Init:
0001604E 5428 0024                  		addq.b #2,$24(a0)
00016052 217C 0000 0000 0004        		move.l #Map_Obj38, $0004(A0) ; Load Shield Map into place
0001605A 117C 0004 0001             		move.b #4,1(a0)
00016060 117C 0001 0018             		move.b #1,$18(a0)
00016066 117C 0018 0019             		move.b #$18,$19(a0)
0001606C 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016072 0838 0007 D002             		btst #7,($FFFFD002).w
00016078 6700                       		beq.s ShieldChecks
0001607A 08E8 0007 0002             		bset #7,2(a0)
00016080                            ; ---------------------------------------------------------------------------
00016080                            
00016080                            ShieldChecks:
00016080 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016084 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00016086 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
0001608A 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
0001608C                            
0001608C                            ShieldProperties:
0001608C 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016092 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016098 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
0001609E 43F9 0000 0000             		lea (Ani_obj38).l, a1 ; Load Animation Scripts into a1
000160A4 4EB9 0000 B962             		jsr AnimateSprite
000160AA 4EFA 8856                  		jmp DisplaySprite
000160AE                            
000160AE                            SonicHasShield:
000160AE 4E75                       		rts
000160B0                            
000160B0                            jmp_DeleteObj38: ; loc_12648:
000160B0 4EFA 88A0                  		jmp DeleteObject 
000160B4                            
000160B4                            ; ---------------------------------------------------------------------------
000160B4                            ; Object 4A - New Invincibility Object (ported from Sonic 2)
000160B4                            ; ---------------------------------------------------------------------------
000160B4                            
000160B4                            Obj4A: ; XREF: Obj_Index
000160B4 7000                       		moveq	#0,d0
000160B6 1028 0000                  		move.b	InvStars_routine(a0),d0
000160BA 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
000160BE 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
000160C2                            ; ===========================================================================
000160C2                            
000160C2 0000                       InvStars_Index:	dc.w Obj4A_Init-InvStars_Index
000160C4 0000                       		dc.w Obj4A_Main-InvStars_Index
000160C6 0000                       		dc.w Obj4A_SubObject-InvStars_Index
000160C8                            ; ===========================================================================
000160C8                            
000160C8                            off_1D992:
000160C8 0000 0000                  		dc.l Ani_InvStars2 ; animation script
000160CC 000B                       		dc.w $B ; speed index,sub3 anim
000160CE 0000 0000                  		dc.l Ani_InvStars3
000160D2 160D                       		dc.w $160D
000160D4 0000 0000                  		dc.l Ani_InvStars4
000160D8 2C0D                       		dc.w $2C0D
000160DA                            ; ===========================================================================	
000160DA                            
000160DA =0000000A                  InvStars_routine: equ $A ; the same as obRoutine in other objects
000160DA =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
000160DA =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
000160DA =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
000160DA                            
000160DA                            
000160DA                            Obj4A_Init:
000160DA 223C 0000 0000             		move.l	#ArtUnc_InvStars,d1
000160E0 343C A820                  		move.w	#$A820,d2
000160E4 363C 0200                  		move.w	#$200,d3
000160E8 4EB9 0000 4A58             		jsr	(QueueDMATransfer).l
000160EE 7400                       		moveq	#0,d2
000160F0 45FA FFD0                  		lea	off_1D992-6(pc),a2
000160F4 43D0                       		lea	(a0),a1
000160F6 7203                       		moveq	#3,d1
000160F8                            LoadStarsObject:	
000160F8 1290                       		move.b	(a0),(a1) ; load obj35
000160FA 137C 0004 000A             		move.b	#4,InvStars_routine(a1)		; => @SubObject
00016100 237C 0000 0000 0004        		move.l	#Map_InvStars,$4(a1)
00016108 337C 0541 0002             		move.w	#$541,$2(a1)
0001610E 137C 0044 0001             		move.b  #%001000100,1(a1)
00016114 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
0001611A 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)
00016120 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
00016124 5242                       		addq.w	#1,d2
00016126 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
0001612A 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
0001612E 43E9 0040                  		lea	$40(a1),a1 ; a1=object
00016132 51C9 FFC4                  		dbf	d1,LoadStarsObject
00016136                            
00016136 117C 0002 000A             		move.b	#2,InvStars_routine(a0)		; => @MainObject
0001613C 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
00016142                            
00016142                            Obj4A_Main:
00016142 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
00016146 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
0001614A 6700 8806                  		beq.w	DeleteObject
0001614E 3029 0008                  		move.w	8(a1),d0
00016152 3140 0008                  		move.w	d0,8(a0)
00016156 3229 000C                  		move.w	$C(a1),d1
0001615A 3141 000C                  		move.w	d1,$C(a0)
0001615E 45E8 0010                  		lea	sub2_x_pos(a0),a2
00016162 47F9 0000 0000             		lea	Ani_InvStars1,a3
00016168 7A00                       		moveq	#0,d5
0001616A                            
0001616A                            Obj4A_GetFrame:
0001616A 3428 0038                  		move.w	$38(a0),d2
0001616E 1A33 2000                  		move.b	(a3,d2.w),d5
00016172 6A00                       		bpl.s	Obj4A_SetFrameandPos
00016174 4268 0038                  		clr.w	$38(a0)
00016178 60F0                       		bra.s	Obj4A_GetFrame
0001617A                            ; ===========================================================================
0001617A                            
0001617A                            Obj4A_SetFrameandPos:
0001617A 5268 0038                  		addq.w	#1,$38(a0)
0001617E 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00016184 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00016188 4EB9 0000 0000             		jsr	Obj4A_Display2
0001618E 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00016190 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00016192 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00016194 0646 0020                  		addi.w	#$20,d6
00016198 4EB9 0000 0000             		jsr	Obj4A_Display2
0001619E 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
000161A0 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
000161A2 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
000161A4 7012                       		moveq	#$12,d0
000161A6 0829 0000 0022             		btst	#0,$22(a1)
000161AC 6700                       		beq.s	Obj4A_Display
000161AE 4440                       		neg.w	d0
000161B0                            
000161B0                            Obj4A_Display:
000161B0 D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
000161B4 303C 0080                  		move.w	#(1*$80),d0
000161B8 6000 8784                  		bra.w	DisplaySprite3
000161BC                            ; ===========================================================================
000161BC                            
000161BC                            Obj4A_SubObject:
000161BC 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
000161C0 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
000161C4 6700 878C                  		beq.w	DeleteObject
000161C8 4BF8 F7A8                  		lea	($FFFFF7A8).w,a5
000161CC 4DF8 CB00                  		lea	($FFFFCB00).w,a6
000161D0                            	
000161D0                            @getPosition_sub:
000161D0 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
000161D4 E509                       		lsl.b	#2,d1
000161D6 3401                       		move.w	d1,d2
000161D8 D241                       		add.w	d1,d1
000161DA D242                       		add.w	d2,d1 
000161DC 3015                       		move.w	(a5),d0
000161DE 9001                       		sub.b	d1,d0
000161E0 45F6 0000                  		lea	(a6,d0.w),a2
000161E4 301A                       		move.w	(a2)+,d0
000161E6 321A                       		move.w	(a2)+,d1
000161E8 3140 0008                  		move.w	d0,8(a0)
000161EC 3141 000C                  		move.w	d1,$C(a0)
000161F0 45E8 0010                  		lea	sub2_x_pos(a0),a2
000161F4 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
000161F8                            
000161F8                            Obj4A_GetSubFrame:
000161F8 3428 0038                  		move.w	$38(a0),d2
000161FC 1A33 2000                  		move.b	(a3,d2.w),d5
00016200 6A00                       		bpl.s	Obj4A_SetSubFrameandPos
00016202 4268 0038                  		clr.w	$38(a0)
00016206 60F0                       		bra.s	Obj4A_GetSubFrame
00016208                            ; ===========================================================================
00016208                            
00016208                            Obj4A_SetSubFrameandPos:
00016208 4845                       		swap	d5
0001620A D428 0035                  		add.b	$35(a0),d2
0001620E 1A33 2000                  		move.b	(a3,d2.w),d5
00016212 5268 0038                  		addq.w	#1,$38(a0)
00016216 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
0001621A 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001621E 6100                       		bsr.s	Obj4A_Display2
00016220 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00016222 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00016224 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00016226 0646 0020                  		addi.w	#$20,d6
0001622A 4845                       		swap	d5
0001622C 6100                       		bsr.s	Obj4A_Display2
0001622E 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00016230 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00016232 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00016234 7002                       		moveq	#2,d0
00016236 0829 0000 0022             		btst	#0,$22(a1)
0001623C 6700                       		beq.s	loc_1DB20
0001623E 4440                       		neg.w	d0
00016240                            
00016240                            loc_1DB20:
00016240 D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
00016244 303C 0080                  		move.w    #(1*$80),d0
00016248 6000 86F4                  		bra.w    DisplaySprite3
0001624C                            ; ===========================================================================
0001624C                            Obj4A_Display2:
0001624C 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
00016250 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
00016254 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
00016258 4882                       		ext.w	d2
0001625A 4883                       		ext.w	d3
0001625C D440                       		add.w	d0,d2 ; add object x position to x-move speed
0001625E D641                       		add.w	d1,d3 ; add object y position to y-move speed
00016260 4E75                       		rts
00016262                            
00016262                            InvStars_Speeds: ; x-move speed,	y-move speed	
00016262 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F,   $10, $FC0F, $F90E, $F70D, $F40B, $F208, $F106, $F003
00016282 F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, $F0FC, $F1F9, $F2F7, $F4F4, $F7F2, $F9F1, $FCF0, $FFF0,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
000162A2                            
000162A2                            ; ---------------------------------------------------------------------------
000162A2                            ; Animation script - invincibility stars
000162A2                            ; ---------------------------------------------------------------------------
000162A2                            
000162A2                            ; The animation script differs from the animate_sprite subroutine
000162A2                            ; Every positive byte - mapping
000162A2                            ; Every negative byte - loop flag 
000162A2                            
000162A2 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
000162B0 00                         	even
000162B0 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
000162BB 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
000162C6 00                         	even
000162C6 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
000162D3 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
000162E0 00                         	even
000162E0 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
000162ED 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
000162FA 00                         	even		
000162FA                            
000162FA                            
000162FA                            Map_InvStars:
000162FA                            	include "_maps\obj4A.asm"
000162FA                            ; ================================================================================
000162FA                            ; Sprite Mappings - generated by Flex 2 Wed Aug 11 2021 18:32:48 GMT+0100 (British Summer Time)
000162FA                            ; ================================================================================
000162FA                            
000162FA                            DATAZEB5V6JRJ3H:
000162FA 0000 0000                  	dc.w DATAZEB5V6JRJ3H_0-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_1-DATAZEB5V6JRJ3H
000162FE 0000 0000                  	dc.w DATAZEB5V6JRJ3H_2-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_3-DATAZEB5V6JRJ3H
00016302 0000 0000                  	dc.w DATAZEB5V6JRJ3H_4-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_5-DATAZEB5V6JRJ3H
00016306 0000 0000                  	dc.w DATAZEB5V6JRJ3H_6-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_7-DATAZEB5V6JRJ3H
0001630A 0000                       	dc.w DATAZEB5V6JRJ3H_8-DATAZEB5V6JRJ3H
0001630C 01                         DATAZEB5V6JRJ3H_0: dc.b $1
0001630D EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
00016312 01                         DATAZEB5V6JRJ3H_1: dc.b $1
00016313 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
00016318 01                         DATAZEB5V6JRJ3H_2: dc.b $1
00016319 F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
0001631E 01                         DATAZEB5V6JRJ3H_3: dc.b $1
0001631F F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
00016324 01                         DATAZEB5V6JRJ3H_4: dc.b $1
00016325 F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
0001632A 01                         DATAZEB5V6JRJ3H_5: dc.b $1
0001632B F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
00016330 01                         DATAZEB5V6JRJ3H_6: dc.b $1
00016331 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
00016336 01                         DATAZEB5V6JRJ3H_7: dc.b $1
00016337 F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
0001633C 01                         DATAZEB5V6JRJ3H_8: dc.b $1
0001633D F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
00016342                            	even
00016342                            	even
00016342                            ; ===========================================================================
00016342                            ; ---------------------------------------------------------------------------
00016342                            ; Object 08 - water splash (LZ)
00016342                            ; ---------------------------------------------------------------------------
00016342                            
00016342                            Obj08:					; XREF: Obj_Index
00016342 7000                       		moveq	#0,d0
00016344 1028 0024                  		move.b	$24(a0),d0
00016348 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001634C 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00016350                            ; ===========================================================================
00016350 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00016352 0000                       		dc.w Obj08_Display-Obj08_Index
00016354 0000                       		dc.w Obj08_Delete-Obj08_Index
00016356                            ; ===========================================================================
00016356                            
00016356                            Obj08_Main:				; XREF: Obj08_Index
00016356 5428 0024                  		addq.b	#2,$24(a0)
0001635A 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00016362 0028 0004 0001             		ori.b	#4,1(a0)
00016368 117C 0001 0018             		move.b	#1,$18(a0)
0001636E 117C 0010 0019             		move.b	#$10,$19(a0)
00016374 317C 4259 0002             		move.w	#$4259,2(a0)
0001637A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00016380                            
00016380                            Obj08_Display:				; XREF: Obj08_Index
00016380 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00016386 4A38 F64E                  		tst.b	($FFFFF64E).w
0001638A 6700                       		beq.s	Obj08_Animate
0001638C 3178 F60E 000C             		move.w	(v_pocketbottom).w,$C(a0) ; copy y-position from water height
00016392                            
00016392                            Obj08_Animate:
00016392 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00016398 4EB9 0000 B962             		jsr	AnimateSprite
0001639E 4EFA 8562                  		jmp	DisplaySprite
000163A2                            ; ===========================================================================
000163A2                            
000163A2                            Obj08_Delete:				; XREF: Obj08_Index
000163A2 4EFA 85AE                  		jmp	DeleteObject	; delete when animation	is complete
000163A6                            ; ===========================================================================
000163A6                            Ani_obj38:
000163A6                            	include "_anim\obj38.asm"
000163A6                            ; ---------------------------------------------------------------------------
000163A6                            ; Animation script - shield and invincibility stars
000163A6                            ; ---------------------------------------------------------------------------
000163A6 0000                       		dc.w byte_14356-Ani_obj38
000163A8 0000                       		dc.w byte_1435E-Ani_obj38
000163AA 0000                       		dc.w byte_14364-Ani_obj38
000163AC 0000                       		dc.w byte_1437E-Ani_obj38
000163AE 0000                       		dc.w byte_14398-Ani_obj38
000163B0 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
000163B8 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000163BE 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000163CF 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000163D8 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000163E9 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000163F2 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00016403 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001640C                            		even
0001640C                            		even
0001640C                            
0001640C                            ; ---------------------------------------------------------------------------
0001640C                            ; Sprite mappings - shield and invincibility stars
0001640C                            ; ---------------------------------------------------------------------------
0001640C                            Map_obj38:
0001640C                            	include "_maps\obj38.asm"
0001640C                            ; ---------------------------------------------------------------------------
0001640C                            ; Sprite mappings - shield and invincibility stars
0001640C                            ; ---------------------------------------------------------------------------
0001640C 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00016410 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00016414 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00016418 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
0001641C 04                         byte_143C2:	dc.b 4
0001641D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00016422 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00016427 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001642C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00016431 04                         byte_143D7:	dc.b 4
00016432 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00016437 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
0001643C 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00016441 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00016446 04                         byte_143EC:	dc.b 4
00016447 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001644C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00016451 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00016456 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001645B 04                         byte_14401:	dc.b 4
0001645C E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00016461 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00016466 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001646B 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00016470 04                         byte_14416:	dc.b 4
00016471 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00016476 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001647B 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00016480 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00016485 04                         byte_1442B:	dc.b 4
00016486 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0001648B E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00016490 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00016495 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0001649A 04                         byte_14440:	dc.b 4
0001649B E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000164A0 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000164A5 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000164AA 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000164B0 00                         		even
000164B0 00                         		even
000164B0                            
000164B0                            ; ---------------------------------------------------------------------------
000164B0                            ; Sprite mappings - special stage entry	from beta
000164B0                            ; ---------------------------------------------------------------------------
000164B0                            
000164B0                            Ani_obj08:
000164B0                            	include "_anim\obj08.asm"
000164B0                            ; ---------------------------------------------------------------------------
000164B0                            ; Animation script - water splash (LZ)
000164B0                            ; ---------------------------------------------------------------------------
000164B0 0000                       		dc.w byte_145C6-Ani_obj08
000164B2 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000164B8                            		even
000164B8                            		even
000164B8                            
000164B8                            ; ---------------------------------------------------------------------------
000164B8                            ; Sprite mappings - water splash (LZ)
000164B8                            ; ---------------------------------------------------------------------------
000164B8                            Map_obj08:
000164B8                            	include "_maps\obj08.asm"
000164B8                            ; ---------------------------------------------------------------------------
000164B8                            ; Sprite mappings - water splash (LZ)
000164B8                            ; ---------------------------------------------------------------------------
000164B8 0000                       		dc.w byte_145D2-Map_obj08
000164BA 0000                       		dc.w byte_145DD-Map_obj08
000164BC 0000                       		dc.w byte_145E8-Map_obj08
000164BE 02                         byte_145D2:	dc.b 2
000164BF F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000164C4 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000164C9 02                         byte_145DD:	dc.b 2
000164CA E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000164CF EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000164D4 01                         byte_145E8:	dc.b 1
000164D5 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000164DA                            		even
000164DA                            		even
000164DA                            
000164DA                            ; ---------------------------------------------------------------------------
000164DA                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000164DA                            ; ---------------------------------------------------------------------------
000164DA                            
000164DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164DA                            
000164DA                            
000164DA                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000164DA 0828 0003 0022             		btst	#3,$22(a0)
000164E0 6700                       		beq.s	loc_14602
000164E2 7000                       		moveq	#0,d0
000164E4 11C0 F768                  		move.b	d0,($FFFFF768).w
000164E8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000164EC 4E75                       		rts	
000164EE                            ; ===========================================================================
000164EE                            
000164EE                            loc_14602:
000164EE 7003                       		moveq	#3,d0
000164F0 11C0 F768                  		move.b	d0,($FFFFF768).w
000164F4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000164F8 1028 0026                  		move.b	$26(a0),d0
000164FC 0600 0020                  		addi.b	#$20,d0
00016500 6A00                       		bpl.s	loc_14624
00016502 1028 0026                  		move.b	$26(a0),d0
00016506 6A00                       		bpl.s	loc_1461E
00016508 5300                       		subq.b	#1,d0
0001650A                            
0001650A                            loc_1461E:
0001650A 0600 0020                  		addi.b	#$20,d0
0001650E 6000                       		bra.s	loc_14630
00016510                            ; ===========================================================================
00016510                            
00016510                            loc_14624:
00016510 1028 0026                  		move.b	$26(a0),d0
00016514 6A00                       		bpl.s	loc_1462C
00016516 5200                       		addq.b	#1,d0
00016518                            
00016518                            loc_1462C:
00016518 0600 001F                  		addi.b	#$1F,d0
0001651C                            
0001651C                            loc_14630:
0001651C 0200 00C0                  		andi.b	#$C0,d0
00016520 0C00 0040                  		cmpi.b	#$40,d0
00016524 6700 0000                  		beq.w	Sonic_WalkVertL
00016528 0C00 0080                  		cmpi.b	#$80,d0
0001652C 6700 0000                  		beq.w	Sonic_WalkCeiling
00016530 0C00 00C0                  		cmpi.b	#$C0,d0
00016534 6700 0000                  		beq.w	Sonic_WalkVertR
00016538 3428 000C                  		move.w	$C(a0),d2
0001653C 3628 0008                  		move.w	8(a0),d3
00016540 7000                       		moveq	#0,d0
00016542 1028 0016                  		move.b	$16(a0),d0
00016546 4880                       		ext.w	d0
00016548 D440                       		add.w	d0,d2
0001654A 1028 0017                  		move.b	$17(a0),d0
0001654E 4880                       		ext.w	d0
00016550 D640                       		add.w	d0,d3
00016552 49F8 F768                  		lea	($FFFFF768).w,a4
00016556 367C 0010                  		movea.w	#$10,a3
0001655A 3C3C 0000                  		move.w	#0,d6
0001655E 7A0D                       		moveq	#$D,d5
00016560 6100 0000                  		bsr.w	FindFloor
00016564 3F01                       		move.w	d1,-(sp)
00016566 3428 000C                  		move.w	$C(a0),d2
0001656A 3628 0008                  		move.w	8(a0),d3
0001656E 7000                       		moveq	#0,d0
00016570 1028 0016                  		move.b	$16(a0),d0
00016574 4880                       		ext.w	d0
00016576 D440                       		add.w	d0,d2
00016578 1028 0017                  		move.b	$17(a0),d0
0001657C 4880                       		ext.w	d0
0001657E 4440                       		neg.w	d0
00016580 D640                       		add.w	d0,d3
00016582 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016586 367C 0010                  		movea.w	#$10,a3
0001658A 3C3C 0000                  		move.w	#0,d6
0001658E 7A0D                       		moveq	#$D,d5
00016590 6100 0000                  		bsr.w	FindFloor
00016594 301F                       		move.w	(sp)+,d0
00016596 6100 0000                  		bsr.w	Sonic_Angle
0001659A 4A41                       		tst.w	d1
0001659C 6700                       		beq.s	locret_146BE
0001659E 6A00                       		bpl.s	loc_146C0
000165A0 0C41 FFF2                  		cmpi.w	#-$E,d1
000165A4 6D00                       		blt.s	locret_146E6
000165A6 D368 000C                  		add.w	d1,$C(a0)
000165AA                            
000165AA                            locret_146BE:
000165AA 4E75                       		rts	
000165AC                            ; ===========================================================================
000165AC                            
000165AC                            loc_146C0:
000165AC 0C41 000E                  		cmpi.w	#$E,d1
000165B0 6E00                       		bgt.s	loc_146CC
000165B2                            
000165B2                            loc_146C6:
000165B2 D368 000C                  		add.w	d1,$C(a0)
000165B6 4E75                       		rts	
000165B8                            ; ===========================================================================
000165B8                            
000165B8                            loc_146CC:
000165B8 4A28 0038                  		tst.b	$38(a0)
000165BC 66F4                       		bne.s	loc_146C6
000165BE 08E8 0001 0022             		bset	#1,$22(a0)
000165C4 08A8 0005 0022             		bclr	#5,$22(a0)
000165CA 117C 0001 001D             		move.b	#1,$1D(a0)
000165D0 4E75                       		rts	
000165D2                            ; ===========================================================================
000165D2                            
000165D2                            locret_146E6:
000165D2 4E75                       		rts	
000165D4                            ; End of function Sonic_AnglePos
000165D4                            
000165D4                            ; ===========================================================================
000165D4 2428 0008                  		move.l	8(a0),d2
000165D8 3028 0010                  		move.w	$10(a0),d0
000165DC 48C0                       		ext.l	d0
000165DE E180                       		asl.l	#8,d0
000165E0 9480                       		sub.l	d0,d2
000165E2 2142 0008                  		move.l	d2,8(a0)
000165E6 303C 0038                  		move.w	#$38,d0
000165EA 48C0                       		ext.l	d0
000165EC E180                       		asl.l	#8,d0
000165EE 9680                       		sub.l	d0,d3
000165F0 2143 000C                  		move.l	d3,$C(a0)
000165F4 4E75                       		rts	
000165F6                            ; ===========================================================================
000165F6                            
000165F6                            locret_1470A:
000165F6 4E75                       		rts	
000165F8                            ; ===========================================================================
000165F8 2628 000C                  		move.l	$C(a0),d3
000165FC 3028 0012                  		move.w	$12(a0),d0
00016600 0440 0038                  		subi.w	#$38,d0
00016604 3140 0012                  		move.w	d0,$12(a0)
00016608 48C0                       		ext.l	d0
0001660A E180                       		asl.l	#8,d0
0001660C 9680                       		sub.l	d0,d3
0001660E 2143 000C                  		move.l	d3,$C(a0)
00016612 4E75                       		rts	
00016614 4E75                       		rts	
00016616                            ; ===========================================================================
00016616 2428 0008                  		move.l	8(a0),d2
0001661A 2628 000C                  		move.l	$C(a0),d3
0001661E 3028 0010                  		move.w	$10(a0),d0
00016622 48C0                       		ext.l	d0
00016624 E180                       		asl.l	#8,d0
00016626 9480                       		sub.l	d0,d2
00016628 3028 0012                  		move.w	$12(a0),d0
0001662C 48C0                       		ext.l	d0
0001662E E180                       		asl.l	#8,d0
00016630 9680                       		sub.l	d0,d3
00016632 2142 0008                  		move.l	d2,8(a0)
00016636 2143 000C                  		move.l	d3,$C(a0)
0001663A 4E75                       		rts	
0001663C                            
0001663C                            ; ---------------------------------------------------------------------------
0001663C                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001663C                            ; ---------------------------------------------------------------------------
0001663C                            
0001663C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001663C                            
0001663C                            
0001663C                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001663C 1438 F76A                  		move.b	($FFFFF76A).w,d2
00016640 B240                       		cmp.w	d0,d1
00016642 6F00                       		ble.s	loc_1475E
00016644 1438 F768                  		move.b	($FFFFF768).w,d2
00016648 3200                       		move.w	d0,d1
0001664A                            
0001664A                            loc_1475E:
0001664A 0802 0000                  		btst	#0,d2
0001664E 6600                       		bne.s	loc_1476A
00016650 1142 0026                  		move.b	d2,$26(a0)
00016654 4E75                       		rts	
00016656                            ; ===========================================================================
00016656                            
00016656                            loc_1476A:
00016656 1428 0026                  		move.b	$26(a0),d2
0001665A 0602 0020                  		addi.b	#$20,d2
0001665E 0202 00C0                  		andi.b	#$C0,d2
00016662 1142 0026                  		move.b	d2,$26(a0)
00016666 4E75                       		rts	
00016668                            ; End of function Sonic_Angle
00016668                            
00016668                            ; ---------------------------------------------------------------------------
00016668                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00016668                            ; ---------------------------------------------------------------------------
00016668                            
00016668                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016668                            
00016668                            
00016668                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00016668 3428 000C                  		move.w	$C(a0),d2
0001666C 3628 0008                  		move.w	8(a0),d3
00016670 7000                       		moveq	#0,d0
00016672 1028 0017                  		move.b	$17(a0),d0
00016676 4880                       		ext.w	d0
00016678 4440                       		neg.w	d0
0001667A D440                       		add.w	d0,d2
0001667C 1028 0016                  		move.b	$16(a0),d0
00016680 4880                       		ext.w	d0
00016682 D640                       		add.w	d0,d3
00016684 49F8 F768                  		lea	($FFFFF768).w,a4
00016688 367C 0010                  		movea.w	#$10,a3
0001668C 3C3C 0000                  		move.w	#0,d6
00016690 7A0D                       		moveq	#$D,d5
00016692 6100 0000                  		bsr.w	FindWall
00016696 3F01                       		move.w	d1,-(sp)
00016698 3428 000C                  		move.w	$C(a0),d2
0001669C 3628 0008                  		move.w	8(a0),d3
000166A0 7000                       		moveq	#0,d0
000166A2 1028 0017                  		move.b	$17(a0),d0
000166A6 4880                       		ext.w	d0
000166A8 D440                       		add.w	d0,d2
000166AA 1028 0016                  		move.b	$16(a0),d0
000166AE 4880                       		ext.w	d0
000166B0 D640                       		add.w	d0,d3
000166B2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000166B6 367C 0010                  		movea.w	#$10,a3
000166BA 3C3C 0000                  		move.w	#0,d6
000166BE 7A0D                       		moveq	#$D,d5
000166C0 6100 0000                  		bsr.w	FindWall
000166C4 301F                       		move.w	(sp)+,d0
000166C6 6100 FF74                  		bsr.w	Sonic_Angle
000166CA 4A41                       		tst.w	d1
000166CC 6700                       		beq.s	locret_147F0
000166CE 6A00                       		bpl.s	loc_147F2
000166D0 0C41 FFF2                  		cmpi.w	#-$E,d1
000166D4 6D00 FF20                  		blt.w	locret_1470A
000166D8 D368 0008                  		add.w	d1,8(a0)
000166DC                            
000166DC                            locret_147F0:
000166DC 4E75                       		rts	
000166DE                            ; ===========================================================================
000166DE                            
000166DE                            loc_147F2:
000166DE 0C41 000E                  		cmpi.w	#$E,d1
000166E2 6E00                       		bgt.s	loc_147FE
000166E4                            
000166E4                            loc_147F8:
000166E4 D368 0008                  		add.w	d1,8(a0)
000166E8 4E75                       		rts	
000166EA                            ; ===========================================================================
000166EA                            
000166EA                            loc_147FE:
000166EA 4A28 0038                  		tst.b	$38(a0)
000166EE 66F4                       		bne.s	loc_147F8
000166F0 08E8 0001 0022             		bset	#1,$22(a0)
000166F6 08A8 0005 0022             		bclr	#5,$22(a0)
000166FC 117C 0001 001D             		move.b	#1,$1D(a0)
00016702 4E75                       		rts	
00016704                            ; End of function Sonic_WalkVertR
00016704                            
00016704                            ; ---------------------------------------------------------------------------
00016704                            ; Subroutine allowing Sonic to walk upside-down
00016704                            ; ---------------------------------------------------------------------------
00016704                            
00016704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016704                            
00016704                            
00016704                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00016704 3428 000C                  		move.w	$C(a0),d2
00016708 3628 0008                  		move.w	8(a0),d3
0001670C 7000                       		moveq	#0,d0
0001670E 1028 0016                  		move.b	$16(a0),d0
00016712 4880                       		ext.w	d0
00016714 9440                       		sub.w	d0,d2
00016716 0A42 000F                  		eori.w	#$F,d2
0001671A 1028 0017                  		move.b	$17(a0),d0
0001671E 4880                       		ext.w	d0
00016720 D640                       		add.w	d0,d3
00016722 49F8 F768                  		lea	($FFFFF768).w,a4
00016726 367C FFF0                  		movea.w	#-$10,a3
0001672A 3C3C 1000                  		move.w	#$1000,d6
0001672E 7A0D                       		moveq	#$D,d5
00016730 6100 0000                  		bsr.w	FindFloor
00016734 3F01                       		move.w	d1,-(sp)
00016736 3428 000C                  		move.w	$C(a0),d2
0001673A 3628 0008                  		move.w	8(a0),d3
0001673E 7000                       		moveq	#0,d0
00016740 1028 0016                  		move.b	$16(a0),d0
00016744 4880                       		ext.w	d0
00016746 9440                       		sub.w	d0,d2
00016748 0A42 000F                  		eori.w	#$F,d2
0001674C 1028 0017                  		move.b	$17(a0),d0
00016750 4880                       		ext.w	d0
00016752 9640                       		sub.w	d0,d3
00016754 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016758 367C FFF0                  		movea.w	#-$10,a3
0001675C 3C3C 1000                  		move.w	#$1000,d6
00016760 7A0D                       		moveq	#$D,d5
00016762 6100 0000                  		bsr.w	FindFloor
00016766 301F                       		move.w	(sp)+,d0
00016768 6100 FED2                  		bsr.w	Sonic_Angle
0001676C 4A41                       		tst.w	d1
0001676E 6700                       		beq.s	locret_14892
00016770 6A00                       		bpl.s	loc_14894
00016772 0C41 FFF2                  		cmpi.w	#-$E,d1
00016776 6D00 FE5A                  		blt.w	locret_146E6
0001677A 9368 000C                  		sub.w	d1,$C(a0)
0001677E                            
0001677E                            locret_14892:
0001677E 4E75                       		rts	
00016780                            ; ===========================================================================
00016780                            
00016780                            loc_14894:
00016780 0C41 000E                  		cmpi.w	#$E,d1
00016784 6E00                       		bgt.s	loc_148A0
00016786                            
00016786                            loc_1489A:
00016786 9368 000C                  		sub.w	d1,$C(a0)
0001678A 4E75                       		rts	
0001678C                            ; ===========================================================================
0001678C                            
0001678C                            loc_148A0:
0001678C 4A28 0038                  		tst.b	$38(a0)
00016790 66F4                       		bne.s	loc_1489A
00016792 08E8 0001 0022             		bset	#1,$22(a0)
00016798 08A8 0005 0022             		bclr	#5,$22(a0)
0001679E 117C 0001 001D             		move.b	#1,$1D(a0)
000167A4 4E75                       		rts	
000167A6                            ; End of function Sonic_WalkCeiling
000167A6                            
000167A6                            ; ---------------------------------------------------------------------------
000167A6                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000167A6                            ; ---------------------------------------------------------------------------
000167A6                            
000167A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167A6                            
000167A6                            
000167A6                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000167A6 3428 000C                  		move.w	$C(a0),d2
000167AA 3628 0008                  		move.w	8(a0),d3
000167AE 7000                       		moveq	#0,d0
000167B0 1028 0017                  		move.b	$17(a0),d0
000167B4 4880                       		ext.w	d0
000167B6 9440                       		sub.w	d0,d2
000167B8 1028 0016                  		move.b	$16(a0),d0
000167BC 4880                       		ext.w	d0
000167BE 9640                       		sub.w	d0,d3
000167C0 0A43 000F                  		eori.w	#$F,d3
000167C4 49F8 F768                  		lea	($FFFFF768).w,a4
000167C8 367C FFF0                  		movea.w	#-$10,a3
000167CC 3C3C 0800                  		move.w	#$800,d6
000167D0 7A0D                       		moveq	#$D,d5
000167D2 6100 0000                  		bsr.w	FindWall
000167D6 3F01                       		move.w	d1,-(sp)
000167D8 3428 000C                  		move.w	$C(a0),d2
000167DC 3628 0008                  		move.w	8(a0),d3
000167E0 7000                       		moveq	#0,d0
000167E2 1028 0017                  		move.b	$17(a0),d0
000167E6 4880                       		ext.w	d0
000167E8 D440                       		add.w	d0,d2
000167EA 1028 0016                  		move.b	$16(a0),d0
000167EE 4880                       		ext.w	d0
000167F0 9640                       		sub.w	d0,d3
000167F2 0A43 000F                  		eori.w	#$F,d3
000167F6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000167FA 367C FFF0                  		movea.w	#-$10,a3
000167FE 3C3C 0800                  		move.w	#$800,d6
00016802 7A0D                       		moveq	#$D,d5
00016804 6100 0000                  		bsr.w	FindWall
00016808 301F                       		move.w	(sp)+,d0
0001680A 6100 FE30                  		bsr.w	Sonic_Angle
0001680E 4A41                       		tst.w	d1
00016810 6700                       		beq.s	locret_14934
00016812 6A00                       		bpl.s	loc_14936
00016814 0C41 FFF2                  		cmpi.w	#-$E,d1
00016818 6D00 FDDC                  		blt.w	locret_1470A
0001681C 9368 0008                  		sub.w	d1,8(a0)
00016820                            
00016820                            locret_14934:
00016820 4E75                       		rts	
00016822                            ; ===========================================================================
00016822                            
00016822                            loc_14936:
00016822 0C41 000E                  		cmpi.w	#$E,d1
00016826 6E00                       		bgt.s	loc_14942
00016828                            
00016828                            loc_1493C:
00016828 9368 0008                  		sub.w	d1,8(a0)
0001682C 4E75                       		rts	
0001682E                            ; ===========================================================================
0001682E                            
0001682E                            loc_14942:
0001682E 4A28 0038                  		tst.b	$38(a0)
00016832 66F4                       		bne.s	loc_1493C
00016834 08E8 0001 0022             		bset	#1,$22(a0)
0001683A 08A8 0005 0022             		bclr	#5,$22(a0)
00016840 117C 0001 001D             		move.b	#1,$1D(a0)
00016846 4E75                       		rts	
00016848                            ; End of function Sonic_WalkVertL
00016848                            
00016848                            ; ---------------------------------------------------------------------------
00016848                            ; Subroutine to	find which tile	the object is standing on
00016848                            ; ---------------------------------------------------------------------------
00016848                            
00016848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016848                            
00016848                            
00016848                            Floor_ChkTile_LocateBlock:
00016848 43F8 A400                  		lea	($FFFFA400).w,a1
0001684C 1231 0000                  		move.b	(a1,d0.w),d1
00016850 6700                       		beq.s	Floor_ChkTile_EmptyChunk	; if the chunk ID is 0 (empty chunk), branch
00016852 6B00                       		bmi.s	loc_1499A
00016854 5301                       		subq.b	#1,d1		; the empty chunk is not included in the chunk mappings, subtract 1 to read the correct data
00016856 4881                       		ext.w	d1
00016858 EE59                       		ror.w	#7,d1
0001685A 3002                       		move.w	d2,d0
0001685C D040                       		add.w	d0,d0
0001685E 0240 01E0                  		andi.w	#$1E0,d0
00016862 D240                       		add.w	d0,d1
00016864 3003                       		move.w	d3,d0
00016866 E648                       		lsr.w	#3,d0
00016868 0240 001E                  		andi.w	#$1E,d0
0001686C D240                       		add.w	d0,d1
0001686E 4E75                       		rts	
00016870                            ; ---------------------------------------------------------------------------
00016870                            
00016870                            loc_1499A:
00016870 0241 007F                  		andi.w	#$7F,d1
00016874 0828 0006 0001             		btst	#6,1(a0)
0001687A 6700                       		beq.s	loc_149B2
0001687C 5241                       		addq.w	#1,d1
0001687E 0C41 0029                  		cmpi.w	#$29,d1
00016882 6600                       		bne.s	loc_149B2
00016884 323C 0051                  		move.w	#$51,d1
00016888                            
00016888                            loc_149B2:
00016888 5301                       		subq.b	#1,d1
0001688A EE59                       		ror.w	#7,d1
0001688C 3002                       		move.w	d2,d0
0001688E D040                       		add.w	d0,d0
00016890 0240 01E0                  		andi.w	#$1E0,d0
00016894 D240                       		add.w	d0,d1
00016896 3003                       		move.w	d3,d0
00016898 E648                       		lsr.w	#3,d0
0001689A 0240 001E                  		andi.w	#$1E,d0
0001689E D240                       		add.w	d0,d1
000168A0 4E75                       		rts	
000168A2                            ; ---------------------------------------------------------------------------
000168A2                            
000168A2                            Floor_ChkTile_EmptyChunk:
000168A2 43F8 FF00                  		lea	($FFFFFF00).w,a1	; override a1
000168A6 584F                       		addq.w	#4,sp			; pop a stack frame to avoid adding the address of the chunk mappings to a1
000168A8 4E75                       		rts	
000168AA                            
000168AA                            ; ---------------------------------------------------------------------------
000168AA                            ; Subroutine to	find which tile	the object is standing on
000168AA                            ; ---------------------------------------------------------------------------
000168AA                            
000168AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168AA                            
000168AA                            
000168AA                            Floor_ChkTile:				; XREF: FindFloor; et al
000168AA 3002                       		move.w	d2,d0
000168AC E248                       		lsr.w	#1,d0
000168AE 0240 0380                  		andi.w	#$380,d0
000168B2 3203                       		move.w	d3,d1
000168B4 E049                       		lsr.w	#8,d1
000168B6 0241 007F                  		andi.w	#$7F,d1
000168BA D041                       		add.w	d1,d0
000168BC 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
000168C0 6700                       		beq.s	@ghz		; if yes, branch		
000168C2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
000168C8 6700                       		beq.s	@lz		
000168CA 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
000168D0 6700                       		beq.s	@mz		
000168D2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
000168D8 6700                       		beq.s	@slz		
000168DA 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
000168E0 6700                       		beq.s	@syz		
000168E2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
000168E8 6700                       		beq.s	@sbz				
000168EA 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
000168F0 6700                       		beq.s	@ghz		; if yes, branch
000168F2 72FF                       		moveq	#-1,d1
000168F4 6100 FF52                  		bsr.w	Floor_ChkTile_LocateBlock
000168F8 2241                       		movea.l	d1,a1
000168FA 4E75                       		rts	
000168FC                            ; ---------------------------------------------------------------------------
000168FC                            
000168FC                            @ghz:
000168FC 7200                       		moveq	#0,d1
000168FE 6100 FF48                  		bsr.w	Floor_ChkTile_LocateBlock
00016902 0681 0000 0000             		add.l	#Blk256_GHZ,d1
00016908 2241                       		movea.l	d1,a1
0001690A 4E75                       		rts	
0001690C                            
0001690C                            @lz:
0001690C 7200                       		moveq	#0,d1
0001690E 6100 FF38                  		bsr.w	Floor_ChkTile_LocateBlock
00016912 0681 0000 0000             		add.l	#Blk256_LZ,d1
00016918 2241                       		movea.l	d1,a1
0001691A 4E75                       		rts	
0001691C                            
0001691C                            @mz:
0001691C 7200                       		moveq	#0,d1
0001691E 6100 FF28                  		bsr.w	Floor_ChkTile_LocateBlock
00016922 0681 0000 0000             		add.l	#Blk256_MZ,d1
00016928 2241                       		movea.l	d1,a1
0001692A 4E75                       		rts	
0001692C                            
0001692C                            @slz:
0001692C 7200                       		moveq	#0,d1
0001692E 6100 FF18                  		bsr.w	Floor_ChkTile_LocateBlock
00016932 0681 0000 0000             		add.l	#Blk256_SLZ,d1
00016938 2241                       		movea.l	d1,a1
0001693A 4E75                       		rts	
0001693C                            
0001693C                            @syz:
0001693C 7200                       		moveq	#0,d1
0001693E 6100 FF08                  		bsr.w	Floor_ChkTile_LocateBlock
00016942 0681 0000 0000             		add.l	#Blk256_SYZ,d1
00016948 2241                       		movea.l	d1,a1
0001694A 4E75                       		rts	
0001694C                            
0001694C                            @sbz:
0001694C 7200                       		moveq	#0,d1
0001694E 6100 FEF8                  		bsr.w	Floor_ChkTile_LocateBlock
00016952 0681 0000 0000             		add.l	#Blk256_SBZ,d1
00016958 2241                       		movea.l	d1,a1
0001695A 4E75                       		rts			
0001695C                            ; End of function Floor_ChkTile
0001695C                            
0001695C                            
0001695C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001695C                            
0001695C                            
0001695C                            FindFloor:				; XREF: Sonic_AnglePos; et al
0001695C 6100 FF4C                  		bsr.w	Floor_ChkTile
00016960 3011                       		move.w	(a1),d0
00016962 3800                       		move.w	d0,d4
00016964 0240 07FF                  		andi.w	#$7FF,d0
00016968 6700                       		beq.s	loc_149DE
0001696A 0B04                       		btst	d5,d4
0001696C 6600                       		bne.s	loc_149EC
0001696E                            
0001696E                            loc_149DE:
0001696E D44B                       		add.w	a3,d2
00016970 6100 0000                  		bsr.w	FindFloor2
00016974 944B                       		sub.w	a3,d2
00016976 0641 0010                  		addi.w	#$10,d1
0001697A 4E75                       		rts	
0001697C                            ; ===========================================================================
0001697C                            
0001697C                            loc_149EC:
0001697C 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00016980 1032 0000                  		move.b	(a2,d0.w),d0
00016984 0240 00FF                  		andi.w	#$FF,d0
00016988 67E4                       		beq.s	loc_149DE
0001698A 45F9 0000 0000             		lea	(AngleMap).l,a2
00016990 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016994 E948                       		lsl.w	#4,d0
00016996 3203                       		move.w	d3,d1
00016998 0804 000B                  		btst	#$B,d4
0001699C 6700                       		beq.s	loc_14A12
0001699E 4641                       		not.w	d1
000169A0 4414                       		neg.b	(a4)
000169A2                            
000169A2                            loc_14A12:
000169A2 0804 000C                  		btst	#$C,d4
000169A6 6700                       		beq.s	loc_14A22
000169A8 0614 0040                  		addi.b	#$40,(a4)
000169AC 4414                       		neg.b	(a4)
000169AE 0414 0040                  		subi.b	#$40,(a4)
000169B2                            
000169B2                            loc_14A22:
000169B2 0241 000F                  		andi.w	#$F,d1
000169B6 D240                       		add.w	d0,d1
000169B8 45F9 0000 0000             		lea	(CollArray1).l,a2
000169BE 1032 1000                  		move.b	(a2,d1.w),d0
000169C2 4880                       		ext.w	d0
000169C4 BD44                       		eor.w	d6,d4
000169C6 0804 000C                  		btst	#$C,d4
000169CA 6700                       		beq.s	loc_14A3E
000169CC 4440                       		neg.w	d0
000169CE                            
000169CE                            loc_14A3E:
000169CE 4A40                       		tst.w	d0
000169D0 679C                       		beq.s	loc_149DE
000169D2 6B00                       		bmi.s	loc_14A5A
000169D4 0C00 0010                  		cmpi.b	#$10,d0
000169D8 6700                       		beq.s	loc_14A66
000169DA 3202                       		move.w	d2,d1
000169DC 0241 000F                  		andi.w	#$F,d1
000169E0 D041                       		add.w	d1,d0
000169E2 323C 000F                  		move.w	#$F,d1
000169E6 9240                       		sub.w	d0,d1
000169E8 4E75                       		rts	
000169EA                            ; ===========================================================================
000169EA                            
000169EA                            loc_14A5A:
000169EA 3202                       		move.w	d2,d1
000169EC 0241 000F                  		andi.w	#$F,d1
000169F0 D041                       		add.w	d1,d0
000169F2 6A00 FF7A                  		bpl.w	loc_149DE
000169F6                            
000169F6                            loc_14A66:
000169F6 944B                       		sub.w	a3,d2
000169F8 6100 0000                  		bsr.w	FindFloor2
000169FC D44B                       		add.w	a3,d2
000169FE 0441 0010                  		subi.w	#$10,d1
00016A02 4E75                       		rts	
00016A04                            ; End of function FindFloor
00016A04                            
00016A04                            
00016A04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A04                            
00016A04                            
00016A04                            FindFloor2:				; XREF: FindFloor
00016A04 6100 FEA4                  		bsr.w	Floor_ChkTile
00016A08 3011                       		move.w	(a1),d0
00016A0A 3800                       		move.w	d0,d4
00016A0C 0240 07FF                  		andi.w	#$7FF,d0
00016A10 6700                       		beq.s	loc_14A86
00016A12 0B04                       		btst	d5,d4
00016A14 6600                       		bne.s	loc_14A94
00016A16                            
00016A16                            loc_14A86:
00016A16 323C 000F                  		move.w	#$F,d1
00016A1A 3002                       		move.w	d2,d0
00016A1C 0240 000F                  		andi.w	#$F,d0
00016A20 9240                       		sub.w	d0,d1
00016A22 4E75                       		rts	
00016A24                            ; ===========================================================================
00016A24                            
00016A24                            loc_14A94:
00016A24 2478 F796                  		movea.l	($FFFFF796).w,a2
00016A28 1032 0000                  		move.b	(a2,d0.w),d0
00016A2C 0240 00FF                  		andi.w	#$FF,d0
00016A30 67E4                       		beq.s	loc_14A86
00016A32 45F9 0000 0000             		lea	(AngleMap).l,a2
00016A38 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016A3C E948                       		lsl.w	#4,d0
00016A3E 3203                       		move.w	d3,d1
00016A40 0804 000B                  		btst	#$B,d4
00016A44 6700                       		beq.s	loc_14ABA
00016A46 4641                       		not.w	d1
00016A48 4414                       		neg.b	(a4)
00016A4A                            
00016A4A                            loc_14ABA:
00016A4A 0804 000C                  		btst	#$C,d4
00016A4E 6700                       		beq.s	loc_14ACA
00016A50 0614 0040                  		addi.b	#$40,(a4)
00016A54 4414                       		neg.b	(a4)
00016A56 0414 0040                  		subi.b	#$40,(a4)
00016A5A                            
00016A5A                            loc_14ACA:
00016A5A 0241 000F                  		andi.w	#$F,d1
00016A5E D240                       		add.w	d0,d1
00016A60 45F9 0000 0000             		lea	(CollArray1).l,a2
00016A66 1032 1000                  		move.b	(a2,d1.w),d0
00016A6A 4880                       		ext.w	d0
00016A6C BD44                       		eor.w	d6,d4
00016A6E 0804 000C                  		btst	#$C,d4
00016A72 6700                       		beq.s	loc_14AE6
00016A74 4440                       		neg.w	d0
00016A76                            
00016A76                            loc_14AE6:
00016A76 4A40                       		tst.w	d0
00016A78 679C                       		beq.s	loc_14A86
00016A7A 6B00                       		bmi.s	loc_14AFC
00016A7C 3202                       		move.w	d2,d1
00016A7E 0241 000F                  		andi.w	#$F,d1
00016A82 D041                       		add.w	d1,d0
00016A84 323C 000F                  		move.w	#$F,d1
00016A88 9240                       		sub.w	d0,d1
00016A8A 4E75                       		rts	
00016A8C                            ; ===========================================================================
00016A8C                            
00016A8C                            loc_14AFC:
00016A8C 3202                       		move.w	d2,d1
00016A8E 0241 000F                  		andi.w	#$F,d1
00016A92 D041                       		add.w	d1,d0
00016A94 6A00 FF80                  		bpl.w	loc_14A86
00016A98 4641                       		not.w	d1
00016A9A 4E75                       		rts	
00016A9C                            ; End of function FindFloor2
00016A9C                            
00016A9C                            
00016A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A9C                            
00016A9C                            
00016A9C                            FindWall:				; XREF: Sonic_WalkVertR; et al
00016A9C 6100 FE0C                  		bsr.w	Floor_ChkTile
00016AA0 3011                       		move.w	(a1),d0
00016AA2 3800                       		move.w	d0,d4
00016AA4 0240 07FF                  		andi.w	#$7FF,d0
00016AA8 6700                       		beq.s	loc_14B1E
00016AAA 0B04                       		btst	d5,d4
00016AAC 6600                       		bne.s	loc_14B2C
00016AAE                            
00016AAE                            loc_14B1E:
00016AAE D64B                       		add.w	a3,d3
00016AB0 6100 0000                  		bsr.w	FindWall2
00016AB4 964B                       		sub.w	a3,d3
00016AB6 0641 0010                  		addi.w	#$10,d1
00016ABA 4E75                       		rts	
00016ABC                            ; ===========================================================================
00016ABC                            
00016ABC                            loc_14B2C:
00016ABC 2478 F796                  		movea.l	($FFFFF796).w,a2
00016AC0 1032 0000                  		move.b	(a2,d0.w),d0
00016AC4 0240 00FF                  		andi.w	#$FF,d0
00016AC8 67E4                       		beq.s	loc_14B1E
00016ACA 45F9 0000 0000             		lea	(AngleMap).l,a2
00016AD0 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016AD4 E948                       		lsl.w	#4,d0
00016AD6 3202                       		move.w	d2,d1
00016AD8 0804 000C                  		btst	#$C,d4
00016ADC 6700                       		beq.s	loc_14B5A
00016ADE 4641                       		not.w	d1
00016AE0 0614 0040                  		addi.b	#$40,(a4)
00016AE4 4414                       		neg.b	(a4)
00016AE6 0414 0040                  		subi.b	#$40,(a4)
00016AEA                            
00016AEA                            loc_14B5A:
00016AEA 0804 000B                  		btst	#$B,d4
00016AEE 6700                       		beq.s	loc_14B62
00016AF0 4414                       		neg.b	(a4)
00016AF2                            
00016AF2                            loc_14B62:
00016AF2 0241 000F                  		andi.w	#$F,d1
00016AF6 D240                       		add.w	d0,d1
00016AF8 45F9 0000 0000             		lea	(CollArray2).l,a2
00016AFE 1032 1000                  		move.b	(a2,d1.w),d0
00016B02 4880                       		ext.w	d0
00016B04 BD44                       		eor.w	d6,d4
00016B06 0804 000B                  		btst	#$B,d4
00016B0A 6700                       		beq.s	loc_14B7E
00016B0C 4440                       		neg.w	d0
00016B0E                            
00016B0E                            loc_14B7E:
00016B0E 4A40                       		tst.w	d0
00016B10 679C                       		beq.s	loc_14B1E
00016B12 6B00                       		bmi.s	loc_14B9A
00016B14 0C00 0010                  		cmpi.b	#$10,d0
00016B18 6700                       		beq.s	loc_14BA6
00016B1A 3203                       		move.w	d3,d1
00016B1C 0241 000F                  		andi.w	#$F,d1
00016B20 D041                       		add.w	d1,d0
00016B22 323C 000F                  		move.w	#$F,d1
00016B26 9240                       		sub.w	d0,d1
00016B28 4E75                       		rts	
00016B2A                            ; ===========================================================================
00016B2A                            
00016B2A                            loc_14B9A:
00016B2A 3203                       		move.w	d3,d1
00016B2C 0241 000F                  		andi.w	#$F,d1
00016B30 D041                       		add.w	d1,d0
00016B32 6A00 FF7A                  		bpl.w	loc_14B1E
00016B36                            
00016B36                            loc_14BA6:
00016B36 964B                       		sub.w	a3,d3
00016B38 6100 0000                  		bsr.w	FindWall2
00016B3C D64B                       		add.w	a3,d3
00016B3E 0441 0010                  		subi.w	#$10,d1
00016B42 4E75                       		rts	
00016B44                            ; End of function FindWall
00016B44                            
00016B44                            
00016B44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B44                            
00016B44                            
00016B44                            FindWall2:				; XREF: FindWall
00016B44 6100 FD64                  		bsr.w	Floor_ChkTile
00016B48 3011                       		move.w	(a1),d0
00016B4A 3800                       		move.w	d0,d4
00016B4C 0240 07FF                  		andi.w	#$7FF,d0
00016B50 6700                       		beq.s	loc_14BC6
00016B52 0B04                       		btst	d5,d4
00016B54 6600                       		bne.s	loc_14BD4
00016B56                            
00016B56                            loc_14BC6:
00016B56 323C 000F                  		move.w	#$F,d1
00016B5A 3003                       		move.w	d3,d0
00016B5C 0240 000F                  		andi.w	#$F,d0
00016B60 9240                       		sub.w	d0,d1
00016B62 4E75                       		rts	
00016B64                            ; ===========================================================================
00016B64                            
00016B64                            loc_14BD4:
00016B64 2478 F796                  		movea.l	($FFFFF796).w,a2
00016B68 1032 0000                  		move.b	(a2,d0.w),d0
00016B6C 0240 00FF                  		andi.w	#$FF,d0
00016B70 67E4                       		beq.s	loc_14BC6
00016B72 45F9 0000 0000             		lea	(AngleMap).l,a2
00016B78 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016B7C E948                       		lsl.w	#4,d0
00016B7E 3202                       		move.w	d2,d1
00016B80 0804 000C                  		btst	#$C,d4
00016B84 6700                       		beq.s	loc_14C02
00016B86 4641                       		not.w	d1
00016B88 0614 0040                  		addi.b	#$40,(a4)
00016B8C 4414                       		neg.b	(a4)
00016B8E 0414 0040                  		subi.b	#$40,(a4)
00016B92                            
00016B92                            loc_14C02:
00016B92 0804 000B                  		btst	#$B,d4
00016B96 6700                       		beq.s	loc_14C0A
00016B98 4414                       		neg.b	(a4)
00016B9A                            
00016B9A                            loc_14C0A:
00016B9A 0241 000F                  		andi.w	#$F,d1
00016B9E D240                       		add.w	d0,d1
00016BA0 45F9 0000 0000             		lea	(CollArray2).l,a2
00016BA6 1032 1000                  		move.b	(a2,d1.w),d0
00016BAA 4880                       		ext.w	d0
00016BAC BD44                       		eor.w	d6,d4
00016BAE 0804 000B                  		btst	#$B,d4
00016BB2 6700                       		beq.s	loc_14C26
00016BB4 4440                       		neg.w	d0
00016BB6                            
00016BB6                            loc_14C26:
00016BB6 4A40                       		tst.w	d0
00016BB8 679C                       		beq.s	loc_14BC6
00016BBA 6B00                       		bmi.s	loc_14C3C
00016BBC 3203                       		move.w	d3,d1
00016BBE 0241 000F                  		andi.w	#$F,d1
00016BC2 D041                       		add.w	d1,d0
00016BC4 323C 000F                  		move.w	#$F,d1
00016BC8 9240                       		sub.w	d0,d1
00016BCA 4E75                       		rts	
00016BCC                            ; ===========================================================================
00016BCC                            
00016BCC                            loc_14C3C:
00016BCC 3203                       		move.w	d3,d1
00016BCE 0241 000F                  		andi.w	#$F,d1
00016BD2 D041                       		add.w	d1,d0
00016BD4 6A00 FF80                  		bpl.w	loc_14BC6
00016BD8 4641                       		not.w	d1
00016BDA 4E75                       		rts	
00016BDC                            ; End of function FindWall2
00016BDC                            
00016BDC                            ; ---------------------------------------------------------------------------
00016BDC                            ; Unused floor/wall subroutine - logs something	to do with collision
00016BDC                            ; ---------------------------------------------------------------------------
00016BDC                            
00016BDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BDC                            
00016BDC                            
00016BDC                            FloorLog_Unk:				; XREF: Level
00016BDC 4E75                       		rts	
00016BDE                            
00016BDE 43F9 0000 0000             		lea	(CollArray1).l,a1
00016BE4 45F9 0000 0000             		lea	(CollArray1).l,a2
00016BEA 363C 00FF                  		move.w	#$FF,d3
00016BEE                            
00016BEE                            loc_14C5E:
00016BEE 7A10                       		moveq	#$10,d5
00016BF0 343C 000F                  		move.w	#$F,d2
00016BF4                            
00016BF4                            loc_14C64:
00016BF4 7800                       		moveq	#0,d4
00016BF6 323C 000F                  		move.w	#$F,d1
00016BFA                            
00016BFA                            loc_14C6A:
00016BFA 3019                       		move.w	(a1)+,d0
00016BFC EAA8                       		lsr.l	d5,d0
00016BFE D944                       		addx.w	d4,d4
00016C00 51C9 FFF8                  		dbf	d1,loc_14C6A
00016C04                            
00016C04 34C4                       		move.w	d4,(a2)+
00016C06 92FC 0020                  		suba.w	#$20,a1
00016C0A 5345                       		subq.w	#1,d5
00016C0C 51CA FFE6                  		dbf	d2,loc_14C64
00016C10                            
00016C10 D2FC 0020                  		adda.w	#$20,a1
00016C14 51CB FFD8                  		dbf	d3,loc_14C5E
00016C18                            
00016C18 43F9 0000 0000             		lea	(CollArray1).l,a1
00016C1E 45F9 0000 0000             		lea	(CollArray2).l,a2
00016C24 6100                       		bsr.s	FloorLog_Unk2
00016C26 43F9 0000 0000             		lea	(CollArray1).l,a1
00016C2C 45F9 0000 0000             		lea	(CollArray1).l,a2
00016C32                            
00016C32                            ; End of function FloorLog_Unk
00016C32                            
00016C32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C32                            
00016C32                            
00016C32                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016C32 363C 0FFF                  		move.w	#$FFF,d3
00016C36                            
00016C36                            loc_14CA6:
00016C36 7400                       		moveq	#0,d2
00016C38 323C 000F                  		move.w	#$F,d1
00016C3C 3019                       		move.w	(a1)+,d0
00016C3E 6700                       		beq.s	loc_14CD4
00016C40 6B00                       		bmi.s	loc_14CBE
00016C42                            
00016C42                            loc_14CB2:
00016C42 E248                       		lsr.w	#1,d0
00016C44 6400                       		bcc.s	loc_14CB8
00016C46 5202                       		addq.b	#1,d2
00016C48                            
00016C48                            loc_14CB8:
00016C48 51C9 FFF8                  		dbf	d1,loc_14CB2
00016C4C                            
00016C4C 6000                       		bra.s	loc_14CD6
00016C4E                            ; ===========================================================================
00016C4E                            
00016C4E                            loc_14CBE:
00016C4E 0C40 FFFF                  		cmpi.w	#-1,d0
00016C52 6700                       		beq.s	loc_14CD0
00016C54                            
00016C54                            loc_14CC4:
00016C54 E348                       		lsl.w	#1,d0
00016C56 6400                       		bcc.s	loc_14CCA
00016C58 5302                       		subq.b	#1,d2
00016C5A                            
00016C5A                            loc_14CCA:
00016C5A 51C9 FFF8                  		dbf	d1,loc_14CC4
00016C5E                            
00016C5E 6000                       		bra.s	loc_14CD6
00016C60                            ; ===========================================================================
00016C60                            
00016C60                            loc_14CD0:
00016C60 303C 0010                  		move.w	#$10,d0
00016C64                            
00016C64                            loc_14CD4:
00016C64 3400                       		move.w	d0,d2
00016C66                            
00016C66                            loc_14CD6:
00016C66 14C2                       		move.b	d2,(a2)+
00016C68 51CB FFCC                  		dbf	d3,loc_14CA6
00016C6C                            
00016C6C 4E75                       		rts	
00016C6E                            
00016C6E                            ; End of function FloorLog_Unk2
00016C6E                            
00016C6E                            
00016C6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C6E                            
00016C6E                            
00016C6E                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016C6E 2628 0008                  		move.l	8(a0),d3
00016C72 2428 000C                  		move.l	$C(a0),d2
00016C76 3228 0010                  		move.w	$10(a0),d1
00016C7A 48C1                       		ext.l	d1
00016C7C E181                       		asl.l	#8,d1
00016C7E D681                       		add.l	d1,d3
00016C80 3228 0012                  		move.w	$12(a0),d1
00016C84 48C1                       		ext.l	d1
00016C86 E181                       		asl.l	#8,d1
00016C88 D481                       		add.l	d1,d2
00016C8A 4842                       		swap	d2
00016C8C 4843                       		swap	d3
00016C8E 11C0 F768                  		move.b	d0,($FFFFF768).w
00016C92 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016C96 1200                       		move.b	d0,d1
00016C98 0600 0020                  		addi.b	#$20,d0
00016C9C 6A00                       		bpl.s	loc_14D1A
00016C9E 1001                       		move.b	d1,d0
00016CA0 6A00                       		bpl.s	loc_14D14
00016CA2 5300                       		subq.b	#1,d0
00016CA4                            
00016CA4                            loc_14D14:
00016CA4 0600 0020                  		addi.b	#$20,d0
00016CA8 6000                       		bra.s	loc_14D24
00016CAA                            ; ===========================================================================
00016CAA                            
00016CAA                            loc_14D1A:
00016CAA 1001                       		move.b	d1,d0
00016CAC 6A00                       		bpl.s	loc_14D20
00016CAE 5200                       		addq.b	#1,d0
00016CB0                            
00016CB0                            loc_14D20:
00016CB0 0600 001F                  		addi.b	#$1F,d0
00016CB4                            
00016CB4                            loc_14D24:
00016CB4 0200 00C0                  		andi.b	#$C0,d0
00016CB8 6700 0000                  		beq.w	loc_14DF0
00016CBC 0C00 0080                  		cmpi.b	#$80,d0
00016CC0 6700 0000                  		beq.w	loc_14F7C
00016CC4 0201 0038                  		andi.b	#$38,d1
00016CC8 6600                       		bne.s	loc_14D3C
00016CCA 5042                       		addq.w	#8,d2
00016CCC                            
00016CCC                            loc_14D3C:
00016CCC 0C00 0040                  		cmpi.b	#$40,d0
00016CD0 6700 0000                  		beq.w	loc_1504A
00016CD4 6000 0000                  		bra.w	loc_14EBC
00016CD8                            
00016CD8                            ; End of function Sonic_WalkSpeed
00016CD8                            
00016CD8                            
00016CD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CD8                            
00016CD8                            
00016CD8                            sub_14D48:				; XREF: Sonic_Jump
00016CD8 11C0 F768                  		move.b	d0,($FFFFF768).w
00016CDC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016CE0 0600 0020                  		addi.b	#$20,d0
00016CE4 0200 00C0                  		andi.b	#$C0,d0
00016CE8 0C00 0040                  		cmpi.b	#$40,d0
00016CEC 6700 0000                  		beq.w	loc_14FD6
00016CF0 0C00 0080                  		cmpi.b	#$80,d0
00016CF4 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016CF8 0C00 00C0                  		cmpi.b	#$C0,d0
00016CFC 6700 0000                  		beq.w	sub_14E50
00016D00                            
00016D00                            ; End of function sub_14D48
00016D00                            
00016D00                            ; ---------------------------------------------------------------------------
00016D00                            ; Subroutine to	make Sonic land	on the floor after jumping
00016D00                            ; ---------------------------------------------------------------------------
00016D00                            
00016D00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D00                            
00016D00                            
00016D00                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016D00 3428 000C                  		move.w	$C(a0),d2
00016D04 3628 0008                  		move.w	8(a0),d3
00016D08 7000                       		moveq	#0,d0
00016D0A 1028 0016                  		move.b	$16(a0),d0
00016D0E 4880                       		ext.w	d0
00016D10 D440                       		add.w	d0,d2
00016D12 1028 0017                  		move.b	$17(a0),d0
00016D16 4880                       		ext.w	d0
00016D18 D640                       		add.w	d0,d3
00016D1A 49F8 F768                  		lea	($FFFFF768).w,a4
00016D1E 367C 0010                  		movea.w	#$10,a3
00016D22 3C3C 0000                  		move.w	#0,d6
00016D26 7A0D                       		moveq	#$D,d5
00016D28 6100 FC32                  		bsr.w	FindFloor
00016D2C 3F01                       		move.w	d1,-(sp)
00016D2E 3428 000C                  		move.w	$C(a0),d2
00016D32 3628 0008                  		move.w	8(a0),d3
00016D36 7000                       		moveq	#0,d0
00016D38 1028 0016                  		move.b	$16(a0),d0
00016D3C 4880                       		ext.w	d0
00016D3E D440                       		add.w	d0,d2
00016D40 1028 0017                  		move.b	$17(a0),d0
00016D44 4880                       		ext.w	d0
00016D46 9640                       		sub.w	d0,d3
00016D48 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016D4C 367C 0010                  		movea.w	#$10,a3
00016D50 3C3C 0000                  		move.w	#0,d6
00016D54 7A0D                       		moveq	#$D,d5
00016D56 6100 FC04                  		bsr.w	FindFloor
00016D5A 301F                       		move.w	(sp)+,d0
00016D5C 143C 0000                  		move.b	#0,d2
00016D60                            
00016D60                            loc_14DD0:
00016D60 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016D64 B240                       		cmp.w	d0,d1
00016D66 6F00                       		ble.s	loc_14DDE
00016D68 1638 F768                  		move.b	($FFFFF768).w,d3
00016D6C C141                       		exg	d0,d1
00016D6E                            
00016D6E                            loc_14DDE:
00016D6E 0803 0000                  		btst	#0,d3
00016D72 6700                       		beq.s	locret_14DE6
00016D74 1602                       		move.b	d2,d3
00016D76                            
00016D76                            locret_14DE6:
00016D76 4E75                       		rts	
00016D78                            
00016D78                            ; End of function Sonic_HitFloor
00016D78                            
00016D78                            ; ===========================================================================
00016D78 3428 000C                  		move.w	$C(a0),d2
00016D7C 3628 0008                  		move.w	8(a0),d3
00016D80                            
00016D80                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016D80 0642 000A                  		addi.w	#$A,d2
00016D84 49F8 F768                  		lea	($FFFFF768).w,a4
00016D88 367C 0010                  		movea.w	#$10,a3
00016D8C 3C3C 0000                  		move.w	#0,d6
00016D90 7A0E                       		moveq	#$E,d5
00016D92 6100 FBC8                  		bsr.w	FindFloor
00016D96 143C 0000                  		move.b	#0,d2
00016D9A                            
00016D9A                            loc_14E0A:				; XREF: sub_14EB4
00016D9A 1638 F768                  		move.b	($FFFFF768).w,d3
00016D9E 0803 0000                  		btst	#0,d3
00016DA2 6700                       		beq.s	locret_14E16
00016DA4 1602                       		move.b	d2,d3
00016DA6                            
00016DA6                            locret_14E16:
00016DA6 4E75                       		rts	
00016DA8                            
00016DA8                            ; ---------------------------------------------------------------------------
00016DA8                            ; Subroutine allowing objects to interact with the floor
00016DA8                            ; ---------------------------------------------------------------------------
00016DA8                            
00016DA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DA8                            
00016DA8                            
00016DA8                            ObjHitFloor:
00016DA8 3628 0008                  		move.w	8(a0),d3
00016DAC                            
00016DAC                            ; End of function ObjHitFloor
00016DAC                            
00016DAC                            
00016DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DAC                            
00016DAC                            
00016DAC                            ObjHitFloor2:
00016DAC 3428 000C                  		move.w	$C(a0),d2
00016DB0 7000                       		moveq	#0,d0
00016DB2 1028 0016                  		move.b	$16(a0),d0
00016DB6 4880                       		ext.w	d0
00016DB8 D440                       		add.w	d0,d2
00016DBA 49F8 F768                  		lea	($FFFFF768).w,a4
00016DBE 18BC 0000                  		move.b	#0,(a4)
00016DC2 367C 0010                  		movea.w	#$10,a3
00016DC6 3C3C 0000                  		move.w	#0,d6
00016DCA 7A0D                       		moveq	#$D,d5
00016DCC 6100 FB8E                  		bsr.w	FindFloor
00016DD0 1638 F768                  		move.b	($FFFFF768).w,d3
00016DD4 0803 0000                  		btst	#0,d3
00016DD8 6700                       		beq.s	locret_14E4E
00016DDA 163C 0000                  		move.b	#0,d3
00016DDE                            
00016DDE                            locret_14E4E:
00016DDE 4E75                       		rts	
00016DE0                            ; End of function ObjHitFloor2
00016DE0                            
00016DE0                            
00016DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DE0                            
00016DE0                            
00016DE0                            sub_14E50:				; XREF: sub_14D48
00016DE0 3428 000C                  		move.w	$C(a0),d2
00016DE4 3628 0008                  		move.w	8(a0),d3
00016DE8 7000                       		moveq	#0,d0
00016DEA 1028 0017                  		move.b	$17(a0),d0
00016DEE 4880                       		ext.w	d0
00016DF0 9440                       		sub.w	d0,d2
00016DF2 1028 0016                  		move.b	$16(a0),d0
00016DF6 4880                       		ext.w	d0
00016DF8 D640                       		add.w	d0,d3
00016DFA 49F8 F768                  		lea	($FFFFF768).w,a4
00016DFE 367C 0010                  		movea.w	#$10,a3
00016E02 3C3C 0000                  		move.w	#0,d6
00016E06 7A0E                       		moveq	#$E,d5
00016E08 6100 FC92                  		bsr.w	FindWall
00016E0C 3F01                       		move.w	d1,-(sp)
00016E0E 3428 000C                  		move.w	$C(a0),d2
00016E12 3628 0008                  		move.w	8(a0),d3
00016E16 7000                       		moveq	#0,d0
00016E18 1028 0017                  		move.b	$17(a0),d0
00016E1C 4880                       		ext.w	d0
00016E1E D440                       		add.w	d0,d2
00016E20 1028 0016                  		move.b	$16(a0),d0
00016E24 4880                       		ext.w	d0
00016E26 D640                       		add.w	d0,d3
00016E28 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016E2C 367C 0010                  		movea.w	#$10,a3
00016E30 3C3C 0000                  		move.w	#0,d6
00016E34 7A0E                       		moveq	#$E,d5
00016E36 6100 FC64                  		bsr.w	FindWall
00016E3A 301F                       		move.w	(sp)+,d0
00016E3C 143C 00C0                  		move.b	#-$40,d2
00016E40 6000 FF1E                  		bra.w	loc_14DD0
00016E44                            
00016E44                            ; End of function sub_14E50
00016E44                            
00016E44                            
00016E44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E44                            
00016E44                            
00016E44                            sub_14EB4:				; XREF: Sonic_Floor
00016E44 3428 000C                  		move.w	$C(a0),d2
00016E48 3628 0008                  		move.w	8(a0),d3
00016E4C                            
00016E4C                            loc_14EBC:
00016E4C 0643 000A                  		addi.w	#$A,d3
00016E50 49F8 F768                  		lea	($FFFFF768).w,a4
00016E54 367C 0010                  		movea.w	#$10,a3
00016E58 3C3C 0000                  		move.w	#0,d6
00016E5C 7A0E                       		moveq	#$E,d5
00016E5E 6100 FC3C                  		bsr.w	FindWall
00016E62 143C 00C0                  		move.b	#-$40,d2
00016E66 6000 FF32                  		bra.w	loc_14E0A
00016E6A                            
00016E6A                            ; End of function sub_14EB4
00016E6A                            
00016E6A                            ; ---------------------------------------------------------------------------
00016E6A                            ; Subroutine to	detect when an object hits a wall to its right
00016E6A                            ; ---------------------------------------------------------------------------
00016E6A                            
00016E6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E6A                            
00016E6A                            
00016E6A                            ObjHitWallRight:
00016E6A D668 0008                  		add.w	8(a0),d3
00016E6E 3428 000C                  		move.w	$C(a0),d2
00016E72 49F8 F768                  		lea	($FFFFF768).w,a4
00016E76 18BC 0000                  		move.b	#0,(a4)
00016E7A 367C 0010                  		movea.w	#$10,a3
00016E7E 3C3C 0000                  		move.w	#0,d6
00016E82 7A0E                       		moveq	#$E,d5
00016E84 6100 FC16                  		bsr.w	FindWall
00016E88 1638 F768                  		move.b	($FFFFF768).w,d3
00016E8C 0803 0000                  		btst	#0,d3
00016E90 6700                       		beq.s	locret_14F06
00016E92 163C 00C0                  		move.b	#-$40,d3
00016E96                            
00016E96                            locret_14F06:
00016E96 4E75                       		rts	
00016E98                            
00016E98                            ; End of function ObjHitWallRight
00016E98                            
00016E98                            ; ---------------------------------------------------------------------------
00016E98                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00016E98                            ; touches them
00016E98                            ; ---------------------------------------------------------------------------
00016E98                            
00016E98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E98                            
00016E98                            
00016E98                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00016E98 3428 000C                  		move.w	$C(a0),d2
00016E9C 3628 0008                  		move.w	8(a0),d3
00016EA0 7000                       		moveq	#0,d0
00016EA2 1028 0016                  		move.b	$16(a0),d0
00016EA6 4880                       		ext.w	d0
00016EA8 9440                       		sub.w	d0,d2
00016EAA 0A42 000F                  		eori.w	#$F,d2
00016EAE 1028 0017                  		move.b	$17(a0),d0
00016EB2 4880                       		ext.w	d0
00016EB4 D640                       		add.w	d0,d3
00016EB6 49F8 F768                  		lea	($FFFFF768).w,a4
00016EBA 367C FFF0                  		movea.w	#-$10,a3
00016EBE 3C3C 1000                  		move.w	#$1000,d6
00016EC2 7A0E                       		moveq	#$E,d5
00016EC4 6100 FA96                  		bsr.w	FindFloor
00016EC8 3F01                       		move.w	d1,-(sp)
00016ECA 3428 000C                  		move.w	$C(a0),d2
00016ECE 3628 0008                  		move.w	8(a0),d3
00016ED2 7000                       		moveq	#0,d0
00016ED4 1028 0016                  		move.b	$16(a0),d0
00016ED8 4880                       		ext.w	d0
00016EDA 9440                       		sub.w	d0,d2
00016EDC 0A42 000F                  		eori.w	#$F,d2
00016EE0 1028 0017                  		move.b	$17(a0),d0
00016EE4 4880                       		ext.w	d0
00016EE6 9640                       		sub.w	d0,d3
00016EE8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016EEC 367C FFF0                  		movea.w	#-$10,a3
00016EF0 3C3C 1000                  		move.w	#$1000,d6
00016EF4 7A0E                       		moveq	#$E,d5
00016EF6 6100 FA64                  		bsr.w	FindFloor
00016EFA 301F                       		move.w	(sp)+,d0
00016EFC 143C 0080                  		move.b	#-$80,d2
00016F00 6000 FE5E                  		bra.w	loc_14DD0
00016F04                            ; End of function Sonic_DontRunOnWalls
00016F04                            
00016F04                            ; ===========================================================================
00016F04 3428 000C                  		move.w	$C(a0),d2
00016F08 3628 0008                  		move.w	8(a0),d3
00016F0C                            
00016F0C                            loc_14F7C:
00016F0C 0442 000A                  		subi.w	#$A,d2
00016F10 0A42 000F                  		eori.w	#$F,d2
00016F14 49F8 F768                  		lea	($FFFFF768).w,a4
00016F18 367C FFF0                  		movea.w	#-$10,a3
00016F1C 3C3C 1000                  		move.w	#$1000,d6
00016F20 7A0E                       		moveq	#$E,d5
00016F22 6100 FA38                  		bsr.w	FindFloor
00016F26 143C 0080                  		move.b	#-$80,d2
00016F2A 6000 FE6E                  		bra.w	loc_14E0A
00016F2E                            
00016F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F2E                            
00016F2E                            
00016F2E                            ObjHitCeiling:
00016F2E 3428 000C                  		move.w	$C(a0),d2
00016F32 3628 0008                  		move.w	8(a0),d3
00016F36 7000                       		moveq	#0,d0
00016F38 1028 0016                  		move.b	$16(a0),d0
00016F3C 4880                       		ext.w	d0
00016F3E 9440                       		sub.w	d0,d2
00016F40 0A42 000F                  		eori.w	#$F,d2
00016F44 49F8 F768                  		lea	($FFFFF768).w,a4
00016F48 367C FFF0                  		movea.w	#-$10,a3
00016F4C 3C3C 1000                  		move.w	#$1000,d6
00016F50 7A0E                       		moveq	#$E,d5
00016F52 6100 FA08                  		bsr.w	FindFloor
00016F56 1638 F768                  		move.b	($FFFFF768).w,d3
00016F5A 0803 0000                  		btst	#0,d3
00016F5E 6700                       		beq.s	locret_14FD4
00016F60 163C 0080                  		move.b	#-$80,d3
00016F64                            
00016F64                            locret_14FD4:
00016F64 4E75                       		rts	
00016F66                            ; End of function ObjHitCeiling
00016F66                            
00016F66                            ; ===========================================================================
00016F66                            
00016F66                            loc_14FD6:				; XREF: sub_14D48
00016F66 3428 000C                  		move.w	$C(a0),d2
00016F6A 3628 0008                  		move.w	8(a0),d3
00016F6E 7000                       		moveq	#0,d0
00016F70 1028 0017                  		move.b	$17(a0),d0
00016F74 4880                       		ext.w	d0
00016F76 9440                       		sub.w	d0,d2
00016F78 1028 0016                  		move.b	$16(a0),d0
00016F7C 4880                       		ext.w	d0
00016F7E 9640                       		sub.w	d0,d3
00016F80 0A43 000F                  		eori.w	#$F,d3
00016F84 49F8 F768                  		lea	($FFFFF768).w,a4
00016F88 367C FFF0                  		movea.w	#-$10,a3
00016F8C 3C3C 0800                  		move.w	#$800,d6
00016F90 7A0E                       		moveq	#$E,d5
00016F92 6100 FB08                  		bsr.w	FindWall
00016F96 3F01                       		move.w	d1,-(sp)
00016F98 3428 000C                  		move.w	$C(a0),d2
00016F9C 3628 0008                  		move.w	8(a0),d3
00016FA0 7000                       		moveq	#0,d0
00016FA2 1028 0017                  		move.b	$17(a0),d0
00016FA6 4880                       		ext.w	d0
00016FA8 D440                       		add.w	d0,d2
00016FAA 1028 0016                  		move.b	$16(a0),d0
00016FAE 4880                       		ext.w	d0
00016FB0 9640                       		sub.w	d0,d3
00016FB2 0A43 000F                  		eori.w	#$F,d3
00016FB6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016FBA 367C FFF0                  		movea.w	#-$10,a3
00016FBE 3C3C 0800                  		move.w	#$800,d6
00016FC2 7A0E                       		moveq	#$E,d5
00016FC4 6100 FAD6                  		bsr.w	FindWall
00016FC8 301F                       		move.w	(sp)+,d0
00016FCA 143C 0040                  		move.b	#$40,d2
00016FCE 6000 FD90                  		bra.w	loc_14DD0
00016FD2                            
00016FD2                            ; ---------------------------------------------------------------------------
00016FD2                            ; Subroutine to	stop Sonic when	he jumps at a wall
00016FD2                            ; ---------------------------------------------------------------------------
00016FD2                            
00016FD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FD2                            
00016FD2                            
00016FD2                            Sonic_HitWall:				; XREF: Sonic_Floor
00016FD2 3428 000C                  		move.w	$C(a0),d2
00016FD6 3628 0008                  		move.w	8(a0),d3
00016FDA                            
00016FDA                            loc_1504A:
00016FDA 0443 000A                  		subi.w	#$A,d3
00016FDE 0A43 000F                  		eori.w	#$F,d3
00016FE2 49F8 F768                  		lea	($FFFFF768).w,a4
00016FE6 367C FFF0                  		movea.w	#-$10,a3
00016FEA 3C3C 0800                  		move.w	#$800,d6
00016FEE 7A0E                       		moveq	#$E,d5
00016FF0 6100 FAAA                  		bsr.w	FindWall
00016FF4 143C 0040                  		move.b	#$40,d2
00016FF8 6000 FDA0                  		bra.w	loc_14E0A
00016FFC                            ; End of function Sonic_HitWall
00016FFC                            
00016FFC                            ; ---------------------------------------------------------------------------
00016FFC                            ; Subroutine to	detect when an object hits a wall to its left
00016FFC                            ; ---------------------------------------------------------------------------
00016FFC                            
00016FFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FFC                            
00016FFC                            
00016FFC                            ObjHitWallLeft:
00016FFC D668 0008                  		add.w	8(a0),d3
00017000 3428 000C                  		move.w	$C(a0),d2
00017004 49F8 F768                  		lea	($FFFFF768).w,a4
00017008 18BC 0000                  		move.b	#0,(a4)
0001700C 367C FFF0                  		movea.w	#-$10,a3
00017010 3C3C 0800                  		move.w	#$800,d6
00017014 7A0E                       		moveq	#$E,d5
00017016 6100 FA84                  		bsr.w	FindWall
0001701A 1638 F768                  		move.b	($FFFFF768).w,d3
0001701E 0803 0000                  		btst	#0,d3
00017022 6700                       		beq.s	locret_15098
00017024 163C 0040                  		move.b	#$40,d3
00017028                            
00017028                            locret_15098:
00017028 4E75                       		rts	
0001702A                            ; End of function ObjHitWallLeft
0001702A                            
0001702A                            ; ===========================================================================
0001702A                            ; ---------------------------------------------------------------------------
0001702A                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
0001702A                            ; ---------------------------------------------------------------------------
0001702A                            
0001702A                            Obj66:					; XREF: Obj_Index
0001702A 7000                       		moveq	#0,d0
0001702C 1028 0024                  		move.b	$24(a0),d0
00017030 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00017034 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00017038                            ; ===========================================================================
00017038 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001703A 0000                       		dc.w Obj66_Action-Obj66_Index
0001703C 0000                       		dc.w Obj66_Display-Obj66_Index
0001703E 0000                       		dc.w Obj66_Release-Obj66_Index
00017040                            ; ===========================================================================
00017040                            
00017040                            Obj66_Main:				; XREF: Obj66_Index
00017040 5428 0024                  		addq.b	#2,$24(a0)
00017044 323C 0001                  		move.w	#1,d1
00017048 2248                       		movea.l	a0,a1
0001704A 6000                       		bra.s	Obj66_MakeItem
0001704C                            ; ===========================================================================
0001704C                            
0001704C                            Obj66_Loop:
0001704C 6100 800A                  		bsr.w	SingleObjLoad
00017050 6600                       		bne.s	loc_150FE
00017052 12BC 0066                  		move.b	#$66,0(a1)
00017056 5829 0024                  		addq.b	#4,$24(a1)
0001705A 3368 0008 0008             		move.w	8(a0),8(a1)
00017060 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017066 137C 0003 0018             		move.b	#3,$18(a1)
0001706C 137C 0010 001A             		move.b	#$10,$1A(a1)
00017072                            
00017072                            Obj66_MakeItem:				; XREF: Obj66_Main
00017072 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001707A 337C 4348 0002             		move.w	#$4348,2(a1)
00017080 0029 0004 0001             		ori.b	#4,1(a1)
00017086 137C 0038 0019             		move.b	#$38,$19(a1)
0001708C                            
0001708C                            loc_150FE:
0001708C 51C9 FFBE                  		dbf	d1,Obj66_Loop
00017090                            
00017090 117C 0030 0019             		move.b	#$30,$19(a0)
00017096 117C 0004 0018             		move.b	#4,$18(a0)
0001709C 317C 003C 0030             		move.w	#$3C,$30(a0)
000170A2 117C 0001 0034             		move.b	#1,$34(a0)
000170A8 1168 0028 0038             		move.b	$28(a0),$38(a0)
000170AE                            
000170AE                            Obj66_Action:				; XREF: Obj66_Index
000170AE 6100 0000                  		bsr.w	Obj66_ChkSwitch
000170B2 4A28 0001                  		tst.b	1(a0)
000170B6 6A00 0000                  		bpl.w	Obj66_Display
000170BA 323C 0030                  		move.w	#$30,d1
000170BE 3401                       		move.w	d1,d2
000170C0 3602                       		move.w	d2,d3
000170C2 5243                       		addq.w	#1,d3
000170C4 3828 0008                  		move.w	8(a0),d4
000170C8 6100 A1A6                  		bsr.w	SolidObject
000170CC 0828 0005 0022             		btst	#5,$22(a0)
000170D2 6700 0000                  		beq.w	Obj66_Display
000170D6 43F8 D000                  		lea	($FFFFD000).w,a1
000170DA 720E                       		moveq	#$E,d1
000170DC 3029 0008                  		move.w	8(a1),d0
000170E0 B068 0008                  		cmp.w	8(a0),d0
000170E4 6500                       		bcs.s	Obj66_GrabSonic
000170E6 7207                       		moveq	#7,d1
000170E8                            
000170E8                            Obj66_GrabSonic:
000170E8 B228 001A                  		cmp.b	$1A(a0),d1
000170EC 6600                       		bne.s	Obj66_Display
000170EE 1141 0032                  		move.b	d1,$32(a0)
000170F2 5828 0024                  		addq.b	#4,$24(a0)
000170F6 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000170FC 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00017102 337C 0800 0020             		move.w	#$800,$20(a1)
00017108 337C 0000 0010             		move.w	#0,$10(a1)
0001710E 337C 0000 0012             		move.w	#0,$12(a1)
00017114 08A8 0005 0022             		bclr	#5,$22(a0)
0001711A 08A9 0005 0022             		bclr	#5,$22(a1)
00017120 08E9 0001 0022             		bset	#1,$22(a1)
00017126 3429 0008                  		move.w	8(a1),d2
0001712A 3629 000C                  		move.w	$C(a1),d3
0001712E 6100 0000                  		bsr.w	Obj66_ChgPos
00017132 D569 0008                  		add.w	d2,8(a1)
00017136 D769 000C                  		add.w	d3,$C(a1)
0001713A E0E9 0008                  		asr	8(a1)
0001713E E0E9 000C                  		asr	$C(a1)
00017142                            
00017142                            Obj66_Display:				; XREF: Obj66_Index
00017142 6000 9E08                  		bra.w	MarkObjGone
00017146                            ; ===========================================================================
00017146                            
00017146                            Obj66_Release:				; XREF: Obj66_Index
00017146 1028 001A                  		move.b	$1A(a0),d0
0001714A 0C00 0004                  		cmpi.b	#4,d0
0001714E 6700                       		beq.s	loc_151C8
00017150 0C00 0007                  		cmpi.b	#7,d0
00017154 6600                       		bne.s	loc_151F8
00017156                            
00017156                            loc_151C8:
00017156 B028 0032                  		cmp.b	$32(a0),d0
0001715A 6700                       		beq.s	loc_151F8
0001715C 43F8 D000                  		lea	($FFFFD000).w,a1
00017160 337C 0000 0010             		move.w	#0,$10(a1)
00017166 337C 0800 0012             		move.w	#$800,$12(a1)
0001716C 0C00 0004                  		cmpi.b	#4,d0
00017170 6700                       		beq.s	loc_151F0
00017172 337C 0800 0010             		move.w	#$800,$10(a1)
00017178 337C 0800 0012             		move.w	#$800,$12(a1)
0001717E                            
0001717E                            loc_151F0:
0001717E 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00017182 5928 0024                  		subq.b	#4,$24(a0)
00017186                            
00017186                            loc_151F8:
00017186 6100                       		bsr.s	Obj66_ChkSwitch
00017188 6100                       		bsr.s	Obj66_ChgPos
0001718A 6000 9DC0                  		bra.w	MarkObjGone
0001718E                            
0001718E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001718E                            
0001718E                            
0001718E                            Obj66_ChkSwitch:			; XREF: Obj66_Action
0001718E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017192 7000                       		moveq	#0,d0
00017194 1028 0038                  		move.b	$38(a0),d0
00017198 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001719E 6700                       		beq.s	loc_15224	; if not, branch
000171A0 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000171A4 6600                       		bne.s	Obj66_Animate	; if yes, branch
000171A6 4428 0034                  		neg.b	$34(a0)
000171AA 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000171B0 6000                       		bra.s	Obj66_Animate
000171B2                            ; ===========================================================================
000171B2                            
000171B2                            loc_15224:
000171B2 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000171B6                            
000171B6                            Obj66_Animate:
000171B6 5328 001E                  		subq.b	#1,$1E(a0)
000171BA 6A00                       		bpl.s	locret_15246
000171BC 117C 0007 001E             		move.b	#7,$1E(a0)
000171C2 1228 0034                  		move.b	$34(a0),d1
000171C6 1028 001A                  		move.b	$1A(a0),d0
000171CA D001                       		add.b	d1,d0
000171CC 0200 000F                  		andi.b	#$F,d0
000171D0 1140 001A                  		move.b	d0,$1A(a0)
000171D4                            
000171D4                            locret_15246:
000171D4 4E75                       		rts	
000171D6                            ; End of function Obj66_ChkSwitch
000171D6                            
000171D6                            
000171D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000171D6                            
000171D6                            
000171D6                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000171D6 43F8 D000                  		lea	($FFFFD000).w,a1
000171DA 7000                       		moveq	#0,d0
000171DC 1028 001A                  		move.b	$1A(a0),d0
000171E0 D040                       		add.w	d0,d0
000171E2 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000171E6 101A                       		move.b	(a2)+,d0
000171E8 4880                       		ext.w	d0
000171EA D068 0008                  		add.w	8(a0),d0
000171EE 3340 0008                  		move.w	d0,8(a1)
000171F2 101A                       		move.b	(a2)+,d0
000171F4 4880                       		ext.w	d0
000171F6 D068 000C                  		add.w	$C(a0),d0
000171FA 3340 000C                  		move.w	d0,$C(a1)
000171FE 4E75                       		rts	
00017200                            ; End of function Obj66_ChgPos
00017200                            
00017200                            ; ===========================================================================
00017200 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00017204 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00017208 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001720C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00017210 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00017214 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00017218 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001721C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00017220                            ; ---------------------------------------------------------------------------
00017220                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00017220                            ; ---------------------------------------------------------------------------
00017220                            Map_obj66:
00017220                            	include "_maps\obj66.asm"
00017220                            ; ---------------------------------------------------------------------------
00017220                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00017220                            ; ---------------------------------------------------------------------------
00017220 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00017224 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00017228 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001722C 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00017230 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00017234 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00017238 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001723C 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00017240 0000                       		dc.w byte_154A4-Map_obj66
00017242 06                         byte_152B4:	dc.b 6
00017243 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00017248 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001724D E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00017252 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00017257 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001725C 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00017261 06                         byte_152D3:	dc.b 6
00017262 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00017267 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001726C F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00017271 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00017276 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
0001727B 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00017280 06                         byte_152F2:	dc.b 6
00017281 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00017286 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001728B 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00017290 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00017295 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001729A 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001729F 06                         byte_15311:	dc.b 6
000172A0 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000172A5 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000172AA 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000172AF 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000172B4 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000172B9 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000172BE 06                         byte_15330:	dc.b 6
000172BF 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000172C4 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000172C9 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000172CE 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000172D3 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000172D8 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000172DD 06                         byte_1534F:	dc.b 6
000172DE 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000172E3 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000172E8 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000172ED 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000172F2 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000172F7 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000172FC 06                         byte_1536E:	dc.b 6
000172FD 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00017302 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00017307 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001730C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00017311 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00017316 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001731B 06                         byte_1538D:	dc.b 6
0001731C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00017321 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00017326 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
0001732B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00017330 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00017335 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
0001733A 06                         byte_153AC:	dc.b 6
0001733B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00017340 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00017345 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
0001734A E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001734F 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00017354 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00017359 06                         byte_153CB:	dc.b 6
0001735A D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001735F E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00017364 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00017369 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001736E F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00017373 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00017378 06                         byte_153EA:	dc.b 6
00017379 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001737E E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00017383 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00017388 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001738D E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00017392 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00017397 06                         byte_15409:	dc.b 6
00017398 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001739D D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000173A2 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000173A7 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000173AC E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000173B1 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000173B6 06                         byte_15428:	dc.b 6
000173B7 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000173BC D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000173C1 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000173C6 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000173CB E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000173D0 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000173D5 06                         byte_15447:	dc.b 6
000173D6 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000173DB D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000173E0 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000173E5 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000173EA E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000173EF E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000173F4 06                         byte_15466:	dc.b 6
000173F5 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000173FA D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000173FF D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00017404 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00017409 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001740E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00017413 06                         byte_15485:	dc.b 6
00017414 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00017419 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001741E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00017423 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00017428 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001742D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00017432 0C                         byte_154A4:	dc.b $C
00017433 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00017438 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001743D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00017442 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00017447 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001744C E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00017451 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00017456 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
0001745B 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00017460 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00017465 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001746A 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00017470 00                         		even
00017470 00                         		even
00017470                            
00017470                            ; ===========================================================================
00017470                            ; ---------------------------------------------------------------------------
00017470                            ; Object 67 - disc that	you run	around (SBZ)
00017470                            ; ---------------------------------------------------------------------------
00017470                            
00017470                            Obj67:					; XREF: Obj_Index
00017470 7000                       		moveq	#0,d0
00017472 1028 0024                  		move.b	$24(a0),d0
00017476 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
0001747A 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001747E                            ; ===========================================================================
0001747E 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00017480 0000                       		dc.w Obj67_Action-Obj67_Index
00017482                            ; ===========================================================================
00017482                            
00017482                            Obj67_Main:				; XREF: Obj67_Index
00017482 5428 0024                  		addq.b	#2,$24(a0)
00017486 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001748E 317C C344 0002             		move.w	#$C344,2(a0)
00017494 117C 0004 0001             		move.b	#4,1(a0)
0001749A 117C 0004 0018             		move.b	#4,$18(a0)
000174A0 117C 0008 0019             		move.b	#8,$19(a0)
000174A6 3168 0008 0032             		move.w	8(a0),$32(a0)
000174AC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000174B2 117C 0018 0034             		move.b	#$18,$34(a0)
000174B8 117C 0048 0038             		move.b	#$48,$38(a0)
000174BE 1228 0028                  		move.b	$28(a0),d1	; get object type
000174C2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000174C6 6700                       		beq.s	loc_15546
000174C8 117C 0010 0034             		move.b	#$10,$34(a0)
000174CE 117C 0038 0038             		move.b	#$38,$38(a0)
000174D4                            
000174D4                            loc_15546:
000174D4 1228 0028                  		move.b	$28(a0),d1	; get object type
000174D8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000174DC 4881                       		ext.w	d1
000174DE E741                       		asl.w	#3,d1
000174E0 3141 0036                  		move.w	d1,$36(a0)
000174E4 1028 0022                  		move.b	$22(a0),d0
000174E8 E418                       		ror.b	#2,d0
000174EA 0200 00C0                  		andi.b	#-$40,d0
000174EE 1140 0026                  		move.b	d0,$26(a0)
000174F2                            
000174F2                            Obj67_Action:				; XREF: Obj67_Index
000174F2 6100 0000                  		bsr.w	Obj67_MoveSonic
000174F6 6100 0000                  		bsr.w	Obj67_MoveSpot
000174FA 6000 0000                  		bra.w	Obj67_ChkDel
000174FE                            ; ===========================================================================
000174FE                            
000174FE                            Obj67_MoveSonic:			; XREF: Obj67_Action
000174FE 7400                       		moveq	#0,d2
00017500 1428 0038                  		move.b	$38(a0),d2
00017504 3602                       		move.w	d2,d3
00017506 D643                       		add.w	d3,d3
00017508 43F8 D000                  		lea	($FFFFD000).w,a1
0001750C 3029 0008                  		move.w	8(a1),d0
00017510 9068 0032                  		sub.w	$32(a0),d0
00017514 D042                       		add.w	d2,d0
00017516 B043                       		cmp.w	d3,d0
00017518 6400                       		bcc.s	loc_155A8
0001751A 3229 000C                  		move.w	$C(a1),d1
0001751E 9268 0030                  		sub.w	$30(a0),d1
00017522 D242                       		add.w	d2,d1
00017524 B243                       		cmp.w	d3,d1
00017526 6400                       		bcc.s	loc_155A8
00017528 0829 0001 0022             		btst	#1,$22(a1)
0001752E 6700                       		beq.s	loc_155B8
00017530 4228 003A                  		clr.b	$3A(a0)
00017534 4E75                       		rts	
00017536                            ; ===========================================================================
00017536                            
00017536                            loc_155A8:
00017536 4A28 003A                  		tst.b	$3A(a0)
0001753A 6700                       		beq.s	locret_155B6
0001753C 4229 0038                  		clr.b	$38(a1)
00017540 4228 003A                  		clr.b	$3A(a0)
00017544                            
00017544                            locret_155B6:
00017544 4E75                       		rts	
00017546                            ; ===========================================================================
00017546                            
00017546                            loc_155B8:
00017546 4A28 003A                  		tst.b	$3A(a0)
0001754A 6600                       		bne.s	loc_155E2
0001754C 117C 0001 003A             		move.b	#1,$3A(a0)
00017552 0829 0002 0022             		btst	#2,$22(a1)
00017558 6600                       		bne.s	loc_155D0
0001755A 4229 001C                  		clr.b	$1C(a1)
0001755E                            
0001755E                            loc_155D0:
0001755E 08A9 0005 0022             		bclr	#5,$22(a1)
00017564 137C 0001 001D             		move.b	#1,$1D(a1)
0001756A 137C 0001 0038             		move.b	#1,$38(a1)
00017570                            
00017570                            loc_155E2:
00017570 3029 0020                  		move.w	$20(a1),d0
00017574 4A68 0036                  		tst.w	$36(a0)
00017578 6A00                       		bpl.s	loc_15608
0001757A 0C40 FC00                  		cmpi.w	#-$400,d0
0001757E 6F00                       		ble.s	loc_155FA
00017580 337C FC00 0020             		move.w	#-$400,$20(a1)
00017586 4E75                       		rts	
00017588                            ; ===========================================================================
00017588                            
00017588                            loc_155FA:
00017588 0C40 F100                  		cmpi.w	#-$F00,d0
0001758C 6C00                       		bge.s	locret_15606
0001758E 337C F100 0020             		move.w	#-$F00,$20(a1)
00017594                            
00017594                            locret_15606:
00017594 4E75                       		rts	
00017596                            ; ===========================================================================
00017596                            
00017596                            loc_15608:
00017596 0C40 0400                  		cmpi.w	#$400,d0
0001759A 6C00                       		bge.s	loc_15616
0001759C 337C 0400 0020             		move.w	#$400,$20(a1)
000175A2 4E75                       		rts	
000175A4                            ; ===========================================================================
000175A4                            
000175A4                            loc_15616:
000175A4 0C40 0F00                  		cmpi.w	#$F00,d0
000175A8 6F00                       		ble.s	locret_15622
000175AA 337C 0F00 0020             		move.w	#$F00,$20(a1)
000175B0                            
000175B0                            locret_15622:
000175B0 4E75                       		rts	
000175B2                            ; ===========================================================================
000175B2                            
000175B2                            Obj67_MoveSpot:				; XREF: Obj67_Action
000175B2 3028 0036                  		move.w	$36(a0),d0
000175B6 D168 0026                  		add.w	d0,$26(a0)
000175BA 1028 0026                  		move.b	$26(a0),d0
000175BE 4EB9 0000 29CC             		jsr	(CalcSine).l
000175C4 3428 0030                  		move.w	$30(a0),d2
000175C8 3628 0032                  		move.w	$32(a0),d3
000175CC 7800                       		moveq	#0,d4
000175CE 1828 0034                  		move.b	$34(a0),d4
000175D2 E14C                       		lsl.w	#8,d4
000175D4 2A04                       		move.l	d4,d5
000175D6 C9C0                       		muls.w	d0,d4
000175D8 4844                       		swap	d4
000175DA CBC1                       		muls.w	d1,d5
000175DC 4845                       		swap	d5
000175DE D842                       		add.w	d2,d4
000175E0 DA43                       		add.w	d3,d5
000175E2 3144 000C                  		move.w	d4,$C(a0)
000175E6 3145 0008                  		move.w	d5,8(a0)
000175EA 4E75                       		rts	
000175EC                            ; ===========================================================================
000175EC                            
000175EC                            Obj67_ChkDel:				; XREF: Obj67_Action
000175EC 3028 0032                  		move.w	$32(a0),d0
000175F0 0240 FF80                  		andi.w	#-$80,d0
000175F4 3238 F700                  		move.w	($FFFFF700).w,d1
000175F8 0441 0080                  		subi.w	#$80,d1
000175FC 0241 FF80                  		andi.w	#-$80,d1
00017600 9041                       		sub.w	d1,d0
00017602 0C40 0280                  		cmpi.w	#$280,d0
00017606 6200                       		bhi.s	Obj67_Delete
00017608 4EF9 0000 E902             		jmp	DisplaySprite
0001760E                            ; ===========================================================================
0001760E                            
0001760E                            Obj67_Delete:
0001760E 4EF9 0000 E952             		jmp	DeleteObject
00017614                            ; ===========================================================================
00017614                            ; ---------------------------------------------------------------------------
00017614                            ; Sprite mappings - disc that you run around (SBZ)
00017614                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017614                            ; part of the level tiles.)
00017614                            ; ---------------------------------------------------------------------------
00017614                            Map_obj67:
00017614                            	include "_maps\obj67.asm"
00017614                            ; ---------------------------------------------------------------------------
00017614                            ; Sprite mappings - disc that you run around (SBZ)
00017614                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017614                            ; part of the level tiles.)
00017614                            ; ---------------------------------------------------------------------------
00017614 0000                       		dc.w byte_15688-Map_obj67
00017616 01                         byte_15688:	dc.b 1
00017617 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001761C                            		even
0001761C                            		even
0001761C                            
0001761C                            ; ===========================================================================
0001761C                            ; ---------------------------------------------------------------------------
0001761C                            ; Object 68 - conveyor belts (SBZ)
0001761C                            ; ---------------------------------------------------------------------------
0001761C                            
0001761C                            Obj68:					; XREF: Obj_Index
0001761C 7000                       		moveq	#0,d0
0001761E 1028 0024                  		move.b	$24(a0),d0
00017622 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00017626 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
0001762A                            ; ===========================================================================
0001762A 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001762C 0000                       		dc.w Obj68_Action-Obj68_Index
0001762E                            ; ===========================================================================
0001762E                            
0001762E                            Obj68_Main:				; XREF: Obj68_Index
0001762E 5428 0024                  		addq.b	#2,$24(a0)
00017632 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00017638 1228 0028                  		move.b	$28(a0),d1	; get object type
0001763C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00017640 6700                       		beq.s	loc_156BA	; if zero, branch
00017642 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00017648                            
00017648                            loc_156BA:
00017648 1228 0028                  		move.b	$28(a0),d1	; get object type
0001764C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017650 4881                       		ext.w	d1
00017652 E841                       		asr.w	#4,d1
00017654 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00017658                            
00017658                            Obj68_Action:				; XREF: Obj68_Index
00017658 6100                       		bsr.s	Obj68_MoveSonic
0001765A 3028 0008                  		move.w	8(a0),d0
0001765E 0240 FF80                  		andi.w	#$FF80,d0
00017662 3238 F700                  		move.w	($FFFFF700).w,d1
00017666 0441 0080                  		subi.w	#$80,d1
0001766A 0241 FF80                  		andi.w	#$FF80,d1
0001766E 9041                       		sub.w	d1,d0
00017670 0C40 0280                  		cmpi.w	#$280,d0
00017674 6300                       		bls.s	Obj68_NoDel
00017676                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00017676                            	;	beq.s	Obj68_Delete		; if it's zero, don't remember object
00017676                            	;	movea.w	d0,a2	; load address into a2
00017676                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017676 6000                       		bra.s	Obj68_Delete	; and delete object
00017678                            
00017678                            Obj68_NoDel:
00017678 4E75                       		rts	
0001767A                            ; ===========================================================================
0001767A                            
0001767A                            Obj68_Delete:
0001767A 4EF9 0000 E952             		jmp	DeleteObject
00017680                            ; ===========================================================================
00017680                            
00017680                            Obj68_MoveSonic:			; XREF: Obj68_Action
00017680 7400                       		moveq	#0,d2
00017682 1428 0038                  		move.b	$38(a0),d2
00017686 3602                       		move.w	d2,d3
00017688 D643                       		add.w	d3,d3
0001768A 43F8 D000                  		lea	($FFFFD000).w,a1
0001768E 3029 0008                  		move.w	8(a1),d0
00017692 9068 0008                  		sub.w	8(a0),d0
00017696 D042                       		add.w	d2,d0
00017698 B043                       		cmp.w	d3,d0
0001769A 6400                       		bcc.s	locret_1572E
0001769C 3229 000C                  		move.w	$C(a1),d1
000176A0 9268 000C                  		sub.w	$C(a0),d1
000176A4 0641 0030                  		addi.w	#$30,d1
000176A8 0C41 0030                  		cmpi.w	#$30,d1
000176AC 6400                       		bcc.s	locret_1572E
000176AE 0829 0001 0022             		btst	#1,$22(a1)
000176B4 6600                       		bne.s	locret_1572E
000176B6 3028 0036                  		move.w	$36(a0),d0
000176BA D169 0008                  		add.w	d0,8(a1)
000176BE                            
000176BE                            locret_1572E:
000176BE 4E75                       		rts	
000176C0                            
000176C0                            ; ===========================================================================
000176C0                            ; ---------------------------------------------------------------------------
000176C0                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000176C0                            ; ---------------------------------------------------------------------------
000176C0                            
000176C0                            Obj69:					; XREF: Obj_Index
000176C0 7000                       		moveq	#0,d0
000176C2 1028 0024                  		move.b	$24(a0),d0
000176C6 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000176CA 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000176CE                            ; ===========================================================================
000176CE 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000176D0 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000176D2 0000                       		dc.w Obj69_Spinner-Obj69_Index
000176D4                            ; ===========================================================================
000176D4                            
000176D4                            Obj69_Main:				; XREF: Obj69_Index
000176D4 5428 0024                  		addq.b	#2,$24(a0)
000176D8 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000176E0 317C 4492 0002             		move.w	#$4492,2(a0)
000176E6 0028 0004 0001             		ori.b	#4,1(a0)
000176EC 117C 0080 0019             		move.b	#$80,$19(a0)
000176F2 7000                       		moveq	#0,d0
000176F4 1028 0028                  		move.b	$28(a0),d0
000176F8 0240 000F                  		andi.w	#$F,d0
000176FC C0FC 003C                  		mulu.w	#$3C,d0
00017700 3140 0032                  		move.w	d0,$32(a0)
00017704 4A28 0028                  		tst.b	$28(a0)
00017708 6A00                       		bpl.s	Obj69_Trapdoor
0001770A 5428 0024                  		addq.b	#2,$24(a0)
0001770E 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00017716 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001771C 117C 0010 0019             		move.b	#$10,$19(a0)
00017722 117C 0002 001C             		move.b	#2,$1C(a0)
00017728 7000                       		moveq	#0,d0
0001772A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001772E 3200                       		move.w	d0,d1
00017730 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017734 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00017738 3140 0030                  		move.w	d0,$30(a0)	; set time delay
0001773C 3140 0032                  		move.w	d0,$32(a0)
00017740 0241 0070                  		andi.w	#$70,d1
00017744 0641 0010                  		addi.w	#$10,d1
00017748 E549                       		lsl.w	#2,d1
0001774A 5341                       		subq.w	#1,d1
0001774C 3141 0036                  		move.w	d1,$36(a0)
00017750 6000                       		bra.s	Obj69_Spinner
00017752                            ; ===========================================================================
00017752                            
00017752                            Obj69_Trapdoor:				; XREF: Obj69_Index
00017752 5368 0030                  		subq.w	#1,$30(a0)
00017756 6A00                       		bpl.s	Obj69_Animate
00017758 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001775E 0868 0000 001C             		bchg	#0,$1C(a0)
00017764 4A28 0001                  		tst.b	1(a0)
00017768 6A00                       		bpl.s	Obj69_Animate
0001776A 303C 00BB                  		move.w	#$BB,d0
0001776E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play door sound
00017774                            
00017774                            Obj69_Animate:
00017774 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001777A 4EB9 0000 B962             		jsr	AnimateSprite
00017780 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00017784 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00017786 323C 004B                  		move.w	#$4B,d1
0001778A 343C 000C                  		move.w	#$C,d2
0001778E 3602                       		move.w	d2,d3
00017790 5243                       		addq.w	#1,d3
00017792 3828 0008                  		move.w	8(a0),d4
00017796 6100 9AD8                  		bsr.w	SolidObject
0001779A 6000 97B0                  		bra.w	MarkObjGone
0001779E                            ; ===========================================================================
0001779E                            
0001779E                            Obj69_NotSolid:
0001779E 0828 0003 0022             		btst	#3,$22(a0)
000177A4 6700                       		beq.s	Obj69_Display
000177A6 43F8 D000                  		lea	($FFFFD000).w,a1
000177AA 08A9 0003 0022             		bclr	#3,$22(a1)
000177B0 08A8 0003 0022             		bclr	#3,$22(a0)
000177B6 4228 0025                  		clr.b	$25(a0)
000177BA                            
000177BA                            Obj69_Display:
000177BA 6000 9790                  		bra.w	MarkObjGone
000177BE                            ; ===========================================================================
000177BE                            
000177BE                            Obj69_Spinner:				; XREF: Obj69_Index
000177BE 3038 FE04                  		move.w	($FFFFFE04).w,d0
000177C2 C068 0036                  		and.w	$36(a0),d0
000177C6 6600                       		bne.s	Obj69_Delay
000177C8 117C 0001 0034             		move.b	#1,$34(a0)
000177CE                            
000177CE                            Obj69_Delay:
000177CE 4A28 0034                  		tst.b	$34(a0)
000177D2 6700                       		beq.s	Obj69_Animate2
000177D4 5368 0030                  		subq.w	#1,$30(a0)
000177D8 6A00                       		bpl.s	Obj69_Animate2
000177DA 3168 0032 0030             		move.w	$32(a0),$30(a0)
000177E0 4228 0034                  		clr.b	$34(a0)
000177E4 0868 0000 001C             		bchg	#0,$1C(a0)
000177EA                            
000177EA                            Obj69_Animate2:
000177EA 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000177F0 4EB9 0000 B962             		jsr	AnimateSprite
000177F6 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000177FA 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000177FC 323C 001B                  		move.w	#$1B,d1
00017800 343C 0007                  		move.w	#7,d2
00017804 3602                       		move.w	d2,d3
00017806 5243                       		addq.w	#1,d3
00017808 3828 0008                  		move.w	8(a0),d4
0001780C 6100 9A62                  		bsr.w	SolidObject
00017810 6000 973A                  		bra.w	MarkObjGone
00017814                            ; ===========================================================================
00017814                            
00017814                            Obj69_NotSolid2:
00017814 0828 0003 0022             		btst	#3,$22(a0)
0001781A 6700                       		beq.s	Obj69_Display2
0001781C 43F8 D000                  		lea	($FFFFD000).w,a1
00017820 08A9 0003 0022             		bclr	#3,$22(a1)
00017826 08A8 0003 0022             		bclr	#3,$22(a0)
0001782C 4228 0025                  		clr.b	$25(a0)
00017830                            
00017830                            Obj69_Display2:
00017830 6000 971A                  		bra.w	MarkObjGone
00017834                            ; ===========================================================================
00017834                            Ani_obj69:
00017834                            	include "_anim\obj69.asm"
00017834                            ; ---------------------------------------------------------------------------
00017834                            ; Animation script - trapdoor (SBZ)
00017834                            ; ---------------------------------------------------------------------------
00017834 0000                       		dc.w byte_158AC-Ani_obj69
00017836 0000                       		dc.w byte_158B2-Ani_obj69
00017838 0000                       		dc.w byte_158B8-Ani_obj69
0001783A 0000                       		dc.w byte_158CC-Ani_obj69
0001783C 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00017842 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00017848 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017855 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001785C 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017869 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017870                            		even
00017870                            		even
00017870                            
00017870                            ; ---------------------------------------------------------------------------
00017870                            ; Sprite mappings - trapdoor (SBZ)
00017870                            ; ---------------------------------------------------------------------------
00017870                            Map_obj69:
00017870                            	include "_maps\obj69.asm"
00017870                            ; ---------------------------------------------------------------------------
00017870                            ; Sprite mappings - trapdoor (SBZ)
00017870                            ; ---------------------------------------------------------------------------
00017870 0000                       		dc.w byte_158E6-Map_obj69
00017872 0000                       		dc.w byte_158FB-Map_obj69
00017874 0000                       		dc.w byte_15924-Map_obj69
00017876 04                         byte_158E6:	dc.b 4
00017877 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001787C F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00017881 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00017886 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001788B 08                         byte_158FB:	dc.b 8
0001788C F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00017891 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00017896 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001789B 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000178A0 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000178A5 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000178AA 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000178AF 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000178B4 04                         byte_15924:	dc.b 4
000178B5 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000178BA 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000178BF 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000178C4 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000178CA 00                         		even
000178CA 00                         		even
000178CA                            
000178CA                            ; ---------------------------------------------------------------------------
000178CA                            ; Sprite mappings - spinning platforms (SBZ)
000178CA                            ; ---------------------------------------------------------------------------
000178CA                            Map_obj69a:
000178CA                            	include "_maps\obj69a.asm"
000178CA                            ; ---------------------------------------------------------------------------
000178CA                            ; Sprite mappings - spinning platforms (SBZ)
000178CA                            ; ---------------------------------------------------------------------------
000178CA 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000178CE 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000178D2 0000                       		dc.w byte_15970-Map_obj69a
000178D4 02                         byte_15944:	dc.b 2
000178D5 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000178DA F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000178DF 02                         byte_1594F:	dc.b 2
000178E0 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000178E5 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000178EA 02                         byte_1595A:	dc.b 2
000178EB F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000178F0 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000178F5 02                         byte_15965:	dc.b 2
000178F6 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000178FB 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00017900 02                         byte_15970:	dc.b 2
00017901 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017906 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001790C 00                         		even
0001790C 00                         		even
0001790C                            
0001790C                            ; ===========================================================================
0001790C                            ; ---------------------------------------------------------------------------
0001790C                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001790C                            ; ---------------------------------------------------------------------------
0001790C                            
0001790C                            Obj6A:					; XREF: Obj_Index
0001790C 7000                       		moveq	#0,d0
0001790E 1028 0024                  		move.b	$24(a0),d0
00017912 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00017916 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
0001791A                            ; ===========================================================================
0001791A 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001791C 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001791E                            ; ===========================================================================
0001791E                            
0001791E                            Obj6A_Main:				; XREF: Obj6A_Index
0001791E 5428 0024                  		addq.b	#2,$24(a0)
00017922 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
0001792A 317C 43B5 0002             		move.w	#$43B5,2(a0)
00017930 117C 0004 0001             		move.b	#4,1(a0)
00017936 117C 0004 0018             		move.b	#4,$18(a0)
0001793C 117C 0020 0019             		move.b	#$20,$19(a0)
00017942 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017948 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001794E 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00017954 6400                       		bcc.s	Obj6A_Action
00017956 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001795C                            
0001795C                            Obj6A_Action:				; XREF: Obj6A_Index
0001795C 7000                       		moveq	#0,d0
0001795E 1028 0028                  		move.b	$28(a0),d0
00017962 0240 0007                  		andi.w	#7,d0
00017966 D040                       		add.w	d0,d0
00017968 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001796C 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00017970 3028 003A                  		move.w	$3A(a0),d0
00017974 0240 FF80                  		andi.w	#$FF80,d0
00017978 3238 F700                  		move.w	($FFFFF700).w,d1
0001797C 0441 0080                  		subi.w	#$80,d1
00017980 0241 FF80                  		andi.w	#$FF80,d1
00017984 9041                       		sub.w	d1,d0
00017986 0C40 0280                  		cmpi.w	#$280,d0
0001798A 6300                       		bls.s	Obj6A_NoDel
0001798C                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
0001798C                            	;	beq.s	Obj6A_Delete		; if it's zero, don't remember object
0001798C                            	;	movea.w	d0,a2	; load address into a2
0001798C                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001798C 6000                       		bra.s	Obj6A_Delete	; and delete object
0001798E                            
0001798E                            Obj6A_NoDel:
0001798E 4EF9 0000 E902             		jmp	DisplaySprite
00017994                            ; ===========================================================================
00017994                            
00017994                            Obj6A_Delete:
00017994 4EF9 0000 E952             		jmp	DeleteObject
0001799A                            ; ===========================================================================
0001799A 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001799E 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000179A2 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000179A4                            ; ===========================================================================
000179A4                            
000179A4                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000179A4 4E75                       		rts	
000179A6                            ; ===========================================================================
000179A6                            
000179A6                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000179A6 323C 0060                  		move.w	#$60,d1
000179AA 7000                       		moveq	#0,d0
000179AC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000179B0 0828 0000 0022             		btst	#0,$22(a0)
000179B6 6700                       		beq.s	Obj6A_Animate01
000179B8 4440                       		neg.w	d0
000179BA D041                       		add.w	d1,d0
000179BC                            
000179BC                            Obj6A_Animate01:
000179BC 3228 003A                  		move.w	$3A(a0),d1
000179C0 9240                       		sub.w	d0,d1
000179C2 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000179C6 5328 001E                  		subq.b	#1,$1E(a0)
000179CA 6A00                       		bpl.s	loc_15A46
000179CC 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000179D2 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000179D8                            
000179D8                            loc_15A46:
000179D8 4A28 0001                  		tst.b	1(a0)
000179DC 6A00                       		bpl.s	locret_15A60
000179DE 3038 FE04                  		move.w	($FFFFFE04).w,d0
000179E2 0240 000F                  		andi.w	#$F,d0
000179E6 6600                       		bne.s	locret_15A60
000179E8 303C 00B0                  		move.w	#$B0,d0
000179EC 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
000179F2                            
000179F2                            locret_15A60:
000179F2 4E75                       		rts	
000179F4                            ; ===========================================================================
000179F4                            
000179F4                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000179F4 323C 0030                  		move.w	#$30,d1
000179F8 7000                       		moveq	#0,d0
000179FA 1038 FE64                  		move.b	($FFFFFE64).w,d0
000179FE 0828 0000 0022             		btst	#0,$22(a0)
00017A04 6700                       		beq.s	Obj6A_Animate02
00017A06 4440                       		neg.w	d0
00017A08 0640 0080                  		addi.w	#$80,d0
00017A0C                            
00017A0C                            Obj6A_Animate02:
00017A0C 3228 0038                  		move.w	$38(a0),d1
00017A10 9240                       		sub.w	d0,d1
00017A12 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017A16 5328 001E                  		subq.b	#1,$1E(a0)
00017A1A 6A00                       		bpl.s	loc_15A96
00017A1C 117C 0002 001E             		move.b	#2,$1E(a0)
00017A22 0868 0000 001A             		bchg	#0,$1A(a0)
00017A28                            
00017A28                            loc_15A96:
00017A28 4A28 0001                  		tst.b	1(a0)
00017A2C 6A00                       		bpl.s	locret_15AB0
00017A2E 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017A32 0C00 0018                  		cmpi.b	#$18,d0
00017A36 6600                       		bne.s	locret_15AB0
00017A38 303C 00B0                  		move.w	#$B0,d0
00017A3C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
00017A42                            
00017A42                            locret_15AB0:
00017A42 4E75                       		rts	
00017A44                            ; ===========================================================================
00017A44                            
00017A44                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017A44 4A28 003D                  		tst.b	$3D(a0)
00017A48 6600                       		bne.s	Obj6A_Animate03
00017A4A 3038 D008                  		move.w	($FFFFD008).w,d0
00017A4E 0440 00C0                  		subi.w	#$C0,d0
00017A52 6500                       		bcs.s	loc_15B02
00017A54 9068 0008                  		sub.w	8(a0),d0
00017A58 6500                       		bcs.s	loc_15B02
00017A5A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017A5E 0440 0080                  		subi.w	#$80,d0
00017A62 B068 000C                  		cmp.w	$C(a0),d0
00017A66 6400                       		bcc.s	locret_15B04
00017A68 0640 0100                  		addi.w	#$100,d0
00017A6C B068 000C                  		cmp.w	$C(a0),d0
00017A70 6500                       		bcs.s	locret_15B04
00017A72 117C 0001 003D             		move.b	#1,$3D(a0)
00017A78 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00017A7E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017A84 117C 0002 001A             		move.b	#2,$1A(a0)
00017A8A 303C 00B0                  		move.w	#$B0,d0
00017A8E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
00017A94                            
00017A94                            loc_15B02:
00017A94 588F                       		addq.l	#4,sp
00017A96                            
00017A96                            locret_15B04:
00017A96 4E75                       		rts	
00017A98                            ; ===========================================================================
00017A98                            
00017A98                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00017A98 4EB9 0000 E8E8             		jsr	SpeedToPos
00017A9E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017AA4 5328 001E                  		subq.b	#1,$1E(a0)
00017AA8 6A00                       		bpl.s	locret_15B24
00017AAA 117C 0002 001E             		move.b	#2,$1E(a0)
00017AB0 0868 0000 001A             		bchg	#0,$1A(a0)
00017AB6                            
00017AB6                            locret_15B24:
00017AB6 4E75                       		rts	
00017AB8                            ; ===========================================================================
00017AB8                            
00017AB8                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017AB8 4A28 003D                  		tst.b	$3D(a0)
00017ABC 6600                       		bne.s	Obj6A_Animate04
00017ABE 3038 D008                  		move.w	($FFFFD008).w,d0
00017AC2 0640 00E0                  		addi.w	#$E0,d0
00017AC6 9068 0008                  		sub.w	8(a0),d0
00017ACA 6400                       		bcc.s	loc_15B74
00017ACC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017AD0 0440 0080                  		subi.w	#$80,d0
00017AD4 B068 000C                  		cmp.w	$C(a0),d0
00017AD8 6400                       		bcc.s	locret_15B76
00017ADA 0640 0100                  		addi.w	#$100,d0
00017ADE B068 000C                  		cmp.w	$C(a0),d0
00017AE2 6500                       		bcs.s	locret_15B76
00017AE4 117C 0001 003D             		move.b	#1,$3D(a0)
00017AEA 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017AF0 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017AF6 117C 0002 001A             		move.b	#2,$1A(a0)
00017AFC 303C 00B0                  		move.w	#$B0,d0
00017B00 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
00017B06                            
00017B06                            loc_15B74:
00017B06 588F                       		addq.l	#4,sp
00017B08                            
00017B08                            locret_15B76:
00017B08 4E75                       		rts	
00017B0A                            ; ===========================================================================
00017B0A                            
00017B0A                            Obj6A_Animate04:
00017B0A 4EB9 0000 E8E8             		jsr	SpeedToPos
00017B10 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017B16 5328 001E                  		subq.b	#1,$1E(a0)
00017B1A 6A00                       		bpl.s	locret_15B96
00017B1C 117C 0002 001E             		move.b	#2,$1E(a0)
00017B22 0868 0000 001A             		bchg	#0,$1A(a0)
00017B28                            
00017B28                            locret_15B96:
00017B28 4E75                       		rts	
00017B2A                            ; ===========================================================================
00017B2A                            ; ---------------------------------------------------------------------------
00017B2A                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017B2A                            ; ---------------------------------------------------------------------------
00017B2A                            Map_obj6A:
00017B2A                            	include "_maps\obj6A.asm"
00017B2A                            ; ---------------------------------------------------------------------------
00017B2A                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017B2A                            ; ---------------------------------------------------------------------------
00017B2A 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017B2E 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017B32 07                         byte_15BA0:	dc.b 7
00017B33 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017B38 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017B3D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017B42 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017B47 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017B4C 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017B51 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017B56 07                         byte_15BC4:	dc.b 7
00017B57 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017B5C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017B61 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017B66 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017B6B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017B70 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017B75 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017B7A 04                         byte_15BE8:	dc.b 4
00017B7B E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017B80 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017B85 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017B8A 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017B8F 04                         byte_15BFD:	dc.b 4
00017B90 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017B95 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017B9A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017B9F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017BA4                            		even
00017BA4                            		even
00017BA4                            
00017BA4                            ; ===========================================================================
00017BA4                            ; ---------------------------------------------------------------------------
00017BA4                            ; Object 6B - stomper (SBZ)
00017BA4                            ; ---------------------------------------------------------------------------
00017BA4                            
00017BA4                            Obj6B:					; XREF: Obj_Index
00017BA4 7000                       		moveq	#0,d0
00017BA6 1028 0024                  		move.b	$24(a0),d0
00017BAA 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00017BAE 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00017BB2                            ; ===========================================================================
00017BB2 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017BB4 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017BB6                            
00017BB6 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017BBA 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017BBE 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017BC2 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017BC6 8040 0005                  		dc.b  $80, $40,	  0,   5
00017BCA                            ; ===========================================================================
00017BCA                            
00017BCA                            Obj6B_Main:				; XREF: Obj6B_Index
00017BCA 5428 0024                  		addq.b	#2,$24(a0)
00017BCE 7000                       		moveq	#0,d0
00017BD0 1028 0028                  		move.b	$28(a0),d0
00017BD4 E448                       		lsr.w	#2,d0
00017BD6 0240 001C                  		andi.w	#$1C,d0
00017BDA 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017BDE 115B 0019                  		move.b	(a3)+,$19(a0)
00017BE2 115B 0016                  		move.b	(a3)+,$16(a0)
00017BE6 E448                       		lsr.w	#2,d0
00017BE8 1140 001A                  		move.b	d0,$1A(a0)
00017BEC 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017BF4 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017BFA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017C00 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017C02 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017C08 6700                       		beq.s	Obj6B_SBZ3
00017C0A                            
00017C0A                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017C0A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017C0E 6700                       		beq.s	Obj6B_Delete		; if it's zero, don't remember object
00017C10 3440                       		movea.w	d0,a2	; load address into a2
00017C12 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017C16                            
00017C16                            Obj6B_Delete:
00017C16 4EF9 0000 E952             		jmp	DeleteObject
00017C1C                            ; ===========================================================================
00017C1C                            
00017C1C                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017C1C 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017C22 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017C28 6600                       		bne.s	Obj6B_SBZ12
00017C2A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017C2E 6700                       		beq.s	Obj6B_SBZ12		; if it's zero, don't remember object
00017C30 3440                       		movea.w	d0,a2	; load address into a2
00017C32 0812 0000                  		btst	#0,(a2)
00017C36 6700                       		beq.s	Obj6B_SBZ12
00017C38 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017C3C 60CC                       		bra.s	Obj6B_ChkGone
00017C3E                            ; ===========================================================================
00017C3E                            
00017C3E                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017C3E 0028 0004 0001             		ori.b	#4,1(a0)
00017C44 117C 0004 0018             		move.b	#4,$18(a0)
00017C4A 3168 0008 0034             		move.w	8(a0),$34(a0)
00017C50 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017C56 7000                       		moveq	#0,d0
00017C58 101B                       		move.b	(a3)+,d0
00017C5A 3140 003C                  		move.w	d0,$3C(a0)
00017C5E 7000                       		moveq	#0,d0
00017C60 1028 0028                  		move.b	$28(a0),d0
00017C64 6A00                       		bpl.s	Obj6B_Action
00017C66 0200 000F                  		andi.b	#$F,d0
00017C6A 1140 003E                  		move.b	d0,$3E(a0)
00017C6E 1153 0028                  		move.b	(a3),$28(a0)
00017C72 0C13 0005                  		cmpi.b	#5,(a3)
00017C76 6600                       		bne.s	Obj6B_ChkGone2
00017C78 08E8 0004 0001             		bset	#4,1(a0)
00017C7E                            
00017C7E                            Obj6B_ChkGone2:
00017C7E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017C82 6700                       		beq.s	Obj6B_Action		; if it's zero, don't remember object
00017C84 3440                       		movea.w	d0,a2	; load address into a2
00017C86 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017C8A                            
00017C8A                            Obj6B_Action:				; XREF: Obj6B_Index
00017C8A 3F28 0008                  		move.w	8(a0),-(sp)
00017C8E 7000                       		moveq	#0,d0
00017C90 1028 0028                  		move.b	$28(a0),d0
00017C94 0240 000F                  		andi.w	#$F,d0
00017C98 D040                       		add.w	d0,d0
00017C9A 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017C9E 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017CA2 381F                       		move.w	(sp)+,d4
00017CA4 4A28 0001                  		tst.b	1(a0)
00017CA8 6A00                       		bpl.s	Obj6B_ChkDel
00017CAA 7200                       		moveq	#0,d1
00017CAC 1228 0019                  		move.b	$19(a0),d1
00017CB0 0641 000B                  		addi.w	#$B,d1
00017CB4 7400                       		moveq	#0,d2
00017CB6 1428 0016                  		move.b	$16(a0),d2
00017CBA 3602                       		move.w	d2,d3
00017CBC 5243                       		addq.w	#1,d3
00017CBE 6100 95B0                  		bsr.w	SolidObject
00017CC2                            
00017CC2                            Obj6B_ChkDel:
00017CC2 3028 0034                  		move.w	$34(a0),d0
00017CC6 0240 FF80                  		andi.w	#$FF80,d0
00017CCA 3238 F700                  		move.w	($FFFFF700).w,d1
00017CCE 0441 0080                  		subi.w	#$80,d1
00017CD2 0241 FF80                  		andi.w	#$FF80,d1
00017CD6 9041                       		sub.w	d1,d0
00017CD8 0C40 0280                  		cmpi.w	#$280,d0
00017CDC 6200                       		bhi.s	loc_15D64
00017CDE 4EF9 0000 E902             		jmp	DisplaySprite
00017CE4                            ; ===========================================================================
00017CE4                            
00017CE4                            loc_15D64:
00017CE4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017CEA 6600                       		bne.s	Obj6B_Delete2
00017CEC 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017CF0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017CF4 6700                       		beq.s	Obj6B_Delete2		; if it's zero, don't remember object
00017CF6 3440                       		movea.w	d0,a2	; load address into a2
00017CF8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017CFC                            
00017CFC                            Obj6B_Delete2:
00017CFC 4EF9 0000 E952             		jmp	DeleteObject
00017D02                            ; ===========================================================================
00017D02 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017D06 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017D0A 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017D0E                            ; ===========================================================================
00017D0E                            
00017D0E                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017D0E 4E75                       		rts	
00017D10                            ; ===========================================================================
00017D10                            
00017D10                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017D10 4A28 0038                  		tst.b	$38(a0)
00017D14 6600                       		bne.s	loc_15DB4
00017D16 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017D1A 7000                       		moveq	#0,d0
00017D1C 1028 003E                  		move.b	$3E(a0),d0
00017D20 0832 0000 0000             		btst	#0,(a2,d0.w)
00017D26 6700                       		beq.s	loc_15DC2
00017D28 117C 0001 0038             		move.b	#1,$38(a0)
00017D2E                            
00017D2E                            loc_15DB4:
00017D2E 3028 003C                  		move.w	$3C(a0),d0
00017D32 B068 003A                  		cmp.w	$3A(a0),d0
00017D36 6700                       		beq.s	loc_15DE0
00017D38 5468 003A                  		addq.w	#2,$3A(a0)
00017D3C                            
00017D3C                            loc_15DC2:
00017D3C 3028 003A                  		move.w	$3A(a0),d0
00017D40 0828 0000 0022             		btst	#0,$22(a0)
00017D46 6700                       		beq.s	loc_15DD4
00017D48 4440                       		neg.w	d0
00017D4A 0640 0080                  		addi.w	#$80,d0
00017D4E                            
00017D4E                            loc_15DD4:
00017D4E 3228 0034                  		move.w	$34(a0),d1
00017D52 9240                       		sub.w	d0,d1
00017D54 3141 0008                  		move.w	d1,8(a0)
00017D58 4E75                       		rts	
00017D5A                            ; ===========================================================================
00017D5A                            
00017D5A                            loc_15DE0:
00017D5A 5228 0028                  		addq.b	#1,$28(a0)
00017D5E 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017D64 4228 0038                  		clr.b	$38(a0)
00017D68 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017D6C 67CE                       		beq.s	loc_15DC2		; if it's zero, don't remember object
00017D6E 3440                       		movea.w	d0,a2	; load address into a2
00017D70 08D2 0000                  		bset	#0,(a2)
00017D74 60C6                       		bra.s	loc_15DC2
00017D76                            ; ===========================================================================
00017D76                            
00017D76                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00017D76 4A28 0038                  		tst.b	$38(a0)
00017D7A 6600                       		bne.s	loc_15E14
00017D7C 5368 0036                  		subq.w	#1,$36(a0)
00017D80 6600                       		bne.s	loc_15E1E
00017D82 117C 0001 0038             		move.b	#1,$38(a0)
00017D88                            
00017D88                            loc_15E14:
00017D88 4A68 003A                  		tst.w	$3A(a0)
00017D8C 6700                       		beq.s	loc_15E3C
00017D8E 5568 003A                  		subq.w	#2,$3A(a0)
00017D92                            
00017D92                            loc_15E1E:
00017D92 3028 003A                  		move.w	$3A(a0),d0
00017D96 0828 0000 0022             		btst	#0,$22(a0)
00017D9C 6700                       		beq.s	loc_15E30
00017D9E 4440                       		neg.w	d0
00017DA0 0640 0080                  		addi.w	#$80,d0
00017DA4                            
00017DA4                            loc_15E30:
00017DA4 3228 0034                  		move.w	$34(a0),d1
00017DA8 9240                       		sub.w	d0,d1
00017DAA 3141 0008                  		move.w	d1,8(a0)
00017DAE 4E75                       		rts	
00017DB0                            ; ===========================================================================
00017DB0                            
00017DB0                            loc_15E3C:
00017DB0 5328 0028                  		subq.b	#1,$28(a0)
00017DB4 4228 0038                  		clr.b	$38(a0)
00017DB8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017DBC 67D4                       		beq.s	loc_15E1E		; if it's zero, don't remember object
00017DBE 3440                       		movea.w	d0,a2	; load address into a2
00017DC0 0892 0000                  		bclr	#0,(a2)
00017DC4 60CC                       		bra.s	loc_15E1E
00017DC6                            ; ===========================================================================
00017DC6                            
00017DC6                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017DC6 4A28 0038                  		tst.b	$38(a0)
00017DCA 6600                       		bne.s	loc_15E7C
00017DCC 4A68 003A                  		tst.w	$3A(a0)
00017DD0 6700                       		beq.s	loc_15E6A
00017DD2 5368 003A                  		subq.w	#1,$3A(a0)
00017DD6 6000                       		bra.s	loc_15E8E
00017DD8                            ; ===========================================================================
00017DD8                            
00017DD8                            loc_15E6A:
00017DD8 5368 0036                  		subq.w	#1,$36(a0)
00017DDC 6A00                       		bpl.s	loc_15E8E
00017DDE 317C 003C 0036             		move.w	#$3C,$36(a0)
00017DE4 117C 0001 0038             		move.b	#1,$38(a0)
00017DEA                            
00017DEA                            loc_15E7C:
00017DEA 5068 003A                  		addq.w	#8,$3A(a0)
00017DEE 3028 003A                  		move.w	$3A(a0),d0
00017DF2 B068 003C                  		cmp.w	$3C(a0),d0
00017DF6 6600                       		bne.s	loc_15E8E
00017DF8 4228 0038                  		clr.b	$38(a0)
00017DFC                            
00017DFC                            loc_15E8E:
00017DFC 3028 003A                  		move.w	$3A(a0),d0
00017E00 0828 0000 0022             		btst	#0,$22(a0)
00017E06 6700                       		beq.s	loc_15EA0
00017E08 4440                       		neg.w	d0
00017E0A 0640 0038                  		addi.w	#$38,d0
00017E0E                            
00017E0E                            loc_15EA0:
00017E0E 3228 0030                  		move.w	$30(a0),d1
00017E12 D240                       		add.w	d0,d1
00017E14 3141 000C                  		move.w	d1,$C(a0)
00017E18 4E75                       		rts	
00017E1A                            ; ===========================================================================
00017E1A                            
00017E1A                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017E1A 4A28 0038                  		tst.b	$38(a0)
00017E1E 6600                       		bne.s	loc_15ED0
00017E20 4A68 003A                  		tst.w	$3A(a0)
00017E24 6700                       		beq.s	loc_15EBE
00017E26 5168 003A                  		subq.w	#8,$3A(a0)
00017E2A 6000                       		bra.s	loc_15EF0
00017E2C                            ; ===========================================================================
00017E2C                            
00017E2C                            loc_15EBE:
00017E2C 5368 0036                  		subq.w	#1,$36(a0)
00017E30 6A00                       		bpl.s	loc_15EF0
00017E32 317C 003C 0036             		move.w	#$3C,$36(a0)
00017E38 117C 0001 0038             		move.b	#1,$38(a0)
00017E3E                            
00017E3E                            loc_15ED0:
00017E3E 3028 003A                  		move.w	$3A(a0),d0
00017E42 B068 003C                  		cmp.w	$3C(a0),d0
00017E46 6700                       		beq.s	loc_15EE0
00017E48 5068 003A                  		addq.w	#8,$3A(a0)
00017E4C 6000                       		bra.s	loc_15EF0
00017E4E                            ; ===========================================================================
00017E4E                            
00017E4E                            loc_15EE0:
00017E4E 5368 0036                  		subq.w	#1,$36(a0)
00017E52 6A00                       		bpl.s	loc_15EF0
00017E54 317C 003C 0036             		move.w	#$3C,$36(a0)
00017E5A 4228 0038                  		clr.b	$38(a0)
00017E5E                            
00017E5E                            loc_15EF0:
00017E5E 3028 003A                  		move.w	$3A(a0),d0
00017E62 0828 0000 0022             		btst	#0,$22(a0)
00017E68 6700                       		beq.s	loc_15F02
00017E6A 4440                       		neg.w	d0
00017E6C 0640 0038                  		addi.w	#$38,d0
00017E70                            
00017E70                            loc_15F02:
00017E70 3228 0030                  		move.w	$30(a0),d1
00017E74 D240                       		add.w	d0,d1
00017E76 3141 000C                  		move.w	d1,$C(a0)
00017E7A 4E75                       		rts	
00017E7C                            ; ===========================================================================
00017E7C                            
00017E7C                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00017E7C 4A28 0038                  		tst.b	$38(a0)
00017E80 6600                       		bne.s	loc_15F3E
00017E82 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017E86 7000                       		moveq	#0,d0
00017E88 1028 003E                  		move.b	$3E(a0),d0
00017E8C 0832 0000 0000             		btst	#0,(a2,d0.w)
00017E92 6700                       		beq.s	locret_15F5C
00017E94 117C 0001 0038             		move.b	#1,$38(a0)
00017E9A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017E9E 6700                       		beq.s	loc_15F3E		; if it's zero, don't remember object
00017EA0 3440                       		movea.w	d0,a2	; load address into a2
00017EA2 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017EA6                            
00017EA6                            loc_15F3E:
00017EA6 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017EAE 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017EB6 3168 0008 0034             		move.w	8(a0),$34(a0)
00017EBC 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017EC2 6700                       		beq.s	loc_15F5E
00017EC4                            
00017EC4                            locret_15F5C:
00017EC4 4E75                       		rts	
00017EC6                            ; ===========================================================================
00017EC6                            
00017EC6                            loc_15F5E:
00017EC6 4228 0028                  		clr.b	$28(a0)
00017ECA 4228 0038                  		clr.b	$38(a0)
00017ECE 4E75                       		rts	
00017ED0                            ; ===========================================================================
00017ED0                            ; ---------------------------------------------------------------------------
00017ED0                            ; Sprite mappings - stomper and	platforms (SBZ)
00017ED0                            ; ---------------------------------------------------------------------------
00017ED0                            Map_obj6B:
00017ED0                            	include "_maps\obj6B.asm"
00017ED0                            ; ---------------------------------------------------------------------------
00017ED0                            ; Sprite mappings - stomper and	platforms (SBZ)
00017ED0                            ; ---------------------------------------------------------------------------
00017ED0 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017ED4 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017ED8 0000                       		dc.w byte_15FB0-Map_obj6B
00017EDA 04                         byte_15F72:	dc.b 4
00017EDB F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017EE0 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017EE5 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017EEA F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017EEF 08                         byte_15F87:	dc.b 8
00017EF0 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017EF5 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017EFA E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017EFF E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017F04 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017F09 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017F0E 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017F13 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017F18 0E                         byte_15FB0:	dc.b $E
00017F19 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017F1E C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017F23 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017F28 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00017F2D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017F32 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00017F37 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00017F3C C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00017F41 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00017F46 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00017F4B E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00017F50 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00017F55 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00017F5A 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00017F60 00                         		even
00017F60 00                         		even
00017F60                            
00017F60                            ; ===========================================================================
00017F60                            ; ---------------------------------------------------------------------------
00017F60                            ; Object 6C - vanishing	platforms (SBZ)
00017F60                            ; ---------------------------------------------------------------------------
00017F60                            
00017F60                            Obj6C:					; XREF: Obj_Index
00017F60 7000                       		moveq	#0,d0
00017F62 1028 0024                  		move.b	$24(a0),d0
00017F66 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00017F6A 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00017F6E                            ; ===========================================================================
00017F6E 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00017F70 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017F72 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017F74 0000                       		dc.w loc_16068-Obj6C_Index
00017F76                            ; ===========================================================================
00017F76                            
00017F76                            Obj6C_Main:				; XREF: Obj6C_Index
00017F76 5C28 0024                  		addq.b	#6,$24(a0)
00017F7A 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00017F82 317C 44C3 0002             		move.w	#$44C3,2(a0)
00017F88 0028 0004 0001             		ori.b	#4,1(a0)
00017F8E 117C 0010 0019             		move.b	#$10,$19(a0)
00017F94 117C 0004 0018             		move.b	#4,$18(a0)
00017F9A 7000                       		moveq	#0,d0
00017F9C 1028 0028                  		move.b	$28(a0),d0	; get object type
00017FA0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017FA4 5240                       		addq.w	#1,d0		; add 1
00017FA6 EF48                       		lsl.w	#7,d0		; multiply by $80
00017FA8 3200                       		move.w	d0,d1
00017FAA 5340                       		subq.w	#1,d0
00017FAC 3140 0030                  		move.w	d0,$30(a0)
00017FB0 3140 0032                  		move.w	d0,$32(a0)
00017FB4 7000                       		moveq	#0,d0
00017FB6 1028 0028                  		move.b	$28(a0),d0	; get object type
00017FBA 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017FBE 0641 0080                  		addi.w	#$80,d1
00017FC2 C0C1                       		mulu.w	d1,d0
00017FC4 E088                       		lsr.l	#8,d0
00017FC6 3140 0036                  		move.w	d0,$36(a0)
00017FCA 5341                       		subq.w	#1,d1
00017FCC 3141 0038                  		move.w	d1,$38(a0)
00017FD0                            
00017FD0                            loc_16068:				; XREF: Obj6C_Index
00017FD0 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017FD4 9068 0036                  		sub.w	$36(a0),d0
00017FD8 C068 0038                  		and.w	$38(a0),d0
00017FDC 6600                       		bne.s	Obj6C_Animate
00017FDE 5928 0024                  		subq.b	#4,$24(a0)
00017FE2 6000                       		bra.s	Obj6C_Vanish
00017FE4                            ; ===========================================================================
00017FE4                            
00017FE4                            Obj6C_Animate:
00017FE4 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017FEA 4EB9 0000 B962             		jsr	AnimateSprite
00017FF0 6000 8F5A                  		bra.w	MarkObjGone
00017FF4                            ; ===========================================================================
00017FF4                            
00017FF4                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017FF4 5368 0030                  		subq.w	#1,$30(a0)
00017FF8 6A00                       		bpl.s	loc_160AA
00017FFA 317C 007F 0030             		move.w	#127,$30(a0)
00018000 4A28 001C                  		tst.b	$1C(a0)
00018004 6700                       		beq.s	loc_160A4
00018006 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001800C                            
0001800C                            loc_160A4:
0001800C 0868 0000 001C             		bchg	#0,$1C(a0)
00018012                            
00018012                            loc_160AA:
00018012 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00018018 4EB9 0000 B962             		jsr	AnimateSprite
0001801E 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00018024 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00018026 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001802C 6600                       		bne.s	loc_160D6
0001802E 7200                       		moveq	#0,d1
00018030 1228 0019                  		move.b	$19(a0),d1
00018034 4EB9 0000 8510             		jsr	(PlatformObject).l
0001803A 6000 8F10                  		bra.w	MarkObjGone
0001803E                            ; ===========================================================================
0001803E                            
0001803E                            loc_160D6:
0001803E 7200                       		moveq	#0,d1
00018040 1228 0019                  		move.b	$19(a0),d1
00018044 4EB9 0000 8684             		jsr	(ExitPlatform).l
0001804A 3428 0008                  		move.w	8(a0),d2
0001804E 4EB9 0000 8BFA             		jsr	(MvSonicOnPtfm2).l
00018054 6000 8EF6                  		bra.w	MarkObjGone
00018058                            ; ===========================================================================
00018058                            
00018058                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00018058 0828 0003 0022             		btst	#3,$22(a0)
0001805E 6700                       		beq.s	Obj6C_Display
00018060 43F8 D000                  		lea	($FFFFD000).w,a1
00018064 08A9 0003 0022             		bclr	#3,$22(a1)
0001806A 08A8 0003 0022             		bclr	#3,$22(a0)
00018070 117C 0002 0024             		move.b	#2,$24(a0)
00018076 4228 0025                  		clr.b	$25(a0)
0001807A                            
0001807A                            Obj6C_Display:
0001807A 6000 8ED0                  		bra.w	MarkObjGone
0001807E                            ; ===========================================================================
0001807E                            Ani_obj6C:
0001807E                            	include "_anim\obj6C.asm"
0001807E                            ; ---------------------------------------------------------------------------
0001807E                            ; Animation script - vanishing platforms (SBZ)
0001807E                            ; ---------------------------------------------------------------------------
0001807E 0000                       		dc.w byte_1611A-Ani_obj6C
00018080 0000                       		dc.w byte_16122-Ani_obj6C
00018082 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
0001808A 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00018092                            		even
00018092                            		even
00018092                            
00018092                            ; ---------------------------------------------------------------------------
00018092                            ; Sprite mappings - vanishing platforms	(SBZ)
00018092                            ; ---------------------------------------------------------------------------
00018092                            Map_obj6C:
00018092                            	include "_maps\obj6C.asm"
00018092                            ; ---------------------------------------------------------------------------
00018092                            ; Sprite mappings - vanishing platforms	(SBZ)
00018092                            ; ---------------------------------------------------------------------------
00018092 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00018096 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001809A 01                         byte_16132:	dc.b 1
0001809B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000180A0 01                         byte_16138:	dc.b 1
000180A1 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000180A6 01                         byte_1613E:	dc.b 1
000180A7 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000180AC 00                         byte_16144:	dc.b 0
000180AE 00                         		even
000180AE 00                         		even
000180AE                            
000180AE                            ; ===========================================================================
000180AE                            ; ---------------------------------------------------------------------------
000180AE                            ; Object 6E - electrocution orbs (SBZ)
000180AE                            ; ---------------------------------------------------------------------------
000180AE                            
000180AE                            Obj6E:					; XREF: Obj_Index
000180AE 7000                       		moveq	#0,d0
000180B0 1028 0024                  		move.b	$24(a0),d0
000180B4 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000180B8 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000180BC                            ; ===========================================================================
000180BC 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000180BE 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000180C0                            ; ===========================================================================
000180C0                            
000180C0                            Obj6E_Main:				; XREF: Obj6E_Index
000180C0 5428 0024                  		addq.b	#2,$24(a0)
000180C4 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000180CC 317C 047E 0002             		move.w	#$47E,2(a0)
000180D2 0028 0004 0001             		ori.b	#4,1(a0)
000180D8 117C 0028 0019             		move.b	#$28,$19(a0)
000180DE 7000                       		moveq	#0,d0
000180E0 1028 0028                  		move.b	$28(a0),d0	; read object type
000180E4 E948                       		lsl.w	#4,d0		; multiply by $10
000180E6 5340                       		subq.w	#1,d0
000180E8 3140 0034                  		move.w	d0,$34(a0)
000180EC                            
000180EC                            Obj6E_Shock:				; XREF: Obj6E_Index
000180EC 3038 FE04                  		move.w	($FFFFFE04).w,d0
000180F0 C068 0034                  		and.w	$34(a0),d0
000180F4 6600                       		bne.s	Obj6E_Animate
000180F6 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000180FC 4A28 0001                  		tst.b	1(a0)
00018100 6A00                       		bpl.s	Obj6E_Animate
00018102 303C 00B1                  		move.w	#$B1,d0
00018106 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play electricity sound
0001810C                            
0001810C                            Obj6E_Animate:
0001810C 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00018112 4EB9 0000 B962             		jsr	AnimateSprite
00018118 117C 0000 0020             		move.b	#0,$20(a0)
0001811E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00018124 6600                       		bne.s	Obj6E_Display	; if not, branch
00018126 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
0001812C                            
0001812C                            Obj6E_Display:
0001812C 6000 8E1E                  		bra.w	MarkObjGone
00018130                            ; ===========================================================================
00018130                            Ani_obj6E:
00018130                            	include "_anim\obj6E.asm"
00018130                            ; ---------------------------------------------------------------------------
00018130                            ; Animation script - electrocution orbs (SBZ)
00018130                            ; ---------------------------------------------------------------------------
00018130 0000                       		dc.w byte_161CC-Ani_obj6E
00018132 0000                       		dc.w byte_161D0-Ani_obj6E
00018134 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00018138 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00018148                            		even
00018148                            		even
00018148                            
00018148                            ; ---------------------------------------------------------------------------
00018148                            ; Sprite mappings - electrocution orbs (SBZ)
00018148                            ; ---------------------------------------------------------------------------
00018148                            Map_obj6E:
00018148                            	include "_maps\obj6E.asm"
00018148                            ; ---------------------------------------------------------------------------
00018148                            ; Sprite mappings - electrocution orbs (SBZ)
00018148                            ; ---------------------------------------------------------------------------
00018148 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
0001814C 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00018150 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00018154 02                         byte_161EC:	dc.b 2
00018155 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001815A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001815F 03                         byte_161F7:	dc.b 3
00018160 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018165 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001816A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001816F 05                         byte_16207:	dc.b 5
00018170 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018175 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001817A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001817F F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018184 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00018189 04                         byte_16221:	dc.b 4
0001818A F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001818F 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018194 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018199 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001819E 06                         byte_16236:	dc.b 6
0001819F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000181A4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000181A9 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000181AE F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000181B3 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000181B8 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
000181BD 04                         byte_16255:	dc.b 4
000181BE F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000181C3 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000181C8 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
000181CD F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
000181D2                            		even
000181D2                            		even
000181D2                            
000181D2                            ; ===========================================================================
000181D2                            ; ---------------------------------------------------------------------------
000181D2                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000181D2                            ; ---------------------------------------------------------------------------
000181D2                            
000181D2                            Obj6F:					; XREF: Obj_Index
000181D2 7000                       		moveq	#0,d0
000181D4 1028 0024                  		move.b	$24(a0),d0
000181D8 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000181DC 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000181E0 3028 0030                  		move.w	$30(a0),d0
000181E4 0240 FF80                  		andi.w	#$FF80,d0
000181E8 3238 F700                  		move.w	($FFFFF700).w,d1
000181EC 0441 0080                  		subi.w	#$80,d1
000181F0 0241 FF80                  		andi.w	#$FF80,d1
000181F4 9041                       		sub.w	d1,d0
000181F6 0C40 0280                  		cmpi.w	#$280,d0
000181FA 6300                       		bls.s	Obj6F_Display
000181FC                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
000181FC                            	;	beq.s	loc_1629A		; if it's zero, don't remember object
000181FC                            	;	movea.w	d0,a2	; load address into a2
000181FC                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000181FC 6000                       		bra.s	loc_1629A	; and delete object
000181FE                            
000181FE                            Obj6F_Display:
000181FE 4EF9 0000 E902             		jmp	DisplaySprite
00018204                            ; ===========================================================================
00018204                            
00018204                            loc_1629A:
00018204 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001820A 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001820C 0C40 FF80                  		cmpi.w	#-$80,d0
00018210 64EC                       		bcc.s	Obj6F_Display
00018212                            
00018212                            Obj6F_Act1or2:
00018212 1028 002F                  		move.b	$2F(a0),d0
00018216 6A00                       		bpl.s	Obj6F_Delete
00018218 0240 007F                  		andi.w	#$7F,d0
0001821C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00018220 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00018226                            
00018226                            Obj6F_Delete:
00018226 4EF9 0000 E952             		jmp	DeleteObject
0001822C                            ; ===========================================================================
0001822C 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001822E 0000                       		dc.w loc_163D8-Obj6F_Index
00018230                            ; ===========================================================================
00018230                            
00018230                            Obj6F_Main:				; XREF: Obj6F_Index
00018230 1028 0028                  		move.b	$28(a0),d0
00018234 6B00 0000                  		bmi.w	loc_16380
00018238 5428 0024                  		addq.b	#2,$24(a0)
0001823C 217C 0001 78CA 0004        		move.l	#Map_obj69a,4(a0)
00018244 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001824A 117C 0010 0019             		move.b	#$10,$19(a0)
00018250 0028 0004 0001             		ori.b	#4,1(a0)
00018256 117C 0004 0018             		move.b	#4,$18(a0)
0001825C 7000                       		moveq	#0,d0
0001825E 1028 0028                  		move.b	$28(a0),d0
00018262 3200                       		move.w	d0,d1
00018264 E648                       		lsr.w	#3,d0
00018266 0240 001E                  		andi.w	#$1E,d0
0001826A 45FA 0000                  		lea	off_164A6(pc),a2
0001826E D4F2 0000                  		adda.w	(a2,d0.w),a2
00018272 315A 0038                  		move.w	(a2)+,$38(a0)
00018276 315A 0030                  		move.w	(a2)+,$30(a0)
0001827A 214A 003C                  		move.l	a2,$3C(a0)
0001827E 0241 000F                  		andi.w	#$F,d1
00018282 E549                       		lsl.w	#2,d1
00018284 1141 0038                  		move.b	d1,$38(a0)
00018288 117C 0004 003A             		move.b	#4,$3A(a0)
0001828E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00018292 6700                       		beq.s	loc_16356
00018294 117C 0001 003B             		move.b	#1,$3B(a0)
0001829A 4428 003A                  		neg.b	$3A(a0)
0001829E 7200                       		moveq	#0,d1
000182A0 1228 0038                  		move.b	$38(a0),d1
000182A4 D228 003A                  		add.b	$3A(a0),d1
000182A8 B228 0039                  		cmp.b	$39(a0),d1
000182AC 6500                       		bcs.s	loc_16352
000182AE 1001                       		move.b	d1,d0
000182B0 7200                       		moveq	#0,d1
000182B2 4A00                       		tst.b	d0
000182B4 6A00                       		bpl.s	loc_16352
000182B6 1228 0039                  		move.b	$39(a0),d1
000182BA 5901                       		subq.b	#4,d1
000182BC                            
000182BC                            loc_16352:
000182BC 1141 0038                  		move.b	d1,$38(a0)
000182C0                            
000182C0                            loc_16356:
000182C0 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000182C6 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000182CC 4A41                       		tst.w	d1
000182CE 6600                       		bne.s	loc_1636C
000182D0 117C 0001 001C             		move.b	#1,$1C(a0)
000182D6                            
000182D6                            loc_1636C:
000182D6 0C41 0008                  		cmpi.w	#8,d1
000182DA 6600                       		bne.s	loc_16378
000182DC 117C 0000 001C             		move.b	#0,$1C(a0)
000182E2                            
000182E2                            loc_16378:
000182E2 6100 BBAA                  		bsr.w	Obj63_ChangeDir
000182E6 6000 0000                  		bra.w	loc_163D8
000182EA                            ; ===========================================================================
000182EA                            
000182EA                            loc_16380:				; XREF: Obj6F_Main
000182EA 1140 002F                  		move.b	d0,$2F(a0)
000182EE 0240 007F                  		andi.w	#$7F,d0
000182F2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000182F6 08F2 0000 0000             		bset	#0,(a2,d0.w)
000182FC 6700                       		beq.s	loc_1639A
000182FE 4EF9 0000 E952             		jmp	DeleteObject
00018304                            ; ===========================================================================
00018304                            
00018304                            loc_1639A:
00018304 D040                       		add.w	d0,d0
00018306 0240 001E                  		andi.w	#$1E,d0
0001830A 0640 0080                  		addi.w	#$80,d0
0001830E 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00018314 D4F2 0000                  		adda.w	(a2,d0.w),a2
00018318 321A                       		move.w	(a2)+,d1
0001831A 2248                       		movea.l	a0,a1
0001831C 6000                       		bra.s	Obj6F_LoadPform
0001831E                            ; ===========================================================================
0001831E                            
0001831E                            Obj6F_Loop:
0001831E 4EB9 0000 F058             		jsr	SingleObjLoad
00018324 6600                       		bne.s	loc_163D0
00018326                            
00018326                            Obj6F_LoadPform:			; XREF: loc_1639A
00018326 12BC 006F                  		move.b	#$6F,0(a1)
0001832A 335A 0008                  		move.w	(a2)+,8(a1)
0001832E 335A 000C                  		move.w	(a2)+,$C(a1)
00018332 301A                       		move.w	(a2)+,d0
00018334 1340 0028                  		move.b	d0,$28(a1)
00018338                            
00018338                            loc_163D0:
00018338 51C9 FFE4                  		dbf	d1,Obj6F_Loop
0001833C                            
0001833C 588F                       		addq.l	#4,sp
0001833E 4E75                       		rts	
00018340                            ; ===========================================================================
00018340                            
00018340                            loc_163D8:				; XREF: Obj6F_Index
00018340 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00018346 4EB9 0000 B962             		jsr	AnimateSprite
0001834C 4A28 001A                  		tst.b	$1A(a0)
00018350 6600                       		bne.s	loc_16404
00018352 3F28 0008                  		move.w	8(a0),-(sp)
00018356 6100 0000                  		bsr.w	loc_16424
0001835A 323C 001B                  		move.w	#$1B,d1
0001835E 343C 0007                  		move.w	#7,d2
00018362 3602                       		move.w	d2,d3
00018364 5243                       		addq.w	#1,d3
00018366 381F                       		move.w	(sp)+,d4
00018368 6000 8F06                  		bra.w	SolidObject
0001836C                            ; ===========================================================================
0001836C                            
0001836C                            loc_16404:
0001836C 0828 0003 0022             		btst	#3,$22(a0)
00018372 6700                       		beq.s	loc_16420
00018374 43F8 D000                  		lea	($FFFFD000).w,a1
00018378 08A9 0003 0022             		bclr	#3,$22(a1)
0001837E 08A8 0003 0022             		bclr	#3,$22(a0)
00018384 4228 0025                  		clr.b	$25(a0)
00018388                            
00018388                            loc_16420:
00018388 6000 0002                  		bra.w	*+4
0001838C                            
0001838C                            loc_16424:
0001838C 3028 0008                  		move.w	8(a0),d0
00018390 B068 0034                  		cmp.w	$34(a0),d0
00018394 6600                       		bne.s	loc_16484
00018396 3028 000C                  		move.w	$C(a0),d0
0001839A B068 0036                  		cmp.w	$36(a0),d0
0001839E 6600                       		bne.s	loc_16484
000183A0 7200                       		moveq	#0,d1
000183A2 1228 0038                  		move.b	$38(a0),d1
000183A6 D228 003A                  		add.b	$3A(a0),d1
000183AA B228 0039                  		cmp.b	$39(a0),d1
000183AE 6500                       		bcs.s	loc_16456
000183B0 1001                       		move.b	d1,d0
000183B2 7200                       		moveq	#0,d1
000183B4 4A00                       		tst.b	d0
000183B6 6A00                       		bpl.s	loc_16456
000183B8 1228 0039                  		move.b	$39(a0),d1
000183BC 5901                       		subq.b	#4,d1
000183BE                            
000183BE                            loc_16456:
000183BE 1141 0038                  		move.b	d1,$38(a0)
000183C2 2268 003C                  		movea.l	$3C(a0),a1
000183C6 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000183CC 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000183D2 4A41                       		tst.w	d1
000183D4 6600                       		bne.s	loc_16474
000183D6 117C 0001 001C             		move.b	#1,$1C(a0)
000183DC                            
000183DC                            loc_16474:
000183DC 0C41 0008                  		cmpi.w	#8,d1
000183E0 6600                       		bne.s	loc_16480
000183E2 117C 0000 001C             		move.b	#0,$1C(a0)
000183E8                            
000183E8                            loc_16480:
000183E8 6100 BAA4                  		bsr.w	Obj63_ChangeDir
000183EC                            
000183EC                            loc_16484:
000183EC 4EF9 0000 E8E8             		jmp	SpeedToPos
000183F2                            ; ===========================================================================
000183F2                            Ani_obj6F:
000183F2                            	include "_anim\obj6F.asm"
000183F2                            ; ---------------------------------------------------------------------------
000183F2                            ; Animation script - platform on conveyor belt (SBZ)
000183F2                            ; ---------------------------------------------------------------------------
000183F2 0000                       		dc.w byte_1648E-Ani_obj6F
000183F4 0000                       		dc.w byte_164A2-Ani_obj6F
000183F6 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00018403 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
0001840A 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
0001840E 00                         		even
0001840E 00                         		even
0001840E                            
0001840E 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00018414 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001841A 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001842E 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00018442 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00018456 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001846A 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001847E 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00018492                            ; ===========================================================================
00018492                            ; ---------------------------------------------------------------------------
00018492                            ; Object 70 - large girder block (SBZ)
00018492                            ; ---------------------------------------------------------------------------
00018492                            
00018492                            Obj70:					; XREF: Obj_Index
00018492 7000                       		moveq	#0,d0
00018494 1028 0024                  		move.b	$24(a0),d0
00018498 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001849C 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
000184A0                            ; ===========================================================================
000184A0 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
000184A2 0000                       		dc.w Obj70_Action-Obj70_Index
000184A4                            ; ===========================================================================
000184A4                            
000184A4                            Obj70_Main:				; XREF: Obj70_Index
000184A4 5428 0024                  		addq.b	#2,$24(a0)
000184A8 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000184B0 317C 42F0 0002             		move.w	#$42F0,2(a0)
000184B6 0028 0004 0001             		ori.b	#4,1(a0)
000184BC 117C 0004 0018             		move.b	#4,$18(a0)
000184C2 117C 0060 0019             		move.b	#$60,$19(a0)
000184C8 117C 0018 0016             		move.b	#$18,$16(a0)
000184CE 3168 0008 0032             		move.w	8(a0),$32(a0)
000184D4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000184DA 6100 0000                  		bsr.w	Obj70_Move2
000184DE                            
000184DE                            Obj70_Action:				; XREF: Obj70_Index
000184DE 3F28 0008                  		move.w	8(a0),-(sp)
000184E2 4A68 003A                  		tst.w	$3A(a0)
000184E6 6700                       		beq.s	Obj70_Move
000184E8 5368 003A                  		subq.w	#1,$3A(a0)
000184EC 6600                       		bne.s	Obj70_Solid
000184EE                            
000184EE                            Obj70_Move:
000184EE 4EB9 0000 E8E8             		jsr	SpeedToPos
000184F4 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000184F8 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000184FA 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000184FE                            
000184FE                            Obj70_Solid:
000184FE 381F                       		move.w	(sp)+,d4
00018500 4A28 0001                  		tst.b	1(a0)
00018504 6A00                       		bpl.s	Obj70_ChkDel
00018506 7200                       		moveq	#0,d1
00018508 1228 0019                  		move.b	$19(a0),d1
0001850C 0641 000B                  		addi.w	#$B,d1
00018510 7400                       		moveq	#0,d2
00018512 1428 0016                  		move.b	$16(a0),d2
00018516 3602                       		move.w	d2,d3
00018518 5243                       		addq.w	#1,d3
0001851A 6100 8D54                  		bsr.w	SolidObject
0001851E                            
0001851E                            Obj70_ChkDel:
0001851E 3028 0032                  		move.w	$32(a0),d0
00018522 0240 FF80                  		andi.w	#$FF80,d0
00018526 3238 F700                  		move.w	($FFFFF700).w,d1
0001852A 0441 0080                  		subi.w	#$80,d1
0001852E 0241 FF80                  		andi.w	#$FF80,d1
00018532 9041                       		sub.w	d1,d0
00018534 0C40 0280                  		cmpi.w	#$280,d0
00018538 6300                       		bls.s	Obj70_NoDel
0001853A                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
0001853A                            	;	beq.s	Obj70_Delete		; if it's zero, don't remember object
0001853A                            	;	movea.w	d0,a2	; load address into a2
0001853A                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001853A 6000                       		bra.s	Obj70_Delete	; and delete object
0001853C                            
0001853C                            Obj70_NoDel:
0001853C 4EF9 0000 E902             		jmp	DisplaySprite
00018542                            ; ===========================================================================
00018542                            
00018542                            Obj70_Delete:
00018542 4EF9 0000 E952             		jmp	DeleteObject
00018548                            ; ===========================================================================
00018548                            
00018548                            Obj70_Move2:				; XREF: Obj70_Main
00018548 1028 0038                  		move.b	$38(a0),d0
0001854C 0240 0018                  		andi.w	#$18,d0
00018550 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00018556 43F1 0000                  		lea	(a1,d0.w),a1
0001855A 3159 0010                  		move.w	(a1)+,$10(a0)
0001855E 3159 0012                  		move.w	(a1)+,$12(a0)
00018562 3159 0034                  		move.w	(a1)+,$34(a0)
00018566 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
0001856A 317C 0007 003A             		move.w	#7,$3A(a0)
00018570 4E75                       		rts	
00018572                            ; ===========================================================================
00018572 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001857A 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00018582 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001858A 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00018592                            ; ---------------------------------------------------------------------------
00018592                            ; Sprite mappings - large girder block (SBZ)
00018592                            ; ---------------------------------------------------------------------------
00018592                            Map_obj70:
00018592                            	include "_maps\obj70.asm"
00018592                            ; ---------------------------------------------------------------------------
00018592                            ; Sprite mappings - large girder block (SBZ)
00018592                            ; ---------------------------------------------------------------------------
00018592 0000                       		dc.w byte_1662A-Map_obj70
00018594 0C                         byte_1662A:	dc.b $C
00018595 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001859A 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001859F E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000185A4 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000185A9 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000185AE 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000185B3 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000185B8 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000185BD E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000185C2 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000185C7 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000185CC 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000185D2 00                         		even
000185D2 00                         		even
000185D2                            
000185D2                            ; ===========================================================================
000185D2                            ; ---------------------------------------------------------------------------
000185D2                            ; Object 72 - teleporter (SBZ)
000185D2                            ; ---------------------------------------------------------------------------
000185D2                            
000185D2                            Obj72:					; XREF: Obj_Index
000185D2 7000                       		moveq	#0,d0
000185D4 1028 0024                  		move.b	$24(a0),d0
000185D8 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000185DC 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000185E0 3028 0008                  		move.w	8(a0),d0
000185E4 0240 FF80                  		andi.w	#$FF80,d0
000185E8 3238 F700                  		move.w	($FFFFF700).w,d1
000185EC 0441 0080                  		subi.w	#$80,d1
000185F0 0241 FF80                  		andi.w	#$FF80,d1
000185F4 9041                       		sub.w	d1,d0
000185F6 0C40 0280                  		cmpi.w	#$280,d0
000185FA 6300                       		bls.s	Obj72_NoDel
000185FC                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
000185FC                            	;	beq.s	Obj72_Delete	; if it's zero, don't remember object
000185FC                            	;	movea.w	d0,a2	; load address into a2
000185FC                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000185FC 6000                       		bra.s	Obj72_Delete	; and delete object
000185FE                            
000185FE                            Obj72_NoDel:
000185FE 4E75                       		rts	
00018600                            ; ===========================================================================
00018600                            
00018600                            Obj72_Delete:
00018600 4EF9 0000 E952             		jmp	DeleteObject
00018606                            ; ===========================================================================
00018606 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00018608 0000                       		dc.w loc_166C8-Obj72_Index
0001860A 0000                       		dc.w loc_1675E-Obj72_Index
0001860C 0000                       		dc.w loc_16798-Obj72_Index
0001860E                            ; ===========================================================================
0001860E                            
0001860E                            Obj72_Main:				; XREF: Obj72_Index
0001860E 5428 0024                  		addq.b	#2,$24(a0)
00018612 1028 0028                  		move.b	$28(a0),d0
00018616 D040                       		add.w	d0,d0
00018618 0240 001E                  		andi.w	#$1E,d0
0001861C 45FA 0000                  		lea	Obj72_Data(pc),a2
00018620 D4F2 0000                  		adda.w	(a2,d0.w),a2
00018624 315A 003A                  		move.w	(a2)+,$3A(a0)
00018628 214A 003C                  		move.l	a2,$3C(a0)
0001862C 315A 0036                  		move.w	(a2)+,$36(a0)
00018630 315A 0038                  		move.w	(a2)+,$38(a0)
00018634                            
00018634                            loc_166C8:				; XREF: Obj72_Index
00018634 43F8 D000                  		lea	($FFFFD000).w,a1
00018638 3029 0008                  		move.w	8(a1),d0
0001863C 9068 0008                  		sub.w	8(a0),d0
00018640 0828 0000 0022             		btst	#0,$22(a0)
00018646 6700                       		beq.s	loc_166E0
00018648 0640 000F                  		addi.w	#$F,d0
0001864C                            
0001864C                            loc_166E0:
0001864C 0C40 0010                  		cmpi.w	#$10,d0
00018650 6400                       		bcc.s	locret_1675C
00018652 3229 000C                  		move.w	$C(a1),d1
00018656 9268 000C                  		sub.w	$C(a0),d1
0001865A 0641 0020                  		addi.w	#$20,d1
0001865E 0C41 0040                  		cmpi.w	#$40,d1
00018662 6400                       		bcc.s	locret_1675C
00018664 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018668 6600                       		bne.s	locret_1675C
0001866A 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00018670 6600                       		bne.s	loc_1670E
00018672 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00018678 6500                       		bcs.s	locret_1675C
0001867A                            
0001867A                            loc_1670E:
0001867A 5428 0024                  		addq.b	#2,$24(a0)
0001867E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00018684 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001868A 337C 0800 0020             		move.w	#$800,$20(a1)
00018690 337C 0000 0010             		move.w	#0,$10(a1)
00018696 337C 0000 0012             		move.w	#0,$12(a1)
0001869C 08A8 0005 0022             		bclr	#5,$22(a0)
000186A2 08A9 0005 0022             		bclr	#5,$22(a1)
000186A8 08E9 0001 0022             		bset	#1,$22(a1)
000186AE 3368 0008 0008             		move.w	8(a0),8(a1)
000186B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000186BA 4228 0032                  		clr.b	$32(a0)
000186BE 303C 00BE                  		move.w	#$BE,d0
000186C2 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000186C8                            
000186C8                            locret_1675C:
000186C8 4E75                       		rts	
000186CA                            ; ===========================================================================
000186CA                            
000186CA                            loc_1675E:				; XREF: Obj72_Index
000186CA 43F8 D000                  		lea	($FFFFD000).w,a1
000186CE 1028 0032                  		move.b	$32(a0),d0
000186D2 5428 0032                  		addq.b	#2,$32(a0)
000186D6 4EB9 0000 29CC             		jsr	(CalcSine).l
000186DC EA40                       		asr.w	#5,d0
000186DE 3428 000C                  		move.w	$C(a0),d2
000186E2 9440                       		sub.w	d0,d2
000186E4 3342 000C                  		move.w	d2,$C(a1)
000186E8 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000186EE 6600                       		bne.s	locret_16796
000186F0 6100 0000                  		bsr.w	sub_1681C
000186F4 5428 0024                  		addq.b	#2,$24(a0)
000186F8 303C 00BC                  		move.w	#$BC,d0
000186FC 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play teleport sound
00018702                            
00018702                            locret_16796:
00018702 4E75                       		rts	
00018704                            ; ===========================================================================
00018704                            
00018704                            loc_16798:				; XREF: Obj72_Index
00018704 588F                       		addq.l	#4,sp
00018706 43F8 D000                  		lea	($FFFFD000).w,a1
0001870A 5328 002E                  		subq.b	#1,$2E(a0)
0001870E 6A00                       		bpl.s	loc_167DA
00018710 3368 0036 0008             		move.w	$36(a0),8(a1)
00018716 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001871C 7200                       		moveq	#0,d1
0001871E 1228 003A                  		move.b	$3A(a0),d1
00018722 5801                       		addq.b	#4,d1
00018724 B228 003B                  		cmp.b	$3B(a0),d1
00018728 6500                       		bcs.s	loc_167C2
0001872A 7200                       		moveq	#0,d1
0001872C 6000                       		bra.s	loc_16800
0001872E                            ; ===========================================================================
0001872E                            
0001872E                            loc_167C2:
0001872E 1141 003A                  		move.b	d1,$3A(a0)
00018732 2468 003C                  		movea.l	$3C(a0),a2
00018736 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001873C 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00018742 6000 0000                  		bra.w	sub_1681C
00018746                            ; ===========================================================================
00018746                            
00018746                            loc_167DA:
00018746 2429 0008                  		move.l	8(a1),d2
0001874A 2629 000C                  		move.l	$C(a1),d3
0001874E 3029 0010                  		move.w	$10(a1),d0
00018752 48C0                       		ext.l	d0
00018754 E180                       		asl.l	#8,d0
00018756 D480                       		add.l	d0,d2
00018758 3029 0012                  		move.w	$12(a1),d0
0001875C 48C0                       		ext.l	d0
0001875E E180                       		asl.l	#8,d0
00018760 D680                       		add.l	d0,d3
00018762 2342 0008                  		move.l	d2,8(a1)
00018766 2343 000C                  		move.l	d3,$C(a1)
0001876A 4E75                       		rts	
0001876C                            ; ===========================================================================
0001876C                            
0001876C                            loc_16800:
0001876C 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00018772 4228 0024                  		clr.b	$24(a0)
00018776 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001877A 337C 0000 0010             		move.w	#0,$10(a1)
00018780 337C 0200 0012             		move.w	#$200,$12(a1)
00018786 4E75                       		rts	
00018788                            
00018788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018788                            
00018788                            
00018788                            sub_1681C:
00018788 7000                       		moveq	#0,d0
0001878A 343C 1000                  		move.w	#$1000,d2
0001878E 3028 0036                  		move.w	$36(a0),d0
00018792 9069 0008                  		sub.w	8(a1),d0
00018796 6C00                       		bge.s	loc_16830
00018798 4440                       		neg.w	d0
0001879A 4442                       		neg.w	d2
0001879C                            
0001879C                            loc_16830:
0001879C 7200                       		moveq	#0,d1
0001879E 363C 1000                  		move.w	#$1000,d3
000187A2 3228 0038                  		move.w	$38(a0),d1
000187A6 9269 000C                  		sub.w	$C(a1),d1
000187AA 6C00                       		bge.s	loc_16844
000187AC 4441                       		neg.w	d1
000187AE 4443                       		neg.w	d3
000187B0                            
000187B0                            loc_16844:
000187B0 B240                       		cmp.w	d0,d1
000187B2 6500                       		bcs.s	loc_1687A
000187B4 7200                       		moveq	#0,d1
000187B6 3228 0038                  		move.w	$38(a0),d1
000187BA 9269 000C                  		sub.w	$C(a1),d1
000187BE 4841                       		swap	d1
000187C0 83C3                       		divs.w	d3,d1
000187C2 7000                       		moveq	#0,d0
000187C4 3028 0036                  		move.w	$36(a0),d0
000187C8 9069 0008                  		sub.w	8(a1),d0
000187CC 6700                       		beq.s	loc_16866
000187CE 4840                       		swap	d0
000187D0 81C1                       		divs.w	d1,d0
000187D2                            
000187D2                            loc_16866:
000187D2 3340 0010                  		move.w	d0,$10(a1)
000187D6 3343 0012                  		move.w	d3,$12(a1)
000187DA 4A41                       		tst.w	d1
000187DC 6A00                       		bpl.s	loc_16874
000187DE 4441                       		neg.w	d1
000187E0                            
000187E0                            loc_16874:
000187E0 3141 002E                  		move.w	d1,$2E(a0)
000187E4 4E75                       		rts	
000187E6                            ; ===========================================================================
000187E6                            
000187E6                            loc_1687A:
000187E6 7000                       		moveq	#0,d0
000187E8 3028 0036                  		move.w	$36(a0),d0
000187EC 9069 0008                  		sub.w	8(a1),d0
000187F0 4840                       		swap	d0
000187F2 81C2                       		divs.w	d2,d0
000187F4 7200                       		moveq	#0,d1
000187F6 3228 0038                  		move.w	$38(a0),d1
000187FA 9269 000C                  		sub.w	$C(a1),d1
000187FE 6700                       		beq.s	loc_16898
00018800 4841                       		swap	d1
00018802 83C0                       		divs.w	d0,d1
00018804                            
00018804                            loc_16898:
00018804 3341 0012                  		move.w	d1,$12(a1)
00018808 3342 0010                  		move.w	d2,$10(a1)
0001880C 4A40                       		tst.w	d0
0001880E 6A00                       		bpl.s	loc_168A6
00018810 4440                       		neg.w	d0
00018812                            
00018812                            loc_168A6:
00018812 3140 002E                  		move.w	d0,$2E(a0)
00018816 4E75                       		rts	
00018818                            ; End of function sub_1681C
00018818                            
00018818                            ; ===========================================================================
00018818 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
0001881E 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00018824 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00018828 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
0001882E 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00018834 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001883A 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00018840 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00018846 0884 0298 0894             		dc.w $884, $298, $894
0001884C 0270 0894 0190             		dc.w $270, $894, $190
00018852 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00018858 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
0001885E 1184 0498 1158             		dc.w $1184, $498, $1158
00018864 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001886A 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00018870 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00018876 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001887C 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00018882 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00018888 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001888E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00018894 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001889A 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000188A0                            ; ===========================================================================
000188A0                            ; ---------------------------------------------------------------------------
000188A0                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000188A0                            ; ---------------------------------------------------------------------------
000188A0                            
000188A0                            Obj78:					; XREF: Obj_Index
000188A0 7000                       		moveq	#0,d0
000188A2 1028 0024                  		move.b	$24(a0),d0
000188A6 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000188AA 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000188AE                            ; ===========================================================================
000188AE 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000188B0 0000                       		dc.w Obj78_Action-Obj78_Index
000188B2 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000188B4 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000188B6 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000188B8 0000                       		dc.w Obj78_Delete-Obj78_Index
000188BA 0000                       		dc.w loc_16CC0-Obj78_Index
000188BC                            ; ===========================================================================
000188BC                            
000188BC                            locret_16950:
000188BC 4E75                       		rts	
000188BE                            ; ===========================================================================
000188BE                            
000188BE                            Obj78_Main:				; XREF: Obj78_Index
000188BE 117C 0007 0016             		move.b	#7,$16(a0)
000188C4 117C 0008 0017             		move.b	#8,$17(a0)
000188CA 4EB9 0000 E8C8             		jsr	ObjectFall
000188D0 4EBA E4D6                  		jsr	ObjHitFloor
000188D4 4A41                       		tst.w	d1
000188D6 6AE4                       		bpl.s	locret_16950
000188D8 D368 000C                  		add.w	d1,$C(a0)
000188DC 4268 0012                  		clr.w	$12(a0)
000188E0 5428 0024                  		addq.b	#2,$24(a0)
000188E4 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000188EC 317C 22B0 0002             		move.w	#$22B0,2(a0)
000188F2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000188F8 6700                       		beq.s	loc_16996
000188FA 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00018900                            
00018900                            loc_16996:
00018900 0228 0003 0001             		andi.b	#3,1(a0)
00018906 0028 0004 0001             		ori.b	#4,1(a0)
0001890C 1168 0001 0022             		move.b	1(a0),$22(a0)
00018912 117C 0004 0018             		move.b	#4,$18(a0)
00018918 117C 0008 0019             		move.b	#8,$19(a0)
0001891E 117C 000B 0020             		move.b	#$B,$20(a0)
00018924 3428 0008                  		move.w	8(a0),d2
00018928 7A0C                       		moveq	#$C,d5
0001892A 0828 0000 0022             		btst	#0,$22(a0)
00018930 6700                       		beq.s	loc_169CA
00018932 4445                       		neg.w	d5
00018934                            
00018934                            loc_169CA:
00018934 1C3C 0004                  		move.b	#4,d6
00018938 7600                       		moveq	#0,d3
0001893A 7804                       		moveq	#4,d4
0001893C 2448                       		movea.l	a0,a2
0001893E 7202                       		moveq	#2,d1
00018940                            
00018940                            Obj78_LoadBody:
00018940 4EB9 0000 F06E             		jsr	SingleObjLoad2
00018946 6600                       		bne.s	Obj78_QuitLoad
00018948 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
0001894C 1346 0024                  		move.b	d6,$24(a1)
00018950 5406                       		addq.b	#2,d6
00018952 2368 0004 0004             		move.l	4(a0),4(a1)
00018958 3368 0002 0002             		move.w	2(a0),2(a1)
0001895E 137C 0005 0018             		move.b	#5,$18(a1)
00018964 137C 0008 0019             		move.b	#8,$19(a1)
0001896A 137C 00CB 0020             		move.b	#$CB,$20(a1)
00018970 D445                       		add.w	d5,d2
00018972 3342 0008                  		move.w	d2,8(a1)
00018976 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001897C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00018982 1368 0022 0001             		move.b	$22(a0),1(a1)
00018988 137C 0008 001A             		move.b	#8,$1A(a1)
0001898E 234A 003C                  		move.l	a2,$3C(a1)
00018992 1344 003C                  		move.b	d4,$3C(a1)
00018996 5804                       		addq.b	#4,d4
00018998 2449                       		movea.l	a1,a2
0001899A                            
0001899A                            Obj78_QuitLoad:
0001899A 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001899E                            
0001899E 117C 0007 002A             		move.b	#7,$2A(a0)
000189A4 4228 003C                  		clr.b	$3C(a0)
000189A8                            
000189A8                            Obj78_Action:				; XREF: Obj78_Index
000189A8 4A28 0022                  		tst.b	$22(a0)
000189AC 6B00 0000                  		bmi.w	loc_16C96
000189B0 7000                       		moveq	#0,d0
000189B2 1028 0025                  		move.b	$25(a0),d0
000189B6 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000189BA 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000189BE 1228 002B                  		move.b	$2B(a0),d1
000189C2 6A00                       		bpl.s	Obj78_Display
000189C4 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000189CA 1028 0026                  		move.b	$26(a0),d0
000189CE 0240 007F                  		andi.w	#$7F,d0
000189D2 5828 0026                  		addq.b	#4,$26(a0)
000189D6 1031 0000                  		move.b	(a1,d0.w),d0
000189DA 6A00                       		bpl.s	Obj78_AniHead
000189DC 08A8 0007 002B             		bclr	#7,$2B(a0)
000189E2 6000                       		bra.s	Obj78_Display
000189E4                            ; ===========================================================================
000189E4                            
000189E4                            Obj78_AniHead:
000189E4 0201 0010                  		andi.b	#$10,d1
000189E8 D001                       		add.b	d1,d0
000189EA 1140 001A                  		move.b	d0,$1A(a0)
000189EE                            
000189EE                            Obj78_Display:
000189EE 3028 0008                  		move.w	8(a0),d0
000189F2 0240 FF80                  		andi.w	#$FF80,d0
000189F6 3238 F700                  		move.w	($FFFFF700).w,d1
000189FA 0441 0080                  		subi.w	#$80,d1
000189FE 0241 FF80                  		andi.w	#$FF80,d1
00018A02 9041                       		sub.w	d1,d0
00018A04 0C40 0280                  		cmpi.w	#$280,d0
00018A08 6200 0000                  		bhi.w	Obj78_ChkGone
00018A0C 4EF9 0000 E902             		jmp	DisplaySprite
00018A12                            ; ===========================================================================
00018A12                            
00018A12                            Obj78_ChkGone:
00018A12 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018A16 6700                       		beq.s	loc_16ABC		; if it's zero, don't remember object
00018A18 3440                       		movea.w	d0,a2	; load address into a2
00018A1A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018A1E                            
00018A1E                            loc_16ABC:
00018A1E 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018A24 4E75                       		rts	
00018A26                            ; ===========================================================================
00018A26                            
00018A26                            Obj78_Delete:				; XREF: Obj78_Index
00018A26 4EF9 0000 E952             		jmp	DeleteObject
00018A2C                            ; ===========================================================================
00018A2C 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018A2E 0000                       		dc.w loc_16B02-Obj78_Index2
00018A30                            ; ===========================================================================
00018A30                            
00018A30                            Obj78_Move:				; XREF: Obj78_Index2
00018A30 5328 002A                  		subq.b	#1,$2A(a0)
00018A34 6B00                       		bmi.s	Obj78_Move2
00018A36 4E75                       		rts	
00018A38                            ; ===========================================================================
00018A38                            
00018A38                            Obj78_Move2:
00018A38 5428 0025                  		addq.b	#2,$25(a0)
00018A3C 117C 0010 002A             		move.b	#$10,$2A(a0)
00018A42 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018A48 317C 0040 001C             		move.w	#$40,$1C(a0)
00018A4E 0868 0004 002B             		bchg	#4,$2B(a0)
00018A54 6600                       		bne.s	loc_16AFC
00018A56 4268 0010                  		clr.w	$10(a0)
00018A5A 4468 001C                  		neg.w	$1C(a0)
00018A5E                            
00018A5E                            loc_16AFC:
00018A5E 08E8 0007 002B             		bset	#7,$2B(a0)
00018A64                            
00018A64                            loc_16B02:				; XREF: Obj78_Index2
00018A64 5328 002A                  		subq.b	#1,$2A(a0)
00018A68 6B00                       		bmi.s	loc_16B5E
00018A6A 2F28 0008                  		move.l	8(a0),-(sp)
00018A6E 2428 0008                  		move.l	8(a0),d2
00018A72 3028 0010                  		move.w	$10(a0),d0
00018A76 0828 0000 0022             		btst	#0,$22(a0)
00018A7C 6700                       		beq.s	loc_16B1E
00018A7E 4440                       		neg.w	d0
00018A80                            
00018A80                            loc_16B1E:
00018A80 48C0                       		ext.l	d0
00018A82 E180                       		asl.l	#8,d0
00018A84 D480                       		add.l	d0,d2
00018A86 2142 0008                  		move.l	d2,8(a0)
00018A8A 4EBA E31C                  		jsr	ObjHitFloor
00018A8E 241F                       		move.l	(sp)+,d2
00018A90 0C41 FFF8                  		cmpi.w	#-8,d1
00018A94 6D00                       		blt.s	loc_16B70
00018A96 0C41 000C                  		cmpi.w	#$C,d1
00018A9A 6C00                       		bge.s	loc_16B70
00018A9C D368 000C                  		add.w	d1,$C(a0)
00018AA0 4842                       		swap	d2
00018AA2 B468 0008                  		cmp.w	8(a0),d2
00018AA6 6700                       		beq.s	locret_16B5C
00018AA8 7000                       		moveq	#0,d0
00018AAA 1028 003C                  		move.b	$3C(a0),d0
00018AAE 5228 003C                  		addq.b	#1,$3C(a0)
00018AB2 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018AB8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018ABC                            
00018ABC                            locret_16B5C:
00018ABC 4E75                       		rts	
00018ABE                            ; ===========================================================================
00018ABE                            
00018ABE                            loc_16B5E:
00018ABE 5528 0025                  		subq.b	#2,$25(a0)
00018AC2 117C 0007 002A             		move.b	#7,$2A(a0)
00018AC8 317C 0000 0010             		move.w	#0,$10(a0)
00018ACE 4E75                       		rts	
00018AD0                            ; ===========================================================================
00018AD0                            
00018AD0                            loc_16B70:
00018AD0 2142 0008                  		move.l	d2,8(a0)
00018AD4 0868 0000 0022             		bchg	#0,$22(a0)
00018ADA 1168 0022 0001             		move.b	$22(a0),1(a0)
00018AE0 7000                       		moveq	#0,d0
00018AE2 1028 003C                  		move.b	$3C(a0),d0
00018AE6 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018AEC 5228 003C                  		addq.b	#1,$3C(a0)
00018AF0 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018AF6 4E75                       		rts	
00018AF8                            ; ===========================================================================
00018AF8                            
00018AF8                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018AF8 2268 003C                  		movea.l	$3C(a0),a1
00018AFC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018B02 6A00                       		bpl.s	Obj78_BodySeg1
00018B04 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018B0A 1028 0026                  		move.b	$26(a0),d0
00018B0E 0240 007F                  		andi.w	#$7F,d0
00018B12 5828 0026                  		addq.b	#4,$26(a0)
00018B16 4A31 0004                  		tst.b	4(a1,d0.w)
00018B1A 6A00                       		bpl.s	Obj78_AniBody
00018B1C 5828 0026                  		addq.b	#4,$26(a0)
00018B20                            
00018B20                            Obj78_AniBody:
00018B20 1031 0000                  		move.b	(a1,d0.w),d0
00018B24 5000                       		addq.b	#8,d0
00018B26 1140 001A                  		move.b	d0,$1A(a0)
00018B2A                            
00018B2A                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018B2A 2268 003C                  		movea.l	$3C(a0),a1
00018B2E 4A28 0022                  		tst.b	$22(a0)
00018B32 6B00 0000                  		bmi.w	loc_16C90
00018B36 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018B3C 1169 0025 0025             		move.b	$25(a1),$25(a0)
00018B42 6700 0000                  		beq.w	loc_16C64
00018B46 3169 001C 001C             		move.w	$1C(a1),$1C(a0)
00018B4C 3029 0010                  		move.w	$10(a1),d0
00018B50 D069 001C                  		add.w	$1C(a1),d0
00018B54 3140 0010                  		move.w	d0,$10(a0)
00018B58 2428 0008                  		move.l	8(a0),d2
00018B5C 2602                       		move.l	d2,d3
00018B5E 3028 0010                  		move.w	$10(a0),d0
00018B62 0828 0000 0022             		btst	#0,$22(a0)
00018B68 6700                       		beq.s	loc_16C0C
00018B6A 4440                       		neg.w	d0
00018B6C                            
00018B6C                            loc_16C0C:
00018B6C 48C0                       		ext.l	d0
00018B6E E180                       		asl.l	#8,d0
00018B70 D480                       		add.l	d0,d2
00018B72 2142 0008                  		move.l	d2,8(a0)
00018B76 4843                       		swap	d3
00018B78 B668 0008                  		cmp.w	8(a0),d3
00018B7C 6700                       		beq.s	loc_16C64
00018B7E 7000                       		moveq	#0,d0
00018B80 1028 003C                  		move.b	$3C(a0),d0
00018B84 1231 002C                  		move.b	$2C(a1,d0.w),d1
00018B88 0C01 0080                  		cmpi.b	#-$80,d1
00018B8C 6600                       		bne.s	loc_16C50
00018B8E 4843                       		swap	d3
00018B90 2143 0008                  		move.l	d3,8(a0)
00018B94 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018B98 0868 0000 0022             		bchg	#0,$22(a0)
00018B9E 1168 0022 0001             		move.b	$22(a0),1(a0)
00018BA4 5228 003C                  		addq.b	#1,$3C(a0)
00018BA8 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018BAE 6000                       		bra.s	loc_16C64
00018BB0                            ; ===========================================================================
00018BB0                            
00018BB0                            loc_16C50:
00018BB0 4881                       		ext.w	d1
00018BB2 D368 000C                  		add.w	d1,$C(a0)
00018BB6 5228 003C                  		addq.b	#1,$3C(a0)
00018BBA 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018BC0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018BC4                            
00018BC4                            loc_16C64:
00018BC4 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018BCA 6700                       		beq.s	loc_16C90
00018BCC 0C11 0027                  		cmpi.b	#$27,0(a1)
00018BD0 6700                       		beq.s	loc_16C7C
00018BD2 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018BD8 6600                       		bne.s	loc_16C82
00018BDA                            
00018BDA                            loc_16C7C:
00018BDA 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018BDE 117C 000A 0024             		move.b	#$A,$24(a0)
00018BE4                            
00018BE4                            loc_16C82:
00018BE4 4EF9 0000 E902             		jmp	DisplaySprite
00018BEA                            
00018BEA                            ; ===========================================================================
00018BEA FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018BF2                            ; ===========================================================================
00018BF2                            
00018BF2                            loc_16C90:
00018BF2 08E9 0007 0022             		bset	#7,$22(a1)
00018BF8                            
00018BF8                            loc_16C96:
00018BF8 7000                       		moveq	#0,d0
00018BFA 1028 0024                  		move.b	$24(a0),d0
00018BFE 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018C02 0828 0000 0022             		btst	#0,$22(a0)
00018C08 6700                       		beq.s	loc_16CAA
00018C0A 4440                       		neg.w	d0
00018C0C                            
00018C0C                            loc_16CAA:
00018C0C 3140 0010                  		move.w	d0,$10(a0)
00018C10 317C FC00 0012             		move.w	#-$400,$12(a0)
00018C16 117C 000C 0024             		move.b	#$C,$24(a0)
00018C1C 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018C22                            
00018C22                            loc_16CC0:				; XREF: Obj78_Index
00018C22 4EB9 0000 E8C8             		jsr	ObjectFall
00018C28 4A68 0012                  		tst.w	$12(a0)
00018C2C 6B00                       		bmi.s	loc_16CE0
00018C2E 4EBA E178                  		jsr	ObjHitFloor
00018C32 4A41                       		tst.w	d1
00018C34 6A00                       		bpl.s	loc_16CE0
00018C36 D368 000C                  		add.w	d1,$C(a0)
00018C3A 317C FC00 0012             		move.w	#-$400,$12(a0)
00018C40                            
00018C40                            loc_16CE0:
00018C40 4A28 0001                  		tst.b	1(a0)
00018C44 6A00 FDCC                  		bpl.w	Obj78_ChkGone
00018C48 4EF9 0000 E902             		jmp	DisplaySprite
00018C4E                            ; ===========================================================================
00018C4E                            Ani_obj78:
00018C4E                            	include "_anim\obj78.asm"
00018C4E                            ; ---------------------------------------------------------------------------
00018C4E                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018C4E                            ; ---------------------------------------------------------------------------
00018C4E 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018C5E 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018C6E 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018C7E 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018C8E 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018C9E 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018CAE 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018CBE 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018CCE                            	even
00018CCE                            	even
00018CCE                            
00018CCE                            ; ---------------------------------------------------------------------------
00018CCE                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018CCE                            ; ---------------------------------------------------------------------------
00018CCE                            Map_obj78:
00018CCE                            	include "_maps\obj78.asm"
00018CCE                            ; ---------------------------------------------------------------------------
00018CCE                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018CCE                            ; ---------------------------------------------------------------------------
00018CCE 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018CD2 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018CD6 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018CDA 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018CDE 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018CE2 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018CE6 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018CEA 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018CEE 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018CF2 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018CF6 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018CFA 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018CFE 01                         byte_16D9E:	dc.b 1
00018CFF F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018D04 01                         byte_16DA4:	dc.b 1
00018D05 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018D0A 01                         byte_16DAA:	dc.b 1
00018D0B F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018D10 01                         byte_16DB0:	dc.b 1
00018D11 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018D16 01                         byte_16DB6:	dc.b 1
00018D17 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018D1C 01                         byte_16DBC:	dc.b 1
00018D1D ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018D22 01                         byte_16DC2:	dc.b 1
00018D23 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018D28 01                         byte_16DC8:	dc.b 1
00018D29 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018D2E 01                         byte_16DCE:	dc.b 1
00018D2F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018D34 01                         byte_16DD4:	dc.b 1
00018D35 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018D3A 01                         byte_16DDA:	dc.b 1
00018D3B F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018D40 01                         byte_16DE0:	dc.b 1
00018D41 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018D46 01                         byte_16DE6:	dc.b 1
00018D47 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018D4C 01                         byte_16DEC:	dc.b 1
00018D4D F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018D52 01                         byte_16DF2:	dc.b 1
00018D53 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018D58 01                         byte_16DF8:	dc.b 1
00018D59 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018D5E 01                         byte_16DFE:	dc.b 1
00018D5F F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018D64 01                         byte_16E04:	dc.b 1
00018D65 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018D6A 01                         byte_16E0A:	dc.b 1
00018D6B F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018D70 01                         byte_16E10:	dc.b 1
00018D71 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018D76 01                         byte_16E16:	dc.b 1
00018D77 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018D7C 01                         byte_16E1C:	dc.b 1
00018D7D ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00018D82 01                         byte_16E22:	dc.b 1
00018D83 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018D88 01                         byte_16E28:	dc.b 1
00018D89 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018D8E                            		even
00018D8E                            		even
00018D8E                            
00018D8E                            ; ===========================================================================
00018D8E                            ; ---------------------------------------------------------------------------
00018D8E                            ; Object 79 - lamppost
00018D8E                            ; ---------------------------------------------------------------------------
00018D8E                            
00018D8E                            Obj79:					; XREF: Obj_Index
00018D8E 7000                       		moveq	#0,d0
00018D90 1028 0024                  		move.b	$24(a0),d0
00018D94 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018D98 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018D9C 4EFA 81AE                  		jmp	MarkObjGone
00018DA0                            ; ===========================================================================
00018DA0 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018DA2 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018DA4 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018DA6 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018DA8                            ; ===========================================================================
00018DA8                            
00018DA8                            Obj79_Main:				; XREF: Obj79_Index
00018DA8 5428 0024                  		addq.b	#2,$24(a0)
00018DAC 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018DB4 317C 0571 0002             		move.w	#lamppostart,2(a0)
00018DBA 117C 0004 0001             		move.b	#4,1(a0)
00018DC0 117C 0008 0019             		move.b	#8,$19(a0)
00018DC6 117C 0005 0018             		move.b	#5,$18(a0)
00018DCC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018DD0 3440                       		movea.w	d0,a2	; load address into a2
00018DD2 0812 0000                  		btst	#0,(a2)
00018DD6 6600                       		bne.s	Obj79_RedLamp
00018DD8 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018DDC 0201 007F                  		andi.b	#$7F,d1
00018DE0 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018DE4 0202 007F                  		andi.b	#$7F,d2
00018DE8 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018DEA 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018DEC                            
00018DEC                            Obj79_RedLamp:
00018DEC 08D2 0000                  		bset	#0,(a2)
00018DF0 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018DF6 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018DFC 4E75                       		rts	
00018DFE                            ; ===========================================================================
00018DFE                            
00018DFE                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018DFE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018E02 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018E06 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018E0A 6B00 0000                  		bmi.w	locret_16F90
00018E0E 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018E12 0201 007F                  		andi.b	#$7F,d1
00018E16 1428 0028                  		move.b	$28(a0),d2
00018E1A 0202 007F                  		andi.b	#$7F,d2
00018E1E B202                       		cmp.b	d2,d1
00018E20 6500                       		bcs.s	Obj79_HitLamp
00018E22 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018E26 3440                       		movea.w	d0,a2	; load address into a2
00018E28 08D2 0000                  		bset	#0,(a2)
00018E2C 117C 0004 0024             		move.b	#4,$24(a0)
00018E32 117C 0003 001A             		move.b	#3,$1A(a0)
00018E38 6000 0000                  		bra.w	locret_16F90
00018E3C                            ; ===========================================================================
00018E3C                            
00018E3C                            Obj79_HitLamp:
00018E3C 3038 D008                  		move.w	($FFFFD008).w,d0
00018E40 9068 0008                  		sub.w	8(a0),d0
00018E44 5040                       		addq.w	#8,d0
00018E46 0C40 0010                  		cmpi.w	#$10,d0
00018E4A 6400 0000                  		bcc.w	locret_16F90
00018E4E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018E52 9068 000C                  		sub.w	$C(a0),d0
00018E56 0640 0040                  		addi.w	#$40,d0
00018E5A 0C40 0068                  		cmpi.w	#$68,d0
00018E5E 6400                       		bcc.s	locret_16F90
00018E60 303C 00A1                  		move.w	#$A1,d0
00018E64 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lamppost sound
00018E6A 5428 0024                  		addq.b	#2,$24(a0)
00018E6E 4EB9 0000 F058             		jsr	SingleObjLoad
00018E74 6600                       		bne.s	loc_16F76
00018E76 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018E7A 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018E80 3368 0008 0030             		move.w	8(a0),$30(a1)
00018E86 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018E8C 0469 0018 0032             		subi.w	#$18,$32(a1)
00018E92 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018E9A 337C 0571 0002             		move.w	#lamppostart,2(a1)
00018EA0 137C 0004 0001             		move.b	#4,1(a1)
00018EA6 137C 0008 0019             		move.b	#8,$19(a1)
00018EAC 137C 0004 0018             		move.b	#4,$18(a1)
00018EB2 137C 0002 001A             		move.b	#2,$1A(a1)
00018EB8 337C 0020 0036             		move.w	#$20,$36(a1)
00018EBE                            
00018EBE                            loc_16F76:
00018EBE 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018EC4 6100 0000                  		bsr.w	Obj79_StoreInfo
00018EC8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018ECC 3440                       		movea.w	d0,a2	; load address into a2
00018ECE 08D2 0000                  		bset	#0,(a2)
00018ED2                            
00018ED2                            locret_16F90:
00018ED2 4E75                       		rts	
00018ED4                            ; ===========================================================================
00018ED4                            
00018ED4                            Obj79_AfterHit:				; XREF: Obj79_Index
00018ED4 4E75                       		rts	
00018ED6                            ; ===========================================================================
00018ED6                            
00018ED6                            Obj79_Twirl:				; XREF: Obj79_Index
00018ED6 5368 0036                  		subq.w	#1,$36(a0)
00018EDA 6A00                       		bpl.s	loc_16FA0
00018EDC 117C 0004 0024             		move.b	#4,$24(a0)
00018EE2                            
00018EE2                            loc_16FA0:
00018EE2 1028 0026                  		move.b	$26(a0),d0
00018EE6 0428 0010 0026             		subi.b	#$10,$26(a0)
00018EEC 0400 0040                  		subi.b	#$40,d0
00018EF0 4EB9 0000 29CC             		jsr	(CalcSine).l
00018EF6 C3FC 0C00                  		muls.w	#$C00,d1
00018EFA 4841                       		swap	d1
00018EFC D268 0030                  		add.w	$30(a0),d1
00018F00 3141 0008                  		move.w	d1,8(a0)
00018F04 C1FC 0C00                  		muls.w	#$C00,d0
00018F08 4840                       		swap	d0
00018F0A D068 0032                  		add.w	$32(a0),d0
00018F0E 3140 000C                  		move.w	d0,$C(a0)
00018F12 4E75                       		rts	
00018F14                            ; ===========================================================================
00018F14                            ; ---------------------------------------------------------------------------
00018F14                            ; Subroutine to	store information when you hit a lamppost
00018F14                            ; ---------------------------------------------------------------------------
00018F14                            
00018F14                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00018F14 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00018F1A 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00018F20 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00018F26 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00018F2C 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00018F32 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00018F38 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00018F3E 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00018F44 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00018F4A 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00018F50 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00018F56 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00018F5C 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00018F62 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00018F68 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00018F6E 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00018F74 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00018F7A 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00018F80 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00018F86 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00018F8C 4E75                       		rts	
00018F8E                            
00018F8E                            ; ---------------------------------------------------------------------------
00018F8E                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00018F8E                            ; ---------------------------------------------------------------------------
00018F8E                            
00018F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018F8E                            
00018F8E                            
00018F8E                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00018F8E 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00018F94 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00018F9A 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018FA0 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00018FA6 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00018FAC 4278 FE20                  		clr.w	($FFFFFE20).w
00018FB0 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018FB4 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018FBA 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018FC0 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018FC4 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018FCA 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018FD0 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018FD6 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00018FDC 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018FE2 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00018FE8 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00018FEE 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00018FF4 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00018FFA 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00019000 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00019006 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001900C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00019012 6600                       		bne.s	loc_170E4
00019014 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001901A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00019020 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00019026                            
00019026                            loc_170E4:
00019026 4A38 FE30                  		tst.b	($FFFFFE30).w
0001902A 6A00                       		bpl.s	locret_170F6
0001902C 3038 FE32                  		move.w	($FFFFFE32).w,d0
00019030 0440 00A0                  		subi.w	#$A0,d0
00019034 31C0 F728                  		move.w	d0,($FFFFF728).w
00019038                            
00019038                            locret_170F6:
00019038 4E75                       		rts	
0001903A                            ; End of function Obj79_LoadInfo
0001903A                            
0001903A                            ; ===========================================================================
0001903A                            ; ---------------------------------------------------------------------------
0001903A                            ; Sprite mappings - lamppost
0001903A                            ; ---------------------------------------------------------------------------
0001903A                            Map_obj79:
0001903A                            	include "_maps\obj79.asm"
0001903A                            ; ---------------------------------------------------------------------------
0001903A                            ; Sprite mappings - lamppost
0001903A                            ; ---------------------------------------------------------------------------
0001903A 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001903E 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00019042 06                         byte_17100:	dc.b 6
00019043 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019048 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001904D F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019052 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00019057 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
0001905C D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00019061 04                         byte_1711F:	dc.b 4
00019062 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019067 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001906C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019071 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00019076 02                         byte_17134:	dc.b 2
00019077 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001907C F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00019081 06                         byte_1713F:	dc.b 6
00019082 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019087 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001908C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019091 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00019096 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
0001909B D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000190A0                            		even
000190A0                            		even
000190A0                            
000190A0                            ; ===========================================================================
000190A0                            ; ---------------------------------------------------------------------------
000190A0                            ; Object 7D - hidden points at the end of a level
000190A0                            ; ---------------------------------------------------------------------------
000190A0                            
000190A0                            Obj7D:					; XREF: Obj_Index
000190A0 7000                       		moveq	#0,d0
000190A2 1028 0024                  		move.b	$24(a0),d0
000190A6 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000190AA 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000190AE                            ; ===========================================================================
000190AE 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000190B0 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000190B2                            ; ===========================================================================
000190B2                            
000190B2                            Obj7D_Main:				; XREF: Obj7D_Index
000190B2 7410                       		moveq	#$10,d2
000190B4 3602                       		move.w	d2,d3
000190B6 D643                       		add.w	d3,d3
000190B8 43F8 D000                  		lea	($FFFFD000).w,a1
000190BC 3029 0008                  		move.w	8(a1),d0
000190C0 9068 0008                  		sub.w	8(a0),d0
000190C4 D042                       		add.w	d2,d0
000190C6 B043                       		cmp.w	d3,d0
000190C8 6400                       		bcc.s	Obj7D_ChkDel
000190CA 3229 000C                  		move.w	$C(a1),d1
000190CE 9268 000C                  		sub.w	$C(a0),d1
000190D2 D242                       		add.w	d2,d1
000190D4 B243                       		cmp.w	d3,d1
000190D6 6400                       		bcc.s	Obj7D_ChkDel
000190D8 4A78 FE08                  		tst.w	($FFFFFE08).w
000190DC 6600                       		bne.s	Obj7D_ChkDel
000190DE 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000190E2 6600                       		bne.s	Obj7D_ChkDel
000190E4 5428 0024                  		addq.b	#2,$24(a0)
000190E8 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000190F0 317C 84B6 0002             		move.w	#$84B6,2(a0)
000190F6 0028 0004 0001             		ori.b	#4,1(a0)
000190FC 117C 0000 0018             		move.b	#0,$18(a0)
00019102 117C 0010 0019             		move.b	#$10,$19(a0)
00019108 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001910E 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00019114 303C 00C9                  		move.w	#$C9,d0
00019118 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play bonus sound
0001911E 7000                       		moveq	#0,d0
00019120 1028 0028                  		move.b	$28(a0),d0
00019124 D040                       		add.w	d0,d0
00019126 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
0001912A 4EB9 0000 0000             		jsr	AddPoints
00019130                            
00019130                            Obj7D_ChkDel:
00019130 3028 0008                  		move.w	8(a0),d0
00019134 0240 FF80                  		andi.w	#$FF80,d0
00019138 3238 F700                  		move.w	($FFFFF700).w,d1
0001913C 0441 0080                  		subi.w	#$80,d1
00019140 0241 FF80                  		andi.w	#$FF80,d1
00019144 9041                       		sub.w	d1,d0
00019146 0C40 0280                  		cmpi.w	#$280,d0
0001914A 6300                       		bls.s	Obj7D_NoDel
0001914C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00019150 6700                       		beq.s	Obj7D_Delete		; if it's zero, don't remember object
00019152 3440                       		movea.w	d0,a2	; load address into a2
00019154 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00019158 6000                       		bra.s	Obj7D_Delete	; and delete object
0001915A                            
0001915A                            Obj7D_NoDel:
0001915A 4E75                       		rts	
0001915C                            ; ===========================================================================
0001915C                            
0001915C                            Obj7D_Delete:
0001915C 4EF9 0000 E952             		jmp	DeleteObject
00019162                            ; ===========================================================================
00019162 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00019164 03E8                       		dc.w 1000		; earn 1000*10 points for revealing 10000 object
00019166 0064                       		dc.w 100		; earn 100*10 points for revealing 1000 object
00019168 000A                       		dc.w 10			; earn 10*10 points for revealing 100 object
0001916A                            ; ===========================================================================
0001916A                            
0001916A                            Obj7D_DelayDel:				; XREF: Obj7D_Index
0001916A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001916E 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00019170 3028 0008                  		move.w	8(a0),d0
00019174 0240 FF80                  		andi.w	#-$80,d0
00019178 3238 F700                  		move.w	($FFFFF700).w,d1
0001917C 0441 0080                  		subi.w	#$80,d1
00019180 0241 FF80                  		andi.w	#-$80,d1
00019184 9041                       		sub.w	d1,d0
00019186 0C40 0280                  		cmpi.w	#$280,d0
0001918A 6200                       		bhi.s	Obj7D_Delete2
0001918C 4EF9 0000 E902             		jmp	DisplaySprite
00019192                            ; ===========================================================================
00019192                            
00019192                            Obj7D_Delete2:
00019192 4EF9 0000 E952             		jmp	DeleteObject
00019198                            ; ===========================================================================
00019198                            ; ---------------------------------------------------------------------------
00019198                            ; Sprite mappings - hidden points at the end of	a level
00019198                            ; ---------------------------------------------------------------------------
00019198                            Map_obj7D:
00019198                            	include "_maps\obj7D.asm"
00019198                            ; ---------------------------------------------------------------------------
00019198                            ; Sprite mappings - hidden points at the end of	a level
00019198                            ; ---------------------------------------------------------------------------
00019198 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001919C 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000191A0 00                         byte_17250:	dc.b 0
000191A1 01                         byte_17251:	dc.b 1
000191A2 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000191A7 01                         byte_17257:	dc.b 1
000191A8 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000191AD 01                         byte_1725D:	dc.b 1
000191AE F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
000191B4 00                         		even
000191B4 00                         		even
000191B4                            
000191B4                            ; ===========================================================================
000191B4                            ; ---------------------------------------------------------------------------
000191B4                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
000191B4                            ; ---------------------------------------------------------------------------
000191B4                            
000191B4                            Obj8A:					; XREF: Obj_Index
000191B4 7000                       		moveq	#0,d0
000191B6 1028 0024                  		move.b	$24(a0),d0
000191BA 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000191BE 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000191C2                            ; ===========================================================================
000191C2 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000191C4 0000                       		dc.w Obj8A_Display-Obj8A_Index
000191C6                            ; ===========================================================================
000191C6                            
000191C6                            Obj8A_Main:				; XREF: Obj8A_Index
000191C6 5428 0024                  		addq.b	#2,$24(a0)
000191CA 317C 0120 0008             		move.w	#$120,8(a0)
000191D0 317C 00F0 000A             		move.w	#$F0,$A(a0)
000191D6 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000191DE 317C 25A0 0002             		move.w	#$25A0,2(a0)
000191E4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000191E8 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000191EC 117C 0000 0001             		move.b	#0,1(a0)
000191F2 117C 0000 0018             		move.b	#0,$18(a0)
000191F8 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000191FE 6600                       		bne.s	Obj8A_Display	; if not, branch
00019200 317C 20A6 0002             		move.w	#$20A6,2(a0)
00019206 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
0001920C 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00019210 6700                       		beq.s	Obj8A_Display	; if not, branch
00019212 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00019218 6600                       		bne.s	Obj8A_Display	; if not, branch
0001921A 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00019220 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00019226 4EF9 0000 E952             		jmp	DeleteObject
0001922C                            ; ===========================================================================
0001922C                            
0001922C                            Obj8A_Display:				; XREF: Obj8A_Index
0001922C 4EF9 0000 E902             		jmp	DisplaySprite
00019232                            ; ===========================================================================
00019232                            ; ---------------------------------------------------------------------------
00019232                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00019232                            ; ---------------------------------------------------------------------------
00019232                            Map_obj8A:
00019232                            	include "_maps\obj8A.asm"
00019232                            ; ---------------------------------------------------------------------------
00019232                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00019232                            ; ---------------------------------------------------------------------------
00019232 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00019236 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
0001923A 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
0001923E 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00019242 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00019246 0000                       		dc.w byte_176A9-Map_obj8A
00019248 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00019249 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001924E F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00019253 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00019258 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001925D F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00019262 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00019267 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001926C F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00019271 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00019276 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001927B F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00019280 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00019285 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001928A F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001928F 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00019290 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00019295 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
0001929A D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
0001929F D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
000192A4 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
000192A9 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
000192AE D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
000192B3 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
000192B8 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
000192BD 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
000192C2 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
000192C7 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
000192CC 0805 0016 08               		dc.b 8,	5, 0, $16, 8
000192D1 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
000192D6 0805 0004 30               		dc.b 8,	5, 0, 4, $30
000192DB 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
000192E0 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
000192E1 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
000192E6 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
000192EB D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
000192F0 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
000192F5 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
000192FA D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
000192FF D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00019304 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00019309 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
0001930E 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00019313 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00019314 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00019319 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
0001931E D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00019323 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00019328 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
0001932D D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00019332 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00019337 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
0001933C D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00019341 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00019346 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
0001934B D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00019350 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00019355 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
0001935A D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
0001935F 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00019364 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00019369 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
0001936E 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00019373 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00019378 0805 0016 00               		dc.b 8,	5, 0, $16, 0
0001937D 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00019382 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00019387 0805 0042 30               		dc.b 8,	5, 0, $42, $30
0001938C 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
0001938D D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00019392 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00019397 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
0001939C D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
000193A1 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
000193A6 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
000193AB 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
000193B0 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
000193B5 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
000193BA 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
000193BF 0005 0004 24               		dc.b 0,	5, 0, 4, $24
000193C4 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
000193C9 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
000193CE 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
000193D3 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
000193D8 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
000193DD 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
000193E2 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
000193E7 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
000193EC 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
000193F1 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
000193F2 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
000193F7 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
000193FC D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00019401 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00019406 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
0001940B D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00019410 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00019415 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
0001941A D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
0001941F D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00019424 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00019429 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
0001942E 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00019433 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00019438 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
0001943D 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00019442 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00019447 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
0001944C 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00019451 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00019456 0805 0058 18               		dc.b 8,	5, 0, $58, $18
0001945B 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00019460 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00019465 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
0001946A 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
0001946F 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00019474 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00019475 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001947A D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001947F D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00019484 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00019489 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001948E D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00019493 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00019498 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001949D D005 0000 28               		dc.b $D0, 5, 0,	0, $28
000194A2 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
000194A7 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
000194AC D009 0008 58               		dc.b $D0, 9, 0,	8, $58
000194B1 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000194B6 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000194BB 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
000194C0 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
000194C5 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
000194CA 0005 0004 14               		dc.b 0,	5, 0, 4, $14
000194CF 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
000194D4 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
000194D9 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
000194DE 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
000194E3 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
000194E8 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
000194E9 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
000194EE D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
000194F3 D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
000194F8 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
000194FD D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
00019502 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00019507 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
0001950C D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00019511 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00019516 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
0001951B D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00019520 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
00019525 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
0001952A 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
0001952F 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00019534 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00019539 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001953E 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00019543 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00019548 0001 0046 14               		dc.b 0,	1, 0, $46, $14
0001954D 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00019552 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00019557 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
0001955C 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00019561 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00019566 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
0001956B 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00019570 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00019575 2005 0004 08               		dc.b $20, 5, 0,	4, 8
0001957A 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
0001957F 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00019584 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00019585 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
0001958A F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
0001958F F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00019594 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00019599 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
0001959E F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
000195A3 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
000195A8 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
000195AD F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
000195B2 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
000195B7 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
000195BC F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
000195C1 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
000195C6 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
000195CB F805 0004 70               		dc.b $F8, 5, 0,	4, $70
000195D0 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
000195D1 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
000195D6 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
000195DB 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
000195E0 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
000195E5 3005 0000 08               		dc.b $30, 5, 0,	0, 8
000195EA 3005 0004 18               		dc.b $30, 5, 0,	4, $18
000195EF 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
000195F4 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
000195F9 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
000195FA E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
000195FF E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
00019604 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
00019609 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
0001960E E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
00019613 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00019618 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
0001961D E805 0004 24               		dc.b $E8, 5, 0,	4, $24
00019622 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
00019627 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
0001962C 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
00019631 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
00019636 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
0001963B 0005 000E 00               		dc.b 0,	5, 0, $E, 0
00019640 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
00019645 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
0001964A 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
00019650 00                         		even
00019650 00                         		even
00019650                            
00019650                            ; ===========================================================================
00019650                            ; ---------------------------------------------------------------------------
00019650                            ; Object 3D - Eggman (GHZ)
00019650                            ; ---------------------------------------------------------------------------
00019650                            
00019650                            Obj3D:					; XREF: Obj_Index
00019650 7000                       		moveq	#0,d0
00019652 1028 0024                  		move.b	$24(a0),d0
00019656 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001965A 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001965E                            ; ===========================================================================
0001965E 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00019660 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00019662 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00019664 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00019666                            
00019666 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00019668 0401                       		dc.b 4,	1
0001966A 0607                       		dc.b 6,	7
0001966C                            ; ===========================================================================
0001966C                            
0001966C                            Obj3D_Main:				; XREF: Obj3D_Index
0001966C 45F9 0001 9666             		lea	(Obj3D_ObjData).l,a2
00019672 2248                       		movea.l	a0,a1
00019674 7202                       		moveq	#2,d1
00019676 6000                       		bra.s	Obj3D_LoadBoss
00019678                            ; ===========================================================================
00019678                            
00019678                            Obj3D_Loop:
00019678 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001967E 6600                       		bne.s	loc_17772
00019680                            
00019680                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00019680 135A 0024                  		move.b	(a2)+,$24(a1)
00019684 12BC 003D                  		move.b	#$3D,0(a1)
00019688 3368 0008 0008             		move.w	8(a0),8(a1)
0001968E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019694 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001969C 337C 0400 0002             		move.w	#$400,2(a1)
000196A2 137C 0004 0001             		move.b	#4,1(a1)
000196A8 137C 0020 0019             		move.b	#$20,$19(a1)
000196AE 137C 0003 0018             		move.b	#3,$18(a1)
000196B4 135A 001C                  		move.b	(a2)+,$1C(a1)
000196B8 2348 0034                  		move.l	a0,$34(a1)
000196BC 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000196C0                            
000196C0                            loc_17772:
000196C0 3168 0008 0030             		move.w	8(a0),$30(a0)
000196C6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000196CC 117C 000F 0020             		move.b	#$F,$20(a0)
000196D2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000196D8                            
000196D8                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000196D8 7000                       		moveq	#0,d0
000196DA 1028 0025                  		move.b	$25(a0),d0
000196DE 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000196E2 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000196E6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000196EC 4EB9 0000 B962             		jsr	AnimateSprite
000196F2 1028 0022                  		move.b	$22(a0),d0
000196F6 0200 0003                  		andi.b	#3,d0
000196FA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019700 8128 0001                  		or.b	d0,1(a0)
00019704 4EF9 0000 E902             		jmp	DisplaySprite
0001970A                            ; ===========================================================================
0001970A 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
0001970C 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001970E 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00019710 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00019712 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00019714 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00019716 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00019718                            ; ===========================================================================
00019718                            
00019718                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00019718 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0001971E 6100 0000                  		bsr.w	BossMove
00019722 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00019728 6600                       		bne.s	loc_177E6
0001972A 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00019730 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00019734                            
00019734                            loc_177E6:
00019734 1028 003F                  		move.b	$3F(a0),d0
00019738 4EB9 0000 29CC             		jsr	(CalcSine).l
0001973E EC40                       		asr.w	#6,d0
00019740 D068 0038                  		add.w	$38(a0),d0
00019744 3140 000C                  		move.w	d0,$C(a0)
00019748 3168 0030 0008             		move.w	$30(a0),8(a0)
0001974E 5428 003F                  		addq.b	#2,$3F(a0)
00019752 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00019758 6400                       		bcc.s	locret_1784A
0001975A 4A28 0022                  		tst.b	$22(a0)
0001975E 6B00                       		bmi.s	loc_1784C
00019760 4A28 0020                  		tst.b	$20(a0)
00019764 6600                       		bne.s	locret_1784A
00019766 4A28 003E                  		tst.b	$3E(a0)
0001976A 6600                       		bne.s	Obj3D_ShipFlash
0001976C 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00019772 303C 00AC                  		move.w	#$AC,d0
00019776 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001977C                            
0001977C                            Obj3D_ShipFlash:
0001977C 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00019780 7000                       		moveq	#0,d0		; move 0 (black) to d0
00019782 4A51                       		tst.w	(a1)
00019784 6600                       		bne.s	loc_1783C
00019786 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001978A                            
0001978A                            loc_1783C:
0001978A 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001978C 5328 003E                  		subq.b	#1,$3E(a0)
00019790 6600                       		bne.s	locret_1784A
00019792 117C 000F 0020             		move.b	#$F,$20(a0)
00019798                            
00019798                            locret_1784A:
00019798 4E75                       		rts	
0001979A                            ; ===========================================================================
0001979A                            
0001979A                            loc_1784C:				; XREF: loc_177E6
0001979A 7064                       		moveq	#100,d0
0001979C 6100 0000                  		bsr.w	AddPoints
000197A0 117C 0008 0025             		move.b	#8,$25(a0)
000197A6 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000197AC 4E75                       		rts	
000197AE                            
000197AE                            ; ---------------------------------------------------------------------------
000197AE                            ; Defeated boss	subroutine
000197AE                            ; ---------------------------------------------------------------------------
000197AE                            
000197AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000197AE                            
000197AE                            
000197AE                            BossDefeated:
000197AE 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
000197B4 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
000197BA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000197BE 0200 0007                  		andi.b	#7,d0
000197C2 6600                       		bne.s	locret_178A2
000197C4 4EB9 0000 F058             		jsr	SingleObjLoad
000197CA 6600                       		bne.s	locret_178A2
000197CC 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000197D0 3368 0008 0008             		move.w	8(a0),8(a1)
000197D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000197DC 4EB9 0000 29A6             		jsr	(RandomNumber).l
000197E2 3200                       		move.w	d0,d1
000197E4 7200                       		moveq	#0,d1
000197E6 1200                       		move.b	d0,d1
000197E8 E409                       		lsr.b	#2,d1
000197EA 0441 0020                  		subi.w	#$20,d1
000197EE D369 0008                  		add.w	d1,8(a1)
000197F2 E048                       		lsr.w	#8,d0
000197F4 E608                       		lsr.b	#3,d0
000197F6 D169 000C                  		add.w	d0,$C(a1)
000197FA                            
000197FA                            locret_178A2:
000197FA 4E75                       		rts	
000197FC                            ; End of function BossDefeated
000197FC                            
000197FC                            ; ---------------------------------------------------------------------------
000197FC                            ; Subroutine to	move a boss
000197FC                            ; ---------------------------------------------------------------------------
000197FC                            
000197FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000197FC                            
000197FC                            
000197FC                            BossMove:
000197FC 2428 0030                  		move.l	$30(a0),d2
00019800 2628 0038                  		move.l	$38(a0),d3
00019804 3028 0010                  		move.w	$10(a0),d0
00019808 48C0                       		ext.l	d0
0001980A E180                       		asl.l	#8,d0
0001980C D480                       		add.l	d0,d2
0001980E 3028 0012                  		move.w	$12(a0),d0
00019812 48C0                       		ext.l	d0
00019814 E180                       		asl.l	#8,d0
00019816 D680                       		add.l	d0,d3
00019818 2142 0030                  		move.l	d2,$30(a0)
0001981C 2143 0038                  		move.l	d3,$38(a0)
00019820 4E75                       		rts	
00019822                            ; End of function BossMove
00019822                            
00019822                            ; ===========================================================================
00019822                            
00019822                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00019822 317C FF00 0010             		move.w	#-$100,$10(a0)
00019828 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001982E 6100 FFCC                  		bsr.w	BossMove
00019832 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019838 6600                       		bne.s	loc_17916
0001983A 317C 0000 0010             		move.w	#0,$10(a0)
00019840 317C 0000 0012             		move.w	#0,$12(a0)
00019846 5428 0025                  		addq.b	#2,$25(a0)
0001984A 4EB9 0000 F06E             		jsr	SingleObjLoad2
00019850 6600                       		bne.s	loc_17910
00019852 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00019856 3368 0030 0008             		move.w	$30(a0),8(a1)
0001985C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019862 2348 0034                  		move.l	a0,$34(a1)
00019866                            
00019866                            loc_17910:
00019866 317C 0077 003C             		move.w	#$77,$3C(a0)
0001986C                            
0001986C                            loc_17916:
0001986C 6000 FEC6                  		bra.w	loc_177E6
00019870                            ; ===========================================================================
00019870                            
00019870                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00019870 5368 003C                  		subq.w	#1,$3C(a0)
00019874 6A00                       		bpl.s	Obj3D_Reverse
00019876 5428 0025                  		addq.b	#2,$25(a0)
0001987A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019880 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00019886 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001988C 6600                       		bne.s	Obj3D_Reverse
0001988E 317C 007F 003C             		move.w	#$7F,$3C(a0)
00019894 317C 0040 0010             		move.w	#$40,$10(a0)
0001989A                            
0001989A                            Obj3D_Reverse:
0001989A 0828 0000 0022             		btst	#0,$22(a0)
000198A0 6600                       		bne.s	loc_17950
000198A2 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
000198A6                            
000198A6                            loc_17950:
000198A6 6000 FE8C                  		bra.w	loc_177E6
000198AA                            ; ===========================================================================
000198AA                            
000198AA                            loc_17954:				; XREF: Obj3D_ShipIndex
000198AA 5368 003C                  		subq.w	#1,$3C(a0)
000198AE 6B00                       		bmi.s	loc_17960
000198B0 6100 FF4A                  		bsr.w	BossMove
000198B4 6000                       		bra.s	loc_17976
000198B6                            ; ===========================================================================
000198B6                            
000198B6                            loc_17960:
000198B6 0868 0000 0022             		bchg	#0,$22(a0)
000198BC 317C 003F 003C             		move.w	#$3F,$3C(a0)
000198C2 5528 0025                  		subq.b	#2,$25(a0)
000198C6 317C 0000 0010             		move.w	#0,$10(a0)
000198CC                            
000198CC                            loc_17976:
000198CC 6000 FE66                  		bra.w	loc_177E6
000198D0                            ; ===========================================================================
000198D0                            
000198D0                            loc_1797A:				; XREF: Obj3D_ShipIndex
000198D0 5368 003C                  		subq.w	#1,$3C(a0)
000198D4 6B00                       		bmi.s	loc_17984
000198D6 6000 FED6                  		bra.w	BossDefeated
000198DA                            ; ===========================================================================
000198DA                            
000198DA                            loc_17984:
000198DA 08E8 0000 0022             		bset	#0,$22(a0)
000198E0 08A8 0007 0022             		bclr	#7,$22(a0)
000198E6 4268 0010                  		clr.w	$10(a0)
000198EA 5428 0025                  		addq.b	#2,$25(a0)
000198EE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000198F4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000198F8 6600                       		bne.s	locret_179AA
000198FA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019900                            
00019900                            locret_179AA:
00019900 4E75                       		rts	
00019902                            ; ===========================================================================
00019902                            
00019902                            loc_179AC:				; XREF: Obj3D_ShipIndex
00019902 5268 003C                  		addq.w	#1,$3C(a0)
00019906 6700                       		beq.s	loc_179BC
00019908 6A00                       		bpl.s	loc_179C2
0001990A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019910 6000                       		bra.s	loc_179EE
00019912                            ; ===========================================================================
00019912                            
00019912                            loc_179BC:
00019912 4268 0012                  		clr.w	$12(a0)
00019916 6000                       		bra.s	loc_179EE
00019918                            ; ===========================================================================
00019918                            
00019918                            loc_179C2:
00019918 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001991E 6500                       		bcs.s	loc_179DA
00019920 6700                       		beq.s	loc_179E0
00019922 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019928 6500                       		bcs.s	loc_179EE
0001992A 5428 0025                  		addq.b	#2,$25(a0)
0001992E 6000                       		bra.s	loc_179EE
00019930                            ; ===========================================================================
00019930                            
00019930                            loc_179DA:
00019930 5168 0012                  		subq.w	#8,$12(a0)
00019934 6000                       		bra.s	loc_179EE
00019936                            ; ===========================================================================
00019936                            
00019936                            loc_179E0:
00019936 4268 0012                  		clr.w	$12(a0)
0001993A 303C 0081                  		move.w	#$81,d0
0001993E 4EB9 0000 11F0             		jsr	(PlaySound).l	; play GHZ music
00019944                            
00019944                            loc_179EE:
00019944 6100 FEB6                  		bsr.w	BossMove
00019948 6000 FDEA                  		bra.w	loc_177E6
0001994C                            ; ===========================================================================
0001994C                            
0001994C                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001994C 317C 0400 0010             		move.w	#$400,$10(a0)
00019952 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019958 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001995E 6700                       		beq.s	loc_17A10
00019960 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019964 6000                       		bra.s	loc_17A16
00019966                            ; ===========================================================================
00019966                            
00019966                            loc_17A10:
00019966 4A28 0001                  		tst.b	1(a0)
0001996A 6A00                       		bpl.s	Obj3D_ShipDel
0001996C                            
0001996C                            loc_17A16:
0001996C 6100 FE8E                  		bsr.w	BossMove
00019970 6000 FDC2                  		bra.w	loc_177E6
00019974                            ; ===========================================================================
00019974                            
00019974                            Obj3D_ShipDel:
00019974 4EF9 0000 E952             		jmp	DeleteObject
0001997A                            ; ===========================================================================
0001997A                            
0001997A                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001997A 7000                       		moveq	#0,d0
0001997C 7201                       		moveq	#1,d1
0001997E 2268 0034                  		movea.l	$34(a0),a1
00019982 1029 0025                  		move.b	$25(a1),d0
00019986 5900                       		subq.b	#4,d0
00019988 6600                       		bne.s	loc_17A3E
0001998A 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00019990 6600                       		bne.s	loc_17A46
00019992 7204                       		moveq	#4,d1
00019994                            
00019994                            loc_17A3E:
00019994 5D00                       		subq.b	#6,d0
00019996 6B00                       		bmi.s	loc_17A46
00019998 720A                       		moveq	#$A,d1
0001999A 6000                       		bra.s	loc_17A5A
0001999C                            ; ===========================================================================
0001999C                            
0001999C                            loc_17A46:
0001999C 4A29 0020                  		tst.b	$20(a1)
000199A0 6600                       		bne.s	loc_17A50
000199A2 7205                       		moveq	#5,d1
000199A4 6000                       		bra.s	loc_17A5A
000199A6                            ; ===========================================================================
000199A6                            
000199A6                            loc_17A50:
000199A6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000199AC 6500                       		bcs.s	loc_17A5A
000199AE 7204                       		moveq	#4,d1
000199B0                            
000199B0                            loc_17A5A:
000199B0 1141 001C                  		move.b	d1,$1C(a0)
000199B4 5500                       		subq.b	#2,d0
000199B6 6600                       		bne.s	Obj3D_FaceDisp
000199B8 117C 0006 001C             		move.b	#6,$1C(a0)
000199BE 4A28 0001                  		tst.b	1(a0)
000199C2 6A00                       		bpl.s	Obj3D_FaceDel
000199C4                            
000199C4                            Obj3D_FaceDisp:
000199C4 6000                       		bra.s	Obj3D_Display
000199C6                            ; ===========================================================================
000199C6                            
000199C6                            Obj3D_FaceDel:
000199C6 4EF9 0000 E952             		jmp	DeleteObject
000199CC                            ; ===========================================================================
000199CC                            
000199CC                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000199CC 117C 0007 001C             		move.b	#7,$1C(a0)
000199D2 2268 0034                  		movea.l	$34(a0),a1
000199D6 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000199DC 6600                       		bne.s	loc_17A96
000199DE 117C 000B 001C             		move.b	#$B,$1C(a0)
000199E4 4A28 0001                  		tst.b	1(a0)
000199E8 6A00                       		bpl.s	Obj3D_FlameDel
000199EA 6000                       		bra.s	Obj3D_FlameDisp
000199EC                            ; ===========================================================================
000199EC                            
000199EC                            loc_17A96:
000199EC 3029 0010                  		move.w	$10(a1),d0
000199F0 6700                       		beq.s	Obj3D_FlameDisp
000199F2 117C 0008 001C             		move.b	#8,$1C(a0)
000199F8                            
000199F8                            Obj3D_FlameDisp:
000199F8 6000                       		bra.s	Obj3D_Display
000199FA                            ; ===========================================================================
000199FA                            
000199FA                            Obj3D_FlameDel:
000199FA 4EF9 0000 E952             		jmp	DeleteObject
00019A00                            ; ===========================================================================
00019A00                            
00019A00                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019A00 2268 0034                  		movea.l	$34(a0),a1
00019A04 3169 0008 0008             		move.w	8(a1),8(a0)
00019A0A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019A10 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019A16 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019A1C 4EB9 0000 B962             		jsr	AnimateSprite
00019A22 1028 0022                  		move.b	$22(a0),d0
00019A26 0200 0003                  		andi.b	#3,d0
00019A2A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019A30 8128 0001                  		or.b	d0,1(a0)
00019A34 4EF9 0000 E902             		jmp	DisplaySprite
00019A3A                            ; ===========================================================================
00019A3A                            ; ---------------------------------------------------------------------------
00019A3A                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019A3A                            ; ---------------------------------------------------------------------------
00019A3A                            
00019A3A                            Obj48:					; XREF: Obj_Index
00019A3A 7000                       		moveq	#0,d0
00019A3C 1028 0024                  		move.b	$24(a0),d0
00019A40 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019A44 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00019A48                            ; ===========================================================================
00019A48 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019A4A 0000                       		dc.w Obj48_Base-Obj48_Index
00019A4C 0000                       		dc.w Obj48_Display2-Obj48_Index
00019A4E 0000                       		dc.w loc_17C68-Obj48_Index
00019A50 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019A52                            ; ===========================================================================
00019A52                            
00019A52                            Obj48_Main:				; XREF: Obj48_Index
00019A52 5428 0024                  		addq.b	#2,$24(a0)
00019A56 317C 4080 0026             		move.w	#$4080,$26(a0)
00019A5C 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019A62 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00019A6A 317C 046C 0002             		move.w	#$46C,2(a0)
00019A70 45E8 0028                  		lea	$28(a0),a2
00019A74 14FC 0000                  		move.b	#0,(a2)+
00019A78 7205                       		moveq	#5,d1
00019A7A 2248                       		movea.l	a0,a1
00019A7C 6000                       		bra.s	loc_17B60
00019A7E                            ; ===========================================================================
00019A7E                            
00019A7E                            Obj48_MakeLinks:
00019A7E 4EB9 0000 F06E             		jsr	SingleObjLoad2
00019A84 6600                       		bne.s	Obj48_MakeBall
00019A86 3368 0008 0008             		move.w	8(a0),8(a1)
00019A8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019A92 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00019A96 137C 0006 0024             		move.b	#6,$24(a1)
00019A9C 237C 0000 8D66 0004        		move.l	#Map_obj15,4(a1)
00019AA4 337C 0380 0002             		move.w	#$380,2(a1)
00019AAA 137C 0001 001A             		move.b	#1,$1A(a1)
00019AB0 5228 0028                  		addq.b	#1,$28(a0)
00019AB4                            
00019AB4                            loc_17B60:				; XREF: Obj48_Main
00019AB4 3A09                       		move.w	a1,d5
00019AB6 0445 D000                  		subi.w	#$D000,d5
00019ABA EC4D                       		lsr.w	#6,d5
00019ABC 0245 007F                  		andi.w	#$7F,d5
00019AC0 14C5                       		move.b	d5,(a2)+
00019AC2 137C 0004 0001             		move.b	#4,1(a1)
00019AC8 137C 0008 0019             		move.b	#8,$19(a1)
00019ACE 137C 0006 0018             		move.b	#6,$18(a1)
00019AD4 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019ADA 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019ADE                            
00019ADE                            Obj48_MakeBall:
00019ADE 137C 0008 0024             		move.b	#8,$24(a1)
00019AE4 237C 0000 92DE 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019AEC 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019AF2 137C 0001 001A             		move.b	#1,$1A(a1)
00019AF8 137C 0005 0018             		move.b	#5,$18(a1)
00019AFE 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019B04 4E75                       		rts	
00019B06                            ; ===========================================================================
00019B06                            
00019B06 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019B0C                            
00019B0C                            ; ===========================================================================
00019B0C                            
00019B0C                            Obj48_Base:				; XREF: Obj48_Index
00019B0C 47F9 0001 9B06             		lea	(Obj48_PosData).l,a3
00019B12 45E8 0028                  		lea	$28(a0),a2
00019B16 7C00                       		moveq	#0,d6
00019B18 1C1A                       		move.b	(a2)+,d6
00019B1A                            
00019B1A                            loc_17BC6:
00019B1A 7800                       		moveq	#0,d4
00019B1C 181A                       		move.b	(a2)+,d4
00019B1E ED4C                       		lsl.w	#6,d4
00019B20 0684 00FF D000             		addi.l	#$FFD000,d4
00019B26 2244                       		movea.l	d4,a1
00019B28 101B                       		move.b	(a3)+,d0
00019B2A B029 003C                  		cmp.b	$3C(a1),d0
00019B2E 6700                       		beq.s	loc_17BE0
00019B30 5229 003C                  		addq.b	#1,$3C(a1)
00019B34                            
00019B34                            loc_17BE0:
00019B34 51CE FFE4                  		dbf	d6,loc_17BC6
00019B38                            
00019B38 B029 003C                  		cmp.b	$3C(a1),d0
00019B3C 6600                       		bne.s	loc_17BFA
00019B3E 2268 0034                  		movea.l	$34(a0),a1
00019B42 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019B48 6600                       		bne.s	loc_17BFA
00019B4A 5428 0024                  		addq.b	#2,$24(a0)
00019B4E                            
00019B4E                            loc_17BFA:
00019B4E 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019B54 6700                       		beq.s	Obj48_Display
00019B56 5268 0032                  		addq.w	#1,$32(a0)
00019B5A                            
00019B5A                            Obj48_Display:
00019B5A 6100 0000                  		bsr.w	sub_17C2A
00019B5E 1028 0026                  		move.b	$26(a0),d0
00019B62 4EB9 0000 8CCC             		jsr	(Obj15_Move2).l
00019B68 4EF9 0000 E902             		jmp	DisplaySprite
00019B6E                            ; ===========================================================================
00019B6E                            
00019B6E                            Obj48_Display2:				; XREF: Obj48_Index
00019B6E 6100 0000                  		bsr.w	sub_17C2A
00019B72 4EB9 0000 8C8C             		jsr	(Obj48_Move).l
00019B78 4EF9 0000 E902             		jmp	DisplaySprite
00019B7E                            
00019B7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B7E                            
00019B7E                            
00019B7E                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00019B7E 2268 0034                  		movea.l	$34(a0),a1
00019B82 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019B88 6400                       		bcc.s	loc_17C3C
00019B8A 0868 0000 001A             		bchg	#0,$1A(a0)
00019B90                            
00019B90                            loc_17C3C:
00019B90 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019B96 3029 000C                  		move.w	$C(a1),d0
00019B9A D068 0032                  		add.w	$32(a0),d0
00019B9E 3140 0038                  		move.w	d0,$38(a0)
00019BA2 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BA8 4A29 0022                  		tst.b	$22(a1)
00019BAC 6A00                       		bpl.s	locret_17C66
00019BAE 10BC 003F                  		move.b	#$3F,0(a0)
00019BB2 117C 0000 0024             		move.b	#0,$24(a0)
00019BB8                            
00019BB8                            locret_17C66:
00019BB8 4E75                       		rts	
00019BBA                            ; End of function sub_17C2A
00019BBA                            
00019BBA                            ; ===========================================================================
00019BBA                            
00019BBA                            loc_17C68:				; XREF: Obj48_Index
00019BBA 2268 0034                  		movea.l	$34(a0),a1
00019BBE 4A29 0022                  		tst.b	$22(a1)
00019BC2 6A00                       		bpl.s	Obj48_Display3
00019BC4 10BC 003F                  		move.b	#$3F,0(a0)
00019BC8 117C 0000 0024             		move.b	#0,$24(a0)
00019BCE                            
00019BCE                            Obj48_Display3:
00019BCE 4EF9 0000 E902             		jmp	DisplaySprite
00019BD4                            ; ===========================================================================
00019BD4                            
00019BD4                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019BD4 7000                       		moveq	#0,d0
00019BD6 4A28 001A                  		tst.b	$1A(a0)
00019BDA 6600                       		bne.s	Obj48_Vanish
00019BDC 5200                       		addq.b	#1,d0
00019BDE                            
00019BDE                            Obj48_Vanish:
00019BDE 1140 001A                  		move.b	d0,$1A(a0)
00019BE2 2268 0034                  		movea.l	$34(a0),a1
00019BE6 4A29 0022                  		tst.b	$22(a1)
00019BEA 6A00                       		bpl.s	Obj48_Display4
00019BEC 117C 0000 0020             		move.b	#0,$20(a0)
00019BF2 6100 FBBA                  		bsr.w	BossDefeated
00019BF6 5328 003C                  		subq.b	#1,$3C(a0)
00019BFA 6A00                       		bpl.s	Obj48_Display4
00019BFC 10BC 003F                  		move.b	#$3F,(a0)
00019C00 117C 0000 0024             		move.b	#0,$24(a0)
00019C06                            
00019C06                            Obj48_Display4:
00019C06 4EF9 0000 E902             		jmp	DisplaySprite
00019C0C                            ; ===========================================================================
00019C0C                            Ani_Eggman:
00019C0C                            	include "_anim\Eggman.asm"
00019C0C                            ; ---------------------------------------------------------------------------
00019C0C                            ; Animation script - Eggman (bosses)
00019C0C                            ; ---------------------------------------------------------------------------
00019C0C 0000                       		dc.w byte_17CD4-Ani_Eggman
00019C0E 0000                       		dc.w byte_17CD8-Ani_Eggman
00019C10 0000                       		dc.w byte_17CDC-Ani_Eggman
00019C12 0000                       		dc.w byte_17CE0-Ani_Eggman
00019C14 0000                       		dc.w byte_17CE4-Ani_Eggman
00019C16 0000                       		dc.w byte_17CE8-Ani_Eggman
00019C18 0000                       		dc.w byte_17CEC-Ani_Eggman
00019C1A 0000                       		dc.w byte_17CF0-Ani_Eggman
00019C1C 0000                       		dc.w byte_17CF4-Ani_Eggman
00019C1E 0000                       		dc.w byte_17CF8-Ani_Eggman
00019C20 0000                       		dc.w byte_17CFC-Ani_Eggman
00019C22 0000                       		dc.w byte_17D00-Ani_Eggman
00019C24 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019C28 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019C2C 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019C30 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019C34 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019C38 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019C3C 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019C40 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019C44 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019C48 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019C4C 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019C50 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019C5C                            		even
00019C5C                            		even
00019C5C                            
00019C5C                            ; ---------------------------------------------------------------------------
00019C5C                            ; Sprite mappings - Eggman (boss levels)
00019C5C                            ; ---------------------------------------------------------------------------
00019C5C                            Map_Eggman:
00019C5C                            	include "_maps\Eggman.asm"
00019C5C                            ; ---------------------------------------------------------------------------
00019C5C                            ; Sprite mappings - Eggman (boss levels)
00019C5C                            ; ---------------------------------------------------------------------------
00019C5C 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019C60 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019C64 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019C68 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019C6C 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019C70 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019C74 0000                       		dc.w byte_17DC8-Map_Eggman
00019C76 06                         byte_17D26:	dc.b 6
00019C77 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019C7C EC01 000E 14               		dc.b $EC, 1, 0,	$E, $14
00019C81 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019C86 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019C8B 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019C90 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019C95 02                         byte_17D45:	dc.b 2
00019C96 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019C9B EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019CA0 02                         byte_17D50:	dc.b 2
00019CA1 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019CA6 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019CAB 03                         byte_17D5B:	dc.b 3
00019CAC E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019CB1 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019CB6 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019CBB 03                         byte_17D6B:	dc.b 3
00019CBC E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019CC1 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019CC6 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019CCB 03                         byte_17D7B:	dc.b 3
00019CCC E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019CD1 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019CD6 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019CDB 03                         byte_17D8B:	dc.b 3
00019CDC E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019CE1 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019CE6 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019CEB 04                         byte_17D9B:	dc.b 4
00019CEC E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019CF1 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019CF6 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019CFB EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019D00 01                         byte_17DB0:	dc.b 1
00019D01 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019D06 01                         byte_17DB6:	dc.b 1
00019D07 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019D0C 00                         byte_17DBC:	dc.b 0
00019D0D 02                         byte_17DBD:	dc.b 2
00019D0E 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019D13 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019D18 02                         byte_17DC8:	dc.b 2
00019D19 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019D1E 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019D24 00                         		even
00019D24 00                         		even
00019D24                            
00019D24                            ; ---------------------------------------------------------------------------
00019D24                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019D24                            ; ---------------------------------------------------------------------------
00019D24                            Map_BossItems:
00019D24                            	include "_maps\Boss items.asm"
00019D24                            ; ---------------------------------------------------------------------------
00019D24                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019D24                            ; ---------------------------------------------------------------------------
00019D24 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019D28 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019D2C 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019D30 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019D34 01                         byte_17DE4:	dc.b 1
00019D35 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019D3A 02                         byte_17DEA:	dc.b 2
00019D3B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019D40 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019D45 00                         		dc.b 0
00019D46 01                         byte_17DF6:	dc.b 1
00019D47 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019D4C 01                         byte_17DFC:	dc.b 1
00019D4D 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019D52 01                         byte_17E02:	dc.b 1
00019D53 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019D58 04                         byte_17E08:	dc.b 4
00019D59 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019D5E F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019D63 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019D68 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019D6D 00                         		dc.b 0
00019D6E 02                         byte_17E1E:	dc.b 2
00019D6F 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019D74 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019D79 00                         		dc.b 0
00019D7A 02                         byte_17E2A:	dc.b 2
00019D7B 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00019D80 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019D86 00                         		even
00019D86 00                         		even
00019D86                            
00019D86                            ; ===========================================================================
00019D86                            ; ---------------------------------------------------------------------------
00019D86                            ; Object 77 - Eggman (LZ)
00019D86                            ; ---------------------------------------------------------------------------
00019D86                            
00019D86                            Obj77:					; XREF: Obj_Index
00019D86 7000                       		moveq	#0,d0
00019D88 1028 0024                  		move.b	$24(a0),d0
00019D8C 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019D90 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019D94                            ; ===========================================================================
00019D94 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019D96 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019D98 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019D9A 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00019D9C                            
00019D9C 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019D9E 0401                       		dc.b 4,	1
00019DA0 0607                       		dc.b 6,	7
00019DA2                            ; ===========================================================================
00019DA2                            
00019DA2                            Obj77_Main:				; XREF: Obj77_Index
00019DA2 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019DA8 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019DAE 3168 0008 0030             		move.w	8(a0),$30(a0)
00019DB4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019DBA 117C 000F 0020             		move.b	#$F,$20(a0)
00019DC0 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019DC6 117C 0004 0018             		move.b	#4,$18(a0)
00019DCC 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019DD0 2248                       		movea.l	a0,a1
00019DD2 7202                       		moveq	#2,d1
00019DD4 6000                       		bra.s	Obj77_LoadBoss
00019DD6                            ; ===========================================================================
00019DD6                            
00019DD6                            Obj77_Loop:
00019DD6 4EB9 0000 F06E             		jsr	SingleObjLoad2
00019DDC 6600                       		bne.s	Obj77_ShipMain
00019DDE 12BC 0077                  		move.b	#$77,0(a1)
00019DE2 3368 0008 0008             		move.w	8(a0),8(a1)
00019DE8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019DEE                            
00019DEE                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019DEE 08A8 0000 0022             		bclr	#0,$22(a0)
00019DF4 4229 0025                  		clr.b	$25(a1)
00019DF8 135A 0024                  		move.b	(a2)+,$24(a1)
00019DFC 135A 001C                  		move.b	(a2)+,$1C(a1)
00019E00 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019E06 237C 0001 9C5C 0004        		move.l	#Map_Eggman,4(a1)
00019E0E 337C 0400 0002             		move.w	#$400,2(a1)
00019E14 137C 0004 0001             		move.b	#4,1(a1)
00019E1A 137C 0020 0019             		move.b	#$20,$19(a1)
00019E20 2348 0034                  		move.l	a0,$34(a1)
00019E24 51C9 FFB0                  		dbf	d1,Obj77_Loop
00019E28                            
00019E28                            Obj77_ShipMain:
00019E28 43F8 D000                  		lea	($FFFFD000).w,a1
00019E2C 7000                       		moveq	#0,d0
00019E2E 1028 0025                  		move.b	$25(a0),d0
00019E32 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00019E36 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00019E3A 43F9 0001 9C0C             		lea	(Ani_Eggman).l,a1
00019E40 4EB9 0000 B962             		jsr	AnimateSprite
00019E46 7003                       		moveq	#3,d0
00019E48 C028 0022                  		and.b	$22(a0),d0
00019E4C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019E52 8128 0001                  		or.b	d0,1(a0)
00019E56 4EF9 0000 E902             		jmp	DisplaySprite
00019E5C                            ; ===========================================================================
00019E5C 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00019E60 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00019E64 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00019E68 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00019E6C                            ; ===========================================================================
00019E6C                            
00019E6C                            loc_17F1E:				; XREF: Obj77_ShipIndex
00019E6C 3029 0008                  		move.w	8(a1),d0
00019E70 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00019E74 6500                       		bcs.s	loc_17F38
00019E76 317C FE80 0012             		move.w	#-$180,$12(a0)
00019E7C 317C 0060 0010             		move.w	#$60,$10(a0)
00019E82 5428 0025                  		addq.b	#2,$25(a0)
00019E86                            
00019E86                            loc_17F38:
00019E86 6100 F974                  		bsr.w	BossMove
00019E8A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019E90 3168 0030 0008             		move.w	$30(a0),8(a0)
00019E96                            
00019E96                            loc_17F48:
00019E96 4A28 003D                  		tst.b	$3D(a0)
00019E9A 6600                       		bne.s	loc_17F8E
00019E9C 4A28 0022                  		tst.b	$22(a0)
00019EA0 6B00                       		bmi.s	loc_17F92
00019EA2 4A28 0020                  		tst.b	$20(a0)
00019EA6 6600                       		bne.s	locret_17F8C
00019EA8 4A28 003E                  		tst.b	$3E(a0)
00019EAC 6600                       		bne.s	loc_17F70
00019EAE 117C 0020 003E             		move.b	#$20,$3E(a0)
00019EB4 303C 00AC                  		move.w	#$AC,d0
00019EB8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l
00019EBE                            
00019EBE                            loc_17F70:
00019EBE 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019EC2 7000                       		moveq	#0,d0
00019EC4 4A51                       		tst.w	(a1)
00019EC6 6600                       		bne.s	loc_17F7E
00019EC8 303C 0EEE                  		move.w	#$EEE,d0
00019ECC                            
00019ECC                            loc_17F7E:
00019ECC 3280                       		move.w	d0,(a1)
00019ECE 5328 003E                  		subq.b	#1,$3E(a0)
00019ED2 6600                       		bne.s	locret_17F8C
00019ED4 117C 000F 0020             		move.b	#$F,$20(a0)
00019EDA                            
00019EDA                            locret_17F8C:
00019EDA 4E75                       		rts	
00019EDC                            ; ===========================================================================
00019EDC                            
00019EDC                            loc_17F8E:				; XREF: loc_17F48
00019EDC 6000 F8D0                  		bra.w	BossDefeated
00019EE0                            ; ===========================================================================
00019EE0                            
00019EE0                            loc_17F92:				; XREF: loc_17F48
00019EE0 7064                       		moveq	#100,d0
00019EE2 6100 0000                  		bsr.w	AddPoints
00019EE6 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019EEC 4E75                       		rts	
00019EEE                            ; ===========================================================================
00019EEE                            
00019EEE                            loc_17FA0:				; XREF: Obj77_ShipIndex
00019EEE 70FE                       		moveq	#-2,d0
00019EF0 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00019EF6 6500                       		bcs.s	loc_17FB6
00019EF8 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00019EFE 4268 0010                  		clr.w	$10(a0)
00019F02 5240                       		addq.w	#1,d0
00019F04                            
00019F04                            loc_17FB6:
00019F04 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00019F0A 6E00                       		bgt.s	loc_17FCA
00019F0C 317C 0500 0038             		move.w	#$500,$38(a0)
00019F12 4268 0012                  		clr.w	$12(a0)
00019F16 5240                       		addq.w	#1,d0
00019F18                            
00019F18                            loc_17FCA:
00019F18 6600                       		bne.s	loc_17FDC
00019F1A 317C 0140 0010             		move.w	#$140,$10(a0)
00019F20 317C FE00 0012             		move.w	#-$200,$12(a0)
00019F26 5428 0025                  		addq.b	#2,$25(a0)
00019F2A                            
00019F2A                            loc_17FDC:
00019F2A 6000 FF5A                  		bra.w	loc_17F38
00019F2E                            ; ===========================================================================
00019F2E                            
00019F2E                            loc_17FE0:				; XREF: Obj77_ShipIndex
00019F2E 70FE                       		moveq	#-2,d0
00019F30 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00019F36 6500                       		bcs.s	loc_17FF6
00019F38 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00019F3E 4268 0010                  		clr.w	$10(a0)
00019F42 5240                       		addq.w	#1,d0
00019F44                            
00019F44                            loc_17FF6:
00019F44 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00019F4A 6E00                       		bgt.s	loc_1800A
00019F4C 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00019F52 4268 0012                  		clr.w	$12(a0)
00019F56 5240                       		addq.w	#1,d0
00019F58                            
00019F58                            loc_1800A:
00019F58 6600                       		bne.s	loc_1801A
00019F5A 317C FE80 0012             		move.w	#-$180,$12(a0)
00019F60 5428 0025                  		addq.b	#2,$25(a0)
00019F64 4228 003F                  		clr.b	$3F(a0)
00019F68                            
00019F68                            loc_1801A:
00019F68 6000 FF1C                  		bra.w	loc_17F38
00019F6C                            ; ===========================================================================
00019F6C                            
00019F6C                            loc_1801E:				; XREF: Obj77_ShipIndex
00019F6C 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00019F72 6E00                       		bgt.s	loc_1804E
00019F74 317C 0100 0038             		move.w	#$100,$38(a0)
00019F7A 317C 0140 0010             		move.w	#$140,$10(a0)
00019F80 317C FF80 0012             		move.w	#-$80,$12(a0)
00019F86 4A28 003D                  		tst.b	$3D(a0)
00019F8A 6700                       		beq.s	loc_18046
00019F8C E1E8 0010                  		asl	$10(a0)
00019F90 E1E8 0012                  		asl	$12(a0)
00019F94                            
00019F94                            loc_18046:
00019F94 5428 0025                  		addq.b	#2,$25(a0)
00019F98 6000 FEEC                  		bra.w	loc_17F38
00019F9C                            ; ===========================================================================
00019F9C                            
00019F9C                            loc_1804E:
00019F9C 08E8 0000 0022             		bset	#0,$22(a0)
00019FA2 5428 003F                  		addq.b	#2,$3F(a0)
00019FA6 1028 003F                  		move.b	$3F(a0),d0
00019FAA 4EB9 0000 29CC             		jsr	(CalcSine).l
00019FB0 4A41                       		tst.w	d1
00019FB2 6A00                       		bpl.s	loc_1806C
00019FB4 08A8 0000 0022             		bclr	#0,$22(a0)
00019FBA                            
00019FBA                            loc_1806C:
00019FBA E840                       		asr.w	#4,d0
00019FBC 4840                       		swap	d0
00019FBE 4240                       		clr.w	d0
00019FC0 D0A8 0030                  		add.l	$30(a0),d0
00019FC4 4840                       		swap	d0
00019FC6 3140 0008                  		move.w	d0,8(a0)
00019FCA 3028 0012                  		move.w	$12(a0),d0
00019FCE 3238 D00C                  		move.w	($FFFFD00C).w,d1
00019FD2 9268 000C                  		sub.w	$C(a0),d1
00019FD6 6500                       		bcs.s	loc_180A2
00019FD8 0441 0048                  		subi.w	#$48,d1
00019FDC 6500                       		bcs.s	loc_180A2
00019FDE E240                       		asr.w	#1,d0
00019FE0 0441 0028                  		subi.w	#$28,d1
00019FE4 6500                       		bcs.s	loc_180A2
00019FE6 E240                       		asr.w	#1,d0
00019FE8 0441 0028                  		subi.w	#$28,d1
00019FEC 6500                       		bcs.s	loc_180A2
00019FEE 7000                       		moveq	#0,d0
00019FF0                            
00019FF0                            loc_180A2:
00019FF0 48C0                       		ext.l	d0
00019FF2 E180                       		asl.l	#8,d0
00019FF4 4A28 003D                  		tst.b	$3D(a0)
00019FF8 6700                       		beq.s	loc_180AE
00019FFA D080                       		add.l	d0,d0
00019FFC                            
00019FFC                            loc_180AE:
00019FFC D1A8 0038                  		add.l	d0,$38(a0)
0001A000 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A006 6000 FE8E                  		bra.w	loc_17F48
0001A00A                            ; ===========================================================================
0001A00A                            
0001A00A                            loc_180BC:				; XREF: Obj77_ShipIndex
0001A00A 70FE                       		moveq	#-2,d0
0001A00C 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001A012 6500                       		bcs.s	loc_180D2
0001A014 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001A01A 4268 0010                  		clr.w	$10(a0)
0001A01E 5240                       		addq.w	#1,d0
0001A020                            
0001A020                            loc_180D2:
0001A020 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001A026 6E00                       		bgt.s	loc_180E6
0001A028 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001A02E 4268 0012                  		clr.w	$12(a0)
0001A032 5240                       		addq.w	#1,d0
0001A034                            
0001A034                            loc_180E6:
0001A034 6600                       		bne.s	loc_180F2
0001A036 5428 0025                  		addq.b	#2,$25(a0)
0001A03A 08A8 0000 0022             		bclr	#0,$22(a0)
0001A040                            
0001A040                            loc_180F2:
0001A040 6000 FE44                  		bra.w	loc_17F38
0001A044                            ; ===========================================================================
0001A044                            
0001A044                            loc_180F6:				; XREF: Obj77_ShipIndex
0001A044 4A28 003D                  		tst.b	$3D(a0)
0001A048 6600                       		bne.s	loc_18112
0001A04A 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001A050 6D00                       		blt.s	loc_18126
0001A052 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001A058 6E00                       		bgt.s	loc_18126
0001A05A 117C 0032 003C             		move.b	#$32,$3C(a0)
0001A060                            
0001A060                            loc_18112:
0001A060 303C 0082                  		move.w	#$82,d0
0001A064 4EB9 0000 11F0             		jsr	(PlaySound).l	; play LZ music
0001A06A 08E8 0000 0022             		bset	#0,$22(a0)
0001A070 5428 0025                  		addq.b	#2,$25(a0)
0001A074                            
0001A074                            loc_18126:
0001A074 6000 FE10                  		bra.w	loc_17F38
0001A078                            ; ===========================================================================
0001A078                            
0001A078                            loc_1812A:				; XREF: Obj77_ShipIndex
0001A078 4A28 003D                  		tst.b	$3D(a0)
0001A07C 6600                       		bne.s	loc_18136
0001A07E 5328 003C                  		subq.b	#1,$3C(a0)
0001A082 6600                       		bne.s	loc_1814E
0001A084                            
0001A084                            loc_18136:
0001A084 4228 003C                  		clr.b	$3C(a0)
0001A088 317C 0400 0010             		move.w	#$400,$10(a0)
0001A08E 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A094 4228 003D                  		clr.b	$3D(a0)
0001A098 5428 0025                  		addq.b	#2,$25(a0)
0001A09C                            
0001A09C                            loc_1814E:
0001A09C 6000 FDE8                  		bra.w	loc_17F38
0001A0A0                            ; ===========================================================================
0001A0A0                            
0001A0A0                            loc_18152:				; XREF: Obj77_ShipIndex
0001A0A0 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001A0A6 6400                       		bcc.s	loc_18160
0001A0A8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A0AC 6000                       		bra.s	loc_18166
0001A0AE                            ; ===========================================================================
0001A0AE                            
0001A0AE                            loc_18160:
0001A0AE 4A28 0001                  		tst.b	1(a0)
0001A0B2 6A00                       		bpl.s	Obj77_ShipDel
0001A0B4                            
0001A0B4                            loc_18166:
0001A0B4 6000 FDD0                  		bra.w	loc_17F38
0001A0B8                            ; ===========================================================================
0001A0B8                            
0001A0B8                            Obj77_ShipDel:
0001A0B8 4EF9 0000 E952             		jmp	DeleteObject
0001A0BE                            ; ===========================================================================
0001A0BE                            
0001A0BE                            Obj77_FaceMain:				; XREF: Obj77_Index
0001A0BE 2268 0034                  		movea.l	$34(a0),a1
0001A0C2 1011                       		move.b	(a1),d0
0001A0C4 B010                       		cmp.b	(a0),d0
0001A0C6 6600                       		bne.s	Obj77_FaceDel
0001A0C8 7000                       		moveq	#0,d0
0001A0CA 1029 0025                  		move.b	$25(a1),d0
0001A0CE 7201                       		moveq	#1,d1
0001A0D0 4A28 003D                  		tst.b	$3D(a0)
0001A0D4 6700                       		beq.s	loc_1818C
0001A0D6 720A                       		moveq	#$A,d1
0001A0D8 6000                       		bra.s	loc_181A0
0001A0DA                            ; ===========================================================================
0001A0DA                            
0001A0DA                            loc_1818C:
0001A0DA 4A29 0020                  		tst.b	$20(a1)
0001A0DE 6600                       		bne.s	loc_18196
0001A0E0 7205                       		moveq	#5,d1
0001A0E2 6000                       		bra.s	loc_181A0
0001A0E4                            ; ===========================================================================
0001A0E4                            
0001A0E4                            loc_18196:
0001A0E4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A0EA 6500                       		bcs.s	loc_181A0
0001A0EC 7204                       		moveq	#4,d1
0001A0EE                            
0001A0EE                            loc_181A0:
0001A0EE 1141 001C                  		move.b	d1,$1C(a0)
0001A0F2 0C00 000E                  		cmpi.b	#$E,d0
0001A0F6 6600                       		bne.s	loc_181B6
0001A0F8 117C 0006 001C             		move.b	#6,$1C(a0)
0001A0FE 4A28 0001                  		tst.b	1(a0)
0001A102 6A00                       		bpl.s	Obj77_FaceDel
0001A104                            
0001A104                            loc_181B6:
0001A104 6000                       		bra.s	Obj77_Display
0001A106                            ; ===========================================================================
0001A106                            
0001A106                            Obj77_FaceDel:
0001A106 4EF9 0000 E952             		jmp	DeleteObject
0001A10C                            ; ===========================================================================
0001A10C                            
0001A10C                            Obj77_FlameMain:			; XREF: Obj77_Index
0001A10C 117C 0007 001C             		move.b	#7,$1C(a0)
0001A112 2268 0034                  		movea.l	$34(a0),a1
0001A116 1011                       		move.b	(a1),d0
0001A118 B010                       		cmp.b	(a0),d0
0001A11A 6600                       		bne.s	Obj77_FlameDel
0001A11C 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001A122 6600                       		bne.s	loc_181F0
0001A124 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A12A 4A28 0001                  		tst.b	1(a0)
0001A12E 6A00                       		bpl.s	Obj77_FlameDel
0001A130 6000                       		bra.s	loc_181F0
0001A132                            ; ===========================================================================
0001A132 4A69 0010                  		tst.w	$10(a1)
0001A136 6700                       		beq.s	loc_181F0
0001A138 117C 0008 001C             		move.b	#8,$1C(a0)
0001A13E                            
0001A13E                            loc_181F0:
0001A13E 6000                       		bra.s	Obj77_Display
0001A140                            ; ===========================================================================
0001A140                            
0001A140                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001A140 4EF9 0000 E952             		jmp	DeleteObject
0001A146                            ; ===========================================================================
0001A146                            
0001A146                            Obj77_Display:
0001A146 43F9 0001 9C0C             		lea	(Ani_Eggman).l,a1
0001A14C 4EB9 0000 B962             		jsr	AnimateSprite
0001A152 2268 0034                  		movea.l	$34(a0),a1
0001A156 3169 0008 0008             		move.w	8(a1),8(a0)
0001A15C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A162 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A168 7003                       		moveq	#3,d0
0001A16A C028 0022                  		and.b	$22(a0),d0
0001A16E 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A174 8128 0001                  		or.b	d0,1(a0)
0001A178 4EF9 0000 E902             		jmp	DisplaySprite
0001A17E                            ; ===========================================================================
0001A17E                            ; ---------------------------------------------------------------------------
0001A17E                            ; Object 73 - Eggman (MZ)
0001A17E                            ; ---------------------------------------------------------------------------
0001A17E                            
0001A17E                            Obj73:					; XREF: Obj_Index
0001A17E 7000                       		moveq	#0,d0
0001A180 1028 0024                  		move.b	$24(a0),d0
0001A184 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001A188 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001A18C                            ; ===========================================================================
0001A18C 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001A18E 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001A190 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001A192 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001A194 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001A196                            
0001A196 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A199 0401 04                    		dc.b 4,	1, 4
0001A19C 0607 04                    		dc.b 6,	7, 4
0001A19F 0800 03                    		dc.b 8,	0, 3
0001A1A2                            ; ===========================================================================
0001A1A2                            
0001A1A2                            Obj73_Main:				; XREF: Obj73_Index
0001A1A2 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A1A8 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A1AE 117C 000F 0020             		move.b	#$F,$20(a0)
0001A1B4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A1BA 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A1BE 2248                       		movea.l	a0,a1
0001A1C0 7203                       		moveq	#3,d1
0001A1C2 6000                       		bra.s	Obj73_LoadBoss
0001A1C4                            ; ===========================================================================
0001A1C4                            
0001A1C4                            Obj73_Loop:
0001A1C4 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001A1CA 6600                       		bne.s	Obj73_ShipMain
0001A1CC 12BC 0073                  		move.b	#$73,0(a1)
0001A1D0 3368 0008 0008             		move.w	8(a0),8(a1)
0001A1D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A1DC                            
0001A1DC                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A1DC 08A8 0000 0022             		bclr	#0,$22(a0)
0001A1E2 4229 0025                  		clr.b	$25(a1)
0001A1E6 135A 0024                  		move.b	(a2)+,$24(a1)
0001A1EA 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A1EE 135A 0018                  		move.b	(a2)+,$18(a1)
0001A1F2 237C 0001 9C5C 0004        		move.l	#Map_Eggman,4(a1)
0001A1FA 337C 0400 0002             		move.w	#$400,2(a1)
0001A200 137C 0004 0001             		move.b	#4,1(a1)
0001A206 137C 0020 0019             		move.b	#$20,$19(a1)
0001A20C 2348 0034                  		move.l	a0,$34(a1)
0001A210 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A214                            
0001A214                            Obj73_ShipMain:
0001A214 7000                       		moveq	#0,d0
0001A216 1028 0025                  		move.b	$25(a0),d0
0001A21A 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A21E 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A222 43F9 0001 9C0C             		lea	(Ani_Eggman).l,a1
0001A228 4EB9 0000 B962             		jsr	AnimateSprite
0001A22E 7003                       		moveq	#3,d0
0001A230 C028 0022                  		and.b	$22(a0),d0
0001A234 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A23A 8128 0001                  		or.b	d0,1(a0)
0001A23E 4EF9 0000 E902             		jmp	DisplaySprite
0001A244                            ; ===========================================================================
0001A244 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A246 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A248 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A24A 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A24C 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A24E                            ; ===========================================================================
0001A24E                            
0001A24E                            loc_18302:				; XREF: Obj73_ShipIndex
0001A24E 1028 003F                  		move.b	$3F(a0),d0
0001A252 5428 003F                  		addq.b	#2,$3F(a0)
0001A256 4EB9 0000 29CC             		jsr	(CalcSine).l
0001A25C E440                       		asr.w	#2,d0
0001A25E 3140 0012                  		move.w	d0,$12(a0)
0001A262 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A268 6100 F592                  		bsr.w	BossMove
0001A26C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A272 6600                       		bne.s	loc_18334
0001A274 5428 0025                  		addq.b	#2,$25(a0)
0001A278 4228 0028                  		clr.b	$28(a0)
0001A27C 42A8 0010                  		clr.l	$10(a0)
0001A280                            
0001A280                            loc_18334:
0001A280 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001A286 1140 0034                  		move.b	d0,$34(a0)
0001A28A                            
0001A28A                            loc_1833E:
0001A28A 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A290 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A296 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A29C 6400                       		bcc.s	locret_18390
0001A29E 4A28 0022                  		tst.b	$22(a0)
0001A2A2 6B00                       		bmi.s	loc_18392
0001A2A4 4A28 0020                  		tst.b	$20(a0)
0001A2A8 6600                       		bne.s	locret_18390
0001A2AA 4A28 003E                  		tst.b	$3E(a0)
0001A2AE 6600                       		bne.s	loc_18374
0001A2B0 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A2B6 303C 00AC                  		move.w	#$AC,d0
0001A2BA 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A2C0                            
0001A2C0                            loc_18374:
0001A2C0 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A2C4 7000                       		moveq	#0,d0
0001A2C6 4A51                       		tst.w	(a1)
0001A2C8 6600                       		bne.s	loc_18382
0001A2CA 303C 0EEE                  		move.w	#$EEE,d0
0001A2CE                            
0001A2CE                            loc_18382:
0001A2CE 3280                       		move.w	d0,(a1)
0001A2D0 5328 003E                  		subq.b	#1,$3E(a0)
0001A2D4 6600                       		bne.s	locret_18390
0001A2D6 117C 000F 0020             		move.b	#$F,$20(a0)
0001A2DC                            
0001A2DC                            locret_18390:
0001A2DC 4E75                       		rts	
0001A2DE                            ; ===========================================================================
0001A2DE                            
0001A2DE                            loc_18392:				; XREF: loc_1833E
0001A2DE 7064                       		moveq	#100,d0
0001A2E0 6100 0000                  		bsr.w	AddPoints
0001A2E4 117C 0004 0025             		move.b	#4,$25(a0)
0001A2EA 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A2F0 4268 0010                  		clr.w	$10(a0)
0001A2F4 4E75                       		rts	
0001A2F6                            ; ===========================================================================
0001A2F6                            
0001A2F6                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A2F6 7000                       		moveq	#0,d0
0001A2F8 1028 0028                  		move.b	$28(a0),d0
0001A2FC 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A300 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A304 0228 0006 0028             		andi.b	#6,$28(a0)
0001A30A 6000 FF7E                  		bra.w	loc_1833E
0001A30E                            ; ===========================================================================
0001A30E 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A310 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A312 0000                       		dc.w loc_183CA-off_183C2
0001A314 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A316                            ; ===========================================================================
0001A316                            
0001A316                            loc_183CA:				; XREF: off_183C2
0001A316 4A68 0010                  		tst.w	$10(a0)
0001A31A 6600                       		bne.s	loc_183FE
0001A31C 7040                       		moveq	#$40,d0
0001A31E 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A324 6700                       		beq.s	loc_183E6
0001A326 6500                       		bcs.s	loc_183DE
0001A328 4440                       		neg.w	d0
0001A32A                            
0001A32A                            loc_183DE:
0001A32A 3140 0012                  		move.w	d0,$12(a0)
0001A32E 6000 F4CC                  		bra.w	BossMove
0001A332                            ; ===========================================================================
0001A332                            
0001A332                            loc_183E6:
0001A332 317C 0200 0010             		move.w	#$200,$10(a0)
0001A338 317C 0100 0012             		move.w	#$100,$12(a0)
0001A33E 0828 0000 0022             		btst	#0,$22(a0)
0001A344 6600                       		bne.s	loc_183FE
0001A346 4468 0010                  		neg.w	$10(a0)
0001A34A                            
0001A34A                            loc_183FE:
0001A34A 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A350 6400                       		bcc.s	Obj73_MakeLava
0001A352 6100 F4A8                  		bsr.w	BossMove
0001A356 5968 0012                  		subq.w	#4,$12(a0)
0001A35A                            
0001A35A                            Obj73_MakeLava:
0001A35A 5328 0034                  		subq.b	#1,$34(a0)
0001A35E 6400                       		bcc.s	loc_1845C
0001A360 4EB9 0000 F058             		jsr	SingleObjLoad
0001A366 6600                       		bne.s	loc_1844A
0001A368 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A36C 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A372 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001A378 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A37E 80FC 0050                  		divu.w	#$50,d0
0001A382 4840                       		swap	d0
0001A384 0640 1878                  		addi.w	#$1878,d0
0001A388 3340 0008                  		move.w	d0,8(a1)
0001A38C EE09                       		lsr.b	#7,d1
0001A38E 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A394                            
0001A394                            loc_1844A:
0001A394 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001A39A 0200 001F                  		andi.b	#$1F,d0
0001A39E 0600 0040                  		addi.b	#$40,d0
0001A3A2 1140 0034                  		move.b	d0,$34(a0)
0001A3A6                            
0001A3A6                            loc_1845C:
0001A3A6 0828 0000 0022             		btst	#0,$22(a0)
0001A3AC 6700                       		beq.s	loc_18474
0001A3AE 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A3B4 6D00                       		blt.s	locret_1849C
0001A3B6 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A3BC 6000                       		bra.s	loc_18482
0001A3BE                            ; ===========================================================================
0001A3BE                            
0001A3BE                            loc_18474:
0001A3BE 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A3C4 6E00                       		bgt.s	locret_1849C
0001A3C6 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A3CC                            
0001A3CC                            loc_18482:
0001A3CC 4268 0010                  		clr.w	$10(a0)
0001A3D0 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A3D6 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A3DC 6400                       		bcc.s	loc_18498
0001A3DE 4468 0012                  		neg.w	$12(a0)
0001A3E2                            
0001A3E2                            loc_18498:
0001A3E2 5428 0028                  		addq.b	#2,$28(a0)
0001A3E6                            
0001A3E6                            locret_1849C:
0001A3E6 4E75                       		rts	
0001A3E8                            ; ===========================================================================
0001A3E8                            
0001A3E8                            Obj73_MakeLava2:			; XREF: off_183C2
0001A3E8 6100 F412                  		bsr.w	BossMove
0001A3EC 3028 0038                  		move.w	$38(a0),d0
0001A3F0 0440 022C                  		subi.w	#$22C,d0
0001A3F4 6E00                       		bgt.s	locret_184F4
0001A3F6 303C 022C                  		move.w	#$22C,d0
0001A3FA 4A68 0012                  		tst.w	$12(a0)
0001A3FE 6700                       		beq.s	loc_184EA
0001A400 4268 0012                  		clr.w	$12(a0)
0001A404 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A40A 0868 0000 0022             		bchg	#0,$22(a0)
0001A410 4EB9 0000 F058             		jsr	SingleObjLoad
0001A416 6600                       		bne.s	loc_184EA
0001A418 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A41E 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A424 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A42A 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A42E 137C 0001 0028             		move.b	#1,$28(a1)
0001A434                            
0001A434                            loc_184EA:
0001A434 5368 003C                  		subq.w	#1,$3C(a0)
0001A438 6600                       		bne.s	locret_184F4
0001A43A 5428 0028                  		addq.b	#2,$28(a0)
0001A43E                            
0001A43E                            locret_184F4:
0001A43E 4E75                       		rts	
0001A440                            ; ===========================================================================
0001A440                            
0001A440                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A440 5368 003C                  		subq.w	#1,$3C(a0)
0001A444 6B00                       		bmi.s	loc_18500
0001A446 6000 F366                  		bra.w	BossDefeated
0001A44A                            ; ===========================================================================
0001A44A                            
0001A44A                            loc_18500:
0001A44A 08E8 0000 0022             		bset	#0,$22(a0)
0001A450 08A8 0007 0022             		bclr	#7,$22(a0)
0001A456 4268 0010                  		clr.w	$10(a0)
0001A45A 5428 0025                  		addq.b	#2,$25(a0)
0001A45E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A464 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A468 6600                       		bne.s	locret_1852A
0001A46A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A470 4268 0012                  		clr.w	$12(a0)
0001A474                            
0001A474                            locret_1852A:
0001A474 4E75                       		rts	
0001A476                            ; ===========================================================================
0001A476                            
0001A476                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A476 5268 003C                  		addq.w	#1,$3C(a0)
0001A47A 6700                       		beq.s	loc_18544
0001A47C 6A00                       		bpl.s	loc_1854E
0001A47E 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A484 6400                       		bcc.s	loc_18544
0001A486 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A48C 6000                       		bra.s	loc_1857A
0001A48E                            ; ===========================================================================
0001A48E                            
0001A48E                            loc_18544:
0001A48E 4268 0012                  		clr.w	$12(a0)
0001A492 4268 003C                  		clr.w	$3C(a0)
0001A496 6000                       		bra.s	loc_1857A
0001A498                            ; ===========================================================================
0001A498                            
0001A498                            loc_1854E:
0001A498 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A49E 6500                       		bcs.s	loc_18566
0001A4A0 6700                       		beq.s	loc_1856C
0001A4A2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A4A8 6500                       		bcs.s	loc_1857A
0001A4AA 5428 0025                  		addq.b	#2,$25(a0)
0001A4AE 6000                       		bra.s	loc_1857A
0001A4B0                            ; ===========================================================================
0001A4B0                            
0001A4B0                            loc_18566:
0001A4B0 5168 0012                  		subq.w	#8,$12(a0)
0001A4B4 6000                       		bra.s	loc_1857A
0001A4B6                            ; ===========================================================================
0001A4B6                            
0001A4B6                            loc_1856C:
0001A4B6 4268 0012                  		clr.w	$12(a0)
0001A4BA 303C 0083                  		move.w	#$83,d0
0001A4BE 4EB9 0000 11F0             		jsr	(PlaySound).l	; play MZ music
0001A4C4                            
0001A4C4                            loc_1857A:
0001A4C4 6100 F336                  		bsr.w	BossMove
0001A4C8 6000 FDC0                  		bra.w	loc_1833E
0001A4CC                            ; ===========================================================================
0001A4CC                            
0001A4CC                            loc_18582:				; XREF: Obj73_ShipIndex
0001A4CC 317C 0500 0010             		move.w	#$500,$10(a0)
0001A4D2 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A4D8 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A4DE 6400                       		bcc.s	loc_1859C
0001A4E0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A4E4 6000                       		bra.s	loc_185A2
0001A4E6                            ; ===========================================================================
0001A4E6                            
0001A4E6                            loc_1859C:
0001A4E6 4A28 0001                  		tst.b	1(a0)
0001A4EA 6A00                       		bpl.s	Obj73_ShipDel
0001A4EC                            
0001A4EC                            loc_185A2:
0001A4EC 6100 F30E                  		bsr.w	BossMove
0001A4F0 6000 FD98                  		bra.w	loc_1833E
0001A4F4                            ; ===========================================================================
0001A4F4                            
0001A4F4                            Obj73_ShipDel:
0001A4F4 4EF9 0000 E952             		jmp	DeleteObject
0001A4FA                            ; ===========================================================================
0001A4FA                            
0001A4FA                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A4FA 7000                       		moveq	#0,d0
0001A4FC 7201                       		moveq	#1,d1
0001A4FE 2268 0034                  		movea.l	$34(a0),a1
0001A502 1029 0025                  		move.b	$25(a1),d0
0001A506 5540                       		subq.w	#2,d0
0001A508 6600                       		bne.s	loc_185D2
0001A50A 0829 0001 0028             		btst	#1,$28(a1)
0001A510 6700                       		beq.s	loc_185DA
0001A512 4A69 0012                  		tst.w	$12(a1)
0001A516 6600                       		bne.s	loc_185DA
0001A518 7204                       		moveq	#4,d1
0001A51A 6000                       		bra.s	loc_185EE
0001A51C                            ; ===========================================================================
0001A51C                            
0001A51C                            loc_185D2:
0001A51C 5500                       		subq.b	#2,d0
0001A51E 6B00                       		bmi.s	loc_185DA
0001A520 720A                       		moveq	#$A,d1
0001A522 6000                       		bra.s	loc_185EE
0001A524                            ; ===========================================================================
0001A524                            
0001A524                            loc_185DA:
0001A524 4A29 0020                  		tst.b	$20(a1)
0001A528 6600                       		bne.s	loc_185E4
0001A52A 7205                       		moveq	#5,d1
0001A52C 6000                       		bra.s	loc_185EE
0001A52E                            ; ===========================================================================
0001A52E                            
0001A52E                            loc_185E4:
0001A52E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A534 6500                       		bcs.s	loc_185EE
0001A536 7204                       		moveq	#4,d1
0001A538                            
0001A538                            loc_185EE:
0001A538 1141 001C                  		move.b	d1,$1C(a0)
0001A53C 5900                       		subq.b	#4,d0
0001A53E 6600                       		bne.s	loc_18602
0001A540 117C 0006 001C             		move.b	#6,$1C(a0)
0001A546 4A28 0001                  		tst.b	1(a0)
0001A54A 6A00                       		bpl.s	Obj73_FaceDel
0001A54C                            
0001A54C                            loc_18602:
0001A54C 6000                       		bra.s	Obj73_Display
0001A54E                            ; ===========================================================================
0001A54E                            
0001A54E                            Obj73_FaceDel:
0001A54E 4EF9 0000 E952             		jmp	DeleteObject
0001A554                            ; ===========================================================================
0001A554                            
0001A554                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A554 117C 0007 001C             		move.b	#7,$1C(a0)
0001A55A 2268 0034                  		movea.l	$34(a0),a1
0001A55E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A564 6D00                       		blt.s	loc_1862A
0001A566 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A56C 4A28 0001                  		tst.b	1(a0)
0001A570 6A00                       		bpl.s	Obj73_FlameDel
0001A572 6000                       		bra.s	loc_18636
0001A574                            ; ===========================================================================
0001A574                            
0001A574                            loc_1862A:
0001A574 4A69 0010                  		tst.w	$10(a1)
0001A578 6700                       		beq.s	loc_18636
0001A57A 117C 0008 001C             		move.b	#8,$1C(a0)
0001A580                            
0001A580                            loc_18636:
0001A580 6000                       		bra.s	Obj73_Display
0001A582                            ; ===========================================================================
0001A582                            
0001A582                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A582 4EF9 0000 E952             		jmp	DeleteObject
0001A588                            ; ===========================================================================
0001A588                            
0001A588                            Obj73_Display:
0001A588 43F9 0001 9C0C             		lea	(Ani_Eggman).l,a1
0001A58E 4EB9 0000 B962             		jsr	AnimateSprite
0001A594                            
0001A594                            loc_1864A:
0001A594 2268 0034                  		movea.l	$34(a0),a1
0001A598 3169 0008 0008             		move.w	8(a1),8(a0)
0001A59E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A5A4 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A5AA 7003                       		moveq	#3,d0
0001A5AC C028 0022                  		and.b	$22(a0),d0
0001A5B0 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A5B6 8128 0001                  		or.b	d0,1(a0)
0001A5BA 4EF9 0000 E902             		jmp	DisplaySprite
0001A5C0                            ; ===========================================================================
0001A5C0                            
0001A5C0                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A5C0 2268 0034                  		movea.l	$34(a0),a1
0001A5C4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A5CA 6600                       		bne.s	loc_18688
0001A5CC 4A28 0001                  		tst.b	1(a0)
0001A5D0 6A00                       		bpl.s	Obj73_TubeDel
0001A5D2                            
0001A5D2                            loc_18688:
0001A5D2 217C 0001 9D24 0004        		move.l	#Map_BossItems,4(a0)
0001A5DA 317C 246C 0002             		move.w	#$246C,2(a0)
0001A5E0 117C 0004 001A             		move.b	#4,$1A(a0)
0001A5E6 60AC                       		bra.s	loc_1864A
0001A5E8                            ; ===========================================================================
0001A5E8                            
0001A5E8                            Obj73_TubeDel:
0001A5E8 4EF9 0000 E952             		jmp	DeleteObject
0001A5EE                            ; ===========================================================================
0001A5EE                            ; ---------------------------------------------------------------------------
0001A5EE                            ; Object 74 - lava that	Eggman drops (MZ)
0001A5EE                            ; ---------------------------------------------------------------------------
0001A5EE                            
0001A5EE                            Obj74:					; XREF: Obj_Index
0001A5EE 7000                       		moveq	#0,d0
0001A5F0 1028 0024                  		move.b	$24(a0),d0
0001A5F4 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A5F8 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A5FC 4EF9 0000 E902             		jmp	DisplaySprite
0001A602                            ; ===========================================================================
0001A602 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A604 0000                       		dc.w Obj74_Action-Obj74_Index
0001A606 0000                       		dc.w loc_18886-Obj74_Index
0001A608 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A60A                            ; ===========================================================================
0001A60A                            
0001A60A                            Obj74_Main:				; XREF: Obj74_Index
0001A60A 117C 0008 0016             		move.b	#8,$16(a0)
0001A610 117C 0008 0017             		move.b	#8,$17(a0)
0001A616 217C 0000 C5FC 0004        		move.l	#Map_obj14,4(a0)
0001A61E 317C 0345 0002             		move.w	#$345,2(a0)
0001A624 117C 0004 0001             		move.b	#4,1(a0)
0001A62A 117C 0005 0018             		move.b	#5,$18(a0)
0001A630 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A636 117C 0008 0019             		move.b	#8,$19(a0)
0001A63C 5428 0024                  		addq.b	#2,$24(a0)
0001A640 4A28 0028                  		tst.b	$28(a0)
0001A644 6600                       		bne.s	loc_1870A
0001A646 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A64C 5428 0024                  		addq.b	#2,$24(a0)
0001A650 6000 0000                  		bra.w	loc_18886
0001A654                            ; ===========================================================================
0001A654                            
0001A654                            loc_1870A:
0001A654 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A65A 303C 00AE                  		move.w	#$AE,d0
0001A65E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lava sound
0001A664                            
0001A664                            Obj74_Action:				; XREF: Obj74_Index
0001A664 7000                       		moveq	#0,d0
0001A666 1028 0025                  		move.b	$25(a0),d0
0001A66A 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A66E 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A672 4EB9 0000 E8E8             		jsr	SpeedToPos
0001A678 43F9 0000 FD12             		lea	(Ani_obj14).l,a1
0001A67E 4EB9 0000 B962             		jsr	AnimateSprite
0001A684 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A68A 6200                       		bhi.s	Obj74_Delete
0001A68C 4E75                       		rts	
0001A68E                            ; ===========================================================================
0001A68E                            
0001A68E                            Obj74_Delete:
0001A68E 4EF9 0000 E952             		jmp	DeleteObject
0001A694                            ; ===========================================================================
0001A694 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A696 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A698 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A69A 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A69C                            ; ===========================================================================
0001A69C                            
0001A69C                            Obj74_Drop:				; XREF: Obj74_Index2
0001A69C 08E8 0001 0022             		bset	#1,$22(a0)
0001A6A2 5328 0029                  		subq.b	#1,$29(a0)
0001A6A6 6A00                       		bpl.s	locret_18780
0001A6A8 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A6AE 4228 0028                  		clr.b	$28(a0)
0001A6B2 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A6B8 08A8 0001 0022             		bclr	#1,$22(a0)
0001A6BE 6100 C6E8                  		bsr.w	ObjHitFloor
0001A6C2 4A41                       		tst.w	d1
0001A6C4 6A00                       		bpl.s	locret_18780
0001A6C6 5428 0025                  		addq.b	#2,$25(a0)
0001A6CA                            
0001A6CA                            locret_18780:
0001A6CA 4E75                       		rts	
0001A6CC                            ; ===========================================================================
0001A6CC                            
0001A6CC                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A6CC 5568 000C                  		subq.w	#2,$C(a0)
0001A6D0 08E8 0007 0002             		bset	#7,2(a0)
0001A6D6 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A6DC 4268 0012                  		clr.w	$12(a0)
0001A6E0 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A6E6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A6EC 117C 0003 0029             		move.b	#3,$29(a0)
0001A6F2 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001A6F8 6600                       		bne.s	loc_187CA
0001A6FA 47D1                       		lea	(a1),a3
0001A6FC 45D0                       		lea	(a0),a2
0001A6FE 7003                       		moveq	#3,d0
0001A700                            
0001A700                            Obj74_Loop:
0001A700 26DA                       		move.l	(a2)+,(a3)+
0001A702 26DA                       		move.l	(a2)+,(a3)+
0001A704 26DA                       		move.l	(a2)+,(a3)+
0001A706 26DA                       		move.l	(a2)+,(a3)+
0001A708 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A70C                            
0001A70C 4469 0010                  		neg.w	$10(a1)
0001A710 5429 0025                  		addq.b	#2,$25(a1)
0001A714                            
0001A714                            loc_187CA:
0001A714 5428 0025                  		addq.b	#2,$25(a0)
0001A718 4E75                       		rts	
0001A71A                            
0001A71A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A71A                            
0001A71A                            
0001A71A                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A71A 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001A720 6600                       		bne.s	locret_187EE
0001A722 3368 0008 0008             		move.w	8(a0),8(a1)
0001A728 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A72E 12BC 0074                  		move.b	#$74,(a1)
0001A732 337C 0067 0028             		move.w	#$67,$28(a1)
0001A738                            
0001A738                            locret_187EE:
0001A738 4E75                       		rts	
0001A73A                            ; End of function Obj74_Duplicate2
0001A73A                            
0001A73A                            ; ===========================================================================
0001A73A                            
0001A73A                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A73A 6100 C66C                  		bsr.w	ObjHitFloor
0001A73E 4A41                       		tst.w	d1
0001A740 6A00                       		bpl.s	loc_18826
0001A742 3028 0008                  		move.w	8(a0),d0
0001A746 0C40 1940                  		cmpi.w	#$1940,d0
0001A74A 6E00                       		bgt.s	loc_1882C
0001A74C 3228 0030                  		move.w	$30(a0),d1
0001A750 B240                       		cmp.w	d0,d1
0001A752 6700                       		beq.s	loc_1881E
0001A754 0240 0010                  		andi.w	#$10,d0
0001A758 0241 0010                  		andi.w	#$10,d1
0001A75C B240                       		cmp.w	d0,d1
0001A75E 6700                       		beq.s	loc_1881E
0001A760 61B8                       		bsr.s	Obj74_Duplicate2
0001A762 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A768                            
0001A768                            loc_1881E:
0001A768 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A76E 4E75                       		rts	
0001A770                            ; ===========================================================================
0001A770                            
0001A770                            loc_18826:
0001A770 5428 0025                  		addq.b	#2,$25(a0)
0001A774 4E75                       		rts	
0001A776                            ; ===========================================================================
0001A776                            
0001A776                            loc_1882C:
0001A776 5428 0024                  		addq.b	#2,$24(a0)
0001A77A 4E75                       		rts	
0001A77C                            ; ===========================================================================
0001A77C                            
0001A77C                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A77C 08A8 0001 0022             		bclr	#1,$22(a0)
0001A782 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A788 3028 0008                  		move.w	8(a0),d0
0001A78C 9068 0032                  		sub.w	$32(a0),d0
0001A790 6A00                       		bpl.s	loc_1884A
0001A792 4440                       		neg.w	d0
0001A794                            
0001A794                            loc_1884A:
0001A794 0C40 0012                  		cmpi.w	#$12,d0
0001A798 6600                       		bne.s	loc_18856
0001A79A 08A8 0007 0002             		bclr	#7,2(a0)
0001A7A0                            
0001A7A0                            loc_18856:
0001A7A0 6100 C606                  		bsr.w	ObjHitFloor
0001A7A4 4A41                       		tst.w	d1
0001A7A6 6A00                       		bpl.s	locret_1887E
0001A7A8 5328 0029                  		subq.b	#1,$29(a0)
0001A7AC 6700                       		beq.s	Obj74_Delete2
0001A7AE 4268 0012                  		clr.w	$12(a0)
0001A7B2 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A7B8 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A7BE 08E8 0007 0002             		bset	#7,2(a0)
0001A7C4 5528 0025                  		subq.b	#2,$25(a0)
0001A7C8                            
0001A7C8                            locret_1887E:
0001A7C8 4E75                       		rts	
0001A7CA                            ; ===========================================================================
0001A7CA                            
0001A7CA                            Obj74_Delete2:
0001A7CA 4EF9 0000 E952             		jmp	DeleteObject
0001A7D0                            ; ===========================================================================
0001A7D0                            
0001A7D0                            loc_18886:				; XREF: Obj74_Index
0001A7D0 08E8 0007 0002             		bset	#7,2(a0)
0001A7D6 5328 0029                  		subq.b	#1,$29(a0)
0001A7DA 6600                       		bne.s	Obj74_Animate
0001A7DC 117C 0001 001C             		move.b	#1,$1C(a0)
0001A7E2 5968 000C                  		subq.w	#4,$C(a0)
0001A7E6 4228 0020                  		clr.b	$20(a0)
0001A7EA                            
0001A7EA                            Obj74_Animate:
0001A7EA 43F9 0000 FD12             		lea	(Ani_obj14).l,a1
0001A7F0 4EF9 0000 B962             		jmp	AnimateSprite
0001A7F6                            ; ===========================================================================
0001A7F6                            
0001A7F6                            Obj74_Delete3:				; XREF: Obj74_Index
0001A7F6 4EF9 0000 E952             		jmp	DeleteObject
0001A7FC                            ; ===========================================================================
0001A7FC                            
0001A7FC                            Obj7A_Delete:
0001A7FC 4EF9 0000 E952             		jmp	DeleteObject
0001A802                            ; ===========================================================================
0001A802                            ; ---------------------------------------------------------------------------
0001A802                            ; Object 7A - Eggman (SLZ)
0001A802                            ; ---------------------------------------------------------------------------
0001A802                            
0001A802                            Obj7A:					; XREF: Obj_Index
0001A802 7000                       		moveq	#0,d0
0001A804 1028 0024                  		move.b	$24(a0),d0
0001A808 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A80C 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A810                            ; ===========================================================================
0001A810 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A812 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A814 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A816 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A818 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A81A                            
0001A81A 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A81D 0401 04                    		dc.b 4,	1, 4
0001A820 0607 04                    		dc.b 6,	7, 4
0001A823 0800 03                    		dc.b 8,	0, 3
0001A826                            ; ===========================================================================
0001A826                            
0001A826                            Obj7A_Main:				; XREF: Obj7A_Index
0001A826 317C 2188 0008             		move.w	#$2188,8(a0)
0001A82C 317C 0228 000C             		move.w	#$228,$C(a0)
0001A832 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A838 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A83E 117C 000F 0020             		move.b	#$F,$20(a0)
0001A844 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A84A 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A84E 2248                       		movea.l	a0,a1
0001A850 7203                       		moveq	#3,d1
0001A852 6000                       		bra.s	Obj7A_LoadBoss
0001A854                            ; ===========================================================================
0001A854                            
0001A854                            Obj7A_Loop:
0001A854 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001A85A 6600                       		bne.s	loc_1895C
0001A85C 12BC 007A                  		move.b	#$7A,0(a1)
0001A860 3368 0008 0008             		move.w	8(a0),8(a1)
0001A866 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A86C                            
0001A86C                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A86C 08A8 0000 0022             		bclr	#0,$22(a0)
0001A872 4229 0025                  		clr.b	$25(a1)
0001A876 135A 0024                  		move.b	(a2)+,$24(a1)
0001A87A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A87E 135A 0018                  		move.b	(a2)+,$18(a1)
0001A882 237C 0001 9C5C 0004        		move.l	#Map_Eggman,4(a1)
0001A88A 337C 0400 0002             		move.w	#$400,2(a1)
0001A890 137C 0004 0001             		move.b	#4,1(a1)
0001A896 137C 0020 0019             		move.b	#$20,$19(a1)
0001A89C 2348 0034                  		move.l	a0,$34(a1)
0001A8A0 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A8A4                            
0001A8A4                            loc_1895C:
0001A8A4 43F8 D040                  		lea	($FFFFD040).w,a1
0001A8A8 45E8 002A                  		lea	$2A(a0),a2
0001A8AC 705E                       		moveq	#$5E,d0
0001A8AE 723E                       		moveq	#$3E,d1
0001A8B0                            
0001A8B0                            loc_18968:
0001A8B0 B011                       		cmp.b	(a1),d0
0001A8B2 6600                       		bne.s	loc_18974
0001A8B4 4A29 0028                  		tst.b	$28(a1)
0001A8B8 6700                       		beq.s	loc_18974
0001A8BA 34C9                       		move.w	a1,(a2)+
0001A8BC                            
0001A8BC                            loc_18974:
0001A8BC D2FC 0040                  		adda.w	#$40,a1
0001A8C0 51C9 FFEE                  		dbf	d1,loc_18968
0001A8C4                            
0001A8C4                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A8C4 7000                       		moveq	#0,d0
0001A8C6 1028 0025                  		move.b	$25(a0),d0
0001A8CA 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A8CE 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001A8D2 43F9 0001 9C0C             		lea	(Ani_Eggman).l,a1
0001A8D8 4EB9 0000 B962             		jsr	AnimateSprite
0001A8DE 7003                       		moveq	#3,d0
0001A8E0 C028 0022                  		and.b	$22(a0),d0
0001A8E4 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A8EA 8128 0001                  		or.b	d0,1(a0)
0001A8EE 4EF9 0000 E902             		jmp	DisplaySprite
0001A8F4                            ; ===========================================================================
0001A8F4 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001A8F6 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001A8F8 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001A8FA 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001A8FC 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001A8FE 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001A900                            ; ===========================================================================
0001A900                            
0001A900                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001A900 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A906 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001A90C 6400                       		bcc.s	loc_189CA
0001A90E 5428 0025                  		addq.b	#2,$25(a0)
0001A912                            
0001A912                            loc_189CA:
0001A912 6100 EEE8                  		bsr.w	BossMove
0001A916 1028 003F                  		move.b	$3F(a0),d0
0001A91A 5428 003F                  		addq.b	#2,$3F(a0)
0001A91E 4EB9 0000 29CC             		jsr	(CalcSine).l
0001A924 EC40                       		asr.w	#6,d0
0001A926 D068 0038                  		add.w	$38(a0),d0
0001A92A 3140 000C                  		move.w	d0,$C(a0)
0001A92E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A934 6000                       		bra.s	loc_189FE
0001A936                            ; ===========================================================================
0001A936                            
0001A936                            loc_189EE:
0001A936 6100 EEC4                  		bsr.w	BossMove
0001A93A 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A940 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A946                            
0001A946                            loc_189FE:
0001A946 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A94C 6400                       		bcc.s	locret_18A44
0001A94E 4A28 0022                  		tst.b	$22(a0)
0001A952 6B00                       		bmi.s	loc_18A46
0001A954 4A28 0020                  		tst.b	$20(a0)
0001A958 6600                       		bne.s	locret_18A44
0001A95A 4A28 003E                  		tst.b	$3E(a0)
0001A95E 6600                       		bne.s	loc_18A28
0001A960 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A966 303C 00AC                  		move.w	#$AC,d0
0001A96A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A970                            
0001A970                            loc_18A28:
0001A970 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A974 7000                       		moveq	#0,d0
0001A976 4A51                       		tst.w	(a1)
0001A978 6600                       		bne.s	loc_18A36
0001A97A 303C 0EEE                  		move.w	#$EEE,d0
0001A97E                            
0001A97E                            loc_18A36:
0001A97E 3280                       		move.w	d0,(a1)
0001A980 5328 003E                  		subq.b	#1,$3E(a0)
0001A984 6600                       		bne.s	locret_18A44
0001A986 117C 000F 0020             		move.b	#$F,$20(a0)
0001A98C                            
0001A98C                            locret_18A44:
0001A98C 4E75                       		rts	
0001A98E                            ; ===========================================================================
0001A98E                            
0001A98E                            loc_18A46:
0001A98E 7064                       		moveq	#100,d0
0001A990 6100 0000                  		bsr.w	AddPoints
0001A994 117C 0006 0025             		move.b	#6,$25(a0)
0001A99A 117C 0078 003C             		move.b	#$78,$3C(a0)
0001A9A0 4268 0010                  		clr.w	$10(a0)
0001A9A4 4E75                       		rts	
0001A9A6                            ; ===========================================================================
0001A9A6                            
0001A9A6                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001A9A6 3028 0030                  		move.w	$30(a0),d0
0001A9AA 317C 0200 0010             		move.w	#$200,$10(a0)
0001A9B0 0828 0000 0022             		btst	#0,$22(a0)
0001A9B6 6600                       		bne.s	loc_18A7C
0001A9B8 4468 0010                  		neg.w	$10(a0)
0001A9BC 0C40 2008                  		cmpi.w	#$2008,d0
0001A9C0 6E00                       		bgt.s	loc_18A88
0001A9C2 6000                       		bra.s	loc_18A82
0001A9C4                            ; ===========================================================================
0001A9C4                            
0001A9C4                            loc_18A7C:
0001A9C4 0C40 2138                  		cmpi.w	#$2138,d0
0001A9C8 6D00                       		blt.s	loc_18A88
0001A9CA                            
0001A9CA                            loc_18A82:
0001A9CA 0868 0000 0022             		bchg	#0,$22(a0)
0001A9D0                            
0001A9D0                            loc_18A88:
0001A9D0 3028 0008                  		move.w	8(a0),d0
0001A9D4 72FF                       		moveq	#-1,d1
0001A9D6 7402                       		moveq	#2,d2
0001A9D8 45E8 002A                  		lea	$2A(a0),a2
0001A9DC 7828                       		moveq	#$28,d4
0001A9DE 4A68 0010                  		tst.w	$10(a0)
0001A9E2 6A00                       		bpl.s	loc_18A9E
0001A9E4 4444                       		neg.w	d4
0001A9E6                            
0001A9E6                            loc_18A9E:
0001A9E6 321A                       		move.w	(a2)+,d1
0001A9E8 2641                       		movea.l	d1,a3
0001A9EA 082B 0003 0022             		btst	#3,$22(a3)
0001A9F0 6600                       		bne.s	loc_18AB4
0001A9F2 362B 0008                  		move.w	8(a3),d3
0001A9F6 D644                       		add.w	d4,d3
0001A9F8 9640                       		sub.w	d0,d3
0001A9FA 6700                       		beq.s	loc_18AC0
0001A9FC                            
0001A9FC                            loc_18AB4:
0001A9FC 51CA FFE8                  		dbf	d2,loc_18A9E
0001AA00                            
0001AA00 1142 0028                  		move.b	d2,$28(a0)
0001AA04 6000 FF0C                  		bra.w	loc_189CA
0001AA08                            ; ===========================================================================
0001AA08                            
0001AA08                            loc_18AC0:
0001AA08 1142 0028                  		move.b	d2,$28(a0)
0001AA0C 5428 0025                  		addq.b	#2,$25(a0)
0001AA10 117C 0028 003C             		move.b	#$28,$3C(a0)
0001AA16 6000 FEFA                  		bra.w	loc_189CA
0001AA1A                            ; ===========================================================================
0001AA1A                            
0001AA1A                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001AA1A 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001AA20 6600                       		bne.s	loc_18B36
0001AA22 70FF                       		moveq	#-1,d0
0001AA24 1028 0028                  		move.b	$28(a0),d0
0001AA28 4880                       		ext.w	d0
0001AA2A 6B00                       		bmi.s	loc_18B40
0001AA2C 5540                       		subq.w	#2,d0
0001AA2E 4440                       		neg.w	d0
0001AA30 D040                       		add.w	d0,d0
0001AA32 43E8 002A                  		lea	$2A(a0),a1
0001AA36 3031 0000                  		move.w	(a1,d0.w),d0
0001AA3A 2440                       		movea.l	d0,a2
0001AA3C 43F8 D040                  		lea	($FFFFD040).w,a1
0001AA40 723E                       		moveq	#$3E,d1
0001AA42                            
0001AA42                            loc_18AFA:
0001AA42 B0A9 003C                  		cmp.l	$3C(a1),d0
0001AA46 6700                       		beq.s	loc_18B40
0001AA48 D2FC 0040                  		adda.w	#$40,a1
0001AA4C 51C9 FFF4                  		dbf	d1,loc_18AFA
0001AA50                            
0001AA50 2F08                       		move.l	a0,-(sp)
0001AA52 41D2                       		lea	(a2),a0
0001AA54 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001AA5A 205F                       		movea.l	(sp)+,a0
0001AA5C 6600                       		bne.s	loc_18B40
0001AA5E 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001AA62 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA68 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AA6E 0669 0020 000C             		addi.w	#$20,$C(a1)
0001AA74 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001AA7A 234A 003C                  		move.l	a2,$3C(a1)
0001AA7E                            
0001AA7E                            loc_18B36:
0001AA7E 5328 003C                  		subq.b	#1,$3C(a0)
0001AA82 6700                       		beq.s	loc_18B40
0001AA84 6000 FEC0                  		bra.w	loc_189FE
0001AA88                            ; ===========================================================================
0001AA88                            
0001AA88                            loc_18B40:
0001AA88 5528 0025                  		subq.b	#2,$25(a0)
0001AA8C 6000 FE84                  		bra.w	loc_189CA
0001AA90                            ; ===========================================================================
0001AA90                            
0001AA90                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001AA90 5328 003C                  		subq.b	#1,$3C(a0)
0001AA94 6B00                       		bmi.s	loc_18B52
0001AA96 6000 ED16                  		bra.w	BossDefeated
0001AA9A                            ; ===========================================================================
0001AA9A                            
0001AA9A                            loc_18B52:
0001AA9A 5428 0025                  		addq.b	#2,$25(a0)
0001AA9E 4268 0012                  		clr.w	$12(a0)
0001AAA2 08E8 0000 0022             		bset	#0,$22(a0)
0001AAA8 08A8 0007 0022             		bclr	#7,$22(a0)
0001AAAE 4268 0010                  		clr.w	$10(a0)
0001AAB2 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001AAB8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AABC 6600                       		bne.s	loc_18B7C
0001AABE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AAC4                            
0001AAC4                            loc_18B7C:
0001AAC4 6000 FE80                  		bra.w	loc_189FE
0001AAC8                            ; ===========================================================================
0001AAC8                            
0001AAC8                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001AAC8 5228 003C                  		addq.b	#1,$3C(a0)
0001AACC 6700                       		beq.s	loc_18B90
0001AACE 6A00                       		bpl.s	loc_18B96
0001AAD0 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AAD6 6000                       		bra.s	loc_18BC2
0001AAD8                            ; ===========================================================================
0001AAD8                            
0001AAD8                            loc_18B90:
0001AAD8 4268 0012                  		clr.w	$12(a0)
0001AADC 6000                       		bra.s	loc_18BC2
0001AADE                            ; ===========================================================================
0001AADE                            
0001AADE                            loc_18B96:
0001AADE 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001AAE4 6500                       		bcs.s	loc_18BAE
0001AAE6 6700                       		beq.s	loc_18BB4
0001AAE8 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001AAEE 6500                       		bcs.s	loc_18BC2
0001AAF0 5428 0025                  		addq.b	#2,$25(a0)
0001AAF4 6000                       		bra.s	loc_18BC2
0001AAF6                            ; ===========================================================================
0001AAF6                            
0001AAF6                            loc_18BAE:
0001AAF6 5168 0012                  		subq.w	#8,$12(a0)
0001AAFA 6000                       		bra.s	loc_18BC2
0001AAFC                            ; ===========================================================================
0001AAFC                            
0001AAFC                            loc_18BB4:
0001AAFC 4268 0012                  		clr.w	$12(a0)
0001AB00 303C 0084                  		move.w	#$84,d0
0001AB04 4EB9 0000 11F0             		jsr	(PlaySound).l	; play SLZ music
0001AB0A                            
0001AB0A                            loc_18BC2:
0001AB0A 6000 FE2A                  		bra.w	loc_189EE
0001AB0E                            ; ===========================================================================
0001AB0E                            
0001AB0E                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001AB0E 317C 0400 0010             		move.w	#$400,$10(a0)
0001AB14 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AB1A 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001AB20 6400                       		bcc.s	loc_18BE0
0001AB22 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AB26 6000                       		bra.s	loc_18BE8
0001AB28                            ; ===========================================================================
0001AB28                            
0001AB28                            loc_18BE0:
0001AB28 4A28 0001                  		tst.b	1(a0)
0001AB2C 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001AB30                            
0001AB30                            loc_18BE8:
0001AB30 6100 ECCA                  		bsr.w	BossMove
0001AB34 6000 FDDC                  		bra.w	loc_189CA
0001AB38                            ; ===========================================================================
0001AB38                            
0001AB38                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001AB38 7000                       		moveq	#0,d0
0001AB3A 7201                       		moveq	#1,d1
0001AB3C 2268 0034                  		movea.l	$34(a0),a1
0001AB40 1029 0025                  		move.b	$25(a1),d0
0001AB44 0C00 0006                  		cmpi.b	#6,d0
0001AB48 6B00                       		bmi.s	loc_18C06
0001AB4A 720A                       		moveq	#$A,d1
0001AB4C 6000                       		bra.s	loc_18C1A
0001AB4E                            ; ===========================================================================
0001AB4E                            
0001AB4E                            loc_18C06:
0001AB4E 4A29 0020                  		tst.b	$20(a1)
0001AB52 6600                       		bne.s	loc_18C10
0001AB54 7205                       		moveq	#5,d1
0001AB56 6000                       		bra.s	loc_18C1A
0001AB58                            ; ===========================================================================
0001AB58                            
0001AB58                            loc_18C10:
0001AB58 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AB5E 6500                       		bcs.s	loc_18C1A
0001AB60 7204                       		moveq	#4,d1
0001AB62                            
0001AB62                            loc_18C1A:
0001AB62 1141 001C                  		move.b	d1,$1C(a0)
0001AB66 0C00 000A                  		cmpi.b	#$A,d0
0001AB6A 6600                       		bne.s	loc_18C32
0001AB6C 117C 0006 001C             		move.b	#6,$1C(a0)
0001AB72 4A28 0001                  		tst.b	1(a0)
0001AB76 6A00 FC84                  		bpl.w	Obj7A_Delete
0001AB7A                            
0001AB7A                            loc_18C32:
0001AB7A 6000                       		bra.s	loc_18C6C
0001AB7C                            ; ===========================================================================
0001AB7C                            
0001AB7C                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001AB7C 117C 0008 001C             		move.b	#8,$1C(a0)
0001AB82 2268 0034                  		movea.l	$34(a0),a1
0001AB86 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AB8C 6600                       		bne.s	loc_18C56
0001AB8E 4A28 0001                  		tst.b	1(a0)
0001AB92 6A00 FC68                  		bpl.w	Obj7A_Delete
0001AB96 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AB9C 6000                       		bra.s	loc_18C6C
0001AB9E                            ; ===========================================================================
0001AB9E                            
0001AB9E                            loc_18C56:
0001AB9E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001ABA4 6E00                       		bgt.s	loc_18C6C
0001ABA6 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001ABAC 6D00                       		blt.s	loc_18C6C
0001ABAE 117C 0007 001C             		move.b	#7,$1C(a0)
0001ABB4                            
0001ABB4                            loc_18C6C:
0001ABB4 43F9 0001 9C0C             		lea	(Ani_Eggman).l,a1
0001ABBA 4EB9 0000 B962             		jsr	AnimateSprite
0001ABC0                            
0001ABC0                            loc_18C78:
0001ABC0 2268 0034                  		movea.l	$34(a0),a1
0001ABC4 3169 0008 0008             		move.w	8(a1),8(a0)
0001ABCA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ABD0 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ABD6 7003                       		moveq	#3,d0
0001ABD8 C028 0022                  		and.b	$22(a0),d0
0001ABDC 0228 00FC 0001             		andi.b	#-4,1(a0)
0001ABE2 8128 0001                  		or.b	d0,1(a0)
0001ABE6 4EF9 0000 E902             		jmp	DisplaySprite
0001ABEC                            ; ===========================================================================
0001ABEC                            
0001ABEC                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001ABEC 2268 0034                  		movea.l	$34(a0),a1
0001ABF0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001ABF6 6600                       		bne.s	loc_18CB8
0001ABF8 4A28 0001                  		tst.b	1(a0)
0001ABFC 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001AC00                            
0001AC00                            loc_18CB8:
0001AC00 217C 0001 9D24 0004        		move.l	#Map_BossItems,4(a0)
0001AC08 317C 246C 0002             		move.w	#$246C,2(a0)
0001AC0E 117C 0003 001A             		move.b	#3,$1A(a0)
0001AC14 60AA                       		bra.s	loc_18C78
0001AC16                            ; ===========================================================================
0001AC16                            ; ---------------------------------------------------------------------------
0001AC16                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001AC16                            ; ---------------------------------------------------------------------------
0001AC16                            
0001AC16                            Obj7B:					; XREF: Obj_Index
0001AC16 7000                       		moveq	#0,d0
0001AC18 1028 0024                  		move.b	$24(a0),d0
0001AC1C 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001AC20 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001AC24 3028 0030                  		move.w	$30(a0),d0
0001AC28 0240 FF80                  		andi.w	#$FF80,d0
0001AC2C 3238 F700                  		move.w	($FFFFF700).w,d1
0001AC30 0441 0080                  		subi.w	#$80,d1
0001AC34 0241 FF80                  		andi.w	#$FF80,d1
0001AC38 9041                       		sub.w	d1,d0
0001AC3A 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001AC3E 0C40 0280                  		cmpi.w	#$280,d0
0001AC42 6300                       		bls.s	Obj7B_NoDel
0001AC44                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
0001AC44                            	;	beq.s	Obj7B_Delete		; if it's zero, don't remember object
0001AC44                            	;	movea.w	d0,a2	; load address into a2
0001AC44                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001AC44                            
0001AC44                            Obj7B_Delete:
0001AC44 4EF9 0000 E952             		jmp	DeleteObject	; and delete object
0001AC4A                            
0001AC4A                            Obj7B_NoDel:
0001AC4A 4EF9 0000 E902             		jmp	DisplaySprite
0001AC50                            ; ===========================================================================
0001AC50 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001AC52 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001AC54 0000                       		dc.w loc_18DC6-Obj7B_Index
0001AC56 0000                       		dc.w loc_18EAA-Obj7B_Index
0001AC58 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001AC5A 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001AC5C                            ; ===========================================================================
0001AC5C                            
0001AC5C                            Obj7B_Main:				; XREF: Obj7B_Index
0001AC5C 217C 0001 32FE 0004        		move.l	#Map_obj5Ea,4(a0)
0001AC64 317C 0518 0002             		move.w	#$518,2(a0)
0001AC6A 117C 0001 001A             		move.b	#1,$1A(a0)
0001AC70 0028 0004 0001             		ori.b	#4,1(a0)
0001AC76 117C 0004 0018             		move.b	#4,$18(a0)
0001AC7C 117C 008B 0020             		move.b	#$8B,$20(a0)
0001AC82 117C 000C 0019             		move.b	#$C,$19(a0)
0001AC88 2268 003C                  		movea.l	$3C(a0),a1
0001AC8C 3169 0008 0030             		move.w	8(a1),$30(a0)
0001AC92 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001AC98 08E8 0000 0022             		bset	#0,$22(a0)
0001AC9E 3028 0008                  		move.w	8(a0),d0
0001ACA2 B069 0008                  		cmp.w	8(a1),d0
0001ACA6 6E00                       		bgt.s	loc_18D68
0001ACA8 08A8 0000 0022             		bclr	#0,$22(a0)
0001ACAE 117C 0002 003A             		move.b	#2,$3A(a0)
0001ACB4                            
0001ACB4                            loc_18D68:
0001ACB4 5428 0024                  		addq.b	#2,$24(a0)
0001ACB8                            
0001ACB8                            Obj7B_Fall:				; XREF: Obj7B_Index
0001ACB8 4EB9 0000 E8C8             		jsr	ObjectFall
0001ACBE 2268 003C                  		movea.l	$3C(a0),a1
0001ACC2 45F9 0000 0000             		lea	(word_19018).l,a2
0001ACC8 7000                       		moveq	#0,d0
0001ACCA 1029 001A                  		move.b	$1A(a1),d0
0001ACCE 3228 0008                  		move.w	8(a0),d1
0001ACD2 9268 0030                  		sub.w	$30(a0),d1
0001ACD6 6400                       		bcc.s	loc_18D8E
0001ACD8 5440                       		addq.w	#2,d0
0001ACDA                            
0001ACDA                            loc_18D8E:
0001ACDA D040                       		add.w	d0,d0
0001ACDC 3228 0034                  		move.w	$34(a0),d1
0001ACE0 D272 0000                  		add.w	(a2,d0.w),d1
0001ACE4 B268 000C                  		cmp.w	$C(a0),d1
0001ACE8 6E00                       		bgt.s	locret_18DC4
0001ACEA 2268 003C                  		movea.l	$3C(a0),a1
0001ACEE 7202                       		moveq	#2,d1
0001ACF0 0828 0000 0022             		btst	#0,$22(a0)
0001ACF6 6700                       		beq.s	loc_18DAE
0001ACF8 7200                       		moveq	#0,d1
0001ACFA                            
0001ACFA                            loc_18DAE:
0001ACFA 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001AD00 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001AD06 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AD0C 6000 0000                  		bra.w	loc_18FA2
0001AD10                            ; ===========================================================================
0001AD10                            
0001AD10                            locret_18DC4:
0001AD10 4E75                       		rts	
0001AD12                            ; ===========================================================================
0001AD12                            
0001AD12                            loc_18DC6:				; XREF: Obj7B_Index
0001AD12 2268 003C                  		movea.l	$3C(a0),a1
0001AD16 7000                       		moveq	#0,d0
0001AD18 1028 003A                  		move.b	$3A(a0),d0
0001AD1C 9029 003A                  		sub.b	$3A(a1),d0
0001AD20 6700                       		beq.s	loc_18E2A
0001AD22 6400                       		bcc.s	loc_18DDA
0001AD24 4400                       		neg.b	d0
0001AD26                            
0001AD26                            loc_18DDA:
0001AD26 323C F7E8                  		move.w	#-$818,d1
0001AD2A 343C FEEC                  		move.w	#-$114,d2
0001AD2E 0C00 0001                  		cmpi.b	#1,d0
0001AD32 6700                       		beq.s	loc_18E00
0001AD34 323C F6A0                  		move.w	#-$960,d1
0001AD38 343C FF0C                  		move.w	#-$F4,d2
0001AD3C 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001AD42 6D00                       		blt.s	loc_18E00
0001AD44 323C F5E0                  		move.w	#-$A20,d1
0001AD48 343C FF80                  		move.w	#-$80,d2
0001AD4C                            
0001AD4C                            loc_18E00:
0001AD4C 3141 0012                  		move.w	d1,$12(a0)
0001AD50 3142 0010                  		move.w	d2,$10(a0)
0001AD54 3028 0008                  		move.w	8(a0),d0
0001AD58 9068 0030                  		sub.w	$30(a0),d0
0001AD5C 6400                       		bcc.s	loc_18E16
0001AD5E 4468 0010                  		neg.w	$10(a0)
0001AD62                            
0001AD62                            loc_18E16:
0001AD62 117C 0001 001A             		move.b	#1,$1A(a0)
0001AD68 317C 0020 0028             		move.w	#$20,$28(a0)
0001AD6E 5428 0024                  		addq.b	#2,$24(a0)
0001AD72 6000 0000                  		bra.w	loc_18EAA
0001AD76                            ; ===========================================================================
0001AD76                            
0001AD76                            loc_18E2A:				; XREF: loc_18DC6
0001AD76 45F9 0000 0000             		lea	(word_19018).l,a2
0001AD7C 7000                       		moveq	#0,d0
0001AD7E 1029 001A                  		move.b	$1A(a1),d0
0001AD82 343C 0028                  		move.w	#$28,d2
0001AD86 3228 0008                  		move.w	8(a0),d1
0001AD8A 9268 0030                  		sub.w	$30(a0),d1
0001AD8E 6400                       		bcc.s	loc_18E48
0001AD90 4442                       		neg.w	d2
0001AD92 5440                       		addq.w	#2,d0
0001AD94                            
0001AD94                            loc_18E48:
0001AD94 D040                       		add.w	d0,d0
0001AD96 3228 0034                  		move.w	$34(a0),d1
0001AD9A D272 0000                  		add.w	(a2,d0.w),d1
0001AD9E 3141 000C                  		move.w	d1,$C(a0)
0001ADA2 D468 0030                  		add.w	$30(a0),d2
0001ADA6 3142 0008                  		move.w	d2,8(a0)
0001ADAA 4268 000E                  		clr.w	$E(a0)
0001ADAE 4268 000A                  		clr.w	$A(a0)
0001ADB2 5368 0028                  		subq.w	#1,$28(a0)
0001ADB6 6600                       		bne.s	loc_18E7A
0001ADB8 317C 0020 0028             		move.w	#$20,$28(a0)
0001ADBE 117C 0008 0024             		move.b	#8,$24(a0)
0001ADC4 4E75                       		rts	
0001ADC6                            ; ===========================================================================
0001ADC6                            
0001ADC6                            loc_18E7A:
0001ADC6 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001ADCC 6600                       		bne.s	loc_18E88
0001ADCE 117C 0005 001F             		move.b	#5,$1F(a0)
0001ADD4                            
0001ADD4                            loc_18E88:
0001ADD4 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001ADDA 6600                       		bne.s	loc_18E96
0001ADDC 117C 0002 001F             		move.b	#2,$1F(a0)
0001ADE2                            
0001ADE2                            loc_18E96:
0001ADE2 5328 001E                  		subq.b	#1,$1E(a0)
0001ADE6 6E00                       		bgt.s	locret_18EA8
0001ADE8 0868 0000 001A             		bchg	#0,$1A(a0)
0001ADEE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001ADF4                            
0001ADF4                            locret_18EA8:
0001ADF4 4E75                       		rts	
0001ADF6                            ; ===========================================================================
0001ADF6                            
0001ADF6                            loc_18EAA:				; XREF: Obj7B_Index
0001ADF6 43F8 D040                  		lea	($FFFFD040).w,a1
0001ADFA 707A                       		moveq	#$7A,d0
0001ADFC 7240                       		moveq	#$40,d1
0001ADFE 743E                       		moveq	#$3E,d2
0001AE00                            
0001AE00                            loc_18EB4:
0001AE00 B011                       		cmp.b	(a1),d0
0001AE02 6700                       		beq.s	loc_18EC0
0001AE04 D2C1                       		adda.w	d1,a1
0001AE06 51CA FFF8                  		dbf	d2,loc_18EB4
0001AE0A                            
0001AE0A 6000                       		bra.s	loc_18F38
0001AE0C                            ; ===========================================================================
0001AE0C                            
0001AE0C                            loc_18EC0:
0001AE0C 3029 0008                  		move.w	8(a1),d0
0001AE10 3229 000C                  		move.w	$C(a1),d1
0001AE14 3428 0008                  		move.w	8(a0),d2
0001AE18 3628 000C                  		move.w	$C(a0),d3
0001AE1C 45FA 0000                  		lea	byte_19022(pc),a2
0001AE20 47FA 0000                  		lea	byte_19026(pc),a3
0001AE24 181A                       		move.b	(a2)+,d4
0001AE26 4884                       		ext.w	d4
0001AE28 D044                       		add.w	d4,d0
0001AE2A 181B                       		move.b	(a3)+,d4
0001AE2C 4884                       		ext.w	d4
0001AE2E D444                       		add.w	d4,d2
0001AE30 B440                       		cmp.w	d0,d2
0001AE32 6500                       		bcs.s	loc_18F38
0001AE34 181A                       		move.b	(a2)+,d4
0001AE36 4884                       		ext.w	d4
0001AE38 D044                       		add.w	d4,d0
0001AE3A 181B                       		move.b	(a3)+,d4
0001AE3C 4884                       		ext.w	d4
0001AE3E D444                       		add.w	d4,d2
0001AE40 B042                       		cmp.w	d2,d0
0001AE42 6500                       		bcs.s	loc_18F38
0001AE44 181A                       		move.b	(a2)+,d4
0001AE46 4884                       		ext.w	d4
0001AE48 D244                       		add.w	d4,d1
0001AE4A 181B                       		move.b	(a3)+,d4
0001AE4C 4884                       		ext.w	d4
0001AE4E D644                       		add.w	d4,d3
0001AE50 B641                       		cmp.w	d1,d3
0001AE52 6500                       		bcs.s	loc_18F38
0001AE54 181A                       		move.b	(a2)+,d4
0001AE56 4884                       		ext.w	d4
0001AE58 D244                       		add.w	d4,d1
0001AE5A 181B                       		move.b	(a3)+,d4
0001AE5C 4884                       		ext.w	d4
0001AE5E D644                       		add.w	d4,d3
0001AE60 B243                       		cmp.w	d3,d1
0001AE62 6500                       		bcs.s	loc_18F38
0001AE64 5428 0024                  		addq.b	#2,$24(a0)
0001AE68 4268 0028                  		clr.w	$28(a0)
0001AE6C 4229 0020                  		clr.b	$20(a1)
0001AE70 5329 0021                  		subq.b	#1,$21(a1)
0001AE74 6600                       		bne.s	loc_18F38
0001AE76 08E9 0007 0022             		bset	#7,$22(a1)
0001AE7C 4268 0010                  		clr.w	$10(a0)
0001AE80 4268 0012                  		clr.w	$12(a0)
0001AE84                            
0001AE84                            loc_18F38:
0001AE84 4A68 0012                  		tst.w	$12(a0)
0001AE88 6A00                       		bpl.s	loc_18F5C
0001AE8A 4EB9 0000 E8C8             		jsr	ObjectFall
0001AE90 3028 0034                  		move.w	$34(a0),d0
0001AE94 0440 002F                  		subi.w	#$2F,d0
0001AE98 B068 000C                  		cmp.w	$C(a0),d0
0001AE9C 6E00                       		bgt.s	loc_18F58
0001AE9E 4EB9 0000 E8C8             		jsr	ObjectFall
0001AEA4                            
0001AEA4                            loc_18F58:
0001AEA4 6000 FF20                  		bra.w	loc_18E7A
0001AEA8                            ; ===========================================================================
0001AEA8                            
0001AEA8                            loc_18F5C:
0001AEA8 4EB9 0000 E8C8             		jsr	ObjectFall
0001AEAE 2268 003C                  		movea.l	$3C(a0),a1
0001AEB2 45F9 0000 0000             		lea	(word_19018).l,a2
0001AEB8 7000                       		moveq	#0,d0
0001AEBA 1029 001A                  		move.b	$1A(a1),d0
0001AEBE 3228 0008                  		move.w	8(a0),d1
0001AEC2 9268 0030                  		sub.w	$30(a0),d1
0001AEC6 6400                       		bcc.s	loc_18F7E
0001AEC8 5440                       		addq.w	#2,d0
0001AECA                            
0001AECA                            loc_18F7E:
0001AECA D040                       		add.w	d0,d0
0001AECC 3228 0034                  		move.w	$34(a0),d1
0001AED0 D272 0000                  		add.w	(a2,d0.w),d1
0001AED4 B268 000C                  		cmp.w	$C(a0),d1
0001AED8 6ECA                       		bgt.s	loc_18F58
0001AEDA 2268 003C                  		movea.l	$3C(a0),a1
0001AEDE 7202                       		moveq	#2,d1
0001AEE0 4A68 0010                  		tst.w	$10(a0)
0001AEE4 6B00                       		bmi.s	loc_18F9C
0001AEE6 7200                       		moveq	#0,d1
0001AEE8                            
0001AEE8                            loc_18F9C:
0001AEE8 317C 0000 0028             		move.w	#0,$28(a0)
0001AEEE                            
0001AEEE                            loc_18FA2:
0001AEEE 1341 003A                  		move.b	d1,$3A(a1)
0001AEF2 1141 003A                  		move.b	d1,$3A(a0)
0001AEF6 B229 001A                  		cmp.b	$1A(a1),d1
0001AEFA 6700                       		beq.s	loc_19008
0001AEFC 08A9 0003 0022             		bclr	#3,$22(a1)
0001AF02 6700                       		beq.s	loc_19008
0001AF04 4229 0025                  		clr.b	$25(a1)
0001AF08 137C 0002 0024             		move.b	#2,$24(a1)
0001AF0E 45F8 D000                  		lea	($FFFFD000).w,a2
0001AF12 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001AF18 446A 0012                  		neg.w	$12(a2)
0001AF1C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001AF22 6600                       		bne.s	loc_18FDC
0001AF24 E0EA 0012                  		asr	$12(a2)
0001AF28                            
0001AF28                            loc_18FDC:
0001AF28 08EA 0001 0022             		bset	#1,$22(a2)
0001AF2E 08AA 0003 0022             		bclr	#3,$22(a2)
0001AF34 422A 003C                  		clr.b	$3C(a2)
0001AF38 2F08                       		move.l	a0,-(sp)
0001AF3A 41D2                       		lea	(a2),a0
0001AF3C 4EBA 9E68                  		jsr	Obj01_ChkRoll
0001AF40 205F                       		movea.l	(sp)+,a0
0001AF42 157C 0002 0024             		move.b	#2,$24(a2)
0001AF48 303C 00CC                  		move.w	#$CC,d0
0001AF4C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001AF52                            
0001AF52                            loc_19008:
0001AF52 4268 0010                  		clr.w	$10(a0)
0001AF56 4268 0012                  		clr.w	$12(a0)
0001AF5A 5428 0024                  		addq.b	#2,$24(a0)
0001AF5E 6000 FE66                  		bra.w	loc_18E7A
0001AF62                            ; ===========================================================================
0001AF62 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001AF6C                            		even
0001AF6C E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001AF70                            		even
0001AF70 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001AF74                            		even
0001AF74                            ; ===========================================================================
0001AF74                            
0001AF74                            Obj7B_Explode:				; XREF: Obj7B_Index
0001AF74 10BC 003F                  		move.b	#$3F,(a0)
0001AF78 4228 0024                  		clr.b	$24(a0)
0001AF7C 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001AF82 6700                       		beq.s	Obj7B_MakeFrag
0001AF84 4E75                       		rts	
0001AF86                            ; ===========================================================================
0001AF86                            
0001AF86                            Obj7B_MakeFrag:
0001AF86 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001AF8C 7203                       		moveq	#3,d1
0001AF8E 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001AF92                            
0001AF92                            Obj7B_Loop:
0001AF92 4EB9 0000 F058             		jsr	SingleObjLoad
0001AF98 6600                       		bne.s	loc_1909A
0001AF9A 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001AF9E 137C 000A 0024             		move.b	#$A,$24(a1)
0001AFA4 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001AFAC 137C 0003 0018             		move.b	#3,$18(a1)
0001AFB2 337C 0518 0002             		move.w	#$518,2(a1)
0001AFB8 3368 0008 0008             		move.w	8(a0),8(a1)
0001AFBE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AFC4 335A 0010                  		move.w	(a2)+,$10(a1)
0001AFC8 335A 0012                  		move.w	(a2)+,$12(a1)
0001AFCC 137C 0098 0020             		move.b	#$98,$20(a1)
0001AFD2 0029 0004 0001             		ori.b	#4,1(a1)
0001AFD8 08E9 0007 0001             		bset	#7,1(a1)
0001AFDE 137C 000C 0019             		move.b	#$C,$19(a1)
0001AFE4                            
0001AFE4                            loc_1909A:
0001AFE4 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001AFE8                            
0001AFE8 4E75                       		rts	
0001AFEA                            ; ===========================================================================
0001AFEA FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001AFEE FF60 FDC0                  		dc.w $FF60, $FDC0
0001AFF2 0100 FCC0                  		dc.w $100, $FCC0
0001AFF6 00A0 FDC0                  		dc.w $A0, $FDC0
0001AFFA                            ; ===========================================================================
0001AFFA                            
0001AFFA                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001AFFA 4EB9 0000 E8E8             		jsr	SpeedToPos
0001B000 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B006 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001B00C 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B012 7004                       		moveq	#4,d0
0001B014 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B018 E448                       		lsr.w	#2,d0
0001B01A 1140 001A                  		move.b	d0,$1A(a0)
0001B01E 4A28 0001                  		tst.b	1(a0)
0001B022 6A00 F7D8                  		bpl.w	Obj7A_Delete
0001B026 4E75                       		rts	
0001B028                            ; ===========================================================================
0001B028                            ; ---------------------------------------------------------------------------
0001B028                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B028                            ; ---------------------------------------------------------------------------
0001B028                            Map_obj7B:
0001B028                            	include "_maps\obj7B.asm"
0001B028                            ; ---------------------------------------------------------------------------
0001B028                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B028                            ; ---------------------------------------------------------------------------
0001B028 0000                       		dc.w byte_190E2-Map_obj7B
0001B02A 0000                       		dc.w byte_190E8-Map_obj7B
0001B02C 01                         byte_190E2:	dc.b 1
0001B02D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B032 01                         byte_190E8:	dc.b 1
0001B033 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B038                            		even
0001B038                            		even
0001B038                            
0001B038                            ; ===========================================================================
0001B038                            ; ---------------------------------------------------------------------------
0001B038                            ; Object 75 - Eggman (SYZ)
0001B038                            ; ---------------------------------------------------------------------------
0001B038                            
0001B038                            Obj75:					; XREF: Obj_Index
0001B038 7000                       		moveq	#0,d0
0001B03A 1028 0024                  		move.b	$24(a0),d0
0001B03E 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001B042 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001B046                            ; ===========================================================================
0001B046 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001B048 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001B04A 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001B04C 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001B04E 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001B050                            
0001B050 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001B053 0401 05                    		dc.b 4,	1, 5
0001B056 0607 05                    		dc.b 6,	7, 5
0001B059 0800 05                    		dc.b 8,	0, 5
0001B05C                            ; ===========================================================================
0001B05C                            
0001B05C                            Obj75_Main:				; XREF: Obj75_Index
0001B05C 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001B062 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001B068 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B06E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B074 117C 000F 0020             		move.b	#$F,$20(a0)
0001B07A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B080 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001B084 2248                       		movea.l	a0,a1
0001B086 7203                       		moveq	#3,d1
0001B088 6000                       		bra.s	Obj75_LoadBoss
0001B08A                            ; ===========================================================================
0001B08A                            
0001B08A                            Obj75_Loop:
0001B08A 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001B090 6600                       		bne.s	Obj75_ShipMain
0001B092 12BC 0075                  		move.b	#$75,(a1)
0001B096 3368 0008 0008             		move.w	8(a0),8(a1)
0001B09C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B0A2                            
0001B0A2                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001B0A2 08A8 0000 0022             		bclr	#0,$22(a0)
0001B0A8 4229 0025                  		clr.b	$25(a1)
0001B0AC 135A 0024                  		move.b	(a2)+,$24(a1)
0001B0B0 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B0B4 135A 0018                  		move.b	(a2)+,$18(a1)
0001B0B8 237C 0001 9C5C 0004        		move.l	#Map_Eggman,4(a1)
0001B0C0 337C 0400 0002             		move.w	#$400,2(a1)
0001B0C6 137C 0004 0001             		move.b	#4,1(a1)
0001B0CC 137C 0020 0019             		move.b	#$20,$19(a1)
0001B0D2 2348 0034                  		move.l	a0,$34(a1)
0001B0D6 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001B0DA                            
0001B0DA                            Obj75_ShipMain:				; XREF: Obj75_Index
0001B0DA 7000                       		moveq	#0,d0
0001B0DC 1028 0025                  		move.b	$25(a0),d0
0001B0E0 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001B0E4 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001B0E8 43F9 0001 9C0C             		lea	(Ani_Eggman).l,a1
0001B0EE 4EB9 0000 B962             		jsr	AnimateSprite
0001B0F4 7003                       		moveq	#3,d0
0001B0F6 C028 0022                  		and.b	$22(a0),d0
0001B0FA 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B100 8128 0001                  		or.b	d0,1(a0)
0001B104 4EF9 0000 E902             		jmp	DisplaySprite
0001B10A                            ; ===========================================================================
0001B10A 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001B10E 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001B112 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001B116                            ; ===========================================================================
0001B116                            
0001B116                            loc_191CC:				; XREF: Obj75_ShipIndex
0001B116 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B11C 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001B122 6400                       		bcc.s	loc_191DE
0001B124 5428 0025                  		addq.b	#2,$25(a0)
0001B128                            
0001B128                            loc_191DE:
0001B128 1028 003F                  		move.b	$3F(a0),d0
0001B12C 5428 003F                  		addq.b	#2,$3F(a0)
0001B130 4EB9 0000 29CC             		jsr	(CalcSine).l
0001B136 E440                       		asr.w	#2,d0
0001B138 3140 0012                  		move.w	d0,$12(a0)
0001B13C                            
0001B13C                            loc_191F2:
0001B13C 6100 E6BE                  		bsr.w	BossMove
0001B140 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B146 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B14C                            
0001B14C                            loc_19202:
0001B14C 3028 0008                  		move.w	8(a0),d0
0001B150 0440 2C00                  		subi.w	#$2C00,d0
0001B154 EA48                       		lsr.w	#5,d0
0001B156 1140 0034                  		move.b	d0,$34(a0)
0001B15A 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001B160 6400                       		bcc.s	locret_19256
0001B162 4A28 0022                  		tst.b	$22(a0)
0001B166 6B00                       		bmi.s	loc_19258
0001B168 4A28 0020                  		tst.b	$20(a0)
0001B16C 6600                       		bne.s	locret_19256
0001B16E 4A28 003E                  		tst.b	$3E(a0)
0001B172 6600                       		bne.s	loc_1923A
0001B174 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B17A 303C 00AC                  		move.w	#$AC,d0
0001B17E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B184                            
0001B184                            loc_1923A:
0001B184 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B188 7000                       		moveq	#0,d0
0001B18A 4A51                       		tst.w	(a1)
0001B18C 6600                       		bne.s	loc_19248
0001B18E 303C 0EEE                  		move.w	#$EEE,d0
0001B192                            
0001B192                            loc_19248:
0001B192 3280                       		move.w	d0,(a1)
0001B194 5328 003E                  		subq.b	#1,$3E(a0)
0001B198 6600                       		bne.s	locret_19256
0001B19A 117C 000F 0020             		move.b	#$F,$20(a0)
0001B1A0                            
0001B1A0                            locret_19256:
0001B1A0 4E75                       		rts	
0001B1A2                            ; ===========================================================================
0001B1A2                            
0001B1A2                            loc_19258:				; XREF: loc_19202
0001B1A2 7064                       		moveq	#100,d0
0001B1A4 6100 0000                  		bsr.w	AddPoints
0001B1A8 117C 0006 0025             		move.b	#6,$25(a0)
0001B1AE 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B1B4 4268 0010                  		clr.w	$10(a0)
0001B1B8 4E75                       		rts	
0001B1BA                            ; ===========================================================================
0001B1BA                            
0001B1BA                            loc_19270:				; XREF: Obj75_ShipIndex
0001B1BA 3028 0030                  		move.w	$30(a0),d0
0001B1BE 317C 0140 0010             		move.w	#$140,$10(a0)
0001B1C4 0828 0000 0022             		btst	#0,$22(a0)
0001B1CA 6600                       		bne.s	loc_1928E
0001B1CC 4468 0010                  		neg.w	$10(a0)
0001B1D0 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B1D4 6E00                       		bgt.s	loc_1929E
0001B1D6 6000                       		bra.s	loc_19294
0001B1D8                            ; ===========================================================================
0001B1D8                            
0001B1D8                            loc_1928E:
0001B1D8 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B1DC 6D00                       		blt.s	loc_1929E
0001B1DE                            
0001B1DE                            loc_19294:
0001B1DE 0868 0000 0022             		bchg	#0,$22(a0)
0001B1E4 4228 003D                  		clr.b	$3D(a0)
0001B1E8                            
0001B1E8                            loc_1929E:
0001B1E8 0440 2C10                  		subi.w	#$2C10,d0
0001B1EC 0240 001F                  		andi.w	#$1F,d0
0001B1F0 0440 001F                  		subi.w	#$1F,d0
0001B1F4 6A00                       		bpl.s	loc_192AE
0001B1F6 4440                       		neg.w	d0
0001B1F8                            
0001B1F8                            loc_192AE:
0001B1F8 5340                       		subq.w	#1,d0
0001B1FA 6E00                       		bgt.s	loc_192E8
0001B1FC 4A28 003D                  		tst.b	$3D(a0)
0001B200 6600                       		bne.s	loc_192E8
0001B202 3238 D008                  		move.w	($FFFFD008).w,d1
0001B206 0441 2C00                  		subi.w	#$2C00,d1
0001B20A EA41                       		asr.w	#5,d1
0001B20C B228 0034                  		cmp.b	$34(a0),d1
0001B210 6600                       		bne.s	loc_192E8
0001B212 7000                       		moveq	#0,d0
0001B214 1028 0034                  		move.b	$34(a0),d0
0001B218 EB40                       		asl.w	#5,d0
0001B21A 0640 2C10                  		addi.w	#$2C10,d0
0001B21E 3140 0030                  		move.w	d0,$30(a0)
0001B222 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B226 5428 0025                  		addq.b	#2,$25(a0)
0001B22A 4268 0028                  		clr.w	$28(a0)
0001B22E 4268 0010                  		clr.w	$10(a0)
0001B232                            
0001B232                            loc_192E8:
0001B232 6000 FEF4                  		bra.w	loc_191DE
0001B236                            ; ===========================================================================
0001B236                            
0001B236                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B236 7000                       		moveq	#0,d0
0001B238 1028 0028                  		move.b	$28(a0),d0
0001B23C 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B240 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B244                            ; ===========================================================================
0001B244 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B246 0000                       		dc.w loc_19348-off_192FA
0001B248 0000                       		dc.w loc_1938E-off_192FA
0001B24A 0000                       		dc.w loc_193D0-off_192FA
0001B24C                            ; ===========================================================================
0001B24C                            
0001B24C                            loc_19302:				; XREF: off_192FA
0001B24C 317C 0180 0012             		move.w	#$180,$12(a0)
0001B252 3028 0038                  		move.w	$38(a0),d0
0001B256 0C40 0556                  		cmpi.w	#$556,d0
0001B25A 6500                       		bcs.s	loc_19344
0001B25C 317C 0556 0038             		move.w	#$556,$38(a0)
0001B262 4268 003C                  		clr.w	$3C(a0)
0001B266 70FF                       		moveq	#-1,d0
0001B268 3028 0036                  		move.w	$36(a0),d0
0001B26C 6700                       		beq.s	loc_1933C
0001B26E 2240                       		movea.l	d0,a1
0001B270 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B276 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B27C 2348 0034                  		move.l	a0,$34(a1)
0001B280 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B286                            
0001B286                            loc_1933C:
0001B286 4268 0012                  		clr.w	$12(a0)
0001B28A 5428 0028                  		addq.b	#2,$28(a0)
0001B28E                            
0001B28E                            loc_19344:
0001B28E 6000 FEAC                  		bra.w	loc_191F2
0001B292                            ; ===========================================================================
0001B292                            
0001B292                            loc_19348:				; XREF: off_192FA
0001B292 5368 003C                  		subq.w	#1,$3C(a0)
0001B296 6A00                       		bpl.s	loc_19366
0001B298 5428 0028                  		addq.b	#2,$28(a0)
0001B29C 317C F800 0012             		move.w	#-$800,$12(a0)
0001B2A2 4A68 0036                  		tst.w	$36(a0)
0001B2A6 6600                       		bne.s	loc_19362
0001B2A8 E0E8 0012                  		asr	$12(a0)
0001B2AC                            
0001B2AC                            loc_19362:
0001B2AC 7000                       		moveq	#0,d0
0001B2AE 6000                       		bra.s	loc_1937C
0001B2B0                            ; ===========================================================================
0001B2B0                            
0001B2B0                            loc_19366:
0001B2B0 7000                       		moveq	#0,d0
0001B2B2 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B2B8 6E00                       		bgt.s	loc_1937C
0001B2BA 7002                       		moveq	#2,d0
0001B2BC 0828 0001 003D             		btst	#1,$3D(a0)
0001B2C2 6700                       		beq.s	loc_1937C
0001B2C4 4440                       		neg.w	d0
0001B2C6                            
0001B2C6                            loc_1937C:
0001B2C6 D068 0038                  		add.w	$38(a0),d0
0001B2CA 3140 000C                  		move.w	d0,$C(a0)
0001B2CE 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B2D4 6000 FE76                  		bra.w	loc_19202
0001B2D8                            ; ===========================================================================
0001B2D8                            
0001B2D8                            loc_1938E:				; XREF: off_192FA
0001B2D8 303C 04DA                  		move.w	#$4DA,d0
0001B2DC 4A68 0036                  		tst.w	$36(a0)
0001B2E0 6700                       		beq.s	loc_1939C
0001B2E2 0440 0018                  		subi.w	#$18,d0
0001B2E6                            
0001B2E6                            loc_1939C:
0001B2E6 B068 0038                  		cmp.w	$38(a0),d0
0001B2EA 6D00                       		blt.s	loc_193BE
0001B2EC 317C 0008 003C             		move.w	#8,$3C(a0)
0001B2F2 4A68 0036                  		tst.w	$36(a0)
0001B2F6 6700                       		beq.s	loc_193B4
0001B2F8 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B2FE                            
0001B2FE                            loc_193B4:
0001B2FE 5428 0028                  		addq.b	#2,$28(a0)
0001B302 4268 0012                  		clr.w	$12(a0)
0001B306 6000                       		bra.s	loc_193CC
0001B308                            ; ===========================================================================
0001B308                            
0001B308                            loc_193BE:
0001B308 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B30E 6C00                       		bge.s	loc_193CC
0001B310 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B316                            
0001B316                            loc_193CC:
0001B316 6000 FE24                  		bra.w	loc_191F2
0001B31A                            ; ===========================================================================
0001B31A                            
0001B31A                            loc_193D0:				; XREF: off_192FA
0001B31A 5368 003C                  		subq.w	#1,$3C(a0)
0001B31E 6E00                       		bgt.s	loc_19406
0001B320 6B00                       		bmi.s	loc_193EE
0001B322 70FF                       		moveq	#-1,d0
0001B324 3028 0036                  		move.w	$36(a0),d0
0001B328 6700                       		beq.s	loc_193E8
0001B32A 2240                       		movea.l	d0,a1
0001B32C 137C 000A 0029             		move.b	#$A,$29(a1)
0001B332                            
0001B332                            loc_193E8:
0001B332 4268 0036                  		clr.w	$36(a0)
0001B336 6000                       		bra.s	loc_19406
0001B338                            ; ===========================================================================
0001B338                            
0001B338                            loc_193EE:
0001B338 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B33E 6600                       		bne.s	loc_19406
0001B340 4228 0029                  		clr.b	$29(a0)
0001B344 5528 0025                  		subq.b	#2,$25(a0)
0001B348 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B34E 6000                       		bra.s	loc_19446
0001B350                            ; ===========================================================================
0001B350                            
0001B350                            loc_19406:
0001B350 7001                       		moveq	#1,d0
0001B352 4A68 0036                  		tst.w	$36(a0)
0001B356 6700                       		beq.s	loc_19410
0001B358 7002                       		moveq	#2,d0
0001B35A                            
0001B35A                            loc_19410:
0001B35A 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B360 6700                       		beq.s	loc_19424
0001B362 6D00                       		blt.s	loc_1941C
0001B364 4440                       		neg.w	d0
0001B366                            
0001B366                            loc_1941C:
0001B366 4A68 0036                  		tst.w	$36(a0)
0001B36A D168 0038                  		add.w	d0,$38(a0)
0001B36E                            
0001B36E                            loc_19424:
0001B36E 7000                       		moveq	#0,d0
0001B370 4A68 0036                  		tst.w	$36(a0)
0001B374 6700                       		beq.s	loc_19438
0001B376 7002                       		moveq	#2,d0
0001B378 0828 0000 003D             		btst	#0,$3D(a0)
0001B37E 6700                       		beq.s	loc_19438
0001B380 4440                       		neg.w	d0
0001B382                            
0001B382                            loc_19438:
0001B382 D068 0038                  		add.w	$38(a0),d0
0001B386 3140 000C                  		move.w	d0,$C(a0)
0001B38A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B390                            
0001B390                            loc_19446:
0001B390 6000 FDBA                  		bra.w	loc_19202
0001B394                            
0001B394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B394                            
0001B394                            
0001B394                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B394 4268 0036                  		clr.w	$36(a0)
0001B398 43F8 D040                  		lea	($FFFFD040).w,a1
0001B39C 703E                       		moveq	#$3E,d0
0001B39E 7276                       		moveq	#$76,d1
0001B3A0 1428 0034                  		move.b	$34(a0),d2
0001B3A4                            
0001B3A4                            Obj75_FindLoop:
0001B3A4 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B3A6 6600                       		bne.s	loc_1946A	; if not, branch
0001B3A8 B429 0028                  		cmp.b	$28(a1),d2
0001B3AC 6600                       		bne.s	loc_1946A
0001B3AE 3149 0036                  		move.w	a1,$36(a0)
0001B3B2 6000                       		bra.s	locret_19472
0001B3B4                            ; ===========================================================================
0001B3B4                            
0001B3B4                            loc_1946A:
0001B3B4 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B3B8 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B3BC                            
0001B3BC                            locret_19472:
0001B3BC 4E75                       		rts	
0001B3BE                            ; End of function Obj75_FindBlocks
0001B3BE                            
0001B3BE                            ; ===========================================================================
0001B3BE                            
0001B3BE                            loc_19474:				; XREF: Obj75_ShipIndex
0001B3BE 5368 003C                  		subq.w	#1,$3C(a0)
0001B3C2 6B00                       		bmi.s	loc_1947E
0001B3C4 6000 E3E8                  		bra.w	BossDefeated
0001B3C8                            ; ===========================================================================
0001B3C8                            
0001B3C8                            loc_1947E:
0001B3C8 5428 0025                  		addq.b	#2,$25(a0)
0001B3CC 4268 0012                  		clr.w	$12(a0)
0001B3D0 08E8 0000 0022             		bset	#0,$22(a0)
0001B3D6 08A8 0007 0022             		bclr	#7,$22(a0)
0001B3DC 4268 0010                  		clr.w	$10(a0)
0001B3E0 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B3E6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B3EA 6600                       		bne.s	loc_194A8
0001B3EC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B3F2                            
0001B3F2                            loc_194A8:
0001B3F2 6000 FD58                  		bra.w	loc_19202
0001B3F6                            ; ===========================================================================
0001B3F6                            
0001B3F6                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B3F6 5268 003C                  		addq.w	#1,$3C(a0)
0001B3FA 6700                       		beq.s	loc_194BC
0001B3FC 6A00                       		bpl.s	loc_194C2
0001B3FE 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B404 6000                       		bra.s	loc_194EE
0001B406                            ; ===========================================================================
0001B406                            
0001B406                            loc_194BC:
0001B406 4268 0012                  		clr.w	$12(a0)
0001B40A 6000                       		bra.s	loc_194EE
0001B40C                            ; ===========================================================================
0001B40C                            
0001B40C                            loc_194C2:
0001B40C 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B412 6500                       		bcs.s	loc_194DA
0001B414 6700                       		beq.s	loc_194E0
0001B416 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B41C 6500                       		bcs.s	loc_194EE
0001B41E 5428 0025                  		addq.b	#2,$25(a0)
0001B422 6000                       		bra.s	loc_194EE
0001B424                            ; ===========================================================================
0001B424                            
0001B424                            loc_194DA:
0001B424 5168 0012                  		subq.w	#8,$12(a0)
0001B428 6000                       		bra.s	loc_194EE
0001B42A                            ; ===========================================================================
0001B42A                            
0001B42A                            loc_194E0:
0001B42A 4268 0012                  		clr.w	$12(a0)
0001B42E 303C 0085                  		move.w	#$85,d0
0001B432 4EB9 0000 11F0             		jsr	(PlaySound).l	; play SYZ music
0001B438                            
0001B438                            loc_194EE:
0001B438 6000 FD02                  		bra.w	loc_191F2
0001B43C                            ; ===========================================================================
0001B43C                            
0001B43C                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B43C 317C 0400 0010             		move.w	#$400,$10(a0)
0001B442 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B448 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B44E 6400                       		bcc.s	loc_1950C
0001B450 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B454 6000                       		bra.s	loc_19512
0001B456                            ; ===========================================================================
0001B456                            
0001B456                            loc_1950C:
0001B456 4A28 0001                  		tst.b	1(a0)
0001B45A 6A00                       		bpl.s	Obj75_ShipDelete
0001B45C                            
0001B45C                            loc_19512:
0001B45C 6100 E39E                  		bsr.w	BossMove
0001B460 6000 FCC6                  		bra.w	loc_191DE
0001B464                            ; ===========================================================================
0001B464                            
0001B464                            Obj75_ShipDelete:
0001B464 4EF9 0000 E952             		jmp	DeleteObject
0001B46A                            ; ===========================================================================
0001B46A                            
0001B46A                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B46A 7201                       		moveq	#1,d1
0001B46C 2268 0034                  		movea.l	$34(a0),a1
0001B470 7000                       		moveq	#0,d0
0001B472 1029 0025                  		move.b	$25(a1),d0
0001B476 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B47A 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B47E 1141 001C                  		move.b	d1,$1C(a0)
0001B482 1010                       		move.b	(a0),d0
0001B484 B011                       		cmp.b	(a1),d0
0001B486 6600                       		bne.s	Obj75_FaceDelete
0001B488 6000                       		bra.s	loc_195BE
0001B48A                            ; ===========================================================================
0001B48A                            
0001B48A                            Obj75_FaceDelete:
0001B48A 4EF9 0000 E952             		jmp	DeleteObject
0001B490                            ; ===========================================================================
0001B490 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B494 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B498 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B49C                            ; ===========================================================================
0001B49C                            
0001B49C                            loc_19552:				; XREF: off_19546
0001B49C 720A                       		moveq	#$A,d1
0001B49E 4E75                       		rts	
0001B4A0                            ; ===========================================================================
0001B4A0                            
0001B4A0                            loc_19556:				; XREF: off_19546
0001B4A0 7206                       		moveq	#6,d1
0001B4A2 4E75                       		rts	
0001B4A4                            ; ===========================================================================
0001B4A4                            
0001B4A4                            loc_1955A:				; XREF: off_19546
0001B4A4 7000                       		moveq	#0,d0
0001B4A6 1029 0028                  		move.b	$28(a1),d0
0001B4AA 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B4AE 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B4B2                            ; ===========================================================================
0001B4B2 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B4B6 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B4BA                            ; ===========================================================================
0001B4BA                            
0001B4BA                            loc_19570:				; XREF: off_19568
0001B4BA 6000                       		bra.s	loc_19574
0001B4BC                            ; ===========================================================================
0001B4BC                            
0001B4BC                            loc_19572:				; XREF: off_19568
0001B4BC 7206                       		moveq	#6,d1
0001B4BE                            
0001B4BE                            loc_19574:				; XREF: off_19546
0001B4BE 4A29 0020                  		tst.b	$20(a1)
0001B4C2 6600                       		bne.s	loc_1957E
0001B4C4 7205                       		moveq	#5,d1
0001B4C6 4E75                       		rts	
0001B4C8                            ; ===========================================================================
0001B4C8                            
0001B4C8                            loc_1957E:
0001B4C8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B4CE 6500                       		bcs.s	locret_19588
0001B4D0 7204                       		moveq	#4,d1
0001B4D2                            
0001B4D2                            locret_19588:
0001B4D2 4E75                       		rts	
0001B4D4                            ; ===========================================================================
0001B4D4                            
0001B4D4                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B4D4 117C 0007 001C             		move.b	#7,$1C(a0)
0001B4DA 2268 0034                  		movea.l	$34(a0),a1
0001B4DE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B4E4 6600                       		bne.s	loc_195AA
0001B4E6 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B4EC 4A28 0001                  		tst.b	1(a0)
0001B4F0 6A00                       		bpl.s	Obj75_FlameDelete
0001B4F2 6000                       		bra.s	loc_195B6
0001B4F4                            ; ===========================================================================
0001B4F4                            
0001B4F4                            loc_195AA:
0001B4F4 4A69 0010                  		tst.w	$10(a1)
0001B4F8 6700                       		beq.s	loc_195B6
0001B4FA 117C 0008 001C             		move.b	#8,$1C(a0)
0001B500                            
0001B500                            loc_195B6:
0001B500 6000                       		bra.s	loc_195BE
0001B502                            ; ===========================================================================
0001B502                            
0001B502                            Obj75_FlameDelete:
0001B502 4EF9 0000 E952             		jmp	DeleteObject
0001B508                            ; ===========================================================================
0001B508                            
0001B508                            loc_195BE:
0001B508 43F9 0001 9C0C             		lea	(Ani_Eggman).l,a1
0001B50E 4EB9 0000 B962             		jsr	AnimateSprite
0001B514 2268 0034                  		movea.l	$34(a0),a1
0001B518 3169 0008 0008             		move.w	8(a1),8(a0)
0001B51E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B524                            
0001B524                            loc_195DA:
0001B524 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B52A 7003                       		moveq	#3,d0
0001B52C C028 0022                  		and.b	$22(a0),d0
0001B530 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B536 8128 0001                  		or.b	d0,1(a0)
0001B53A 4EF9 0000 E902             		jmp	DisplaySprite
0001B540                            ; ===========================================================================
0001B540                            
0001B540                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001B540 217C 0001 9D24 0004        		move.l	#Map_BossItems,4(a0)
0001B548 317C 246C 0002             		move.w	#$246C,2(a0)
0001B54E 117C 0005 001A             		move.b	#5,$1A(a0)
0001B554 2268 0034                  		movea.l	$34(a0),a1
0001B558 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B55E 6600                       		bne.s	loc_1961C
0001B560 4A28 0001                  		tst.b	1(a0)
0001B564 6A00                       		bpl.s	Obj75_SpikeDelete
0001B566                            
0001B566                            loc_1961C:
0001B566 3169 0008 0008             		move.w	8(a1),8(a0)
0001B56C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B572 3028 003C                  		move.w	$3C(a0),d0
0001B576 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B57C 6600                       		bne.s	loc_19652
0001B57E 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001B584 6700                       		beq.s	loc_1964C
0001B586 4A29 0028                  		tst.b	$28(a1)
0001B58A 6600                       		bne.s	loc_19658
0001B58C 0C40 0094                  		cmpi.w	#$94,d0
0001B590 6C00                       		bge.s	loc_19658
0001B592 5E40                       		addq.w	#7,d0
0001B594 6000                       		bra.s	loc_19658
0001B596                            ; ===========================================================================
0001B596                            
0001B596                            loc_1964C:
0001B596 4A69 003C                  		tst.w	$3C(a1)
0001B59A 6A00                       		bpl.s	loc_19658
0001B59C                            
0001B59C                            loc_19652:
0001B59C 4A40                       		tst.w	d0
0001B59E 6F00                       		ble.s	loc_19658
0001B5A0 5B40                       		subq.w	#5,d0
0001B5A2                            
0001B5A2                            loc_19658:
0001B5A2 3140 003C                  		move.w	d0,$3C(a0)
0001B5A6 E440                       		asr.w	#2,d0
0001B5A8 D168 000C                  		add.w	d0,$C(a0)
0001B5AC 117C 0008 0019             		move.b	#8,$19(a0)
0001B5B2 117C 000C 0016             		move.b	#$C,$16(a0)
0001B5B8 4228 0020                  		clr.b	$20(a0)
0001B5BC 2268 0034                  		movea.l	$34(a0),a1
0001B5C0 4A29 0020                  		tst.b	$20(a1)
0001B5C4 6700                       		beq.s	loc_19688
0001B5C6 4A29 0029                  		tst.b	$29(a1)
0001B5CA 6600                       		bne.s	loc_19688
0001B5CC 117C 0084 0020             		move.b	#$84,$20(a0)
0001B5D2                            
0001B5D2                            loc_19688:
0001B5D2 6000 FF50                  		bra.w	loc_195DA
0001B5D6                            ; ===========================================================================
0001B5D6                            
0001B5D6                            Obj75_SpikeDelete:
0001B5D6 4EF9 0000 E952             		jmp	DeleteObject
0001B5DC                            ; ===========================================================================
0001B5DC                            ; ---------------------------------------------------------------------------
0001B5DC                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B5DC                            ; ---------------------------------------------------------------------------
0001B5DC                            
0001B5DC                            Obj76:					; XREF: Obj_Index
0001B5DC 7000                       		moveq	#0,d0
0001B5DE 1028 0024                  		move.b	$24(a0),d0
0001B5E2 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B5E6 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B5EA                            ; ===========================================================================
0001B5EA 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B5EC 0000                       		dc.w Obj76_Action-Obj76_Index
0001B5EE 0000                       		dc.w loc_19762-Obj76_Index
0001B5F0                            ; ===========================================================================
0001B5F0                            
0001B5F0                            Obj76_Main:				; XREF: Obj76_Index
0001B5F0 7800                       		moveq	#0,d4
0001B5F2 3A3C 2C10                  		move.w	#$2C10,d5
0001B5F6 7C09                       		moveq	#9,d6
0001B5F8 43D0                       		lea	(a0),a1
0001B5FA 6000                       		bra.s	Obj76_MakeBlock
0001B5FC                            ; ===========================================================================
0001B5FC                            
0001B5FC                            Obj76_Loop:
0001B5FC 4EB9 0000 F058             		jsr	SingleObjLoad
0001B602 6600                       		bne.s	Obj76_ExitLoop
0001B604                            
0001B604                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B604 12BC 0076                  		move.b	#$76,(a1)
0001B608 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B610 337C 4000 0002             		move.w	#$4000,2(a1)
0001B616 137C 0004 0001             		move.b	#4,1(a1)
0001B61C 137C 0010 0019             		move.b	#$10,$19(a1)
0001B622 137C 0010 0016             		move.b	#$10,$16(a1)
0001B628 137C 0003 0018             		move.b	#3,$18(a1)
0001B62E 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B632 337C 0582 000C             		move.w	#$582,$C(a1)
0001B638 3344 0028                  		move.w	d4,$28(a1)
0001B63C 0644 0101                  		addi.w	#$101,d4
0001B640 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B644 5429 0024                  		addq.b	#2,$24(a1)
0001B648 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B64C                            
0001B64C                            Obj76_ExitLoop:
0001B64C 4E75                       		rts	
0001B64E                            ; ===========================================================================
0001B64E                            
0001B64E                            Obj76_Action:				; XREF: Obj76_Index
0001B64E 1028 0029                  		move.b	$29(a0),d0
0001B652 B028 0028                  		cmp.b	$28(a0),d0
0001B656 6700                       		beq.s	Obj76_Solid
0001B658 4A00                       		tst.b	d0
0001B65A 6B00                       		bmi.s	loc_19718
0001B65C                            
0001B65C                            loc_19712:
0001B65C 6100 0000                  		bsr.w	Obj76_Break
0001B660 6000                       		bra.s	Obj76_Display
0001B662                            ; ===========================================================================
0001B662                            
0001B662                            loc_19718:
0001B662 2268 0034                  		movea.l	$34(a0),a1
0001B666 4A29 0021                  		tst.b	$21(a1)
0001B66A 67F0                       		beq.s	loc_19712
0001B66C 3169 0008 0008             		move.w	8(a1),8(a0)
0001B672 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B678 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B67E B2C8                       		cmpa.w	a0,a1
0001B680 6500                       		bcs.s	Obj76_Display
0001B682 3029 0012                  		move.w	$12(a1),d0
0001B686 48C0                       		ext.l	d0
0001B688 E080                       		asr.l	#8,d0
0001B68A D168 000C                  		add.w	d0,$C(a0)
0001B68E 6000                       		bra.s	Obj76_Display
0001B690                            ; ===========================================================================
0001B690                            
0001B690                            Obj76_Solid:				; XREF: Obj76_Action
0001B690 323C 001B                  		move.w	#$1B,d1
0001B694 343C 0010                  		move.w	#$10,d2
0001B698 363C 0011                  		move.w	#$11,d3
0001B69C 3828 0008                  		move.w	8(a0),d4
0001B6A0 4EB9 0001 1270             		jsr	SolidObject
0001B6A6                            
0001B6A6                            Obj76_Display:				; XREF: Obj76_Action
0001B6A6 4EF9 0000 E902             		jmp	DisplaySprite
0001B6AC                            ; ===========================================================================
0001B6AC                            
0001B6AC                            loc_19762:				; XREF: Obj76_Index
0001B6AC 4A28 0001                  		tst.b	1(a0)
0001B6B0 6A00                       		bpl.s	Obj76_Delete
0001B6B2 4EB9 0000 E8C8             		jsr	ObjectFall
0001B6B8 4EF9 0000 E902             		jmp	DisplaySprite
0001B6BE                            ; ===========================================================================
0001B6BE                            
0001B6BE                            Obj76_Delete:
0001B6BE 4EF9 0000 E952             		jmp	DeleteObject
0001B6C4                            
0001B6C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6C4                            
0001B6C4                            
0001B6C4                            Obj76_Break:				; XREF: Obj76_Action
0001B6C4 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B6C8 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B6CC 7801                       		moveq	#1,d4
0001B6CE 7203                       		moveq	#3,d1
0001B6D0 7438                       		moveq	#$38,d2
0001B6D2 5428 0024                  		addq.b	#2,$24(a0)
0001B6D6 117C 0008 0019             		move.b	#8,$19(a0)
0001B6DC 117C 0008 0016             		move.b	#8,$16(a0)
0001B6E2 43D0                       		lea	(a0),a1
0001B6E4 6000                       		bra.s	Obj76_MakeFrag
0001B6E6                            ; ===========================================================================
0001B6E6                            
0001B6E6                            Obj76_LoopFrag:
0001B6E6 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001B6EC 6600                       		bne.s	loc_197D4
0001B6EE                            
0001B6EE                            Obj76_MakeFrag:
0001B6EE 45D0                       		lea	(a0),a2
0001B6F0 47D1                       		lea	(a1),a3
0001B6F2 7603                       		moveq	#3,d3
0001B6F4                            
0001B6F4                            loc_197AA:
0001B6F4 26DA                       		move.l	(a2)+,(a3)+
0001B6F6 26DA                       		move.l	(a2)+,(a3)+
0001B6F8 26DA                       		move.l	(a2)+,(a3)+
0001B6FA 26DA                       		move.l	(a2)+,(a3)+
0001B6FC 51CB FFF6                  		dbf	d3,loc_197AA
0001B700                            
0001B700 335C 0010                  		move.w	(a4)+,$10(a1)
0001B704 335C 0012                  		move.w	(a4)+,$12(a1)
0001B708 361D                       		move.w	(a5)+,d3
0001B70A D769 0008                  		add.w	d3,8(a1)
0001B70E 361D                       		move.w	(a5)+,d3
0001B710 D769 000C                  		add.w	d3,$C(a1)
0001B714 1344 001A                  		move.b	d4,$1A(a1)
0001B718 5244                       		addq.w	#1,d4
0001B71A 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B71E                            
0001B71E                            loc_197D4:
0001B71E 303C 00CB                  		move.w	#$CB,d0
0001B722 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B728                            ; End of function Obj76_Break
0001B728                            
0001B728                            ; ===========================================================================
0001B728 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B72C 0180 FE00                  		dc.w $180, $FE00
0001B730 FF00 FF00                  		dc.w $FF00, $FF00
0001B734 0100 FF00                  		dc.w $100, $FF00
0001B738 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B73C 0010 0000                  		dc.w $10, 0
0001B740 0000 0010                  		dc.w 0,	$10
0001B744 0010 0010                  		dc.w $10, $10
0001B748                            ; ---------------------------------------------------------------------------
0001B748                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B748                            ; ---------------------------------------------------------------------------
0001B748                            Map_obj76:
0001B748                            	include "_maps\obj76.asm"
0001B748                            ; ---------------------------------------------------------------------------
0001B748                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B748                            ; ---------------------------------------------------------------------------
0001B748 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B74C 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B750 0000                       		dc.w byte_19826-Map_obj76
0001B752 02                         byte_19808:	dc.b 2
0001B753 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B758 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B75D 00                         		dc.b 0
0001B75E 01                         byte_19814:	dc.b 1
0001B75F F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B764 01                         byte_1981A:	dc.b 1
0001B765 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B76A 01                         byte_19820:	dc.b 1
0001B76B F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B770 01                         byte_19826:	dc.b 1
0001B771 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B776                            		even
0001B776                            		even
0001B776                            
0001B776                            ; ===========================================================================
0001B776                            
0001B776                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B776 4EF9 0000 E952             		jmp	DeleteObject
0001B77C                            ; ===========================================================================
0001B77C                            ; ---------------------------------------------------------------------------
0001B77C                            ; Object 82 - Eggman (SBZ2)
0001B77C                            ; ---------------------------------------------------------------------------
0001B77C                            
0001B77C                            Obj82:					; XREF: Obj_Index
0001B77C 7000                       		moveq	#0,d0
0001B77E 1028 0024                  		move.b	$24(a0),d0
0001B782 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B786 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B78A                            ; ===========================================================================
0001B78A 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B78C 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B78E 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B790                            
0001B790 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B793 0400 03                    		dc.b 4,	0, 3
0001B796                            ; ===========================================================================
0001B796                            
0001B796                            Obj82_Main:				; XREF: Obj82_Index
0001B796 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B79A 317C 2160 0008             		move.w	#$2160,8(a0)
0001B7A0 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B7A6 117C 000F 0020             		move.b	#$F,$20(a0)
0001B7AC 117C 0010 0021             		move.b	#$10,$21(a0)
0001B7B2 08A8 0000 0022             		bclr	#0,$22(a0)
0001B7B8 4228 0025                  		clr.b	$25(a0)
0001B7BC 115A 0024                  		move.b	(a2)+,$24(a0)
0001B7C0 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B7C4 115A 0018                  		move.b	(a2)+,$18(a0)
0001B7C8 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B7D0 317C 0400 0002             		move.w	#$400,2(a0)
0001B7D6 117C 0004 0001             		move.b	#4,1(a0)
0001B7DC 08E8 0007 0001             		bset	#7,1(a0)
0001B7E2 117C 0020 0019             		move.b	#$20,$19(a0)
0001B7E8 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001B7EE 6600                       		bne.s	Obj82_Eggman
0001B7F0 2348 0034                  		move.l	a0,$34(a1)
0001B7F4 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B7F8 337C 2130 0008             		move.w	#$2130,8(a1)
0001B7FE 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B804 4228 0025                  		clr.b	$25(a0)
0001B808 135A 0024                  		move.b	(a2)+,$24(a1)
0001B80C 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B810 135A 0018                  		move.b	(a2)+,$18(a1)
0001B814 237C 0000 D16C 0004        		move.l	#Map_obj32,4(a1)
0001B81C 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B822 137C 0004 0001             		move.b	#4,1(a1)
0001B828 08E9 0007 0001             		bset	#7,1(a1)
0001B82E 137C 0010 0019             		move.b	#$10,$19(a1)
0001B834 137C 0000 001A             		move.b	#0,$1A(a1)
0001B83A                            
0001B83A                            Obj82_Eggman:				; XREF: Obj82_Index
0001B83A 7000                       		moveq	#0,d0
0001B83C 1028 0025                  		move.b	$25(a0),d0
0001B840 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B844 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B848 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B84C 4EB9 0000 B962             		jsr	AnimateSprite
0001B852 4EF9 0000 E902             		jmp	DisplaySprite
0001B858                            ; ===========================================================================
0001B858 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B85A 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B85C 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B85E 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B860                            ; ===========================================================================
0001B860                            
0001B860                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B860 3028 0008                  		move.w	8(a0),d0
0001B864 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B868 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B86C 6400                       		bcc.s	loc_19934	; if not, branch
0001B86E 5428 0025                  		addq.b	#2,$25(a0)
0001B872 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B878 117C 0001 001C             		move.b	#1,$1C(a0)
0001B87E                            
0001B87E                            loc_19934:				; XREF: Obj82_EggIndex
0001B87E 4EF9 0000 E8E8             		jmp	SpeedToPos
0001B884                            ; ===========================================================================
0001B884                            
0001B884                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B884 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B888 6600                       		bne.s	loc_19954	; if time remains, branch
0001B88A 5428 0025                  		addq.b	#2,$25(a0)
0001B88E 117C 0002 001C             		move.b	#2,$1C(a0)
0001B894 5868 000C                  		addq.w	#4,$C(a0)
0001B898 317C 000F 003C             		move.w	#15,$3C(a0)
0001B89E                            
0001B89E                            loc_19954:
0001B89E 60DE                       		bra.s	loc_19934
0001B8A0                            ; ===========================================================================
0001B8A0                            
0001B8A0                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B8A0 5368 003C                  		subq.w	#1,$3C(a0)
0001B8A4 6E00                       		bgt.s	loc_199D0
0001B8A6 6600                       		bne.s	loc_1996A
0001B8A8 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B8AE 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B8B4                            
0001B8B4                            loc_1996A:
0001B8B4 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B8BA 6E00                       		bgt.s	loc_19976
0001B8BC 4268 0010                  		clr.w	$10(a0)
0001B8C0                            
0001B8C0                            loc_19976:
0001B8C0 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B8C6 4A68 0012                  		tst.w	$12(a0)
0001B8CA 6B00                       		bmi.s	Obj82_FindBlocks
0001B8CC 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B8D2 6500                       		bcs.s	Obj82_FindBlocks
0001B8D4 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B8DA 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001B8E0 6500                       		bcs.s	Obj82_FindBlocks
0001B8E2 317C 059B 000C             		move.w	#$59B,$C(a0)
0001B8E8 4268 0012                  		clr.w	$12(a0)
0001B8EC                            
0001B8EC                            Obj82_FindBlocks:
0001B8EC 3028 0010                  		move.w	$10(a0),d0
0001B8F0 8068 0012                  		or.w	$12(a0),d0
0001B8F4 6600                       		bne.s	loc_199D0
0001B8F6 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001B8FA 703E                       		moveq	#$3E,d0
0001B8FC 7240                       		moveq	#$40,d1
0001B8FE                            
0001B8FE                            Obj82_FindLoop:	
0001B8FE D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001B900 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001B904 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001B908                            
0001B908 6600                       		bne.s	loc_199D0
0001B90A 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001B910 5428 0025                  		addq.b	#2,$25(a0)
0001B914 117C 0001 001C             		move.b	#1,$1C(a0)
0001B91A                            
0001B91A                            loc_199D0:
0001B91A 6000 FF62                  		bra.w	loc_19934
0001B91E                            ; ===========================================================================
0001B91E                            
0001B91E                            Obj82_Switch:				; XREF: Obj82_Index
0001B91E 7000                       		moveq	#0,d0
0001B920 1028 0025                  		move.b	$25(a0),d0
0001B924 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001B928 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001B92C                            ; ===========================================================================
0001B92C 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001B92E 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001B930                            ; ===========================================================================
0001B930                            
0001B930                            loc_199E6:				; XREF: Obj82_SwIndex
0001B930 2268 0034                  		movea.l	$34(a0),a1
0001B934 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001B93A 6600                       		bne.s	Obj82_SwDisplay
0001B93C 117C 0001 001A             		move.b	#1,$1A(a0)
0001B942 5428 0025                  		addq.b	#2,$25(a0)
0001B946                            
0001B946                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001B946 4EF9 0000 E902             		jmp	DisplaySprite
0001B94C                            ; ===========================================================================
0001B94C                            Ani_obj82:
0001B94C                            	include "_anim\obj82.asm"
0001B94C                            ; ---------------------------------------------------------------------------
0001B94C                            ; Animation script - Eggman (SBZ2)
0001B94C                            ; ---------------------------------------------------------------------------
0001B94C 0000                       		dc.w byte_19A10-Ani_obj82
0001B94E 0000                       		dc.w byte_19A14-Ani_obj82
0001B950 0000                       		dc.w byte_19A18-Ani_obj82
0001B952 0000                       		dc.w byte_19A20-Ani_obj82
0001B954 0000                       		dc.w byte_19A24-Ani_obj82
0001B956 0000                       		dc.w byte_19A2A-Ani_obj82
0001B958 0000                       		dc.w byte_19A30-Ani_obj82
0001B95A 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001B95E 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001B962 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001B96A 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001B96E 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001B974 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001B97A 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001B97E                            		even
0001B97E                            		even
0001B97E                            
0001B97E                            ; ---------------------------------------------------------------------------
0001B97E                            ; Sprite mappings - Eggman (SBZ2)
0001B97E                            ; ---------------------------------------------------------------------------
0001B97E                            Map_obj82:
0001B97E                            	include "_maps\obj82.asm"
0001B97E                            ; ---------------------------------------------------------------------------
0001B97E                            ; Sprite mappings - Eggman (SBZ2)
0001B97E                            ; ---------------------------------------------------------------------------
0001B97E 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001B982 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001B986 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001B98A 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001B98E 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001B992 0000                       		dc.w byte_19B4F-Map_obj82
0001B994 03                         byte_19A4A:	dc.b 3
0001B995 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B99A E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B99F 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B9A4 04                         byte_19A5A:	dc.b 4
0001B9A5 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001B9AA E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B9AF 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B9B4 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B9B9 00                         		dc.b 0
0001B9BA 04                         byte_19A70:	dc.b 4
0001B9BB E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001B9C0 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001B9C5 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001B9CA FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001B9CF 00                         		dc.b 0
0001B9D0 04                         byte_19A86:	dc.b 4
0001B9D1 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001B9D6 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001B9DB 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001B9E0 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001B9E5 00                         		dc.b 0
0001B9E6 04                         byte_19A9C:	dc.b 4
0001B9E7 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B9EC F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B9F1 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001B9F6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B9FB 00                         		dc.b 0
0001B9FC 04                         byte_19AB2:	dc.b 4
0001B9FD E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BA02 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BA07 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BA0C 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BA11 00                         		dc.b 0
0001BA12 07                         byte_19AC8:	dc.b 7
0001BA13 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BA18 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BA1D 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BA22 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BA27 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BA2C F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001BA31 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001BA36 05                         byte_19AEC:	dc.b 5
0001BA37 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BA3C F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BA41 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BA46 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BA4B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BA50 06                         byte_19B06:	dc.b 6
0001BA51 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001BA56 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001BA5B 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001BA60 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001BA65 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001BA6A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001BA6F 00                         		dc.b 0
0001BA70 08                         byte_19B26:	dc.b 8
0001BA71 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BA76 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BA7B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BA80 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BA85 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001BA8A F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001BA8F 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001BA94 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001BA99 03                         byte_19B4F:	dc.b 3
0001BA9A EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001BA9F F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001BAA4 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001BAAA 00                         		even
0001BAAA 00                         		even
0001BAAA                            
0001BAAA                            ; ===========================================================================
0001BAAA                            ; ---------------------------------------------------------------------------
0001BAAA                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001BAAA                            ; ---------------------------------------------------------------------------
0001BAAA                            
0001BAAA                            Obj83:					; XREF: Obj_Index
0001BAAA 7000                       		moveq	#0,d0
0001BAAC 1028 0024                  		move.b	$24(a0),d0
0001BAB0 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001BAB4 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001BAB8                            ; ===========================================================================
0001BAB8 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001BABA 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001BABC 0000                       		dc.w loc_19C36-Obj83_Index
0001BABE 0000                       		dc.w loc_19C62-Obj83_Index
0001BAC0 0000                       		dc.w loc_19C72-Obj83_Index
0001BAC2 0000                       		dc.w loc_19C80-Obj83_Index
0001BAC4                            ; ===========================================================================
0001BAC4                            
0001BAC4                            Obj83_Main:				; XREF: Obj83_Index
0001BAC4 317C 2080 0008             		move.w	#$2080,8(a0)
0001BACA 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001BAD0 117C 0080 0019             		move.b	#$80,$19(a0)
0001BAD6 117C 0010 0016             		move.b	#$10,$16(a0)
0001BADC 117C 0004 0001             		move.b	#4,1(a0)
0001BAE2 08E8 0007 0001             		bset	#7,1(a0)
0001BAE8 7800                       		moveq	#0,d4
0001BAEA 3A3C 2010                  		move.w	#$2010,d5
0001BAEE 7C07                       		moveq	#7,d6
0001BAF0 45E8 0030                  		lea	$30(a0),a2
0001BAF4                            
0001BAF4                            Obj83_MakeBlock:
0001BAF4 4EB9 0000 F058             		jsr	SingleObjLoad
0001BAFA 6600                       		bne.s	Obj83_ExitMake
0001BAFC 34C9                       		move.w	a1,(a2)+
0001BAFE 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001BB02 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001BB0A 337C 4518 0002             		move.w	#$4518,2(a1)
0001BB10 137C 0004 0001             		move.b	#4,1(a1)
0001BB16 137C 0010 0019             		move.b	#$10,$19(a1)
0001BB1C 137C 0010 0016             		move.b	#$10,$16(a1)
0001BB22 137C 0003 0018             		move.b	#3,$18(a1)
0001BB28 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001BB2C 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001BB32 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001BB36 137C 0008 0024             		move.b	#8,$24(a1)
0001BB3C 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001BB40                            
0001BB40                            Obj83_ExitMake:
0001BB40 5428 0024                  		addq.b	#2,$24(a0)
0001BB44 4E75                       		rts	
0001BB46                            ; ===========================================================================
0001BB46                            
0001BB46                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001BB46 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BB4C 6600                       		bne.s	Obj83_Solid	; if not, branch
0001BB4E 4228 001A                  		clr.b	$1A(a0)
0001BB52 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001BB56                            
0001BB56                            Obj83_Solid:
0001BB56 7000                       		moveq	#0,d0
0001BB58 1028 001A                  		move.b	$1A(a0),d0
0001BB5C 4400                       		neg.b	d0
0001BB5E 4880                       		ext.w	d0
0001BB60 5040                       		addq.w	#8,d0
0001BB62 E940                       		asl.w	#4,d0
0001BB64 383C 2100                  		move.w	#$2100,d4
0001BB68 9840                       		sub.w	d0,d4
0001BB6A 1140 0019                  		move.b	d0,$19(a0)
0001BB6E 3144 0008                  		move.w	d4,8(a0)
0001BB72 720B                       		moveq	#$B,d1
0001BB74 D240                       		add.w	d0,d1
0001BB76 7410                       		moveq	#$10,d2
0001BB78 7611                       		moveq	#$11,d3
0001BB7A 4EF9 0001 1270             		jmp	SolidObject
0001BB80                            ; ===========================================================================
0001BB80                            
0001BB80                            loc_19C36:				; XREF: Obj83_Index
0001BB80 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001BB86 6400                       		bcc.s	Obj83_Solid2
0001BB88 70FF                       		moveq	#-1,d0
0001BB8A 1028 001A                  		move.b	$1A(a0),d0
0001BB8E 4880                       		ext.w	d0
0001BB90 D040                       		add.w	d0,d0
0001BB92 3030 0030                  		move.w	$30(a0,d0.w),d0
0001BB96 2240                       		movea.l	d0,a1
0001BB98 337C 474F 0028             		move.w	#$474F,$28(a1)
0001BB9E 5228 001A                  		addq.b	#1,$1A(a0)
0001BBA2 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001BBA8 6700                       		beq.s	loc_19C62
0001BBAA                            
0001BBAA                            Obj83_Solid2:
0001BBAA 60AA                       		bra.s	Obj83_Solid
0001BBAC                            ; ===========================================================================
0001BBAC                            
0001BBAC                            loc_19C62:				; XREF: Obj83_Index
0001BBAC 08A8 0003 0022             		bclr	#3,$22(a0)
0001BBB2 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BBB8 6000 FBBC                  		bra.w	loc_1982C
0001BBBC                            ; ===========================================================================
0001BBBC                            
0001BBBC                            loc_19C72:				; XREF: Obj83_Index
0001BBBC 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BBC2 6700                       		beq.s	Obj83_Break	; if yes, branch
0001BBC4 4EF9 0000 E902             		jmp	DisplaySprite
0001BBCA                            ; ===========================================================================
0001BBCA                            
0001BBCA                            loc_19C80:				; XREF: Obj83_Index
0001BBCA 4A28 0001                  		tst.b	1(a0)
0001BBCE 6A00 FBA6                  		bpl.w	loc_1982C
0001BBD2 4EB9 0000 E8C8             		jsr	ObjectFall
0001BBD8 4EF9 0000 E902             		jmp	DisplaySprite
0001BBDE                            ; ===========================================================================
0001BBDE                            
0001BBDE                            Obj83_Break:				; XREF: loc_19C72
0001BBDE 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001BBE2 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001BBE6 7801                       		moveq	#1,d4
0001BBE8 7203                       		moveq	#3,d1
0001BBEA 7438                       		moveq	#$38,d2
0001BBEC 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001BBF2 31FC 0200 F5D0             		move.w	#$200,(SonimeSST+sonime_facetimer).w
0001BBF8 5428 0024                  		addq.b	#2,$24(a0)
0001BBFC 117C 0008 0019             		move.b	#8,$19(a0)
0001BC02 117C 0008 0016             		move.b	#8,$16(a0)
0001BC08 43D0                       		lea	(a0),a1
0001BC0A 6000                       		bra.s	Obj83_MakeFrag
0001BC0C                            ; ===========================================================================
0001BC0C                            
0001BC0C                            Obj83_LoopFrag:
0001BC0C 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001BC12 6600                       		bne.s	Obj83_BreakSnd
0001BC14                            
0001BC14                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001BC14 45D0                       		lea	(a0),a2
0001BC16 47D1                       		lea	(a1),a3
0001BC18 7603                       		moveq	#3,d3
0001BC1A                            
0001BC1A                            loc_19CC4:
0001BC1A 26DA                       		move.l	(a2)+,(a3)+
0001BC1C 26DA                       		move.l	(a2)+,(a3)+
0001BC1E 26DA                       		move.l	(a2)+,(a3)+
0001BC20 26DA                       		move.l	(a2)+,(a3)+
0001BC22 51CB FFF6                  		dbf	d3,loc_19CC4
0001BC26                            
0001BC26 335C 0012                  		move.w	(a4)+,$12(a1)
0001BC2A 361D                       		move.w	(a5)+,d3
0001BC2C D769 0008                  		add.w	d3,8(a1)
0001BC30 361D                       		move.w	(a5)+,d3
0001BC32 D769 000C                  		add.w	d3,$C(a1)
0001BC36 1344 001A                  		move.b	d4,$1A(a1)
0001BC3A 5244                       		addq.w	#1,d4
0001BC3C 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001BC40                            
0001BC40                            Obj83_BreakSnd:
0001BC40 303C 00CB                  		move.w	#$CB,d0
0001BC44 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play smashing sound
0001BC4A 4EF9 0000 E902             		jmp	DisplaySprite
0001BC50                            ; ===========================================================================
0001BC50 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001BC54 0120 00C0                  		dc.w $120, $C0
0001BC58 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001BC5C 0010 0000                  		dc.w $10, 0
0001BC60 0000 0010                  		dc.w 0,	$10
0001BC64 0010 0010                  		dc.w $10, $10
0001BC68                            ; ---------------------------------------------------------------------------
0001BC68                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BC68                            ; ---------------------------------------------------------------------------
0001BC68                            Map_obj83:
0001BC68                            	include "_maps\obj83.asm"
0001BC68                            ; ---------------------------------------------------------------------------
0001BC68                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BC68                            ; ---------------------------------------------------------------------------
0001BC68 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001BC6C 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001BC70 0000                       		dc.w byte_19D46-Map_obj83
0001BC72 01                         byte_19D1C:	dc.b 1
0001BC73 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BC78 02                         byte_19D22:	dc.b 2
0001BC79 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001BC7E F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001BC83 00                         		dc.b 0
0001BC84 02                         byte_19D2E:	dc.b 2
0001BC85 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BC8A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001BC8F 00                         		dc.b 0
0001BC90 02                         byte_19D3A:	dc.b 2
0001BC91 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001BC96 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001BC9B 00                         		dc.b 0
0001BC9C 02                         byte_19D46:	dc.b 2
0001BC9D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001BCA2 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001BCA8 00                         		even
0001BCA8 00                         		even
0001BCA8                            
0001BCA8                            ; ===========================================================================
0001BCA8                            ; ---------------------------------------------------------------------------
0001BCA8                            ; Object 85 - Eggman (FZ)
0001BCA8                            ; ---------------------------------------------------------------------------
0001BCA8                            
0001BCA8                            Obj85_Delete:
0001BCA8 4EF9 0000 E952             		jmp	DeleteObject
0001BCAE                            ; ===========================================================================
0001BCAE                            
0001BCAE                            Obj85:					; XREF: Obj_Index
0001BCAE 7000                       		moveq	#0,d0
0001BCB0 1028 0024                  		move.b	$24(a0),d0
0001BCB4 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001BCB8 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001BCBC                            ; ===========================================================================
0001BCBC 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001BCBE 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001BCC0 0000                       		dc.w loc_1A38E-Obj85_Index
0001BCC2 0000                       		dc.w loc_1A346-Obj85_Index
0001BCC4 0000                       		dc.w loc_1A2C6-Obj85_Index
0001BCC6 0000                       		dc.w loc_1A3AC-Obj85_Index
0001BCC8 0000                       		dc.w loc_1A264-Obj85_Index
0001BCCA                            
0001BCCA 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001BCD0 0001 B97E                  		dc.l Map_obj82		; mappings pointer
0001BCD4 25B0 0590 0300             		dc.w $25B0, $590, $300
0001BCDA 0000 0000                  		dc.l Map_obj84
0001BCDE 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001BCE4 0000 0000                  		dc.l Map_FZBoss
0001BCE8 26E0 0596 0470             		dc.w $26E0, $596, $470
0001BCEE 0001 B97E                  		dc.l Map_obj82
0001BCF2 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BCF8 0001 9C5C                  		dc.l Map_Eggman
0001BCFC 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BD02 0001 9C5C                  		dc.l Map_Eggman
0001BD06                            
0001BD06 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001BD0B 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001BD10 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001BD15 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001BD1A 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001BD1F 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001BD24                            ; ===========================================================================
0001BD24                            
0001BD24                            Obj85_Main:				; XREF: Obj85_Index
0001BD24 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001BD28 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001BD2C 2248                       		movea.l	a0,a1
0001BD2E 7205                       		moveq	#5,d1
0001BD30 6000                       		bra.s	Obj85_LoadBoss
0001BD32                            ; ===========================================================================
0001BD32                            
0001BD32                            Obj85_Loop:
0001BD32 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001BD38 6600                       		bne.s	loc_19E20
0001BD3A                            
0001BD3A                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001BD3A 12BC 0085                  		move.b	#$85,(a1)
0001BD3E 335A 0008                  		move.w	(a2)+,8(a1)
0001BD42 335A 000C                  		move.w	(a2)+,$C(a1)
0001BD46 335A 0002                  		move.w	(a2)+,2(a1)
0001BD4A 235A 0004                  		move.l	(a2)+,4(a1)
0001BD4E 135B 0024                  		move.b	(a3)+,$24(a1)
0001BD52 135B 001C                  		move.b	(a3)+,$1C(a1)
0001BD56 135B 0018                  		move.b	(a3)+,$18(a1)
0001BD5A 135B 0017                  		move.b	(a3)+,$17(a1)
0001BD5E 135B 0016                  		move.b	(a3)+,$16(a1)
0001BD62 137C 0004 0001             		move.b	#4,1(a1)
0001BD68 08E8 0007 0001             		bset	#7,1(a0)
0001BD6E 2348 0034                  		move.l	a0,$34(a1)
0001BD72 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001BD76                            
0001BD76                            loc_19E20:
0001BD76 45E8 0036                  		lea	$36(a0),a2
0001BD7A 4EB9 0000 F058             		jsr	SingleObjLoad
0001BD80 6600                       		bne.s	loc_19E5A
0001BD82 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001BD86 3489                       		move.w	a1,(a2)
0001BD88 2348 0034                  		move.l	a0,$34(a1)
0001BD8C 45E8 0038                  		lea	$38(a0),a2
0001BD90 7400                       		moveq	#0,d2
0001BD92 7203                       		moveq	#3,d1
0001BD94                            
0001BD94                            loc_19E3E:
0001BD94 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001BD9A 6600                       		bne.s	loc_19E5A
0001BD9C 34C9                       		move.w	a1,(a2)+
0001BD9E 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001BDA2 2348 0034                  		move.l	a0,$34(a1)
0001BDA6 1342 0028                  		move.b	d2,$28(a1)
0001BDAA 5442                       		addq.w	#2,d2
0001BDAC 51C9 FFE6                  		dbf	d1,loc_19E3E
0001BDB0                            
0001BDB0                            loc_19E5A:
0001BDB0 317C 0000 0034             		move.w	#0,$34(a0)
0001BDB6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001BDBC 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BDC2                            
0001BDC2                            Obj85_Eggman:				; XREF: Obj85_Index
0001BDC2 7000                       		moveq	#0,d0
0001BDC4 1028 0034                  		move.b	$34(a0),d0
0001BDC8 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001BDCC 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001BDD0 4EF9 0000 E902             		jmp	DisplaySprite
0001BDD6                            ; ===========================================================================
0001BDD6 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001BDDA 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001BDDE 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001BDE2 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001BDE6                            ; ===========================================================================
0001BDE6                            
0001BDE6                            loc_19E90:				; XREF: off_19E80
0001BDE6 4AB8 F680                  		tst.l	($FFFFF680).w
0001BDEA 6600                       		bne.s	loc_19EA2
0001BDEC 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001BDF2 6500                       		bcs.s	loc_19EA2
0001BDF4 5428 0034                  		addq.b	#2,$34(a0)
0001BDF8                            
0001BDF8                            loc_19EA2:
0001BDF8 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001BDFC 4E75                       		rts	
0001BDFE                            ; ===========================================================================
0001BDFE                            
0001BDFE                            loc_19EA8:				; XREF: off_19E80
0001BDFE 4A68 0030                  		tst.w	$30(a0)
0001BE02 6A00                       		bpl.s	loc_19F10
0001BE04 4268 0030                  		clr.w	$30(a0)
0001BE08 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001BE0E 0240 000C                  		andi.w	#$C,d0
0001BE12 3200                       		move.w	d0,d1
0001BE14 5441                       		addq.w	#2,d1
0001BE16 4A80                       		tst.l	d0
0001BE18 6A00                       		bpl.s	loc_19EC6
0001BE1A C141                       		exg	d1,d0
0001BE1C                            
0001BE1C                            loc_19EC6:
0001BE1C 43FA 0000                  		lea	word_19FD6(pc),a1
0001BE20 3031 0000                  		move.w	(a1,d0.w),d0
0001BE24 3231 1000                  		move.w	(a1,d1.w),d1
0001BE28 3140 0030                  		move.w	d0,$30(a0)
0001BE2C 74FF                       		moveq	#-1,d2
0001BE2E 3430 0038                  		move.w	$38(a0,d0.w),d2
0001BE32 2242                       		movea.l	d2,a1
0001BE34 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BE3A 337C FFFF 0030             		move.w	#-1,$30(a1)
0001BE40 3430 1038                  		move.w	$38(a0,d1.w),d2
0001BE44 2242                       		movea.l	d2,a1
0001BE46 137C 0001 0029             		move.b	#1,$29(a1)
0001BE4C 337C 0000 0030             		move.w	#0,$30(a1)
0001BE52 317C 0001 0032             		move.w	#1,$32(a0)
0001BE58 4228 0035                  		clr.b	$35(a0)
0001BE5C 303C 00B7                  		move.w	#$B7,d0
0001BE60 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001BE66                            
0001BE66                            loc_19F10:
0001BE66 4A68 0032                  		tst.w	$32(a0)
0001BE6A 6B00 0000                  		bmi.w	loc_19FA6
0001BE6E 08A8 0000 0022             		bclr	#0,$22(a0)
0001BE74 3038 D008                  		move.w	($FFFFD008).w,d0
0001BE78 9068 0008                  		sub.w	8(a0),d0
0001BE7C 6500                       		bcs.s	loc_19F2E
0001BE7E 08E8 0000 0022             		bset	#0,$22(a0)
0001BE84                            
0001BE84                            loc_19F2E:
0001BE84 323C 002B                  		move.w	#$2B,d1
0001BE88 343C 0014                  		move.w	#$14,d2
0001BE8C 363C 0014                  		move.w	#$14,d3
0001BE90 3828 0008                  		move.w	8(a0),d4
0001BE94 4EB9 0001 1270             		jsr	SolidObject
0001BE9A 4A44                       		tst.w	d4
0001BE9C 6E00                       		bgt.s	loc_19F50
0001BE9E                            
0001BE9E                            loc_19F48:
0001BE9E 4A28 0035                  		tst.b	$35(a0)
0001BEA2 6600                       		bne.s	loc_19F88
0001BEA4 6000                       		bra.s	loc_19F96
0001BEA6                            ; ===========================================================================
0001BEA6                            
0001BEA6                            loc_19F50:
0001BEA6 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001BEAA 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001BEB0 66EC                       		bne.s	loc_19F48
0001BEB2 303C 0300                  		move.w	#$300,d0
0001BEB6 0828 0000 0022             		btst	#0,$22(a0)
0001BEBC 6600                       		bne.s	loc_19F6A
0001BEBE 4440                       		neg.w	d0
0001BEC0                            
0001BEC0                            loc_19F6A:
0001BEC0 31C0 D010                  		move.w	d0,($FFFFD010).w
0001BEC4 4A28 0035                  		tst.b	$35(a0)
0001BEC8 6600                       		bne.s	loc_19F88
0001BECA 4A28 0021                  		tst.b	$21(a0)	;has the boss been defeated?
0001BECE 6700                       		beq.s	loc_19F9C	;if so, don't let it be hit again.		
0001BED0 5328 0021                  		subq.b	#1,$21(a0)
0001BED4 117C 00FF 0035             		move.b	#255,$35(a0)
0001BEDA 303C 00AC                  		move.w	#$AC,d0
0001BEDE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BEE4                            
0001BEE4                            loc_19F88:
0001BEE4 5328 0035                  		subq.b	#1,$35(a0)
0001BEE8 6700                       		beq.s	loc_19F96
0001BEEA 117C 0003 001C             		move.b	#3,$1C(a0)
0001BEF0 6000                       		bra.s	loc_19F9C
0001BEF2                            ; ===========================================================================
0001BEF2                            
0001BEF2                            loc_19F96:
0001BEF2 117C 0001 001C             		move.b	#1,$1C(a0)
0001BEF8                            
0001BEF8                            loc_19F9C:
0001BEF8 43FA FA52                  		lea	Ani_obj82(pc),a1
0001BEFC 4EF9 0000 B962             		jmp	AnimateSprite
0001BF02                            ; ===========================================================================
0001BF02                            
0001BF02                            loc_19FA6:
0001BF02 4A28 0021                  		tst.b	$21(a0)
0001BF06 6700                       		beq.s	loc_19FBC
0001BF08 5428 0034                  		addq.b	#2,$34(a0)
0001BF0C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BF12 4268 0032                  		clr.w	$32(a0)
0001BF16 4E75                       		rts	
0001BF18                            ; ===========================================================================
0001BF18                            
0001BF18                            loc_19FBC:
0001BF18 117C 0006 0034             		move.b	#6,$34(a0)
0001BF1E 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001BF24 317C 053C 000C             		move.w	#$53C,$C(a0)
0001BF2A 117C 0014 0016             		move.b	#$14,$16(a0)
0001BF30 4E75                       		rts	
0001BF32                            ; ===========================================================================
0001BF32 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001BF42                            ; ===========================================================================
0001BF42                            
0001BF42                            loc_19FE6:				; XREF: off_19E80
0001BF42 70FF                       		moveq	#-1,d0
0001BF44 3028 0036                  		move.w	$36(a0),d0
0001BF48 2240                       		movea.l	d0,a1
0001BF4A 4A68 0030                  		tst.w	$30(a0)
0001BF4E 6A00                       		bpl.s	loc_1A000
0001BF50 4268 0030                  		clr.w	$30(a0)
0001BF54 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BF5A 6100                       		bsr.s	loc_1A020
0001BF5C                            
0001BF5C                            loc_1A000:
0001BF5C 700F                       		moveq	#$F,d0
0001BF5E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001BF62 6600                       		bne.s	loc_1A00A
0001BF64 6100                       		bsr.s	loc_1A020
0001BF66                            
0001BF66                            loc_1A00A:
0001BF66 4A68 0032                  		tst.w	$32(a0)
0001BF6A 6700                       		beq.s	locret_1A01E
0001BF6C 5528 0034                  		subq.b	#2,$34(a0)
0001BF70 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BF76 4268 0032                  		clr.w	$32(a0)
0001BF7A                            
0001BF7A                            locret_1A01E:
0001BF7A 4E75                       		rts	
0001BF7C                            ; ===========================================================================
0001BF7C                            
0001BF7C                            loc_1A020:
0001BF7C 303C 00B1                  		move.w	#$B1,d0
0001BF80 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play electricity sound
0001BF86                            ; ===========================================================================
0001BF86                            
0001BF86                            loc_1A02A:				; XREF: off_19E80
0001BF86 117C 0030 0017             		move.b	#$30,$17(a0)
0001BF8C 08E8 0000 0022             		bset	#0,$22(a0)
0001BF92 4EB9 0000 E8E8             		jsr	SpeedToPos
0001BF98 117C 0006 001A             		move.b	#6,$1A(a0)
0001BF9E 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BFA4 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001BFAA 6500                       		bcs.s	loc_1A070
0001BFAC 317C 059C 000C             		move.w	#$59C,$C(a0)
0001BFB2 5428 0034                  		addq.b	#2,$34(a0)
0001BFB6 117C 0020 0017             		move.b	#$20,$17(a0)
0001BFBC 317C 0100 0010             		move.w	#$100,$10(a0)
0001BFC2 317C FF00 0012             		move.w	#-$100,$12(a0)
0001BFC8 5438 F742                  		addq.b	#2,($FFFFF742).w
0001BFCC                            
0001BFCC                            loc_1A070:
0001BFCC 6000 0000                  		bra.w	loc_1A166
0001BFD0                            ; ===========================================================================
0001BFD0                            
0001BFD0                            loc_1A074:				; XREF: off_19E80
0001BFD0 08E8 0000 0022             		bset	#0,$22(a0)
0001BFD6 117C 0004 001C             		move.b	#4,$1C(a0)
0001BFDC 4EB9 0000 E8E8             		jsr	SpeedToPos
0001BFE2 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BFE8 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001BFEE 6500                       		bcs.s	loc_1A09A
0001BFF0 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001BFF6                            
0001BFF6                            loc_1A09A:
0001BFF6 317C 0400 0010             		move.w	#$400,$10(a0)
0001BFFC 3028 0008                  		move.w	8(a0),d0
0001C000 9078 D008                  		sub.w	($FFFFD008).w,d0
0001C004 6A00                       		bpl.s	loc_1A0B4
0001C006 317C 0500 0010             		move.w	#$500,$10(a0)
0001C00C 6000 0000                  		bra.w	loc_1A0F2
0001C010                            ; ===========================================================================
0001C010                            
0001C010                            loc_1A0B4:
0001C010 0440 0070                  		subi.w	#$70,d0
0001C014 6500                       		bcs.s	loc_1A0F2
0001C016 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C01C 5140                       		subq.w	#8,d0
0001C01E 6500                       		bcs.s	loc_1A0F2
0001C020 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C026 5140                       		subq.w	#8,d0
0001C028 6500                       		bcs.s	loc_1A0F2
0001C02A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C030 5140                       		subq.w	#8,d0
0001C032 6500                       		bcs.s	loc_1A0F2
0001C034 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C03A 5140                       		subq.w	#8,d0
0001C03C 6500                       		bcs.s	loc_1A0F2
0001C03E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C044 0440 0038                  		subi.w	#$38,d0
0001C048 6500                       		bcs.s	loc_1A0F2
0001C04A 4268 0010                  		clr.w	$10(a0)
0001C04E                            
0001C04E                            loc_1A0F2:
0001C04E 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001C054 6500                       		bcs.s	loc_1A110
0001C056 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001C05C 317C 0240 0010             		move.w	#$240,$10(a0)
0001C062 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001C068 5428 0034                  		addq.b	#2,$34(a0)
0001C06C                            
0001C06C                            loc_1A110:
0001C06C 6000                       		bra.s	loc_1A15C
0001C06E                            ; ===========================================================================
0001C06E                            
0001C06E                            loc_1A112:				; XREF: off_19E80
0001C06E 4EB9 0000 E8E8             		jsr	SpeedToPos
0001C074 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001C07A 6500                       		bcs.s	loc_1A124
0001C07C 4268 0010                  		clr.w	$10(a0)
0001C080                            
0001C080                            loc_1A124:
0001C080 0668 0034 0012             		addi.w	#$34,$12(a0)
0001C086 4A68 0012                  		tst.w	$12(a0)
0001C08A 6B00                       		bmi.s	loc_1A142
0001C08C 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001C092 6500                       		bcs.s	loc_1A142
0001C094 317C 0592 000C             		move.w	#$592,$C(a0)
0001C09A 4268 0012                  		clr.w	$12(a0)
0001C09E                            
0001C09E                            loc_1A142:
0001C09E 3028 0010                  		move.w	$10(a0),d0
0001C0A2 8068 0012                  		or.w	$12(a0),d0
0001C0A6 6600                       		bne.s	loc_1A15C
0001C0A8 5428 0034                  		addq.b	#2,$34(a0)
0001C0AC 317C FE80 0012             		move.w	#-$180,$12(a0)
0001C0B2 117C 0001 0021             		move.b	#1,$21(a0)
0001C0B8                            
0001C0B8                            loc_1A15C:
0001C0B8 43FA F892                  		lea	Ani_obj82(pc),a1
0001C0BC 4EB9 0000 B962             		jsr	AnimateSprite
0001C0C2                            
0001C0C2                            loc_1A166:
0001C0C2 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001C0C8 6C00                       		bge.s	loc_1A172
0001C0CA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001C0CE                            
0001C0CE                            loc_1A172:
0001C0CE 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001C0D4 6C00                       		bge.s	locret_1A190
0001C0D6 323C 001B                  		move.w	#$1B,d1
0001C0DA 343C 0070                  		move.w	#$70,d2
0001C0DE 363C 0071                  		move.w	#$71,d3
0001C0E2 3828 0008                  		move.w	8(a0),d4
0001C0E6 4EF9 0001 1270             		jmp	SolidObject
0001C0EC                            ; ===========================================================================
0001C0EC                            
0001C0EC                            locret_1A190:
0001C0EC 4E75                       		rts	
0001C0EE                            ; ===========================================================================
0001C0EE                            
0001C0EE                            loc_1A192:				; XREF: off_19E80
0001C0EE 217C 0001 9C5C 0004        		move.l	#Map_Eggman,4(a0)
0001C0F6 317C 0400 0002             		move.w	#$400,2(a0)
0001C0FC 117C 0000 001C             		move.b	#0,$1C(a0)
0001C102 08E8 0000 0022             		bset	#0,$22(a0)
0001C108 4EB9 0000 E8E8             		jsr	SpeedToPos
0001C10E 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001C114 6400                       		bcc.s	loc_1A1D0
0001C116 317C 0180 0010             		move.w	#$180,$10(a0)
0001C11C 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001C122 117C 000F 0020             		move.b	#$F,$20(a0)
0001C128 5428 0034                  		addq.b	#2,$34(a0)
0001C12C                            
0001C12C                            loc_1A1D0:
0001C12C 6000 FF8A                  		bra.w	loc_1A15C
0001C130                            ; ===========================================================================
0001C130                            
0001C130                            loc_1A1D4:				; XREF: off_19E80
0001C130 08E8 0000 0022             		bset	#0,$22(a0)
0001C136 4EB9 0000 E8E8             		jsr	SpeedToPos
0001C13C 4A68 0030                  		tst.w	$30(a0)
0001C140 6600                       		bne.s	loc_1A1FC
0001C142 4A28 0020                  		tst.b	$20(a0)
0001C146 6600                       		bne.s	loc_1A216
0001C148 317C 001E 0030             		move.w	#$1E,$30(a0)
0001C14E 303C 00AC                  		move.w	#$AC,d0
0001C152 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C158                            
0001C158                            loc_1A1FC:
0001C158 5368 0030                  		subq.w	#1,$30(a0)
0001C15C 6600                       		bne.s	loc_1A216
0001C15E 4A28 0022                  		tst.b	$22(a0)
0001C162 6A00                       		bpl.s	loc_1A210
0001C164 317C 0060 0012             		move.w	#$60,$12(a0)
0001C16A 6000                       		bra.s	loc_1A216
0001C16C                            ; ===========================================================================
0001C16C                            
0001C16C                            loc_1A210:
0001C16C 117C 000F 0020             		move.b	#$F,$20(a0)
0001C172                            
0001C172                            loc_1A216:
0001C172 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001C178 6D00                       		blt.s	loc_1A23A
0001C17A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001C180 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001C186 4278 D020                  		clr.w	($FFFFD020).w
0001C18A 4A68 0012                  		tst.w	$12(a0)
0001C18E 6A00                       		bpl.s	loc_1A248
0001C190 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001C196                            
0001C196                            loc_1A23A:
0001C196 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001C19C 6D00                       		blt.s	loc_1A248
0001C19E 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001C1A4                            
0001C1A4                            loc_1A248:
0001C1A4 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001C1AA 6500                       		bcs.s	loc_1A260
0001C1AC 4A28 0001                  		tst.b	1(a0)
0001C1B0 6B00                       		bmi.s	loc_1A260
0001C1B2 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001C1B8 6000 FAEE                  		bra.w	Obj85_Delete
0001C1BC                            ; ===========================================================================
0001C1BC                            
0001C1BC                            loc_1A260:
0001C1BC 6000 FEFA                  		bra.w	loc_1A15C
0001C1C0                            ; ===========================================================================
0001C1C0                            
0001C1C0                            loc_1A264:				; XREF: Obj85_Index
0001C1C0 2268 0034                  		movea.l	$34(a0),a1
0001C1C4 1011                       		move.b	(a1),d0
0001C1C6 B010                       		cmp.b	(a0),d0
0001C1C8 6600 FADE                  		bne.w	Obj85_Delete
0001C1CC 117C 0007 001C             		move.b	#7,$1C(a0)
0001C1D2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C1D8 6C00                       		bge.s	loc_1A280
0001C1DA 6000                       		bra.s	loc_1A2A6
0001C1DC                            ; ===========================================================================
0001C1DC                            
0001C1DC                            loc_1A280:
0001C1DC 4A69 0010                  		tst.w	$10(a1)
0001C1E0 6700                       		beq.s	loc_1A28C
0001C1E2 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C1E8                            
0001C1E8                            loc_1A28C:
0001C1E8 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001C1EC 4EB9 0000 B962             		jsr	AnimateSprite
0001C1F2                            
0001C1F2                            loc_1A296:
0001C1F2 2268 0034                  		movea.l	$34(a0),a1
0001C1F6 3169 0008 0008             		move.w	8(a1),8(a0)
0001C1FC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C202                            
0001C202                            loc_1A2A6:
0001C202 2268 0034                  		movea.l	$34(a0),a1
0001C206 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C20C 7003                       		moveq	#3,d0
0001C20E C028 0022                  		and.b	$22(a0),d0
0001C212 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C218 8128 0001                  		or.b	d0,1(a0)
0001C21C 4EF9 0000 E902             		jmp	DisplaySprite
0001C222                            ; ===========================================================================
0001C222                            
0001C222                            loc_1A2C6:				; XREF: Obj85_Index
0001C222 2268 0034                  		movea.l	$34(a0),a1
0001C226 1011                       		move.b	(a1),d0
0001C228 B010                       		cmp.b	(a0),d0
0001C22A 6600 FA7C                  		bne.w	Obj85_Delete
0001C22E 0CA9 0001 9C5C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C236 6700                       		beq.s	loc_1A2E4
0001C238 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C23E 60C2                       		bra.s	loc_1A2A6
0001C240                            ; ===========================================================================
0001C240                            
0001C240                            loc_1A2E4:
0001C240 117C 0001 001C             		move.b	#1,$1C(a0)
0001C246 4A29 0021                  		tst.b	$21(a1)
0001C24A 6F00                       		ble.s	loc_1A312
0001C24C 117C 0006 001C             		move.b	#6,$1C(a0)
0001C252 217C 0001 9C5C 0004        		move.l	#Map_Eggman,4(a0)
0001C25A 317C 0400 0002             		move.w	#$400,2(a0)
0001C260 43FA D9AA                  		lea	Ani_Eggman(pc),a1
0001C264 4EB9 0000 B962             		jsr	AnimateSprite
0001C26A 6000 FF86                  		bra.w	loc_1A296
0001C26E                            ; ===========================================================================
0001C26E                            
0001C26E                            loc_1A312:
0001C26E 4A28 0001                  		tst.b	1(a0)
0001C272 6A00 FA34                  		bpl.w	Obj85_Delete
0001C276 6100 D536                  		bsr.w	BossDefeated
0001C27A 117C 0002 0018             		move.b	#2,$18(a0)
0001C280 117C 0000 001C             		move.b	#0,$1C(a0)
0001C286 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C28E 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C294 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C298 4EB9 0000 B962             		jsr	AnimateSprite
0001C29E 6000 FF52                  		bra.w	loc_1A296
0001C2A2                            ; ===========================================================================
0001C2A2                            
0001C2A2                            loc_1A346:				; XREF: Obj85_Index
0001C2A2 08E8 0000 0022             		bset	#0,$22(a0)
0001C2A8 2268 0034                  		movea.l	$34(a0),a1
0001C2AC 0CA9 0001 9C5C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C2B4 6700                       		beq.s	loc_1A35E
0001C2B6 6000 FF4A                  		bra.w	loc_1A2A6
0001C2BA                            ; ===========================================================================
0001C2BA                            
0001C2BA                            loc_1A35E:
0001C2BA 3169 0008 0008             		move.w	8(a1),8(a0)
0001C2C0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C2C6 4A28 001E                  		tst.b	$1E(a0)
0001C2CA 6600                       		bne.s	loc_1A376
0001C2CC 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C2D2                            
0001C2D2                            loc_1A376:
0001C2D2 5328 001E                  		subq.b	#1,$1E(a0)
0001C2D6 6E00                       		bgt.s	loc_1A38A
0001C2D8 5228 001A                  		addq.b	#1,$1A(a0)
0001C2DC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C2E2 6E00 F9C4                  		bgt.w	Obj85_Delete
0001C2E6                            
0001C2E6                            loc_1A38A:
0001C2E6 6000 FF0A                  		bra.w	loc_1A296
0001C2EA                            ; ===========================================================================
0001C2EA                            
0001C2EA                            loc_1A38E:				; XREF: Obj85_Index
0001C2EA 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C2F0 3038 D008                  		move.w	($FFFFD008).w,d0
0001C2F4 9068 0008                  		sub.w	8(a0),d0
0001C2F8 6500                       		bcs.s	loc_1A3A6
0001C2FA 4A28 0001                  		tst.b	1(a0)
0001C2FE 6A00 F9A8                  		bpl.w	Obj85_Delete
0001C302                            
0001C302                            loc_1A3A6:
0001C302 4EF9 0000 E902             		jmp	DisplaySprite
0001C308                            ; ===========================================================================
0001C308                            
0001C308                            loc_1A3AC:				; XREF: Obj85_Index
0001C308 117C 0000 001A             		move.b	#0,$1A(a0)
0001C30E 08E8 0000 0022             		bset	#0,$22(a0)
0001C314 2268 0034                  		movea.l	$34(a0),a1
0001C318 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C31E 6600                       		bne.s	loc_1A3D0
0001C320 0CA9 0001 9C5C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C328 6700 F97E                  		beq.w	Obj85_Delete
0001C32C                            
0001C32C                            loc_1A3D0:
0001C32C 6000 FED4                  		bra.w	loc_1A2A6
0001C330                            ; ===========================================================================
0001C330                            Ani_obj85:
0001C330                            	include "_anim\obj85.asm"
0001C330                            ; ---------------------------------------------------------------------------
0001C330                            ; Animation script - Eggman (FZ)
0001C330                            ; ---------------------------------------------------------------------------
0001C330 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C332 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C336                            		even
0001C336                            		even
0001C336                            
0001C336                            Map_Eggman2:
0001C336                            	include "_maps\Eggman2.asm"
0001C336                            ; ---------------------------------------------------------------------------
0001C336                            ; Sprite mappings - Eggman (FZ)
0001C336                            ; ---------------------------------------------------------------------------
0001C336 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C338 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C33A 06                         byte_1A3DE:	dc.b 6
0001C33B E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C340 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C345 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C34A FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C34F FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C354 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C359 06                         byte_1A3FD:	dc.b 6
0001C35A E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C35F EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C364 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C369 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C36E FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C373 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C378                            		even
0001C378                            		even
0001C378                            
0001C378                            Map_FZBoss:
0001C378                            	include "_maps\FZ boss.asm"
0001C378                            ; ---------------------------------------------------------------------------
0001C378                            ; Sprite mappings - boss (FZ)
0001C378                            ; ---------------------------------------------------------------------------
0001C378 0000                       		dc.w byte_1A422-Map_FZBoss
0001C37A 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C37C 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C37E 02                         byte_1A422:	dc.b 2
0001C37F 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C384 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C389 03                         byte_1A42D:	dc.b 3
0001C38A 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C38F 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C394 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C399 02                         byte_1A43D:	dc.b 2
0001C39A 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C39F 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C3A4                            		even
0001C3A4                            		even
0001C3A4                            
0001C3A4                            ; ===========================================================================
0001C3A4                            
0001C3A4                            Obj84_Delete:
0001C3A4 4EF9 0000 E952             		jmp	DeleteObject
0001C3AA                            ; ===========================================================================
0001C3AA                            ; ---------------------------------------------------------------------------
0001C3AA                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C3AA                            ; ---------------------------------------------------------------------------
0001C3AA                            
0001C3AA                            Obj84:					; XREF: Obj_Index
0001C3AA 7000                       		moveq	#0,d0
0001C3AC 1028 0024                  		move.b	$24(a0),d0
0001C3B0 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C3B4 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C3B8                            ; ===========================================================================
0001C3B8 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C3BA 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C3BC 0000                       		dc.w loc_1A57E-Obj84_Index
0001C3BE                            
0001C3BE 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C3C2 2550 0620                  		dc.w $2550, $620
0001C3C6 2490 04C0                  		dc.w $2490, $4C0
0001C3CA 2510 04C0                  		dc.w $2510, $4C0
0001C3CE                            ; ===========================================================================
0001C3CE                            
0001C3CE                            Obj84_Main:				; XREF: Obj84_Index
0001C3CE 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C3D2 7000                       		moveq	#0,d0
0001C3D4 1028 0028                  		move.b	$28(a0),d0
0001C3D8 D040                       		add.w	d0,d0
0001C3DA D2C0                       		adda.w	d0,a1
0001C3DC 117C 0004 0001             		move.b	#4,1(a0)
0001C3E2 08E8 0007 0001             		bset	#7,1(a0)
0001C3E8 08E8 0004 0001             		bset	#4,1(a0)
0001C3EE 317C 0300 0002             		move.w	#$300,2(a0)
0001C3F4 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C3FC 3159 0008                  		move.w	(a1)+,8(a0)
0001C400 3151 000C                  		move.w	(a1),$C(a0)
0001C404 3159 0038                  		move.w	(a1)+,$38(a0)
0001C408 117C 0020 0016             		move.b	#$20,$16(a0)
0001C40E 117C 0060 0017             		move.b	#$60,$17(a0)
0001C414 117C 0020 0019             		move.b	#$20,$19(a0)
0001C41A 117C 0060 0016             		move.b	#$60,$16(a0)
0001C420 117C 0003 0018             		move.b	#3,$18(a0)
0001C426 5428 0024                  		addq.b	#2,$24(a0)
0001C42A                            
0001C42A                            loc_1A4CE:				; XREF: Obj84_Index
0001C42A 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C430 6F00                       		ble.s	loc_1A4DC
0001C432 08E8 0001 0001             		bset	#1,1(a0)
0001C438                            
0001C438                            loc_1A4DC:
0001C438 42A8 003C                  		clr.l	$3C(a0)
0001C43C 4A28 0029                  		tst.b	$29(a0)
0001C440 6700                       		beq.s	loc_1A4EA
0001C442 5428 0024                  		addq.b	#2,$24(a0)
0001C446                            
0001C446                            loc_1A4EA:
0001C446 2028 003C                  		move.l	$3C(a0),d0
0001C44A 2228 0038                  		move.l	$38(a0),d1
0001C44E D280                       		add.l	d0,d1
0001C450 4841                       		swap	d1
0001C452 3141 000C                  		move.w	d1,$C(a0)
0001C456 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C45C 6600                       		bne.s	loc_1A524
0001C45E 4A68 0030                  		tst.w	$30(a0)
0001C462 6A00                       		bpl.s	loc_1A524
0001C464 70F6                       		moveq	#-$A,d0
0001C466 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C46C 6F00                       		ble.s	loc_1A514
0001C46E 700E                       		moveq	#$E,d0
0001C470                            
0001C470                            loc_1A514:
0001C470 D240                       		add.w	d0,d1
0001C472 2268 0034                  		movea.l	$34(a0),a1
0001C476 3341 000C                  		move.w	d1,$C(a1)
0001C47A 3368 0008 0008             		move.w	8(a0),8(a1)
0001C480                            
0001C480                            loc_1A524:
0001C480 323C 002B                  		move.w	#$2B,d1
0001C484 343C 0060                  		move.w	#$60,d2
0001C488 363C 0061                  		move.w	#$61,d3
0001C48C 3828 0008                  		move.w	8(a0),d4
0001C490 4EB9 0001 1270             		jsr	SolidObject
0001C496 7000                       		moveq	#0,d0
0001C498 3228 003C                  		move.w	$3C(a0),d1
0001C49C 6A00                       		bpl.s	loc_1A550
0001C49E 4441                       		neg.w	d1
0001C4A0 5141                       		subq.w	#8,d1
0001C4A2 6500                       		bcs.s	loc_1A55C
0001C4A4 5200                       		addq.b	#1,d0
0001C4A6 E841                       		asr.w	#4,d1
0001C4A8 D041                       		add.w	d1,d0
0001C4AA 6000                       		bra.s	loc_1A55C
0001C4AC                            ; ===========================================================================
0001C4AC                            
0001C4AC                            loc_1A550:
0001C4AC 0441 0027                  		subi.w	#$27,d1
0001C4B0 6500                       		bcs.s	loc_1A55C
0001C4B2 5200                       		addq.b	#1,d0
0001C4B4 E841                       		asr.w	#4,d1
0001C4B6 D041                       		add.w	d1,d0
0001C4B8                            
0001C4B8                            loc_1A55C:
0001C4B8 1140 001A                  		move.b	d0,$1A(a0)
0001C4BC 3038 D008                  		move.w	($FFFFD008).w,d0
0001C4C0 9068 0008                  		sub.w	8(a0),d0
0001C4C4 6B00                       		bmi.s	loc_1A578
0001C4C6 0440 0140                  		subi.w	#$140,d0
0001C4CA 6B00                       		bmi.s	loc_1A578
0001C4CC 4A28 0001                  		tst.b	1(a0)
0001C4D0 6A00 FED2                  		bpl.w	Obj84_Delete
0001C4D4                            
0001C4D4                            loc_1A578:
0001C4D4 4EF9 0000 E902             		jmp	DisplaySprite
0001C4DA                            ; ===========================================================================
0001C4DA                            
0001C4DA                            loc_1A57E:				; XREF: Obj84_Index
0001C4DA 7000                       		moveq	#0,d0
0001C4DC 1028 0028                  		move.b	$28(a0),d0
0001C4E0 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C4E4 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C4E8 6000 FF5C                  		bra.w	loc_1A4EA
0001C4EC                            ; ===========================================================================
0001C4EC 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C4EE 0000                       		dc.w loc_1A598-off_1A590
0001C4F0 0000                       		dc.w loc_1A604-off_1A590
0001C4F2 0000                       		dc.w loc_1A604-off_1A590
0001C4F4                            ; ===========================================================================
0001C4F4                            
0001C4F4                            loc_1A598:				; XREF: off_1A590
0001C4F4 4A28 0029                  		tst.b	$29(a0)
0001C4F8 6600                       		bne.s	loc_1A5D4
0001C4FA 2268 0034                  		movea.l	$34(a0),a1
0001C4FE 4A29 0021                  		tst.b	$21(a1)
0001C502 6600                       		bne.s	loc_1A5B4
0001C504 6100 D2A8                  		bsr.w	BossDefeated
0001C508 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C510                            
0001C510                            loc_1A5B4:
0001C510 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C518 6400                       		bcc.s	locret_1A602
0001C51A 42A8 003C                  		clr.l	$3C(a0)
0001C51E 2268 0034                  		movea.l	$34(a0),a1
0001C522 5369 0032                  		subq.w	#1,$32(a1)
0001C526 4269 0030                  		clr.w	$30(a1)
0001C52A 5528 0024                  		subq.b	#2,$24(a0)
0001C52E 4E75                       		rts	
0001C530                            ; ===========================================================================
0001C530                            
0001C530                            loc_1A5D4:
0001C530 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001C536 6C00                       		bge.s	loc_1A5E4
0001C538 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001C540                            
0001C540                            loc_1A5E4:
0001C540 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001C548 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001C54E 6E00                       		bgt.s	locret_1A602
0001C550 4268 003E                  		clr.w	$3E(a0)
0001C554 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001C55A 4228 0029                  		clr.b	$29(a0)
0001C55E                            
0001C55E                            locret_1A602:
0001C55E 4E75                       		rts	
0001C560                            ; ===========================================================================
0001C560                            
0001C560                            loc_1A604:				; XREF: off_1A590
0001C560 08E8 0001 0001             		bset	#1,1(a0)
0001C566 4A28 0029                  		tst.b	$29(a0)
0001C56A 6600                       		bne.s	loc_1A646
0001C56C 2268 0034                  		movea.l	$34(a0),a1
0001C570 4A29 0021                  		tst.b	$21(a1)
0001C574 6600                       		bne.s	loc_1A626
0001C576 6100 D236                  		bsr.w	BossDefeated
0001C57A 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001C582                            
0001C582                            loc_1A626:
0001C582 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001C58A 6400                       		bcc.s	locret_1A674
0001C58C 42A8 003C                  		clr.l	$3C(a0)
0001C590 2268 0034                  		movea.l	$34(a0),a1
0001C594 5369 0032                  		subq.w	#1,$32(a1)
0001C598 4269 0030                  		clr.w	$30(a1)
0001C59C 5528 0024                  		subq.b	#2,$24(a0)
0001C5A0 4E75                       		rts	
0001C5A2                            ; ===========================================================================
0001C5A2                            
0001C5A2                            loc_1A646:
0001C5A2 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C5A8 6D00                       		blt.s	loc_1A656
0001C5AA 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C5B2                            
0001C5B2                            loc_1A656:
0001C5B2 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C5BA 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C5C0 6D00                       		blt.s	locret_1A674
0001C5C2 4268 003E                  		clr.w	$3E(a0)
0001C5C6 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C5CC 4228 0029                  		clr.b	$29(a0)
0001C5D0                            
0001C5D0                            locret_1A674:
0001C5D0 4E75                       		rts	
0001C5D2                            ; ===========================================================================
0001C5D2                            ; ---------------------------------------------------------------------------
0001C5D2                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C5D2                            ; ---------------------------------------------------------------------------
0001C5D2                            Map_obj84:
0001C5D2                            	include "_maps\obj84.asm"
0001C5D2                            ; ---------------------------------------------------------------------------
0001C5D2                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C5D2                            ; ---------------------------------------------------------------------------
0001C5D2 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C5D6 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C5DA 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C5DE 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C5E2 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C5E6 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C5EA 06                         byte_1A68E:	dc.b 6
0001C5EB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C5F0 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C5F5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C5FA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C5FF B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C604 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C609 08                         byte_1A6AD:	dc.b 8
0001C60A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C60F A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C614 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C619 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C61E B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C623 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C628 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C62D D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C632 0A                         byte_1A6D6:	dc.b $A
0001C633 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C638 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C63D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C642 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C647 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C64C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C651 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C656 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C65B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C660 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C665 0C                         byte_1A709:	dc.b $C
0001C666 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C66B A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C670 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C675 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C67A B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C67F B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C684 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C689 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C68E F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C693 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C698 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C69D 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C6A2 0D                         byte_1A746:	dc.b $D
0001C6A3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C6A8 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C6AD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C6B2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C6B7 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C6BC B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C6C1 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C6C6 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C6CB F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C6D0 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C6D5 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C6DA 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C6DF 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C6E4 0E                         byte_1A788:	dc.b $E
0001C6E5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C6EA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C6EF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C6F4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C6F9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C6FE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C703 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C708 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C70D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C712 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C717 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C71C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C721 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C726 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C72B 02                         byte_1A7CF:	dc.b 2
0001C72C F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C731 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C736                            		even
0001C736                            		even
0001C736                            
0001C736                            ; ===========================================================================
0001C736                            ; ---------------------------------------------------------------------------
0001C736                            ; Object 86 - energy balls (FZ)
0001C736                            ; ---------------------------------------------------------------------------
0001C736                            
0001C736                            Obj86:					; XREF: Obj_Index
0001C736 7000                       		moveq	#0,d0
0001C738 1028 0024                  		move.b	$24(a0),d0
0001C73C 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C740 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C744                            ; ===========================================================================
0001C744 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C746 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C748 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C74A 0000                       		dc.w loc_1A962-Obj86_Index
0001C74C 0000                       		dc.w loc_1A982-Obj86_Index
0001C74E                            ; ===========================================================================
0001C74E                            
0001C74E                            Obj86_Main:				; XREF: Obj86_Index
0001C74E 317C 2588 0008             		move.w	#$2588,8(a0)
0001C754 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C75A 317C 0300 0002             		move.w	#$300,2(a0)
0001C760 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C768 117C 0000 001C             		move.b	#0,$1C(a0)
0001C76E 117C 0003 0018             		move.b	#3,$18(a0)
0001C774 117C 0008 0017             		move.b	#8,$17(a0)
0001C77A 117C 0008 0016             		move.b	#8,$16(a0)
0001C780 117C 0004 0001             		move.b	#4,1(a0)
0001C786 08E8 0007 0001             		bset	#7,1(a0)
0001C78C 5428 0024                  		addq.b	#2,$24(a0)
0001C790                            
0001C790                            Obj86_Generator:			; XREF: Obj86_Index
0001C790 2268 0034                  		movea.l	$34(a0),a1
0001C794 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C79A 6600                       		bne.s	loc_1A850
0001C79C 10BC 003F                  		move.b	#$3F,(a0)
0001C7A0 117C 0000 0024             		move.b	#0,$24(a0)
0001C7A6 4EF9 0000 E902             		jmp	DisplaySprite
0001C7AC                            ; ===========================================================================
0001C7AC                            
0001C7AC                            loc_1A850:
0001C7AC 117C 0000 001C             		move.b	#0,$1C(a0)
0001C7B2 4A28 0029                  		tst.b	$29(a0)
0001C7B6 6700                       		beq.s	loc_1A86C
0001C7B8 5428 0024                  		addq.b	#2,$24(a0)
0001C7BC 117C 0001 001C             		move.b	#1,$1C(a0)
0001C7C2 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C7C8                            
0001C7C8                            loc_1A86C:
0001C7C8 323C 0013                  		move.w	#$13,d1
0001C7CC 343C 0008                  		move.w	#8,d2
0001C7D0 363C 0011                  		move.w	#$11,d3
0001C7D4 3828 0008                  		move.w	8(a0),d4
0001C7D8 4EB9 0001 1270             		jsr	SolidObject
0001C7DE 3038 D008                  		move.w	($FFFFD008).w,d0
0001C7E2 9068 0008                  		sub.w	8(a0),d0
0001C7E6 6B00                       		bmi.s	loc_1A89A
0001C7E8 0440 0140                  		subi.w	#$140,d0
0001C7EC 6B00                       		bmi.s	loc_1A89A
0001C7EE 4A28 0001                  		tst.b	1(a0)
0001C7F2 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C7F6                            
0001C7F6                            loc_1A89A:
0001C7F6 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C7FA 4EB9 0000 B962             		jsr	AnimateSprite
0001C800 4EF9 0000 E902             		jmp	DisplaySprite
0001C806                            ; ===========================================================================
0001C806                            
0001C806                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C806 4A28 0029                  		tst.b	$29(a0)
0001C80A 6700 0000                  		beq.w	loc_1A954
0001C80E 4228 0029                  		clr.b	$29(a0)
0001C812 D068 0030                  		add.w	$30(a0),d0
0001C816 0240 001E                  		andi.w	#$1E,d0
0001C81A D4C0                       		adda.w	d0,a2
0001C81C 5868 0030                  		addq.w	#4,$30(a0)
0001C820 4268 0032                  		clr.w	$32(a0)
0001C824 7403                       		moveq	#3,d2
0001C826                            
0001C826                            Obj86_Loop:
0001C826 4EB9 0000 F06E             		jsr	SingleObjLoad2
0001C82C 6600 0000                  		bne.w	loc_1A954
0001C830 12BC 0086                  		move.b	#$86,(a1)
0001C834 3368 0008 0008             		move.w	8(a0),8(a1)
0001C83A 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C840 137C 0008 0024             		move.b	#8,$24(a1)
0001C846 337C 2300 0002             		move.w	#$2300,2(a1)
0001C84C 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C854 137C 000C 0016             		move.b	#$C,$16(a1)
0001C85A 137C 000C 0017             		move.b	#$C,$17(a1)
0001C860 137C 0000 0020             		move.b	#0,$20(a1)
0001C866 137C 0003 0018             		move.b	#3,$18(a1)
0001C86C 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C872 137C 0004 0001             		move.b	#4,1(a1)
0001C878 08E9 0007 0001             		bset	#7,1(a1)
0001C87E 2348 0034                  		move.l	a0,$34(a1)
0001C882 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001C888 3228 0032                  		move.w	$32(a0),d1
0001C88C C3FC FFB1                  		muls.w	#-$4F,d1
0001C890 0641 2578                  		addi.w	#$2578,d1
0001C894 0240 001F                  		andi.w	#$1F,d0
0001C898 0440 0010                  		subi.w	#$10,d0
0001C89C D041                       		add.w	d1,d0
0001C89E 3340 0030                  		move.w	d0,$30(a1)
0001C8A2 5268 0032                  		addq.w	#1,$32(a0)
0001C8A6 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C8AC 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C8B0                            
0001C8B0                            loc_1A954:
0001C8B0 4A68 0032                  		tst.w	$32(a0)
0001C8B4 6600                       		bne.s	loc_1A95E
0001C8B6 5428 0024                  		addq.b	#2,$24(a0)
0001C8BA                            
0001C8BA                            loc_1A95E:
0001C8BA 6000 FF0C                  		bra.w	loc_1A86C
0001C8BE                            ; ===========================================================================
0001C8BE                            
0001C8BE                            loc_1A962:				; XREF: Obj86_Index
0001C8BE 117C 0002 001C             		move.b	#2,$1C(a0)
0001C8C4 4A68 0038                  		tst.w	$38(a0)
0001C8C8 6600                       		bne.s	loc_1A97E
0001C8CA 117C 0002 0024             		move.b	#2,$24(a0)
0001C8D0 2268 0034                  		movea.l	$34(a0),a1
0001C8D4 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C8DA                            
0001C8DA                            loc_1A97E:
0001C8DA 6000 FEEC                  		bra.w	loc_1A86C
0001C8DE                            ; ===========================================================================
0001C8DE                            
0001C8DE                            loc_1A982:				; XREF: Obj86_Index
0001C8DE 7000                       		moveq	#0,d0
0001C8E0 1028 0025                  		move.b	$25(a0),d0
0001C8E4 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C8E8 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C8EC 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C8F0 4EB9 0000 B962             		jsr	AnimateSprite
0001C8F6 4EF9 0000 E902             		jmp	DisplaySprite
0001C8FC                            ; ===========================================================================
0001C8FC 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001C8FE 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001C900 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001C902                            ; ===========================================================================
0001C902                            
0001C902                            loc_1A9A6:				; XREF: Obj86_Index2
0001C902 3028 0030                  		move.w	$30(a0),d0
0001C906 9068 0008                  		sub.w	8(a0),d0
0001C90A E940                       		asl.w	#4,d0
0001C90C 3140 0010                  		move.w	d0,$10(a0)
0001C910 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C916 5428 0025                  		addq.b	#2,$25(a0)
0001C91A 4E75                       		rts	
0001C91C                            ; ===========================================================================
0001C91C                            
0001C91C                            loc_1A9C0:				; XREF: Obj86_Index2
0001C91C 4A68 0010                  		tst.w	$10(a0)
0001C920 6700                       		beq.s	loc_1A9E6
0001C922 4EB9 0000 E8E8             		jsr	SpeedToPos
0001C928 3028 0008                  		move.w	8(a0),d0
0001C92C 9068 0030                  		sub.w	$30(a0),d0
0001C930 6400                       		bcc.s	loc_1A9E6
0001C932 4268 0010                  		clr.w	$10(a0)
0001C936 D168 0008                  		add.w	d0,8(a0)
0001C93A 2268 0034                  		movea.l	$34(a0),a1
0001C93E 5369 0032                  		subq.w	#1,$32(a1)
0001C942                            
0001C942                            loc_1A9E6:
0001C942 117C 0000 001C             		move.b	#0,$1C(a0)
0001C948 5368 0028                  		subq.w	#1,$28(a0)
0001C94C 6600                       		bne.s	locret_1AA1C
0001C94E 5428 0025                  		addq.b	#2,$25(a0)
0001C952 117C 0001 001C             		move.b	#1,$1C(a0)
0001C958 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C95E 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C964 7000                       		moveq	#0,d0
0001C966 3038 D008                  		move.w	($FFFFD008).w,d0
0001C96A 9068 0008                  		sub.w	8(a0),d0
0001C96E 3140 0010                  		move.w	d0,$10(a0)
0001C972 317C 0140 0012             		move.w	#$140,$12(a0)
0001C978                            
0001C978                            locret_1AA1C:
0001C978 4E75                       		rts	
0001C97A                            ; ===========================================================================
0001C97A                            
0001C97A                            loc_1AA1E:				; XREF: Obj86_Index2
0001C97A 4EB9 0000 E8E8             		jsr	SpeedToPos
0001C980 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001C986 6400                       		bcc.s	loc_1AA34
0001C988 5368 0028                  		subq.w	#1,$28(a0)
0001C98C 6700                       		beq.s	loc_1AA34
0001C98E 4E75                       		rts	
0001C990                            ; ===========================================================================
0001C990                            
0001C990                            loc_1AA34:
0001C990 2268 0034                  		movea.l	$34(a0),a1
0001C994 5369 0038                  		subq.w	#1,$38(a1)
0001C998 6000 FA0A                  		bra.w	Obj84_Delete
0001C99C                            ; ===========================================================================
0001C99C                            Ani_obj86:
0001C99C                            	include "_anim\obj86.asm"
0001C99C                            ; ---------------------------------------------------------------------------
0001C99C                            ; Animation script - energy ball launcher (FZ)
0001C99C                            ; ---------------------------------------------------------------------------
0001C99C 0000                       		dc.w byte_1AA46-Ani_obj86
0001C99E 0000                       		dc.w byte_1AA4A-Ani_obj86
0001C9A0 0000                       		dc.w byte_1AA50-Ani_obj86
0001C9A2 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001C9A6 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001C9AC 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001C9B2                            		even
0001C9B2                            		even
0001C9B2                            
0001C9B2                            ; ---------------------------------------------------------------------------
0001C9B2                            ; Sprite mappings - energy ball	launcher (FZ)
0001C9B2                            ; ---------------------------------------------------------------------------
0001C9B2                            Map_obj86:
0001C9B2                            	include "_maps\obj86.asm"
0001C9B2                            ; ---------------------------------------------------------------------------
0001C9B2                            ; Sprite mappings - energy ball	launcher (FZ)
0001C9B2                            ; ---------------------------------------------------------------------------
0001C9B2 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001C9B6 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001C9BA 01                         byte_1AA5E:	dc.b 1
0001C9BB F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001C9C0 01                         byte_1AA64:	dc.b 1
0001C9C1 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001C9C6 01                         byte_1AA6A:	dc.b 1
0001C9C7 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001C9CC 01                         byte_1AA70:	dc.b 1
0001C9CD F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001C9D2                            		even
0001C9D2                            		even
0001C9D2                            
0001C9D2                            Ani_obj86a:
0001C9D2                            	include "_anim\obj86a.asm"
0001C9D2                            ; ---------------------------------------------------------------------------
0001C9D2                            ; Animation script - energy balls (FZ)
0001C9D2                            ; ---------------------------------------------------------------------------
0001C9D2 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001C9D4 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001C9D6 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001C9E5 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001C9F4 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001C9F8 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001CA02                            		even
0001CA02                            		even
0001CA02                            
0001CA02                            ; ---------------------------------------------------------------------------
0001CA02                            ; Sprite mappings - energy balls (FZ)
0001CA02                            ; ---------------------------------------------------------------------------
0001CA02                            Map_obj86a:
0001CA02                            	include "_maps\obj86a.asm"
0001CA02                            ; ---------------------------------------------------------------------------
0001CA02                            ; Sprite mappings - energy balls (FZ)
0001CA02                            ; ---------------------------------------------------------------------------
0001CA02 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001CA06 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001CA0A 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001CA0E 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001CA12 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001CA16 0000                       		dc.w byte_1AB20-Map_obj86a
0001CA18 02                         byte_1AABC:	dc.b 2
0001CA19 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001CA1E 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001CA23 02                         byte_1AAC7:	dc.b 2
0001CA24 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001CA29 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001CA2E 02                         byte_1AAD2:	dc.b 2
0001CA2F F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001CA34 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001CA39 02                         byte_1AADD:	dc.b 2
0001CA3A F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001CA3F 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001CA44 02                         byte_1AAE8:	dc.b 2
0001CA45 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001CA4A 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001CA4F 02                         byte_1AAF3:	dc.b 2
0001CA50 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001CA55 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001CA5A 01                         byte_1AAFE:	dc.b 1
0001CA5B F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001CA60 01                         byte_1AB04:	dc.b 1
0001CA61 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001CA66 02                         byte_1AB0A:	dc.b 2
0001CA67 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001CA6C 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001CA71 02                         byte_1AB15:	dc.b 2
0001CA72 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001CA77 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001CA7C 00                         byte_1AB20:	dc.b 0
0001CA7E 00                         		even
0001CA7E 00                         		even
0001CA7E                            
0001CA7E                            ; ===========================================================================
0001CA7E                            ; ---------------------------------------------------------------------------
0001CA7E                            ; Object 3E - prison capsule
0001CA7E                            ; ---------------------------------------------------------------------------
0001CA7E                            
0001CA7E                            Obj3E:					; XREF: Obj_Index
0001CA7E 7000                       		moveq	#0,d0
0001CA80 1028 0024                  		move.b	$24(a0),d0
0001CA84 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001CA88 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001CA8C 3028 0008                  		move.w	8(a0),d0
0001CA90 0240 FF80                  		andi.w	#$FF80,d0
0001CA94 3238 F700                  		move.w	($FFFFF700).w,d1
0001CA98 0441 0080                  		subi.w	#$80,d1
0001CA9C 0241 FF80                  		andi.w	#$FF80,d1
0001CAA0 9041                       		sub.w	d1,d0
0001CAA2 0C40 0280                  		cmpi.w	#$280,d0
0001CAA6 6300                       		bls.s	Obj3E_NoDel
0001CAA8                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
0001CAA8                            	;	beq.s	Obj3E_Delete		; if it's zero, don't remember object
0001CAA8                            	;	movea.w	d0,a2	; load address into a2
0001CAA8                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001CAA8 6000                       		bra.s	Obj3E_Delete	; and delete object
0001CAAA                            
0001CAAA                            Obj3E_NoDel:
0001CAAA 4EF9 0000 E902             		jmp	DisplaySprite
0001CAB0                            ; ===========================================================================
0001CAB0                            
0001CAB0                            Obj3E_Delete:
0001CAB0 4EF9 0000 E952             		jmp	DeleteObject
0001CAB6                            ; ===========================================================================
0001CAB6 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001CAB8 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001CABA 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001CABC 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CABE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CAC0 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CAC2 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001CAC4 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001CAC6                            
0001CAC6 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001CACA 040C 0501                  		dc.b 4,	$C, 5, 1
0001CACE 0610 0403                  		dc.b 6,	$10, 4,	3
0001CAD2 0810 0305                  		dc.b 8,	$10, 3,	5
0001CAD6                            ; ===========================================================================
0001CAD6                            
0001CAD6                            Obj3E_Main:				; XREF: Obj3E_Index
0001CAD6 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001CADE 317C 049D 0002             		move.w	#$49D,2(a0)
0001CAE4 117C 0004 0001             		move.b	#4,1(a0)
0001CAEA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001CAF0 7000                       		moveq	#0,d0
0001CAF2 1028 0028                  		move.b	$28(a0),d0
0001CAF6 E548                       		lsl.w	#2,d0
0001CAF8 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001CAFC 1159 0024                  		move.b	(a1)+,$24(a0)
0001CB00 1159 0019                  		move.b	(a1)+,$19(a0)
0001CB04 1159 0018                  		move.b	(a1)+,$18(a0)
0001CB08 1159 001A                  		move.b	(a1)+,$1A(a0)
0001CB0C 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001CB10 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001CB12 117C 0006 0020             		move.b	#6,$20(a0)
0001CB18 117C 0008 0021             		move.b	#8,$21(a0)
0001CB1E                            
0001CB1E                            Obj3E_Not02:
0001CB1E 4E75                       		rts	
0001CB20                            ; ===========================================================================
0001CB20                            
0001CB20                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001CB20 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001CB26 6700                       		beq.s	Obj3E_ChkOpened
0001CB28 323C 002B                  		move.w	#$2B,d1
0001CB2C 343C 0018                  		move.w	#$18,d2
0001CB30 363C 0018                  		move.w	#$18,d3
0001CB34 3828 0008                  		move.w	8(a0),d4
0001CB38 4EF9 0001 1270             		jmp	SolidObject
0001CB3E                            ; ===========================================================================
0001CB3E                            
0001CB3E                            Obj3E_ChkOpened:
0001CB3E 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001CB42 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001CB44 4228 0025                  		clr.b	$25(a0)
0001CB48 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CB4E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CB54                            
0001CB54                            Obj3E_DoOpen:
0001CB54 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001CB5A 4E75                       		rts	
0001CB5C                            ; ===========================================================================
0001CB5C                            
0001CB5C                            Obj3E_Switched:				; XREF: Obj3E_Index
0001CB5C 323C 0017                  		move.w	#$17,d1
0001CB60 343C 0008                  		move.w	#8,d2
0001CB64 363C 0008                  		move.w	#8,d3
0001CB68 3828 0008                  		move.w	8(a0),d4
0001CB6C 4EB9 0001 1270             		jsr	SolidObject
0001CB72 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001CB78 4EB9 0000 B962             		jsr	AnimateSprite
0001CB7E 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001CB84 4A28 0025                  		tst.b	$25(a0)
0001CB88 6700                       		beq.s	locret_1AC60
0001CB8A 5068 000C                  		addq.w	#8,$C(a0)
0001CB8E 117C 000A 0024             		move.b	#$A,$24(a0)
0001CB94 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001CB9A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001CB9E 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001CBA2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001CBA8 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001CBAE 4228 0025                  		clr.b	$25(a0)
0001CBB2 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CBB8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CBBE                            
0001CBBE                            locret_1AC60:
0001CBBE 4E75                       		rts	
0001CBC0                            ; ===========================================================================
0001CBC0                            
0001CBC0                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001CBC0 7007                       		moveq	#7,d0
0001CBC2 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CBC6 6600                       		bne.s	loc_1ACA0
0001CBC8 4EB9 0000 F058             		jsr	SingleObjLoad
0001CBCE 6600                       		bne.s	loc_1ACA0
0001CBD0 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001CBD4 3368 0008 0008             		move.w	8(a0),8(a1)
0001CBDA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CBE0 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001CBE6 7200                       		moveq	#0,d1
0001CBE8 1200                       		move.b	d0,d1
0001CBEA E409                       		lsr.b	#2,d1
0001CBEC 0441 0020                  		subi.w	#$20,d1
0001CBF0 D369 0008                  		add.w	d1,8(a1)
0001CBF4 E048                       		lsr.w	#8,d0
0001CBF6 E608                       		lsr.b	#3,d0
0001CBF8 D169 000C                  		add.w	d0,$C(a1)
0001CBFC                            
0001CBFC                            loc_1ACA0:
0001CBFC 5368 001E                  		subq.w	#1,$1E(a0)
0001CC00 6700                       		beq.s	Obj3E_MakeAnimal
0001CC02 4E75                       		rts	
0001CC04                            ; ===========================================================================
0001CC04                            
0001CC04                            Obj3E_MakeAnimal:
0001CC04 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001CC0A 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001CC10 117C 0006 001A             		move.b	#6,$1A(a0)
0001CC16 317C 0096 001E             		move.w	#$96,$1E(a0)
0001CC1C 0668 0020 000C             		addi.w	#$20,$C(a0)
0001CC22 7C07                       		moveq	#7,d6
0001CC24 3A3C 009A                  		move.w	#$9A,d5
0001CC28 78E4                       		moveq	#-$1C,d4
0001CC2A                            
0001CC2A                            Obj3E_Loop:
0001CC2A 4EB9 0000 F058             		jsr	SingleObjLoad
0001CC30 6600                       		bne.s	locret_1ACF8
0001CC32 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CC36 3368 0008 0008             		move.w	8(a0),8(a1)
0001CC3C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CC42 D969 0008                  		add.w	d4,8(a1)
0001CC46 5E44                       		addq.w	#7,d4
0001CC48 3345 0036                  		move.w	d5,$36(a1)
0001CC4C 5145                       		subq.w	#8,d5
0001CC4E 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001CC52                            
0001CC52                            locret_1ACF8:
0001CC52 4E75                       		rts	
0001CC54                            ; ===========================================================================
0001CC54                            
0001CC54                            Obj3E_Animals:				; XREF: Obj3E_Index
0001CC54 7007                       		moveq	#7,d0
0001CC56 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CC5A 6600                       		bne.s	loc_1AD38
0001CC5C 4EB9 0000 F058             		jsr	SingleObjLoad
0001CC62 6600                       		bne.s	loc_1AD38
0001CC64 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CC68 3368 0008 0008             		move.w	8(a0),8(a1)
0001CC6E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CC74 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001CC7A 0240 001F                  		andi.w	#$1F,d0
0001CC7E 5D40                       		subq.w	#6,d0
0001CC80 4A41                       		tst.w	d1
0001CC82 6A00                       		bpl.s	loc_1AD2E
0001CC84 4440                       		neg.w	d0
0001CC86                            
0001CC86                            loc_1AD2E:
0001CC86 D169 0008                  		add.w	d0,8(a1)
0001CC8A 337C 000C 0036             		move.w	#$C,$36(a1)
0001CC90                            
0001CC90                            loc_1AD38:
0001CC90 5368 001E                  		subq.w	#1,$1E(a0)
0001CC94 6600                       		bne.s	locret_1AD48
0001CC96 5428 0024                  		addq.b	#2,$24(a0)
0001CC9A 317C 00B4 001E             		move.w	#180,$1E(a0)
0001CCA0                            
0001CCA0                            locret_1AD48:
0001CCA0 4E75                       		rts	
0001CCA2                            ; ===========================================================================
0001CCA2                            
0001CCA2                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001CCA2 703E                       		moveq	#$3E,d0
0001CCA4 7228                       		moveq	#$28,d1
0001CCA6 7440                       		moveq	#$40,d2
0001CCA8 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001CCAC                            
0001CCAC                            Obj3E_FindObj28:
0001CCAC B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001CCAE 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001CCB0 D2C2                       		adda.w	d2,a1		; next object RAM
0001CCB2 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001CCB6                            
0001CCB6 4EB9 0001 050E             		jsr	GotThroughAct
0001CCBC 4EF9 0000 E952             		jmp	DeleteObject
0001CCC2                            ; ===========================================================================
0001CCC2                            
0001CCC2                            Obj3E_Obj28Found:
0001CCC2 4E75                       		rts	
0001CCC4                            ; ===========================================================================
0001CCC4                            Ani_obj3E:
0001CCC4                            	include "_anim\obj3E.asm"
0001CCC4                            ; ---------------------------------------------------------------------------
0001CCC4                            ; Animation script - prison capsule
0001CCC4                            ; ---------------------------------------------------------------------------
0001CCC4 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CCC6 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CCC8 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001CCCC                            		even
0001CCCC                            		even
0001CCCC                            
0001CCCC                            ; ---------------------------------------------------------------------------
0001CCCC                            ; Sprite mappings - prison capsule
0001CCCC                            ; ---------------------------------------------------------------------------
0001CCCC                            Map_obj3E:
0001CCCC                            	include "_maps\obj3E.asm"
0001CCCC                            ; ---------------------------------------------------------------------------
0001CCCC                            ; Sprite mappings - prison capsule
0001CCCC                            ; ---------------------------------------------------------------------------
0001CCCC 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001CCD0 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001CCD4 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001CCD8 0000                       		dc.w byte_1ADE2-Map_obj3E
0001CCDA 07                         byte_1AD82:	dc.b 7
0001CCDB E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001CCE0 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001CCE5 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001CCEA F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001CCEF F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001CCF4 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CCF9 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CCFE 01                         byte_1ADA6:	dc.b 1
0001CCFF F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001CD04 06                         byte_1ADAC:	dc.b 6
0001CD05 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001CD0A 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001CD0F 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001CD14 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001CD19 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CD1E 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CD23 01                         byte_1ADCB:	dc.b 1
0001CD24 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001CD29 02                         byte_1ADD1:	dc.b 2
0001CD2A E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001CD2F 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001CD34 01                         byte_1ADDC:	dc.b 1
0001CD35 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001CD3A 00                         byte_1ADE2:	dc.b 0
0001CD3C 00                         		even
0001CD3C 00                         		even
0001CD3C                            
0001CD3C                            ; ---------------------------------------------------------------------------
0001CD3C                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001CD3C                            ; ---------------------------------------------------------------------------
0001CD3C                            
0001CD3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD3C                            
0001CD3C                            
0001CD3C                            TouchResponse:				; XREF: Obj01
0001CD3C 4E71                       		nop	
0001CD3E 4EB9 0000 F160             		jsr	(Touch_Rings).l
0001CD44 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001CD48 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001CD4C 5142                       		subq.w	#8,d2
0001CD4E 7A00                       		moveq	#0,d5
0001CD50 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001CD54 5705                       		subq.b	#3,d5
0001CD56 9645                       		sub.w	d5,d3
0001CD58 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001CD5E 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001CD60 0643 000C                  		addi.w	#$C,d3
0001CD64 7A0A                       		moveq	#$A,d5
0001CD66                            
0001CD66                            Touch_NoDuck:
0001CD66 383C 0010                  		move.w	#$10,d4
0001CD6A DA45                       		add.w	d5,d5
0001CD6C 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001CD70 3C3C 005F                  		move.w	#$5F,d6
0001CD74                            
0001CD74                            Touch_Loop:
0001CD74 4A29 0001                  		tst.b	1(a1)
0001CD78 6A00                       		bpl.s	Touch_NextObj
0001CD7A 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001CD7E 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001CD80                            
0001CD80                            Touch_NextObj:
0001CD80 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001CD84 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001CD88                            
0001CD88 7000                       		moveq	#0,d0
0001CD8A 4E75                       		rts	
0001CD8C                            ; ===========================================================================
0001CD8C 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001CD8E 0C14                       		dc.b   $C, $14
0001CD90 140C                       		dc.b  $14,  $C
0001CD92 0410                       		dc.b	4, $10
0001CD94 0C12                       		dc.b   $C, $12
0001CD96 1010                       		dc.b  $10, $10
0001CD98 0606                       		dc.b	6,   6
0001CD9A 180C                       		dc.b  $18,  $C
0001CD9C 0C10                       		dc.b   $C, $10
0001CD9E 100C                       		dc.b  $10,  $C
0001CDA0 0808                       		dc.b	8,   8
0001CDA2 1410                       		dc.b  $14, $10
0001CDA4 1408                       		dc.b  $14,   8
0001CDA6 0E0E                       		dc.b   $E,  $E
0001CDA8 1818                       		dc.b  $18, $18
0001CDAA 2810                       		dc.b  $28, $10
0001CDAC 1018                       		dc.b  $10, $18
0001CDAE 0810                       		dc.b	8, $10
0001CDB0 2070                       		dc.b  $20, $70
0001CDB2 4020                       		dc.b  $40, $20
0001CDB4 8020                       		dc.b  $80, $20
0001CDB6 2020                       		dc.b  $20, $20
0001CDB8 0808                       		dc.b	8,   8
0001CDBA 0404                       		dc.b	4,   4
0001CDBC 2008                       		dc.b  $20,   8
0001CDBE 0C0C                       		dc.b   $C,  $C
0001CDC0 0804                       		dc.b	8,   4
0001CDC2 1804                       		dc.b  $18,   4
0001CDC4 2804                       		dc.b  $28,   4
0001CDC6 0408                       		dc.b	4,   8
0001CDC8 0418                       		dc.b	4, $18
0001CDCA 0428                       		dc.b	4, $28
0001CDCC 0420                       		dc.b	4, $20
0001CDCE 1818                       		dc.b  $18, $18
0001CDD0 0C18                       		dc.b   $C, $18
0001CDD2 4808                       		dc.b  $48,   8
0001CDD4                            ; ===========================================================================
0001CDD4                            
0001CDD4                            Touch_Height:				; XREF: TouchResponse
0001CDD4 0240 003F                  		andi.w	#$3F,d0
0001CDD8 D040                       		add.w	d0,d0
0001CDDA 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001CDDE 7200                       		moveq	#0,d1
0001CDE0 121A                       		move.b	(a2)+,d1
0001CDE2 3029 0008                  		move.w	8(a1),d0
0001CDE6 9041                       		sub.w	d1,d0
0001CDE8 9042                       		sub.w	d2,d0
0001CDEA 6400                       		bcc.s	loc_1AE98
0001CDEC D241                       		add.w	d1,d1
0001CDEE D041                       		add.w	d1,d0
0001CDF0 6500                       		bcs.s	Touch_Width
0001CDF2 6000 FF8C                  		bra.w	Touch_NextObj
0001CDF6                            ; ===========================================================================
0001CDF6                            
0001CDF6                            loc_1AE98:
0001CDF6 B044                       		cmp.w	d4,d0
0001CDF8 6200 FF86                  		bhi.w	Touch_NextObj
0001CDFC                            
0001CDFC                            Touch_Width:
0001CDFC 7200                       		moveq	#0,d1
0001CDFE 121A                       		move.b	(a2)+,d1
0001CE00 3029 000C                  		move.w	$C(a1),d0
0001CE04 9041                       		sub.w	d1,d0
0001CE06 9043                       		sub.w	d3,d0
0001CE08 6400                       		bcc.s	loc_1AEB6
0001CE0A D241                       		add.w	d1,d1
0001CE0C D240                       		add.w	d0,d1
0001CE0E 6500                       		bcs.s	Touch_ChkValue
0001CE10 6000 FF6E                  		bra.w	Touch_NextObj
0001CE14                            ; ===========================================================================
0001CE14                            
0001CE14                            loc_1AEB6:
0001CE14 B045                       		cmp.w	d5,d0
0001CE16 6200 FF68                  		bhi.w	Touch_NextObj
0001CE1A                            
0001CE1A                            Touch_ChkValue:
0001CE1A 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001CE1E 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001CE22 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001CE26 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001CE2A 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001CE2E 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001CE30 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001CE34                            
0001CE34                            ; touch	response is $40-$7F
0001CE34                            
0001CE34 1029 0020                  		move.b	$20(a1),d0
0001CE38 0200 003F                  		andi.b	#$3F,d0
0001CE3C 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001CE40 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001CE42 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001CE48 6400 0000                  		bcc.w	locret_1AEF2
0001CE4C 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001CE50                            
0001CE50                            locret_1AEF2:
0001CE50 4E75                       		rts	
0001CE52                            ; ===========================================================================
0001CE52                            
0001CE52                            Touch_Monitor:
0001CE52 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001CE56 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001CE58 3028 000C                  		move.w	$C(a0),d0
0001CE5C 0440 0010                  		subi.w	#$10,d0
0001CE60 B069 000C                  		cmp.w	$C(a1),d0
0001CE64 6500 0000                  		bcs.w	locret_1AF2E
0001CE68 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CE6C 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001CE70 337C FE80 0012             		move.w	#-$180,$12(a1)
0001CE76 4A29 0025                  		tst.b	$25(a1)
0001CE7A 6600 0000                  		bne.w	locret_1AF2E
0001CE7E 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001CE82 4E75                       		rts	
0001CE84                            ; ===========================================================================
0001CE84                            
0001CE84                            loc_1AF1E:
0001CE84 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001CE8A 6600 0000                  		bne.w	locret_1AF2E
0001CE8E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CE92 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001CE96 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001CE9C 6E00                       		bgt.s	@happy
0001CE9E 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001CEA4 6D00                       		blt.s	@happy
0001CEA6 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001CEAC 6E00                       		bgt.s	@happy
0001CEAE 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001CEB4 6C00                       		bge.s	locret_1AF2E
0001CEB6                            
0001CEB6                            	@happy:
0001CEB6 0828 0001 0022             		btst	#1,$22(a0)
0001CEBC 6700                       		beq.s	locret_1AF2E
0001CEBE 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001CEC4 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001CECA 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHappy2
0001CF20                            
0001CF20                            locret_1AF2E:
0001CF20 4E75                       		rts	
0001CF22                            ; ===========================================================================
0001CF22                            
0001CF22                            Touch_Enemy:				; XREF: Touch_ChkValue
0001CF22 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001CF26 6600                       		bne.s	loc_1AF40	; if yes, branch
0001CF28 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001CF2E 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001CF32                            
0001CF32                            loc_1AF40:
0001CF32 4A29 0021                  		tst.b	$21(a1)
0001CF36 6700                       		beq.s	Touch_KillEnemy
0001CF38 4468 0010                  		neg.w	$10(a0)
0001CF3C 4468 0012                  		neg.w	$12(a0)
0001CF40 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001CF44 E0E8 0010                  		asr	$10(a0)
0001CF48 E0E8 0012                  		asr	$12(a0)
0001CF4C 137C 0000 0020             		move.b	#0,$20(a1)
0001CF52 5329 0021                  		subq.b	#1,$21(a1)
0001CF56 6600                       		bne.s	locret_1AF68
0001CF58 08E9 0007 0022             		bset	#7,$22(a1)
0001CF5E                            
0001CF5E                            locret_1AF68:
0001CF5E 4E75                       		rts	
0001CF60                            ; ===========================================================================
0001CF60                            
0001CF60                            Touch_KillEnemy:
0001CF60 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001CF66 6E00                       		bgt.s	@happy
0001CF68 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001CF6E 6D00                       		blt.s	@happy
0001CF70 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001CF76 6E00                       		bgt.s	@happy
0001CF78 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001CF7E 6C00                       		bge.s	@nothappy
0001CF80                            
0001CF80                            	@happy:
0001CF80 0828 0001 0022             		btst	#1,$22(a0)
0001CF86 6700                       		beq.s	@nothappy
0001CF88 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001CF8E 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001CF94                            
0001CF94                            	@nothappy:
0001CF94 08E9 0007 0022             		bset	#7,$22(a1)
0001CF9A 7000                       		moveq	#0,d0
0001CF9C 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001CFA0 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001CFA4 0C40 0006                  		cmpi.w	#6,d0
0001CFA8 6500                       		bcs.s	loc_1AF82
0001CFAA 7006                       		moveq	#6,d0
0001CFAC                            
0001CFAC                            loc_1AF82:
0001CFAC 3340 003E                  		move.w	d0,$3E(a1)
0001CFB0 4A40                       		tst.w	d0
0001CFB2 6700                       		beq.s	@nocombo
0001CFB4 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001CFBA 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001CFC0                            
0001CFC0                            	@nocombo:
0001CFC0 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001CFC4 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001CFCA 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001CFCC 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001CFD0 337C 000A 003E             		move.w	#$A,$3E(a1)
0001CFD6                            
0001CFD6                            loc_1AF9C:
0001CFD6 6100 0000                  		bsr.w	AddPoints
0001CFDA 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001CFDE 137C 0000 0024             		move.b	#0,$24(a1)
0001CFE4 4A68 0012                  		tst.w	$12(a0)
0001CFE8 6B00                       		bmi.s	loc_1AFC2
0001CFEA 3028 000C                  		move.w	$C(a0),d0
0001CFEE B069 000C                  		cmp.w	$C(a1),d0
0001CFF2 6400                       		bcc.s	loc_1AFCA
0001CFF4 4468 0012                  		neg.w	$12(a0)
0001CFF8 4E75                       		rts	
0001CFFA                            ; ===========================================================================
0001CFFA                            
0001CFFA                            loc_1AFC2:
0001CFFA 0668 0100 0012             		addi.w	#$100,$12(a0)
0001D000 4E75                       		rts	
0001D002                            ; ===========================================================================
0001D002                            
0001D002                            loc_1AFCA:
0001D002 0468 0100 0012             		subi.w	#$100,$12(a0)
0001D008 4E75                       		rts	
0001D00A                            ; ===========================================================================
0001D00A 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001D012                            ; ===========================================================================
0001D012                            
0001D012                            loc_1AFDA:				; XREF: Touch_CatKiller
0001D012 08E9 0007 0022             		bset	#7,$22(a1)
0001D018                            
0001D018                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001D018 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D01C 6700                       		beq.s	Touch_Hurt	; if not, branch
0001D01E                            
0001D01E                            loc_1AFE6:				; XREF: Touch_Hurt
0001D01E 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0001D024 6E00                       		bgt.s	locret_1AFE6
0001D026                            
0001D026                            loc2_1AFE6:				; XREF: Touch_Hurt
0001D026 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0001D02C 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D032                            
0001D032                            locret_1AFE6:
0001D032 70FF                       		moveq	#-1,d0
0001D034 4E75                       		rts	
0001D036                            ; ===========================================================================
0001D036                            
0001D036                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001D036 4E71                       		nop	
0001D038 4A68 0030                  		tst.w	$30(a0)
0001D03C 66E8                       		bne.s	loc2_1AFE6
0001D03E 2449                       		movea.l	a1,a2
0001D040                            
0001D040                            ; End of function TouchResponse
0001D040                            ; continue straight to HurtSonic
0001D040                            
0001D040                            ; ---------------------------------------------------------------------------
0001D040                            ; Hurting Sonic	subroutine
0001D040                            ; ---------------------------------------------------------------------------
0001D040                            
0001D040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D040                            
0001D040                            
0001D040                            HurtSonic:
0001D040 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001D046 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001D04C 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHurt
0001D0A2 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001D0A6 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001D0A8 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001D0AC 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001D0B0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001D0B6 6500                       		bcs.s	@notbad
0001D0B8 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001D0BE                            
0001D0BE                            	@notbad:
0001D0BE 4EB9 0000 F058             		jsr	SingleObjLoad
0001D0C4 6600                       		bne.s	Hurt_Shield
0001D0C6 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001D0CA 3368 0008 0008             		move.w	8(a0),8(a1)
0001D0D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D0D6                            
0001D0D6                            Hurt_Shield:
0001D0D6 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001D0DC 117C 0004 0024             		move.b	#4,$24(a0)
0001D0E2 6100 80CA                  		bsr.w	Sonic_ResetOnFloor
0001D0E6 08E8 0001 0022             		bset	#1,$22(a0)
0001D0EC 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001D0F2 317C FE00 0010             		move.w	#-$200,$10(a0)
0001D0F8 0828 0006 0022             		btst	#6,$22(a0)
0001D0FE 6700                       		beq.s	Hurt_Reverse
0001D100 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D106 317C FF00 0010             		move.w	#-$100,$10(a0)
0001D10C                            
0001D10C                            Hurt_Reverse:
0001D10C 3028 0008                  		move.w	8(a0),d0
0001D110 B06A 0008                  		cmp.w	8(a2),d0
0001D114 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001D116 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001D11A                            
0001D11A                            Hurt_ChkSpikes:
0001D11A 317C 0000 0020             		move.w	#0,$20(a0)
0001D120 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001D126 317C 0078 0030             		move.w	#$78,$30(a0)
0001D12C 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001D130 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001D134 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D136 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001D13A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D13C 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001D140                            
0001D140                            Hurt_Sound:
0001D140 4EB9 0000 11F6             		jsr	(PlaySound_Special).l
0001D146 70FF                       		moveq	#-1,d0
0001D148 4E75                       		rts	
0001D14A                            ; ===========================================================================
0001D14A                            
0001D14A                            Hurt_NoRings:
0001D14A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001D14E 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001D152 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeDies
0001D1A8                            ; End of function HurtSonic
0001D1A8                            
0001D1A8                            ; ---------------------------------------------------------------------------
0001D1A8                            ; Subroutine to	kill Sonic
0001D1A8                            ; ---------------------------------------------------------------------------
0001D1A8                            
0001D1A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1A8                            
0001D1A8                            
0001D1A8                            KillSonic:
0001D1A8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001D1AC 6600 0000                  		bne.w	Kill_NoDeath	; if yes, branch
0001D1B0 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001D1B6 117C 0006 0024             		move.b	#6,$24(a0)
0001D1BC                            		bsr.w	Sonic_ResetOnFloor
0001D1BE 08E8 0001 0022             		bset	#1,$22(a0)
0001D1C4 317C F900 0012             		move.w	#-$700,$12(a0)
0001D1CA 317C 0000 0010             		move.w	#0,$10(a0)
0001D1D0 317C 0000 0020             		move.w	#0,$20(a0)
0001D1D6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D1DC 117C 0018 001C             		move.b	#$18,$1C(a0)
0001D1E2 08E8 0007 0002             		bset	#7,2(a0)
0001D1E8 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001D1EC 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeFrustrated		
0001D242 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001D246 6600                       		bne.s	Kill_Sound
0001D248 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001D24C 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpikey
0001D2A2                            
0001D2A2                            Kill_Sound:
0001D2A2 4EB9 0000 11F6             		jsr	(PlaySound_Special).l
0001D2A8                            
0001D2A8                            Kill_NoDeath:
0001D2A8 70FF                       		moveq	#-1,d0
0001D2AA 4E75                       		rts	
0001D2AC                            ; End of function KillSonic
0001D2AC                            
0001D2AC                            
0001D2AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2AC                            
0001D2AC                            
0001D2AC                            Touch_Special:				; XREF: Touch_ChkValue
0001D2AC 1229 0020                  		move.b	$20(a1),d1
0001D2B0 0201 003F                  		andi.b	#$3F,d1
0001D2B4 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001D2B8 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001D2BA 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001D2BE 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001D2C0 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001D2C4 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D2C6 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001D2CA 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D2CC 4E75                       		rts	
0001D2CE                            ; ===========================================================================
0001D2CE                            
0001D2CE                            Touch_CatKiller:			; XREF: Touch_Special
0001D2CE 6000 FD42                  		bra.w	loc_1AFDA
0001D2D2                            ; ===========================================================================
0001D2D2                            
0001D2D2                            Touch_Yadrin:				; XREF: Touch_Special
0001D2D2 9A40                       		sub.w	d0,d5
0001D2D4 0C45 0008                  		cmpi.w	#8,d5
0001D2D8 6400                       		bcc.s	loc_1B144
0001D2DA 3029 0008                  		move.w	8(a1),d0
0001D2DE 5940                       		subq.w	#4,d0
0001D2E0 0829 0000 0022             		btst	#0,$22(a1)
0001D2E6 6700                       		beq.s	loc_1B130
0001D2E8 0440 0010                  		subi.w	#$10,d0
0001D2EC                            
0001D2EC                            loc_1B130:
0001D2EC 9042                       		sub.w	d2,d0
0001D2EE 6400                       		bcc.s	loc_1B13C
0001D2F0 0640 0018                  		addi.w	#$18,d0
0001D2F4 6500                       		bcs.s	loc_1B140
0001D2F6 6000                       		bra.s	loc_1B144
0001D2F8                            ; ===========================================================================
0001D2F8                            
0001D2F8                            loc_1B13C:
0001D2F8 B044                       		cmp.w	d4,d0
0001D2FA 6200                       		bhi.s	loc_1B144
0001D2FC                            
0001D2FC                            loc_1B140:
0001D2FC 6000 FD1A                  		bra.w	Touch_ChkHurt
0001D300                            ; ===========================================================================
0001D300                            
0001D300                            loc_1B144:
0001D300 6000 FC20                  		bra.w	Touch_Enemy
0001D304                            ; ===========================================================================
0001D304                            
0001D304                            Touch_D7orE1:				; XREF: Touch_Special
0001D304 5229 0021                  		addq.b	#1,$21(a1)
0001D308 4E75                       		rts	
0001D30A                            ; End of function Touch_Special
0001D30A                            
0001D30A                            ; ---------------------------------------------------------------------------
0001D30A                            ; Subroutine to	show the special stage layout
0001D30A                            ; ---------------------------------------------------------------------------
0001D30A                            
0001D30A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D30A                            
0001D30A                            
0001D30A                            SS_ShowLayout:				; XREF: SpecialStage
0001D30A 4A78 F63A                  		tst.w	($FFFFF63A).w
0001D30E 6600                       		bne.s	@noanimate
0001D310 6100 0000                  		bsr.w	SS_AniWallsRings
0001D314 6100 0000                  		bsr.w	SS_AniItems
0001D318                            
0001D318                            	@noanimate:
0001D318 3F05                       		move.w	d5,-(sp)
0001D31A 43F8 8000                  		lea	($FFFF8000).w,a1
0001D31E 1038 F780                  		move.b	($FFFFF780).w,d0
0001D322 0200 00FC                  		andi.b	#$FC,d0
0001D326 4EB9 0000 29CC             		jsr	(CalcSine).l
0001D32C 3800                       		move.w	d0,d4
0001D32E 3A01                       		move.w	d1,d5
0001D330 C9FC 0018                  		muls.w	#$18,d4
0001D334 CBFC 0018                  		muls.w	#$18,d5
0001D338 7400                       		moveq	#0,d2
0001D33A 3438 F700                  		move.w	($FFFFF700).w,d2
0001D33E 84FC 0018                  		divu.w	#$18,d2
0001D342 4842                       		swap	d2
0001D344 4442                       		neg.w	d2
0001D346 0642 FF4C                  		addi.w	#-$B4,d2
0001D34A 7600                       		moveq	#0,d3
0001D34C 3638 F704                  		move.w	($FFFFF704).w,d3
0001D350 86FC 0018                  		divu.w	#$18,d3
0001D354 4843                       		swap	d3
0001D356 4443                       		neg.w	d3
0001D358 0643 FF4C                  		addi.w	#-$B4,d3
0001D35C 3E3C 000F                  		move.w	#$F,d7
0001D360                            
0001D360                            loc_1B19E:
0001D360 48A7 E000                  		movem.w	d0-d2,-(sp)
0001D364 48A7 C000                  		movem.w	d0-d1,-(sp)
0001D368 4440                       		neg.w	d0
0001D36A C3C2                       		muls.w	d2,d1
0001D36C C1C3                       		muls.w	d3,d0
0001D36E 2C00                       		move.l	d0,d6
0001D370 DC81                       		add.l	d1,d6
0001D372 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001D376 C1C2                       		muls.w	d2,d0
0001D378 C3C3                       		muls.w	d3,d1
0001D37A D280                       		add.l	d0,d1
0001D37C 2406                       		move.l	d6,d2
0001D37E 3C3C 000F                  		move.w	#$F,d6
0001D382                            
0001D382                            loc_1B1C0:
0001D382 2002                       		move.l	d2,d0
0001D384 E080                       		asr.l	#8,d0
0001D386 32C0                       		move.w	d0,(a1)+
0001D388 2001                       		move.l	d1,d0
0001D38A E080                       		asr.l	#8,d0
0001D38C 32C0                       		move.w	d0,(a1)+
0001D38E D485                       		add.l	d5,d2
0001D390 D284                       		add.l	d4,d1
0001D392 51CE FFEE                  		dbf	d6,loc_1B1C0
0001D396                            
0001D396 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001D39A 0643 0018                  		addi.w	#$18,d3
0001D39E 51CF FFC0                  		dbf	d7,loc_1B19E
0001D3A2                            
0001D3A2 3A1F                       		move.w	(sp)+,d5
0001D3A4 41F9 00FF 0000             		lea	($FF0000).l,a0
0001D3AA 7000                       		moveq	#0,d0
0001D3AC 3038 F704                  		move.w	($FFFFF704).w,d0
0001D3B0 80FC 0018                  		divu.w	#$18,d0
0001D3B4 C0FC 0080                  		mulu.w	#$80,d0
0001D3B8 D1C0                       		adda.l	d0,a0
0001D3BA 7000                       		moveq	#0,d0
0001D3BC 3038 F700                  		move.w	($FFFFF700).w,d0
0001D3C0 80FC 0018                  		divu.w	#$18,d0
0001D3C4 D0C0                       		adda.w	d0,a0
0001D3C6 49F8 8000                  		lea	($FFFF8000).w,a4
0001D3CA 3E3C 000F                  		move.w	#$F,d7
0001D3CE                            
0001D3CE                            loc_1B20C:
0001D3CE 3C3C 000F                  		move.w	#$F,d6
0001D3D2                            
0001D3D2                            loc_1B210:
0001D3D2 7000                       		moveq	#0,d0
0001D3D4 1018                       		move.b	(a0)+,d0
0001D3D6 6700                       		beq.s	loc_1B268
0001D3D8 0C00 004E                  		cmpi.b	#$4E,d0
0001D3DC 6200                       		bhi.s	loc_1B268
0001D3DE 3614                       		move.w	(a4),d3
0001D3E0 0643 0120                  		addi.w	#$120,d3
0001D3E4 0C43 0070                  		cmpi.w	#$70,d3
0001D3E8 6500                       		bcs.s	loc_1B268
0001D3EA 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D3EE 6400                       		bcc.s	loc_1B268
0001D3F0 342C 0002                  		move.w	2(a4),d2
0001D3F4 0642 00F0                  		addi.w	#$F0,d2
0001D3F8 0C42 0070                  		cmpi.w	#$70,d2
0001D3FC 6500                       		bcs.s	loc_1B268
0001D3FE 0C42 0170                  		cmpi.w	#$170,d2
0001D402 6400                       		bcc.s	loc_1B268
0001D404 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D40A E748                       		lsl.w	#3,d0
0001D40C 4BF5 0000                  		lea	(a5,d0.w),a5
0001D410 225D                       		movea.l	(a5)+,a1
0001D412 321D                       		move.w	(a5)+,d1
0001D414 D241                       		add.w	d1,d1
0001D416 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D41A 365D                       		movea.w	(a5)+,a3
0001D41C 7200                       		moveq	#0,d1
0001D41E 1219                       		move.b	(a1)+,d1
0001D420 5301                       		subq.b	#1,d1
0001D422 6B00                       		bmi.s	loc_1B268
0001D424 4EB9 0000 EBAC             		jsr	sub_D762
0001D42A                            
0001D42A                            loc_1B268:
0001D42A 584C                       		addq.w	#4,a4
0001D42C 51CE FFA4                  		dbf	d6,loc_1B210
0001D430                            
0001D430 41E8 0070                  		lea	$70(a0),a0
0001D434 51CF FF98                  		dbf	d7,loc_1B20C
0001D438                            
0001D438 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D43C 0C05 0050                  		cmpi.b	#$50,d5
0001D440 6700                       		beq.s	loc_1B288
0001D442 24BC 0000 0000             		move.l	#0,(a2)
0001D448 4E75                       		rts	
0001D44A                            ; ===========================================================================
0001D44A                            
0001D44A                            loc_1B288:
0001D44A 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D450 4E75                       		rts	
0001D452                            ; End of function SS_ShowLayout
0001D452                            
0001D452                            ; ---------------------------------------------------------------------------
0001D452                            ; Subroutine to	animate	walls and rings	in the special stage
0001D452                            ; ---------------------------------------------------------------------------
0001D452                            
0001D452                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D452                            
0001D452                            
0001D452                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D452 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D458 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D45C 6A00                       		bpl.s	loc_1B2C8
0001D45E 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D464 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D468 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D46E                            
0001D46E                            loc_1B2C8:
0001D46E 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D474 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D478 6A00                       		bpl.s	loc_1B2E4
0001D47A 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D480 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D484 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D48A                            
0001D48A                            loc_1B2E4:
0001D48A 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D48E 1340 0138                  		move.b	d0,$138(a1)
0001D492 1340 0160                  		move.b	d0,$160(a1)
0001D496 1340 0148                  		move.b	d0,$148(a1)
0001D49A 1340 0150                  		move.b	d0,$150(a1)
0001D49E 1340 01D8                  		move.b	d0,$1D8(a1)
0001D4A2 1340 01E0                  		move.b	d0,$1E0(a1)
0001D4A6 1340 01E8                  		move.b	d0,$1E8(a1)
0001D4AA 1340 01F0                  		move.b	d0,$1F0(a1)
0001D4AE 1340 01F8                  		move.b	d0,$1F8(a1)
0001D4B2 1340 0200                  		move.b	d0,$200(a1)
0001D4B6 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001D4BA 6A00                       		bpl.s	loc_1B326
0001D4BC 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001D4C2 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001D4C6 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001D4CC                            
0001D4CC                            loc_1B326:
0001D4CC 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001D4D0 1340 0168                  		move.b	d0,$168(a1)
0001D4D4 1340 0170                  		move.b	d0,$170(a1)
0001D4D8 1340 0178                  		move.b	d0,$178(a1)
0001D4DC 1340 0180                  		move.b	d0,$180(a1)
0001D4E0 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001D4E4 6A00                       		bpl.s	loc_1B350
0001D4E6 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001D4EC 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001D4F0 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001D4F6                            
0001D4F6                            loc_1B350:
0001D4F6 43F9 00FF 4016             		lea	($FF4016).l,a1
0001D4FC 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001D502 7000                       		moveq	#0,d0
0001D504 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001D508 D040                       		add.w	d0,d0
0001D50A 41F0 0000                  		lea	(a0,d0.w),a0
0001D50E 3290                       		move.w	(a0),(a1)
0001D510 3368 0002 0008             		move.w	2(a0),8(a1)
0001D516 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D51C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D522 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D528 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D52E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D534 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D53A D0FC 0020                  		adda.w	#$20,a0
0001D53E D2FC 0048                  		adda.w	#$48,a1
0001D542 3290                       		move.w	(a0),(a1)
0001D544 3368 0002 0008             		move.w	2(a0),8(a1)
0001D54A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D550 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D556 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D55C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D562 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D568 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D56E D0FC 0020                  		adda.w	#$20,a0
0001D572 D2FC 0048                  		adda.w	#$48,a1
0001D576 3290                       		move.w	(a0),(a1)
0001D578 3368 0002 0008             		move.w	2(a0),8(a1)
0001D57E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D584 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D58A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D590 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D596 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D59C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D5A2 D0FC 0020                  		adda.w	#$20,a0
0001D5A6 D2FC 0048                  		adda.w	#$48,a1
0001D5AA 3290                       		move.w	(a0),(a1)
0001D5AC 3368 0002 0008             		move.w	2(a0),8(a1)
0001D5B2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D5B8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D5BE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D5C4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D5CA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D5D0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D5D6 D0FC 0020                  		adda.w	#$20,a0
0001D5DA D2FC 0048                  		adda.w	#$48,a1
0001D5DE 4E75                       		rts	
0001D5E0                            ; End of function SS_AniWallsRings
0001D5E0                            
0001D5E0                            SS_LoadWalls:
0001D5E0 7000                       		moveq	#0,d0
0001D5E2 1038 F780                  		move.b	($FFFFF780).w,d0	; get the Special Stage angle
0001D5E6 E408                       		lsr.b	#2,d0			; modify so it can be used as a frame ID
0001D5E8 0240 000F                  		andi.w	#$F,d0
0001D5EC B038 FFF9                  		cmp.b	(v_ssangleprev).w,d0	; does the modified angle match the recorded value?
0001D5F0 6700                       		beq.s	@return			; if so, branch
0001D5F2                            
0001D5F2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D5F8 43F9 0000 0000             		lea	(Art_SSWalls).l,a1	; load wall art
0001D5FE 3200                       		move.w	d0,d1
0001D600 E149                       		lsl.w	#8,d1
0001D602 D241                       		add.w	d1,d1
0001D604 D2C1                       		add.w	d1,a1
0001D606                            
0001D610                            
0001D610 323C 000F                  		move.w	#$F,d1			; number of 8x8 tiles
0001D614 4EB9 0000 0000             		jsr	LoadTiles
0001D61A 11C0 FFF9                  		move.b	d0,(v_ssangleprev).w	; record the modified angle for comparison
0001D61E                            
0001D61E                            	@return:
0001D61E 4E75                       		rts
0001D620                            
0001D620                            ; ===========================================================================
0001D620 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D630 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D640 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D650 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D660 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D670 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D680 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D690 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D6A0                            ; ---------------------------------------------------------------------------
0001D6A0                            ; Subroutine to	remove items when you collect them in the special stage
0001D6A0                            ; ---------------------------------------------------------------------------
0001D6A0                            
0001D6A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6A0                            
0001D6A0                            
0001D6A0                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001D6A0 45F9 00FF 4400             		lea	($FF4400).l,a2
0001D6A6 303C 001F                  		move.w	#$1F,d0
0001D6AA                            
0001D6AA                            loc_1B4C4:
0001D6AA 4A12                       		tst.b	(a2)
0001D6AC 6700                       		beq.s	locret_1B4CE
0001D6AE 504A                       		addq.w	#8,a2
0001D6B0 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001D6B4                            
0001D6B4                            locret_1B4CE:
0001D6B4 4E75                       		rts	
0001D6B6                            ; End of function SS_RemoveCollectedItem
0001D6B6                            
0001D6B6                            ; ---------------------------------------------------------------------------
0001D6B6                            ; Subroutine to	animate	special	stage items when you touch them
0001D6B6                            ; ---------------------------------------------------------------------------
0001D6B6                            
0001D6B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6B6                            
0001D6B6                            
0001D6B6                            SS_AniItems:				; XREF: SS_ShowLayout
0001D6B6 41F9 00FF 4400             		lea	($FF4400).l,a0
0001D6BC 3E3C 001F                  		move.w	#$1F,d7
0001D6C0                            
0001D6C0                            loc_1B4DA:
0001D6C0 7000                       		moveq	#0,d0
0001D6C2 1010                       		move.b	(a0),d0
0001D6C4 6700                       		beq.s	loc_1B4E8
0001D6C6 E548                       		lsl.w	#2,d0
0001D6C8 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001D6CC 4E91                       		jsr	(a1)
0001D6CE                            
0001D6CE                            loc_1B4E8:
0001D6CE 5048                       		addq.w	#8,a0
0001D6D0                            
0001D6D0                            loc_1B4EA:
0001D6D0 51CF FFEE                  		dbf	d7,loc_1B4DA
0001D6D4                            
0001D6D4 4E75                       		rts	
0001D6D6                            ; End of function SS_AniItems
0001D6D6                            
0001D6D6                            ; ===========================================================================
0001D6D6 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001D6DA 0000 0000                  		dc.l SS_AniBumper
0001D6DE 0000 0000                  		dc.l SS_Ani1Up
0001D6E2 0000 0000                  		dc.l SS_AniReverse
0001D6E6 0000 0000                  		dc.l SS_AniEmeraldSparks
0001D6EA 0000 0000                  		dc.l SS_AniGlassBlock
0001D6EE                            ; ===========================================================================
0001D6EE                            
0001D6EE                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001D6EE 5328 0002                  		subq.b	#1,2(a0)
0001D6F2 6A00                       		bpl.s	locret_1B530
0001D6F4 117C 0005 0002             		move.b	#5,2(a0)
0001D6FA 7000                       		moveq	#0,d0
0001D6FC 1028 0003                  		move.b	3(a0),d0
0001D700 5228 0003                  		addq.b	#1,3(a0)
0001D704 2268 0004                  		movea.l	4(a0),a1
0001D708 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001D70C 1280                       		move.b	d0,(a1)
0001D70E 6600                       		bne.s	locret_1B530
0001D710 4290                       		clr.l	(a0)
0001D712 42A8 0004                  		clr.l	4(a0)
0001D716                            
0001D716                            locret_1B530:
0001D716 4E75                       		rts	
0001D718                            ; ===========================================================================
0001D718 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001D71E                            ; ===========================================================================
0001D71E                            
0001D71E                            SS_AniBumper:				; XREF: SS_AniIndex
0001D71E 5328 0002                  		subq.b	#1,2(a0)
0001D722 6A00                       		bpl.s	locret_1B566
0001D724 117C 0007 0002             		move.b	#7,2(a0)
0001D72A 7000                       		moveq	#0,d0
0001D72C 1028 0003                  		move.b	3(a0),d0
0001D730 5228 0003                  		addq.b	#1,3(a0)
0001D734 2268 0004                  		movea.l	4(a0),a1
0001D738 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001D73C 6600                       		bne.s	loc_1B564
0001D73E 4290                       		clr.l	(a0)
0001D740 42A8 0004                  		clr.l	4(a0)
0001D744 12BC 0025                  		move.b	#$25,(a1)
0001D748 4E75                       		rts	
0001D74A                            ; ===========================================================================
0001D74A                            
0001D74A                            loc_1B564:
0001D74A 1280                       		move.b	d0,(a1)
0001D74C                            
0001D74C                            locret_1B566:
0001D74C 4E75                       		rts	
0001D74E                            ; ===========================================================================
0001D74E 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001D754                            ; ===========================================================================
0001D754                            
0001D754                            SS_Ani1Up:				; XREF: SS_AniIndex
0001D754 5328 0002                  		subq.b	#1,2(a0)
0001D758 6A00                       		bpl.s	locret_1B596
0001D75A 117C 0005 0002             		move.b	#5,2(a0)
0001D760 7000                       		moveq	#0,d0
0001D762 1028 0003                  		move.b	3(a0),d0
0001D766 5228 0003                  		addq.b	#1,3(a0)
0001D76A 2268 0004                  		movea.l	4(a0),a1
0001D76E 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001D772 1280                       		move.b	d0,(a1)
0001D774 6600                       		bne.s	locret_1B596
0001D776 4290                       		clr.l	(a0)
0001D778 42A8 0004                  		clr.l	4(a0)
0001D77C                            
0001D77C                            locret_1B596:
0001D77C 4E75                       		rts	
0001D77E                            ; ===========================================================================
0001D77E 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001D784                            ; ===========================================================================
0001D784                            
0001D784                            SS_AniReverse:				; XREF: SS_AniIndex
0001D784 5328 0002                  		subq.b	#1,2(a0)
0001D788 6A00                       		bpl.s	locret_1B5CC
0001D78A 117C 0007 0002             		move.b	#7,2(a0)
0001D790 7000                       		moveq	#0,d0
0001D792 1028 0003                  		move.b	3(a0),d0
0001D796 5228 0003                  		addq.b	#1,3(a0)
0001D79A 2268 0004                  		movea.l	4(a0),a1
0001D79E 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001D7A2 6600                       		bne.s	loc_1B5CA
0001D7A4 4290                       		clr.l	(a0)
0001D7A6 42A8 0004                  		clr.l	4(a0)
0001D7AA 12BC 002B                  		move.b	#$2B,(a1)
0001D7AE 4E75                       		rts	
0001D7B0                            ; ===========================================================================
0001D7B0                            
0001D7B0                            loc_1B5CA:
0001D7B0 1280                       		move.b	d0,(a1)
0001D7B2                            
0001D7B2                            locret_1B5CC:
0001D7B2 4E75                       		rts	
0001D7B4                            ; ===========================================================================
0001D7B4 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001D7BA                            ; ===========================================================================
0001D7BA                            
0001D7BA                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001D7BA 5328 0002                  		subq.b	#1,2(a0)
0001D7BE 6A00                       		bpl.s	locret_1B60C
0001D7C0 117C 0005 0002             		move.b	#5,2(a0)
0001D7C6 7000                       		moveq	#0,d0
0001D7C8 1028 0003                  		move.b	3(a0),d0
0001D7CC 5228 0003                  		addq.b	#1,3(a0)
0001D7D0 2268 0004                  		movea.l	4(a0),a1
0001D7D4 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001D7D8 1280                       		move.b	d0,(a1)
0001D7DA 6600                       		bne.s	locret_1B60C
0001D7DC 4290                       		clr.l	(a0)
0001D7DE 42A8 0004                  		clr.l	4(a0)
0001D7E2 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001D7E8 303C 00A8                  		move.w	#$A8,d0
0001D7EC 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001D7F2                            
0001D7F2                            locret_1B60C:
0001D7F2 4E75                       		rts	
0001D7F4                            ; ===========================================================================
0001D7F4 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001D7FA                            ; ===========================================================================
0001D7FA                            
0001D7FA                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001D7FA 5328 0002                  		subq.b	#1,2(a0)
0001D7FE 6A00                       		bpl.s	locret_1B640
0001D800 117C 0001 0002             		move.b	#1,2(a0)
0001D806 7000                       		moveq	#0,d0
0001D808 1028 0003                  		move.b	3(a0),d0
0001D80C 5228 0003                  		addq.b	#1,3(a0)
0001D810 2268 0004                  		movea.l	4(a0),a1
0001D814 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D818 1280                       		move.b	d0,(a1)
0001D81A 6600                       		bne.s	locret_1B640
0001D81C 12A8 0004                  		move.b	4(a0),(a1)
0001D820 4290                       		clr.l	(a0)
0001D822 42A8 0004                  		clr.l	4(a0)
0001D826                            
0001D826                            locret_1B640:
0001D826 4E75                       		rts	
0001D828                            ; ===========================================================================
0001D828 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D832                            ; ---------------------------------------------------------------------------
0001D832                            ; Special stage	layout pointers
0001D832                            ; ---------------------------------------------------------------------------
0001D832                            SS_LayoutIndex:
0001D832                            	include "_inc\Special stage layout pointers.asm"
0001D832                            ; ---------------------------------------------------------------------------
0001D832                            ; Special stage	layout pointers
0001D832                            ; ---------------------------------------------------------------------------
0001D832 0000 0000                  	dc.l SS_1
0001D836 0000 0000                  	dc.l SS_2
0001D83A 0000 0000                  	dc.l SS_3
0001D83E 0000 0000                  	dc.l SS_4
0001D842 0000 0000                  	dc.l SS_5
0001D846 0000 0000                  	dc.l SS_6
0001D84A                            	even
0001D84A                            	even
0001D84A                            
0001D84A                            ; ---------------------------------------------------------------------------
0001D84A                            ; Special stage	start locations
0001D84A                            ; ---------------------------------------------------------------------------
0001D84A                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D862                            		even
0001D862                            
0001D862                            ; ---------------------------------------------------------------------------
0001D862                            ; Subroutine to	load special stage layout
0001D862                            ; ---------------------------------------------------------------------------
0001D862                            
0001D862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D862                            
0001D862                            
0001D862                            SS_Load:				; XREF: SpecialStage
0001D862 7000                       		moveq	#0,d0
0001D864 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D868 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D86C 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D872 6500                       		bcs.s	SS_ChkEmldNum
0001D874 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D87A                            
0001D87A                            SS_ChkEmldNum:
0001D87A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D880 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D882 7200                       		moveq	#0,d1
0001D884 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D888 5301                       		subq.b	#1,d1
0001D88A 6500                       		bcs.s	SS_LoadData
0001D88C 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D890                            
0001D890                            SS_ChkEmldLoop:	
0001D890 B033 1000                  		cmp.b	(a3,d1.w),d0
0001D894 6600                       		bne.s	SS_ChkEmldRepeat
0001D896 60CA                       		bra.s	SS_Load
0001D898                            ; ===========================================================================
0001D898                            
0001D898                            SS_ChkEmldRepeat:
0001D898 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D89C                            
0001D89C                            SS_LoadData:
0001D89C E548                       		lsl.w	#2,d0
0001D89E 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D8A2 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D8A6 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D8AA 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D8AE 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D8B4 303C 0000                  		move.w	#0,d0
0001D8B8 4EB9 0000 15D2             		jsr	(EniDec).l
0001D8BE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D8C4 303C 0FFF                  		move.w	#$FFF,d0
0001D8C8                            
0001D8C8                            SS_ClrRAM3:
0001D8C8 4299                       		clr.l	(a1)+
0001D8CA 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D8CE                            
0001D8CE 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D8D4 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D8DA 723F                       		moveq	#$3F,d1
0001D8DC                            
0001D8DC                            loc_1B6F6:
0001D8DC 743F                       		moveq	#$3F,d2
0001D8DE                            
0001D8DE                            loc_1B6F8:
0001D8DE 12D8                       		move.b	(a0)+,(a1)+
0001D8E0 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D8E4                            
0001D8E4 43E9 0040                  		lea	$40(a1),a1
0001D8E8 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D8EC                            
0001D8EC 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D8F2 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D8F8 724D                       		moveq	#$4D,d1
0001D8FA                            
0001D8FA                            loc_1B714:
0001D8FA 22D8                       		move.l	(a0)+,(a1)+
0001D8FC 32FC 0000                  		move.w	#0,(a1)+
0001D900 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D906 32D8                       		move.w	(a0)+,(a1)+
0001D908 51C9 FFF0                  		dbf	d1,loc_1B714
0001D90C                            
0001D90C 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D912 323C 003F                  		move.w	#$3F,d1
0001D916                            
0001D916                            loc_1B730:
0001D916                            
0001D916 4299                       		clr.l	(a1)+
0001D918 51C9 FFFC                  		dbf	d1,loc_1B730
0001D91C                            
0001D91C 4E75                       		rts	
0001D91E                            ; End of function SS_Load
0001D91E                            
0001D91E                            ; ===========================================================================
0001D91E                            ; ---------------------------------------------------------------------------
0001D91E                            ; Special stage	mappings and VRAM pointers
0001D91E                            ; ---------------------------------------------------------------------------
0001D91E                            SS_MapIndex:
0001D91E                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D91E                            ; ---------------------------------------------------------------------------
0001D91E                            ; Special stage	mappings and VRAM pointers
0001D91E                            ; ---------------------------------------------------------------------------
0001D91E 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D922 0142                       	dc.w $142		; VRAM setting
0001D924 0000 0000                  	dc.l Map_SSWalls
0001D928 0142                       	dc.w $142
0001D92A 0000 0000                  	dc.l Map_SSWalls
0001D92E 0142                       	dc.w $142
0001D930 0000 0000                  	dc.l Map_SSWalls
0001D934 0142                       	dc.w $142
0001D936 0000 0000                  	dc.l Map_SSWalls
0001D93A 0142                       	dc.w $142
0001D93C 0000 0000                  	dc.l Map_SSWalls
0001D940 0142                       	dc.w $142
0001D942 0000 0000                  	dc.l Map_SSWalls
0001D946 0142                       	dc.w $142
0001D948 0000 0000                  	dc.l Map_SSWalls
0001D94C 0142                       	dc.w $142
0001D94E 0000 0000                  	dc.l Map_SSWalls
0001D952 0142                       	dc.w $142
0001D954 0000 0000                  	dc.l Map_SSWalls
0001D958 2142                       	dc.w $2142
0001D95A 0000 0000                  	dc.l Map_SSWalls
0001D95E 2142                       	dc.w $2142
0001D960 0000 0000                  	dc.l Map_SSWalls
0001D964 2142                       	dc.w $2142
0001D966 0000 0000                  	dc.l Map_SSWalls
0001D96A 2142                       	dc.w $2142
0001D96C 0000 0000                  	dc.l Map_SSWalls
0001D970 2142                       	dc.w $2142
0001D972 0000 0000                  	dc.l Map_SSWalls
0001D976 2142                       	dc.w $2142
0001D978 0000 0000                  	dc.l Map_SSWalls
0001D97C 2142                       	dc.w $2142
0001D97E 0000 0000                  	dc.l Map_SSWalls
0001D982 2142                       	dc.w $2142
0001D984 0000 0000                  	dc.l Map_SSWalls
0001D988 2142                       	dc.w $2142
0001D98A 0000 0000                  	dc.l Map_SSWalls
0001D98E 4142                       	dc.w $4142
0001D990 0000 0000                  	dc.l Map_SSWalls
0001D994 4142                       	dc.w $4142
0001D996 0000 0000                  	dc.l Map_SSWalls
0001D99A 4142                       	dc.w $4142
0001D99C 0000 0000                  	dc.l Map_SSWalls
0001D9A0 4142                       	dc.w $4142
0001D9A2 0000 0000                  	dc.l Map_SSWalls
0001D9A6 4142                       	dc.w $4142
0001D9A8 0000 0000                  	dc.l Map_SSWalls
0001D9AC 4142                       	dc.w $4142
0001D9AE 0000 0000                  	dc.l Map_SSWalls
0001D9B2 4142                       	dc.w $4142
0001D9B4 0000 0000                  	dc.l Map_SSWalls
0001D9B8 4142                       	dc.w $4142
0001D9BA 0000 0000                  	dc.l Map_SSWalls
0001D9BE 4142                       	dc.w $4142
0001D9C0 0000 0000                  	dc.l Map_SSWalls
0001D9C4 6142                       	dc.w $6142
0001D9C6 0000 0000                  	dc.l Map_SSWalls
0001D9CA 6142                       	dc.w $6142
0001D9CC 0000 0000                  	dc.l Map_SSWalls
0001D9D0 6142                       	dc.w $6142
0001D9D2 0000 0000                  	dc.l Map_SSWalls
0001D9D6 6142                       	dc.w $6142
0001D9D8 0000 0000                  	dc.l Map_SSWalls
0001D9DC 6142                       	dc.w $6142
0001D9DE 0000 0000                  	dc.l Map_SSWalls
0001D9E2 6142                       	dc.w $6142
0001D9E4 0000 0000                  	dc.l Map_SSWalls
0001D9E8 6142                       	dc.w $6142
0001D9EA 0000 0000                  	dc.l Map_SSWalls
0001D9EE 6142                       	dc.w $6142
0001D9F0 0000 0000                  	dc.l Map_SSWalls
0001D9F4 6142                       	dc.w $6142
0001D9F6 0001 0376                  	dc.l Map_obj47
0001D9FA 023B                       	dc.w $23B
0001D9FC 0000 0000                  	dc.l Map_SS_R
0001DA00 0570                       	dc.w $570
0001DA02 0000 0000                  	dc.l Map_SS_R
0001DA06 0251                       	dc.w $251
0001DA08 0000 0000                  	dc.l Map_SS_R
0001DA0C 0370                       	dc.w $370
0001DA0E 0000 0000                  	dc.l Map_SS_Up
0001DA12 0263                       	dc.w $263
0001DA14 0000 0000                  	dc.l Map_SS_Down
0001DA18 0263                       	dc.w $263
0001DA1A 0000 0000                  	dc.l Map_SS_R
0001DA1E 22F0                       	dc.w $22F0
0001DA20 0000 0000                  	dc.l Map_SS_Glass
0001DA24 0470                       	dc.w $470
0001DA26 0000 0000                  	dc.l Map_SS_Glass
0001DA2A 05F0                       	dc.w $5F0
0001DA2C 0000 0000                  	dc.l Map_SS_Glass
0001DA30 65F0                       	dc.w $65F0
0001DA32 0000 0000                  	dc.l Map_SS_Glass
0001DA36 25F0                       	dc.w $25F0
0001DA38 0000 0000                  	dc.l Map_SS_Glass
0001DA3C 45F0                       	dc.w $45F0
0001DA3E 0000 0000                  	dc.l Map_SS_R
0001DA42 02F0                       	dc.w $2F0
0001DA44 0101 0376                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001DA48 023B                       	dc.w $23B
0001DA4A 0201 0376                  	dc.l Map_obj47+$2000000
0001DA4E 023B                       	dc.w $23B
0001DA50 0000 0000                  	dc.l Map_SS_R
0001DA54 0797                       	dc.w $797
0001DA56 0000 0000                  	dc.l Map_SS_R
0001DA5A 07A0                       	dc.w $7A0
0001DA5C 0000 0000                  	dc.l Map_SS_R
0001DA60 07A9                       	dc.w $7A9
0001DA62 0000 0000                  	dc.l Map_SS_R
0001DA66 0797                       	dc.w $797
0001DA68 0000 0000                  	dc.l Map_SS_R
0001DA6C 07A0                       	dc.w $7A0
0001DA6E 0000 0000                  	dc.l Map_SS_R
0001DA72 07A9                       	dc.w $7A9
0001DA74 0000 B20C                  	dc.l Map_obj25
0001DA78 222D                       	dc.w $2000+ssringart
0001DA7A 0000 0000                  	dc.l Map_SS_Chaos3
0001DA7E 0770                       	dc.w $770
0001DA80 0000 0000                  	dc.l Map_SS_Chaos3
0001DA84 2770                       	dc.w $2770
0001DA86 0000 0000                  	dc.l Map_SS_Chaos3
0001DA8A 4770                       	dc.w $4770
0001DA8C 0000 0000                  	dc.l Map_SS_Chaos3
0001DA90 6770                       	dc.w $6770
0001DA92 0000 0000                  	dc.l Map_SS_Chaos1
0001DA96 0770                       	dc.w $770
0001DA98 0000 0000                  	dc.l Map_SS_Chaos2
0001DA9C 0770                       	dc.w $770
0001DA9E 0000 0000                  	dc.l Map_SS_R
0001DAA2 04F0                       	dc.w $4F0
0001DAA4 0400 B20C                  	dc.l Map_obj25+$4000000
0001DAA8 222D                       	dc.w $2000+ssringart
0001DAAA 0500 B20C                  	dc.l Map_obj25+$5000000
0001DAAE 222D                       	dc.w $2000+ssringart
0001DAB0 0600 B20C                  	dc.l Map_obj25+$6000000
0001DAB4 222D                       	dc.w $2000+ssringart
0001DAB6 0700 B20C                  	dc.l Map_obj25+$7000000
0001DABA 222D                       	dc.w $2000+ssringart
0001DABC 0000 0000                  	dc.l Map_SS_Glass
0001DAC0 23F0                       	dc.w $23F0
0001DAC2 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001DAC6 23F0                       	dc.w $23F0
0001DAC8 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001DACC 23F0                       	dc.w $23F0
0001DACE 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001DAD2 23F0                       	dc.w $23F0
0001DAD4 0000 0000                  	dc.l Map_SS_R+$2000000
0001DAD8 04F0                       	dc.w $4F0
0001DADA 0000 0000                  	dc.l Map_SS_Glass
0001DADE 05F0                       	dc.w $5F0
0001DAE0 0000 0000                  	dc.l Map_SS_Glass
0001DAE4 65F0                       	dc.w $65F0
0001DAE6 0000 0000                  	dc.l Map_SS_Glass
0001DAEA 25F0                       	dc.w $25F0
0001DAEC 0000 0000                  	dc.l Map_SS_Glass
0001DAF0 45F0                       	dc.w $45F0
0001DAF0 45F0                       	dc.w $45F0
0001DAF2                            
0001DAF2                            ; ---------------------------------------------------------------------------
0001DAF2                            ; Sprite mappings - special stage "R" block
0001DAF2                            ; ---------------------------------------------------------------------------
0001DAF2                            Map_SS_R:
0001DAF2                            	include "_maps\SSRblock.asm"
0001DAF2                            ; ---------------------------------------------------------------------------
0001DAF2                            ; Sprite mappings - special stage "R" block
0001DAF2                            ; ---------------------------------------------------------------------------
0001DAF2 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001DAF6 0000                       		dc.w byte_1B91E-Map_SS_R
0001DAF8 01                         byte_1B912:	dc.b 1
0001DAF9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DAFE 01                         byte_1B918:	dc.b 1
0001DAFF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DB04 00                         byte_1B91E:	dc.b 0
0001DB06 00                         		even
0001DB06 00                         		even
0001DB06                            
0001DB06                            ; ---------------------------------------------------------------------------
0001DB06                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DB06                            ; ---------------------------------------------------------------------------
0001DB06                            Map_SS_Glass:
0001DB06                            	include "_maps\SSglassblock.asm"
0001DB06                            ; ---------------------------------------------------------------------------
0001DB06                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DB06                            ; ---------------------------------------------------------------------------
0001DB06 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001DB0A 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001DB0E 01                         byte_1B928:	dc.b 1
0001DB0F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DB14 01                         byte_1B92E:	dc.b 1
0001DB15 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001DB1A 01                         byte_1B934:	dc.b 1
0001DB1B F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001DB20 01                         byte_1B93A:	dc.b 1
0001DB21 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001DB26                            		even
0001DB26                            		even
0001DB26                            
0001DB26                            ; ---------------------------------------------------------------------------
0001DB26                            ; Sprite mappings - special stage "UP" block
0001DB26                            ; ---------------------------------------------------------------------------
0001DB26                            Map_SS_Up:
0001DB26                            	include "_maps\SSUPblock.asm"
0001DB26                            ; ---------------------------------------------------------------------------
0001DB26                            ; Sprite mappings - special stage "UP" block
0001DB26                            ; ---------------------------------------------------------------------------
0001DB26 0000                       		dc.w byte_1B944-Map_SS_Up
0001DB28 0000                       		dc.w byte_1B94A-Map_SS_Up
0001DB2A 01                         byte_1B944:	dc.b 1
0001DB2B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DB30 01                         byte_1B94A:	dc.b 1
0001DB31 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DB36                            		even
0001DB36                            		even
0001DB36                            
0001DB36                            ; ---------------------------------------------------------------------------
0001DB36                            ; Sprite mappings - special stage "DOWN" block
0001DB36                            ; ---------------------------------------------------------------------------
0001DB36                            Map_SS_Down:
0001DB36                            	include "_maps\SSDOWNblock.asm"
0001DB36                            ; ---------------------------------------------------------------------------
0001DB36                            ; Sprite mappings - special stage "DOWN" block
0001DB36                            ; ---------------------------------------------------------------------------
0001DB36 0000                       		dc.w byte_1B954-Map_SS_Down
0001DB38 0000                       		dc.w byte_1B95A-Map_SS_Down
0001DB3A 01                         byte_1B954:	dc.b 1
0001DB3B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DB40 01                         byte_1B95A:	dc.b 1
0001DB41 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DB46                            		even
0001DB46                            		even
0001DB46                            
0001DB46                            ; ---------------------------------------------------------------------------
0001DB46                            ; Sprite mappings - special stage chaos	emeralds
0001DB46                            ; ---------------------------------------------------------------------------
0001DB46 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001DB48 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001DB4A 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001DB4C 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001DB4E 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001DB50 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001DB52 01                         byte_1B96C:	dc.b 1
0001DB53 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001DB58 01                         byte_1B972:	dc.b 1
0001DB59 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001DB5E 01                         byte_1B978:	dc.b 1
0001DB5F F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001DB64 01                         byte_1B97E:	dc.b 1
0001DB65 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001DB6A                            		even
0001DB6A                            ; ===========================================================================
0001DB6A                            ; ---------------------------------------------------------------------------
0001DB6A                            ; Object 09 - Sonic (special stage)
0001DB6A                            ; ---------------------------------------------------------------------------
0001DB6A                            
0001DB6A                            Obj09:					; XREF: Obj_Index
0001DB6A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001DB6E 6700                       		beq.s	Obj09_Normal	; if not, branch
0001DB70 6100 0000                  		bsr.w	SS_FixCamera
0001DB74 6000 0000                  		bra.w	DebugMode
0001DB78                            ; ===========================================================================
0001DB78                            
0001DB78                            Obj09_Normal:
0001DB78 7000                       		moveq	#0,d0
0001DB7A 1028 0024                  		move.b	$24(a0),d0
0001DB7E 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001DB82 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001DB86                            ; ===========================================================================
0001DB86 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001DB88 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001DB8A 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001DB8C 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001DB8E                            ; ===========================================================================
0001DB8E                            
0001DB8E                            Obj09_Main:				; XREF: Obj09_Index
0001DB8E 5428 0024                  		addq.b	#2,$24(a0)
0001DB92 117C 000E 0016             		move.b	#$E,$16(a0)
0001DB98 117C 0007 0017             		move.b	#7,$17(a0)
0001DB9E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001DBA6 317C 0780 0002             		move.w	#$780,2(a0)
0001DBAC 117C 0004 0001             		move.b	#4,1(a0)
0001DBB2 117C 0000 0018             		move.b	#0,$18(a0)
0001DBB8 117C 0002 001C             		move.b	#2,$1C(a0)
0001DBBE 08E8 0002 0022             		bset	#2,$22(a0)
0001DBC4 08E8 0001 0022             		bset	#1,$22(a0)
0001DBCA                            
0001DBCA                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001DBCA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001DBCE 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DBD0 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DBD6 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DBD8 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001DBDE                            
0001DBDE                            Obj09_NoDebug:
0001DBDE 117C 0000 0030             		move.b	#0,$30(a0)
0001DBE4 7000                       		moveq	#0,d0
0001DBE6 1028 0022                  		move.b	$22(a0),d0
0001DBEA 0240 0002                  		andi.w	#2,d0
0001DBEE 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001DBF2 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001DBF6 4EB9 0001 566C             		jsr	LoadSonicDynPLC
0001DBFC 4EF9 0000 E902             		jmp	DisplaySprite
0001DC02                            ; ===========================================================================
0001DC02 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001DC04 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001DC06                            ; ===========================================================================
0001DC06                            
0001DC06                            Obj09_OnWall:				; XREF: Obj09_Modes
0001DC06 6100 0000                  		bsr.w	Obj09_Jump
0001DC0A 6100 0000                  		bsr.w	Obj09_Move
0001DC0E 6100 0000                  		bsr.w	Obj09_Fall
0001DC12 6000                       		bra.s	Obj09_Display
0001DC14                            ; ===========================================================================
0001DC14                            
0001DC14                            Obj09_InAir:				; XREF: Obj09_Modes
0001DC14 6100 0000                  		bsr.w	nullsub_2
0001DC18 6100 0000                  		bsr.w	Obj09_Move
0001DC1C 6100 0000                  		bsr.w	Obj09_Fall
0001DC20                            
0001DC20                            Obj09_Display:				; XREF: Obj09_OnWall
0001DC20 6100 0000                  		bsr.w	Obj09_ChkItems
0001DC24 6100 0000                  		bsr.w	Obj09_ChkItems2
0001DC28 4EB9 0000 E8E8             		jsr	SpeedToPos
0001DC2E 6100 0000                  		bsr.w	SS_FixCamera
0001DC32 3038 F780                  		move.w	($FFFFF780).w,d0
0001DC36 D078 F782                  		add.w	($FFFFF782).w,d0
0001DC3A 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DC3E 4EB9 0001 53F2             		jsr	Sonic_Animate
0001DC44 4E75                       		rts	
0001DC46                            
0001DC46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC46                            
0001DC46                            
0001DC46                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001DC46 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001DC4C 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001DC4E 6100 0000                  		bsr.w	Obj09_MoveLeft
0001DC52                            
0001DC52                            Obj09_ChkRight:
0001DC52 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001DC58 6700                       		beq.s	loc_1BA78	; if not, branch
0001DC5A 6100 0000                  		bsr.w	Obj09_MoveRight
0001DC5E                            
0001DC5E                            loc_1BA78:
0001DC5E 1038 F602                  		move.b	($FFFFF602).w,d0
0001DC62 0200 000C                  		andi.b	#$C,d0
0001DC66 6600                       		bne.s	loc_1BAA8
0001DC68 3028 0020                  		move.w	$20(a0),d0
0001DC6C 6700                       		beq.s	loc_1BAA8
0001DC6E 6B00                       		bmi.s	loc_1BA9A
0001DC70 0440 000C                  		subi.w	#$C,d0
0001DC74 6400                       		bcc.s	loc_1BA94
0001DC76 303C 0000                  		move.w	#0,d0
0001DC7A                            
0001DC7A                            loc_1BA94:
0001DC7A 3140 0020                  		move.w	d0,$20(a0)
0001DC7E 6000                       		bra.s	loc_1BAA8
0001DC80                            ; ===========================================================================
0001DC80                            
0001DC80                            loc_1BA9A:
0001DC80 0640 000C                  		addi.w	#$C,d0
0001DC84 6400                       		bcc.s	loc_1BAA4
0001DC86 303C 0000                  		move.w	#0,d0
0001DC8A                            
0001DC8A                            loc_1BAA4:
0001DC8A 3140 0020                  		move.w	d0,$20(a0)
0001DC8E                            
0001DC8E                            loc_1BAA8:
0001DC8E 1038 F780                  		move.b	($FFFFF780).w,d0
0001DC92 0600 0020                  		addi.b	#$20,d0
0001DC96 0200 00C0                  		andi.b	#$C0,d0
0001DC9A 4400                       		neg.b	d0
0001DC9C 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DCA2 C3E8 0020                  		muls.w	$20(a0),d1
0001DCA6 D3A8 0008                  		add.l	d1,8(a0)
0001DCAA C1E8 0020                  		muls.w	$20(a0),d0
0001DCAE D1A8 000C                  		add.l	d0,$C(a0)
0001DCB2 48E7 C000                  		movem.l	d0-d1,-(sp)
0001DCB6 2428 000C                  		move.l	$C(a0),d2
0001DCBA 2628 0008                  		move.l	8(a0),d3
0001DCBE 6100 0000                  		bsr.w	sub_1BCE8
0001DCC2 6700                       		beq.s	loc_1BAF2
0001DCC4 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DCC8 93A8 0008                  		sub.l	d1,8(a0)
0001DCCC 91A8 000C                  		sub.l	d0,$C(a0)
0001DCD0 317C 0000 0020             		move.w	#0,$20(a0)
0001DCD6 4E75                       		rts	
0001DCD8                            ; ===========================================================================
0001DCD8                            
0001DCD8                            loc_1BAF2:
0001DCD8 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DCDC 4E75                       		rts	
0001DCDE                            ; End of function Obj09_Move
0001DCDE                            
0001DCDE                            
0001DCDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCDE                            
0001DCDE                            
0001DCDE                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001DCDE 08E8 0000 0022             		bset	#0,$22(a0)
0001DCE4 3028 0020                  		move.w	$20(a0),d0
0001DCE8 6700                       		beq.s	loc_1BB06
0001DCEA 6A00                       		bpl.s	loc_1BB1A
0001DCEC                            
0001DCEC                            loc_1BB06:
0001DCEC 0440 000C                  		subi.w	#$C,d0
0001DCF0 0C40 F800                  		cmpi.w	#-$800,d0
0001DCF4 6E00                       		bgt.s	loc_1BB14
0001DCF6 303C F800                  		move.w	#-$800,d0
0001DCFA                            
0001DCFA                            loc_1BB14:
0001DCFA 3140 0020                  		move.w	d0,$20(a0)
0001DCFE 4E75                       		rts	
0001DD00                            ; ===========================================================================
0001DD00                            
0001DD00                            loc_1BB1A:
0001DD00 0440 0040                  		subi.w	#$40,d0
0001DD04 6400                       		bcc.s	loc_1BB22
0001DD06 4E71                       		nop	
0001DD08                            
0001DD08                            loc_1BB22:
0001DD08 3140 0020                  		move.w	d0,$20(a0)
0001DD0C 4E75                       		rts	
0001DD0E                            ; End of function Obj09_MoveLeft
0001DD0E                            
0001DD0E                            
0001DD0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD0E                            
0001DD0E                            
0001DD0E                            Obj09_MoveRight:			; XREF: Obj09_Move
0001DD0E 08A8 0000 0022             		bclr	#0,$22(a0)
0001DD14 3028 0020                  		move.w	$20(a0),d0
0001DD18 6B00                       		bmi.s	loc_1BB48
0001DD1A 0640 000C                  		addi.w	#$C,d0
0001DD1E 0C40 0800                  		cmpi.w	#$800,d0
0001DD22 6D00                       		blt.s	loc_1BB42
0001DD24 303C 0800                  		move.w	#$800,d0
0001DD28                            
0001DD28                            loc_1BB42:
0001DD28 3140 0020                  		move.w	d0,$20(a0)
0001DD2C 6000                       		bra.s	locret_1BB54
0001DD2E                            ; ===========================================================================
0001DD2E                            
0001DD2E                            loc_1BB48:
0001DD2E 0640 0040                  		addi.w	#$40,d0
0001DD32 6400                       		bcc.s	loc_1BB50
0001DD34 4E71                       		nop	
0001DD36                            
0001DD36                            loc_1BB50:
0001DD36 3140 0020                  		move.w	d0,$20(a0)
0001DD3A                            
0001DD3A                            locret_1BB54:
0001DD3A 4E75                       		rts	
0001DD3C                            ; End of function Obj09_MoveRight
0001DD3C                            
0001DD3C                            
0001DD3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD3C                            
0001DD3C                            
0001DD3C                            Obj09_Jump:				; XREF: Obj09_OnWall
0001DD3C 1038 F603                  		move.b	($FFFFF603).w,d0
0001DD40 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001DD44 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001DD46 1038 F780                  		move.b	($FFFFF780).w,d0
0001DD4A 0200 00FC                  		andi.b	#$FC,d0
0001DD4E 4400                       		neg.b	d0
0001DD50 0400 0040                  		subi.b	#$40,d0
0001DD54 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DD5A C3FC 0680                  		muls.w	#$680,d1
0001DD5E E081                       		asr.l	#8,d1
0001DD60 3141 0010                  		move.w	d1,$10(a0)
0001DD64 C1FC 0680                  		muls.w	#$680,d0
0001DD68 E080                       		asr.l	#8,d0
0001DD6A 3140 0012                  		move.w	d0,$12(a0)
0001DD6E 08E8 0001 0022             		bset	#1,$22(a0)
0001DD74 303C 00A0                  		move.w	#$A0,d0
0001DD78 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play jumping sound
0001DD7E                            
0001DD7E                            Obj09_NoJump:
0001DD7E 4E75                       		rts	
0001DD80                            ; End of function Obj09_Jump
0001DD80                            
0001DD80                            
0001DD80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD80                            
0001DD80                            
0001DD80                            nullsub_2:				; XREF: Obj09_InAir
0001DD80 4E75                       		rts	
0001DD82                            ; End of function nullsub_2
0001DD82                            
0001DD82                            ; ===========================================================================
0001DD82                            ; ---------------------------------------------------------------------------
0001DD82                            ; unused subroutine to limit Sonic's upward vertical speed
0001DD82                            ; ---------------------------------------------------------------------------
0001DD82 323C FC00                  		move.w	#-$400,d1
0001DD86 B268 0012                  		cmp.w	$12(a0),d1
0001DD8A 6F00                       		ble.s	locret_1BBB4
0001DD8C 1038 F602                  		move.b	($FFFFF602).w,d0
0001DD90 0200 0070                  		andi.b	#$70,d0
0001DD94 6600                       		bne.s	locret_1BBB4
0001DD96 3141 0012                  		move.w	d1,$12(a0)
0001DD9A                            
0001DD9A                            locret_1BBB4:
0001DD9A 4E75                       		rts	
0001DD9C                            ; ---------------------------------------------------------------------------
0001DD9C                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001DD9C                            ; ---------------------------------------------------------------------------
0001DD9C                            
0001DD9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD9C                            
0001DD9C                            
0001DD9C                            SS_FixCamera:				; XREF: Obj09
0001DD9C 3428 000C                  		move.w	$C(a0),d2
0001DDA0 3628 0008                  		move.w	8(a0),d3
0001DDA4 3038 F700                  		move.w	($FFFFF700).w,d0
0001DDA8 0443 00A0                  		subi.w	#$A0,d3
0001DDAC 6500                       		bcs.s	loc_1BBCE
0001DDAE 9043                       		sub.w	d3,d0
0001DDB0 9178 F700                  		sub.w	d0,($FFFFF700).w
0001DDB4                            
0001DDB4                            loc_1BBCE:
0001DDB4 3038 F704                  		move.w	($FFFFF704).w,d0
0001DDB8 0442 0070                  		subi.w	#$70,d2
0001DDBC 6500                       		bcs.s	locret_1BBDE
0001DDBE 9042                       		sub.w	d2,d0
0001DDC0 9178 F704                  		sub.w	d0,($FFFFF704).w
0001DDC4                            
0001DDC4                            locret_1BBDE:
0001DDC4 4E75                       		rts	
0001DDC6                            ; End of function SS_FixCamera
0001DDC6                            
0001DDC6                            ; ===========================================================================
0001DDC6                            
0001DDC6                            Obj09_ExitStage:			; XREF: Obj09_Index
0001DDC6 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001DDCC 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001DDD2 6600                       		bne.s	loc_1BBF4
0001DDD4 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DDDA                            
0001DDDA                            loc_1BBF4:
0001DDDA 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001DDE0 6D00                       		blt.s	loc_1BC12
0001DDE2 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001DDE8 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001DDEE 5428 0024                  		addq.b	#2,$24(a0)
0001DDF2 317C 003C 0038             		move.w	#$3C,$38(a0)
0001DDF8                            
0001DDF8                            loc_1BC12:
0001DDF8 3038 F780                  		move.w	($FFFFF780).w,d0
0001DDFC D078 F782                  		add.w	($FFFFF782).w,d0
0001DE00 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DE04 4EB9 0001 53F2             		jsr	Sonic_Animate
0001DE0A 4EB9 0001 566C             		jsr	LoadSonicDynPLC
0001DE10 6100 FF8A                  		bsr.w	SS_FixCamera
0001DE14 4EF9 0000 E902             		jmp	DisplaySprite
0001DE1A                            ; ===========================================================================
0001DE1A                            
0001DE1A                            Obj09_Exit2:				; XREF: Obj09_Index
0001DE1A 5368 0038                  		subq.w	#1,$38(a0)
0001DE1E 6600                       		bne.s	loc_1BC40
0001DE20 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DE26                            
0001DE26                            loc_1BC40:
0001DE26 4EB9 0001 53F2             		jsr	Sonic_Animate
0001DE2C 4EB9 0001 566C             		jsr	LoadSonicDynPLC
0001DE32 6100 FF68                  		bsr.w	SS_FixCamera
0001DE36 4EF9 0000 E902             		jmp	DisplaySprite
0001DE3C                            
0001DE3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE3C                            
0001DE3C                            
0001DE3C                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001DE3C 2428 000C                  		move.l	$C(a0),d2
0001DE40 2628 0008                  		move.l	8(a0),d3
0001DE44 1038 F780                  		move.b	($FFFFF780).w,d0
0001DE48 0200 00FC                  		andi.b	#$FC,d0
0001DE4C 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DE52 3828 0010                  		move.w	$10(a0),d4
0001DE56 48C4                       		ext.l	d4
0001DE58 E184                       		asl.l	#8,d4
0001DE5A C1FC 002A                  		muls.w	#$2A,d0
0001DE5E D084                       		add.l	d4,d0
0001DE60 3828 0012                  		move.w	$12(a0),d4
0001DE64 48C4                       		ext.l	d4
0001DE66 E184                       		asl.l	#8,d4
0001DE68 C3FC 002A                  		muls.w	#$2A,d1
0001DE6C D284                       		add.l	d4,d1
0001DE6E D680                       		add.l	d0,d3
0001DE70 6100 0000                  		bsr.w	sub_1BCE8
0001DE74 6700                       		beq.s	loc_1BCB0
0001DE76 9680                       		sub.l	d0,d3
0001DE78 7000                       		moveq	#0,d0
0001DE7A 3140 0010                  		move.w	d0,$10(a0)
0001DE7E 08A8 0001 0022             		bclr	#1,$22(a0)
0001DE84 D481                       		add.l	d1,d2
0001DE86 6100 0000                  		bsr.w	sub_1BCE8
0001DE8A 6700                       		beq.s	loc_1BCC6
0001DE8C 9481                       		sub.l	d1,d2
0001DE8E 7200                       		moveq	#0,d1
0001DE90 3141 0012                  		move.w	d1,$12(a0)
0001DE94 4E75                       		rts	
0001DE96                            ; ===========================================================================
0001DE96                            
0001DE96                            loc_1BCB0:
0001DE96 D481                       		add.l	d1,d2
0001DE98 6100 0000                  		bsr.w	sub_1BCE8
0001DE9C 6700                       		beq.s	loc_1BCD4
0001DE9E 9481                       		sub.l	d1,d2
0001DEA0 7200                       		moveq	#0,d1
0001DEA2 3141 0012                  		move.w	d1,$12(a0)
0001DEA6 08A8 0001 0022             		bclr	#1,$22(a0)
0001DEAC                            
0001DEAC                            loc_1BCC6:
0001DEAC E080                       		asr.l	#8,d0
0001DEAE E081                       		asr.l	#8,d1
0001DEB0 3140 0010                  		move.w	d0,$10(a0)
0001DEB4 3141 0012                  		move.w	d1,$12(a0)
0001DEB8 4E75                       		rts	
0001DEBA                            ; ===========================================================================
0001DEBA                            
0001DEBA                            loc_1BCD4:
0001DEBA E080                       		asr.l	#8,d0
0001DEBC E081                       		asr.l	#8,d1
0001DEBE 3140 0010                  		move.w	d0,$10(a0)
0001DEC2 3141 0012                  		move.w	d1,$12(a0)
0001DEC6 08E8 0001 0022             		bset	#1,$22(a0)
0001DECC 4E75                       		rts	
0001DECE                            ; End of function Obj09_Fall
0001DECE                            
0001DECE                            
0001DECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DECE                            
0001DECE                            
0001DECE                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001DECE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DED4 7800                       		moveq	#0,d4
0001DED6 4842                       		swap	d2
0001DED8 3802                       		move.w	d2,d4
0001DEDA 4842                       		swap	d2
0001DEDC 0644 0044                  		addi.w	#$44,d4
0001DEE0 88FC 0018                  		divu.w	#$18,d4
0001DEE4 C8FC 0080                  		mulu.w	#$80,d4
0001DEE8 D3C4                       		adda.l	d4,a1
0001DEEA 7800                       		moveq	#0,d4
0001DEEC 4843                       		swap	d3
0001DEEE 3803                       		move.w	d3,d4
0001DEF0 4843                       		swap	d3
0001DEF2 0644 0014                  		addi.w	#$14,d4
0001DEF6 88FC 0018                  		divu.w	#$18,d4
0001DEFA D2C4                       		adda.w	d4,a1
0001DEFC 7A00                       		moveq	#0,d5
0001DEFE 1819                       		move.b	(a1)+,d4
0001DF00 6100                       		bsr.s	sub_1BD30
0001DF02 1819                       		move.b	(a1)+,d4
0001DF04 6100                       		bsr.s	sub_1BD30
0001DF06 D2FC 007E                  		adda.w	#$7E,a1
0001DF0A 1819                       		move.b	(a1)+,d4
0001DF0C 6100                       		bsr.s	sub_1BD30
0001DF0E 1819                       		move.b	(a1)+,d4
0001DF10 6100                       		bsr.s	sub_1BD30
0001DF12 4A05                       		tst.b	d5
0001DF14 4E75                       		rts	
0001DF16                            ; End of function sub_1BCE8
0001DF16                            
0001DF16                            
0001DF16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF16                            
0001DF16                            
0001DF16                            sub_1BD30:				; XREF: sub_1BCE8
0001DF16 6700                       		beq.s	locret_1BD44
0001DF18 0C04 0028                  		cmpi.b	#$28,d4
0001DF1C 6700                       		beq.s	locret_1BD44
0001DF1E 0C04 003A                  		cmpi.b	#$3A,d4
0001DF22 6500                       		bcs.s	loc_1BD46
0001DF24 0C04 004B                  		cmpi.b	#$4B,d4
0001DF28 6400                       		bcc.s	loc_1BD46
0001DF2A                            
0001DF2A                            locret_1BD44:
0001DF2A 4E75                       		rts	
0001DF2C                            ; ===========================================================================
0001DF2C                            
0001DF2C                            loc_1BD46:
0001DF2C 1144 0030                  		move.b	d4,$30(a0)
0001DF30 2149 0032                  		move.l	a1,$32(a0)
0001DF34 7AFF                       		moveq	#-1,d5
0001DF36 4E75                       		rts	
0001DF38                            ; End of function sub_1BD30
0001DF38                            
0001DF38                            
0001DF38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF38                            
0001DF38                            
0001DF38                            Obj09_ChkItems:				; XREF: Obj09_Display
0001DF38 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DF3E 7800                       		moveq	#0,d4
0001DF40 3828 000C                  		move.w	$C(a0),d4
0001DF44 0644 0050                  		addi.w	#$50,d4
0001DF48 88FC 0018                  		divu.w	#$18,d4
0001DF4C C8FC 0080                  		mulu.w	#$80,d4
0001DF50 D3C4                       		adda.l	d4,a1
0001DF52 7800                       		moveq	#0,d4
0001DF54 3828 0008                  		move.w	8(a0),d4
0001DF58 0644 0020                  		addi.w	#$20,d4
0001DF5C 88FC 0018                  		divu.w	#$18,d4
0001DF60 D2C4                       		adda.w	d4,a1
0001DF62 1811                       		move.b	(a1),d4
0001DF64 6600                       		bne.s	Obj09_ChkCont
0001DF66 4A28 003A                  		tst.b	$3A(a0)
0001DF6A 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001DF6E 7800                       		moveq	#0,d4
0001DF70 4E75                       		rts	
0001DF72                            ; ===========================================================================
0001DF72                            
0001DF72                            Obj09_ChkCont:
0001DF72 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001DF76 6600                       		bne.s	Obj09_Chk1Up
0001DF78 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001DF7C 6600                       		bne.s	Obj09_GetCont
0001DF7E 14BC 0001                  		move.b	#1,(a2)
0001DF82 2549 0004                  		move.l	a1,4(a2)
0001DF86                            
0001DF86                            Obj09_GetCont:
0001DF86 4EB9 0000 AEB4             		jsr	CollectRing
0001DF8C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001DF92 6500                       		bcs.s	Obj09_NoCont
0001DF94 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001DF9A 6600                       		bne.s	Obj09_NoCont
0001DF9C 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001DFA2 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001DFA8 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001DFAC 303C 00BF                  		move.w	#$BF,d0
0001DFB0 4EB9 0000 11F0             		jsr	(PlaySound).l	; play extra continue sound
0001DFB6                            
0001DFB6                            Obj09_NoCont:
0001DFB6 7800                       		moveq	#0,d4
0001DFB8 4E75                       		rts	
0001DFBA                            ; ===========================================================================
0001DFBA                            
0001DFBA                            Obj09_Chk1Up:
0001DFBA 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001DFBE 6600                       		bne.s	Obj09_ChkEmer
0001DFC0 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001DFC4 6600                       		bne.s	Obj09_Get1Up
0001DFC6 14BC 0003                  		move.b	#3,(a2)
0001DFCA 2549 0004                  		move.l	a1,4(a2)
0001DFCE                            
0001DFCE                            Obj09_Get1Up:
0001DFCE 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001DFD2 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001DFD6 303C 0088                  		move.w	#$88,d0
0001DFDA 4EB9 0000 11F0             		jsr	(PlaySound).l	; play extra life music
0001DFE0 7800                       		moveq	#0,d4
0001DFE2 4E75                       		rts	
0001DFE4                            ; ===========================================================================
0001DFE4                            
0001DFE4                            Obj09_ChkEmer:
0001DFE4 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001DFE8 6500                       		bcs.s	Obj09_ChkGhost
0001DFEA 0C04 0040                  		cmpi.b	#$40,d4
0001DFEE 6200                       		bhi.s	Obj09_ChkGhost
0001DFF0 6100 F6AE                  		bsr.w	SS_RemoveCollectedItem
0001DFF4 6600                       		bne.s	Obj09_GetEmer
0001DFF6 14BC 0005                  		move.b	#5,(a2)
0001DFFA 2549 0004                  		move.l	a1,4(a2)
0001DFFE                            
0001DFFE                            Obj09_GetEmer:
0001DFFE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001E004 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001E006 0404 003B                  		subi.b	#$3B,d4
0001E00A 7000                       		moveq	#0,d0
0001E00C 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001E010 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001E014 1584 0000                  		move.b	d4,(a2,d0.w)
0001E018 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001E01C 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001E022 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E028                            
0001E028                            Obj09_NoEmer:
0001E028 303C 0093                  		move.w	#$93,d0
0001E02C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play emerald music
0001E032 7800                       		moveq	#0,d4
0001E034 4E75                       		rts	
0001E036                            ; ===========================================================================
0001E036                            
0001E036                            Obj09_ChkGhost:
0001E036 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001E03A 6600                       		bne.s	Obj09_ChkGhostTag
0001E03C 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001E042                            
0001E042                            Obj09_ChkGhostTag:
0001E042 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001E046 6600                       		bne.s	Obj09_NoGhost
0001E048 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001E04E 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001E050 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001E056                            
0001E056                            Obj09_NoGhost:
0001E056 78FF                       		moveq	#-1,d4
0001E058 4E75                       		rts	
0001E05A                            ; ===========================================================================
0001E05A                            
0001E05A                            Obj09_MakeGhostSolid:
0001E05A 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001E060 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001E062 43F9 00FF 1020             		lea	($FF1020).l,a1
0001E068 723F                       		moveq	#$3F,d1
0001E06A                            
0001E06A                            Obj09_GhostLoop2:
0001E06A 743F                       		moveq	#$3F,d2
0001E06C                            
0001E06C                            Obj09_GhostLoop:
0001E06C 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001E070 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001E072 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001E076                            
0001E076                            Obj09_NoReplace:
0001E076 5249                       		addq.w	#1,a1
0001E078 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001E07C 43E9 0040                  		lea	$40(a1),a1
0001E080 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001E084                            
0001E084                            Obj09_GhostNotSolid:
0001E084 4228 003A                  		clr.b	$3A(a0)
0001E088 7800                       		moveq	#0,d4
0001E08A 4E75                       		rts	
0001E08C                            ; End of function Obj09_ChkItems
0001E08C                            
0001E08C                            
0001E08C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E08C                            
0001E08C                            
0001E08C                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001E08C 1028 0030                  		move.b	$30(a0),d0
0001E090 6600                       		bne.s	Obj09_ChkBumper
0001E092 5328 0036                  		subq.b	#1,$36(a0)
0001E096 6A00                       		bpl.s	loc_1BEA0
0001E098 117C 0000 0036             		move.b	#0,$36(a0)
0001E09E                            
0001E09E                            loc_1BEA0:
0001E09E 5328 0037                  		subq.b	#1,$37(a0)
0001E0A2 6A00                       		bpl.s	locret_1BEAC
0001E0A4 117C 0000 0037             		move.b	#0,$37(a0)
0001E0AA                            
0001E0AA                            locret_1BEAC:
0001E0AA 4E75                       		rts	
0001E0AC                            ; ===========================================================================
0001E0AC                            
0001E0AC                            Obj09_ChkBumper:
0001E0AC 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001E0B0 6600                       		bne.s	Obj09_GOAL	
0001E0B2 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
0001E0B8 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E0BE 2228 0032                  		move.l	$32(a0),d1
0001E0C2 0481 00FF 0001             		subi.l	#$FF0001,d1
0001E0C8 3401                       		move.w	d1,d2
0001E0CA 0241 007F                  		andi.w	#$7F,d1
0001E0CE C2FC 0018                  		mulu.w	#$18,d1
0001E0D2 0441 0014                  		subi.w	#$14,d1
0001E0D6 EE4A                       		lsr.w	#7,d2
0001E0D8 0242 007F                  		andi.w	#$7F,d2
0001E0DC C4FC 0018                  		mulu.w	#$18,d2
0001E0E0 0442 0044                  		subi.w	#$44,d2
0001E0E4 9268 0008                  		sub.w	8(a0),d1
0001E0E8 9468 000C                  		sub.w	$C(a0),d2
0001E0EC 4EB9 0000 2C94             		jsr	(CalcAngle).l
0001E0F2 4EB9 0000 29CC             		jsr	(CalcSine).l
0001E0F8 C3FC F900                  		muls.w	#-$700,d1
0001E0FC E081                       		asr.l	#8,d1
0001E0FE 3141 0010                  		move.w	d1,$10(a0)
0001E102 C1FC F900                  		muls.w	#-$700,d0
0001E106 E080                       		asr.l	#8,d0
0001E108 3140 0012                  		move.w	d0,$12(a0)
0001E10C 08E8 0001 0022             		bset	#1,$22(a0)
0001E112 6100 F58C                  		bsr.w	SS_RemoveCollectedItem
0001E116 6600                       		bne.s	Obj09_BumpSnd
0001E118 14BC 0002                  		move.b	#2,(a2)
0001E11C 2028 0032                  		move.l	$32(a0),d0
0001E120 5380                       		subq.l	#1,d0
0001E122 2540 0004                  		move.l	d0,4(a2)
0001E126                            
0001E126                            Obj09_BumpSnd:
0001E126 303C 00B4                  		move.w	#$B4,d0
0001E12A 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play bumper sound
0001E130                            ; ===========================================================================
0001E130                            
0001E130                            Obj09_GOAL:
0001E130 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001E134 6600                       		bne.s	Obj09_UPblock
0001E136 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001E13A 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001E140 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E146 303C 00A8                  		move.w	#$A8,d0		; change item
0001E14A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001E150 4E75                       		rts	
0001E152                            ; ===========================================================================
0001E152                            
0001E152                            Obj09_UPblock:
0001E152 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001E156 6600                       		bne.s	Obj09_DOWNblock
0001E158 4A28 0036                  		tst.b	$36(a0)
0001E15C 6600 0000                  		bne.w	Obj09_NoGlass
0001E160 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E166 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E16C 6700                       		beq.s	Obj09_UPsnd
0001E16E E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001E172 2268 0032                  		movea.l	$32(a0),a1
0001E176 5389                       		subq.l	#1,a1
0001E178 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001E17C                            
0001E17C                            Obj09_UPsnd:
0001E17C 303C 00A9                  		move.w	#$A9,d0
0001E180 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E186                            ; ===========================================================================
0001E186                            
0001E186                            Obj09_DOWNblock:
0001E186 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001E18A 6600                       		bne.s	Obj09_Rblock
0001E18C 4A28 0036                  		tst.b	$36(a0)
0001E190 6600 0000                  		bne.w	Obj09_NoGlass
0001E194 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E19A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E1A0 6600                       		bne.s	Obj09_DOWNsnd
0001E1A2 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001E1A6 2268 0032                  		movea.l	$32(a0),a1
0001E1AA 5389                       		subq.l	#1,a1
0001E1AC 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001E1B0                            
0001E1B0                            Obj09_DOWNsnd:
0001E1B0 303C 00A9                  		move.w	#$A9,d0
0001E1B4 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E1BA                            ; ===========================================================================
0001E1BA                            
0001E1BA                            Obj09_Rblock:
0001E1BA 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001E1BE 6600                       		bne.s	Obj09_ChkGlass
0001E1C0 4A28 0037                  		tst.b	$37(a0)
0001E1C4 6600 0000                  		bne.w	Obj09_NoGlass
0001E1C8 117C 001E 0037             		move.b	#$1E,$37(a0)
0001E1CE 6100 F4D0                  		bsr.w	SS_RemoveCollectedItem
0001E1D2 6600                       		bne.s	Obj09_RevStage
0001E1D4 14BC 0004                  		move.b	#4,(a2)
0001E1D8 2028 0032                  		move.l	$32(a0),d0
0001E1DC 5380                       		subq.l	#1,d0
0001E1DE 2540 0004                  		move.l	d0,4(a2)
0001E1E2                            
0001E1E2                            Obj09_RevStage:
0001E1E2 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001E1E6 303C 00A9                  		move.w	#$A9,d0
0001E1EA 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play sound
0001E1F0                            ; ===========================================================================
0001E1F0                            
0001E1F0                            Obj09_ChkGlass:
0001E1F0 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001E1F4 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001E1F6 0C00 002E                  		cmpi.b	#$2E,d0
0001E1FA 6700                       		beq.s	Obj09_Glass
0001E1FC 0C00 002F                  		cmpi.b	#$2F,d0
0001E200 6700                       		beq.s	Obj09_Glass
0001E202 0C00 0030                  		cmpi.b	#$30,d0
0001E206 6600 0000                  		bne.w	Obj09_NoGlass	; if not, branch
0001E20A                            
0001E20A                            Obj09_Glass:
0001E20A 0C38 0007 F5CE             		cmpi.b	#face_happy,(SonimeSST+sonime_face).w
0001E210 6700                       		beq.s	@happy
0001E212 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
0001E218 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E21E 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
0001E274                            
0001E274                            	@happy:
0001E274 6100 F42A                  		bsr.w	SS_RemoveCollectedItem
0001E278 6600                       		bne.s	Obj09_GlassSnd
0001E27A 14BC 0006                  		move.b	#6,(a2)
0001E27E 2268 0032                  		movea.l	$32(a0),a1
0001E282 5389                       		subq.l	#1,a1
0001E284 2549 0004                  		move.l	a1,4(a2)
0001E288 1011                       		move.b	(a1),d0
0001E28A 5200                       		addq.b	#1,d0		; change glass type when touched
0001E28C 0C00 0030                  		cmpi.b	#$30,d0
0001E290 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001E292 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001E294                            
0001E294                            Obj09_GlassUpdate:
0001E294 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001E298                            
0001E298                            Obj09_GlassSnd:
0001E298 303C 00BA                  		move.w	#$BA,d0
0001E29C 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play glass block sound
0001E2A2                            ; ===========================================================================
0001E2A2                            
0001E2A2                            Obj09_NoGlass:
0001E2A2 4E75                       		rts	
0001E2A4                            ; End of function Obj09_ChkItems2
0001E2A4                            
0001E2A4                            ; ===========================================================================
0001E2A4                            ; ---------------------------------------------------------------------------
0001E2A4                            ; Object 10 - blank
0001E2A4                            ; ---------------------------------------------------------------------------
0001E2A4                            
0001E2A4                            Obj10:					; XREF: Obj_Index
0001E2A4 4E75                       		rts	
0001E2A6                            ; ---------------------------------------------------------------------------
0001E2A6                            ; Subroutine to	animate	level graphics
0001E2A6                            ; ---------------------------------------------------------------------------
0001E2A6                            
0001E2A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2A6                            
0001E2A6                            
0001E2A6                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001E2A6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E2AA 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001E2AC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E2B2 6100 0000                  		bsr.w	AniArt_GiantRing
0001E2B6 7000                       		moveq	#0,d0
0001E2B8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E2BC D040                       		add.w	d0,d0
0001E2BE 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001E2C2 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001E2C6                            ; ===========================================================================
0001E2C6                            
0001E2C6                            AniArt_Pause:
0001E2C6 4E75                       		rts	
0001E2C8                            ; End of function AniArt_Load
0001E2C8                            
0001E2C8                            ; ===========================================================================
0001E2C8 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001E2CC 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001E2D0 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001E2D4 0000                       		dc.w AniArt_Ending-AniArt_Index
0001E2D6                            ; ===========================================================================
0001E2D6                            ; ---------------------------------------------------------------------------
0001E2D6                            ; Animated pattern routine - Green Hill
0001E2D6                            ; ---------------------------------------------------------------------------
0001E2D6                            
0001E2D6                            AniArt_GHZ:				; XREF: AniArt_Index
0001E2D6 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E2DA 6A00                       		bpl.s	loc_1C08A
0001E2DC 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001E2E2 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001E2E8 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E2EC 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E2F0 0240 0001                  		andi.w	#1,d0
0001E2F4 6700                       		beq.s	loc_1C078
0001E2F6 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001E2FA                            
0001E2FA                            loc_1C078:
0001E2FA 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001E304 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001E308 6000 0000                  		bra.w	LoadTiles
0001E30C                            ; ===========================================================================
0001E30C                            
0001E30C                            loc_1C08A:
0001E30C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E310 6A00                       		bpl.s	loc_1C0C0
0001E312 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001E318 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E31E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E322 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E326 0240 0001                  		andi.w	#1,d0
0001E32A 6700                       		beq.s	loc_1C0AE
0001E32C 43E9 0200                  		lea	$200(a1),a1
0001E330                            
0001E330                            loc_1C0AE:
0001E330 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E33A 323C 000F                  		move.w	#$F,d1
0001E33E 6000 0000                  		bra.w	LoadTiles
0001E342                            ; ===========================================================================
0001E342                            
0001E342                            loc_1C0C0:
0001E342 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E346 6A00                       		bpl.s	locret_1C10C
0001E348 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E34E 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E352 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E356 0240 0003                  		andi.w	#3,d0
0001E35A 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001E35E 0800 0000                  		btst	#0,d0
0001E362 6600                       		bne.s	loc_1C0E8
0001E364 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001E36A                            
0001E36A                            loc_1C0E8:
0001E36A EF48                       		lsl.w	#7,d0
0001E36C 3200                       		move.w	d0,d1
0001E36E D040                       		add.w	d0,d0
0001E370 D041                       		add.w	d1,d0
0001E372 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E37C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E382 43F1 0000                  		lea	(a1,d0.w),a1
0001E386 323C 000B                  		move.w	#$B,d1
0001E38A 6100 0000                  		bsr.w	LoadTiles
0001E38E                            
0001E38E                            locret_1C10C:
0001E38E 4E75                       		rts	
0001E390                            ; ===========================================================================
0001E390 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001E394                            ; ===========================================================================
0001E394                            ; ---------------------------------------------------------------------------
0001E394                            ; Animated pattern routine - Marble
0001E394                            ; ---------------------------------------------------------------------------
0001E394                            
0001E394                            AniArt_MZ:				; XREF: AniArt_Index
0001E394 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E398 6A00                       		bpl.s	loc_1C150
0001E39A 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001E3A0 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001E3A6 7000                       		moveq	#0,d0
0001E3A8 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E3AC 5200                       		addq.b	#1,d0
0001E3AE 0C00 0003                  		cmpi.b	#3,d0
0001E3B2 6600                       		bne.s	loc_1C134
0001E3B4 7000                       		moveq	#0,d0
0001E3B6                            
0001E3B6                            loc_1C134:
0001E3B6 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001E3BA C0FC 0100                  		mulu.w	#$100,d0
0001E3BE D2C0                       		adda.w	d0,a1
0001E3C0 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001E3CA 323C 0007                  		move.w	#7,d1
0001E3CE 6100 0000                  		bsr.w	LoadTiles
0001E3D2                            
0001E3D2                            loc_1C150:
0001E3D2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E3D6 6A00                       		bpl.s	loc_1C1AE
0001E3D8 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001E3DE 7000                       		moveq	#0,d0
0001E3E0 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E3E4 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001E3EA EE58                       		ror.w	#7,d0
0001E3EC D8C0                       		adda.w	d0,a4
0001E3EE 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001E3F8 7600                       		moveq	#0,d3
0001E3FA 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001E3FE 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E402 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001E406 343C 0003                  		move.w	#3,d2
0001E40A                            
0001E40A                            loc_1C188:
0001E40A 3003                       		move.w	d3,d0
0001E40C D040                       		add.w	d0,d0
0001E40E 0240 001E                  		andi.w	#$1E,d0
0001E412 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001E418 3033 0000                  		move.w	(a3,d0.w),d0
0001E41C 47F3 0000                  		lea	(a3,d0.w),a3
0001E420 224C                       		movea.l	a4,a1
0001E422 323C 001F                  		move.w	#$1F,d1
0001E426 4E93                       		jsr	(a3)
0001E428 5843                       		addq.w	#4,d3
0001E42A 51CA FFDE                  		dbf	d2,loc_1C188
0001E42E 4E75                       		rts	
0001E430                            ; ===========================================================================
0001E430                            
0001E430                            loc_1C1AE:
0001E430 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E434 6A00 0000                  		bpl.w	locret_1C1EA
0001E438 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E43E 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E444 7000                       		moveq	#0,d0
0001E446 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E44A 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E44E 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E454 C0FC 00C0                  		mulu.w	#$C0,d0
0001E458 D2C0                       		adda.w	d0,a1
0001E45A 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E464 323C 0005                  		move.w	#5,d1
0001E468 6000 0000                  		bra.w	LoadTiles
0001E46C                            ; ===========================================================================
0001E46C                            
0001E46C                            locret_1C1EA:
0001E46C 4E75                       		rts	
0001E46E                            ; ===========================================================================
0001E46E                            ; ---------------------------------------------------------------------------
0001E46E                            ; Animated pattern routine - Scrap Brain
0001E46E                            ; ---------------------------------------------------------------------------
0001E46E                            
0001E46E                            AniArt_SBZ:				; XREF: AniArt_Index
0001E46E 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E472 6700                       		beq.s	loc_1C1F8
0001E474 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E478 6000                       		bra.s	loc_1C250
0001E47A                            ; ===========================================================================
0001E47A                            
0001E47A                            loc_1C1F8:
0001E47A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E47E 6A00                       		bpl.s	loc_1C250
0001E480 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E486 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E48C 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E496 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E49A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E49E 0240 0007                  		andi.w	#7,d0
0001E4A2 6700                       		beq.s	loc_1C234
0001E4A4 5340                       		subq.w	#1,d0
0001E4A6 C0FC 0180                  		mulu.w	#$180,d0
0001E4AA 43F1 0000                  		lea	(a1,d0.w),a1
0001E4AE 323C 000B                  		move.w	#$B,d1
0001E4B2 6000 0000                  		bra.w	LoadTiles
0001E4B6                            ; ===========================================================================
0001E4B6                            
0001E4B6                            loc_1C234:
0001E4B6 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001E4BC                            
0001E4BC                            loc_1C23A:
0001E4BC 323C 0005                  		move.w	#5,d1
0001E4C0 6100 0000                  		bsr.w	LoadTiles
0001E4C4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E4CA 323C 0005                  		move.w	#5,d1
0001E4CE 6000 0000                  		bra.w	LoadTiles
0001E4D2                            ; ===========================================================================
0001E4D2                            
0001E4D2                            loc_1C250:
0001E4D2 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001E4D6 6700                       		beq.s	loc_1C25C
0001E4D8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E4DC 6000                       		bra.s	locret_1C2A0
0001E4DE                            ; ===========================================================================
0001E4DE                            
0001E4DE                            loc_1C25C:
0001E4DE 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E4E2 6A00                       		bpl.s	locret_1C2A0
0001E4E4 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E4EA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E4F0 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001E4FA 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E4FE 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E502 0240 0007                  		andi.w	#7,d0
0001E506 6700                       		beq.s	loc_1C298
0001E508 5340                       		subq.w	#1,d0
0001E50A C0FC 0180                  		mulu.w	#$180,d0
0001E50E 43F1 0000                  		lea	(a1,d0.w),a1
0001E512 323C 000B                  		move.w	#$B,d1
0001E516 6000 0000                  		bra.w	LoadTiles
0001E51A                            ; ===========================================================================
0001E51A                            
0001E51A                            loc_1C298:
0001E51A 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001E520 609A                       		bra.s	loc_1C23A
0001E522                            ; ===========================================================================
0001E522                            
0001E522                            locret_1C2A0:
0001E522 4E75                       		rts	
0001E524                            ; ===========================================================================
0001E524                            ; ---------------------------------------------------------------------------
0001E524                            ; Animated pattern routine - ending sequence
0001E524                            ; ---------------------------------------------------------------------------
0001E524                            
0001E524                            AniArt_Ending:				; XREF: AniArt_Index
0001E524 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E528 6A00                       		bpl.s	loc_1C2F4
0001E52A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E530 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E536 45F8 9400                  		lea	($FFFF9400).w,a2
0001E53A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E53E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E542 0240 0001                  		andi.w	#1,d0
0001E546 6700                       		beq.s	loc_1C2CE
0001E548 43E9 0200                  		lea	$200(a1),a1
0001E54C 45EA 0200                  		lea	$200(a2),a2
0001E550                            
0001E550                            loc_1C2CE:
0001E550 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E55A 323C 000F                  		move.w	#$F,d1
0001E55E 6100 0000                  		bsr.w	LoadTiles
0001E562 224A                       		movea.l	a2,a1
0001E564 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001E56E 323C 000F                  		move.w	#$F,d1
0001E572 6000 0000                  		bra.w	LoadTiles
0001E576                            ; ===========================================================================
0001E576                            
0001E576                            loc_1C2F4:
0001E576 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E57A 6A00                       		bpl.s	loc_1C33C
0001E57C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E582 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E586 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E58A 0240 0007                  		andi.w	#7,d0
0001E58E 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001E592 EF48                       		lsl.w	#7,d0
0001E594 3200                       		move.w	d0,d1
0001E596 D040                       		add.w	d0,d0
0001E598 D041                       		add.w	d1,d0
0001E59A 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E5A4 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E5AA 43F1 0000                  		lea	(a1,d0.w),a1
0001E5AE 323C 000B                  		move.w	#$B,d1
0001E5B2 6000 0000                  		bra.w	LoadTiles
0001E5B6                            ; ===========================================================================
0001E5B6 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001E5BE                            ; ===========================================================================
0001E5BE                            
0001E5BE                            loc_1C33C:
0001E5BE 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001E5C2 6A00                       		bpl.s	loc_1C37A
0001E5C4 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001E5CA 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001E5CE 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001E5D2 0240 0003                  		andi.w	#3,d0
0001E5D6 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001E5DA E148                       		lsl.w	#8,d0
0001E5DC D040                       		add.w	d0,d0
0001E5DE 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001E5E8 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001E5EC 43F1 0000                  		lea	(a1,d0.w),a1
0001E5F0 323C 000F                  		move.w	#$F,d1
0001E5F4 6000 0000                  		bra.w	LoadTiles
0001E5F8                            ; ===========================================================================
0001E5F8 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001E5FC                            ; ===========================================================================
0001E5FC                            
0001E5FC                            loc_1C37A:
0001E5FC 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001E600 6A00                       		bpl.s	locret_1C3B4
0001E602 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001E608 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001E60C 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001E610 0240 0003                  		andi.w	#3,d0
0001E614 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001E618 E148                       		lsl.w	#8,d0
0001E61A D040                       		add.w	d0,d0
0001E61C 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001E626 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001E62A 43F1 0000                  		lea	(a1,d0.w),a1
0001E62E 323C 000F                  		move.w	#$F,d1
0001E632 6000 0000                  		bra.w	LoadTiles
0001E636                            ; ===========================================================================
0001E636                            
0001E636                            locret_1C3B4:
0001E636 4E75                       		rts	
0001E638                            ; ===========================================================================
0001E638                            
0001E638                            AniArt_none:				; XREF: AniArt_Index
0001E638 4E75                       		rts	
0001E63A                            
0001E63A                            ; ---------------------------------------------------------------------------
0001E63A                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001E63A                            ; ---------------------------------------------------------------------------
0001E63A                            
0001E63A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E63A                            
0001E63A                            
0001E63A                            LoadTiles:
0001E63A 2C99                       		move.l	(a1)+,(a6)
0001E63C 2C99                       		move.l	(a1)+,(a6)
0001E63E 2C99                       		move.l	(a1)+,(a6)
0001E640 2C99                       		move.l	(a1)+,(a6)
0001E642 2C99                       		move.l	(a1)+,(a6)
0001E644 2C99                       		move.l	(a1)+,(a6)
0001E646 2C99                       		move.l	(a1)+,(a6)
0001E648 2C99                       		move.l	(a1)+,(a6)
0001E64A 51C9 FFEE                  		dbf	d1,LoadTiles
0001E64E 4E75                       		rts	
0001E650                            ; End of function LoadTiles
0001E650                            
0001E650                            ; ===========================================================================
0001E650                            ; ---------------------------------------------------------------------------
0001E650                            ; Animated pattern routine - more Marble Zone
0001E650                            ; ---------------------------------------------------------------------------
0001E650 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001E654 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001E658 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001E65C 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001E660 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001E664 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001E668 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001E66C 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001E670                            ; ===========================================================================
0001E670                            
0001E670                            loc_1C3EE:				; XREF: AniArt_MZextra
0001E670 2C91                       		move.l	(a1),(a6)
0001E672 43E9 0010                  		lea	$10(a1),a1
0001E676 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001E67A 4E75                       		rts	
0001E67C                            ; ===========================================================================
0001E67C                            
0001E67C                            loc_1C3FA:				; XREF: AniArt_MZextra
0001E67C 2029 0002                  		move.l	2(a1),d0
0001E680 1029 0001                  		move.b	1(a1),d0
0001E684 E098                       		ror.l	#8,d0
0001E686 2C80                       		move.l	d0,(a6)
0001E688 43E9 0010                  		lea	$10(a1),a1
0001E68C 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001E690 4E75                       		rts	
0001E692                            ; ===========================================================================
0001E692                            
0001E692                            loc_1C410:				; XREF: AniArt_MZextra
0001E692 2CA9 0002                  		move.l	2(a1),(a6)
0001E696 43E9 0010                  		lea	$10(a1),a1
0001E69A 51C9 FFF6                  		dbf	d1,loc_1C410
0001E69E 4E75                       		rts	
0001E6A0                            ; ===========================================================================
0001E6A0                            
0001E6A0                            loc_1C41E:				; XREF: AniArt_MZextra
0001E6A0 2029 0004                  		move.l	4(a1),d0
0001E6A4 1029 0003                  		move.b	3(a1),d0
0001E6A8 E098                       		ror.l	#8,d0
0001E6AA 2C80                       		move.l	d0,(a6)
0001E6AC 43E9 0010                  		lea	$10(a1),a1
0001E6B0 51C9 FFEE                  		dbf	d1,loc_1C41E
0001E6B4 4E75                       		rts	
0001E6B6                            ; ===========================================================================
0001E6B6                            
0001E6B6                            loc_1C434:				; XREF: AniArt_MZextra
0001E6B6 2CA9 0004                  		move.l	4(a1),(a6)
0001E6BA 43E9 0010                  		lea	$10(a1),a1
0001E6BE 51C9 FFF6                  		dbf	d1,loc_1C434
0001E6C2 4E75                       		rts	
0001E6C4                            ; ===========================================================================
0001E6C4                            
0001E6C4                            loc_1C442:				; XREF: AniArt_MZextra
0001E6C4 2029 0006                  		move.l	6(a1),d0
0001E6C8 1029 0005                  		move.b	5(a1),d0
0001E6CC E098                       		ror.l	#8,d0
0001E6CE 2C80                       		move.l	d0,(a6)
0001E6D0 43E9 0010                  		lea	$10(a1),a1
0001E6D4 51C9 FFEE                  		dbf	d1,loc_1C442
0001E6D8 4E75                       		rts	
0001E6DA                            ; ===========================================================================
0001E6DA                            
0001E6DA                            loc_1C458:				; XREF: AniArt_MZextra
0001E6DA 2CA9 0006                  		move.l	6(a1),(a6)
0001E6DE 43E9 0010                  		lea	$10(a1),a1
0001E6E2 51C9 FFF6                  		dbf	d1,loc_1C458
0001E6E6 4E75                       		rts	
0001E6E8                            ; ===========================================================================
0001E6E8                            
0001E6E8                            loc_1C466:				; XREF: AniArt_MZextra
0001E6E8 2029 0008                  		move.l	8(a1),d0
0001E6EC 1029 0007                  		move.b	7(a1),d0
0001E6F0 E098                       		ror.l	#8,d0
0001E6F2 2C80                       		move.l	d0,(a6)
0001E6F4 43E9 0010                  		lea	$10(a1),a1
0001E6F8 51C9 FFEE                  		dbf	d1,loc_1C466
0001E6FC 4E75                       		rts	
0001E6FE                            ; ===========================================================================
0001E6FE                            
0001E6FE                            loc_1C47C:				; XREF: AniArt_MZextra
0001E6FE 2CA9 0008                  		move.l	8(a1),(a6)
0001E702 43E9 0010                  		lea	$10(a1),a1
0001E706 51C9 FFF6                  		dbf	d1,loc_1C47C
0001E70A 4E75                       		rts	
0001E70C                            ; ===========================================================================
0001E70C                            
0001E70C                            loc_1C48A:				; XREF: AniArt_MZextra
0001E70C 2029 000A                  		move.l	$A(a1),d0
0001E710 1029 0009                  		move.b	9(a1),d0
0001E714 E098                       		ror.l	#8,d0
0001E716 2C80                       		move.l	d0,(a6)
0001E718 43E9 0010                  		lea	$10(a1),a1
0001E71C 51C9 FFEE                  		dbf	d1,loc_1C48A
0001E720 4E75                       		rts	
0001E722                            ; ===========================================================================
0001E722                            
0001E722                            loc_1C4A0:				; XREF: AniArt_MZextra
0001E722 2CA9 000A                  		move.l	$A(a1),(a6)
0001E726 43E9 0010                  		lea	$10(a1),a1
0001E72A 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001E72E 4E75                       		rts	
0001E730                            ; ===========================================================================
0001E730                            
0001E730                            loc_1C4AE:				; XREF: AniArt_MZextra
0001E730 2029 000C                  		move.l	$C(a1),d0
0001E734 1029 000B                  		move.b	$B(a1),d0
0001E738 E098                       		ror.l	#8,d0
0001E73A 2C80                       		move.l	d0,(a6)
0001E73C 43E9 0010                  		lea	$10(a1),a1
0001E740 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001E744 4E75                       		rts	
0001E746                            ; ===========================================================================
0001E746                            
0001E746                            loc_1C4C4:				; XREF: AniArt_MZextra
0001E746 2CA9 000C                  		move.l	$C(a1),(a6)
0001E74A 43E9 0010                  		lea	$10(a1),a1
0001E74E 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001E752 4E75                       		rts	
0001E754                            ; ===========================================================================
0001E754                            
0001E754                            loc_1C4D2:				; XREF: AniArt_MZextra
0001E754 2029 000C                  		move.l	$C(a1),d0
0001E758 E198                       		rol.l	#8,d0
0001E75A 1011                       		move.b	0(a1),d0
0001E75C 2C80                       		move.l	d0,(a6)
0001E75E 43E9 0010                  		lea	$10(a1),a1
0001E762 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001E766 4E75                       		rts	
0001E768                            ; ===========================================================================
0001E768                            
0001E768                            loc_1C4E8:				; XREF: AniArt_MZextra
0001E768 3CA9 000E                  		move.w	$E(a1),(a6)
0001E76C 3C91                       		move.w	0(a1),(a6)
0001E76E 43E9 0010                  		lea	$10(a1),a1
0001E772 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001E776 4E75                       		rts	
0001E778                            ; ===========================================================================
0001E778                            
0001E778                            loc_1C4FA:				; XREF: AniArt_MZextra
0001E778 2011                       		move.l	0(a1),d0
0001E77A 1029 000F                  		move.b	$F(a1),d0
0001E77E E098                       		ror.l	#8,d0
0001E780 2C80                       		move.l	d0,(a6)
0001E782 43E9 0010                  		lea	$10(a1),a1
0001E786 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001E78A 4E75                       		rts	
0001E78C                            
0001E78C                            ; ---------------------------------------------------------------------------
0001E78C                            ; Animated pattern routine - giant ring
0001E78C                            ; ---------------------------------------------------------------------------
0001E78C                            
0001E78C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E78C                            
0001E78C                            
0001E78C                            AniArt_GiantRing:			; XREF: AniArt_Load
0001E78C 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001E790 6600                       		bne.s	loc_1C518
0001E792 4E75                       		rts	
0001E794                            ; ===========================================================================
0001E794                            
0001E794                            loc_1C518:
0001E794 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001E79A 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001E7A0 7000                       		moveq	#0,d0
0001E7A2 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001E7A6 43F1 0000                  		lea	(a1,d0.w),a1
0001E7AA 0640 8000                  		addi.w	#$8000,d0
0001E7AE E588                       		lsl.l	#2,d0
0001E7B0 E448                       		lsr.w	#2,d0
0001E7B2 0040 4000                  		ori.w	#$4000,d0
0001E7B6 4840                       		swap	d0
0001E7B8 2D40 0004                  		move.l	d0,4(a6)
0001E7BC 323C 000D                  		move.w	#$D,d1
0001E7C0 6000 FE78                  		bra.w	LoadTiles
0001E7C4                            ; End of function AniArt_GiantRing
0001E7C4                            
0001E7C4                            ; ===========================================================================
0001E7C4                            Obj21:                    ; XREF: Obj_Index
0001E7C4 4E75                               rts
0001E7C6                            ; ===========================================================================
0001E7C6                            ; ---------------------------------------------------------------------------
0001E7C6                            ; HUD Object code - SCORE, TIME, RINGS
0001E7C6                            ; ---------------------------------------------------------------------------
0001E7C6                            loc_40804:
0001E7C6 4A78 FE20                      tst.w    ($FFFFFE20).w
0001E7CA 6700                           beq.s    loc_40820
0001E7CC 7200                           moveq    #0,d1
0001E7CE 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001E7D4 6600                           bne.s    BranchTo_loc_40836
0001E7D6 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001E7DC 6600                           bne.s    BranchTo_loc_40836
0001E7DE 5441                           addq.w    #2,d1
0001E7E0                            
0001E7E0                            BranchTo_loc_40836
0001E7E0 6000                           bra.s    loc_40836
0001E7E2                            ; ===========================================================================
0001E7E2                            
0001E7E2                            loc_40820:
0001E7E2 7200                           moveq    #0,d1
0001E7E4 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001E7EA 6600                           bne.s    loc_40836
0001E7EC 5241                           addq.w    #1,d1
0001E7EE 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001E7F4 6600                           bne.s    loc_40836
0001E7F6 5441                           addq.w    #2,d1
0001E7F8                            
0001E7F8                            loc_40836:
0001E7F8 363C 0090                      move.w    #$90,d3
0001E7FC 343C 0108                      move.w    #$108,d2
0001E800 43F9 0000 0000                 lea    (Map_Obj21).l,a1
0001E806 367C 06CA                      movea.w    #$6CA,a3
0001E80A D241                           add.w    d1,d1
0001E80C D2F1 1000                      adda.w    (a1,d1.w),a1
0001E810 7200                           moveq    #0,d1
0001E812 1219                           move.b    (a1)+,d1
0001E814 5301                           subq.b    #1,d1
0001E816 6B00                           bmi.s    return_40858
0001E818 4EB9 0000 EBAC                 jsr    sub_D762
0001E81E                            
0001E81E                            return_40858:
0001E81E 4E75                           rts
0001E820                            ; End of function h
0001E820                            ; ===========================================================================
0001E820                            ; ---------------------------------------------------------------------------
0001E820                            ; Sprite mappings - SCORE, TIME, RINGS
0001E820                            ; ---------------------------------------------------------------------------
0001E820                            Map_obj21:
0001E820                            	include "_maps\obj21.asm"
0001E820                            ; ---------------------------------------------------------------------------
0001E820                            ; Sprite mappings - SCORE, TIME, RINGS
0001E820                            ; ---------------------------------------------------------------------------
0001E820 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001E824 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001E828 0A                         byte_1C5BC:	dc.b $A
0001E829 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E82E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E833 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E838 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001E83D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E842 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001E847 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001E84C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E851 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E856 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E85B 00                         		dc.b 0
0001E85C 0A                         byte_1C5F0:	dc.b $A
0001E85D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E862 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E867 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E86C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001E871 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E876 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001E87B A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001E880 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E885 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E88A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E88F 00                         		dc.b 0
0001E890 0A                         byte_1C624:	dc.b $A
0001E891 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E896 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E89B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E8A0 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001E8A5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E8AA A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001E8AF A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001E8B4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E8B9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E8BE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E8C3 00                         		dc.b 0
0001E8C4 0A                         byte_1C658:	dc.b $A
0001E8C5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E8CA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E8CF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E8D4 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001E8D9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E8DE A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001E8E3 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001E8E8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E8ED 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E8F2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E8F8 00                         		even
0001E8F8 00                         		even
0001E8F8                            
0001E8F8                            ; ---------------------------------------------------------------------------
0001E8F8                            ; Add points subroutine
0001E8F8                            ; ---------------------------------------------------------------------------
0001E8F8                            
0001E8F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8F8                            
0001E8F8                            
0001E8F8                            AddPoints:                      ; ...
0001E8F8 11FC 0001 FE1F                     move.b    #1,($FFFFFE1F).w
0001E8FE 47F8 FE26                          lea    ($FFFFFE26).w,a3
0001E902 D193                               add.l    d0,(a3)
0001E904 223C 000F 423F                     move.l    #999999,d1
0001E90A B293                               cmp.l    (a3),d1
0001E90C 6200                               bhi.s    loc_1C6AC
0001E90E 2681                               move.l    d1,(a3)
0001E910                            
0001E910                            loc_1C6AC:                      ; ...
0001E910 2013                               move.l    (a3),d0
0001E912 B0B8 FFC0                          cmp.l    ($FFFFFFC0).w,d0
0001E916 6500                               blo.s    locret_1C6B6
0001E918 06B8 0000 1388 FFC0                add.l    #$1388,($FFFFFFC0).w
0001E920 4EF9 0000 B5E0                     jmp        ExtraLife
0001E926                            
0001E926                            locret_1C6B6:
0001E926 4E75                       		rts
0001E928                            ; End of function AddPoints
0001E928                            
0001E928                            ; ---------------------------------------------------------------------------
0001E928                            ; Subroutine to	update the HUD
0001E928                            ; ---------------------------------------------------------------------------
0001E928                            
0001E928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E928                            
0001E928                            
0001E928                            HudUpdate:
0001E928 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E92C 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E930 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E934 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E936 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E93A 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001E940 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E944 6100 0000                  		bsr.w	Hud_Score
0001E948                            
0001E948                            Hud_ChkRings:
0001E948 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E94C 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E94E 6A00                       		bpl.s	loc_1C6E4
0001E950 6100 0000                  		bsr.w	Hud_LoadZero
0001E954                            
0001E954                            loc_1C6E4:
0001E954 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E958 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E95E 7200                       		moveq	#0,d1
0001E960 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E964 6100 0000                  		bsr.w	Hud_Rings
0001E968                            
0001E968                            Hud_ChkTime:
0001E968 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001E96C 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001E96E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E972 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001E974 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001E978 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001E97E 6700                       		beq.s	TimeOver	; if yes, branch
0001E980 5221                       		addq.b	#1,-(a1)
0001E982 0C11 003C                  		cmpi.b	#60,(a1)
0001E986 6500                       		bcs.s	Hud_ChkLives
0001E988 12BC 0000                  		move.b	#0,(a1)
0001E98C 5221                       		addq.b	#1,-(a1)
0001E98E 0C11 003C                  		cmpi.b	#60,(a1)
0001E992 6500                       		bcs.s	loc_1C734
0001E994 12BC 0000                  		move.b	#0,(a1)
0001E998 5221                       		addq.b	#1,-(a1)
0001E99A 0C11 0009                  		cmpi.b	#9,(a1)
0001E99E 6500                       		bcs.s	loc_1C734
0001E9A0 12BC 0009                  		move.b	#9,(a1)
0001E9A4                            
0001E9A4                            loc_1C734:
0001E9A4 203C 5E40 0003             		move.l	#$5E400003,d0
0001E9AA 7200                       		moveq	#0,d1
0001E9AC 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001E9B0 6100 0000                  		bsr.w	Hud_Mins
0001E9B4 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001E9BA 7200                       		moveq	#0,d1
0001E9BC 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001E9C0 6100 0000                  		bsr.w	Hud_Secs
0001E9C4                            
0001E9C4                            Hud_ChkLives:
0001E9C4 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E9C8 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001E9CA 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001E9CE 6100 0000                  		bsr.w	Hud_Lives
0001E9D2                            
0001E9D2                            Hud_ChkBonus:
0001E9D2 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001E9D6 6700                       		beq.s	Hud_End		; if not, branch
0001E9D8 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E9DC 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001E9E6 7200                       		moveq	#0,d1
0001E9E8 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E9EC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E9F0 7200                       		moveq	#0,d1
0001E9F2 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E9F6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E9FA                            
0001E9FA                            Hud_End:
0001E9FA 4E75                       		rts	
0001E9FC                            ; ===========================================================================
0001E9FC                            
0001E9FC                            TimeOver:				; XREF: Hud_ChkTime
0001E9FC 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001EA00 41F8 D000                  		lea	($FFFFD000).w,a0
0001EA04 2448                       		movea.l	a0,a2
0001EA06 6100 E7A0                  		bsr.w	KillSonic
0001EA0A 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001EA10 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001EA16 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001EA1C 4E75                       		rts	
0001EA1E                            ; ===========================================================================
0001EA1E                            
0001EA1E                            HudDebug:				; XREF: HudUpdate
0001EA1E 6100 0000                  		bsr.w	HudDb_XY
0001EA22 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EA26 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001EA28 6A00                       		bpl.s	HudDb_Rings
0001EA2A 6100 0000                  		bsr.w	Hud_LoadZero
0001EA2E                            
0001EA2E                            HudDb_Rings:
0001EA2E 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EA32 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EA38 7200                       		moveq	#0,d1
0001EA3A 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EA3E 6100 0000                  		bsr.w	Hud_Rings
0001EA42                            
0001EA42                            HudDb_ObjCount:
0001EA42 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001EA48 7200                       		moveq	#0,d1
0001EA4A 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001EA4E 6100 0000                  		bsr.w	Hud_Secs
0001EA52 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EA56 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001EA58 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EA5C 6100 0000                  		bsr.w	Hud_Lives
0001EA60                            
0001EA60                            HudDb_ChkBonus:
0001EA60 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001EA64 6700                       		beq.s	HudDb_End	; if not, branch
0001EA66 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EA6A 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001EA74 7200                       		moveq	#0,d1
0001EA76 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EA7A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EA7E 7200                       		moveq	#0,d1
0001EA80 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EA84 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EA88                            
0001EA88                            HudDb_End:
0001EA88 4E75                       		rts	
0001EA8A                            ; End of function HudUpdate
0001EA8A                            
0001EA8A                            ; ---------------------------------------------------------------------------
0001EA8A                            ; Subroutine to	load "0" on the	HUD
0001EA8A                            ; ---------------------------------------------------------------------------
0001EA8A                            
0001EA8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA8A                            
0001EA8A                            
0001EA8A                            Hud_LoadZero:				; XREF: HudUpdate
0001EA8A 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001EA94 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001EA98 343C 0002                  		move.w	#2,d2
0001EA9C 6000                       		bra.s	loc_1C83E
0001EA9E                            ; End of function Hud_LoadZero
0001EA9E                            
0001EA9E                            ; ---------------------------------------------------------------------------
0001EA9E                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001EA9E                            ; ---------------------------------------------------------------------------
0001EA9E                            
0001EA9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA9E                            
0001EA9E                            
0001EA9E                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001EA9E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EAA4 6100 0000                  		bsr.w	Hud_Lives
0001EAA8 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001EAB2 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001EAB6 343C 000E                  		move.w	#$E,d2
0001EABA                            
0001EABA                            loc_1C83E:				; XREF: Hud_LoadZero
0001EABA 43FA 0000                  		lea	Art_Hud(pc),a1
0001EABE                            
0001EABE                            loc_1C842:
0001EABE 323C 000F                  		move.w	#$F,d1
0001EAC2 101A                       		move.b	(a2)+,d0
0001EAC4 6B00                       		bmi.s	loc_1C85E
0001EAC6 4880                       		ext.w	d0
0001EAC8 EB48                       		lsl.w	#5,d0
0001EACA 47F1 0000                  		lea	(a1,d0.w),a3
0001EACE                            
0001EACE                            loc_1C852:
0001EACE 2C9B                       		move.l	(a3)+,(a6)
0001EAD0 51C9 FFFC                  		dbf	d1,loc_1C852
0001EAD4                            
0001EAD4                            loc_1C858:
0001EAD4 51CA FFE8                  		dbf	d2,loc_1C842
0001EAD8                            
0001EAD8 4E75                       		rts	
0001EADA                            ; ===========================================================================
0001EADA                            
0001EADA                            loc_1C85E:
0001EADA 2CBC 0000 0000             		move.l	#0,(a6)
0001EAE0 51C9 FFF8                  		dbf	d1,loc_1C85E
0001EAE4                            
0001EAE4 60EE                       		bra.s	loc_1C858
0001EAE6                            ; End of function Hud_Base
0001EAE6                            
0001EAE6                            ; ===========================================================================
0001EAE6 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001EAF2 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001EAF6                            ; ---------------------------------------------------------------------------
0001EAF6                            ; Subroutine to	load debug mode	numbers	patterns
0001EAF6                            ; ---------------------------------------------------------------------------
0001EAF6                            
0001EAF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EAF6                            
0001EAF6                            
0001EAF6                            HudDb_XY:				; XREF: HudDebug
0001EAF6 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001EB00 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001EB04 4841                       		swap	d1
0001EB06 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001EB0A 6100                       		bsr.s	HudDb_XY2
0001EB0C 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001EB10 4841                       		swap	d1
0001EB12 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001EB16                            ; End of function HudDb_XY
0001EB16                            
0001EB16                            
0001EB16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB16                            
0001EB16                            
0001EB16                            HudDb_XY2:
0001EB16 7C07                       		moveq	#7,d6
0001EB18 43F9 0000 0550             		lea	(Art_Text).l,a1
0001EB1E                            
0001EB1E                            HudDb_XYLoop:
0001EB1E E959                       		rol.w	#4,d1
0001EB20 3401                       		move.w	d1,d2
0001EB22 0242 000F                  		andi.w	#$F,d2
0001EB26 0C42 000A                  		cmpi.w	#$A,d2
0001EB2A 6500                       		bcs.s	loc_1C8B2
0001EB2C 5E42                       		addq.w	#7,d2
0001EB2E                            
0001EB2E                            loc_1C8B2:
0001EB2E EB4A                       		lsl.w	#5,d2
0001EB30 47F1 2000                  		lea	(a1,d2.w),a3
0001EB34 2C9B                       		move.l	(a3)+,(a6)
0001EB36 2C9B                       		move.l	(a3)+,(a6)
0001EB38 2C9B                       		move.l	(a3)+,(a6)
0001EB3A 2C9B                       		move.l	(a3)+,(a6)
0001EB3C 2C9B                       		move.l	(a3)+,(a6)
0001EB3E 2C9B                       		move.l	(a3)+,(a6)
0001EB40 2C9B                       		move.l	(a3)+,(a6)
0001EB42 2C9B                       		move.l	(a3)+,(a6)
0001EB44 4841                       		swap	d1
0001EB46 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001EB4A                            
0001EB4A 4E75                       		rts	
0001EB4C                            ; End of function HudDb_XY2
0001EB4C                            
0001EB4C                            ; ---------------------------------------------------------------------------
0001EB4C                            ; Subroutine to	load rings numbers patterns
0001EB4C                            ; ---------------------------------------------------------------------------
0001EB4C                            
0001EB4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB4C                            
0001EB4C                            
0001EB4C                            Hud_Rings:				; XREF: HudUpdate
0001EB4C 45F9 0000 0000             		lea	(Hud_100).l,a2
0001EB52 7C02                       		moveq	#2,d6
0001EB54 6000                       		bra.s	Hud_LoadArt
0001EB56                            ; End of function Hud_Rings
0001EB56                            
0001EB56                            ; ---------------------------------------------------------------------------
0001EB56                            ; Subroutine to	load score numbers patterns
0001EB56                            ; ---------------------------------------------------------------------------
0001EB56                            
0001EB56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB56                            
0001EB56                            
0001EB56                            Hud_Score:				; XREF: HudUpdate
0001EB56 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001EB5C 7C05                       		moveq	#5,d6
0001EB5E                            
0001EB5E                            Hud_LoadArt:
0001EB5E 7800                       		moveq	#0,d4
0001EB60 43FA 0000                  		lea	Art_Hud(pc),a1
0001EB64                            
0001EB64                            Hud_ScoreLoop:
0001EB64 7400                       		moveq	#0,d2
0001EB66 261A                       		move.l	(a2)+,d3
0001EB68                            
0001EB68                            loc_1C8EC:
0001EB68 9283                       		sub.l	d3,d1
0001EB6A 6500                       		bcs.s	loc_1C8F4
0001EB6C 5242                       		addq.w	#1,d2
0001EB6E 60F8                       		bra.s	loc_1C8EC
0001EB70                            ; ===========================================================================
0001EB70                            
0001EB70                            loc_1C8F4:
0001EB70 D283                       		add.l	d3,d1
0001EB72 4A42                       		tst.w	d2
0001EB74 6700                       		beq.s	loc_1C8FE
0001EB76 383C 0001                  		move.w	#1,d4
0001EB7A                            
0001EB7A                            loc_1C8FE:
0001EB7A 4A44                       		tst.w	d4
0001EB7C 6700                       		beq.s	loc_1C92C
0001EB7E ED4A                       		lsl.w	#6,d2
0001EB80 2D40 0004                  		move.l	d0,4(a6)
0001EB84 47F1 2000                  		lea	(a1,d2.w),a3
0001EB88 2C9B                       		move.l	(a3)+,(a6)
0001EB8A 2C9B                       		move.l	(a3)+,(a6)
0001EB8C 2C9B                       		move.l	(a3)+,(a6)
0001EB8E 2C9B                       		move.l	(a3)+,(a6)
0001EB90 2C9B                       		move.l	(a3)+,(a6)
0001EB92 2C9B                       		move.l	(a3)+,(a6)
0001EB94 2C9B                       		move.l	(a3)+,(a6)
0001EB96 2C9B                       		move.l	(a3)+,(a6)
0001EB98 2C9B                       		move.l	(a3)+,(a6)
0001EB9A 2C9B                       		move.l	(a3)+,(a6)
0001EB9C 2C9B                       		move.l	(a3)+,(a6)
0001EB9E 2C9B                       		move.l	(a3)+,(a6)
0001EBA0 2C9B                       		move.l	(a3)+,(a6)
0001EBA2 2C9B                       		move.l	(a3)+,(a6)
0001EBA4 2C9B                       		move.l	(a3)+,(a6)
0001EBA6 2C9B                       		move.l	(a3)+,(a6)
0001EBA8                            
0001EBA8                            loc_1C92C:
0001EBA8 0680 0040 0000             		addi.l	#$400000,d0
0001EBAE 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001EBB2                            
0001EBB2 4E75                       		rts	
0001EBB4                            ; End of function Hud_Score
0001EBB4                            
0001EBB4                            ; ---------------------------------------------------------------------------
0001EBB4                            ; Subroutine to	load countdown numbers on the continue screen
0001EBB4                            ; ---------------------------------------------------------------------------
0001EBB4                            
0001EBB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBB4                            
0001EBB4                            
0001EBB4                            ContScrCounter:				; XREF: ContinueScreen
0001EBB4 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001EBBE 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EBC4 45F9 0000 0000             		lea	(Hud_10).l,a2
0001EBCA 7C01                       		moveq	#1,d6
0001EBCC 7800                       		moveq	#0,d4
0001EBCE 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001EBD2                            
0001EBD2                            ContScr_Loop:
0001EBD2 7400                       		moveq	#0,d2
0001EBD4 261A                       		move.l	(a2)+,d3
0001EBD6                            
0001EBD6                            loc_1C95A:
0001EBD6 9283                       		sub.l	d3,d1
0001EBD8 6500                       		bcs.s	loc_1C962
0001EBDA 5242                       		addq.w	#1,d2
0001EBDC 60F8                       		bra.s	loc_1C95A
0001EBDE                            ; ===========================================================================
0001EBDE                            
0001EBDE                            loc_1C962:
0001EBDE D283                       		add.l	d3,d1
0001EBE0 ED4A                       		lsl.w	#6,d2
0001EBE2 47F1 2000                  		lea	(a1,d2.w),a3
0001EBE6 2C9B                       		move.l	(a3)+,(a6)
0001EBE8 2C9B                       		move.l	(a3)+,(a6)
0001EBEA 2C9B                       		move.l	(a3)+,(a6)
0001EBEC 2C9B                       		move.l	(a3)+,(a6)
0001EBEE 2C9B                       		move.l	(a3)+,(a6)
0001EBF0 2C9B                       		move.l	(a3)+,(a6)
0001EBF2 2C9B                       		move.l	(a3)+,(a6)
0001EBF4 2C9B                       		move.l	(a3)+,(a6)
0001EBF6 2C9B                       		move.l	(a3)+,(a6)
0001EBF8 2C9B                       		move.l	(a3)+,(a6)
0001EBFA 2C9B                       		move.l	(a3)+,(a6)
0001EBFC 2C9B                       		move.l	(a3)+,(a6)
0001EBFE 2C9B                       		move.l	(a3)+,(a6)
0001EC00 2C9B                       		move.l	(a3)+,(a6)
0001EC02 2C9B                       		move.l	(a3)+,(a6)
0001EC04 2C9B                       		move.l	(a3)+,(a6)
0001EC06 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001EC0A                            
0001EC0A 4E75                       		rts	
0001EC0C                            ; End of function ContScrCounter
0001EC0C                            
0001EC0C                            ; ===========================================================================
0001EC0C                            ; ---------------------------------------------------------------------------
0001EC0C                            ; HUD counter sizes
0001EC0C                            ; ---------------------------------------------------------------------------
0001EC0C 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001EC10 0000 2710                  Hud_10000:	dc.l 10000
0001EC14 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001EC18 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001EC1C 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001EC20 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001EC24                            
0001EC24                            ; ---------------------------------------------------------------------------
0001EC24                            ; Subroutine to	load time numbers patterns
0001EC24                            ; ---------------------------------------------------------------------------
0001EC24                            
0001EC24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC24                            
0001EC24                            
0001EC24                            Hud_Mins:				; XREF: Hud_ChkTime
0001EC24 45F9 0001 EC20             		lea	(Hud_1).l,a2
0001EC2A 7C00                       		moveq	#0,d6
0001EC2C 6000                       		bra.s	loc_1C9BA
0001EC2E                            ; End of function Hud_Mins
0001EC2E                            
0001EC2E                            
0001EC2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC2E                            
0001EC2E                            
0001EC2E                            Hud_Secs:				; XREF: Hud_ChkTime
0001EC2E 45F9 0001 EC1C             		lea	(Hud_10).l,a2
0001EC34 7C01                       		moveq	#1,d6
0001EC36                            
0001EC36                            loc_1C9BA:
0001EC36 7800                       		moveq	#0,d4
0001EC38 43FA 0000                  		lea	Art_Hud(pc),a1
0001EC3C                            
0001EC3C                            Hud_TimeLoop:
0001EC3C 7400                       		moveq	#0,d2
0001EC3E 261A                       		move.l	(a2)+,d3
0001EC40                            
0001EC40                            loc_1C9C4:
0001EC40 9283                       		sub.l	d3,d1
0001EC42 6500                       		bcs.s	loc_1C9CC
0001EC44 5242                       		addq.w	#1,d2
0001EC46 60F8                       		bra.s	loc_1C9C4
0001EC48                            ; ===========================================================================
0001EC48                            
0001EC48                            loc_1C9CC:
0001EC48 D283                       		add.l	d3,d1
0001EC4A 4A42                       		tst.w	d2
0001EC4C 6700                       		beq.s	loc_1C9D6
0001EC4E 383C 0001                  		move.w	#1,d4
0001EC52                            
0001EC52                            loc_1C9D6:
0001EC52 ED4A                       		lsl.w	#6,d2
0001EC54 2D40 0004                  		move.l	d0,4(a6)
0001EC58 47F1 2000                  		lea	(a1,d2.w),a3
0001EC5C 2C9B                       		move.l	(a3)+,(a6)
0001EC5E 2C9B                       		move.l	(a3)+,(a6)
0001EC60 2C9B                       		move.l	(a3)+,(a6)
0001EC62 2C9B                       		move.l	(a3)+,(a6)
0001EC64 2C9B                       		move.l	(a3)+,(a6)
0001EC66 2C9B                       		move.l	(a3)+,(a6)
0001EC68 2C9B                       		move.l	(a3)+,(a6)
0001EC6A 2C9B                       		move.l	(a3)+,(a6)
0001EC6C 2C9B                       		move.l	(a3)+,(a6)
0001EC6E 2C9B                       		move.l	(a3)+,(a6)
0001EC70 2C9B                       		move.l	(a3)+,(a6)
0001EC72 2C9B                       		move.l	(a3)+,(a6)
0001EC74 2C9B                       		move.l	(a3)+,(a6)
0001EC76 2C9B                       		move.l	(a3)+,(a6)
0001EC78 2C9B                       		move.l	(a3)+,(a6)
0001EC7A 2C9B                       		move.l	(a3)+,(a6)
0001EC7C 0680 0040 0000             		addi.l	#$400000,d0
0001EC82 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001EC86                            
0001EC86 4E75                       		rts	
0001EC88                            ; End of function Hud_Secs
0001EC88                            
0001EC88                            ; ---------------------------------------------------------------------------
0001EC88                            ; Subroutine to	load time/ring bonus numbers patterns
0001EC88                            ; ---------------------------------------------------------------------------
0001EC88                            
0001EC88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC88                            
0001EC88                            
0001EC88                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001EC88 45F9 0001 EC14             		lea	(Hud_1000).l,a2
0001EC8E 7C03                       		moveq	#3,d6
0001EC90 7800                       		moveq	#0,d4
0001EC92 43FA 0000                  		lea	Art_Hud(pc),a1
0001EC96                            
0001EC96                            Hud_BonusLoop:
0001EC96 7400                       		moveq	#0,d2
0001EC98 261A                       		move.l	(a2)+,d3
0001EC9A                            
0001EC9A                            loc_1CA1E:
0001EC9A 9283                       		sub.l	d3,d1
0001EC9C 6500                       		bcs.s	loc_1CA26
0001EC9E 5242                       		addq.w	#1,d2
0001ECA0 60F8                       		bra.s	loc_1CA1E
0001ECA2                            ; ===========================================================================
0001ECA2                            
0001ECA2                            loc_1CA26:
0001ECA2 D283                       		add.l	d3,d1
0001ECA4 4A42                       		tst.w	d2
0001ECA6 6700                       		beq.s	loc_1CA30
0001ECA8 383C 0001                  		move.w	#1,d4
0001ECAC                            
0001ECAC                            loc_1CA30:
0001ECAC 4A44                       		tst.w	d4
0001ECAE 6700                       		beq.s	Hud_ClrBonus
0001ECB0 ED4A                       		lsl.w	#6,d2
0001ECB2 47F1 2000                  		lea	(a1,d2.w),a3
0001ECB6 2C9B                       		move.l	(a3)+,(a6)
0001ECB8 2C9B                       		move.l	(a3)+,(a6)
0001ECBA 2C9B                       		move.l	(a3)+,(a6)
0001ECBC 2C9B                       		move.l	(a3)+,(a6)
0001ECBE 2C9B                       		move.l	(a3)+,(a6)
0001ECC0 2C9B                       		move.l	(a3)+,(a6)
0001ECC2 2C9B                       		move.l	(a3)+,(a6)
0001ECC4 2C9B                       		move.l	(a3)+,(a6)
0001ECC6 2C9B                       		move.l	(a3)+,(a6)
0001ECC8 2C9B                       		move.l	(a3)+,(a6)
0001ECCA 2C9B                       		move.l	(a3)+,(a6)
0001ECCC 2C9B                       		move.l	(a3)+,(a6)
0001ECCE 2C9B                       		move.l	(a3)+,(a6)
0001ECD0 2C9B                       		move.l	(a3)+,(a6)
0001ECD2 2C9B                       		move.l	(a3)+,(a6)
0001ECD4 2C9B                       		move.l	(a3)+,(a6)
0001ECD6                            
0001ECD6                            loc_1CA5A:
0001ECD6 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001ECDA                            
0001ECDA 4E75                       		rts	
0001ECDC                            ; ===========================================================================
0001ECDC                            
0001ECDC                            Hud_ClrBonus:
0001ECDC 7A0F                       		moveq	#$F,d5
0001ECDE                            
0001ECDE                            Hud_ClrBonusLoop:
0001ECDE 2CBC 0000 0000             		move.l	#0,(a6)
0001ECE4 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001ECE8                            
0001ECE8 60EC                       		bra.s	loc_1CA5A
0001ECEA                            ; End of function Hud_TimeRingBonus
0001ECEA                            
0001ECEA                            ; ---------------------------------------------------------------------------
0001ECEA                            ; Subroutine to	load uncompressed lives	counter	patterns
0001ECEA                            ; ---------------------------------------------------------------------------
0001ECEA                            
0001ECEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECEA                            
0001ECEA                            
0001ECEA                            Hud_Lives:				; XREF: Hud_ChkLives
0001ECEA 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001ECF0 7200                       		moveq	#0,d1
0001ECF2 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001ECF6 45F9 0001 EC1C             		lea	(Hud_10).l,a2
0001ECFC 7C01                       		moveq	#1,d6
0001ECFE 7800                       		moveq	#0,d4
0001ED00 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001ED04                            
0001ED04                            Hud_LivesLoop:
0001ED04 2D40 0004                  		move.l	d0,4(a6)
0001ED08 7400                       		moveq	#0,d2
0001ED0A 261A                       		move.l	(a2)+,d3
0001ED0C                            
0001ED0C                            loc_1CA90:
0001ED0C 9283                       		sub.l	d3,d1
0001ED0E 6500                       		bcs.s	loc_1CA98
0001ED10 5242                       		addq.w	#1,d2
0001ED12 60F8                       		bra.s	loc_1CA90
0001ED14                            ; ===========================================================================
0001ED14                            
0001ED14                            loc_1CA98:
0001ED14 D283                       		add.l	d3,d1
0001ED16 4A42                       		tst.w	d2
0001ED18 6700                       		beq.s	loc_1CAA2
0001ED1A 383C 0001                  		move.w	#1,d4
0001ED1E                            
0001ED1E                            loc_1CAA2:
0001ED1E 4A44                       		tst.w	d4
0001ED20 6700                       		beq.s	Hud_ClrLives
0001ED22                            
0001ED22                            loc_1CAA6:
0001ED22 EB4A                       		lsl.w	#5,d2
0001ED24 47F1 2000                  		lea	(a1,d2.w),a3
0001ED28 2C9B                       		move.l	(a3)+,(a6)
0001ED2A 2C9B                       		move.l	(a3)+,(a6)
0001ED2C 2C9B                       		move.l	(a3)+,(a6)
0001ED2E 2C9B                       		move.l	(a3)+,(a6)
0001ED30 2C9B                       		move.l	(a3)+,(a6)
0001ED32 2C9B                       		move.l	(a3)+,(a6)
0001ED34 2C9B                       		move.l	(a3)+,(a6)
0001ED36 2C9B                       		move.l	(a3)+,(a6)
0001ED38                            
0001ED38                            loc_1CABC:
0001ED38 0680 0040 0000             		addi.l	#$400000,d0
0001ED3E 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001ED42                            
0001ED42 4E75                       		rts	
0001ED44                            ; ===========================================================================
0001ED44                            
0001ED44                            Hud_ClrLives:
0001ED44 4A46                       		tst.w	d6
0001ED46 67DA                       		beq.s	loc_1CAA6
0001ED48 7A07                       		moveq	#7,d5
0001ED4A                            
0001ED4A                            Hud_ClrLivesLoop:
0001ED4A 2CBC 0000 0000             		move.l	#0,(a6)
0001ED50 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001ED54 60E2                       		bra.s	loc_1CABC
0001ED56                            ; End of function Hud_Lives
0001ED56                            
0001ED56                            ; ===========================================================================
0001ED56                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001F056                            		even
0001F056                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001F196                            		even
0001F196                            ; ===========================================================================
0001F196                            ; ---------------------------------------------------------------------------
0001F196                            ; When debug mode is currently in use
0001F196                            ; ---------------------------------------------------------------------------
0001F196                            
0001F196                            DebugMode:				; XREF: Obj01; Obj09
0001F196 7000                       		moveq	#0,d0
0001F198 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001F19C 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001F1A0 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001F1A4                            ; ===========================================================================
0001F1A4 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001F1A6 0000                       		dc.w Debug_Skip-Debug_Index
0001F1A8                            ; ===========================================================================
0001F1A8                            
0001F1A8                            Debug_Main:				; XREF: Debug_Index
0001F1A8 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001F1AC 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001F1B2 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001F1B8 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001F1BE 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001F1C4 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001F1CA 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001F1D0 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001F1D6 117C 0000 001A             		move.b	#0,$1A(a0)
0001F1DC 117C 0000 001C             		move.b	#0,$1C(a0)
0001F1E2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001F1E8 6600                       		bne.s	Debug_Zone	; if not, branch
0001F1EA 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001F1F0 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001F1F6 7006                       		moveq	#6,d0		; use 6th debug	item list
0001F1F8 6000                       		bra.s	Debug_UseList
0001F1FA                            ; ===========================================================================
0001F1FA                            
0001F1FA                            Debug_Zone:
0001F1FA 7000                       		moveq	#0,d0
0001F1FC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F200                            
0001F200                            Debug_UseList:
0001F200 45F9 0000 0000             		lea	(DebugList).l,a2
0001F206 D040                       		add.w	d0,d0
0001F208 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F20C 3C1A                       		move.w	(a2)+,d6
0001F20E BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F212 6200                       		bhi.s	loc_1CF9E
0001F214 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001F21A                            
0001F21A                            loc_1CF9E:
0001F21A 6100 0000                  		bsr.w	Debug_ShowItem
0001F21E 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F224 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001F22A                            
0001F22A                            Debug_Skip:				; XREF: Debug_Index
0001F22A 7006                       		moveq	#6,d0
0001F22C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001F232 6700                       		beq.s	loc_1CFBE
0001F234 7000                       		moveq	#0,d0
0001F236 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F23A                            
0001F23A                            loc_1CFBE:
0001F23A 45F9 0000 0000             		lea	(DebugList).l,a2
0001F240 D040                       		add.w	d0,d0
0001F242 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F246 3C1A                       		move.w	(a2)+,d6
0001F248 6100 0000                  		bsr.w	Debug_Control
0001F24C 4EF9 0000 E902             		jmp	DisplaySprite
0001F252                            
0001F252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F252                            
0001F252                            
0001F252                            Debug_Control:
0001F252 7800                       		moveq	#0,d4
0001F254 323C 0001                  		move.w	#1,d1
0001F258 1838 F605                  		move.b	($FFFFF605).w,d4
0001F25C 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001F260 6600                       		bne.s	loc_1D018	; if yes, branch
0001F262 1038 F604                  		move.b	($FFFFF604).w,d0
0001F266 0240 000F                  		andi.w	#$F,d0
0001F26A 6600                       		bne.s	loc_1D000
0001F26C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F272 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001F278 6000 0000                  		bra.w	Debug_BackItem
0001F27C                            ; ===========================================================================
0001F27C                            
0001F27C                            loc_1D000:
0001F27C 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001F280 6600                       		bne.s	loc_1D01C
0001F282 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001F288 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001F28C 6600                       		bne.s	loc_1D018
0001F28E 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001F294                            
0001F294                            loc_1D018:
0001F294 1838 F604                  		move.b	($FFFFF604).w,d4
0001F298                            
0001F298                            loc_1D01C:
0001F298 7200                       		moveq	#0,d1
0001F29A 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001F29E 5241                       		addq.w	#1,d1
0001F2A0 4841                       		swap	d1
0001F2A2 E881                       		asr.l	#4,d1
0001F2A4 2428 000C                  		move.l	$C(a0),d2
0001F2A8 2628 0008                  		move.l	8(a0),d3
0001F2AC 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001F2B0 6700                       		beq.s	loc_1D03C	; if not, branch
0001F2B2 9481                       		sub.l	d1,d2
0001F2B4 6400                       		bcc.s	loc_1D03C
0001F2B6 7400                       		moveq	#0,d2
0001F2B8                            
0001F2B8                            loc_1D03C:
0001F2B8 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001F2BC 6700                       		beq.s	loc_1D052	; if not, branch
0001F2BE D481                       		add.l	d1,d2
0001F2C0 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001F2C6 6500                       		bcs.s	loc_1D052
0001F2C8 243C 07FF 0000             		move.l	#$7FF0000,d2
0001F2CE                            
0001F2CE                            loc_1D052:
0001F2CE 0804 0002                  		btst	#2,d4
0001F2D2 6700                       		beq.s	loc_1D05E
0001F2D4 9681                       		sub.l	d1,d3
0001F2D6 6400                       		bcc.s	loc_1D05E
0001F2D8 7600                       		moveq	#0,d3
0001F2DA                            
0001F2DA                            loc_1D05E:
0001F2DA 0804 0003                  		btst	#3,d4
0001F2DE 6700                       		beq.s	loc_1D066
0001F2E0 D681                       		add.l	d1,d3
0001F2E2                            
0001F2E2                            loc_1D066:
0001F2E2 2142 000C                  		move.l	d2,$C(a0)
0001F2E6 2143 0008                  		move.l	d3,8(a0)
0001F2EA                            
0001F2EA                            Debug_BackItem:
0001F2EA 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001F2F0 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F2F2 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F2F8 6700                       		beq.s	Debug_NextItem	; if not, branch
0001F2FA 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001F2FE 6400                       		bcc.s	Debug_NoLoop
0001F300 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001F304 6000                       		bra.s	Debug_NoLoop
0001F306                            ; ===========================================================================
0001F306                            
0001F306                            Debug_NextItem:
0001F306 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001F30C 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F30E 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001F312 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F316 6200                       		bhi.s	Debug_NoLoop
0001F318 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001F31E                            
0001F31E                            Debug_NoLoop:
0001F31E 6000 0000                  		bra.w	Debug_ShowItem
0001F322                            ; ===========================================================================
0001F322                            
0001F322                            Debug_MakeItem:
0001F322 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F328 6700                       		beq.s	Debug_Exit	; if not, branch
0001F32A 4EB9 0000 F058             		jsr	SingleObjLoad
0001F330 6600                       		bne.s	Debug_Exit
0001F332 3368 0008 0008             		move.w	8(a0),8(a1)
0001F338 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F33E 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001F342 1368 0001 0001             		move.b	1(a0),1(a1)
0001F348 1368 0001 0022             		move.b	1(a0),$22(a1)
0001F34E 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001F354 7000                       		moveq	#0,d0
0001F356 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F35A E748                       		lsl.w	#3,d0
0001F35C 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001F362 4E75                       		rts	
0001F364                            ; ===========================================================================
0001F364                            
0001F364                            Debug_Exit:
0001F364 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F36A 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001F36C 7000                       		moveq	#0,d0
0001F36E 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001F372 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F37A 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F380 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001F384 3140 000A                  		move.w	d0,$A(a0)
0001F388 3140 000E                  		move.w	d0,$E(a0)
0001F38C 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001F392 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001F398 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001F39E 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001F3A0 4278 F780                  		clr.w	($FFFFF780).w
0001F3A4 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001F3AA 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F3B2 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F3B8 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001F3BE 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001F3C4 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F3CA                            
0001F3CA                            Debug_DoNothing:
0001F3CA 4E75                       		rts	
0001F3CC                            ; End of function Debug_Control
0001F3CC                            
0001F3CC                            
0001F3CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F3CC                            
0001F3CC                            
0001F3CC                            Debug_ShowItem:				; XREF: Debug_Main
0001F3CC 7000                       		moveq	#0,d0
0001F3CE 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F3D2 E748                       		lsl.w	#3,d0
0001F3D4 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001F3DA 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001F3E0 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001F3E6 4E75                       		rts	
0001F3E8                            ; End of function Debug_ShowItem
0001F3E8                            
0001F3E8                            ; ===========================================================================
0001F3E8                            ; ---------------------------------------------------------------------------
0001F3E8                            ; Debug	list pointers
0001F3E8                            ; ---------------------------------------------------------------------------
0001F3E8                            DebugList:
0001F3E8                            	include "_inc\Debug list pointers.asm"
0001F3E8                            ; ---------------------------------------------------------------------------
0001F3E8                            ; Debug	list pointers
0001F3E8                            ; ---------------------------------------------------------------------------
0001F3E8 0000                       	dc.w Debug_GHZ-DebugList
0001F3EA 0000                       	dc.w Debug_LZ-DebugList
0001F3EC 0000                       	dc.w Debug_MZ-DebugList
0001F3EE 0000                       	dc.w Debug_SLZ-DebugList
0001F3F0 0000                       	dc.w Debug_SYZ-DebugList
0001F3F2 0000                       	dc.w Debug_SBZ-DebugList
0001F3F4 0000                       	dc.w Debug_Ending-DebugList
0001F3F4 0000                       	dc.w Debug_Ending-DebugList
0001F3F6                            
0001F3F6                            ; ---------------------------------------------------------------------------
0001F3F6                            ; Debug	list - Green Hill
0001F3F6                            ; ---------------------------------------------------------------------------
0001F3F6                            Debug_GHZ:
0001F3F6                            	include "_inc\Debug list - GHZ.asm"
0001F3F6                            ; ---------------------------------------------------------------------------
0001F3F6                            ; Debug	list - Green Hill
0001F3F6                            ; ---------------------------------------------------------------------------
0001F3F6 0010                       	dc.w $10			; number of items in list
0001F3F8 2500 B20C                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001F3FC 0000 26BA                  	dc.w 0, ringart+$2000		; subtype, frame, VRAM setting (2 bytes)
0001F400 2600 B7F2                  	dc.l Map_obj26+$26000000
0001F404 0000 0680                  	dc.b 0,	0, 6, $80
0001F408 1F00 AA6C                  	dc.l Map_obj1F+$1F000000
0001F40C 0000 0400                  	dc.b 0,	0, 4, 0
0001F410 2200 AD4C                  	dc.l Map_obj22+$22000000
0001F414 0000 0444                  	dc.b 0,	0, 4, $44
0001F418 2B00 BE14                  	dc.l Map_obj2B+$2B000000
0001F41C 0000 047B                  	dc.b 0,	0, 4, $7B
0001F420 3600 E2DA                  	dc.l Map_obj36+$36000000
0001F424 0000 051B                  	dc.b 0,	0, 5, $1B
0001F428 1800 9270                  	dc.l Map_obj18+$18000000
0001F42C 0000 4000                  	dc.b 0,	0, $40,	0
0001F430 3B00 E420                  	dc.l Map_obj3B+$3B000000
0001F434 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F438 4001 103A                  	dc.l Map_obj40+$40000000
0001F43C 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F440 4100 F552                  	dc.l Map_obj41+$41000000
0001F444 0000 0523                  	dc.b 0,	0, 5, $23
0001F448 4200 F778                  	dc.l Map_obj42+$42000000
0001F44C 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F450 4400 FA90                  	dc.l Map_obj44+$44000000
0001F454 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F458 1900 92DE                  	dc.l Map_obj48+$19000000
0001F45C 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F460 7901 903A                  	dc.l Map_obj79+$79000000
0001F464 0100 0571                  	dc.w $100, lamppostart
0001F468 4B00 B24C                  	dc.l Map_obj4B+$4B000000
0001F46C 0000 222D                  	dc.w 0, ssringart+$2000
0001F470 7D01 9198                  	dc.l Map_obj7D+$7D000000
0001F474 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F478                            	even
0001F478                            	even
0001F478                            
0001F478                            ; ---------------------------------------------------------------------------
0001F478                            ; Debug	list - Labyrinth
0001F478                            ; ---------------------------------------------------------------------------
0001F478                            Debug_LZ:
0001F478                            	include "_inc\Debug list - LZ.asm"
0001F478                            ; ---------------------------------------------------------------------------
0001F478                            ; Debug	list - Labyrinth
0001F478                            ; ---------------------------------------------------------------------------
0001F478 0019                       	dc.w $19
0001F47A 2500 B20C                  	dc.l Map_obj25+$25000000
0001F47E 0000 26BA                  	dc.w 0, ringart+$2000
0001F482 2600 B7F2                  	dc.l Map_obj26+$26000000
0001F486 0000 0680                  	dc.b 0,	0, 6, $80
0001F48A 4100 F552                  	dc.l Map_obj41+$41000000
0001F48E 0000 0523                  	dc.b 0,	0, 5, $23
0001F492 2C00 BEBA                  	dc.l Map_obj2C+$2C000000
0001F496 0800 2486                  	dc.b 8,	0, $24,	$86
0001F49A 2D00 C0CE                  	dc.l Map_obj2D+$2D000000
0001F49E 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F4A2 1601 38A0                  	dc.l Map_obj16+$16000000
0001F4A6 0000 03CC                  	dc.b 0,	0, 3, $CC
0001F4AA 1601 38A0                  	dc.l Map_obj16+$16000000
0001F4AE 0203 03CC                  	dc.b 2,	3, 3, $CC
0001F4B2 3300 D5A8                  	dc.l Map_obj33+$33000000
0001F4B6 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F4BA 3200 D16C                  	dc.l Map_obj32+$32000000
0001F4BE 0000 0513                  	dc.b 0,	0, 5, $13
0001F4C2 3600 E2DA                  	dc.l Map_obj36+$36000000
0001F4C6 0000 051B                  	dc.b 0,	0, 5, $1B
0001F4CA 5201 196E                  	dc.l Map_obj52a+$52000000
0001F4CE 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001F4D2 6101 3AD6                  	dc.l Map_obj61+$61000000
0001F4D6 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001F4DA 6101 3AD6                  	dc.l Map_obj61+$61000000
0001F4DE 1301 43E6                  	dc.b $13, 1, $43, $E6
0001F4E2 6101 3AD6                  	dc.l Map_obj61+$61000000
0001F4E6 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001F4EA 6201 3C2A                  	dc.l Map_obj62+$62000000
0001F4EE 0000 443E                  	dc.b 0,	0, $44,	$3E
0001F4F2 6101 3AD6                  	dc.l Map_obj61+$61000000
0001F4F6 2702 43E6                  	dc.b $27, 2, $43, $E6
0001F4FA 6101 3AD6                  	dc.l Map_obj61+$61000000
0001F4FE 3003 43E6                  	dc.b $30, 3, $43, $E6
0001F502 6301 3F9A                  	dc.l Map_obj63+$63000000
0001F506 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001F50A 6001 37EA                  	dc.l Map_obj60+$60000000
0001F50E 0000 0467                  	dc.b 0,	0, 4, $67
0001F512 6401 4352                  	dc.l Map_obj64+$64000000
0001F516 8413 8348                  	dc.b $84, $13, $83, $48
0001F51A 6501 44DA                  	dc.l Map_obj65+$65000000
0001F51E 0202 C259                  	dc.b 2,	2, $C2,	$59
0001F522 6501 44DA                  	dc.l Map_obj65+$65000000
0001F526 0909 C259                  	dc.b 9,	9, $C2,	$59
0001F52A 0B01 2C14                  	dc.l Map_obj0B+$B000000
0001F52E 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F532 0C01 2CE4                  	dc.l Map_obj0C+$C000000
0001F536 0200 4328                  	dc.b 2,	0, $43,	$28
0001F53A 7901 903A                  	dc.l Map_obj79+$79000000
0001F53E 0100 0571                  	dc.w $100, lamppostart
0001F542                            	even
0001F542                            	even
0001F542                            
0001F542                            ; ---------------------------------------------------------------------------
0001F542                            ; Debug	list - Marble
0001F542                            ; ---------------------------------------------------------------------------
0001F542                            Debug_MZ:
0001F542                            	include "_inc\Debug list - MZ.asm"
0001F542                            ; ---------------------------------------------------------------------------
0001F542                            ; Debug	list - Marble
0001F542                            ; ---------------------------------------------------------------------------
0001F542 0012                       	dc.w $12
0001F544 2500 B20C                  	dc.l Map_obj25+$25000000
0001F548 0000 26BA                  	dc.w 0, ringart+$2000
0001F54C 2600 B7F2                  	dc.l Map_obj26+$26000000
0001F550 0000 0680                  	dc.b 0,	0, 6, $80
0001F554 2200 AD4C                  	dc.l Map_obj22+$22000000
0001F558 0000 0444                  	dc.b 0,	0, 4, $44
0001F55C 3600 E2DA                  	dc.l Map_obj36+$36000000
0001F560 0000 051B                  	dc.b 0,	0, 5, $1B
0001F564 4100 F552                  	dc.l Map_obj41+$41000000
0001F568 0000 0523                  	dc.b 0,	0, 5, $23
0001F56C 1300 C5FC                  	dc.l Map_obj14+$13000000
0001F570 0000 0345                  	dc.b 0,	0, 3, $45
0001F574 4601 0170                  	dc.l Map_obj46+$46000000
0001F578 0000 4000                  	dc.b 0,	0, $40,	0
0001F57C 4C01 0AEA                  	dc.l Map_obj4C+$4C000000
0001F580 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F584 4E01 0DCE                  	dc.l Map_obj4E+$4E000000
0001F588 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F58C 3300 D5A8                  	dc.l Map_obj33+$33000000
0001F590 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F594 5001 11C8                  	dc.l Map_obj50+$50000000
0001F598 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F59C 5101 1694                  	dc.l Map_obj51+$51000000
0001F5A0 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F5A4 5201 1918                  	dc.l Map_obj52+$52000000
0001F5A8 0000 02B8                  	dc.b 0,	0, 2, $B8
0001F5AC 5300 9876                  	dc.l Map_obj53+$53000000
0001F5B0 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001F5B4 5401 0AB0                  	dc.l Map_obj54+$54000000
0001F5B8 0000 8680                  	dc.b 0,	0, $86,	$80
0001F5BC 5501 1B0C                  	dc.l Map_obj55+$55000000
0001F5C0 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F5C4 7801 8CCE                  	dc.l Map_obj78+$78000000
0001F5C8 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F5CC 7901 903A                  	dc.l Map_obj79+$79000000
0001F5D0 0100 0571                  	dc.w $100, lamppostart
0001F5D4                            	even
0001F5D4                            	even
0001F5D4                            
0001F5D4                            ; ---------------------------------------------------------------------------
0001F5D4                            ; Debug	list - Star Light
0001F5D4                            ; ---------------------------------------------------------------------------
0001F5D4                            Debug_SLZ:
0001F5D4                            	include "_inc\Debug list - SLZ.asm"
0001F5D4                            ; ---------------------------------------------------------------------------
0001F5D4                            ; Debug	list - Star Light
0001F5D4                            ; ---------------------------------------------------------------------------
0001F5D4 000F                       	dc.w $F
0001F5D6 2500 B20C                  	dc.l Map_obj25+$25000000
0001F5DA 0000 26BA                  	dc.w 0, ringart+$2000
0001F5DE 2600 B7F2                  	dc.l Map_obj26+$26000000
0001F5E2 0000 0680                  	dc.b 0,	0, 6, $80
0001F5E6 5901 2620                  	dc.l Map_obj59+$59000000
0001F5EA 0000 4000                  	dc.b 0,	0, $40,	0
0001F5EE 5300 9876                  	dc.l Map_obj53+$53000000
0001F5F2 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F5F6 1800 92CE                  	dc.l Map_obj18b+$18000000
0001F5FA 0000 4000                  	dc.b 0,	0, $40,	0
0001F5FE 5A01 2768                  	dc.l Map_obj5A+$5A000000
0001F602 0000 4000                  	dc.b 0,	0, $40,	0
0001F606 5B01 292E                  	dc.l Map_obj5B+$5B000000
0001F60A 0000 4000                  	dc.b 0,	0, $40,	0
0001F60E 5D01 2F1C                  	dc.l Map_obj5D+$5D000000
0001F612 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F616 5E01 32BC                  	dc.l Map_obj5E+$5E000000
0001F61A 0000 0374                  	dc.b 0,	0, 3, $74
0001F61E 4100 F552                  	dc.l Map_obj41+$41000000
0001F622 0000 0523                  	dc.b 0,	0, 5, $23
0001F626 1300 C5FC                  	dc.l Map_obj14+$13000000
0001F62A 0000 0480                  	dc.b 0,	0, 4, $80
0001F62E 1C00 99AE                  	dc.l Map_obj1C+$1C000000
0001F632 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F636 5F01 353A                  	dc.l Map_obj5F+$5F000000
0001F63A 0000 0400                  	dc.b 0,	0, 4, 0
0001F63E 6001 37EA                  	dc.l Map_obj60+$60000000
0001F642 0000 2429                  	dc.b 0,	0, $24,	$29
0001F646 7901 903A                  	dc.l Map_obj79+$79000000
0001F64A 0100 0571                  	dc.w $100, lamppostart
0001F64E                            	even
0001F64E                            	even
0001F64E                            
0001F64E                            ; ---------------------------------------------------------------------------
0001F64E                            ; Debug	list - Spring Yard
0001F64E                            ; ---------------------------------------------------------------------------
0001F64E                            Debug_SYZ:
0001F64E                            	include "_inc\Debug list - SYZ.asm"
0001F64E                            ; ---------------------------------------------------------------------------
0001F64E                            ; Debug	list - Spring Yard
0001F64E                            ; ---------------------------------------------------------------------------
0001F64E 000F                       	dc.w $F
0001F650 2500 B20C                  	dc.l Map_obj25+$25000000
0001F654 0000 26BA                  	dc.w 0, ringart+$2000
0001F658 2600 B7F2                  	dc.l Map_obj26+$26000000
0001F65C 0000 0680                  	dc.b 0,	0, 6, $80
0001F660 3600 E2DA                  	dc.l Map_obj36+$36000000
0001F664 0000 051B                  	dc.b 0,	0, 5, $1B
0001F668 4100 F552                  	dc.l Map_obj41+$41000000
0001F66C 0000 0523                  	dc.b 0,	0, 5, $23
0001F670 4300 F9D2                  	dc.l Map_obj43+$43000000
0001F674 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F678 1201 01FC                  	dc.l Map_obj12+$12000000
0001F67C 0000 0000                  	dc.b 0,	0, 0, 0
0001F680 4701 0376                  	dc.l Map_obj47+$47000000
0001F684 0000 0380                  	dc.b 0,	0, 3, $80
0001F688 1F00 AA6C                  	dc.l Map_obj1F+$1F000000
0001F68C 0000 0400                  	dc.b 0,	0, 4, 0
0001F690 2200 AD4C                  	dc.l Map_obj22+$22000000
0001F694 0000 0444                  	dc.b 0,	0, 4, $44
0001F698 5001 11C8                  	dc.l Map_obj50+$50000000
0001F69C 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F6A0 1800 92BC                  	dc.l Map_obj18a+$18000000
0001F6A4 0000 4000                  	dc.b 0,	0, $40,	0
0001F6A8 5601 1FBC                  	dc.l Map_obj56+$56000000
0001F6AC 0000 4000                  	dc.b 0,	0, $40,	0
0001F6B0 3200 D16C                  	dc.l Map_obj32+$32000000
0001F6B4 0000 0513                  	dc.b 0,	0, 5, $13
0001F6B8 7801 8CCE                  	dc.l Map_obj78+$78000000
0001F6BC 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F6C0 7901 903A                  	dc.l Map_obj79+$79000000
0001F6C4 0100 0571                  	dc.w $100, lamppostart
0001F6C8                            	even
0001F6C8                            	even
0001F6C8                            
0001F6C8                            ; ---------------------------------------------------------------------------
0001F6C8                            ; Debug	list - Scrap Brain
0001F6C8                            ; ---------------------------------------------------------------------------
0001F6C8                            Debug_SBZ:
0001F6C8                            	include "_inc\Debug list - SBZ.asm"
0001F6C8                            ; ---------------------------------------------------------------------------
0001F6C8                            ; Debug	list - Scrap Brain
0001F6C8                            ; ---------------------------------------------------------------------------
0001F6C8 001D                       	dc.w $1D
0001F6CA 2500 B20C                  	dc.l Map_obj25+$25000000
0001F6CE 0000 26BA                  	dc.w 0, ringart+$2000
0001F6D2 2600 B7F2                  	dc.l Map_obj26+$26000000
0001F6D6 0000 0680                  	dc.b 0,	0, 6, $80
0001F6DA 5F01 353A                  	dc.l Map_obj5F+$5F000000
0001F6DE 0000 0400                  	dc.b 0,	0, 4, 0
0001F6E2 6001 37EA                  	dc.l Map_obj60+$60000000
0001F6E6 0000 0429                  	dc.b 0,	0, 4, $29
0001F6EA 7801 8CCE                  	dc.l Map_obj78+$78000000
0001F6EE 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001F6F2 1501 236E                  	dc.l Map_obj15b+$15000000
0001F6F6 0702 4391                  	dc.b 7,	2, $43,	$91
0001F6FA 6701 7614                  	dc.l Map_obj67+$67000000
0001F6FE E000 C344                  	dc.b $E0, 0, $C3, $44
0001F702 5201 1918                  	dc.l Map_obj52+$52000000
0001F706 2802 22C0                  	dc.b $28, 2, $22, $C0
0001F70A 3200 D16C                  	dc.l Map_obj32+$32000000
0001F70E 0000 0513                  	dc.b 0,	0, 5, $13
0001F712 6901 7870                  	dc.l Map_obj69+$69000000
0001F716 0300 4492                  	dc.b 3,	0, $44,	$92
0001F71A 6901 78CA                  	dc.l Map_obj69a+$69000000
0001F71E 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001F722 6A01 7B2A                  	dc.l Map_obj6A+$6A000000
0001F726 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001F72A 5300 9876                  	dc.l Map_obj53+$53000000
0001F72E 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001F732 5201 1918                  	dc.l Map_obj52+$52000000
0001F736 3903 4460                  	dc.b $39, 3, $44, $60
0001F73A 6B01 7ED0                  	dc.l Map_obj6B+$6B000000
0001F73E 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001F742 2A00 9D16                  	dc.l Map_obj2A+$2A000000
0001F746 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001F74A 6B01 7ED0                  	dc.l Map_obj6B+$6B000000
0001F74E 1301 22C0                  	dc.b $13, 1, $22, $C0
0001F752 6A01 7B2A                  	dc.l Map_obj6A+$6A000000
0001F756 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001F75A 6B01 7ED0                  	dc.l Map_obj6B+$6B000000
0001F75E 2401 22C0                  	dc.b $24, 1, $22, $C0
0001F762 6A01 7B2A                  	dc.l Map_obj6A+$6A000000
0001F766 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001F76A 6B01 7ED0                  	dc.l Map_obj6B+$6B000000
0001F76E 3401 22C0                  	dc.b $34, 1, $22, $C0
0001F772 6C01 8092                  	dc.l Map_obj6C+$6C000000
0001F776 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001F77A 6D00 FE50                  	dc.l Map_obj6D+$6D000000
0001F77E 6400 83D9                  	dc.b $64, 0, $83, $D9
0001F782 6D00 FE50                  	dc.l Map_obj6D+$6D000000
0001F786 640B 83D9                  	dc.b $64, $B, $83, $D9
0001F78A 6E01 8148                  	dc.l Map_obj6E+$6E000000
0001F78E 0400 047E                  	dc.b 4,	0, 4, $7E
0001F792 7001 8592                  	dc.l Map_obj70+$70000000
0001F796 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001F79A 7101 2DB2                  	dc.l Map_obj71+$71000000
0001F79E 1100 8680                  	dc.b $11, 0, $86, $80
0001F7A2 1E00 A184                  	dc.l Map_obj1E+$1E000000
0001F7A6 0400 2302                  	dc.b 4,	0, $23,	2
0001F7AA 7901 903A                  	dc.l Map_obj79+$79000000
0001F7AE 0100 0571                  	dc.w $100, lamppostart
0001F7B2                            	even
0001F7B2                            	even
0001F7B2                            
0001F7B2                            ; ---------------------------------------------------------------------------
0001F7B2                            ; Debug	list - ending sequence / special stage
0001F7B2                            ; ---------------------------------------------------------------------------
0001F7B2                            Debug_Ending:
0001F7B2                            	include "_inc\Debug list - Ending and SS.asm"
0001F7B2                            ; ---------------------------------------------------------------------------
0001F7B2                            ; Debug	list - ending sequence / special stage
0001F7B2                            ; ---------------------------------------------------------------------------
0001F7B2 000D                       	dc.w $D
0001F7B4 2500 B20C                  	dc.l Map_obj25+$25000000
0001F7B8 0000 26BA                  	dc.w 0, ringart+$2000
0001F7BC 4701 0376                  	dc.l Map_obj47+$47000000
0001F7C0 0000 0380                  	dc.b 0,	0, 3, $80
0001F7C4 2800 A79E                  	dc.l Map_obj28a+$28000000
0001F7C8 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001F7CC 2800 A79E                  	dc.l Map_obj28a+$28000000
0001F7D0 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001F7D4 2800 A79E                  	dc.l Map_obj28a+$28000000
0001F7D8 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F7DC 2800 A786                  	dc.l Map_obj28+$28000000
0001F7E0 0D00 0553                  	dc.b $D, 0, 5, $53
0001F7E4 2800 A786                  	dc.l Map_obj28+$28000000
0001F7E8 0E00 0553                  	dc.b $E, 0, 5, $53
0001F7EC 2800 A786                  	dc.l Map_obj28+$28000000
0001F7F0 0F00 0573                  	dc.b $F, 0, 5, $73
0001F7F4 2800 A786                  	dc.l Map_obj28+$28000000
0001F7F8 1000 0573                  	dc.b $10, 0, 5,	$73
0001F7FC 2800 A79E                  	dc.l Map_obj28a+$28000000
0001F800 1100 0585                  	dc.b $11, 0, 5,	$85
0001F804 2800 A7B6                  	dc.l Map_obj28b+$28000000
0001F808 1200 0593                  	dc.b $12, 0, 5,	$93
0001F80C 2800 A79E                  	dc.l Map_obj28a+$28000000
0001F810 1300 0565                  	dc.b $13, 0, 5,	$65
0001F814 2800 A7B6                  	dc.l Map_obj28b+$28000000
0001F818 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F81C                            	even
0001F81C                            	even
0001F81C                            
0001F81C                            ; ---------------------------------------------------------------------------
0001F81C                            ; Main level load blocks
0001F81C                            ; ---------------------------------------------------------------------------
0001F81C                            MainLoadBlocks:
0001F81C                            	include "_inc\Main level load blocks.asm"
0001F81C                            ; ---------------------------------------------------------------------------
0001F81C                            ; Main level load blocks
0001F81C                            ;
0001F81C                            ; ===FORMAT===
0001F81C                            ; level	patterns + (1st	PLC num	* 10^6)
0001F81C                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F81C                            ; 256x256 mappings
0001F81C                            ; blank, music (unused), pal index (unused), pal index
0001F81C                            ; ---------------------------------------------------------------------------
0001F81C 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001F820 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F824 0000 0000                  	dc.l Blk256_GHZ
0001F828 0081 0404                  	dc.b 0,	$81, 4,	4
0001F82C 0000 0000                  	dc.l Nem_LZ+$6000000
0001F830 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F834 0000 0000                  	dc.l Blk256_LZ
0001F838 0082 0505                  	dc.b 0,	$82, 5,	5
0001F83C 0000 0000                  	dc.l Nem_MZ+$8000000
0001F840 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F844 0000 0000                  	dc.l Blk256_MZ
0001F848 0083 0606                  	dc.b 0,	$83, 6,	6
0001F84C 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F850 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F854 0000 0000                  	dc.l Blk256_SLZ
0001F858 0084 0707                  	dc.b 0,	$84, 7,	7
0001F85C 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F860 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F864 0000 0000                  	dc.l Blk256_SYZ
0001F868 0085 0808                  	dc.b 0,	$85, 8,	8
0001F86C 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F870 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F874 0000 0000                  	dc.l Blk256_SBZ
0001F878 0086 0909                  	dc.b 0,	$86, 9,	9
0001F87C 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001F880 0000 0000                  	dc.l Blk16_GHZ
0001F884 0000 0000                  	dc.l Blk256_GHZ
0001F888 0086 1313                  	dc.b 0,	$86, $13, $13
0001F88C                            	even
0001F88C                            	even
0001F88C                            
0001F88C                            ; ---------------------------------------------------------------------------
0001F88C                            ; Pattern load cues
0001F88C                            ; ---------------------------------------------------------------------------
0001F88C                            ArtLoadCues:
0001F88C                            	include "_inc\Pattern load cues.asm"
0001F88C                            ; ---------------------------------------------------------------------------
0001F88C                            ; Pattern load cues - index
0001F88C                            ; ---------------------------------------------------------------------------
0001F88C 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F890 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F894 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F898 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F89C 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F8A0 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F8A4 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F8A8 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F8AC 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F8B0 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F8B4 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F8B8 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F8BC 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F8C0 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F8C4 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F8C8 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F8CC                            ; ---------------------------------------------------------------------------
0001F8CC                            ; Pattern load cues - standard block 1
0001F8CC                            ; ---------------------------------------------------------------------------
0001F8CC 0002                       PLC_Main:	dc.w 2
0001F8CE 0000 0000                  		dc.l Nem_Hud		; HUD
0001F8D2 D940                       		dc.w $D940
0001F8D4 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F8D8 FA80                       		dc.w $FA80
0001F8DA 0000 0000                  		dc.l Nem_Ring		; rings
0001F8DE D740                       		dc.w ringart*$20
0001F8E0                            ; ---------------------------------------------------------------------------
0001F8E0                            ; Pattern load cues - standard block 2
0001F8E0                            ; ---------------------------------------------------------------------------
0001F8E0 0002                       PLC_Main2:	dc.w 2
0001F8E2 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F8E6 AE20                       		dc.w lamppostart*$20
0001F8E8 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F8EC AD00                       		dc.w pointsart*$20
0001F8EE 0000 0000                  		dc.l Nem_Monitors	; monitors
0001F8F2 D000                       		dc.w $D000
0001F8F4                            ; ---------------------------------------------------------------------------
0001F8F4                            ; Pattern load cues - explosion
0001F8F4                            ; ---------------------------------------------------------------------------
0001F8F4 0000                       PLC_Explode:	dc.w 0
0001F8F6 0000 0000                  		dc.l Nem_Explode	; explosion
0001F8FA B400                       		dc.w $B400
0001F8FC                            ; ---------------------------------------------------------------------------
0001F8FC                            ; Pattern load cues - game/time	over
0001F8FC                            ; ---------------------------------------------------------------------------
0001F8FC 0000                       PLC_GameOver:	dc.w 0
0001F8FE 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F902 ABC0                       		dc.w $ABC0
0001F904                            ; ---------------------------------------------------------------------------
0001F904                            ; Pattern load cues - Green Hill
0001F904                            ; ---------------------------------------------------------------------------
0001F904 0009                       PLC_GHZ:	dc.w $9
0001F906 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F90A 6B00                       		dc.w $6B00
0001F90C 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001F910 7A00                       		dc.w $7A00
0001F912 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F916 8000                       		dc.w $8000
0001F918 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F91C 8880                       		dc.w $8880
0001F91E 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001F922 8F60                       		dc.w $8F60
0001F924 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001F928 9360                       		dc.w $9360
0001F92A 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001F92E 9E00                       		dc.w $9E00
0001F930 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F934 A360                       		dc.w $A360
0001F936 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F93A A460                       		dc.w $A460
0001F93C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F940 A660                       		dc.w $A660
0001F942 0005                       PLC_GHZ2:	dc.w 5
0001F944 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F948 7000                       		dc.w $7000
0001F94A 0000 0000                  		dc.l Nem_Bridge		; bridge
0001F94E 71C0                       		dc.w $71C0
0001F950 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001F954 7300                       		dc.w $7300
0001F956 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001F95A 7540                       		dc.w $7540
0001F95C 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001F960 A1E0                       		dc.w $A1E0
0001F962 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001F966 6980                       		dc.w $6980
0001F968                            ; ---------------------------------------------------------------------------
0001F968                            ; Pattern load cues - Labyrinth
0001F968                            ; ---------------------------------------------------------------------------
0001F968 000A                       PLC_LZ:		dc.w $A
0001F96A 0000 0000                  		dc.l Nem_LzBlock1	; block
0001F96E 3C00                       		dc.w $3C00
0001F970 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001F974 3E00                       		dc.w $3E00
0001F976 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001F97A 4B20                       		dc.w $4B20
0001F97C 0000 0000                  		dc.l Nem_Water		; water	surface
0001F980 6000                       		dc.w $6000
0001F982 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001F986 6200                       		dc.w $6200
0001F988 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001F98C 6500                       		dc.w $6500
0001F98E 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001F992 6900                       		dc.w $6900
0001F994 0000 0000                  		dc.l Nem_LzBlock3	; block
0001F998 7780                       		dc.w $7780
0001F99A 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001F99E 7880                       		dc.w $7880
0001F9A0 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001F9A4 7980                       		dc.w $7980
0001F9A6 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001F9AA 94C0                       		dc.w $94C0
0001F9AC 000C                       PLC_LZ2:	dc.w $C
0001F9AE 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001F9B2 7BC0                       		dc.w $7BC0
0001F9B4 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001F9B8 7CC0                       		dc.w $7CC0
0001F9BA 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001F9BE 7EC0                       		dc.w $7EC0
0001F9C0 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001F9C4 5D20                       		dc.w $5D20
0001F9C6 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001F9CA 8800                       		dc.w $8800
0001F9CC 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001F9D0 89E0                       		dc.w $89E0
0001F9D2 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F9D6 8CE0                       		dc.w $8CE0
0001F9D8 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001F9DC 90C0                       		dc.w $90C0
0001F9DE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F9E2 A1E0                       		dc.w $A1E0
0001F9E4 0000 0000                  		dc.l Nem_Cork		; cork block
0001F9E8 A000                       		dc.w $A000
0001F9EA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F9EE A360                       		dc.w $A360
0001F9F0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F9F4 A460                       		dc.w $A460
0001F9F6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F9FA A660                       		dc.w $A660
0001F9FC                            ; ---------------------------------------------------------------------------
0001F9FC                            ; Pattern load cues - Marble
0001F9FC                            ; ---------------------------------------------------------------------------
0001F9FC 0008                       PLC_MZ:		dc.w 8
0001F9FE 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001FA02 6000                       		dc.w $6000
0001FA04 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FA08 68A0                       		dc.w $68A0
0001FA0A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FA0E 7000                       		dc.w $7000
0001FA10 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001FA14 71C0                       		dc.w $71C0
0001FA16 0000 0000                  		dc.l Nem_Lava		; lava
0001FA1A 7500                       		dc.w $7500
0001FA1C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FA20 8880                       		dc.w $8880
0001FA22 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FA26 8F60                       		dc.w $8F60
0001FA28 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001FA2C 9700                       		dc.w $9700
0001FA2E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FA32 9FE0                       		dc.w $9FE0
0001FA34 0004                       PLC_MZ2:	dc.w 4
0001FA36 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001FA3A A260                       		dc.w $A260
0001FA3C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FA40 A360                       		dc.w $A360
0001FA42 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FA46 A460                       		dc.w $A460
0001FA48 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FA4C A660                       		dc.w $A660
0001FA4E 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001FA52 5700                       		dc.w $5700
0001FA54                            ; ---------------------------------------------------------------------------
0001FA54                            ; Pattern load cues - Star Light
0001FA54                            ; ---------------------------------------------------------------------------
0001FA54 0007                       PLC_SLZ:	dc.w 7
0001FA56 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FA5A 8000                       		dc.w $8000
0001FA5C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FA60 8520                       		dc.w $8520
0001FA62 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FA66 9000                       		dc.w $9000
0001FA68 0000 0000                  		dc.l Nem_SlzBlock	; block
0001FA6C 9C00                       		dc.w $9C00
0001FA6E 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001FA72 A260                       		dc.w $A260
0001FA74 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FA78 A360                       		dc.w $A360
0001FA7A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FA7E A460                       		dc.w $A460
0001FA80 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FA84 A660                       		dc.w $A660
0001FA86 0005                       PLC_SLZ2:	dc.w 5
0001FA88 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001FA8C 6E80                       		dc.w $6E80
0001FA8E 0000 0000                  		dc.l Nem_Fan		; fan
0001FA92 7400                       		dc.w $7400
0001FA94 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001FA98 7980                       		dc.w $7980
0001FA9A 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001FA9E 7B80                       		dc.w $7B80
0001FAA0 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001FAA4 9B00                       		dc.w $9B00
0001FAA6 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001FAAA 9E00                       		dc.w $9E00
0001FAAC                            ; ---------------------------------------------------------------------------
0001FAAC                            ; Pattern load cues - Spring Yard
0001FAAC                            ; ---------------------------------------------------------------------------
0001FAAC 0003                       PLC_SYZ:	dc.w 3
0001FAAE 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FAB2 8000                       		dc.w $8000
0001FAB4 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FAB8 8880                       		dc.w $8880
0001FABA 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FABE 8F60                       		dc.w $8F60
0001FAC0 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001FAC4 9700                       		dc.w $9700
0001FAC6 0006                       PLC_SYZ2:	dc.w 6
0001FAC8 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FACC 7000                       		dc.w $7000
0001FACE 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FAD2 72C0                       		dc.w $72C0
0001FAD4 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001FAD8 7740                       		dc.w $7740
0001FADA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FADE A1E0                       		dc.w $A1E0
0001FAE0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FAE4 A360                       		dc.w $A360
0001FAE6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FAEA A460                       		dc.w $A460
0001FAEC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FAF0 A660                       		dc.w $A660
0001FAF2                            ; ---------------------------------------------------------------------------
0001FAF2                            ; Pattern load cues - Scrap Brain
0001FAF2                            ; ---------------------------------------------------------------------------
0001FAF2 000A                       PLC_SBZ:	dc.w $A
0001FAF4 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001FAF8 5800                       		dc.w $5800
0001FAFA 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001FAFE 5D00                       		dc.w $5D00
0001FB00 0000 0000                  		dc.l Nem_Girder		; girder
0001FB04 5E00                       		dc.w $5E00
0001FB06 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001FB0A 6040                       		dc.w $6040
0001FB0C 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001FB10 6880                       		dc.w $6880
0001FB12 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001FB16 6900                       		dc.w $6900
0001FB18 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FB1C 7220                       		dc.w $7220
0001FB1E 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001FB22 76A0                       		dc.w $76A0
0001FB24 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001FB28 7B20                       		dc.w $7B20
0001FB2A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FB2E 7EA0                       		dc.w $7EA0
0001FB30 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001FB34 9860                       		dc.w $9860
0001FB36 000C                       PLC_SBZ2:	dc.w $C
0001FB38 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FB3C 5600                       		dc.w $5600
0001FB3E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FB42 8000                       		dc.w $8000
0001FB44 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FB48 8520                       		dc.w $8520
0001FB4A 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001FB4E 8C00                       		dc.w $8C00
0001FB50 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001FB54 8DE0                       		dc.w $8DE0
0001FB56 0000 0000                  		dc.l Nem_Electric	; electric orb
0001FB5A 8FC0                       		dc.w $8FC0
0001FB5C 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001FB60 9240                       		dc.w $9240
0001FB62 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FB66 7F20                       		dc.w $7F20
0001FB68 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001FB6C 9BE0                       		dc.w $9BE0
0001FB6E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FB72 A1E0                       		dc.w $A1E0
0001FB74 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FB78 A360                       		dc.w $A360
0001FB7A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FB7E A460                       		dc.w $A460
0001FB80 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FB84 A660                       		dc.w $A660
0001FB86                            ; ---------------------------------------------------------------------------
0001FB86                            ; Pattern load cues - title card
0001FB86                            ; ---------------------------------------------------------------------------
0001FB86 0000                       PLC_TitleCard:	dc.w 0
0001FB88 0000 0000                  		dc.l Nem_TitleCard
0001FB8C B000                       		dc.w $B000
0001FB8E                            ; ---------------------------------------------------------------------------
0001FB8E                            ; Pattern load cues - act 3 boss
0001FB8E                            ; ---------------------------------------------------------------------------
0001FB8E 0005                       PLC_Boss:	dc.w 5
0001FB90 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FB94 8000                       		dc.w $8000
0001FB96 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001FB9A 8D80                       		dc.w $8D80
0001FB9C 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001FBA0 93A0                       		dc.w $93A0
0001FBA2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001FBA6 A300                       		dc.w $A300
0001FBA8 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001FBAC A300                       		dc.w $A300
0001FBAE 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FBB2 A540                       		dc.w $A540
0001FBB4                            ; ---------------------------------------------------------------------------
0001FBB4                            ; Pattern load cues - act 1/2 signpost
0001FBB4                            ; ---------------------------------------------------------------------------
0001FBB4 0002                       PLC_Signpost:	dc.w 2
0001FBB6 0000 0000                  		dc.l Nem_SignPost	; signpost
0001FBBA D000                       		dc.w $D000
0001FBBC 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001FBC0 96C0                       		dc.w $96C0
0001FBC2 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001FBC6 8C40                       		dc.w $8C40
0001FBC8                            ; ---------------------------------------------------------------------------
0001FBC8                            ; Pattern load cues - beta special stage warp effect
0001FBC8                            ; ---------------------------------------------------------------------------
0001FBC8 0000                       PLC_Warp:	dc.w 0
0001FBCA 0000 0000                  		dc.l Nem_Warp
0001FBCE A820                       		dc.w $A820
0001FBD0                            ; ---------------------------------------------------------------------------
0001FBD0                            ; Pattern load cues - special stage
0001FBD0                            ; ---------------------------------------------------------------------------
0001FBD0 000C                       PLC_SpeStage:	dc.w $C
0001FBD2 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001FBD6 0000                       		dc.w 0
0001FBD8 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001FBDC 0A20                       		dc.w $A20
0001FBDE 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FBE2 4760                       		dc.w $4760
0001FBE4 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001FBE8 4A20                       		dc.w $4A20
0001FBEA 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001FBEE 4C60                       		dc.w $4C60
0001FBF0 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001FBF4 5E00                       		dc.w $5E00
0001FBF6 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001FBFA 6E00                       		dc.w $6E00
0001FBFC 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001FC00 7E00                       		dc.w $7E00
0001FC02 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001FC06 8E00                       		dc.w $8E00
0001FC08 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001FC0C 9E00                       		dc.w $9E00
0001FC0E 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001FC12 BE00                       		dc.w $BE00
0001FC14 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001FC18 EE00                       		dc.w $EE00
0001FC1A 0000 0000                  		dc.l Nem_Ring		; rings
0001FC1E 45A0                       		dc.w ssringart*$20
0001FC20                            ; ---------------------------------------------------------------------------
0001FC20                            ; Pattern load cues - GHZ animals
0001FC20                            ; ---------------------------------------------------------------------------
0001FC20 0001                       PLC_GHZAnimals:	dc.w 1
0001FC22 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FC26 B000                       		dc.w $B000
0001FC28 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FC2C B240                       		dc.w $B240
0001FC2E                            ; ---------------------------------------------------------------------------
0001FC2E                            ; Pattern load cues - LZ animals
0001FC2E                            ; ---------------------------------------------------------------------------
0001FC2E 0001                       PLC_LZAnimals:	dc.w 1
0001FC30 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FC34 B000                       		dc.w $B000
0001FC36 0000 0000                  		dc.l Nem_Seal		; seal
0001FC3A B240                       		dc.w $B240
0001FC3C                            ; ---------------------------------------------------------------------------
0001FC3C                            ; Pattern load cues - MZ animals
0001FC3C                            ; ---------------------------------------------------------------------------
0001FC3C 0001                       PLC_MZAnimals:	dc.w 1
0001FC3E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FC42 B000                       		dc.w $B000
0001FC44 0000 0000                  		dc.l Nem_Seal		; seal
0001FC48 B240                       		dc.w $B240
0001FC4A                            ; ---------------------------------------------------------------------------
0001FC4A                            ; Pattern load cues - SLZ animals
0001FC4A                            ; ---------------------------------------------------------------------------
0001FC4A 0001                       PLC_SLZAnimals:	dc.w 1
0001FC4C 0000 0000                  		dc.l Nem_Pig		; pig
0001FC50 B000                       		dc.w $B000
0001FC52 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FC56 B240                       		dc.w $B240
0001FC58                            ; ---------------------------------------------------------------------------
0001FC58                            ; Pattern load cues - SYZ animals
0001FC58                            ; ---------------------------------------------------------------------------
0001FC58 0001                       PLC_SYZAnimals:	dc.w 1
0001FC5A 0000 0000                  		dc.l Nem_Pig		; pig
0001FC5E B000                       		dc.w $B000
0001FC60 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FC64 B240                       		dc.w $B240
0001FC66                            ; ---------------------------------------------------------------------------
0001FC66                            ; Pattern load cues - SBZ animals
0001FC66                            ; ---------------------------------------------------------------------------
0001FC66 0001                       PLC_SBZAnimals:	dc.w 1
0001FC68 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FC6C B000                       		dc.w $B000
0001FC6E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FC72 B240                       		dc.w $B240
0001FC74                            ; ---------------------------------------------------------------------------
0001FC74                            ; Pattern load cues - special stage results screen
0001FC74                            ; ---------------------------------------------------------------------------
0001FC74 0001                       PLC_SpeStResult:dc.w 1
0001FC76 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001FC7A A820                       		dc.w $A820
0001FC7C 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001FC80 AA20                       		dc.w $AA20
0001FC82                            ; ---------------------------------------------------------------------------
0001FC82                            ; Pattern load cues - ending sequence
0001FC82                            ; ---------------------------------------------------------------------------
0001FC82 000C                       PLC_Ending:	dc.w $C
0001FC84 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FC88 6B00                       		dc.w $6B00
0001FC8A 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001FC8E 7400                       		dc.w $7400
0001FC90 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FC94 78A0                       		dc.w $78A0
0001FC96 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001FC9A 7C20                       		dc.w $7C20
0001FC9C 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001FCA0 A480                       		dc.w $A480
0001FCA2 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FCA6 AA60                       		dc.w $AA60
0001FCA8 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FCAC ACA0                       		dc.w $ACA0
0001FCAE 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FCB2 AE60                       		dc.w $AE60
0001FCB4 0000 0000                  		dc.l Nem_Seal		; seal
0001FCB8 B0A0                       		dc.w $B0A0
0001FCBA 0000 0000                  		dc.l Nem_Pig		; pig
0001FCBE B260                       		dc.w $B260
0001FCC0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FCC4 B4A0                       		dc.w $B4A0
0001FCC6 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FCCA B660                       		dc.w $B660
0001FCCC 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001FCD0 B8A0                       		dc.w $B8A0
0001FCD2                            ; ---------------------------------------------------------------------------
0001FCD2                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001FCD2                            ; ---------------------------------------------------------------------------
0001FCD2 0002                       PLC_TryAgain:	dc.w 2
0001FCD4 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FCD8 78A0                       		dc.w $78A0
0001FCDA 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001FCDE 7C20                       		dc.w $7C20
0001FCE0 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001FCE4 B400                       		dc.w $B400
0001FCE6                            ; ---------------------------------------------------------------------------
0001FCE6                            ; Pattern load cues - Eggman on SBZ 2
0001FCE6                            ; ---------------------------------------------------------------------------
0001FCE6 0002                       PLC_EggmanSBZ2:	dc.w 2
0001FCE8 0000 0000                  		dc.l Nem_SbzBlock	; block
0001FCEC A300                       		dc.w $A300
0001FCEE 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001FCF2 8000                       		dc.w $8000
0001FCF4 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FCF8 9400                       		dc.w $9400
0001FCFA                            ; ---------------------------------------------------------------------------
0001FCFA                            ; Pattern load cues - final boss
0001FCFA                            ; ---------------------------------------------------------------------------
0001FCFA 0004                       PLC_FZBoss:	dc.w 4
0001FCFC 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001FD00 7400                       		dc.w $7400
0001FD02 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001FD06 6000                       		dc.w $6000
0001FD08 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FD0C 8000                       		dc.w $8000
0001FD0E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001FD12 8E00                       		dc.w $8E00
0001FD14 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FD18 A540                       		dc.w $A540
0001FD1A                            		even
0001FD1A                            		even
0001FD1A                            
0001FD1A                            		incbin	misc\padding.bin
0001FE08                            		even
0001FE08                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0002026A                            		even
0002026A                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
00020362                            		even
00020362                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0002045C                            		even
0002045C                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00021428                            		even
00021428                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022DD2 00                         		even
00022DD2                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022E14                            		even
00022E14                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022ED2                            		even
00022ED2                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002337A                            		even
0002337A                            ; ---------------------------------------------------------------------------
0002337A                            ; Sprite mappings - Sonic
0002337A                            ; ---------------------------------------------------------------------------
0002337A                            Map_Sonic:
0002337A                            	include "_maps\Sonic.asm"
0002337A                            ; ---------------------------------------------------------------------------
0002337A                            ; Sprite mappings - Sonic
0002337A                            ; ---------------------------------------------------------------------------
0002337A 0000 0000                  		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
0002337E 0000 0000                  		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
00023382 0000 0000                  		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
00023386 0000 0000                  		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
0002338A 0000 0000                  		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
0002338E 0000 0000                  		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
00023392 0000 0000                  		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
00023396 0000 0000                  		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
0002339A 0000 0000                  		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
0002339E 0000 0000                  		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
000233A2 0000 0000                  		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
000233A6 0000 0000                  		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
000233AA 0000 0000                  		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
000233AE 0000 0000                  		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
000233B2 0000 0000                  		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
000233B6 0000 0000                  		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
000233BA 0000 0000                  		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
000233BE 0000 0000                  		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
000233C2 0000 0000                  		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
000233C6 0000 0000                  		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
000233CA 0000 0000                  		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
000233CE 0000 0000                  		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
000233D2 0000 0000                  		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
000233D6 0000 0000                  		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
000233DA 0000 0000                  		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
000233DE 0000 0000                  		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
000233E2 0000 0000                  		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
000233E6 0000 0000                  		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
000233EA 0000 0000                  		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
000233EE 0000 0000                  		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
000233F2 0000 0000                  		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
000233F6 0000 0000                  		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
000233FA 0000 0000                  		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
000233FE 0000 0000                  		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
00023402 0000 0000                  		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
00023406 0000 0000                  		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
0002340A 0000 0000                  		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
0002340E 0000 0000                  		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
00023412 0000 0000                  		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
00023416 0000 0000                  		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
0002341A 0000 0000                  		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
0002341E 0000 0000                  		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
00023422 0000 0000                  		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
00023426 0000 0000                  		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
0002342A 00                         byte_21292:	dc.b 0
0002342B 04                         byte_21293:	dc.b 4			; standing
0002342C EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023431 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
00023436 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
0002343B 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
00023440 03                         byte_212A8:	dc.b 3			; waiting 1
00023441 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023446 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
0002344B 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00023450 03                         byte_212B8:	dc.b 3			; waiting 2
00023451 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023456 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
0002345B 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00023460 03                         byte_212C8:	dc.b 3			; waiting 3
00023461 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023466 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
0002346B 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00023470 03                         byte_212D8:	dc.b 3			; looking up
00023471 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00023476 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
0002347B 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00023480 04                         byte_212E8:	dc.b 4			; walking 1-1
00023481 EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
00023486 FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
0002348B FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
00023490 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
00023495 02                         byte_212FD:	dc.b 2			; walking 1-2
00023496 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
0002349B FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
000234A0 02                         byte_21308:	dc.b 2			; walking 1-3
000234A1 ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
000234A6 FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
000234AB 04                         byte_21313:	dc.b 4			; walking 1-4
000234AC EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
000234B1 FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
000234B6 FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
000234BB 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
000234C0 02                         byte_21328:	dc.b 2			; walking 1-5
000234C1 EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
000234C6 FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
000234CB 03                         byte_21333:	dc.b 3			; walking 1-6
000234CC ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
000234D1 FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
000234D6 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
000234DB 05                         byte_21343:	dc.b 5			; walking 2-1
000234DC EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
000234E1 EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
000234E6 FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
000234EB 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
000234F0 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
000234F5 06                         byte_2135D:	dc.b 6			; walking 2-2
000234F6 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
000234FB EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00023500 FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
00023505 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
0002350A FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
0002350F F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
00023514 04                         byte_2137C:	dc.b 4			; walking 2-3
00023515 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
0002351A ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
0002351F FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
00023524 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
00023529 05                         byte_21391:	dc.b 5			; walking 2-4
0002352A EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
0002352F EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
00023534 FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
00023539 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
0002353E 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
00023543 04                         byte_213AB:	dc.b 4			; walking 2-5
00023544 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00023549 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
0002354E FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
00023553 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
00023558 05                         byte_213C0:	dc.b 5			; walking 2-6
00023559 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
0002355E ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00023563 FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
00023568 FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
0002356D 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
00023572 04                         byte_213DA:	dc.b 4			; walking 3-1
00023573 F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
00023578 EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
0002357D FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
00023582 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
00023587 02                         byte_213EF:	dc.b 2			; walking 3-2
00023588 F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
0002358D EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
00023592 02                         byte_213FA:	dc.b 2			; walking 3-3
00023593 F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
00023598 F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
0002359D 04                         byte_21405:	dc.b 4			; walking 3-4
0002359E F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
000235A3 EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
000235A8 FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
000235AD 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
000235B2 02                         byte_2141A:	dc.b 2			; walking 3-5
000235B3 F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
000235B8 F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
000235BD 03                         byte_21425:	dc.b 3			; walking 3-6
000235BE F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
000235C3 EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
000235C8 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
000235CD 06                         byte_21435:	dc.b 6			; walking 4-1
000235CE FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
000235D3 ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
000235D8 F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
000235DD F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
000235E2 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
000235E7 FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
000235EC 06                         byte_21454:	dc.b 6			; walking 4-2
000235ED FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
000235F2 E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
000235F7 EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
000235FC F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
00023601 F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
00023606 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
0002360B 04                         byte_21473:	dc.b 4			; walking 4-3
0002360C FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00023611 F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
00023616 EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
0002361B 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00023620 05                         byte_21488:	dc.b 5			; walking 4-4
00023621 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00023626 ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
0002362B F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
00023630 F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
00023635 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
0002363A 04                         byte_214A2:	dc.b 4			; walking 4-5
0002363B FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00023640 F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
00023645 EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
0002364A 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
0002364F 05                         byte_214B7:	dc.b 5			; walking 4-6
00023650 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00023655 EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
0002365A F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
0002365F 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00023664 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
00023669 02                         byte_214D1:	dc.b 2			; running 1-1
0002366A EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
0002366F FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023674 02                         byte_214DC:	dc.b 2			; running 1-2
00023675 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
0002367A FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
0002367F 02                         byte_214E7:	dc.b 2			; running 1-3
00023680 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023685 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
0002368A 02                         byte_214F2:	dc.b 2			; running 1-4
0002368B EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023690 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023695 04                         byte_214FD:	dc.b 4			; running 2-1
00023696 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002369B EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000236A0 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000236A5 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
000236AA 03                         byte_21512:	dc.b 3			; running 2-2
000236AB EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000236B0 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000236B5 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000236BA 04                         byte_21522:	dc.b 4			; running 2-3
000236BB EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000236C0 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000236C5 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000236CA FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
000236CF 03                         byte_21537:	dc.b 3			; running 2-4
000236D0 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000236D5 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000236DA FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000236DF 02                         byte_21547:	dc.b 2			; running 3-1
000236E0 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000236E5 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000236EA 02                         byte_21552:	dc.b 2			; running 3-2
000236EB F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000236F0 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000236F5 02                         byte_2155D:	dc.b 2			; running 3-3
000236F6 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000236FB F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023700 02                         byte_21568:	dc.b 2			; running 3-4
00023701 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023706 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
0002370B 04                         byte_21573:	dc.b 4			; running 4-1
0002370C FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00023711 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00023716 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
0002371B 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00023720 02                         byte_21588:	dc.b 2			; running 4-2
00023721 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00023726 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
0002372B 04                         byte_21593:	dc.b 4			; running 4-3
0002372C FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00023731 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00023736 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
0002373B 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00023740 02                         byte_215A8:	dc.b 2			; running 4-4
00023741 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00023746 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
0002374B 01                         byte_215B3:	dc.b 1			; rolling 1
0002374C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023751 01                         byte_215B9:	dc.b 1			; rolling 2
00023752 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023757 01                         byte_215BF:	dc.b 1			; rolling 3
00023758 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002375D 01                         byte_215C5:	dc.b 1			; rolling 4
0002375E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023763 01                         byte_215CB:	dc.b 1			; rolling 5
00023764 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023769 02                         byte_215D1:	dc.b 2			; warped 1 (unused)
0002376A F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
0002376F F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
00023774 01                         byte_215DC:	dc.b 1			; warped 2 (unused)
00023775 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002377A 02                         byte_215E2:	dc.b 2			; warped 3 (unused)
0002377B EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
00023780 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
00023785 01                         byte_215ED:	dc.b 1			; warped 4 (unused)
00023786 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002378B 02                         byte_215F3:	dc.b 2			; stopping 1
0002378C ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00023791 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
00023796 04                         byte_215FE:	dc.b 4			; stopping 2
00023797 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
0002379C FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
000237A1 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
000237A6 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
000237AB 04                         byte_21613:	dc.b 4			; ducking
000237AC F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
000237B1 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
000237B6 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
000237BB 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
000237C0 03                         byte_21628:	dc.b 3			; balancing 1
000237C1 EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
000237C6 F402 0803 00               		dc.b $F4, 2, 8,	3, 0
000237CB F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
000237D0 03                         byte_21638:	dc.b 3			; balancing 2
000237D1 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
000237D6 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
000237DB 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
000237E0 03                         byte_21648:	dc.b 3			; spinning 1 (LZ)
000237E1 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
000237E6 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
000237EB 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
000237F0 02                         byte_21658:	dc.b 2			; spinning 2 (LZ)
000237F1 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
000237F6 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
000237FB 03                         byte_21663:	dc.b 3			; spinning 3 (LZ)
000237FC F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
00023801 FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
00023806 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
0002380B 03                         byte_21673:	dc.b 3			; spinning 4 (LZ)
0002380C F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00023811 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00023816 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
0002381B 03                         byte_21683:	dc.b 3			; bouncing
0002381C E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
00023821 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
00023826 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
0002382B 04                         byte_21693:	dc.b 4			; hanging 1 (LZ)
0002382C F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023831 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00023836 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
0002383B F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00023840 04                         byte_216A8:	dc.b 4			; hanging 2 (LZ)
00023841 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023846 0005 000C 08               		dc.b 0,	5, 0, $C, 8
0002384B F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00023850 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00023855 05                         byte_216BD:	dc.b 5			; celebration leap 1 (unused)
00023856 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
0002385B F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
00023860 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00023865 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
0002386A 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
0002386F 05                         byte_216D7:	dc.b 5			; celebration leap 2 (unused)
00023870 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00023875 E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
0002387A 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
0002387F 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00023884 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00023889 02                         byte_216F1:	dc.b 2			; pushing 1
0002388A ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
0002388F 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00023894 03                         byte_216FC:	dc.b 3			; pushing 2
00023895 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
0002389A 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
0002389F 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
000238A4 02                         byte_2170C:	dc.b 2			; pushing 3
000238A5 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
000238AA 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
000238AF 03                         byte_21717:	dc.b 3			; pushing 4
000238B0 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
000238B5 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
000238BA 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
000238BF 02                         byte_21727:	dc.b 2			; surfing or sliding (unused)
000238C0 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000238C5 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
000238CA 03                         byte_21732:	dc.b 3			; collecting bubble (unused)
000238CB EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
000238D0 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
000238D5 E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
000238DA 03                         byte_21742:	dc.b 3			; death	1
000238DB E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
000238E0 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
000238E5 F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
000238EA 05                         byte_21752:	dc.b 5			; drowning
000238EB E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
000238F0 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
000238F5 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
000238FA 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
000238FF 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00023904 05                         byte_2176C:	dc.b 5			; death	2
00023905 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
0002390A E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
0002390F F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00023914 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00023919 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
0002391E 02                         byte_21786:	dc.b 2			; shrinking 1 (unused)
0002391F EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023924 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
00023929 03                         byte_21791:	dc.b 3			; shrinking 2 (unused)
0002392A EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
0002392F F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
00023934 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
00023939 01                         byte_217A1:	dc.b 1			; shrinking 3 (unused)
0002393A F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
0002393F 01                         byte_217A7:	dc.b 1			; shrinking 4 (unused)
00023940 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00023945 01                         byte_217AD:	dc.b 1			; shrinking 5 (unused)
00023946 F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
0002394B 03                         byte_217B3:	dc.b 3			; injury
0002394C F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
00023951 FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
00023956 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
0002395B 03                         byte_217C3:	dc.b 3			; spinning 5 (LZ)
0002395C F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
00023961 FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
00023966 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
0002396B 03                         byte_217D3:	dc.b 3			; spinning 6 (LZ)
0002396C F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
00023971 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00023976 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
0002397B 03                         byte_217E3:	dc.b 3			; collecting bubble (LZ)
0002397C EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00023981 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
00023986 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
0002398B 02                         byte_217F3:	dc.b 2			; water	slide (LZ)
0002398C F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
00023991 F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
00023996                            		even
00023996                            		even
00023996                            
00023996                            ; ---------------------------------------------------------------------------
00023996                            ; Uncompressed graphics	loading	array for Sonic
00023996                            ; ---------------------------------------------------------------------------
00023996                            SonicDynPLC:
00023996                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023996                            ; ---------------------------------------------------------------------------
00023996                            ; Uncompressed graphics	loading	array for Sonic
00023996                            ; ---------------------------------------------------------------------------
00023996 0000                       		dc.w SonPLC_Blank-SonicDynPLC
00023998 0000                       		dc.w SonPLC_Stand-SonicDynPLC
0002399A 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
0002399C 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
0002399E 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
000239A0 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
000239A2 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
000239A4 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
000239A6 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
000239A8 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
000239AA 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
000239AC 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
000239AE 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
000239B0 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
000239B2 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
000239B4 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
000239B6 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
000239B8 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
000239BA 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
000239BC 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
000239BE 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
000239C0 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
000239C2 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
000239C4 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
000239C6 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
000239C8 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
000239CA 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
000239CC 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
000239CE 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
000239D0 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
000239D2 0000                       		dc.w SonPLC_Run11-SonicDynPLC
000239D4 0000                       		dc.w SonPLC_Run12-SonicDynPLC
000239D6 0000                       		dc.w SonPLC_Run13-SonicDynPLC
000239D8 0000                       		dc.w SonPLC_Run14-SonicDynPLC
000239DA 0000                       		dc.w SonPLC_Run21-SonicDynPLC
000239DC 0000                       		dc.w SonPLC_Run22-SonicDynPLC
000239DE 0000                       		dc.w SonPLC_Run23-SonicDynPLC
000239E0 0000                       		dc.w SonPLC_Run24-SonicDynPLC
000239E2 0000                       		dc.w SonPLC_Run31-SonicDynPLC
000239E4 0000                       		dc.w SonPLC_Run32-SonicDynPLC
000239E6 0000                       		dc.w SonPLC_Run33-SonicDynPLC
000239E8 0000                       		dc.w SonPLC_Run34-SonicDynPLC
000239EA 0000                       		dc.w SonPLC_Run41-SonicDynPLC
000239EC 0000                       		dc.w SonPLC_Run42-SonicDynPLC
000239EE 0000                       		dc.w SonPLC_Run43-SonicDynPLC
000239F0 0000                       		dc.w SonPLC_Run44-SonicDynPLC
000239F2 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
000239F4 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
000239F6 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
000239F8 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
000239FA 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
000239FC 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
000239FE 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
00023A00 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
00023A02 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
00023A04 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
00023A06 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
00023A08 0000                       		dc.w SonPLC_Duck-SonicDynPLC
00023A0A 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
00023A0C 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
00023A0E 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00023A10 0000                       		dc.w SonPLC_Float2-SonicDynPLC
00023A12 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023A14 0000                       		dc.w SonPLC_Float4-SonicDynPLC
00023A16 0000                       		dc.w SonPLC_Spring-SonicDynPLC
00023A18 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
00023A1A 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
00023A1C 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
00023A1E 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
00023A20 0000                       		dc.w SonPLC_Push1-SonicDynPLC
00023A22 0000                       		dc.w SonPLC_Push2-SonicDynPLC
00023A24 0000                       		dc.w SonPLC_Push3-SonicDynPLC
00023A26 0000                       		dc.w SonPLC_Push4-SonicDynPLC
00023A28 0000                       		dc.w SonPLC_Slide-SonicDynPLC
00023A2A 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
00023A2C 0000                       		dc.w SonPLC_Death1-SonicDynPLC
00023A2E 0000                       		dc.w SonPLC_Drown-SonicDynPLC
00023A30 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
00023A32 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
00023A34 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
00023A36 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
00023A38 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
00023A3A 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
00023A3C 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00023A3E 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023A40 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
00023A42 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
00023A44 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
00023A46 00                         SonPLC_Blank:	dc.b 0
00023A47 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
00023A50 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
00023A57 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
00023A5E 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
00023A65 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
00023A6C 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
00023A75 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
00023A7A 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
00023A7F 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
00023A88 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
00023A8D 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
00023A94 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
00023A9F 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
00023AAC 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
00023AB5 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
00023AC0 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
00023AC9 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
00023AD4 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
00023ADD 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
00023AE2 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
00023AE7 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
00023AF0 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
00023AF5 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
00023AFC 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
00023B09 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
00023B16 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
00023B1F 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00023B2A 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
00023B33 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
00023B3E 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
00023B43 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
00023B48 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
00023B4D 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
00023B52 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
00023B5B 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
00023B62 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
00023B6B 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
00023B72 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
00023B77 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
00023B7C 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
00023B81 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
00023B86 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
00023B8F 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
00023B94 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
00023B9D 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
00023BA2 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
00023BA5 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
00023BA8 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
00023BAB 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
00023BAE 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
00023BB1 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
00023BB6 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
00023BB9 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
00023BBE 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
00023BC1 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
00023BC6 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
00023BCF 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
00023BD8 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
00023BDF 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
00023BE6 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
00023BED 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
00023BF0 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
00023BF7 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
00023BFE 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
00023C05 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
00023C0E 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
00023C17 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
00023C22 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
00023C2D 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
00023C32 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
00023C39 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
00023C3E 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
00023C45 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
00023C4A 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
00023C51 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
00023C58 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
00023C63 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
00023C6E 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
00023C73 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
00023C7A 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
00023C7D 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
00023C80 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
00023C83 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
00023C8A 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
00023C91 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
00023C96                            		even
00023C96                            		even
00023C96                            
00023C96                            ; ---------------------------------------------------------------------------
00023C96                            ; Uncompressed graphics	- Sonic
00023C96                            ; ---------------------------------------------------------------------------
00023C96                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002DDB6                            		even
0002DDB6                            
0002DDB6                            ; ---------------------------------------------------------------------------
0002DDB6                            ; Uncompressed graphics	- Sonime
0002DDB6                            ; ---------------------------------------------------------------------------
0002DDB6                            Art_Sonime_Torso:	incbin	artunc\sonime_torso.bin
0002DF36                            		even
0002DF36                            Art_Sonime_Head:	incbin	artunc\sonime_head.bin
0002E1B6                            		even
0002E1B6                            Art_Sonime_Hair:	incbin	artunc\sonime_hair.bin
0002E2B6                            		even
0002E2B6                            Art_Sonime_Faces:	incbin	artunc\sonime_faces.bin
0002EBB6                            		even
0002EBB6                            Art_Sonime_LeftEar:	incbin	artunc\sonime_leftear.bin
0002EBF6                            		even
0002EBF6                            Art_Sonime_RightEar:	incbin	artunc\sonime_rightear.bin
0002EC76                            		even
0002EC76                            
0002EC76                            ; ---------------------------------------------------------------------------
0002EC76                            ; Compressed graphics - various
0002EC76                            ; ---------------------------------------------------------------------------
0002EC76                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002ED7A                            		even
0002ED7A                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002EDB4                            		even
0002EDB4                            UnC_Shield:	incbin	artunc\shield.bin	; shield
0002F114                            		even
0002F114                            ArtUnc_InvStars:	incbin	artunc\invstars.bin	; invincibility stars
0002F514                            		even
0002F514                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002F61E                            		even
0002F61E                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002F670                            		even
0002F670                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002F8B8                            		even
0002F8B8                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002FA3E                            		even
0002FA3E                            ; ---------------------------------------------------------------------------
0002FA3E                            ; Sprite mappings - walls of the special stage
0002FA3E                            ; ---------------------------------------------------------------------------
0002FA3E                            Map_SSWalls:
0002FA3E                            	include "_maps\SSwalls.asm"
0002FA3E                            ; ---------------------------------------------------------------------------
0002FA3E                            ; Sprite mappings - walls of the special stage
0002FA3E                            ; ---------------------------------------------------------------------------
0002FA3E 0000                       Map_SSWalls2:	dc.w byte_2C584-Map_SSWalls2
0002FA40 01                         byte_2C584:	dc.b 1
0002FA41 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002FA46                            		even
0002FA46                            		even
0002FA46                            ; ---------------------------------------------------------------------------
0002FA46                            ; Compressed graphics - special stage
0002FA46                            ; ---------------------------------------------------------------------------
0002FA46                            Art_SSWalls:	incbin	artunc\sswalls.bin	; special stage walls
00031A46                            		even
00031A46                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031B7A                            		even
00031B7A                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003280A                            		even
0003280A                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032B0A                            		even
00032B0A                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00032FFE                            		even
00032FFE                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000330EC                            		even
000330EC                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000331BC                            		even
000331BC                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000332B2                            		even
000332B2                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033310                            		even
00033310                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000333A2                            		even
000333A2                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033464                            		even
00033464                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033532                            		even
00033532                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
000335FE                            		even
000335FE                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000336C6                            		even
000336C6                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033790                            		even
00033790                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033860                            		even
00033860                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033A54                            		even
00033A54                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033BBC                            		even
00033BBC                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00033C6C                            		even
00033C6C                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00033D46                            		even
00033D46                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00033DCA                            		even
00033DCA                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00033F48                            		even
00033F48                            ; ---------------------------------------------------------------------------
00033F48                            ; Compressed graphics - GHZ stuff
00033F48                            ; ---------------------------------------------------------------------------
00033F48                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00033F92                            		even
00033F92                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000340AC                            		even
000340AC                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034198                            		even
00034198                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000341E0                            		even
000341E0                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003437E                            		even
0003437E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000343FA                            		even
000343FA                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003460E                            		even
0003460E                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003473A                            		even
0003473A                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034868                            		even
00034868                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034906                            		even
00034906                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034966                            		even
00034966                            ; ---------------------------------------------------------------------------
00034966                            ; Compressed graphics - LZ stuff
00034966                            ; ---------------------------------------------------------------------------
00034966                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034A8A                            		even
00034A8A                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003527E                            		even
0003527E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000353FE                            		even
000353FE                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035568                            		even
00035568                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00035B52 00                         		even
00035B52                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00035C08                            		even
00035C08                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00035CAA                            		even
00035CAA                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00035E06                            		even
00035E06                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00035E6A                            		even
00035E6A                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00035FBC                            		even
00035FBC                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003649E                            		even
0003649E                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003660E                            		even
0003660E                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000368C6                            		even
000368C6                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000369FE                            		even
000369FE                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036B28                            		even
00036B28                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00036C38                            		even
00036C38                            ; ---------------------------------------------------------------------------
00036C38                            ; Compressed graphics - MZ stuff
00036C38                            ; ---------------------------------------------------------------------------
00036C38                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00036EC6                            		even
00036EC6                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00036F84                            		even
00036F84                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003703C                            		even
0003703C                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037090                            		even
00037090                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003736E                            		even
0003736E                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00037C84                            		even
00037C84                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00037DE8                            		even
00037DE8                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00037E70                            		even
00037E70                            ; ---------------------------------------------------------------------------
00037E70                            ; Compressed graphics - SLZ stuff
00037E70                            ; ---------------------------------------------------------------------------
00037E70                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000380AC                            		even
000380AC                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
000381F2                            		even
000381F2                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038436                            		even
00038436                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038498                            		even
00038498                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003857A                            		even
0003857A                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003875C                            		even
0003875C                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038868                            		even
00038868                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003890C                            		even
0003890C                            ; ---------------------------------------------------------------------------
0003890C                            ; Compressed graphics - SYZ stuff
0003890C                            ; ---------------------------------------------------------------------------
0003890C                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038A76                            		even
00038A76                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038AD8                            		even
00038AD8                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00038BBA                            		even
00038BBA                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00038E48                            		even
00038E48                            ; ---------------------------------------------------------------------------
00038E48                            ; Compressed graphics - SBZ stuff
00038E48                            ; ---------------------------------------------------------------------------
00038E48                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00038E9C                            		even
00038E9C                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039138                            		even
00039138                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003933C                            		even
0003933C                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000394DA                            		even
000394DA                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003980A                            		even
0003980A                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
000399E8                            		even
000399E8                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039A40                            		even
00039A40                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00039BC0                            		even
00039BC0                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00039CBE                            		even
00039CBE                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00039E4A                            		even
00039E4A                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00039E9A                            		even
00039E9A                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00039EF2                            		even
00039EF2                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00039FEE                            		even
00039FEE                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A104                            		even
0003A104                            ; ---------------------------------------------------------------------------
0003A104                            ; Compressed graphics - enemies
0003A104                            ; ---------------------------------------------------------------------------
0003A104                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A4C4                            		even
0003A4C4                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003A9B2                            		even
0003A9B2                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003AD58                            		even
0003AD58                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003AF40                            		even
0003AF40                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B62A                            		even
0003B62A                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B892                            		even
0003B892                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BB0E 00                         		even
0003BB0E                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C032                            		even
0003C032                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C2BC                            		even
0003C2BC                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C8DA                            		even
0003C8DA                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CCC2                            		even
0003CCC2                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CFBE                            		even
0003CFBE                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D206                            		even
0003D206                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D49E                            		even
0003D49E                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D67C                            		even
0003D67C                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D80A                            		even
0003D80A                            ; ---------------------------------------------------------------------------
0003D80A                            ; Compressed graphics - various
0003D80A                            ; ---------------------------------------------------------------------------
0003D80A                            Nem_TitleCard:      incbin  artnem\ttlcards.bin ; title cards
0003E80A                            Nem_TitleCard_End:  even
0003E80A                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E900                            		even
0003E900                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003EA06                            		even
0003EA06                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003EAFA                            		even
0003EAFA                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003EEAC 00                         		even
0003EEAC                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003F512                            		even
0003F512                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003F5C2                            		even
0003F5C2                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F754                            		even
0003F754                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F856                            		even
0003F856                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F932                            		even
0003F932                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003FDAE                            		even
0003FDAE                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003FE6E                            		even
0003FE6E                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003FFE2                            		even
0003FFE2                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
000402E4                            		even
000402E4                            ; ---------------------------------------------------------------------------
000402E4                            ; Compressed graphics - continue screen
000402E4                            ; ---------------------------------------------------------------------------
000402E4                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00040594                            		even
00040594                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000407CE                            		even
000407CE                            ; ---------------------------------------------------------------------------
000407CE                            ; Compressed graphics - animals
000407CE                            ; ---------------------------------------------------------------------------
000407CE                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040926                            		even
00040926                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00040A82                            		even
00040A82                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040BFE                            		even
00040BFE                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040D1A                            		even
00040D1A                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040E50                            		even
00040E50                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040F8A                            		even
00040F8A                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000410E6                            		even
000410E6                            ; ---------------------------------------------------------------------------
000410E6                            ; Compressed graphics - primary patterns and block mappings
000410E6                            ; ---------------------------------------------------------------------------
000410E6                            Blk16_GHZ:	incbin	map16\ghz.bin
00041A14                            		even
00041A14                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00043074                            		even
00043074                            Nem_GHZ_2nd:	incbin	artkos\8x8ghz.kos	; GHZ secondary patterns
00045444                            		even
00045444                            Blk256_GHZ:	incbin	map256_u\ghz.bin
0004F844                            		even
0004F844                            Blk16_LZ:	incbin	map16\lz.bin
0004FC08                            		even
0004FC08                            Nem_LZ:		incbin	artkos\8x8lz.kos	; LZ primary patterns
00051778                            		even
00051778                            Blk256_LZ:	incbin	map256_u\lz.bin
0005BB78                            		even
0005BB78                            Blk16_MZ:	incbin	map16\mz.bin
0005C382                            		even
0005C382                            Nem_MZ:		incbin	artkos\8x8mz.kos	; MZ primary patterns
0005E33C                            		even
0005E33C                            Blk256_MZ:	incbin	map256_u\mz.bin
0006873C                            		even
0006873C                            Blk16_SLZ:	incbin	map16\slz.bin
00068F20                            		even
00068F20                            Nem_SLZ:	incbin	artkos\8x8slz.kos	; SLZ primary patterns
0006B61A                            		even
0006B61A                            Blk256_SLZ:	incbin	map256_u\slz.bin
00075A1A                            		even
00075A1A                            Blk16_SYZ:	incbin	map16\syz.bin
000762C8                            		even
000762C8                            Nem_SYZ:	incbin	artkos\8x8syz.kos	; SYZ primary patterns
0007893C                            		even
0007893C                            Blk256_SYZ:	incbin	map256_u\syz.bin
00082D3C                            		even
00082D3C                            Blk16_SBZ:	incbin	map16\sbz.bin
00083AFC                            		even
00083AFC                            Nem_SBZ:	incbin	artkos\8x8sbz.kos	; SBZ primary patterns
00085D2A                            		even
00085D2A                            Blk256_SBZ:	incbin	map256_u\sbz.bin
0009012A                            		even
0009012A                            ; ---------------------------------------------------------------------------
0009012A                            ; Compressed graphics - bosses and ending sequence
0009012A                            ; ---------------------------------------------------------------------------
0009012A                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0009098E                            		even
0009098E                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00090C78                            		even
00090C78                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000914FC                            		even
000914FC                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00091D28                            		even
00091D28                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00092490                            		even
00092490                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00092A10                            		even
00092A10                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00092B30                            		even
00092B30                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00092D2E                            		even
00092D2E                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00093F0C                            		even
00093F0C                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00094850                            		even
00094850                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00094C26                            		even
00094C26                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000951B6                            		even
000951B6                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0009543E                            		even
0009543E                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00095A3C                            		even
00095A3C                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00095CC4                            		even
00095CC4                            		incbin	misc\padding2.bin
00095DC8                            		even
00095DC8                            ; ---------------------------------------------------------------------------
00095DC8                            ; Collision data
00095DC8                            ; ---------------------------------------------------------------------------
00095DC8                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00095EC8                            		even
00095EC8                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00096EC8                            		even
00096EC8                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00097EC8                            		even
00097EC8                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00098062                            		even
00098062                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0009813E                            		even
0009813E                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000982CE                            		even
000982CE                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000984C2                            		even
000984C2                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000986B6                            		even
000986B6                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0009890E                            		even
0009890E                            ; ---------------------------------------------------------------------------
0009890E                            ; Special layouts
0009890E                            ; ---------------------------------------------------------------------------
0009890E                            SS_1:		incbin	sslayout\1.bin
00098B88                            		even
00098B88                            SS_2:		incbin	sslayout\2.bin
00098F9A                            		even
00098F9A                            SS_3:		incbin	sslayout\3.bin
000992F6                            		even
000992F6                            SS_4:		incbin	sslayout\4.bin
000997D0                            		even
000997D0                            SS_5:		incbin	sslayout\5.bin
00099CA2                            		even
00099CA2                            SS_6:		incbin	sslayout\6.bin
00099FB2                            		even
00099FB2                            ; ---------------------------------------------------------------------------
00099FB2                            ; Animated uncompressed graphics
00099FB2                            ; ---------------------------------------------------------------------------
00099FB2                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0009A1B2                            		even
0009A1B2                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0009A5B2                            		even
0009A5B2                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0009AA32                            		even
0009AA32                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0009AD32                            		even
0009AD32                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0009B332                            		even
0009B332                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0009B632                            		even
0009B632                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0009C0B2                            		even
0009C0B2                            
0009C0B2                            ; ---------------------------------------------------------------------------
0009C0B2                            ; Level	layout index
0009C0B2                            ; ---------------------------------------------------------------------------
0009C0B2 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0009C0B8 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0009C0BE 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0009C0C4 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0009C0CA 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0009C0D0 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0009C0D6 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0009C0DC 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0009C0E2 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0009C0E8 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0009C0EE 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0009C0F4 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0009C0FA 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009C100 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009C106 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009C10C 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0009C112 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0009C118 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0009C11E 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0009C124 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0009C12A 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0009C130 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0009C136 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0009C13C 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0009C142 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009C148 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009C14E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009C154 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009C15A                            
0009C15A                            Level_GHZ1:	incbin	levels\ghz1.bin
0009C24C                            		even
0009C24C 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0009C250                            Level_GHZ2:	incbin	levels\ghz2.bin
0009C318                            		even
0009C318 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0009C31C                            Level_GHZ3:	incbin	levels\ghz3.bin
0009C43E                            		even
0009C43E                            Level_GHZbg:	incbin	levels\ghzbg.bin
0009C460                            		even
0009C460 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0009C464 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0009C468                            
0009C468                            Level_LZ1:	incbin	levels\lz1.bin
0009C56A                            		even
0009C56A                            Level_LZbg:	incbin	levels\lzbg.bin
0009C66C                            		even
0009C66C 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0009C670                            Level_LZ2:	incbin	levels\lz2.bin
0009C70A                            		even
0009C70A 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0009C70E                            Level_LZ3:	incbin	levels\lz3.bin
0009C828                            		even
0009C828 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0009C82C                            Level_SBZ3:	incbin	levels\sbz3.bin
0009C8E6                            		even
0009C8E6 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0009C8EA                            
0009C8EA                            Level_MZ1:	incbin	levels\mz1.bin
0009C988                            		even
0009C988                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0009CA02                            		even
0009CA02                            Level_MZ2:	incbin	levels\mz2.bin
0009CAA6                            		even
0009CAA6                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0009CB38                            		even
0009CB38 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0009CB3C                            Level_MZ3:	incbin	levels\mz3.bin
0009CC1E                            		even
0009CC1E                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0009CCC2                            		even
0009CCC2 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0009CCC6 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0009CCCA                            
0009CCCA                            Level_SLZ1:	incbin	levels\slz1.bin
0009CDDC                            		even
0009CDDC                            Level_SLZbg:	incbin	levels\slzbg.bin
0009CE56                            		even
0009CE56                            Level_SLZ2:	incbin	levels\slz2.bin
0009CF46                            		even
0009CF46                            Level_SLZ3:	incbin	levels\slz3.bin
0009D060                            		even
0009D060 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0009D064                            
0009D064                            Level_SYZ1:	incbin	levels\syz1.bin
0009D120                            		even
0009D120                            Level_SYZbg:	incbin	levels\syzbg.bin
0009D15A                            		even
0009D15A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0009D15E                            Level_SYZ2:	incbin	levels\syz2.bin
0009D262                            		even
0009D262 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0009D266                            Level_SYZ3:	incbin	levels\syz3.bin
0009D3C0                            		even
0009D3C0 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0009D3C4 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0009D3C8                            
0009D3C8                            Level_SBZ1:	incbin	levels\sbz1.bin
0009D4EA                            		even
0009D4EA                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0009D528                            		even
0009D528                            Level_SBZ2:	incbin	levels\sbz2.bin
0009D66A                            		even
0009D66A                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0009D7D4                            		even
0009D7D4 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0009D7D8 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0009D7DC                            Level_End:	incbin	levels\ending.bin
0009D7FC                            		even
0009D7FC 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0009D800                            
0009D800                            ; ---------------------------------------------------------------------------
0009D800                            ; Animated uncompressed giant ring graphics
0009D800                            ; ---------------------------------------------------------------------------
0009D800                            Art_BigRing:	incbin	artunc\bigring.bin
0009E440                            		even
0009E440                            
0009E440                            		incbin	misc\padding3.bin
0009E4DC                            		even
0009E4DC                            
0009E4DC                            ; ---------------------------------------------------------------------------
0009E4DC                            ; Sprite locations index
0009E4DC                            ; ---------------------------------------------------------------------------
0009E4DC 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E4E0 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E4E4 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E4E8 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E4EC 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E4F0 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E4F4 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E4F8 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E4FC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E500 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E504 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E508 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E50C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E510 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E514 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E518 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E51C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E520 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E524 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E528 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E52C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E530 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E534 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E538 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E53C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E540 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E544 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E548 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E54C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E550 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0009E554 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009E558 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E55C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E560 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0009E564 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009E568 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E56C FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0009E572                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0009E890                            		even
0009E890                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0009EC92                            		even
0009EC92                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0009F190                            		even
0009F190                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0009F55C                            		even
0009F55C                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0009F844                            		even
0009F844                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0009FE02                            		even
0009FE02                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000A01F2                            		even
000A01F2                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000A0224                            		even
000A0224                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000A0256                            		even
000A0256                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000A0288                            		even
000A0288                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000A02BA                            		even
000A02BA                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000A0304                            		even
000A0304                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000A0342                            		even
000A0342                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000A05DC                            		even
000A05DC                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000A09FC                            		even
000A09FC                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000A0EB8                            		even
000A0EB8                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000A12B4                            		even
000A12B4                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000A1596                            		even
000A1596                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000A19F2                            		even
000A19F2                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000A1D82                            		even
000A1D82                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000A215A                            		even
000A215A                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000A264C                            		even
000A264C                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000A2C7C                            		even
000A2C7C                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000A31F8                            		even
000A31F8                            ObjPos_FZ:	incbin	objpos\fz.bin
000A320A                            		even
000A320A                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000A323C                            		even
000A323C                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000A326E                            		even
000A326E                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000A32A0                            		even
000A32A0                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000A32D2                            		even
000A32D2                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000A3304                            		even
000A3304                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000A333C                            		even
000A333C                            ObjPos_End:	incbin	objpos\ending.bin
000A3498                            		even
000A3498 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000A349E                            ; ---------------------------------------------------------------------------
000A349E                            ; Sprite locations index
000A349E                            ; ---------------------------------------------------------------------------
000A349E 0000 0000                  RingPos_Index:	dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34A2 0000 0000                  		dc.w Rings_GHZ2-RingPos_Index, Rings_Null-RingPos_Index
000A34A6 0000 0000                  		dc.w Rings_GHZ3-RingPos_Index, Rings_Null-RingPos_Index
000A34AA 0000 0000                  		dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34AE 0000 0000                  		dc.w Rings_LZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34B2 0000 0000                  		dc.w Rings_LZ2-RingPos_Index, Rings_Null-RingPos_Index
000A34B6 0000 0000                  		dc.w Rings_LZ3-RingPos_Index, Rings_Null-RingPos_Index
000A34BA 0000 0000                  		dc.w Rings_SBZ3-RingPos_Index, Rings_Null-RingPos_Index
000A34BE 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34C2 0000 0000                  		dc.w Rings_MZ2-RingPos_Index, Rings_Null-RingPos_Index
000A34C6 0000 0000                  		dc.w Rings_MZ3-RingPos_Index, Rings_Null-RingPos_Index
000A34CA 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34CE 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34D2 0000 0000                  		dc.w Rings_SLZ2-RingPos_Index, Rings_Null-RingPos_Index
000A34D6 0000 0000                  		dc.w Rings_SLZ3-RingPos_Index, Rings_Null-RingPos_Index
000A34DA 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34DE 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34E2 0000 0000                  		dc.w Rings_SYZ2-RingPos_Index, Rings_Null-RingPos_Index
000A34E6 0000 0000                  		dc.w Rings_SYZ3-RingPos_Index, Rings_Null-RingPos_Index
000A34EA 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34EE 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34F2 0000 0000                  		dc.w Rings_SBZ2-RingPos_Index, Rings_Null-RingPos_Index
000A34F6 0000 0000                  		dc.w Rings_FZ-RingPos_Index, Rings_Null-RingPos_Index
000A34FA 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34FE 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3502 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3506 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A350A 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A350E                            Rings_GHZ1:	incbin	rings\ghz1_INDIVIDUAL.bin
000A3780                            		even
000A3780                            Rings_GHZ2:	incbin	rings\ghz2_INDIVIDUAL.bin
000A3972                            		even
000A3972                            Rings_GHZ3:	incbin	rings\ghz3_INDIVIDUAL.bin
000A3B64                            		even
000A3B64                            Rings_LZ1:	incbin	rings\lz1_INDIVIDUAL.bin
000A3C7E                            		even
000A3C7E                            Rings_LZ2:	incbin	rings\lz2_INDIVIDUAL.bin
000A3D68                            		even
000A3D68                            Rings_LZ3:	incbin	rings\lz3_INDIVIDUAL.bin
000A3DDE                            		even
000A3DDE                            Rings_SBZ3:	incbin	rings\sbz3_INDIVIDUAL.bin
000A3F94                            		even
000A3F94                            Rings_MZ1:	incbin	rings\mz1_INDIVIDUAL.bin
000A4092                            		even
000A4092                            Rings_MZ2:	incbin	rings\mz2_INDIVIDUAL.bin
000A4174                            		even
000A4174                            Rings_MZ3:	incbin	rings\mz3_INDIVIDUAL.bin
000A429A                            		even
000A429A                            Rings_SLZ1:	incbin	rings\slz1_INDIVIDUAL.bin
000A44DC                            		even
000A44DC                            Rings_SLZ2:	incbin	rings\slz2_INDIVIDUAL.bin
000A47AE                            		even
000A47AE                            Rings_SLZ3:	incbin	rings\slz3_INDIVIDUAL.bin
000A4A80                            		even
000A4A80                            Rings_SYZ1:	incbin	rings\syz1_INDIVIDUAL.bin
000A4CFA                            		even
000A4CFA                            Rings_SYZ2:	incbin	rings\syz2_INDIVIDUAL.bin
000A5078                            		even
000A5078                            Rings_SYZ3:	incbin	rings\syz3_INDIVIDUAL.bin
000A530A                            		even
000A530A                            Rings_SBZ1:	incbin	rings\sbz1_INDIVIDUAL.bin
000A5624                            		even
000A5624                            Rings_SBZ2:	incbin	rings\sbz2_INDIVIDUAL.bin
000A588E                            		even
000A588E                            Rings_FZ:	incbin	rings\fz_INDIVIDUAL.bin
000A5894                            		even
000A5894                            Rings_End:	incbin	rings\ending_INDIVIDUAL.bin
000A589A                            		even
000A589A FFFF 0000                  Rings_Null:	dc.b $FF, $FF, 0, 0
000A589E                            ; ---------------------------------------------------------------------------
000A589E                            ; ---------------------------------------------------------------------------
000A589E                            		incbin	misc\padding4.bin
000A5EC8                            		even
000A5EC8 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000A5ECC 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000A5ED0 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000A5ED4 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000A5ED8 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000A5EDC 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000A5EE0                            ; ---------------------------------------------------------------------------
000A5EE0                            ; PSG instruments used in music
000A5EE0                            ; ---------------------------------------------------------------------------
000A5EE0 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000A5EEC 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000A5EF8 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000A5F04                            PSG1:		incbin	sound\psg1.bin
000A5F1B                            PSG2:		incbin	sound\psg2.bin
000A5F22                            PSG3:		incbin	sound\psg3.bin
000A5F33                            PSG4:		incbin	sound\psg4.bin
000A5F3E                            PSG6:		incbin	sound\psg6.bin
000A5F4D                            PSG5:		incbin	sound\psg5.bin
000A5F77                            PSG7:		incbin	sound\psg7.bin
000A5F93                            PSG8:		incbin	sound\psg8.bin
000A5FBB                            PSG9:		incbin	sound\psg9.bin
000A5FCC                            
000A5FCC 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000A5FD4                            ; ---------------------------------------------------------------------------
000A5FD4                            ; Music	Pointers
000A5FD4                            ; ---------------------------------------------------------------------------
000A5FD4 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000A5FDC 0000 0000 0000 0000        		dc.l Music83, Music84
000A5FE4 0000 0000 0000 0000        		dc.l Music85, Music86
000A5FEC 0000 0000 0000 0000        		dc.l Music87, Music88
000A5FF4 0000 0000 0000 0000        		dc.l Music89, Music8A
000A5FFC 0000 0000 0000 0000        		dc.l Music8B, Music8C
000A6004 0000 0000 0000 0000        		dc.l Music8D, Music8E
000A600C 0000 0000 0000 0000        		dc.l Music8F, Music90
000A6014 0000 0000 0000 0000        		dc.l Music91, Music92
000A601C 0000 0000                  		dc.l Music93
000A6020                            ; ---------------------------------------------------------------------------
000A6020                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000A6020                            ; ---------------------------------------------------------------------------
000A6020 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000A6030 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000A6040 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000A6050 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000A6060 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000A6070 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000A6080 9090 9090                  		dc.b $90, $90, $90, $90
000A6084                            
000A6084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6084                            
000A6084                            sub_71B4C:	
000A6084 4DF9 00FF F000             		lea	($FFF000).l,a6
000A608A                            
000A608A 41F9 00A0 0C68             		lea	($A00000+YM_Buffer).l,a0		; CHG: load buffer ID address
000A6090 33FC 0100 00A1 1100 0839+  		StopZ80						; CHG: request Z80 stop on
000A60A2 1010                       		move.b	(a0),d0					; CHG: load buffer ID
000A60A4 33FC 0000 00A1 1100        		StartZ80					; CHG: request Z80 stop off
000A60AC B02E 0010                  		cmp.b	$10(a6),d0				; CHG: has the 68k recently written to this buffer?
000A60B0 6600                       		bne.s	SD_ValidList				; CHG: if not, branch
000A60B2 4E75                       		rts						; CHG: return (cannot write to YM cue until Z80 is finished with it)
000A60B4                            
000A60B4                            SD_ValidList:
000A60B4 2D7C 00A0 1000 0010        		move.l	#$A00000+YM_Buffer1,$10(a6)		; set the cue address to buffer 1
000A60BC 4A00                       		tst.b	d0					; is the Z80 accessing buffer 1?
000A60BE 6600                       		bne.s	SD_WriteBuffer1				; if not, branch
000A60C0 2D7C 00A0 1400 0010        		move.l	#$A00000+YM_Buffer2,$10(a6)		; set the cue address to buffer 2
000A60C8                            
000A60C8                            SD_WriteBuffer1:
000A60C8 1D40 0010                  		move.b	d0,$10(a6)				; set buffer ID the 68k is writing to
000A60CC 422E 000E                  		clr.b	$E(a6)
000A60D0 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000A60D4 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000A60D8 532E 0001                  		subq.b	#1,1(a6)
000A60DC 6600                       		bne.s	loc_71B9E
000A60DE 4EBA 0000                  		jsr	sub_7260C(pc)
000A60E2                            
000A60E2                            loc_71B9E:
000A60E2 102E 0004                  		move.b	4(a6),d0
000A60E6 6700                       		beq.s	loc_71BA8
000A60E8 4EBA 0000                  		jsr	sub_72504(pc)
000A60EC                            
000A60EC                            loc_71BA8:
000A60EC 4A2E 0024                  		tst.b	$24(a6)
000A60F0 6700                       		beq.s	loc_71BB2
000A60F2 4EBA 0000                  		jsr	sub_7267C(pc)
000A60F6                            
000A60F6                            loc_71BB2:
000A60F6 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000A60FA 6700                       		beq.s	loc_71BBC	; if not, branch
000A60FC 4EBA 0000                  		jsr	Sound_Play(pc)
000A6100                            
000A6100                            loc_71BBC:
000A6100 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A6106 6700                       		beq.s	loc_71BC8
000A6108 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000A610C                            
000A610C                            loc_71BC8:
000A610C 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
000A6110 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
000A6112 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
000A6118                            
000A6118                            SD_NextPCM:
000A6118 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
000A611C 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
000A6120 4A15                       		tst.b	(a5)
000A6122 6A00                       		bpl.s	loc_71BD4
000A6124 4EBA 0000                  		jsr	sub_71C4E(pc)
000A6128                            
000A6128                            loc_71BD4:
000A6128 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
000A612C 422E 0008                  		clr.b	8(a6)
000A6130 7E05                       		moveq	#5,d7
000A6132                            
000A6132                            loc_71BDA:
000A6132 DAFC 0030                  		adda.w	#$30,a5
000A6136 4A15                       		tst.b	(a5)
000A6138 6A00                       		bpl.s	loc_71BE6
000A613A 4EBA 0000                  		jsr	sub_71CCA(pc)
000A613E                            
000A613E                            loc_71BE6:
000A613E 51CF FFF2                  		dbf	d7,loc_71BDA
000A6142                            
000A6142 7E02                       		moveq	#2,d7
000A6144                            
000A6144                            loc_71BEC:
000A6144 DAFC 0030                  		adda.w	#$30,a5
000A6148 4A15                       		tst.b	(a5)
000A614A 6A00                       		bpl.s	loc_71BF8
000A614C 4EBA 0000                  		jsr	sub_72850(pc)
000A6150                            
000A6150                            loc_71BF8:
000A6150 51CF FFF2                  		dbf	d7,loc_71BEC
000A6154                            
000A6154 1D7C 0080 000E             		move.b	#$80,$E(a6)
000A615A 7E02                       		moveq	#2,d7
000A615C                            
000A615C                            loc_71C04:
000A615C DAFC 0030                  		adda.w	#$30,a5
000A6160 4A15                       		tst.b	(a5)
000A6162 6A00                       		bpl.s	loc_71C10
000A6164 4EBA 0000                  		jsr	sub_71CCA(pc)
000A6168                            
000A6168                            loc_71C10:
000A6168 51CF FFF2                  		dbf	d7,loc_71C04
000A616C                            
000A616C 7E02                       		moveq	#2,d7
000A616E                            
000A616E                            loc_71C16:
000A616E DAFC 0030                  		adda.w	#$30,a5
000A6172 4A15                       		tst.b	(a5)
000A6174 6A00                       		bpl.s	loc_71C22
000A6176 4EBA 0000                  		jsr	sub_72850(pc)
000A617A                            
000A617A                            loc_71C22:
000A617A 51CF FFF2                  		dbf	d7,loc_71C16
000A617E 1D7C 0040 000E             		move.b	#$40,$E(a6)
000A6184 DAFC 0030                  		adda.w	#$30,a5
000A6188 4A15                       		tst.b	(a5)
000A618A 6A00                       		bpl.s	loc_71C38
000A618C 4EBA 0000                  		jsr	sub_71CCA(pc)
000A6190                            
000A6190                            loc_71C38:
000A6190 DAFC 0030                  		adda.w	#$30,a5
000A6194 4A15                       		tst.b	(a5)
000A6196 6A00                       		bpl.s	loc_71C44
000A6198 4EBA 0000                  		jsr	sub_72850(pc)
000A619C                            
000A619C                            loc_71C44:
000A619C 4E75                       		rts	
000A619E                            
000A619E                            ; End of function sub_71B4C
000A619E                            
000A619E                            
000A619E                            ; ===========================================================================
000A619E                            ; ---------------------------------------------------------------------------
000A619E                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A619E                            ; ---------------------------------------------------------------------------
000A619E                            
000A619E                            SDAC_CheckMute:
000A619E 102D 0021                  	move.b	$21(a5),d0
000A61A2 B02D 0022                  	cmp.b	$22(a5),d0
000A61A6 6700                       	beq.s	S71C4E_NoCHG
000A61A8 4A00                       	tst.b	d0
000A61AA 6A00                       	bpl.s	S71C4E_NoMute
000A61AC                            
000A61AC 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A61AE 49F9 0000 0000             		lea	(StopSample).l,a4		; MUTE
000A61B4 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A61BA 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A61C0 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A61C6 6600                       		bne.s	SDAC_CM_NotePCM2				; if not, branch for PCM 2 writing
000A61C8 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A61CE 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A61D4                            
000A61D4                            SDAC_CM_NotePCM2:
000A61D4 33FC 0100 00A1 1100 0839+  		StopZ80
000A61E6 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A61E8 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61EA 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61EC 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A61EE 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61F0 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61F2 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A61F4 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61F6 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61F8 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A61FA 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61FC 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61FE 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A6200 33FC 0000 00A1 1100        		StartZ80
000A6208                            
000A6208                            ;	jsr	sub_726FE(pc)
000A6208                            ;	move.b	$0A(a5),d1
000A6208                            ;	andi.b	#%00111111,d1
000A6208                            ;	move.b	#$B4,d0
000A6208                            ;	jsr	loc_72716
000A6208 08D5 0006                  	bset.b	#$06,(a5)
000A620C 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A6212                            
000A6212                            S71C4E_NoCHG:
000A6212 4E75                       	rts
000A6214                            
000A6214                            S71C4E_NoMute:
000A6214 1B40 0022                  	move.b	d0,$22(a5)
000A6218                            ;	move.b	$0B(a5),d0
000A6218                            ;	jsr	SFM_UpdateVoice(pc)
000A6218                            ;	move.b	$0A(a5),d1
000A6218                            ;	move.b	#$B4,d0
000A6218                            ;	jsr	loc_72716
000A6218 08D5 0006                  	bset.b	#$06,(a5)
000A621C 4E75                       	rts
000A621E                            
000A621E                            ; ===========================================================================
000A621E                            ; ---------------------------------------------------------------------------
000A621E                            ; Subroutine to run a DAC channel ; CHG: The entire routine...
000A621E                            ; ---------------------------------------------------------------------------
000A621E                            
000A621E                            sub_71C4E:
000A621E 6100 FF7E                  	bsr.w	SDAC_CheckMute			; EXTRA - ON/OFF
000A6222                            
000A6222                            	; Volume is being done first, as it'll update with a single
000A6222                            	; frame delay, the PCM playback is a frame behind, as is the
000A6222                            	; pitch control, but the volume change happens immediately,
000A6222                            	; thus, a delay is needed.
000A6222                            
000A6222                            	; *VOLUME DELAY WAS HERE*
000A6222                            
000A6222                            		; And now back to the normal DAC
000A6222                            		; SMPS routine
000A6222                            
000A6222 532D 000E                  		subq.b	#$01,$0E(a5)				; decrease note timer
000A6226 6600 0000                  		bne.w	SDAC_HoldNote				; if still running, branch
000A622A 0895 0004                  		bclr.b	#$04,(a5)				; disable softkey
000A622E 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6232 286D 0004                  		movea.l	$04(a5),a4				; load tracker address
000A6236 6000                       		bra.s	SDAC_ReadTracker			; continue into loop
000A6238                            
000A6238                            SDAC_ReadFlag:
000A6238 4EBA 0000                  		jsr	sub_72A5A(pc)				; run flags subroutine
000A623C                            
000A623C                            SDAC_ReadTracker:
000A623C 7A00                       		moveq	#$00,d5					; clear d5
000A623E 1A1C                       		move.b	(a4)+,d5				; load byte from SMPS track
000A6240 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A6244 0C05 00E0                  		cmpi.b	#$E0,d5					; is it a flag?
000A6248 64EE                       		bcc.s	SDAC_ReadFlag				; if so, branch
000A624A 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A624E                            
000A624E                            	SDAC_Update:				; EXTRA
000A624E 08D5 0001                  		bset.b	#$01,(a5)				; set channel as resting
000A6252 0405 0080                  		subi.b	#$80,d5					; minus starting note
000A6256 6700                       		beq.s	SDAC_NoFrequency			; if it's mute, branch
000A6258 5515                       		subq.b	#$02,(a5)				; set channel as NOT resting
000A625A DA2D 0008                  		add.b	$08(a5),d5				; add pitch to it
000A625E DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A6262 DA45                       		add.w	d5,d5					; multiply by size of word
000A6264 3B7B 5000 0010             		move.w	(FrequenciesPCM-2)(pc,d5.w),$10(a5)	; save frequency to use
000A626A                            
000A626A                            SDAC_NoFrequency:
000A626A                            
000A626A 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A626E 6600 0000                  	bne.w	SDAC_Frequency			; EXTRA
000A6272 1A1C                       		move.b	(a4)+,d5				; load next note
000A6274 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A6278 534C                       		subq.w	#$01,a4					; move back (it's not a timer after all)
000A627A 1B6D 000F 000E             		move.b	$0F(a5),$0E(a5)				; reset timer
000A6280 6000 0000                  		bra.w	SDAC_PlayNote				; continue
000A6284                            
000A6284                            ; ---------------------------------------------------------------------------
000A6284                            ; Note to PCM frequency conversion table
000A6284                            ; ---------------------------------------------------------------------------
000A6284                            ; The octave numbers below assume the samples are playing a default pitch/note
000A6284                            ; of C3 (A5)
000A6284                            ; ---------------------------------------------------------------------------
000A6284                            
000A6284                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000A6284                            
000A6284 0010 0011 0012 0013 0014+  FrequenciesPCM:	dc.w	$0010,$0011,$0012,$0013,$0014,$0015,$0017,$0018,$0019,$001B,$001D,$001E   ; Octave 0 - (81 - 8C)
000A629C 0020 0022 0024 0026 0028+  		dc.w	$0020,$0022,$0024,$0026,$0028,$002B,$002D,$0030,$0033,$0036,$0039,$003C   ; Octave 1 - (8D - 98)
000A62B4 0040 0044 0048 004C 0051+  		dc.w	$0040,$0044,$0048,$004C,$0051,$0055,$005B,$0060,$0066,$006C,$0072,$0079   ; Octave 2 - (99 - A4)
000A62CC 0080 0088 0090 0098 00A1+  		dc.w	$0080,$0088,$0090,$0098,$00A1,$00AB,$00B5,$00C0,$00CB,$00D7,$00E4,$00F2   ; Octave 3 - (A5 - B0)
000A62E4 0100 010F 011F 0130 0143+  		dc.w	$0100,$010F,$011F,$0130,$0143,$0156,$016A,$0180,$0196,$01AF,$01C8,$01E3   ; Octave 4 - (B1 - BC)
000A62FC 0200 021E 023F 0261 0285+  		dc.w	$0200,$021E,$023F,$0261,$0285,$02AB,$02D4,$02FF,$032D,$035D,$0390,$03C7   ; Octave 5 - (BD - C8)
000A6314 0400 043D 047D 04C2 050A+  		dc.w	$0400,$043D,$047D,$04C2,$050A,$0557,$05A8,$05FE,$0659,$06BA,$0721,$078D   ; Octave 6 - (C9 - D4)
000A632C 0800 087A 08FB 0983 0A14+  		dc.w	$0800,$087A,$08FB,$0983,$0A14,$0AAE,$0B50,$0BFD,$0CB3,$0D74,$0E41,$0F1A   ; Octave 7 - (D5 - DF)
000A6344                            
000A6344                            ; ---------------------------------------------------------------------------
000A6344                            ; Writing the sample to Dual PCM
000A6344                            ; ---------------------------------------------------------------------------
000A6344                            
000A6344                            SDAC_Timer:
000A6344 4EBA 0000                  		jsr	sub_71D40(pc)				; correct timer
000A6348                            
000A6348                            SDAC_PlayNote:
000A6348 2B4C 0004                  		move.l	a4,$04(a5)				; update tracker address
000A634C                            
000A634C                            	SDAC_MuteNote:
000A634C 49F9 0000 0000             		lea	(StopSample).l,a4			; load "stop sample" address
000A6352 4A2D 0022                  	tst.b	$22(a5)
000A6356 6B00                       	bmi.s	SDAC_Rest
000A6358 1015                       		move.b	(a5),d0					; load flags
000A635A 0800 0004                  		btst	#$04,d0					; is soft key set?
000A635E 6600                       		bne.s	SDAC_SoftKey				; if so, branch
000A6360 E610                       		roxr.b	#$03,d0					; rotate around
000A6362 6500 0000                  		bcs.w	SDAC_Return				; if the channel is being interrupted (bit 2), branch
000A6366 6B00                       		bmi.s	SDAC_Rest				; if the rest bit was set, branch
000A6368 7000                       		moveq	#$00,d0					; clear d0
000A636A 102D 000B                  		move.b	$0B(a5),d0				; load sample ID
000A636E D040                       		add.w	d0,d0					; multiply by 4 (long-word size)
000A6370 D040                       		add.w	d0,d0					; ''
000A6372 49F9 0000 0000             		lea	(SampleList).l,a4			; load sample list
000A6378 2874 0000                  		move.l	(a4,d0.w),a4				; load correct sample z80 pointer address
000A637C                            
000A637C                            SDAC_Rest:
000A637C 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A637E 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A6384 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A638A 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A6390 6600                       		bne.s	SDAC_NotePCM2				; if not, branch for PCM 2 writing
000A6392 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A6398 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A639E                            
000A639E                            SDAC_NotePCM2:
000A639E 33FC 0100 00A1 1100 0839+  		StopZ80
000A63B0 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A63B2 12DC                       		move.b	(a4)+,(a1)+				; ''
000A63B4 12DC                       		move.b	(a4)+,(a1)+				; ''
000A63B6 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A63B8 12DC                       		move.b	(a4)+,(a1)+				; ''
000A63BA 12DC                       		move.b	(a4)+,(a1)+				; ''
000A63BC 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A63BE 12DC                       		move.b	(a4)+,(a1)+				; ''
000A63C0 12DC                       		move.b	(a4)+,(a1)+				; ''
000A63C2 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A63C4 12DC                       		move.b	(a4)+,(a1)+				; ''
000A63C6 12DC                       		move.b	(a4)+,(a1)+				; ''
000A63C8 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A63CA 33FC 0000 00A1 1100        		StartZ80
000A63D2                            
000A63D2                            SDAC_SoftKey:
000A63D2                            
000A63D2                            	SDAC_Frequency:
000A63D2                            
000A63D2 102D 0009                  		move.b	$09(a5),d0				; load current volume
000A63D6 7200                       	moveq	#$00,d1				; EXTRA
000A63D8 122E 0016                  	move.b	$16(a6),d1			; EXTRA
000A63DC                            ;	lea	(FOP_VolumeList).l,a0		; EXTRA
000A63DC                            ;	move.b	(a0,d1.w),d1			; EXTRA
000A63DC D201                       	add.b	d1,d1
000A63DE D001                       	add.b	d1,d0
000A63E0                            
000A63E0 1200                       		move.b	d0,d1					; copy volume to d1
000A63E2 6A00                       		bpl.s	SDAC_ValidVolume			; if it is between 00 and 80, branch
000A63E4 7080                       		moveq	#$FFFFFF80,d0				; set volume to mute (81 - FF is out of bounds)
000A63E6                            
000A63E6                            SDAC_ValidVolume:
000A63E6 B02D 000C                  		cmp.b	$0C(a5),d0				; has the volume changed?
000A63EA 6700                       		beq.s	SDAC_NoVolume				; if not, branch (don't bother)
000A63EC 1B40 000C                  		move.b	d0,$0C(a5)				; update volume
000A63F0 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A63F2 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; load volume change instruction address
000A63F8 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; load PCM 2 volume address
000A63FE 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A6404 6600                       		bne.s	SDAC_VolumePCM2				; if not, branch for PCM 2 writing
000A6406 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; load PCM 1 volume address
000A640C                            
000A640C                            SDAC_VolumePCM2:
000A640C 33FC 0100 00A1 1100 0839+  		StopZ80
000A641E 1080                       		move.b	d0,(a0)					; change PCM volume
000A6420 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A6422 33FC 0000 00A1 1100        		StartZ80
000A642A                            
000A642A                            SDAC_NoVolume:
000A642A                            
000A642A 3C2D 0010                  		move.w	$10(a5),d6				; load frequency
000A642E 0815 0003                  		btst	#$03,(a5)				; is modulation turned on?
000A6432 6700                       		beq.s	SDAC_WriteFrequency			; if not, branch
000A6434 286D 0014                  		movea.l	$14(a5),a4				; load modulation address
000A6438 43ED 0018                  		lea	$18(a5),a1				; load modulation settings RAM
000A643C 0815 0004                  		btst.b	#$04,(a5)				; is soft key set?
000A6440 6600                       		bne.s	SDAC_NoResetModulation			; if so, branch
000A6442 12DC                       		move.b	(a4)+,(a1)+				; reset settings...
000A6444 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6446 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6448 101C                       		move.b	(a4)+,d0				; ''
000A644A E208                       		lsr.b	#$01,d0					; ''
000A644C 12C0                       		move.b	d0,(a1)+				; ''
000A644E 4259                       		clr.w	(a1)+					; clear modulation frequency
000A6450                            
000A6450                            SDAC_NoResetModulation:
000A6450 DC6D 001C                  		add.w	$1C(a5),d6				; add modulation pitch
000A6454 6000                       		bra.s	SDAC_WriteFrequency			; continue
000A6456                            
000A6456                            ; ---------------------------------------------------------------------------
000A6456                            ; Holding a note...
000A6456                            ; ---------------------------------------------------------------------------
000A6456                            
000A6456                            SDAC_HoldNote:
000A6456 1015                       		move.b	(a5),d0					; load flags
000A6458 0200 0003                  		andi.b	#%00000011,d0				; is the channel being interrupted by an SFX, or is resting?
000A645C 6600 0000                  		bne.w	SDAC_Return				; if so, branch
000A6460                            
000A6460 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A6464 6700                       	beq.s	SDAC_NoUpdate			; EXTRA
000A6466 7A00                       	moveq	#$00,d5				; EXTRA
000A6468 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A646C 6000 FDE0                  	bra.w	SDAC_Update			; EXTRA
000A6470                            
000A6470                            	SDAC_NoUpdate:				; EXTRA
000A6470 4EBA 0000                  		jsr	sub_71D9E(pc)				; check for release
000A6474 4EBA 0000                  		jsr	sub_71DC6(pc)				; run modulation and get right frequency to d6
000A6478                            
000A6478                            	; d6 = frequency
000A6478                            
000A6478                            SDAC_WriteFrequency:
000A6478 102D 001E                  		move.b	$1E(a5),d0				; load detune
000A647C 4880                       		ext.w	d0					; sign extend to word
000A647E D046                       		add.w	d6,d0					; add to frequency (move it up or down subtly)
000A6480 0815 0005                  		btst.b	#$05,(a5)				; is the reverse flag set?
000A6484 6700                       		beq.s	SDAC_NoReverse				; if not, branch
000A6486 4440                       		neg.w	d0					; reverse
000A6488                            	;	subi.w	#$0100*2,d0				; move back to Dual PCM's neutral
000A6488                            
000A6488                            SDAC_NoReverse:
000A6488                            	;	move.w	d0,d3					; copy to d3
000A6488                            	;	smi	d2					; set extend byte if value is negative
000A6488                            	;	addi.w	#$0100,d3				; convert to true neutral (for overflow)
000A6488                            	;	muls.w	#Z80E_Read,d3				; multiply by number of reads the Z80 performs (read 18 vs playback 10)
000A6488                            	;	move.b	d3,d5					; load fraction to d5
000A6488                            	;	asr.l	#$08,d3					; divide by 100
000A6488                            	;	move.w	d3,-(sp)				; get upper byte of overflow value
000A6488                            	;	move.b	(sp),d4					; ''
000A6488                            	;	move.w	d0,(sp)					; get upper byte of pitch/frequency
000A6488                            	;	move.b	(sp),d1					; ''
000A6488                            	;	addq.w	#$02,sp					; move stack forwards (would've done via increment and back...
000A6488                            								; ...index, but interrupts could be a problem).
000A6488                            	; d0 = XXXX.DD
000A6488                            	; d1 = XXQQ.XX
000A6488                            	; d2 = QQXX.XX
000A6488                            	; d3 = XXVV.XX
000A6488                            	; d4 = VVXX.XX
000A6488                            	; d5 = XXXX.OO
000A6488                            
000A6488 74D2                       		moveq	#$FFFFFF00|%11010010,d2
000A648A 1200                       		move.b	d0,d1
000A648C E048                       		lsr.w	#$08,d0
000A648E 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A6494 6600                       		bne.s	SDAC_FrequePCM2				; if not, branch for PCM 2 writing
000A6496 33FC 0100 00A1 1100 0839+  		StopZ80
000A64A8                            	;	move.b	d0,($A00000+PCM1_RateDiv+1)		; write pitch main dividend
000A64A8                            	;	move.b	d1,($A00000+PCM1_RateQuo+1)		; write pitch quotient low
000A64A8                            	;	move.b	d2,($A00000+PCM1_RateQuo+2)		; write pitch quotient high
000A64A8                            	;	move.b	d3,($A00000+PCM1_Overflow+1)		; write low overflow
000A64A8                            	;	move.b	d4,($A00000+PCM1_Overflow+2)		; write high overflow
000A64A8                            	;	move.b	d5,($A00000+PCM1_OverDiv+1)		; write dividend overflow
000A64A8                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A64A8                            
000A64A8 13C0 00A0 05DD             		move.b	d0,($A00000+PCM1_PitchHigh+1)
000A64AE 13C1 00A0 05E8             		move.b	d1,($A00000+PCM1_PitchLow+1)
000A64B4 13C2 00A0 05D2             		move.b	d2,($A00000+PCM1_ChangePitch)		; change "JP C" to "JP NC"
000A64BA 33FC 0000 00A1 1100        		StartZ80
000A64C2                            
000A64C2                            SDAC_Return:
000A64C2 4E75                       		rts						; return
000A64C4                            
000A64C4                            SDAC_FrequePCM2:
000A64C4 33FC 0100 00A1 1100 0839+  		StopZ80
000A64D6                            	;	move.b	d0,($A00000+PCM2_RateDiv+1)		; write pitch main dividend
000A64D6                            	;	move.b	d1,($A00000+PCM2_RateQuo+1)		; write pitch quotient low
000A64D6                            	;	move.b	d2,($A00000+PCM2_RateQuo+2)		; write pitch quotient high
000A64D6                            	;	move.b	d3,($A00000+PCM2_Overflow+1)		; write low overflow
000A64D6                            	;	move.b	d4,($A00000+PCM2_Overflow+2)		; write high overflow
000A64D6                            	;	move.b	d5,($A00000+PCM2_OverDiv+1)		; write dividend overflow
000A64D6                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A64D6                            
000A64D6 13C0 00A0 060E             		move.b	d0,($A00000+PCM2_PitchHigh+1)
000A64DC 13C1 00A0 0619             		move.b	d1,($A00000+PCM2_PitchLow+1)
000A64E2 13C2 00A0 0603             		move.b	d2,($A00000+PCM2_ChangePitch)		; change "JP C" to "JP NC"
000A64E8 33FC 0000 00A1 1100        		StartZ80
000A64F0 4E75                       		rts						; return
000A64F2                            
000A64F2                            ; ===========================================================================
000A64F2                            ; ---------------------------------------------------------------------------
000A64F2                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A64F2                            ; ---------------------------------------------------------------------------
000A64F2                            
000A64F2                            SFM_CheckMute:
000A64F2 4A2E 000E                  	tst.b	$0E(a6)
000A64F6 6600                       	bne.s	S71CCA_NoCHG
000A64F8 102D 0021                  	move.b	$21(a5),d0
000A64FC B02D 0022                  	cmp.b	$22(a5),d0
000A6500 6700                       	beq.s	S71CCA_NoCHG
000A6502 4A00                       	tst.b	d0
000A6504 6A00                       	bpl.s	S71CCA_NoMute
000A6506 4EBA 0000                  	jsr	sub_726FE(pc)
000A650A 122D 000A                  	move.b	$0A(a5),d1
000A650E 0201 003F                  	andi.b	#%00111111,d1
000A6512 103C 00B4                  	move.b	#$B4,d0
000A6516 4EB9 0000 0000             	jsr	loc_72716
000A651C 08D5 0006                  	bset.b	#$06,(a5)
000A6520 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A6526                            
000A6526                            S71CCA_NoCHG:
000A6526 4E75                       	rts
000A6528                            
000A6528                            S71CCA_NoMute:
000A6528 1B40 0022                  	move.b	d0,$22(a5)
000A652C 102D 000B                  	move.b	$0B(a5),d0
000A6530 4EBA 0000                  	jsr	SFM_UpdateVoice(pc)
000A6534                            ;	jsr	loc_726E2(pc)
000A6534 122D 000A                  	move.b	$0A(a5),d1
000A6538 103C 00B4                  	move.b	#$B4,d0
000A653C 4EB9 0000 0000             	jsr	loc_72716
000A6542 08D5 0006                  	bset.b	#$06,(a5)
000A6546 4E75                       	rts
000A6548                            
000A6548                            ; ===========================================================================
000A6548                            ; ---------------------------------------------------------------------------
000A6548                            ; Subroutine to run an FM channel
000A6548                            ; ---------------------------------------------------------------------------
000A6548                            
000A6548                            sub_71CCA:				; XREF: sub_71B4C
000A6548 61A8                       	bsr.s	SFM_CheckMute			; EXTRA - ON/OFF
000A654A                            
000A654A 532D 000E                  		subq.b	#1,$E(a5)
000A654E 6600                       		bne.s	loc_71CE0
000A6550 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6554 0895 0004                  		bclr	#4,(a5)
000A6558 4EBA 0000                  		jsr	sub_71CEC(pc)
000A655C 4EBA 0000                  		jsr	sub_71E18(pc)
000A6560 6000 0000                  		bra.w	loc_726E2
000A6564                            ; ===========================================================================
000A6564                            
000A6564                            loc_71CE0:
000A6564 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6568 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A656A 4EB9 0000 0000             	jsr	sub_72CB4			; EXTRA
000A6570 7A00                       	moveq	#$00,d5				; EXTRA
000A6572 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A6576 0405 0080                  	subi.b	#$80,d5				; EXTRA
000A657A 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A657C 4EB9 0000 0000             	jsr	SFM_UpdateFreque		; EXTRA
000A6582 6000 0000                  	bra.w	loc_71E24			; EXTRA
000A6586                            
000A6586                            	SFM_NoUpdate:				; EXTRA
000A6586 4EBA 0000                  		jsr	sub_71D9E(pc)
000A658A 4EBA 0000                  		jsr	sub_71DC6(pc)
000A658E 6000 0000                  		bra.w	loc_71E24
000A6592                            ; End of function sub_71CCA
000A6592                            
000A6592                            
000A6592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6592                            
000A6592                            
000A6592                            sub_71CEC:				; XREF: sub_71CCA
000A6592 286D 0004                  		movea.l	4(a5),a4
000A6596 0895 0001                  		bclr	#1,(a5)
000A659A                            
000A659A                            loc_71CF4:
000A659A 7A00                       		moveq	#0,d5
000A659C 1A1C                       		move.b	(a4)+,d5
000A659E 0C05 00E0                  		cmpi.b	#-$20,d5
000A65A2 6500                       		bcs.s	loc_71D04
000A65A4 4EBA 0000                  		jsr	sub_72A5A(pc)
000A65A8 60F0                       		bra.s	loc_71CF4
000A65AA                            ; ===========================================================================
000A65AA                            
000A65AA                            loc_71D04:
000A65AA 4EBA 0000                  		jsr	sub_726FE(pc)
000A65AE 4A05                       		tst.b	d5
000A65B0 6A00                       		bpl.s	loc_71D1A
000A65B2 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A65B6 4EBA 0000                  		jsr	sub_71D22(pc)
000A65BA 1A1C                       		move.b	(a4)+,d5
000A65BC 6A00                       		bpl.s	loc_71D1A
000A65BE 534C                       		subq.w	#1,a4
000A65C0 6000 0000                  		bra.w	sub_71D60
000A65C4                            ; ===========================================================================
000A65C4                            
000A65C4                            loc_71D1A:
000A65C4 4EBA 0000                  		jsr	sub_71D40(pc)
000A65C8 6000 0000                  		bra.w	sub_71D60
000A65CC                            ; End of function sub_71CEC
000A65CC                            
000A65CC                            
000A65CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A65CC                            
000A65CC                            
000A65CC                            sub_71D22:				; XREF: sub_71CEC
000A65CC 0405 0080                  		subi.b	#$80,d5
000A65D0 6700                       		beq.s	loc_71D58
000A65D2                            
000A65D2                            	SFM_UpdateFreque:			; EXTRA
000A65D2 DA2D 0008                  		add.b	8(a5),d5
000A65D6 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A65DA 0245 007F                  		andi.w	#$7F,d5
000A65DE E34D                       		lsl.w	#1,d5
000A65E0 41FA 0000                  		lea	word_72790(pc),a0
000A65E4 3C30 5000                  		move.w	(a0,d5.w),d6
000A65E8 3B46 0010                  		move.w	d6,$10(a5)
000A65EC 4E75                       		rts	
000A65EE                            ; End of function sub_71D22
000A65EE                            
000A65EE                            
000A65EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A65EE                            
000A65EE                            
000A65EE                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A65EE 1005                       		move.b	d5,d0
000A65F0 122D 0002                  		move.b	2(a5),d1
000A65F4                            
000A65F4                            loc_71D46:
000A65F4 5301                       		subq.b	#1,d1
000A65F6 6700                       		beq.s	loc_71D4E
000A65F8 D005                       		add.b	d5,d0
000A65FA 60F8                       		bra.s	loc_71D46
000A65FC                            ; ===========================================================================
000A65FC                            
000A65FC                            loc_71D4E:
000A65FC 1B40 000F                  		move.b	d0,$F(a5)
000A6600 1B40 000E                  		move.b	d0,$E(a5)
000A6604 4E75                       		rts	
000A6606                            ; End of function sub_71D40
000A6606                            
000A6606                            ; ===========================================================================
000A6606                            
000A6606                            loc_71D58:				; XREF: sub_71D22
000A6606 08D5 0001                  		bset	#1,(a5)
000A660A 426D 0010                  		clr.w	$10(a5)
000A660E                            
000A660E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A660E                            
000A660E                            
000A660E                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000A660E 2B4C 0004                  		move.l	a4,4(a5)
000A6612 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000A6618 0815 0004                  		btst	#4,(a5)
000A661C 6600                       		bne.s	locret_71D9C
000A661E 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000A6624 422D 000C                  		clr.b	$C(a5)
000A6628 0815 0003                  		btst	#3,(a5)
000A662C 6700                       		beq.s	locret_71D9C
000A662E 206D 0014                  		movea.l	$14(a5),a0
000A6632 1B58 0018                  		move.b	(a0)+,$18(a5)
000A6636 1B58 0019                  		move.b	(a0)+,$19(a5)
000A663A 1B58 001A                  		move.b	(a0)+,$1A(a5)
000A663E 1018                       		move.b	(a0)+,d0
000A6640 E208                       		lsr.b	#1,d0
000A6642 1B40 001B                  		move.b	d0,$1B(a5)
000A6646 426D 001C                  		clr.w	$1C(a5)
000A664A                            
000A664A                            locret_71D9C:
000A664A 4E75                       		rts	
000A664C                            ; End of function sub_71D60
000A664C                            
000A664C                            
000A664C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A664C                            
000A664C                            
000A664C                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000A664C 4A2D 0012                  		tst.b	$12(a5)
000A6650 6700                       		beq.s	locret_71DC4
000A6652 532D 0012                  		subq.b	#1,$12(a5)
000A6656 6600                       		bne.s	locret_71DC4
000A6658 4A2E 0008                  		tst.b	$08(a6)						; CHG: is this a PCM channel?
000A665C 6B00                       		bmi.s	SDCR_StopPCM					; if so, branch (skipping rest flag setting)
000A665E 08D5 0001                  		bset	#1,(a5)
000A6662 4A2D 0001                  		tst.b	1(a5)
000A6666 6B00 0000                  		bmi.w	loc_71DBE
000A666A 4EBA 0000                  		jsr	sub_726FE(pc)
000A666E 584F                       		addq.w	#4,sp
000A6670 4E75                       		rts	
000A6672                            ; ===========================================================================
000A6672                            
000A6672                            loc_71DBE:
000A6672 4EBA 0000                  		jsr	sub_729A0(pc)
000A6676 584F                       		addq.w	#4,sp
000A6678                            
000A6678                            locret_71DC4:
000A6678 4E75                       		rts	
000A667A                            ; End of function sub_71D9E
000A667A                            
000A667A                            SDCR_StopPCM:
000A667A 33FC 0100 00A1 1100 0839+  		StopZ80
000A668C 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6692 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A6698 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A669A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A669C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A669E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A66A0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66A2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66A4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A66A6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66A8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66AA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A66AC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66AE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66B0 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A66B8 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A66BE 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A66C4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A66C6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66C8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66CA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A66CC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66CE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66D0 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A66D2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66D4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66D6 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A66D8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66DA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66DC 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A66E4 33FC 0000 00A1 1100        		StartZ80
000A66EC 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A66EE 4E75                       		rts							; CHG: return
000A66F0                            
000A66F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A66F0                            
000A66F0                            
000A66F0                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000A66F0 0815 0003                  		btst	#3,(a5)
000A66F4 6700                       		beq.s	locret_71E16
000A66F6 4A2D 0018                  		tst.b	$18(a5)
000A66FA 6700                       		beq.s	loc_71DDA
000A66FC 532D 0018                  		subq.b	#1,$18(a5)
000A6700 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6702 4E75                       		rts	
000A6704                            ; ===========================================================================
000A6704                            
000A6704                            loc_71DDA:
000A6704 532D 0019                  		subq.b	#1,$19(a5)
000A6708 6700                       		beq.s	loc_71DE2
000A670A 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A670C 4E75                       		rts	
000A670E                            ; ===========================================================================
000A670E                            
000A670E                            loc_71DE2:
000A670E 206D 0014                  		movea.l	$14(a5),a0
000A6712 1B68 0001 0019             		move.b	1(a0),$19(a5)
000A6718 4A2D 001B                  		tst.b	$1B(a5)
000A671C 6600                       		bne.s	loc_71DFE
000A671E 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000A6724 442D 001A                  		neg.b	$1A(a5)
000A6728 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A672A 4E75                       		rts	
000A672C                            ; ===========================================================================
000A672C                            
000A672C                            loc_71DFE:
000A672C 532D 001B                  		subq.b	#1,$1B(a5)
000A6730 1C2D 001A                  		move.b	$1A(a5),d6
000A6734 4886                       		ext.w	d6
000A6736 DC6D 001C                  		add.w	$1C(a5),d6
000A673A 3B46 001C                  		move.w	d6,$1C(a5)
000A673E DC6D 0010                  		add.w	$10(a5),d6
000A6742 4E75                       		rts							; CHG: return (don't skip)
000A6744                            
000A6744                            locret_71E16:
000A6744 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6746 4E75                       		rts	
000A6748                            ; End of function sub_71DC6
000A6748                            
000A6748                            
000A6748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6748                            
000A6748                            
000A6748                            sub_71E18:				; XREF: sub_71CCA
000A6748 0815 0001                  		btst	#1,(a5)
000A674C 6600                       		bne.s	locret_71E48
000A674E 3C2D 0010                  		move.w	$10(a5),d6
000A6752 6700                       		beq.s	loc_71E4A
000A6754                            
000A6754                            loc_71E24:				; XREF: sub_71CCA
000A6754 102D 001E                  		move.b	$1E(a5),d0
000A6758 4880                       		ext.w	d0
000A675A DC40                       		add.w	d0,d6
000A675C 0815 0002                  		btst	#2,(a5)
000A6760 6600                       		bne.s	locret_71E48
000A6762 4A2E 000E                  	tst.b	$0E(a6)
000A6766 6600                       	bne.s	locret_71E48_2
000A6768 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A676C 6600                       	bne.s	locret_71E48
000A676E                            
000A676E                            	locret_71E48_2:
000A676E 3206                       		move.w	d6,d1
000A6770 E049                       		lsr.w	#8,d1
000A6772 103C 00A4                  		move.b	#-$5C,d0
000A6776 4EBA 0000                  		jsr	sub_72722(pc)
000A677A 1206                       		move.b	d6,d1
000A677C 103C 00A0                  		move.b	#-$60,d0
000A6780 4EBA 0000                  		jsr	sub_72722(pc)
000A6784                            
000A6784                            locret_71E48:
000A6784 4E75                       		rts	
000A6786                            ; ===========================================================================
000A6786                            
000A6786                            loc_71E4A:
000A6786 08D5 0001                  		bset	#1,(a5)
000A678A 4E75                       		rts	
000A678C                            ; End of function sub_71E18
000A678C                            
000A678C                            ; ===========================================================================
000A678C                            
000A678C                            loc_71E50:				; XREF: sub_71B4C
000A678C 6B00                       		bmi.s	loc_71E94
000A678E 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000A6794 6700 0000                  		beq.w	loc_71EFE
000A6798 1D7C 0002 0003             		move.b	#2,3(a6)
000A679E 7602                       		moveq	#2,d3
000A67A0 103C 00B4                  		move.b	#-$4C,d0
000A67A4 7200                       		moveq	#0,d1
000A67A6                            
000A67A6                            loc_71E6A:
000A67A6 4EBA 0000                  		jsr	sub_7272E(pc)
000A67AA 4EBA 0000                  		jsr	sub_72764(pc)
000A67AE 5200                       		addq.b	#1,d0
000A67B0 51CB FFF4                  		dbf	d3,loc_71E6A
000A67B4                            
000A67B4 7602                       		moveq	#2,d3
000A67B6 7028                       		moveq	#$28,d0
000A67B8                            
000A67B8                            loc_71E7C:
000A67B8 1203                       		move.b	d3,d1
000A67BA 4EBA 0000                  		jsr	sub_7272E(pc)
000A67BE 5801                       		addq.b	#4,d1
000A67C0 4EBA 0000                  		jsr	sub_7272E(pc)
000A67C4 51CB FFF2                  		dbf	d3,loc_71E7C
000A67C8                            
000A67C8 4EBA 0000                  		jsr	sub_729B6(pc)
000A67CC 6000 F9CE                  		bra.w	loc_71C44
000A67D0                            ; ===========================================================================
000A67D0                            
000A67D0                            loc_71E94:				; XREF: loc_71E50
000A67D0 422E 0003                  		clr.b	3(a6)
000A67D4 7630                       		moveq	#$30,d3
000A67D6 4BEE 0040                  		lea	$40(a6),a5
000A67DA 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
000A67DC                            
000A67DC                            loc_71EA0:
000A67DC 0815 0007                  		btst	#7,(a5)
000A67E0 6700                       		beq.s	loc_71EB8
000A67E2 0815 0002                  		btst	#2,(a5)
000A67E6 6600                       		bne.s	loc_71EB8
000A67E8 4A2E 000E                  	tst.b	$0E(a6)
000A67EC 6600                       	bne.s	loc_71EB8_2
000A67EE 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A67F2 6600                       	bne.s	loc_71EB8
000A67F4                            
000A67F4                            	loc_71EB8_2:
000A67F4 103C 00B4                  		move.b	#-$4C,d0
000A67F8 122D 000A                  		move.b	$A(a5),d1
000A67FC 4EBA 0000                  		jsr	sub_72722(pc)
000A6800                            
000A6800                            loc_71EB8:
000A6800 DAC3                       		adda.w	d3,a5
000A6802 51CC FFD8                  		dbf	d4,loc_71EA0
000A6806                            
000A6806 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A680A 7802                       		moveq	#2,d4
000A680C                            
000A680C                            loc_71EC4:
000A680C 0815 0007                  		btst	#7,(a5)
000A6810 6700                       		beq.s	loc_71EDC
000A6812 0815 0002                  		btst	#2,(a5)
000A6816 6600                       		bne.s	loc_71EDC
000A6818 4A2E 000E                  	tst.b	$0E(a6)
000A681C 6600                       	bne.s	loc_71EDC_2
000A681E 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6822 6600                       	bne.s	loc_71EDC
000A6824                            
000A6824                            	loc_71EDC_2:
000A6824 103C 00B4                  		move.b	#-$4C,d0
000A6828 122D 000A                  		move.b	$A(a5),d1
000A682C 4EBA 0000                  		jsr	sub_72722(pc)
000A6830                            
000A6830                            loc_71EDC:
000A6830 DAC3                       		adda.w	d3,a5
000A6832 51CC FFD8                  		dbf	d4,loc_71EC4
000A6836                            
000A6836 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A683A 0815 0007                  		btst	#7,(a5)
000A683E 6700                       		beq.s	loc_71EFE
000A6840 0815 0002                  		btst	#2,(a5)
000A6844 6600                       		bne.s	loc_71EFE
000A6846 4A2E 000E                  	tst.b	$0E(a6)
000A684A 6600                       	bne.s	loc_71EFE_2
000A684C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6850 6600                       	bne.s	loc_71EFE
000A6852                            
000A6852                            	loc_71EFE_2:
000A6852 103C 00B4                  		move.b	#-$4C,d0
000A6856 122D 000A                  		move.b	$A(a5),d1
000A685A 4EBA 0000                  		jsr	sub_72722(pc)
000A685E                            
000A685E                            loc_71EFE:
000A685E 6000 F93C                  		bra.w	loc_71C44
000A6862                            
000A6862                            ; ---------------------------------------------------------------------------
000A6862                            ; Subroutine to	play a sound or	music track
000A6862                            ; ---------------------------------------------------------------------------
000A6862                            
000A6862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6862                            
000A6862                            
000A6862                            Sound_Play:				; XREF: sub_71B4C
000A6862 2079 000A 5EC8             		movea.l	(Go_SoundTypes).l,a0
000A6868 43EE 000A                  		lea	$A(a6),a1	; load music track number
000A686C 1616                       		move.b	0(a6),d3
000A686E 7802                       		moveq	#2,d4
000A6870                            
000A6870                            loc_71F12:
000A6870 1011                       		move.b	(a1),d0		; move track number to d0
000A6872 1200                       		move.b	d0,d1
000A6874 4219                       		clr.b	(a1)+
000A6876 0400 0081                  		subi.b	#$81,d0
000A687A 6500                       		bcs.s	loc_71F3E
000A687C 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A6882 6700                       		beq.s	loc_71F2C
000A6884 1D41 000A                  		move.b	d1,$A(a6)
000A6888 6000                       		bra.s	loc_71F3E
000A688A                            ; ===========================================================================
000A688A                            
000A688A                            loc_71F2C:
000A688A 0240 007F                  		andi.w	#$7F,d0
000A688E 1430 0000                  		move.b	(a0,d0.w),d2
000A6892 B403                       		cmp.b	d3,d2
000A6894 6500                       		bcs.s	loc_71F3E
000A6896 1602                       		move.b	d2,d3
000A6898 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000A689C                            
000A689C                            loc_71F3E:
000A689C 51CC FFD2                  		dbf	d4,loc_71F12
000A68A0                            
000A68A0 4A03                       		tst.b	d3
000A68A2 6B00                       		bmi.s	locret_71F4A
000A68A4 1C83                       		move.b	d3,0(a6)
000A68A6                            
000A68A6                            locret_71F4A:
000A68A6 4E75                       		rts	
000A68A8                            ; End of function Sound_Play
000A68A8                            
000A68A8                            
000A68A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A68A8                            
000A68A8                            
000A68A8                            Sound_ChkValue:				; XREF: sub_71B4C
000A68A8 7E00                       		moveq	#0,d7
000A68AA 1E2E 0009                  		move.b	9(a6),d7
000A68AE 6700 0000                  		beq.w	Sound_E4
000A68B2 6A00                       		bpl.s	locret_71F8C
000A68B4 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000A68BA 0C07 009F                  		cmpi.b	#$9F,d7
000A68BE 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000A68C2 0C07 00A0                  		cmpi.b	#$A0,d7
000A68C6 6500 0000                  		bcs.w	locret_71F8C
000A68CA 0C07 00CF                  		cmpi.b	#$CF,d7
000A68CE 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000A68D2 0C07 00D0                  		cmpi.b	#$D0,d7
000A68D6 6500 0000                  		bcs.w	locret_71F8C
000A68DA 0C07 00E0                  		cmpi.b	#$E0,d7
000A68DE 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000A68E2 0C07 00E4                  		cmpi.b	#$E4,d7
000A68E6 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
000A68E8                            
000A68E8                            locret_71F8C:
000A68E8 4E75                       		rts	
000A68EA                            ; ===========================================================================
000A68EA                            
000A68EA                            Sound_E0toE4:				; XREF: Sound_ChkValue
000A68EA 0407 00E0                  		subi.b	#$E0,d7
000A68EE E54F                       		lsl.w	#2,d7
000A68F0 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000A68F4                            ; ===========================================================================
000A68F4                            
000A68F4                            Sound_ExIndex:
000A68F4 6000 0000                  		bra.w	Sound_E0
000A68F8                            ; ===========================================================================
000A68F8 6000 0000                  		bra.w	Sound_E1
000A68FC                            ; ===========================================================================
000A68FC 6000 0000                  		bra.w	Sound_E2
000A6900                            ; ===========================================================================
000A6900 6000 0000                  		bra.w	Sound_E3
000A6904                            ; ===========================================================================
000A6904 6000 0000                  		bra.w	Sound_E4
000A6908                            ; ===========================================================================
000A6908                            ; ---------------------------------------------------------------------------
000A6908                            ; Play "Say-gaa" PCM sound
000A6908                            ; ---------------------------------------------------------------------------
000A6908                            
000A6908                            Sound_E1:
000A6908 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
000A691A 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
000A6920 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
000A6926 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
000A692A 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
000A6930 3604                       		move.w	d4,d3					; MJ: get lower word size
000A6932 4844                       		swap	d4					; MJ: get upper word size
000A6934                            
000A6934                            PlayPCM_Loop:
000A6934 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
000A6936 702B                       		moveq	#$2B,d0					; MJ: set delay time
000A6938 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
000A693C 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
000A6940 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
000A6944 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
000A6948 584F                       		addq.w	#$04,sp					; MJ: skip return address
000A694A 534B                       		subq.w	#$01,a3					; MJ: move back to address port
000A694C 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
000A694E 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
000A6950 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
000A6954 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
000A695C 4E75                       		rts						; MJ: return
000A695E                            
000A695E                            ; ===========================================================================
000A695E                            ; ---------------------------------------------------------------------------
000A695E                            ; Play music track $81-$9F
000A695E                            ; ---------------------------------------------------------------------------
000A695E                            
000A695E                            Sound_81to9F:
000A695E 33FC 0100 00A1 1100 0839+  		StopZ80
000A6970 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6976 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A697C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A697E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6980 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6982 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6984 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6986 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6988 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A698A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A698C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A698E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6990 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6992 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6994 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A699C 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A69A2 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A69A8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A69AA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A69AC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A69AE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A69B0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A69B2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A69B4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A69B6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A69B8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A69BA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A69BC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A69BE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A69C0 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A69C8 33FC 0000 00A1 1100        		StartZ80
000A69D0                            
000A69D0 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000A69D4 6600                       		bne.s	loc_72024	; if not, branch
000A69D6 4A2E 0027                  		tst.b	$27(a6)
000A69DA 6600 0000                  		bne.w	loc_721B6
000A69DE 4BEE 0040                  		lea	$40(a6),a5
000A69E2 700A                       		moveq	#10,d0					; MJ: number of channels in total
000A69E4                            
000A69E4                            loc_71FE6:
000A69E4 0895 0002                  		bclr	#2,(a5)
000A69E8 DAFC 0030                  		adda.w	#$30,a5
000A69EC 51C8 FFF6                  		dbf	d0,loc_71FE6
000A69F0                            
000A69F0 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A69F4 7005                       		moveq	#5,d0
000A69F6                            
000A69F6                            loc_71FF8:
000A69F6 0895 0007                  		bclr	#7,(a5)
000A69FA DAFC 0030                  		adda.w	#$30,a5
000A69FE 51C8 FFF6                  		dbf	d0,loc_71FF8
000A6A02 4216                       		clr.b	0(a6)
000A6A04 204E                       		movea.l	a6,a0
000A6A06 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A6A0A 303C 0087                  		move.w	#$87,d0
000A6A0E                            
000A6A0E                            loc_72012:
000A6A0E 22D8                       		move.l	(a0)+,(a1)+
000A6A10 51C8 FFFC                  		dbf	d0,loc_72012
000A6A14                            
000A6A14 1D7C 0080 0027             		move.b	#$80,$27(a6)
000A6A1A 4216                       		clr.b	0(a6)
000A6A1C 6000                       		bra.s	loc_7202C
000A6A1E                            ; ===========================================================================
000A6A1E                            
000A6A1E                            loc_72024:
000A6A1E 422E 0027                  		clr.b	$27(a6)
000A6A22 422E 0026                  		clr.b	$26(a6)
000A6A26                            
000A6A26                            loc_7202C:
000A6A26 4EBA 0000                  		jsr	sub_725CA(pc)
000A6A2A                            
000A6A2A 2879 000A 5ED8             		movea.l	(off_719A0).l,a4
000A6A30 0407 0081                  		subi.b	#$81,d7
000A6A34 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000A6A3A 2879 000A 5ED0             		movea.l	(Go_MusicIndex).l,a4
000A6A40 E54F                       		lsl.w	#2,d7
000A6A42 2874 7000                  		movea.l	(a4,d7.w),a4
000A6A46 7000                       		moveq	#0,d0
000A6A48 3014                       		move.w	(a4),d0
000A6A4A D08C                       		add.l	a4,d0
000A6A4C 2D40 0018                  		move.l	d0,$18(a6)
000A6A50 102C 0005                  		move.b	5(a4),d0
000A6A54 1D40 0028                  		move.b	d0,$28(a6)
000A6A58 4A2E 002A                  		tst.b	$2A(a6)
000A6A5C 6700                       		beq.s	loc_72068
000A6A5E 102E 0029                  		move.b	$29(a6),d0
000A6A62                            
000A6A62                            loc_72068:
000A6A62 1D40 0002                  		move.b	d0,2(a6)
000A6A66 1D40 0001                  		move.b	d0,1(a6)
000A6A6A 7200                       		moveq	#0,d1
000A6A6C 264C                       		movea.l	a4,a3
000A6A6E 5C4C                       		addq.w	#6,a4
000A6A70 7E00                       		moveq	#0,d7
000A6A72 1E2B 0002                  		move.b	2(a3),d7
000A6A76 6700 0000                  		beq.w	loc_72114
000A6A7A 5307                       		subq.b	#1,d7
000A6A7C 123C 00C0                  		move.b	#-$40,d1
000A6A80 182B 0004                  		move.b	4(a3),d4
000A6A84 7C30                       		moveq	#$30,d6
000A6A86 1A3C 0001                  		move.b	#1,d5
000A6A8A 43EE 0040                  		lea	$40(a6),a1
000A6A8E 45FA 0000                  		lea	byte_721BA(pc),a2
000A6A92                            
000A6A92                            loc_72098:
000A6A92 08D1 0007                  		bset	#7,(a1)
000A6A96 135A 0001                  		move.b	(a2)+,1(a1)
000A6A9A 1344 0002                  		move.b	d4,2(a1)
000A6A9E 1346 000D                  		move.b	d6,$D(a1)
000A6AA2 1341 000A                  		move.b	d1,$A(a1)
000A6AA6 1345 000E                  		move.b	d5,$E(a1)
000A6AAA 7000                       		moveq	#0,d0
000A6AAC 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
000A6AB0 137C 0080 000C             		move.b	#$80,$0C(a1)				; MJ: set last frame's volume to something impossible (volume is from C0 - 40)
000A6AB6 301C                       		move.w	(a4)+,d0
000A6AB8 D08B                       		add.l	a3,d0
000A6ABA 2340 0004                  		move.l	d0,4(a1)
000A6ABE 335C 0008                  		move.w	(a4)+,8(a1)
000A6AC2 D2C6                       		adda.w	d6,a1
000A6AC4 51CF FFCC                  		dbf	d7,loc_72098
000A6AC8 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
000A6ACA 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
000A6ACE 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
000A6AD4 6600                       		bne.s	loc_720D8
000A6AD6                            	;	moveq	#$2B,d0					; MJ: removed...
000A6AD6 7200                       		moveq	#0,d1
000A6AD8 4EBA 0000                  		jsr	sub_7272E(pc)
000A6ADC 6000 0000                  		bra.w	loc_72114
000A6AE0                            ; ===========================================================================
000A6AE0                            
000A6AE0                            loc_720D8:
000A6AE0 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
000A6AE4                            
000A6AE4                            	; --- Key off FM 6 ---
000A6AE4                            
000A6AE4 7028                       		moveq	#$28,d0
000A6AE6 7206                       		moveq	#6,d1
000A6AE8 4EBA 0000                  		jsr	sub_7272E(pc)
000A6AEC                            
000A6AEC                            	; --- Sets FM 6 to mute ---
000A6AEC                            
000A6AEC 103C 0042                  		move.b	#$42,d0
000A6AF0 727F                       		moveq	#$7F,d1
000A6AF2 4EBA 0000                  		jsr	sub_72764(pc)
000A6AF6 103C 004A                  		move.b	#$4A,d0
000A6AFA 727F                       		moveq	#$7F,d1
000A6AFC 4EBA 0000                  		jsr	sub_72764(pc)
000A6B00 103C 0046                  		move.b	#$46,d0
000A6B04 727F                       		moveq	#$7F,d1
000A6B06 4EBA 0000                  		jsr	sub_72764(pc)
000A6B0A 103C 004E                  		move.b	#$4E,d0
000A6B0E 727F                       		moveq	#$7F,d1
000A6B10 4EBA 0000                  		jsr	sub_72764(pc)
000A6B14 103C 00B6                  		move.b	#-$4A,d0
000A6B18 123C 00C0                  		move.b	#-$40,d1
000A6B1C 4EBA 0000                  		jsr	sub_72764(pc)
000A6B20                            
000A6B20                            loc_72114:
000A6B20 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A6B22 7E00                       		moveq	#0,d7
000A6B24 1E2B 0003                  		move.b	3(a3),d7
000A6B28 6700                       		beq.s	loc_72154
000A6B2A 5307                       		subq.b	#1,d7
000A6B2C 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
000A6B30 45FA 0000                  		lea	byte_721C2(pc),a2
000A6B34                            
000A6B34                            loc_72126:
000A6B34 08D1 0007                  		bset	#7,(a1)
000A6B38 135A 0001                  		move.b	(a2)+,1(a1)
000A6B3C 1344 0002                  		move.b	d4,2(a1)
000A6B40 1346 000D                  		move.b	d6,$D(a1)
000A6B44 1345 000E                  		move.b	d5,$E(a1)
000A6B48 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
000A6B4E 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
000A6B54 7000                       		moveq	#0,d0
000A6B56 301C                       		move.w	(a4)+,d0
000A6B58 D08B                       		add.l	a3,d0
000A6B5A 2340 0004                  		move.l	d0,4(a1)
000A6B5E 335C 0008                  		move.w	(a4)+,8(a1)
000A6B62 101C                       		move.b	(a4)+,d0
000A6B64 135C 000B                  		move.b	(a4)+,$B(a1)
000A6B68 D2C6                       		adda.w	d6,a1
000A6B6A 51CF FFC8                  		dbf	d7,loc_72126
000A6B6E                            
000A6B6E                            loc_72154:
000A6B6E 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000A6B72 7E05                       		moveq	#5,d7
000A6B74                            
000A6B74                            loc_7215A:
000A6B74 4A11                       		tst.b	(a1)
000A6B76 6A00 0000                  		bpl.w	loc_7217C
000A6B7A 7000                       		moveq	#0,d0
000A6B7C 1029 0001                  		move.b	1(a1),d0
000A6B80 6B00                       		bmi.s	loc_7216E
000A6B82 5500                       		subq.b	#2,d0
000A6B84 E508                       		lsl.b	#2,d0
000A6B86 6000                       		bra.s	loc_72170
000A6B88                            ; ===========================================================================
000A6B88                            
000A6B88                            loc_7216E:
000A6B88 E608                       		lsr.b	#3,d0
000A6B8A                            
000A6B8A                            loc_72170:
000A6B8A 41FA 0000                  		lea	dword_722CC(pc),a0
000A6B8E 2070 0000                  		movea.l	(a0,d0.w),a0
000A6B92 08D0 0002                  		bset	#2,(a0)
000A6B96                            
000A6B96                            loc_7217C:
000A6B96 D2C6                       		adda.w	d6,a1
000A6B98 51CF FFDA                  		dbf	d7,loc_7215A
000A6B9C                            
000A6B9C 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
000A6BA0 6A00                       		bpl.s	loc_7218E
000A6BA2 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A6BA8                            
000A6BA8                            loc_7218E:
000A6BA8 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
000A6BAC 6A00                       		bpl.s	loc_7219A
000A6BAE 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A6BB4                            
000A6BB4                            
000A6BB4                            loc_7219A:
000A6BB4 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000A6BB8 7805                       		moveq	#5,d4
000A6BBA                            
000A6BBA                            loc_721A0:
000A6BBA 4EBA 0000                  		jsr	sub_726FE(pc)
000A6BBE DAC6                       		adda.w	d6,a5
000A6BC0 51CC FFF8                  		dbf	d4,loc_721A0
000A6BC4 7802                       		moveq	#2,d4
000A6BC6                            
000A6BC6                            loc_721AC:
000A6BC6 4EBA 0000                  		jsr	sub_729A0(pc)
000A6BCA DAC6                       		adda.w	d6,a5
000A6BCC 51CC FFF8                  		dbf	d4,loc_721AC
000A6BD0                            
000A6BD0                            loc_721B6:
000A6BD0 584F                       		addq.w	#4,sp
000A6BD2 4E75                       		rts	
000A6BD4                            ; ===========================================================================
000A6BD4 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
000A6BDE 00                         		even
000A6BDE 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000A6BE2                            		even
000A6BE2                            ; ===========================================================================
000A6BE2                            ; ---------------------------------------------------------------------------
000A6BE2                            ; Play normal sound effect
000A6BE2                            ; ---------------------------------------------------------------------------
000A6BE2                            
000A6BE2                            Sound_A0toCF:				; XREF: Sound_ChkValue
000A6BE2 4A2E 0027                  		tst.b	$27(a6)
000A6BE6 6600 0000                  		bne.w	loc_722C6
000A6BEA 4A2E 0004                  		tst.b	4(a6)
000A6BEE 6600 0000                  		bne.w	loc_722C6
000A6BF2 4A2E 0024                  		tst.b	$24(a6)
000A6BF6 6600 0000                  		bne.w	loc_722C6
000A6BFA 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000A6BFE 6600                       		bne.s	Sound_notB5	; if not, branch
000A6C00 4A2E 002B                  		tst.b	$2B(a6)
000A6C04 6600                       		bne.s	loc_721EE
000A6C06 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000A6C0A                            
000A6C0A                            loc_721EE:
000A6C0A 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000A6C10                            
000A6C10                            Sound_notB5:
000A6C10 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000A6C14 6600                       		bne.s	Sound_notA7	; if not, branch
000A6C16 4A2E 002C                  		tst.b	$2C(a6)
000A6C1A 6600 0000                  		bne.w	locret_722C4
000A6C1E 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000A6C24                            
000A6C24                            Sound_notA7:
000A6C24 2079 000A 5ED4             		movea.l	(Go_SoundIndex).l,a0
000A6C2A 0407 00A0                  		subi.b	#$A0,d7
000A6C2E E54F                       		lsl.w	#2,d7
000A6C30 2670 7000                  		movea.l	(a0,d7.w),a3
000A6C34 224B                       		movea.l	a3,a1
000A6C36 7200                       		moveq	#0,d1
000A6C38 3219                       		move.w	(a1)+,d1
000A6C3A D28B                       		add.l	a3,d1
000A6C3C 1A19                       		move.b	(a1)+,d5
000A6C3E 1E19                       		move.b	(a1)+,d7
000A6C40 5307                       		subq.b	#1,d7
000A6C42 7C30                       		moveq	#$30,d6
000A6C44                            
000A6C44                            loc_72228:
000A6C44 7600                       		moveq	#0,d3
000A6C46 1629 0001                  		move.b	1(a1),d3
000A6C4A 7403                       		moveq	#$03,d2					; EXT: set PSG to delay for 2 extra frames (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A6C4C 1803                       		move.b	d3,d4
000A6C4E 6B00                       		bmi.s	loc_72244
000A6C50 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
000A6C54 5543                       		subq.w	#2,d3
000A6C56 E54B                       		lsl.w	#2,d3
000A6C58 4BFA 0000                  		lea	dword_722CC(pc),a5
000A6C5C 2A75 3000                  		movea.l	(a5,d3.w),a5
000A6C60 08D5 0002                  		bset	#2,(a5)
000A6C64 6000                       		bra.s	loc_7226E
000A6C66                            ; ===========================================================================
000A6C66                            
000A6C66                            loc_72244:
000A6C66 E64B                       		lsr.w	#3,d3
000A6C68 4BFA 0000                  		lea	dword_722CC(pc),a5
000A6C6C 2A75 3000                  		movea.l	(a5,d3.w),a5
000A6C70 08D5 0002                  		bset	#2,(a5)
000A6C74 0C04 00C0                  		cmpi.b	#$C0,d4
000A6C78 6600                       		bne.s	loc_7226E
000A6C7A 1004                       		move.b	d4,d0
000A6C7C 0000 001F                  		ori.b	#$1F,d0
000A6C80 13C0 00C0 0011             		move.b	d0,($C00011).l
000A6C86 0840 0005                  		bchg	#5,d0
000A6C8A 13C0 00C0 0011             		move.b	d0,($C00011).l
000A6C90                            
000A6C90                            loc_7226E:
000A6C90 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000A6C94 244D                       		movea.l	a5,a2
000A6C96 700B                       		moveq	#$B,d0
000A6C98                            
000A6C98                            loc_72276:
000A6C98 429A                       		clr.l	(a2)+
000A6C9A 51C8 FFFC                  		dbf	d0,loc_72276
000A6C9E                            
000A6C9E 3A99                       		move.w	(a1)+,(a5)
000A6CA0 1B45 0002                  		move.b	d5,2(a5)
000A6CA4 7000                       		moveq	#0,d0
000A6CA6 3019                       		move.w	(a1)+,d0
000A6CA8 D08B                       		add.l	a3,d0
000A6CAA 2B40 0004                  		move.l	d0,4(a5)
000A6CAE 3B59 0008                  		move.w	(a1)+,8(a5)
000A6CB2 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
000A6CB6 1B46 000D                  		move.b	d6,$D(a5)
000A6CBA 3B7C FFFF 0010             		move.w	#$FFFF,$10(a5)				; CHG: clear PSG's frequency (ensures no frequency writing)
000A6CC0 4A04                       		tst.b	d4
000A6CC2 6B00                       		bmi.s	loc_722A8
000A6CC4 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A6CCA 2B41 0020                  		move.l	d1,$20(a5)
000A6CCE                            
000A6CCE                            loc_722A8:
000A6CCE 51CF FF74                  		dbf	d7,loc_72228
000A6CD2                            
000A6CD2 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A6CD6 6A00                       		bpl.s	loc_722B8
000A6CD8 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A6CDE                            
000A6CDE                            loc_722B8:
000A6CDE 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A6CE2 6A00                       		bpl.s	locret_722C4
000A6CE4 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A6CEA                            
000A6CEA                            locret_722C4:
000A6CEA 4E75                       		rts	
000A6CEC                            ; ===========================================================================
000A6CEC                            
000A6CEC                            loc_722C6:
000A6CEC 4216                       		clr.b	0(a6)
000A6CEE 4E75                       		rts	
000A6CF0                            ; ===========================================================================
000A6CF0 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
000A6CF4 0000 0000                  		dc.l 0
000A6CF8 00FF F130                  		dc.l $FFF100+$30
000A6CFC 00FF F160                  		dc.l $FFF130+$30
000A6D00 00FF F1C0                  		dc.l $FFF190+$30
000A6D04 00FF F1F0                  		dc.l $FFF1C0+$30
000A6D08 00FF F220                  		dc.l $FFF1F0+$30
000A6D0C 00FF F220                  		dc.l $FFF1F0+$30
000A6D10 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000A6D14 0000 0000                  		dc.l 0
000A6D18 00FF F280                  		dc.l $FFF250+$30
000A6D1C 00FF F2B0                  		dc.l $FFF280+$30
000A6D20 00FF F2E0                  		dc.l $FFF2B0+$30
000A6D24 00FF F310                  		dc.l $FFF2E0+$30
000A6D28 00FF F340                  		dc.l $FFF310+$30
000A6D2C 00FF F340                  		dc.l $FFF310+$30
000A6D30                            ; ===========================================================================
000A6D30                            ; ---------------------------------------------------------------------------
000A6D30                            ; Play GHZ waterfall sound
000A6D30                            ; ---------------------------------------------------------------------------
000A6D30                            
000A6D30                            Sound_D0toDF:				; XREF: Sound_ChkValue
000A6D30 4A2E 0027                  		tst.b	$27(a6)
000A6D34 6600 0000                  		bne.w	locret_723C6
000A6D38 4A2E 0004                  		tst.b	4(a6)
000A6D3C 6600 0000                  		bne.w	locret_723C6
000A6D40 4A2E 0024                  		tst.b	$24(a6)
000A6D44 6600 0000                  		bne.w	locret_723C6
000A6D48 2079 000A 5ECC             		movea.l	(Go_SoundD0).l,a0
000A6D4E 0407 00D0                  		subi.b	#$D0,d7
000A6D52 E54F                       		lsl.w	#2,d7
000A6D54 2670 7000                  		movea.l	(a0,d7.w),a3
000A6D58 224B                       		movea.l	a3,a1
000A6D5A 7000                       		moveq	#0,d0
000A6D5C 3019                       		move.w	(a1)+,d0
000A6D5E D08B                       		add.l	a3,d0
000A6D60 2D40 0020                  		move.l	d0,$20(a6)
000A6D64 1A19                       		move.b	(a1)+,d5
000A6D66 1E19                       		move.b	(a1)+,d7
000A6D68 5307                       		subq.b	#1,d7
000A6D6A 7C30                       		moveq	#$30,d6
000A6D6C                            
000A6D6C                            loc_72348:
000A6D6C 1829 0001                  		move.b	1(a1),d4
000A6D70 6B00                       		bmi.s	loc_7235A
000A6D72 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A6D78 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6D7C 6000                       		bra.s	loc_72364
000A6D7E                            ; ===========================================================================
000A6D7E                            
000A6D7E                            loc_7235A:
000A6D7E 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A6D84 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A6D88                            
000A6D88                            loc_72364:
000A6D88 244D                       		movea.l	a5,a2
000A6D8A 700B                       		moveq	#$B,d0
000A6D8C                            
000A6D8C                            loc_72368:
000A6D8C 429A                       		clr.l	(a2)+
000A6D8E 51C8 FFFC                  		dbf	d0,loc_72368
000A6D92                            
000A6D92 3A99                       		move.w	(a1)+,(a5)
000A6D94 1B45 0002                  		move.b	d5,2(a5)
000A6D98 7000                       		moveq	#0,d0
000A6D9A 3019                       		move.w	(a1)+,d0
000A6D9C D08B                       		add.l	a3,d0
000A6D9E 2B40 0004                  		move.l	d0,4(a5)
000A6DA2 3B59 0008                  		move.w	(a1)+,8(a5)
000A6DA6 1B7C 0001 000E             		move.b	#1,$E(a5)
000A6DAC 1B46 000D                  		move.b	d6,$D(a5)
000A6DB0 4A04                       		tst.b	d4
000A6DB2 6B00                       		bmi.s	loc_72396
000A6DB4 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A6DBA                            
000A6DBA                            loc_72396:
000A6DBA 51CF FFB0                  		dbf	d7,loc_72348
000A6DBE                            
000A6DBE 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A6DC2 6A00                       		bpl.s	loc_723A6
000A6DC4 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A6DCA                            
000A6DCA                            loc_723A6:
000A6DCA 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A6DCE 6A00                       		bpl.s	locret_723C6
000A6DD0 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A6DD6 0004 001F                  		ori.b	#$1F,d4
000A6DDA 13C4 00C0 0011             		move.b	d4,($C00011).l
000A6DE0 0844 0005                  		bchg	#5,d4
000A6DE4 13C4 00C0 0011             		move.b	d4,($C00011).l
000A6DEA                            
000A6DEA                            locret_723C6:
000A6DEA 4E75                       		rts	
000A6DEC                            ; End of function Sound_ChkValue
000A6DEC                            
000A6DEC                            ; ===========================================================================
000A6DEC 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
000A6DF0 00FF F220                  		dc.l $FFF1F0+$30
000A6DF4 00FF F280                  		dc.l $FFF250+$30
000A6DF8 00FF F340                  		dc.l $FFF310+$30
000A6DFC 00FF F370                  		dc.l $FFF340+$30
000A6E00 00FF F3A0                  		dc.l $FFF370+$30
000A6E04                            
000A6E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6E04                            
000A6E04                            
000A6E04                            Snd_FadeOut1:				; XREF: Sound_E0
000A6E04 4216                       		clr.b	0(a6)
000A6E06 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6E0A 7E05                       		moveq	#5,d7
000A6E0C                            
000A6E0C                            loc_723EA:
000A6E0C 4A15                       		tst.b	(a5)
000A6E0E 6A00 0000                  		bpl.w	loc_72472
000A6E12 0895 0007                  		bclr	#7,(a5)
000A6E16 7600                       		moveq	#0,d3
000A6E18 162D 0001                  		move.b	1(a5),d3
000A6E1C 6B00                       		bmi.s	loc_7243C
000A6E1E 4EBA 0000                  		jsr	sub_726FE(pc)
000A6E22 0C03 0004                  		cmpi.b	#4,d3
000A6E26 6600                       		bne.s	loc_72416
000A6E28 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A6E2C 6A00                       		bpl.s	loc_72416
000A6E2E 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6E32 226E 0020                  		movea.l	$20(a6),a1
000A6E36 6000                       		bra.s	loc_72428
000A6E38                            ; ===========================================================================
000A6E38                            
000A6E38                            loc_72416:
000A6E38 5503                       		subq.b	#2,d3
000A6E3A E50B                       		lsl.b	#2,d3
000A6E3C 41FA FEB2                  		lea	dword_722CC(pc),a0
000A6E40 264D                       		movea.l	a5,a3
000A6E42 2A70 3000                  		movea.l	(a0,d3.w),a5
000A6E46 226E 0018                  		movea.l	$18(a6),a1
000A6E4A                            
000A6E4A                            loc_72428:
000A6E4A 0895 0002                  		bclr	#2,(a5)
000A6E4E 08D5 0001                  		bset	#1,(a5)
000A6E52 102D 000B                  		move.b	$B(a5),d0
000A6E56 4EBA 0000                  		jsr	sub_72C4E(pc)
000A6E5A 2A4B                       		movea.l	a3,a5
000A6E5C 6000                       		bra.s	loc_72472
000A6E5E                            ; ===========================================================================
000A6E5E                            
000A6E5E                            loc_7243C:
000A6E5E 4EBA 0000                  		jsr	sub_729A0(pc)
000A6E62 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A6E66 0C03 00E0                  		cmpi.b	#$E0,d3
000A6E6A 6700                       		beq.s	loc_7245A
000A6E6C 0C03 00C0                  		cmpi.b	#$C0,d3
000A6E70 6700                       		beq.s	loc_7245A
000A6E72 E60B                       		lsr.b	#3,d3
000A6E74 41FA FE7A                  		lea	dword_722CC(pc),a0
000A6E78 2070 3000                  		movea.l	(a0,d3.w),a0
000A6E7C                            
000A6E7C                            loc_7245A:
000A6E7C 0890 0002                  		bclr	#2,(a0)
000A6E80 08D0 0001                  		bset	#1,(a0)
000A6E84 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A6E8A 6600                       		bne.s	loc_72472
000A6E8C 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A6E94                            
000A6E94                            loc_72472:
000A6E94 DAFC 0030                  		adda.w	#$30,a5
000A6E98 51CF FF72                  		dbf	d7,loc_723EA
000A6E9C                            
000A6E9C 4E75                       		rts	
000A6E9E                            ; End of function Snd_FadeOut1
000A6E9E                            
000A6E9E                            
000A6E9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6E9E                            
000A6E9E                            
000A6E9E                            Snd_FadeOut2:				; XREF: Sound_E0
000A6E9E 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6EA2 4A15                       		tst.b	(a5)
000A6EA4 6A00                       		bpl.s	loc_724AE
000A6EA6 0895 0007                  		bclr	#7,(a5)
000A6EAA 0815 0002                  		btst	#2,(a5)
000A6EAE 6600                       		bne.s	loc_724AE
000A6EB0 4A2E 000E                  	tst.b	$0E(a6)
000A6EB4 6600                       	bne.s	loc_724AE_2
000A6EB6 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6EBA 6600                       	bne.s	loc_724AE
000A6EBC                            
000A6EBC                            	loc_724AE_2:
000A6EBC 4EBA 0000                  		jsr	loc_7270A(pc)
000A6EC0 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A6EC4 0895 0002                  		bclr	#2,(a5)
000A6EC8 08D5 0001                  		bset	#1,(a5)
000A6ECC 4A15                       		tst.b	(a5)
000A6ECE 6A00                       		bpl.s	loc_724AE
000A6ED0 226E 0018                  		movea.l	$18(a6),a1
000A6ED4 102D 000B                  		move.b	$B(a5),d0
000A6ED8 4EBA 0000                  		jsr	sub_72C4E(pc)
000A6EDC                            
000A6EDC                            loc_724AE:
000A6EDC 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A6EE0 4A15                       		tst.b	(a5)
000A6EE2 6A00                       		bpl.s	locret_724E4
000A6EE4 0895 0007                  		bclr	#7,(a5)
000A6EE8 0815 0002                  		btst	#2,(a5)
000A6EEC 6600                       		bne.s	locret_724E4
000A6EEE 4A2E 000E                  	tst.b	$0E(a6)
000A6EF2 6600                       	bne.s	locret_724E4_2
000A6EF4 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6EF8 6600                       	bne.s	locret_724E4
000A6EFA                            
000A6EFA                            	locret_724E4_2:
000A6EFA 4EBA 0000                  		jsr	loc_729A6(pc)
000A6EFE 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
000A6F02 0895 0002                  		bclr	#2,(a5)
000A6F06 08D5 0001                  		bset	#1,(a5)
000A6F0A 4A15                       		tst.b	(a5)
000A6F0C 6A00                       		bpl.s	locret_724E4
000A6F0E 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000A6F14 6600                       		bne.s	locret_724E4
000A6F16 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000A6F1E                            
000A6F1E                            locret_724E4:
000A6F1E 4E75                       		rts	
000A6F20                            ; End of function Snd_FadeOut2
000A6F20                            
000A6F20                            ; ===========================================================================
000A6F20                            ; ---------------------------------------------------------------------------
000A6F20                            ; Fade out music
000A6F20                            ; ---------------------------------------------------------------------------
000A6F20                            
000A6F20                            Sound_E0:				; XREF: Sound_ExIndex
000A6F20 4EBA FEE2                  		jsr	Snd_FadeOut1(pc)
000A6F24 4EBA FF78                  		jsr	Snd_FadeOut2(pc)
000A6F28 1D7C 0003 0006             		move.b	#3,6(a6)
000A6F2E 1D7C 0028 0004             		move.b	#$28,4(a6)
000A6F34                            	;	clr.b	$40(a6)
000A6F34                            	;	clr.b	$70(a6)					; MJ: stop PCM 2 as well
000A6F34 422E 002A                  		clr.b	$2A(a6)
000A6F38 4E75                       		rts	
000A6F3A                            
000A6F3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6F3A                            
000A6F3A                            
000A6F3A                            sub_72504:				; XREF: sub_71B4C
000A6F3A 102E 0006                  		move.b	6(a6),d0
000A6F3E 6700                       		beq.s	loc_72510
000A6F40 532E 0006                  		subq.b	#1,6(a6)
000A6F44 4E75                       		rts	
000A6F46                            ; ===========================================================================
000A6F46                            
000A6F46                            loc_72510:
000A6F46 532E 0004                  		subq.b	#1,4(a6)
000A6F4A 6700 0000                  		beq.w	Sound_E4
000A6F4E 1D7C 0003 0006             		move.b	#3,6(a6)
000A6F54                            
000A6F54                            
000A6F54 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; CHG: load volume change instruction address
000A6F5A 7C00                       		moveq	#$00,d6					; CHG: clear d6
000A6F5C 1C2E 0004                  		move.b	$04(a6),d6				; CHG: load fade counter
000A6F60 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A6F62 4BEE 0040                  		lea	$40(a6),a5				; CHG: load PCM 1 address
000A6F66 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; CHG: load PCM 1 volume address
000A6F6C 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 1
000A6F6E 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; CHG: load PCM 2 volume address
000A6F74 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 2
000A6F76 6000 0000                  		bra.w	FadeOut_FM				; CHG: continue to FM fade out
000A6F7A                            
000A6F7A                            FadeOut_PCM:
000A6F7A 4A15                       		tst.b	(a5)					; CHG: is the channel running?
000A6F7C 6A00                       		bpl.s	FOP_NotRunning				; CHG: if not, branch
000A6F7E 7000                       		moveq	#$00,d0					; CHG: clear d0
000A6F80 102D 0009                  		move.b	$09(a5),d0				; CHG: load volume
000A6F84 6A00                       		bpl.s	FOP_NoMute				; CHG: if the channel is not mute (not from 80 - FF), branch
000A6F86 7080                       		moveq	#$FFFFFF80,d0				; CHG: force volume 80 (mute)
000A6F88 0895 0007                  		bclr	#$07,(a5)				; CHG: stop PCM channel
000A6F8C 6000                       		bra.s	FOP_Mute				; CHG: continue to mute the channel
000A6F8E                            
000A6F8E                            FOP_NoMute:
000A6F8E                            	;	add.b	FOP_FadeList(pc,d0.w),d0		; CHG: reduce the volume
000A6F8E 5400                       	addq.b	#$02,d0					; reduce the volume
000A6F90                            
000A6F90                            FOP_Mute:
000A6F90 1B40 0009                  		move.b	d0,$09(a5)				; CHG: update
000A6F94 B02D 000C                  		cmp.b	$0C(a5),d0				; CHG: has the volume changed?
000A6F98 6700                       		beq.s	FOP_NotRunning				; CHG: if not, branch
000A6F9A 1B40 000C                  		move.b	d0,$0C(a5)				; CHG: update volume
000A6F9E 142E 0004                  	move.b	$04(a6),d2				; CHG: load fade timer
000A6FA2 0202 0003                  	andi.b	#$03,d2					; CHG: has it been four frames?
000A6FA6 6600                       	bne.s	FOP_NotRunning				; CHG: if not, branch (temp until Z80 volume struggling is fixed)
000A6FA8 33FC 0100 00A1 1100 0839+  		StopZ80
000A6FBA 1080                       		move.b	d0,(a0)					; change PCM volume
000A6FBC 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A6FBE 33FC 0000 00A1 1100        		StartZ80
000A6FC6                            
000A6FC6                            FOP_NotRunning:
000A6FC6 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A6FCA 4E75                       		rts						; CHG: return
000A6FCC                            
000A6FCC                            ;FOP_FadeList:	dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A6FCC                            ;		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A6FCC                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A6FCC                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A6FCC                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A6FCC                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A6FCC                            ;		dc.b	$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000A6FCC                            ;		dc.b	$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
000A6FCC                            
000A6FCC                            ;FOP_VolumeList:	dc.b	$00,$0C,$18,$20,$28,$30,$34,$38,$3C,$40,$44,$48,$4C,$50,$56,$5A
000A6FCC                            ;		dc.b	$60,$63,$66,$69,$6B,$6D,$6F,$70,$71,$72,$73,$74,$75,$76,$76,$77
000A6FCC                            ;		dc.b	$77,$78,$78,$79,$79,$79,$7A,$7A,$7A,$7B,$7B,$7B,$7C,$7C,$7C,$7C
000A6FCC                            ;		dc.b	$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7E,$7E,$7E,$7E,$7E,$7E,$7E,$7E
000A6FCC                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A6FCC                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A6FCC                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A6FCC                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A6FCC                            
000A6FCC                            ; ===========================================================================
000A6FCC                            
000A6FCC                            FadeOut_FM:
000A6FCC 7E05                       		moveq	#5,d7
000A6FCE                            
000A6FCE                            loc_72524:
000A6FCE 4A15                       		tst.b	(a5)
000A6FD0 6A00                       		bpl.s	loc_72538
000A6FD2 522D 0009                  		addq.b	#1,9(a5)
000A6FD6 6A00                       		bpl.s	loc_72534
000A6FD8 0895 0007                  		bclr	#7,(a5)
000A6FDC 6000                       		bra.s	loc_72538
000A6FDE                            ; ===========================================================================
000A6FDE                            
000A6FDE                            loc_72534:
000A6FDE 4EBA 0000                  		jsr	sub_72CB4(pc)
000A6FE2                            
000A6FE2                            loc_72538:
000A6FE2 DAFC 0030                  		adda.w	#$30,a5
000A6FE6 51CF FFE6                  		dbf	d7,loc_72524
000A6FEA                            
000A6FEA 7E02                       		moveq	#2,d7
000A6FEC                            
000A6FEC                            loc_72542:
000A6FEC 4A15                       		tst.b	(a5)
000A6FEE 6A00                       		bpl.s	loc_72560
000A6FF0 522D 0009                  		addq.b	#1,9(a5)
000A6FF4 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000A6FFA 6500                       		bcs.s	loc_72558
000A6FFC 0895 0007                  		bclr	#7,(a5)
000A7000 6000                       		bra.s	loc_72560
000A7002                            ; ===========================================================================
000A7002                            
000A7002                            loc_72558:
000A7002 1C2D 0009                  		move.b	9(a5),d6
000A7006 DC2E 0016                  	add.b	$16(a6),d6			; EXTRA
000A700A 4EBA 0000                  		jsr	sub_7296A(pc)
000A700E                            
000A700E                            loc_72560:
000A700E DAFC 0030                  		adda.w	#$30,a5
000A7012 51CF FFD8                  		dbf	d7,loc_72542
000A7016                            
000A7016 4E75                       		rts	
000A7018                            ; End of function sub_72504
000A7018                            
000A7018                            
000A7018                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7018                            
000A7018                            
000A7018                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000A7018 7602                       		moveq	#2,d3
000A701A 7028                       		moveq	#$28,d0
000A701C                            
000A701C                            loc_7256E:
000A701C 1203                       		move.b	d3,d1
000A701E 4EBA 0000                  		jsr	sub_7272E(pc)
000A7022 5801                       		addq.b	#4,d1
000A7024 4EBA 0000                  		jsr	sub_7272E(pc)
000A7028 51CB FFF2                  		dbf	d3,loc_7256E
000A702C                            
000A702C 7040                       		moveq	#$40,d0
000A702E 727F                       		moveq	#$7F,d1
000A7030 7802                       		moveq	#2,d4
000A7032                            
000A7032                            loc_72584:
000A7032 7603                       		moveq	#3,d3
000A7034                            
000A7034                            loc_72586:
000A7034 4EBA 0000                  		jsr	sub_7272E(pc)
000A7038 4EBA 0000                  		jsr	sub_72764(pc)
000A703C 5840                       		addq.w	#4,d0
000A703E 51CB FFF4                  		dbf	d3,loc_72586
000A7042                            
000A7042 0400 000F                  		subi.b	#$F,d0
000A7046 51CC FFEA                  		dbf	d4,loc_72584
000A704A                            
000A704A 4E75                       		rts	
000A704C                            ; End of function sub_7256A
000A704C                            
000A704C                            ; ===========================================================================
000A704C                            ; ---------------------------------------------------------------------------
000A704C                            ; Stop music
000A704C                            ; ---------------------------------------------------------------------------
000A704C                            
000A704C                            Sound_E4:
000A704C 33FC 0100 00A1 1100 0839+  		StopZ80
000A705E 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7064 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A706A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A706C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A706E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7070 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7072 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7074 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7076 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7078 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A707A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A707C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A707E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7080 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7082 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A708A 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7090 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A7096 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7098 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A709A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A709C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A709E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A70A0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A70A2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A70A4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A70A6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A70A8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A70AA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A70AC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A70AE 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A70B6 33FC 0000 00A1 1100        		StartZ80
000A70BE                            
000A70BE 702B                       		moveq	#$2B,d0
000A70C0 123C 0080                  		move.b	#$80,d1
000A70C4 4EBA 0000                  		jsr	sub_7272E(pc)
000A70C8 7027                       		moveq	#$27,d0
000A70CA 7200                       		moveq	#0,d1
000A70CC 4EBA 0000                  		jsr	sub_7272E(pc)
000A70D0 204E                       		movea.l	a6,a0
000A70D2 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A70D6 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A70DA 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
000A70DE                            
000A70DE                            loc_725B6:
000A70DE 4298                       		clr.l	(a0)+
000A70E0 51C8 FFFC                  		dbf	d0,loc_725B6
000A70E4                            
000A70E4 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A70E8 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A70EC 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000A70F2 4EBA FF24                  		jsr	sub_7256A(pc)
000A70F6 6000 0000                  		bra.w	sub_729B6
000A70FA                            
000A70FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A70FA                            
000A70FA                            
000A70FA                            sub_725CA:				; XREF: Sound_ChkValue
000A70FA 204E                       		movea.l	a6,a0
000A70FC 1216                       		move.b	0(a6),d1
000A70FE 142E 0027                  		move.b	$27(a6),d2
000A7102 162E 002A                  		move.b	$2A(a6),d3
000A7106 182E 0026                  		move.b	$26(a6),d4
000A710A 3A2E 000A                  		move.w	$A(a6),d5
000A710E 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A7112 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A7116 303C 0093                  		move.w	#$93,d0						; MJ: new size
000A711A                            
000A711A                            loc_725E4:
000A711A 4298                       		clr.l	(a0)+
000A711C 51C8 FFFC                  		dbf	d0,loc_725E4
000A7120                            
000A7120 1C81                       		move.b	d1,0(a6)
000A7122 1D42 0027                  		move.b	d2,$27(a6)
000A7126 1D43 002A                  		move.b	d3,$2A(a6)
000A712A 1D44 0026                  		move.b	d4,$26(a6)
000A712E 3D45 000A                  		move.w	d5,$A(a6)
000A7132 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A7136 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A713A 1D7C 0080 0009             		move.b	#$80,9(a6)
000A7140 4EBA FED6                  		jsr	sub_7256A(pc)
000A7144 6000 0000                  		bra.w	sub_729B6
000A7148                            ; End of function sub_725CA
000A7148                            
000A7148                            
000A7148                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7148                            
000A7148                            
000A7148                            sub_7260C:				; XREF: sub_71B4C
000A7148                            	;	move.b	2(a6),1(a6)
000A7148 102E 0015                  	move.b	$15(a6),d0			; EXTRA
000A714C 6A00                       	bpl.s	STempo_CheckMax			; EXTRA
000A714E D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A7152 0C00 0002                  	cmpi.b	#$02,d0				; EXTRA
000A7156 6A00                       	bpl.s	STempo_Valid			; EXTRA
000A7158 7002                       	moveq	#$02,d0				; EXTRA
000A715A 6000                       	bra.s	STempo_Valid			; EXTRA
000A715C                            
000A715C                            STempo_CheckMax:
000A715C D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A7160                            
000A7160                            STempo_Valid:
000A7160 1D40 0001                  	move.b	d0,$01(a6)			; EXTRA
000A7164                            
000A7164 41EE 004E                  		lea	$4E(a6),a0
000A7168 7030                       		moveq	#$30,d0
000A716A 720A                       		moveq	#10,d1						; MJ: new number of channels
000A716C                            
000A716C                            loc_7261A:
000A716C 5210                       		addq.b	#1,(a0)
000A716E D0C0                       		adda.w	d0,a0
000A7170 51C9 FFFA                  		dbf	d1,loc_7261A
000A7174                            
000A7174 4E75                       		rts	
000A7176                            ; End of function sub_7260C
000A7176                            
000A7176                            ; ===========================================================================
000A7176                            ; ---------------------------------------------------------------------------
000A7176                            ; Speed	up music
000A7176                            ; ---------------------------------------------------------------------------
000A7176                            
000A7176                            Sound_E2:				; XREF: Sound_ExIndex
000A7176 4A2E 0027                  		tst.b	$27(a6)
000A717A 6600                       		bne.s	loc_7263E
000A717C 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000A7182 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000A7188 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000A718E 4E75                       		rts	
000A7190                            ; ===========================================================================
000A7190                            
000A7190                            loc_7263E:
000A7190 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
000A7196 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
000A719C 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
000A71A2 4E75                       		rts	
000A71A4                            ; ===========================================================================
000A71A4                            ; ---------------------------------------------------------------------------
000A71A4                            ; Change music back to normal speed
000A71A4                            ; ---------------------------------------------------------------------------
000A71A4                            
000A71A4                            Sound_E3:				; XREF: Sound_ExIndex
000A71A4 4A2E 0027                  		tst.b	$27(a6)
000A71A8 6600                       		bne.s	loc_7266A
000A71AA 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000A71B0 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000A71B6 422E 002A                  		clr.b	$2A(a6)
000A71BA 4E75                       		rts	
000A71BC                            ; ===========================================================================
000A71BC                            
000A71BC                            loc_7266A:
000A71BC 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
000A71C2 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
000A71C8 422E 03FA                  		clr.b	$3FA(a6)
000A71CC 4E75                       		rts	
000A71CE                            
000A71CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A71CE                            
000A71CE                            
000A71CE                            sub_7267C:				; XREF: sub_71B4C
000A71CE 4A2E 0025                  		tst.b	$25(a6)
000A71D2 6700                       		beq.s	loc_72688
000A71D4 532E 0025                  		subq.b	#1,$25(a6)
000A71D8 4E75                       		rts	
000A71DA                            ; ===========================================================================
000A71DA                            
000A71DA                            loc_72688:
000A71DA 4A2E 0026                  		tst.b	$26(a6)
000A71DE 6700                       		beq.s	loc_726D6
000A71E0 532E 0026                  		subq.b	#1,$26(a6)
000A71E4 1D7C 0002 0025             		move.b	#2,$25(a6)
000A71EA                            
000A71EA 4BEE 0040                  		lea	$40(a6),a5				; CHG: load starting from PCM channels
000A71EE 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to alter
000A71F0                            
000A71F0                            FadeIn_NextPCM:
000A71F0 4A15                       		tst.b	(a5)					; CHG: is this channel running?
000A71F2 6A00                       		bpl.s	FadeIn_NoPCM				; CHG: if not, branch
000A71F4 572D 0009                  		subq.b	#$03,$09(a5)				; CHG: increase volume
000A71F8                            
000A71F8                            FadeIn_NoPCM:
000A71F8 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A71FC 51CF FFF2                  		dbf	d7,FadeIn_NextPCM			; CHG: repeat for all channels
000A7200                            
000A7200                            	;	lea	$A0(a6),a5				; MJ: new SFX location
000A7200                            
000A7200 7E05                       		moveq	#5,d7
000A7202                            
000A7202                            loc_7269E:
000A7202 4A15                       		tst.b	(a5)
000A7204 6A00                       		bpl.s	loc_726AA
000A7206 532D 0009                  		subq.b	#1,9(a5)
000A720A 4EBA 0000                  		jsr	sub_72CB4(pc)
000A720E                            
000A720E                            loc_726AA:
000A720E DAFC 0030                  		adda.w	#$30,a5
000A7212 51CF FFEE                  		dbf	d7,loc_7269E
000A7216 7E02                       		moveq	#2,d7
000A7218                            
000A7218                            loc_726B4:
000A7218 4A15                       		tst.b	(a5)
000A721A 6A00                       		bpl.s	loc_726CC
000A721C 532D 0009                  		subq.b	#1,9(a5)
000A7220 1C2D 0009                  		move.b	9(a5),d6
000A7224 0C06 0010                  		cmpi.b	#$10,d6
000A7228 6500                       		bcs.s	loc_726C8
000A722A 7C0F                       		moveq	#$F,d6
000A722C                            
000A722C                            loc_726C8:
000A722C 4EBA 0000                  		jsr	sub_7296A(pc)
000A7230                            
000A7230                            loc_726CC:
000A7230 DAFC 0030                  		adda.w	#$30,a5
000A7234 51CF FFE2                  		dbf	d7,loc_726B4
000A7238 4E75                       		rts	
000A723A                            ; ===========================================================================
000A723A                            
000A723A                            loc_726D6:
000A723A                            	;	bclr	#2,$40(a6)
000A723A                            	;	bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
000A723A 422E 0024                  		clr.b	$24(a6)
000A723E 4E75                       		rts	
000A7240                            ; End of function sub_7267C
000A7240                            
000A7240                            ; ===========================================================================
000A7240                            
000A7240                            loc_726E2:				; XREF: sub_71CCA
000A7240 0815 0001                  		btst	#1,(a5)
000A7244 6600                       		bne.s	locret_726FC
000A7246 0815 0002                  		btst	#2,(a5)
000A724A 6600                       		bne.s	locret_726FC
000A724C 4A2E 000E                  	tst.b	$0E(a6)
000A7250 6600                       	bne.s	locret_726FC_2
000A7252 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7256 6600                       	bne.s	locret_726FC
000A7258                            
000A7258                            	locret_726FC_2:
000A7258 7028                       		moveq	#$28,d0
000A725A 122D 0001                  		move.b	1(a5),d1
000A725E 0001 00F0                  		ori.b	#-$10,d1
000A7262 6000 0000                  		bra.w	sub_7272E
000A7266                            ; ===========================================================================
000A7266                            
000A7266                            locret_726FC:
000A7266 4E75                       		rts	
000A7268                            
000A7268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7268                            
000A7268                            
000A7268                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000A7268 0815 0004                  		btst	#4,(a5)
000A726C 6600                       		bne.s	locret_72714
000A726E 0815 0002                  		btst	#2,(a5)
000A7272 6600                       		bne.s	locret_72714
000A7274 4A2E 000E                  	tst.b	$0E(a6)
000A7278 6600                       	bne.s	loc_7270A
000A727A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A727E 6600                       	bne.s	locret_72714
000A7280                            
000A7280                            loc_7270A:				; XREF: Snd_FadeOut2
000A7280 7028                       		moveq	#$28,d0
000A7282 122D 0001                  		move.b	1(a5),d1
000A7286 6000 0000                  		bra.w	sub_7272E
000A728A                            ; ===========================================================================
000A728A                            
000A728A                            locret_72714:
000A728A 4E75                       		rts	
000A728C                            ; End of function sub_726FE
000A728C                            
000A728C                            ; ===========================================================================
000A728C                            
000A728C                            loc_72716:				; XREF: sub_72A5A
000A728C 0815 0002                  		btst	#2,(a5)
000A7290 6600                       		bne.s	locret_72720
000A7292 4A2E 000E                  	tst.b	$0E(a6)
000A7296 6600                       	bne.s	sub_72722
000A7298 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A729C 6600                       	bne.s	locret_72720
000A729E 6000 0000                  		bra.w	sub_72722
000A72A2                            ; ===========================================================================
000A72A2                            
000A72A2                            locret_72720:
000A72A2 4E75                       		rts	
000A72A4                            
000A72A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A72A4                            
000A72A4                            
000A72A4                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000A72A4 082D 0002 0001             		btst	#2,1(a5)
000A72AA 6600                       		bne.s	loc_7275A
000A72AC D02D 0001                  		add.b	1(a5),d0
000A72B0                            ; End of function sub_72722
000A72B0                            
000A72B0                            
000A72B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A72B0                            
000A72B0                            sub_7272E:
000A72B0 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A72B4 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A72B8 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
000A72BC 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A72CE 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A72D0 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A72D2 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A72D4 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A72D6 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A72DE 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A72E2 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A72E6 4E75                       		rts						; EXT: return
000A72E8                            
000A72E8                            ; ===========================================================================
000A72E8                            
000A72E8                            loc_7275A:				; XREF: sub_72722
000A72E8 142D 0001                  		move.b	1(a5),d2
000A72EC 0882 0002                  		bclr	#2,d2
000A72F0 D002                       		add.b	d2,d0
000A72F2                            
000A72F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A72F2                            
000A72F2                            
000A72F2                            sub_72764:
000A72F2 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A72F6 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A72FA 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
000A72FE 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A7310 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A7312 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A7314 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A7316 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A7318 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A7320 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A7324 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A7328 4E75                       		rts						; EXT: return
000A732A                            
000A732A                            ; ===========================================================================
000A732A 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000A733C 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000A734E 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000A735E 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000A736E 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000A737E 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000A738E 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000A739E 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000A73AE 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000A73BE 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000A73CE 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000A73DE 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000A73EA                            
000A73EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A73EA                            
000A73EA                            
000A73EA                            ; ===========================================================================
000A73EA                            ; ---------------------------------------------------------------------------
000A73EA                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A73EA                            ; ---------------------------------------------------------------------------
000A73EA                            
000A73EA                            SPSG_CheckMute:
000A73EA 4A2E 000E                  	tst.b	$0E(a6)
000A73EE 6600                       	bne.s	S72850_NoCHG
000A73F0 102D 0021                  	move.b	$21(a5),d0
000A73F4 B02D 0022                  	cmp.b	$22(a5),d0
000A73F8 6700                       	beq.s	S72850_NoCHG
000A73FA 4A00                       	tst.b	d0
000A73FC 6A00                       	bpl.s	S72850_NoMute
000A73FE 08D5 0006                  	bset.b	#$06,(a5)
000A7402 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A7408 4EB9 0000 0000             	jsr	SPSG_UpdateTone
000A740E                            
000A740E                            S72850_NoCHG:
000A740E 4E75                       	rts
000A7410                            
000A7410                            S72850_NoMute:
000A7410 1B40 0022                  	move.b	d0,$22(a5)
000A7414 08D5 0006                  	bset.b	#$06,(a5)
000A7418 4EB9 0000 0000             	jsr	loc_7292E
000A741E 4E75                       	rts
000A7420                            
000A7420                            ; ===========================================================================
000A7420                            ; ---------------------------------------------------------------------------
000A7420                            ; Subroutine to run a PSG channel
000A7420                            ; ---------------------------------------------------------------------------
000A7420                            
000A7420                            sub_72850:				; XREF: sub_71B4C
000A7420 61C8                       	bsr.s	SPSG_CheckMute			; EXTRA - ON/OFF
000A7422 532D 000E                  		subq.b	#1,$E(a5)
000A7426 6600                       		bne.s	loc_72866
000A7428 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A742C 0895 0004                  		bclr	#4,(a5)
000A7430 4EBA 0000                  		jsr	sub_72878(pc)
000A7434 4EBA 0000                  		jsr	sub_728DC(pc)
000A7438 6000 0000                  		bra.w	loc_7292E
000A743C                            ; ===========================================================================
000A743C                            
000A743C                            loc_72866:
000A743C 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A7440 6700                       	beq.s	SPSG_NoUpdate			; EXTRA
000A7442 7A00                       	moveq	#$00,d5				; EXTRA
000A7444 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A7448 0405 0081                  	subi.b	#$81,d5				; EXTRA
000A744C 6500                       	bcs.s	SPSG_NoUpdate			; EXTRA
000A744E 4EB9 0000 0000             	jsr	SPSG_UpdateFreque		; EXTRA
000A7454 3C2D 0010                  	move.w	$10(a5),d6			; EXTRA
000A7458 6000 0000                  	bra.w	SPSG_Update			; EXTRA
000A745C                            
000A745C                            	SPSG_NoUpdate:				; EXTRA
000A745C 4EBA F1EE                  		jsr	sub_71D9E(pc)
000A7460 4EBA 0000                  		jsr	sub_72926(pc)
000A7464 4EBA F28A                  		jsr	sub_71DC6(pc)
000A7468                            
000A7468                            	SPSG_Update:				; EXTRA
000A7468 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A746C 4EBA 0000                  		jsr	sub_728E2(pc)
000A7470 4E75                       		rts	
000A7472                            ; End of function sub_72850
000A7472                            
000A7472                            
000A7472                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7472                            
000A7472                            
000A7472                            sub_72878:				; XREF: sub_72850
000A7472 0895 0001                  		bclr	#1,(a5)
000A7476 286D 0004                  		movea.l	4(a5),a4
000A747A                            
000A747A                            loc_72880:
000A747A 7A00                       		moveq	#0,d5
000A747C 1A1C                       		move.b	(a4)+,d5
000A747E 0C05 00E0                  		cmpi.b	#$E0,d5
000A7482 6500                       		bcs.s	loc_72890
000A7484 4EBA 0000                  		jsr	sub_72A5A(pc)
000A7488 60F0                       		bra.s	loc_72880
000A748A                            ; ===========================================================================
000A748A                            
000A748A                            loc_72890:
000A748A 4A05                       		tst.b	d5
000A748C 6A00                       		bpl.s	loc_728A4
000A748E 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A7492 4EBA 0000                  		jsr	sub_728AC(pc)
000A7496 1A1C                       		move.b	(a4)+,d5
000A7498 4A05                       		tst.b	d5
000A749A 6A00                       		bpl.s	loc_728A4
000A749C 534C                       		subq.w	#1,a4
000A749E 6000 F16E                  		bra.w	sub_71D60
000A74A2                            ; ===========================================================================
000A74A2                            
000A74A2                            loc_728A4:
000A74A2 4EBA F14A                  		jsr	sub_71D40(pc)
000A74A6 6000 F166                  		bra.w	sub_71D60
000A74AA                            ; End of function sub_72878
000A74AA                            
000A74AA                            
000A74AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A74AA                            
000A74AA                            
000A74AA                            sub_728AC:				; XREF: sub_72878
000A74AA 0405 0081                  		subi.b	#$81,d5
000A74AE 6500                       		bcs.s	loc_728CA
000A74B0                            
000A74B0                            	SPSG_UpdateFreque:			; EXTRA
000A74B0 DA2D 0008                  		add.b	8(a5),d5
000A74B4 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A74B8 0245 007F                  		andi.w	#$7F,d5
000A74BC E34D                       		lsl.w	#1,d5
000A74BE 41FA 0000                  		lea	word_729CE(pc),a0
000A74C2 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000A74C8 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A74CC 669A                       	bne.s	SPSG_Update			; EXTRA
000A74CE 6000 F13E                  		bra.w	sub_71D60
000A74D2                            ; ===========================================================================
000A74D2                            
000A74D2                            loc_728CA:
000A74D2 08D5 0001                  		bset	#1,(a5)
000A74D6 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000A74DC 4EBA F130                  		jsr	sub_71D60(pc)
000A74E0 6000 0000                  		bra.w	sub_729A0
000A74E4                            ; End of function sub_728AC
000A74E4                            
000A74E4                            
000A74E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A74E4                            
000A74E4                            
000A74E4                            sub_728DC:				; XREF: sub_72850
000A74E4 3C2D 0010                  		move.w	$10(a5),d6
000A74E8 6B00                       		bmi.s	loc_72920
000A74EA                            ; End of function sub_728DC
000A74EA                            
000A74EA                            
000A74EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A74EA                            
000A74EA                            
000A74EA                            sub_728E2:				; XREF: sub_72850
000A74EA 102D 001E                  		move.b	$1E(a5),d0
000A74EE 4880                       		ext.w	d0
000A74F0 DC40                       		add.w	d0,d6
000A74F2 0815 0002                  		btst	#2,(a5)
000A74F6 6600                       		bne.s	locret_7291E
000A74F8 4A2E 000E                  	tst.b	$0E(a6)
000A74FC 6600                       	bne.s	locret_7291E_2
000A74FE 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7502 6600                       	bne.s	locret_7291E
000A7504                            
000A7504                            	locret_7291E_2:
000A7504 0815 0001                  		btst	#1,(a5)
000A7508 6600                       		bne.s	locret_7291E
000A750A 102D 0001                  		move.b	1(a5),d0
000A750E 0C00 00E0                  		cmpi.b	#$E0,d0
000A7512 6600                       		bne.s	loc_72904
000A7514 103C 00C0                  		move.b	#$C0,d0
000A7518                            
000A7518                            loc_72904:
000A7518 3206                       		move.w	d6,d1
000A751A 0201 000F                  		andi.b	#$F,d1
000A751E 8001                       		or.b	d1,d0
000A7520 E84E                       		lsr.w	#4,d6
000A7522 0206 003F                  		andi.b	#$3F,d6
000A7526 13C0 00C0 0011             		move.b	d0,($C00011).l
000A752C 13C6 00C0 0011             		move.b	d6,($C00011).l
000A7532                            
000A7532                            locret_7291E:
000A7532 4E75                       		rts	
000A7534                            ; End of function sub_728E2
000A7534                            
000A7534                            ; ===========================================================================
000A7534                            
000A7534                            loc_72920:				; XREF: sub_728DC
000A7534 08D5 0001                  		bset	#1,(a5)
000A7538 4E75                       		rts	
000A753A                            
000A753A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A753A                            
000A753A                            
000A753A                            sub_72926:				; XREF: sub_72850
000A753A 4A2D 000B                  		tst.b	$B(a5)
000A753E 6700 0000                  		beq.w	locret_7298A
000A7542                            
000A7542                            loc_7292E:				; XREF: sub_72850
000A7542                            	;	move.b	9(a5),d6
000A7542 1C2E 0016                  	move.b	$16(a6),d6			; EXTRA
000A7546 E406                       	asr.b	#$02,d6				; EXTRA
000A7548 DC2D 0009                  	add.b	$09(a5),d6			; EXTRA
000A754C 7000                       		moveq	#0,d0
000A754E 102D 000B                  		move.b	$B(a5),d0
000A7552 6700                       		beq.s	sub_7296A
000A7554 2079 000A 5EDC             		movea.l	(Go_PSGIndex).l,a0
000A755A 5340                       		subq.w	#1,d0
000A755C E548                       		lsl.w	#2,d0
000A755E 2070 0000                  		movea.l	(a0,d0.w),a0
000A7562 102D 000C                  		move.b	$C(a5),d0
000A7566 1030 0000                  		move.b	(a0,d0.w),d0
000A756A 522D 000C                  		addq.b	#1,$C(a5)
000A756E 0800 0007                  		btst	#7,d0
000A7572 6700                       		beq.s	loc_72960
000A7574 0C00 0080                  		cmpi.b	#$80,d0
000A7578 6700                       		beq.s	loc_7299A
000A757A                            
000A757A                            loc_72960:
000A757A DC40                       		add.w	d0,d6
000A757C 0C06 0010                  		cmpi.b	#$10,d6
000A7580 6500                       		bcs.s	sub_7296A
000A7582 7C0F                       		moveq	#$F,d6
000A7584                            ; End of function sub_72926
000A7584                            
000A7584                            
000A7584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7584                            
000A7584                            
000A7584                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000A7584 0815 0001                  		btst	#1,(a5)
000A7588 6600                       		bne.s	locret_7298A
000A758A                            
000A758A                            	SPSG_UpdateTone:
000A758A 0815 0002                  		btst	#2,(a5)
000A758E 6600                       		bne.s	locret_7298A
000A7590 4A2E 000E                  	tst.b	$0E(a6)
000A7594 6600                       	bne.s	locret_7298A_2
000A7596 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A759A 6700                       	beq.s	locret_7298A_2
000A759C 1C2D 0001                  	move.b	$01(a5),d6
000A75A0 0606 0010                  	addi.b	#$10,d6
000A75A4 0006 000F                  	ori.b	#$0F,d6
000A75A8 13C6 00C0 0011             	move.b	d6,($C00011).l
000A75AE 4E75                       	rts
000A75B0                            
000A75B0                            	locret_7298A_2:
000A75B0 0815 0004                  		btst	#4,(a5)
000A75B4 6600                       		bne.s	loc_7298C
000A75B6                            
000A75B6                            loc_7297C:
000A75B6 8C2D 0001                  		or.b	1(a5),d6
000A75BA 0606 0010                  		addi.b	#$10,d6
000A75BE 13C6 00C0 0011             		move.b	d6,($C00011).l
000A75C4                            
000A75C4                            locret_7298A:
000A75C4 4E75                       		rts	
000A75C6                            ; ===========================================================================
000A75C6                            
000A75C6                            loc_7298C:
000A75C6 4A2D 0013                  		tst.b	$13(a5)
000A75CA 67EA                       		beq.s	loc_7297C
000A75CC 4A2D 0012                  		tst.b	$12(a5)
000A75D0 66E4                       		bne.s	loc_7297C
000A75D2 4E75                       		rts	
000A75D4                            ; End of function sub_7296A
000A75D4                            
000A75D4                            ; ===========================================================================
000A75D4                            
000A75D4                            loc_7299A:				; XREF: sub_72926
000A75D4 532D 000C                  		subq.b	#1,$C(a5)
000A75D8 4E75                       		rts	
000A75DA                            
000A75DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A75DA                            
000A75DA                            
000A75DA                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000A75DA 0815 0002                  		btst	#2,(a5)
000A75DE 6600                       		bne.s	locret_729B4
000A75E0 4A2E 000E                  	tst.b	$0E(a6)
000A75E4 6600                       	bne.s	loc_729A6
000A75E6 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A75EA 6600                       	bne.s	locret_729B4
000A75EC                            
000A75EC                            loc_729A6:				; XREF: Snd_FadeOut2
000A75EC 102D 0001                  		move.b	1(a5),d0
000A75F0 0000 001F                  		ori.b	#$1F,d0
000A75F4 13C0 00C0 0011             		move.b	d0,($C00011).l
000A75FA                            
000A75FA                            locret_729B4:
000A75FA 4E75                       		rts	
000A75FC                            ; End of function sub_729A0
000A75FC                            
000A75FC                            
000A75FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A75FC                            
000A75FC                            
000A75FC                            sub_729B6:				; XREF: loc_71E7C
000A75FC 41F9 00C0 0011             		lea	($C00011).l,a0
000A7602 10BC 009F                  		move.b	#$9F,(a0)
000A7606 10BC 00BF                  		move.b	#$BF,(a0)
000A760A 10BC 00DF                  		move.b	#$DF,(a0)
000A760E 10BC 00FF                  		move.b	#$FF,(a0)
000A7612 4E75                       		rts	
000A7614                            ; End of function sub_729B6
000A7614                            
000A7614                            ; ===========================================================================
000A7614 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000A7626 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000A7638 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000A764C 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000A7660 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000A7674 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000A7688 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000A769C 0011 0000                  		dc.w $11, 0
000A76A0                            
000A76A0                            	; PSG can overflow here by accident (SYZ does when it plays low notes
000A76A0                            	; but the pitch of the channel is low, and wraps to high).
000A76A0                            
000A76A0                            	; The flag pointers have been altered slightly, causing the frequencies
000A76A0                            	; to be different, even though it's wrong in the first place, this
000A76A0                            	; table will ensure it's put back the original way (not correct, just
000A76A0                            	; original).
000A76A0                            
000A76A0 0445 00E0 E54D 4EFB 5002+  		dc.w	$0445,$00E0,$E54D,$4EFB,$5002,$6000,$0066,$6000	; CHG: end of table
000A76B0 0082 6000 0084 6000 0086+  		dc.w	$0082,$6000,$0084,$6000,$0086,$6000,$009E,$6000
000A76C0 0124 6000 0126 6000 012C+  		dc.w	$0124,$6000,$0126,$6000,$012C,$6000,$012E,$6000
000A76D0 0134 6000 0138 6000 013E+  		dc.w	$0134,$6000,$0138,$6000,$013E,$6000,$0150,$6000
000A76E0 0154 6000 0156 6000 0184+  		dc.w	$0154,$6000,$0156,$6000,$0184,$6000,$028A,$6000
000A76F0 02A8 6000 02AA 6000 0354+  		dc.w	$02A8,$6000,$02AA,$6000,$0354,$6000,$036A,$6000
000A7700 036C 6000 036E 6000 0376+  		dc.w	$036C,$6000,$036E,$6000,$0376,$6000,$038C,$6000
000A7710 039A 121C                  		dc.w	$039A,$121C
000A7714                            
000A7714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7714                            
000A7714                            
000A7714                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A7714 0445 00E0                  		subi.w	#$E0,d5
000A7718 E54D                       		lsl.w	#2,d5
000A771A 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000A771E                            ; End of function sub_72A5A
000A771E                            
000A771E                            ; ===========================================================================
000A771E                            
000A771E                            loc_72A64:
000A771E 6000 0000                  		bra.w	loc_72ACC			; E0
000A7722                            ; ===========================================================================
000A7722 6000 0000                  		bra.w	loc_72AEC			; E1
000A7726                            ; ===========================================================================
000A7726 6000 0000                  		bra.w	loc_72AF2			; E2
000A772A                            ; ===========================================================================
000A772A 6000 0000                  		bra.w	loc_72AF8			; E3
000A772E                            ; ===========================================================================
000A772E 6000 0000                  		bra.w	loc_72B14			; E4
000A7732                            ; ===========================================================================
000A7732 6000 0000                  		bra.w	loc_72B9E			; E5
000A7736                            ; ===========================================================================
000A7736 6000 0000                  		bra.w	loc_72BA4			; E6
000A773A                            ; ===========================================================================
000A773A 6000 0000                  		bra.w	loc_72BAE			; E7
000A773E                            ; ===========================================================================
000A773E 6000 0000                  		bra.w	loc_72BB4			; E8
000A7742                            ; ===========================================================================
000A7742 6000 0000                  		bra.w	loc_72BBE			; E9
000A7746                            ; ===========================================================================
000A7746 6000 0000                  		bra.w	loc_72BC6			; EA
000A774A                            ; ===========================================================================
000A774A 6000 0000                  		bra.w	loc_72BD0			; EB
000A774E                            ; ===========================================================================
000A774E 6000 0000                  		bra.w	loc_72BE6			; EC
000A7752                            ; ===========================================================================
000A7752 6000 0000                  		bra.w	loc_72BEE			; ED
000A7756                            ; ===========================================================================
000A7756 6000 0000                  		bra.w	loc_72BF4			; EE
000A775A                            ; ===========================================================================
000A775A 6000 0000                  		bra.w	loc_72C26			; EF
000A775E                            ; ===========================================================================
000A775E 6000 0000                  		bra.w	loc_72D30			; F0
000A7762                            ; ===========================================================================
000A7762 6000 0000                  		bra.w	loc_72D52			; F1
000A7766                            ; ===========================================================================
000A7766 6000 0000                  		bra.w	loc_72D58			; F2
000A776A                            ; ===========================================================================
000A776A 6000 0000                  		bra.w	loc_72E06			; F3
000A776E                            ; ===========================================================================
000A776E 6000 0000                  		bra.w	loc_72E20			; F4
000A7772                            ; ===========================================================================
000A7772 6000 0000                  		bra.w	loc_72E26			; F5
000A7776                            ; ===========================================================================
000A7776 6000 0000                  		bra.w	loc_72E2C			; F6
000A777A                            ; ===========================================================================
000A777A 6000 0000                  		bra.w	loc_72E38			; F7
000A777E                            ; ===========================================================================
000A777E 6000 0000                  		bra.w	loc_72E52			; F8
000A7782                            ; ===========================================================================
000A7782 6000 0000                  		bra.w	loc_72E64			; F9
000A7786                            ; ===========================================================================
000A7786                            ; ---------------------------------------------------------------------------
000A7786                            ; Flag FA - Reverse flag
000A7786                            ; ---------------------------------------------------------------------------
000A7786                            
000A7786                            FlagFA:
000A7786 0855 0005                  		bchg.b	#$05,(a5)			; CHG: change reverse flag
000A778A 4E75                       		rts					; CHG: return
000A778C                            
000A778C                            ; ===========================================================================
000A778C                            
000A778C                            loc_72ACC:				; XREF: loc_72A64
000A778C 121C                       		move.b	(a4)+,d1
000A778E 4A2D 0001                  		tst.b	1(a5)
000A7792 6B00                       		bmi.s	locret_72AEA
000A7794 102D 000A                  		move.b	$A(a5),d0
000A7798 0200 0037                  		andi.b	#$37,d0
000A779C 8200                       		or.b	d0,d1
000A779E 1B41 000A                  		move.b	d1,$A(a5)
000A77A2 103C 00B4                  		move.b	#$B4,d0
000A77A6 6000 FAE4                  		bra.w	loc_72716
000A77AA                            ; ===========================================================================
000A77AA                            
000A77AA                            locret_72AEA:
000A77AA 4E75                       		rts	
000A77AC                            ; ===========================================================================
000A77AC                            
000A77AC                            loc_72AEC:				; XREF: loc_72A64
000A77AC 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000A77B0 4E75                       		rts	
000A77B2                            ; ===========================================================================
000A77B2                            
000A77B2                            loc_72AF2:				; XREF: loc_72A64
000A77B2 1D5C 0007                  		move.b	(a4)+,7(a6)
000A77B6 4E75                       		rts	
000A77B8                            ; ===========================================================================
000A77B8                            
000A77B8                            loc_72AF8:				; XREF: loc_72A64
000A77B8 7000                       		moveq	#0,d0
000A77BA 102D 000D                  		move.b	$D(a5),d0
000A77BE 2875 0000                  		movea.l	(a5,d0.w),a4
000A77C2 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000A77CA 544C                       		addq.w	#2,a4
000A77CC 5800                       		addq.b	#4,d0
000A77CE 1B40 000D                  		move.b	d0,$D(a5)
000A77D2 4E75                       		rts	
000A77D4                            ; ===========================================================================
000A77D4                            
000A77D4                            loc_72B14:				; XREF: loc_72A64
000A77D4 204E                       		movea.l	a6,a0
000A77D6 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A77DA 236E 0010 0010             	move.l	$10(a6),$10(a1)				; CHG: copy buffer address across
000A77E0 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
000A77E4                            
000A77E4                            loc_72B1E:
000A77E4 20D9                       		move.l	(a1)+,(a0)+
000A77E6 51C8 FFFC                  		dbf	d0,loc_72B1E
000A77EA                            
000A77EA                            	;	bset	#2,$40(a6)
000A77EA                            	;	bset	#2,$70(a6)				; MJ: enable PCM 2
000A77EA 264D                       		movea.l	a5,a3
000A77EC 1C3C 0028                  		move.b	#$28,d6
000A77F0 9C2E 0026                  		sub.b	$26(a6),d6
000A77F4 1A06                       	move.b	d6,d5
000A77F6 DA05                       	add.b	d5,d5
000A77F8 DA06                       	add.b	d6,d5
000A77FA                            
000A77FA 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to do
000A77FC 4BEE 0040                  		lea	$40(a6),a5				; CHG: start from PCM 1
000A7800                            
000A7800                            FE4_NextPCM:
000A7800 0815 0007                  		btst	#$07,(a5)				; CHG: is the channel running?
000A7804 6700                       		beq.s	FE4_NoPCM				; CHG: if not, branch
000A7806                            	;	bset	#$01,(a5)				; CHG: set the channel as resting
000A7806 DB2D 0009                  		add.b	d5,$09(a5)				; CHG: reduce its volume
000A780A                            
000A780A                            FE4_NoPCM:
000A780A 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A780E 51CF FFF0                  		dbf	d7,FE4_NextPCM				; CHG: repeat for all channels
000A7812                            
000A7812 7E05                       		moveq	#5,d7
000A7814                            	;	lea	$A0(a6),a5				; MJ: new FM location
000A7814                            
000A7814                            loc_72B3A:
000A7814 0815 0007                  		btst	#7,(a5)
000A7818 6700                       		beq.s	loc_72B5C
000A781A 08D5 0001                  		bset	#1,(a5)
000A781E DD2D 0009                  		add.b	d6,9(a5)
000A7822 0815 0002                  		btst	#2,(a5)
000A7826 6600                       		bne.s	loc_72B5C
000A7828 4A2E 000E                  	tst.b	$0E(a6)
000A782C 6600                       	bne.s	locret_72B5C_2
000A782E 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7832 6600                       	bne.s	loc_72B5C
000A7834                            
000A7834                            	locret_72B5C_2:
000A7834 7000                       		moveq	#0,d0
000A7836 102D 000B                  		move.b	$B(a5),d0
000A783A 226E 0018                  		movea.l	$18(a6),a1
000A783E 4EBA 0000                  		jsr	sub_72C4E(pc)
000A7842                            
000A7842                            loc_72B5C:
000A7842 DAFC 0030                  		adda.w	#$30,a5
000A7846 51CF FFCC                  		dbf	d7,loc_72B3A
000A784A                            
000A784A 7E02                       		moveq	#2,d7
000A784C                            
000A784C                            loc_72B66:
000A784C 0815 0007                  		btst	#7,(a5)
000A7850 6700                       		beq.s	loc_72B78
000A7852 08D5 0001                  		bset	#1,(a5)
000A7856 4EBA FD82                  		jsr	sub_729A0(pc)
000A785A DD2D 0009                  		add.b	d6,9(a5)
000A785E                            
000A785E                            loc_72B78:
000A785E DAFC 0030                  		adda.w	#$30,a5
000A7862 51CF FFE8                  		dbf	d7,loc_72B66
000A7866 2A4B                       		movea.l	a3,a5
000A7868 1D7C 0080 0024             		move.b	#$80,$24(a6)
000A786E 1D7C 0028 0026             		move.b	#$28,$26(a6)
000A7874 422E 0027                  		clr.b	$27(a6)
000A7878 504F                       		addq.w	#8,sp
000A787A 4E75                       		rts	
000A787C                            ; ===========================================================================
000A787C                            
000A787C                            loc_72B9E:				; XREF: loc_72A64
000A787C 1B5C 0002                  		move.b	(a4)+,2(a5)
000A7880 4E75                       		rts	
000A7882                            ; ===========================================================================
000A7882                            
000A7882                            loc_72BA4:				; XREF: loc_72A64
000A7882 101C                       		move.b	(a4)+,d0
000A7884 D12D 0009                  		add.b	d0,9(a5)
000A7888 6000 0000                  		bra.w	sub_72CB4
000A788C                            ; ===========================================================================
000A788C                            
000A788C                            loc_72BAE:				; XREF: loc_72A64
000A788C 08D5 0004                  		bset	#4,(a5)
000A7890 4E75                       		rts	
000A7892                            ; ===========================================================================
000A7892                            
000A7892                            loc_72BB4:				; XREF: loc_72A64
000A7892 1B54 0012                  		move.b	(a4),$12(a5)
000A7896 1B5C 0013                  		move.b	(a4)+,$13(a5)
000A789A 4E75                       		rts	
000A789C                            ; ===========================================================================
000A789C                            
000A789C                            loc_72BBE:				; XREF: loc_72A64
000A789C 101C                       		move.b	(a4)+,d0
000A789E D12D 0008                  		add.b	d0,8(a5)
000A78A2 4E75                       		rts	
000A78A4                            ; ===========================================================================
000A78A4                            
000A78A4                            loc_72BC6:				; XREF: loc_72A64
000A78A4 1D54 0002                  		move.b	(a4),2(a6)
000A78A8 1D5C 0001                  		move.b	(a4)+,1(a6)
000A78AC 4E75                       		rts	
000A78AE                            ; ===========================================================================
000A78AE                            
000A78AE                            loc_72BD0:				; XREF: loc_72A64
000A78AE 41EE 0040                  		lea	$40(a6),a0
000A78B2 101C                       		move.b	(a4)+,d0
000A78B4 7230                       		moveq	#$30,d1
000A78B6 740A                       		moveq	#10,d2				; MJ: extra channel
000A78B8                            
000A78B8                            loc_72BDA:
000A78B8 1140 0002                  		move.b	d0,2(a0)
000A78BC D0C1                       		adda.w	d1,a0
000A78BE 51CA FFF8                  		dbf	d2,loc_72BDA
000A78C2                            
000A78C2 4E75                       		rts	
000A78C4                            ; ===========================================================================
000A78C4                            
000A78C4                            loc_72BE6:				; XREF: loc_72A64
000A78C4 101C                       		move.b	(a4)+,d0
000A78C6 D12D 0009                  		add.b	d0,9(a5)
000A78CA 4E75                       		rts	
000A78CC                            ; ===========================================================================
000A78CC                            
000A78CC                            loc_72BEE:				; XREF: loc_72A64
000A78CC 422E 002C                  		clr.b	$2C(a6)
000A78D0 4E75                       		rts	
000A78D2                            ; ===========================================================================
000A78D2                            
000A78D2                            loc_72BF4:				; XREF: loc_72A64
000A78D2 0895 0007                  		bclr	#7,(a5)
000A78D6 0895 0004                  		bclr	#4,(a5)
000A78DA 4EBA F98C                  		jsr	sub_726FE(pc)
000A78DE 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A78E2 6B00                       		bmi.s	loc_72C22
000A78E4 264D                       		movea.l	a5,a3
000A78E6 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A78EA 226E 0018                  		movea.l	$18(a6),a1
000A78EE 0895 0002                  		bclr	#2,(a5)
000A78F2 08D5 0001                  		bset	#1,(a5)
000A78F6 102D 000B                  		move.b	$B(a5),d0
000A78FA 4EBA 0000                  		jsr	sub_72C4E(pc)
000A78FE 2A4B                       		movea.l	a3,a5
000A7900                            
000A7900                            loc_72C22:
000A7900 504F                       		addq.w	#8,sp
000A7902 4E75                       		rts	
000A7904                            ; ===========================================================================
000A7904                            
000A7904                            loc_72C26:				; XREF: loc_72A64
000A7904 7000                       		moveq	#0,d0
000A7906 101C                       		move.b	(a4)+,d0
000A7908 1B40 000B                  		move.b	d0,$B(a5)
000A790C                            
000A790C                            SFM_UpdateVoice:
000A790C 0815 0002                  		btst	#2,(a5)
000A7910 6600 0000                  		bne.w	locret_72CAA
000A7914 4A2E 000E                  	tst.b	$0E(a6)
000A7918 6600                       	bne.s	locret_72CAA_2
000A791A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A791E 6600                       	bne.s	locret_72CAA
000A7920                            
000A7920                            	locret_72CAA_2:
000A7920                            
000A7920 226E 0018                  		movea.l	$18(a6),a1
000A7924 4A2E 000E                  		tst.b	$E(a6)
000A7928 6700                       		beq.s	sub_72C4E
000A792A 226D 0020                  		movea.l	$20(a5),a1	; ERROR HERE...
000A792E 4A2E 000E                  		tst.b	$E(a6)
000A7932 6B00                       		bmi.s	sub_72C4E
000A7934 226E 0020                  		movea.l	$20(a6),a1
000A7938                            
000A7938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7938                            
000A7938                            
000A7938                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000A7938 5340                       		subq.w	#1,d0
000A793A 6B00                       		bmi.s	loc_72C5C
000A793C 323C 0019                  		move.w	#$19,d1
000A7940                            
000A7940                            loc_72C56:
000A7940 D2C1                       		adda.w	d1,a1
000A7942 51C8 FFFC                  		dbf	d0,loc_72C56
000A7946                            
000A7946                            loc_72C5C:
000A7946 1219                       		move.b	(a1)+,d1
000A7948 1B41 001F                  		move.b	d1,$1F(a5)
000A794C 1801                       		move.b	d1,d4
000A794E 103C 00B0                  		move.b	#$B0,d0
000A7952 4EBA F950                  		jsr	sub_72722(pc)
000A7956 45FA 0000                  		lea	byte_72D18(pc),a2
000A795A 7613                       		moveq	#$13,d3
000A795C                            
000A795C                            loc_72C72:
000A795C 101A                       		move.b	(a2)+,d0
000A795E 1219                       		move.b	(a1)+,d1
000A7960 4EBA F942                  		jsr	sub_72722(pc)
000A7964 51CB FFF6                  		dbf	d3,loc_72C72
000A7968 7A03                       		moveq	#3,d5
000A796A 0244 0007                  		andi.w	#7,d4
000A796E 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000A7972 162D 0009                  		move.b	9(a5),d3
000A7976 D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A797A                            
000A797A                            loc_72C8C:
000A797A 101A                       		move.b	(a2)+,d0
000A797C 1219                       		move.b	(a1)+,d1
000A797E E20C                       		lsr.b	#1,d4
000A7980 6400                       		bcc.s	loc_72C96
000A7982 D203                       		add.b	d3,d1
000A7984                            
000A7984                            loc_72C96:
000A7984 4EBA F91E                  		jsr	sub_72722(pc)
000A7988 51CD FFF0                  		dbf	d5,loc_72C8C
000A798C 103C 00B4                  		move.b	#$B4,d0
000A7990 122D 000A                  		move.b	$A(a5),d1
000A7994 4EBA F90E                  		jsr	sub_72722(pc)
000A7998                            
000A7998                            locret_72CAA:
000A7998 4E75                       		rts	
000A799A                            ; End of function sub_72C4E
000A799A                            
000A799A                            ; ===========================================================================
000A799A 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000A79A2                            
000A79A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A79A2                            
000A79A2                            
000A79A2                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000A79A2 0815 0002                  		btst	#2,(a5)
000A79A6 6600                       		bne.s	locret_72D16
000A79A8                            
000A79A8 4A2E 000E                  	tst.b	$0E(a6)
000A79AC 6600                       	bne.s	locret_72D16_2
000A79AE 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A79B2 6600                       	bne.s	locret_72D16
000A79B4                            
000A79B4                            	locret_72D16_2:
000A79B4 7000                       		moveq	#0,d0
000A79B6 102D 000B                  		move.b	$B(a5),d0
000A79BA 226E 0018                  		movea.l	$18(a6),a1
000A79BE 4A2E 000E                  		tst.b	$E(a6)
000A79C2 6700                       		beq.s	loc_72CD8
000A79C4 226D 0020                  		movea.l	$20(a5),a1
000A79C8 4A2E 000E                  		tst.b	$E(a6)
000A79CC 6B00                       		bmi.s	loc_72CD8
000A79CE 226E 0020                  		movea.l	$20(a6),a1
000A79D2                            
000A79D2                            loc_72CD8:
000A79D2 5340                       		subq.w	#1,d0
000A79D4 6B00                       		bmi.s	loc_72CE6
000A79D6 323C 0019                  		move.w	#$19,d1
000A79DA                            
000A79DA                            loc_72CE0:
000A79DA D2C1                       		adda.w	d1,a1
000A79DC 51C8 FFFC                  		dbf	d0,loc_72CE0
000A79E0                            
000A79E0                            loc_72CE6:
000A79E0 D2FC 0015                  		adda.w	#$15,a1
000A79E4 45FA 0000                  		lea	byte_72D2C(pc),a2
000A79E8 102D 001F                  		move.b	$1F(a5),d0
000A79EC 0240 0007                  		andi.w	#7,d0
000A79F0 183B 00A8                  		move.b	byte_72CAC(pc,d0.w),d4
000A79F4 162D 0009                  		move.b	9(a5),d3
000A79F8 D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A79FC 6B00                       		bmi.s	locret_72D16
000A79FE 7A03                       		moveq	#3,d5
000A7A00                            
000A7A00                            loc_72D02:
000A7A00 101A                       		move.b	(a2)+,d0
000A7A02 1219                       		move.b	(a1)+,d1
000A7A04 E20C                       		lsr.b	#1,d4
000A7A06 6400                       		bcc.s	loc_72D12
000A7A08 D203                       		add.b	d3,d1
000A7A0A 6500                       		bcs.s	loc_72D12
000A7A0C 4EBA F896                  		jsr	sub_72722(pc)
000A7A10                            
000A7A10                            loc_72D12:
000A7A10 51CD FFEE                  		dbf	d5,loc_72D02
000A7A14                            
000A7A14                            locret_72D16:
000A7A14 4E75                       		rts	
000A7A16                            ; End of function sub_72CB4
000A7A16                            
000A7A16                            ; ===========================================================================
000A7A16 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000A7A20 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000A7A2A 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000A7A2E                            ; ===========================================================================
000A7A2E                            
000A7A2E                            loc_72D30:				; XREF: loc_72A64
000A7A2E 08D5 0003                  		bset	#3,(a5)
000A7A32 2B4C 0014                  		move.l	a4,$14(a5)
000A7A36 1B5C 0018                  		move.b	(a4)+,$18(a5)
000A7A3A 1B5C 0019                  		move.b	(a4)+,$19(a5)
000A7A3E 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000A7A42 101C                       		move.b	(a4)+,d0
000A7A44 E208                       		lsr.b	#1,d0
000A7A46 1B40 001B                  		move.b	d0,$1B(a5)
000A7A4A 426D 001C                  		clr.w	$1C(a5)
000A7A4E 4E75                       		rts	
000A7A50                            ; ===========================================================================
000A7A50                            
000A7A50                            loc_72D52:				; XREF: loc_72A64
000A7A50 08D5 0003                  		bset	#3,(a5)
000A7A54 206D 0014                  		movea.l	$14(a5),a0				; CHG: load modulation address
000A7A58 43ED 0018                  		lea	$18(a5),a1				; CHG: load modulation settings RAM
000A7A5C 12D8                       		move.b	(a0)+,(a1)+				; CHG: reset settings...
000A7A5E 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A7A60 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A7A62 1018                       		move.b	(a0)+,d0				; CHG: ''
000A7A64 E208                       		lsr.b	#$01,d0					; CHG: ''
000A7A66 12C0                       		move.b	d0,(a1)+				; CHG: ''
000A7A68 4259                       		clr.w	(a1)+					; CHG: clear modulation frequency
000A7A6A 4E75                       		rts	
000A7A6C                            ; ===========================================================================
000A7A6C                            
000A7A6C                            loc_72D58:				; XREF: loc_72A64
000A7A6C 0895 0007                  		bclr	#7,(a5)
000A7A70 0895 0004                  		bclr	#4,(a5)
000A7A74 4A2D 0001                  		tst.b	1(a5)
000A7A78 6B00                       		bmi.s	loc_72D74
000A7A7A 4A2E 0008                  		tst.b	8(a6)
000A7A7E 6B00 0000                  		bmi.w	SF2_MutePCM				; CHG: for PCM, branch to a differen mute routine
000A7A82 4EBA F7E4                  		jsr	sub_726FE(pc)
000A7A86 6000                       		bra.s	loc_72D78
000A7A88                            ; ===========================================================================
000A7A88                            
000A7A88                            loc_72D74:
000A7A88 4EBA FB50                  		jsr	sub_729A0(pc)
000A7A8C                            
000A7A8C                            loc_72D78:
000A7A8C 4A2E 000E                  		tst.b	$E(a6)
000A7A90 6A00 0000                  		bpl.w	loc_72E02
000A7A94 4216                       		clr.b	0(a6)
000A7A96 7000                       		moveq	#0,d0
000A7A98 102D 0001                  		move.b	1(a5),d0
000A7A9C 6B00                       		bmi.s	loc_72DCC
000A7A9E 41FA F250                  		lea	dword_722CC(pc),a0
000A7AA2 264D                       		movea.l	a5,a3
000A7AA4 0C00 0004                  		cmpi.b	#4,d0
000A7AA8 6600                       		bne.s	loc_72DA8
000A7AAA 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A7AAE 6A00                       		bpl.s	loc_72DA8
000A7AB0 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A7AB4 226E 0020                  		movea.l	$20(a6),a1
000A7AB8 6000                       		bra.s	loc_72DB8
000A7ABA                            ; ===========================================================================
000A7ABA                            
000A7ABA                            loc_72DA8:
000A7ABA 5500                       		subq.b	#2,d0
000A7ABC E508                       		lsl.b	#2,d0
000A7ABE 2A70 0000                  		movea.l	(a0,d0.w),a5
000A7AC2 4A15                       		tst.b	(a5)
000A7AC4 6A00                       		bpl.s	loc_72DC8
000A7AC6 226E 0018                  		movea.l	$18(a6),a1
000A7ACA                            
000A7ACA                            loc_72DB8:
000A7ACA 0895 0002                  		bclr	#2,(a5)
000A7ACE 08D5 0001                  		bset	#1,(a5)
000A7AD2 102D 000B                  		move.b	$B(a5),d0
000A7AD6 4EBA FE60                  		jsr	sub_72C4E(pc)
000A7ADA                            
000A7ADA                            loc_72DC8:
000A7ADA 2A4B                       		movea.l	a3,a5
000A7ADC 6000                       		bra.s	loc_72E02
000A7ADE                            ; ===========================================================================
000A7ADE                            
000A7ADE                            loc_72DCC:
000A7ADE 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A7AE2 4A10                       		tst.b	(a0)
000A7AE4 6A00                       		bpl.s	loc_72DE0
000A7AE6 0C00 00E0                  		cmpi.b	#$E0,d0
000A7AEA 6700                       		beq.s	loc_72DEA
000A7AEC 0C00 00C0                  		cmpi.b	#$C0,d0
000A7AF0 6700                       		beq.s	loc_72DEA
000A7AF2                            
000A7AF2                            loc_72DE0:
000A7AF2 41FA F1FC                  		lea	dword_722CC(pc),a0
000A7AF6 E608                       		lsr.b	#3,d0
000A7AF8 2070 0000                  		movea.l	(a0,d0.w),a0
000A7AFC                            
000A7AFC                            loc_72DEA:
000A7AFC 0890 0002                  		bclr	#2,(a0)
000A7B00 08D0 0001                  		bset	#1,(a0)
000A7B04 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A7B0A 6600                       		bne.s	loc_72E02
000A7B0C 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A7B14                            
000A7B14                            loc_72E02:
000A7B14 504F                       		addq.w	#$04*2,sp					; CHG: skip return addresses (returns back outside of the sound driver)
000A7B16 4E75                       		rts	
000A7B18                            
000A7B18                            SF2_MutePCM:
000A7B18 584F                       		addq.w	#4,sp						; CHG: go back, but not out of sound driver
000A7B1A 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)					; CHG: is this PCM 1?
000A7B20 6600                       		bne.s	SF2_MutePCM2					; CHG: if not, branch to mute PCM 2
000A7B22 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7B28 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A7B2E 33FC 0100 00A1 1100 0839+  		StopZ80
000A7B40 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7B42 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B44 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B46 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7B48 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B4A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B4C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7B4E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B50 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B52 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7B54 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B56 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B58 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A7B60 33FC 0000 00A1 1100        		StartZ80
000A7B68 4E75                       		rts							; CHG: return
000A7B6A                            
000A7B6A                            SF2_MutePCM2:
000A7B6A 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7B70 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 1 slot address
000A7B76 33FC 0100 00A1 1100 0839+  		StopZ80
000A7B88 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7B8A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B8C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B8E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7B90 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B92 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B94 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7B96 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B98 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B9A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7B9C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B9E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7BA0 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A7BA8 33FC 0000 00A1 1100        		StartZ80
000A7BB0 4E75                       		rts							; CHG: return
000A7BB2                            
000A7BB2                            ; ===========================================================================
000A7BB2                            
000A7BB2                            loc_72E06:				; XREF: loc_72A64
000A7BB2 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000A7BB8 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000A7BBC 0815 0002                  		btst	#2,(a5)
000A7BC0 6600                       		bne.s	locret_72E1E 
000A7BC2 4A2E 000E                  	tst.b	$0E(a6)
000A7BC6 6600                       	bne.s	locret_72E1E_2
000A7BC8 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7BCC 6600                       	bne.s	locret_72E1E 
000A7BCE                            
000A7BCE                            	locret_72E1E_2:
000A7BCE 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
000A7BD2 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
000A7BD8 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
000A7BDC 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
000A7BE0 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
000A7BE2 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
000A7BEA                            
000A7BEA                            locret_72E1E:
000A7BEA 4E75                       		rts	
000A7BEC                            ; ===========================================================================
000A7BEC                            
000A7BEC                            loc_72E20:				; XREF: loc_72A64
000A7BEC 0895 0003                  		bclr	#3,(a5)
000A7BF0 4E75                       		rts	
000A7BF2                            ; ===========================================================================
000A7BF2                            
000A7BF2                            loc_72E26:				; XREF: loc_72A64
000A7BF2 1B5C 000B                  		move.b	(a4)+,$B(a5)
000A7BF6 4E75                       		rts	
000A7BF8                            ; ===========================================================================
000A7BF8                            
000A7BF8                            loc_72E2C:				; XREF: loc_72A64
000A7BF8 101C                       		move.b	(a4)+,d0
000A7BFA E148                       		lsl.w	#8,d0
000A7BFC 101C                       		move.b	(a4)+,d0
000A7BFE D8C0                       		adda.w	d0,a4
000A7C00 534C                       		subq.w	#1,a4
000A7C02 4E75                       		rts	
000A7C04                            ; ===========================================================================
000A7C04                            
000A7C04                            loc_72E38:				; XREF: loc_72A64
000A7C04 7000                       		moveq	#0,d0
000A7C06 101C                       		move.b	(a4)+,d0
000A7C08 121C                       		move.b	(a4)+,d1
000A7C0A 4A35 0024                  		tst.b	$24(a5,d0.w)
000A7C0E 6600                       		bne.s	loc_72E48
000A7C10 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000A7C14                            
000A7C14                            loc_72E48:
000A7C14 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000A7C18 66DE                       		bne.s	loc_72E2C
000A7C1A 544C                       		addq.w	#2,a4
000A7C1C 4E75                       		rts	
000A7C1E                            ; ===========================================================================
000A7C1E                            
000A7C1E                            loc_72E52:				; XREF: loc_72A64
000A7C1E 7000                       		moveq	#0,d0
000A7C20 102D 000D                  		move.b	$D(a5),d0
000A7C24 5900                       		subq.b	#4,d0
000A7C26 2B8C 0000                  		move.l	a4,(a5,d0.w)
000A7C2A 1B40 000D                  		move.b	d0,$D(a5)
000A7C2E 60C8                       		bra.s	loc_72E2C
000A7C30                            ; ===========================================================================
000A7C30                            
000A7C30                            loc_72E64:				; XREF: loc_72A64
000A7C30 103C 0088                  		move.b	#$88,d0
000A7C34 123C 000F                  		move.b	#$F,d1
000A7C38 4EBA F676                  		jsr	sub_7272E(pc)
000A7C3C 103C 008C                  		move.b	#$8C,d0
000A7C40 123C 000F                  		move.b	#$F,d1
000A7C44 6000 F66A                  		bra.w	sub_7272E
000A7C48                            ; ===========================================================================
000A7C48                            Music81:	incbin	sound\music81.bin
000A8426 00                         		even
000A8426                            Music82:	incbin	sound\music82.bin
000A8954 00                         		even
000A8954                            Music83:	incbin	sound\music83.bin
000A8DCE 00                         		even
000A8DCE                            Music84:	incbin	sound\music84.bin
000A924C 00                         		even
000A924C                            Music85:	incbin	sound\music85.bin
000A97A4 00                         		even
000A97A4                            Music86:	incbin	sound\music86.bin
000A9ED8                            		even
000A9ED8                            Music87:	incbin	sound\music87.bin
000AA17E 00                         		even
000AA17E                            Music88:	incbin	sound\music88.bin
000AA28A 00                         		even
000AA28A                            Music89:	incbin	sound\music89.bin
000AA5BE 00                         		even
000AA5BE                            Music8A:	incbin	sound\music8A.bin
000AA7D6                            		even
000AA7D6                            Music8B:	incbin	sound\music8B.bin
000AAB02                            		even
000AAB02                            Music8C:	incbin	sound\music8C.bin
000AADC0 00                         		even
000AADC0                            Music8D:	incbin	sound\music8D.bin
000AB062                            		even
000AB062                            Music8E:	incbin	sound\music8E.bin
000AB1F8 00                         		even
000AB1F8                            Music8F:	incbin	sound\music8F.bin
000AB35A 00                         		even
000AB35A                            Music90:	incbin	sound\music90.bin
000AB4DA 00                         		even
000AB4DA                            Music91:	incbin	sound\music91.bin
000ACB02 00                         		even
000ACB02                            Music92:	incbin	sound\music92.bin
000ACC4A 00                         		even
000ACC4A                            Music93:	incbin	sound\music93.bin
000ACD22 00                         		even
000ACD22                            ; ---------------------------------------------------------------------------
000ACD22                            ; Sound	effect pointers
000ACD22                            ; ---------------------------------------------------------------------------
000ACD22 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000ACD2E 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000ACD3A 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000ACD46 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000ACD52 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000ACD5E 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000ACD6A 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000ACD76 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000ACD82 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000ACD8E 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000ACD9A 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000ACDA6 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000ACDB2 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000ACDBE 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000ACDCA 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000ACDD6 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000ACDE2 0000 0000                  SoundD0Index:	dc.l SoundD0
000ACDE6                            SoundA0:	incbin	sound\soundA0.bin
000ACDFC                            		even
000ACDFC                            SoundA1:	incbin	sound\soundA1.bin
000ACE26                            		even
000ACE26                            SoundA2:	incbin	sound\soundA2.bin
000ACE46                            		even
000ACE46                            SoundA3:	incbin	sound\soundA3.bin
000ACE78                            		even
000ACE78                            SoundA4:	incbin	sound\soundA4.bin
000ACEAE                            		even
000ACEAE                            SoundA5:	incbin	sound\soundA5.bin
000ACEDA                            		even
000ACEDA                            SoundA6:	incbin	sound\soundA6.bin
000ACF0A                            		even
000ACF0A                            SoundA7:	incbin	sound\soundA7.bin
000ACF3A                            		even
000ACF3A                            SoundA8:	incbin	sound\soundA8.bin
000ACF6E                            		even
000ACF6E                            SoundA9:	incbin	sound\soundA9.bin
000ACF80                            		even
000ACF80                            SoundAA:	incbin	sound\soundAA.bin
000ACFC2                            		even
000ACFC2                            SoundAB:	incbin	sound\soundAB.bin
000ACFE2                            		even
000ACFE2                            SoundAC:	incbin	sound\soundAC.bin
000AD016                            		even
000AD016                            SoundAD:	incbin	sound\soundAD.bin
000AD04C                            		even
000AD04C                            SoundAE:	incbin	sound\soundAE.bin
000AD096                            		even
000AD096                            SoundAF:	incbin	sound\soundAF.bin
000AD0C4                            		even
000AD0C4                            SoundB0:	incbin	sound\soundB0.bin
000AD0F6                            		even
000AD0F6                            SoundB1:	incbin	sound\soundB1.bin
000AD122                            		even
000AD122                            SoundB2:	incbin	sound\soundB2.bin
000AD172                            		even
000AD172                            SoundB3:	incbin	sound\soundB3.bin
000AD1BC                            		even
000AD1BC                            SoundB4:	incbin	sound\soundB4.bin
000AD218                            		even
000AD218                            SoundB5:	incbin	sound\soundB5.bin
000AD246                            		even
000AD246                            SoundB6:	incbin	sound\soundB6.bin
000AD264                            		even
000AD264                            SoundB7:	incbin	sound\soundB7.bin
000AD2A0                            		even
000AD2A0                            SoundB8:	incbin	sound\soundB8.bin
000AD2BE                            		even
000AD2BE                            SoundB9:	incbin	sound\soundB9.bin
000AD322                            		even
000AD322                            SoundBA:	incbin	sound\soundBA.bin
000AD34A                            		even
000AD34A                            SoundBB:	incbin	sound\soundBB.bin
000AD376                            		even
000AD376                            SoundBC:	incbin	sound\soundBC.bin
000AD3B8                            		even
000AD3B8                            SoundBD:	incbin	sound\soundBD.bin
000AD40C                            		even
000AD40C                            SoundBE:	incbin	sound\soundBE.bin
000AD446                            		even
000AD446                            SoundBF:	incbin	sound\soundBF.bin
000AD4B8                            		even
000AD4B8                            SoundC0:	incbin	sound\soundC0.bin
000AD4E6                            		even
000AD4E6                            SoundC1:	incbin	sound\soundC1.bin
000AD520                            		even
000AD520                            SoundC2:	incbin	sound\soundC2.bin
000AD54A                            		even
000AD54A                            SoundC3:	incbin	sound\soundC3.bin
000AD5C4                            		even
000AD5C4                            SoundC4:	incbin	sound\soundC4.bin
000AD5EC                            		even
000AD5EC                            SoundC5:	incbin	sound\soundC5.bin
000AD654                            		even
000AD654                            SoundC6:	incbin	sound\soundC6.bin
000AD696                            		even
000AD696                            SoundC7:	incbin	sound\soundC7.bin
000AD6C4                            		even
000AD6C4                            SoundC8:	incbin	sound\soundC8.bin
000AD6D6                            		even
000AD6D6                            SoundC9:	incbin	sound\soundC9.bin
000AD704                            		even
000AD704                            SoundCA:	incbin	sound\soundCA.bin
000AD732                            		even
000AD732                            SoundCB:	incbin	sound\soundCB.bin
000AD77E                            		even
000AD77E                            SoundCC:	incbin	sound\soundCC.bin
000AD7B8                            		even
000AD7B8                            SoundCD:	incbin	sound\soundCD.bin
000AD7C6                            		even
000AD7C6                            SoundCE:	incbin	sound\soundCE.bin
000AD7F4                            		even
000AD7F4                            SoundCF:	incbin	sound\soundCF.bin
000AD82C                            		even
000AD82C                            SoundD0:	incbin	sound\soundD0.bin
000AD866                            		even
000AD866                            SegaPCM:	incbin	"Dual PCM\Samples\incswf\Sega.swf",$3A
000B36AC                            SegaPCM_End:	even
000B36AC                            
000B36AC                            ; ===========================================================================
000B36AC                            ; ---------------------------------------------------------------------------
000B36AC                            ; Z80 ROM address
000B36AC                            ; ---------------------------------------------------------------------------
000B36AC                            
000B36AC                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
000B51E4 00                         Z80ROM_End:	even
000B51E4                            
000B51E4                            ; ===========================================================================
000B51E4                            ; ---------------------------------------------------------------------------
000B51E4                            ; Sample 68k PCM list
000B51E4                            ; ---------------------------------------------------------------------------
000B51E4                            ; SampleList:
000B51E4                            		include	"Dual PCM\Samples.asm"
000B51E4                            ; ===========================================================================
000B51E4                            ; ---------------------------------------------------------------------------
000B51E4                            ; Sample 68k PCM list
000B51E4                            ; ---------------------------------------------------------------------------
000B51E4                            
000B51E4                            SampleList:
000B51E4                            
000B51E4                            	; --- Sonic 1 Samples ---
000B51E4                            
000B51E4 0000 0000                  		dc.l	Sonic1Kick			; 00
000B51E8 0000 0000                  		dc.l	Sonic1Snare			; 01
000B51EC 0000 0000                  		dc.l	Sonic1Timpani		; 02
000B51F0 0000 0000                  		dc.l	SonimeDies			; 03
000B51F4 0000 0000                  		dc.l	SonimeFrustrated	; 04
000B51F8 0000 0000                  		dc.l	SonimeHappy			; 05
000B51FC 0000 0000                  		dc.l	SonimeHappy2		; 06
000B5200 0000 0000                  		dc.l	SonimeHurt			; 07
000B5204 0000 0000                  		dc.l	SonimeImpatient		; 08
000B5208 0000 0000                  		dc.l	SonimeInvincibility	; 09
000B520C 0000 0000                  		dc.l	SonimeSpikey	; 0A
000B5210 0000 0000                  		dc.l	SonimeSpeed	; 0B
000B5214                            		
000B5214                            ; ---------------------------------------------------------------------------
000B5214                            ; Sample z80 pointers
000B5214                            ; ---------------------------------------------------------------------------
000B5214 =000036B0                  Sec	=	14000	; Hz per second
000B5214 =000003E8                  Mil	=	1000	; centi-seconds per second
000B5214                            
000B5214                            	; --- Stop Sample (used by note 80) ---
000B5214                            
000B5214 0000 0000 0000 0000 0000+  StopSample:				dcz80	SWF_StopSample,		SWF_StopSample_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B5220                            
000B5220                            	; --- Sonic 1 Samples ---
000B5220                            
000B5220 0000 0000 0000 0000 0000+  Sonic1Kick:				dcz80	SWF_S1_Kick,		SWF_S1_Kick_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B522C 0000 0000 0000 0000 0000+  Sonic1Snare:			dcz80	SWF_S1_Snare,		SWF_S1_Snare_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B5238 0000 0000 0000 0000 0000+  Sonic1Timpani:			dcz80	SWF_S1_Timpani,		SWF_S1_Timpani,			SWF_StopSample,		SWF_StopSample_Rev
000B5244 0000 0000 0000 0000 0000+  SonimeDies:				dcz80	SWF_Dies,			SWF_Dies_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B5250 0000 0000 0000 0000 0000+  SonimeFrustrated:		dcz80	SWF_Frustrated,		SWF_Frustrated_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B525C 0000 0000 0000 0000 0000+  SonimeHappy:			dcz80	SWF_Happy,			SWF_Happy_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B5268 0000 0000 0000 0000 0000+  SonimeHappy2:			dcz80	SWF_Happy2,			SWF_Happy2_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B5274 0000 0000 0000 0000 0000+  SonimeHurt:				dcz80	SWF_Hurt,			SWF_Hurt_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B5280 0000 0000 0000 0000 0000+  SonimeImpatient:		dcz80	SWF_Impatient,		SWF_Impatient_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B528C 0000 0000 0000 0000 0000+  SonimeInvincibility:	dcz80	SWF_Invincibility,	SWF_Invincibility_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B5298 0000 0000 0000 0000 0000+  SonimeSpikey:	dcz80	SWF_Spikey,	SWF_Spikey_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B52A4 0000 0000 0000 0000 0000+  SonimeSpeed:		dcz80	SWF_Speed,		SWF_Speed_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B52B0                            ; ---------------------------------------------------------------------------
000B52B0                            ; Sample file includes
000B52B0                            ; ---------------------------------------------------------------------------
000B52B0                            			align	$8000,$FF
000B8000                            ; ---------------------------------------------------------------------------
000B8000                            
000B8000                            	; --- Volume tables ---
000B8000                            
000B8000                            PCM_Volumes:		incbin	"Dual PCM\Volume Maker\Volumes.bin"
000C0000                            
000C0000                            	; --- Stop Sample (used by note 80) ---
000C0000                            
000C0000                            			EndMarker
000C0198                            SWF_StopSample:		dcb.b	$8000-((Z80E_Read*(($1000+$100)/$100))*2),$80
000C7E68                            SWF_StopSample_Rev:	EndMarker
000C8000                            
000C8000                            	; --- Sonic 1 Samples ---
000C8000                            
000C8000                            SWF_S1_Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
000C8894                            SWF_S1_Kick_Rev:	EndMarker
000C8A2C                            SWF_S1_Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
000C9303                            SWF_S1_Snare_Rev:	EndMarker
000C949B                            SWF_S1_Timpani:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani.swf"
000CC41F                            SWF_S1_Timpani_Rev:	EndMarker
000CC5B7                            SWF_Dies:			incbin	"Dual PCM\Samples\incswf\dies.swf"
000D0D24                            SWF_Dies_Rev:		EndMarker
000D0EBC                            SWF_Frustrated:		incbin	"Dual PCM\Samples\incswf\frustrated.swf"
000D8283                            SWF_Frustrated_Rev:	EndMarker
000D841B                            SWF_Happy:			incbin	"Dual PCM\Samples\incswf\happy.swf"
000DF3D3                            SWF_Happy_Rev:		EndMarker
000DF56B                            SWF_Happy2:			incbin	"Dual PCM\Samples\incswf\happy 2.swf"
000ECBB7                            SWF_Happy2_Rev:		EndMarker
000ECD4F                            SWF_Hurt:			incbin	"Dual PCM\Samples\incswf\hurt.swf"
000EF942                            SWF_Hurt_Rev:		EndMarker
000EFADA                            SWF_Impatient:		incbin	"Dual PCM\Samples\incswf\impatient.swf"
000F922E                            SWF_Impatient_Rev:	EndMarker
000F93C6                            SWF_Invincibility:	incbin	"Dual PCM\Samples\incswf\invincibility.swf"
001107C1                            SWF_Invincibility_Rev:	EndMarker
00110959                            SWF_Spikey:	incbin	"Dual PCM\Samples\incswf\spikey.swf"
00114934                            SWF_Spikey_Rev:	EndMarker
00114ACC                            SWF_Speed:	incbin	"Dual PCM\Samples\incswf\goingatsupersonicspeed.swf"
0011F331                            SWF_Speed_Rev:	EndMarker
0011F4C9                            ; ===========================================================================
0011F4C9                            ; ===========================================================================
0011F4CA 00                         		even
0011F4CA                            
0011F4CA                            ; ===========================================================================
0011F4CA                            
0011F4CA                            SHC2021:    incbin "SHC21_Lite_Sonic12.bin"
0012572E                                        even
0012572E                            
0012572E                            ; ===============================================================
0012572E                            ; ---------------------------------------------------------------
0012572E                            ; Error handling module
0012572E                            ; ---------------------------------------------------------------
0012572E                            
0012572E 4EBA 0000                  BusError:	jsr	ErrorHandler(pc)
00125732 4255 5320 4552 524F 5200   		dc.b	"BUS ERROR",0			; text
0012573C 01                         		dc.b	1				; extended stack frame
0012573E 00                         		even
0012573E                            
0012573E 4EBA 0000                  AddressError:	jsr	ErrorHandler(pc)
00125742 4144 4452 4553 5320 4552+  		dc.b	"ADDRESS ERROR",0		; text
00125750 01                         		dc.b	1				; extended stack frame
00125752 00                         		even
00125752                            
00125752 4EBA 0000                  IllegalInstr:	jsr	ErrorHandler(pc)
00125756 494C 4C45 4741 4C20 494E+  		dc.b	"ILLEGAL INSTRUCTION",0		; text
0012576A 00                         		dc.b	0				; extended stack frame
0012576C 00                         		even
0012576C                            
0012576C 4EBA 0000                  ZeroDivide:	jsr	ErrorHandler(pc)
00125770 5A45 524F 2044 4956 4944+  		dc.b	"ZERO DIVIDE",0  		; text
0012577C 00                         		dc.b	0				; extended stack frame
0012577E 00                         		even
0012577E                            
0012577E 4EBA 0000                  ChkInstr:	jsr	ErrorHandler(pc)
00125782 4348 4B20 494E 5354 5255+  		dc.b	"CHK INSTRUCTION",0  		; text
00125792 00                         		dc.b	0				; extended stack frame
00125794 00                         		even
00125794                            
00125794 4EBA 0000                  TrapvInstr:	jsr	ErrorHandler(pc)
00125798 5452 4150 5620 494E 5354+  		dc.b	"TRAPV INSTRUCTION",0  		; text
001257AA 00                         		dc.b	0				; extended stack frame
001257AC 00                         		even
001257AC                            
001257AC 4EBA 0000                  PrivilegeViol:	jsr	ErrorHandler(pc)
001257B0 5052 4956 494C 4547 4520+  		dc.b	"PRIVILEGE VIOLATION",0  	; text
001257C4 00                         		dc.b	0				; extended stack frame
001257C6 00                         		even
001257C6                            
001257C6 4EBA 0000                  Trace:		jsr	ErrorHandler(pc)
001257CA 5452 4143 4500             		dc.b	"TRACE",0 	  		; text
001257D0 00                         		dc.b	0				; extended stack frame
001257D2 00                         		even
001257D2                            
001257D2 4EBA 0000                  Line1010Emu:	jsr	ErrorHandler(pc)
001257D6 4C49 4E45 2031 3031 3020+  		dc.b	"LINE 1010 EMULATOR",0  	; text
001257E9 00                         		dc.b	0				; extended stack frame
001257EA                            		even
001257EA                            
001257EA 4EBA 0000                  Line1111Emu:	jsr	ErrorHandler(pc)
001257EE 4C49 4E45 2031 3131 3120+  		dc.b	"LINE 1111 EMULATOR",0  	; text
00125801 00                         		dc.b	0				; extended stack frame
00125802                            		even
00125802                            
00125802 4EBA 0000                  ErrorExcept:	jsr	ErrorHandler(pc)
00125806 4552 524F 5220 4558 4345+  		dc.b	"ERROR EXCEPTION",0    		; text
00125816 00                         		dc.b	0				; extended stack frame
00125818 00                         		even
00125818                            
00125818                            ErrorHandler:	incbin	"ErrorHandler.bin"
0012722C                            
0012722C                            ; end of 'ROM'
0012722C                            EndOfRom:
0012722C                            
0012722C                            
