00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            		include	"Equates.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =FFFFFF90                  HBlankRAM	=	$FFFFFF90		; word	; jmp $00000000
00000000 =FFFFFF92                  HBlankRout	=	HBlankRAM+$02		; long	; ''
00000000 =FFFFFF96                  VBlankRAM	=	HBlankRout+$04		; word	; jmp $00000000
00000000 =FFFFFF98                  VBlankRout	=	VBlankRAM+$02		; long	; ''
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000018                  Z80E_Read = $18 
00000000 =000000DD                  x = $DD 
00000000 =000000FD                  y = $FD 
00000000 =00000000                  ldin = $0 
00000000 =00000000                  deci = $0 
00000000 =00000000                  inci = $0 
00000000 =00000000                  M_Read = $0 
00000000 =00000000                  M_CapPCM = $0 
00000000 =00000000                  M_Flush01 = $0 
00000000 =00000000                  M_Flush02 = $0 
00000000 =00000000                  M_Revert01 = $0 
00000000 =00000000                  M_Revert02 = $0 
00000000 =00000000                  M_Wrap = $0 
00000000 =00000000                  M_WrapCondition = $0 
00000000 =00000000                  Z80_Start = $0 
00000000 =00000010                  Z80_Stack = $10 
00000000 =00000010                  BreakLate = $10 
00000000 =00000028                  PCM1_ResetJmp = $28 
00000000 =00000030                  PCM2_ResetJmp = $30 
00000000 =00000038                  BreakVBlank = $38 
00000000 =00000040                  BVB_Check = $40 
00000000 =00000046                  BreakPrep = $46 
00000000 =00000063                  BreakDMA = $63 
00000000 =00000074                  BDMA_NoExchange = $74 
00000000 =00000082                  BDMA_NoFixVolume = $82 
00000000 =00000083                  BDMA_NoFixFlush = $83 
00000000 =00000084                  BDMA_ReadSet = $84 
00000000 =00000084                  BreakBank = $84 
00000000 =00000090                  BDMA_NoMax = $90 
00000000 =0000009A                  BDMA_FlushLoop = $9A 
00000000 =0000009A                  Z80_VBlank2 = $9A 
00000000 =0000009E                  BDMA_Flush02 = $9E 
00000000 =000000B3                  Z80_VBlank1 = $B3 
00000000 =000000B7                  BDMA_Flush01 = $B7 
00000000 =00000107                  BDMA_NoRestore = $107 
00000000 =00000107                  YM_FlushTimer = $107 
00000000 =00000116                  YMF_Buff1 = $116 
00000000 =00000120                  YM_Flush = $120 
00000000 =00000123                  YMF_NextByte = $123 
00000000 =00000142                  Z80_DelayYM1 = $142 
00000000 =00000169                  Z80_DelayYM2 = $169 
00000000 =00000189                  YMF_Finish02 = $189 
00000000 =0000018E                  Z80_DelayYM3 = $18E 
00000000 =00000192                  YMF_Finish01 = $192 
00000000 =00000197                  Z80_DelayYM4 = $197 
00000000 =0000019B                  PCM_Flush_exx = $19B 
00000000 =0000019C                  PCM_Flush = $19C 
00000000 =0000019F                  PCM_NextByte = $19F 
00000000 =000001B3                  Z80_DelayEnd1 = $1B3 
00000000 =000001B5                  YMF_Enter02 = $1B5 
00000000 =000001CC                  Z80_DelayEnd2 = $1CC 
00000000 =000001CE                  YMF_Enter01 = $1CE 
00000000 =000001F6                  YMF_SetBuff1 = $1F6 
00000000 =00000202                  VB_PCM1_VolOK = $202 
00000000 =0000020C                  VB_PCM2_VolOK = $20C 
00000000 =0000020D                  PCM_VolChangeDel = $20D 
00000000 =00000218                  PCM1_VolumeNext = $218 
00000000 =0000021D                  PCM2_VolumeNext = $21D 
00000000 =00000222                  PCM_VolChangeNo = $222 
00000000 =00000229                  Z80_Int1 = $229 
00000000 =0000022D                  Z80_Init = $22D 
00000000 =00000291                  CatchUp = $291 
00000000 =00000292                  CatchUp_Exx = $292 
00000000 =000002A6                  Z80_Int2 = $2A6 
00000000 =000002A7                  PCM1_MuteRet = $2A7 
00000000 =000002AC                  Int1_nop = $2AC 
00000000 =000002AD                  PCM1_Switch = $2AD 
00000000 =000002B8                  PCM1_OverflwCur = $2B8 
00000000 =000002C1                  PCM1_OverflwDiv = $2C1 
00000000 =000002DF                  Int1_lda = $2DF 
00000000 =000002E4                  PCM1_PrepRet = $2E4 
00000000 =000002E4                  PCM1_SampCur = $2E4 
00000000 =000002E7                  PCM1_Buffer = $2E7 
00000000 =000002EA                  PCM1_PitchQuo = $2EA 
00000000 =000002ED                  PCM1_PitchDiv = $2ED 
00000000 =000002F0                  PCM1_PitchCur = $2F0 
00000000 =000002F2                  PCM1_PreInst01 = $2F2 
00000000 =000002F7                  PCM1_PreInst02 = $2F7 
00000000 =000002FC                  PCM1_PreInst03 = $2FC 
00000000 =00000318                  PCM1_PreInst04 = $318 
00000000 =0000031D                  PCM1_PreInst05 = $31D 
00000000 =00000322                  PCM1_PreInst06 = $322 
00000000 =00000327                  PCM1_PreInst07 = $327 
00000000 =00000343                  PCM1_PreInst08 = $343 
00000000 =00000348                  PCM1_PreInst09 = $348 
00000000 =0000034D                  PCM1_PreInst0A = $34D 
00000000 =00000352                  PCM1_PreInst0B = $352 
00000000 =00000357                  PCM1_PreInst0C = $357 
00000000 =00000373                  PCM1_PreInst0D = $373 
00000000 =00000378                  PCM1_PreInst0E = $378 
00000000 =0000037D                  PCM1_PreInst0F = $37D 
00000000 =00000382                  PCM1_PreInst10 = $382 
00000000 =0000039E                  PCM1_PreInst11 = $39E 
00000000 =000003A3                  PCM1_PreInst12 = $3A3 
00000000 =000003A8                  PCM1_PreInst13 = $3A8 
00000000 =000003AD                  PCM1_PreInst14 = $3AD 
00000000 =000003B2                  PCM1_PreInst15 = $3B2 
00000000 =000003CE                  PCM1_PreInst16 = $3CE 
00000000 =000003D3                  PCM1_PreInst17 = $3D3 
00000000 =000003D8                  PCM1_PreInst18 = $3D8 
00000000 =00000403                  PCM2_MuteRet = $403 
00000000 =00000408                  Int2_nop = $408 
00000000 =00000409                  PCM2_Switch = $409 
00000000 =00000414                  PCM2_OverflwCur = $414 
00000000 =00000432                  PCM2_OverflwDiv = $432 
00000000 =0000043B                  Int2_lda = $43B 
00000000 =00000440                  PCM2_PrepRet = $440 
00000000 =00000440                  PCM2_SampCur = $440 
00000000 =00000443                  PCM2_Buffer = $443 
00000000 =00000446                  PCM2_PitchQuo = $446 
00000000 =00000449                  PCM2_PitchDiv = $449 
00000000 =0000044C                  PCM2_PitchCur = $44C 
00000000 =0000044E                  PCM2_PreInst01 = $44E 
00000000 =0000046A                  PCM2_PreInst02 = $46A 
00000000 =0000046F                  PCM2_PreInst03 = $46F 
00000000 =00000474                  PCM2_PreInst04 = $474 
00000000 =00000479                  PCM2_PreInst05 = $479 
00000000 =0000047E                  PCM2_PreInst06 = $47E 
00000000 =0000049A                  PCM2_PreInst07 = $49A 
00000000 =0000049F                  PCM2_PreInst08 = $49F 
00000000 =000004A4                  PCM2_PreInst09 = $4A4 
00000000 =000004A9                  PCM2_PreInst0A = $4A9 
00000000 =000004C5                  PCM2_PreInst0B = $4C5 
00000000 =000004CA                  PCM2_PreInst0C = $4CA 
00000000 =000004CF                  PCM2_PreInst0D = $4CF 
00000000 =000004D4                  PCM2_PreInst0E = $4D4 
00000000 =000004D9                  PCM2_PreInst0F = $4D9 
00000000 =000004F5                  PCM2_PreInst10 = $4F5 
00000000 =000004FA                  PCM2_PreInst11 = $4FA 
00000000 =000004FF                  PCM2_PreInst12 = $4FF 
00000000 =00000504                  PCM2_PreInst13 = $504 
00000000 =00000520                  PCM2_PreInst14 = $520 
00000000 =00000525                  PCM2_PreInst15 = $525 
00000000 =0000052A                  PCM2_PreInst16 = $52A 
00000000 =0000052F                  PCM2_PreInst17 = $52F 
00000000 =00000534                  PCM2_PreInst18 = $534 
00000000 =0000055F                  UPD1_Buffer = $55F 
00000000 =00000565                  UPD1_SampCur = $565 
00000000 =0000056B                  UPD1_PitchCur = $56B 
00000000 =000005A3                  PCM_BuffNoReset = $5A3 
00000000 =000005A4                  PCM1_ChangeBank = $5A4 
00000000 =000005BB                  PCM1_IgnoreBank = $5BB 
00000000 =000005BB                  PCM2_ChangeBank = $5BB 
00000000 =000005D2                  PCM2_IgnoreBank = $5D2 
00000000 =000005D2                  PCM1_ChangePitch = $5D2 
00000000 =000005DC                  PCM1_PitchHigh = $5DC 
00000000 =000005E7                  PCM1_PitchLow = $5E7 
00000000 =00000603                  PCM1_IgnorePitch = $603 
00000000 =00000603                  PCM2_ChangePitch = $603 
00000000 =0000060D                  PCM2_PitchHigh = $60D 
00000000 =00000618                  PCM2_PitchLow = $618 
00000000 =00000634                  PCM2_IgnorePitch = $634 
00000000 =00000634                  PCM_ChangeVolume = $634 
00000000 =00000641                  PCM1_Volume = $641 
00000000 =00000646                  PCM2_Volume = $646 
00000000 =0000064B                  PCM_VolumeAlter = $64B 
00000000 =0000064E                  PCM_VolumeRet = $64E 
00000000 =0000064E                  PCM1_NewRET = $64E 
00000000 =00000651                  PCM2_NewRET = $651 
00000000 =00000654                  PCM_NoUpdate = $654 
00000000 =0000066A                  CU_ValidDist = $66A 
00000000 =0000066F                  CU_Flush = $66F 
00000000 =00000673                  FL_NextByte = $673 
00000000 =00000687                  Z80_Flush1 = $687 
00000000 =000006A1                  Z80_Flush2 = $6A1 
00000000 =000006BC                  PCM1_Mute = $6BC 
00000000 =000006CE                  PCM1_Normal = $6CE 
00000000 =000006D4                  PCM1_Reverse = $6D4 
00000000 =000006ED                  PCM1_PrepReset = $6ED 
00000000 =000006FC                  PCM1_PrepCount = $6FC 
00000000 =0000070A                  PCM1_PrepLoc = $70A 
00000000 =0000072E                  Int1_jp = $72E 
00000000 =00000731                  PCM1_Reset = $731 
00000000 =00000745                  PCM1_ValueAdd = $745 
00000000 =00000770                  Int1_ldhl = $770 
00000000 =00000782                  PCM1_ResInst = $782 
00000000 =00000787                  PCM1_ResSamp = $787 
00000000 =0000078A                  PCM1_ResBuff = $78A 
00000000 =0000078D                  PCM1_ResDiv = $78D 
00000000 =00000790                  PCM1_ResPitCur = $790 
00000000 =00000794                  PCM1_ResQuo = $794 
00000000 =00000797                  PCM1_ResJump = $797 
00000000 =0000079A                  PCM1_NewSample = $79A 
00000000 =000007AA                  PCM1_NewNormal = $7AA 
00000000 =000007B0                  PCM1_NewReverse = $7B0 
00000000 =000007C7                  PCM2_Mute = $7C7 
00000000 =000007D9                  PCM2_Normal = $7D9 
00000000 =000007DF                  PCM2_Reverse = $7DF 
00000000 =000007F8                  PCM2_PrepReset = $7F8 
00000000 =00000807                  PCM2_PrepCount = $807 
00000000 =00000815                  PCM2_PrepLoc = $815 
00000000 =00000824                  Int2_jp = $824 
00000000 =00000827                  PCM2_Reset = $827 
00000000 =0000083B                  PCM2_ValueAdd = $83B 
00000000 =00000866                  Int2_ldhl = $866 
00000000 =00000878                  PCM2_ResInst = $878 
00000000 =0000087D                  PCM2_ResSamp = $87D 
00000000 =00000880                  PCM2_ResBuff = $880 
00000000 =00000883                  PCM2_ResDiv = $883 
00000000 =00000886                  PCM2_ResPitCur = $886 
00000000 =0000088A                  PCM2_ResQuo = $88A 
00000000 =0000088D                  PCM2_ResJump = $88D 
00000000 =00000890                  PCM2_NewSample = $890 
00000000 =000008A0                  PCM2_NewNormal = $8A0 
00000000 =000008A6                  PCM2_NewReverse = $8A6 
00000000 =00000A00                  PCM_Volume1 = $A00 
00000000 =00000B00                  PCM_Volume2 = $B00 
00000000 =00000C00                  PCM1_PrepTable = $C00 
00000000 =00000C30                  PCM2_PrepTable = $C30 
00000000 =00000C60                  PCM1_BankCur = $C60 
00000000 =00000C61                  PCM2_BankCur = $C61 
00000000 =00000C62                  MuteSample = $C62 
00000000 =00000C64                  MuteBank = $C64 
00000000 =00000C65                  MuteSample_Rev = $C65 
00000000 =00000C67                  MuteBank_Rev = $C67 
00000000 =00000C68                  YM_Buffer = $C68 
00000000 =00000C69                  PCM1_Sample = $C69 
00000000 =00000C6B                  PCM1_Bank = $C6B 
00000000 =00000C6C                  PCM1_Sample_Rev = $C6C 
00000000 =00000C6E                  PCM1_Bank_Rev = $C6E 
00000000 =00000C6F                  PCM1_SampleNext = $C6F 
00000000 =00000C71                  PCM1_BankNext = $C71 
00000000 =00000C72                  PCM1_SampleNext_Rev = $C72 
00000000 =00000C74                  PCM1_BankNext_Rev = $C74 
00000000 =00000C75                  PCM2_Sample = $C75 
00000000 =00000C77                  PCM2_Bank = $C77 
00000000 =00000C78                  PCM2_Sample_Rev = $C78 
00000000 =00000C7A                  PCM2_Bank_Rev = $C7A 
00000000 =00000C7B                  PCM2_SampleNext = $C7B 
00000000 =00000C7D                  PCM2_BankNext = $C7D 
00000000 =00000C7E                  PCM2_SampleNext_Rev = $C7E 
00000000 =00000C80                  PCM2_BankNext_Rev = $C80 
00000000 =00000CB0                  PCM_Buffer1 = $CB0 
00000000 =00000EB0                  PCM_Buffer2 = $EB0 
00000000 =00001000                  YM_Buffer1 = $1000 
00000000 =00001400                  YM_Buffer2 = $1400 
00000000 =00001800                  PCM_OverflwCalc = $1800 
00000000 =00001A00                  PCM_VolumeControl = $1A00 
00000000 =00001A06                  PCM1_VolumeNew = $1A06 
00000000 =00001A08                  PCM1_VolumeCur = $1A08 
00000000 =00001A13                  PCM1_VolTimer = $1A13 
00000000 =00001A1B                  PCM1_NoVolume = $1A1B 
00000000 =00001A1B                  PCM2_VolumeNew = $1A1B 
00000000 =00001A1D                  PCM2_VolumeCur = $1A1D 
00000000 =00001A28                  PCM2_VolTimer = $1A28 
00000000 =00001A30                  PCM2_NoVolume = $1A30 
00000000 =00001A35                  SwitchVolume = $1A35 
00000000 =00001A38                  SV_VolumeBank = $1A38 
00000000 =00001A55                  SV_NoMute = $1A55 
00000000 =00001A5A                  SV_LoadVolume = $1A5A 
00000000 =00001A6E                  SV_Flush = $1A6E 
00000000 =00001A91                  SVF_NoMute = $1A91 
00000000 =00001A96                  SVF_LoadVolume = $1A96 
00000000 =00001AAB                  SVF_StartVolume = $1AAB 
00000000 =00001AFC                  SwitchBank = $1AFC 
00000000 =00001B03                  SetBank = $1B03 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000 =000007A0                  torsoart = $7A0 ($C tiles)
00000000 =000007AC                  headart = $7AC ($14 tiles)
00000000 =00000798                  hairart = $798 (8 tiles)
00000000 =000006BA                  ringart = $6BA ($E tiles)
00000000 =00000568                  pointsart = $568 (9 tiles)
00000000 =00000571                  lamppostart = $571 ($A tiles)
00000000                            
00000000 =0000022D                  ssringart = $22D ($E tiles)
00000000                            
00000000 =FFFFF5C0                  SonimeSST = $FFFFF5C0
00000000 =FFFFFFF9                  v_ssangleprev = $FFFFFFF9
00000000 =FFFFF601                  FromSEGA = $FFFFF601
00000000                            
00000000 =00000000                  sonime_headtimer = 0
00000000 =00000002                  sonime_headx = 2
00000000 =00000003                  sonime_heady = 3
00000000 =00000004                  sonime_routine = 4
00000000 =00000005                  sonime_routine2 = 5
00000000 =00000006                  sonime_headx2 = 6
00000000 =00000007                  sonime_headx3 = 7
00000000 =00000009                  sonime_hairx = 9
00000000 =0000000A                  sonime_heady2 = $A
00000000 =0000000B                  sonime_heady3 = $B
00000000 =0000000D                  sonime_hairy = $D
00000000 =0000000E                  sonime_face = $E
00000000 =0000000F                  sonime_faceold = $F
00000000 =00000010                  sonime_facetimer = $10
00000000 =00000012                  sonime_ear = $12
00000000 =00000013                  sonime_earold = $13
00000000 =00000014                  sonime_eartimer = $14
00000000 =00000016                  sonime_torsox = $16
00000000 =00000017                  sonime_movein = $17
00000000 =00000018                  sonime_waittimer = $18
00000000 =00000019                  sonime_waittimer2 = $19
00000000 =00000020                  sonime_pausetimer = $20
00000000 =00000022                  sonime_airtimer = $22
00000000                            
00000000 =00000000                  face_neutrall = 0
00000000 =00000001                  face_blink = 1
00000000 =00000002                  face_neutrallm = 2
00000000 =00000003                  face_neutralm = 3
00000000 =00000004                  face_neutralr = 4
00000000 =00000005                  face_frustrated = 5
00000000 =00000006                  face_surprised = 6
00000000 =00000007                  face_happy = 7
00000000 =00000008                  face_confused = 8
00000000 =00000009                  face_meltdown = 9
00000000 =0000000A                  face_panic = $A
00000000 =0000000B                  face_impatient = $B
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            ResetZ80	macro
00000000                            		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00000000                            		endm
00000000                            
00000000                            NeglectZ80	macro
00000000                            		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- DMA to (a6) containing C00004 ---
00000000                            
00000000                            DMA:		macro	Size, Source, Destination
00000000                            		move.l	#(((((Size/$02)<<$08)&$FF0000)+((Size/$02)&$FF))+$94009300),(a6)
00000000                            		move.l	#((((((Source&$FFFFFF)/$02)<<$08)&$FF0000)+(((Source&$FFFFFF)/$02)&$FF))+$96009500),(a6)
00000000                            		move.l	#(((((Source&$FFFFFF)/$02)&$7F0000)+$97000000)+((Destination>>$10)&$FFFF)),(a6)
00000000                            		move.w	#((Destination&$FF7F)|$80),(a6)
00000000                            		endm
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample, SampleRev, SampleLoop, SampleLoopRev
00000000                            		dc.b	((Sample)&$FF)
00000000                            		dc.b	((((Sample)>>$08)&$7F)|$80)
00000000                            		dc.b	(((Sample)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleRev)-1)&$FF)
00000000                            		dc.b	(((((SampleRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleRev)-1)&$7F8000)>>$0F)
00000000                            		dc.b	((SampleLoop)&$FF)
00000000                            		dc.b	((((SampleLoop)>>$08)&$7F)|$80)
00000000                            		dc.b	(((SampleLoop)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleLoopRev)-1)&$FF)
00000000                            		dc.b	(((((SampleLoopRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleLoopRev)-1)&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            	; --- End marker for PCM samples ---
00000000                            
00000000                            EndMarker	macro
00000000                            		dcb.b	Z80E_Read*(($1000+$100)/$100),$00
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            PlayPCM2	macro	Sample
00000000                            		move.l	a0,-(sp)
00000000                            		move.l	a1,-(sp)
00000000                            		lea (Sample).l,a0 ; load sample pointers
00000000                            		lea ($A00C75).l,a1 ; load PCM2 pointers
00000000                            		move.w #$0100,($A11100).l ; request Z80 stop (ON)
00000000                            		btst.b #$00,($A11100).l ; has the Z80 stopped yet?
00000000                            		bne.s *-$08 ; if not, branch
00000000                            		move.b #0,($A00647).l ; set volume
00000000                            		move.b (a0)+,(a1)+ ; set address of sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b #%11011010,($A00651).l ; set request
00000000                            		move.w #$0000,($A11100).l ; request Z80 stop (OFF)
00000000                            		move.l	(sp)+,a1
00000000                            		move.l	(sp)+,a0
00000000                            		endm
00000000                            
00000000                            
00000000                            
00000000 =000001FF                  Max_Rings = 511 ; default. maximum number possible is 759
00000000 =00000400                  Rings_Space = (Max_Rings+1)*2
00000000                            
00000000 =FFFF8000                  Object_Respawn_Table = $FFFF8000
00000000 =FFFFFE2A                  Camera_X_pos_last = $FFFFFE2A
00000000 =FFFFF76E                  Camera_Y_pos_last = $FFFFF76E
00000000                            
00000000 =FFFF8300                  Ring_Positions = $FFFF8300
00000000 =FFFF8700                  Ring_start_addr_ROM = Ring_Positions+Rings_Space
00000000 =FFFF8704                  Ring_end_addr_ROM = Ring_Positions+Rings_Space+4
00000000 =FFFF8708                  Ring_start_addr_RAM = Ring_Positions+Rings_Space+8
00000000 =FFFF870A                  Perfect_rings_left = Ring_Positions+Rings_Space+$A
00000000 =FFFF870C                  Rings_manager_routine = Ring_Positions+Rings_Space+$C
00000000 =FFFF870D                  Level_started_flag = Ring_Positions+Rings_Space+$D
00000000 =FFFF870E                  Ring_consumption_table = Ring_Positions+Rings_Space+$E
00000000 =00000014                  respawn_index = $14	
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6	
00000000                            	
00000000 =00000001                  Yes		=	1
00000000 =00000000                  No		=	0
00000000                            
00000000 =00000000                  MUTEDAC		=	No
00000000 =00000000                  MUTEFM		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 5654 5542 4552 2049 4E20+  Title_Local:	dc.b 'VTUBER IN SONIC 1                               ' ; Domestic name
00000150 5654 5542 4552 2049 4E20+  Title_Int:	dc.b 'VTUBER IN SONIC 1                               ' ; International name
00000180 474D 2030 3030 3034 3034+  Serial:					dc.b "GM 00004049-01" ; Serial/version number (Rev01)
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E                            
0000030E                            loc_348:
0000030E 2CC7                       		move.l	d7,(a6)+
00000310 51CE FFFC                  		dbf	d6,loc_348
00000314 1039 00A1 0001             		move.b	($A10001).l,d0
0000031A 0200 00C0                  		andi.b	#$C0,d0
0000031E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000322 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000032A                            
0000032A                            GameInit:
0000032A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000330 7E00                       		moveq	#0,d7
00000332 3C3C 3F7F                  		move.w	#$3F7F,d6
00000336                            
00000336                            GameClrRAM:
00000336 2CC7                       		move.l	d7,(a6)+
00000338 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000033C 6100 0000                  		bsr.w	VDPSetupGame
00000340 6100 0000                  		bsr.w	SoundDriverLoad
00000344 6100 0000                  		bsr.w	JoypadInit
00000348 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000034E                            
0000034E 41FA 0000                  		lea	GML_Int(pc),a0				; load interrupt list
00000352 3258                       		movea.w	(a0)+,a1				; load dump address
00000354 22D8                       		move.l	(a0)+,(a1)+				; jmp $0000
00000356 22D8                       		move.l	(a0)+,(a1)+				; $0000 jmp
00000358 22D8                       		move.l	(a0)+,(a1)+				; $00000000
0000035A                            
0000035A                            MainGameLoop:
0000035A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000035E 0240 001C                  		andi.w	#$1C,d0
00000362 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000366 60F2                       		bra.s	MainGameLoop
00000368                            
00000368 FF90                       GML_Int:	dc.w	HBlankRAM&$FFFF
0000036A 4EF9 0000 0000             		jmp	PalToCRAM
00000370 4EF9 0000 0000             		jmp	loc_B10
00000376                            
00000376 4E73                       NullBlank:	rte
00000378                            
00000378                            ; ===========================================================================
00000378                            ; ---------------------------------------------------------------------------
00000378                            ; Main game mode array
00000378                            ; ---------------------------------------------------------------------------
00000378                            
00000378                            GameModeArray:
00000378 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000037C                            ; ===========================================================================
0000037C 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000380                            ; ===========================================================================
00000380 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000384                            ; ===========================================================================
00000384 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000388                            ; ===========================================================================
00000388 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
0000038C                            ; ===========================================================================
0000038C 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
00000390                            ; ===========================================================================
00000390 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
00000394                            ; ===========================================================================
00000394 6000 0000                  		bra.w	Credits		; Credits ($1C)
00000398                            ; ===========================================================================
00000398 4E75                       		rts	
0000039A                            ; ===========================================================================
0000039A                            
0000039A                            loc_43A:
0000039A 46FC 2700                  		move	#$2700,sr
0000039E 544F                       		addq.w	#2,sp
000003A0 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003A4 544F                       		addq.w	#2,sp
000003A6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003AC 6100 0000                  		bsr.w	ShowErrorMsg
000003B0 202F 0002                  		move.l	2(sp),d0
000003B4 6100 0000                  		bsr.w	sub_5BA
000003B8 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003BC 6100 0000                  		bsr.w	sub_5BA
000003C0 6000                       		bra.s	loc_478
000003C2                            ; ===========================================================================
000003C2                            
000003C2                            loc_462:
000003C2 46FC 2700                  		move	#$2700,sr
000003C6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003CC 6100 0000                  		bsr.w	ShowErrorMsg
000003D0 202F 0002                  		move.l	2(sp),d0
000003D4 6100 0000                  		bsr.w	sub_5BA
000003D8                            
000003D8                            loc_478:
000003D8 6100 0000                  		bsr.w	ErrorWaitForC
000003DC 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000003E2 46FC 2300                  		move	#$2300,sr
000003E6 4E73                       		rte	
000003E8                            
000003E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000003E8                            
000003E8                            
000003E8                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000003E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000003EE 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000003F8 41F9 0000 0000             		lea	(Art_Text).l,a0
000003FE 323C 027F                  		move.w	#$27F,d1
00000402                            
00000402                            Error_LoadGfx:
00000402 3C98                       		move.w	(a0)+,(a6)
00000404 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000408 7000                       		moveq	#0,d0		; clear	d0
0000040A 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000040E 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000412 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000416 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000420 7212                       		moveq	#$12,d1		; number of characters
00000422                            
00000422                            Error_LoopChars:
00000422 7000                       		moveq	#0,d0
00000424 1018                       		move.b	(a0)+,d0
00000426 0640 0790                  		addi.w	#$790,d0
0000042A 3C80                       		move.w	d0,(a6)
0000042C 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000430 4E75                       		rts	
00000432                            ; End of function ShowErrorMsg
00000432                            
00000432                            ; ===========================================================================
00000432 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000436 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000043A 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000043E 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000442 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000446 0000                       		dc.w asc_5A6-ErrorText
00000448 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000045B 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000046E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000481 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000494 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004A7 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004BA 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
000004CD 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000004E0 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000004F3 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000506 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
0000051A 00                         		even
0000051A                            
0000051A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000051A                            
0000051A                            
0000051A                            sub_5BA:				; XREF: loc_43A; loc_462
0000051A 3CBC 07CA                  		move.w	#$7CA,(a6)
0000051E 7407                       		moveq	#7,d2
00000520                            
00000520                            loc_5C0:
00000520 E998                       		rol.l	#4,d0
00000522 6100                       		bsr.s	sub_5CA
00000524 51CA FFFA                  		dbf	d2,loc_5C0
00000528 4E75                       		rts	
0000052A                            ; End of function sub_5BA
0000052A                            
0000052A                            
0000052A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000052A                            
0000052A                            
0000052A                            sub_5CA:				; XREF: sub_5BA
0000052A 3200                       		move.w	d0,d1
0000052C 0241 000F                  		andi.w	#$F,d1
00000530 0C41 000A                  		cmpi.w	#$A,d1
00000534 6500                       		bcs.s	loc_5D8
00000536 5E41                       		addq.w	#7,d1
00000538                            
00000538                            loc_5D8:
00000538 0641 07C0                  		addi.w	#$7C0,d1
0000053C 3C81                       		move.w	d1,(a6)
0000053E 4E75                       		rts	
00000540                            ; End of function sub_5CA
00000540                            
00000540                            
00000540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000540                            
00000540                            
00000540                            ErrorWaitForC:				; XREF: loc_478
00000540 6100 0000                  		bsr.w	ReadJoypads
00000544 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000054A 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000054E 4E75                       		rts	
00000550                            ; End of function ErrorWaitForC
00000550                            
00000550                            ; ===========================================================================
00000550                            
00000550                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000A70                            		even
00000A70                            
00000A70                            ; ===========================================================================
00000A70                            
00000A70                            loc_B10:				; XREF: Vectors
00000A70 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000A74 4A38 F62A                  		tst.b	($FFFFF62A).w
00000A78 6700                       		beq.s	loc_B88
00000A7A 3039 00C0 0004             		move.w	($C00004).l,d0
00000A80 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000A8A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000A92 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000A98 6700                       		beq.s	loc_B42
00000A9A 303C 0700                  		move.w	#$700,d0
00000A9E                            
00000A9E                            loc_B3E:
00000A9E 51C8 FFFE                  		dbf	d0,loc_B3E
00000AA2                            
00000AA2                            loc_B42:
00000AA2 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AA6 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AAC 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AB2 0240 003E                  		andi.w	#$3E,d0
00000AB6 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000ABA 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000ABE                            
00000ABE                            loc_B5E:				; XREF: loc_B88
00000ABE 4EB9 0000 0000             		jsr	sub_71B4C
00000AC4                            
00000AC4                            loc_B64:				; XREF: loc_D50
00000AC4 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000AC8 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000ACC 4E73                       		rte	
00000ACE                            ; ===========================================================================
00000ACE 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000AD2 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000AD6 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000ADA 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000ADE 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000AE2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000AE6 0000                       		dc.w loc_E72-off_B6E
00000AE8                            ; ===========================================================================
00000AE8                            
00000AE8                            loc_B88:				; XREF: loc_B10; off_B6E
00000AE8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000AEE 6700                       		beq.s	loc_B9A
00000AF0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000AF6 6600 FFC6                  		bne.w	loc_B5E
00000AFA                            
00000AFA                            loc_B9A:
00000AFA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B00 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B04 3039 00C0 0004             		move.w	($C00004).l,d0
00000B0A 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B10 6700                       		beq.s	loc_BBA
00000B12 303C 0700                  		move.w	#$700,d0
00000B16                            
00000B16                            loc_BB6:
00000B16 51C8 FFFE                  		dbf	d0,loc_BB6
00000B1A                            
00000B1A                            loc_BBA:
00000B1A 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B20 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B24 6600                       		bne.s	loc_BFE
00000B26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B2C 3ABC 8C81                  		move.w	#$8C81,(a5)
00000B30 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B36 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B3C 3ABC 977F                  		move.w	#$977F,(a5)
00000B40 3ABC C000                  		move.w	#$C000,(a5)
00000B44 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B4E 6000                       		bra.s	loc_C22
00000B50                            ; ===========================================================================
00000B50                            
00000B50                            loc_BFE:				; XREF: loc_BC8
00000B50 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B56 3ABC 8C89                  		move.w	#$8C89,(a5)
00000B5A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B60 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B66 3ABC 977F                  		move.w	#$977F,(a5)
00000B6A 3ABC C000                  		move.w	#$C000,(a5)
00000B6E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B78                            
00000B78                            loc_C22:				; XREF: loc_BC8
00000B78 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000B7C 6000 FF40                  		bra.w	loc_B5E
00000B80                            ; ===========================================================================
00000B80                            
00000B80                            loc_C32:				; XREF: off_B6E
00000B80 6100 0000                  		bsr.w	sub_106E
00000B84                            
00000B84                            loc_C36:				; XREF: off_B6E
00000B84 4A78 F614                  		tst.w	($FFFFF614).w
00000B88 6700 0000                  		beq.w	locret_C42
00000B8C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000B90                            
00000B90                            locret_C42:
00000B90 4E75                       		rts	
00000B92                            ; ===========================================================================
00000B92                            
00000B92                            loc_C44:				; XREF: off_B6E
00000B92 6100 0000                  		bsr.w	sub_106E
00000B96 6100 0000                  		bsr.w	sub_6886
00000B9A 6100 0000                  		bsr.w	sub_1642
00000B9E 4A78 F614                  		tst.w	($FFFFF614).w
00000BA2 6700 0000                  		beq.w	locret_C5C
00000BA6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BAA                            
00000BAA                            locret_C5C:
00000BAA 4E75                       		rts	
00000BAC                            ; ===========================================================================
00000BAC                            
00000BAC                            loc_C5E:				; XREF: off_B6E
00000BAC 6100 0000                  		bsr.w	sub_106E
00000BB0 4E75                       		rts
00000BB2                            
00000BB2                            ; Return:
00000BB2 6100 0000                  		bsr.w	ReadJoypads
00000BB6 4E75                       		rts	
00000BB8                            ; ===========================================================================
00000BB8                            
00000BB8                            loc_C64:				; XREF: off_B6E
00000BB8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000BBE 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000BC2                            
00000BC2                            loc_C6E:				; XREF: off_B6E
00000BC2 6100 0000                  		bsr.w	ReadJoypads
00000BC6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BCA 6600                       		bne.s	loc_CB0
00000BCC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BD2 3ABC 8C81                  		move.w	#$8C81,(a5)
00000BD6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BDC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BE2 3ABC 977F                  		move.w	#$977F,(a5)
00000BE6 3ABC C000                  		move.w	#$C000,(a5)
00000BEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BF4 6000                       		bra.s	loc_CD4
00000BF6                            ; ===========================================================================
00000BF6                            
00000BF6                            loc_CB0:				; XREF: loc_C76
00000BF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BFC 3ABC 8C89                  		move.w	#$8C89,(a5)
00000C00 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C06 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C0C 3ABC 977F                  		move.w	#$977F,(a5)
00000C10 3ABC C000                  		move.w	#$C000,(a5)
00000C14 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C1E                            
00000C1E                            loc_CD4:				; XREF: loc_C76
00000C1E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C28 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C2E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C34 3ABC 977F                  		move.w	#$977F,(a5)
00000C38 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C3C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C4C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000C52 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000C58 3ABC 977F                  		move.w	#$977F,(a5)
00000C5C 3ABC 7800                  		move.w	#$7800,(a5)
00000C60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C6A 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000C70                            
00000C70                            loc_D50:
00000C70 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000C76 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000C7C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000C82 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000C88 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000C8E 6400                       		bcc.s	Demo_Time
00000C90 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000C96 588F                       		addq.l	#4,sp
00000C98 6000 FE2A                  		bra.w	loc_B64
00000C9C                            
00000C9C                            ; ---------------------------------------------------------------------------
00000C9C                            ; Subroutine to	run a demo for an amount of time
00000C9C                            ; ---------------------------------------------------------------------------
00000C9C                            
00000C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000C9C                            
00000C9C                            
00000C9C                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000C9C 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CA0 4EB9 0000 0000             		jsr	AniArt_Load
00000CA6 4EB9 0000 0000             		jsr	HudUpdate
00000CAC 6100 0000                  		bsr.w	sub_165E
00000CB0 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000CB4 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000CB8 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000CBC                            
00000CBC                            Demo_TimeEnd:
00000CBC 4E75                       		rts	
00000CBE                            ; End of function Demo_Time
00000CBE                            
00000CBE                            ; ===========================================================================
00000CBE                            
00000CBE                            loc_DA6:				; XREF: off_B6E
00000CBE 6100 0000                  		bsr.w	ReadJoypads
00000CC2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CC8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CCE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000CD4 3ABC 977F                  		move.w	#$977F,(a5)
00000CD8 3ABC C000                  		move.w	#$C000,(a5)
00000CDC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CE2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CEC 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CF2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CF8 3ABC 977F                  		move.w	#$977F,(a5)
00000CFC 3ABC 7800                  		move.w	#$7800,(a5)
00000D00 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D0A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D10 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D16 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D1C 3ABC 977F                  		move.w	#$977F,(a5)
00000D20 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D24 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D2A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D2E 6100 0000                  		bsr.w	PalCycle_SS
00000D32 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D38                            
00000D38                            loc_E64:
00000D38 0C38 0060 F625             		cmpi.b	#96,($FFFFF625).w
00000D3E 6400                       		bcc.s	@update
00000D40 6000 0000                  		bra.w	locret_E70
00000D44                            
00000D44                            	@update:
00000D44 4EB9 0000 0000             		jsr	SS_LoadWalls
00000D4A 4A78 F614                  		tst.w	($FFFFF614).w
00000D4E 6700 0000                  		beq.w	locret_E70
00000D52 5378 F614                  		subq.w	#1,($FFFFF614).w
00000D56                            
00000D56                            locret_E70:
00000D56 4E75                       		rts	
00000D58                            ; ===========================================================================
00000D58                            
00000D58                            loc_E72:				; XREF: off_B6E
00000D58 6100 0000                  		bsr.w	ReadJoypads
00000D5C 4A38 F64E                  		tst.b	($FFFFF64E).w
00000D60 6600                       		bne.s	loc_EB4
00000D62 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D68 3ABC 8C81                  		move.w	#$8C81,(a5)
00000D6C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D72 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D78 3ABC 977F                  		move.w	#$977F,(a5)
00000D7C 3ABC C000                  		move.w	#$C000,(a5)
00000D80 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D86 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D8A 6000                       		bra.s	loc_ED8
00000D8C                            ; ===========================================================================
00000D8C                            
00000D8C                            loc_EB4:				; XREF: loc_E7A
00000D8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D92 3ABC 8C89                  		move.w	#$8C89,(a5)
00000D96 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D9C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DA2 3ABC 977F                  		move.w	#$977F,(a5)
00000DA6 3ABC C000                  		move.w	#$C000,(a5)
00000DAA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DB0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DB4                            
00000DB4                            loc_ED8:				; XREF: loc_E7A
00000DB4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000DB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DBE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DC4 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DCA                            
00000DCA                            loc_EEE:
00000DCA 3ABC 977F                  		move.w	#$977F,(a5)
00000DCE 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DD2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DD8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE2 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DE8 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DEE 3ABC 977F                  		move.w	#$977F,(a5)
00000DF2 3ABC 7800                  		move.w	#$7800,(a5)
00000DF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E00 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E06                            
00000E06                            loc_F54:
00000E06 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E0C 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E12 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E18 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E1E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E22 4EB9 0000 0000             		jsr	AniArt_Load
00000E28 4EB9 0000 0000             		jsr	HudUpdate
00000E2E 6100 0000                  		bsr.w	sub_1642
00000E32 4E75                       		rts	
00000E34                            ; ===========================================================================
00000E34                            
00000E34                            loc_F8A:				; XREF: off_B6E
00000E34 6100 0000                  		bsr.w	sub_106E
00000E38 5238 F628                  		addq.b	#1,($FFFFF628).w
00000E3C 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000E42 4E75                       		rts	
00000E44                            ; ===========================================================================
00000E44                            
00000E44                            loc_F9A:				; XREF: off_B6E
00000E44 6100 0000                  		bsr.w	sub_106E
00000E48 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4C 6000 0000                  		bra.w	sub_1642
00000E50                            ; ===========================================================================
00000E50                            
00000E50                            loc_FA6:				; XREF: off_B6E
00000E50 6100 0000                  		bsr.w	ReadJoypads
00000E54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E5A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E60 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E66 3ABC 977F                  		move.w	#$977F,(a5)
00000E6A 3ABC C000                  		move.w	#$C000,(a5)
00000E6E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E78 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E7E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E84 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E8A 3ABC 977F                  		move.w	#$977F,(a5)
00000E8E 3ABC 7800                  		move.w	#$7800,(a5)
00000E92 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E98 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E9C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EA8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EAE 3ABC 977F                  		move.w	#$977F,(a5)
00000EB2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EB6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EBC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC0 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000EC6                            
00000EC6                            loc_1060:
00000EC6 4A78 F614                  		tst.w	($FFFFF614).w
00000ECA 6700 0000                  		beq.w	locret_106C
00000ECE 5378 F614                  		subq.w	#1,($FFFFF614).w
00000ED2                            
00000ED2                            locret_106C:
00000ED2 4E75                       		rts	
00000ED4                            
00000ED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000ED4                            
00000ED4                            
00000ED4                            sub_106E:				; XREF: loc_C32; et al
00000ED4 6100 0000                  		bsr.w	ReadJoypads
00000ED8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EDC 6600                       		bne.s	loc_10B0
00000EDE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE4 3ABC 8C81                  		move.w	#$8C81,(a5)
00000EE8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EEE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EF4 3ABC 977F                  		move.w	#$977F,(a5)
00000EF8 3ABC C000                  		move.w	#$C000,(a5)
00000EFC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F06                            
00000F06                            PAL1_LOAD:
00000F06 6000                       		bra.s	loc_10D4
00000F08                            ; ===========================================================================
00000F08                            
00000F08                            loc_10B0:
00000F08 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F0E 3ABC 8C89                  		move.w	#$8C89,(a5)
00000F12 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F18 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F1E 3ABC 977F                  		move.w	#$977F,(a5)
00000F22 3ABC C000                  		move.w	#$C000,(a5)
00000F26 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F2C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F30                            loc_10D4:
00000F30 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F36 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F3C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F42 3ABC 977F                  		move.w	#$977F,(a5)
00000F46 3ABC 7800                  		move.w	#$7800,(a5)
00000F4A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F50 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F5A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F60 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F66 3ABC 977F                  		move.w	#$977F,(a5)
00000F6A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F6E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F78 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F7E 4E75                       		rts	
00000F80                            ; End of function sub_106E
00000F80                            
00000F80                            ; ---------------------------------------------------------------------------
00000F80                            ; Subroutine to	move pallets from the RAM to CRAM
00000F80                            ; ---------------------------------------------------------------------------
00000F80                            
00000F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F80                            
00000F80                            
00000F80                            PalToCRAM:
00000F80 46FC 2700                  		move	#$2700,sr
00000F84 4A78 F644                  		tst.w	($FFFFF644).w
00000F88 6700                       		beq.s	locret_119C
00000F8A 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000F90 2F08                       		move.l	a0,-(sp)
00000F92 41F9 00C0 0004             		lea	($C00004).l,a0
00000F98 30BC 8C89                  		move.w	#$8C89,(a0)
00000F9C 30BC 8ADF                  		move.w	#$8ADF,(a0)
00000FA0 205F                       		move.l	(sp)+,a0
00000FA2 4A38 F64F                  		tst.b	($FFFFF64F).w
00000FA6 6600                       		bne.s	loc_119E
00000FA8                            
00000FA8                            locret_119C:
00000FA8 4E73                       		rte	
00000FAA                            ; ===========================================================================
00000FAA                            
00000FAA                            loc_119E:				; XREF: PalToCRAM
00000FAA 4238 F64F                  		clr.b	($FFFFF64F).w
00000FAE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000FB2 6100 FCE8                  		bsr.w	Demo_Time
00000FB6 4EB9 0000 0000             		jsr	sub_71B4C
00000FBC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000FC0 4E73                       		rte	
00000FC2                            ; End of function PalToCRAM
00000FC2                            
00000FC2                            ; ---------------------------------------------------------------------------
00000FC2                            ; Subroutine to	initialise joypads
00000FC2                            ; ---------------------------------------------------------------------------
00000FC2                            
00000FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FC2                            
00000FC2                            
00000FC2                            JoypadInit:				; XREF: GameClrRAM
00000FC2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCA                            
00000FCA                            Joypad_WaitZ80:
00000FCA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00000FD2 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00000FD4 7040                       		moveq	#$40,d0
00000FD6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00000FDC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00000FE2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00000FE8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000FF0 4E75                       		rts	
00000FF2                            ; End of function JoypadInit
00000FF2                            
00000FF2                            ; ---------------------------------------------------------------------------
00000FF2                            ; Subroutine to	read joypad input, and send it to the RAM
00000FF2                            ; ---------------------------------------------------------------------------
00000FF2                            
00000FF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FF2                            
00000FF2                            
00000FF2                            ReadJoypads:
00000FF2 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00000FF6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00000FFC 6100                       		bsr.s	Joypad_Read	; do the first joypad
00000FFE 5449                       		addq.w	#2,a1		; do the second	joypad
00001000                            
00001000                            Joypad_Read:
00001000 12BC 0000                  		move.b	#0,(a1)
00001004 4E71                       		nop	
00001006 4E71                       		nop	
00001008 1011                       		move.b	(a1),d0
0000100A E508                       		lsl.b	#2,d0
0000100C 0200 00C0                  		andi.b	#$C0,d0
00001010 12BC 0040                  		move.b	#$40,(a1)
00001014 4E71                       		nop	
00001016 4E71                       		nop	
00001018 1211                       		move.b	(a1),d1
0000101A 0201 003F                  		andi.b	#$3F,d1
0000101E 8001                       		or.b	d1,d0
00001020 4600                       		not.b	d0
00001022 1210                       		move.b	(a0),d1
00001024 B101                       		eor.b	d0,d1
00001026 10C0                       		move.b	d0,(a0)+
00001028 C200                       		and.b	d0,d1
0000102A 10C1                       		move.b	d1,(a0)+
0000102C 4E75                       		rts	
0000102E                            ; End of function ReadJoypads
0000102E                            
0000102E                            
0000102E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000102E                            
0000102E                            
0000102E                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000102E 41F9 00C0 0004             		lea	($C00004).l,a0
00001034 43F9 00C0 0000             		lea	($C00000).l,a1
0000103A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001040 7E12                       		moveq	#$12,d7
00001042                            
00001042                            VDP_Loop:
00001042 309A                       		move.w	(a2)+,(a0)
00001044 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001048                            
00001048 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000104E 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001052 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001058 7000                       		moveq	#0,d0
0000105A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001064 3E3C 003F                  		move.w	#$3F,d7
00001068                            
00001068                            VDP_ClrCRAM:
00001068 3280                       		move.w	d0,(a1)
0000106A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000106E                            
0000106E 42B8 F616                  		clr.l	($FFFFF616).w
00001072 42B8 F61A                  		clr.l	($FFFFF61A).w
00001076 2F01                       		move.l	d1,-(sp)
00001078 4BF9 00C0 0004             		lea	($C00004).l,a5
0000107E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001082 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001088 3ABC 9780                  		move.w	#$9780,(a5)
0000108C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001092 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000109A                            
0000109A                            loc_128E:
0000109A 3215                       		move.w	(a5),d1
0000109C 0801 0001                  		btst	#1,d1
000010A0 66F8                       		bne.s	loc_128E
000010A2                            
000010A2 3ABC 8F02                  		move.w	#$8F02,(a5)
000010A6 221F                       		move.l	(sp)+,d1
000010A8 4E75                       		rts	
000010AA                            ; End of function VDPSetupGame
000010AA                            
000010AA                            ; ===========================================================================
000010AA 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000010B2 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000010BA 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000010C2 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000010CA 9001 9100 9200             		dc.w $9001, $9100, $9200
000010D0                            
000010D0                            ; ---------------------------------------------------------------------------
000010D0                            ; Subroutine to	clear the screen
000010D0                            ; ---------------------------------------------------------------------------
000010D0                            
000010D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010D0                            
000010D0                            
000010D0                            ClearScreen:
000010D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000010D6 3ABC 8F01                  		move.w	#$8F01,(a5)
000010DA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000010E0 3ABC 9780                  		move.w	#$9780,(a5)
000010E4 2ABC 4000 0083             		move.l	#$40000083,(a5)
000010EA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000010F2                            
000010F2                            loc_12E6:
000010F2 3215                       		move.w	(a5),d1
000010F4 0801 0001                  		btst	#1,d1
000010F8 66F8                       		bne.s	loc_12E6
000010FA                            
000010FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000010FE 4BF9 00C0 0004             		lea	($C00004).l,a5
00001104 3ABC 8F01                  		move.w	#$8F01,(a5)
00001108 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000110E 3ABC 9780                  		move.w	#$9780,(a5)
00001112 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001118 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001120                            
00001120                            loc_1314:
00001120 3215                       		move.w	(a5),d1
00001122 0801 0001                  		btst	#1,d1
00001126 66F8                       		bne.s	loc_1314
00001128                            
00001128 3ABC 8F02                  		move.w	#$8F02,(a5)
0000112C 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001134 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000113C 43F8 F838                  		lea	($FFFFF838).w,a1
00001140 7000                       		moveq	#0,d0
00001142 323C 0092                  		move.w	#$92,d1
00001146                            
00001146                            loc_133A:
00001146 22C0                       		move.l	d0,(a1)+
00001148 51C9 FFFC                  		dbf	d1,loc_133A
0000114C                            
0000114C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001150 7000                       		moveq	#0,d0
00001152 323C 0100                  		move.w	#$100,d1
00001156                            
00001156                            loc_134A:
00001156 22C0                       		move.l	d0,(a1)+
00001158 51C9 FFFC                  		dbf	d1,loc_134A
0000115C 4E75                       		rts	
0000115E                            ; End of function ClearScreen
0000115E                            
0000115E                            ; ---------------------------------------------------------------------------
0000115E                            ; Subroutine to	load the sound driver
0000115E                            ; ---------------------------------------------------------------------------
0000115E                            
0000115E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000115E                            
0000115E                            
0000115E                            SoundDriverLoad:
0000115E 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
00001164 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
0000116A 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
0000116E 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00001176 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
0000117E 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00001186 66F6                       		bne.s	*-$08					; if not, branch
00001188                            
00001188                            SM_LoadZ80:
00001188 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
0000118A 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
0000118E 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
00001194 43F9 00A0 0C62             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
0000119A 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
0000119C 12D8                       		move.b	(a0)+,(a1)+				; ''
0000119E 12D8                       		move.b	(a0)+,(a1)+				; ''
000011A0 12D8                       		move.b	(a0)+,(a1)+				; CHG: copy "reverse" pointer over into Z80
000011A2 12D8                       		move.b	(a0)+,(a1)+				; ''
000011A4 12D8                       		move.b	(a0)+,(a1)+				; ''
000011A6 43F9 00A0 1A38             		lea	($A00000+SV_VolumeBank).l,a1		; load volume bank address write routine
000011AC 12FC 0000                  		move.b 	#$74|((PCM_Volumes>>$0F)&1),(a1)+	; write "ld  (hl),?" instructions
000011B0 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$10)&1),(a1)+	; ''
000011B4 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$11)&1),(a1)+	; ''
000011B8 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$12)&1),(a1)+	; ''
000011BC 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$13)&1),(a1)+	; ''
000011C0 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$14)&1),(a1)+	; ''
000011C4 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$15)&1),(a1)+	; ''
000011C8 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$16)&1),(a1)+	; ''
000011CC 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$17)&1),(a1)+	; ''
000011D0 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
000011D8 727F                       		moveq	#$7F,d1					; set repeat times
000011DA 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
000011DE 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
000011E6 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
000011EE 4E75                       		rts						; return
000011F0                            ; End of function SoundDriverLoad
000011F0                            
000011F0                            ; ---------------------------------------------------------------------------
000011F0                            ; Subroutine to	play a sound or	music track
000011F0                            ; ---------------------------------------------------------------------------
000011F0                            
000011F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F0                            
000011F0                            
000011F0                            PlaySound:
000011F0 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000011F4 4E75                       		rts	
000011F6                            ; End of function PlaySound
000011F6                            
000011F6                            ; ---------------------------------------------------------------------------
000011F6                            ; Subroutine to	play a special sound/music (E0-E4)
000011F6                            ;
000011F6                            ; E0 - Fade out
000011F6                            ; E1 - Sega
000011F6                            ; E2 - Speed up
000011F6                            ; E3 - Normal speed
000011F6                            ; E4 - Stop
000011F6                            ; ---------------------------------------------------------------------------
000011F6                            
000011F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F6                            
000011F6                            
000011F6                            PlaySound_Special:
000011F6 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000011FA 4E75                       		rts	
000011FC                            ; End of function PlaySound_Special
000011FC                            
000011FC                            ; ===========================================================================
000011FC                            ; ---------------------------------------------------------------------------
000011FC                            ; Unused sound/music subroutine
000011FC                            ; ---------------------------------------------------------------------------
000011FC                            
000011FC                            PlaySound_Unk:
000011FC 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001200 4E75                       		rts	
00001202                            
00001202                            ; ---------------------------------------------------------------------------
00001202                            ; Subroutine to	pause the game
00001202                            ; ---------------------------------------------------------------------------
00001202                            
00001202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001202                            
00001202                            
00001202                            PauseGame:				; XREF: Level_MainLoop; et al
00001202 4E71                       		nop	
00001204 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001208 6700 0000                  		beq.w	Unpause		; if not, branch
0000120C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001210 6600                       		bne.s	loc_13BE	; if yes, branch
00001212 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001218 6700 0000                  		beq.w	Pause_DoNothing	; if not, branch
0000121C                            
0000121C                            loc_13BE:
0000121C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001222 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001228                            
00001228                            loc_13CA:
00001228 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
0000122E 6100 0000                  		bsr.w	DelayProgram
00001232 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001236 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001238 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0000123E 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001240 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001246 4E71                       		nop	
00001248 6000                       		bra.s	loc_1404
0000124A                            ; ===========================================================================
0000124A                            
0000124A                            Pause_ChkBC:				; XREF: PauseGame
0000124A 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001250 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001252 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001258 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000125A                            
0000125A                            Pause_ChkStart:				; XREF: PauseGame
0000125A 4A78 F5E0                  		tst.w	(SonimeSST+sonime_pausetimer).w
0000125E 6600                       		bne.s	@waitlonger
00001260 11FC 0001 F5CE             		move.b	#face_blink,(SonimeSST+sonime_face).w
00001266 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000126C 6000                       		bra.s	@cont
0000126E                            
0000126E                            	@waitlonger:
0000126E 5378 F5E0                  		subi.w	#1,(SonimeSST+sonime_pausetimer).w
00001272                            
00001272                            	@cont:
00001272 41F8 D000                  		lea	($FFFFD000).w,a0 ; a0=object
00001276 7000                       		moveq	#0,d0
00001278 7E7F                       		moveq	#$7F,d7 ; run the first $80 objects out of levels
0000127A 4EB9 0000 0000             		jsr		loc_D368
00001280 4EB9 0000 0000             		jsr		BuildSprites
00001286 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000128C 6600                       		bne.s	@notss
0000128E 4EB9 0000 0000             		jsr	SS_ShowLayout
00001294                            
00001294                            	@notss:
00001294 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000129A 678C                       		beq.s	loc_13CA	; if not, branch
0000129C 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
000012A2                            
000012A2                            loc_1404:				; XREF: PauseGame
000012A2 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012A8                            
000012A8                            Unpause:				; XREF: PauseGame
000012A8 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000012AE                            
000012AE                            Pause_DoNothing:			; XREF: PauseGame
000012AE 4E75                       		rts	
000012B0                            ; ===========================================================================
000012B0                            
000012B0                            Pause_SlowMo:				; XREF: PauseGame
000012B0 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000012B6 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012BC 4E75                       		rts	
000012BE                            ; End of function PauseGame
000012BE                            
000012BE                            ; ---------------------------------------------------------------------------
000012BE                            ; Subroutine to	display	patterns via the VDP
000012BE                            ; ---------------------------------------------------------------------------
000012BE                            
000012BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012BE                            
000012BE                            
000012BE                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000012BE 4DF9 00C0 0000             		lea	($C00000).l,a6
000012C4 283C 0080 0000             		move.l	#$800000,d4
000012CA                            
000012CA                            loc_142C:
000012CA 2D40 0004                  		move.l	d0,4(a6)
000012CE 3601                       		move.w	d1,d3
000012D0                            
000012D0                            loc_1432:
000012D0 3C99                       		move.w	(a1)+,(a6)
000012D2 51CB FFFC                  		dbf	d3,loc_1432
000012D6 D084                       		add.l	d4,d0
000012D8 51CA FFF0                  		dbf	d2,loc_142C
000012DC 4E75                       		rts	
000012DE                            ; End of function ShowVDPGraphics
000012DE                            
000012DE                            ; ==============================================================================
000012DE                            ; ------------------------------------------------------------------------------
000012DE                            ; Nemesis decompression routine
000012DE                            ; ------------------------------------------------------------------------------
000012DE                            ; Optimized by vladikcomper
000012DE                            ; ------------------------------------------------------------------------------
000012DE                             
000012DE                            NemDec_RAM:
000012DE 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012E2 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
000012E6 6000                           bra.s   NemDec_Main
000012E8                             
000012E8                            ; ------------------------------------------------------------------------------
000012E8                            NemDec:
000012E8 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012EC 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
000012F2 47FA 0000                      lea NemDec_WriteRowToVDP(pc),a3
000012F6                             
000012F6                            NemDec_Main:
000012F6 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
000012FA 3418                           move.w  (a0)+,d2        ; get number of patterns
000012FC 6A00                           bpl.s   @0          ; are we in Mode 0?
000012FE 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001302 E74A                       @0  lsl.w   #3,d2
00001304 3A42                           movea.w d2,a5
00001306 7607                           moveq   #7,d3
00001308 7400                           moveq   #0,d2
0000130A 7800                           moveq   #0,d4
0000130C 6100 0000                      bsr.w   NemDec4
00001310 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001312 E145                           asl.w   #8,d5           ; shift up by a byte
00001314 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
00001316 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
0000131A 6100                           bsr.s   NemDec2
0000131C 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001320 4E75                           rts
00001322                             
00001322                            ; ---------------------------------------------------------------------------
00001322                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001322                            ; ---------------------------------------------------------------------------
00001322                             
00001322                            NemDec2:
00001322 3E06                           move.w  d6,d7
00001324 5147                           subq.w  #8,d7           ; get shift value
00001326 3205                           move.w  d5,d1
00001328 EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
0000132A 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
0000132E 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001330 0241 00FF                      andi.w  #$FF,d1
00001334 D241                           add.w   d1,d1
00001336 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
0000133A 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
0000133E 6400                           bcc.s   @0          ; if not, branch
00001340 5046                           addq.w  #8,d6
00001342 E145                           asl.w   #8,d5
00001344 1A18                           move.b  (a0)+,d5        ; read next byte
00001346 1231 1001                  @0  move.b  1(a1,d1.w),d1
0000134A 3001                           move.w  d1,d0
0000134C 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001350 0240 00F0                      andi.w  #$F0,d0
00001354                             
00001354                            NemDec_GetRepeatCount:
00001354 E848                           lsr.w   #4,d0           ; get repeat count
00001356                             
00001356                            NemDec_WritePixel:
00001356 E98C                           lsl.l   #4,d4           ; shift up by a nybble
00001358 8801                           or.b    d1,d4           ; write pixel
0000135A 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
0000135E 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
00001360                            ; ---------------------------------------------------------------------------
00001360                             
00001360                            NemDec3:
00001360 7800                           moveq   #0,d4           ; reset row
00001362 7607                           moveq   #7,d3           ; reset nybble counter
00001364                             
00001364                            NemDec_WritePixelLoop:
00001364 51C8 FFF0                      dbf d0,NemDec_WritePixel
00001368 60B8                           bra.s   NemDec2
0000136A                            ; ---------------------------------------------------------------------------
0000136A                             
0000136A                            NemDec_InlineData:
0000136A 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
0000136C 0C46 0009                      cmpi.w  #9,d6
00001370 6400                           bcc.s   @0
00001372 5046                           addq.w  #8,d6
00001374 E145                           asl.w   #8,d5
00001376 1A18                           move.b  (a0)+,d5
00001378 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
0000137A 3205                           move.w  d5,d1
0000137C EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
0000137E 3001                           move.w  d1,d0
00001380 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001384 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
00001388 0C46 0009                      cmpi.w  #9,d6
0000138C 64C6                           bcc.s   NemDec_GetRepeatCount
0000138E 5046                           addq.w  #8,d6
00001390 E145                           asl.w   #8,d5
00001392 1A18                           move.b  (a0)+,d5
00001394 60BE                           bra.s   NemDec_GetRepeatCount
00001396                             
00001396                            ; ---------------------------------------------------------------------------
00001396                            ; Subroutines to output decompressed entry
00001396                            ; Selected depending on current decompression mode
00001396                            ; ---------------------------------------------------------------------------
00001396                             
00001396                            NemDec_WriteRowToVDP:
00001396                            loc_1502:
00001396 2884                           move.l  d4,(a4)         ; write 8-pixel row
00001398 534D                           subq.w  #1,a5
0000139A 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
0000139C 66C2                           bne.s   NemDec3         ; if not, branch
0000139E 4E75                           rts
000013A0                            ; ---------------------------------------------------------------------------
000013A0                             
000013A0                            NemDec_WriteRowToVDP_XOR:
000013A0 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013A2 2882                           move.l  d2,(a4)         ; and write the result
000013A4 534D                           subq.w  #1,a5
000013A6 380D                           move.w  a5,d4
000013A8 66B6                           bne.s   NemDec3
000013AA 4E75                           rts
000013AC                            ; ---------------------------------------------------------------------------
000013AC                             
000013AC                            NemDec_WriteRowToRAM:
000013AC 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013AE 534D                           subq.w  #1,a5
000013B0 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013B2 66AC                           bne.s   NemDec3         ; if not, branch
000013B4 4E75                           rts
000013B6                            ; ---------------------------------------------------------------------------
000013B6                             
000013B6                            NemDec_WriteRowToRAM_XOR:
000013B6 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013B8 28C2                           move.l  d2,(a4)+        ; and write the result
000013BA 534D                           subq.w  #1,a5
000013BC 380D                           move.w  a5,d4
000013BE 66A0                           bne.s   NemDec3
000013C0 4E75                           rts
000013C2                             
000013C2                            ; ---------------------------------------------------------------------------
000013C2                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013C2                            ; ---------------------------------------------------------------------------
000013C2                             
000013C2                            NemDec4:
000013C2 1018                           move.b  (a0)+,d0        ; read first byte
000013C4                             
000013C4                            @ChkEnd:
000013C4 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013C8 6600                           bne.s   @NewPalIndex        ; if not, branch
000013CA 4E75                           rts
000013CC                            ; ---------------------------------------------------------------------------
000013CC                             
000013CC                            @NewPalIndex:
000013CC 3E00                           move.w  d0,d7
000013CE                             
000013CE                            @ItemLoop:
000013CE 1018                           move.b  (a0)+,d0        ; read next byte
000013D0 6BF2                           bmi.s   @ChkEnd         ; ~~
000013D2 1200                           move.b  d0,d1
000013D4 0247 000F                      andi.w  #$F,d7          ; get palette index
000013D8 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000013DC 8E41                           or.w    d1,d7           ; combine the two
000013DE 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000013E2 1200                           move.b  d0,d1
000013E4 E149                           lsl.w   #8,d1
000013E6 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
000013E8 7208                           moveq   #8,d1
000013EA 9240                           sub.w   d0,d1           ; is the code 8 bits long?
000013EC 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
000013EE 1018                           move.b  (a0)+,d0        ; get code
000013F0 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
000013F2 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
000013F6 60D6                           bra.s   @ItemLoop       ; repeat
000013F8                            ; ---------------------------------------------------------------------------
000013F8                             
000013F8                            @ItemShortCode:
000013F8 1018                           move.b  (a0)+,d0        ; get code
000013FA E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
000013FC D040                           add.w   d0,d0           ; get index into code table
000013FE 7A01                           moveq   #1,d5
00001400 E36D                           lsl.w   d1,d5
00001402 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
00001404 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
00001408                             
00001408                            @ItemShortCodeLoop:
00001408 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
0000140A 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
0000140E 60BE                           bra.s   @ItemLoop
00001410                            
00001410                            ; ===============================================================
00001410                            ; ---------------------------------------------------------------
00001410                            ; uncompressed art to VRAM loader
00001410                            ; ---------------------------------------------------------------
00001410                            ; INPUT:
00001410                            ;       a0      - Source Offset
00001410                            ;   d0  - length in tiles
00001410                            ; ---------------------------------------------------------------
00001410                            LoadUncArt:
00001410 46FC 2700                          move    #$2700,sr   ; disable interrupts
00001414 4DF9 00C0 0000                     lea $C00000.l,a6    ; get VDP data port
0000141A                             
0000141A                            LoadArt_Loop:
0000141A 2C98                               move.l  (a0)+,(a6)  ; transfer 4 bytes
0000141C 2C98                               move.l  (a0)+,(a6)  ; transfer 4 more bytes
0000141E 2C98                               move.l  (a0)+,(a6)  ; and so on and so forth
00001420 2C98                               move.l  (a0)+,(a6)  ;
00001422 2C98                               move.l  (a0)+,(a6)  ;
00001424 2C98                               move.l  (a0)+,(a6)  ;
00001426 2C98                               move.l  (a0)+,(a6)  ; in total transfer 32 bytes
00001428 2C98                               move.l  (a0)+,(a6)  ; which is 1 full tile
0000142A                             
0000142A 51C8 FFEE                          dbf d0, LoadArt_Loop; loop until d0 = 0
0000142E 46FC 2300                          move    #$2300,sr   ; enable interrupts
00001432 4E75                               rts	
00001434                            
00001434                            ; ---------------------------------------------------------------------------
00001434                            ; Subroutine to	load pattern load cues
00001434                            ; ---------------------------------------------------------------------------
00001434                            
00001434                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001434                            
00001434                            
00001434                            LoadPLC:
00001434 48E7 0060                  		movem.l	a1-a2,-(sp)
00001438 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000143E D040                       		add.w	d0,d0
00001440 3031 0000                  		move.w	(a1,d0.w),d0
00001444 43F1 0000                  		lea	(a1,d0.w),a1
00001448 45F8 F680                  		lea	($FFFFF680).w,a2
0000144C                            
0000144C                            loc_1598:
0000144C 4A92                       		tst.l	(a2)
0000144E 6700                       		beq.s	loc_15A0
00001450 5C4A                       		addq.w	#6,a2
00001452 60F8                       		bra.s	loc_1598
00001454                            ; ===========================================================================
00001454                            
00001454                            loc_15A0:				; XREF: LoadPLC
00001454 3019                       		move.w	(a1)+,d0
00001456 6B00                       		bmi.s	loc_15AC
00001458                            
00001458                            loc_15A4:
00001458 24D9                       		move.l	(a1)+,(a2)+
0000145A 34D9                       		move.w	(a1)+,(a2)+
0000145C 51C8 FFFA                  		dbf	d0,loc_15A4
00001460                            
00001460                            loc_15AC:
00001460 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001464 4E75                       		rts	
00001466                            ; End of function LoadPLC
00001466                            
00001466                            
00001466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001466                            
00001466                            
00001466                            LoadPLC2:
00001466 48E7 0060                  		movem.l	a1-a2,-(sp)
0000146A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001470 D040                       		add.w	d0,d0
00001472 3031 0000                  		move.w	(a1,d0.w),d0
00001476 43F1 0000                  		lea	(a1,d0.w),a1
0000147A 6100                       		bsr.s	ClearPLC
0000147C 45F8 F680                  		lea	($FFFFF680).w,a2
00001480 3019                       		move.w	(a1)+,d0
00001482 6B00                       		bmi.s	loc_15D8
00001484                            
00001484                            loc_15D0:
00001484 24D9                       		move.l	(a1)+,(a2)+
00001486 34D9                       		move.w	(a1)+,(a2)+
00001488 51C8 FFFA                  		dbf	d0,loc_15D0
0000148C                            
0000148C                            loc_15D8:
0000148C 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001490 4E75                       		rts	
00001492                            ; End of function LoadPLC2
00001492                            
00001492                            ; ---------------------------------------------------------------------------
00001492                            ; Subroutine to	clear the pattern load cues
00001492                            ; ---------------------------------------------------------------------------
00001492                            
00001492                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001492                            
00001492                            
00001492                            ClearPLC:				; XREF: LoadPLC2
00001492 45F8 F680                  		lea	($FFFFF680).w,a2
00001496 701F                       		moveq	#$1F,d0
00001498                            
00001498                            ClearPLC_Loop:
00001498 429A                       		clr.l	(a2)+
0000149A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000149E 4E75                       		rts	
000014A0                            ; End of function ClearPLC
000014A0                            
000014A0                            ; ---------------------------------------------------------------------------
000014A0                            ; Subroutine to	use graphics listed in a pattern load cue
000014A0                            ; ---------------------------------------------------------------------------
000014A0                            
000014A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014A0                            
000014A0                            
000014A0                            RunPLC_RAM:				; XREF: Pal_FadeTo
000014A0 4AB8 F680                  		tst.l	($FFFFF680).w
000014A4 6700                       		beq.s	locret_1640
000014A6 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000014AA 6600                       		bne.s	locret_1640
000014AC 2078 F680                  		movea.l	($FFFFF680).w,a0
000014B0 47F9 0000 1396             		lea	(loc_1502).l,a3
000014B6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000014BA 3418                       		move.w	(a0)+,d2
000014BC 6A00                       		bpl.s	loc_160E
000014BE D6FC 000A                  		adda.w	#$A,a3
000014C2                            
000014C2                            loc_160E:
000014C2 0242 7FFF                  		andi.w	#$7FFF,d2
000014C6 6100 FEFA                  		bsr.w	NemDec4
000014CA 1A18                       		move.b	(a0)+,d5
000014CC E145                       		asl.w	#8,d5
000014CE 1A18                       		move.b	(a0)+,d5
000014D0 7C10                       		moveq	#$10,d6
000014D2 7000                       		moveq	#0,d0
000014D4 21C8 F680                  		move.l	a0,($FFFFF680).w
000014D8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000014DC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000014E0 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000014E4 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000014E8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000014EC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000014F0 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
000014F4                            		
000014F4                            locret_1640:
000014F4 4E75                       		rts	
000014F6                            ; End of function RunPLC_RAM
000014F6                            
000014F6                            
000014F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014F6                            
000014F6                            
000014F6                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000014F6 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000014FA 6700 0000                  		beq.w	locret_16DA
000014FE 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001504 7000                       		moveq	#0,d0
00001506 3038 F684                  		move.w	($FFFFF684).w,d0
0000150A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001510 6000                       		bra.s	loc_1676
00001512                            ; End of function sub_1642
00001512                            
00001512                            
00001512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001512                            
00001512                            
00001512                            sub_165E:				; XREF: Demo_Time
00001512 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001516 6700                       		beq.s	locret_16DA
00001518 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000151E 7000                       		moveq	#0,d0
00001520 3038 F684                  		move.w	($FFFFF684).w,d0
00001524 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000152A                            
0000152A                            loc_1676:				; XREF: sub_1642
0000152A 49F9 00C0 0004             		lea	($C00004).l,a4
00001530 E588                       		lsl.l	#2,d0
00001532 E448                       		lsr.w	#2,d0
00001534 0040 4000                  		ori.w	#$4000,d0
00001538 4840                       		swap	d0
0000153A 2880                       		move.l	d0,(a4)
0000153C 594C                       		subq.w	#4,a4
0000153E 2078 F680                  		movea.l	($FFFFF680).w,a0
00001542 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001546 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000154A 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000154E 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001552 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001556 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
0000155A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000155E                            
0000155E                            loc_16AA:				; XREF: sub_165E
0000155E 3A7C 0008                  		movea.w	#8,a5
00001562 6100 FDFC                  		bsr.w	NemDec3
00001566 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
0000156A 6700                       		beq.s	loc_16DC
0000156C 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001570 66EC                       		bne.s	loc_16AA
00001572 21C8 F680                  		move.l	a0,($FFFFF680).w
00001576 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000157A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000157E 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001582 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001586 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000158A 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000158E                            
0000158E                            locret_16DA:				; XREF: sub_1642
0000158E 4E75                       		rts	
00001590                            ; ===========================================================================
00001590                            
00001590                            loc_16DC:				; XREF: sub_165E
00001590 41F8 F680                  		lea	($FFFFF680).w,a0
00001594 7015                       		moveq	#$15,d0
00001596                            
00001596                            loc_16E2:				; XREF: sub_165E
00001596 20E8 0006                  		move.l	6(a0),(a0)+
0000159A 51C8 FFFA                  		dbf	d0,loc_16E2
0000159E 4E75                       		rts	
000015A0                            ; End of function sub_165E
000015A0                            
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            ; Subroutine to	execute	the pattern load cue
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            
000015A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015A0                            
000015A0                            
000015A0                            RunPLC_ROM:
000015A0 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000015A6 D040                       		add.w	d0,d0
000015A8 3031 0000                  		move.w	(a1,d0.w),d0
000015AC 43F1 0000                  		lea	(a1,d0.w),a1
000015B0 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000015B2                            
000015B2                            RunPLC_Loop:
000015B2 2059                       		movea.l	(a1)+,a0	; get art pointer
000015B4 7000                       		moveq	#0,d0
000015B6 3019                       		move.w	(a1)+,d0	; get VRAM address
000015B8 E588                       		lsl.l	#2,d0		; divide address by $20
000015BA E448                       		lsr.w	#2,d0
000015BC 0040 4000                  		ori.w	#$4000,d0
000015C0 4840                       		swap	d0
000015C2 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000015C8 6100 FD1E                  		bsr.w	NemDec		; decompress
000015CC 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000015D0 4E75                       		rts	
000015D2                            ; End of function RunPLC_ROM
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Enigma decompression algorithm
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            EniDec:
000015D2 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000015D6 3640                       		movea.w	d0,a3
000015D8 1018                       		move.b	(a0)+,d0
000015DA 4880                       		ext.w	d0
000015DC 3A40                       		movea.w	d0,a5
000015DE 1818                       		move.b	(a0)+,d4
000015E0 E70C                       		lsl.b	#3,d4
000015E2 3458                       		movea.w	(a0)+,a2
000015E4 D4CB                       		adda.w	a3,a2
000015E6 3858                       		movea.w	(a0)+,a4
000015E8 D8CB                       		adda.w	a3,a4
000015EA 1A18                       		move.b	(a0)+,d5
000015EC E145                       		asl.w	#8,d5
000015EE 1A18                       		move.b	(a0)+,d5
000015F0 7C10                       		moveq	#$10,d6
000015F2                            
000015F2                            loc_173E:				; XREF: loc_1768
000015F2 7007                       		moveq	#7,d0
000015F4 3E06                       		move.w	d6,d7
000015F6 9E40                       		sub.w	d0,d7
000015F8 3205                       		move.w	d5,d1
000015FA EE69                       		lsr.w	d7,d1
000015FC 0241 007F                  		andi.w	#$7F,d1
00001600 3401                       		move.w	d1,d2
00001602 0C41 0040                  		cmpi.w	#$40,d1
00001606 6400                       		bcc.s	loc_1758
00001608 7006                       		moveq	#6,d0
0000160A E24A                       		lsr.w	#1,d2
0000160C                            
0000160C                            loc_1758:
0000160C 6100 0000                  		bsr.w	sub_188C
00001610 0242 000F                  		andi.w	#$F,d2
00001614 E849                       		lsr.w	#4,d1
00001616 D241                       		add.w	d1,d1
00001618 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000161C                            ; End of function EniDec
0000161C                            
0000161C                            ; ===========================================================================
0000161C                            
0000161C                            loc_1768:				; XREF: loc_17B4
0000161C 32CA                       		move.w	a2,(a1)+
0000161E 524A                       		addq.w	#1,a2
00001620 51CA FFFA                  		dbf	d2,loc_1768
00001624 60CC                       		bra.s	loc_173E
00001626                            ; ===========================================================================
00001626                            
00001626                            loc_1772:				; XREF: loc_17B4
00001626 32CC                       		move.w	a4,(a1)+
00001628 51CA FFFC                  		dbf	d2,loc_1772
0000162C 60C4                       		bra.s	loc_173E
0000162E                            ; ===========================================================================
0000162E                            
0000162E                            loc_177A:				; XREF: loc_17B4
0000162E 6100 0000                  		bsr.w	loc_17DC
00001632                            
00001632                            loc_177E:
00001632 32C1                       		move.w	d1,(a1)+
00001634 51CA FFFC                  		dbf	d2,loc_177E
00001638 60B8                       		bra.s	loc_173E
0000163A                            ; ===========================================================================
0000163A                            
0000163A                            loc_1786:				; XREF: loc_17B4
0000163A 6100 0000                  		bsr.w	loc_17DC
0000163E                            
0000163E                            loc_178A:
0000163E 32C1                       		move.w	d1,(a1)+
00001640 5241                       		addq.w	#1,d1
00001642 51CA FFFA                  		dbf	d2,loc_178A
00001646 60AA                       		bra.s	loc_173E
00001648                            ; ===========================================================================
00001648                            
00001648                            loc_1794:				; XREF: loc_17B4
00001648 6100 0000                  		bsr.w	loc_17DC
0000164C                            
0000164C                            loc_1798:
0000164C 32C1                       		move.w	d1,(a1)+
0000164E 5341                       		subq.w	#1,d1
00001650 51CA FFFA                  		dbf	d2,loc_1798
00001654 609C                       		bra.s	loc_173E
00001656                            ; ===========================================================================
00001656                            
00001656                            loc_17A2:				; XREF: loc_17B4
00001656 0C42 000F                  		cmpi.w	#$F,d2
0000165A 6700                       		beq.s	loc_17C4
0000165C                            
0000165C                            loc_17A8:
0000165C 6100 0000                  		bsr.w	loc_17DC
00001660 32C1                       		move.w	d1,(a1)+
00001662 51CA FFF8                  		dbf	d2,loc_17A8
00001666 608A                       		bra.s	loc_173E
00001668                            ; ===========================================================================
00001668                            
00001668                            loc_17B4:				; XREF: EniDec
00001668 60B2                       		bra.s	loc_1768
0000166A                            ; ===========================================================================
0000166A 60B0                       		bra.s	loc_1768
0000166C                            ; ===========================================================================
0000166C 60B8                       		bra.s	loc_1772
0000166E                            ; ===========================================================================
0000166E 60B6                       		bra.s	loc_1772
00001670                            ; ===========================================================================
00001670 60BC                       		bra.s	loc_177A
00001672                            ; ===========================================================================
00001672 60C6                       		bra.s	loc_1786
00001674                            ; ===========================================================================
00001674 60D2                       		bra.s	loc_1794
00001676                            ; ===========================================================================
00001676 60DE                       		bra.s	loc_17A2
00001678                            ; ===========================================================================
00001678                            
00001678                            loc_17C4:				; XREF: loc_17A2
00001678 5348                       		subq.w	#1,a0
0000167A 0C46 0010                  		cmpi.w	#$10,d6
0000167E 6600                       		bne.s	loc_17CE
00001680 5348                       		subq.w	#1,a0
00001682                            
00001682                            loc_17CE:
00001682 3008                       		move.w	a0,d0
00001684 E248                       		lsr.w	#1,d0
00001686 6400                       		bcc.s	loc_17D6
00001688 5248                       		addq.w	#1,a0
0000168A                            
0000168A                            loc_17D6:
0000168A 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
0000168E 4E75                       		rts	
00001690                            ; ===========================================================================
00001690                            
00001690                            loc_17DC:				; XREF: loc_17A2
00001690 360B                       		move.w	a3,d3
00001692 1204                       		move.b	d4,d1
00001694 D201                       		add.b	d1,d1
00001696 6400                       		bcc.s	loc_17EE
00001698 5346                       		subq.w	#1,d6
0000169A 0D05                       		btst	d6,d5
0000169C 6700                       		beq.s	loc_17EE
0000169E 0043 8000                  		ori.w	#-$8000,d3
000016A2                            
000016A2                            loc_17EE:
000016A2 D201                       		add.b	d1,d1
000016A4 6400                       		bcc.s	loc_17FC
000016A6 5346                       		subq.w	#1,d6
000016A8 0D05                       		btst	d6,d5
000016AA 6700                       		beq.s	loc_17FC
000016AC 0643 4000                  		addi.w	#$4000,d3
000016B0                            
000016B0                            loc_17FC:
000016B0 D201                       		add.b	d1,d1
000016B2 6400                       		bcc.s	loc_180A
000016B4 5346                       		subq.w	#1,d6
000016B6 0D05                       		btst	d6,d5
000016B8 6700                       		beq.s	loc_180A
000016BA 0643 2000                  		addi.w	#$2000,d3
000016BE                            
000016BE                            loc_180A:
000016BE D201                       		add.b	d1,d1
000016C0 6400                       		bcc.s	loc_1818
000016C2 5346                       		subq.w	#1,d6
000016C4 0D05                       		btst	d6,d5
000016C6 6700                       		beq.s	loc_1818
000016C8 0043 1000                  		ori.w	#$1000,d3
000016CC                            
000016CC                            loc_1818:
000016CC D201                       		add.b	d1,d1
000016CE 6400                       		bcc.s	loc_1826
000016D0 5346                       		subq.w	#1,d6
000016D2 0D05                       		btst	d6,d5
000016D4 6700                       		beq.s	loc_1826
000016D6 0043 0800                  		ori.w	#$800,d3
000016DA                            
000016DA                            loc_1826:
000016DA 3205                       		move.w	d5,d1
000016DC 3E06                       		move.w	d6,d7
000016DE 9E4D                       		sub.w	a5,d7
000016E0 6400                       		bcc.s	loc_1856
000016E2 3C07                       		move.w	d7,d6
000016E4 0646 0010                  		addi.w	#$10,d6
000016E8 4447                       		neg.w	d7
000016EA EF69                       		lsl.w	d7,d1
000016EC 1A10                       		move.b	(a0),d5
000016EE EF3D                       		rol.b	d7,d5
000016F0 DE47                       		add.w	d7,d7
000016F2 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000016F6 D245                       		add.w	d5,d1
000016F8                            
000016F8                            loc_1844:				; XREF: loc_1868
000016F8 300D                       		move.w	a5,d0
000016FA D040                       		add.w	d0,d0
000016FC C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001700 D243                       		add.w	d3,d1
00001702 1A18                       		move.b	(a0)+,d5
00001704 E14D                       		lsl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708 4E75                       		rts	
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            loc_1856:				; XREF: loc_1826
0000170A 6700                       		beq.s	loc_1868
0000170C EE69                       		lsr.w	d7,d1
0000170E 300D                       		move.w	a5,d0
00001710 D040                       		add.w	d0,d0
00001712 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001716 D243                       		add.w	d3,d1
00001718 300D                       		move.w	a5,d0
0000171A 6000                       		bra.s	sub_188C
0000171C                            ; ===========================================================================
0000171C                            
0000171C                            loc_1868:				; XREF: loc_1856
0000171C 7C10                       		moveq	#$10,d6
0000171E                            
0000171E                            loc_186A:
0000171E 60D8                       		bra.s	loc_1844
00001720                            ; ===========================================================================
00001720 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001736 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001740                            
00001740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001740                            
00001740                            
00001740                            sub_188C:				; XREF: EniDec
00001740 9C40                       		sub.w	d0,d6
00001742 0C46 0009                  		cmpi.w	#9,d6
00001746 6400                       		bcc.s	locret_189A
00001748 5046                       		addq.w	#8,d6
0000174A E145                       		asl.w	#8,d5
0000174C 1A18                       		move.b	(a0)+,d5
0000174E                            
0000174E                            locret_189A:
0000174E 4E75                       		rts	
00001750                            ; End of function sub_188C
00001750                            
00001750                            ; ===========================================================================
00001750                            ; ---------------------------------------------------------------------------
00001750                            ; Kosinski decompression routine
00001750                            ;
00001750                            ; Created by vladikcomper
00001750                            ; Special thanks to flamewing and MarkeyJester
00001750                            ; ---------------------------------------------------------------------------
00001750                             
00001750                            _Kos_RunBitStream macro
00001750                                dbf d2,@skip\@
00001750                                moveq   #7,d2
00001750                                move.b  d1,d0
00001750                                swap    d3
00001750                                bpl.s   @skip\@
00001750                                move.b  (a0)+,d0            ; get desc. bitfield
00001750                                move.b  (a0)+,d1            ;
00001750                                move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
00001750                                move.b  (a4,d1.w),d1            ;
00001750                            @skip\@
00001750                                endm
00001750                            ; ---------------------------------------------------------------------------
00001750                             
00001750                            KosDec:
00001750 7E07                           moveq   #7,d7
00001752 7000                           moveq   #0,d0
00001754 7200                           moveq   #0,d1
00001756 49FA 0000                      lea KosDec_ByteMap(pc),a4
0000175A 1018                           move.b  (a0)+,d0            ; get desc field low-byte
0000175C 1218                           move.b  (a0)+,d1            ; get desc field hi-byte
0000175E 1034 0000                      move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
00001762 1234 1000                      move.b  (a4,d1.w),d1            ;
00001766 7407                           moveq   #7,d2               ; set repeat count to 8
00001768 76FF                           moveq   #-1,d3              ; d3 will be desc field switcher
0000176A 4243                           clr.w   d3              ;
0000176C 6000                           bra.s   KosDec_FetchNewCode
0000176E                             
0000176E                            KosDec_FetchCodeLoop:
0000176E                                ; code 1 (Uncompressed byte)
0000176E 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001786 12D8                           move.b  (a0)+,(a1)+
00001788                             
00001788                            KosDec_FetchNewCode:
00001788 D000                           add.b   d0,d0               ; get a bit from the bitstream
0000178A 65E2                           bcs.s   KosDec_FetchCodeLoop        ; if code = 0, branch
0000178C                             
0000178C                                ; codes 00 and 01
0000178C 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017A4 7800                           moveq   #0,d4               ; d4 will contain copy count
000017A6 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017A8 6500                           bcs.s   KosDec_Code_01
000017AA                             
000017AA                                ; code 00 (Dictionary ref. short)
000017AA 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017C2 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017C4 D944                           addx.w  d4,d4
000017C6 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017DE D000                           add.b   d0,d0               ; get a bit from the bitstream
000017E0 D944                           addx.w  d4,d4
000017E2 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017FA 7AFF                           moveq   #-1,d5
000017FC 1A18                           move.b  (a0)+,d5            ; d5 = displacement
000017FE                             
000017FE                            KosDec_StreamCopy:
000017FE 47F1 5000                      lea (a1,d5),a3
00001802 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
00001804                             
00001804                            KosDec_copy:
00001804 12DB                           move.b  (a3)+,(a1)+
00001806 51CC FFFC                      dbf d4,KosDec_copy
0000180A 6000 FF7C                      bra.w   KosDec_FetchNewCode
0000180E                            ; ---------------------------------------------------------------------------
0000180E                            KosDec_Code_01:
0000180E                                ; code 01 (Dictionary ref. long / special)
0000180E 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001826 1C18                           move.b  (a0)+,d6            ; d6 = %LLLLLLLL
00001828 1818                           move.b  (a0)+,d4            ; d4 = %HHHHHCCC
0000182A 7AFF                           moveq   #-1,d5
0000182C 1A04                           move.b  d4,d5               ; d5 = %11111111 HHHHHCCC
0000182E EB4D                           lsl.w   #5,d5               ; d5 = %111HHHHH CCC00000
00001830 1A06                           move.b  d6,d5               ; d5 = %111HHHHH LLLLLLLL
00001832 C847                           and.w   d7,d4               ; d4 = %00000CCC
00001834 66C8                           bne.s   KosDec_StreamCopy       ; if CCC=0, branch
00001836                             
00001836                                ; special mode (extended counter)
00001836 1818                           move.b  (a0)+,d4            ; read cnt
00001838 6700                           beq.s   KosDec_Quit         ; if cnt=0, quit decompression
0000183A 5304                           subq.b  #1,d4
0000183C 6700 FF4A                      beq.w   KosDec_FetchNewCode     ; if cnt=1, fetch a new code
00001840                             
00001840 47F1 5000                      lea (a1,d5),a3
00001844 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
00001846 3C04                           move.w  d4,d6
00001848 4646                           not.w   d6
0000184A CC47                           and.w   d7,d6
0000184C DC46                           add.w   d6,d6
0000184E E64C                           lsr.w   #3,d4
00001850 4EFB 6000                      jmp KosDec_largecopy(pc,d6.w)
00001854                             
00001854                            KosDec_largecopy:
00001854                                rept 8
00001854                                move.b  (a3)+,(a1)+
00001854 12DB 12DB 12DB 12DB 12DB+      endr
00001864 51CC FFEE                      dbf d4,KosDec_largecopy
00001868 6000 FF1E                      bra.w   KosDec_FetchNewCode
0000186C                             
0000186C                            KosDec_Quit:
0000186C 4E75                           rts
0000186E                             
0000186E                            ; ---------------------------------------------------------------------------
0000186E                            ; A look-up table to invert bits order in desc. field bytes
0000186E                            ; ---------------------------------------------------------------------------
0000186E                             
0000186E                            KosDec_ByteMap:
0000186E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
0000187E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
0000188E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
0000189E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
000018AE 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
000018BE 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
000018CE 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
000018DE 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
000018EE 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
000018FE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
0000190E 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
0000191E 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
0000192E 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
0000193E 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
0000194E 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
0000195E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
0000196E                             
0000196E                            ; ===========================================================================
0000196E                            
0000196E                            ; ---------------------------------------------------------------------------
0000196E                            ; Pallet cycling routine loading subroutine
0000196E                            ; ---------------------------------------------------------------------------
0000196E                            
0000196E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000196E                            
0000196E                            
0000196E                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000196E 7400                       		moveq	#0,d2
00001970 7000                       		moveq	#0,d0
00001972 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001976 D040                       		add.w	d0,d0		; multiply by 2
00001978 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000197C 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001980                            ; End of function PalCycle_Load
00001980                            
00001980                            ; ===========================================================================
00001980                            ; ---------------------------------------------------------------------------
00001980                            ; Pallet cycling routines
00001980                            ; ---------------------------------------------------------------------------
00001980 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001982 0000                       		dc.w PalCycle_LZ-PalCycle
00001984 0000                       		dc.w PalCycle_MZ-PalCycle
00001986 0000                       		dc.w PalCycle_SLZ-PalCycle
00001988 0000                       		dc.w PalCycle_SYZ-PalCycle
0000198A 0000                       		dc.w PalCycle_SBZ-PalCycle
0000198C 0000                       		dc.w PalCycle_GHZ-PalCycle
0000198E                            
0000198E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000198E                            
0000198E                            
0000198E                            PalCycle_Title:				; XREF: TitleScreen
0000198E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001994 6000                       		bra.s	loc_196A
00001996                            ; ===========================================================================
00001996                            
00001996                            PalCycle_GHZ:				; XREF: PalCycle
00001996 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000199C                            
0000199C                            loc_196A:				; XREF: PalCycle_Title
0000199C 5378 F634                  		subq.w	#1,($FFFFF634).w
000019A0 6A00                       		bpl.s	locret_1990
000019A2 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000019A8 3038 F632                  		move.w	($FFFFF632).w,d0
000019AC 5278 F632                  		addq.w	#1,($FFFFF632).w
000019B0 0240 0003                  		andi.w	#3,d0
000019B4 E748                       		lsl.w	#3,d0
000019B6 43F8 FB50                  		lea	($FFFFFB50).w,a1
000019BA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019BE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019C2                            
000019C2                            locret_1990:
000019C2 4E75                       		rts	
000019C4                            ; End of function PalCycle_Title
000019C4                            
000019C4                            
000019C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019C4                            
000019C4                            
000019C4                            PalCycle_LZ:				; XREF: PalCycle
000019C4 5378 F634                  		subq.w	#1,($FFFFF634).w
000019C8 6A00                       		bpl.s	loc_19D8
000019CA 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000019D0 3038 F632                  		move.w	($FFFFF632).w,d0
000019D4 5278 F632                  		addq.w	#1,($FFFFF632).w
000019D8 0240 0003                  		andi.w	#3,d0
000019DC E748                       		lsl.w	#3,d0
000019DE 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019E4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000019EA 6600                       		bne.s	loc_19C0
000019EC 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000019F2                            
000019F2                            loc_19C0:
000019F2 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019F6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019FA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019FE 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001A02 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A06 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A0A                            
00001A0A                            loc_19D8:
00001A0A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001A0E 0240 0007                  		andi.w	#7,d0
00001A12 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001A16 6700                       		beq.s	locret_1A3A
00001A18 7201                       		moveq	#1,d1
00001A1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001A1E 6700                       		beq.s	loc_19F0
00001A20 4441                       		neg.w	d1
00001A22                            
00001A22                            loc_19F0:
00001A22 3038 F650                  		move.w	($FFFFF650).w,d0
00001A26 0240 0003                  		andi.w	#3,d0
00001A2A D041                       		add.w	d1,d0
00001A2C 0C40 0003                  		cmpi.w	#3,d0
00001A30 6500                       		bcs.s	loc_1A0A
00001A32 3200                       		move.w	d0,d1
00001A34 7000                       		moveq	#0,d0
00001A36 4A41                       		tst.w	d1
00001A38 6A00                       		bpl.s	loc_1A0A
00001A3A 7002                       		moveq	#2,d0
00001A3C                            
00001A3C                            loc_1A0A:
00001A3C 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A40 D040                       		add.w	d0,d0
00001A42 3200                       		move.w	d0,d1
00001A44 D040                       		add.w	d0,d0
00001A46 D041                       		add.w	d1,d0
00001A48 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A4E 43F8 FB78                  		lea	($FFFFFB78).w,a1
00001A52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A5A 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A60 43F8 FAF8                  		lea	($FFFFFAF8).w,a1
00001A64 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A68 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A6C                            
00001A6C                            locret_1A3A:
00001A6C 4E75                       		rts	
00001A6E                            ; End of function PalCycle_LZ
00001A6E                            
00001A6E                            ; ===========================================================================
00001A6E 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            PalCycle_MZ:				; XREF: PalCycle
00001A76 4E75                       		rts	
00001A78                            
00001A78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A78                            
00001A78                            
00001A78                            PalCycle_SLZ:				; XREF: PalCycle
00001A78 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A7C 6A00                       		bpl.s	locret_1A80
00001A7E 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A84 3038 F632                  		move.w	($FFFFF632).w,d0
00001A88 5240                       		addq.w	#1,d0
00001A8A 0C40 0006                  		cmpi.w	#6,d0
00001A8E 6500                       		bcs.s	loc_1A60
00001A90 7000                       		moveq	#0,d0
00001A92                            
00001A92                            loc_1A60:
00001A92 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A96 3200                       		move.w	d0,d1
00001A98 D241                       		add.w	d1,d1
00001A9A D041                       		add.w	d1,d0
00001A9C D040                       		add.w	d0,d0
00001A9E 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001AA4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001AA8 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001AAC 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001AB2                            
00001AB2                            locret_1A80:
00001AB2 4E75                       		rts	
00001AB4                            ; End of function PalCycle_SLZ
00001AB4                            
00001AB4                            
00001AB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB4                            
00001AB4                            
00001AB4                            PalCycle_SYZ:				; XREF: PalCycle
00001AB4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AB8 6A00                       		bpl.s	locret_1AC6
00001ABA 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AC0 3038 F632                  		move.w	($FFFFF632).w,d0
00001AC4 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AC8 0240 0003                  		andi.w	#3,d0
00001ACC E548                       		lsl.w	#2,d0
00001ACE 3200                       		move.w	d0,d1
00001AD0 D040                       		add.w	d0,d0
00001AD2 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001AD8 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001ADC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AE0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AE4 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001AEA 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001AEE 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001AF2 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001AF8                            
00001AF8                            locret_1AC6:
00001AF8 4E75                       		rts	
00001AFA                            ; End of function PalCycle_SYZ
00001AFA                            
00001AFA                            
00001AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AFA                            
00001AFA                            
00001AFA                            PalCycle_SBZ:				; XREF: PalCycle
00001AFA 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001B00 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B04 6700                       		beq.s	loc_1ADA
00001B06 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B0C                            
00001B0C                            loc_1ADA:
00001B0C 43F8 F650                  		lea	($FFFFF650).w,a1
00001B10 321A                       		move.w	(a2)+,d1
00001B12                            
00001B12                            loc_1AE0:
00001B12 5311                       		subq.b	#1,(a1)
00001B14 6B00                       		bmi.s	loc_1AEA
00001B16 5489                       		addq.l	#2,a1
00001B18 5C8A                       		addq.l	#6,a2
00001B1A 6000                       		bra.s	loc_1B06
00001B1C                            ; ===========================================================================
00001B1C                            
00001B1C                            loc_1AEA:				; XREF: PalCycle_SBZ
00001B1C 12DA                       		move.b	(a2)+,(a1)+
00001B1E 1011                       		move.b	(a1),d0
00001B20 5200                       		addq.b	#1,d0
00001B22 B01A                       		cmp.b	(a2)+,d0
00001B24 6500                       		bcs.s	loc_1AF6
00001B26 7000                       		moveq	#0,d0
00001B28                            
00001B28                            loc_1AF6:
00001B28 12C0                       		move.b	d0,(a1)+
00001B2A 0240 000F                  		andi.w	#$F,d0
00001B2E D040                       		add.w	d0,d0
00001B30 305A                       		movea.w	(a2)+,a0
00001B32 365A                       		movea.w	(a2)+,a3
00001B34 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B38                            
00001B38                            loc_1B06:				; XREF: PalCycle_SBZ
00001B38 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B3C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B40 6A00                       		bpl.s	locret_1B64
00001B42 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B48 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B4E 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B52 6700                       		beq.s	loc_1B2E
00001B54 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B5A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B60                            
00001B60                            loc_1B2E:
00001B60 72FF                       		moveq	#-1,d1
00001B62 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B66 6700                       		beq.s	loc_1B38
00001B68 4441                       		neg.w	d1
00001B6A                            
00001B6A                            loc_1B38:
00001B6A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B6E 0240 0003                  		andi.w	#3,d0
00001B72 D041                       		add.w	d1,d0
00001B74 0C40 0003                  		cmpi.w	#3,d0
00001B78 6500                       		bcs.s	loc_1B52
00001B7A 3200                       		move.w	d0,d1
00001B7C 7000                       		moveq	#0,d0
00001B7E 4A41                       		tst.w	d1
00001B80 6A00                       		bpl.s	loc_1B52
00001B82 7002                       		moveq	#2,d0
00001B84                            
00001B84                            loc_1B52:
00001B84 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B88 D040                       		add.w	d0,d0
00001B8A 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B8E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B92 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B96                            
00001B96                            locret_1B64:
00001B96 4E75                       		rts	
00001B98                            ; End of function PalCycle_SBZ
00001B98                            
00001B98                            ; ===========================================================================
00001B98                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001BB8                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001BD8                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001BF8                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001C0A                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001C1C                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C84                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001CA8                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001CC8                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001CD8                            
00001CD8                            Pal_SBZCycList:
00001CD8                            	include "_inc\SBZ pallet script 1.asm"
00001CD8                            ; ---------------------------------------------------------------------------
00001CD8                            ; Scrap Brain Zone 1 pallet cycling script
00001CD8                            ; ---------------------------------------------------------------------------
00001CD8 0008                       	dc.w 8			; number of entries - 1
00001CDA 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001CDC 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001CDE FB50                       	dc.w $FB50		; RAM address
00001CE0 0D08                       	dc.b $D, 8
00001CE2 0000                       	dc.w Pal_SBZCyc2
00001CE4 FB52                       	dc.w $FB52
00001CE6 0E08                       	dc.b $E, 8
00001CE8 0000                       	dc.w Pal_SBZCyc3
00001CEA FB6E                       	dc.w $FB6E
00001CEC 0B08                       	dc.b $B, 8
00001CEE 0000                       	dc.w Pal_SBZCyc5
00001CF0 FB70                       	dc.w $FB70
00001CF2 0708                       	dc.b 7,	8
00001CF4 0000                       	dc.w Pal_SBZCyc6
00001CF6 FB72                       	dc.w $FB72
00001CF8 1C10                       	dc.b $1C, $10
00001CFA 0000                       	dc.w Pal_SBZCyc7
00001CFC FB7E                       	dc.w $FB7E
00001CFE 0303                       	dc.b 3,	3
00001D00 0000                       	dc.w Pal_SBZCyc8
00001D02 FB78                       	dc.w $FB78
00001D04 0303                       	dc.b 3,	3
00001D06 0000                       	dc.w Pal_SBZCyc8+2
00001D08 FB7A                       	dc.w $FB7A
00001D0A 0303                       	dc.b 3,	3
00001D0C 0000                       	dc.w Pal_SBZCyc8+4
00001D0E FB7C                       	dc.w $FB7C
00001D10                            	even
00001D10                            	even
00001D10                            
00001D10                            Pal_SBZCycList2:
00001D10                            	include "_inc\SBZ pallet script 2.asm"
00001D10                            ; ---------------------------------------------------------------------------
00001D10                            ; Scrap Brain Zone 2 pallet cycling script
00001D10                            ; ---------------------------------------------------------------------------
00001D10 0006                       	dc.w 6
00001D12 0708                       	dc.b 7,	8
00001D14 0000                       	dc.w Pal_SBZCyc1
00001D16 FB50                       	dc.w $FB50
00001D18 0D08                       	dc.b $D, 8
00001D1A 0000                       	dc.w Pal_SBZCyc2
00001D1C FB52                       	dc.w $FB52
00001D1E 0908                       	dc.b 9,	8
00001D20 0000                       	dc.w Pal_SBZCyc9
00001D22 FB70                       	dc.w $FB70
00001D24 0708                       	dc.b 7,	8
00001D26 0000                       	dc.w Pal_SBZCyc6
00001D28 FB72                       	dc.w $FB72
00001D2A 0303                       	dc.b 3,	3
00001D2C 0000                       	dc.w Pal_SBZCyc8
00001D2E FB78                       	dc.w $FB78
00001D30 0303                       	dc.b 3,	3
00001D32 0000                       	dc.w Pal_SBZCyc8+2
00001D34 FB7A                       	dc.w $FB7A
00001D36 0303                       	dc.b 3,	3
00001D38 0000                       	dc.w Pal_SBZCyc8+4
00001D3A FB7C                       	dc.w $FB7C
00001D3C                            	even
00001D3C                            	even
00001D3C                            
00001D3C                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D4C                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D5C                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D6C                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D78                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D88                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D98                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001DB8                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001DC2                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DD2                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001DDE                            ; ---------------------------------------------------------------------------
00001DDE                            ; Subroutine to	fade out and fade in
00001DDE                            ; ---------------------------------------------------------------------------
00001DDE                            
00001DDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DDE                            
00001DDE                            
00001DDE                            Pal_FadeTo:
00001DDE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001DE4                            
00001DE4                            Pal_FadeTo2:
00001DE4 7000                       		moveq	#0,d0
00001DE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DEA 1038 F626                  		move.b	($FFFFF626).w,d0
00001DEE D0C0                       		adda.w	d0,a0
00001DF0 7200                       		moveq	#0,d1
00001DF2 1038 F627                  		move.b	($FFFFF627).w,d0
00001DF6                            
00001DF6                            Pal_ToBlack:
00001DF6 30C1                       		move.w	d1,(a0)+
00001DF8 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001DFC                            
00001DFC 383C 0015                  		move.w	#$15,d4
00001E00                            
00001E00                            loc_1DCE:
00001E00 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E06 6100 0000                  		bsr.w	DelayProgram
00001E0A 6100                       		bsr.s	Pal_FadeIn
00001E0C 6100 F692                  		bsr.w	RunPLC_RAM
00001E10 51CC FFEE                  		dbf	d4,loc_1DCE
00001E14 4E75                       		rts	
00001E16                            ; End of function Pal_FadeTo
00001E16                            
00001E16                            ; ---------------------------------------------------------------------------
00001E16                            ; Pallet fade-in subroutine
00001E16                            ; ---------------------------------------------------------------------------
00001E16                            
00001E16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E16                            
00001E16                            
00001E16                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001E16 7000                       		moveq	#0,d0
00001E18 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E1C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001E20 1038 F626                  		move.b	($FFFFF626).w,d0
00001E24 D0C0                       		adda.w	d0,a0
00001E26 D2C0                       		adda.w	d0,a1
00001E28 1038 F627                  		move.b	($FFFFF627).w,d0
00001E2C                            
00001E2C                            loc_1DFA:
00001E2C 6100                       		bsr.s	Pal_AddColor
00001E2E 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E32                            
00001E32                            locret_1E24:
00001E32 4E75                       		rts	
00001E34                            ; End of function Pal_FadeIn
00001E34                            
00001E34                            
00001E34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E34                            
00001E34                            
00001E34                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E34 3419                       		move.w	(a1)+,d2
00001E36 3610                       		move.w	(a0),d3
00001E38 B642                       		cmp.w	d2,d3
00001E3A 6700                       		beq.s	loc_1E4E
00001E3C 3203                       		move.w	d3,d1
00001E3E 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E42 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E44 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E46 30C1                       		move.w	d1,(a0)+	; update pallet
00001E48 4E75                       		rts	
00001E4A                            ; ===========================================================================
00001E4A                            
00001E4A                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E4A 3203                       		move.w	d3,d1
00001E4C 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E50 B242                       		cmp.w	d2,d1
00001E52 6200                       		bhi.s	Pal_AddRed
00001E54 30C1                       		move.w	d1,(a0)+	; update pallet
00001E56 4E75                       		rts	
00001E58                            ; ===========================================================================
00001E58                            
00001E58                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E58 5458                       		addq.w	#2,(a0)+	; increase red value
00001E5A 4E75                       		rts	
00001E5C                            ; ===========================================================================
00001E5C                            
00001E5C                            loc_1E4E:				; XREF: Pal_AddColor
00001E5C 5448                       		addq.w	#2,a0
00001E5E 4E75                       		rts	
00001E60                            ; End of function Pal_AddColor
00001E60                            
00001E60                            
00001E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E60                            
00001E60                            
00001E60                            Pal_FadeFrom:
00001E60 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001E66                            
00001E66                            Pal_FadeFrom2:
00001E66 383C 0015                  		move.w	#$15,d4
00001E6A                            
00001E6A                            loc_1E5C:
00001E6A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E70 6100 0000                  		bsr.w	DelayProgram
00001E74 6100                       		bsr.s	Pal_FadeOut
00001E76 6100 F628                  		bsr.w	RunPLC_RAM
00001E7A 51CC FFEE                  		dbf	d4,loc_1E5C
00001E7E 4E75                       		rts	
00001E80                            ; End of function Pal_FadeFrom
00001E80                            
00001E80                            ; ---------------------------------------------------------------------------
00001E80                            ; Pallet fade-out subroutine
00001E80                            ; ---------------------------------------------------------------------------
00001E80                            
00001E80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E80                            
00001E80                            
00001E80                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E80 7000                       		moveq	#0,d0
00001E82 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E86 1038 F626                  		move.b	($FFFFF626).w,d0
00001E8A D0C0                       		adda.w	d0,a0
00001E8C 1038 F627                  		move.b	($FFFFF627).w,d0
00001E90                            
00001E90                            loc_1E82:
00001E90 6100                       		bsr.s	Pal_DecColor
00001E92 51C8 FFFC                  		dbf	d0,loc_1E82
00001E96                            
00001E96 7000                       		moveq	#0,d0
00001E98 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E9C 1038 F626                  		move.b	($FFFFF626).w,d0
00001EA0 D0C0                       		adda.w	d0,a0
00001EA2 1038 F627                  		move.b	($FFFFF627).w,d0
00001EA6                            
00001EA6                            loc_1E98:
00001EA6 6100                       		bsr.s	Pal_DecColor
00001EA8 51C8 FFFC                  		dbf	d0,loc_1E98
00001EAC 4E75                       		rts	
00001EAE                            ; End of function Pal_FadeOut
00001EAE                            
00001EAE                            
00001EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EAE                            
00001EAE                            
00001EAE                            Pal_DecColor:				; XREF: Pal_FadeOut
00001EAE 3410                       		move.w	(a0),d2
00001EB0 6700                       		beq.s	loc_1ECC
00001EB2 3202                       		move.w	d2,d1
00001EB4 0241 000E                  		andi.w	#$E,d1
00001EB8 6700                       		beq.s	Pal_DecGreen
00001EBA 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EBC 4E75                       		rts	
00001EBE                            ; ===========================================================================
00001EBE                            
00001EBE                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EBE 3202                       		move.w	d2,d1
00001EC0 0241 00E0                  		andi.w	#$E0,d1
00001EC4 6700                       		beq.s	Pal_DecBlue
00001EC6 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001ECA 4E75                       		rts	
00001ECC                            ; ===========================================================================
00001ECC                            
00001ECC                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001ECC 3202                       		move.w	d2,d1
00001ECE 0241 0E00                  		andi.w	#$E00,d1
00001ED2 6700                       		beq.s	loc_1ECC
00001ED4 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001ED8 4E75                       		rts	
00001EDA                            ; ===========================================================================
00001EDA                            
00001EDA                            loc_1ECC:				; XREF: Pal_DecColor
00001EDA 5448                       		addq.w	#2,a0
00001EDC 4E75                       		rts	
00001EDE                            ; End of function Pal_DecColor
00001EDE                            
00001EDE                            ; ---------------------------------------------------------------------------
00001EDE                            ; Subroutine to	fill the pallet	with white (special stage)
00001EDE                            ; ---------------------------------------------------------------------------
00001EDE                            
00001EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EDE                            
00001EDE                            
00001EDE                            Pal_MakeWhite:				; XREF: SpecialStage
00001EDE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001EE4 7000                       		moveq	#0,d0
00001EE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EEA 1038 F626                  		move.b	($FFFFF626).w,d0
00001EEE D0C0                       		adda.w	d0,a0
00001EF0 323C 0EEE                  		move.w	#$EEE,d1
00001EF4 1038 F627                  		move.b	($FFFFF627).w,d0
00001EF8                            
00001EF8                            PalWhite_Loop:
00001EF8 30C1                       		move.w	d1,(a0)+
00001EFA 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EFE 383C 0015                  		move.w	#$15,d4
00001F02                            
00001F02                            loc_1EF4:
00001F02 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F08 6100 0000                  		bsr.w	DelayProgram
00001F0C 6100                       		bsr.s	Pal_WhiteToBlack
00001F0E 6100 F590                  		bsr.w	RunPLC_RAM
00001F12 51CC FFEE                  		dbf	d4,loc_1EF4
00001F16 4E75                       		rts	
00001F18                            ; End of function Pal_MakeWhite
00001F18                            
00001F18                            
00001F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F18                            
00001F18                            
00001F18                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F18 7000                       		moveq	#0,d0
00001F1A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F1E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F22 1038 F626                  		move.b	($FFFFF626).w,d0
00001F26 D0C0                       		adda.w	d0,a0
00001F28 D2C0                       		adda.w	d0,a1
00001F2A 1038 F627                  		move.b	($FFFFF627).w,d0
00001F2E                            
00001F2E                            loc_1F20:
00001F2E 6100                       		bsr.s	Pal_DecColor2
00001F30 51C8 FFFC                  		dbf	d0,loc_1F20
00001F34                            
00001F34                            locret_1F4A:
00001F34 4E75                       		rts	
00001F36                            ; End of function Pal_WhiteToBlack
00001F36                            
00001F36                            
00001F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F36                            
00001F36                            
00001F36                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F36 3419                       		move.w	(a1)+,d2
00001F38 3610                       		move.w	(a0),d3
00001F3A B642                       		cmp.w	d2,d3
00001F3C 6700                       		beq.s	loc_1F78
00001F3E 3203                       		move.w	d3,d1
00001F40 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F44 6500                       		bcs.s	loc_1F64
00001F46 B242                       		cmp.w	d2,d1
00001F48 6500                       		bcs.s	loc_1F64
00001F4A 30C1                       		move.w	d1,(a0)+
00001F4C 4E75                       		rts	
00001F4E                            ; ===========================================================================
00001F4E                            
00001F4E                            loc_1F64:				; XREF: Pal_DecColor2
00001F4E 3203                       		move.w	d3,d1
00001F50 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F54 6500                       		bcs.s	loc_1F74
00001F56 B242                       		cmp.w	d2,d1
00001F58 6500                       		bcs.s	loc_1F74
00001F5A 30C1                       		move.w	d1,(a0)+
00001F5C 4E75                       		rts	
00001F5E                            ; ===========================================================================
00001F5E                            
00001F5E                            loc_1F74:				; XREF: loc_1F64
00001F5E 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F60 4E75                       		rts	
00001F62                            ; ===========================================================================
00001F62                            
00001F62                            loc_1F78:				; XREF: Pal_DecColor2
00001F62 5448                       		addq.w	#2,a0
00001F64 4E75                       		rts	
00001F66                            ; End of function Pal_DecColor2
00001F66                            
00001F66                            ; ---------------------------------------------------------------------------
00001F66                            ; Subroutine to	make a white flash when	you enter a special stage
00001F66                            ; ---------------------------------------------------------------------------
00001F66                            
00001F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F66                            
00001F66                            
00001F66                            Pal_MakeFlash:				; XREF: SpecialStage
00001F66 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001F6C 383C 0015                  		move.w	#$15,d4
00001F70                            
00001F70                            loc_1F86:
00001F70 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F76 6100 0000                  		bsr.w	DelayProgram
00001F7A 6100                       		bsr.s	Pal_ToWhite
00001F7C 6100 F522                  		bsr.w	RunPLC_RAM
00001F80 51CC FFEE                  		dbf	d4,loc_1F86
00001F84 4E75                       		rts	
00001F86                            ; End of function Pal_MakeFlash
00001F86                            
00001F86                            
00001F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F86                            
00001F86                            
00001F86                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F86 7000                       		moveq	#0,d0
00001F88 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F8C 1038 F626                  		move.b	($FFFFF626).w,d0
00001F90 D0C0                       		adda.w	d0,a0
00001F92 1038 F627                  		move.b	($FFFFF627).w,d0
00001F96                            
00001F96                            loc_1FAC:
00001F96 6100                       		bsr.s	Pal_AddColor2
00001F98 51C8 FFFC                  		dbf	d0,loc_1FAC
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAC                            
00001FAC                            loc_1FC2:
00001FAC 6100                       		bsr.s	Pal_AddColor2
00001FAE 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FB2 4E75                       		rts	
00001FB4                            ; End of function Pal_ToWhite
00001FB4                            
00001FB4                            
00001FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB4                            
00001FB4                            
00001FB4                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FB4 3410                       		move.w	(a0),d2
00001FB6 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FBA 6700                       		beq.s	loc_2006
00001FBC 3202                       		move.w	d2,d1
00001FBE 0241 000E                  		andi.w	#$E,d1
00001FC2 0C41 000E                  		cmpi.w	#$E,d1
00001FC6 6700                       		beq.s	loc_1FE2
00001FC8 5458                       		addq.w	#2,(a0)+	; increase red value
00001FCA 4E75                       		rts	
00001FCC                            ; ===========================================================================
00001FCC                            
00001FCC                            loc_1FE2:				; XREF: Pal_AddColor2
00001FCC 3202                       		move.w	d2,d1
00001FCE 0241 00E0                  		andi.w	#$E0,d1
00001FD2 0C41 00E0                  		cmpi.w	#$E0,d1
00001FD6 6700                       		beq.s	loc_1FF4
00001FD8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FDC 4E75                       		rts	
00001FDE                            ; ===========================================================================
00001FDE                            
00001FDE                            loc_1FF4:				; XREF: loc_1FE2
00001FDE 3202                       		move.w	d2,d1
00001FE0 0241 0E00                  		andi.w	#$E00,d1
00001FE4 0C41 0E00                  		cmpi.w	#$E00,d1
00001FE8 6700                       		beq.s	loc_2006
00001FEA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001FEE 4E75                       		rts	
00001FF0                            ; ===========================================================================
00001FF0                            
00001FF0                            loc_2006:				; XREF: Pal_AddColor2
00001FF0 5448                       		addq.w	#2,a0
00001FF2 4E75                       		rts	
00001FF4                            ; End of function Pal_AddColor2
00001FF4                            
00001FF4                            ; ---------------------------------------------------------------------------
00001FF4                            ; Pallet cycling routine - Sega	logo
00001FF4                            ; ---------------------------------------------------------------------------
00001FF4                            
00001FF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF4                            
00001FF4                            
00001FF4                            PalCycle_Sega:				; XREF: SegaScreen
00001FF4 4A38 F635                  		tst.b	($FFFFF635).w
00001FF8 6600                       		bne.s	loc_206A
00001FFA 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001FFE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002004 7205                       		moveq	#5,d1
00002006 3038 F632                  		move.w	($FFFFF632).w,d0
0000200A                            
0000200A                            loc_2020:
0000200A 6A00                       		bpl.s	loc_202A
0000200C 5448                       		addq.w	#2,a0
0000200E 5341                       		subq.w	#1,d1
00002010 5440                       		addq.w	#2,d0
00002012 60F6                       		bra.s	loc_2020
00002014                            ; ===========================================================================
00002014                            
00002014                            loc_202A:				; XREF: PalCycle_Sega
00002014 3400                       		move.w	d0,d2
00002016 0242 001E                  		andi.w	#$1E,d2
0000201A 6600                       		bne.s	loc_2034
0000201C 5440                       		addq.w	#2,d0
0000201E                            
0000201E                            loc_2034:
0000201E 0C40 0060                  		cmpi.w	#$60,d0
00002022 6400                       		bcc.s	loc_203E
00002024 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002028                            
00002028                            loc_203E:
00002028 5440                       		addq.w	#2,d0
0000202A 51C9 FFE8                  		dbf	d1,loc_202A
0000202E 3038 F632                  		move.w	($FFFFF632).w,d0
00002032 5440                       		addq.w	#2,d0
00002034 3400                       		move.w	d0,d2
00002036 0242 001E                  		andi.w	#$1E,d2
0000203A 6600                       		bne.s	loc_2054
0000203C 5440                       		addq.w	#2,d0
0000203E                            
0000203E                            loc_2054:
0000203E 0C40 0064                  		cmpi.w	#$64,d0
00002042 6D00                       		blt.s	loc_2062
00002044 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000204A 70F4                       		moveq	#-$C,d0
0000204C                            
0000204C                            loc_2062:
0000204C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002050 7001                       		moveq	#1,d0
00002052 4E75                       		rts	
00002054                            ; ===========================================================================
00002054                            
00002054                            loc_206A:				; XREF: loc_202A
00002054 5338 F634                  		subq.b	#1,($FFFFF634).w
00002058 6A00                       		bpl.s	loc_20BC
0000205A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002060 3038 F632                  		move.w	($FFFFF632).w,d0
00002064 0640 000C                  		addi.w	#$C,d0
00002068 0C40 0030                  		cmpi.w	#$30,d0
0000206C 6500                       		bcs.s	loc_2088
0000206E 7000                       		moveq	#0,d0
00002070 4E75                       		rts	
00002072                            ; ===========================================================================
00002072                            
00002072                            loc_2088:				; XREF: loc_206A
00002072 31C0 F632                  		move.w	d0,($FFFFF632).w
00002076 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000207C 41F0 0000                  		lea	(a0,d0.w),a0
00002080 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002084 22D8                       		move.l	(a0)+,(a1)+
00002086 22D8                       		move.l	(a0)+,(a1)+
00002088 3298                       		move.w	(a0)+,(a1)
0000208A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000208E 7000                       		moveq	#0,d0
00002090 722C                       		moveq	#$2C,d1
00002092                            
00002092                            loc_20A8:
00002092 3400                       		move.w	d0,d2
00002094 0242 001E                  		andi.w	#$1E,d2
00002098 6600                       		bne.s	loc_20B2
0000209A 5440                       		addq.w	#2,d0
0000209C                            
0000209C                            loc_20B2:
0000209C 3390 0000                  		move.w	(a0),(a1,d0.w)
000020A0 5440                       		addq.w	#2,d0
000020A2 51C9 FFEE                  		dbf	d1,loc_20A8
000020A6                            
000020A6                            loc_20BC:
000020A6 7001                       		moveq	#1,d0
000020A8 4E75                       		rts	
000020AA                            ; End of function PalCycle_Sega
000020AA                            
000020AA                            ; ===========================================================================
000020AA                            
000020AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000020B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000020E6                            
000020E6                            ; ---------------------------------------------------------------------------
000020E6                            ; Subroutines to load pallets
000020E6                            ; ---------------------------------------------------------------------------
000020E6                            
000020E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E6                            
000020E6                            
000020E6                            PalLoad1:
000020E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000020EC E748                       		lsl.w	#3,d0
000020EE D2C0                       		adda.w	d0,a1
000020F0 2459                       		movea.l	(a1)+,a2
000020F2 3659                       		movea.w	(a1)+,a3
000020F4 D6FC 0080                  		adda.w	#$80,a3
000020F8 3E19                       		move.w	(a1)+,d7
000020FA                            
000020FA                            loc_2110:
000020FA 26DA                       		move.l	(a2)+,(a3)+
000020FC 51CF FFFC                  		dbf	d7,loc_2110
00002100 4E75                       		rts	
00002102                            ; End of function PalLoad1
00002102                            
00002102                            
00002102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002102                            
00002102                            
00002102                            PalLoad2:
00002102 43F9 0000 0000             		lea	(PalPointers).l,a1
00002108 E748                       		lsl.w	#3,d0
0000210A D2C0                       		adda.w	d0,a1
0000210C 2459                       		movea.l	(a1)+,a2
0000210E 3659                       		movea.w	(a1)+,a3
00002110 3E19                       		move.w	(a1)+,d7
00002112                            
00002112                            loc_2128:
00002112 26DA                       		move.l	(a2)+,(a3)+
00002114 51CF FFFC                  		dbf	d7,loc_2128
00002118 4E75                       		rts	
0000211A                            ; End of function PalLoad2
0000211A                            
0000211A                            ; ---------------------------------------------------------------------------
0000211A                            ; Underwater pallet loading subroutine
0000211A                            ; ---------------------------------------------------------------------------
0000211A                            
0000211A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000211A                            
0000211A                            
0000211A                            PalLoad3_Water:
0000211A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002120 E748                       		lsl.w	#3,d0
00002122 D2C0                       		adda.w	d0,a1
00002124 2459                       		movea.l	(a1)+,a2
00002126 3659                       		movea.w	(a1)+,a3
00002128 96FC 0080                  		suba.w	#$80,a3
0000212C 3E19                       		move.w	(a1)+,d7
0000212E                            
0000212E                            loc_2144:
0000212E 26DA                       		move.l	(a2)+,(a3)+
00002130 51CF FFFC                  		dbf	d7,loc_2144
00002134 4E75                       		rts	
00002136                            ; End of function PalLoad3_Water
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            PalLoad4_Water:
00002136 43F9 0000 0000             		lea	(PalPointers).l,a1
0000213C E748                       		lsl.w	#3,d0
0000213E D2C0                       		adda.w	d0,a1
00002140 2459                       		movea.l	(a1)+,a2
00002142 3659                       		movea.w	(a1)+,a3
00002144 96FC 0100                  		suba.w	#$100,a3
00002148 3E19                       		move.w	(a1)+,d7
0000214A                            
0000214A                            loc_2160:
0000214A 26DA                       		move.l	(a2)+,(a3)+
0000214C 51CF FFFC                  		dbf	d7,loc_2160
00002150 4E75                       		rts	
00002152                            ; End of function PalLoad4_Water
00002152                            
00002152                            ; ===========================================================================
00002152                            ; ---------------------------------------------------------------------------
00002152                            ; Pallet pointers
00002152                            ; ---------------------------------------------------------------------------
00002152                            PalPointers:
00002152                            	include "_inc\Pallet pointers.asm"
00002152                            ; ---------------------------------------------------------------------------
00002152                            ; Pallet pointers
00002152                            ; ---------------------------------------------------------------------------
00002152 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002156 FB00                       	dc.w $FB00		; RAM address
00002158 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000215A 0000 0000                  	dc.l Pal_Title
0000215E FB00                       	dc.w $FB00
00002160 001F                       	dc.w $1F
00002162 0000 0000                  	dc.l Pal_LevelSel
00002166 FB00                       	dc.w $FB00
00002168 001F                       	dc.w $1F
0000216A 0000 0000                  	dc.l Pal_Sonic
0000216E FB00                       	dc.w $FB00
00002170 0007                       	dc.w 7
00002172 0000 0000                  	dc.l Pal_GHZ
00002176 FB20                       	dc.w $FB20
00002178 0017                       	dc.w $17
0000217A 0000 0000                  	dc.l Pal_LZ
0000217E FB20                       	dc.w $FB20
00002180 0017                       	dc.w $17
00002182 0000 0000                  	dc.l Pal_MZ
00002186 FB20                       	dc.w $FB20
00002188 0017                       	dc.w $17
0000218A 0000 0000                  	dc.l Pal_SLZ
0000218E FB20                       	dc.w $FB20
00002190 0017                       	dc.w $17
00002192 0000 0000                  	dc.l Pal_SYZ
00002196 FB20                       	dc.w $FB20
00002198 0017                       	dc.w $17
0000219A 0000 0000                  	dc.l Pal_SBZ1
0000219E FB20                       	dc.w $FB20
000021A0 0017                       	dc.w $17
000021A2 0000 0000                  	dc.l Pal_Special
000021A6 FB00                       	dc.w $FB00
000021A8 001F                       	dc.w $1F
000021AA 0000 0000                  	dc.l Pal_LZWater
000021AE FB00                       	dc.w $FB00
000021B0 001F                       	dc.w $1F
000021B2 0000 0000                  	dc.l Pal_SBZ3
000021B6 FB20                       	dc.w $FB20
000021B8 0017                       	dc.w $17
000021BA 0000 0000                  	dc.l Pal_SBZ3Water
000021BE FB00                       	dc.w $FB00
000021C0 001F                       	dc.w $1F
000021C2 0000 0000                  	dc.l Pal_SBZ2
000021C6 FB20                       	dc.w $FB20
000021C8 0017                       	dc.w $17
000021CA 0000 0000                  	dc.l Pal_LZSonWater
000021CE FB00                       	dc.w $FB00
000021D0 0007                       	dc.w 7
000021D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000021D6 FB00                       	dc.w $FB00
000021D8 0007                       	dc.w 7
000021DA 0000 0000                  	dc.l Pal_SpeResult
000021DE FB00                       	dc.w $FB00
000021E0 001F                       	dc.w $1F
000021E2 0000 0000                  	dc.l Pal_SpeContinue
000021E6 FB00                       	dc.w $FB00
000021E8 000F                       	dc.w $F
000021EA 0000 0000                  	dc.l Pal_Ending
000021EE FB00                       	dc.w $FB00
000021F0 001F                       	dc.w $1F
000021F2 0000 0000                  	dc.l Pal_Sonic
000021F6 FB20                       	dc.w $FB20
000021F8 0007                       	dc.w 7
000021F8 0007                       	dc.w 7
000021FA                            
000021FA                            ; ---------------------------------------------------------------------------
000021FA                            ; Pallet data
000021FA                            ; ---------------------------------------------------------------------------
000021FA                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000227A                            Pal_Title:	incbin	pallet\title.bin
000022FA                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000237A                            Pal_Sonic:	incbin	pallet\sonic.bin
0000239A                            Pal_GHZ:	incbin	pallet\ghz.bin
000023FA                            Pal_LZ:		incbin	pallet\lz.bin
0000245A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024DA                            Pal_MZ:		incbin	pallet\mz.bin
0000253A                            Pal_SLZ:	incbin	pallet\slz.bin
0000259A                            Pal_SYZ:	incbin	pallet\syz.bin
000025FA                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000265A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026BA                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000273A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
0000279A                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
0000281A                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
0000283A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
0000285A                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028DA                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
0000291A                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
0000299A                            
0000299A                            ; ---------------------------------------------------------------------------
0000299A                            ; Subroutine to	delay the program by ($FFFFF62A) frames
0000299A                            ; ---------------------------------------------------------------------------
0000299A                            
0000299A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000299A                            
0000299A                            WaitVBlank:
0000299A                            DelayProgram:				; XREF: PauseGame
0000299A 46FC 2300                  		move	#$2300,sr
0000299E                            
0000299E                            loc_29AC:
0000299E 4A38 F62A                  		tst.b	($FFFFF62A).w
000029A2 66FA                       		bne.s	loc_29AC
000029A4 4E75                       		rts	
000029A6                            ; End of function DelayProgram
000029A6                            
000029A6                            ; ---------------------------------------------------------------------------
000029A6                            ; Subroutine to	generate a pseudo-random number	in d0
000029A6                            ; ---------------------------------------------------------------------------
000029A6                            
000029A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A6                            
000029A6                            
000029A6                            RandomNumber:
000029A6 2238 F636                  		move.l	($FFFFF636).w,d1
000029AA 6600                       		bne.s	loc_29C0
000029AC 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029B2                            
000029B2                            loc_29C0:
000029B2 2001                       		move.l	d1,d0
000029B4 E581                       		asl.l	#2,d1
000029B6 D280                       		add.l	d0,d1
000029B8 E781                       		asl.l	#3,d1
000029BA D280                       		add.l	d0,d1
000029BC 3001                       		move.w	d1,d0
000029BE 4841                       		swap	d1
000029C0 D041                       		add.w	d1,d0
000029C2 3200                       		move.w	d0,d1
000029C4 4841                       		swap	d1
000029C6 21C1 F636                  		move.l	d1,($FFFFF636).w
000029CA 4E75                       		rts	
000029CC                            ; End of function RandomNumber
000029CC                            
000029CC                            
000029CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029CC                            
000029CC                            
000029CC                            CalcSine:
000029CC 0240 00FF                          andi.w  #$FF,d0
000029D0 5040                               addq.w  #8,d0
000029D2 D040                               add.w   d0,d0
000029D4 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
000029D8 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
000029DC 4E75                               rts
000029DE                            ; End of function CalcSine
000029DE                            
000029DE                            ; ===========================================================================
000029DE                            
000029DE                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002C5E                            
00002C5E                            ; ===========================================================================
00002C5E 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C62 3200                       		move.w	d0,d1
00002C64 4841                       		swap	d1
00002C66 7000                       		moveq	#0,d0
00002C68 3200                       		move.w	d0,d1
00002C6A 7407                       		moveq	#7,d2
00002C6C                            
00002C6C                            loc_2C80:
00002C6C E599                       		rol.l	#2,d1
00002C6E D040                       		add.w	d0,d0
00002C70 5240                       		addq.w	#1,d0
00002C72 9240                       		sub.w	d0,d1
00002C74 6400                       		bcc.s	loc_2C9A
00002C76 D240                       		add.w	d0,d1
00002C78 5340                       		subq.w	#1,d0
00002C7A 51CA FFF0                  		dbf	d2,loc_2C80
00002C7E E248                       		lsr.w	#1,d0
00002C80 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C84 4E75                       		rts	
00002C86                            ; ===========================================================================
00002C86                            
00002C86                            loc_2C9A:
00002C86 5240                       		addq.w	#1,d0
00002C88 51CA FFE2                  		dbf	d2,loc_2C80
00002C8C E248                       		lsr.w	#1,d0
00002C8E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C92 4E75                       		rts	
00002C94                            
00002C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C94                            
00002C94                            
00002C94                            CalcAngle:
00002C94 48E7 1800                  		movem.l	d3-d4,-(sp)
00002C98 7600                       		moveq	#0,d3
00002C9A 7800                       		moveq	#0,d4
00002C9C 3601                       		move.w	d1,d3
00002C9E 3802                       		move.w	d2,d4
00002CA0 8843                       		or.w	d3,d4
00002CA2 6700                       		beq.s	loc_2D04
00002CA4 3802                       		move.w	d2,d4
00002CA6 4A43                       		tst.w	d3
00002CA8 6A00 0000                  		bpl.w	loc_2CC2
00002CAC 4443                       		neg.w	d3
00002CAE                            
00002CAE                            loc_2CC2:
00002CAE 4A44                       		tst.w	d4
00002CB0 6A00 0000                  		bpl.w	loc_2CCA
00002CB4 4444                       		neg.w	d4
00002CB6                            
00002CB6                            loc_2CCA:
00002CB6 B843                       		cmp.w	d3,d4
00002CB8 6400 0000                  		bcc.w	loc_2CDC
00002CBC E18C                       		lsl.l	#8,d4
00002CBE 88C3                       		divu.w	d3,d4
00002CC0 7000                       		moveq	#0,d0
00002CC2 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CC6 6000                       		bra.s	loc_2CE6
00002CC8                            ; ===========================================================================
00002CC8                            
00002CC8                            loc_2CDC:				; XREF: CalcAngle
00002CC8 E18B                       		lsl.l	#8,d3
00002CCA 86C4                       		divu.w	d4,d3
00002CCC 7040                       		moveq	#$40,d0
00002CCE 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CD2                            
00002CD2                            loc_2CE6:
00002CD2 4A41                       		tst.w	d1
00002CD4 6A00 0000                  		bpl.w	loc_2CF2
00002CD8 4440                       		neg.w	d0
00002CDA 0640 0080                  		addi.w	#$80,d0
00002CDE                            
00002CDE                            loc_2CF2:
00002CDE 4A42                       		tst.w	d2
00002CE0 6A00 0000                  		bpl.w	loc_2CFE
00002CE4 4440                       		neg.w	d0
00002CE6 0640 0100                  		addi.w	#$100,d0
00002CEA                            
00002CEA                            loc_2CFE:
00002CEA 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CEE 4E75                       		rts	
00002CF0                            ; ===========================================================================
00002CF0                            
00002CF0                            loc_2D04:				; XREF: CalcAngle
00002CF0 303C 0040                  		move.w	#$40,d0
00002CF4 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CF8 4E75                       		rts	
00002CFA                            ; End of function CalcAngle
00002CFA                            
00002CFA                            ; ===========================================================================
00002CFA                            
00002CFA                            Angle_Data:	incbin	misc\angles.bin
00002DFC                            
00002DFC                            ; ===========================================================================
00002DFC                            
00002DFC                            ; ---------------------------------------------------------------------------
00002DFC                            ; Sega screen
00002DFC                            ; ---------------------------------------------------------------------------
00002DFC                            
00002DFC                            SegaScreen:				; XREF: GameModeArray
00002DFC 103C 00E4                  		move.b	#$E4,d0
00002E00 6100 E3F4                  		bsr.w	PlaySound_Special ; stop music
00002E04 6100 E68C                  		bsr.w	ClearPLC
00002E08 6100 F056                  		bsr.w	Pal_FadeFrom
00002E0C 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E12 3CBC 8004                  		move.w	#$8004,(a6)
00002E16 3CBC 8230                  		move.w	#$8230,(a6)
00002E1A 3CBC 8407                  		move.w	#$8407,(a6)
00002E1E 3CBC 8700                  		move.w	#$8700,(a6)
00002E22 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E26 4238 F64E                  		clr.b	($FFFFF64E).w
00002E2A 46FC 2700                  		move	#$2700,sr
00002E2E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E32 0200 00BF                  		andi.b	#$BF,d0
00002E36 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E3C 6100 E292                  		bsr.w	ClearScreen
00002E40 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E4A 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E50 6100 E496                  		bsr.w	NemDec
00002E54 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E5A 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E60 303C 0000                  		move.w	#0,d0
00002E64 6100 E76C                  		bsr.w	EniDec
00002E68 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E6E 203C 6510 0003             		move.l	#$65100003,d0
00002E74 7217                       		moveq	#$17,d1
00002E76 7407                       		moveq	#7,d2
00002E78 6100 E444                  		bsr.w	ShowVDPGraphics
00002E7C 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E82 203C 4000 0003             		move.l	#$40000003,d0
00002E88 7227                       		moveq	#$27,d1
00002E8A 741B                       		moveq	#$1B,d2
00002E8C 6100 E430                  		bsr.w	ShowVDPGraphics
00002E90 7000                       		moveq	#0,d0
00002E92 6100 F26E                  		bsr.w	PalLoad2	; load Sega logo pallet
00002E96 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002E9C 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002EA2 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002EA8 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002EAE 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00002EB4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EB8 0000 0040                  		ori.b	#$40,d0
00002EBC 33C0 00C0 0004             		move.w	d0,($C00004).l
00002EC2                            
00002EC2                            Sega_WaitPallet:
00002EC2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EC8 6100 FAD0                  		bsr.w	DelayProgram
00002ECC 6100 F126                  		bsr.w	PalCycle_Sega
00002ED0 66F0                       		bne.s	Sega_WaitPallet
00002ED2                            
00002ED2 103C 00E1                  		move.b	#$E1,d0
00002ED6 6100 E31E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EDA 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002EE0 6100 FAB8                  		bsr.w	DelayProgram
00002EE4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002EEA                            
00002EEA                            Sega_WaitEnd:
00002EEA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EF0 6100 FAA8                  		bsr.w	DelayProgram
00002EF4 4A78 F614                  		tst.w	($FFFFF614).w
00002EF8 6700                       		beq.s	Sega_GotoTitle
00002EFA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F00 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F02                            
00002F02                            Sega_GotoTitle:
00002F02 11FC 0001 F601             		move.b	#1,(FromSEGA).w
00002F08 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F0E 103C 00E4                  		move.b	#$E4,d0
00002F12 6100 E2E2                  		bsr.w	PlaySound_Special ; stop music
00002F16 6100 E57A                  		bsr.w	ClearPLC
00002F1A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002F20 6100 EF44                  		bsr.w	Pal_FadeFrom2
00002F24 46FC 2700                  		move	#$2700,sr
00002F28 6100 E234                  		bsr.w	SoundDriverLoad
00002F2C 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F32 3CBC 8004                  		move.w	#$8004,(a6)
00002F36 3CBC 8230                  		move.w	#$8230,(a6)
00002F3A 3CBC 8407                  		move.w	#$8407,(a6)
00002F3E 3CBC 9001                  		move.w	#$9001,(a6)
00002F42 3CBC 9200                  		move.w	#$9200,(a6)
00002F46 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F4A 3CBC 8720                  		move.w	#$8720,(a6)
00002F4E 4238 F64E                  		clr.b	($FFFFF64E).w
00002F52 6100 E17C                  		bsr.w	ClearScreen
00002F56 4EB9 0000 0000             		jsr SHC2021
00002F5C 6000                       		bra.s	TitleSkip
00002F5E                            ; ===========================================================================
00002F5E                            
00002F5E                            ; ---------------------------------------------------------------------------
00002F5E                            ; Title	screen
00002F5E                            ; ---------------------------------------------------------------------------
00002F5E                            
00002F5E                            TitleScreen:				; XREF: GameModeArray
00002F5E 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00002F64 103C 00E4                  		move.b	#$E4,d0
00002F68 6100 E28C                  		bsr.w	PlaySound_Special ; stop music
00002F6C 6100 E524                  		bsr.w	ClearPLC
00002F70 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002F76 6100 EEEE                  		bsr.w	Pal_FadeFrom2
00002F7A 46FC 2700                  		move	#$2700,sr
00002F7E 6100 E1DE                  		bsr.w	SoundDriverLoad
00002F82 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F88 3CBC 8004                  		move.w	#$8004,(a6)
00002F8C 3CBC 8230                  		move.w	#$8230,(a6)
00002F90 3CBC 8407                  		move.w	#$8407,(a6)
00002F94 3CBC 9001                  		move.w	#$9001,(a6)
00002F98 3CBC 9200                  		move.w	#$9200,(a6)
00002F9C 3CBC 8B03                  		move.w	#$8B03,(a6)
00002FA0 3CBC 8720                  		move.w	#$8720,(a6)
00002FA4 4238 F64E                  		clr.b	($FFFFF64E).w
00002FA8 6100 E126                  		bsr.w	ClearScreen
00002FAC                            
00002FAC                            TitleSkip:
00002FAC 43F8 D000                  		lea	($FFFFD000).w,a1
00002FB0 7000                       		moveq	#0,d0
00002FB2 323C 07FF                  		move.w	#$7FF,d1
00002FB6                            
00002FB6                            Title_ClrObjRam:
00002FB6 22C0                       		move.l	d0,(a1)+
00002FB8 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002FBC                            
00002FBC 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002FC6 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002FCC 6100 E31A                  		bsr.w	NemDec
00002FD0 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002FDA 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002FE0 6100 E306                  		bsr.w	NemDec
00002FE4 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FEA 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002FF0 303C 0000                  		move.w	#0,d0
00002FF4 6100 E5DC                  		bsr.w	EniDec
00002FF8 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FFE 203C 4000 0003             		move.l	#$40000003,d0
00003004 7227                       		moveq	#$27,d1
00003006 741B                       		moveq	#$1B,d2
00003008 6100 E2B4                  		bsr.w	ShowVDPGraphics
0000300C                            
0000300C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003010 7000                       		moveq	#0,d0
00003012 323C 001F                  		move.w	#$1F,d1
00003016                            
00003016                            Title_ClrPallet:
00003016 22C0                       		move.l	d0,(a1)+
00003018 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
0000301C                            
0000301C 7014                       		moveq	#$14,d0		; load Sonic's pallet
0000301E 6100 F0C6                  		bsr.w	PalLoad1
00003022 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003028 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
0000302E 4EB9 0000 0000             		jsr	ObjectsLoad
00003034 4EB9 0000 0000             		jsr	BuildSprites
0000303A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003040 4A38 F601                  		tst.b	(FromSEGA).w
00003044 6700 0000                  		beq.w	@skip
00003048 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000304E                            
0000304E                            	@skip:
0000304E 6100 ED94                  		bsr.w	Pal_FadeTo2
00003052 46FC 2700                  		move	#$2700,sr
00003056 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003060 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003066 6100 E280                  		bsr.w	NemDec
0000306A 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003074 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000307A 6100 E26C                  		bsr.w	NemDec
0000307E 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003088 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000308E 6100 E258                  		bsr.w	NemDec
00003092 4DF9 00C0 0000             		lea	($C00000).l,a6
00003098 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000030A0 4BF9 0000 0550             		lea	(Art_Text).l,a5
000030A6 323C 028F                  		move.w	#$28F,d1
000030AA                            
000030AA                            Title_LoadText:
000030AA 3C9D                       		move.w	(a5)+,(a6)
000030AC 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000030B0                            
000030B0 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000030B6 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000030BC 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000030C2 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000030C8 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000030CE 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000030D4 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
000030DA 6100 0000                  		bsr.w	LevelSizeLoad
000030DE 6100 0000                  		bsr.w	DeformBgLayer
000030E2 43F8 B000                  		lea	($FFFFB000).w,a1
000030E6 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000030EC 303C 0000                  		move.w	#0,d0
000030F0 6100 E4E0                  		bsr.w	EniDec
000030F4 6100 0000                  		bsr.w	LevelLayoutLoad
000030F8 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000030FE 4A38 F601                  		tst.b	(FromSEGA).w
00003102 6700                       		beq.s	@notSEGA
00003104 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000310A                            
0000310A                            	@notSEGA:
0000310A 6100 ED5A                  		bsr.w	Pal_FadeFrom2
0000310E 46FC 2700                  		move	#$2700,sr
00003112 6100 DFBC                  		bsr.w	ClearScreen
00003116 4BF9 00C0 0004             		lea	($C00004).l,a5
0000311C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003122 47F8 F708                  		lea	($FFFFF708).w,a3
00003126 49F8 A440                  		lea	($FFFFA440).w,a4
0000312A 343C 6000                  		move.w	#$6000,d2
0000312E 6100 0000                  		bsr.w	LoadTilesFromStart2
00003132 43F9 00FF 0000             		lea	($FF0000).l,a1
00003138 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000313E 303C 0000                  		move.w	#0,d0
00003142 6100 E48E                  		bsr.w	EniDec
00003146 43F9 00FF 0000             		lea	($FF0000).l,a1
0000314C 203C 4206 0003             		move.l	#$42060003,d0
00003152 7221                       		moveq	#$21,d1
00003154 7415                       		moveq	#$15,d2
00003156 6100 E166                  		bsr.w	ShowVDPGraphics
0000315A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003164 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000316A 6100 E17C                  		bsr.w	NemDec
0000316E 7001                       		moveq	#1,d0		; load title screen pallet
00003170 6100 EF74                  		bsr.w	PalLoad1
00003174 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003178 6100 E07C                  		bsr.w	PlaySound_Special
0000317C 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003182                            		;move.b	#1,($FFFFFFE1).w ; enable slow-mo mode
00003182 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003188 43F8 D080                  		lea	($FFFFD080).w,a1
0000318C 7000                       		moveq	#0,d0
0000318E 323C 0007                  		move.w	#7,d1
00003192                            
00003192                            Title_ClrObjRam2:
00003192 22C0                       		move.l	d0,(a1)+
00003194 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003198                            
00003198 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000319E 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000031A4 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000031AA 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000031B0 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000031B6 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000031BC 4EB9 0000 0000             		jsr	ObjectsLoad
000031C2 6100 0000                  		bsr.w	DeformBgLayer
000031C6 4EB9 0000 0000             		jsr	BuildSprites
000031CC 7000                       		moveq	#0,d0
000031CE 6100 E296                  		bsr.w	LoadPLC2
000031D2 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000031D8 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000031DE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031E2 0000 0040                  		ori.b	#$40,d0
000031E6 33C0 00C0 0004             		move.w	d0,($C00004).l
000031EC 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000031F2 4A38 F601                  		tst.b	(FromSEGA).w
000031F6 6700                       		beq.s	@notSEGA
000031F8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000031FE 11FC 0000 F5C4             		move.b	#0,(SonimeSST+sonime_routine).w
00003204 11FC 0000 F601             		move.b	#0,(FromSEGA).w
0000320A                            
0000320A                            	@notSEGA:
0000320A 6100 EBD8                  		bsr.w	Pal_FadeTo2
0000320E                            
0000320E                            loc_317C:
0000320E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003214 6100 F784                  		bsr.w	DelayProgram
00003218 4EB9 0000 0000             		jsr	ObjectsLoad
0000321E 6100 0000                  		bsr.w	DeformBgLayer
00003222 4EB9 0000 0000             		jsr	BuildSprites
00003228 6100 E764                  		bsr.w	PalCycle_Title
0000322C 6100 E272                  		bsr.w	RunPLC_RAM
00003230 3038 D008                  		move.w	($FFFFD008).w,d0
00003234 5440                       		addq.w	#2,d0
00003236 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
0000323A 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000323E 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003240 6000 FD1C                  		bra.w	TitleScreen
00003244                            ; ===========================================================================
00003244                            
00003244                            Title_ChkRegion:
00003244 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003248 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000324A 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003250 6000                       		bra.s	Title_EnterCheat
00003252                            ; ===========================================================================
00003252                            
00003252                            Title_RegionJ:				; XREF: Title_ChkRegion
00003252 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003258                            
00003258                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003258 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
0000325C D0C0                       		adda.w	d0,a0
0000325E 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003262 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003266 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003268 6600                       		bne.s	loc_3210	; if not, branch
0000326A 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
0000326E 4A00                       		tst.b	d0
00003270 6600                       		bne.s	Title_CountC
00003272 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003276 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
0000327A E249                       		lsr.w	#1,d1
0000327C 0241 0003                  		andi.w	#3,d1
00003280 6700                       		beq.s	Title_PlayRing
00003282 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003286 6A00                       		bpl.s	Title_PlayRing
00003288 7201                       		moveq	#1,d1
0000328A 1181 1001                  		move.b	d1,1(a0,d1.w)
0000328E                            
0000328E                            Title_PlayRing:
0000328E 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003294 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003298 6100 DF5C                  		bsr.w	PlaySound_Special
0000329C 6000                       		bra.s	Title_CountC
0000329E                            ; ===========================================================================
0000329E                            
0000329E                            loc_3210:				; XREF: Title_EnterCheat
0000329E 4A00                       		tst.b	d0
000032A0 6700                       		beq.s	Title_CountC
000032A2 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000032A8 6700                       		beq.s	Title_CountC
000032AA 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000032B0                            
000032B0                            Title_CountC:
000032B0 1038 F605                  		move.b	($FFFFF605).w,d0
000032B4 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000032B8 6700                       		beq.s	loc_3230	; if not, branch
000032BA 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000032BE                            
000032BE                            loc_3230:
000032BE 4A78 F614                  		tst.w	($FFFFF614).w
000032C2 6700 0000                  		beq.w	Demo
000032C6 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000032CC 6700 FF40                  		beq.w	loc_317C	; if not, branch
000032D0                            
000032D0                            Title_ChkLevSel:
000032D0 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000032D4 6700 0000                  		beq.w	PlayLevel	; if not, play level
000032D8 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000032DE 6700 0000                  		beq.w	PlayLevel	; if not, play level
000032E2 7002                       		moveq	#2,d0
000032E4 6100 EE1C                  		bsr.w	PalLoad2	; load level select pallet
000032E8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000032EC 7000                       		moveq	#0,d0
000032EE 323C 00DF                  		move.w	#$DF,d1
000032F2                            
000032F2                            Title_ClrScroll:
000032F2 22C0                       		move.l	d0,(a1)+
000032F4 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000032F8                            
000032F8 21C0 F616                  		move.l	d0,($FFFFF616).w
000032FC 46FC 2700                  		move	#$2700,sr
00003300 4DF9 00C0 0000             		lea	($C00000).l,a6
00003306 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003310 323C 03FF                  		move.w	#$3FF,d1
00003314                            
00003314                            Title_ClrVram:
00003314 2C80                       		move.l	d0,(a6)
00003316 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000331A                            
0000331A 6100 0000                  		bsr.w	LevSelTextLoad
0000331E                            
0000331E                            ; ---------------------------------------------------------------------------
0000331E                            ; Level	Select
0000331E                            ; ---------------------------------------------------------------------------
0000331E                            
0000331E                            LevelSelect:
0000331E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003324 6100 F674                  		bsr.w	DelayProgram
00003328 4EB9 0000 0000             		jsr		BuildSprites
0000332E 6100 0000                  		bsr.w	LevSelControls
00003332 6100 E16C                  		bsr.w	RunPLC_RAM
00003336 4AB8 F680                  		tst.l	($FFFFF680).w
0000333A 66E2                       		bne.s	LevelSelect
0000333C 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003342 67DA                       		beq.s	LevelSelect	; if not, branch
00003344 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003348 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
0000334C 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000334E 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003352 0640 0080                  		addi.w	#$80,d0
00003356 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
0000335A 6700                       		beq.s	LevSel_NoCheat	; if not, branch
0000335C 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00003360 6700                       		beq.s	LevSel_Ending	; if yes, branch
00003362 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00003366 6700                       		beq.s	LevSel_Credits	; if yes, branch
00003368                            
00003368                            LevSel_NoCheat:
00003368 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
0000336C 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
0000336E 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00003372 65AA                       		bcs.s	LevelSelect	; if yes, branch
00003374                            
00003374                            LevSel_PlaySnd:
00003374 6100 DE80                  		bsr.w	PlaySound_Special
00003378 60A4                       		bra.s	LevelSelect
0000337A                            ; ===========================================================================
0000337A                            
0000337A                            LevSel_Ending:				; XREF: LevelSelect
0000337A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003380 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003386                            	;	move.b	#0,($FFFFFE57).w ; clear emeralds
00003386 4E75                       		rts	
00003388                            ; ===========================================================================
00003388                            
00003388                            LevSel_Credits:				; XREF: LevelSelect
00003388 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
0000338E 103C 0091                  		move.b	#$91,d0
00003392 6100 DE62                  		bsr.w	PlaySound_Special ; play credits music
00003396 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000339C 4E75                       		rts	
0000339E                            ; ===========================================================================
0000339E                            
0000339E                            LevSel_Level_SS:			; XREF: LevelSelect
0000339E D040                       		add.w	d0,d0
000033A0 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000033A4 6B00 FF78                  		bmi.w	LevelSelect
000033A8 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000033AC 6600                       		bne.s	LevSel_Level	; if not, branch
000033AE 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000033B4 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000033B8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000033BE 7000                       		moveq	#0,d0
000033C0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000033C4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000033C8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000033CC 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000033D0                            	;	move.l	#$00010203,($FFFFFE58).w ; clear emeralds
000033D0                            	;	move.l	#$04050000,($FFFFFE5C).w ; clear emeralds
000033D0 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)	
000033D8 4E75                       		rts	
000033DA                            ; ===========================================================================
000033DA                            ; ---------------------------------------------------------------------------
000033DA                            ; Level	select - level pointers
000033DA                            ; ---------------------------------------------------------------------------
000033DA                            LSelectPointers:
000033DA                            		incbin	misc\ls_point.bin
00003404                            		even
00003404                            
00003404                            LevSel_Level:				; XREF: LevSel_Level_SS
00003404 0240 3FFF                  		andi.w	#$3FFF,d0
00003408 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000340C                            
0000340C                            PlayLevel:				; XREF: ROM:00003246j ...
0000340C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003412 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003418 7000                       		moveq	#0,d0
0000341A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000341E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003422 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003426 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000342A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000342E                            	;	move.l	#$01020304,($FFFFFE58).w ; clear emeralds
0000342E                            	;	move.l	#$05000000,($FFFFFE5C).w ; clear emeralds
0000342E 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003432 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
0000343A 103C 00E0                  		move.b	#$E0,d0
0000343E 6100 DDB6                  		bsr.w	PlaySound_Special ; fade out music
00003442 4E75                       		rts	
00003444                            ; ===========================================================================
00003444                            ; ---------------------------------------------------------------------------
00003444                            ; Level	select codes
00003444                            ; ---------------------------------------------------------------------------
00003444                            LevelSelectCode_J:
00003444                            		incbin	misc\ls_jcode.bin
0000344A                            		even
0000344A                            
0000344A                            LevelSelectCode_US:
0000344A                            		incbin	misc\ls_ucode.bin
00003450                            		even
00003450                            ; ===========================================================================
00003450                            
00003450                            ; ---------------------------------------------------------------------------
00003450                            ; Demo mode
00003450                            ; ---------------------------------------------------------------------------
00003450                            
00003450                            Demo:					; XREF: TitleScreen
00003450 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003456                            
00003456                            loc_33B6:				; XREF: loc_33E4
00003456 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000345C 6100 F53C                  		bsr.w	DelayProgram
00003460 6100 0000                  		bsr.w	DeformBgLayer
00003464 6100 E508                  		bsr.w	PalCycle_Load
00003468 6100 E036                  		bsr.w	RunPLC_RAM
0000346C 3038 D008                  		move.w	($FFFFD008).w,d0
00003470 5440                       		addq.w	#2,d0
00003472 31C0 D008                  		move.w	d0,($FFFFD008).w
00003476 0C40 1C00                  		cmpi.w	#$1C00,d0
0000347A 6500                       		bcs.s	loc_33E4
0000347C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 0
00003482 4E75                       		rts	
00003484                            ; ===========================================================================
00003484                            
00003484                            loc_33E4:				; XREF: Demo
00003484 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000348A 6600 FE44                  		bne.w	Title_ChkLevSel	; if yes, branch
0000348E 4A78 F614                  		tst.w	($FFFFF614).w
00003492 6600 FFC2                  		bne.w	loc_33B6
00003496 103C 00E0                  		move.b	#$E0,d0
0000349A 6100 DD5A                  		bsr.w	PlaySound_Special ; fade out music
0000349E 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000034A2 0240 0007                  		andi.w	#7,d0
000034A6 D040                       		add.w	d0,d0
000034A8 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000034AC 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000034B0 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000034B4 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000034BA 6500                       		bcs.s	loc_3422	; if yes, branch
000034BC 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000034C2                            
000034C2                            loc_3422:
000034C2 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000034C8 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000034CE 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000034D2 6600                       		bne.s	Demo_Level	; if not, branch
000034D4 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000034DA 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000034DE 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000034E2                            
000034E2                            Demo_Level:
000034E2 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000034E8 7000                       		moveq	#0,d0
000034EA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000034EE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000034F2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000034F6 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)		
000034FE 4E75                       		rts	
00003500                            ; ===========================================================================
00003500                            ; ---------------------------------------------------------------------------
00003500                            ; Levels used in demos
00003500                            ; ---------------------------------------------------------------------------
00003500                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003508                            		even
00003508                            
00003508                            ; ---------------------------------------------------------------------------
00003508                            ; Subroutine to	change what you're selecting in the level select
00003508                            ; ---------------------------------------------------------------------------
00003508                            
00003508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003508                            
00003508                            
00003508                            LevSelControls:				; XREF: LevelSelect
00003508 1238 F605                  		move.b	($FFFFF605).w,d1
0000350C 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003510 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003512 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003516 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003518                            
00003518                            LevSel_UpDown:
00003518 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000351E 1238 F604                  		move.b	($FFFFF604).w,d1
00003522 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003526 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003528 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000352C 0801 0000                  		btst	#0,d1		; is up	pressed?
00003530 6700                       		beq.s	LevSel_Down	; if not, branch
00003532 5340                       		subq.w	#1,d0		; move up 1 selection
00003534 6400                       		bcc.s	LevSel_Down
00003536 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003538                            
00003538                            LevSel_Down:
00003538 0801 0001                  		btst	#1,d1		; is down pressed?
0000353C 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000353E 5240                       		addq.w	#1,d0		; move down 1 selection
00003540 0C40 0015                  		cmpi.w	#$15,d0
00003544 6500                       		bcs.s	LevSel_Refresh
00003546 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003548                            
00003548                            LevSel_Refresh:
00003548 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
0000354C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003550 4E75                       		rts	
00003552                            ; ===========================================================================
00003552                            
00003552                            LevSel_SndTest:				; XREF: LevSelControls
00003552 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003558 6600                       		bne.s	LevSel_NoMove	; if not, branch
0000355A 1238 F605                  		move.b	($FFFFF605).w,d1
0000355E 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003562 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003564 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003568 0801 0002                  		btst	#2,d1		; is left pressed?
0000356C 6700                       		beq.s	LevSel_Right	; if not, branch
0000356E 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003570 6400                       		bcc.s	LevSel_Right
00003572 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003574                            
00003574                            LevSel_Right:
00003574 0801 0003                  		btst	#3,d1		; is right pressed?
00003578 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000357A 5240                       		addq.w	#1,d0		; add 1	to sound test
0000357C 0C40 0050                  		cmpi.w	#$50,d0
00003580 6500                       		bcs.s	LevSel_Refresh2
00003582 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003584                            
00003584                            LevSel_Refresh2:
00003584 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003588 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000358C                            
0000358C                            LevSel_NoMove:
0000358C 4E75                       		rts	
0000358E                            ; End of function LevSelControls
0000358E                            
0000358E                            ; ---------------------------------------------------------------------------
0000358E                            ; Subroutine to load level select text
0000358E                            ; ---------------------------------------------------------------------------
0000358E                            
0000358E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000358E                            
0000358E                            
0000358E                            LevSelTextLoad:				; XREF: TitleScreen
0000358E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003594 4DF9 00C0 0000             		lea	($C00000).l,a6
0000359A 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000035A0 363C E680                  		move.w	#$E680,d3	; VRAM setting
000035A4 7214                       		moveq	#$14,d1		; number of lines of text
000035A6                            
000035A6                            loc_34FE:				; XREF: LevSelTextLoad+26j
000035A6 2D44 0004                  		move.l	d4,4(a6)
000035AA 6100 0000                  		bsr.w	LevSel_ChgLine
000035AE 0684 0080 0000             		addi.l	#$800000,d4
000035B4 51C9 FFF0                  		dbf	d1,loc_34FE
000035B8 7000                       		moveq	#0,d0
000035BA 3038 FF82                  		move.w	($FFFFFF82).w,d0
000035BE 3200                       		move.w	d0,d1
000035C0 283C 6210 0003             		move.l	#$62100003,d4
000035C6 EF48                       		lsl.w	#7,d0
000035C8 4840                       		swap	d0
000035CA D880                       		add.l	d0,d4
000035CC 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000035D2 E749                       		lsl.w	#3,d1
000035D4 3001                       		move.w	d1,d0
000035D6 D241                       		add.w	d1,d1
000035D8 D240                       		add.w	d0,d1
000035DA D2C1                       		adda.w	d1,a1
000035DC 363C C680                  		move.w	#$C680,d3
000035E0 2D44 0004                  		move.l	d4,4(a6)
000035E4 6100 0000                  		bsr.w	LevSel_ChgLine
000035E8 363C E680                  		move.w	#$E680,d3
000035EC 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000035F2 6600                       		bne.s	loc_3550
000035F4 363C C680                  		move.w	#$C680,d3
000035F8                            
000035F8                            loc_3550:
000035F8 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003602 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003606 0640 0080                  		addi.w	#$80,d0
0000360A                            
0000360A                            DRAWNUMBER:
0000360A 1400                       		move.b	d0,d2
0000360C E808                       		lsr.b	#4,d0
0000360E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003612 1002                       		move.b	d2,d0
00003614 6100 0000                  		bsr.w	LevSel_ChgSnd
00003618 4E75                       		rts	
0000361A                            ; End of function LevSelTextLoad
0000361A                            
0000361A                            
0000361A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000361A                            
0000361A                            
0000361A                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000361A 0240 000F                  		andi.w	#$F,d0
0000361E 0C00 000A                  		cmpi.b	#$A,d0
00003622 6500                       		bcs.s	loc_3580
00003624 5E00                       		addi.b	#7,d0
00003626                            
00003626                            loc_3580:
00003626 D043                       		add.w	d3,d0
00003628 3C80                       		move.w	d0,(a6)
0000362A 4E75                       		rts	
0000362C                            ; End of function LevSel_ChgSnd
0000362C                            
0000362C                            
0000362C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000362C                            
0000362C                            
0000362C                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000362C 7417                       		moveq	#$17,d2		; number of characters per line
0000362E                            
0000362E                            loc_3588:
0000362E 7000                       		moveq	#0,d0
00003630 1019                       		move.b	(a1)+,d0
00003632 6A00                       		bpl.s	loc_3598
00003634 3CBC 0000                  		move.w	#0,(a6)
00003638 51CA FFF4                  		dbf	d2,loc_3588
0000363C 4E75                       		rts	
0000363E                            ; ===========================================================================
0000363E                            
0000363E                            loc_3598:				; XREF: LevSel_ChgLine
0000363E D043                       		add.w	d3,d0
00003640 3C80                       		move.w	d0,(a6)
00003642 51CA FFEA                  		dbf	d2,loc_3588
00003646 4E75                       		rts	
00003648                            ; End of function LevSel_ChgLine
00003648                            
00003648                            ; ===========================================================================
00003648                            ; ---------------------------------------------------------------------------
00003648                            ; Level	select menu text
00003648                            ; ---------------------------------------------------------------------------
00003648                            LevelMenuText:	incbin	misc\menutext.bin
00003840                            		even
00003840                            ; ---------------------------------------------------------------------------
00003840                            ; Music	playlist
00003840                            ; ---------------------------------------------------------------------------
00003840                            MusicList:	incbin	misc\muslist1.bin
00003848                            		even
00003848                            ; ===========================================================================
00003848                            
00003848                            ; ---------------------------------------------------------------------------
00003848                            ; Level
00003848                            ; ---------------------------------------------------------------------------
00003848                            
00003848                            Level:					; XREF: GameModeArray
00003848 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
0000384E 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00003854 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003858 6B00                       		bmi.s	loc_37B6
0000385A 103C 00E0                  		move.b	#$E0,d0
0000385E 6100 D996                  		bsr.w	PlaySound_Special ; fade out music
00003862                            
00003862                            loc_37B6:
00003862 6100 DC2E                  		bsr.w	ClearPLC
00003866 6100 E5F8                  		bsr.w	Pal_FadeFrom
0000386A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000386E 6B00                       		bmi.s	Level_ClrRam
00003870 46FC 2700                  		move	#$2700,sr
00003874 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
0000387E 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00003884 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
0000388A 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
0000388E 46FC 2300                  		move	#$2300,sr
00003892 7000                       		moveq	#0,d0
00003894 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003898 E948                       		lsl.w	#4,d0
0000389A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000038A0 45F2 0000                  		lea	(a2,d0.w),a2
000038A4 7000                       		moveq	#0,d0
000038A6 1012                       		move.b	(a2),d0
000038A8 6700                       		beq.s	loc_37FC
000038AA 6100 DB88                  		bsr.w	LoadPLC		; load level patterns
000038AE                            
000038AE                            loc_37FC:
000038AE 7001                       		moveq	#1,d0
000038B0 6100 DB82                  		bsr.w	LoadPLC		; load standard	patterns
000038B4                            
000038B4                            Level_ClrRam:
000038B4 43F8 D000                  		lea	($FFFFD000).w,a1
000038B8 7000                       		moveq	#0,d0
000038BA 323C 07FF                  		move.w	#$7FF,d1
000038BE                            
000038BE                            Level_ClrObjRam:
000038BE 22C0                       		move.l	d0,(a1)+
000038C0 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000038C4                            
000038C4 43F8 F628                  		lea	($FFFFF628).w,a1
000038C8 7000                       		moveq	#0,d0
000038CA 323C 0015                  		move.w	#$15,d1
000038CE                            
000038CE                            Level_ClrVars:
000038CE 22C0                       		move.l	d0,(a1)+
000038D0 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
000038D4                            
000038D4 43F8 F700                  		lea	($FFFFF700).w,a1
000038D8 7000                       		moveq	#0,d0
000038DA 323C 003F                  		move.w	#$3F,d1
000038DE                            
000038DE                            Level_ClrVars2:
000038DE 22C0                       		move.l	d0,(a1)+
000038E0 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000038E4                            
000038E4 43F8 FE60                  		lea	($FFFFFE60).w,a1
000038E8 7000                       		moveq	#0,d0
000038EA 323C 0047                  		move.w	#$47,d1
000038EE                            
000038EE                            Level_ClrVars3:
000038EE 22C0                       		move.l	d0,(a1)+
000038F0 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000038F4 46FC 2700                  		move	#$2700,sr
000038F8 6100 D7D6                  		bsr.w	ClearScreen
000038FC 4DF9 00C0 0004             		lea	($C00004).l,a6
00003902 3CBC 8B03                  		move.w	#$8B03,(a6)
00003906 3CBC 8230                  		move.w	#$8230,(a6)
0000390A 3CBC 8407                  		move.w	#$8407,(a6)
0000390E 3CBC 857C                  		move.w	#$857C,(a6)
00003912 3CBC 9001                  		move.w	#$9001,(a6)
00003916 3CBC 8004                  		move.w	#$8004,(a6)
0000391A 3CBC 8720                  		move.w	#$8720,(a6)
0000391E 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003924 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003928 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000392E 6600                       		bne.s	Level_LoadPal	; if not, branch
00003930 3CBC 8014                  		move.w	#$8014,(a6)
00003934 7000                       		moveq	#0,d0
00003936 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000393A D040                       		add.w	d0,d0
0000393C 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003942 3031 0000                  		move.w	(a1,d0.w),d0
00003946 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000394A 31C0 F648                  		move.w	d0,($FFFFF648).w
0000394E 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003952 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003956 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000395A 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003960                            
00003960                            Level_LoadPal:
00003960 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003966 46FC 2300                  		move	#$2300,sr
0000396A 7003                       		moveq	#3,d0
0000396C 6100 E794                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003970 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003976 6600                       		bne.s	Level_GetBgm	; if not, branch
00003978 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
0000397A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003980 6600                       		bne.s	Level_WaterPal	; if not, branch
00003982 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003984                            
00003984                            Level_WaterPal:
00003984 6100 E794                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003988 4A38 FE30                  		tst.b	($FFFFFE30).w
0000398C 6700                       		beq.s	Level_GetBgm
0000398E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003994                            
00003994                            Level_GetBgm:
00003994 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003998 6B00                       		bmi.s	loc_3946
0000399A 7000                       		moveq	#0,d0
0000399C 1038 FE10                  		move.b	($FFFFFE10).w,d0
000039A0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000039A6 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000039A8 7005                       		moveq	#5,d0		; move 5 to d0
000039AA                            
000039AA                            Level_BgmNotLZ4:
000039AA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000039B0 6600                       		bne.s	Level_PlayBgm	; if not, branch
000039B2 7006                       		moveq	#6,d0		; move 6 to d0
000039B4                            
000039B4                            Level_PlayBgm:
000039B4 43F9 0000 3840             		lea	(MusicList).l,a1 ; load	music playlist
000039BA 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
000039BE 6100 D830                  		bsr.w	PlaySound	; play music
000039C2 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
000039C8                            
000039C8                            Level_TtlCard:
000039C8 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000039CE 6100 EFCA                  		bsr.w	DelayProgram
000039D2 4EB9 0000 0000             		jsr	ObjectsLoad
000039D8 4EB9 0000 0000             		jsr	BuildSprites
000039DE 6100 DAC0                  		bsr.w	RunPLC_RAM
000039E2 3038 D108                  		move.w	($FFFFD108).w,d0
000039E6 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000039EA 66DC                       		bne.s	Level_TtlCard	; if not, branch
000039EC 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000039F0 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000039F2 4EB9 0000 0000             		jsr	Hud_Base
000039F8                            
000039F8                            loc_3946:
000039F8 7003                       		moveq	#3,d0
000039FA 6100 E6EA                  		bsr.w	PalLoad1	; load Sonic's pallet line
000039FE 6100 0000                  		bsr.w	LevelSizeLoad
00003A02 6100 0000                  		bsr.w	DeformBgLayer
00003A06 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003A0C 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
00003A10 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003A14 6100 0000                  		bsr.w	LoadTilesFromStart
00003A18 4EB9 0000 0000             		jsr	FloorLog_Unk
00003A1E 6100 0000                  		bsr.w	ColIndexLoad
00003A22 6100 0000                  		bsr.w	LZWaterEffects
00003A26 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003A2C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A30 6B00                       		bmi.s	Level_ChkDebug
00003A32 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003A38 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
00003A3E                            		
00003A3E                            Level_ChkDebug:
00003A3E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003A42 6700                       		beq.s	Level_ChkWater	; if not, branch
00003A44 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003A4A 6700                       		beq.s	Level_ChkWater	; if not, branch
00003A4C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003A52                            
00003A52                            Level_ChkWater:
00003A52 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003A58 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003A5E 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00003A64 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003A6A 6600                       		bne.s	Level_LoadObj	; if not, branch
00003A6C 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003A72 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003A78 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003A7E 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003A84                            
00003A84                            Level_LoadObj:
00003A84 4EB9 0000 0000             		jsr	ObjPosLoad
00003A8A 11FC 0000 870C             		move.b	#0,(Rings_manager_routine).w
00003A90 4EB9 0000 0000             		jsr	RingsManager				
00003A96 4EB9 0000 0000             		jsr	ObjectsLoad
00003A9C 4EB9 0000 0000             		jsr	BuildSprites
00003AA2 7000                       		moveq	#0,d0
00003AA4 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003AA8 6600                       		bne.s	loc_39E8	; if yes, branch
00003AAA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003AAE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003AB2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003AB6                            
00003AB6                            loc_39E8:
00003AB6 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003ABA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003ABE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003AC2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003AC6 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00003ACA 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003ACE 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003AD2 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003AD6 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00003ADA 6100 0000                  		bsr.w	OscillateNumInit
00003ADE 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003AE4 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003AEA 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003AF0 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003AF6 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003AFC 7000                       		moveq	#0,d0
00003AFE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B02 E548                       		lsl.w	#2,d0
00003B04 2271 0000                  		movea.l	(a1,d0.w),a1
00003B08 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B0C 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003B0E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003B14 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003B18 5340                       		subq.w	#1,d0
00003B1A E548                       		lsl.w	#2,d0
00003B1C 2271 0000                  		movea.l	(a1,d0.w),a1
00003B20                            
00003B20                            Level_Demo:
00003B20 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003B26 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003B2A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003B30 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B34 6A00                       		bpl.s	Level_ChkWaterPal
00003B36 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003B3C 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003B42 6600                       		bne.s	Level_ChkWaterPal
00003B44 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003B4A                            
00003B4A                            Level_ChkWaterPal:
00003B4A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003B50 6600                       		bne.s	Level_Delay	; if not, branch
00003B52 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003B54 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003B5A 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003B5C 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003B5E                            
00003B5E                            Level_WaterPal2:
00003B5E 6100 E5D6                  		bsr.w	PalLoad4_Water
00003B62                            
00003B62                            Level_Delay:
00003B62 323C 0003                  		move.w	#3,d1
00003B66                            
00003B66                            Level_DelayLoop:
00003B66 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B6C 6100 EE2C                  		bsr.w	DelayProgram
00003B70 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003B74                            
00003B74 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003B7A 6100 E268                  		bsr.w	Pal_FadeTo2
00003B7E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B82 6B00                       		bmi.s	Level_ClrCardArt
00003B84 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003B88 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003B8C 5838 D124                  		addq.b	#4,($FFFFD124).w
00003B90 5838 D164                  		addq.b	#4,($FFFFD164).w
00003B94 6000                       		bra.s	Level_StartGame
00003B96                            ; ===========================================================================
00003B96                            
00003B96                            Level_ClrCardArt:
00003B96 7002                       		moveq	#2,d0
00003B98 4EB9 0000 1434             		jsr	(LoadPLC).l	; load explosion patterns
00003B9E 7000                       		moveq	#0,d0
00003BA0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003BA4 0640 0015                  		addi.w	#$15,d0
00003BA8 4EB9 0000 1434             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003BAE                            
00003BAE                            Level_StartGame:
00003BAE 11FC 0001 870D             		move.b	#1,(Level_started_flag).w
00003BB4 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003BBA                            
00003BBA                            ; ---------------------------------------------------------------------------
00003BBA                            ; Main level loop (when	all title card and loading sequences are finished)
00003BBA                            ; ---------------------------------------------------------------------------
00003BBA                            
00003BBA                            Level_MainLoop:
00003BBA 6100 D646                  		bsr.w	PauseGame
00003BBE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003BC4 6100 EDD4                  		bsr.w	DelayProgram
00003BC8 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003BCC 6100 0000                  		bsr.w	MoveSonicInDemo
00003BD0 6100 0000                  		bsr.w	LZWaterEffects
00003BD4 4EB9 0000 0000             		jsr	ObjectsLoad
00003BDA 4A78 FE08                  		tst.w	($FFFFFE08).w
00003BDE 6600                       		bne.s	loc_3B10
00003BE0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003BE6 6400                       		bcc.s	loc_3B14
00003BE8                            
00003BE8                            loc_3B10:
00003BE8 6100 0000                  		bsr.w	DeformBgLayer
00003BEC                            
00003BEC                            loc_3B14:
00003BEC 4EB9 0000 0000             		jsr	BuildSprites
00003BF2 4EB9 0000 0000             		jsr	ObjPosLoad
00003BF8 4EB9 0000 0000             		jsr	RingsManager
00003BFE 6100 DD6E                  		bsr.w	PalCycle_Load
00003C02 6100 D89C                  		bsr.w	RunPLC_RAM
00003C06 6100 0000                  		bsr.w	OscillateNumDo
00003C0A 6100 0000                  		bsr.w	ChangeRingFrame
00003C0E 6100 0000                  		bsr.w	SignpostArtLoad
00003C12 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C18 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003C1A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003C1E 6600 FC28                  		bne.w	Level		; if yes, branch
00003C22 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003C28 6700 FF90                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003C2C 4E75                       		rts	
00003C2E                            ; ===========================================================================
00003C2E                            
00003C2E                            Level_ChkDemo:				; XREF: Level_MainLoop
00003C2E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003C32 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003C34 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003C38 6700                       		beq.s	Level_EndDemo	; if not, branch
00003C3A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C40 6700 FF78                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003C44 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003C4A 4E75                       		rts	
00003C4C                            ; ===========================================================================
00003C4C                            
00003C4C                            Level_EndDemo:				; XREF: Level_ChkDemo
00003C4C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003C52 6600                       		bne.s	loc_3B88	; if not, branch
00003C54 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003C5A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003C5E 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003C60 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003C66                            
00003C66                            loc_3B88:
00003C66 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003C6C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003C72 4278 F794                  		clr.w	($FFFFF794).w
00003C76                            
00003C76                            loc_3B98:
00003C76 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003C7C 6100 ED1C                  		bsr.w	DelayProgram
00003C80 6100 0000                  		bsr.w	MoveSonicInDemo
00003C84 4EB9 0000 0000             		jsr	ObjectsLoad
00003C8A 4EB9 0000 0000             		jsr	BuildSprites
00003C90 4EB9 0000 0000             		jsr	ObjPosLoad
00003C96 5378 F794                  		subq.w	#1,($FFFFF794).w
00003C9A 6A00                       		bpl.s	loc_3BC8
00003C9C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003CA2 6100 E1DC                  		bsr.w	Pal_FadeOut
00003CA6                            
00003CA6                            loc_3BC8:
00003CA6 4A78 F614                  		tst.w	($FFFFF614).w
00003CAA 66CA                       		bne.s	loc_3B98
00003CAC 4E75                       		rts	
00003CAE                            ; ===========================================================================
00003CAE                            ; ---------------------------------------------------------------------------
00003CAE                            ; Subroutine to	do special water effects in Labyrinth Zone
00003CAE                            ; ---------------------------------------------------------------------------
00003CAE                            
00003CAE                            LZWaterEffects:				; XREF: Level
00003CAE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003CB4 6600                       		bne.s	locret_3C28	; if not, branch
00003CB6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003CBC 6400                       		bcc.s	LZMoveWater
00003CBE 6100 0000                  		bsr.w	LZWindTunnels
00003CC2 6100 0000                  		bsr.w	LZWaterSlides
00003CC6 6100 0000                  		bsr.w	LZDynamicWater
00003CCA                            
00003CCA                            LZMoveWater:
00003CCA 4238 F64E                  		clr.b	($FFFFF64E).w
00003CCE 7000                       		moveq	#0,d0
00003CD0 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003CD4 E248                       		lsr.w	#1,d0
00003CD6 D078 F648                  		add.w	($FFFFF648).w,d0
00003CDA 31C0 F646                  		move.w	d0,($FFFFF646).w
00003CDE 3038 F646                  		move.w	($FFFFF646).w,d0
00003CE2 9078 F704                  		sub.w	($FFFFF704).w,d0
00003CE6 6400                       		bcc.s	loc_3C1A
00003CE8 4A40                       		tst.w	d0
00003CEA 6A00                       		bpl.s	loc_3C1A
00003CEC 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003CF2 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003CF8                            
00003CF8                            loc_3C1A:
00003CF8 0C40 00DF                  		cmpi.w	#$DF,d0
00003CFC 6500                       		bcs.s	loc_3C24
00003CFE 303C 00DF                  		move.w	#$DF,d0
00003D02                            
00003D02                            loc_3C24:
00003D02 11C0 F625                  		move.b	d0,($FFFFF625).w
00003D06                            
00003D06                            locret_3C28:
00003D06 4E75                       		rts	
00003D08                            ; ===========================================================================
00003D08                            ; ---------------------------------------------------------------------------
00003D08                            ; Labyrinth default water heights
00003D08                            ; ---------------------------------------------------------------------------
00003D08                            WaterHeight:	incbin	misc\lz_heigh.bin
00003D10                            		even
00003D10                            ; ===========================================================================
00003D10                            
00003D10                            ; ---------------------------------------------------------------------------
00003D10                            ; Labyrinth dynamic water routines
00003D10                            ; ---------------------------------------------------------------------------
00003D10                            
00003D10                            LZDynamicWater:				; XREF: LZWaterEffects
00003D10 7000                       		moveq	#0,d0
00003D12 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D16 D040                       		add.w	d0,d0
00003D18 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003D1C 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003D20 7200                       		moveq	#0,d1
00003D22 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003D26 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003D2A 9078 F648                  		sub.w	($FFFFF648).w,d0
00003D2E 6700                       		beq.s	locret_3C5A
00003D30 6400                       		bcc.s	loc_3C56
00003D32 4441                       		neg.w	d1
00003D34                            
00003D34                            loc_3C56:
00003D34 D378 F648                  		add.w	d1,($FFFFF648).w
00003D38                            
00003D38                            locret_3C5A:
00003D38 4E75                       		rts	
00003D3A                            ; ===========================================================================
00003D3A 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003D3C 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003D3E 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003D40 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003D42                            ; ===========================================================================
00003D42                            
00003D42                            DynWater_LZ1:				; XREF: DynWater_Index
00003D42 3038 F700                  		move.w	($FFFFF700).w,d0
00003D46 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003D4A 6600                       		bne.s	loc_3CD0
00003D4C 323C 00B8                  		move.w	#$B8,d1
00003D50 0C40 0600                  		cmpi.w	#$600,d0
00003D54 6500                       		bcs.s	loc_3CB4
00003D56 323C 0108                  		move.w	#$108,d1
00003D5A 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003D60 6500                       		bcs.s	loc_3CBA
00003D62 0C40 0C00                  		cmpi.w	#$C00,d0
00003D66 6500                       		bcs.s	loc_3CB4
00003D68 323C 0318                  		move.w	#$318,d1
00003D6C 0C40 1080                  		cmpi.w	#$1080,d0
00003D70 6500                       		bcs.s	loc_3CB4
00003D72 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003D78 323C 05C8                  		move.w	#$5C8,d1
00003D7C 0C40 1380                  		cmpi.w	#$1380,d0
00003D80 6500                       		bcs.s	loc_3CB4
00003D82 323C 03A8                  		move.w	#$3A8,d1
00003D86 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003D8A 6600                       		bne.s	loc_3CB4
00003D8C 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003D92                            
00003D92                            loc_3CB4:
00003D92 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D96 4E75                       		rts	
00003D98                            ; ===========================================================================
00003D98                            
00003D98                            loc_3CBA:				; XREF: DynWater_LZ1
00003D98 0C40 0C80                  		cmpi.w	#$C80,d0
00003D9C 65F4                       		bcs.s	loc_3CB4
00003D9E 323C 00E8                  		move.w	#$E8,d1
00003DA2 0C40 1500                  		cmpi.w	#$1500,d0
00003DA6 65EA                       		bcs.s	loc_3CB4
00003DA8 323C 0108                  		move.w	#$108,d1
00003DAC 60E4                       		bra.s	loc_3CB4
00003DAE                            ; ===========================================================================
00003DAE                            
00003DAE                            loc_3CD0:				; XREF: DynWater_LZ1
00003DAE 5302                       		subq.b	#1,d2
00003DB0 6600                       		bne.s	locret_3CF4
00003DB2 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003DB8 6400                       		bcc.s	locret_3CF4
00003DBA 323C 03A8                  		move.w	#$3A8,d1
00003DBE 0C40 1300                  		cmpi.w	#$1300,d0
00003DC2 6500                       		bcs.s	loc_3CF0
00003DC4 323C 0108                  		move.w	#$108,d1
00003DC8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003DCE                            
00003DCE                            loc_3CF0:
00003DCE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DD2                            
00003DD2                            locret_3CF4:
00003DD2 4E75                       		rts	
00003DD4                            ; ===========================================================================
00003DD4                            
00003DD4                            DynWater_LZ2:				; XREF: DynWater_Index
00003DD4 3038 F700                  		move.w	($FFFFF700).w,d0
00003DD8 323C 0328                  		move.w	#$328,d1
00003DDC 0C40 0500                  		cmpi.w	#$500,d0
00003DE0 6500                       		bcs.s	loc_3D12
00003DE2 323C 03C8                  		move.w	#$3C8,d1
00003DE6 0C40 0B00                  		cmpi.w	#$B00,d0
00003DEA 6500                       		bcs.s	loc_3D12
00003DEC 323C 0428                  		move.w	#$428,d1
00003DF0                            
00003DF0                            loc_3D12:
00003DF0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DF4 4E75                       		rts	
00003DF6                            ; ===========================================================================
00003DF6                            
00003DF6                            DynWater_LZ3:				; XREF: DynWater_Index
00003DF6 3038 F700                  		move.w	($FFFFF700).w,d0
00003DFA 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003DFE 6600                       		bne.s	loc_3D5E
00003E00 323C 0900                  		move.w	#$900,d1
00003E04 0C40 0600                  		cmpi.w	#$600,d0
00003E08 6500                       		bcs.s	loc_3D54
00003E0A 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003E10 6500                       		bcs.s	loc_3D54
00003E12 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003E18 6400                       		bcc.s	loc_3D54
00003E1A 323C 04C8                  		move.w	#$4C8,d1
00003E1E 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003E24 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003E2A 303C 00B7                  		move.w	#$B7,d0
00003E2E 6100 D3C6                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003E32                            
00003E32                            loc_3D54:
00003E32 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E36 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E3A 4E75                       		rts	
00003E3C                            ; ===========================================================================
00003E3C                            
00003E3C                            loc_3D5E:				; XREF: DynWater_LZ3
00003E3C 5302                       		subq.b	#1,d2
00003E3E 6600                       		bne.s	loc_3DA8
00003E40 323C 04C8                  		move.w	#$4C8,d1
00003E44 0C40 0770                  		cmpi.w	#$770,d0
00003E48 6500                       		bcs.s	loc_3DA2
00003E4A 323C 0308                  		move.w	#$308,d1
00003E4E 0C40 1400                  		cmpi.w	#$1400,d0
00003E52 6500                       		bcs.s	loc_3DA2
00003E54 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003E5A 6700                       		beq.s	loc_3D8E
00003E5C 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003E62 6400                       		bcc.s	loc_3D8E
00003E64 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003E6A 6400                       		bcc.s	loc_3DA2
00003E6C                            
00003E6C                            loc_3D8E:
00003E6C 323C 0508                  		move.w	#$508,d1
00003E70 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E74 0C40 1770                  		cmpi.w	#$1770,d0
00003E78 6500                       		bcs.s	loc_3DA2
00003E7A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003E80                            
00003E80                            loc_3DA2:
00003E80 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E84 4E75                       		rts	
00003E86                            ; ===========================================================================
00003E86                            
00003E86                            loc_3DA8:
00003E86 5302                       		subq.b	#1,d2
00003E88 6600                       		bne.s	loc_3DD2
00003E8A 323C 0508                  		move.w	#$508,d1
00003E8E 0C40 1860                  		cmpi.w	#$1860,d0
00003E92 6500                       		bcs.s	loc_3DCC
00003E94 323C 0188                  		move.w	#$188,d1
00003E98 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003E9C 6400                       		bcc.s	loc_3DC6
00003E9E B278 F648                  		cmp.w	($FFFFF648).w,d1
00003EA2 6600                       		bne.s	loc_3DCC
00003EA4                            
00003EA4                            loc_3DC6:
00003EA4 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003EAA                            
00003EAA                            loc_3DCC:
00003EAA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003EAE 4E75                       		rts	
00003EB0                            ; ===========================================================================
00003EB0                            
00003EB0                            loc_3DD2:
00003EB0 5302                       		subq.b	#1,d2
00003EB2 6600                       		bne.s	loc_3E0E
00003EB4 323C 0188                  		move.w	#$188,d1
00003EB8 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003EBC 6500                       		bcs.s	loc_3E04
00003EBE 323C 0900                  		move.w	#$900,d1
00003EC2 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003EC6 6500                       		bcs.s	loc_3E04
00003EC8 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003ECE 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003ED4 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003EDA 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003EE0 4E75                       		rts	
00003EE2                            ; ===========================================================================
00003EE2                            
00003EE2                            loc_3E04:
00003EE2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003EE6 31C1 F648                  		move.w	d1,($FFFFF648).w
00003EEA 4E75                       		rts	
00003EEC                            ; ===========================================================================
00003EEC                            
00003EEC                            loc_3E0E:
00003EEC 0C40 1E00                  		cmpi.w	#$1E00,d0
00003EF0 6500                       		bcs.s	locret_3E1A
00003EF2 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003EF8                            
00003EF8                            locret_3E1A:
00003EF8 4E75                       		rts	
00003EFA                            ; ===========================================================================
00003EFA                            
00003EFA                            DynWater_SBZ3:				; XREF: DynWater_Index
00003EFA 323C 0228                  		move.w	#$228,d1
00003EFE 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003F04 6500                       		bcs.s	loc_3E2C
00003F06 323C 04C8                  		move.w	#$4C8,d1
00003F0A                            
00003F0A                            loc_3E2C:
00003F0A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F0E 4E75                       		rts
00003F10                            
00003F10                            ; ---------------------------------------------------------------------------
00003F10                            ; Labyrinth Zone "wind tunnels"	subroutine
00003F10                            ; ---------------------------------------------------------------------------
00003F10                            
00003F10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F10                            
00003F10                            
00003F10                            LZWindTunnels:				; XREF: LZWaterEffects
00003F10 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003F14 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003F18 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003F1E 7000                       		moveq	#0,d0
00003F20 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F24 E748                       		lsl.w	#3,d0
00003F26 D4C0                       		adda.w	d0,a2
00003F28 7200                       		moveq	#0,d1
00003F2A 4A38 FE11                  		tst.b	($FFFFFE11).w
00003F2E 6600                       		bne.s	loc_3E56
00003F30 7201                       		moveq	#1,d1
00003F32 514A                       		subq.w	#8,a2
00003F34                            
00003F34                            loc_3E56:
00003F34 43F8 D000                  		lea	($FFFFD000).w,a1
00003F38                            
00003F38                            LZWind_Loop:
00003F38 3029 0008                  		move.w	8(a1),d0
00003F3C B052                       		cmp.w	(a2),d0
00003F3E 6500 0000                  		bcs.w	loc_3EF4
00003F42 B06A 0004                  		cmp.w	4(a2),d0
00003F46 6400 0000                  		bcc.w	loc_3EF4
00003F4A 3429 000C                  		move.w	$C(a1),d2
00003F4E B46A 0002                  		cmp.w	2(a2),d2
00003F52 6500                       		bcs.s	loc_3EF4
00003F54 B46A 0006                  		cmp.w	6(a2),d2
00003F58 6400                       		bcc.s	loc_3EF4
00003F5A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003F5E 0200 003F                  		andi.b	#$3F,d0
00003F62 6600                       		bne.s	loc_3E90
00003F64 303C 00D0                  		move.w	#$D0,d0
00003F68 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003F6E                            
00003F6E                            loc_3E90:
00003F6E 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003F72 6600 0000                  		bne.w	locret_3F0A
00003F76 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003F7C 6400                       		bcc.s	loc_3F06
00003F7E 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003F84 0440 0080                  		subi.w	#$80,d0
00003F88 B052                       		cmp.w	(a2),d0
00003F8A 6400                       		bcc.s	LZWind_Move
00003F8C 7002                       		moveq	#2,d0
00003F8E 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003F94 6600                       		bne.s	loc_3EBA
00003F96 4440                       		neg.w	d0
00003F98                            
00003F98                            loc_3EBA:
00003F98 D169 000C                  		add.w	d0,$C(a1)
00003F9C                            
00003F9C                            LZWind_Move:
00003F9C 5869 0008                  		addq.w	#4,8(a1)
00003FA0 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003FA6 337C 0000 0012             		move.w	#0,$12(a1)
00003FAC 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003FB2 08E9 0001 0022             		bset	#1,$22(a1)
00003FB8 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003FBE 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003FC0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003FC4                            
00003FC4                            LZWind_MoveDown:
00003FC4 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003FCA 6700                       		beq.s	locret_3EF2	; if not, branch
00003FCC 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003FD0                            
00003FD0                            locret_3EF2:
00003FD0 4E75                       		rts	
00003FD2                            ; ===========================================================================
00003FD2                            
00003FD2                            loc_3EF4:				; XREF: LZWindTunnels
00003FD2 504A                       		addq.w	#8,a2
00003FD4 51C9 FF62                  		dbf	d1,LZWind_Loop
00003FD8 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003FDC 6700                       		beq.s	locret_3F0A
00003FDE 137C 0000 001C             		move.b	#0,$1C(a1)
00003FE4                            
00003FE4                            loc_3F06:
00003FE4 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003FE8                            
00003FE8                            locret_3F0A:
00003FE8 4E75                       		rts	
00003FEA                            ; End of function LZWindTunnels
00003FEA                            
00003FEA                            ; ===========================================================================
00003FEA 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003FF2 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004004 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004012                            					; XREF: LZWindTunnels
00004012                            		even
00004012                            
00004012                            ; ---------------------------------------------------------------------------
00004012                            ; Labyrinth Zone water slide subroutine
00004012                            ; ---------------------------------------------------------------------------
00004012                            
00004012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004012                            
00004012                            
00004012                            LZWaterSlides:				; XREF: LZWaterEffects
00004012 43F8 D000                  		lea	($FFFFD000).w,a1
00004016 0829 0001 0022             		btst	#1,$22(a1)
0000401C 6600                       		bne.s	loc_3F6A
0000401E 3029 000C                  		move.w	$C(a1),d0
00004022 E248                       		lsr.w	#1,d0
00004024 0240 0380                  		andi.w	#$380,d0
00004028 1229 0008                  		move.b	8(a1),d1
0000402C 0241 007F                  		andi.w	#$7F,d1
00004030 D041                       		add.w	d1,d0
00004032 45F8 A400                  		lea	($FFFFA400).w,a2
00004036 1032 0000                  		move.b	(a2,d0.w),d0
0000403A 45FA 0000                  		lea	byte_3FCF(pc),a2
0000403E 7206                       		moveq	#6,d1
00004040                            
00004040                            loc_3F62:
00004040 B022                       		cmp.b	-(a2),d0
00004042 57C9 FFFC                  		dbeq	d1,loc_3F62
00004046 6700                       		beq.s	LZSlide_Move
00004048                            
00004048                            loc_3F6A:
00004048 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0000404C 6700                       		beq.s	locret_3F7A
0000404E 337C 0005 003E             		move.w	#5,$3E(a1)
00004054 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004058                            
00004058                            locret_3F7A:
00004058 4E75                       		rts	
0000405A                            ; ===========================================================================
0000405A                            
0000405A                            LZSlide_Move:				; XREF: LZWaterSlides
0000405A 0C41 0003                  		cmpi.w	#3,d1
0000405E 6400                       		bcc.s	loc_3F84
00004060 4E71                       		nop	
00004062                            
00004062                            loc_3F84:
00004062 08A9 0000 0022             		bclr	#0,$22(a1)
00004068 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
0000406C 1340 0020                  		move.b	d0,$20(a1)
00004070 6A00                       		bpl.s	loc_3F9A
00004072 08E9 0000 0022             		bset	#0,$22(a1)
00004078                            
00004078                            loc_3F9A:
00004078 4229 0021                  		clr.b	$21(a1)
0000407C 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004082 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004088 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000408C 0200 001F                  		andi.b	#$1F,d0
00004090 6600                       		bne.s	locret_3FBE
00004092 303C 00D0                  		move.w	#$D0,d0
00004096 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play water sound
0000409C                            
0000409C                            locret_3FBE:
0000409C 4E75                       		rts	
0000409E                            ; End of function LZWaterSlides
0000409E                            
0000409E                            ; ===========================================================================
0000409E 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000040AD 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000040AE                            		even
000040AE                            
000040AE                            ; ---------------------------------------------------------------------------
000040AE                            ; Subroutine to	move Sonic in demo mode
000040AE                            ; ---------------------------------------------------------------------------
000040AE                            
000040AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040AE                            
000040AE                            
000040AE                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000040AE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040B2 6600                       		bne.s	MoveDemo_On	; if yes, branch
000040B4 4E75                       		rts	
000040B6                            ; ===========================================================================
000040B6                            
000040B6                            ; This is an unused subroutine for recording a demo
000040B6                            
000040B6                            MoveDemo_Record:
000040B6 43F9 0008 0000             		lea	($80000).l,a1
000040BC 3038 F790                  		move.w	($FFFFF790).w,d0
000040C0 D2C0                       		adda.w	d0,a1
000040C2 1038 F604                  		move.b	($FFFFF604).w,d0
000040C6 B011                       		cmp.b	(a1),d0
000040C8 6600                       		bne.s	loc_3FFA
000040CA 5229 0001                  		addq.b	#1,1(a1)
000040CE 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000040D4 6700                       		beq.s	loc_3FFA
000040D6 4E75                       		rts	
000040D8                            ; ===========================================================================
000040D8                            
000040D8                            loc_3FFA:				; XREF: MoveDemo_Record
000040D8 1340 0002                  		move.b	d0,2(a1)
000040DC 137C 0000 0003             		move.b	#0,3(a1)
000040E2 5478 F790                  		addq.w	#2,($FFFFF790).w
000040E6 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000040EC 4E75                       		rts	
000040EE                            ; ===========================================================================
000040EE                            
000040EE                            MoveDemo_On:				; XREF: MoveSonicInDemo
000040EE 4A38 F604                  		tst.b	($FFFFF604).w
000040F2 6A00                       		bpl.s	loc_4022
000040F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000040F8 6B00                       		bmi.s	loc_4022
000040FA 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004100                            
00004100                            loc_4022:
00004100 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004106 7000                       		moveq	#0,d0
00004108 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000410C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004112 6600                       		bne.s	loc_4038
00004114 7006                       		moveq	#6,d0
00004116                            
00004116                            loc_4038:
00004116 E548                       		lsl.w	#2,d0
00004118 2271 0000                  		movea.l	(a1,d0.w),a1
0000411C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004120 6A00                       		bpl.s	loc_4056
00004122 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004128 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000412C 5340                       		subq.w	#1,d0
0000412E E548                       		lsl.w	#2,d0
00004130 2271 0000                  		movea.l	(a1,d0.w),a1
00004134                            
00004134                            loc_4056:
00004134 3038 F790                  		move.w	($FFFFF790).w,d0
00004138 D2C0                       		adda.w	d0,a1
0000413A 1011                       		move.b	(a1),d0
0000413C 41F8 F604                  		lea	($FFFFF604).w,a0
00004140 1200                       		move.b	d0,d1
00004142 1428 FFFE                  		move.b	-2(a0),d2
00004146 B500                       		eor.b	d2,d0
00004148 10C1                       		move.b	d1,(a0)+
0000414A C001                       		and.b	d1,d0
0000414C 10C0                       		move.b	d0,(a0)+
0000414E 5338 F792                  		subq.b	#1,($FFFFF792).w
00004152 6400                       		bcc.s	locret_407E
00004154 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000415A 5478 F790                  		addq.w	#2,($FFFFF790).w
0000415E                            
0000415E                            locret_407E:
0000415E 4E75                       		rts	
00004160                            ; End of function MoveSonicInDemo
00004160                            
00004160                            ; ===========================================================================
00004160                            ; ---------------------------------------------------------------------------
00004160                            ; Demo sequence	pointers
00004160                            ; ---------------------------------------------------------------------------
00004160                            Demo_Index:
00004160                            	include "_inc\Demo pointers for intro.asm"
00004160                            ; ---------------------------------------------------------------------------
00004160                            ; Demo sequence	pointers
00004160                            ; ---------------------------------------------------------------------------
00004160 0000 0000                  	dc.l Demo_GHZ
00004164 0000 0000                  	dc.l Demo_GHZ
00004168 0000 0000                  	dc.l Demo_MZ
0000416C 0000 0000                  	dc.l Demo_MZ
00004170 0000 0000                  	dc.l Demo_SYZ
00004174 0000 0000                  	dc.l Demo_SYZ
00004178 0000 0000                  	dc.l Demo_SS
0000417C 0000 0000                  	dc.l Demo_SS
0000417C 0000 0000                  	dc.l Demo_SS
00004180                            
00004180                            Demo_EndIndex:
00004180                            	include "_inc\Demo pointers for ending.asm"
00004180                            ; ---------------------------------------------------------------------------
00004180                            ; Demo (ending) sequence pointers
00004180                            ; ---------------------------------------------------------------------------
00004180 0000 0000                  	dc.l Demo_EndGHZ1
00004184 0000 0000                  	dc.l Demo_EndMZ
00004188 0000 0000                  	dc.l Demo_EndSYZ
0000418C 0000 0000                  	dc.l Demo_EndLZ
00004190 0000 0000                  	dc.l Demo_EndSLZ
00004194 0000 0000                  	dc.l Demo_EndSBZ1
00004198 0000 0000                  	dc.l Demo_EndSBZ2
0000419C 0000 0000                  	dc.l Demo_EndGHZ2
0000419C 0000 0000                  	dc.l Demo_EndGHZ2
000041A0                            
000041A0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000041B0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000041C0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000041D0                            		even
000041D0                            
000041D0                            ; ---------------------------------------------------------------------------
000041D0                            ; Collision index loading subroutine
000041D0                            ; ---------------------------------------------------------------------------
000041D0                            
000041D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041D0                            
000041D0                            
000041D0                            ColIndexLoad:				; XREF: Level
000041D0 7000                       		moveq	#0,d0
000041D2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000041D6 E548                       		lsl.w	#2,d0
000041D8 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000041DE 4E75                       		rts	
000041E0                            ; End of function ColIndexLoad
000041E0                            
000041E0                            ; ===========================================================================
000041E0                            ; ---------------------------------------------------------------------------
000041E0                            ; Collision index pointers
000041E0                            ; ---------------------------------------------------------------------------
000041E0                            ColPointers:
000041E0                            	include "_inc\Collision index pointers.asm"
000041E0                            ; ---------------------------------------------------------------------------
000041E0                            ; Collision index pointers
000041E0                            ; ---------------------------------------------------------------------------
000041E0 0000 0000                  	dc.l Col_GHZ
000041E4 0000 0000                  	dc.l Col_LZ
000041E8 0000 0000                  	dc.l Col_MZ
000041EC 0000 0000                  	dc.l Col_SLZ
000041F0 0000 0000                  	dc.l Col_SYZ
000041F4 0000 0000                  	dc.l Col_SBZ
000041F4 0000 0000                  	dc.l Col_SBZ
000041F8                            
000041F8                            ; ---------------------------------------------------------------------------
000041F8                            ; Oscillating number subroutine
000041F8                            ; ---------------------------------------------------------------------------
000041F8                            
000041F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041F8                            
000041F8                            
000041F8                            OscillateNumInit:			; XREF: Level
000041F8 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000041FC 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004202 7220                       		moveq	#$20,d1
00004204                            
00004204                            Osc_Loop:
00004204 32DA                       		move.w	(a2)+,(a1)+
00004206 51C9 FFFC                  		dbf	d1,Osc_Loop
0000420A 4E75                       		rts	
0000420C                            ; End of function OscillateNumInit
0000420C                            
0000420C                            ; ===========================================================================
0000420C 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004210 0000 0080                  		dc.w 0,	$80
00004214 0000 0080                  		dc.w 0,	$80
00004218 0000 0080                  		dc.w 0,	$80
0000421C 0000 0080                  		dc.w 0,	$80
00004220 0000 0080                  		dc.w 0,	$80
00004224 0000 0080                  		dc.w 0,	$80
00004228 0000 0080                  		dc.w 0,	$80
0000422C 0000 0080                  		dc.w 0,	$80
00004230 0000 50F0                  		dc.w 0,	$50F0
00004234 011E 2080                  		dc.w $11E, $2080
00004238 00B4 3080                  		dc.w $B4, $3080
0000423C 010E 5080                  		dc.w $10E, $5080
00004240 01C2 7080                  		dc.w $1C2, $7080
00004244 0276 0080                  		dc.w $276, $80
00004248 0000 0080                  		dc.w 0,	$80
0000424C 0000                       		dc.w 0
0000424E                            		even
0000424E                            
0000424E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000424E                            
0000424E                            
0000424E                            OscillateNumDo:				; XREF: Level
0000424E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004254 6400                       		bcc.s	locret_41C4
00004256 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000425A 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004260 3619                       		move.w	(a1)+,d3
00004262 720F                       		moveq	#$F,d1
00004264                            
00004264                            loc_4184:
00004264 341A                       		move.w	(a2)+,d2
00004266 381A                       		move.w	(a2)+,d4
00004268 0303                       		btst	d1,d3
0000426A 6600                       		bne.s	loc_41A4
0000426C 3029 0002                  		move.w	2(a1),d0
00004270 D042                       		add.w	d2,d0
00004272 3340 0002                  		move.w	d0,2(a1)
00004276 D151                       		add.w	d0,0(a1)
00004278 B811                       		cmp.b	0(a1),d4
0000427A 6200                       		bhi.s	loc_41BA
0000427C 03C3                       		bset	d1,d3
0000427E 6000                       		bra.s	loc_41BA
00004280                            ; ===========================================================================
00004280                            
00004280                            loc_41A4:				; XREF: OscillateNumDo
00004280 3029 0002                  		move.w	2(a1),d0
00004284 9042                       		sub.w	d2,d0
00004286 3340 0002                  		move.w	d0,2(a1)
0000428A D151                       		add.w	d0,0(a1)
0000428C B811                       		cmp.b	0(a1),d4
0000428E 6300                       		bls.s	loc_41BA
00004290 0383                       		bclr	d1,d3
00004292                            
00004292                            loc_41BA:
00004292 5849                       		addq.w	#4,a1
00004294 51C9 FFCE                  		dbf	d1,loc_4184
00004298 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000429C                            
0000429C                            locret_41C4:
0000429C 4E75                       		rts	
0000429E                            ; End of function OscillateNumDo
0000429E                            
0000429E                            ; ===========================================================================
0000429E 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000042A2 0002 0018                  		dc.w 2,	$18
000042A6 0002 0020                  		dc.w 2,	$20
000042AA 0002 0030                  		dc.w 2,	$30
000042AE 0004 0020                  		dc.w 4,	$20
000042B2 0008 0008                  		dc.w 8,	8
000042B6 0008 0040                  		dc.w 8,	$40
000042BA 0004 0040                  		dc.w 4,	$40
000042BE 0002 0050                  		dc.w 2,	$50
000042C2 0002 0050                  		dc.w 2,	$50
000042C6 0002 0020                  		dc.w 2,	$20
000042CA 0003 0030                  		dc.w 3,	$30
000042CE 0005 0050                  		dc.w 5,	$50
000042D2 0007 0070                  		dc.w 7,	$70
000042D6 0002 0010                  		dc.w 2,	$10
000042DA 0002 0010                  		dc.w 2,	$10
000042DE                            		even
000042DE                            
000042DE                            ; ---------------------------------------------------------------------------
000042DE                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000042DE                            ; ---------------------------------------------------------------------------
000042DE                            
000042DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042DE                            
000042DE                            
000042DE                            ChangeRingFrame:			; XREF: Level
000042DE 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000042E2 6A00                       		bpl.s	loc_421C
000042E4 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000042EA 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000042EE 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000042F4                            
000042F4                            loc_421C:
000042F4 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000042F8 6A00                       		bpl.s	loc_4232
000042FA 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004300 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004304 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000430A                            
0000430A                            loc_4232:
0000430A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000430E 6A00                       		bpl.s	loc_4250
00004310 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004316 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000431A 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004320 6500                       		bcs.s	loc_4250
00004322 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004328                            
00004328                            loc_4250:
00004328 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000432C 6700                       		beq.s	locret_4272
0000432E 7000                       		moveq	#0,d0
00004330 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004334 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004338 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000433C EF58                       		rol.w	#7,d0
0000433E 0240 0003                  		andi.w	#3,d0
00004342 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004346 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000434A                            
0000434A                            locret_4272:
0000434A 4E75                       		rts	
0000434C                            ; End of function ChangeRingFrame
0000434C                            
0000434C                            ; ---------------------------------------------------------------------------
0000434C                            ; End-of-act signpost pattern loading subroutine
0000434C                            ; ---------------------------------------------------------------------------
0000434C                            
0000434C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000434C                            
0000434C                            
0000434C                            SignpostArtLoad:			; XREF: Level
0000434C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004350 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004354 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000435A 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000435C 3038 F700                  		move.w	($FFFFF700).w,d0
00004360 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004364 0441 0100                  		subi.w	#$100,d1
00004368 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000436A 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000436C 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004370 6700                       		beq.s	Signpost_Exit
00004372 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004376 6700                       		beq.s	Signpost_Exit
00004378 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000437C 7012                       		moveq	#$12,d0
0000437E 6000 D0E6                  		bra.w	LoadPLC2	; load signpost	patterns
00004382                            ; ===========================================================================
00004382                            
00004382                            Signpost_Exit:
00004382 4E75                       		rts	
00004384                            ; End of function SignpostArtLoad
00004384                            
00004384                            ; ===========================================================================
00004384                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004404                            Demo_MZ:	incbin	demodata\i_mz.bin
00004534                            Demo_SYZ:	incbin	demodata\i_syz.bin
000045B4                            Demo_SS:	incbin	demodata\i_ss.bin
000046B4                            ; ===========================================================================
000046B4                            
000046B4                            ; ---------------------------------------------------------------------------
000046B4                            ; Special Stage
000046B4                            ; ---------------------------------------------------------------------------
000046B4                            
000046B4                            SpecialStage:				; XREF: GameModeArray
000046B4 303C 00CA                  		move.w	#$CA,d0
000046B8 6100 CB3C                  		bsr.w	PlaySound_Special ; play special stage entry sound
000046BC 4EB9 0000 0000             		jsr	BuildSprites
000046C2 6100 D8A2                  		bsr.w	Pal_MakeFlash
000046C6 46FC 2700                  		move	#$2700,sr
000046CA 4DF9 00C0 0004             		lea	($C00004).l,a6
000046D0 3CBC 8B03                  		move.w	#$8B03,(a6)
000046D4 3CBC 8004                  		move.w	#$8004,(a6)
000046D8 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000046DE 3CBC 9011                  		move.w	#$9011,(a6)
000046E2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000046E6 0200 00BF                  		andi.b	#$BF,d0
000046EA 33C0 00C0 0004             		move.w	d0,($C00004).l
000046F0 6100 C9DE                  		bsr.w	ClearScreen
000046F4 46FC 2300                  		move	#$2300,sr
000046F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000046FE 3ABC 8F01                  		move.w	#$8F01,(a5)
00004702 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004708 3ABC 9780                  		move.w	#$9780,(a5)
0000470C 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004712 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000471A                            
0000471A                            loc_463C:
0000471A 3215                       		move.w	(a5),d1
0000471C 0801 0001                  		btst	#1,d1
00004720 66F8                       		bne.s	loc_463C
00004722 3ABC 8F02                  		move.w	#$8F02,(a5)
00004726 6100 0000                  		bsr.w	SS_BGLoad
0000472A 7014                       		moveq	#$14,d0
0000472C 6100 CE72                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004730                            
00004730 43F8 D000                  		lea	($FFFFD000).w,a1
00004734 7000                       		moveq	#0,d0
00004736 323C 07FF                  		move.w	#$7FF,d1
0000473A                            
0000473A                            SS_ClrObjRam:
0000473A 22C0                       		move.l	d0,(a1)+
0000473C 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004740                            
00004740 43F8 F700                  		lea	($FFFFF700).w,a1
00004744 7000                       		moveq	#0,d0
00004746 323C 003F                  		move.w	#$3F,d1
0000474A                            
0000474A                            SS_ClrRam:
0000474A 22C0                       		move.l	d0,(a1)+
0000474C 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004750                            
00004750 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004754 7000                       		moveq	#0,d0
00004756 323C 0027                  		move.w	#$27,d1
0000475A                            
0000475A                            SS_ClrRam2:
0000475A 22C0                       		move.l	d0,(a1)+
0000475C 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004760                            
00004760 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004764 7000                       		moveq	#0,d0
00004766 323C 007F                  		move.w	#$7F,d1
0000476A                            
0000476A                            SS_ClrNemRam:
0000476A 22C0                       		move.l	d0,(a1)+
0000476C 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004770 4238 F64E                  		clr.b	($FFFFF64E).w
00004774 4278 FE02                  		clr.w	($FFFFFE02).w
00004778 700A                       		moveq	#$A,d0
0000477A 6100 D96A                  		bsr.w	PalLoad1	; load special stage pallet
0000477E 4EB9 0000 0000             		jsr	SS_Load
00004784 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
0000478A 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004792 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
0000479A 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000047A0 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
000047A6 6100 0000                  		bsr.w	PalCycle_SS
000047AA 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000047AE 11FC 00FF FFF9             		move.b	#$FF,(v_ssangleprev).w	; fill previous angle with obviously false value to force an update
000047B4 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000047BA 303C 0089                  		move.w	#$89,d0
000047BE 6100 CA30                  		bsr.w	PlaySound	; play special stage BG	music
000047C2 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000047C8 43F9 0000 4160             		lea	(Demo_Index).l,a1
000047CE 7006                       		moveq	#6,d0
000047D0 E548                       		lsl.w	#2,d0
000047D2 2271 0000                  		movea.l	(a1,d0.w),a1
000047D6 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000047DC 5338 F792                  		subq.b	#1,($FFFFF792).w
000047E0 4278 FE20                  		clr.w	($FFFFFE20).w
000047E4 4238 FE1B                  		clr.b	($FFFFFE1B).w
000047E8 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000047EE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000047F4 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000047F8 6700                       		beq.s	SS_NoDebug	; if not, branch
000047FA 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004800 6700                       		beq.s	SS_NoDebug	; if not, branch
00004802 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004808                            
00004808                            SS_NoDebug:
00004808 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000480C 0000 0040                  		ori.b	#$40,d0
00004810 33C0 00C0 0004             		move.w	d0,($C00004).l
00004816 6100 D6C6                  		bsr.w	Pal_MakeWhite
0000481A                            
0000481A                            ; ---------------------------------------------------------------------------
0000481A                            ; Main Special Stage loop
0000481A                            ; ---------------------------------------------------------------------------
0000481A                            
0000481A                            SS_MainLoop:
0000481A 6100 C9E6                  		bsr.w	PauseGame
0000481E 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004824 6100 E174                  		bsr.w	DelayProgram
00004828 6100 F884                  		bsr.w	MoveSonicInDemo
0000482C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004832 4EB9 0000 0000             		jsr	ObjectsLoad
00004838 4EB9 0000 0000             		jsr	BuildSprites
0000483E 4EB9 0000 0000             		jsr	SS_ShowLayout
00004844 6100 0000                  		bsr.w	SS_BGAnimate
00004848 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000484C 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000484E 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004852 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004856                            
00004856                            SS_ChkEnd:
00004856 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000485C 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004860                            
00004860 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004864 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004868 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000486E 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004874 6500                       		bcs.s	SS_End		; if not, branch
00004876 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000487A                            
0000487A                            SS_End:
0000487A 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004880 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004886 4278 F794                  		clr.w	($FFFFF794).w
0000488A                            
0000488A                            SS_EndLoop:
0000488A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004890 6100 E108                  		bsr.w	DelayProgram
00004894 6100 F818                  		bsr.w	MoveSonicInDemo
00004898 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000489E 4EB9 0000 0000             		jsr	ObjectsLoad
000048A4 4EB9 0000 0000             		jsr	BuildSprites
000048AA 4EB9 0000 0000             		jsr	SS_ShowLayout
000048B0 6100 0000                  		bsr.w	SS_BGAnimate
000048B4 5378 F794                  		subq.w	#1,($FFFFF794).w
000048B8 6A00                       		bpl.s	loc_47D4
000048BA 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000048C0 6100 D6C4                  		bsr.w	Pal_ToWhite
000048C4                            
000048C4                            loc_47D4:
000048C4 4A78 F614                  		tst.w	($FFFFF614).w
000048C8 66C0                       		bne.s	SS_EndLoop
000048CA                            
000048CA 46FC 2700                  		move	#$2700,sr
000048CE 4DF9 00C0 0004             		lea	($C00004).l,a6
000048D4 3CBC 8230                  		move.w	#$8230,(a6)
000048D8 3CBC 8407                  		move.w	#$8407,(a6)
000048DC 3CBC 9001                  		move.w	#$9001,(a6)
000048E0 6100 C7EE                  		bsr.w	ClearScreen
000048E4 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
000048EE 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
000048F4 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
000048FA 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
000048FE 4EB9 0000 0000             		jsr	Hud_Base
00004904 46FC 2300                  		move	#$2300,sr
00004908 7011                       		moveq	#$11,d0
0000490A 6100 D7F6                  		bsr.w	PalLoad2	; load results screen pallet
0000490E 7000                       		moveq	#0,d0
00004910 6100 CB54                  		bsr.w	LoadPLC2
00004914 701B                       		moveq	#$1B,d0
00004916 6100 CB1C                  		bsr.w	LoadPLC		; load results screen patterns
0000491A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004920 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004926 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000492A C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000492E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004932 303C 008E                  		move.w	#$8E,d0
00004936 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000493C 43F8 D000                  		lea	($FFFFD000).w,a1
00004940 7000                       		moveq	#0,d0
00004942 323C 07FF                  		move.w	#$7FF,d1
00004946                            
00004946                            SS_EndClrObjRam:
00004946 22C0                       		move.l	d0,(a1)+
00004948 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000494C                            
0000494C 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004952                            
00004952                            SS_NormalExit:
00004952 6100 C8AE                  		bsr.w	PauseGame
00004956 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000495C 6100 E03C                  		bsr.w	DelayProgram
00004960 4EB9 0000 0000             		jsr	ObjectsLoad
00004966 4EB9 0000 0000             		jsr	BuildSprites
0000496C 6100 CB32                  		bsr.w	RunPLC_RAM
00004970 4A78 FE02                  		tst.w	($FFFFFE02).w
00004974 67DC                       		beq.s	SS_NormalExit
00004976 4AB8 F680                  		tst.l	($FFFFF680).w
0000497A 66D6                       		bne.s	SS_NormalExit
0000497C 303C 00CA                  		move.w	#$CA,d0
00004980 6100 C874                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004984 6100 D5E0                  		bsr.w	Pal_MakeFlash
00004988 4E75                       		rts	
0000498A                            ; ===========================================================================
0000498A                            
0000498A                            SS_ToSegaScreen:
0000498A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004990 4E75                       		rts
00004992                            
00004992                            ; ---------------------------------------------------------------------------
00004992                            ; Special stage	background loading subroutine
00004992                            ; ---------------------------------------------------------------------------
00004992                            
00004992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004992                            
00004992                            
00004992                            SS_BGLoad:				; XREF: SpecialStage
00004992 43F9 00FF 0000             		lea	($FF0000).l,a1
00004998 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000499E 303C 4051                  		move.w	#$4051,d0
000049A2 6100 CC2E                  		bsr.w	EniDec
000049A6 263C 5000 0001             		move.l	#$50000001,d3
000049AC 45F9 00FF 0080             		lea	($FF0080).l,a2
000049B2 7E06                       		moveq	#6,d7
000049B4                            
000049B4                            loc_48BE:
000049B4 2003                       		move.l	d3,d0
000049B6 7C03                       		moveq	#3,d6
000049B8 7800                       		moveq	#0,d4
000049BA 0C47 0003                  		cmpi.w	#3,d7
000049BE 6400                       		bcc.s	loc_48CC
000049C0 7801                       		moveq	#1,d4
000049C2                            
000049C2                            loc_48CC:
000049C2 7A07                       		moveq	#7,d5
000049C4                            
000049C4                            loc_48CE:
000049C4 224A                       		movea.l	a2,a1
000049C6 0A04 0001                  		eori.b	#1,d4
000049CA 6600                       		bne.s	loc_48E2
000049CC 0C47 0006                  		cmpi.w	#6,d7
000049D0 6600                       		bne.s	loc_48F2
000049D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000049D8                            
000049D8                            loc_48E2:
000049D8 48E7 F800                  		movem.l	d0-d4,-(sp)
000049DC 7207                       		moveq	#7,d1
000049DE 7407                       		moveq	#7,d2
000049E0 6100 C8DC                  		bsr.w	ShowVDPGraphics
000049E4 4CDF 001F                  		movem.l	(sp)+,d0-d4
000049E8                            
000049E8                            loc_48F2:
000049E8 0680 0010 0000             		addi.l	#$100000,d0
000049EE 51CD FFD4                  		dbf	d5,loc_48CE
000049F2 0680 0380 0000             		addi.l	#$3800000,d0
000049F8 0A04 0001                  		eori.b	#1,d4
000049FC 51CE FFC4                  		dbf	d6,loc_48CC
00004A00 0683 1000 0000             		addi.l	#$10000000,d3
00004A06 6A00                       		bpl.s	loc_491C
00004A08 4843                       		swap	d3
00004A0A 0683 0000 C000             		addi.l	#$C000,d3
00004A10 4843                       		swap	d3
00004A12                            
00004A12                            loc_491C:
00004A12 D4FC 0080                  		adda.w	#$80,a2
00004A16 51CF FF9C                  		dbf	d7,loc_48BE
00004A1A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A20 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004A26 303C 4000                  		move.w	#$4000,d0
00004A2A 6100 CBA6                  		bsr.w	EniDec
00004A2E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A34 203C 4000 0003             		move.l	#$40000003,d0
00004A3A 723F                       		moveq	#$3F,d1
00004A3C 741F                       		moveq	#$1F,d2
00004A3E 6100 C87E                  		bsr.w	ShowVDPGraphics
00004A42 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A48 203C 5000 0003             		move.l	#$50000003,d0
00004A4E 723F                       		moveq	#$3F,d1
00004A50 743F                       		moveq	#$3F,d2
00004A52 6100 C86A                  		bsr.w	ShowVDPGraphics
00004A56 4E75                       		rts	
00004A58                            ; End of function SS_BGLoad
00004A58                            
00004A58                            ; ---------------------------------------------------------------------------
00004A58                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00004A58                            ; to be issued the next time ProcessDMAQueue is called.
00004A58                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00004A58                            ; by issuing the commands (this subroutine DOES check for overflow)
00004A58                            ; ---------------------------------------------------------------------------
00004A58                            ; In case you wish to use this queue system outside of the spin dash, this is the
00004A58                            ; registers in which it expects data in:
00004A58                            ; d1.l: Address to data (In 68k address space)
00004A58                            ; d2.w: Destination in VRAM
00004A58                            ; d3.w: Length of data
00004A58                            ; ---------------------------------------------------------------------------
00004A58                            
00004A58                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004A58                            
00004A58                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00004A58                            QueueDMATransfer:
00004A58 2278 C8FC                  		movea.l ($FFFFC8FC).w,a1
00004A5C B2FC C8FC                  		cmpa.w #$C8FC,a1
00004A60 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004A62                            
00004A62                            ; piece together some VDP commands and store them for later...
00004A62 303C 9300                  		move.w #$9300,d0 ; command to specify DMA transfer length & $00FF
00004A66 1003                       		move.b d3,d0
00004A68 32C0                       		move.w d0,(a1)+ ; store command
00004A6A                            
00004A6A 303C 9400                  		move.w #$9400,d0 ; command to specify DMA transfer length & $FF00
00004A6E E04B                       		lsr.w #8,d3
00004A70 1003                       		move.b d3,d0
00004A72 32C0                       		move.w d0,(a1)+ ; store command
00004A74                            
00004A74 303C 9500                  		move.w #$9500,d0 ; command to specify source address & $0001FE
00004A78 E289                       		lsr.l #1,d1
00004A7A 1001                       		move.b d1,d0
00004A7C 32C0                       		move.w d0,(a1)+ ; store command
00004A7E                            
00004A7E 303C 9600                  		move.w #$9600,d0 ; command to specify source address & $01FE00
00004A82 E089                       		lsr.l #8,d1
00004A84 1001                       		move.b d1,d0
00004A86 32C0                       		move.w d0,(a1)+ ; store command
00004A88                            
00004A88 303C 9700                  		move.w #$9700,d0 ; command to specify source address & $FE0000
00004A8C E089                       		lsr.l #8,d1
00004A8E 1001                       		move.b d1,d0
00004A90 32C0                       		move.w d0,(a1)+ ; store command
00004A92                            
00004A92 0282 0000 FFFF             		andi.l #$FFFF,d2 ; command to specify destination address and begin DMA
00004A98 E58A                       		lsl.l #2,d2
00004A9A E44A                       		lsr.w #2,d2
00004A9C 4842                       		swap d2
00004A9E 0082 4000 0080             		ori.l #$40000080,d2 ; set bits to specify VRAM transfer
00004AA4 22C2                       		move.l d2,(a1)+ ; store command
00004AA6                            
00004AA6 21C9 C8FC                  		move.l a1,($FFFFC8FC).w ; set the next free slot address
00004AAA B2FC C8FC                  		cmpa.w #$C8FC,a1
00004AAE 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004AB0 32BC 0000                  		move.w #0,(a1) ; put a stop token at the end of the used part of the buffer
00004AB4                            ; return_14AA:
00004AB4                            QueueDMATransfer_Done:
00004AB4 4E75                       		rts
00004AB6                            ; End of function QueueDMATransfer
00004AB6                            
00004AB6                            ; ---------------------------------------------------------------------------
00004AB6                            ; Subroutine for issuing all VDP commands that were queued
00004AB6                            ; (by earlier calls to QueueDMATransfer)
00004AB6                            ; Resets the queue when it's done
00004AB6                            ; ---------------------------------------------------------------------------
00004AB6                            
00004AB6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004AB6                            
00004AB6                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00004AB6                            ProcessDMAQueue:
00004AB6 4BF9 00C0 0004             		lea ($C00004).l,a5
00004ABC 43F8 C800                  		lea ($FFFFC800).w,a1
00004AC0                            ; loc_14B6:
00004AC0                            ProcessDMAQueue_Loop:
00004AC0 3019                       		move.w (a1)+,d0
00004AC2 6700                       		beq.s ProcessDMAQueue_Done ; branch if we reached a stop token
00004AC4                            		; issue a set of VDP commands...
00004AC4 3A80                       		move.w d0,(a5) ; transfer length
00004AC6 3A99                       		move.w (a1)+,(a5) ; transfer length
00004AC8 3A99                       		move.w (a1)+,(a5) ; source address
00004ACA 3A99                       		move.w (a1)+,(a5) ; source address
00004ACC 3A99                       		move.w (a1)+,(a5) ; source address
00004ACE 3A99                       		move.w (a1)+,(a5) ; destination
00004AD0 3A99                       		move.w (a1)+,(a5) ; destination
00004AD2 B2FC C8FC                  		cmpa.w #$C8FC,a1
00004AD6 66E8                       		bne.s ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00004AD8                            ; loc_14CE:
00004AD8                            ProcessDMAQueue_Done:
00004AD8 31FC 0000 C800             		move.w #0,($FFFFC800).w
00004ADE 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
00004AE6 4E75                       		rts
00004AE8                            ; End of function ProcessDMAQueue
00004AE8                            
00004AE8                            ; ---------------------------------------------------------------------------
00004AE8                            ; Pallet cycling routine - special stage
00004AE8                            ; ---------------------------------------------------------------------------
00004AE8                            
00004AE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004AE8                            
00004AE8                            
00004AE8                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004AE8 4A78 F63A                  		tst.w	($FFFFF63A).w
00004AEC 6600                       		bne.s	locret_49E6
00004AEE 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004AF2 6A00                       		bpl.s	locret_49E6
00004AF4 4DF9 00C0 0004             		lea	($C00004).l,a6
00004AFA 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004AFE 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004B02 0240 001F                  		andi.w	#$1F,d0
00004B06 E548                       		lsl.w	#2,d0
00004B08 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004B0E D0C0                       		adda.w	d0,a0
00004B10 1018                       		move.b	(a0)+,d0
00004B12 6A00                       		bpl.s	loc_4992
00004B14 303C 01FF                  		move.w	#$1FF,d0
00004B18                            
00004B18                            loc_4992:
00004B18 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004B1C 7000                       		moveq	#0,d0
00004B1E 1018                       		move.b	(a0)+,d0
00004B20 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004B24 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004B2A 43F1 0000                  		lea	(a1,d0.w),a1
00004B2E 303C 8200                  		move.w	#-$7E00,d0
00004B32 1019                       		move.b	(a1)+,d0
00004B34 3C80                       		move.w	d0,(a6)
00004B36 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004B3A 303C 8400                  		move.w	#-$7C00,d0
00004B3E 1018                       		move.b	(a0)+,d0
00004B40 3C80                       		move.w	d0,(a6)
00004B42 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004B4C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004B54 7000                       		moveq	#0,d0
00004B56 1018                       		move.b	(a0)+,d0
00004B58 6B00                       		bmi.s	loc_49E8
00004B5A 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004B60 D2C0                       		adda.w	d0,a1
00004B62 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004B66 24D9                       		move.l	(a1)+,(a2)+
00004B68 24D9                       		move.l	(a1)+,(a2)+
00004B6A 24D9                       		move.l	(a1)+,(a2)+
00004B6C                            
00004B6C                            locret_49E6:
00004B6C 4E75                       		rts	
00004B6E                            ; ===========================================================================
00004B6E                            
00004B6E                            loc_49E8:				; XREF: PalCycle_SS
00004B6E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004B72 0C40 008A                  		cmpi.w	#$8A,d0
00004B76 6500                       		bcs.s	loc_49F4
00004B78 5241                       		addq.w	#1,d1
00004B7A                            
00004B7A                            loc_49F4:
00004B7A C2FC 002A                  		mulu.w	#$2A,d1
00004B7E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004B84 D2C1                       		adda.w	d1,a1
00004B86 0240 007F                  		andi.w	#$7F,d0
00004B8A 0880 0000                  		bclr	#0,d0
00004B8E 6700                       		beq.s	loc_4A18
00004B90 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004B94 24D1                       		move.l	(a1),(a2)+
00004B96 24E9 0004                  		move.l	4(a1),(a2)+
00004B9A 24E9 0008                  		move.l	8(a1),(a2)+
00004B9E                            
00004B9E                            loc_4A18:
00004B9E D2FC 000C                  		adda.w	#$C,a1
00004BA2 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004BA6 0C40 000A                  		cmpi.w	#$A,d0
00004BAA 6500                       		bcs.s	loc_4A2E
00004BAC 0440 000A                  		subi.w	#$A,d0
00004BB0 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004BB4                            
00004BB4                            loc_4A2E:
00004BB4 3200                       		move.w	d0,d1
00004BB6 D040                       		add.w	d0,d0
00004BB8 D041                       		add.w	d1,d0
00004BBA D2C0                       		adda.w	d0,a1
00004BBC 24D9                       		move.l	(a1)+,(a2)+
00004BBE 34D9                       		move.w	(a1)+,(a2)+
00004BC0 4E75                       		rts	
00004BC2                            ; End of function PalCycle_SS
00004BC2                            
00004BC2                            ; ===========================================================================
00004BC2 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004BD2                            					; XREF: PalCycle_SS
00004BD2 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004BE2 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004BF2 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004C02 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004C12 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004C22 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004C32 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004C42                            		even
00004C42 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004C50                            					; XREF: PalCycle_SS
00004C50                            		even
00004C50                            
00004C50                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004C98                            		even
00004C98                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004D6A                            		even
00004D6A                            
00004D6A                            ; ---------------------------------------------------------------------------
00004D6A                            ; Subroutine to	make the special stage background animated
00004D6A                            ; ---------------------------------------------------------------------------
00004D6A                            
00004D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D6A                            
00004D6A                            
00004D6A                            SS_BGAnimate:				; XREF: SpecialStage
00004D6A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004D6E 6600                       		bne.s	loc_4BF6
00004D70 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004D76 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004D7C                            
00004D7C                            loc_4BF6:
00004D7C 0C40 0008                  		cmpi.w	#8,d0
00004D80 6400                       		bcc.s	loc_4C4E
00004D82 0C40 0006                  		cmpi.w	#6,d0
00004D86 6600                       		bne.s	loc_4C10
00004D88 5278 F718                  		addq.w	#1,($FFFFF718).w
00004D8C 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004D90 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004D96                            
00004D96                            loc_4C10:
00004D96 7000                       		moveq	#0,d0
00004D98 3038 F708                  		move.w	($FFFFF708).w,d0
00004D9C 4440                       		neg.w	d0
00004D9E 4840                       		swap	d0
00004DA0 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004DA6 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004DAA 7609                       		moveq	#9,d3
00004DAC                            
00004DAC                            loc_4C26:
00004DAC 302B 0002                  		move.w	2(a3),d0
00004DB0 6100 DC1A                  		bsr.w	CalcSine
00004DB4 7400                       		moveq	#0,d2
00004DB6 1419                       		move.b	(a1)+,d2
00004DB8 C1C2                       		muls.w	d2,d0
00004DBA E080                       		asr.l	#8,d0
00004DBC 36C0                       		move.w	d0,(a3)+
00004DBE 1419                       		move.b	(a1)+,d2
00004DC0 4882                       		ext.w	d2
00004DC2 D55B                       		add.w	d2,(a3)+
00004DC4 51CB FFE6                  		dbf	d3,loc_4C26
00004DC8 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004DCC 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004DD2 6000                       		bra.s	loc_4C7E
00004DD4                            ; ===========================================================================
00004DD4                            
00004DD4                            loc_4C4E:				; XREF: SS_BGAnimate
00004DD4 0C40 000C                  		cmpi.w	#$C,d0
00004DD8 6600                       		bne.s	loc_4C74
00004DDA 5378 F718                  		subq.w	#1,($FFFFF718).w
00004DDE 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004DE2 243C 0001 8000             		move.l	#$18000,d2
00004DE8 7206                       		moveq	#6,d1
00004DEA                            
00004DEA                            loc_4C64:
00004DEA 2013                       		move.l	(a3),d0
00004DEC 9082                       		sub.l	d2,d0
00004DEE 26C0                       		move.l	d0,(a3)+
00004DF0 0482 0000 2000             		subi.l	#$2000,d2
00004DF6 51C9 FFF2                  		dbf	d1,loc_4C64
00004DFA                            
00004DFA                            loc_4C74:
00004DFA 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004DFE 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004E04                            
00004E04                            loc_4C7E:
00004E04 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004E08 3038 F718                  		move.w	($FFFFF718).w,d0
00004E0C 4440                       		neg.w	d0
00004E0E 4840                       		swap	d0
00004E10 7600                       		moveq	#0,d3
00004E12 161A                       		move.b	(a2)+,d3
00004E14 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004E18 4442                       		neg.w	d2
00004E1A 0242 00FF                  		andi.w	#$FF,d2
00004E1E E54A                       		lsl.w	#2,d2
00004E20                            
00004E20                            loc_4C9A:
00004E20 301B                       		move.w	(a3)+,d0
00004E22 544B                       		addq.w	#2,a3
00004E24 7200                       		moveq	#0,d1
00004E26 121A                       		move.b	(a2)+,d1
00004E28 5341                       		subq.w	#1,d1
00004E2A                            
00004E2A                            loc_4CA4:
00004E2A 2380 2000                  		move.l	d0,(a1,d2.w)
00004E2E 5842                       		addq.w	#4,d2
00004E30 0242 03FC                  		andi.w	#$3FC,d2
00004E34 51C9 FFF4                  		dbf	d1,loc_4CA4
00004E38 51CB FFE6                  		dbf	d3,loc_4C9A
00004E3C 4E75                       		rts	
00004E3E                            ; End of function SS_BGAnimate
00004E3E                            
00004E3E                            ; ===========================================================================
00004E3E 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004E4A                            		even
00004E4A 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004E52                            		even
00004E52 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004E66                            		even
00004E66                            					; XREF: SS_BGAnimate
00004E66                            ; ===========================================================================
00004E66                            
00004E66                            ; ---------------------------------------------------------------------------
00004E66                            ; Continue screen
00004E66                            ; ---------------------------------------------------------------------------
00004E66                            
00004E66                            ContinueScreen:				; XREF: GameModeArray
00004E66 6100 CFF8                  		bsr.w	Pal_FadeFrom
00004E6A 46FC 2700                  		move	#$2700,sr
00004E6E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004E72 0200 00BF                  		andi.b	#$BF,d0
00004E76 33C0 00C0 0004             		move.w	d0,($C00004).l
00004E7C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E82 3CBC 8004                  		move.w	#$8004,(a6)
00004E86 3CBC 8700                  		move.w	#$8700,(a6)
00004E8A 6100 C244                  		bsr.w	ClearScreen
00004E8E 43F8 D000                  		lea	($FFFFD000).w,a1
00004E92 7000                       		moveq	#0,d0
00004E94 323C 07FF                  		move.w	#$7FF,d1
00004E98                            
00004E98                            Cont_ClrObjRam:
00004E98 22C0                       		move.l	d0,(a1)+
00004E9A 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004E9E                            
00004E9E 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00004EA8 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00004EAE 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
00004EB4 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
00004EB8 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004EC2 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004EC8 6100 C41E                  		bsr.w	NemDec
00004ECC 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004ED6 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004EDC 6100 C40A                  		bsr.w	NemDec
00004EE0 720A                       		moveq	#10,d1
00004EE2 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004EE8 7012                       		moveq	#$12,d0
00004EEA 6100 D1FA                  		bsr.w	PalLoad1	; load continue	screen pallet
00004EEE 103C 0090                  		move.b	#$90,d0
00004EF2 6100 C2FC                  		bsr.w	PlaySound	; play continue	music
00004EF6 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004EFC 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00004F02 42B8 F700                  		clr.l	($FFFFF700).w
00004F06 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004F0E 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004F14 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004F1A 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004F20 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004F26 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004F2C 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004F32 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004F38 11FC 0000 FFD0             		move.b    #0,($FFFFFFD0).w
00004F3E 4EB9 0000 0000             		jsr	ObjectsLoad
00004F44 4EB9 0000 0000             		jsr	BuildSprites
00004F4A 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004F4E 0000 0040                  		ori.b	#$40,d0
00004F52 33C0 00C0 0004             		move.w	d0,($C00004).l
00004F58 6100 CE84                  		bsr.w	Pal_FadeTo
00004F5C                            
00004F5C                            ; ---------------------------------------------------------------------------
00004F5C                            ; Continue screen main loop
00004F5C                            ; ---------------------------------------------------------------------------
00004F5C                            
00004F5C                            Cont_MainLoop:
00004F5C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004F62 6100 DA36                  		bsr.w	DelayProgram
00004F66 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F6C 6400                       		bcc.s	loc_4DF2
00004F6E 46FC 2700                  		move	#$2700,sr
00004F72 3238 F614                  		move.w	($FFFFF614).w,d1
00004F76 82FC 003C                  		divu.w	#$3C,d1
00004F7A 0281 0000 000F             		andi.l	#$F,d1
00004F80 4EB9 0000 0000             		jsr	ContScrCounter
00004F86 46FC 2300                  		move	#$2300,sr
00004F8A                            
00004F8A                            loc_4DF2:
00004F8A 4EB9 0000 0000             		jsr	ObjectsLoad
00004F90 4EB9 0000 0000             		jsr	BuildSprites
00004F96 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004F9C 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004F9E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004FA4 64B6                       		bcc.s	Cont_MainLoop
00004FA6 0C78 0100 F614             		cmpi.w	#$100,($FFFFF614).w
00004FAC 6E00 FFAE                  		bgt.w	Cont_MainLoop
00004FB0 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00004FB6 0C78 0040 F614             		cmpi.w	#$40,($FFFFF614).w
00004FBC 6E00 FF9E                  		bgt.w	Cont_MainLoop
00004FC0 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
00004FC6 4A78 F614                  		tst.w	($FFFFF614).w
00004FCA 6600 FF90                  		bne.w	Cont_MainLoop
00004FCE 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00004FD4 4E75                       		rts	
00004FD6                            ; ===========================================================================
00004FD6                            
00004FD6                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004FD6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004FDC 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004FE2 7000                       		moveq	#0,d0
00004FE4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004FE8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004FEC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004FF0 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004FF4 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004FF8 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
00005000 4E75                       		rts	
00005002                            ; ===========================================================================
00005002                            
00005002                            ; ---------------------------------------------------------------------------
00005002                            ; Object 80 - Continue screen elements
00005002                            ; ---------------------------------------------------------------------------
00005002                            
00005002                            Obj80:					; XREF: Obj_Index
00005002 7000                       		moveq	#0,d0
00005004 1028 0024                  		move.b	$24(a0),d0
00005008 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000500C 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005010                            ; ===========================================================================
00005010 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005012 0000                       		dc.w Obj80_Display-Obj80_Index
00005014 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005016 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005018                            ; ===========================================================================
00005018                            
00005018                            Obj80_Main:				; XREF: Obj80_Index
00005018 5428 0024                  		addq.b	#2,$24(a0)
0000501C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005024 317C 8500 0002             		move.w	#$8500,2(a0)
0000502A 117C 0000 0001             		move.b	#0,1(a0)
00005030 117C 003C 0019             		move.b	#$3C,$19(a0)
00005036 317C 0120 0008             		move.w	#$120,8(a0)
0000503C 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005042 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005048                            
00005048                            Obj80_Display:				; XREF: Obj80_Index
00005048 4EF9 0000 0000             		jmp	DisplaySprite
0000504E                            ; ===========================================================================
0000504E                            Obj80_MiniSonicPos:
0000504E 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005060 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000506C                            ; ===========================================================================
0000506C                            
0000506C                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000506C 2248                       		movea.l	a0,a1
0000506E 45F9 0000 504E             		lea	(Obj80_MiniSonicPos).l,a2
00005074 7200                       		moveq	#0,d1
00005076 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000507A 5501                       		subq.b	#2,d1
0000507C 6400                       		bcc.s	loc_4EC4
0000507E 4EF9 0000 0000             		jmp	DeleteObject
00005084                            ; ===========================================================================
00005084                            
00005084                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005084 7601                       		moveq	#1,d3
00005086 0C01 000E                  		cmpi.b	#$E,d1
0000508A 6500                       		bcs.s	loc_4ED0
0000508C 7600                       		moveq	#0,d3
0000508E 720E                       		moveq	#$E,d1
00005090                            
00005090                            loc_4ED0:
00005090 1401                       		move.b	d1,d2
00005092 0202 0001                  		andi.b	#1,d2
00005096                            
00005096                            Obj80_MiniSonLoop:
00005096 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000509A 335A 0008                  		move.w	(a2)+,8(a1)
0000509E 4A02                       		tst.b	d2
000050A0 6700                       		beq.s	loc_4EEA
000050A2 0469 000A 0008             		subi.w	#$A,8(a1)
000050A8                            
000050A8                            loc_4EEA:
000050A8 337C 00D0 000A             		move.w	#$D0,$A(a1)
000050AE 137C 0006 001A             		move.b	#6,$1A(a1)
000050B4 137C 0006 0024             		move.b	#6,$24(a1)
000050BA 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000050C2 337C 8551 0002             		move.w	#$8551,2(a1)
000050C8 137C 0000 0001             		move.b	#0,1(a1)
000050CE 43E9 0040                  		lea	$40(a1),a1
000050D2 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000050D6 43E9 FFC0                  		lea	-$40(a1),a1
000050DA 1343 0028                  		move.b	d3,$28(a1)
000050DE                            
000050DE                            Obj80_ChkType:				; XREF: Obj80_Index
000050DE 4A28 0028                  		tst.b	$28(a0)
000050E2 6700                       		beq.s	loc_4F40
000050E4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000050EA 6500                       		bcs.s	loc_4F40
000050EC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000050F0 0200 0001                  		andi.b	#1,d0
000050F4 6600                       		bne.s	loc_4F40
000050F6 4A78 D010                  		tst.w	($FFFFD010).w
000050FA 6600                       		bne.s	Obj80_Delete
000050FC 4E75                       		rts	
000050FE                            ; ===========================================================================
000050FE                            
000050FE                            loc_4F40:				; XREF: Obj80_ChkType
000050FE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005102 0200 000F                  		andi.b	#$F,d0
00005106 6600                       		bne.s	Obj80_Display2
00005108 0868 0000 001A             		bchg	#0,$1A(a0)
0000510E                            
0000510E                            Obj80_Display2:
0000510E 4EF9 0000 0000             		jmp	DisplaySprite
00005114                            ; ===========================================================================
00005114                            
00005114                            Obj80_Delete:				; XREF: Obj80_ChkType
00005114 4EF9 0000 0000             		jmp	DeleteObject
0000511A                            ; ===========================================================================
0000511A                            
0000511A                            ; ---------------------------------------------------------------------------
0000511A                            ; Object 81 - Sonic on the continue screen
0000511A                            ; ---------------------------------------------------------------------------
0000511A                            
0000511A                            Obj81:					; XREF: Obj_Index
0000511A 7000                       		moveq	#0,d0
0000511C 1028 0024                  		move.b	$24(a0),d0
00005120 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005124 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005128 4EF9 0000 0000             		jmp	DisplaySprite
0000512E                            ; ===========================================================================
0000512E 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005130 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005132 0000                       		dc.w Obj81_Animate-Obj81_Index
00005134 0000                       		dc.w Obj81_Run-Obj81_Index
00005136                            ; ===========================================================================
00005136                            
00005136                            Obj81_Main:				; XREF: Obj81_Index
00005136 5428 0024                  		addq.b	#2,$24(a0)
0000513A 317C 00A0 0008             		move.w	#$A0,8(a0)
00005140 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005146 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000514E 317C 0780 0002             		move.w	#$780,2(a0)
00005154 117C 0004 0001             		move.b	#4,1(a0)
0000515A 117C 0002 0018             		move.b	#2,$18(a0)
00005160 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005166 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000516C                            
0000516C                            Obj81_ChkLand:				; XREF: Obj81_Index
0000516C 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005172 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005174 5428 0024                  		addq.b	#2,$24(a0)
00005178 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000517C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005184 317C 8500 0002             		move.w	#$8500,2(a0)
0000518A 117C 0000 001C             		move.b	#0,$1C(a0)
00005190 6000                       		bra.s	Obj81_Animate
00005192                            ; ===========================================================================
00005192                            
00005192                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005192 4EB9 0000 0000             		jsr	SpeedToPos
00005198 4EB9 0000 0000             		jsr	Sonic_Animate
0000519E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000051A4                            ; ===========================================================================
000051A4                            
000051A4                            Obj81_Animate:				; XREF: Obj81_Index
000051A4 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000051A8 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000051AA 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000051B0 4EF9 0000 0000             		jmp	AnimateSprite
000051B6                            ; ===========================================================================
000051B6                            
000051B6                            Obj81_GetUp:				; XREF: Obj81_Animate
000051B6 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
000051BC 5428 0024                  		addq.b	#2,$24(a0)
000051C0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000051C8 317C 0780 0002             		move.w	#$780,2(a0)
000051CE 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000051D4 4268 0020                  		clr.w	$20(a0)
000051D8 5168 000C                  		subq.w	#8,$C(a0)
000051DC 103C 00E0                  		move.b	#$E0,d0
000051E0 6100 C014                  		bsr.w	PlaySound_Special ; fade out music
000051E4                            
000051E4                            Obj81_Run:				; XREF: Obj81_Index
000051E4 0C68 0800 0020             		cmpi.w	#$800,$20(a0)	; check	Sonic's "run speed" (not moving)
000051EA 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000051EC 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000051F2 6000                       		bra.s	Obj81_ShowRun
000051F4                            ; ===========================================================================
000051F4                            
000051F4                            Obj81_AddSpeed:				; XREF: Obj81_Run
000051F4 0668 0020 0020             		addi.w	#$20,$20(a0)	; increase "run	speed"
000051FA                            
000051FA                            Obj81_ShowRun:				; XREF: Obj81_Run
000051FA 4EB9 0000 0000             		jsr	SpeedToPos
00005200 4EB9 0000 0000             		jsr	Sonic_Animate
00005206 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000520C                            ; ===========================================================================
0000520C                            Ani_obj81:
0000520C                            	include "_anim\obj81.asm"
0000520C                            ; ---------------------------------------------------------------------------
0000520C                            ; Animation script - Sonic on the continue screen
0000520C                            ; ---------------------------------------------------------------------------
0000520C 0000                       		dc.w byte_504A-Ani_obj81
0000520E 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000521A 00                         		even
0000521A 00                         		even
0000521A                            
0000521A                            ; ---------------------------------------------------------------------------
0000521A                            ; Sprite mappings - Continue screen
0000521A                            ; ---------------------------------------------------------------------------
0000521A                            Map_obj80:
0000521A                            	include "_maps\obj80.asm"
0000521A                            ; ---------------------------------------------------------------------------
0000521A                            ; Sprite mappings - Continue screen
0000521A                            ; ---------------------------------------------------------------------------
0000521A 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000521E 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005222 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005226 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000522A 0B                         byte_5066:	dc.b $B
0000522B F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005230 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005235 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000523A F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000523F F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005244 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005249 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000524E F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005253 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005258 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000525D 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005262 03                         byte_509E:	dc.b 3
00005263 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005268 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000526D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005272 03                         byte_50AE:	dc.b 3
00005273 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005278 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000527D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005282 03                         byte_50BE:	dc.b 3
00005283 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005288 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000528D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005292 02                         byte_50CE:	dc.b 2
00005293 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005298 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000529D 01                         byte_50D9:	dc.b 1
0000529E 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000052A3 01                         byte_50DF:	dc.b 1
000052A4 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000052AA 00                         		even
000052AA 00                         		even
000052AA                            
000052AA                            ; ===========================================================================
000052AA                            ; ---------------------------------------------------------------------------
000052AA                            ; Ending sequence in Green Hill	Zone
000052AA                            ; ---------------------------------------------------------------------------
000052AA                            
000052AA                            EndingSequence:				; XREF: GameModeArray
000052AA 103C 00E4                  		move.b	#$E4,d0
000052AE 6100 BF46                  		bsr.w	PlaySound_Special ; stop music
000052B2 6100 CBAC                  		bsr.w	Pal_FadeFrom
000052B6 43F8 D000                  		lea	($FFFFD000).w,a1
000052BA 7000                       		moveq	#0,d0
000052BC 323C 07FF                  		move.w	#$7FF,d1
000052C0                            
000052C0                            End_ClrObjRam:
000052C0 22C0                       		move.l	d0,(a1)+
000052C2 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000052C6                            
000052C6 43F8 F628                  		lea	($FFFFF628).w,a1
000052CA 7000                       		moveq	#0,d0
000052CC 323C 0015                  		move.w	#$15,d1
000052D0                            
000052D0                            End_ClrRam:
000052D0 22C0                       		move.l	d0,(a1)+
000052D2 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000052D6                            
000052D6 43F8 F700                  		lea	($FFFFF700).w,a1
000052DA 7000                       		moveq	#0,d0
000052DC 323C 003F                  		move.w	#$3F,d1
000052E0                            
000052E0                            End_ClrRam2:
000052E0 22C0                       		move.l	d0,(a1)+
000052E2 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000052E6                            
000052E6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000052EA 7000                       		moveq	#0,d0
000052EC 323C 0047                  		move.w	#$47,d1
000052F0                            
000052F0                            End_ClrRam3:
000052F0 22C0                       		move.l	d0,(a1)+
000052F2 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000052F6                            
000052F6 46FC 2700                  		move	#$2700,sr
000052FA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000052FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005304 6100 BDCA                  		bsr.w	ClearScreen
00005308 4DF9 00C0 0004             		lea	($C00004).l,a6
0000530E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005312 3CBC 8230                  		move.w	#$8230,(a6)
00005316 3CBC 8407                  		move.w	#$8407,(a6)
0000531A 3CBC 857C                  		move.w	#$857C,(a6)
0000531E 3CBC 9001                  		move.w	#$9001,(a6)
00005322 3CBC 8004                  		move.w	#$8004,(a6)
00005326 3CBC 8720                  		move.w	#$8720,(a6)
0000532A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005330 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005334 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000533A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005340 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005346 6700                       		beq.s	End_LoadData	; if yes, branch
00005348 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000534E                            
0000534E                            End_LoadData:
0000534E 701C                       		moveq	#$1C,d0
00005350 6100 C24E                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005354 4EB9 0000 0000             		jsr	Hud_Base
0000535A 6100 0000                  		bsr.w	LevelSizeLoad
0000535E 6100 0000                  		bsr.w	DeformBgLayer
00005362 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005368 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
0000536C 6100 0000                  		bsr.w	MainLoadBlockLoad
00005370 6100 0000                  		bsr.w	LoadTilesFromStart
00005374 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000537C 46FC 2300                  		move	#$2300,sr
00005380 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005386 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000538A 6100 C3C4                  		bsr.w	KosDec
0000538E 7003                       		moveq	#3,d0
00005390 6100 CD54                  		bsr.w	PalLoad1	; load Sonic's pallet
00005394 303C 008B                  		move.w	#$8B,d0
00005398 6100 BE56                  		bsr.w	PlaySound	; play ending sequence music
0000539C 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000053A2 6700                       		beq.s	End_LoadSonic	; if not, branch
000053A4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000053AA                            
000053AA                            End_LoadSonic:
000053AA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000053B0 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000053B6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000053BC 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000053C2 31FC F800 D020             		move.w	#$F800,($FFFFD020).w ; set Sonic's speed
000053C8 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000053CE 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
000053D4 4EB9 0000 0000             		jsr	ObjPosLoad
000053DA 4EB9 0000 0000             		jsr	ObjectsLoad
000053E0 4EB9 0000 0000             		jsr	BuildSprites
000053E6 7000                       		moveq	#0,d0
000053E8 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000053EC 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000053F0 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000053F4 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000053F8 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000053FC 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005400 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005404 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005408 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000540C 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005410 6100 EDE6                  		bsr.w	OscillateNumInit
00005414 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000541A 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005420 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005426 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000542C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005432 6100 D566                  		bsr.w	DelayProgram
00005436 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000543A 0000 0040                  		ori.b	#$40,d0
0000543E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005444 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000544A 6100 C992                  		bsr.w	Pal_FadeTo
0000544E                            
0000544E                            ; ---------------------------------------------------------------------------
0000544E                            ; Main ending sequence loop
0000544E                            ; ---------------------------------------------------------------------------
0000544E                            
0000544E                            End_MainLoop:
0000544E 6100 BDB2                  		bsr.w	PauseGame
00005452 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005458 6100 D540                  		bsr.w	DelayProgram
0000545C 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005460 6100 0000                  		bsr.w	End_MoveSonic
00005464 4EB9 0000 0000             		jsr	ObjectsLoad
0000546A 6100 0000                  		bsr.w	DeformBgLayer
0000546E 4EB9 0000 0000             		jsr	BuildSprites
00005474 4EB9 0000 0000             		jsr	ObjPosLoad
0000547A 6100 C4F2                  		bsr.w	PalCycle_Load
0000547E 6100 EDCE                  		bsr.w	OscillateNumDo
00005482 6100 EE5A                  		bsr.w	ChangeRingFrame
00005486 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000548C 6700                       		beq.s	loc_52DA	; if yes, branch
0000548E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005494 103C 0091                  		move.b	#$91,d0
00005498 6100 BD5C                  		bsr.w	PlaySound_Special ; play credits music
0000549C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000054A2 4E75                       		rts	
000054A4                            ; ===========================================================================
000054A4                            
000054A4                            loc_52DA:
000054A4 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000054A8 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000054AC                            
000054AC 4278 FE02                  		clr.w	($FFFFFE02).w
000054B0 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000054B6 4278 F794                  		clr.w	($FFFFF794).w
000054BA                            
000054BA                            End_AllEmlds:				; XREF: loc_5334
000054BA 6100 BD46                  		bsr.w	PauseGame
000054BE 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000054C4 6100 D4D4                  		bsr.w	DelayProgram
000054C8 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000054CC 6100 0000                  		bsr.w	End_MoveSonic
000054D0 4EB9 0000 0000             		jsr	ObjectsLoad
000054D6 6100 0000                  		bsr.w	DeformBgLayer
000054DA 4EB9 0000 0000             		jsr	BuildSprites
000054E0 4EB9 0000 0000             		jsr	ObjPosLoad
000054E6 6100 ED66                  		bsr.w	OscillateNumDo
000054EA 6100 EDF2                  		bsr.w	ChangeRingFrame
000054EE 5378 F794                  		subq.w	#1,($FFFFF794).w
000054F2 6A00                       		bpl.s	loc_5334
000054F4 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000054FA 6100 CA8A                  		bsr.w	Pal_ToWhite
000054FE                            
000054FE                            loc_5334:
000054FE 4A78 FE02                  		tst.w	($FFFFFE02).w
00005502 6700 FFB6                  		beq.w	End_AllEmlds
00005506 4278 FE02                  		clr.w	($FFFFFE02).w
0000550A 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005510 4BF9 00C0 0004             		lea	($C00004).l,a5
00005516 4DF9 00C0 0000             		lea	($C00000).l,a6
0000551C 47F8 F700                  		lea	($FFFFF700).w,a3
00005520 49F8 A400                  		lea	($FFFFA400).w,a4
00005524 343C 4000                  		move.w	#$4000,d2
00005528 6100 0000                  		bsr.w	LoadTilesFromStart2
0000552C 7013                       		moveq	#$13,d0
0000552E 6100 CBB6                  		bsr.w	PalLoad1	; load ending pallet
00005532 6100 C9AA                  		bsr.w	Pal_MakeWhite
00005536 6000 FF16                  		bra.w	End_MainLoop
0000553A                            
0000553A                            ; ---------------------------------------------------------------------------
0000553A                            ; Subroutine controlling Sonic on the ending sequence
0000553A                            ; ---------------------------------------------------------------------------
0000553A                            
0000553A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000553A                            
0000553A                            
0000553A                            End_MoveSonic:				; XREF: End_MainLoop
0000553A 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000553E 6600                       		bne.s	End_MoveSonic2
00005540 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005546 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005548 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000554C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005552 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005558 4E75                       		rts	
0000555A                            ; ===========================================================================
0000555A                            
0000555A                            End_MoveSonic2:				; XREF: End_MoveSonic
0000555A 5500                       		subq.b	#2,d0
0000555C 6600                       		bne.s	End_MoveSonic3
0000555E 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005564 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005566 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000556A 7000                       		moveq	#0,d0
0000556C 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005570 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005574 31C0 D020                  		move.w	d0,($FFFFD020).w
00005578 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
0000557E 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005584 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000558A 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005590 4E75                       		rts	
00005592                            ; ===========================================================================
00005592                            
00005592                            End_MoveSonic3:				; XREF: End_MoveSonic
00005592 5500                       		subq.b	#2,d0
00005594 6600                       		bne.s	End_MoveSonExit
00005596 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000559A 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000055A0 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000055A6 4278 D024                  		clr.w	($FFFFD024).w
000055AA                            
000055AA                            End_MoveSonExit:
000055AA 4E75                       		rts	
000055AC                            ; End of function End_MoveSonic
000055AC                            
000055AC                            ; ===========================================================================
000055AC                            ; ---------------------------------------------------------------------------
000055AC                            ; Object 87 - Sonic on ending sequence
000055AC                            ; ---------------------------------------------------------------------------
000055AC                            
000055AC                            Obj87:					; XREF: Obj_Index
000055AC 7000                       		moveq	#0,d0
000055AE 1028 0025                  		move.b	$25(a0),d0
000055B2 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000055B6 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000055BA 4EF9 0000 0000             		jmp	DisplaySprite
000055C0                            ; ===========================================================================
000055C0 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000055C4 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000055C8 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000055CC 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000055D0 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000055D4                            ; ===========================================================================
000055D4                            
000055D4                            Obj87_Main:				; XREF: Obj87_Index
000055D4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000055DA 6700                       		beq.s	Obj87_Main2	; if yes, branch
000055DC 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000055E2 317C 00D8 0030             		move.w	#$D8,$30(a0)
000055E8 4E75                       		rts	
000055EA                            ; ===========================================================================
000055EA                            
000055EA                            Obj87_Main2:				; XREF: Obj87_Main
000055EA 5428 0025                  		addq.b	#2,$25(a0)
000055EE 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000055F6 317C 03E1 0002             		move.w	#$3E1,2(a0)
000055FC 117C 0004 0001             		move.b	#4,1(a0)
00005602 4228 0022                  		clr.b	$22(a0)
00005606 117C 0002 0018             		move.b	#2,$18(a0)
0000560C 117C 0000 001A             		move.b	#0,$1A(a0)
00005612 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005618                            
00005618                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005618 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000561C 6600                       		bne.s	Obj87_Wait
0000561E 5428 0025                  		addq.b	#2,$25(a0)
00005622 317C 0001 001C             		move.w	#1,$1C(a0)
00005628 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000562E                            
0000562E                            Obj87_Wait:
0000562E 4E75                       		rts	
00005630                            ; ===========================================================================
00005630                            
00005630                            Obj87_LookUp:				; XREF: Obj87_Index
00005630 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005638 6600                       		bne.s	locret_5480
0000563A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005640 317C 005A 0030             		move.w	#$5A,$30(a0)
00005646 5428 0025                  		addq.b	#2,$25(a0)
0000564A                            
0000564A                            locret_5480:
0000564A 4E75                       		rts	
0000564C                            ; ===========================================================================
0000564C                            
0000564C                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000564C 5368 0030                  		subq.w	#1,$30(a0)
00005650 6600                       		bne.s	Obj87_Wait2
00005652 43F8 D400                  		lea	($FFFFD400).w,a1
00005656 323C 00FF                  		move.w	#$FF,d1
0000565A                            
0000565A                            Obj87_ClrLoop:
0000565A 4299                       		clr.l	(a1)+
0000565C 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005660 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005666 5428 0025                  		addq.b	#2,$25(a0)
0000566A 117C 0001 001C             		move.b	#1,$1C(a0)
00005670 317C 003C 0030             		move.w	#$3C,$30(a0)
00005676                            
00005676                            Obj87_Wait2:
00005676 4E75                       		rts	
00005678                            ; ===========================================================================
00005678                            
00005678                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005678 5368 0030                  		subq.w	#1,$30(a0)
0000567C 6600                       		bne.s	Obj87_Wait3
0000567E 5428 0025                  		addq.b	#2,$25(a0)
00005682 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005688 117C 0002 001C             		move.b	#2,$1C(a0)
0000568E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005694                            
00005694                            Obj87_Wait3:
00005694 4E75                       		rts	
00005696                            ; ===========================================================================
00005696                            
00005696                            Obj87_Animate:				; XREF: Obj87_Index
00005696 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000569C 4EF9 0000 0000             		jmp	AnimateSprite
000056A2                            ; ===========================================================================
000056A2                            
000056A2                            Obj87_Leap:				; XREF: Obj87_Index
000056A2 5368 0030                  		subq.w	#1,$30(a0)
000056A6 6600                       		bne.s	Obj87_Wait4
000056A8 5428 0025                  		addq.b	#2,$25(a0)
000056AC 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000056B4 317C 03E1 0002             		move.w	#$3E1,2(a0)
000056BA 117C 0004 0001             		move.b	#4,1(a0)
000056C0 4228 0022                  		clr.b	$22(a0)
000056C4 117C 0002 0018             		move.b	#2,$18(a0)
000056CA 117C 0005 001A             		move.b	#5,$1A(a0)
000056D0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000056D6 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000056DC 60B8                       		bra.s	Obj87_Animate
000056DE                            ; ===========================================================================
000056DE                            
000056DE                            Obj87_Wait4:				; XREF: Obj87_Leap
000056DE 4E75                       		rts	
000056E0                            ; ===========================================================================
000056E0                            Ani_obj87:
000056E0                            	include "_anim\obj87.asm"
000056E0                            ; ---------------------------------------------------------------------------
000056E0                            ; Animation script - Sonic on the ending sequence
000056E0                            ; ---------------------------------------------------------------------------
000056E0 0000                       		dc.w byte_551C-Ani_obj87
000056E2 0000                       		dc.w byte_552A-Ani_obj87
000056E4 0000                       		dc.w byte_5534-Ani_obj87
000056E6 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000056F4 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000056FE 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005706                            		even
00005706                            		even
00005706                            
00005706                            ; ===========================================================================
00005706                            ; ---------------------------------------------------------------------------
00005706                            ; Object 88 - chaos emeralds on	the ending sequence
00005706                            ; ---------------------------------------------------------------------------
00005706                            
00005706                            Obj88:					; XREF: Obj_Index
00005706 7000                       		moveq	#0,d0
00005708 1028 0024                  		move.b	$24(a0),d0
0000570C 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005710 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005714 4EF9 0000 0000             		jmp	DisplaySprite
0000571A                            ; ===========================================================================
0000571A 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000571C 0000                       		dc.w Obj88_Move-Obj88_Index
0000571E                            ; ===========================================================================
0000571E                            
0000571E                            Obj88_Main:				; XREF: Obj88_Index
0000571E 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005724 6700                       		beq.s	Obj88_Main2
00005726 588F                       		addq.l	#4,sp
00005728 4E75                       		rts	
0000572A                            ; ===========================================================================
0000572A                            
0000572A                            Obj88_Main2:				; XREF: Obj88_Main
0000572A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005730 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005736 2248                       		movea.l	a0,a1
00005738 7600                       		moveq	#0,d3
0000573A 7401                       		moveq	#1,d2
0000573C 7205                       		moveq	#5,d1
0000573E                            
0000573E                            Obj88_MainLoop:
0000573E 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005742 5429 0024                  		addq.b	#2,$24(a1)
00005746 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000574E 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005754 137C 0004 0001             		move.b	#4,1(a1)
0000575A 137C 0001 0018             		move.b	#1,$18(a1)
00005760 3368 0008 0038             		move.w	8(a0),$38(a1)
00005766 3368 000C 003A             		move.w	$C(a0),$3A(a1)
0000576C 1342 001C                  		move.b	d2,$1C(a1)
00005770 1342 001A                  		move.b	d2,$1A(a1)
00005774 5202                       		addq.b	#1,d2
00005776 1343 0026                  		move.b	d3,$26(a1)
0000577A 0603 002A                  		addi.b	#$2A,d3
0000577E 43E9 0040                  		lea	$40(a1),a1
00005782 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005786                            
00005786                            Obj88_Move:				; XREF: Obj88_Index
00005786 3028 003E                  		move.w	$3E(a0),d0
0000578A D168 0026                  		add.w	d0,$26(a0)
0000578E 1028 0026                  		move.b	$26(a0),d0
00005792 4EB9 0000 29CC             		jsr	(CalcSine).l
00005798 7800                       		moveq	#0,d4
0000579A 1828 003C                  		move.b	$3C(a0),d4
0000579E C3C4                       		muls.w	d4,d1
000057A0 E081                       		asr.l	#8,d1
000057A2 C1C4                       		muls.w	d4,d0
000057A4 E080                       		asr.l	#8,d0
000057A6 D268 0038                  		add.w	$38(a0),d1
000057AA D068 003A                  		add.w	$3A(a0),d0
000057AE 3141 0008                  		move.w	d1,8(a0)
000057B2 3140 000C                  		move.w	d0,$C(a0)
000057B6 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000057BC 6700                       		beq.s	loc_55FA
000057BE 0668 0020 003C             		addi.w	#$20,$3C(a0)
000057C4                            
000057C4                            loc_55FA:
000057C4 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000057CA 6700                       		beq.s	loc_5608
000057CC 0668 0020 003E             		addi.w	#$20,$3E(a0)
000057D2                            
000057D2                            loc_5608:
000057D2 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
000057D8 6700                       		beq.s	locret_5614
000057DA 5368 003A                  		subq.w	#1,$3A(a0)
000057DE                            
000057DE                            locret_5614:
000057DE 4E75                       		rts	
000057E0                            ; ===========================================================================
000057E0                            ; ---------------------------------------------------------------------------
000057E0                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000057E0                            ; ---------------------------------------------------------------------------
000057E0                            
000057E0                            Obj89:					; XREF: Obj_Index
000057E0 7000                       		moveq	#0,d0
000057E2 1028 0024                  		move.b	$24(a0),d0
000057E6 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
000057EA 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
000057EE                            ; ===========================================================================
000057EE 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
000057F0 0000                       		dc.w Obj89_Move-Obj89_Index
000057F2 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
000057F4                            ; ===========================================================================
000057F4                            
000057F4                            Obj89_Main:				; XREF: Obj89_Index
000057F4 5428 0024                  		addq.b	#2,$24(a0)
000057F8 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
000057FE 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005804 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000580C 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005812 117C 0000 0001             		move.b	#0,1(a0)
00005818 117C 0000 0018             		move.b	#0,$18(a0)
0000581E                            
0000581E                            Obj89_Move:				; XREF: Obj89_Index
0000581E 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005824 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005826 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000582C 4EF9 0000 0000             		jmp	DisplaySprite
00005832                            ; ===========================================================================
00005832                            
00005832                            Obj89_Delay:				; XREF: Obj89_Move
00005832 5428 0024                  		addq.b	#2,$24(a0)
00005836 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000583C                            
0000583C                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000583C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005840 6A00                       		bpl.s	Obj89_Display
00005842 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005848                            
00005848                            Obj89_Display:
00005848 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000584E                            ; ===========================================================================
0000584E                            ; ---------------------------------------------------------------------------
0000584E                            ; Sprite mappings - Sonic on the ending	sequence
0000584E                            ; ---------------------------------------------------------------------------
0000584E                            Map_obj87:
0000584E                            	include "_maps\obj87.asm"
0000584E                            ; ---------------------------------------------------------------------------
0000584E                            ; Sprite mappings - Sonic on the ending	sequence
0000584E                            ; ---------------------------------------------------------------------------
0000584E 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005852 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005856 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
0000585A 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000585E 02                         byte_5690:	dc.b 2
0000585F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005864 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005869 03                         byte_569B:	dc.b 3
0000586A FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000586F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005874 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005879 02                         byte_56AB:	dc.b 2
0000587A EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000587F FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005884 02                         byte_56B6:	dc.b 2
00005885 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000588A FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
0000588F 02                         byte_56C1:	dc.b 2
00005890 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005895 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000589A 03                         byte_56CC:	dc.b 3
0000589B EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000058A0 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000058A5 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000058AA 07                         byte_56DC:	dc.b 7
000058AB B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000058B0 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000058B5 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000058BA CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000058BF DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000058C4 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000058C9 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000058CE 18                         byte_5700:	dc.b $18
000058CF 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000058D4 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000058D9 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000058DE 980B 0098 30               		dc.b $98, $B, 0, $98, $30
000058E3 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
000058E8 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
000058ED 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
000058F2 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000058F7 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
000058FC B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005901 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005906 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000590B C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005910 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005915 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000591A D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000591F D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005924 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005929 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000592E E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005933 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005938 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000593D F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005942 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005948 00                         		even
00005948 00                         		even
00005948                            
00005948                            ; ---------------------------------------------------------------------------
00005948                            ; Sprite mappings - chaos emeralds on the ending sequence
00005948                            ; ---------------------------------------------------------------------------
00005948                            Map_obj88:
00005948                            	include "_maps\obj88.asm"
00005948                            ; ---------------------------------------------------------------------------
00005948                            ; Sprite mappings - chaos emeralds on the ending sequence
00005948                            ; ---------------------------------------------------------------------------
00005948 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000594C 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005950 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005954 0000                       		dc.w byte_57AC-Map_obj88
00005956 01                         byte_5788:	dc.b 1
00005957 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000595C 01                         byte_578E:	dc.b 1
0000595D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005962 01                         byte_5794:	dc.b 1
00005963 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005968 01                         byte_579A:	dc.b 1
00005969 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000596E 01                         byte_57A0:	dc.b 1
0000596F F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005974 01                         byte_57A6:	dc.b 1
00005975 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0000597A 01                         byte_57AC:	dc.b 1
0000597B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005980                            		even
00005980                            		even
00005980                            
00005980                            ; ---------------------------------------------------------------------------
00005980                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005980                            ; ---------------------------------------------------------------------------
00005980                            Map_obj89:
00005980                            	include "_maps\obj89.asm"
00005980                            ; ---------------------------------------------------------------------------
00005980                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005980                            ; ---------------------------------------------------------------------------
00005980 0000                       		dc.w byte_57B4-Map_obj89
00005982 03                         byte_57B4:	dc.b 3
00005983 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005988 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000598D F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005992                            		even
00005992                            		even
00005992                            
00005992                            ; ===========================================================================
00005992                            ; ---------------------------------------------------------------------------
00005992                            ; Credits ending sequence
00005992                            ; ---------------------------------------------------------------------------
00005992                            
00005992                            Credits:				; XREF: GameModeArray
00005992 6100 BAFE                  		bsr.w	ClearPLC
00005996 6100 C4C8                  		bsr.w	Pal_FadeFrom
0000599A 4DF9 00C0 0004             		lea	($C00004).l,a6
000059A0 3CBC 8004                  		move.w	#$8004,(a6)
000059A4 3CBC 8230                  		move.w	#$8230,(a6)
000059A8 3CBC 8407                  		move.w	#$8407,(a6)
000059AC 3CBC 9001                  		move.w	#$9001,(a6)
000059B0 3CBC 9200                  		move.w	#$9200,(a6)
000059B4 3CBC 8B03                  		move.w	#$8B03,(a6)
000059B8 3CBC 8720                  		move.w	#$8720,(a6)
000059BC 4238 F64E                  		clr.b	($FFFFF64E).w
000059C0 6100 B70E                  		bsr.w	ClearScreen
000059C4 43F8 D000                  		lea	($FFFFD000).w,a1
000059C8 7000                       		moveq	#0,d0
000059CA 323C 07FF                  		move.w	#$7FF,d1
000059CE                            
000059CE                            Cred_ClrObjRam:
000059CE 22C0                       		move.l	d0,(a1)+
000059D0 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
000059D4                            
000059D4 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000059DE 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
000059E4 6100 B902                  		bsr.w	NemDec
000059E8 43F8 FB80                  		lea	($FFFFFB80).w,a1
000059EC 7000                       		moveq	#0,d0
000059EE 323C 001F                  		move.w	#$1F,d1
000059F2                            
000059F2                            Cred_ClrPallet:
000059F2 22C0                       		move.l	d0,(a1)+
000059F4 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
000059F8                            
000059F8 7014                       		moveq	#$14,d0
000059FA 6100 C6EA                  		bsr.w	PalLoad1	; load Sonic's pallet
000059FE 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005A04 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
00005A0A 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00005A10 4EB9 0000 0000             		jsr	ObjectsLoad
00005A16 4EB9 0000 0000             		jsr	BuildSprites
00005A1C 6100 0000                  		bsr.w	EndingDemoLoad
00005A20 7000                       		moveq	#0,d0
00005A22 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A26 E948                       		lsl.w	#4,d0
00005A28 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005A2E 45F2 0000                  		lea	(a2,d0.w),a2
00005A32 7000                       		moveq	#0,d0
00005A34 1012                       		move.b	(a2),d0
00005A36 6700                       		beq.s	loc_5862
00005A38 6100 B9FA                  		bsr.w	LoadPLC		; load level patterns
00005A3C                            
00005A3C                            loc_5862:
00005A3C 7001                       		moveq	#1,d0
00005A3E 6100 B9F4                  		bsr.w	LoadPLC		; load standard	level patterns
00005A42 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005A48 6100 C394                  		bsr.w	Pal_FadeTo
00005A4C                            
00005A4C                            Cred_WaitLoop:
00005A4C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005A52 6100 CF46                  		bsr.w	DelayProgram
00005A56 6100 BA48                  		bsr.w	RunPLC_RAM
00005A5A 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005A5E 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005A60 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005A64 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005A66 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005A6C 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005A70 4E75                       		rts	
00005A72                            
00005A72                            ; ---------------------------------------------------------------------------
00005A72                            ; Ending sequence demo loading subroutine
00005A72                            ; ---------------------------------------------------------------------------
00005A72                            
00005A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A72                            
00005A72                            
00005A72                            EndingDemoLoad:				; XREF: Credits
00005A72 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005A76 0240 000F                  		andi.w	#$F,d0
00005A7A D040                       		add.w	d0,d0
00005A7C 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005A80 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005A84 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005A88 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005A8E 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005A90 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005A96 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005A9C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005AA2 7000                       		moveq	#0,d0
00005AA4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005AA8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005AAC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005AB0 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005AB4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005ABA 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005ABC 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005AC2 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005AC6 303C 0008                  		move.w	#8,d0
00005ACA                            
00005ACA                            EndDemo_LampLoad:
00005ACA 24D9                       		move.l	(a1)+,(a2)+
00005ACC 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005AD0                            
00005AD0                            EndDemo_Exit:
00005AD0 4E75                       		rts	
00005AD2                            ; End of function EndingDemoLoad
00005AD2                            
00005AD2                            ; ===========================================================================
00005AD2                            ; ---------------------------------------------------------------------------
00005AD2                            ; Levels used in the end sequence demos
00005AD2                            ; ---------------------------------------------------------------------------
00005AD2                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005AE2                            
00005AE2                            ; ---------------------------------------------------------------------------
00005AE2                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005AE2                            ; ---------------------------------------------------------------------------
00005AE2                            EndDemo_LampVar:
00005AE2 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005AE4 0A00 062C 000D             		dc.w $A00, $62C, $D
00005AEA 0000 0000                  		dc.l 0
00005AEE 0000                       		dc.b 0,	0
00005AF0 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005B04 0101                       		dc.b 1,	1
00005B06                            ; ===========================================================================
00005B06                            ; ---------------------------------------------------------------------------
00005B06                            ; "TRY AGAIN" and "END"	screens
00005B06                            ; ---------------------------------------------------------------------------
00005B06                            
00005B06                            TryAgainEnd:				; XREF: Credits
00005B06 6100 B98A                  		bsr.w	ClearPLC
00005B0A 6100 C354                  		bsr.w	Pal_FadeFrom
00005B0E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B14 3CBC 8004                  		move.w	#$8004,(a6)
00005B18 3CBC 8230                  		move.w	#$8230,(a6)
00005B1C 3CBC 8407                  		move.w	#$8407,(a6)
00005B20 3CBC 9001                  		move.w	#$9001,(a6)
00005B24 3CBC 9200                  		move.w	#$9200,(a6)
00005B28 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B2C 3CBC 8720                  		move.w	#$8720,(a6)
00005B30 4238 F64E                  		clr.b	($FFFFF64E).w
00005B34 6100 B59A                  		bsr.w	ClearScreen
00005B38 43F8 D000                  		lea	($FFFFD000).w,a1
00005B3C 7000                       		moveq	#0,d0
00005B3E 323C 07FF                  		move.w	#$7FF,d1
00005B42                            
00005B42                            TryAg_ClrObjRam:
00005B42 22C0                       		move.l	d0,(a1)+
00005B44 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005B48                            
00005B48 701D                       		moveq	#$1D,d0
00005B4A 6100 BA54                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005B4E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B52 7000                       		moveq	#0,d0
00005B54 323C 001F                  		move.w	#$1F,d1
00005B58                            
00005B58                            TryAg_ClrPallet:
00005B58 22C0                       		move.l	d0,(a1)+
00005B5A 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005B5E                            
00005B5E 7013                       		moveq	#$13,d0
00005B60 6100 C584                  		bsr.w	PalLoad1	; load ending pallet
00005B64 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005B68 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005B6E 4EB9 0000 0000             		jsr	ObjectsLoad
00005B74 4EB9 0000 0000             		jsr	BuildSprites
00005B7A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005B80 6100 C25C                  		bsr.w	Pal_FadeTo
00005B84                            
00005B84                            ; ---------------------------------------------------------------------------
00005B84                            ; "TRY AGAIN" and "END"	screen main loop
00005B84                            ; ---------------------------------------------------------------------------
00005B84                            TryAg_MainLoop:
00005B84 6100 B67C                  		bsr.w	PauseGame
00005B88 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005B8E 6100 CE0A                  		bsr.w	DelayProgram
00005B92 4EB9 0000 0000             		jsr	ObjectsLoad
00005B98 4EB9 0000 0000             		jsr	BuildSprites
00005B9E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005BA4 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005BA6 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005BAA 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005BAC 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005BB2 67D0                       		beq.s	TryAg_MainLoop
00005BB4                            
00005BB4                            TryAg_Exit:
00005BB4 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00005BBA 4E75                       		rts	
00005BBC                            
00005BBC                            ; ===========================================================================
00005BBC                            ; ---------------------------------------------------------------------------
00005BBC                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005BBC                            ; ---------------------------------------------------------------------------
00005BBC                            
00005BBC                            Obj8B:					; XREF: Obj_Index
00005BBC 7000                       		moveq	#0,d0
00005BBE 1028 0024                  		move.b	$24(a0),d0
00005BC2 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005BC6 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005BCA 4EF9 0000 0000             		jmp	DisplaySprite
00005BD0                            ; ===========================================================================
00005BD0 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005BD2 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005BD4 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005BD6 0000                       		dc.w loc_5A8E-Obj8B_Index
00005BD8                            ; ===========================================================================
00005BD8                            
00005BD8                            Obj8B_Main:				; XREF: Obj8B_Index
00005BD8 5428 0024                  		addq.b	#2,$24(a0)
00005BDC 317C 0120 0008             		move.w	#$120,8(a0)
00005BE2 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005BE8 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005BF0 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005BF6 117C 0000 0001             		move.b	#0,1(a0)
00005BFC 117C 0002 0018             		move.b	#2,$18(a0)
00005C02 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005C08 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00005C0E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005C14 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005C16 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00005C1C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005C22 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005C28 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005C2E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005C34                            
00005C34                            Obj8B_Animate:				; XREF: Obj8B_Index
00005C34 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005C3A 4EF9 0000 0000             		jmp	AnimateSprite
00005C40                            ; ===========================================================================
00005C40                            
00005C40                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005C40 5428 0024                  		addq.b	#2,$24(a0)
00005C44 7002                       		moveq	#2,d0
00005C46 0828 0000 001C             		btst	#0,$1C(a0)
00005C4C 6700                       		beq.s	loc_5A6A
00005C4E 4440                       		neg.w	d0
00005C50                            
00005C50                            loc_5A6A:
00005C50 43F8 D800                  		lea	($FFFFD800).w,a1
00005C54 7205                       		moveq	#5,d1
00005C56                            
00005C56                            loc_5A70:
00005C56 1340 003E                  		move.b	d0,$3E(a1)
00005C5A 3400                       		move.w	d0,d2
00005C5C E742                       		asl.w	#3,d2
00005C5E D529 0026                  		add.b	d2,$26(a1)
00005C62 43E9 0040                  		lea	$40(a1),a1
00005C66 51C9 FFEE                  		dbf	d1,loc_5A70
00005C6A 5228 001A                  		addq.b	#1,$1A(a0)
00005C6E 317C 0070 0030             		move.w	#112,$30(a0)
00005C74                            
00005C74                            loc_5A8E:				; XREF: Obj8B_Index
00005C74 5368 0030                  		subq.w	#1,$30(a0)
00005C78 6A00                       		bpl.s	locret_5AA0
00005C7A 0868 0000 001C             		bchg	#0,$1C(a0)
00005C80 117C 0002 0024             		move.b	#2,$24(a0)
00005C86                            
00005C86                            locret_5AA0:
00005C86 4E75                       		rts	
00005C88                            ; ===========================================================================
00005C88                            Ani_obj8B:
00005C88                            	include "_anim\obj8B.asm"
00005C88                            ; ---------------------------------------------------------------------------
00005C88                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005C88                            ; ---------------------------------------------------------------------------
00005C88 0000                       		dc.w byte_5AA8-Ani_obj8B
00005C8A 0000                       		dc.w byte_5AAC-Ani_obj8B
00005C8C 0000                       		dc.w byte_5AB0-Ani_obj8B
00005C8E 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005C92 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005C96 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005CA8                            		even
00005CA8                            		even
00005CA8                            
00005CA8                            ; ===========================================================================
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8                            
00005CA8                            Obj8C:					; XREF: Obj_Index
00005CA8 7000                       		moveq	#0,d0
00005CAA 1028 0024                  		move.b	$24(a0),d0
00005CAE 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005CB2 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005CB6 4EF9 0000 0000             		jmp	DisplaySprite
00005CBC                            ; ===========================================================================
00005CBC 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005CBE 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005CC0                            ; ===========================================================================
00005CC0                            
00005CC0                            Obj8C_Main:				; XREF: Obj8C_Index
00005CC0 2248                       		movea.l	a0,a1
00005CC2 7400                       		moveq	#0,d2
00005CC4 7600                       		moveq	#0,d3
00005CC6 7205                       		moveq	#5,d1
00005CC8 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005CCC                            
00005CCC                            Obj8C_MakeEms:				; XREF: loc_5B42
00005CCC 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005CD0 5429 0024                  		addq.b	#2,$24(a1)
00005CD4 237C 0000 5948 0004        		move.l	#Map_obj88,4(a1)
00005CDC 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005CE2 137C 0000 0001             		move.b	#0,1(a1)
00005CE8 137C 0001 0018             		move.b	#1,$18(a1)
00005CEE 337C 0104 0008             		move.w	#$104,8(a1)
00005CF4 337C 0120 0038             		move.w	#$120,$38(a1)
00005CFA 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005D00 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005D06 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005D0C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005D10                            
00005D10                            Obj8C_ChkEms:
00005D10 7000                       		moveq	#0,d0
00005D12 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005D16 5340                       		subq.w	#1,d0
00005D18 6500                       		bcs.s	loc_5B42
00005D1A                            
00005D1A                            Obj8C_ChkEmLoop:
00005D1A B433 0000                  		cmp.b	(a3,d0.w),d2
00005D1E 6600                       		bne.s	loc_5B3E
00005D20 5202                       		addq.b	#1,d2
00005D22 60EC                       		bra.s	Obj8C_ChkEms
00005D24                            ; ===========================================================================
00005D24                            
00005D24                            loc_5B3E:
00005D24 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005D28                            
00005D28                            loc_5B42:
00005D28 1342 001A                  		move.b	d2,$1A(a1)
00005D2C 5229 001A                  		addq.b	#1,$1A(a1)
00005D30 5202                       		addq.b	#1,d2
00005D32 137C 0080 0026             		move.b	#$80,$26(a1)
00005D38 1343 001E                  		move.b	d3,$1E(a1)
00005D3C 1343 001F                  		move.b	d3,$1F(a1)
00005D40 0643 000A                  		addi.w	#$A,d3
00005D44 43E9 0040                  		lea	$40(a1),a1
00005D48 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005D4C                            
00005D4C                            Obj8C_Move:				; XREF: Obj8C_Index
00005D4C 4A68 003E                  		tst.w	$3E(a0)
00005D50 6700                       		beq.s	locret_5BBA
00005D52 4A28 001E                  		tst.b	$1E(a0)
00005D56 6700                       		beq.s	loc_5B78
00005D58 5328 001E                  		subq.b	#1,$1E(a0)
00005D5C 6600                       		bne.s	loc_5B80
00005D5E                            
00005D5E                            loc_5B78:
00005D5E 3028 003E                  		move.w	$3E(a0),d0
00005D62 D168 0026                  		add.w	d0,$26(a0)
00005D66                            
00005D66                            loc_5B80:
00005D66 1028 0026                  		move.b	$26(a0),d0
00005D6A 6700                       		beq.s	loc_5B8C
00005D6C 0C00 0080                  		cmpi.b	#$80,d0
00005D70 6600                       		bne.s	loc_5B96
00005D72                            
00005D72                            loc_5B8C:
00005D72 4268 003E                  		clr.w	$3E(a0)
00005D76 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005D7C                            
00005D7C                            loc_5B96:
00005D7C 4EB9 0000 29CC             		jsr	(CalcSine).l
00005D82 7800                       		moveq	#0,d4
00005D84 1828 003C                  		move.b	$3C(a0),d4
00005D88 C3C4                       		muls.w	d4,d1
00005D8A E081                       		asr.l	#8,d1
00005D8C C1C4                       		muls.w	d4,d0
00005D8E E080                       		asr.l	#8,d0
00005D90 D268 0038                  		add.w	$38(a0),d1
00005D94 D068 003A                  		add.w	$3A(a0),d0
00005D98 3141 0008                  		move.w	d1,8(a0)
00005D9C 3140 000A                  		move.w	d0,$A(a0)
00005DA0                            
00005DA0                            locret_5BBA:
00005DA0 4E75                       		rts	
00005DA2                            ; ===========================================================================
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            Map_obj8B:
00005DA2                            	include "_maps\obj8B.asm"
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005DA6 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005DAA 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005DAE 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005DB2 08                         byte_5BCC:	dc.b 8
00005DB3 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005DB8 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005DBD E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005DC2 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005DC7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005DCC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005DD1 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005DD6 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005DDB 08                         byte_5BF5:	dc.b 8
00005DDC E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005DE1 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005DE6 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005DEB F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005DF0 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005DF5 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005DFA 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005DFF 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E04 08                         byte_5C1E:	dc.b 8
00005E05 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005E0A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005E0F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005E14 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005E19 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E1E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E23 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E28 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E2D 08                         byte_5C47:	dc.b 8
00005E2E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005E33 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005E38 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005E3D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005E42 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005E47 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005E4C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E51 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E56 0C                         byte_5C70:	dc.b $C
00005E57 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005E5C F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005E61 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005E66 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005E6B ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005E70 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005E75 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005E7A 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005E7F 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005E84 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005E89 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005E8E 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005E93 0A                         byte_5CAD:	dc.b $A
00005E94 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005E99 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005E9E F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005EA3 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005EA8 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005EAD F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005EB2 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005EB7 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005EBC 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005EC1 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005EC6 0A                         byte_5CE0:	dc.b $A
00005EC7 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005ECC E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005ED1 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005ED6 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005EDB E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005EE0 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005EE5 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005EEA 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005EEF 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005EF4 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005EF9 0C                         byte_5D13:	dc.b $C
00005EFA F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005EFF FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005F04 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005F09 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005F0E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005F13 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005F18 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005F1D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005F22 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005F27 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005F2C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005F31 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005F36                            		even
00005F36                            		even
00005F36                            
00005F36                            ; ---------------------------------------------------------------------------
00005F36                            ; Ending sequence demos
00005F36                            ; ---------------------------------------------------------------------------
00005F36                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005F64                            		even
00005F64                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005FA4                            		even
00005FA4                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005FD4                            		even
00005FD4                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006004                            		even
00006004                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006024                            		even
00006024                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006044                            		even
00006044                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006074                            		even
00006074                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000060A4                            		even
000060A4                            
000060A4                            ; ---------------------------------------------------------------------------
000060A4                            ; Subroutine to	load level boundaries and start	locations
000060A4                            ; ---------------------------------------------------------------------------
000060A4                            
000060A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000060A4                            
000060A4                            
000060A4                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000060A4 7000                       		moveq	#0,d0
000060A6 11C0 F740                  		move.b	d0,($FFFFF740).w
000060AA 11C0 F741                  		move.b	d0,($FFFFF741).w
000060AE 11C0 F746                  		move.b	d0,($FFFFF746).w
000060B2 11C0 F748                  		move.b	d0,($FFFFF748).w
000060B6 11C0 F742                  		move.b	d0,($FFFFF742).w
000060BA 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060BE ED08                       		lsl.b	#6,d0
000060C0 E848                       		lsr.w	#4,d0
000060C2 3200                       		move.w	d0,d1
000060C4 D040                       		add.w	d0,d0
000060C6 D041                       		add.w	d1,d0
000060C8 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000060CC 3018                       		move.w	(a0)+,d0
000060CE 31C0 F730                  		move.w	d0,($FFFFF730).w
000060D2 2018                       		move.l	(a0)+,d0
000060D4 21C0 F728                  		move.l	d0,($FFFFF728).w
000060D8 21C0 F720                  		move.l	d0,($FFFFF720).w
000060DC 2018                       		move.l	(a0)+,d0
000060DE 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000060E2 21C0 F724                  		move.l	d0,($FFFFF724).w
000060E6 3038 F728                  		move.w	($FFFFF728).w,d0
000060EA 0640 0240                  		addi.w	#$240,d0
000060EE 31C0 F732                  		move.w	d0,($FFFFF732).w
000060F2 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000060F8 3018                       		move.w	(a0)+,d0
000060FA 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000060FE 6000 0000                  		bra.w	LevSz_ChkLamp
00006102                            ; ===========================================================================
00006102                            ; ---------------------------------------------------------------------------
00006102                            ; Level size array and ending start location array
00006102                            ; ---------------------------------------------------------------------------
00006102                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006252                            		even
00006252                            
00006252                            EndingStLocArray:
00006252                            		incbin	misc\sloc_end.bin
00006272                            		even
00006272                            
00006272                            ; ===========================================================================
00006272                            
00006272                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006272 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006276 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006278 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000627E 3238 D008                  		move.w	($FFFFD008).w,d1
00006282 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006286 6000                       		bra.s	loc_60D0
00006288                            ; ===========================================================================
00006288                            
00006288                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006288 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000628C ED08                       		lsl.b	#6,d0
0000628E E848                       		lsr.w	#4,d0
00006290 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006294 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006298 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000629A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000629E 5340                       		subq.w	#1,d0
000062A0 E548                       		lsl.w	#2,d0
000062A2 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000062A6                            
000062A6                            LevSz_SonicPos:
000062A6 7200                       		moveq	#0,d1
000062A8 3219                       		move.w	(a1)+,d1
000062AA 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000062AE 7000                       		moveq	#0,d0
000062B0 3011                       		move.w	(a1),d0
000062B2 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000062B6                            
000062B6                            loc_60D0:				; XREF: LevSz_ChkLamp
000062B6 0441 00A0                  		subi.w	#$A0,d1
000062BA 6400                       		bcc.s	loc_60D8
000062BC 7200                       		moveq	#0,d1
000062BE                            
000062BE                            loc_60D8:
000062BE 3438 F72A                  		move.w	($FFFFF72A).w,d2
000062C2 B242                       		cmp.w	d2,d1
000062C4 6500                       		bcs.s	loc_60E2
000062C6 3202                       		move.w	d2,d1
000062C8                            
000062C8                            loc_60E2:
000062C8 31C1 F700                  		move.w	d1,($FFFFF700).w
000062CC 0440 0060                  		subi.w	#$60,d0
000062D0 6400                       		bcc.s	loc_60EE
000062D2 7000                       		moveq	#0,d0
000062D4                            
000062D4                            loc_60EE:
000062D4 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000062D8 6D00                       		blt.s	loc_60F8
000062DA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000062DE                            
000062DE                            loc_60F8:
000062DE 31C0 F704                  		move.w	d0,($FFFFF704).w
000062E2 6100 0000                  		bsr.w	BgScrollSpeed
000062E6 7000                       		moveq	#0,d0
000062E8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062EC E508                       		lsl.b	#2,d0
000062EE 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000062F4 6000 0000                  		bra.w	LevSz_Unk
000062F8                            ; ===========================================================================
000062F8                            ; ---------------------------------------------------------------------------
000062F8                            ; Sonic	start location array
000062F8                            ; ---------------------------------------------------------------------------
000062F8                            StartLocArray:	incbin	misc\sloc_lev.bin
00006368                            		even
00006368                            
00006368                            ; ---------------------------------------------------------------------------
00006368                            ; Which	256x256	tiles contain loops or roll-tunnels
00006368                            ; ---------------------------------------------------------------------------
00006368                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006368                            ; loop,	loop, tunnel, tunnel
00006368                            ; ---------------------------------------------------------------------------
00006368                            LoopTileNums:	incbin	misc\loopnums.bin
00006384                            		even
00006384                            
00006384                            ; ===========================================================================
00006384                            
00006384                            LevSz_Unk:				; XREF: LevelSizeLoad
00006384 7000                       		moveq	#0,d0
00006386 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000638A E748                       		lsl.w	#3,d0
0000638C 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006390 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006394 24D9                       		move.l	(a1)+,(a2)+
00006396 24D9                       		move.l	(a1)+,(a2)+
00006398 4E75                       		rts	
0000639A                            ; End of function LevelSizeLoad
0000639A                            
0000639A                            ; ===========================================================================
0000639A 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000063A2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063AA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063B2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063BA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063C2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063CA 0070 0100 0100 0100        		dc.l $700100, $1000100
000063D2                            
000063D2                            ; ---------------------------------------------------------------------------
000063D2                            ; Subroutine to	set scroll speed of some backgrounds
000063D2                            ; ---------------------------------------------------------------------------
000063D2                            
000063D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063D2                            
000063D2                            
000063D2                            BgScrollSpeed:				; XREF: LevelSizeLoad
000063D2 4A38 FE30                  		tst.b	($FFFFFE30).w
000063D6 6600                       		bne.s	loc_6206
000063D8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000063DC 31C0 F714                  		move.w	d0,($FFFFF714).w
000063E0 31C1 F708                  		move.w	d1,($FFFFF708).w
000063E4 31C1 F710                  		move.w	d1,($FFFFF710).w
000063E8 31C1 F718                  		move.w	d1,($FFFFF718).w
000063EC                            
000063EC                            loc_6206:
000063EC 7400                       		moveq	#0,d2
000063EE 1438 FE10                  		move.b	($FFFFFE10).w,d2
000063F2 D442                       		add.w	d2,d2
000063F4 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000063F8 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000063FC                            ; End of function BgScrollSpeed
000063FC                            
000063FC                            ; ===========================================================================
000063FC 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006400 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006404 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006408 0000                       		dc.w BgScroll_End-BgScroll_Index
0000640A                            ; ===========================================================================
0000640A                            
0000640A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000640A 42B8 F708                  		clr.l	($FFFFF708).w
0000640E 42B8 F70C                  		clr.l	($FFFFF70C).w
00006412 42B8 F714                  		clr.l	($FFFFF714).w
00006416 42B8 F71C                  		clr.l	($FFFFF71C).w
0000641A 45F8 A800                  		lea	($FFFFA800).w,a2
0000641E 429A                       		clr.l	(a2)+
00006420 429A                       		clr.l	(a2)+
00006422 429A                       		clr.l	(a2)+
00006424 4E75                       		rts 
00006426                            ; ===========================================================================
00006426                            
00006426                            BgScroll_LZ:				; XREF: BgScroll_Index
00006426 E280                       		asr.l	#1,d0
00006428 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000642C 4E75                       		rts	
0000642E                            ; ===========================================================================
0000642E                            
0000642E                            BgScroll_MZ:				; XREF: BgScroll_Index
0000642E 4E75                       		rts	
00006430                            ; ===========================================================================
00006430                            
00006430                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006430 E280                       		asr.l	#1,d0
00006432 0640 00C0                  		addi.w	#$C0,d0
00006436 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000643A 42B8 F708                  		clr.l	($FFFFF708).w
0000643E 4E75                       		rts	
00006440                            ; ===========================================================================
00006440                            
00006440                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006440 E980                       		asl.l	#4,d0
00006442 2400                       		move.l	d0,d2
00006444 E380                       		asl.l	#1,d0
00006446 D082                       		add.l	d2,d0
00006448 E080                       		asr.l	#8,d0
0000644A 5240                       		addq.w	#1,d0
0000644C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006450 42B8 F708                  		clr.l	($FFFFF708).w
00006454 4E75                       		rts	
00006456                            ; ===========================================================================
00006456                            
00006456                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006456 0240 07F8                  		andi.w	#$7F8,d0
0000645A E640                       		asr.w	#3,d0
0000645C 5240                       		addq.w	#1,d0
0000645E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006462 4E75                       		rts	
00006464                            ; ===========================================================================
00006464                            
00006464                            BgScroll_End:				; XREF: BgScroll_Index
00006464 3038 F700                  		move.w	($FFFFF700).w,d0
00006468 E240                       		asr.w	#1,d0
0000646A 31C0 F708                  		move.w	d0,($FFFFF708).w
0000646E 31C0 F710                  		move.w	d0,($FFFFF710).w
00006472 E440                       		asr.w	#2,d0
00006474 3200                       		move.w	d0,d1
00006476 D040                       		add.w	d0,d0
00006478 D041                       		add.w	d1,d0
0000647A 31C0 F718                  		move.w	d0,($FFFFF718).w
0000647E 42B8 F70C                  		clr.l	($FFFFF70C).w
00006482 42B8 F714                  		clr.l	($FFFFF714).w
00006486 42B8 F71C                  		clr.l	($FFFFF71C).w
0000648A 45F8 A800                  		lea	($FFFFA800).w,a2
0000648E 429A                       		clr.l	(a2)+
00006490 429A                       		clr.l	(a2)+
00006492 429A                       		clr.l	(a2)+
00006494 4E75                       		rts
00006496                            
00006496                            ; ---------------------------------------------------------------------------
00006496                            ; Background layer deformation subroutines
00006496                            ; ---------------------------------------------------------------------------
00006496                            
00006496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006496                            
00006496                            
00006496                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006496 4A38 F744                  		tst.b	($FFFFF744).w
0000649A 6700                       		beq.s	loc_628E
0000649C 4E75                       		rts	
0000649E                            ; ===========================================================================
0000649E                            
0000649E                            loc_628E:
0000649E 4278 F754                  		clr.w	($FFFFF754).w
000064A2 4278 F756                  		clr.w	($FFFFF756).w
000064A6 4278 F758                  		clr.w	($FFFFF758).w
000064AA 4278 F75A                  		clr.w	($FFFFF75A).w
000064AE 6100 0000                  		bsr.w	ScrollHoriz
000064B2 6100 0000                  		bsr.w	ScrollVertical
000064B6 6100 0000                  		bsr.w	DynScrResizeLoad
000064BA 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000064C0 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000064C6 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000064CC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000064D2 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000064D8 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000064DE 7000                       		moveq	#0,d0
000064E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064E4 D040                       		add.w	d0,d0
000064E6 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000064EA 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000064EE                            ; End of function DeformBgLayer
000064EE                            
000064EE                            ; ===========================================================================
000064EE                            ; ---------------------------------------------------------------------------
000064EE                            ; Offset index for background layer deformation	code
000064EE                            ; ---------------------------------------------------------------------------
000064EE 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000064F2 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000064F6 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000064FA 0000                       		dc.w Deform_GHZ-Deform_Index
000064FC                            ; ---------------------------------------------------------------------------
000064FC                            ; Green	Hill Zone background layer deformation code
000064FC                            ; ---------------------------------------------------------------------------
000064FC                            
000064FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064FC                            
000064FC                            
000064FC                            Deform_GHZ:
000064FC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006500 48C4                       		ext.l	d4
00006502 EB84                       		asl.l	#5,d4
00006504 2204                       		move.l	d4,d1
00006506 E384                       		asl.l	#1,d4
00006508 D881                       		add.l	d1,d4
0000650A 7C00                       		moveq	#0,d6
0000650C 6100 0000                  		bsr.w	ScrollBlock6
00006510 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006514 48C4                       		ext.l	d4
00006516 EF84                       		asl.l	#7,d4
00006518 7C00                       		moveq	#0,d6
0000651A 6100 0000                  		bsr.w	ScrollBlock5
0000651E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006522 3038 F704                  		move.w	($FFFFF704).w,d0
00006526 0240 07FF                  		andi.w	#$7FF,d0
0000652A EA48                       		lsr.w	#5,d0
0000652C 4440                       		neg.w	d0
0000652E 0640 0020                  		addi.w	#$20,d0	; ' '
00006532 6A00                       		bpl.s	Deform_GHZ_1
00006534 7000                       		moveq	#0,d0
00006536                            
00006536                            Deform_GHZ_1:				; XREF: Deform_GHZ
00006536 3800                       		move.w	d0,d4
00006538 31C0 F618                  		move.w	d0,($FFFFF618).w
0000653C 3038 F700                  		move.w	($FFFFF700).w,d0
00006540 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006546 6600                       		bne.s	Deform_GHZ_2
00006548 7000                       		moveq	#0,d0
0000654A                            
0000654A                            Deform_GHZ_2:				; XREF: Deform_GHZ
0000654A 4440                       		neg.w	d0
0000654C 4840                       		swap	d0
0000654E 45F8 A800                  		lea	($FFFFA800).w,a2
00006552 069A 0001 0000             		addi.l	#$10000,(a2)+
00006558 069A 0000 C000             		addi.l	#$C000,(a2)+
0000655E 069A 0000 8000             		addi.l	#$8000,(a2)+
00006564 3038 A800                  		move.w	($FFFFA800).w,d0
00006568 D078 F718                  		add.w	($FFFFF718).w,d0
0000656C 4440                       		neg.w	d0
0000656E 323C 001F                  		move.w	#$1F,d1
00006572 9244                       		sub.w	d4,d1
00006574 6500                       		bcs.s	Deform_GHZ_4
00006576                            
00006576                            Deform_GHZ_3:				; XREF: Deform_GHZ
00006576 22C0                       		move.l	d0,(a1)+
00006578 51C9 FFFC                  		dbf	d1,Deform_GHZ_3
0000657C                            
0000657C                            Deform_GHZ_4:				; XREF: Deform_GHZ
0000657C 3038 A804                  		move.w	($FFFFA804).w,d0
00006580 D078 F718                  		add.w	($FFFFF718).w,d0
00006584 4440                       		neg.w	d0
00006586 323C 000F                  		move.w	#$F,d1
0000658A                            
0000658A                            Deform_GHZ_5:				; XREF: Deform_GHZ
0000658A 22C0                       		move.l	d0,(a1)+
0000658C 51C9 FFFC                  		dbf	d1,Deform_GHZ_5
00006590 3038 A808                  		move.w	($FFFFA808).w,d0
00006594 D078 F718                  		add.w	($FFFFF718).w,d0
00006598 4440                       		neg.w	d0
0000659A 323C 000F                  		move.w	#$F,d1
0000659E                            
0000659E                            Deform_GHZ_6:				; XREF: Deform_GHZ
0000659E 22C0                       		move.l	d0,(a1)+
000065A0 51C9 FFFC                  		dbf	d1,Deform_GHZ_6
000065A4 323C 002F                  		move.w	#$2F,d1	; '/'
000065A8 3038 F718                  		move.w	($FFFFF718).w,d0
000065AC 4440                       		neg.w	d0
000065AE                            
000065AE                            Deform_GHZ_7:				; XREF: Deform_GHZ
000065AE 22C0                       		move.l	d0,(a1)+
000065B0 51C9 FFFC                  		dbf	d1,Deform_GHZ_7
000065B4 323C 0027                  		move.w	#$27,d1	; '''
000065B8 3038 F710                  		move.w	($FFFFF710).w,d0
000065BC 4440                       		neg.w	d0
000065BE                            
000065BE                            Deform_GHZ_8:				; XREF: Deform_GHZ
000065BE 22C0                       		move.l	d0,(a1)+
000065C0 51C9 FFFC                  		dbf	d1,Deform_GHZ_8
000065C4 3038 F710                  		move.w	($FFFFF710).w,d0
000065C8 3438 F700                  		move.w	($FFFFF700).w,d2
000065CC 9440                       		sub.w	d0,d2
000065CE 48C2                       		ext.l	d2
000065D0 E182                       		asl.l	#8,d2
000065D2 85FC 0068                  		divs.w	#$68,d2	; 'h'
000065D6 48C2                       		ext.l	d2
000065D8 E182                       		asl.l	#8,d2
000065DA 7600                       		moveq	#0,d3
000065DC 3600                       		move.w	d0,d3
000065DE 323C 0047                  		move.w	#$47,d1	; 'G'
000065E2 D244                       		add.w	d4,d1
000065E4                            
000065E4                            Deform_GHZ_9:				; XREF: Deform_GHZ
000065E4 3003                       		move.w	d3,d0
000065E6 4440                       		neg.w	d0
000065E8 22C0                       		move.l	d0,(a1)+
000065EA 4843                       		swap	d3
000065EC D682                       		add.l	d2,d3
000065EE 4843                       		swap	d3
000065F0 51C9 FFF2                  		dbf	d1,Deform_GHZ_9
000065F4 4E75                       		rts	
000065F6                            ; End of function Deform_GHZ
000065F6                            
000065F6                            ; ===========================================================================
000065F6                            ; ---------------------------------------------------------------------------
000065F6                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
000065F6                            ; ---------------------------------------------------------------------------
000065F6                            
000065F6                            Deform_LZ:
000065F6 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
000065F8 3838 F73A                  		move.w	($FFFFF73A).w,d4			; load horizontal movement distance (Since last frame)
000065FC 48C4                       		ext.l	d4					; extend to long-word signed
000065FE E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
00006600 3A38 F73C                  		move.w	($FFFFF73C).w,d5			; load vertical movement distance (Since last frame)
00006604 48C5                       		ext.l	d5					; extend to long-word signed
00006606 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
00006608 6100 0000                  		bsr.w	ScrollBlock1				; adjust BG scroll positions (and set draw code direction flags)
0000660C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w		; set BG V-scroll position
00006612 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load H-scroll buffer
00006616 3038 F700                  		move.w	($FFFFF700).w,d0			; load FG X position
0000661A 4440                       		neg.w	d0					; reverse
0000661C 4840                       		swap	d0					; send to upper word
0000661E 3038 F708                  		move.w	($FFFFF708).w,d0			; load BG X position
00006622 4440                       		neg.w	d0					; reverse
00006624 7600                       		moveq	#$00,d3					; clear d3
00006626 1638 F7D8                  		move.b	($FFFFF7D8).w,d3			; load wave-scroll timer
0000662A 0678 0080 F7D8             		addi.w	#$0080,($FFFFF7D8).w			; increase wave-scroll timer
00006630 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
00006634 3238 F646                  		move.w	($FFFFF646).w,d1			; load water line position
00006638 9278 F704                  		sub.w	($FFFFF704).w,d1			; minus FG Y position
0000663C 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
0000663E B242                       		cmp.w	d2,d1					; is the water line below the screen?
00006640 6F00                       		ble.s	DLZ_NoWater				; if not, branch
00006642 3202                       		move.w	d2,d1					; set at maximum
00006644                            
00006644                            DLZ_NoWater:
00006644 9441                       		sub.w	d1,d2					; subtract from water-line count
00006646 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
00006648 5301                       		subq.b	#$01,d1					; decrease above water count
0000664A 6500                       		bcs.s	DLZ_Water				; if finished, branch
0000664C                            
0000664C                            DLZ_Above:
0000664C 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
0000664E 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
00006652                            
00006652                            DLZ_Water:
00006652 5302                       		subq.b	#$01,d2					; decrease below water count
00006654 6500                       		bcs.s	DLZ_Finish				; if finished, branch
00006656 3200                       		move.w	d0,d1					; copy BG position back to d1
00006658 4840                       		swap	d0					; move FG position back to lower word in d0
0000665A 3803                       		move.w	d3,d4					; copy sroll timer for BG use
0000665C D638 F705                  		add.b	($FFFFF704+$01).w,d3			; add FG Y position
00006660 D838 F70D                  		add.b	($FFFFF70C+$01).w,d4			; add BG Y position
00006664 D643                       		add.w	d3,d3					; multiply by word size (2)
00006666 D844                       		add.w	d4,d4					; ''
00006668 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
0000666E D6C4                       		adda.w	d4,a3					; advance to correct starting point
00006670 1813                       		move.b	(a3),d4					; get current position byte
00006672 E404                       		asr.b	#$02,d4					; get only the position bits
00006674 4884                       		ext.w	d4					; extend to word
00006676 D244                       		add.w	d4,d1					; adjust BG's current position
00006678 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
0000667C 1812                       		move.b	(a2),d4					; get current position byte
0000667E E404                       		asr.b	#$02,d4					; get only the position bits
00006680 4884                       		ext.w	d4					; extend to word
00006682 D044                       		add.w	d4,d0					; adjust FG's current position
00006684                            
00006684                            DLZ_Below:
00006684 D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
00006686 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
00006688 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
0000668A 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
0000668C 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
00006690                            
00006690                            DLZ_Finish:
00006690 4E75                       		rts						; return
00006692                            
00006692                            ; ---------------------------------------------------------------------------
00006692                            ; Scroll data for the FG
00006692                            ; ---------------------------------------------------------------------------
00006692                            
00006692                            DLZ_WaveFG:
00006692                            		rept	$02
00006692                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692 0001 0400 0401 0800 0801+  		endr
00006A92                            
00006A92                            ; ---------------------------------------------------------------------------
00006A92                            ; Scroll data for the BG
00006A92                            ; ---------------------------------------------------------------------------
00006A92                            
00006A92                            DLZ_WaveBG:	rept	$04
00006A92                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
00006A92                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
00006A92                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
00006A92                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
00006A92                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
00006A92                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
00006A92                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
00006A92                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
00006A92 FC01 0000 0000 0000 0000+  		endr
00006E92                            
00006E92                            ; ===========================================================================
00006E92                            
00006E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E92                            
00006E92                            
00006E92                            Deform_MZ:
00006E92 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E96 48C4                       		ext.l	d4
00006E98 ED84                       		asl.l	#6,d4
00006E9A 2204                       		move.l	d4,d1
00006E9C E384                       		asl.l	#1,d4
00006E9E D881                       		add.l	d1,d4
00006EA0 7C02                       		moveq	#2,d6
00006EA2 6100 0000                  		bsr.w	ScrollBlock4
00006EA6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EAA 48C4                       		ext.l	d4
00006EAC ED84                       		asl.l	#6,d4
00006EAE 7C06                       		moveq	#6,d6
00006EB0 6100 0000                  		bsr.w	ScrollBlock6
00006EB4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EB8 48C4                       		ext.l	d4
00006EBA EF84                       		asl.l	#7,d4
00006EBC 7C04                       		moveq	#4,d6
00006EBE 6100 0000                  		bsr.w	ScrollBlock5
00006EC2 303C 0200                  		move.w	#$200,d0
00006EC6 3238 F704                  		move.w	($FFFFF704).w,d1
00006ECA 0441 01C8                  		subi.w	#$1C8,d1
00006ECE 6500                       		bcs.s	Deform_MZ_1
00006ED0 3401                       		move.w	d1,d2
00006ED2 D241                       		add.w	d1,d1
00006ED4 D242                       		add.w	d2,d1
00006ED6 E441                       		asr.w	#2,d1
00006ED8 D041                       		add.w	d1,d0
00006EDA                            
00006EDA                            Deform_MZ_1:				; XREF: Deform_MZ
00006EDA 31C0 F714                  		move.w	d0,($FFFFF714).w
00006EDE 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00006EE2 6100 0000                  		bsr.w	ScrollBlock3
00006EE6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006EEC 1038 F756                  		move.b	($FFFFF756).w,d0
00006EF0 8038 F758                  		or.b	($FFFFF758).w,d0
00006EF4 8138 F75A                  		or.b	d0,($FFFFF75A).w
00006EF8 4238 F756                  		clr.b	($FFFFF756).w
00006EFC 4238 F758                  		clr.b	($FFFFF758).w
00006F00 43F8 A800                  		lea	($FFFFA800).w,a1
00006F04 3438 F700                  		move.w	($FFFFF700).w,d2
00006F08 4442                       		neg.w	d2
00006F0A 3002                       		move.w	d2,d0
00006F0C E440                       		asr.w	#2,d0
00006F0E 9042                       		sub.w	d2,d0
00006F10 48C0                       		ext.l	d0
00006F12 E780                       		asl.l	#3,d0
00006F14 81FC 0005                  		divs.w	#5,d0
00006F18 48C0                       		ext.l	d0
00006F1A E980                       		asl.l	#4,d0
00006F1C E180                       		asl.l	#8,d0
00006F1E 7600                       		moveq	#0,d3
00006F20 3602                       		move.w	d2,d3
00006F22 E243                       		asr.w	#1,d3
00006F24 323C 0004                  		move.w	#4,d1
00006F28                            
00006F28                            Deform_MZ_2:				; XREF: Deform_MZ
00006F28 32C3                       		move.w	d3,(a1)+
00006F2A 4843                       		swap	d3
00006F2C D680                       		add.l	d0,d3
00006F2E 4843                       		swap	d3
00006F30 51C9 FFF6                  		dbf	d1,Deform_MZ_2
00006F34 3038 F718                  		move.w	($FFFFF718).w,d0
00006F38 4440                       		neg.w	d0
00006F3A 323C 0001                  		move.w	#1,d1
00006F3E                            
00006F3E                            Deform_MZ_3:				; XREF: Deform_MZ
00006F3E 32C0                       		move.w	d0,(a1)+
00006F40 51C9 FFFC                  		dbf	d1,Deform_MZ_3
00006F44 3038 F710                  		move.w	($FFFFF710).w,d0
00006F48 4440                       		neg.w	d0
00006F4A 323C 0008                  		move.w	#8,d1
00006F4E                            
00006F4E                            Deform_MZ_4:				; XREF: Deform_MZ
00006F4E 32C0                       		move.w	d0,(a1)+
00006F50 51C9 FFFC                  		dbf	d1,Deform_MZ_4
00006F54 3038 F708                  		move.w	($FFFFF708).w,d0
00006F58 4440                       		neg.w	d0
00006F5A 323C 000F                  		move.w	#$F,d1
00006F5E                            
00006F5E                            Deform_MZ_5:				; XREF: Deform_MZ
00006F5E 32C0                       		move.w	d0,(a1)+
00006F60 51C9 FFFC                  		dbf	d1,Deform_MZ_5
00006F64 45F8 A800                  		lea	($FFFFA800).w,a2
00006F68 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006F6C 0440 0200                  		subi.w	#$200,d0
00006F70 3400                       		move.w	d0,d2
00006F72 0C40 0100                  		cmpi.w	#$100,d0
00006F76 6500                       		bcs.s	Deform_MZ_6
00006F78 303C 0100                  		move.w	#$100,d0
00006F7C                            
00006F7C                            Deform_MZ_6:				; XREF: Deform_MZ
00006F7C 0240 01F0                  		andi.w	#$1F0,d0
00006F80 E648                       		lsr.w	#3,d0
00006F82 45F2 0000                  		lea	(a2,d0.w),a2
00006F86 6000 0000                  		bra.w	Deform_All
00006F8A                            ; ===========================================================================
00006F8A                            
00006F8A                            Deform_SLZ:
00006F8A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006F8E 48C5                       		ext.l	d5
00006F90 EF85                       		asl.l	#7,d5
00006F92 6100 0000                  		bsr.w	ScrollBlock2
00006F96 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006F9C 43F8 A800                  		lea	($FFFFA800).w,a1
00006FA0 3438 F700                  		move.w	($FFFFF700).w,d2
00006FA4 4442                       		neg.w	d2
00006FA6 3002                       		move.w	d2,d0
00006FA8 E640                       		asr.w	#3,d0
00006FAA 9042                       		sub.w	d2,d0
00006FAC 48C0                       		ext.l	d0
00006FAE E980                       		asl.l	#4,d0
00006FB0 81FC 001C                  		divs.w	#$1C,d0
00006FB4 48C0                       		ext.l	d0
00006FB6 E980                       		asl.l	#4,d0
00006FB8 E180                       		asl.l	#8,d0
00006FBA 7600                       		moveq	#0,d3
00006FBC 3602                       		move.w	d2,d3
00006FBE 323C 001B                  		move.w	#$1B,d1
00006FC2                            
00006FC2                            Deform_SLZ_1:				; XREF: Deform_MZ
00006FC2 32C3                       		move.w	d3,(a1)+
00006FC4 4843                       		swap	d3
00006FC6 D680                       		add.l	d0,d3
00006FC8 4843                       		swap	d3
00006FCA 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
00006FCE 3002                       		move.w	d2,d0
00006FD0 E640                       		asr.w	#3,d0
00006FD2 3200                       		move.w	d0,d1
00006FD4 E241                       		asr.w	#1,d1
00006FD6 D041                       		add.w	d1,d0
00006FD8 323C 0004                  		move.w	#4,d1
00006FDC                            
00006FDC                            Deform_SLZ_2:				; XREF: Deform_MZ
00006FDC 32C0                       		move.w	d0,(a1)+
00006FDE 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
00006FE2 3002                       		move.w	d2,d0
00006FE4 E440                       		asr.w	#2,d0
00006FE6 323C 0004                  		move.w	#4,d1
00006FEA                            
00006FEA                            Deform_SLZ_3:				; XREF: Deform_MZ
00006FEA 32C0                       		move.w	d0,(a1)+
00006FEC 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
00006FF0 3002                       		move.w	d2,d0
00006FF2 E240                       		asr.w	#1,d0
00006FF4 323C 001D                  		move.w	#$1D,d1
00006FF8                            
00006FF8                            Deform_SLZ_4:				; XREF: Deform_MZ
00006FF8 32C0                       		move.w	d0,(a1)+
00006FFA 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
00006FFE 45F8 A800                  		lea	($FFFFA800).w,a2
00007002 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007006 3400                       		move.w	d0,d2
00007008 0440 00C0                  		subi.w	#$C0,d0	; 'À'
0000700C 0240 03F0                  		andi.w	#$3F0,d0
00007010 E648                       		lsr.w	#3,d0
00007012 45F2 0000                  		lea	(a2,d0.w),a2
00007016                            
00007016                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
00007016 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000701A 323C 000E                  		move.w	#$E,d1
0000701E 3038 F700                  		move.w	($FFFFF700).w,d0
00007022 4440                       		neg.w	d0
00007024 4840                       		swap	d0
00007026 0242 000F                  		andi.w	#$F,d2
0000702A D442                       		add.w	d2,d2
0000702C 301A                       		move.w	(a2)+,d0
0000702E 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
00007032                            ; End of function Deform_MZ
00007032                            
00007032                            ; ===========================================================================
00007032                            
00007032                            Deform_All_1:				; XREF: Deform_All
00007032 301A                       		move.w	(a2)+,d0
00007034                            
00007034                            Deform_All_2:
00007034 22C0                       		move.l	d0,(a1)+
00007036 22C0                       		move.l	d0,(a1)+
00007038 22C0                       		move.l	d0,(a1)+
0000703A 22C0                       		move.l	d0,(a1)+
0000703C 22C0                       		move.l	d0,(a1)+
0000703E 22C0                       		move.l	d0,(a1)+
00007040 22C0                       		move.l	d0,(a1)+
00007042 22C0                       		move.l	d0,(a1)+
00007044 22C0                       		move.l	d0,(a1)+
00007046 22C0                       		move.l	d0,(a1)+
00007048 22C0                       		move.l	d0,(a1)+
0000704A 22C0                       		move.l	d0,(a1)+
0000704C 22C0                       		move.l	d0,(a1)+
0000704E 22C0                       		move.l	d0,(a1)+
00007050 22C0                       		move.l	d0,(a1)+
00007052 22C0                       		move.l	d0,(a1)+
00007054 51C9 FFDC                  		dbf	d1,Deform_All_1
00007058 4E75                       		rts	
0000705A                            
0000705A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000705A                            
0000705A                            
0000705A                            Deform_SYZ:
0000705A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000705E 48C5                       		ext.l	d5
00007060 E985                       		asl.l	#4,d5
00007062 2205                       		move.l	d5,d1
00007064 E385                       		asl.l	#1,d5
00007066 DA81                       		add.l	d1,d5
00007068 6100 0000                  		bsr.w	ScrollBlock2
0000706C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007072 43F8 A800                  		lea	($FFFFA800).w,a1
00007076 3438 F700                  		move.w	($FFFFF700).w,d2
0000707A 4442                       		neg.w	d2
0000707C 3002                       		move.w	d2,d0
0000707E E640                       		asr.w	#3,d0
00007080 9042                       		sub.w	d2,d0
00007082 48C0                       		ext.l	d0
00007084 E780                       		asl.l	#3,d0
00007086 81FC 0008                  		divs.w	#8,d0
0000708A 48C0                       		ext.l	d0
0000708C E980                       		asl.l	#4,d0
0000708E E180                       		asl.l	#8,d0
00007090 7600                       		moveq	#0,d3
00007092 3602                       		move.w	d2,d3
00007094 E243                       		asr.w	#1,d3
00007096 323C 0007                  		move.w	#7,d1
0000709A                            
0000709A                            Deform_SYZ_1:				; XREF: Deform_SYZ
0000709A 32C3                       		move.w	d3,(a1)+
0000709C 4843                       		swap	d3
0000709E D680                       		add.l	d0,d3
000070A0 4843                       		swap	d3
000070A2 51C9 FFF6                  		dbf	d1,Deform_SYZ_1
000070A6 3002                       		move.w	d2,d0
000070A8 E640                       		asr.w	#3,d0
000070AA 323C 0004                  		move.w	#4,d1
000070AE                            
000070AE                            Deform_SYZ_2:				; XREF: Deform_SYZ
000070AE 32C0                       		move.w	d0,(a1)+
000070B0 51C9 FFFC                  		dbf	d1,Deform_SYZ_2
000070B4 3002                       		move.w	d2,d0
000070B6 E440                       		asr.w	#2,d0
000070B8 323C 0005                  		move.w	#5,d1
000070BC                            
000070BC                            Deform_SYZ_3:				; XREF: Deform_SYZ
000070BC 32C0                       		move.w	d0,(a1)+
000070BE 51C9 FFFC                  		dbf	d1,Deform_SYZ_3
000070C2 3002                       		move.w	d2,d0
000070C4 3202                       		move.w	d2,d1
000070C6 E241                       		asr.w	#1,d1
000070C8 9041                       		sub.w	d1,d0
000070CA 48C0                       		ext.l	d0
000070CC E980                       		asl.l	#4,d0
000070CE 81FC 000E                  		divs.w	#$E,d0
000070D2 48C0                       		ext.l	d0
000070D4 E980                       		asl.l	#4,d0
000070D6 E180                       		asl.l	#8,d0
000070D8 7600                       		moveq	#0,d3
000070DA 3602                       		move.w	d2,d3
000070DC E243                       		asr.w	#1,d3
000070DE 323C 000D                  		move.w	#$D,d1
000070E2                            
000070E2                            Deform_SYZ_4:				; XREF: Deform_SYZ
000070E2 32C3                       		move.w	d3,(a1)+
000070E4 4843                       		swap	d3
000070E6 D680                       		add.l	d0,d3
000070E8 4843                       		swap	d3
000070EA 51C9 FFF6                  		dbf	d1,Deform_SYZ_4
000070EE 45F8 A800                  		lea	($FFFFA800).w,a2
000070F2 3038 F70C                  		move.w	($FFFFF70C).w,d0
000070F6 3400                       		move.w	d0,d2
000070F8 0240 01F0                  		andi.w	#$1F0,d0
000070FC E648                       		lsr.w	#3,d0
000070FE 45F2 0000                  		lea	(a2,d0.w),a2
00007102 6000 FF12                  		bra.w	Deform_All
00007106                            ; End of function Deform_SYZ
00007106                            
00007106                            
00007106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007106                            
00007106                            
00007106                            Deform_SBZ:
00007106 4A38 FE11                  		tst.b	($FFFFFE11).w
0000710A 6600 0000                  		bne.w	Deform_SBZ_Act2
0000710E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007112 48C4                       		ext.l	d4
00007114 EF84                       		asl.l	#7,d4
00007116 7C02                       		moveq	#2,d6
00007118 6100 0000                  		bsr.w	ScrollBlock4
0000711C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007120 48C4                       		ext.l	d4
00007122 ED84                       		asl.l	#6,d4
00007124 7C06                       		moveq	#6,d6
00007126 6100 0000                  		bsr.w	ScrollBlock6
0000712A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000712E 48C4                       		ext.l	d4
00007130 EB84                       		asl.l	#5,d4
00007132 2204                       		move.l	d4,d1
00007134 E384                       		asl.l	#1,d4
00007136 D881                       		add.l	d1,d4
00007138 7C04                       		moveq	#4,d6
0000713A 6100 0000                  		bsr.w	ScrollBlock5
0000713E 7800                       		moveq	#0,d4
00007140 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007144 48C5                       		ext.l	d5
00007146 EB85                       		asl.l	#5,d5
00007148 6100 0000                  		bsr.w	ScrollBlock1_2
0000714C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007150 31C0 F714                  		move.w	d0,($FFFFF714).w
00007154 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00007158 31C0 F618                  		move.w	d0,($FFFFF618).w
0000715C 1038 F756                  		move.b	($FFFFF756).w,d0
00007160 8038 F75A                  		or.b	($FFFFF75A).w,d0
00007164 8138 F758                  		or.b	d0,($FFFFF758).w
00007168 4238 F756                  		clr.b	($FFFFF756).w
0000716C 4238 F75A                  		clr.b	($FFFFF75A).w
00007170 43F8 A800                  		lea	($FFFFA800).w,a1
00007174 3438 F700                  		move.w	($FFFFF700).w,d2
00007178 4442                       		neg.w	d2
0000717A E442                       		asr.w	#2,d2
0000717C 3002                       		move.w	d2,d0
0000717E E240                       		asr.w	#1,d0
00007180 9042                       		sub.w	d2,d0
00007182 48C0                       		ext.l	d0
00007184 E780                       		asl.l	#3,d0
00007186 81FC 0004                  		divs.w	#4,d0
0000718A 48C0                       		ext.l	d0
0000718C E980                       		asl.l	#4,d0
0000718E E180                       		asl.l	#8,d0
00007190 7600                       		moveq	#0,d3
00007192 3602                       		move.w	d2,d3
00007194 323C 0003                  		move.w	#3,d1
00007198                            
00007198                            Deform_SBZ_1:				; XREF: Deform_SBZ
00007198 32C3                       		move.w	d3,(a1)+
0000719A 4843                       		swap	d3
0000719C D680                       		add.l	d0,d3
0000719E 4843                       		swap	d3
000071A0 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
000071A4 3038 F718                  		move.w	($FFFFF718).w,d0
000071A8 4440                       		neg.w	d0
000071AA 323C 0009                  		move.w	#9,d1
000071AE                            
000071AE                            Deform_SBZ_2:				; XREF: Deform_SBZ
000071AE 32C0                       		move.w	d0,(a1)+
000071B0 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
000071B4 3038 F710                  		move.w	($FFFFF710).w,d0
000071B8 4440                       		neg.w	d0
000071BA 323C 0006                  		move.w	#6,d1
000071BE                            
000071BE                            Deform_SBZ_3:				; XREF: Deform_SBZ
000071BE 32C0                       		move.w	d0,(a1)+
000071C0 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
000071C4 3038 F708                  		move.w	($FFFFF708).w,d0
000071C8 4440                       		neg.w	d0
000071CA 323C 000A                  		move.w	#$A,d1
000071CE                            
000071CE                            Deform_SBZ_4:				; XREF: Deform_SBZ
000071CE 32C0                       		move.w	d0,(a1)+
000071D0 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
000071D4 45F8 A800                  		lea	($FFFFA800).w,a2
000071D8 3038 F70C                  		move.w	($FFFFF70C).w,d0
000071DC 3400                       		move.w	d0,d2
000071DE 0240 01F0                  		andi.w	#$1F0,d0
000071E2 E648                       		lsr.w	#3,d0
000071E4 45F2 0000                  		lea	(a2,d0.w),a2
000071E8 6000 FE2C                  		bra.w	Deform_All
000071EC                            ; ===========================================================================
000071EC                            
000071EC                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
000071EC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000071F0 48C4                       		ext.l	d4
000071F2 ED84                       		asl.l	#6,d4
000071F4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000071F8 48C5                       		ext.l	d5
000071FA EB85                       		asl.l	#5,d5
000071FC 6100 0000                  		bsr.w	ScrollBlock1
00007200 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007206 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000720A 323C 00DF                  		move.w	#$DF,d1	; 'ß'
0000720E 3038 F700                  		move.w	($FFFFF700).w,d0
00007212 4440                       		neg.w	d0
00007214 4840                       		swap	d0
00007216 3038 F708                  		move.w	($FFFFF708).w,d0
0000721A 4440                       		neg.w	d0
0000721C                            
0000721C                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
0000721C 22C0                       		move.l	d0,(a1)+
0000721E 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
00007222 4E75                       		rts	
00007224                            ; End of function Deform_SBZ
00007224                            
00007224                            ; ---------------------------------------------------------------------------
00007224                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007224                            ; ---------------------------------------------------------------------------
00007224                            
00007224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007224                            
00007224                            
00007224                            ScrollHoriz:				; XREF: DeformBgLayer
00007224 3838 F700                  		move.w	($FFFFF700).w,d4
00007228 6100                       		bsr.s	ScrollHoriz2
0000722A 3038 F700                  		move.w	($FFFFF700).w,d0
0000722E 0240 0010                  		andi.w	#$10,d0
00007232 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007236 B300                       		eor.b	d1,d0
00007238 6600                       		bne.s	locret_65B0
0000723A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00007240 3038 F700                  		move.w	($FFFFF700).w,d0
00007244 9044                       		sub.w	d4,d0
00007246 6A00                       		bpl.s	loc_65AA
00007248 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000724E 4E75                       		rts	
00007250                            ; ===========================================================================
00007250                            
00007250                            loc_65AA:
00007250 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007256                            
00007256                            locret_65B0:
00007256 4E75                       		rts	
00007258                            ; End of function ScrollHoriz
00007258                            
00007258                            
00007258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007258                            
00007258                            
00007258                            ScrollHoriz2:				; XREF: ScrollHoriz
00007258 3038 D008                  		move.w	($FFFFD008).w,d0
0000725C 9078 F700                  		sub.w	($FFFFF700).w,d0
00007260 0440 0090                  		subi.w	#$90,d0
00007264 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
00007266 0440 0010                  		subi.w	#$10,d0
0000726A 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
0000726C 4278 F73A                  		clr.w	($FFFFF73A).w
00007270 4E75                       		rts
00007272                            ; ===========================================================================
00007272                            
00007272                            loc_65CC:
00007272 0C40 0010                  		cmpi.w	#$10,d0
00007276 6500                       		bcs.s	loc_65D6
00007278 303C 0010                  		move.w	#$10,d0
0000727C                            
0000727C                            loc_65D6:
0000727C D078 F700                  		add.w	($FFFFF700).w,d0
00007280 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007284 6D00                       		blt.s	loc_65E4
00007286 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000728A                            
0000728A                            loc_65E4:
0000728A 3200                       		move.w	d0,d1
0000728C 9278 F700                  		sub.w	($FFFFF700).w,d1
00007290 E141                       		asl.w	#8,d1
00007292 31C0 F700                  		move.w	d0,($FFFFF700).w
00007296 31C1 F73A                  		move.w	d1,($FFFFF73A).w
0000729A 4E75                       		rts	
0000729C                            ; ===========================================================================
0000729C                            
0000729C                            loc_65F6:				; XREF: ScrollHoriz2
0000729C D078 F700                  		add.w	($FFFFF700).w,d0
000072A0 B078 F728                  		cmp.w	($FFFFF728).w,d0
000072A4 6EE4                       		bgt.s	loc_65E4
000072A6 3038 F728                  		move.w	($FFFFF728).w,d0
000072AA 60DE                       		bra.s	loc_65E4
000072AC                            ; End of function ScrollHoriz2
000072AC                            
000072AC                            ; ===========================================================================
000072AC 4A40                       		tst.w	d0
000072AE 6A00                       		bpl.s	loc_6610
000072B0 303C FFFE                  		move.w	#-2,d0
000072B4 60E6                       		bra.s	loc_65F6
000072B6                            ; ===========================================================================
000072B6                            
000072B6                            loc_6610:
000072B6 303C 0002                  		move.w	#2,d0
000072BA 60B6                       		bra.s	loc_65CC
000072BC                            
000072BC                            ; ---------------------------------------------------------------------------
000072BC                            ; Subroutine to	scroll the level vertically as Sonic moves
000072BC                            ; ---------------------------------------------------------------------------
000072BC                            
000072BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072BC                            
000072BC                            
000072BC                            ScrollVertical:				; XREF: DeformBgLayer
000072BC 7200                       		moveq	#0,d1
000072BE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000072C2 9078 F704                  		sub.w	($FFFFF704).w,d0
000072C6 0838 0002 D022             		btst	#2,($FFFFD022).w
000072CC 6700                       		beq.s	loc_662A
000072CE 5B40                       		subq.w	#5,d0
000072D0                            
000072D0                            loc_662A:
000072D0 0838 0001 D022             		btst	#1,($FFFFD022).w
000072D6 6700                       		beq.s	loc_664A
000072D8 0640 0020                  		addi.w	#$20,d0
000072DC 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000072E0 6500                       		bcs.s	loc_6696
000072E2 0440 0040                  		subi.w	#$40,d0
000072E6 6400                       		bcc.s	loc_6696
000072E8 4A38 F75C                  		tst.b	($FFFFF75C).w
000072EC 6600                       		bne.s	loc_66A8
000072EE 6000                       		bra.s	loc_6656
000072F0                            ; ===========================================================================
000072F0                            
000072F0                            loc_664A:
000072F0 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000072F4 6600                       		bne.s	loc_665C
000072F6 4A38 F75C                  		tst.b	($FFFFF75C).w
000072FA 6600                       		bne.s	loc_66A8
000072FC                            
000072FC                            loc_6656:
000072FC 4278 F73C                  		clr.w	($FFFFF73C).w
00007300 4E75                       		rts	
00007302                            ; ===========================================================================
00007302                            
00007302                            loc_665C:
00007302 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007308 6600                       		bne.s	loc_6684
0000730A 3238 D020                  		move.w	($FFFFD020).w,d1
0000730E 6A00                       		bpl.s	loc_666C
00007310 4441                       		neg.w	d1
00007312                            
00007312                            loc_666C:
00007312 0C41 0800                  		cmpi.w	#$800,d1
00007316 6400                       		bcc.s	loc_6696
00007318 323C 0600                  		move.w	#$600,d1
0000731C 0C40 0006                  		cmpi.w	#6,d0
00007320 6E00                       		bgt.s	loc_66F6
00007322 0C40 FFFA                  		cmpi.w	#-6,d0
00007326 6D00                       		blt.s	loc_66C0
00007328 6000                       		bra.s	loc_66AE
0000732A                            ; ===========================================================================
0000732A                            
0000732A                            loc_6684:
0000732A 323C 0200                  		move.w	#$200,d1
0000732E 0C40 0002                  		cmpi.w	#2,d0
00007332 6E00                       		bgt.s	loc_66F6
00007334 0C40 FFFE                  		cmpi.w	#-2,d0
00007338 6D00                       		blt.s	loc_66C0
0000733A 6000                       		bra.s	loc_66AE
0000733C                            ; ===========================================================================
0000733C                            
0000733C                            loc_6696:
0000733C 323C 1000                  		move.w	#$1000,d1
00007340 0C40 0010                  		cmpi.w	#$10,d0
00007344 6E00                       		bgt.s	loc_66F6
00007346 0C40 FFF0                  		cmpi.w	#-$10,d0
0000734A 6D00                       		blt.s	loc_66C0
0000734C 6000                       		bra.s	loc_66AE
0000734E                            ; ===========================================================================
0000734E                            
0000734E                            loc_66A8:
0000734E 7000                       		moveq	#0,d0
00007350 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00007354                            
00007354                            loc_66AE:
00007354 7200                       		moveq	#0,d1
00007356 3200                       		move.w	d0,d1
00007358 D278 F704                  		add.w	($FFFFF704).w,d1
0000735C 4A40                       		tst.w	d0
0000735E 6A00 0000                  		bpl.w	loc_6700
00007362 6000 0000                  		bra.w	loc_66CC
00007366                            ; ===========================================================================
00007366                            
00007366                            loc_66C0:
00007366 4441                       		neg.w	d1
00007368 48C1                       		ext.l	d1
0000736A E181                       		asl.l	#8,d1
0000736C D2B8 F704                  		add.l	($FFFFF704).w,d1
00007370 4841                       		swap	d1
00007372                            
00007372                            loc_66CC:
00007372 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007376 6E00                       		bgt.s	loc_6724
00007378 0C41 FF00                  		cmpi.w	#-$100,d1
0000737C 6E00                       		bgt.s	loc_66F0
0000737E 0241 07FF                  		andi.w	#$7FF,d1
00007382 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007388 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0000738E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007394 6000                       		bra.s	loc_6724
00007396                            ; ===========================================================================
00007396                            
00007396                            loc_66F0:
00007396 3238 F72C                  		move.w	($FFFFF72C).w,d1
0000739A 6000                       		bra.s	loc_6724
0000739C                            ; ===========================================================================
0000739C                            
0000739C                            loc_66F6:
0000739C 48C1                       		ext.l	d1
0000739E E181                       		asl.l	#8,d1
000073A0 D2B8 F704                  		add.l	($FFFFF704).w,d1
000073A4 4841                       		swap	d1
000073A6                            
000073A6                            loc_6700:
000073A6 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000073AA 6D00                       		blt.s	loc_6724
000073AC 0441 0800                  		subi.w	#$800,d1
000073B0 6500                       		bcs.s	loc_6720
000073B2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000073B8 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000073BE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000073C4 6000                       		bra.s	loc_6724
000073C6                            ; ===========================================================================
000073C6                            
000073C6                            loc_6720:
000073C6 3238 F72E                  		move.w	($FFFFF72E).w,d1
000073CA                            
000073CA                            loc_6724:
000073CA 3838 F704                  		move.w	($FFFFF704).w,d4
000073CE 4841                       		swap	d1
000073D0 2601                       		move.l	d1,d3
000073D2 96B8 F704                  		sub.l	($FFFFF704).w,d3
000073D6 E09B                       		ror.l	#8,d3
000073D8 31C3 F73C                  		move.w	d3,($FFFFF73C).w
000073DC 21C1 F704                  		move.l	d1,($FFFFF704).w
000073E0 3038 F704                  		move.w	($FFFFF704).w,d0
000073E4 0240 0010                  		andi.w	#$10,d0
000073E8 1238 F74B                  		move.b	($FFFFF74B).w,d1
000073EC B300                       		eor.b	d1,d0
000073EE 6600                       		bne.s	locret_6766
000073F0 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
000073F6 3038 F704                  		move.w	($FFFFF704).w,d0
000073FA 9044                       		sub.w	d4,d0
000073FC 6A00                       		bpl.s	loc_6760
000073FE 08F8 0000 F754             		bset	#0,($FFFFF754).w
00007404 4E75                       		rts	
00007406                            ; ===========================================================================
00007406                            
00007406                            loc_6760:
00007406 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000740C                            
0000740C                            locret_6766:
0000740C 4E75                       		rts	
0000740E                            ; End of function ScrollVertical
0000740E                            
0000740E                            
0000740E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000740E                            
0000740E                            
0000740E                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
0000740E 2438 F708                  		move.l	($FFFFF708).w,d2
00007412 2002                       		move.l	d2,d0
00007414 D084                       		add.l	d4,d0
00007416 21C0 F708                  		move.l	d0,($FFFFF708).w
0000741A 2200                       		move.l	d0,d1
0000741C 4841                       		swap	d1
0000741E 0241 0010                  		andi.w	#$10,d1
00007422 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007426 B701                       		eor.b	d3,d1
00007428 6600                       		bne.s	ScrollBlock1_2
0000742A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007430 9082                       		sub.l	d2,d0
00007432 6A00                       		bpl.s	ScrollBlock1_1
00007434 08F8 0002 F756             		bset	#2,($FFFFF756).w
0000743A 6000                       		bra.s	ScrollBlock1_2
0000743C                            ; ===========================================================================
0000743C                            
0000743C                            ScrollBlock1_1:				; XREF: ScrollBlock1
0000743C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007442                            
00007442                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
00007442 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007446 2003                       		move.l	d3,d0
00007448 D085                       		add.l	d5,d0
0000744A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000744E 2200                       		move.l	d0,d1
00007450 4841                       		swap	d1
00007452 0241 0010                  		andi.w	#$10,d1
00007456 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000745A B501                       		eor.b	d2,d1
0000745C 6600                       		bne.s	ScrollBlock1_End
0000745E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007464 9083                       		sub.l	d3,d0
00007466 6A00                       		bpl.s	ScrollBlock1_3
00007468 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000746E 4E75                       		rts	
00007470                            ; ===========================================================================
00007470                            
00007470                            ScrollBlock1_3:				; XREF: ScrollBlock1
00007470 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007476                            
00007476                            ScrollBlock1_End:			; XREF: ScrollBlock1
00007476 4E75                       		rts	
00007478                            ; End of function ScrollBlock1
00007478                            
00007478                            
00007478                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007478                            
00007478                            
00007478                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
00007478 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000747C 2003                       		move.l	d3,d0
0000747E D085                       		add.l	d5,d0
00007480 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007484 2200                       		move.l	d0,d1
00007486 4841                       		swap	d1
00007488 0241 0010                  		andi.w	#$10,d1
0000748C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007490 B501                       		eor.b	d2,d1
00007492 6600                       		bne.s	ScrollBlock2_End
00007494 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000749A 9083                       		sub.l	d3,d0
0000749C 6A00                       		bpl.s	ScrollBlock2_1
0000749E 08F8 0004 F756             		bset	#4,($FFFFF756).w
000074A4 4E75                       		rts	
000074A6                            ; ===========================================================================
000074A6                            
000074A6                            ScrollBlock2_1:				; XREF: ScrollBlock2
000074A6 08F8 0005 F756             		bset	#5,($FFFFF756).w
000074AC                            
000074AC                            ScrollBlock2_End:			; XREF: ScrollBlock2
000074AC 4E75                       		rts	
000074AE                            ; End of function ScrollBlock2
000074AE                            
000074AE                            
000074AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074AE                            
000074AE                            
000074AE                            ScrollBlock3:				; XREF: Deform_MZ
000074AE 3638 F70C                  		move.w	($FFFFF70C).w,d3
000074B2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000074B6 3200                       		move.w	d0,d1
000074B8 0241 0010                  		andi.w	#$10,d1
000074BC 1438 F74D                  		move.b	($FFFFF74D).w,d2
000074C0 B501                       		eor.b	d2,d1
000074C2 6600                       		bne.s	ScrollBlock3_End
000074C4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000074CA 9043                       		sub.w	d3,d0
000074CC 6A00                       		bpl.s	ScrollBlock3_1
000074CE 08F8 0000 F756             		bset	#0,($FFFFF756).w
000074D4 4E75                       		rts	
000074D6                            ; ===========================================================================
000074D6                            
000074D6                            ScrollBlock3_1:				; XREF: ScrollBlock3
000074D6 08F8 0001 F756             		bset	#1,($FFFFF756).w
000074DC                            
000074DC                            ScrollBlock3_End:			; XREF: ScrollBlock3
000074DC 4E75                       		rts	
000074DE                            ; End of function ScrollBlock3
000074DE                            
000074DE                            
000074DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074DE                            
000074DE                            
000074DE                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
000074DE 2438 F708                  		move.l	($FFFFF708).w,d2
000074E2 2002                       		move.l	d2,d0
000074E4 D084                       		add.l	d4,d0
000074E6 21C0 F708                  		move.l	d0,($FFFFF708).w
000074EA 2200                       		move.l	d0,d1
000074EC 4841                       		swap	d1
000074EE 0241 0010                  		andi.w	#$10,d1
000074F2 1638 F74C                  		move.b	($FFFFF74C).w,d3
000074F6 B701                       		eor.b	d3,d1
000074F8 6600                       		bne.s	ScrollBlock4_End
000074FA 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007500 9082                       		sub.l	d2,d0
00007502 6A00                       		bpl.s	ScrollBlock4_1
00007504 0DF8 F756                  		bset	d6,($FFFFF756).w
00007508 6000                       		bra.s	ScrollBlock4_End
0000750A                            ; ===========================================================================
0000750A                            
0000750A                            ScrollBlock4_1:				; XREF: ScrollBlock4
0000750A 5206                       		addq.b	#1,d6
0000750C 0DF8 F756                  		bset	d6,($FFFFF756).w
00007510                            
00007510                            ScrollBlock4_End:			; XREF: ScrollBlock4
00007510 4E75                       		rts	
00007512                            ; End of function ScrollBlock4
00007512                            
00007512                            
00007512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007512                            
00007512                            
00007512                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
00007512 2438 F710                  		move.l	($FFFFF710).w,d2
00007516 2002                       		move.l	d2,d0
00007518 D084                       		add.l	d4,d0
0000751A 21C0 F710                  		move.l	d0,($FFFFF710).w
0000751E 2200                       		move.l	d0,d1
00007520 4841                       		swap	d1
00007522 0241 0010                  		andi.w	#$10,d1
00007526 1638 F74E                  		move.b	($FFFFF74E).w,d3
0000752A B701                       		eor.b	d3,d1
0000752C 6600                       		bne.s	ScrollBlock5_End
0000752E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007534 9082                       		sub.l	d2,d0
00007536 6A00                       		bpl.s	ScrollBlock5_1
00007538 0DF8 F758                  		bset	d6,($FFFFF758).w
0000753C 6000                       		bra.s	ScrollBlock5_End
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            ScrollBlock5_1:				; XREF: ScrollBlock5
0000753E 5206                       		addq.b	#1,d6
00007540 0DF8 F758                  		bset	d6,($FFFFF758).w
00007544                            
00007544                            ScrollBlock5_End:			; XREF: ScrollBlock5
00007544 4E75                       		rts	
00007546                            ; End of function ScrollBlock5
00007546                            
00007546                            
00007546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007546                            
00007546                            
00007546                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
00007546 2438 F718                  		move.l	($FFFFF718).w,d2
0000754A 2002                       		move.l	d2,d0
0000754C D084                       		add.l	d4,d0
0000754E 21C0 F718                  		move.l	d0,($FFFFF718).w
00007552 2200                       		move.l	d0,d1
00007554 4841                       		swap	d1
00007556 0241 0010                  		andi.w	#$10,d1
0000755A 1638 F750                  		move.b	($FFFFF750).w,d3
0000755E B701                       		eor.b	d3,d1
00007560 6600                       		bne.s	ScrollBlock6_End
00007562 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
00007568 9082                       		sub.l	d2,d0
0000756A 6A00                       		bpl.s	ScrollBlock6_1
0000756C 0DF8 F75A                  		bset	d6,($FFFFF75A).w
00007570 6000                       		bra.s	ScrollBlock6_End
00007572                            ; ===========================================================================
00007572                            
00007572                            ScrollBlock6_1:				; XREF: ScrollBlock6
00007572 5206                       		addq.b	#1,d6
00007574 0DF8 F75A                  		bset	d6,($FFFFF75A).w
00007578                            
00007578                            ScrollBlock6_End:			; XREF: ScrollBlock6
00007578 4E75                       		rts	
0000757A                            ; End of function ScrollBlock6
0000757A                            
0000757A                            
0000757A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000757A                            
0000757A                            
0000757A                            sub_6886:		
0000757A 4BF9 00C0 0004             		lea	($C00004).l,a5
00007580 4DF9 00C0 0000             		lea	($C00000).l,a6
00007586 45F8 F756                  		lea	($FFFFF756).w,a2
0000758A 47F8 F708                  		lea	($FFFFF708).w,a3
0000758E 49F8 A440                  		lea	($FFFFA440).w,a4
00007592 343C 6000                  		move.w	#$6000,d2
00007596 6100 0000                  		bsr.w	sub_6D0A
0000759A 45F8 F758                  		lea	($FFFFF758).w,a2
0000759E 47F8 F710                  		lea	($FFFFF710).w,a3
000075A2 6000 0000                  		bra.w	sub_6DA6
000075A6                            ; End of function sub_6886
000075A6                            
000075A6                            ; ---------------------------------------------------------------------------
000075A6                            ; Subroutine to	display	correct	tiles as you move
000075A6                            ; ---------------------------------------------------------------------------
000075A6                            
000075A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075A6                            
000075A6                            
000075A6                            LoadTilesAsYouMove:			; XREF: Demo_Time
000075A6 4BF9 00C0 0004             		lea	($C00004).l,a5
000075AC 4DF9 00C0 0000             		lea	($C00000).l,a6
000075B2 45F8 FF32                  		lea	($FFFFFF32).w,a2
000075B6 47F8 FF18                  		lea	($FFFFFF18).w,a3
000075BA 49F8 A440                  		lea	($FFFFA440).w,a4
000075BE 343C 6000                  		move.w	#$6000,d2
000075C2 6100 0000                  		bsr.w	sub_6D0A
000075C6 45F8 FF34                  		lea	($FFFFFF34).w,a2
000075CA 47F8 FF20                  		lea	($FFFFFF20).w,a3
000075CE 6100 0000                  		bsr.w	sub_6DA6
000075D2 45F8 FF36                  		lea	($FFFFFF36).w,a2
000075D6 47F8 FF28                  		lea	($FFFFFF28).w,a3
000075DA 6100 0000                  		bsr.w	sub_6EA4
000075DE 45F8 FF30                  		lea	($FFFFFF30).w,a2
000075E2 47F8 FF10                  		lea	($FFFFFF10).w,a3
000075E6 49F8 A400                  		lea	($FFFFA400).w,a4
000075EA 343C 4000                  		move.w	#$4000,d2
000075EE 4A38 F745                  		tst.b	($FFFFF745).w
000075F2 6700                       		beq.s	Draw_FG
000075F4 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
000075FA 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
000075FC 7C0F                       		moveq	#$F,d6				;
000075FE                            
000075FE                            Draw_All:
000075FE 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
00007602 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
00007604 3204                       		move.w	d4,d1
00007606 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000760A 3801                       		move.w	d1,d4
0000760C 7AF0                       		moveq	#-$10,d5
0000760E 6100 0000                  		bsr.w	DrawTiles_LR
00007612 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007616 0644 0010                  		addi.w	#$10,d4
0000761A 51CE FFE2                  		dbf	d6,Draw_All
0000761E 4E75                       		rts	
00007620                            
00007620                            Draw_FG:
00007620 4A12                       		tst.b	(a2)
00007622 6700                       		beq.s	locret_6D08
00007624 0892 0000                  		bclr	#0,(a2)
00007628 6700                       		beq.s	loc_6CBE
0000762A 78F0                       		moveq	#-$10,d4
0000762C 7AF0                       		moveq	#-$10,d5
0000762E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007632 78F0                       		moveq	#-$10,d4
00007634 7AF0                       		moveq	#-$10,d5
00007636 6100 0000                  		bsr.w	DrawTiles_LR
0000763A                            
0000763A                            loc_6CBE:
0000763A 0892 0001                  		bclr	#1,(a2)
0000763E 6700                       		beq.s	loc_6CD8
00007640 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007644 7AF0                       		moveq	#-$10,d5
00007646 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000764A 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000764E 7AF0                       		moveq	#-$10,d5
00007650 6100 0000                  		bsr.w	DrawTiles_LR
00007654                            
00007654                            loc_6CD8:
00007654 0892 0002                  		bclr	#2,(a2)
00007658 6700                       		beq.s	loc_6CEE
0000765A 78F0                       		moveq	#-$10,d4
0000765C 7AF0                       		moveq	#-$10,d5
0000765E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007662 78F0                       		moveq	#-$10,d4
00007664 7AF0                       		moveq	#-$10,d5
00007666 6100 0000                  		bsr.w	DrawTiles_TB
0000766A                            
0000766A                            loc_6CEE:
0000766A 0892 0003                  		bclr	#3,(a2)
0000766E 6700                       		beq.s	locret_6D08
00007670 78F0                       		moveq	#-$10,d4
00007672 3A3C 0140                  		move.w	#$140,d5
00007676 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000767A 78F0                       		moveq	#-$10,d4
0000767C 3A3C 0140                  		move.w	#$140,d5
00007680 6100 0000                  		bsr.w	DrawTiles_TB
00007684                            
00007684                            locret_6D08:
00007684 4E75                       		rts	
00007686                            
00007686                            ; End of function LoadTilesAsYouMove
00007686                            
00007686                            
00007686                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007686                            
00007686                            
00007686                            sub_6D0A:
00007686 4A12                       		tst.b	(a2)
00007688 6700 0000                  		beq.w	locret_6DA4
0000768C 0892 0000                  		bclr	#0,(a2)
00007690 6700                       		beq.s	loc_6D26
00007692 78F0                       		moveq	#-$10,d4
00007694 7AF0                       		moveq	#-$10,d5
00007696 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000769A 78F0                       		moveq	#-$10,d4
0000769C 7AF0                       		moveq	#-$10,d5
0000769E 6100 0000                  		bsr.w	DrawTiles_LR
000076A2                            
000076A2                            loc_6D26:
000076A2 0892 0001                  		bclr	#1,(a2)
000076A6 6700                       		beq.s	loc_6D40
000076A8 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076AC 7AF0                       		moveq	#-$10,d5
000076AE 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076B2 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076B6 7AF0                       		moveq	#-$10,d5
000076B8 6100 0000                  		bsr.w	DrawTiles_LR
000076BC                            
000076BC                            loc_6D40:
000076BC 0892 0002                  		bclr	#2,(a2)
000076C0 6700                       		beq.s	loc_6D56
000076C2 78F0                       		moveq	#-$10,d4
000076C4 7AF0                       		moveq	#-$10,d5
000076C6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076CA 78F0                       		moveq	#-$10,d4
000076CC 7AF0                       		moveq	#-$10,d5
000076CE 6100 0000                  		bsr.w	DrawTiles_TB
000076D2                            
000076D2                            loc_6D56:
000076D2 0892 0003                  		bclr	#3,(a2)
000076D6 6700                       		beq.s	loc_6D70
000076D8 78F0                       		moveq	#-$10,d4
000076DA 3A3C 0140                  		move.w	#$140,d5
000076DE 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076E2 78F0                       		moveq	#-$10,d4
000076E4 3A3C 0140                  		move.w	#$140,d5
000076E8 6100 0000                  		bsr.w	DrawTiles_TB
000076EC                            
000076EC                            loc_6D70:
000076EC 0892 0004                  		bclr	#4,(a2)
000076F0 6700                       		beq.s	loc_6D88
000076F2 78F0                       		moveq	#-$10,d4
000076F4 7A00                       		moveq	#0,d5
000076F6 6100 0000                  		bsr.w	loc_7176
000076FA 78F0                       		moveq	#-$10,d4
000076FC 7A00                       		moveq	#0,d5
000076FE 7C1F                       		moveq	#$1F,d6
00007700 6100 0000                  		bsr.w	DrawTiles_LR3
00007704                            
00007704                            loc_6D88:
00007704 0892 0005                  		bclr	#5,(a2)
00007708 6700                       		beq.s	locret_6DA4
0000770A 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000770E 7A00                       		moveq	#0,d5
00007710 6100 0000                  		bsr.w	loc_7176
00007714 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007718 7A00                       		moveq	#0,d5
0000771A 7C1F                       		moveq	#$1F,d6
0000771C 6100 0000                  		bsr.w	DrawTiles_LR3
00007720                            
00007720                            locret_6DA4:
00007720 4E75                       		rts	
00007722                            ; End of function sub_6D0A
00007722                            
00007722                            
00007722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007722                            
00007722                            
00007722                            sub_6DA6:
00007722 4A12                       		tst.b	(a2)
00007724 6700 0000                  		beq.w	locret_6DF2
00007728 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
0000772E 6700 0000                  		beq.w	loc_6E16
00007732 0892 0000                  		bclr	#0,(a2)
00007736 6700                       		beq.s	loc_6DD2
00007738 383C 0070                  		move.w	#$70,d4	; 'p'
0000773C 7AF0                       		moveq	#-$10,d5
0000773E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007742 383C 0070                  		move.w	#$70,d4	; 'p'
00007746 7AF0                       		moveq	#-$10,d5
00007748 7C02                       		moveq	#2,d6
0000774A 6100 0000                  		bsr.w	DrawTiles_TB2
0000774E                            
0000774E                            loc_6DD2:
0000774E 0892 0001                  		bclr	#1,(a2)
00007752 6700                       		beq.s	locret_6DF2
00007754 383C 0070                  		move.w	#$70,d4	; 'p'
00007758 3A3C 0140                  		move.w	#$140,d5
0000775C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007760 383C 0070                  		move.w	#$70,d4	; 'p'
00007764 3A3C 0140                  		move.w	#$140,d5
00007768 7C02                       		moveq	#2,d6
0000776A 6100 0000                  		bsr.w	DrawTiles_TB2
0000776E                            
0000776E                            locret_6DF2:
0000776E 4E75                       		rts	
00007770                            ; ===========================================================================
00007770 00                         unk_6DF4:	dc.b   0 ;	 
00007771 00                         unk_6DF5:	dc.b   0 ;	 
00007772 00                         		dc.b   0 ;  
00007773 00                         		dc.b   0 ;  
00007774 00                         		dc.b   0 ;  
00007775 06                         		dc.b   6 ;  
00007776 06                         		dc.b   6 ;  
00007777 06                         		dc.b   6 ;  
00007778 06                         		dc.b   6 ;  
00007779 06                         		dc.b   6 ;  
0000777A 06                         		dc.b   6 ;  
0000777B 06                         		dc.b   6 ;  
0000777C 06                         		dc.b   6 ;  
0000777D 06                         		dc.b   6 ;  
0000777E 06                         		dc.b   6 ;  
0000777F 04                         		dc.b   4 ;  
00007780 04                         		dc.b   4 ;  
00007781 04                         		dc.b   4 ;  
00007782 04                         		dc.b   4 ;  
00007783 04                         		dc.b   4 ;  
00007784 04                         		dc.b   4 ;  
00007785 04                         		dc.b   4 ;  
00007786 02                         		dc.b   2 ;  
00007787 02                         		dc.b   2 ;  
00007788 02                         		dc.b   2 ;  
00007789 02                         		dc.b   2 ;  
0000778A 02                         		dc.b   2 ;  
0000778B 02                         		dc.b   2 ;  
0000778C 02                         		dc.b   2 ;  
0000778D 02                         		dc.b   2 ;  
0000778E 02                         		dc.b   2 ;  
0000778F 02                         		dc.b   2 ;  
00007790 02                         		dc.b   2 ;  
00007791 00                         		dc.b   0 ;  
00007792                            ; ===========================================================================
00007792                            
00007792                            loc_6E16:
00007792 78F0                       		moveq	#-$10,d4
00007794 0892 0000                  		bclr	#0,(a2)
00007798 6600                       		bne.s	loc_6E28
0000779A 0892 0001                  		bclr	#1,(a2)
0000779E 6700                       		beq.s	loc_6E72
000077A0 383C 00E0                  		move.w	#$E0,d4	; 'à'
000077A4                            
000077A4                            loc_6E28:
000077A4 41F9 0000 7771             		lea	(unk_6DF5).l,a0
000077AA 3038 F70C                  		move.w	($FFFFF70C).w,d0
000077AE D044                       		add.w	d4,d0
000077B0 0240 01F0                  		andi.w	#$1F0,d0
000077B4 E848                       		lsr.w	#4,d0
000077B6 1030 0000                  		move.b	(a0,d0.w),d0
000077BA 47F9 0000 0000             		lea	(unk_6FE4).l,a3
000077C0 3673 0000                  		movea.w	(a3,d0.w),a3
000077C4 6700                       		beq.s	loc_6E5E
000077C6 7AF0                       		moveq	#-$10,d5
000077C8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000077CC 6100 0000                  		bsr.w	Calc_VRAM_Pos
000077D0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000077D4 6100 0000                  		bsr.w	DrawTiles_LR
000077D8 6000                       		bra.s	loc_6E72
000077DA                            ; ===========================================================================
000077DA                            
000077DA                            loc_6E5E:
000077DA 7A00                       		moveq	#0,d5
000077DC 48E7 0C00                  		movem.l	d4-d5,-(sp)
000077E0 6100 0000                  		bsr.w	loc_7176
000077E4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000077E8 7C1F                       		moveq	#$1F,d6
000077EA 6100 0000                  		bsr.w	DrawTiles_LR3
000077EE                            
000077EE                            loc_6E72:
000077EE 4A12                       		tst.b	(a2)
000077F0 6600                       		bne.s	loc_6E78
000077F2 4E75                       		rts	
000077F4                            ; ===========================================================================
000077F4                            
000077F4                            loc_6E78:
000077F4 78F0                       		moveq	#-$10,d4
000077F6 7AF0                       		moveq	#-$10,d5
000077F8 1012                       		move.b	(a2),d0
000077FA 0200 00A8                  		andi.b	#-$58,d0
000077FE 6700                       		beq.s	loc_6E8C
00007800 E208                       		lsr.b	#1,d0
00007802 1480                       		move.b	d0,(a2)
00007804 3A3C 0140                  		move.w	#$140,d5
00007808                            
00007808                            loc_6E8C:
00007808 41F9 0000 7770             		lea	(unk_6DF4).l,a0
0000780E 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007812 0240 01F0                  		andi.w	#$1F0,d0
00007816 E848                       		lsr.w	#4,d0
00007818 41F0 0000                  		lea	(a0,d0.w),a0
0000781C 6000 0000                  		bra.w	loc_6FEC
00007820                            ; End of function sub_6DA6
00007820                            
00007820                            
00007820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007820                            
00007820                            
00007820                            sub_6EA4:
00007820 4A12                       		tst.b	(a2)
00007822 6700 0000                  		beq.w	locret_6EF0
00007826 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000782C 6700 0000                  		beq.w	loc_6F54
00007830 0892 0000                  		bclr	#0,(a2)
00007834 6700                       		beq.s	loc_6ED0_2
00007836 383C 0040                  		move.w	#$40,d4	; '@'
0000783A 7AF0                       		moveq	#-$10,d5
0000783C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007840 383C 0040                  		move.w	#$40,d4	; '@'
00007844 7AF0                       		moveq	#-$10,d5
00007846 7C02                       		moveq	#2,d6
00007848 6100 0000                  		bsr.w	DrawTiles_TB2
0000784C                            
0000784C                            loc_6ED0_2:
0000784C 0892 0001                  		bclr	#1,(a2)
00007850 6700                       		beq.s	locret_6EF0
00007852 383C 0040                  		move.w	#$40,d4	; '@'
00007856 3A3C 0140                  		move.w	#$140,d5
0000785A 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000785E 383C 0040                  		move.w	#$40,d4	; '@'
00007862 3A3C 0140                  		move.w	#$140,d5
00007866 7C02                       		moveq	#2,d6
00007868 6100 0000                  		bsr.w	DrawTiles_TB2
0000786C                            
0000786C                            locret_6EF0:
0000786C 4E75                       		rts	
0000786E                            ; ===========================================================================
0000786E 00                         unk_6EF2:	dc.b   0 ;	 
0000786F 00                         unk_6EF3:	dc.b   0 ;	 
00007870 00                         		dc.b   0 ;  
00007871 00                         		dc.b   0 ;  
00007872 00                         		dc.b   0 ;  
00007873 00                         		dc.b   0 ;  
00007874 06                         		dc.b   6 ;  
00007875 06                         		dc.b   6 ;  
00007876 04                         		dc.b   4 ;  
00007877 04                         		dc.b   4 ;  
00007878 04                         		dc.b   4 ;  
00007879 04                         		dc.b   4 ;  
0000787A 04                         		dc.b   4 ;  
0000787B 04                         		dc.b   4 ;  
0000787C 04                         		dc.b   4 ;  
0000787D 04                         		dc.b   4 ;  
0000787E 04                         		dc.b   4 ;  
0000787F 02                         		dc.b   2 ;  
00007880 02                         		dc.b   2 ;  
00007881 02                         		dc.b   2 ;  
00007882 02                         		dc.b   2 ;  
00007883 02                         		dc.b   2 ;  
00007884 02                         		dc.b   2 ;  
00007885 02                         		dc.b   2 ;  
00007886 02                         		dc.b   2 ;  
00007887 02                         		dc.b   2 ;  
00007888 02                         		dc.b   2 ;  
00007889 02                         		dc.b   2 ;  
0000788A 02                         		dc.b   2 ;  
0000788B 02                         		dc.b   2 ;  
0000788C 02                         		dc.b   2 ;  
0000788D 02                         		dc.b   2 ;  
0000788E 02                         		dc.b   2 ;  
0000788F 02                         		dc.b   2 ;  
00007890 02                         		dc.b   2 ;  
00007891 02                         		dc.b   2 ;  
00007892 02                         		dc.b   2 ;  
00007893 02                         		dc.b   2 ;  
00007894 02                         		dc.b   2 ;  
00007895 02                         		dc.b   2 ;  
00007896 02                         		dc.b   2 ;  
00007897 02                         		dc.b   2 ;  
00007898 02                         		dc.b   2 ;  
00007899 02                         		dc.b   2 ;  
0000789A 02                         		dc.b   2 ;  
0000789B 02                         		dc.b   2 ;  
0000789C 02                         		dc.b   2 ;  
0000789D 02                         		dc.b   2 ;  
0000789E 02                         		dc.b   2 ;  
0000789F 02                         		dc.b   2 ;  
000078A0 02                         		dc.b   2 ;  
000078A1 02                         		dc.b   2 ;  
000078A2 02                         		dc.b   2 ;  
000078A3 02                         		dc.b   2 ;  
000078A4 02                         		dc.b   2 ;  
000078A5 02                         		dc.b   2 ;  
000078A6 02                         		dc.b   2 ;  
000078A7 02                         		dc.b   2 ;  
000078A8 02                         		dc.b   2 ;  
000078A9 02                         		dc.b   2 ;  
000078AA 02                         		dc.b   2 ;  
000078AB 02                         		dc.b   2 ;  
000078AC 02                         		dc.b   2 ;  
000078AD 02                         		dc.b   2 ;  
000078AE 02                         		dc.b   2 ;  
000078AF 02                         		dc.b   2 ;  
000078B0 02                         		dc.b   2 ;  
000078B1 02                         		dc.b   2 ;  
000078B2 02                         		dc.b   2 ;  
000078B3 02                         		dc.b   2 ;  
000078B4 02                         		dc.b   2 ;  
000078B5 02                         		dc.b   2 ;  
000078B6 02                         		dc.b   2 ;  
000078B7 02                         		dc.b   2 ;  
000078B8 02                         		dc.b   2 ;  
000078B9 02                         		dc.b   2 ;  
000078BA 02                         		dc.b   2 ;  
000078BB 02                         		dc.b   2 ;  
000078BC 02                         		dc.b   2 ;  
000078BD 02                         		dc.b   2 ;  
000078BE 02                         		dc.b   2 ;  
000078BF 02                         		dc.b   2 ;  
000078C0 02                         		dc.b   2 ;  
000078C1 02                         		dc.b   2 ;  
000078C2 02                         		dc.b   2 ;  
000078C3 02                         		dc.b   2 ;  
000078C4 02                         		dc.b   2 ;  
000078C5 02                         		dc.b   2 ;  
000078C6 02                         		dc.b   2 ;  
000078C7 02                         		dc.b   2 ;  
000078C8 02                         		dc.b   2 ;  
000078C9 02                         		dc.b   2 ;  
000078CA 02                         		dc.b   2 ;  
000078CB 02                         		dc.b   2 ;  
000078CC 02                         		dc.b   2 ;  
000078CD 02                         		dc.b   2 ;  
000078CE 02                         		dc.b   2 ;  
000078CF 00                         		dc.b   0 ;  
000078D0                            ; ===========================================================================
000078D0                            
000078D0                            loc_6F54:
000078D0 78F0                       		moveq	#-$10,d4
000078D2 0892 0000                  		bclr	#0,(a2)
000078D6 6600                       		bne.s	loc_6F66
000078D8 0892 0001                  		bclr	#1,(a2)
000078DC 6700                       		beq.s	loc_6FAE
000078DE 383C 00E0                  		move.w	#$E0,d4	; 'à'
000078E2                            
000078E2                            loc_6F66:
000078E2 41F9 0000 786F             		lea	(unk_6EF3).l,a0
000078E8 3038 F70C                  		move.w	($FFFFF70C).w,d0
000078EC 0440 0200                  		subi.w	#$200,d0
000078F0 D044                       		add.w	d4,d0
000078F2 0240 07F0                  		andi.w	#$7F0,d0
000078F6 E848                       		lsr.w	#4,d0
000078F8 1030 0000                  		move.b	(a0,d0.w),d0
000078FC 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
00007900 6700                       		beq.s	loc_6F9A
00007902 7AF0                       		moveq	#-$10,d5
00007904 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007908 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000790C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007910 6100 0000                  		bsr.w	DrawTiles_LR
00007914 6000                       		bra.s	loc_6FAE
00007916                            ; ===========================================================================
00007916                            
00007916                            loc_6F9A:
00007916 7A00                       		moveq	#0,d5
00007918 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000791C 6100 0000                  		bsr.w	loc_7176
00007920 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007924 7C1F                       		moveq	#$1F,d6
00007926 6100 0000                  		bsr.w	DrawTiles_LR3
0000792A                            
0000792A                            loc_6FAE:
0000792A 4A12                       		tst.b	(a2)
0000792C 6600                       		bne.s	loc_6FB4
0000792E 4E75                       		rts	
00007930                            ; ===========================================================================
00007930                            
00007930                            loc_6FB4:
00007930 78F0                       		moveq	#-$10,d4
00007932 7AF0                       		moveq	#-$10,d5
00007934 1012                       		move.b	(a2),d0
00007936 0200 00A8                  		andi.b	#-$58,d0
0000793A 6700                       		beq.s	loc_6FC8
0000793C E208                       		lsr.b	#1,d0
0000793E 1480                       		move.b	d0,(a2)
00007940 3A3C 0140                  		move.w	#$140,d5
00007944                            
00007944                            loc_6FC8:
00007944 41F9 0000 786E             		lea	(unk_6EF2).l,a0
0000794A 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000794E 0440 0200                  		subi.w	#$200,d0
00007952 0240 07F0                  		andi.w	#$7F0,d0
00007956 E848                       		lsr.w	#4,d0
00007958 41F0 0000                  		lea	(a0,d0.w),a0
0000795C 6000 0000                  		bra.w	loc_6FEC
00007960                            ; ===========================================================================
00007960 FF                         unk_6FE4:	dc.b $FF ;  
00007961 18                         		dc.b $18 ;  
00007962 FF                         		dc.b $FF ;  
00007963 18                         		dc.b $18 ;  
00007964 FF                         		dc.b $FF ;  
00007965 20                         		dc.b $20 ;  
00007966 FF                         		dc.b $FF ;  
00007967 28                         		dc.b $28 ; (
00007968                            ; ===========================================================================
00007968                            
00007968                            loc_6FEC:
00007968 7C0F                       		moveq	#$F,d6
0000796A 2E3C 0080 0000             		move.l	#$800000,d7
00007970                            
00007970                            loc_6FF4:
00007970 7000                       		moveq	#0,d0
00007972 1018                       		move.b	(a0)+,d0
00007974 0112                       		btst	d0,(a2)
00007976 6700                       		beq.s	loc_701C
00007978 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
0000797C 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
00007980 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007984 6100 0000                  		bsr.w	sub_712A
00007988 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000798C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007990 6100 0000                  		bsr.w	sub_70AC
00007994 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
00007998                            
00007998                            loc_701C:
00007998 0644 0010                  		addi.w	#$10,d4
0000799C 51CE FFD2                  		dbf	d6,loc_6FF4
000079A0 4212                       		clr.b	(a2)
000079A2 4E75                       		rts	
000079A4                            ; End of function sub_6EA4
000079A4                            
000079A4                            
000079A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079A4                            
000079A4                            
000079A4                            DrawTiles_LR:
000079A4 7C15                       		moveq	#$15,d6
000079A6                            ; End of function DrawTiles_LR
000079A6                            
000079A6                            
000079A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079A6                            
000079A6                            
000079A6                            DrawTiles_LR2:
000079A6 2E3C 0080 0000             		move.l	#$800000,d7
000079AC 2200                       		move.l	d0,d1
000079AE                            
000079AE                            loc_7032:
000079AE 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079B2 6100 0000                  		bsr.w	sub_712A
000079B6 2001                       		move.l	d1,d0
000079B8 6100 0000                  		bsr.w	sub_70AC
000079BC 5801                       		addq.b	#4,d1
000079BE 0201 007F                  		andi.b	#$7F,d1	; '?'
000079C2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079C6 0645 0010                  		addi.w	#$10,d5
000079CA 51CE FFE2                  		dbf	d6,loc_7032
000079CE 4E75                       		rts	
000079D0                            ; End of function DrawTiles_LR2
000079D0                            
000079D0                            
000079D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079D0                            
000079D0                            
000079D0                            DrawTiles_LR3:
000079D0 2E3C 0080 0000             		move.l	#$800000,d7
000079D6 2200                       		move.l	d0,d1
000079D8                            
000079D8                            loc_705C:
000079D8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079DC 6100 0000                  		bsr.w	loc_712C
000079E0 2001                       		move.l	d1,d0
000079E2 6100 0000                  		bsr.w	sub_70AC
000079E6 5801                       		addq.b	#4,d1
000079E8 0201 007F                  		andi.b	#$7F,d1	; '?'
000079EC 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079F0 0645 0010                  		addi.w	#$10,d5
000079F4 51CE FFE2                  		dbf	d6,loc_705C
000079F8 4E75                       		rts	
000079FA                            ; End of function DrawTiles_LR3
000079FA                            
000079FA                            
000079FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FA                            
000079FA                            
000079FA                            DrawTiles_TB:
000079FA 7C0F                       		moveq	#$F,d6
000079FC                            ; End of function DrawTiles_TB
000079FC                            
000079FC                            
000079FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FC                            
000079FC                            
000079FC                            DrawTiles_TB2:
000079FC 2E3C 0080 0000             		move.l	#$800000,d7
00007A02 2200                       		move.l	d0,d1
00007A04                            
00007A04                            loc_7088:
00007A04 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A08 6100 0000                  		bsr.w	sub_712A
00007A0C 2001                       		move.l	d1,d0
00007A0E 6100 0000                  		bsr.w	sub_70AC
00007A12 0641 0100                  		addi.w	#$100,d1
00007A16 0241 0FFF                  		andi.w	#$FFF,d1
00007A1A 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A1E 0644 0010                  		addi.w	#$10,d4
00007A22 51CE FFE0                  		dbf	d6,loc_7088
00007A26 4E75                       		rts	
00007A28                            ; End of function DrawTiles_TB2
00007A28                            
00007A28                            
00007A28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A28                            
00007A28                            
00007A28                            sub_70AC:
00007A28 8042                       		or.w	d2,d0
00007A2A 4840                       		swap	d0
00007A2C 0810 0004                  		btst	#4,(a0)
00007A30 6600                       		bne.s	loc_70E8
00007A32 0810 0003                  		btst	#3,(a0)
00007A36 6600                       		bne.s	loc_70C8
00007A38 2A80                       		move.l	d0,(a5)
00007A3A 2C99                       		move.l	(a1)+,(a6)
00007A3C D087                       		add.l	d7,d0
00007A3E 2A80                       		move.l	d0,(a5)
00007A40 2C99                       		move.l	(a1)+,(a6)
00007A42 4E75                       		rts	
00007A44                            ; ===========================================================================
00007A44                            
00007A44                            loc_70C8:
00007A44 2A80                       		move.l	d0,(a5)
00007A46 2819                       		move.l	(a1)+,d4
00007A48 0A84 0800 0800             		eori.l	#$8000800,d4
00007A4E 4844                       		swap	d4
00007A50 2C84                       		move.l	d4,(a6)
00007A52 D087                       		add.l	d7,d0
00007A54 2A80                       		move.l	d0,(a5)
00007A56 2819                       		move.l	(a1)+,d4
00007A58 0A84 0800 0800             		eori.l	#$8000800,d4
00007A5E 4844                       		swap	d4
00007A60 2C84                       		move.l	d4,(a6)
00007A62 4E75                       		rts	
00007A64                            ; ===========================================================================
00007A64                            
00007A64                            loc_70E8:
00007A64 0810 0003                  		btst	#3,(a0)
00007A68 6600                       		bne.s	loc_710A
00007A6A 2A80                       		move.l	d0,(a5)
00007A6C 2A19                       		move.l	(a1)+,d5
00007A6E 2819                       		move.l	(a1)+,d4
00007A70 0A84 1000 1000             		eori.l	#$10001000,d4
00007A76 2C84                       		move.l	d4,(a6)
00007A78 D087                       		add.l	d7,d0
00007A7A 2A80                       		move.l	d0,(a5)
00007A7C 0A85 1000 1000             		eori.l	#$10001000,d5
00007A82 2C85                       		move.l	d5,(a6)
00007A84 4E75                       		rts	
00007A86                            ; ===========================================================================
00007A86                            
00007A86                            loc_710A:
00007A86 2A80                       		move.l	d0,(a5)
00007A88 2A19                       		move.l	(a1)+,d5
00007A8A 2819                       		move.l	(a1)+,d4
00007A8C 0A84 1800 1800             		eori.l	#$18001800,d4
00007A92 4844                       		swap	d4
00007A94 2C84                       		move.l	d4,(a6)
00007A96 D087                       		add.l	d7,d0
00007A98 2A80                       		move.l	d0,(a5)
00007A9A 0A85 1800 1800             		eori.l	#$18001800,d5
00007AA0 4845                       		swap	d5
00007AA2 2C85                       		move.l	d5,(a6)
00007AA4 4E75                       		rts	
00007AA6                            ; End of function sub_70AC
00007AA6                            
00007AA6                            
00007AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AA6                            
00007AA6                            
00007AA6                            sub_712A:
00007AA6 DA53                       		add.w	(a3),d5
00007AA8                            
00007AA8                            loc_712C:
00007AA8 D86B 0004                  		add.w	4(a3),d4
00007AAC 43F8 B000                  		lea	($FFFFB000).w,a1
00007AB0 3604                       		move.w	d4,d3
00007AB2 E24B                       		lsr.w	#1,d3
00007AB4 0243 0380                  		andi.w	#$380,d3
00007AB8 E64D                       		lsr.w	#3,d5
00007ABA 3005                       		move.w	d5,d0
00007ABC EA48                       		lsr.w	#5,d0
00007ABE 0240 007F                  		andi.w	#$7F,d0	; '?'
00007AC2 D043                       		add.w	d3,d0
00007AC4 4A38 FE10                  		tst.b	($FFFFFE10).w	
00007AC8 6700                       		beq.s	@ghz		
00007ACA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
00007AD0 6700                       		beq.s	@lz		
00007AD2 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
00007AD8 6700                       		beq.s	@mz		
00007ADA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
00007AE0 6700                       		beq.s	@slz		
00007AE2 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
00007AE8 6700                       		beq.s	@syz		
00007AEA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
00007AF0 6700                       		beq.s	@sbz				
00007AF2 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007AF8 6700                       		beq.s	@ghz		; if yes, branch
00007AFA 76FF                       		moveq	#-1,d3		; load chunks from RAM
00007AFC 6100                       		bsr.s	LocateBlock
00007AFE 6000                       		bra.s	@continue
00007B00                            
00007B00                            @ghz:
00007B00 7600                       		moveq	#0,d3
00007B02 6100                       		bsr.s	LocateBlock
00007B04 0683 0000 0000             		add.l	#Blk256_GHZ,d3
00007B0A 6000 0000                  		bra.w	@continue
00007B0E                            	
00007B0E                            @lz:
00007B0E 7600                       		moveq	#0,d3
00007B10 6100                       		bsr.s	LocateBlock
00007B12 0683 0000 0000             		add.l	#Blk256_LZ,d3
00007B18 6000 0000                  		bra.w	@continue
00007B1C                            		
00007B1C                            @mz:
00007B1C 7600                       		moveq	#0,d3
00007B1E 6100                       		bsr.s	LocateBlock
00007B20 0683 0000 0000             		add.l	#Blk256_MZ,d3
00007B26 6000 0000                  		bra.w	@continue
00007B2A                            		
00007B2A                            @slz:
00007B2A 7600                       		moveq	#0,d3
00007B2C 6100                       		bsr.s	LocateBlock
00007B2E 0683 0000 0000             		add.l	#Blk256_SLZ,d3
00007B34 6000 0000                  		bra.w	@continue
00007B38                            		
00007B38                            @syz:
00007B38 7600                       		moveq	#0,d3
00007B3A 6100                       		bsr.s	LocateBlock
00007B3C 0683 0000 0000             		add.l	#Blk256_SYZ,d3
00007B42 6000 0000                  		bra.w	@continue
00007B46                            		
00007B46                            @sbz:
00007B46 7600                       		moveq	#0,d3
00007B48 6100                       		bsr.s	LocateBlock
00007B4A 0683 0000 0000             		add.l	#Blk256_SBZ,d3		
00007B50 6000 0000                  		bra.w	@continue
00007B54                            		
00007B54                            @continue:
00007B54 2043                       		movea.l	d3,a0
00007B56 3610                       		move.w	(a0),d3
00007B58 0243 03FF                  		andi.w	#$3FF,d3
00007B5C E74B                       		lsl.w	#3,d3
00007B5E D2C3                       		adda.w	d3,a1
00007B60 4E75                       		rts	
00007B62                            ; ---------------------------------------------------------------------------
00007B62                            
00007B62                            LocateBlock:
00007B62 1634 0000                  		move.b	(a4,d0.w),d3	; load chunk ID in d3
00007B66 6700                       		beq.s	LocateBlock_EmptyChunk
00007B68 5303                       		subq.b	#1,d3
00007B6A 0243 007F                  		andi.w	#$7F,d3	; '?'
00007B6E EE5B                       		ror.w	#7,d3
00007B70 D844                       		add.w	d4,d4
00007B72 0244 01E0                  		andi.w	#$1E0,d4
00007B76 0245 001E                  		andi.w	#$1E,d5
00007B7A D644                       		add.w	d4,d3
00007B7C D645                       		add.w	d5,d3
00007B7E 4E75                       		rts
00007B80                            ; ---------------------------------------------------------------------------
00007B80                            
00007B80                            LocateBlock_EmptyChunk:
00007B80 584F                       		addq.w	#4,sp	; pop a stack frame to leave a1 pointing at the first tile
00007B82 4E75                       		rts
00007B84                            ; End of function sub_712A
00007B84                            
00007B84                            
00007B84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B84                            
00007B84                            
00007B84                            Calc_VRAM_Pos:
00007B84 DA53                       		add.w	(a3),d5
00007B86                            
00007B86                            loc_7176:
00007B86 D86B 0004                  		add.w	4(a3),d4
00007B8A 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007B8E 0245 01F0                  		andi.w	#$1F0,d5
00007B92 E94C                       		lsl.w	#4,d4
00007B94 E44D                       		lsr.w	#2,d5
00007B96 D845                       		add.w	d5,d4
00007B98 7003                       		moveq	#3,d0
00007B9A 4840                       		swap	d0
00007B9C 3004                       		move.w	d4,d0
00007B9E 4E75                       		rts	
00007BA0                            ; End of function Calc_VRAM_Pos
00007BA0                            
00007BA0                            ; ===========================================================================
00007BA0 D86B 0004                  		add.w	4(a3),d4
00007BA4 DA53                       		add.w	(a3),d5
00007BA6 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007BAA 0245 01F0                  		andi.w	#$1F0,d5
00007BAE E94C                       		lsl.w	#4,d4
00007BB0 E44D                       		lsr.w	#2,d5
00007BB2 D845                       		add.w	d5,d4
00007BB4 7002                       		moveq	#2,d0
00007BB6 4840                       		swap	d0
00007BB8 3004                       		move.w	d4,d0
00007BBA 4E75                       		rts	
00007BBC                            
00007BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BBC                            
00007BBC                            
00007BBC                            LoadTilesFromStart:
00007BBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00007BC2 4DF9 00C0 0000             		lea	($C00000).l,a6
00007BC8 47F8 F700                  		lea	($FFFFF700).w,a3
00007BCC 49F8 A400                  		lea	($FFFFA400).w,a4
00007BD0 343C 4000                  		move.w	#$4000,d2
00007BD4 6100                       		bsr.s	LoadTilesFromStart2
00007BD6 47F8 F708                  		lea	($FFFFF708).w,a3
00007BDA 49F8 A440                  		lea	($FFFFA440).w,a4
00007BDE 343C 6000                  		move.w	#$6000,d2
00007BE2 4A38 FE10                  		tst.b	($FFFFFE10).w
00007BE6 6700 0000                  		beq.w	loc_7220
00007BEA 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00007BF0 6700 0000                  		beq.w	loc_725A
00007BF4 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
00007BFA 6700 0000                  		beq.w	loc_7288
00007BFE 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
00007C04 6700 0000                  		beq.w	loc_7220
00007C08                            ; End of function LoadTilesFromStart
00007C08                            
00007C08                            
00007C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C08                            
00007C08                            
00007C08                            LoadTilesFromStart2:
00007C08 78F0                       		moveq	#-$10,d4
00007C0A 7C0F                       		moveq	#$F,d6
00007C0C                            
00007C0C                            loc_71FC:
00007C0C 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C10 7A00                       		moveq	#0,d5
00007C12 3204                       		move.w	d4,d1
00007C14 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00007C18 3801                       		move.w	d1,d4
00007C1A 7A00                       		moveq	#0,d5
00007C1C 7C1F                       		moveq	#$1F,d6
00007C1E 6100 FD86                  		bsr.w	DrawTiles_LR2
00007C22 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C26 0644 0010                  		addi.w	#$10,d4
00007C2A 51CE FFE0                  		dbf	d6,loc_71FC
00007C2E 4E75                       		rts	
00007C30                            ; End of function LoadTilesFromStart2
00007C30                            
00007C30                            ; ===========================================================================
00007C30                            
00007C30                            loc_7220:
00007C30 7800                       		moveq	#0,d4
00007C32 7C0F                       		moveq	#$F,d6
00007C34                            
00007C34                            loc_7224:
00007C34 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C38 41F9 0000 0000             		lea	(unk_724A).l,a0
00007C3E 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C42 D044                       		add.w	d4,d0
00007C44 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
00007C48 6100 0000                  		bsr.w	sub_72BA
00007C4C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C50 0644 0010                  		addi.w	#$10,d4
00007C54 51CE FFDE                  		dbf	d6,loc_7224
00007C58 4E75                       		rts	
00007C5A                            ; ===========================================================================
00007C5A 00                         unk_724A:	dc.b   0 ;	 
00007C5B 00                         		dc.b   0 ;  
00007C5C 00                         		dc.b   0 ;  
00007C5D 00                         		dc.b   0 ;  
00007C5E 06                         		dc.b   6 ;  
00007C5F 06                         		dc.b   6 ;  
00007C60 06                         		dc.b   6 ;  
00007C61 04                         		dc.b   4 ;  
00007C62 04                         		dc.b   4 ;  
00007C63 04                         		dc.b   4 ;  
00007C64 00                         		dc.b   0 ;  
00007C65 00                         		dc.b   0 ;  
00007C66 00                         		dc.b   0 ;  
00007C67 00                         		dc.b   0 ;  
00007C68 00                         		dc.b   0 ;  
00007C69 00                         		dc.b   0 ;  
00007C6A                            ; ===========================================================================
00007C6A                            
00007C6A                            loc_725A:
00007C6A 78F0                       		moveq	#-$10,d4
00007C6C 7C0F                       		moveq	#$F,d6
00007C6E                            
00007C6E                            loc_725E:
00007C6E 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C72 41F9 0000 786F             		lea	(unk_6EF3).l,a0
00007C78 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C7C 0440 0200                  		subi.w	#$200,d0
00007C80 D044                       		add.w	d4,d0
00007C82 0240 07F0                  		andi.w	#$7F0,d0
00007C86 6100 0000                  		bsr.w	sub_72BA
00007C8A 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C8E 0644 0010                  		addi.w	#$10,d4
00007C92 51CE FFDA                  		dbf	d6,loc_725E
00007C96 4E75                       		rts	
00007C98                            ; ===========================================================================
00007C98                            
00007C98                            loc_7288:
00007C98 78F0                       		moveq	#-$10,d4
00007C9A 7C0F                       		moveq	#$F,d6
00007C9C                            
00007C9C                            loc_728C:
00007C9C 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007CA0 41F9 0000 7771             		lea	(unk_6DF5).l,a0
00007CA6 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007CAA D044                       		add.w	d4,d0
00007CAC 0240 01F0                  		andi.w	#$1F0,d0
00007CB0 6100 0000                  		bsr.w	sub_72BA
00007CB4 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007CB8 0644 0010                  		addi.w	#$10,d4
00007CBC 51CE FFDE                  		dbf	d6,loc_728C
00007CC0 4E75                       		rts	
00007CC2                            ; ===========================================================================
00007CC2 F7                         unk_72B2:	dc.b $F7 ; ÷
00007CC3 08                         		dc.b   8 ;  
00007CC4 F7                         		dc.b $F7 ; ÷
00007CC5 08                         		dc.b   8 ;  
00007CC6 F7                         		dc.b $F7 ; ÷
00007CC7 10                         		dc.b $10 ;  
00007CC8 F7                         		dc.b $F7 ; ÷
00007CC9 18                         		dc.b $18 ;  
00007CCA                            
00007CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CCA                            
00007CCA                            
00007CCA                            sub_72BA:
00007CCA E848                       		lsr.w	#4,d0
00007CCC 1030 0000                  		move.b	(a0,d0.w),d0
00007CD0 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
00007CD4 6700                       		beq.s	loc_72DA
00007CD6 7AF0                       		moveq	#-$10,d5
00007CD8 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007CDC 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
00007CE0 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007CE4 6100 FCBE                  		bsr.w	DrawTiles_LR
00007CE8 6000                       		bra.s	locret_72EE
00007CEA                            ; ===========================================================================
00007CEA                            
00007CEA                            loc_72DA:
00007CEA 7A00                       		moveq	#0,d5
00007CEC 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007CF0 6100 FE94                  		bsr.w	loc_7176
00007CF4 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007CF8 7C1F                       		moveq	#$1F,d6
00007CFA 6100 FCD4                  		bsr.w	DrawTiles_LR3
00007CFE                            
00007CFE                            locret_72EE:
00007CFE 4E75                       		rts	
00007D00                            ; End of function sub_72BA
00007D00                            
00007D00                            LoadZoneTiles:
00007D00 7000                       		moveq	#0,d0			; Clear d0
00007D02 1038 FE10                  		move.b	($FFFFFE10).w,d0		; Load number of current zone to d0
00007D06 E948                       		lsl.w	#4,d0			; Multiply by $10, converting the zone ID into an offset
00007D08 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2	; Load LevelHeaders's address into a2
00007D0E 45F2 0000                  		lea	(a2,d0.w),a2		; Offset LevelHeaders by the zone-offset, and load the resultant address to a2
00007D12 201A                       		move.l	(a2)+,d0		; Move the first longword of data that a2 points to to d0, this contains the zone's first PLC ID and its art's address.
00007D14                            						; The auto increment is pointless as a2 is overwritten later, and nothing reads from a2 before then
00007D14 0280 00FF FFFF             		andi.l	#$FFFFFF,d0    		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
00007D1A 2040                       		movea.l	d0,a0			; Load the address of the zone's art into a0 (source)
00007D1C 43F9 00FF 0000             		lea	($FF0000).l,a1		; Load v_256x256/StartOfRAM (in this context, an art buffer) into a1 (destination)
00007D22 6100 9A2C                  		bsr.w	KosDec			; Decompress a0 to a1 (Kosinski compression)
00007D26                            
00007D26 3609                       		move.w	a1,d3			; Move a word of a1 to d3, note that a1 doesn't exactly contain the address of v_256x256/StartOfRAM anymore, after KosDec, a1 now contains v_256x256/StartOfRAM + the size of the file decompressed to it, d3 now contains the length of the file that was decompressed
00007D28 3E03                       		move.w	d3,d7			; Move d3 to d7, for use in seperate calculations
00007D2A                            
00007D2A 0243 0FFF                  		andi.w	#$FFF,d3		; Remove the high nibble of the high byte of the length of decompressed file, this nibble is how many $1000 bytes the decompressed art is
00007D2E E24B                       		lsr.w	#1,d3			; Half the value of 'length of decompressed file', d3 becomes the 'DMA transfer length'
00007D30                            
00007D30 E95F                       		rol.w	#4,d7			; Rotate (left) length of decompressed file by one nibble
00007D32 0247 000F                  		andi.w	#$F,d7			; Only keep the low nibble of low byte (the same one filtered out of d3 above), this nibble is how many $1000 bytes the decompressed art is
00007D36                            
00007D36 3407                       @loop:		move.w	d7,d2			; Move d7 to d2, note that the ahead dbf removes 1 byte from d7 each time it loops, meaning that the following calculations will have different results each time
00007D38 EF4A                       		lsl.w	#7,d2
00007D3A EB4A                       		lsl.w	#5,d2			; Shift (left) d2 by $C, making it high nibble of the high byte, d2 is now the size of the decompressed file rounded down to the nearest $1000 bytes, d2 becomes the 'destination address'
00007D3C                            
00007D3C 223C 00FF FFFF             		move.l	#$FFFFFF,d1		; Fill d1 with $FF
00007D42 3202                       		move.w	d2,d1			; Move d2 to d1, overwriting the last word of $FF's with d2, this turns d1 into 'StartOfRAM'+'However many $1000 bytes the decompressed art is', d1 becomes the 'source address'
00007D44                            
00007D44 4EB9 0000 4A58             		jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
00007D4A 3F07                       		move.w	d7,-(sp)		; Store d7 in the Stack
00007D4C 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00007D52 6100 AC46                  		bsr.w	DelayProgram
00007D56 6100 9748                  		bsr.w	RunPLC_RAM
00007D5A 3E1F                       		move.w	(sp)+,d7		; Restore d7 from the Stack
00007D5C 363C 0800                  		move.w	#$800,d3		; Force the DMA transfer length to be $1000/2 (the first cycle is dynamic because the art's DMA'd backwards)
00007D60 51CF FFD4                  		dbf	d7,@loop		; Loop for each $1000 bytes the decompressed art is
00007D64                            
00007D64 4E75                       		rts
00007D66                            ; End of function LoadZoneTiles
00007D66                            
00007D66                            ; ---------------------------------------------------------------------------
00007D66                            ; Main Load Block loading subroutine
00007D66                            ; ---------------------------------------------------------------------------
00007D66                            
00007D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D66                            
00007D66                            
00007D66                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007D66 7000                       		moveq	#0,d0
00007D68 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007D6C E948                       		lsl.w	#4,d0
00007D6E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007D74 45F2 0000                  		lea	(a2,d0.w),a2
00007D78 2F0A                       		move.l	a2,-(sp)
00007D7A 588A                       		addq.l	#4,a2
00007D7C 205A                       		movea.l	(a2)+,a0
00007D7E 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007D82 303C 0000                  		move.w	#0,d0
00007D86 6100 984A                  		bsr.w	EniDec
00007D8A 205A                       		movea.l	(a2)+,a0
00007D8C 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
00007D90 6700                       		beq.s	@no_dec		; if yes, branch
00007D92 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007D98 6700                       		beq.s	@no_dec		; if yes, branch
00007D9A 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007DA0 6100 99AE                  		bsr.w	KosDec
00007DA4                            
00007DA4                            @no_dec:		
00007DA4 6100 0000                  		bsr.w	LevelLayoutLoad
00007DA8 301A                       		move.w	(a2)+,d0
00007DAA 3012                       		move.w	(a2),d0
00007DAC 0240 00FF                  		andi.w	#$FF,d0
00007DB0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007DB6 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007DB8 700C                       		moveq	#$C,d0		; use SB3 pallet
00007DBA                            
00007DBA                            MLB_ChkSBZPal:
00007DBA 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007DC0 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007DC2 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007DC8 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007DCA                            
00007DCA                            MLB_UsePal0E:
00007DCA 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007DCC                            
00007DCC                            MLB_NormalPal:
00007DCC 6100 A318                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007DD0 245F                       		movea.l	(sp)+,a2
00007DD2 584A                       		addq.w	#4,a2
00007DD4 7000                       		moveq	#0,d0
00007DD6 1012                       		move.b	(a2),d0
00007DD8 6700                       		beq.s	locret_6D10
00007DDA 6100 9658                  		bsr.w	LoadPLC		; load pattern load cues
00007DDE                            
00007DDE                            locret_6D10:
00007DDE 4E75                       		rts	
00007DE0                            ; End of function MainLoadBlockLoad
00007DE0                            
00007DE0                            ; ---------------------------------------------------------------------------
00007DE0                            ; Level	layout loading subroutine
00007DE0                            ; ---------------------------------------------------------------------------
00007DE0                            
00007DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DE0                            
00007DE0                            
00007DE0                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007DE0 47F8 A400                  		lea	($FFFFA400).w,a3
00007DE4 323C 01FF                  		move.w	#$1FF,d1
00007DE8 7000                       		moveq	#0,d0
00007DEA                            
00007DEA                            LevLoad_ClrRam:
00007DEA 26C0                       		move.l	d0,(a3)+
00007DEC 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007DF0                            
00007DF0 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007DF4 7200                       		moveq	#0,d1
00007DF6 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007DFA 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007DFE 7202                       		moveq	#2,d1
00007E00                            ; End of function LevelLayoutLoad
00007E00                            
00007E00                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007E00                            
00007E00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E00                            
00007E00                            
00007E00                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007E00 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007E04 ED08                       		lsl.b	#6,d0
00007E06 EA48                       		lsr.w	#5,d0
00007E08 3400                       		move.w	d0,d2
00007E0A D040                       		add.w	d0,d0
00007E0C D042                       		add.w	d2,d0
00007E0E D041                       		add.w	d1,d0
00007E10 43F9 0000 0000             		lea	(Level_Index).l,a1
00007E16 3031 0000                  		move.w	(a1,d0.w),d0
00007E1A 43F1 0000                  		lea	(a1,d0.w),a1
00007E1E 7200                       		moveq	#0,d1
00007E20 3401                       		move.w	d1,d2
00007E22 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007E24 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007E26                            
00007E26                            LevLoad_NumRows:
00007E26 3001                       		move.w	d1,d0
00007E28 204B                       		movea.l	a3,a0
00007E2A                            
00007E2A                            LevLoad_Row:
00007E2A 10D9                       		move.b	(a1)+,(a0)+
00007E2C 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007E30 47EB 0080                  		lea	$80(a3),a3	; do next row
00007E34 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007E38 4E75                       		rts	
00007E3A                            ; End of function LevelLayoutLoad2
00007E3A                            
00007E3A                            ; ---------------------------------------------------------------------------
00007E3A                            ; Dynamic screen resize	loading	subroutine
00007E3A                            ; ---------------------------------------------------------------------------
00007E3A                            
00007E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E3A                            
00007E3A                            
00007E3A                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007E3A 7000                       		moveq	#0,d0
00007E3C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007E40 D040                       		add.w	d0,d0
00007E42 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007E46 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007E4A 7202                       		moveq	#2,d1
00007E4C 3038 F726                  		move.w	($FFFFF726).w,d0
00007E50 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007E54 6700                       		beq.s	locret_6DAA
00007E56 6400                       		bcc.s	loc_6DAC
00007E58 4441                       		neg.w	d1
00007E5A 3038 F704                  		move.w	($FFFFF704).w,d0
00007E5E B078 F726                  		cmp.w	($FFFFF726).w,d0
00007E62 6300                       		bls.s	loc_6DA0
00007E64 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007E68 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007E6E                            
00007E6E                            loc_6DA0:
00007E6E D378 F72E                  		add.w	d1,($FFFFF72E).w
00007E72 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007E78                            
00007E78                            locret_6DAA:
00007E78 4E75                       		rts	
00007E7A                            ; ===========================================================================
00007E7A                            
00007E7A                            loc_6DAC:				; XREF: DynScrResizeLoad
00007E7A 3038 F704                  		move.w	($FFFFF704).w,d0
00007E7E 5040                       		addq.w	#8,d0
00007E80 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007E84 6500                       		bcs.s	loc_6DC4
00007E86 0838 0001 D022             		btst	#1,($FFFFD022).w
00007E8C 6700                       		beq.s	loc_6DC4
00007E8E D241                       		add.w	d1,d1
00007E90 D241                       		add.w	d1,d1
00007E92                            
00007E92                            loc_6DC4:
00007E92 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007E96 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007E9C 4E75                       		rts	
00007E9E                            ; End of function DynScrResizeLoad
00007E9E                            
00007E9E                            ; ===========================================================================
00007E9E                            ; ---------------------------------------------------------------------------
00007E9E                            ; Offset index for dynamic screen resizing
00007E9E                            ; ---------------------------------------------------------------------------
00007E9E 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007EA2 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007EA6 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007EAA 0000                       		dc.w Resize_Ending-Resize_Index
00007EAC                            ; ===========================================================================
00007EAC                            ; ---------------------------------------------------------------------------
00007EAC                            ; Green	Hill Zone dynamic screen resizing
00007EAC                            ; ---------------------------------------------------------------------------
00007EAC                            
00007EAC                            Resize_GHZ:				; XREF: Resize_Index
00007EAC 7000                       		moveq	#0,d0
00007EAE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007EB2 D040                       		add.w	d0,d0
00007EB4 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007EB8 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007EBC                            ; ===========================================================================
00007EBC 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007EBE 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007EC0 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007EC2                            ; ===========================================================================
00007EC2                            
00007EC2                            Resize_GHZ1:
00007EC2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007EC8 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007ECE 6500                       		bcs.s	locret_6E08	; if not, branch
00007ED0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007ED6                            
00007ED6                            locret_6E08:
00007ED6 4E75                       		rts	
00007ED8                            ; ===========================================================================
00007ED8                            
00007ED8                            Resize_GHZ2:
00007ED8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007EDE 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007EE4 6500                       		bcs.s	locret_6E3A
00007EE6 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007EEC 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007EF2 6500                       		bcs.s	locret_6E3A
00007EF4 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007EFA 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007F00 6500                       		bcs.s	locret_6E3A
00007F02 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F08                            
00007F08                            locret_6E3A:
00007F08 4E75                       		rts	
00007F0A                            ; ===========================================================================
00007F0A                            
00007F0A                            Resize_GHZ3:
00007F0A 7000                       		moveq	#0,d0
00007F0C 1038 F742                  		move.b	($FFFFF742).w,d0
00007F10 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007F14 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007F18                            ; ===========================================================================
00007F18 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007F1A 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007F1C 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007F1E                            ; ===========================================================================
00007F1E                            
00007F1E                            Resize_GHZ3main:
00007F1E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F24 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007F2A 6500                       		bcs.s	locret_6E96
00007F2C 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007F32 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007F38 6500                       		bcs.s	locret_6E96
00007F3A 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007F40 6500                       		bcs.s	loc_6E98
00007F42 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007F48 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007F4E 6400                       		bcc.s	loc_6E8E
00007F50 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007F56 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007F5C                            
00007F5C                            loc_6E8E:
00007F5C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007F62 6400                       		bcc.s	loc_6E98
00007F64                            
00007F64                            locret_6E96:
00007F64 4E75                       		rts	
00007F66                            ; ===========================================================================
00007F66                            
00007F66                            loc_6E98:
00007F66 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F6C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F70 4E75                       		rts	
00007F72                            ; ===========================================================================
00007F72                            
00007F72                            Resize_GHZ3boss:
00007F72 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007F78 6400                       		bcc.s	loc_6EB0
00007F7A 5538 F742                  		subq.b	#2,($FFFFF742).w
00007F7E                            
00007F7E                            loc_6EB0:
00007F7E 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007F84 6500                       		bcs.s	locret_6EE8
00007F86 6100 0000                  		bsr.w	SingleObjLoad
00007F8A 6600                       		bne.s	loc_6ED0
00007F8C 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007F90 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007F96 337C 0280 000C             		move.w	#$280,$C(a1)
00007F9C                            
00007F9C                            loc_6ED0:
00007F9C 303C 008C                  		move.w	#$8C,d0
00007FA0 6100 924E                  		bsr.w	PlaySound	; play boss music
00007FA4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007FAA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FAE 7011                       		moveq	#$11,d0
00007FB0 6000 9482                  		bra.w	LoadPLC		; load boss patterns
00007FB4                            ; ===========================================================================
00007FB4                            
00007FB4                            locret_6EE8:
00007FB4 4E75                       		rts	
00007FB6                            ; ===========================================================================
00007FB6                            
00007FB6                            Resize_GHZ3end:
00007FB6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007FBC 4E75                       		rts	
00007FBE                            ; ===========================================================================
00007FBE                            ; ---------------------------------------------------------------------------
00007FBE                            ; Labyrinth Zone dynamic screen	resizing
00007FBE                            ; ---------------------------------------------------------------------------
00007FBE                            
00007FBE                            Resize_LZ:				; XREF: Resize_Index
00007FBE 7000                       		moveq	#0,d0
00007FC0 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007FC4 D040                       		add.w	d0,d0
00007FC6 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007FCA 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007FCE                            ; ===========================================================================
00007FCE 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007FD0 0000                       		dc.w Resize_LZ12-Resize_LZx
00007FD2 0000                       		dc.w Resize_LZ3-Resize_LZx
00007FD4 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007FD6                            ; ===========================================================================
00007FD6                            
00007FD6                            Resize_LZ12:
00007FD6 4E75                       		rts	
00007FD8                            ; ===========================================================================
00007FD8                            
00007FD8                            Resize_LZ3:
00007FD8 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00007FDC 6700                       		beq.s	loc_6F28	; if not, branch
00007FDE 43F8 A506                  		lea	($FFFFA506).w,a1
00007FE2 0C11 0007                  		cmpi.b	#7,(a1)
00007FE6 6700                       		beq.s	loc_6F28
00007FE8 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00007FEC 303C 00B7                  		move.w	#$B7,d0
00007FF0 6100 9204                  		bsr.w	PlaySound_Special ; play rumbling sound
00007FF4                            
00007FF4                            loc_6F28:
00007FF4 4A38 F742                  		tst.b	($FFFFF742).w
00007FF8 6600                       		bne.s	locret_6F64
00007FFA 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00008000 6500                       		bcs.s	locret_6F62
00008002 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00008008 6400                       		bcc.s	locret_6F62
0000800A 6100 0000                  		bsr.w	SingleObjLoad
0000800E 6600                       		bne.s	loc_6F4A
00008010 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00008014                            
00008014                            loc_6F4A:
00008014 303C 008C                  		move.w	#$8C,d0
00008018 6100 91D6                  		bsr.w	PlaySound	; play boss music
0000801C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008022 5438 F742                  		addq.b	#2,($FFFFF742).w
00008026 7011                       		moveq	#$11,d0
00008028 6000 940A                  		bra.w	LoadPLC		; load boss patterns
0000802C                            ; ===========================================================================
0000802C                            
0000802C                            locret_6F62:
0000802C 4E75                       		rts	
0000802E                            ; ===========================================================================
0000802E                            
0000802E                            locret_6F64:
0000802E 4E75                       		rts	
00008030                            ; ===========================================================================
00008030                            
00008030                            Resize_SBZ3:
00008030 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008036 6500                       		bcs.s	locret_6F8C
00008038 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000803E 6400                       		bcc.s	locret_6F8C	; if not, branch
00008040 4238 FE30                  		clr.b	($FFFFFE30).w
00008044 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000804A 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00008050 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00008056                            
00008056                            locret_6F8C:
00008056 4E75                       		rts	
00008058                            ; ===========================================================================
00008058                            ; ---------------------------------------------------------------------------
00008058                            ; Marble Zone dynamic screen resizing
00008058                            ; ---------------------------------------------------------------------------
00008058                            
00008058                            Resize_MZ:				; XREF: Resize_Index
00008058 7000                       		moveq	#0,d0
0000805A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000805E D040                       		add.w	d0,d0
00008060 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00008064 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00008068                            ; ===========================================================================
00008068 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000806A 0000                       		dc.w Resize_MZ2-Resize_MZx
0000806C 0000                       		dc.w Resize_MZ3-Resize_MZx
0000806E                            ; ===========================================================================
0000806E                            
0000806E                            Resize_MZ1:
0000806E 7000                       		moveq	#0,d0
00008070 1038 F742                  		move.b	($FFFFF742).w,d0
00008074 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00008078 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000807C                            ; ===========================================================================
0000807C 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000807E 0000                       		dc.w loc_6FEA-off_6FB2
00008080 0000                       		dc.w loc_702E-off_6FB2
00008082 0000                       		dc.w loc_7050-off_6FB2
00008084                            ; ===========================================================================
00008084                            
00008084                            loc_6FBA:
00008084 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000808A 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00008090 6500                       		bcs.s	locret_6FE8
00008092 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00008098 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000809E 6500                       		bcs.s	locret_6FE8
000080A0 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000080A6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000080AC 6500                       		bcs.s	locret_6FE8
000080AE 5438 F742                  		addq.b	#2,($FFFFF742).w
000080B2                            
000080B2                            locret_6FE8:
000080B2 4E75                       		rts	
000080B4                            ; ===========================================================================
000080B4                            
000080B4                            loc_6FEA:
000080B4 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000080BA 6400                       		bcc.s	loc_6FF8
000080BC 5538 F742                  		subq.b	#2,($FFFFF742).w
000080C0 4E75                       		rts	
000080C2                            ; ===========================================================================
000080C2                            
000080C2                            loc_6FF8:
000080C2 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000080C8 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000080CE 6400                       		bcc.s	locret_702C
000080D0 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000080D6 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000080DC 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000080E2 6400                       		bcc.s	locret_702C
000080E4 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000080EA 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000080F0 6500                       		bcs.s	locret_702C
000080F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000080F6                            
000080F6                            locret_702C:
000080F6 4E75                       		rts	
000080F8                            ; ===========================================================================
000080F8                            
000080F8                            loc_702E:
000080F8 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000080FE 6400                       		bcc.s	loc_703C
00008100 5538 F742                  		subq.b	#2,($FFFFF742).w
00008104 4E75                       		rts	
00008106                            ; ===========================================================================
00008106                            
00008106                            loc_703C:
00008106 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000810C 6500                       		bcs.s	locret_704E
0000810E 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00008114 5438 F742                  		addq.b	#2,($FFFFF742).w
00008118                            
00008118                            locret_704E:
00008118 4E75                       		rts	
0000811A                            ; ===========================================================================
0000811A                            
0000811A                            loc_7050:
0000811A 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00008120 6500                       		bcs.s	locret_7072
00008122 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008128 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000812E 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00008134 6500                       		bcs.s	locret_7072
00008136 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000813C                            
0000813C                            locret_7072:
0000813C 4E75                       		rts	
0000813E                            ; ===========================================================================
0000813E                            
0000813E                            Resize_MZ2:
0000813E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008144 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000814A 6500                       		bcs.s	locret_7088
0000814C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008152                            
00008152                            locret_7088:
00008152 4E75                       		rts	
00008154                            ; ===========================================================================
00008154                            
00008154                            Resize_MZ3:
00008154 7000                       		moveq	#0,d0
00008156 1038 F742                  		move.b	($FFFFF742).w,d0
0000815A 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000815E 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008162                            ; ===========================================================================
00008162 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00008164 0000                       		dc.w Resize_MZ3end-off_7098
00008166                            ; ===========================================================================
00008166                            
00008166                            Resize_MZ3boss:
00008166 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000816C 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00008172 6500                       		bcs.s	locret_70E8
00008174 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000817A 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00008180 6500                       		bcs.s	locret_70E8
00008182 6100 0000                  		bsr.w	SingleObjLoad
00008186 6600                       		bne.s	loc_70D0
00008188 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000818C 337C 19F0 0008             		move.w	#$19F0,8(a1)
00008192 337C 022C 000C             		move.w	#$22C,$C(a1)
00008198                            
00008198                            loc_70D0:
00008198 303C 008C                  		move.w	#$8C,d0
0000819C 6100 9052                  		bsr.w	PlaySound	; play boss music
000081A0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000081A6 5438 F742                  		addq.b	#2,($FFFFF742).w
000081AA 7011                       		moveq	#$11,d0
000081AC 6000 9286                  		bra.w	LoadPLC		; load boss patterns
000081B0                            ; ===========================================================================
000081B0                            
000081B0                            locret_70E8:
000081B0 4E75                       		rts	
000081B2                            ; ===========================================================================
000081B2                            
000081B2                            Resize_MZ3end:
000081B2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000081B8 4E75                       		rts	
000081BA                            ; ===========================================================================
000081BA                            ; ---------------------------------------------------------------------------
000081BA                            ; Star Light Zone dynamic screen resizing
000081BA                            ; ---------------------------------------------------------------------------
000081BA                            
000081BA                            Resize_SLZ:				; XREF: Resize_Index
000081BA 7000                       		moveq	#0,d0
000081BC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000081C0 D040                       		add.w	d0,d0
000081C2 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000081C6 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000081CA                            ; ===========================================================================
000081CA 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
000081CC 0000                       		dc.w Resize_SLZ12-Resize_SLZx
000081CE 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000081D0                            ; ===========================================================================
000081D0                            
000081D0                            Resize_SLZ12:
000081D0 4E75                       		rts	
000081D2                            ; ===========================================================================
000081D2                            
000081D2                            Resize_SLZ3:
000081D2 7000                       		moveq	#0,d0
000081D4 1038 F742                  		move.b	($FFFFF742).w,d0
000081D8 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000081DC 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000081E0                            ; ===========================================================================
000081E0 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000081E2 0000                       		dc.w Resize_SLZ3boss-off_7118
000081E4 0000                       		dc.w Resize_SLZ3end-off_7118
000081E6                            ; ===========================================================================
000081E6                            
000081E6                            Resize_SLZ3main:
000081E6 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000081EC 6500                       		bcs.s	locret_7130
000081EE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000081F4 5438 F742                  		addq.b	#2,($FFFFF742).w
000081F8                            
000081F8                            locret_7130:
000081F8 4E75                       		rts	
000081FA                            ; ===========================================================================
000081FA                            
000081FA                            Resize_SLZ3boss:
000081FA 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008200 6500                       		bcs.s	locret_715C
00008202 6100 0000                  		bsr.w	SingleObjLoad
00008206 6600                       		bne.s	loc_7144
00008208 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000820C                            
0000820C                            loc_7144:
0000820C 303C 008C                  		move.w	#$8C,d0
00008210 6100 8FDE                  		bsr.w	PlaySound	; play boss music
00008214 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000821A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000821E 7011                       		moveq	#$11,d0
00008220 6000 9212                  		bra.w	LoadPLC		; load boss patterns
00008224                            ; ===========================================================================
00008224                            
00008224                            locret_715C:
00008224 4E75                       		rts	
00008226                            ; ===========================================================================
00008226                            
00008226                            Resize_SLZ3end:
00008226 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000822C 4E75                       		rts
0000822E 4E75                       		rts
00008230                            ; ===========================================================================
00008230                            ; ---------------------------------------------------------------------------
00008230                            ; Spring Yard Zone dynamic screen resizing
00008230                            ; ---------------------------------------------------------------------------
00008230                            
00008230                            Resize_SYZ:				; XREF: Resize_Index
00008230 7000                       		moveq	#0,d0
00008232 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008236 D040                       		add.w	d0,d0
00008238 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000823C 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00008240                            ; ===========================================================================
00008240 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00008242 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00008244 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008246                            ; ===========================================================================
00008246                            
00008246                            Resize_SYZ1:
00008246 4E75                       		rts	
00008248                            ; ===========================================================================
00008248                            
00008248                            Resize_SYZ2:
00008248 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000824E 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00008254 6500                       		bcs.s	locret_71A2
00008256 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000825C 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00008262 6500                       		bcs.s	locret_71A2
00008264 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000826A                            
0000826A                            locret_71A2:
0000826A 4E75                       		rts	
0000826C                            ; ===========================================================================
0000826C                            
0000826C                            Resize_SYZ3:
0000826C 7000                       		moveq	#0,d0
0000826E 1038 F742                  		move.b	($FFFFF742).w,d0
00008272 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008276 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000827A                            ; ===========================================================================
0000827A 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000827C 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000827E 0000                       		dc.w Resize_SYZ3end-off_71B2
00008280                            ; ===========================================================================
00008280                            
00008280                            Resize_SYZ3main:
00008280 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00008286 6500                       		bcs.s	locret_71CE
00008288 6100 0000                  		bsr.w	SingleObjLoad
0000828C 6600                       		bne.s	locret_71CE
0000828E 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00008292 5438 F742                  		addq.b	#2,($FFFFF742).w
00008296                            
00008296                            locret_71CE:
00008296 4E75                       		rts	
00008298                            ; ===========================================================================
00008298                            
00008298                            Resize_SYZ3boss:
00008298 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000829E 6500                       		bcs.s	locret_7200
000082A0 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000082A6 6100 0000                  		bsr.w	SingleObjLoad
000082AA 6600                       		bne.s	loc_71EC
000082AC 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000082B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000082B4                            
000082B4                            loc_71EC:
000082B4 303C 008C                  		move.w	#$8C,d0
000082B8 6100 8F36                  		bsr.w	PlaySound	; play boss music
000082BC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000082C2 7011                       		moveq	#$11,d0
000082C4 6000 916E                  		bra.w	LoadPLC		; load boss patterns
000082C8                            ; ===========================================================================
000082C8                            
000082C8                            locret_7200:
000082C8 4E75                       		rts	
000082CA                            ; ===========================================================================
000082CA                            
000082CA                            Resize_SYZ3end:
000082CA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000082D0 4E75                       		rts	
000082D2                            ; ===========================================================================
000082D2                            ; ---------------------------------------------------------------------------
000082D2                            ; Scrap	Brain Zone dynamic screen resizing
000082D2                            ; ---------------------------------------------------------------------------
000082D2                            
000082D2                            Resize_SBZ:				; XREF: Resize_Index
000082D2 7000                       		moveq	#0,d0
000082D4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000082D8 D040                       		add.w	d0,d0
000082DA 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000082DE 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000082E2                            ; ===========================================================================
000082E2 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000082E4 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000082E6 0000                       		dc.w Resize_FZ-Resize_SBZx
000082E8                            ; ===========================================================================
000082E8                            
000082E8                            Resize_SBZ1:
000082E8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000082EE 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000082F4 6500                       		bcs.s	locret_7242
000082F6 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000082FC 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008302 6500                       		bcs.s	locret_7242
00008304 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000830A                            
0000830A                            locret_7242:
0000830A 4E75                       		rts	
0000830C                            ; ===========================================================================
0000830C                            
0000830C                            Resize_SBZ2:
0000830C 7000                       		moveq	#0,d0
0000830E 1038 F742                  		move.b	($FFFFF742).w,d0
00008312 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008316 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000831A                            ; ===========================================================================
0000831A 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000831C 0000                       		dc.w Resize_SBZ2boss-off_7252
0000831E 0000                       		dc.w Resize_SBZ2boss2-off_7252
00008320 0000                       		dc.w Resize_SBZ2end-off_7252
00008322                            ; ===========================================================================
00008322                            
00008322                            Resize_SBZ2main:
00008322 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008328 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000832E 6500                       		bcs.s	locret_727A
00008330 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008336 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000833C 6500                       		bcs.s	locret_727A
0000833E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008342                            
00008342                            locret_727A:
00008342 4E75                       		rts	
00008344                            ; ===========================================================================
00008344                            
00008344                            Resize_SBZ2boss:
00008344 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000834A 6500                       		bcs.s	locret_7298
0000834C 6100 0000                  		bsr.w	SingleObjLoad
00008350 6600                       		bne.s	locret_7298
00008352 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00008356 5438 F742                  		addq.b	#2,($FFFFF742).w
0000835A 701E                       		moveq	#$1E,d0
0000835C 6000 90D6                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00008360                            ; ===========================================================================
00008360                            
00008360                            locret_7298:
00008360 4E75                       		rts	
00008362                            ; ===========================================================================
00008362                            
00008362                            Resize_SBZ2boss2:
00008362 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00008368 6500                       		bcs.s	loc_72B6
0000836A 6100 0000                  		bsr.w	SingleObjLoad
0000836E 6600                       		bne.s	loc_72B0
00008370 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00008374 5438 F742                  		addq.b	#2,($FFFFF742).w
00008378                            
00008378                            loc_72B0:
00008378 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000837E                            
0000837E                            loc_72B6:
0000837E 6000                       		bra.s	loc_72C2
00008380                            ; ===========================================================================
00008380                            
00008380                            Resize_SBZ2end:
00008380 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00008386 6500                       		bcs.s	loc_72C2
00008388 4E75                       		rts	
0000838A                            ; ===========================================================================
0000838A                            
0000838A                            loc_72C2:
0000838A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008390 4E75                       		rts	
00008392                            ; ===========================================================================
00008392                            
00008392                            Resize_FZ:
00008392 7000                       		moveq	#0,d0
00008394 1038 F742                  		move.b	($FFFFF742).w,d0
00008398 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000839C 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000083A0                            ; ===========================================================================
000083A0 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000083A4 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000083A8 0000                       		dc.w Resize_FZend2-off_72D8
000083AA                            ; ===========================================================================
000083AA                            
000083AA                            Resize_FZmain:
000083AA 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000083B0 6500                       		bcs.s	loc_72F4
000083B2 5438 F742                  		addq.b	#2,($FFFFF742).w
000083B6 701F                       		moveq	#$1F,d0
000083B8 6100 907A                  		bsr.w	LoadPLC		; load FZ boss patterns
000083BC                            
000083BC                            loc_72F4:
000083BC 60CC                       		bra.s	loc_72C2
000083BE                            ; ===========================================================================
000083BE                            
000083BE                            Resize_FZboss:
000083BE 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000083C4 6500                       		bcs.s	loc_7312
000083C6 6100 0000                  		bsr.w	SingleObjLoad
000083CA 6600                       		bne.s	loc_7312
000083CC 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000083D0 5438 F742                  		addq.b	#2,($FFFFF742).w
000083D4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000083DA                            
000083DA                            loc_7312:
000083DA 60AE                       		bra.s	loc_72C2
000083DC                            ; ===========================================================================
000083DC                            
000083DC                            Resize_FZend:
000083DC 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000083E2 6500                       		bcs.s	loc_7320
000083E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000083E8                            
000083E8                            loc_7320:
000083E8 60A0                       		bra.s	loc_72C2
000083EA                            ; ===========================================================================
000083EA                            
000083EA                            locret_7322:
000083EA 4E75                       		rts	
000083EC                            ; ===========================================================================
000083EC                            
000083EC                            Resize_FZend2:
000083EC 609C                       		bra.s	loc_72C2
000083EE                            ; ===========================================================================
000083EE                            ; ---------------------------------------------------------------------------
000083EE                            ; Ending sequence dynamic screen resizing (empty)
000083EE                            ; ---------------------------------------------------------------------------
000083EE                            
000083EE                            Resize_Ending:				; XREF: Resize_Index
000083EE 4E75                       		rts	
000083F0                            ; ===========================================================================
000083F0                            ; ---------------------------------------------------------------------------
000083F0                            ; Object 11 - GHZ bridge
000083F0                            ; ---------------------------------------------------------------------------
000083F0                            
000083F0                            Obj11:					; XREF: Obj_Index
000083F0 7000                       		moveq	#0,d0
000083F2 1028 0024                  		move.b	$24(a0),d0
000083F6 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000083FA 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
000083FE                            ; ===========================================================================
000083FE 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00008402 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008406 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000840A                            ; ===========================================================================
0000840A                            
0000840A                            Obj11_Main:				; XREF: Obj11_Index
0000840A 5428 0024                  		addq.b	#2,$24(a0)
0000840E 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008416 317C 438E 0002             		move.w	#$438E,2(a0)
0000841C 117C 0004 0001             		move.b	#4,1(a0)
00008422 117C 0003 0018             		move.b	#3,$18(a0)
00008428 117C 0080 0019             		move.b	#$80,$19(a0)
0000842E 3428 000C                  		move.w	$C(a0),d2
00008432 3628 0008                  		move.w	8(a0),d3
00008436 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008438 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000843C 7200                       		moveq	#0,d1
0000843E 1212                       		move.b	(a2),d1		; copy a2 to d1
00008440 14FC 0000                  		move.b	#0,(a2)+
00008444 3001                       		move.w	d1,d0
00008446 E248                       		lsr.w	#1,d0
00008448 E948                       		lsl.w	#4,d0
0000844A 9640                       		sub.w	d0,d3
0000844C 5501                       		subq.b	#2,d1
0000844E 6500                       		bcs.s	Obj11_Action
00008450                            
00008450                            Obj11_MakeBdg:
00008450 6100 0000                  		bsr.w	SingleObjLoad
00008454 6600                       		bne.s	Obj11_Action
00008456 5228 0028                  		addq.b	#1,$28(a0)
0000845A B668 0008                  		cmp.w	8(a0),d3
0000845E 6600                       		bne.s	loc_73B8
00008460 0643 0010                  		addi.w	#$10,d3
00008464 3142 000C                  		move.w	d2,$C(a0)
00008468 3142 003C                  		move.w	d2,$3C(a0)
0000846C 3A08                       		move.w	a0,d5
0000846E 0445 D000                  		subi.w	#-$3000,d5
00008472 EC4D                       		lsr.w	#6,d5
00008474 0245 007F                  		andi.w	#$7F,d5
00008478 14C5                       		move.b	d5,(a2)+
0000847A 5228 0028                  		addq.b	#1,$28(a0)
0000847E                            
0000847E                            loc_73B8:				; XREF: ROM:00007398j
0000847E 3A09                       		move.w	a1,d5
00008480 0445 D000                  		subi.w	#-$3000,d5
00008484 EC4D                       		lsr.w	#6,d5
00008486 0245 007F                  		andi.w	#$7F,d5
0000848A 14C5                       		move.b	d5,(a2)+
0000848C 137C 000A 0024             		move.b	#$A,$24(a1)
00008492 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008494 3342 000C                  		move.w	d2,$C(a1)
00008498 3342 003C                  		move.w	d2,$3C(a1)
0000849C 3343 0008                  		move.w	d3,8(a1)
000084A0 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000084A8 337C 438E 0002             		move.w	#$438E,2(a1)
000084AE 137C 0004 0001             		move.b	#4,1(a1)
000084B4 137C 0003 0018             		move.b	#3,$18(a1)
000084BA 137C 0008 0019             		move.b	#8,$19(a1)
000084C0 0643 0010                  		addi.w	#$10,d3
000084C4 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000084C8                            
000084C8                            Obj11_Action:				; XREF: Obj11_Index
000084C8 6100                       		bsr.s	Obj11_Solid
000084CA 4A28 003E                  		tst.b	$3E(a0)
000084CE 6700                       		beq.s	Obj11_Display
000084D0 5928 003E                  		subq.b	#4,$3E(a0)
000084D4 6100 0000                  		bsr.w	Obj11_Bend
000084D8                            
000084D8                            Obj11_Display:
000084D8 6100 0000                  		bsr.w	DisplaySprite
000084DC 6000 0000                  		bra.w	Obj11_ChkDel
000084E0                            
000084E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084E0                            
000084E0                            
000084E0                            Obj11_Solid:				; XREF: Obj11_Action
000084E0 7200                       		moveq	#0,d1
000084E2 1228 0028                  		move.b	$28(a0),d1
000084E6 E749                       		lsl.w	#3,d1
000084E8 3401                       		move.w	d1,d2
000084EA 5041                       		addq.w	#8,d1
000084EC D442                       		add.w	d2,d2
000084EE 43F8 D000                  		lea	($FFFFD000).w,a1
000084F2 4A69 0012                  		tst.w	$12(a1)
000084F6 6B00 0000                  		bmi.w	locret_751E
000084FA 3029 0008                  		move.w	8(a1),d0
000084FE 9068 0008                  		sub.w	8(a0),d0
00008502 D041                       		add.w	d1,d0
00008504 6B00 0000                  		bmi.w	locret_751E
00008508 B042                       		cmp.w	d2,d0
0000850A 6400 0000                  		bcc.w	locret_751E
0000850E 6000                       		bra.s	Platform2
00008510                            ; End of function Obj11_Solid
00008510                            
00008510                            ; ---------------------------------------------------------------------------
00008510                            ; Platform subroutine
00008510                            ; ---------------------------------------------------------------------------
00008510                            
00008510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008510                            
00008510                            
00008510                            PlatformObject:
00008510 43F8 D000                  		lea	($FFFFD000).w,a1
00008514 4A69 0012                  		tst.w	$12(a1)
00008518 6B00 0000                  		bmi.w	locret_751E
0000851C 3029 0008                  		move.w	8(a1),d0
00008520 9068 0008                  		sub.w	8(a0),d0
00008524 D041                       		add.w	d1,d0
00008526 6B00 0000                  		bmi.w	locret_751E
0000852A D241                       		add.w	d1,d1
0000852C B041                       		cmp.w	d1,d0
0000852E 6400 0000                  		bcc.w	locret_751E
00008532                            
00008532                            Platform2:
00008532 3028 000C                  		move.w	$C(a0),d0
00008536 5140                       		subq.w	#8,d0
00008538                            
00008538                            Platform3:
00008538 3429 000C                  		move.w	$C(a1),d2
0000853C 1229 0016                  		move.b	$16(a1),d1
00008540 4881                       		ext.w	d1
00008542 D242                       		add.w	d2,d1
00008544 5841                       		addq.w	#4,d1
00008546 9041                       		sub.w	d1,d0
00008548 6200 0000                  		bhi.w	locret_751E
0000854C 0C40 FFF0                  		cmpi.w	#-$10,d0
00008550 6500 0000                  		bcs.w	locret_751E
00008554 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008558 6B00 0000                  		bmi.w	locret_751E
0000855C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00008562 6400 0000                  		bcc.w	locret_751E
00008566 D440                       		add.w	d0,d2
00008568 5642                       		addq.w	#3,d2
0000856A 3342 000C                  		move.w	d2,$C(a1)
0000856E 5428 0024                  		addq.b	#2,$24(a0)
00008572                            
00008572                            loc_74AE:
00008572 0829 0003 0022             		btst	#3,$22(a1)
00008578 6700                       		beq.s	loc_74DC
0000857A 7000                       		moveq	#0,d0
0000857C 1029 003D                  		move.b	$3D(a1),d0
00008580 ED48                       		lsl.w	#6,d0
00008582 0680 00FF D000             		addi.l	#$FFD000,d0
00008588 2440                       		movea.l	d0,a2
0000858A 08AA 0003 0022             		bclr	#3,$22(a2)
00008590 422A 0025                  		clr.b	$25(a2)
00008594 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
0000859A 6600                       		bne.s	loc_74DC
0000859C 552A 0024                  		subq.b	#2,$24(a2)
000085A0                            
000085A0                            loc_74DC:
000085A0 3008                       		move.w	a0,d0
000085A2 0440 D000                  		subi.w	#-$3000,d0
000085A6 EC48                       		lsr.w	#6,d0
000085A8 0240 007F                  		andi.w	#$7F,d0
000085AC 1340 003D                  		move.b	d0,$3D(a1)
000085B0 137C 0000 0026             		move.b	#0,$26(a1)
000085B6 337C 0000 0012             		move.w	#0,$12(a1)
000085BC 3369 0010 0020             		move.w	$10(a1),$20(a1)
000085C2 0829 0001 0022             		btst	#1,$22(a1)
000085C8 6700                       		beq.s	loc_7512
000085CA 2F08                       		move.l	a0,-(sp)
000085CC 2049                       		movea.l	a1,a0
000085CE 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000085D4 205F                       		movea.l	(sp)+,a0
000085D6                            
000085D6                            loc_7512:
000085D6 08E9 0003 0022             		bset	#3,$22(a1)
000085DC 08E8 0003 0022             		bset	#3,$22(a0)
000085E2                            
000085E2                            locret_751E:
000085E2 4E75                       		rts	
000085E4                            ; End of function PlatformObject
000085E4                            
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            
000085E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085E4                            
000085E4                            
000085E4                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
000085E4 43F8 D000                  		lea	($FFFFD000).w,a1
000085E8 4A69 0012                  		tst.w	$12(a1)
000085EC 6B00 FFF4                  		bmi.w	locret_751E
000085F0 3029 0008                  		move.w	8(a1),d0
000085F4 9068 0008                  		sub.w	8(a0),d0
000085F8 D041                       		add.w	d1,d0
000085FA 6BE6                       		bmi.s	locret_751E
000085FC D241                       		add.w	d1,d1
000085FE B041                       		cmp.w	d1,d0
00008600 64E0                       		bcc.s	locret_751E
00008602 0828 0000 0001             		btst	#0,1(a0)
00008608 6700                       		beq.s	loc_754A
0000860A 4640                       		not.w	d0
0000860C D041                       		add.w	d1,d0
0000860E                            
0000860E                            loc_754A:
0000860E E248                       		lsr.w	#1,d0
00008610 7600                       		moveq	#0,d3
00008612 1632 0000                  		move.b	(a2,d0.w),d3
00008616 3028 000C                  		move.w	$C(a0),d0
0000861A 9043                       		sub.w	d3,d0
0000861C 6000 FF1A                  		bra.w	Platform3
00008620                            ; End of function SlopeObject
00008620                            
00008620                            
00008620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008620                            
00008620                            
00008620                            Obj15_Solid:				; XREF: Obj15_SetSolid
00008620 43F8 D000                  		lea	($FFFFD000).w,a1
00008624 4A69 0012                  		tst.w	$12(a1)
00008628 6B00 FFB8                  		bmi.w	locret_751E
0000862C 3029 0008                  		move.w	8(a1),d0
00008630 9068 0008                  		sub.w	8(a0),d0
00008634 D041                       		add.w	d1,d0
00008636 6B00 FFAA                  		bmi.w	locret_751E
0000863A D241                       		add.w	d1,d1
0000863C B041                       		cmp.w	d1,d0
0000863E 6400 FFA2                  		bcc.w	locret_751E
00008642 3028 000C                  		move.w	$C(a0),d0
00008646 9043                       		sub.w	d3,d0
00008648 6000 FEEE                  		bra.w	Platform3
0000864C                            ; End of function Obj15_Solid
0000864C                            
0000864C                            ; ===========================================================================
0000864C                            
0000864C                            Obj11_Action2:				; XREF: Obj11_Index
0000864C 6100                       		bsr.s	Obj11_WalkOff
0000864E 6100 0000                  		bsr.w	DisplaySprite
00008652 6000 0000                  		bra.w	Obj11_ChkDel
00008656                            
00008656                            ; ---------------------------------------------------------------------------
00008656                            ; Subroutine allowing Sonic to walk off a bridge
00008656                            ; ---------------------------------------------------------------------------
00008656                            
00008656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008656                            
00008656                            
00008656                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008656 7200                       		moveq	#0,d1
00008658 1228 0028                  		move.b	$28(a0),d1
0000865C E749                       		lsl.w	#3,d1
0000865E 3401                       		move.w	d1,d2
00008660 5041                       		addq.w	#8,d1
00008662 6100                       		bsr.s	ExitPlatform2
00008664 6400                       		bcc.s	locret_75BE
00008666 E848                       		lsr.w	#4,d0
00008668 1140 003F                  		move.b	d0,$3F(a0)
0000866C 1028 003E                  		move.b	$3E(a0),d0
00008670 0C00 0040                  		cmpi.b	#$40,d0
00008674 6700                       		beq.s	loc_75B6
00008676 5828 003E                  		addq.b	#4,$3E(a0)
0000867A                            
0000867A                            loc_75B6:
0000867A 6100 0000                  		bsr.w	Obj11_Bend
0000867E 6100 0000                  		bsr.w	Obj11_MoveSonic
00008682                            
00008682                            locret_75BE:
00008682 4E75                       		rts	
00008684                            ; End of function Obj11_WalkOff
00008684                            
00008684                            ; ---------------------------------------------------------------------------
00008684                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008684                            ; ---------------------------------------------------------------------------
00008684                            
00008684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008684                            
00008684                            
00008684                            ExitPlatform:
00008684 3401                       		move.w	d1,d2
00008686                            
00008686                            ExitPlatform2:
00008686 D442                       		add.w	d2,d2
00008688 43F8 D000                  		lea	($FFFFD000).w,a1
0000868C 0829 0001 0022             		btst	#1,$22(a1)
00008692 6600                       		bne.s	loc_75E0
00008694 3029 0008                  		move.w	8(a1),d0
00008698 9068 0008                  		sub.w	8(a0),d0
0000869C D041                       		add.w	d1,d0
0000869E 6B00                       		bmi.s	loc_75E0
000086A0 B042                       		cmp.w	d2,d0
000086A2 6500                       		bcs.s	locret_75F2
000086A4                            
000086A4                            loc_75E0:
000086A4 08A9 0003 0022             		bclr	#3,$22(a1)
000086AA 117C 0002 0024             		move.b	#2,$24(a0)
000086B0 08A8 0003 0022             		bclr	#3,$22(a0)
000086B6                            
000086B6                            locret_75F2:
000086B6 4E75                       		rts	
000086B8                            ; End of function ExitPlatform
000086B8                            
000086B8                            
000086B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086B8                            
000086B8                            
000086B8                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000086B8 7000                       		moveq	#0,d0
000086BA 1028 003F                  		move.b	$3F(a0),d0
000086BE 1030 0029                  		move.b	$29(a0,d0.w),d0
000086C2 ED48                       		lsl.w	#6,d0
000086C4 0680 00FF D000             		addi.l	#$FFD000,d0
000086CA 2440                       		movea.l	d0,a2
000086CC 43F8 D000                  		lea	($FFFFD000).w,a1
000086D0 302A 000C                  		move.w	$C(a2),d0
000086D4 5140                       		subq.w	#8,d0
000086D6 7200                       		moveq	#0,d1
000086D8 1229 0016                  		move.b	$16(a1),d1
000086DC 9041                       		sub.w	d1,d0
000086DE 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000086E2 4E75                       		rts	
000086E4                            ; End of function Obj11_MoveSonic
000086E4                            
000086E4                            
000086E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086E4                            
000086E4                            
000086E4                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000086E4 1028 003E                  		move.b	$3E(a0),d0
000086E8 6100 A2E2                  		bsr.w	CalcSine
000086EC 3800                       		move.w	d0,d4
000086EE 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000086F4 7000                       		moveq	#0,d0
000086F6 1028 0028                  		move.b	$28(a0),d0
000086FA E948                       		lsl.w	#4,d0
000086FC 7600                       		moveq	#0,d3
000086FE 1628 003F                  		move.b	$3F(a0),d3
00008702 3403                       		move.w	d3,d2
00008704 D640                       		add.w	d0,d3
00008706 7A00                       		moveq	#0,d5
00008708 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
0000870E 1A35 3000                  		move.b	(a5,d3.w),d5
00008712 0243 000F                  		andi.w	#$F,d3
00008716 E94B                       		lsl.w	#4,d3
00008718 47F4 3000                  		lea	(a4,d3.w),a3
0000871C 45E8 0029                  		lea	$29(a0),a2
00008720                            
00008720                            loc_765C:
00008720 7000                       		moveq	#0,d0
00008722 101A                       		move.b	(a2)+,d0
00008724 ED48                       		lsl.w	#6,d0
00008726 0680 00FF D000             		addi.l	#$FFD000,d0
0000872C 2240                       		movea.l	d0,a1
0000872E 7000                       		moveq	#0,d0
00008730 101B                       		move.b	(a3)+,d0
00008732 5240                       		addq.w	#1,d0
00008734 C0C5                       		mulu.w	d5,d0
00008736 C0C4                       		mulu.w	d4,d0
00008738 4840                       		swap	d0
0000873A D069 003C                  		add.w	$3C(a1),d0
0000873E 3340 000C                  		move.w	d0,$C(a1)
00008742 51CA FFDC                  		dbf	d2,loc_765C
00008746 7000                       		moveq	#0,d0
00008748 1028 0028                  		move.b	$28(a0),d0
0000874C 7600                       		moveq	#0,d3
0000874E 1628 003F                  		move.b	$3F(a0),d3
00008752 5203                       		addq.b	#1,d3
00008754 9600                       		sub.b	d0,d3
00008756 4403                       		neg.b	d3
00008758 6B00                       		bmi.s	locret_76CA
0000875A 3403                       		move.w	d3,d2
0000875C E94B                       		lsl.w	#4,d3
0000875E 47F4 3000                  		lea	(a4,d3.w),a3
00008762 D6C2                       		adda.w	d2,a3
00008764 5342                       		subq.w	#1,d2
00008766 6500                       		bcs.s	locret_76CA
00008768                            
00008768                            loc_76A4:
00008768 7000                       		moveq	#0,d0
0000876A 101A                       		move.b	(a2)+,d0
0000876C ED48                       		lsl.w	#6,d0
0000876E 0680 00FF D000             		addi.l	#$FFD000,d0
00008774 2240                       		movea.l	d0,a1
00008776 7000                       		moveq	#0,d0
00008778 1023                       		move.b	-(a3),d0
0000877A 5240                       		addq.w	#1,d0
0000877C C0C5                       		mulu.w	d5,d0
0000877E C0C4                       		mulu.w	d4,d0
00008780 4840                       		swap	d0
00008782 D069 003C                  		add.w	$3C(a1),d0
00008786 3340 000C                  		move.w	d0,$C(a1)
0000878A 51CA FFDC                  		dbf	d2,loc_76A4
0000878E                            
0000878E                            locret_76CA:
0000878E 4E75                       		rts	
00008790                            ; End of function Obj11_Bend
00008790                            
00008790                            ; ===========================================================================
00008790                            ; ---------------------------------------------------------------------------
00008790                            ; GHZ bridge-bending data
00008790                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008790                            ; ---------------------------------------------------------------------------
00008790                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000088A0                            		even
000088A0                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000089A0                            		even
000089A0                            
000089A0                            ; ===========================================================================
000089A0                            
000089A0                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000089A0 3028 0008                  		move.w	8(a0),d0
000089A4 0240 FF80                  		andi.w	#$FF80,d0
000089A8 3238 F700                  		move.w	($FFFFF700).w,d1
000089AC 0441 0080                  		subi.w	#$80,d1
000089B0 0241 FF80                  		andi.w	#$FF80,d1
000089B4 9041                       		sub.w	d1,d0
000089B6 0C40 0280                  		cmpi.w	#$280,d0
000089BA 6300                       		bls.s	Obj11_NoDel
000089BC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000089C0 6700                       		beq.s	Obj11_DelAll		; if it's zero, don't remember object
000089C2 3440                       		movea.w	d0,a2	; load address into a2
000089C4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000089C8 6000                       		bra.s	Obj11_DelAll	; and delete object
000089CA                            
000089CA                            Obj11_NoDel:
000089CA 4E75                       		rts	
000089CC                            ; ===========================================================================
000089CC                            
000089CC                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000089CC 7400                       		moveq	#0,d2
000089CE 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000089D2 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000089D4 5302                       		subq.b	#1,d2		; subtract 1
000089D6 6500                       		bcs.s	Obj11_Delete
000089D8                            
000089D8                            Obj11_DelLoop:
000089D8 7000                       		moveq	#0,d0
000089DA 101A                       		move.b	(a2)+,d0
000089DC ED48                       		lsl.w	#6,d0
000089DE 0680 00FF D000             		addi.l	#$FFD000,d0
000089E4 2240                       		movea.l	d0,a1
000089E6 B048                       		cmp.w	a0,d0
000089E8 6700                       		beq.s	loc_791E
000089EA 6100 0000                  		bsr.w	DeleteObject2
000089EE                            
000089EE                            loc_791E:
000089EE 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000089F2                            
000089F2                            Obj11_Delete:
000089F2 6100 0000                  		bsr.w	DeleteObject
000089F6 4E75                       		rts	
000089F8                            ; ===========================================================================
000089F8                            
000089F8                            Obj11_Delete2:				; XREF: Obj11_Index
000089F8 6100 0000                  		bsr.w	DeleteObject
000089FC 4E75                       		rts	
000089FE                            ; ===========================================================================
000089FE                            
000089FE                            Obj11_Display2:				; XREF: Obj11_Index
000089FE 6100 0000                  		bsr.w	DisplaySprite
00008A02 4E75                       		rts	
00008A04                            ; ===========================================================================
00008A04                            ; ---------------------------------------------------------------------------
00008A04                            ; Sprite mappings - GHZ	bridge
00008A04                            ; ---------------------------------------------------------------------------
00008A04                            Map_obj11:
00008A04                            	include "_maps\obj11.asm"
00008A04                            ; ---------------------------------------------------------------------------
00008A04                            ; Sprite mappings - GHZ	bridge
00008A04                            ; ---------------------------------------------------------------------------
00008A04 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008A08 0000                       		dc.w byte_794B-Map_obj11
00008A0A 01                         byte_793A:	dc.b 1
00008A0B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008A10 02                         byte_7940:	dc.b 2
00008A11 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008A16 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008A1B 01                         byte_794B:	dc.b 1
00008A1C FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008A22 00                         		even
00008A22 00                         		even
00008A22                            
00008A22                            ; ===========================================================================
00008A22                            ; ---------------------------------------------------------------------------
00008A22                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008A22                            ;	    - spiked ball on a chain (SBZ)
00008A22                            ; ---------------------------------------------------------------------------
00008A22                            
00008A22                            Obj15:					; XREF: Obj_Index
00008A22 7000                       		moveq	#0,d0
00008A24 1028 0024                  		move.b	$24(a0),d0
00008A28 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008A2C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008A30                            ; ===========================================================================
00008A30 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008A34 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008A38 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008A3C 0000                       		dc.w Obj15_Action-Obj15_Index
00008A3E                            ; ===========================================================================
00008A3E                            
00008A3E                            Obj15_Main:				; XREF: Obj15_Index
00008A3E 5428 0024                  		addq.b	#2,$24(a0)
00008A42 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008A4A 317C 4380 0002             		move.w	#$4380,2(a0)
00008A50 117C 0004 0001             		move.b	#4,1(a0)
00008A56 117C 0003 0018             		move.b	#3,$18(a0)
00008A5C 117C 0018 0019             		move.b	#$18,$19(a0)
00008A62 117C 0008 0016             		move.b	#8,$16(a0)
00008A68 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008A6E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008A74 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A7A 6600                       		bne.s	Obj15_NotSLZ
00008A7C 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008A84 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008A8A 117C 0020 0019             		move.b	#$20,$19(a0)
00008A90 117C 0010 0016             		move.b	#$10,$16(a0)
00008A96 117C 0099 0020             		move.b	#$99,$20(a0)
00008A9C                            
00008A9C                            Obj15_NotSLZ:
00008A9C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008AA2 6600                       		bne.s	Obj15_SetLength
00008AA4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008AAC 317C 0391 0002             		move.w	#$391,2(a0)
00008AB2 117C 0018 0019             		move.b	#$18,$19(a0)
00008AB8 117C 0018 0016             		move.b	#$18,$16(a0)
00008ABE 117C 0086 0020             		move.b	#$86,$20(a0)
00008AC4 117C 000C 0024             		move.b	#$C,$24(a0)
00008ACA                            
00008ACA                            Obj15_SetLength:
00008ACA 1810                       		move.b	0(a0),d4
00008ACC 7200                       		moveq	#0,d1
00008ACE 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008AD2 1212                       		move.b	(a2),d1		; move a2 to d1
00008AD4 3F01                       		move.w	d1,-(sp)
00008AD6 0241 000F                  		andi.w	#$F,d1
00008ADA 14FC 0000                  		move.b	#0,(a2)+
00008ADE 3601                       		move.w	d1,d3
00008AE0 E94B                       		lsl.w	#4,d3
00008AE2 5003                       		addq.b	#8,d3
00008AE4 1143 003C                  		move.b	d3,$3C(a0)
00008AE8 5103                       		subq.b	#8,d3
00008AEA 4A28 001A                  		tst.b	$1A(a0)
00008AEE 6700                       		beq.s	Obj15_MakeChain
00008AF0 5003                       		addq.b	#8,d3
00008AF2 5341                       		subq.w	#1,d1
00008AF4                            
00008AF4                            Obj15_MakeChain:
00008AF4 6100 0000                  		bsr.w	SingleObjLoad
00008AF8 6600                       		bne.s	loc_7A92
00008AFA 5228 0028                  		addq.b	#1,$28(a0)
00008AFE 3A09                       		move.w	a1,d5
00008B00 0445 D000                  		subi.w	#-$3000,d5
00008B04 EC4D                       		lsr.w	#6,d5
00008B06 0245 007F                  		andi.w	#$7F,d5
00008B0A 14C5                       		move.b	d5,(a2)+
00008B0C 137C 000A 0024             		move.b	#$A,$24(a1)
00008B12 1284                       		move.b	d4,0(a1)	; load swinging	object
00008B14 2368 0004 0004             		move.l	4(a0),4(a1)
00008B1A 3368 0002 0002             		move.w	2(a0),2(a1)
00008B20 08A9 0006 0002             		bclr	#6,2(a1)
00008B26 137C 0004 0001             		move.b	#4,1(a1)
00008B2C 137C 0004 0018             		move.b	#4,$18(a1)
00008B32 137C 0008 0019             		move.b	#8,$19(a1)
00008B38 137C 0001 001A             		move.b	#1,$1A(a1)
00008B3E 1343 003C                  		move.b	d3,$3C(a1)
00008B42 0403 0010                  		subi.b	#$10,d3
00008B46 6400                       		bcc.s	loc_7A8E
00008B48 137C 0002 001A             		move.b	#2,$1A(a1)
00008B4E 137C 0003 0018             		move.b	#3,$18(a1)
00008B54 08E9 0006 0002             		bset	#6,2(a1)
00008B5A                            
00008B5A                            loc_7A8E:
00008B5A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008B5E                            
00008B5E                            loc_7A92:
00008B5E 3A08                       		move.w	a0,d5
00008B60 0445 D000                  		subi.w	#-$3000,d5
00008B64 EC4D                       		lsr.w	#6,d5
00008B66 0245 007F                  		andi.w	#$7F,d5
00008B6A 14C5                       		move.b	d5,(a2)+
00008B6C 317C 4080 0026             		move.w	#$4080,$26(a0)
00008B72 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008B78 321F                       		move.w	(sp)+,d1
00008B7A 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008B7E 6700                       		beq.s	loc_7AD4	; if not, branch
00008B80 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008B88 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008B8E 117C 0001 001A             		move.b	#1,$1A(a0)
00008B94 117C 0002 0018             		move.b	#2,$18(a0)
00008B9A 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008BA0                            
00008BA0                            loc_7AD4:
00008BA0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008BA6 6700                       		beq.s	Obj15_Action	; if yes, branch
00008BA8                            
00008BA8                            Obj15_SetSolid:				; XREF: Obj15_Index
00008BA8 7200                       		moveq	#0,d1
00008BAA 1228 0019                  		move.b	$19(a0),d1
00008BAE 7600                       		moveq	#0,d3
00008BB0 1628 0016                  		move.b	$16(a0),d3
00008BB4 6100 FA6A                  		bsr.w	Obj15_Solid
00008BB8                            
00008BB8                            Obj15_Action:				; XREF: Obj15_Index
00008BB8 6100 0000                  		bsr.w	Obj15_Move
00008BBC 6100 0000                  		bsr.w	DisplaySprite
00008BC0 6000 0000                  		bra.w	Obj15_ChkDel
00008BC4                            ; ===========================================================================
00008BC4                            
00008BC4                            Obj15_Action2:				; XREF: Obj15_Index
00008BC4 7200                       		moveq	#0,d1
00008BC6 1228 0019                  		move.b	$19(a0),d1
00008BCA 6100 FAB8                  		bsr.w	ExitPlatform
00008BCE 3F28 0008                  		move.w	8(a0),-(sp)
00008BD2 6100 0000                  		bsr.w	Obj15_Move
00008BD6 341F                       		move.w	(sp)+,d2
00008BD8 7600                       		moveq	#0,d3
00008BDA 1628 0016                  		move.b	$16(a0),d3
00008BDE 5203                       		addq.b	#1,d3
00008BE0 6100 0000                  		bsr.w	MvSonicOnPtfm
00008BE4 6100 0000                  		bsr.w	DisplaySprite
00008BE8 6000 0000                  		bra.w	Obj15_ChkDel
00008BEC                            
00008BEC 4E75                       		rts
00008BEE                            
00008BEE                            ; ---------------------------------------------------------------------------
00008BEE                            ; Subroutine to	change Sonic's position with a platform
00008BEE                            ; ---------------------------------------------------------------------------
00008BEE                            
00008BEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BEE                            
00008BEE                            
00008BEE                            MvSonicOnPtfm:
00008BEE 43F8 D000                  		lea	($FFFFD000).w,a1
00008BF2 3028 000C                  		move.w	$C(a0),d0
00008BF6 9043                       		sub.w	d3,d0
00008BF8 6000                       		bra.s	MvSonic2
00008BFA                            ; End of function MvSonicOnPtfm
00008BFA                            
00008BFA                            ; ---------------------------------------------------------------------------
00008BFA                            ; Subroutine to	change Sonic's position with a platform
00008BFA                            ; ---------------------------------------------------------------------------
00008BFA                            
00008BFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BFA                            
00008BFA                            
00008BFA                            MvSonicOnPtfm2:
00008BFA 43F8 D000                  		lea	($FFFFD000).w,a1
00008BFE 3028 000C                  		move.w	$C(a0),d0
00008C02 0440 0009                  		subi.w	#9,d0
00008C06                            
00008C06                            MvSonic2:
00008C06 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008C0A 6B00                       		bmi.s	locret_7B62
00008C0C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C12 6400                       		bcc.s	locret_7B62
00008C14 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C18 6600                       		bne.s	locret_7B62
00008C1A 9468 0008                  		sub.w	8(a0),d2
00008C1E 9569 0008                  		sub.w	d2,8(a1)
00008C22 7200                       		moveq	#0,d1
00008C24 1229 0016                  		move.b	$16(a1),d1
00008C28 9041                       		sub.w	d1,d0
00008C2A B069 000C                  		cmp.w	$C(a1),d0
00008C2E 6600                       		bne.s	@frustrated
00008C30 4A42                       		tst.w	d2
00008C32 6600                       		bne.s	@frustrated
00008C34 3340 000C                  		move.w	d0,$C(a1)	
00008C38 4A38 F5D9                  		tst.b	(SonimeSST+sonime_waittimer2).w
00008C3C 6700                       		beq.s	@resetwaittimer
00008C3E 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008C42 6600                       		bne.s	locret_7B62
00008C44 5338 F5D9                  		subi.b	#1,(SonimeSST+sonime_waittimer2).w
00008C48 6000                       		bra.s	@frustrated2
00008C4A                            
00008C4A                            	@frustrated:
00008C4A 11FC 0020 F5D9             		move.b	#$20,(SonimeSST+sonime_waittimer2).w
00008C50 3340 000C                  		move.w	d0,$C(a1)
00008C54 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008C58 6600                       		bne.s	@subtract
00008C5A                            
00008C5A                            	@frustrated2:
00008C5A 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
00008C60 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00008C66 4E75                       		rts
00008C68                            
00008C68                            	@subtract:
00008C68 5338 F5D8                  		subi.b	#1,(SonimeSST+sonime_waittimer).w
00008C6C 4E75                       		rts
00008C6E                            
00008C6E                            	@resetwaittimer:
00008C6E 11FC 0060 F5D8             		move.b	#$60,(SonimeSST+sonime_waittimer).w
00008C74                            
00008C74                            locret_7B62:
00008C74 4E75                       		rts	
00008C76                            ; End of function MvSonicOnPtfm2
00008C76                            
00008C76                            
00008C76                            CheckIfMoving:
00008C76                            
00008C76                            
00008C76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C76                            
00008C76                            
00008C76                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008C76 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008C7A 323C 0080                  		move.w	#$80,d1
00008C7E 0828 0000 0022             		btst	#0,$22(a0)
00008C84 6700                       		beq.s	loc_7B78
00008C86 4440                       		neg.w	d0
00008C88 D041                       		add.w	d1,d0
00008C8A                            
00008C8A                            loc_7B78:
00008C8A 6000                       		bra.s	Obj15_Move2
00008C8C                            ; End of function Obj15_Move
00008C8C                            
00008C8C                            
00008C8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C8C                            
00008C8C                            
00008C8C                            Obj48_Move:				; XREF: Obj48_Display2
00008C8C 4A28 003D                  		tst.b	$3D(a0)
00008C90 6600                       		bne.s	loc_7B9C
00008C92 3028 003E                  		move.w	$3E(a0),d0
00008C96 5040                       		addq.w	#8,d0
00008C98 3140 003E                  		move.w	d0,$3E(a0)
00008C9C D168 0026                  		add.w	d0,$26(a0)
00008CA0 0C40 0200                  		cmpi.w	#$200,d0
00008CA4 6600                       		bne.s	loc_7BB6
00008CA6 117C 0001 003D             		move.b	#1,$3D(a0)
00008CAC 6000                       		bra.s	loc_7BB6
00008CAE                            ; ===========================================================================
00008CAE                            
00008CAE                            loc_7B9C:
00008CAE 3028 003E                  		move.w	$3E(a0),d0
00008CB2 5140                       		subq.w	#8,d0
00008CB4 3140 003E                  		move.w	d0,$3E(a0)
00008CB8 D168 0026                  		add.w	d0,$26(a0)
00008CBC 0C40 FE00                  		cmpi.w	#-$200,d0
00008CC0 6600                       		bne.s	loc_7BB6
00008CC2 117C 0000 003D             		move.b	#0,$3D(a0)
00008CC8                            
00008CC8                            loc_7BB6:
00008CC8 1028 0026                  		move.b	$26(a0),d0
00008CCC                            ; End of function Obj48_Move
00008CCC                            
00008CCC                            
00008CCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CCC                            
00008CCC                            
00008CCC                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008CCC 6100 9CFE                  		bsr.w	CalcSine
00008CD0 3428 0038                  		move.w	$38(a0),d2
00008CD4 3628 003A                  		move.w	$3A(a0),d3
00008CD8 45E8 0028                  		lea	$28(a0),a2
00008CDC 7C00                       		moveq	#0,d6
00008CDE 1C1A                       		move.b	(a2)+,d6
00008CE0                            
00008CE0                            loc_7BCE:
00008CE0 7800                       		moveq	#0,d4
00008CE2 181A                       		move.b	(a2)+,d4
00008CE4 ED4C                       		lsl.w	#6,d4
00008CE6 0684 00FF D000             		addi.l	#$FFD000,d4
00008CEC 2244                       		movea.l	d4,a1
00008CEE 7800                       		moveq	#0,d4
00008CF0 1829 003C                  		move.b	$3C(a1),d4
00008CF4 2A04                       		move.l	d4,d5
00008CF6 C9C0                       		muls.w	d0,d4
00008CF8 E084                       		asr.l	#8,d4
00008CFA CBC1                       		muls.w	d1,d5
00008CFC E085                       		asr.l	#8,d5
00008CFE D842                       		add.w	d2,d4
00008D00 DA43                       		add.w	d3,d5
00008D02 3344 000C                  		move.w	d4,$C(a1)
00008D06 3345 0008                  		move.w	d5,8(a1)
00008D0A 51CE FFD4                  		dbf	d6,loc_7BCE
00008D0E 4E75                       		rts	
00008D10                            ; End of function Obj15_Move2
00008D10                            
00008D10                            ; ===========================================================================
00008D10                            
00008D10                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008D10 3028 003A                  		move.w	$3A(a0),d0
00008D14 0240 FF80                  		andi.w	#$FF80,d0
00008D18 3238 F700                  		move.w	($FFFFF700).w,d1
00008D1C 0441 0080                  		subi.w	#$80,d1
00008D20 0241 FF80                  		andi.w	#$FF80,d1
00008D24 9041                       		sub.w	d1,d0
00008D26 0C40 0280                  		cmpi.w	#$280,d0
00008D2A 6300                       		bls.s	Obj15_NoDel
00008D2C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008D30 6700                       		beq.s	Obj15_DelAll		; if it's zero, don't remember object
00008D32 3440                       		movea.w	d0,a2	; load address into a2
00008D34 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008D38 6000                       		bra.s	Obj15_DelAll	; and delete object
00008D3A                            
00008D3A                            Obj15_NoDel:
00008D3A 4E75                       		rts	
00008D3C                            ; ===========================================================================
00008D3C                            
00008D3C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008D3C 7400                       		moveq	#0,d2
00008D3E 45E8 0028                  		lea	$28(a0),a2
00008D42 141A                       		move.b	(a2)+,d2
00008D44                            
00008D44                            Obj15_DelLoop:
00008D44 7000                       		moveq	#0,d0
00008D46 101A                       		move.b	(a2)+,d0
00008D48 ED48                       		lsl.w	#6,d0
00008D4A 0680 00FF D000             		addi.l	#$FFD000,d0
00008D50 2240                       		movea.l	d0,a1
00008D52 6100 0000                  		bsr.w	DeleteObject2
00008D56 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008D5A 4E75                       		rts	
00008D5C                            ; ===========================================================================
00008D5C                            
00008D5C                            Obj15_Delete:				; XREF: Obj15_Index
00008D5C 6100 0000                  		bsr.w	DeleteObject
00008D60 4E75                       		rts	
00008D62                            ; ===========================================================================
00008D62                            
00008D62                            Obj15_Display:				; XREF: Obj15_Index
00008D62 6000 0000                  		bra.w	DisplaySprite
00008D66                            ; ===========================================================================
00008D66                            ; ---------------------------------------------------------------------------
00008D66                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008D66                            ; ---------------------------------------------------------------------------
00008D66                            Map_obj15:
00008D66                            	include "_maps\obj15ghz.asm"
00008D66                            ; ---------------------------------------------------------------------------
00008D66                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008D66                            ; ---------------------------------------------------------------------------
00008D66 0000                       		dc.w byte_7C4E-Map_obj15
00008D68 0000                       		dc.w byte_7C59-Map_obj15
00008D6A 0000                       		dc.w byte_7C5F-Map_obj15
00008D6C 02                         byte_7C4E:	dc.b 2
00008D6D F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008D72 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008D77 01                         byte_7C59:	dc.b 1
00008D78 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008D7D 01                         byte_7C5F:	dc.b 1
00008D7E F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008D84 00                         		even
00008D84 00                         		even
00008D84                            
00008D84                            ; ---------------------------------------------------------------------------
00008D84                            ; Sprite mappings - SLZ	swinging platforms
00008D84                            ; ---------------------------------------------------------------------------
00008D84                            Map_obj15a:
00008D84                            	include "_maps\obj15slz.asm"
00008D84                            ; ---------------------------------------------------------------------------
00008D84                            ; Sprite mappings - SLZ	swinging platforms
00008D84                            ; ---------------------------------------------------------------------------
00008D84 0000                       		dc.w byte_7C6C-Map_obj15a
00008D86 0000                       		dc.w byte_7C95-Map_obj15a
00008D88 0000                       		dc.w byte_7C9B-Map_obj15a
00008D8A 08                         byte_7C6C:	dc.b 8
00008D8B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008D90 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008D95 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008D9A F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008D9F 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008DA4 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008DA9 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008DAE 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008DB3 01                         byte_7C95:	dc.b 1
00008DB4 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008DB9 01                         byte_7C9B:	dc.b 1
00008DBA F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008DC0 00                         		even
00008DC0 00                         		even
00008DC0                            
00008DC0                            ; ===========================================================================
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            
00008DC0                            Obj17:					; XREF: Obj_Index
00008DC0 7000                       		moveq	#0,d0
00008DC2 1028 0024                  		move.b	$24(a0),d0
00008DC6 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008DCA 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008DCE                            ; ===========================================================================
00008DCE 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008DD0 0000                       		dc.w Obj17_Action-Obj17_Index
00008DD2 0000                       		dc.w Obj17_Action-Obj17_Index
00008DD4 0000                       		dc.w Obj17_Delete-Obj17_Index
00008DD6 0000                       		dc.w Obj17_Display-Obj17_Index
00008DD8                            ; ===========================================================================
00008DD8                            
00008DD8                            Obj17_Main:				; XREF: Obj17_Index
00008DD8 5428 0024                  		addq.b	#2,$24(a0)
00008DDC 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008DE4 317C 4398 0002             		move.w	#$4398,2(a0)
00008DEA 117C 0007 0022             		move.b	#7,$22(a0)
00008DF0 117C 0004 0001             		move.b	#4,1(a0)
00008DF6 117C 0003 0018             		move.b	#3,$18(a0)
00008DFC 117C 0008 0019             		move.b	#8,$19(a0)
00008E02 3428 000C                  		move.w	$C(a0),d2
00008E06 3628 0008                  		move.w	8(a0),d3
00008E0A 1810                       		move.b	0(a0),d4
00008E0C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008E10 7200                       		moveq	#0,d1
00008E12 1212                       		move.b	(a2),d1		; move a2 to d1
00008E14 14FC 0000                  		move.b	#0,(a2)+
00008E18 3001                       		move.w	d1,d0
00008E1A E248                       		lsr.w	#1,d0
00008E1C E948                       		lsl.w	#4,d0
00008E1E 9640                       		sub.w	d0,d3
00008E20 5501                       		subq.b	#2,d1
00008E22 6500                       		bcs.s	Obj17_Action
00008E24 7C00                       		moveq	#0,d6
00008E26                            
00008E26                            Obj17_MakeHelix:
00008E26 6100 0000                  		bsr.w	SingleObjLoad
00008E2A 6600                       		bne.s	Obj17_Action
00008E2C 5228 0028                  		addq.b	#1,$28(a0)
00008E30 3A09                       		move.w	a1,d5
00008E32 0445 D000                  		subi.w	#$D000,d5
00008E36 EC4D                       		lsr.w	#6,d5
00008E38 0245 007F                  		andi.w	#$7F,d5
00008E3C 14C5                       		move.b	d5,(a2)+
00008E3E 137C 0008 0024             		move.b	#8,$24(a1)
00008E44 1284                       		move.b	d4,0(a1)
00008E46 3342 000C                  		move.w	d2,$C(a1)
00008E4A 3343 0008                  		move.w	d3,8(a1)
00008E4E 2368 0004 0004             		move.l	4(a0),4(a1)
00008E54 337C 4398 0002             		move.w	#$4398,2(a1)
00008E5A 137C 0004 0001             		move.b	#4,1(a1)
00008E60 137C 0003 0018             		move.b	#3,$18(a1)
00008E66 137C 0008 0019             		move.b	#8,$19(a1)
00008E6C 1346 003E                  		move.b	d6,$3E(a1)
00008E70 5206                       		addq.b	#1,d6
00008E72 0206 0007                  		andi.b	#7,d6
00008E76 0643 0010                  		addi.w	#$10,d3
00008E7A B668 0008                  		cmp.w	8(a0),d3
00008E7E 6600                       		bne.s	loc_7D78
00008E80 1146 003E                  		move.b	d6,$3E(a0)
00008E84 5206                       		addq.b	#1,d6
00008E86 0206 0007                  		andi.b	#7,d6
00008E8A 0643 0010                  		addi.w	#$10,d3
00008E8E 5228 0028                  		addq.b	#1,$28(a0)
00008E92                            
00008E92                            loc_7D78:
00008E92 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008E96                            
00008E96                            Obj17_Action:				; XREF: Obj17_Index
00008E96 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008E9A 6100 0000                  		bsr.w	DisplaySprite
00008E9E 6000 0000                  		bra.w	Obj17_ChkDel
00008EA2                            
00008EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EA2                            
00008EA2                            
00008EA2                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008EA2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008EA6 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008EAC D028 003E                  		add.b	$3E(a0),d0
00008EB0 0200 0007                  		andi.b	#7,d0
00008EB4 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008EB8 6600                       		bne.s	locret_7DA6
00008EBA 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008EC0                            
00008EC0                            locret_7DA6:
00008EC0 4E75                       		rts	
00008EC2                            ; End of function Obj17_RotateSpikes
00008EC2                            
00008EC2                            ; ===========================================================================
00008EC2                            
00008EC2                            Obj17_ChkDel:				; XREF: Obj17_Action
00008EC2 3028 0008                  		move.w	8(a0),d0
00008EC6 0240 FF80                  		andi.w	#$FF80,d0
00008ECA 3238 F700                  		move.w	($FFFFF700).w,d1
00008ECE 0441 0080                  		subi.w	#$80,d1
00008ED2 0241 FF80                  		andi.w	#$FF80,d1
00008ED6 9041                       		sub.w	d1,d0
00008ED8 0C40 0280                  		cmpi.w	#$280,d0
00008EDC 6300                       		bls.s	Obj17_NoDel
00008EDE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008EE2 6700                       		beq.s	Obj17_DelAll		; if it's zero, don't remember object
00008EE4 3440                       		movea.w	d0,a2	; load address into a2
00008EE6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008EEA 6000                       		bra.s	Obj17_DelAll	; and delete object
00008EEC                            
00008EEC                            Obj17_NoDel:
00008EEC 4E75                       		rts	
00008EEE                            ; ===========================================================================
00008EEE                            
00008EEE                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008EEE 7400                       		moveq	#0,d2
00008EF0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008EF4 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008EF6 5502                       		subq.b	#2,d2
00008EF8 6500                       		bcs.s	Obj17_Delete
00008EFA                            
00008EFA                            Obj17_DelLoop:
00008EFA 7000                       		moveq	#0,d0
00008EFC 101A                       		move.b	(a2)+,d0
00008EFE ED48                       		lsl.w	#6,d0
00008F00 0680 00FF D000             		addi.l	#$FFD000,d0
00008F06 2240                       		movea.l	d0,a1
00008F08 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008F0C 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008F10                            
00008F10                            Obj17_Delete:				; XREF: Obj17_Index
00008F10 6100 0000                  		bsr.w	DeleteObject
00008F14 4E75                       		rts	
00008F16                            ; ===========================================================================
00008F16                            
00008F16                            Obj17_Display:				; XREF: Obj17_Index
00008F16 6100 FF8A                  		bsr.w	Obj17_RotateSpikes
00008F1A 6000 0000                  		bra.w	DisplaySprite
00008F1E                            ; ===========================================================================
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E                            Map_obj17:
00008F1E                            	include "_maps\obj17.asm"
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008F22 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008F26 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008F2A 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008F2E 01                         byte_7E08:	dc.b 1
00008F2F F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008F34 01                         byte_7E0E:	dc.b 1
00008F35 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008F3A 01                         byte_7E14:	dc.b 1
00008F3B F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008F40 01                         byte_7E1A:	dc.b 1
00008F41 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008F46 01                         byte_7E20:	dc.b 1
00008F47 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008F4C 01                         byte_7E26:	dc.b 1
00008F4D 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008F52 01                         byte_7E2C:	dc.b 1
00008F53 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008F58                            		even
00008F58                            		even
00008F58                            
00008F58                            ; ===========================================================================
00008F58                            ; ---------------------------------------------------------------------------
00008F58                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008F58                            ; ---------------------------------------------------------------------------
00008F58                            
00008F58                            Obj18:					; XREF: Obj_Index
00008F58 7000                       		moveq	#0,d0
00008F5A 1028 0024                  		move.b	$24(a0),d0
00008F5E 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008F62 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008F66                            ; ===========================================================================
00008F66 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008F68 0000                       		dc.w Obj18_Solid-Obj18_Index
00008F6A 0000                       		dc.w Obj18_Action2-Obj18_Index
00008F6C 0000                       		dc.w Obj18_Delete-Obj18_Index
00008F6E 0000                       		dc.w Obj18_Action-Obj18_Index
00008F70                            ; ===========================================================================
00008F70                            
00008F70                            Obj18_Main:				; XREF: Obj18_Index
00008F70 5428 0024                  		addq.b	#2,$24(a0)
00008F74 317C 4000 0002             		move.w	#$4000,2(a0)
00008F7A 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008F82 117C 0020 0019             		move.b	#$20,$19(a0)
00008F88 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008F8E 6600                       		bne.s	Obj18_NotSYZ
00008F90 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008F98 117C 0020 0019             		move.b	#$20,$19(a0)
00008F9E                            
00008F9E                            Obj18_NotSYZ:
00008F9E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008FA4 6600                       		bne.s	Obj18_NotSLZ
00008FA6 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008FAE 117C 0020 0019             		move.b	#$20,$19(a0)
00008FB4 317C 4000 0002             		move.w	#$4000,2(a0)
00008FBA 117C 0003 0028             		move.b	#3,$28(a0)
00008FC0                            
00008FC0                            Obj18_NotSLZ:
00008FC0 117C 0004 0001             		move.b	#4,1(a0)
00008FC6 117C 0004 0018             		move.b	#4,$18(a0)
00008FCC 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008FD2 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008FD8 3168 0008 0032             		move.w	8(a0),$32(a0)
00008FDE 317C 0080 0026             		move.w	#$80,$26(a0)
00008FE4 7200                       		moveq	#0,d1
00008FE6 1028 0028                  		move.b	$28(a0),d0
00008FEA 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008FEE 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008FF0 5201                       		addq.b	#1,d1		; use frame #1
00008FF2 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008FF8                            
00008FF8                            Obj18_SetFrame:
00008FF8 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008FFC                            
00008FFC                            Obj18_Solid:				; XREF: Obj18_Index
00008FFC 4A28 0038                  		tst.b	$38(a0)
00009000 6700                       		beq.s	loc_7EE0
00009002 5928 0038                  		subq.b	#4,$38(a0)
00009006                            
00009006                            loc_7EE0:
00009006 7200                       		moveq	#0,d1
00009008 1228 0019                  		move.b	$19(a0),d1
0000900C 6100 F502                  		bsr.w	PlatformObject
00009010                            
00009010                            Obj18_Action:				; XREF: Obj18_Index
00009010 6100 0000                  		bsr.w	Obj18_Move
00009014 6100 0000                  		bsr.w	Obj18_Nudge
00009018 6100 0000                  		bsr.w	DisplaySprite
0000901C 6000 0000                  		bra.w	Obj18_ChkDel
00009020                            ; ===========================================================================
00009020                            
00009020                            Obj18_Action2:				; XREF: Obj18_Index
00009020 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009026 6700                       		beq.s	loc_7F06
00009028 5828 0038                  		addq.b	#4,$38(a0)
0000902C                            
0000902C                            loc_7F06:
0000902C 7200                       		moveq	#0,d1
0000902E 1228 0019                  		move.b	$19(a0),d1
00009032 6100 F650                  		bsr.w	ExitPlatform
00009036 3F28 0008                  		move.w	8(a0),-(sp)
0000903A 6100 0000                  		bsr.w	Obj18_Move
0000903E 6100 0000                  		bsr.w	Obj18_Nudge
00009042 341F                       		move.w	(sp)+,d2
00009044 6100 FBB4                  		bsr.w	MvSonicOnPtfm2
00009048 6100 0000                  		bsr.w	DisplaySprite
0000904C 6000 0000                  		bra.w	Obj18_ChkDel
00009050                            
00009050 4E75                       		rts
00009052                            
00009052                            ; ---------------------------------------------------------------------------
00009052                            ; Subroutine to	move platform slightly when you	stand on it
00009052                            ; ---------------------------------------------------------------------------
00009052                            
00009052                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009052                            
00009052                            
00009052                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00009052 1028 0038                  		move.b	$38(a0),d0
00009056 6100 9974                  		bsr.w	CalcSine
0000905A 323C 0400                  		move.w	#$400,d1
0000905E C1C1                       		muls.w	d1,d0
00009060 4840                       		swap	d0
00009062 D068 002C                  		add.w	$2C(a0),d0
00009066 3140 000C                  		move.w	d0,$C(a0)
0000906A 4E75                       		rts	
0000906C                            ; End of function Obj18_Nudge
0000906C                            
0000906C                            ; ---------------------------------------------------------------------------
0000906C                            ; Subroutine to	move platforms
0000906C                            ; ---------------------------------------------------------------------------
0000906C                            
0000906C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000906C                            
0000906C                            
0000906C                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000906C 7000                       		moveq	#0,d0
0000906E 1028 0028                  		move.b	$28(a0),d0
00009072 0240 000F                  		andi.w	#$F,d0
00009076 D040                       		add.w	d0,d0
00009078 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000907C 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00009080                            ; End of function Obj18_Move
00009080                            
00009080                            ; ===========================================================================
00009080 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00009084 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00009088 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000908C 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00009090 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00009094 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00009098 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000909A                            ; ===========================================================================
0000909A                            
0000909A                            Obj18_Type00:
0000909A 4E75                       		rts			; platform 00 doesn't move
0000909C                            ; ===========================================================================
0000909C                            
0000909C                            Obj18_Type05:
0000909C 3028 0032                  		move.w	$32(a0),d0
000090A0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090A4 4401                       		neg.b	d1		; reverse platform-motion
000090A6 0601 0040                  		addi.b	#$40,d1
000090AA 6000                       		bra.s	Obj18_01_Move
000090AC                            ; ===========================================================================
000090AC                            
000090AC                            Obj18_Type01:
000090AC 3028 0032                  		move.w	$32(a0),d0
000090B0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090B4 0401 0040                  		subi.b	#$40,d1
000090B8                            
000090B8                            Obj18_01_Move:
000090B8 4881                       		ext.w	d1
000090BA D041                       		add.w	d1,d0
000090BC 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000090C0 6000 0000                  		bra.w	Obj18_ChgMotion
000090C4                            ; ===========================================================================
000090C4                            
000090C4                            Obj18_Type0C:
000090C4 3028 0034                  		move.w	$34(a0),d0
000090C8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000090CC 4401                       		neg.b	d1		; reverse platform-motion
000090CE 0601 0030                  		addi.b	#$30,d1
000090D2 6000                       		bra.s	Obj18_02_Move
000090D4                            ; ===========================================================================
000090D4                            
000090D4                            Obj18_Type0B:
000090D4 3028 0034                  		move.w	$34(a0),d0
000090D8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000090DC 0401 0030                  		subi.b	#$30,d1
000090E0 6000                       		bra.s	Obj18_02_Move
000090E2                            ; ===========================================================================
000090E2                            
000090E2                            Obj18_Type06:
000090E2 3028 0034                  		move.w	$34(a0),d0
000090E6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090EA 4401                       		neg.b	d1		; reverse platform-motion
000090EC 0601 0040                  		addi.b	#$40,d1
000090F0 6000                       		bra.s	Obj18_02_Move
000090F2                            ; ===========================================================================
000090F2                            
000090F2                            Obj18_Type02:
000090F2 3028 0034                  		move.w	$34(a0),d0
000090F6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090FA 0401 0040                  		subi.b	#$40,d1
000090FE                            
000090FE                            Obj18_02_Move:
000090FE 4881                       		ext.w	d1
00009100 D041                       		add.w	d1,d0
00009102 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009106 6000 0000                  		bra.w	Obj18_ChgMotion
0000910A                            ; ===========================================================================
0000910A                            
0000910A                            Obj18_Type03:
0000910A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000910E 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00009110 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00009116 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00009118 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000911E                            
0000911E                            Obj18_03_NoMove:
0000911E 4E75                       		rts	
00009120                            ; ===========================================================================
00009120                            
00009120                            Obj18_03_Wait:
00009120 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009124 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00009126 317C 0020 003A             		move.w	#32,$3A(a0)
0000912C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00009130 4E75                       		rts	
00009132                            ; ===========================================================================
00009132                            
00009132                            Obj18_Type04:
00009132 4A68 003A                  		tst.w	$3A(a0)
00009136 6700                       		beq.s	loc_8048
00009138 5368 003A                  		subq.w	#1,$3A(a0)
0000913C 6600                       		bne.s	loc_8048
0000913E 0828 0003 0022             		btst	#3,$22(a0)
00009144 6700                       		beq.s	loc_8042
00009146 08E9 0001 0022             		bset	#1,$22(a1)
0000914C 08A9 0003 0022             		bclr	#3,$22(a1)
00009152 137C 0002 0024             		move.b	#2,$24(a1)
00009158 08A8 0003 0022             		bclr	#3,$22(a0)
0000915E 4228 0025                  		clr.b	$25(a0)
00009162 3368 0012 0012             		move.w	$12(a0),$12(a1)
00009168                            
00009168                            loc_8042:
00009168 117C 0008 0024             		move.b	#8,$24(a0)
0000916E                            
0000916E                            loc_8048:
0000916E 2628 002C                  		move.l	$2C(a0),d3
00009172 3028 0012                  		move.w	$12(a0),d0
00009176 48C0                       		ext.l	d0
00009178 E180                       		asl.l	#8,d0
0000917A D680                       		add.l	d0,d3
0000917C 2143 002C                  		move.l	d3,$2C(a0)
00009180 0668 0038 0012             		addi.w	#$38,$12(a0)
00009186 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000918A 0640 00E0                  		addi.w	#$E0,d0
0000918E B068 002C                  		cmp.w	$2C(a0),d0
00009192 6400                       		bcc.s	locret_8074
00009194 117C 0006 0024             		move.b	#6,$24(a0)
0000919A                            
0000919A                            locret_8074:
0000919A 4E75                       		rts	
0000919C                            ; ===========================================================================
0000919C                            
0000919C                            Obj18_Type07:
0000919C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000091A0 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000091A2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000091A6 7000                       		moveq	#0,d0
000091A8 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000091AC E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000091AE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000091B2 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000091B4 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000091BA                            
000091BA                            Obj18_07_NoMove:
000091BA 4E75                       		rts	
000091BC                            ; ===========================================================================
000091BC                            
000091BC                            Obj18_07_Wait:
000091BC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000091C0 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000091C2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000091C6 4E75                       		rts	
000091C8                            ; ===========================================================================
000091C8                            
000091C8                            Obj18_Type08:
000091C8 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000091CC 3028 0034                  		move.w	$34(a0),d0
000091D0 0440 0200                  		subi.w	#$200,d0
000091D4 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000091D8 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000091DA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000091DE                            
000091DE                            Obj18_08_NoStop:
000091DE 4E75                       		rts	
000091E0                            ; ===========================================================================
000091E0                            
000091E0                            Obj18_Type0A:
000091E0 3028 0034                  		move.w	$34(a0),d0
000091E4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000091E8 0401 0040                  		subi.b	#$40,d1
000091EC 4881                       		ext.w	d1
000091EE E241                       		asr.w	#1,d1
000091F0 D041                       		add.w	d1,d0
000091F2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000091F6                            
000091F6                            Obj18_ChgMotion:
000091F6 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000091FC 4E75                       		rts	
000091FE                            ; ===========================================================================
000091FE                            
000091FE                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000091FE 3028 0032                  		move.w	$32(a0),d0
00009202 0240 FF80                  		andi.w	#$FF80,d0
00009206 3238 F700                  		move.w	($FFFFF700).w,d1
0000920A 0441 0080                  		subi.w	#$80,d1
0000920E 0241 FF80                  		andi.w	#$FF80,d1
00009212 9041                       		sub.w	d1,d0
00009214 0C40 0280                  		cmpi.w	#$280,d0
00009218 6300                       		bls.s	Obj18_NoDel
0000921A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000921E 6700                       		beq.s	Obj18_Delete		; if it's zero, don't remember object
00009220 3440                       		movea.w	d0,a2	; load address into a2
00009222 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009226 6000                       		bra.s	Obj18_Delete	; and delete object
00009228                            
00009228                            Obj18_NoDel:
00009228 4E75                       		rts	
0000922A                            ; ===========================================================================
0000922A                            
0000922A                            Obj18_Delete:				; XREF: Obj18_Index
0000922A 6000 0000                  		bra.w	DeleteObject
0000922E                            ; ===========================================================================
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            ; Sprite mappings - unused
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            Map_obj18x:
0000922E                            	include "_maps\obj18x.asm"
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            ; Sprite mappings - unused
0000922E                            ; ---------------------------------------------------------------------------
0000922E 0000                       		dc.w byte_80FE-Map_obj18x
00009230 0000                       		dc.w byte_8109-Map_obj18x
00009232 02                         byte_80FE:	dc.b 2
00009233 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009238 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000923D 0A                         byte_8109:	dc.b $A
0000923E F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009243 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009248 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000924D 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009252 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009257 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000925C 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009261 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009266 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000926B 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009270                            		even
00009270                            		even
00009270                            
00009270                            ; ---------------------------------------------------------------------------
00009270                            ; Sprite mappings - GHZ	platforms
00009270                            ; ---------------------------------------------------------------------------
00009270                            Map_obj18:
00009270                            	include "_maps\obj18ghz.asm"
00009270                            ; ---------------------------------------------------------------------------
00009270                            ; Sprite mappings - GHZ	platforms
00009270                            ; ---------------------------------------------------------------------------
00009270 0000                       		dc.w byte_8140-Map_obj18
00009272 0000                       		dc.w byte_8155-Map_obj18
00009274 04                         byte_8140:	dc.b 4
00009275 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000927A F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000927F F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009284 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009289 0A                         byte_8155:	dc.b $A
0000928A F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000928F 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009294 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009299 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000929E 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000092A3 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000092A8 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000092AD 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000092B2 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000092B7 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000092BC                            		even
000092BC                            		even
000092BC                            
000092BC                            ; ---------------------------------------------------------------------------
000092BC                            ; Sprite mappings - SYZ	platforms
000092BC                            ; ---------------------------------------------------------------------------
000092BC                            Map_obj18a:
000092BC                            	include "_maps\obj18syz.asm"
000092BC                            ; ---------------------------------------------------------------------------
000092BC                            ; Sprite mappings - SYZ	platforms
000092BC                            ; ---------------------------------------------------------------------------
000092BC 0000                       		dc.w byte_818A-Map_obj18a
000092BE 03                         byte_818A:	dc.b 3
000092BF F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000092C4 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000092C9 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000092CE                            		even
000092CE                            		even
000092CE                            
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            ; Sprite mappings - SLZ	platforms
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            Map_obj18b:
000092CE                            	include "_maps\obj18slz.asm"
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            ; Sprite mappings - SLZ	platforms
000092CE                            ; ---------------------------------------------------------------------------
000092CE 0000                       		dc.w byte_819C-Map_obj18b
000092D0 02                         byte_819C:	dc.b 2
000092D1 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000092D6 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000092DC 00                         		even
000092DC 00                         		even
000092DC                            
000092DC                            ; ===========================================================================
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            ; Object 19 - blank
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            
000092DC                            Obj19:					; XREF: Obj_Index
000092DC 4E75                       		rts	
000092DE                            ; ===========================================================================
000092DE                            ; ---------------------------------------------------------------------------
000092DE                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000092DE                            ; ---------------------------------------------------------------------------
000092DE                            Map_obj48:
000092DE                            	include "_maps\obj48.asm"
000092DE                            ; ---------------------------------------------------------------------------
000092DE                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000092DE                            ; ---------------------------------------------------------------------------
000092DE 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000092E2 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000092E6 06                         byte_81B2:	dc.b 6
000092E7 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000092EC F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000092F1 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000092F6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000092FB 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009300 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009305 04                         byte_81D1:	dc.b 4
00009306 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000930B E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009310 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009315 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000931A 04                         byte_81E6:	dc.b 4
0000931B E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009320 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009325 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000932A 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000932F 04                         byte_81FB:	dc.b 4
00009330 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009335 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000933A 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000933F 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009344                            		even
00009344                            		even
00009344                            
00009344                            ; ===========================================================================
00009344                            ; ---------------------------------------------------------------------------
00009344                            ; Object 1A - GHZ collapsing ledge
00009344                            ; ---------------------------------------------------------------------------
00009344                            
00009344                            Obj1A:					; XREF: Obj_Index
00009344 7000                       		moveq	#0,d0
00009346 1028 0024                  		move.b	$24(a0),d0
0000934A 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000934E 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00009352                            ; ===========================================================================
00009352 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00009356 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000935A 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000935E                            ; ===========================================================================
0000935E                            
0000935E                            Obj1A_Main:				; XREF: Obj1A_Index
0000935E 5428 0024                  		addq.b	#2,$24(a0)
00009362 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000936A 317C 4000 0002             		move.w	#$4000,2(a0)
00009370 0028 0004 0001             		ori.b	#4,1(a0)
00009376 117C 0004 0018             		move.b	#4,$18(a0)
0000937C 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00009382 117C 0064 0019             		move.b	#$64,$19(a0)
00009388 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000938E 117C 0038 0016             		move.b	#$38,$16(a0)
00009394 08E8 0004 0001             		bset	#4,1(a0)
0000939A                            
0000939A                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000939A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000939E 6700                       		beq.s	Obj1A_Slope	; if not, branch
000093A0 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000093A4 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000093A8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000093AC                            
000093AC                            Obj1A_Slope:
000093AC 323C 0030                  		move.w	#$30,d1
000093B0 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000093B6 6100 F22C                  		bsr.w	SlopeObject
000093BA 6000 0000                  		bra.w	MarkObjGone
000093BE                            ; ===========================================================================
000093BE                            
000093BE                            Obj1A_Touch:				; XREF: Obj1A_Index
000093BE 4A28 0038                  		tst.b	$38(a0)
000093C2 6700 0000                  		beq.w	loc_847A
000093C6 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000093CC 5328 0038                  		subq.b	#1,$38(a0)
000093D0                            
000093D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093D0                            
000093D0                            
000093D0                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000093D0 323C 0030                  		move.w	#$30,d1
000093D4 6100 F2AE                  		bsr.w	ExitPlatform
000093D8 323C 0030                  		move.w	#$30,d1
000093DC 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000093E2 3428 0008                  		move.w	8(a0),d2
000093E6 6100 0000                  		bsr.w	SlopeObject2
000093EA 6000 0000                  		bra.w	MarkObjGone
000093EE                            ; End of function Obj1A_WalkOff
000093EE                            
000093EE                            ; ===========================================================================
000093EE                            
000093EE                            Obj1A_Display:				; XREF: Obj1A_Index
000093EE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000093F2 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000093F4 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000093F8 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000093FC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009400 6000 0000                  		bra.w	DisplaySprite
00009404                            ; ===========================================================================
00009404                            
00009404                            loc_82D0:				; XREF: Obj1A_Display
00009404 5328 0038                  		subq.b	#1,$38(a0)
00009408 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000940C 43F8 D000                  		lea	($FFFFD000).w,a1
00009410 0829 0003 0022             		btst	#3,$22(a1)
00009416 6700                       		beq.s	loc_82FC
00009418 4A28 0038                  		tst.b	$38(a0)
0000941C 6600                       		bne.s	locret_8308
0000941E 08A9 0003 0022             		bclr	#3,$22(a1)
00009424 08A9 0005 0022             		bclr	#5,$22(a1)
0000942A 137C 0001 001D             		move.b	#1,$1D(a1)
00009430                            
00009430                            loc_82FC:
00009430 117C 0000 003A             		move.b	#0,$3A(a0)
00009436 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000943C                            
0000943C                            locret_8308:
0000943C 4E75                       		rts	
0000943E                            ; ===========================================================================
0000943E                            
0000943E                            Obj1A_TimeZero:				; XREF: Obj1A_Display
0000943E 6100 0000                  		bsr.w	ObjectFall
00009442 6100 0000                  		bsr.w	DisplaySprite
00009446 4A28 0001                  		tst.b	1(a0)
0000944A 6A00                       		bpl.s	Obj1A_Delete
0000944C 4E75                       		rts	
0000944E                            ; ===========================================================================
0000944E                            
0000944E                            Obj1A_Delete:				; XREF: Obj1A_Index
0000944E 6100 0000                  		bsr.w	DeleteObject
00009452 4E75                       		rts	
00009454                            ; ===========================================================================
00009454                            ; ---------------------------------------------------------------------------
00009454                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009454                            ; ---------------------------------------------------------------------------
00009454                            
00009454                            Obj53:					; XREF: Obj_Index
00009454 7000                       		moveq	#0,d0
00009456 1028 0024                  		move.b	$24(a0),d0
0000945A 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
0000945E 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00009462                            ; ===========================================================================
00009462 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00009466 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000946A 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000946E                            ; ===========================================================================
0000946E                            
0000946E                            Obj53_Main:				; XREF: Obj53_Index
0000946E 5428 0024                  		addq.b	#2,$24(a0)
00009472 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000947A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00009480 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00009486 6600                       		bne.s	Obj53_NotSLZ
00009488 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
0000948E 5428 001A                  		addq.b	#2,$1A(a0)
00009492                            
00009492                            Obj53_NotSLZ:
00009492 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00009498 6600                       		bne.s	Obj53_NotSBZ
0000949A 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000094A0                            
000094A0                            Obj53_NotSBZ:
000094A0 0028 0004 0001             		ori.b	#4,1(a0)
000094A6 117C 0004 0018             		move.b	#4,$18(a0)
000094AC 117C 0007 0038             		move.b	#7,$38(a0)
000094B2 117C 0044 0019             		move.b	#$44,$19(a0)
000094B8                            
000094B8                            Obj53_ChkTouch:				; XREF: Obj53_Index
000094B8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000094BC 6700                       		beq.s	Obj53_Solid	; if not, branch
000094BE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000094C2 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000094C6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000094CA                            
000094CA                            Obj53_Solid:
000094CA 323C 0020                  		move.w	#$20,d1
000094CE 6100 F040                  		bsr.w	PlatformObject
000094D2 4A28 0028                  		tst.b	$28(a0)
000094D6 6A00                       		bpl.s	Obj53_MarkAsGone
000094D8 0829 0003 0022             		btst	#3,$22(a1)
000094DE 6700                       		beq.s	Obj53_MarkAsGone
000094E0 08A8 0000 0001             		bclr	#0,1(a0)
000094E6 3029 0008                  		move.w	8(a1),d0
000094EA 9068 0008                  		sub.w	8(a0),d0
000094EE 6400                       		bcc.s	Obj53_MarkAsGone
000094F0 08E8 0000 0001             		bset	#0,1(a0)
000094F6                            
000094F6                            Obj53_MarkAsGone:
000094F6 6000 0000                  		bra.w	MarkObjGone
000094FA                            ; ===========================================================================
000094FA                            
000094FA                            Obj53_Touch:				; XREF: Obj53_Index
000094FA 4A28 0038                  		tst.b	$38(a0)
000094FE 6700 0000                  		beq.w	loc_8458
00009502 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009508 5328 0038                  		subq.b	#1,$38(a0)
0000950C                            
0000950C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000950C                            
0000950C                            
0000950C                            Obj53_WalkOff:				; XREF: Obj53_Index
0000950C 323C 0020                  		move.w	#$20,d1
00009510 6100 F172                  		bsr.w	ExitPlatform
00009514 3428 0008                  		move.w	8(a0),d2
00009518 6100 F6E0                  		bsr.w	MvSonicOnPtfm2
0000951C 6000 0000                  		bra.w	MarkObjGone
00009520                            ; End of function Obj53_WalkOff
00009520                            
00009520                            ; ===========================================================================
00009520                            
00009520                            Obj53_Display:				; XREF: Obj53_Index
00009520 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009524 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009526 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000952A 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000952E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009532 6000 0000                  		bra.w	DisplaySprite
00009536                            ; ===========================================================================
00009536                            
00009536                            loc_8402:
00009536 5328 0038                  		subq.b	#1,$38(a0)
0000953A 6100 FFD0                  		bsr.w	Obj53_WalkOff
0000953E 43F8 D000                  		lea	($FFFFD000).w,a1
00009542 0829 0003 0022             		btst	#3,$22(a1)
00009548 6700                       		beq.s	loc_842E
0000954A 4A28 0038                  		tst.b	$38(a0)
0000954E 6600                       		bne.s	locret_843A
00009550 08A9 0003 0022             		bclr	#3,$22(a1)
00009556 08A9 0005 0022             		bclr	#5,$22(a1)
0000955C 137C 0001 001D             		move.b	#1,$1D(a1)
00009562                            
00009562                            loc_842E:
00009562 117C 0000 003A             		move.b	#0,$3A(a0)
00009568 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
0000956E                            
0000956E                            locret_843A:
0000956E 4E75                       		rts	
00009570                            ; ===========================================================================
00009570                            
00009570                            Obj53_TimeZero:				; XREF: Obj53_Display
00009570 6100 0000                  		bsr.w	ObjectFall
00009574 6100 0000                  		bsr.w	DisplaySprite
00009578 4A28 0001                  		tst.b	1(a0)
0000957C 6A00                       		bpl.s	Obj53_Delete
0000957E 4E75                       		rts	
00009580                            ; ===========================================================================
00009580                            
00009580                            Obj53_Delete:				; XREF: Obj53_Index
00009580 6100 0000                  		bsr.w	DeleteObject
00009584 4E75                       		rts	
00009586                            ; ===========================================================================
00009586                            
00009586                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00009586 117C 0000 003A             		move.b	#0,$3A(a0)
0000958C                            
0000958C                            loc_8458:				; XREF: Obj53_Touch
0000958C 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00009592 0828 0000 0028             		btst	#0,$28(a0)
00009598 6700                       		beq.s	loc_846C
0000959A 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000095A0                            
000095A0                            loc_846C:
000095A0 7207                       		moveq	#7,d1
000095A2 5228 001A                  		addq.b	#1,$1A(a0)
000095A6 6000                       		bra.s	loc_8486
000095A8                            ; ===========================================================================
000095A8                            
000095A8                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000095A8 117C 0000 003A             		move.b	#0,$3A(a0)
000095AE                            
000095AE                            loc_847A:				; XREF: Obj1A_Touch
000095AE 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000095B4 7218                       		moveq	#$18,d1
000095B6 5428 001A                  		addq.b	#2,$1A(a0)
000095BA                            
000095BA                            loc_8486:				; XREF: Obj53_Collapse
000095BA 7000                       		moveq	#0,d0
000095BC 1028 001A                  		move.b	$1A(a0),d0
000095C0 D040                       		add.w	d0,d0
000095C2 2668 0004                  		movea.l	4(a0),a3
000095C6 D6F3 0000                  		adda.w	(a3,d0.w),a3
000095CA 524B                       		addq.w	#1,a3
000095CC 08E8 0005 0001             		bset	#5,1(a0)
000095D2 1810                       		move.b	0(a0),d4
000095D4 1A28 0001                  		move.b	1(a0),d5
000095D8 2248                       		movea.l	a0,a1
000095DA 6000                       		bra.s	loc_84B2
000095DC                            ; ===========================================================================
000095DC                            
000095DC                            loc_84AA:
000095DC 6100 0000                  		bsr.w	SingleObjLoad
000095E0 6600                       		bne.s	loc_84F2
000095E2 5A4B                       		addq.w	#5,a3
000095E4                            
000095E4                            loc_84B2:
000095E4 137C 0006 0024             		move.b	#6,$24(a1)
000095EA 1284                       		move.b	d4,0(a1)
000095EC 234B 0004                  		move.l	a3,4(a1)
000095F0 1345 0001                  		move.b	d5,1(a1)
000095F4 3368 0008 0008             		move.w	8(a0),8(a1)
000095FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009600 3368 0002 0002             		move.w	2(a0),2(a1)
00009606 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000960C 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009612 135C 0038                  		move.b	(a4)+,$38(a1)
00009616 B3C8                       		cmpa.l	a0,a1
00009618 6400                       		bcc.s	loc_84EE
0000961A 6100 0000                  		bsr.w	DisplaySprite2
0000961E                            
0000961E                            loc_84EE:
0000961E 51C9 FFBC                  		dbf	d1,loc_84AA
00009622                            
00009622                            loc_84F2:
00009622 6100 0000                  		bsr.w	DisplaySprite
00009626 303C 00B9                  		move.w	#$B9,d0
0000962A 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009630                            ; ===========================================================================
00009630                            ; ---------------------------------------------------------------------------
00009630                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009630                            ; ---------------------------------------------------------------------------
00009630 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009640 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000964A 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009652 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000965A                            
0000965A                            ; ---------------------------------------------------------------------------
0000965A                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000965A                            ; ---------------------------------------------------------------------------
0000965A                            
0000965A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000965A                            
0000965A                            
0000965A                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
0000965A 43F8 D000                  		lea	($FFFFD000).w,a1
0000965E 0829 0003 0022             		btst	#3,$22(a1)
00009664 6700                       		beq.s	locret_856E
00009666 3029 0008                  		move.w	8(a1),d0
0000966A 9068 0008                  		sub.w	8(a0),d0
0000966E D041                       		add.w	d1,d0
00009670 E248                       		lsr.w	#1,d0
00009672 0828 0000 0001             		btst	#0,1(a0)
00009678 6700                       		beq.s	loc_854E
0000967A 4640                       		not.w	d0
0000967C D041                       		add.w	d1,d0
0000967E                            
0000967E                            loc_854E:
0000967E 7200                       		moveq	#0,d1
00009680 1232 0000                  		move.b	(a2,d0.w),d1
00009684 3028 000C                  		move.w	$C(a0),d0
00009688 9041                       		sub.w	d1,d0
0000968A 7200                       		moveq	#0,d1
0000968C 1229 0016                  		move.b	$16(a1),d1
00009690 9041                       		sub.w	d1,d0
00009692 3340 000C                  		move.w	d0,$C(a1)
00009696 9468 0008                  		sub.w	8(a0),d2
0000969A 9569 0008                  		sub.w	d2,8(a1)
0000969E                            
0000969E                            locret_856E:
0000969E 4E75                       		rts	
000096A0                            ; End of function SlopeObject2
000096A0                            
000096A0                            ; ===========================================================================
000096A0                            ; ---------------------------------------------------------------------------
000096A0                            ; Collision data for GHZ collapsing ledge
000096A0                            ; ---------------------------------------------------------------------------
000096A0                            Obj1A_SlopeData:
000096A0                            		incbin	misc\ghzledge.bin
000096D0                            		even
000096D0                            
000096D0                            ; ---------------------------------------------------------------------------
000096D0                            ; Sprite mappings - GHZ	collapsing ledge
000096D0                            ; ---------------------------------------------------------------------------
000096D0                            Map_obj1A:
000096D0                            	include "_maps\obj1A.asm"
000096D0                            ; ---------------------------------------------------------------------------
000096D0                            ; Sprite mappings - GHZ	collapsing ledge
000096D0                            ; ---------------------------------------------------------------------------
000096D0 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000096D4 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000096D8 10                         byte_85A8:	dc.b $10
000096D9 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000096DE D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000096E3 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000096E8 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000096ED D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000096F2 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000096F7 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000096FC F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009701 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009706 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000970B 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009710 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009715 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000971A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000971F 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009724 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009729 10                         byte_85F9:	dc.b $10
0000972A C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000972F D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009734 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009739 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000973E D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009743 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009748 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000974D F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009752 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009757 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000975C 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009761 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009766 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000976B 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009770 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009775 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000977A 19                         byte_864A:	dc.b $19
0000977B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009780 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009785 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000978A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000978F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009794 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009799 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000979E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000097A3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000097A8 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000097AD F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000097B2 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000097B7 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000097BC F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000097C1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000097C6 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000097CB 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000097D0 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000097D5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000097DA 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000097DF 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000097E4 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000097E9 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000097EE 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000097F3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000097F8 19                         byte_86C8:	dc.b $19
000097F9 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000097FE C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009803 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009808 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000980D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009812 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009817 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000981C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009821 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009826 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000982B F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009830 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009835 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000983A F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000983F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009844 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009849 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000984E 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009853 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009858 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000985D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009862 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009867 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000986C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009871 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009876                            		even
00009876                            		even
00009876                            
00009876                            ; ---------------------------------------------------------------------------
00009876                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009876                            ; ---------------------------------------------------------------------------
00009876                            Map_obj53:
00009876                            	include "_maps\obj53.asm"
00009876                            ; ---------------------------------------------------------------------------
00009876                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009876                            ; ---------------------------------------------------------------------------
00009876 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000987A 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000987E 04                         byte_874E:	dc.b 4
0000987F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00009884 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00009889 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000988E 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00009893 08                         byte_8763:	dc.b 8
00009894 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009899 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000989E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000098A3 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000098A8 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
000098AD 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
000098B2 0805 0000 00               		dc.b 8,	5, 0, 0, 0
000098B7 0805 0000 10               		dc.b 8,	5, 0, 0, $10
000098BC 04                         byte_878C:	dc.b 4
000098BD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
000098C2 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
000098C7 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000098CC 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
000098D1 08                         byte_87A1:	dc.b 8
000098D2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000098D7 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000098DC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000098E1 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000098E6 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000098EB 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000098F0 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000098F5 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000098FA                            		even
000098FA                            		even
000098FA                            
000098FA                            ; ===========================================================================
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            
000098FA                            Obj1C:					; XREF: Obj_Index
000098FA 7000                       		moveq	#0,d0
000098FC 1028 0024                  		move.b	$24(a0),d0
00009900 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009904 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009908                            ; ===========================================================================
00009908 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000990A 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000990C                            ; ===========================================================================
0000990C                            
0000990C                            Obj1C_Main:				; XREF: Obj1C_Index
0000990C 5428 0024                  		addq.b	#2,$24(a0)
00009910 7000                       		moveq	#0,d0
00009912 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009916 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000991A 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000991E 2159 0004                  		move.l	(a1)+,4(a0)
00009922 3159 0002                  		move.w	(a1)+,2(a0)
00009926 0028 0004 0001             		ori.b	#4,1(a0)
0000992C 1159 001A                  		move.b	(a1)+,$1A(a0)
00009930 1159 0019                  		move.b	(a1)+,$19(a0)
00009934 1159 0018                  		move.b	(a1)+,$18(a0)
00009938 1159 0020                  		move.b	(a1)+,$20(a0)
0000993C                            
0000993C                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000993C 3028 0008                  		move.w	8(a0),d0
00009940 0240 FF80                  		andi.w	#$FF80,d0
00009944 3238 F700                  		move.w	($FFFFF700).w,d1
00009948 0441 0080                  		subi.w	#$80,d1
0000994C 0241 FF80                  		andi.w	#$FF80,d1
00009950 9041                       		sub.w	d1,d0
00009952 0C40 0280                  		cmpi.w	#$280,d0
00009956 6300 0000                  		bls.w	DisplaySprite
0000995A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000995E 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
00009962 3440                       		movea.w	d0,a2	; load address into a2
00009964 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009968 6000 0000                  		bra.w	DeleteObject	; and delete object
0000996C                            ; ===========================================================================
0000996C                            ; ---------------------------------------------------------------------------
0000996C                            ; Variables for	object $1C are stored in an array
0000996C                            ; ---------------------------------------------------------------------------
0000996C 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00009970 44D8                       		dc.w $44D8		; VRAM setting
00009972 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009976 0000 0000                  		dc.l Map_obj1C
0000997A 44D8                       		dc.w $44D8
0000997C 0008 0200                  		dc.b 0,	8, 2, 0
00009980 0000 0000                  		dc.l Map_obj1C
00009984 44D8                       		dc.w $44D8
00009986 0008 0200                  		dc.b 0,	8, 2, 0
0000998A 0000 8A04                  		dc.l Map_obj11
0000998E 438E                       		dc.w $438E
00009990 0110 0100                  		dc.b 1,	$10, 1,	0
00009994 0000 0000                  		dc.l Map_obj1C
00009998 4000                       		dc.w $4000
0000999A 0110 0000                  		dc.b 1,	$10, 0, 0
0000999E 0000 0000                  		dc.l Map_obj1C
000099A2 4000                       		dc.w $4000
000099A4 0210 0000                  		dc.b 2,	$10, 0, 0
000099A8 0000 0000                  		dc.l Map_obj1C
000099AC 4000                       		dc.w $4000
000099AE 0310 0000                  		dc.b 3,	$10, 0, 0
000099B2 0000 0000                  		dc.l Map_obj1C
000099B6 4000                       		dc.w $4000
000099B8 0460 0700                  		dc.b 4,	$60, 7, 0
000099BC                            ; ---------------------------------------------------------------------------
000099BC                            ; Sprite mappings - SLZ	lava thrower
000099BC                            ; ---------------------------------------------------------------------------
000099BC                            Map_obj1C:
000099BC                            	include "_maps\obj1C.asm"
000099BC                            Mappings:
000099BC 0000                       Mappings_0: 	dc.w Mappings_A-Mappings
000099BE 0000                       Mappings_2: 	dc.w Mappings_10-Mappings
000099C0 0000                       Mappings_4: 	dc.w Mappings_16-Mappings
000099C2 0000                       Mappings_6: 	dc.w Mappings_1C-Mappings
000099C4 0000                       Mappings_8: 	dc.w Mappings_22-Mappings
000099C6 01                         Mappings_A: 	dc.b $1
000099C7 F007 0000 F8               	dc.b $F0, $7, $0, $0, $F8
000099CC 01                         Mappings_10: 	dc.b $1
000099CD F00F 0001 F0               	dc.b $F0, $F, $0, $1, $F0
000099D2 01                         Mappings_16: 	dc.b $1
000099D3 F00F 0011 F0               	dc.b $F0, $F, $0, $11, $F0
000099D8 01                         Mappings_1C: 	dc.b $1
000099D9 F00F 0042 F0               	dc.b $F0, $F, $0, $42, $F0
000099DE 18                         Mappings_22: 	dc.b $18
000099DF E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
000099E4 E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
000099E9 E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
000099EE E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
000099F3 E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
000099F8 E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
000099FD 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009A02 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009A07 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009A0C 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009A11 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009A16 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009A1B 200F 01C6 A0               	dc.b $20, $F, $1, $C6, $A0
00009A20 200F 01D6 C0               	dc.b $20, $F, $1, $D6, $C0
00009A25 200F 09D6 E0               	dc.b $20, $F, $9, $D6, $E0
00009A2A 200F 01E6 00               	dc.b $20, $F, $1, $E6, $0
00009A2F 200F 09C6 20               	dc.b $20, $F, $9, $C6, $20
00009A34 200F 01F6 40               	dc.b $20, $F, $1, $F6, $40
00009A39 C00F 01CA A0               	dc.b $C0, $F, $1, $CA, $A0
00009A3E C00F 01D6 C0               	dc.b $C0, $F, $1, $D6, $C0
00009A43 C00F 09D6 E0               	dc.b $C0, $F, $9, $D6, $E0
00009A48 C00F 09CA 00               	dc.b $C0, $F, $9, $CA, $0
00009A4D C00F 01E6 20               	dc.b $C0, $F, $1, $E6, $20
00009A52 C00F 01F6 40               	dc.b $C0, $F, $1, $F6, $40
00009A58 00                         	even
00009A58 00                         	even
00009A58                            
00009A58                            ; ===========================================================================
00009A58                            ; ---------------------------------------------------------------------------
00009A58                            ; Object 1D - switch that activates when Sonic touches it
00009A58                            ; (this	is not used anywhere in	the game)
00009A58                            ; ---------------------------------------------------------------------------
00009A58                            
00009A58                            Obj1D:					; XREF: Obj_Index
00009A58 7000                       		moveq	#0,d0
00009A5A 1028 0024                  		move.b	$24(a0),d0
00009A5E 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009A62 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009A66                            ; ===========================================================================
00009A66 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009A68 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009A6A 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009A6C                            ; ===========================================================================
00009A6C                            
00009A6C                            Obj1D_Main:				; XREF: Obj1D_Index
00009A6C 5428 0024                  		addq.b	#2,$24(a0)
00009A70 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009A78 317C 4000 0002             		move.w	#$4000,2(a0)
00009A7E 117C 0004 0001             		move.b	#4,1(a0)
00009A84 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009A8A 117C 0010 0019             		move.b	#$10,$19(a0)
00009A90 117C 0005 0018             		move.b	#5,$18(a0)
00009A96                            
00009A96                            Obj1D_Action:				; XREF: Obj1D_Index
00009A96 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009A9C 323C 0010                  		move.w	#$10,d1
00009AA0 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009AA4 6700                       		beq.s	Obj1D_ChkDel
00009AA6 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009AAA 7001                       		moveq	#1,d0
00009AAC 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009AB0                            
00009AB0                            Obj1D_ChkDel:
00009AB0 6100 0000                  		bsr.w	DisplaySprite
00009AB4 3028 0008                  		move.w	8(a0),d0
00009AB8 0240 FF80                  		andi.w	#$FF80,d0
00009ABC 3238 F700                  		move.w	($FFFFF700).w,d1
00009AC0 0441 0080                  		subi.w	#$80,d1
00009AC4 0241 FF80                  		andi.w	#$FF80,d1
00009AC8 9041                       		sub.w	d1,d0
00009ACA 0C40 0280                  		cmpi.w	#$280,d0
00009ACE 6300                       		bls.s	Obj1D_NoDel
00009AD0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009AD4 6700                       		beq.s	Obj1D_Delete		; if it's zero, don't remember object
00009AD6 3440                       		movea.w	d0,a2	; load address into a2
00009AD8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009ADC 6000                       		bra.s	Obj1D_Delete	; and delete object
00009ADE                            
00009ADE                            Obj1D_NoDel:
00009ADE 4E75                       		rts	
00009AE0                            ; ===========================================================================
00009AE0                            
00009AE0                            Obj1D_Delete:				; XREF: Obj1D_Index
00009AE0 6100 0000                  		bsr.w	DeleteObject
00009AE4 4E75                       		rts	
00009AE6                            ; ---------------------------------------------------------------------------
00009AE6                            ; Subroutine to	check if Sonic touches the object
00009AE6                            ; ---------------------------------------------------------------------------
00009AE6                            
00009AE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009AE6                            
00009AE6                            
00009AE6                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009AE6 43F8 D000                  		lea	($FFFFD000).w,a1
00009AEA 3029 0008                  		move.w	8(a1),d0
00009AEE 9068 0008                  		sub.w	8(a0),d0
00009AF2 D041                       		add.w	d1,d0
00009AF4 6B00                       		bmi.s	loc_8918
00009AF6 D241                       		add.w	d1,d1
00009AF8 B041                       		cmp.w	d1,d0
00009AFA 6400                       		bcc.s	loc_8918
00009AFC 3429 000C                  		move.w	$C(a1),d2
00009B00 1229 0016                  		move.b	$16(a1),d1
00009B04 4881                       		ext.w	d1
00009B06 D242                       		add.w	d2,d1
00009B08 3028 000C                  		move.w	$C(a0),d0
00009B0C 0440 0010                  		subi.w	#$10,d0
00009B10 9041                       		sub.w	d1,d0
00009B12 6200                       		bhi.s	loc_8918
00009B14 0C40 FFF0                  		cmpi.w	#-$10,d0
00009B18 6500                       		bcs.s	loc_8918
00009B1A 70FF                       		moveq	#-1,d0
00009B1C 4E75                       		rts	
00009B1E                            ; ===========================================================================
00009B1E                            
00009B1E                            loc_8918:
00009B1E 7000                       		moveq	#0,d0
00009B20 4E75                       		rts	
00009B22                            ; End of function Obj1D_ChkTouch
00009B22                            
00009B22                            ; ===========================================================================
00009B22                            ; ---------------------------------------------------------------------------
00009B22                            ; Sprite mappings - object 1D
00009B22                            ; ---------------------------------------------------------------------------
00009B22                            Map_obj1D:
00009B22                            	include "_maps\obj1D.asm"
00009B22                            ; ---------------------------------------------------------------------------
00009B22                            ; Sprite mappings - object 1D
00009B22                            ; ---------------------------------------------------------------------------
00009B22 0000                       		dc.w byte_891E-Map_obj1D
00009B24 04                         byte_891E:	dc.b 4
00009B25 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009B2A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009B2F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009B34 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009B3A 00                         		even
00009B3A 00                         		even
00009B3A                            
00009B3A                            ; ===========================================================================
00009B3A                            ; ---------------------------------------------------------------------------
00009B3A                            ; Object 2A - doors (SBZ)
00009B3A                            ; ---------------------------------------------------------------------------
00009B3A                            
00009B3A                            Obj2A:					; XREF: Obj_Index
00009B3A 7000                       		moveq	#0,d0
00009B3C 1028 0024                  		move.b	$24(a0),d0
00009B40 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009B44 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009B48                            ; ===========================================================================
00009B48 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009B4A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009B4C                            ; ===========================================================================
00009B4C                            
00009B4C                            Obj2A_Main:				; XREF: Obj2A_Index
00009B4C 5428 0024                  		addq.b	#2,$24(a0)
00009B50 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009B58 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009B5E 0028 0004 0001             		ori.b	#4,1(a0)
00009B64 117C 0008 0019             		move.b	#8,$19(a0)
00009B6A 117C 0004 0018             		move.b	#4,$18(a0)
00009B70                            
00009B70                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009B70 323C 0040                  		move.w	#$40,d1
00009B74 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009B78 3038 D008                  		move.w	($FFFFD008).w,d0
00009B7C D041                       		add.w	d1,d0
00009B7E B068 0008                  		cmp.w	8(a0),d0
00009B82 6500                       		bcs.s	Obj2A_Animate
00009B84 9041                       		sub.w	d1,d0
00009B86 9041                       		sub.w	d1,d0
00009B88 B068 0008                  		cmp.w	8(a0),d0
00009B8C 6400                       		bcc.s	Obj2A_Animate
00009B8E D041                       		add.w	d1,d0
00009B90 B068 0008                  		cmp.w	8(a0),d0
00009B94 6400                       		bcc.s	loc_899A
00009B96 0828 0000 0022             		btst	#0,$22(a0)
00009B9C 6600                       		bne.s	Obj2A_Animate
00009B9E 6000                       		bra.s	Obj2A_Open
00009BA0                            ; ===========================================================================
00009BA0                            
00009BA0                            loc_899A:				; XREF: Obj2A_OpenShut
00009BA0 0828 0000 0022             		btst	#0,$22(a0)
00009BA6 6700                       		beq.s	Obj2A_Animate
00009BA8                            
00009BA8                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009BA8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009BAE                            
00009BAE                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009BAE 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009BB4 6100 0000                  		bsr.w	AnimateSprite
00009BB8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009BBC 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009BBE 323C 0011                  		move.w	#$11,d1
00009BC2 343C 0020                  		move.w	#$20,d2
00009BC6 3602                       		move.w	d2,d3
00009BC8 5243                       		addq.w	#1,d3
00009BCA 3828 0008                  		move.w	8(a0),d4
00009BCE 6100 0000                  		bsr.w	SolidObject
00009BD2                            
00009BD2                            Obj2A_MarkAsUsed:
00009BD2 6000 0000                  		bra.w	MarkObjGone
00009BD6                            ; ===========================================================================
00009BD6                            Ani_obj2A:
00009BD6                            	include "_anim\obj2A.asm"
00009BD6                            ; ---------------------------------------------------------------------------
00009BD6                            ; Animation script - doors (SBZ)
00009BD6                            ; ---------------------------------------------------------------------------
00009BD6 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009BD8 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009BDA 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009BE6 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009BF2                            		even
00009BF2                            		even
00009BF2                            
00009BF2                            ; ---------------------------------------------------------------------------
00009BF2                            ; Sprite mappings - doors (SBZ)
00009BF2                            ; ---------------------------------------------------------------------------
00009BF2                            Map_obj2A:
00009BF2                            	include "_maps\obj2A.asm"
00009BF2                            ; ---------------------------------------------------------------------------
00009BF2                            ; Sprite mappings - doors (SBZ)
00009BF2                            ; ---------------------------------------------------------------------------
00009BF2 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009BF6 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009BFA 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009BFE 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009C02 0000                       		dc.w byte_8A56-Map_obj2A
00009C04 02                         byte_89FE:	dc.b 2
00009C05 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009C0A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009C0F 02                         byte_8A09:	dc.b 2
00009C10 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009C15 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009C1A 02                         byte_8A14:	dc.b 2
00009C1B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009C20 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009C25 02                         byte_8A1F:	dc.b 2
00009C26 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009C2B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009C30 02                         byte_8A2A:	dc.b 2
00009C31 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009C36 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009C3B 02                         byte_8A35:	dc.b 2
00009C3C CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009C41 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009C46 02                         byte_8A40:	dc.b 2
00009C47 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009C4C 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009C51 02                         byte_8A4B:	dc.b 2
00009C52 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009C57 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009C5C 02                         byte_8A56:	dc.b 2
00009C5D C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009C62 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009C68 00                         		even
00009C68 00                         		even
00009C68                            
00009C68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C68                            
00009C68                            
00009C68                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009C68 6100 0000                  		bsr.w	Obj44_SolidWall2
00009C6C 6700                       		beq.s	loc_8AA8
00009C6E 6B00 0000                  		bmi.w	loc_8AC4
00009C72 4A40                       		tst.w	d0
00009C74 6700 0000                  		beq.w	loc_8A92
00009C78 6B00                       		bmi.s	loc_8A7C
00009C7A 4A69 0010                  		tst.w	$10(a1)
00009C7E 6B00                       		bmi.s	loc_8A92
00009C80 6000                       		bra.s	loc_8A82
00009C82                            ; ===========================================================================
00009C82                            
00009C82                            loc_8A7C:
00009C82 4A69 0010                  		tst.w	$10(a1)
00009C86 6A00                       		bpl.s	loc_8A92
00009C88                            
00009C88                            loc_8A82:
00009C88 9169 0008                  		sub.w	d0,8(a1)
00009C8C 337C 0000 0020             		move.w	#0,$20(a1)
00009C92 337C 0000 0010             		move.w	#0,$10(a1)
00009C98                            
00009C98                            loc_8A92:
00009C98 0829 0001 0022             		btst	#1,$22(a1)
00009C9E 6600                       		bne.s	loc_8AB6
00009CA0 08E9 0005 0022             		bset	#5,$22(a1)
00009CA6 08E8 0005 0022             		bset	#5,$22(a0)
00009CAC 4E75                       		rts	
00009CAE                            ; ===========================================================================
00009CAE                            
00009CAE                            loc_8AA8:
00009CAE 0828 0005 0022             		btst	#5,$22(a0)
00009CB4 6700                       		beq.s	locret_8AC2
00009CB6 337C 0001 001C             		move.w	#1,$1C(a1)
00009CBC                            
00009CBC                            loc_8AB6:
00009CBC 08A8 0005 0022             		bclr	#5,$22(a0)
00009CC2 08A9 0005 0022             		bclr	#5,$22(a1)
00009CC8                            
00009CC8                            locret_8AC2:
00009CC8 4E75                       		rts	
00009CCA                            ; ===========================================================================
00009CCA                            
00009CCA                            loc_8AC4:
00009CCA 4A69 0012                  		tst.w	$12(a1)
00009CCE 6A00                       		bpl.s	locret_8AD8
00009CD0 4A43                       		tst.w	d3
00009CD2 6A00                       		bpl.s	locret_8AD8
00009CD4 9769 000C                  		sub.w	d3,$C(a1)
00009CD8 337C 0000 0012             		move.w	#0,$12(a1)
00009CDE                            
00009CDE                            locret_8AD8:
00009CDE 4E75                       		rts	
00009CE0                            ; End of function Obj44_SolidWall
00009CE0                            
00009CE0                            
00009CE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CE0                            
00009CE0                            
00009CE0                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009CE0 43F8 D000                  		lea	($FFFFD000).w,a1
00009CE4 3029 0008                  		move.w	8(a1),d0
00009CE8 9068 0008                  		sub.w	8(a0),d0
00009CEC D041                       		add.w	d1,d0
00009CEE 6B00                       		bmi.s	loc_8B48
00009CF0 3601                       		move.w	d1,d3
00009CF2 D643                       		add.w	d3,d3
00009CF4 B043                       		cmp.w	d3,d0
00009CF6 6200                       		bhi.s	loc_8B48
00009CF8 1629 0016                  		move.b	$16(a1),d3
00009CFC 4883                       		ext.w	d3
00009CFE D443                       		add.w	d3,d2
00009D00 3629 000C                  		move.w	$C(a1),d3
00009D04 9668 000C                  		sub.w	$C(a0),d3
00009D08 D642                       		add.w	d2,d3
00009D0A 6B00                       		bmi.s	loc_8B48
00009D0C 3802                       		move.w	d2,d4
00009D0E D844                       		add.w	d4,d4
00009D10 B644                       		cmp.w	d4,d3
00009D12 6400                       		bcc.s	loc_8B48
00009D14 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009D18 6B00                       		bmi.s	loc_8B48
00009D1A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009D20 6400                       		bcc.s	loc_8B48
00009D22 4A78 FE08                  		tst.w	($FFFFFE08).w
00009D26 6600                       		bne.s	loc_8B48
00009D28 3A00                       		move.w	d0,d5
00009D2A B240                       		cmp.w	d0,d1
00009D2C 6400                       		bcc.s	loc_8B30
00009D2E D241                       		add.w	d1,d1
00009D30 9041                       		sub.w	d1,d0
00009D32 3A00                       		move.w	d0,d5
00009D34 4445                       		neg.w	d5
00009D36                            
00009D36                            loc_8B30:
00009D36 3203                       		move.w	d3,d1
00009D38 B443                       		cmp.w	d3,d2
00009D3A 6400                       		bcc.s	loc_8B3C
00009D3C 9644                       		sub.w	d4,d3
00009D3E 3203                       		move.w	d3,d1
00009D40 4441                       		neg.w	d1
00009D42                            
00009D42                            loc_8B3C:
00009D42 BA41                       		cmp.w	d1,d5
00009D44 6200                       		bhi.s	loc_8B44
00009D46 7801                       		moveq	#1,d4
00009D48 4E75                       		rts	
00009D4A                            ; ===========================================================================
00009D4A                            
00009D4A                            loc_8B44:
00009D4A 78FF                       		moveq	#-1,d4
00009D4C 4E75                       		rts	
00009D4E                            ; ===========================================================================
00009D4E                            
00009D4E                            loc_8B48:
00009D4E 7800                       		moveq	#0,d4
00009D50 4E75                       		rts	
00009D52                            ; End of function Obj44_SolidWall2
00009D52                            
00009D52                            ; ===========================================================================
00009D52                            ; ---------------------------------------------------------------------------
00009D52                            ; Object 1E - Ball Hog enemy (SBZ)
00009D52                            ; ---------------------------------------------------------------------------
00009D52                            
00009D52                            Obj1E:					; XREF: Obj_Index
00009D52 7000                       		moveq	#0,d0
00009D54 1028 0024                  		move.b	$24(a0),d0
00009D58 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009D5C 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009D60                            ; ===========================================================================
00009D60 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009D62 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009D64                            ; ===========================================================================
00009D64                            
00009D64                            Obj1E_Main:				; XREF: Obj1E_Index
00009D64 117C 0013 0016             		move.b	#$13,$16(a0)
00009D6A 117C 0008 0017             		move.b	#8,$17(a0)
00009D70 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009D78 317C 2302 0002             		move.w	#$2302,2(a0)
00009D7E 117C 0004 0001             		move.b	#4,1(a0)
00009D84 117C 0004 0018             		move.b	#4,$18(a0)
00009D8A 117C 0005 0020             		move.b	#5,$20(a0)
00009D90 117C 000C 0019             		move.b	#$C,$19(a0)
00009D96 6100 0000                  		bsr.w	ObjectFall
00009D9A 4EB9 0000 0000             		jsr	ObjHitFloor
00009DA0 4A41                       		tst.w	d1
00009DA2 6A00                       		bpl.s	locret_8BAC
00009DA4 D368 000C                  		add.w	d1,$C(a0)
00009DA8 317C 0000 0012             		move.w	#0,$12(a0)
00009DAE 5428 0024                  		addq.b	#2,$24(a0)
00009DB2                            
00009DB2                            locret_8BAC:
00009DB2 4E75                       		rts	
00009DB4                            ; ===========================================================================
00009DB4                            
00009DB4                            Obj1E_Action:				; XREF: Obj1E_Index
00009DB4 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009DBA 6100 0000                  		bsr.w	AnimateSprite
00009DBE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009DC4 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009DC6 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009DCA 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009DCC 6000                       		bra.s	Obj1E_MarkAsGone
00009DCE                            ; ===========================================================================
00009DCE                            
00009DCE                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009DCE 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009DD2                            
00009DD2                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009DD2 6000 0000                  		bra.w	MarkObjGone
00009DD6                            ; ===========================================================================
00009DD6                            
00009DD6                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009DD6 117C 0001 0032             		move.b	#1,$32(a0)
00009DDC 6100 0000                  		bsr.w	SingleObjLoad
00009DE0 6600                       		bne.s	loc_8C1A
00009DE2 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009DE6 3368 0008 0008             		move.w	8(a0),8(a1)
00009DEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009DF2 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009DF8 337C 0000 0012             		move.w	#0,$12(a1)
00009DFE 70FC                       		moveq	#-4,d0
00009E00 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009E06 6700                       		beq.s	loc_8C0A	; if not, branch
00009E08 4440                       		neg.w	d0
00009E0A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009E0E                            
00009E0E                            loc_8C0A:
00009E0E D169 0008                  		add.w	d0,8(a1)
00009E12 0669 000C 000C             		addi.w	#$C,$C(a1)
00009E18 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009E1E                            
00009E1E                            loc_8C1A:
00009E1E 60B2                       		bra.s	Obj1E_MarkAsGone
00009E20                            ; ===========================================================================
00009E20                            ; ---------------------------------------------------------------------------
00009E20                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009E20                            ; ---------------------------------------------------------------------------
00009E20                            
00009E20                            Obj20:					; XREF: Obj_Index
00009E20 7000                       		moveq	#0,d0
00009E22 1028 0024                  		move.b	$24(a0),d0
00009E26 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009E2A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009E2E                            ; ===========================================================================
00009E2E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009E30 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009E32                            ; ===========================================================================
00009E32                            
00009E32                            Obj20_Main:				; XREF: Obj20_Index
00009E32 5428 0024                  		addq.b	#2,$24(a0)
00009E36 117C 0007 0016             		move.b	#7,$16(a0)
00009E3C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009E44 317C 2302 0002             		move.w	#$2302,2(a0)
00009E4A 117C 0004 0001             		move.b	#4,1(a0)
00009E50 117C 0003 0018             		move.b	#3,$18(a0)
00009E56 117C 0087 0020             		move.b	#$87,$20(a0)
00009E5C 117C 0008 0019             		move.b	#8,$19(a0)
00009E62 7000                       		moveq	#0,d0
00009E64 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009E68 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009E6C 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009E70 117C 0004 001A             		move.b	#4,$1A(a0)
00009E76                            
00009E76                            Obj20_Bounce:				; XREF: Obj20_Index
00009E76 4EB9 0000 0000             		jsr	ObjectFall
00009E7C 4A68 0012                  		tst.w	$12(a0)
00009E80 6B00                       		bmi.s	Obj20_ChkExplode
00009E82 4EB9 0000 0000             		jsr	ObjHitFloor
00009E88 4A41                       		tst.w	d1
00009E8A 6A00                       		bpl.s	Obj20_ChkExplode
00009E8C D368 000C                  		add.w	d1,$C(a0)
00009E90 317C FD00 0012             		move.w	#-$300,$12(a0)
00009E96 4A03                       		tst.b	d3
00009E98 6700                       		beq.s	Obj20_ChkExplode
00009E9A 6B00                       		bmi.s	loc_8CA4
00009E9C 4A68 0010                  		tst.w	$10(a0)
00009EA0 6A00                       		bpl.s	Obj20_ChkExplode
00009EA2 4468 0010                  		neg.w	$10(a0)
00009EA6 6000                       		bra.s	Obj20_ChkExplode
00009EA8                            ; ===========================================================================
00009EA8                            
00009EA8                            loc_8CA4:				; XREF: Obj20_Bounce
00009EA8 4A68 0010                  		tst.w	$10(a0)
00009EAC 6B00                       		bmi.s	Obj20_ChkExplode
00009EAE 4468 0010                  		neg.w	$10(a0)
00009EB2                            
00009EB2                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009EB2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009EB6 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009EB8 10BC 0024                  		move.b	#$24,0(a0)
00009EBC 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009EC0 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009EC6 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009ECA                            ; ===========================================================================
00009ECA                            
00009ECA                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009ECA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009ECE 6A00                       		bpl.s	Obj20_Display
00009ED0 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009ED6 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009EDC                            
00009EDC                            Obj20_Display:
00009EDC 6100 0000                  		bsr.w	DisplaySprite
00009EE0 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009EE4 0640 00E0                  		addi.w	#$E0,d0
00009EE8 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009EEC 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009EF0 4E75                       		rts	
00009EF2                            ; ===========================================================================
00009EF2                            ; ---------------------------------------------------------------------------
00009EF2                            ; Object 24 - explosion	from a destroyed monitor
00009EF2                            ; ---------------------------------------------------------------------------
00009EF2                            
00009EF2                            Obj24:					; XREF: Obj_Index
00009EF2 7000                       		moveq	#0,d0
00009EF4 1028 0024                  		move.b	$24(a0),d0
00009EF8 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009EFC 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009F00                            ; ===========================================================================
00009F00 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009F02 0000                       		dc.w Obj24_Animate-Obj24_Index
00009F04                            ; ===========================================================================
00009F04                            
00009F04                            Obj24_Main:				; XREF: Obj24_Index
00009F04 5428 0024                  		addq.b	#2,$24(a0)
00009F08 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009F10 317C 041C 0002             		move.w	#$41C,2(a0)
00009F16 117C 0004 0001             		move.b	#4,1(a0)
00009F1C 117C 0001 0018             		move.b	#1,$18(a0)
00009F22 117C 0000 0020             		move.b	#0,$20(a0)
00009F28 117C 000C 0019             		move.b	#$C,$19(a0)
00009F2E 117C 0009 001E             		move.b	#9,$1E(a0)
00009F34 117C 0000 001A             		move.b	#0,$1A(a0)
00009F3A 303C 00A5                  		move.w	#$A5,d0
00009F3E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play explosion sound
00009F44                            
00009F44                            Obj24_Animate:				; XREF: Obj24_Index
00009F44 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009F48 6A00                       		bpl.s	Obj24_Display
00009F4A 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009F50 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009F54 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009F5A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009F5E                            
00009F5E                            Obj24_Display:
00009F5E 6000 0000                  		bra.w	DisplaySprite
00009F62                            ; ===========================================================================
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            ; Object 27 - explosion	from a destroyed enemy
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            
00009F62                            Obj27:					; XREF: Obj_Index
00009F62 7000                       		moveq	#0,d0
00009F64 1028 0024                  		move.b	$24(a0),d0
00009F68 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009F6C 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009F70                            ; ===========================================================================
00009F70 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009F72 0000                       		dc.w Obj27_Main-Obj27_Index
00009F74 0000                       		dc.w Obj27_Animate-Obj27_Index
00009F76                            ; ===========================================================================
00009F76                            
00009F76                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009F76 5428 0024                  		addq.b	#2,$24(a0)
00009F7A 6100 0000                  		bsr.w	SingleObjLoad
00009F7E 6600                       		bne.s	Obj27_Main
00009F80 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009F84 3368 0008 0008             		move.w	8(a0),8(a1)
00009F8A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F90 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009F96                            
00009F96                            Obj27_Main:				; XREF: Obj27_Index
00009F96 5428 0024                  		addq.b	#2,$24(a0)
00009F9A 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009FA2 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009FA8 117C 0004 0001             		move.b	#4,1(a0)
00009FAE 117C 0001 0018             		move.b	#1,$18(a0)
00009FB4 117C 0000 0020             		move.b	#0,$20(a0)
00009FBA 117C 000C 0019             		move.b	#$C,$19(a0)
00009FC0 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009FC6 117C 0000 001A             		move.b	#0,$1A(a0)
00009FCC 303C 00C1                  		move.w	#$C1,d0
00009FD0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009FD6                            
00009FD6                            Obj27_Animate:				; XREF: Obj27_Index
00009FD6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009FDA 6A00                       		bpl.s	Obj27_Display
00009FDC 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009FE2 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009FE6 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009FEC 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009FF0                            
00009FF0                            Obj27_Display:
00009FF0 6000 0000                  		bra.w	DisplaySprite
00009FF4                            ; ===========================================================================
00009FF4                            ; ---------------------------------------------------------------------------
00009FF4                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009FF4                            ; ---------------------------------------------------------------------------
00009FF4                            
00009FF4                            Obj3F:					; XREF: Obj_Index
00009FF4 7000                       		moveq	#0,d0
00009FF6 1028 0024                  		move.b	$24(a0),d0
00009FFA 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009FFE 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A002                            ; ===========================================================================
0000A002 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A004 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A006                            ; ===========================================================================
0000A006                            
0000A006                            Obj3F_Main:				; XREF: Obj3F_Index
0000A006 5428 0024                  		addq.b	#2,$24(a0)
0000A00A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A012 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A018 117C 0004 0001             		move.b	#4,1(a0)
0000A01E 117C 0001 0018             		move.b	#1,$18(a0)
0000A024 117C 0000 0020             		move.b	#0,$20(a0)
0000A02A 117C 000C 0019             		move.b	#$C,$19(a0)
0000A030 117C 0007 001E             		move.b	#7,$1E(a0)
0000A036 117C 0000 001A             		move.b	#0,$1A(a0)
0000A03C 303C 00C4                  		move.w	#$C4,d0
0000A040 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A046                            ; ===========================================================================
0000A046                            Ani_obj1E:
0000A046                            	include "_anim\obj1E.asm"
0000A046                            ; ---------------------------------------------------------------------------
0000A046                            ; Animation script - doors (SBZ)
0000A046                            ; ---------------------------------------------------------------------------
0000A046 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A048 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A060 00                         		even
0000A060 00                         		even
0000A060                            
0000A060                            ; ---------------------------------------------------------------------------
0000A060                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A060                            ; ---------------------------------------------------------------------------
0000A060                            Map_obj1E:
0000A060                            	include "_maps\obj1E.asm"
0000A060                            ; ---------------------------------------------------------------------------
0000A060                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A060                            ; ---------------------------------------------------------------------------
0000A060 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A064 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A068 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A06C 02                         byte_8E6E:	dc.b 2
0000A06D EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A072 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A077 02                         byte_8E79:	dc.b 2
0000A078 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A07D FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A082 02                         byte_8E84:	dc.b 2
0000A083 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A088 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A08D 02                         byte_8E8F:	dc.b 2
0000A08E E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A093 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A098 01                         byte_8E9A:	dc.b 1
0000A099 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A09E 01                         byte_8EA0:	dc.b 1
0000A09F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A0A4                            		even
0000A0A4                            		even
0000A0A4                            
0000A0A4                            ; ---------------------------------------------------------------------------
0000A0A4                            ; Sprite mappings - explosion
0000A0A4                            ; ---------------------------------------------------------------------------
0000A0A4                            Map_obj24:
0000A0A4                            	include "_maps\obj24.asm"
0000A0A4                            ; ---------------------------------------------------------------------------
0000A0A4                            ; Sprite mappings - explosion
0000A0A4                            ; ---------------------------------------------------------------------------
0000A0A4 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A0A8 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A0AC 01                         byte_8EAE:	dc.b 1
0000A0AD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A0B2 01                         byte_8EB4:	dc.b 1
0000A0B3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A0B8 01                         byte_8EBA:	dc.b 1
0000A0B9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A0BE 01                         byte_8EC0:	dc.b 1
0000A0BF F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A0C4                            		even
0000A0C4                            		even
0000A0C4                            
0000A0C4                            ; ---------------------------------------------------------------------------
0000A0C4                            ; Sprite mappings - explosion
0000A0C4                            ; ---------------------------------------------------------------------------
0000A0C4 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A0C8 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A0CC 0000                       		dc.w byte_8EF7-Map_obj27
0000A0CE 01                         byte_8ED0:	dc.b 1
0000A0CF F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A0D4 01                         byte_8ED6:	dc.b 1
0000A0D5 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A0DA 01                         byte_8EDC:	dc.b 1
0000A0DB F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A0E0 04                         byte_8EE2:	dc.b 4
0000A0E1 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A0E6 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A0EB 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A0F0 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A0F5 04                         byte_8EF7:	dc.b 4
0000A0F6 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A0FB EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A100 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A105 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A10A                            		even
0000A10A                            ; ---------------------------------------------------------------------------
0000A10A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A10A                            ; ---------------------------------------------------------------------------
0000A10A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A10C 0000                       		dc.w byte_8F16-Map_obj3F
0000A10E 0000                       		dc.w byte_8F1C-Map_obj3F
0000A110 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A112 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A114 01                         byte_8F16:	dc.b 1
0000A115 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A11A 01                         byte_8F1C:	dc.b 1
0000A11B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A120                            		even
0000A120                            ; ===========================================================================
0000A120                            ; ---------------------------------------------------------------------------
0000A120                            ; Object 28 - animals
0000A120                            ; ---------------------------------------------------------------------------
0000A120                            
0000A120                            Obj28:					; XREF: Obj_Index
0000A120 7000                       		moveq	#0,d0
0000A122 1028 0024                  		move.b	$24(a0),d0
0000A126 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A12A 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A12E                            ; ===========================================================================
0000A12E 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A132 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A136 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A13A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A13E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A142 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A146 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A14A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A14E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A152 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A156 0000                       		dc.w loc_92D6-Obj28_Index
0000A158                            
0000A158 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A164                            
0000A164 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A168 0000 0000                  		dc.l Map_obj28
0000A16C FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A170 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A174 FE80 FD00                  		dc.w $FE80, $FD00
0000A178 0000 0000                  		dc.l Map_obj28
0000A17C FEC0 FE80                  		dc.w $FEC0, $FE80
0000A180 0000 0000                  		dc.l Map_obj28a
0000A184 FE40 FD00                  		dc.w $FE40, $FD00
0000A188 0000 0000                  		dc.l Map_obj28b
0000A18C FD00 FC00                  		dc.w $FD00, $FC00
0000A190 0000 0000                  		dc.l Map_obj28a
0000A194 FD80 FC80                  		dc.w $FD80, $FC80
0000A198 0000 0000                  		dc.l Map_obj28b
0000A19C                            
0000A19C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A1AC FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A1BC FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A1C8                            
0000A1C8 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A1DC 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A1F0 0000 0000                  		dc.l Map_obj28b
0000A1F4                            
0000A1F4 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A206 0565 05B3                  		dc.w $565, $5B3
0000A20A                            ; ===========================================================================
0000A20A                            
0000A20A                            Obj28_Ending:				; XREF: Obj28_Index
0000A20A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A20E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A212 7000                       		moveq	#0,d0
0000A214 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A218 D040                       		add.w	d0,d0		; multiply d0 by 2
0000A21A 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A21E 0440 0014                  		subi.w	#$14,d0
0000A222 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A228 D040                       		add.w	d0,d0
0000A22A 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A230 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A234 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A23A 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A240 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A246 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A24C 117C 000C 0016             		move.b	#$C,$16(a0)
0000A252 117C 0004 0001             		move.b	#4,1(a0)
0000A258 08E8 0000 0001             		bset	#0,1(a0)
0000A25E 117C 0006 0018             		move.b	#6,$18(a0)
0000A264 117C 0008 0019             		move.b	#8,$19(a0)
0000A26A 117C 0007 001E             		move.b	#7,$1E(a0)
0000A270 6000 0000                  		bra.w	DisplaySprite
0000A274                            ; ===========================================================================
0000A274                            
0000A274                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A274 5428 0024                  		addq.b	#2,$24(a0)
0000A278 6100 872C                  		bsr.w	RandomNumber
0000A27C 0240 0001                  		andi.w	#1,d0
0000A280 7200                       		moveq	#0,d1
0000A282 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A286 D241                       		add.w	d1,d1
0000A288 D240                       		add.w	d0,d1
0000A28A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000A28E 1031 1000                  		move.b	(a1,d1.w),d0
0000A292 1140 0030                  		move.b	d0,$30(a0)
0000A296 E748                       		lsl.w	#3,d0
0000A298 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A29C D2C0                       		adda.w	d0,a1
0000A29E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A2A2 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A2A6 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A2AA 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A2B0 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A2B6 6700                       		beq.s	loc_90C0	; if yes, branch
0000A2B8 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A2BE                            
0000A2BE                            loc_90C0:
0000A2BE 117C 000C 0016             		move.b	#$C,$16(a0)
0000A2C4 117C 0004 0001             		move.b	#4,1(a0)
0000A2CA 08E8 0000 0001             		bset	#0,1(a0)
0000A2D0 117C 0006 0018             		move.b	#6,$18(a0)
0000A2D6 117C 0008 0019             		move.b	#8,$19(a0)
0000A2DC 117C 0007 001E             		move.b	#7,$1E(a0)
0000A2E2 117C 0002 001A             		move.b	#2,$1A(a0)
0000A2E8 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A2EE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A2F2 6600                       		bne.s	loc_911C
0000A2F4 6100 0000                  		bsr.w	SingleObjLoad
0000A2F8 6600                       		bne.s	Obj28_Display
0000A2FA 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000A2FE 3368 0008 0008             		move.w	8(a0),8(a1)
0000A304 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A30A 3028 003E                  		move.w	$3E(a0),d0
0000A30E E248                       		lsr.w	#1,d0
0000A310 1340 001A                  		move.b	d0,$1A(a1)
0000A314                            
0000A314                            Obj28_Display:
0000A314 6000 0000                  		bra.w	DisplaySprite
0000A318                            ; ===========================================================================
0000A318                            
0000A318                            loc_911C:
0000A318 117C 0012 0024             		move.b	#$12,$24(a0)
0000A31E 4268 0010                  		clr.w	$10(a0)
0000A322 6000 0000                  		bra.w	DisplaySprite
0000A326                            ; ===========================================================================
0000A326                            
0000A326                            loc_912A:				; XREF: Obj28_Index
0000A326 4A28 0001                  		tst.b	1(a0)
0000A32A 6A00 0000                  		bpl.w	DeleteObject
0000A32E 6100 0000                  		bsr.w	ObjectFall
0000A332 4A68 0012                  		tst.w	$12(a0)
0000A336 6B00                       		bmi.s	loc_9180
0000A338 4EB9 0000 0000             		jsr	ObjHitFloor
0000A33E 4A41                       		tst.w	d1
0000A340 6A00                       		bpl.s	loc_9180
0000A342 D368 000C                  		add.w	d1,$C(a0)
0000A346 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A34C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A352 117C 0001 001A             		move.b	#1,$1A(a0)
0000A358 1028 0030                  		move.b	$30(a0),d0
0000A35C D000                       		add.b	d0,d0
0000A35E 5800                       		addq.b	#4,d0
0000A360 1140 0024                  		move.b	d0,$24(a0)
0000A364 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A368 6700                       		beq.s	loc_9180
0000A36A 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A370 6700                       		beq.s	loc_9180
0000A372 4468 0010                  		neg.w	$10(a0)
0000A376 0868 0000 0001             		bchg	#0,1(a0)
0000A37C                            
0000A37C                            loc_9180:
0000A37C 6000 0000                  		bra.w	DisplaySprite
0000A380                            ; ===========================================================================
0000A380                            
0000A380                            loc_9184:				; XREF: Obj28_Index
0000A380 6100 0000                  		bsr.w	ObjectFall
0000A384 117C 0001 001A             		move.b	#1,$1A(a0)
0000A38A 4A68 0012                  		tst.w	$12(a0)
0000A38E 6B00                       		bmi.s	loc_91AE
0000A390 117C 0000 001A             		move.b	#0,$1A(a0)
0000A396 4EB9 0000 0000             		jsr	ObjHitFloor
0000A39C 4A41                       		tst.w	d1
0000A39E 6A00                       		bpl.s	loc_91AE
0000A3A0 D368 000C                  		add.w	d1,$C(a0)
0000A3A4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A3AA                            
0000A3AA                            loc_91AE:
0000A3AA 4A28 0028                  		tst.b	$28(a0)
0000A3AE 6600                       		bne.s	loc_9224
0000A3B0 4A28 0001                  		tst.b	1(a0)
0000A3B4 6A00 0000                  		bpl.w	DeleteObject
0000A3B8 6000 0000                  		bra.w	DisplaySprite
0000A3BC                            ; ===========================================================================
0000A3BC                            
0000A3BC                            loc_91C0:				; XREF: Obj28_Index
0000A3BC 6100 0000                  		bsr.w	SpeedToPos
0000A3C0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A3C6 4A68 0012                  		tst.w	$12(a0)
0000A3CA 6B00                       		bmi.s	loc_91FC
0000A3CC 4EB9 0000 0000             		jsr	ObjHitFloor
0000A3D2 4A41                       		tst.w	d1
0000A3D4 6A00                       		bpl.s	loc_91FC
0000A3D6 D368 000C                  		add.w	d1,$C(a0)
0000A3DA 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A3E0 4A28 0028                  		tst.b	$28(a0)
0000A3E4 6700                       		beq.s	loc_91FC
0000A3E6 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A3EC 6700                       		beq.s	loc_91FC
0000A3EE 4468 0010                  		neg.w	$10(a0)
0000A3F2 0868 0000 0001             		bchg	#0,1(a0)
0000A3F8                            
0000A3F8                            loc_91FC:
0000A3F8 5328 001E                  		subq.b	#1,$1E(a0)
0000A3FC 6A00                       		bpl.s	loc_9212
0000A3FE 117C 0001 001E             		move.b	#1,$1E(a0)
0000A404 5228 001A                  		addq.b	#1,$1A(a0)
0000A408 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A40E                            
0000A40E                            loc_9212:
0000A40E 4A28 0028                  		tst.b	$28(a0)
0000A412 6600                       		bne.s	loc_9224
0000A414 4A28 0001                  		tst.b	1(a0)
0000A418 6A00 0000                  		bpl.w	DeleteObject
0000A41C 6000 0000                  		bra.w	DisplaySprite
0000A420                            ; ===========================================================================
0000A420                            
0000A420                            loc_9224:				; XREF: Obj28_Index
0000A420 3028 0008                  		move.w	8(a0),d0
0000A424 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A428 6500                       		bcs.s	loc_923C
0000A42A 0440 0180                  		subi.w	#$180,d0
0000A42E 6A00                       		bpl.s	loc_923C
0000A430 4A28 0001                  		tst.b	1(a0)
0000A434 6A00 0000                  		bpl.w	DeleteObject
0000A438                            
0000A438                            loc_923C:
0000A438 6000 0000                  		bra.w	DisplaySprite
0000A43C                            ; ===========================================================================
0000A43C                            
0000A43C                            loc_9240:				; XREF: Obj28_Index
0000A43C 4A28 0001                  		tst.b	1(a0)
0000A440 6A00 0000                  		bpl.w	DeleteObject
0000A444 5368 0036                  		subq.w	#1,$36(a0)
0000A448 6600 0000                  		bne.w	loc_925C
0000A44C 117C 0002 0024             		move.b	#2,$24(a0)
0000A452 117C 0003 0018             		move.b	#3,$18(a0)
0000A458                            
0000A458                            loc_925C:
0000A458 6000 0000                  		bra.w	DisplaySprite
0000A45C                            ; ===========================================================================
0000A45C                            
0000A45C                            loc_9260:				; XREF: Obj28_Index
0000A45C 6100 0000                  		bsr.w	sub_9404
0000A460 6400                       		bcc.s	loc_927C
0000A462 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A468 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A46E 117C 000E 0024             		move.b	#$E,$24(a0)
0000A474 6000 FF46                  		bra.w	loc_91C0
0000A478                            ; ===========================================================================
0000A478                            
0000A478                            loc_927C:
0000A478 6000 FFA6                  		bra.w	loc_9224
0000A47C                            ; ===========================================================================
0000A47C                            
0000A47C                            loc_9280:				; XREF: Obj28_Index
0000A47C 6100 0000                  		bsr.w	sub_9404
0000A480 6A00                       		bpl.s	loc_92B6
0000A482 4268 0010                  		clr.w	$10(a0)
0000A486 4268 0032                  		clr.w	$32(a0)
0000A48A 6100 0000                  		bsr.w	SpeedToPos
0000A48E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A494 6100 0000                  		bsr.w	loc_93C4
0000A498 6100 0000                  		bsr.w	loc_93EC
0000A49C 5328 001E                  		subq.b	#1,$1E(a0)
0000A4A0 6A00                       		bpl.s	loc_92B6
0000A4A2 117C 0001 001E             		move.b	#1,$1E(a0)
0000A4A8 5228 001A                  		addq.b	#1,$1A(a0)
0000A4AC 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A4B2                            
0000A4B2                            loc_92B6:
0000A4B2 6000 FF6C                  		bra.w	loc_9224
0000A4B6                            ; ===========================================================================
0000A4B6                            
0000A4B6                            loc_92BA:				; XREF: Obj28_Index
0000A4B6 6100 0000                  		bsr.w	sub_9404
0000A4BA 6A00                       		bpl.s	loc_9310
0000A4BC 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A4C2 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A4C8 117C 0004 0024             		move.b	#4,$24(a0)
0000A4CE 6000 FEB0                  		bra.w	loc_9184
0000A4D2                            ; ===========================================================================
0000A4D2                            
0000A4D2                            loc_92D6:				; XREF: Obj28_Index
0000A4D2 6100 0000                  		bsr.w	ObjectFall
0000A4D6 117C 0001 001A             		move.b	#1,$1A(a0)
0000A4DC 4A68 0012                  		tst.w	$12(a0)
0000A4E0 6B00                       		bmi.s	loc_9310
0000A4E2 117C 0000 001A             		move.b	#0,$1A(a0)
0000A4E8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A4EE 4A41                       		tst.w	d1
0000A4F0 6A00                       		bpl.s	loc_9310
0000A4F2 4628 0029                  		not.b	$29(a0)
0000A4F6 6600                       		bne.s	loc_9306
0000A4F8 4468 0010                  		neg.w	$10(a0)
0000A4FC 0868 0000 0001             		bchg	#0,1(a0)
0000A502                            
0000A502                            loc_9306:
0000A502 D368 000C                  		add.w	d1,$C(a0)
0000A506 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A50C                            
0000A50C                            loc_9310:
0000A50C 6000 FF12                  		bra.w	loc_9224
0000A510                            ; ===========================================================================
0000A510                            
0000A510                            loc_9314:				; XREF: Obj28_Index
0000A510 6100 0000                  		bsr.w	sub_9404
0000A514 6A00                       		bpl.s	loc_932E
0000A516 4268 0010                  		clr.w	$10(a0)
0000A51A 4268 0032                  		clr.w	$32(a0)
0000A51E 6100 0000                  		bsr.w	ObjectFall
0000A522 6100 0000                  		bsr.w	loc_93C4
0000A526 6100 0000                  		bsr.w	loc_93EC
0000A52A                            
0000A52A                            loc_932E:
0000A52A 6000 FEF4                  		bra.w	loc_9224
0000A52E                            ; ===========================================================================
0000A52E                            
0000A52E                            loc_9332:				; XREF: Obj28_Index
0000A52E 6100 0000                  		bsr.w	sub_9404
0000A532 6A00                       		bpl.s	loc_936C
0000A534 6100 0000                  		bsr.w	ObjectFall
0000A538 117C 0001 001A             		move.b	#1,$1A(a0)
0000A53E 4A68 0012                  		tst.w	$12(a0)
0000A542 6B00                       		bmi.s	loc_936C
0000A544 117C 0000 001A             		move.b	#0,$1A(a0)
0000A54A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A550 4A41                       		tst.w	d1
0000A552 6A00                       		bpl.s	loc_936C
0000A554 4468 0010                  		neg.w	$10(a0)
0000A558 0868 0000 0001             		bchg	#0,1(a0)
0000A55E D368 000C                  		add.w	d1,$C(a0)
0000A562 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A568                            
0000A568                            loc_936C:
0000A568 6000 FEB6                  		bra.w	loc_9224
0000A56C                            ; ===========================================================================
0000A56C                            
0000A56C                            loc_9370:				; XREF: Obj28_Index
0000A56C 6100 0000                  		bsr.w	sub_9404
0000A570 6A00                       		bpl.s	loc_93C0
0000A572 6100 0000                  		bsr.w	SpeedToPos
0000A576 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A57C 4A68 0012                  		tst.w	$12(a0)
0000A580 6B00                       		bmi.s	loc_93AA
0000A582 4EB9 0000 0000             		jsr	ObjHitFloor
0000A588 4A41                       		tst.w	d1
0000A58A 6A00                       		bpl.s	loc_93AA
0000A58C 4628 0029                  		not.b	$29(a0)
0000A590 6600                       		bne.s	loc_93A0
0000A592 4468 0010                  		neg.w	$10(a0)
0000A596 0868 0000 0001             		bchg	#0,1(a0)
0000A59C                            
0000A59C                            loc_93A0:
0000A59C D368 000C                  		add.w	d1,$C(a0)
0000A5A0 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A5A6                            
0000A5A6                            loc_93AA:
0000A5A6 5328 001E                  		subq.b	#1,$1E(a0)
0000A5AA 6A00                       		bpl.s	loc_93C0
0000A5AC 117C 0001 001E             		move.b	#1,$1E(a0)
0000A5B2 5228 001A                  		addq.b	#1,$1A(a0)
0000A5B6 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A5BC                            
0000A5BC                            loc_93C0:
0000A5BC 6000 FE62                  		bra.w	loc_9224
0000A5C0                            ; ===========================================================================
0000A5C0                            
0000A5C0                            loc_93C4:
0000A5C0 117C 0001 001A             		move.b	#1,$1A(a0)
0000A5C6 4A68 0012                  		tst.w	$12(a0)
0000A5CA 6B00                       		bmi.s	locret_93EA
0000A5CC 117C 0000 001A             		move.b	#0,$1A(a0)
0000A5D2 4EB9 0000 0000             		jsr	ObjHitFloor
0000A5D8 4A41                       		tst.w	d1
0000A5DA 6A00                       		bpl.s	locret_93EA
0000A5DC D368 000C                  		add.w	d1,$C(a0)
0000A5E0 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A5E6                            
0000A5E6                            locret_93EA:
0000A5E6 4E75                       		rts	
0000A5E8                            ; ===========================================================================
0000A5E8                            
0000A5E8                            loc_93EC:
0000A5E8 08E8 0000 0001             		bset	#0,1(a0)
0000A5EE 3028 0008                  		move.w	8(a0),d0
0000A5F2 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A5F6 6400                       		bcc.s	locret_9402
0000A5F8 08A8 0000 0001             		bclr	#0,1(a0)
0000A5FE                            
0000A5FE                            locret_9402:
0000A5FE 4E75                       		rts	
0000A600                            
0000A600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A600                            
0000A600                            
0000A600                            sub_9404:
0000A600 3038 D008                  		move.w	($FFFFD008).w,d0
0000A604 9068 0008                  		sub.w	8(a0),d0
0000A608 0440 00B8                  		subi.w	#$B8,d0
0000A60C 4E75                       		rts	
0000A60E                            ; End of function sub_9404
0000A60E                            
0000A60E                            ; ===========================================================================
0000A60E                            ; ---------------------------------------------------------------------------
0000A60E                            ; Object 29 - points that appear when you destroy something
0000A60E                            ; ---------------------------------------------------------------------------
0000A60E                            
0000A60E                            Obj29:					; XREF: Obj_Index
0000A60E 7000                       		moveq	#0,d0
0000A610 1028 0024                  		move.b	$24(a0),d0
0000A614 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000A618 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000A61C 6000 0000                  		bra.w	DisplaySprite
0000A620                            ; ===========================================================================
0000A620 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000A622 0000                       		dc.w Obj29_Slower-Obj29_Index
0000A624                            ; ===========================================================================
0000A624                            
0000A624                            Obj29_Main:				; XREF: Obj29_Index
0000A624 5428 0024                  		addq.b	#2,$24(a0)
0000A628 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000A630 317C 2568 0002             		move.w	#($2000+pointsart),2(a0)
0000A636 117C 0004 0001             		move.b	#4,1(a0)
0000A63C 117C 0001 0018             		move.b	#1,$18(a0)
0000A642 117C 0008 0019             		move.b	#8,$19(a0)
0000A648 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000A64E                            
0000A64E                            Obj29_Slower:				; XREF: Obj29_Index
0000A64E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A652 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000A656 6100 0000                  		bsr.w	SpeedToPos
0000A65A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A660 4E75                       		rts	
0000A662                            ; ===========================================================================
0000A662                            ; ---------------------------------------------------------------------------
0000A662                            ; Sprite mappings - animals
0000A662                            ; ---------------------------------------------------------------------------
0000A662                            Map_obj28:
0000A662                            	include "_maps\obj28.asm"
0000A662                            ; ---------------------------------------------------------------------------
0000A662                            ; Sprite mappings - animals
0000A662                            ; ---------------------------------------------------------------------------
0000A662 0000                       		dc.w byte_9472-Map_obj28
0000A664 0000                       		dc.w byte_9478-Map_obj28
0000A666 0000                       		dc.w byte_946C-Map_obj28
0000A668 01                         byte_946C:	dc.b 1
0000A669 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A66E 01                         byte_9472:	dc.b 1
0000A66F F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000A674 01                         byte_9478:	dc.b 1
0000A675 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000A67A                            		even
0000A67A                            		even
0000A67A                            
0000A67A                            Map_obj28a:
0000A67A                            	include "_maps\obj28a.asm"
0000A67A                            ; ---------------------------------------------------------------------------
0000A67A                            ; Sprite mappings - animals
0000A67A                            ; ---------------------------------------------------------------------------
0000A67A 0000                       		dc.w byte_948A-Map_obj28a
0000A67C 0000                       		dc.w byte_9490-Map_obj28a
0000A67E 0000                       		dc.w byte_9484-Map_obj28a
0000A680 01                         byte_9484:	dc.b 1
0000A681 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A686 01                         byte_948A:	dc.b 1
0000A687 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000A68C 01                         byte_9490:	dc.b 1
0000A68D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000A692                            		even
0000A692                            		even
0000A692                            
0000A692                            Map_obj28b:
0000A692                            	include "_maps\obj28b.asm"
0000A692                            ; ---------------------------------------------------------------------------
0000A692                            ; Sprite mappings - animals
0000A692                            ; ---------------------------------------------------------------------------
0000A692 0000                       		dc.w byte_94A2-Map_obj28b
0000A694 0000                       		dc.w byte_94A8-Map_obj28b
0000A696 0000                       		dc.w byte_949C-Map_obj28b
0000A698 01                         byte_949C:	dc.b 1
0000A699 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A69E 01                         byte_94A2:	dc.b 1
0000A69F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000A6A4 01                         byte_94A8:	dc.b 1
0000A6A5 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000A6AA                            		even
0000A6AA                            		even
0000A6AA                            
0000A6AA                            ; ---------------------------------------------------------------------------
0000A6AA                            ; Sprite mappings - points that	appear when you	destroy	something
0000A6AA                            ; ---------------------------------------------------------------------------
0000A6AA                            Map_obj29:
0000A6AA                            	include "_maps\obj29.asm"
0000A6AA                            ; ---------------------------------------------------------------------------
0000A6AA                            ; Sprite mappings - points that	appear when you	destroy	something
0000A6AA                            ; ---------------------------------------------------------------------------
0000A6AA 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000A6AE 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000A6B2 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A6B6 0000                       		dc.w byte_94E5-Map_obj29
0000A6B8 01                         byte_94BC:	dc.b 1
0000A6B9 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A6BE 01                         byte_94C2:	dc.b 1
0000A6BF FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A6C4 01                         byte_94C8:	dc.b 1
0000A6C5 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A6CA 01                         byte_94CE:	dc.b 1
0000A6CB FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A6D0 01                         byte_94D4:	dc.b 1
0000A6D1 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A6D6 02                         byte_94DA:	dc.b 2
0000A6D7 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A6DC FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A6E1 02                         byte_94E5:	dc.b 2
0000A6E2 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A6E7 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A6EC                            		even
0000A6EC                            		even
0000A6EC                            
0000A6EC                            ; ===========================================================================
0000A6EC                            ; ---------------------------------------------------------------------------
0000A6EC                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A6EC                            ; ---------------------------------------------------------------------------
0000A6EC                            
0000A6EC                            Obj1F:					; XREF: Obj_Index
0000A6EC 7000                       		moveq	#0,d0
0000A6EE 1028 0024                  		move.b	$24(a0),d0
0000A6F2 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A6F6 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A6FA                            ; ===========================================================================
0000A6FA 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A6FC 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A6FE 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A700 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A702 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A704                            ; ===========================================================================
0000A704                            
0000A704                            Obj1F_Main:				; XREF: Obj1F_Index
0000A704 117C 0010 0016             		move.b	#$10,$16(a0)
0000A70A 117C 0008 0017             		move.b	#8,$17(a0)
0000A710 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A718 317C 0400 0002             		move.w	#$400,2(a0)
0000A71E 117C 0004 0001             		move.b	#4,1(a0)
0000A724 117C 0003 0018             		move.b	#3,$18(a0)
0000A72A 117C 0006 0020             		move.b	#6,$20(a0)
0000A730 117C 0015 0019             		move.b	#$15,$19(a0)
0000A736 6100 0000                  		bsr.w	ObjectFall
0000A73A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A740 4A41                       		tst.w	d1
0000A742 6A00                       		bpl.s	locret_955A
0000A744 D368 000C                  		add.w	d1,$C(a0)
0000A748 1143 0026                  		move.b	d3,$26(a0)
0000A74C 317C 0000 0012             		move.w	#0,$12(a0)
0000A752 5428 0024                  		addq.b	#2,$24(a0)
0000A756                            
0000A756                            locret_955A:
0000A756 4E75                       		rts	
0000A758                            ; ===========================================================================
0000A758                            
0000A758                            Obj1F_Action:				; XREF: Obj1F_Index
0000A758 7000                       		moveq	#0,d0
0000A75A 1028 0025                  		move.b	$25(a0),d0
0000A75E 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A762 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A766 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A76C 6100 0000                  		bsr.w	AnimateSprite
0000A770 6000 0000                  		bra.w	MarkObjGone
0000A774                            ; ===========================================================================
0000A774 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A776 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A778                            ; ===========================================================================
0000A778                            
0000A778                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A778 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A77C 6A00                       		bpl.s	locret_95B6
0000A77E 4A28 0001                  		tst.b	1(a0)
0000A782 6A00                       		bpl.s	Obj1F_Move
0000A784 0868 0001 0032             		bchg	#1,$32(a0)
0000A78A 6600                       		bne.s	Obj1F_MakeFire
0000A78C                            
0000A78C                            Obj1F_Move:
0000A78C 5428 0025                  		addq.b	#2,$25(a0)
0000A790 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A796 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A79C 6100 0000                  		bsr.w	Obj1F_SetAni
0000A7A0 5600                       		addq.b	#3,d0
0000A7A2 1140 001C                  		move.b	d0,$1C(a0)
0000A7A6 0868 0000 0022             		bchg	#0,$22(a0)
0000A7AC 6600                       		bne.s	locret_95B6
0000A7AE 4468 0010                  		neg.w	$10(a0)		; change direction
0000A7B2                            
0000A7B2                            locret_95B6:
0000A7B2 4E75                       		rts	
0000A7B4                            ; ===========================================================================
0000A7B4                            
0000A7B4                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A7B4 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A7BA 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A7C0 6100 0000                  		bsr.w	SingleObjLoad
0000A7C4 6600                       		bne.s	Obj1F_MakeFire2
0000A7C6 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A7CA 137C 0006 0024             		move.b	#6,$24(a1)
0000A7D0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A7D6 0469 0010 0008             		subi.w	#$10,8(a1)
0000A7DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A7E2 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A7E8                            
0000A7E8                            Obj1F_MakeFire2:
0000A7E8 6100 0000                  		bsr.w	SingleObjLoad
0000A7EC 6600                       		bne.s	locret_9618
0000A7EE 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A7F2 137C 0006 0024             		move.b	#6,$24(a1)
0000A7F8 3368 0008 0008             		move.w	8(a0),8(a1)
0000A7FE 0669 0010 0008             		addi.w	#$10,8(a1)
0000A804 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A80A 337C 0100 0010             		move.w	#$100,$10(a1)
0000A810                            
0000A810                            locret_9618:
0000A810 4E75                       		rts	
0000A812                            ; ===========================================================================
0000A812                            
0000A812                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A812 5368 0030                  		subq.w	#1,$30(a0)
0000A816 6B00                       		bmi.s	loc_966E
0000A818 6100 0000                  		bsr.w	SpeedToPos
0000A81C 0868 0000 0032             		bchg	#0,$32(a0)
0000A822 6600                       		bne.s	loc_9654
0000A824 3628 0008                  		move.w	8(a0),d3
0000A828 0643 0010                  		addi.w	#$10,d3
0000A82C 0828 0000 0022             		btst	#0,$22(a0)
0000A832 6700                       		beq.s	loc_9640
0000A834 0443 0020                  		subi.w	#$20,d3
0000A838                            
0000A838                            loc_9640:
0000A838 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A83E 0C41 FFF8                  		cmpi.w	#-8,d1
0000A842 6D00                       		blt.s	loc_966E
0000A844 0C41 000C                  		cmpi.w	#$C,d1
0000A848 6C00                       		bge.s	loc_966E
0000A84A 4E75                       		rts	
0000A84C                            ; ===========================================================================
0000A84C                            
0000A84C                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A84C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A852 D368 000C                  		add.w	d1,$C(a0)
0000A856 1143 0026                  		move.b	d3,$26(a0)
0000A85A 6100 0000                  		bsr.w	Obj1F_SetAni
0000A85E 5600                       		addq.b	#3,d0
0000A860 1140 001C                  		move.b	d0,$1C(a0)
0000A864 4E75                       		rts	
0000A866                            ; ===========================================================================
0000A866                            
0000A866                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A866 5528 0025                  		subq.b	#2,$25(a0)
0000A86A 317C 003B 0030             		move.w	#59,$30(a0)
0000A870 317C 0000 0010             		move.w	#0,$10(a0)
0000A876 6100 0000                  		bsr.w	Obj1F_SetAni
0000A87A 1140 001C                  		move.b	d0,$1C(a0)
0000A87E 4E75                       		rts	
0000A880                            ; ---------------------------------------------------------------------------
0000A880                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A880                            ; ---------------------------------------------------------------------------
0000A880                            
0000A880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A880                            
0000A880                            
0000A880                            Obj1F_SetAni:				; XREF: loc_966E
0000A880 7000                       		moveq	#0,d0
0000A882 1628 0026                  		move.b	$26(a0),d3
0000A886 6B00                       		bmi.s	loc_96A4
0000A888 0C03 0006                  		cmpi.b	#6,d3
0000A88C 6500                       		bcs.s	locret_96A2
0000A88E 7001                       		moveq	#1,d0
0000A890 0828 0000 0022             		btst	#0,$22(a0)
0000A896 6600                       		bne.s	locret_96A2
0000A898 7002                       		moveq	#2,d0
0000A89A                            
0000A89A                            locret_96A2:
0000A89A 4E75                       		rts	
0000A89C                            ; ===========================================================================
0000A89C                            
0000A89C                            loc_96A4:				; XREF: Obj1F_SetAni
0000A89C 0C03 00FA                  		cmpi.b	#-6,d3
0000A8A0 6200                       		bhi.s	locret_96B6
0000A8A2 7002                       		moveq	#2,d0
0000A8A4 0828 0000 0022             		btst	#0,$22(a0)
0000A8AA 6600                       		bne.s	locret_96B6
0000A8AC 7001                       		moveq	#1,d0
0000A8AE                            
0000A8AE                            locret_96B6:
0000A8AE 4E75                       		rts	
0000A8B0                            ; End of function Obj1F_SetAni
0000A8B0                            
0000A8B0                            ; ===========================================================================
0000A8B0                            
0000A8B0                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A8B0 6100 0000                  		bsr.w	DeleteObject
0000A8B4 4E75                       		rts	
0000A8B6                            ; ===========================================================================
0000A8B6                            ; ---------------------------------------------------------------------------
0000A8B6                            ; Sub-object - missile that the	Crabmeat throws
0000A8B6                            ; ---------------------------------------------------------------------------
0000A8B6                            
0000A8B6                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A8B6 5428 0024                  		addq.b	#2,$24(a0)
0000A8BA 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A8C2 317C 0400 0002             		move.w	#$400,2(a0)
0000A8C8 117C 0004 0001             		move.b	#4,1(a0)
0000A8CE 117C 0003 0018             		move.b	#3,$18(a0)
0000A8D4 117C 0087 0020             		move.b	#$87,$20(a0)
0000A8DA 117C 0008 0019             		move.b	#8,$19(a0)
0000A8E0 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A8E6 117C 0007 001C             		move.b	#7,$1C(a0)
0000A8EC                            
0000A8EC                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A8EC 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A8F2 6100 0000                  		bsr.w	AnimateSprite
0000A8F6 6100 0000                  		bsr.w	ObjectFall
0000A8FA 6100 0000                  		bsr.w	DisplaySprite
0000A8FE 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A902 0640 00E0                  		addi.w	#$E0,d0
0000A906 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A90A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A90C 4E75                       		rts	
0000A90E                            ; ===========================================================================
0000A90E                            
0000A90E                            Obj1F_Delete2:
0000A90E 6000 0000                  		bra.w	DeleteObject
0000A912                            ; ===========================================================================
0000A912                            Ani_obj1F:
0000A912                            	include "_anim\obj1F.asm"
0000A912                            ; ---------------------------------------------------------------------------
0000A912                            ; Animation script - Crabmeat enemy
0000A912                            ; ---------------------------------------------------------------------------
0000A912 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A918 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A91E 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A922 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A926 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A92A 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A92E 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A934 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A93A 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A940 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A944 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A948                            		even
0000A948                            		even
0000A948                            
0000A948                            ; ---------------------------------------------------------------------------
0000A948                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A948                            ; ---------------------------------------------------------------------------
0000A948                            Map_obj1F:
0000A948                            	include "_maps\obj1F.asm"
0000A948                            ; ---------------------------------------------------------------------------
0000A948                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A948                            ; ---------------------------------------------------------------------------
0000A948 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000A94C 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000A950 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000A954 0000                       		dc.w byte_97D7-Map_obj1F
0000A956 04                         byte_975E:	dc.b 4
0000A957 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000A95C F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000A961 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000A966 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000A96B 04                         byte_9773:	dc.b 4
0000A96C F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000A971 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000A976 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000A97B 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000A980 04                         byte_9788:	dc.b 4
0000A981 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000A986 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000A98B FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000A990 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000A995 04                         byte_979D:	dc.b 4
0000A996 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000A99B EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000A9A0 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000A9A5 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000A9AA 06                         byte_97B2:	dc.b 6
0000A9AB F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000A9B0 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000A9B5 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000A9BA F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000A9BF 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000A9C4 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000A9C9 01                         byte_97D1:	dc.b 1
0000A9CA F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000A9CF 01                         byte_97D7:	dc.b 1
0000A9D0 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000A9D6 00                         		even
0000A9D6 00                         		even
0000A9D6                            
0000A9D6                            ; ===========================================================================
0000A9D6                            ; ---------------------------------------------------------------------------
0000A9D6                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A9D6                            ; ---------------------------------------------------------------------------
0000A9D6                            
0000A9D6                            Obj22:					; XREF: Obj_Index
0000A9D6 7000                       		moveq	#0,d0
0000A9D8 1028 0024                  		move.b	$24(a0),d0
0000A9DC 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A9E0 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A9E4                            ; ===========================================================================
0000A9E4 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A9E6 0000                       		dc.w Obj22_Action-Obj22_Index
0000A9E8 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A9EA                            ; ===========================================================================
0000A9EA                            
0000A9EA                            Obj22_Main:				; XREF: Obj22_Index
0000A9EA 5428 0024                  		addq.b	#2,$24(a0)
0000A9EE 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A9F6 317C 0444 0002             		move.w	#$444,2(a0)
0000A9FC 117C 0004 0001             		move.b	#4,1(a0)
0000AA02 117C 0003 0018             		move.b	#3,$18(a0)
0000AA08 117C 0008 0020             		move.b	#8,$20(a0)
0000AA0E 117C 0018 0019             		move.b	#$18,$19(a0)
0000AA14                            
0000AA14                            Obj22_Action:				; XREF: Obj22_Index
0000AA14 7000                       		moveq	#0,d0
0000AA16 1028 0025                  		move.b	$25(a0),d0
0000AA1A 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000AA1E 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000AA22 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000AA28 6100 0000                  		bsr.w	AnimateSprite
0000AA2C 6000 0000                  		bra.w	MarkObjGone
0000AA30                            ; ===========================================================================
0000AA30 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000AA32 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000AA34                            ; ===========================================================================
0000AA34                            
0000AA34                            Obj22_Move:				; XREF: Obj22_Index2
0000AA34 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AA38 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000AA3A 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000AA40 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000AA42 5428 0025                  		addq.b	#2,$25(a0)
0000AA46 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000AA4C 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000AA52 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000AA58 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000AA5E 6600                       		bne.s	locret_986C	; if not, branch
0000AA60 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000AA64                            
0000AA64                            locret_986C:
0000AA64 4E75                       		rts	
0000AA66                            ; ===========================================================================
0000AA66                            
0000AA66                            Obj22_Fire:				; XREF: Obj22_Move
0000AA66 6100 0000                  		bsr.w	SingleObjLoad
0000AA6A 6600                       		bne.s	locret_98D0
0000AA6C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000AA70 3368 0008 0008             		move.w	8(a0),8(a1)
0000AA76 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AA7C 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000AA82 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000AA88 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000AA8E 303C 0018                  		move.w	#$18,d0
0000AA92 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000AA98 6600                       		bne.s	loc_98AA	; if not, branch
0000AA9A 4440                       		neg.w	d0
0000AA9C 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000AAA0                            
0000AAA0                            loc_98AA:
0000AAA0 D169 0008                  		add.w	d0,8(a1)
0000AAA4 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000AAAA 337C 000E 0032             		move.w	#$E,$32(a1)
0000AAB0 2348 003C                  		move.l	a0,$3C(a1)
0000AAB4 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000AABA 317C 003B 0032             		move.w	#$3B,$32(a0)
0000AAC0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000AAC6                            
0000AAC6                            locret_98D0:
0000AAC6 4E75                       		rts	
0000AAC8                            ; ===========================================================================
0000AAC8                            
0000AAC8                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000AAC8 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AACC 6B00                       		bmi.s	Obj22_ChgDir
0000AACE 6100 0000                  		bsr.w	SpeedToPos
0000AAD2 4A28 0034                  		tst.b	$34(a0)
0000AAD6 6600                       		bne.s	locret_992A
0000AAD8 3038 D008                  		move.w	($FFFFD008).w,d0
0000AADC 9068 0008                  		sub.w	8(a0),d0
0000AAE0 6A00                       		bpl.s	Obj22_SetNrSonic
0000AAE2 4440                       		neg.w	d0
0000AAE4                            
0000AAE4                            Obj22_SetNrSonic:
0000AAE4 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000AAE8 6400                       		bcc.s	locret_992A	; if not, branch
0000AAEA 4A28 0001                  		tst.b	1(a0)
0000AAEE 6A00                       		bpl.s	locret_992A
0000AAF0 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000AAF6 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000AAFC 6000                       		bra.s	Obj22_Stop
0000AAFE                            ; ===========================================================================
0000AAFE                            
0000AAFE                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000AAFE 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000AB04 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000AB0A 317C 003B 0032             		move.w	#59,$32(a0)
0000AB10                            
0000AB10                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000AB10 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000AB14 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000AB1A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000AB20                            
0000AB20                            locret_992A:
0000AB20 4E75                       		rts	
0000AB22                            ; ===========================================================================
0000AB22                            
0000AB22                            Obj22_Delete:				; XREF: Obj22_Index
0000AB22 6100 0000                  		bsr.w	DeleteObject
0000AB26 4E75                       		rts	
0000AB28                            ; ===========================================================================
0000AB28                            ; ---------------------------------------------------------------------------
0000AB28                            ; Object 23 - missile that Buzz	Bomber throws
0000AB28                            ; ---------------------------------------------------------------------------
0000AB28                            
0000AB28                            Obj23:					; XREF: Obj_Index
0000AB28 7000                       		moveq	#0,d0
0000AB2A 1028 0024                  		move.b	$24(a0),d0
0000AB2E 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000AB32 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000AB36                            ; ===========================================================================
0000AB36 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000AB38 0000                       		dc.w Obj23_Animate-Obj23_Index
0000AB3A 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000AB3C 0000                       		dc.w Obj23_Delete-Obj23_Index
0000AB3E 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000AB40                            ; ===========================================================================
0000AB40                            
0000AB40                            Obj23_Main:				; XREF: Obj23_Index
0000AB40 5368 0032                  		subq.w	#1,$32(a0)
0000AB44 6A00                       		bpl.s	Obj23_ChkCancel
0000AB46 5428 0024                  		addq.b	#2,$24(a0)
0000AB4A 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000AB52 317C 2444 0002             		move.w	#$2444,2(a0)
0000AB58 117C 0004 0001             		move.b	#4,1(a0)
0000AB5E 117C 0003 0018             		move.b	#3,$18(a0)
0000AB64 117C 0008 0019             		move.b	#8,$19(a0)
0000AB6A 0228 0003 0022             		andi.b	#3,$22(a0)
0000AB70 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000AB74 6700                       		beq.s	Obj23_Animate	; if not, branch
0000AB76 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000AB7C 117C 0087 0020             		move.b	#$87,$20(a0)
0000AB82 117C 0001 001C             		move.b	#1,$1C(a0)
0000AB88 6000                       		bra.s	Obj23_Animate2
0000AB8A                            ; ===========================================================================
0000AB8A                            
0000AB8A                            Obj23_Animate:				; XREF: Obj23_Index
0000AB8A 6100                       		bsr.s	Obj23_ChkCancel
0000AB8C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AB92 6100 0000                  		bsr.w	AnimateSprite
0000AB96 6000 0000                  		bra.w	DisplaySprite
0000AB9A                            ; ---------------------------------------------------------------------------
0000AB9A                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000AB9A                            ; destroyed, and if it has, then cancel	the missile
0000AB9A                            ; ---------------------------------------------------------------------------
0000AB9A                            
0000AB9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB9A                            
0000AB9A                            
0000AB9A                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000AB9A 2268 003C                  		movea.l	$3C(a0),a1
0000AB9E 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000ABA2 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000ABA4 4E75                       		rts	
0000ABA6                            ; End of function Obj23_ChkCancel
0000ABA6                            
0000ABA6                            ; ===========================================================================
0000ABA6                            
0000ABA6                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000ABA6 0828 0007 0022             		btst	#7,$22(a0)
0000ABAC 6600                       		bne.s	Obj23_Explode
0000ABAE 117C 0087 0020             		move.b	#$87,$20(a0)
0000ABB4 117C 0001 001C             		move.b	#1,$1C(a0)
0000ABBA 6100 0000                  		bsr.w	SpeedToPos
0000ABBE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000ABC4 6100 0000                  		bsr.w	AnimateSprite
0000ABC8 6100 0000                  		bsr.w	DisplaySprite
0000ABCC 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000ABD0 0640 00E0                  		addi.w	#$E0,d0
0000ABD4 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000ABD8 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000ABDA 4E75                       		rts	
0000ABDC                            ; ===========================================================================
0000ABDC                            
0000ABDC                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000ABDC 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000ABE0 117C 0000 0024             		move.b	#0,$24(a0)
0000ABE6 6000 F30A                  		bra.w	Obj24
0000ABEA                            ; ===========================================================================
0000ABEA                            
0000ABEA                            Obj23_Delete:				; XREF: Obj23_Index
0000ABEA 6100 0000                  		bsr.w	DeleteObject
0000ABEE 4E75                       		rts	
0000ABF0                            ; ===========================================================================
0000ABF0                            
0000ABF0                            Obj23_FromNewt:				; XREF: Obj23_Index
0000ABF0 4A28 0001                  		tst.b	1(a0)
0000ABF4 6AF4                       		bpl.s	Obj23_Delete
0000ABF6 6100 0000                  		bsr.w	SpeedToPos
0000ABFA                            
0000ABFA                            Obj23_Animate2:				; XREF: Obj23_Main
0000ABFA 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AC00 6100 0000                  		bsr.w	AnimateSprite
0000AC04 6100 0000                  		bsr.w	DisplaySprite
0000AC08 4E75                       		rts	
0000AC0A                            ; ===========================================================================
0000AC0A                            Ani_obj22:
0000AC0A                            	include "_anim\obj22.asm"
0000AC0A                            ; ---------------------------------------------------------------------------
0000AC0A                            ; Animation script - Buzz Bomber enemy
0000AC0A                            ; ---------------------------------------------------------------------------
0000AC0A 0000                       		dc.w byte_9A1E-Ani_obj22
0000AC0C 0000                       		dc.w byte_9A22-Ani_obj22
0000AC0E 0000                       		dc.w byte_9A26-Ani_obj22
0000AC10 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000AC14 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000AC18 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000AC1C                            		even
0000AC1C                            		even
0000AC1C                            
0000AC1C                            Ani_obj23:
0000AC1C                            	include "_anim\obj23.asm"
0000AC1C                            ; ---------------------------------------------------------------------------
0000AC1C                            ; Animation script - missile that Buzz Bomber throws
0000AC1C                            ; ---------------------------------------------------------------------------
0000AC1C 0000                       		dc.w byte_9A2E-Ani_obj23
0000AC1E 0000                       		dc.w byte_9A32-Ani_obj23
0000AC20 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000AC24 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000AC28                            		even
0000AC28                            		even
0000AC28                            
0000AC28                            ; ---------------------------------------------------------------------------
0000AC28                            ; Sprite mappings - Buzz Bomber	enemy
0000AC28                            ; ---------------------------------------------------------------------------
0000AC28                            Map_obj22:
0000AC28                            	include "_maps\obj22.asm"
0000AC28                            ; ---------------------------------------------------------------------------
0000AC28                            ; Sprite mappings - Buzz Bomber	enemy
0000AC28                            ; ---------------------------------------------------------------------------
0000AC28 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000AC2C 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000AC30 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000AC34 06                         byte_9A42:	dc.b 6
0000AC35 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AC3A F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AC3F 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AC44 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AC49 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AC4E F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AC53 06                         byte_9A61:	dc.b 6
0000AC54 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AC59 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AC5E 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AC63 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AC68 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AC6D F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AC72 07                         byte_9A80:	dc.b 7
0000AC73 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000AC78 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AC7D F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AC82 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AC87 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AC8C F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AC91 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AC96 07                         byte_9AA4:	dc.b 7
0000AC97 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000AC9C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ACA1 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ACA6 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ACAB 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000ACB0 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000ACB5 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000ACBA 06                         byte_9AC8:	dc.b 6
0000ACBB F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000ACC0 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000ACC5 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000ACCA 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000ACCF F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000ACD4 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000ACD9 04                         byte_9AE7:	dc.b 4
0000ACDA F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000ACDF 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000ACE4 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000ACE9 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000ACEE F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000ACF3 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000ACF8                            		even
0000ACF8                            		even
0000ACF8                            
0000ACF8                            ; ---------------------------------------------------------------------------
0000ACF8                            ; Sprite mappings - missile that Buzz Bomber throws
0000ACF8                            ; ---------------------------------------------------------------------------
0000ACF8                            Map_obj23:
0000ACF8                            	include "_maps\obj23.asm"
0000ACF8                            ; ---------------------------------------------------------------------------
0000ACF8                            ; Sprite mappings - missile that Buzz Bomber throws
0000ACF8                            ; ---------------------------------------------------------------------------
0000ACF8 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000ACFC 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000AD00 01                         byte_9B0E:	dc.b 1
0000AD01 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000AD06 01                         byte_9B14:	dc.b 1
0000AD07 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000AD0C 01                         byte_9B1A:	dc.b 1
0000AD0D F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000AD12 01                         byte_9B20:	dc.b 1
0000AD13 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000AD18                            		even
0000AD18                            		even
0000AD18                            
0000AD18                            ; ===========================================================================
0000AD18                            ; ---------------------------------------------------------------------------
0000AD18                            ; Object 25 - rings
0000AD18                            ; ---------------------------------------------------------------------------
0000AD18                            
0000AD18                            Obj25:					; XREF: Obj_Index
0000AD18 7000                       		moveq	#0,d0
0000AD1A 1028 0024                  		move.b	$24(a0),d0
0000AD1E 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000AD22 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000AD26                            ; ===========================================================================
0000AD26 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000AD28 0000                       		dc.w Obj25_Animate-Obj25_Index
0000AD2A 0000                       		dc.w Obj25_Collect-Obj25_Index
0000AD2C 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000AD2E 0000                       		dc.w Obj25_Delete-Obj25_Index
0000AD30                            ; ===========================================================================
0000AD30                            
0000AD30                            Obj25_Main:				; XREF: Obj25_Index		addq.b	#2,$24(a0)
0000AD30 3168 0008 0032             		move.w	8(a0),$32(a0)
0000AD36 217C 0000 0000 0004        		move.l	#Map_obj25,4(a0)
0000AD3E 317C 26BA 0002             		move.w	#($2000+ringart),2(a0)
0000AD44 117C 0004 0001             		move.b	#4,1(a0)
0000AD4A 117C 0002 0018             		move.b	#2,$18(a0)
0000AD50 117C 0047 0020             		move.b	#$47,$20(a0)
0000AD56 117C 0008 0019             		move.b	#8,$19(a0)
0000AD5C                            
0000AD5C                            Obj25_Animate:				; XREF: Obj25_Index
0000AD5C 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000AD62 3028 0032                  		move.w	$32(a0),d0
0000AD66 6000 0000                  		bra.w	MarkObjGone
0000AD6A                            ; ===========================================================================
0000AD6A                            
0000AD6A                            Obj25_Collect:				; XREF: Obj25_Index
0000AD6A 5428 0024                  		addq.b	#2,$24(a0)
0000AD6E 117C 0000 0020             		move.b	#0,$20(a0)
0000AD74 317C 0080 0018             		move.w	#$80,$18(a0)
0000AD7A 6100 0000                  		bsr.w	CollectRing
0000AD7E                            
0000AD7E                            Obj25_Sparkle:				; XREF: Obj25_Index
0000AD7E 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AD84 6100 0000                  		bsr.w	AnimateSprite
0000AD88 6000 0000                  		bra.w	DisplaySprite
0000AD8C                            ; ===========================================================================
0000AD8C                            
0000AD8C                            Obj25_Delete:				; XREF: Obj25_Index
0000AD8C 6000 0000                  		bra.w	DeleteObject
0000AD90                            
0000AD90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD90                            
0000AD90                            
0000AD90                            CollectRing:				; XREF: Obj25_Collect
0000AD90 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000AD94 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000AD9A 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000AD9E 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000ADA4 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000ADA6 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000ADAC 6700                       		beq.s	loc_9CA4
0000ADAE 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000ADB4 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000ADB6 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000ADBC 6600                       		bne.s	Obj25_PlaySnd
0000ADBE                            
0000ADBE                            loc_9CA4:
0000ADBE 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000ADC2 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000ADC6 303C 0088                  		move.w	#$88,d0		; play extra life music
0000ADCA                            
0000ADCA                            Obj25_PlaySnd:
0000ADCA 4EF9 0000 11F6             		jmp	(PlaySound_Special).l
0000ADD0                            ; End of function CollectRing
0000ADD0                            
0000ADD0                            ; ===========================================================================
0000ADD0                            ; ---------------------------------------------------------------------------
0000ADD0                            ; Object 37 - rings flying out of Sonic	when he's hit
0000ADD0                            ; ---------------------------------------------------------------------------
0000ADD0                            
0000ADD0                            Obj37:					; XREF: Obj_Index
0000ADD0 7000                       		moveq	#0,d0
0000ADD2 1028 0024                  		move.b	$24(a0),d0
0000ADD6 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000ADDA 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000ADDE                            ; ===========================================================================
0000ADDE 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000ADE0 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000ADE2 0000                       		dc.w Obj37_Collect-Obj37_Index
0000ADE4 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000ADE6 0000                       		dc.w Obj37_Delete-Obj37_Index
0000ADE8                            ; ===========================================================================
0000ADE8                            
0000ADE8                            Obj37_CountRings:			; XREF: Obj37_Index
0000ADE8 2248                       		movea.l	a0,a1
0000ADEA 7A00                       		moveq	#0,d5
0000ADEC 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000ADF0 7020                       		moveq	#32,d0
0000ADF2 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000ADF4 6500                       		bcs.s	loc_9CDE	; if not, branch
0000ADF6 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000ADF8                            
0000ADF8                            loc_9CDE:
0000ADF8 5345                       		subq.w	#1,d5
0000ADFA 383C 0288                  		move.w	#$288,d4
0000ADFE 6000                       		bra.s	Obj37_MakeRings
0000AE00                            ; ===========================================================================
0000AE00                            
0000AE00                            Obj37_Loop:
0000AE00 6100 0000                  		bsr.w	SingleObjLoad
0000AE04 6600 0000                  		bne.w	Obj37_ResetCounter
0000AE08                            
0000AE08                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000AE08 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000AE0C 5429 0024                  		addq.b	#2,$24(a1)
0000AE10 137C 0008 0016             		move.b	#8,$16(a1)
0000AE16 137C 0008 0017             		move.b	#8,$17(a1)
0000AE1C 3368 0008 0008             		move.w	8(a0),8(a1)
0000AE22 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AE28 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000AE30 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
0000AE36 137C 0004 0001             		move.b	#4,1(a1)
0000AE3C 137C 0003 0018             		move.b	#3,$18(a1)
0000AE42 137C 0047 0020             		move.b	#$47,$20(a1)
0000AE48 137C 0008 0019             		move.b	#8,$19(a1)
0000AE4E 4A44                       		tst.w	d4
0000AE50 6B00                       		bmi.s	loc_9D62
0000AE52 3004                       		move.w	d4,d0
0000AE54 4EB9 0000 29CC             		jsr	(CalcSine).l
0000AE5A 3404                       		move.w	d4,d2
0000AE5C E04A                       		lsr.w	#8,d2
0000AE5E E560                       		asl.w	d2,d0
0000AE60 E561                       		asl.w	d2,d1
0000AE62 3400                       		move.w	d0,d2
0000AE64 3601                       		move.w	d1,d3
0000AE66 0604 0010                  		addi.b	#$10,d4
0000AE6A 6400                       		bcc.s	loc_9D62
0000AE6C 0444 0080                  		subi.w	#$80,d4
0000AE70 6400                       		bcc.s	loc_9D62
0000AE72 383C 0288                  		move.w	#$288,d4
0000AE76                            
0000AE76                            loc_9D62:
0000AE76 3342 0010                  		move.w	d2,$10(a1)
0000AE7A 3343 0012                  		move.w	d3,$12(a1)
0000AE7E 4442                       		neg.w	d2
0000AE80 4444                       		neg.w	d4
0000AE82 51CD FF7C                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000AE86                            
0000AE86                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000AE86 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000AE8C 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000AE92 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000AE98 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000AE9A 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000AE9E 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)		
0000AEA2 303C 00C6                  		move.w	#$C6,d0
0000AEA6 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000AEAC                            
0000AEAC                            Obj37_Bounce:				; XREF: Obj37_Index
0000AEAC 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000AEB2 6100 0000                  		bsr.w	SpeedToPos
0000AEB6 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AEBC 6B00                       		bmi.s	Obj37_ChkDel
0000AEBE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000AEC2 D007                       		add.b	d7,d0
0000AEC4 0200 0003                  		andi.b	#3,d0
0000AEC8 6600                       		bne.s	Obj37_ChkDel
0000AECA 4EB9 0000 0000             		jsr	ObjHitFloor
0000AED0 4A41                       		tst.w	d1
0000AED2 6A00                       		bpl.s	Obj37_ChkDel
0000AED4 D368 000C                  		add.w	d1,$C(a0)
0000AED8 3028 0012                  		move.w	$12(a0),d0
0000AEDC E440                       		asr.w	#2,d0
0000AEDE 9168 0012                  		sub.w	d0,$12(a0)
0000AEE2 4468 0012                  		neg.w	$12(a0)
0000AEE6                            
0000AEE6                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000AEE6 5328 001F                  		subq.b	#1,$1F(a0)	; Subtract 1
0000AEEA 6700 0000                  		beq.w	DeleteObject		; If 0, delete
0000AEEE 0C78 FF00 F72C             		cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000AEF4 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000AEF8 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AEFC 0640 00E0                  		addi.w	#$E0,d0
0000AF00 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000AF04 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000AF06 6000 0000                  		bra.w	DisplaySprite
0000AF0A                            ; ===========================================================================
0000AF0A                            
0000AF0A                            Obj37_Collect:				; XREF: Obj37_Index
0000AF0A 5428 0024                  		addq.b	#2,$24(a0)
0000AF0E 117C 0000 0020             		move.b	#0,$20(a0)
0000AF14 117C 0001 0018             		move.b	#1,$18(a0)
0000AF1A 6100 FE74                  		bsr.w	CollectRing
0000AF1E                            
0000AF1E                            Obj37_Sparkle:				; XREF: Obj37_Index
0000AF1E 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AF24 6100 0000                  		bsr.w	AnimateSprite
0000AF28 6000 0000                  		bra.w	DisplaySprite
0000AF2C                            ; ===========================================================================
0000AF2C                            
0000AF2C                            Obj37_Delete:				; XREF: Obj37_Index
0000AF2C 6000 0000                  		bra.w	DeleteObject
0000AF30                            ; ===========================================================================
0000AF30                            ; ---------------------------------------------------------------------------
0000AF30                            ; Object 4B - giant ring for entry to special stage
0000AF30                            ; ---------------------------------------------------------------------------
0000AF30                            
0000AF30                            Obj4B:					; XREF: Obj_Index
0000AF30 7000                       		moveq	#0,d0
0000AF32 1028 0024                  		move.b	$24(a0),d0
0000AF36 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000AF3A 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000AF3E                            ; ===========================================================================
0000AF3E 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000AF40 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000AF42 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000AF44 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000AF46                            ; ===========================================================================
0000AF46                            
0000AF46                            Obj4B_Main:				; XREF: Obj4B_Index
0000AF46 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000AF4E 317C 2400 0002             		move.w	#$2400,2(a0)
0000AF54 0028 0004 0001             		ori.b	#4,1(a0)
0000AF5A 117C 0040 0019             		move.b	#$40,$19(a0)
0000AF60 4A28 0001                  		tst.b	1(a0)
0000AF64 6A00                       		bpl.s	Obj4B_Animate
0000AF66 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000AF6C 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000AF70 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000AF76 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000AF78 4EF9 0000 0000             		jmp	(DeleteObject).l
0000AF7E                            
0000AF7E                            ; ===========================================================================
0000AF7E                            
0000AF7E                            Obj4B_Okay:				; XREF: Obj4B_Main
0000AF7E 5428 0024                  		addq.b	#2,$24(a0)
0000AF82 117C 0002 0018             		move.b	#2,$18(a0)
0000AF88 117C 0052 0020             		move.b	#$52,$20(a0)
0000AF8E 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000AF94                            
0000AF94                            Obj4B_Animate:				; XREF: Obj4B_Index
0000AF94 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000AF9A 3028 0008                  		move.w	8(a0),d0
0000AF9E 0240 FF80                  		andi.w	#$FF80,d0
0000AFA2 3238 F700                  		move.w	($FFFFF700).w,d1
0000AFA6 0441 0080                  		subi.w	#$80,d1
0000AFAA 0241 FF80                  		andi.w	#$FF80,d1
0000AFAE 9041                       		sub.w	d1,d0
0000AFB0 0C40 0280                  		cmpi.w	#$280,d0
0000AFB4 6300 0000                  		bls.w	DisplaySprite
0000AFB8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000AFBC 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000AFC0 3440                       		movea.w	d0,a2	; load address into a2
0000AFC2 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000AFC6 6000 0000                  		bra.w	DeleteObject	; and delete object
0000AFCA                            ; ===========================================================================
0000AFCA                            
0000AFCA                            Obj4B_Collect:				; XREF: Obj4B_Index
0000AFCA 5528 0024                  		subq.b	#2,$24(a0)
0000AFCE 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000AFD4 11FC 0040 F5D0             		move.b	#$40,(SonimeSST+sonime_facetimer).w
0000AFDA 117C 0000 0020             		move.b	#0,$20(a0)
0000AFE0 6100 0000                  		bsr.w	SingleObjLoad
0000AFE4 6600 0000                  		bne.w	Obj4B_PlaySnd
0000AFE8 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000AFEC 3368 0008 0008             		move.w	8(a0),8(a1)
0000AFF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AFF8 2348 003C                  		move.l	a0,$3C(a1)
0000AFFC 3038 D008                  		move.w	($FFFFD008).w,d0
0000B000 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B004 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B006 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B00C                            
0000B00C                            Obj4B_PlaySnd:
0000B00C 303C 00C3                  		move.w	#$C3,d0
0000B010 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B016 6000 FF7C                  		bra.w	Obj4B_Animate
0000B01A                            ; ===========================================================================
0000B01A                            
0000B01A                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B01A 6000 0000                  		bra.w	DeleteObject
0000B01E                            ; ===========================================================================
0000B01E                            ; ---------------------------------------------------------------------------
0000B01E                            ; Object 7C - flash effect when	you collect the	giant ring
0000B01E                            ; ---------------------------------------------------------------------------
0000B01E                            
0000B01E                            Obj7C:					; XREF: Obj_Index
0000B01E 7000                       		moveq	#0,d0
0000B020 1028 0024                  		move.b	$24(a0),d0
0000B024 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B028 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B02C                            ; ===========================================================================
0000B02C 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B02E 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B030 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B032                            ; ===========================================================================
0000B032                            
0000B032                            Obj7C_Main:				; XREF: Obj7C_Index
0000B032 5428 0024                  		addq.b	#2,$24(a0)
0000B036 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B03E 317C 2462 0002             		move.w	#$2462,2(a0)
0000B044 0028 0004 0001             		ori.b	#4,1(a0)
0000B04A 117C 0000 0018             		move.b	#0,$18(a0)
0000B050 117C 0020 0019             		move.b	#$20,$19(a0)
0000B056 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000B05C                            
0000B05C                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000B05C 6100                       		bsr.s	Obj7C_Collect
0000B05E 3028 0008                  		move.w	8(a0),d0
0000B062 0240 FF80                  		andi.w	#$FF80,d0
0000B066 3238 F700                  		move.w	($FFFFF700).w,d1
0000B06A 0441 0080                  		subi.w	#$80,d1
0000B06E 0241 FF80                  		andi.w	#$FF80,d1
0000B072 9041                       		sub.w	d1,d0
0000B074 0C40 0280                  		cmpi.w	#$280,d0
0000B078 6300 0000                  		bls.w	DisplaySprite
0000B07C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B080 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B084 3440                       		movea.w	d0,a2	; load address into a2
0000B086 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B08A 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B08E                            
0000B08E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B08E                            
0000B08E                            
0000B08E                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B08E 5328 001E                  		subq.b	#1,$1E(a0)
0000B092 6A00                       		bpl.s	locret_9F76
0000B094 117C 0001 001E             		move.b	#1,$1E(a0)
0000B09A 5228 001A                  		addq.b	#1,$1A(a0)
0000B09E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B0A4 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B0A6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B0AC 6600                       		bne.s	locret_9F76	; if not, branch
0000B0AE 2268 003C                  		movea.l	$3C(a0),a1
0000B0B2 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B0B8 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B0BE 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B0C4 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B0C8 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B0CC                            
0000B0CC                            locret_9F76:
0000B0CC 4E75                       		rts	
0000B0CE                            ; ===========================================================================
0000B0CE                            
0000B0CE                            Obj7C_End:				; XREF: Obj7C_Collect
0000B0CE 5428 0024                  		addq.b	#2,$24(a0)
0000B0D2 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B0D8 588F                       		addq.l	#4,sp
0000B0DA 4E75                       		rts	
0000B0DC                            ; End of function Obj7C_Collect
0000B0DC                            
0000B0DC                            ; ===========================================================================
0000B0DC                            
0000B0DC                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B0DC 6000 0000                  		bra.w	DeleteObject
0000B0E0                            ; ===========================================================================
0000B0E0                            Ani_obj25:
0000B0E0                            	include "_anim\obj25.asm"
0000B0E0                            ; ---------------------------------------------------------------------------
0000B0E0                            ; Animation script - ring
0000B0E0                            ; ---------------------------------------------------------------------------
0000B0E0 0000                       		dc.w byte_9F8C-Ani_obj25
0000B0E2 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B0E8                            		even
0000B0E8                            		even
0000B0E8                            
0000B0E8                            ; ---------------------------------------------------------------------------
0000B0E8                            ; Sprite mappings - rings
0000B0E8                            ; ---------------------------------------------------------------------------
0000B0E8                            Map_obj25:
0000B0E8                            	include "_maps\obj25.asm"
0000B0E8                            ; ---------------------------------------------------------------------------
0000B0E8                            ; Sprite mappings - rings
0000B0E8                            ; ---------------------------------------------------------------------------
0000B0E8 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B0EC 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B0F0 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B0F4 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B0F8 01                         byte_9FA2:	dc.b 1
0000B0F9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B0FE 01                         byte_9FA8:	dc.b 1
0000B0FF F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B104 01                         byte_9FAE:	dc.b 1
0000B105 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B10A 01                         byte_9FB4:	dc.b 1
0000B10B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B110 01                         byte_9FBA:	dc.b 1
0000B111 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B116 01                         byte_9FC0:	dc.b 1
0000B117 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B11C 01                         byte_9FC6:	dc.b 1
0000B11D F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B122 01                         byte_9FCC:	dc.b 1
0000B123 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B128                            		even
0000B128                            		even
0000B128                            
0000B128                            ; ---------------------------------------------------------------------------
0000B128                            ; Sprite mappings - giant ring
0000B128                            ; ---------------------------------------------------------------------------
0000B128                            Map_obj4B:
0000B128                            	include "_maps\obj4B.asm"
0000B128                            ; ---------------------------------------------------------------------------
0000B128                            ; Sprite mappings - giant ring
0000B128                            ; ---------------------------------------------------------------------------
0000B128 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B12C 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B130 0A                         byte_9FDA:	dc.b $A
0000B131 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B136 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000B13B E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000B140 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000B145 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000B14A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000B14F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000B154 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000B159 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000B15E 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000B163 08                         byte_A00D:	dc.b 8
0000B164 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000B169 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000B16E E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000B173 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000B178 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000B17D 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000B182 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000B187 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000B18C 04                         byte_A036:	dc.b 4
0000B18D E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000B192 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000B197 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000B19C 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000B1A1 08                         byte_A04B:	dc.b 8
0000B1A2 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000B1A7 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000B1AC E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000B1B1 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000B1B6 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B1BB 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B1C0 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B1C5 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B1CA                            		even
0000B1CA                            		even
0000B1CA                            
0000B1CA                            ; ---------------------------------------------------------------------------
0000B1CA                            ; Sprite mappings - flash effect when you collect the giant ring
0000B1CA                            ; ---------------------------------------------------------------------------
0000B1CA                            Map_obj7C:
0000B1CA                            	include "_maps\obj7C.asm"
0000B1CA                            ; ---------------------------------------------------------------------------
0000B1CA                            ; Sprite mappings - flash effect when you collect the giant ring
0000B1CA                            ; ---------------------------------------------------------------------------
0000B1CA 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B1CE 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B1D2 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B1D6 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B1DA 02                         byte_A084:	dc.b 2
0000B1DB E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B1E0 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B1E5 04                         byte_A08F:	dc.b 4
0000B1E6 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B1EB E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B1F0 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B1F5 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B1FA 04                         byte_A0A4:	dc.b 4
0000B1FB E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B200 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B205 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B20A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B20F 04                         byte_A0B9:	dc.b 4
0000B210 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B215 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B21A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B21F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B224 04                         byte_A0CE:	dc.b 4
0000B225 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B22A E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B22F 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B234 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B239 04                         byte_A0E3:	dc.b 4
0000B23A E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B23F E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B244 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B249 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B24E 02                         byte_A0F8:	dc.b 2
0000B24F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B254 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B259 04                         byte_A103:	dc.b 4
0000B25A E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B25F E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B264 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B269 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B26E                            		even
0000B26E                            		even
0000B26E                            
0000B26E                            ; ===========================================================================
0000B26E                            ; ---------------------------------------------------------------------------
0000B26E                            ; Object 26 - monitors
0000B26E                            ; ---------------------------------------------------------------------------
0000B26E                            
0000B26E                            Obj26:					; XREF: Obj_Index
0000B26E 7000                       		moveq	#0,d0
0000B270 1028 0024                  		move.b	$24(a0),d0
0000B274 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B278 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B27C                            ; ===========================================================================
0000B27C 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B27E 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B280 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B282 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B284 0000                       		dc.w Obj26_Display-Obj26_Index
0000B286                            ; ===========================================================================
0000B286                            
0000B286                            Obj26_Main:				; XREF: Obj26_Index
0000B286 5428 0024                  		addq.b	#2,$24(a0)
0000B28A 117C 000E 0016             		move.b	#$E,$16(a0)
0000B290 117C 000E 0017             		move.b	#$E,$17(a0)
0000B296 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B29E 317C 0680 0002             		move.w	#$680,2(a0)
0000B2A4 117C 0004 0001             		move.b	#4,1(a0)
0000B2AA 117C 0003 0018             		move.b	#3,$18(a0)
0000B2B0 117C 000F 0019             		move.b	#$F,$19(a0)
0000B2B6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B2BA 3440                       		movea.w	d0,a2	; load address into a2
0000B2BC 0812 0000                  		btst	#0,(a2)	; has monitor been broken?
0000B2C0 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B2C2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B2C8 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B2CE 4E75                       		rts	
0000B2D0                            ; ===========================================================================
0000B2D0                            
0000B2D0                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B2D0 117C 0046 0020             		move.b	#$46,$20(a0)
0000B2D6 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B2DC                            
0000B2DC                            Obj26_Solid:				; XREF: Obj26_Index
0000B2DC 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B2E0 6700                       		beq.s	loc_A1EC	; if not, branch
0000B2E2 5500                       		subq.b	#2,d0
0000B2E4 6600                       		bne.s	Obj26_Fall
0000B2E6 7200                       		moveq	#0,d1
0000B2E8 1228 0019                  		move.b	$19(a0),d1
0000B2EC 0641 000B                  		addi.w	#$B,d1
0000B2F0 6100 D392                  		bsr.w	ExitPlatform
0000B2F4 0829 0003 0022             		btst	#3,$22(a1)
0000B2FA 6600 0000                  		bne.w	loc_A1BC
0000B2FE 4228 0025                  		clr.b	$25(a0)
0000B302 6000 0000                  		bra.w	Obj26_Animate
0000B306                            ; ===========================================================================
0000B306                            
0000B306                            loc_A1BC:				; XREF: Obj26_Solid
0000B306 363C 0010                  		move.w	#$10,d3
0000B30A 3428 0008                  		move.w	8(a0),d2
0000B30E 6100 D8DE                  		bsr.w	MvSonicOnPtfm
0000B312 6000 0000                  		bra.w	Obj26_Animate
0000B316                            ; ===========================================================================
0000B316                            
0000B316                            Obj26_Fall:				; XREF: Obj26_Solid
0000B316 6100 0000                  		bsr.w	ObjectFall
0000B31A 4EB9 0000 0000             		jsr	ObjHitFloor
0000B320 4A41                       		tst.w	d1
0000B322 6A00 0000                  		bpl.w	Obj26_Animate
0000B326 D368 000C                  		add.w	d1,$C(a0)
0000B32A 4268 0012                  		clr.w	$12(a0)
0000B32E 4228 0025                  		clr.b	$25(a0)
0000B332 6000 0000                  		bra.w	Obj26_Animate
0000B336                            ; ===========================================================================
0000B336                            
0000B336                            loc_A1EC:				; XREF: Obj26_Solid
0000B336 323C 001A                  		move.w	#$1A,d1
0000B33A 343C 000F                  		move.w	#$F,d2
0000B33E 6100 0000                  		bsr.w	Obj26_SolidSides
0000B342 6700 0000                  		beq.w	loc_A25C
0000B346 4A69 0012                  		tst.w	$12(a1)
0000B34A 6B00                       		bmi.s	loc_A20A
0000B34C 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B352 6700                       		beq.s	loc_A25C	; if yes, branch
0000B354                            
0000B354                            loc_A20A:
0000B354 4A41                       		tst.w	d1
0000B356 6A00                       		bpl.s	loc_A220
0000B358 9769 000C                  		sub.w	d3,$C(a1)
0000B35C 6100 D214                  		bsr.w	loc_74AE
0000B360 117C 0002 0025             		move.b	#2,$25(a0)
0000B366 6000 0000                  		bra.w	Obj26_Animate
0000B36A                            ; ===========================================================================
0000B36A                            
0000B36A                            loc_A220:
0000B36A 4A40                       		tst.w	d0
0000B36C 6700 0000                  		beq.w	loc_A246
0000B370 6B00                       		bmi.s	loc_A230
0000B372 4A69 0010                  		tst.w	$10(a1)
0000B376 6B00                       		bmi.s	loc_A246
0000B378 6000                       		bra.s	loc_A236
0000B37A                            ; ===========================================================================
0000B37A                            
0000B37A                            loc_A230:
0000B37A 4A69 0010                  		tst.w	$10(a1)
0000B37E 6A00                       		bpl.s	loc_A246
0000B380                            
0000B380                            loc_A236:
0000B380 9169 0008                  		sub.w	d0,8(a1)
0000B384 337C 0000 0020             		move.w	#0,$20(a1)
0000B38A 337C 0000 0010             		move.w	#0,$10(a1)
0000B390                            
0000B390                            loc_A246:
0000B390 0829 0001 0022             		btst	#1,$22(a1)
0000B396 6600                       		bne.s	loc_A26A
0000B398 08E9 0005 0022             		bset	#5,$22(a1)
0000B39E 08E8 0005 0022             		bset	#5,$22(a0)
0000B3A4 6000                       		bra.s	Obj26_Animate
0000B3A6                            ; ===========================================================================
0000B3A6                            
0000B3A6                            loc_A25C:
0000B3A6 0828 0005 0022             		btst	#5,$22(a0)
0000B3AC 6700                       		beq.s	Obj26_Animate
0000B3AE 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000B3B4 6700                       		beq.s	loc_A26A
0000B3B6 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000B3BC 6700                       		beq.s	loc_A26A
0000B3BE 337C 0001 001C             		move.w	#1,$1C(a1)
0000B3C4                            
0000B3C4                            loc_A26A:
0000B3C4 08A8 0005 0022             		bclr	#5,$22(a0)
0000B3CA 08A9 0005 0022             		bclr	#5,$22(a1)
0000B3D0                            
0000B3D0                            Obj26_Animate:				; XREF: Obj26_Index
0000B3D0 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000B3D6 6100 0000                  		bsr.w	AnimateSprite
0000B3DA                            
0000B3DA                            Obj26_Display:				; XREF: Obj26_Index
0000B3DA 6000 0000                  		bra.w	MarkObjGone
0000B3DE                            ; ===========================================================================
0000B3DE                            
0000B3DE                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000B3DE 5428 0024                  		addq.b	#2,$24(a0)
0000B3E2 117C 0000 0020             		move.b	#0,$20(a0)
0000B3E8 6100 0000                  		bsr.w	SingleObjLoad
0000B3EC 6600                       		bne.s	Obj26_Explode
0000B3EE 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000B3F2 3368 0008 0008             		move.w	8(a0),8(a1)
0000B3F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B3FE 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000B404                            
0000B404                            Obj26_Explode:
0000B404 6100 0000                  		bsr.w	SingleObjLoad
0000B408 6600                       		bne.s	Obj26_SetBroken
0000B40A 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000B40E 5429 0024                  		addq.b	#2,$24(a1)
0000B412 3368 0008 0008             		move.w	8(a0),8(a1)
0000B418 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B41E                            
0000B41E                            Obj26_SetBroken:
0000B41E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B422 6700                       		beq.s	@notremembered			; If it's zero, it isn't remembered
0000B424 3440                       		movea.w	d0,a2	; load address into a2
0000B426 08D2 0000                  		bset	#0,(a2)
0000B42A                            
0000B42A                            	@notremembered:
0000B42A 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000B430 6000 0000                  		bra.w	DisplaySprite
0000B434                            ; ===========================================================================
0000B434                            ; ---------------------------------------------------------------------------
0000B434                            ; Object 2E - contents of monitors
0000B434                            ; ---------------------------------------------------------------------------
0000B434                            
0000B434                            Obj2E:					; XREF: Obj_Index
0000B434 7000                       		moveq	#0,d0
0000B436 1028 0024                  		move.b	$24(a0),d0
0000B43A 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000B43E 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000B442 6000 0000                  		bra.w	DisplaySprite
0000B446                            ; ===========================================================================
0000B446 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000B448 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000B44A 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000B44C                            ; ===========================================================================
0000B44C                            
0000B44C                            Obj2E_Main:				; XREF: Obj2E_Index
0000B44C 5428 0024                  		addq.b	#2,$24(a0)
0000B450 317C 0680 0002             		move.w	#$680,2(a0)
0000B456 117C 0024 0001             		move.b	#$24,1(a0)
0000B45C 117C 0003 0018             		move.b	#3,$18(a0)
0000B462 117C 0008 0019             		move.b	#8,$19(a0)
0000B468 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B46E 7000                       		moveq	#0,d0
0000B470 1028 001C                  		move.b	$1C(a0),d0
0000B474 5400                       		addq.b	#2,d0
0000B476 1140 001A                  		move.b	d0,$1A(a0)
0000B47A 227C 0000 0000             		movea.l	#Map_obj26,a1
0000B480 D000                       		add.b	d0,d0
0000B482 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000B486 5249                       		addq.w	#1,a1
0000B488 2149 0004                  		move.l	a1,4(a0)
0000B48C                            
0000B48C                            Obj2E_Move:				; XREF: Obj2E_Index
0000B48C 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B490 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000B494 6100 0000                  		bsr.w	SpeedToPos
0000B498 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B49E 4E75                       		rts	
0000B4A0                            ; ===========================================================================
0000B4A0                            
0000B4A0                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000B4A0 5428 0024                  		addq.b	#2,$24(a0)
0000B4A4 317C 001D 001E             		move.w	#29,$1E(a0)
0000B4AA 1028 001C                  		move.b	$1C(a0),d0
0000B4AE 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000B4B2 6600                       		bne.s	Obj2E_ChkSonic
0000B4B4 4E75                       		rts			; Eggman monitor does nothing
0000B4B6                            ; ===========================================================================
0000B4B6                            
0000B4B6                            Obj2E_ChkSonic:
0000B4B6 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000B4BA 6600                       		bne.s	Obj2E_ChkShoes
0000B4BC                            
0000B4BC                            ExtraLife:
0000B4BC 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B4C2 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B4C8 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B4CC 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B4D0 303C 0088                  		move.w	#$88,d0
0000B4D4 4EF9 0000 11F0             		jmp	(PlaySound).l	; play extra life music
0000B4DA                            ; ===========================================================================
0000B4DA                            
0000B4DA                            Obj2E_ChkShoes:
0000B4DA 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000B4DE 6600                       		bne.s	Obj2E_ChkShield
0000B4E0 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000B4E6 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000B4EC 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000B4F2 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000B4F8 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000B4FE 303C 00E2                  		move.w	#$E2,d0
0000B502 4EF9 0000 11F0             		jmp	(PlaySound).l	; Speed	up the music
0000B508                            ; ===========================================================================
0000B508                            
0000B508                            Obj2E_ChkShield:
0000B508 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000B50C 6600                       		bne.s	Obj2E_ChkInvinc
0000B50E 4A38 FE2C                  		tst.b	($FFFFFE2C).w
0000B512 6600                       		bne.s	@alreadyshield
0000B514 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B51A 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B520 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000B526 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000B52C                            
0000B52C                            	@alreadyshield:
0000B52C 303C 00AF                  		move.w	#$AF,d0
0000B530 4EF9 0000 11F0             		jmp	(PlaySound).l	; play shield sound
0000B536                            ; ===========================================================================
0000B536                            
0000B536                            Obj2E_ChkInvinc:
0000B536 0C00 0005                  		cmpi.b #5,d0 ; does monitor contain invincibility?
0000B53A 6600 0000                  		bne.w Obj2E_ChkRings
0000B53E 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B544 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B54A 11FC 0001 FE2D             		move.b #1,($FFFFFE2D).w ; Set Invisibility to 1
0000B550 31FC 04B0 D032             		move.w #$4B0,($FFFFD032).w ; Set Invisibility timer to 4B0
0000B556 11FC 004A D200             		move.b #$4A,($FFFFD200).w ; load stars object ($3801)
0000B55C 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000B562 4A38 F7AA                  		tst.b ($FFFFF7AA).w ; is boss mode on?
0000B566 6600                       		bne.s DontPlayMusic ; If so, don't play music
0000B568 0C78 000C FE14             		cmpi.w #$C,($FFFFFE14).w ; Check if Sonic has air left
0000B56E 6300                       		bls.s DontPlayMusic ; If so, don't play music
0000B570 303C 0087                  		move.w #$87,d0 ; Load Invisibility music
0000B574 4EF9 0000 11F0             		jmp (PlaySound).l
0000B57A                            
0000B57A                            DontPlayMusic:
0000B57A 4E75                       		rts
0000B57C                            ; ===========================================================================
0000B57C                            
0000B57C                            Obj2E_NoMusic:
0000B57C 4E75                       		rts	
0000B57E                            ; ===========================================================================
0000B57E                            
0000B57E                            Obj2E_ChkRings:
0000B57E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000B582 6600                       		bne.s	Obj2E_ChkS
0000B584 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000B58A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000B590 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000B596 6500                       		bcs.s	Obj2E_RingSound
0000B598 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000B59E 6700 FF1C                  		beq.w	ExtraLife
0000B5A2 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000B5A8 6500                       		bcs.s	Obj2E_RingSound
0000B5AA 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000B5B0 6700 FF0A                  		beq.w	ExtraLife
0000B5B4                            
0000B5B4                            Obj2E_RingSound:
0000B5B4 303C 00B5                  		move.w	#$B5,d0
0000B5B8 4EF9 0000 11F0             		jmp	(PlaySound).l	; play ring sound
0000B5BE                            ; ===========================================================================
0000B5BE                            
0000B5BE                            Obj2E_ChkS:
0000B5BE 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000B5C2 6600                       		bne.s	Obj2E_ChkEnd
0000B5C4 4E71                       		nop	
0000B5C6                            
0000B5C6                            Obj2E_ChkEnd:
0000B5C6 4E75                       		rts			; 'S' and goggles monitors do nothing
0000B5C8                            ; ===========================================================================
0000B5C8                            
0000B5C8                            Obj2E_Delete:				; XREF: Obj2E_Index
0000B5C8 5368 001E                  		subq.w	#1,$1E(a0)
0000B5CC 6B00 0000                  		bmi.w	DeleteObject
0000B5D0 4E75                       		rts	
0000B5D2                            ; ---------------------------------------------------------------------------
0000B5D2                            ; Subroutine to	make the sides of a monitor solid
0000B5D2                            ; ---------------------------------------------------------------------------
0000B5D2                            
0000B5D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5D2                            
0000B5D2                            
0000B5D2                            Obj26_SolidSides:			; XREF: loc_A1EC
0000B5D2 43F8 D000                  		lea	($FFFFD000).w,a1
0000B5D6 3029 0008                  		move.w	8(a1),d0
0000B5DA 9068 0008                  		sub.w	8(a0),d0
0000B5DE D041                       		add.w	d1,d0
0000B5E0 6B00                       		bmi.s	loc_A4E6
0000B5E2 3601                       		move.w	d1,d3
0000B5E4 D643                       		add.w	d3,d3
0000B5E6 B043                       		cmp.w	d3,d0
0000B5E8 6200                       		bhi.s	loc_A4E6
0000B5EA 1629 0016                  		move.b	$16(a1),d3
0000B5EE 4883                       		ext.w	d3
0000B5F0 D443                       		add.w	d3,d2
0000B5F2 3629 000C                  		move.w	$C(a1),d3
0000B5F6 9668 000C                  		sub.w	$C(a0),d3
0000B5FA D642                       		add.w	d2,d3
0000B5FC 6B00                       		bmi.s	loc_A4E6
0000B5FE D442                       		add.w	d2,d2
0000B600 B642                       		cmp.w	d2,d3
0000B602 6400                       		bcc.s	loc_A4E6
0000B604 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B608 6B00                       		bmi.s	loc_A4E6
0000B60A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B610 6400                       		bcc.s	loc_A4E6
0000B612 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B616 6600                       		bne.s	loc_A4E6
0000B618 B240                       		cmp.w	d0,d1
0000B61A 6400                       		bcc.s	loc_A4DC
0000B61C D241                       		add.w	d1,d1
0000B61E 9041                       		sub.w	d1,d0
0000B620                            
0000B620                            loc_A4DC:
0000B620 0C43 0010                  		cmpi.w	#$10,d3
0000B624 6500                       		bcs.s	loc_A4EA
0000B626                            
0000B626                            loc_A4E2:
0000B626 7201                       		moveq	#1,d1
0000B628 4E75                       		rts	
0000B62A                            ; ===========================================================================
0000B62A                            
0000B62A                            loc_A4E6:
0000B62A 7200                       		moveq	#0,d1
0000B62C 4E75                       		rts	
0000B62E                            ; ===========================================================================
0000B62E                            
0000B62E                            loc_A4EA:
0000B62E 7200                       		moveq	#0,d1
0000B630 1228 0019                  		move.b	$19(a0),d1
0000B634 5841                       		addq.w	#4,d1
0000B636 3401                       		move.w	d1,d2
0000B638 D442                       		add.w	d2,d2
0000B63A D269 0008                  		add.w	8(a1),d1
0000B63E 9268 0008                  		sub.w	8(a0),d1
0000B642 6BE2                       		bmi.s	loc_A4E2
0000B644 B242                       		cmp.w	d2,d1
0000B646 64DE                       		bcc.s	loc_A4E2
0000B648 72FF                       		moveq	#-1,d1
0000B64A 4E75                       		rts	
0000B64C                            ; End of function Obj26_SolidSides
0000B64C                            
0000B64C                            ; ===========================================================================
0000B64C                            Ani_obj26:
0000B64C                            	include "_anim\obj26.asm"
0000B64C                            ; ---------------------------------------------------------------------------
0000B64C                            ; Animation script - monitors
0000B64C                            ; ---------------------------------------------------------------------------
0000B64C 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B652 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B658 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B65E 0000                       		dc.w byte_A582-Ani_obj26
0000B660 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B666 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B672 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B67E 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B68A 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B696 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B6A2 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B6AE 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B6BA 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B6C6 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B6CE                            		even
0000B6CE                            		even
0000B6CE                            
0000B6CE                            ; ---------------------------------------------------------------------------
0000B6CE                            ; Sprite mappings - monitors
0000B6CE                            ; ---------------------------------------------------------------------------
0000B6CE                            Map_obj26:
0000B6CE                            	include "_maps\obj26.asm"
0000B6CE                            ; --------------------------------------------------------------------------------
0000B6CE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B6CE                            ; --------------------------------------------------------------------------------
0000B6CE                            
0000B6CE                            SME_XK1AB:	
0000B6CE 0000 0000                  		dc.w SME_XK1AB_18-SME_XK1AB, SME_XK1AB_1E-SME_XK1AB	
0000B6D2 0000 0000                  		dc.w SME_XK1AB_29-SME_XK1AB, SME_XK1AB_34-SME_XK1AB	
0000B6D6 0000 0000                  		dc.w SME_XK1AB_35-SME_XK1AB, SME_XK1AB_40-SME_XK1AB	
0000B6DA 0000 0000                  		dc.w SME_XK1AB_4B-SME_XK1AB, SME_XK1AB_56-SME_XK1AB	
0000B6DE 0000 0000                  		dc.w SME_XK1AB_61-SME_XK1AB, SME_XK1AB_6C-SME_XK1AB	
0000B6E2 0000 0000                  		dc.w SME_XK1AB_6D-SME_XK1AB, SME_XK1AB_6E-SME_XK1AB	
0000B6E6 01                         SME_XK1AB_18:	dc.b 1	
0000B6E7 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B6EC 02                         SME_XK1AB_1E:	dc.b 2	
0000B6ED F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000B6F2 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B6F7 02                         SME_XK1AB_29:	dc.b 2	
0000B6F8 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000B6FD EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B702 00                         SME_XK1AB_34:	dc.b 0	
0000B703 02                         SME_XK1AB_35:	dc.b 2	
0000B704 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000B709 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B70E 02                         SME_XK1AB_40:	dc.b 2	
0000B70F F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000B714 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B719 02                         SME_XK1AB_4B:	dc.b 2	
0000B71A F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000B71F EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B724 02                         SME_XK1AB_56:	dc.b 2	
0000B725 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000B72A EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B72F 02                         SME_XK1AB_61:	dc.b 2	
0000B730 F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
0000B735 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B73A 00                         SME_XK1AB_6C:	dc.b 0	
0000B73B 00                         SME_XK1AB_6D:	dc.b 0	
0000B73C 01                         SME_XK1AB_6E:	dc.b 1	
0000B73D FF0D 002C F0               		dc.b $FF, $D, 0, $2C, $F0	
0000B742                            		even
0000B742                            		even
0000B742                            
0000B742                            ; ===========================================================================
0000B742                            ; ---------------------------------------------------------------------------
0000B742                            ; Object 0E - Sonic on the title screen
0000B742                            ; ---------------------------------------------------------------------------
0000B742                            
0000B742                            Obj0E:					; XREF: Obj_Index
0000B742 7000                       		moveq	#0,d0
0000B744 1028 0024                  		move.b	$24(a0),d0
0000B748 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B74C 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B750                            ; ===========================================================================
0000B750 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B752 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B754 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B756 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B758                            ; ===========================================================================
0000B758                            
0000B758                            Obj0E_Main:				; XREF: Obj0E_Index
0000B758 5428 0024                  		addq.b	#2,$24(a0)
0000B75C 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B762 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B768 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B770 317C 0300 0002             		move.w	#$300,2(a0)
0000B776 117C 0001 0018             		move.b	#1,$18(a0)
0000B77C 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B782 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B788 6100 0000                  		bsr.w	AnimateSprite
0000B78C                            
0000B78C                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B78C 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B790 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B792 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B796 6000 0000                  		bra.w	DisplaySprite
0000B79A                            ; ===========================================================================
0000B79A                            
0000B79A                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B79A 4E75                       		rts	
0000B79C                            ; ===========================================================================
0000B79C                            
0000B79C                            Obj0E_Move:				; XREF: Obj0E_Index
0000B79C 5168 000A                  		subq.w	#8,$A(a0)
0000B7A0 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B7A6 6600                       		bne.s	Obj0E_Display
0000B7A8 5428 0024                  		addq.b	#2,$24(a0)
0000B7AC                            
0000B7AC                            Obj0E_Display:
0000B7AC 6000 0000                  		bra.w	DisplaySprite
0000B7B0                            ; ===========================================================================
0000B7B0 4E75                       		rts	
0000B7B2                            ; ===========================================================================
0000B7B2                            
0000B7B2                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B7B2 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B7B8 6100 0000                  		bsr.w	AnimateSprite
0000B7BC 6000 0000                  		bra.w	DisplaySprite
0000B7C0                            ; ===========================================================================
0000B7C0 4E75                       		rts	
0000B7C2                            ; ===========================================================================
0000B7C2                            ; ---------------------------------------------------------------------------
0000B7C2                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B7C2                            ; ---------------------------------------------------------------------------
0000B7C2                            
0000B7C2                            Obj0F:					; XREF: Obj_Index
0000B7C2 7000                       		moveq	#0,d0
0000B7C4 1028 0024                  		move.b	$24(a0),d0
0000B7C8 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B7CC 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B7D0 6000 0000                  		bra.w	DisplaySprite
0000B7D4                            ; ===========================================================================
0000B7D4 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B7D6 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B7D8 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B7DA                            ; ===========================================================================
0000B7DA                            
0000B7DA                            Obj0F_Main:				; XREF: Obj0F_Index
0000B7DA 5428 0024                  		addq.b	#2,$24(a0)
0000B7DE 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B7E4 317C 0130 000A             		move.w	#$130,$A(a0)
0000B7EA 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B7F2 317C 2200 0002             		move.w	#$2200,2(a0)
0000B7F8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B7FE 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B800 5428 0024                  		addq.b	#2,$24(a0)
0000B804 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B80A 6600                       		bne.s	locret_A6F8	; if not, branch
0000B80C 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B812 317C 0170 0008             		move.w	#$170,8(a0)
0000B818 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B81E                            
0000B81E                            locret_A6F8:				; XREF: Obj0F_Index
0000B81E 4E75                       		rts	
0000B820                            ; ===========================================================================
0000B820                            
0000B820                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B820 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B826 6000 0000                  		bra.w	AnimateSprite
0000B82A                            ; ===========================================================================
0000B82A                            Ani_obj0E:
0000B82A                            	include "_anim\obj0E.asm"
0000B82A                            ; ---------------------------------------------------------------------------
0000B82A                            ; Animation script - Sonic on the title screen
0000B82A                            ; ---------------------------------------------------------------------------
0000B82A 0000                       		dc.w byte_A706-Ani_obj0E
0000B82C 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B838                            		even
0000B838                            		even
0000B838                            
0000B838                            Ani_obj0F:
0000B838                            	include "_anim\obj0F.asm"
0000B838                            ; ---------------------------------------------------------------------------
0000B838                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B838                            ; ---------------------------------------------------------------------------
0000B838 0000                       		dc.w byte_A714-Ani_obj0F
0000B83A 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B83E                            		even
0000B83E                            		even
0000B83E                            
0000B83E                            ; ---------------------------------------------------------------------------
0000B83E                            ; Subroutine to	animate	a sprite using an animation script
0000B83E                            ; ---------------------------------------------------------------------------
0000B83E                            
0000B83E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B83E                            
0000B83E                            
0000B83E                            AnimateSprite:
0000B83E 7000                       		moveq	#0,d0
0000B840 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B844 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B848 6700                       		beq.s	Anim_Run	; if not, branch
0000B84A 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B84E 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B854 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B85A                            
0000B85A                            Anim_Run:
0000B85A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B85E 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B860 D040                       		add.w	d0,d0
0000B862 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B866 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B86A 7200                       		moveq	#0,d1
0000B86C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B870 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B874 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B876                            
0000B876                            Anim_Next:
0000B876 1200                       		move.b	d0,d1
0000B878 0200 001F                  		andi.b	#$1F,d0
0000B87C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B880 1028 0022                  		move.b	$22(a0),d0
0000B884 E719                       		rol.b	#3,d1
0000B886 B101                       		eor.b	d0,d1
0000B888 0201 0003                  		andi.b	#3,d1
0000B88C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B892 8328 0001                  		or.b	d1,1(a0)
0000B896 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B89A                            
0000B89A                            Anim_Wait:
0000B89A 4E75                       		rts	
0000B89C                            ; ===========================================================================
0000B89C                            
0000B89C                            Anim_End_FF:
0000B89C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B89E 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B8A0 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B8A6 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B8AA 60CA                       		bra.s	Anim_Next
0000B8AC                            ; ===========================================================================
0000B8AC                            
0000B8AC                            Anim_End_FE:
0000B8AC 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B8AE 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B8B0 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B8B4 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B8B8 9200                       		sub.b	d0,d1
0000B8BA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B8BE 60B6                       		bra.s	Anim_Next
0000B8C0                            ; ===========================================================================
0000B8C0                            
0000B8C0                            Anim_End_FD:
0000B8C0 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B8C2 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B8C4 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B8CA                            
0000B8CA                            Anim_End_FC:
0000B8CA 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B8CC 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B8CE 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B8D2                            
0000B8D2                            Anim_End_FB:
0000B8D2 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B8D4 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B8D6 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B8DC 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B8E0                            
0000B8E0                            Anim_End_FA:
0000B8E0 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B8E2 6600                       		bne.s	Anim_End	; if not, branch
0000B8E4 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B8E8                            
0000B8E8                            Anim_End:
0000B8E8 4E75                       		rts	
0000B8EA                            ; End of function AnimateSprite
0000B8EA                            
0000B8EA                            ; ===========================================================================
0000B8EA                            ; ---------------------------------------------------------------------------
0000B8EA                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B8EA                            ; ---------------------------------------------------------------------------
0000B8EA                            Map_obj0F:
0000B8EA                            	include "_maps\obj0F.asm"
0000B8EA                            ; ---------------------------------------------------------------------------
0000B8EA                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B8EA                            ; ---------------------------------------------------------------------------
0000B8EA 0000                       		dc.w byte_A7CD-Map_obj0F
0000B8EC 0000                       		dc.w byte_A7CC-Map_obj0F
0000B8EE 0000                       		dc.w byte_A7EB-Map_obj0F
0000B8F0 0000                       		dc.w byte_A882-Map_obj0F
0000B8F2 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B8F3 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B8F8 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B8FD 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B902 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B907 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B90C 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B911 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B912 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B917 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B91C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B921 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B926 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B92B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B930 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B935 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B93A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B93F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B944 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B949 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B94E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B953 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B958 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B95D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B962 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B967 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B96C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B971 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B976 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B97B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B980 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B985 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B98A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B98F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B994 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B999 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B99E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B9A3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B9A8 01                         byte_A882:	dc.b 1			; "TM"
0000B9A9 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B9AE                            		even
0000B9AE                            		even
0000B9AE                            
0000B9AE                            ; ---------------------------------------------------------------------------
0000B9AE                            ; Sprite mappings - Sonic on the title screen
0000B9AE                            ; ---------------------------------------------------------------------------
0000B9AE                            Map_obj0E:
0000B9AE                            	include "_maps\obj0E.asm"
0000B9AE                            ; ---------------------------------------------------------------------------
0000B9AE                            ; Sprite mappings - Sonic on the title screen
0000B9AE                            ; ---------------------------------------------------------------------------
0000B9AE 0000                       		dc.w byte_A898-Map_obj0E
0000B9B0 0000                       		dc.w byte_A8CB-Map_obj0E
0000B9B2 0000                       		dc.w byte_A917-Map_obj0E
0000B9B4 0000                       		dc.w byte_A96D-Map_obj0E
0000B9B6 0000                       		dc.w byte_A9AF-Map_obj0E
0000B9B8 0000                       		dc.w byte_A9E7-Map_obj0E
0000B9BA 0000                       		dc.w byte_AA47-Map_obj0E
0000B9BC 0000                       		dc.w byte_AAB1-Map_obj0E
0000B9BE 0A                         byte_A898:	dc.b $A
0000B9BF 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000B9C4 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000B9C9 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000B9CE 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000B9D3 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000B9D8 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000B9DD 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000B9E2 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000B9E7 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000B9EC 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000B9F1 0F                         byte_A8CB:	dc.b $F
0000B9F2 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000B9F7 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000B9FC 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000BA01 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000BA06 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000BA0B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BA10 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BA15 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BA1A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BA1F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BA24 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BA29 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BA2E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BA33 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BA38 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BA3D 11                         byte_A917:	dc.b $11
0000BA3E 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000BA43 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000BA48 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000BA4D 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000BA52 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000BA57 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000BA5C 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000BA61 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BA66 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BA6B 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BA70 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BA75 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BA7A 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BA7F 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BA84 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BA89 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BA8E 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BA93 0D                         byte_A96D:	dc.b $D
0000BA94 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000BA99 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000BA9E 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000BAA3 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000BAA8 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000BAAD 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000BAB2 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000BAB7 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000BABC 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000BAC1 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000BAC6 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000BACB 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000BAD0 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000BAD5 0B                         byte_A9AF:	dc.b $B
0000BAD6 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000BADB 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000BAE0 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000BAE5 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000BAEA 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000BAEF 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000BAF4 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000BAF9 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000BAFE 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000BB03 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000BB08 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000BB0D 13                         byte_A9E7:	dc.b $13
0000BB0E 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BB13 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BB18 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BB1D 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BB22 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BB27 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BB2C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BB31 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BB36 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BB3B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BB40 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BB45 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BB4A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BB4F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BB54 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BB59 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BB5E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BB63 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BB68 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BB6D 15                         byte_AA47:	dc.b $15
0000BB6E 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BB73 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BB78 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BB7D 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BB82 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BB87 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BB8C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BB91 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BB96 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BB9B 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BBA0 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BBA5 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BBAA 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BBAF 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BBB4 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BBB9 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BBBE 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BBC3 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BBC8 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BBCD 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BBD2 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BBD7 16                         byte_AAB1:	dc.b $16
0000BBD8 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000BBDD 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000BBE2 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000BBE7 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000BBEC 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000BBF1 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BBF6 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BBFB 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BC00 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BC05 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BC0A 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BC0F 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BC14 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BC19 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BC1E 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BC23 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BC28 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BC2D 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BC32 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BC37 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BC3C 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BC41 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BC46                            		even
0000BC46                            		even
0000BC46                            
0000BC46                            ; ===========================================================================
0000BC46                            ; ---------------------------------------------------------------------------
0000BC46                            ; Object 2B - Chopper enemy (GHZ)
0000BC46                            ; ---------------------------------------------------------------------------
0000BC46                            
0000BC46                            Obj2B:					; XREF: Obj_Index
0000BC46 7000                       		moveq	#0,d0
0000BC48 1028 0024                  		move.b	$24(a0),d0
0000BC4C 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000BC50 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000BC54 6000 0000                  		bra.w	MarkObjGone
0000BC58                            ; ===========================================================================
0000BC58 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000BC5A 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000BC5C                            ; ===========================================================================
0000BC5C                            
0000BC5C                            Obj2B_Main:				; XREF: Obj2B_Index
0000BC5C 5428 0024                  		addq.b	#2,$24(a0)
0000BC60 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000BC68 317C 047B 0002             		move.w	#$47B,2(a0)
0000BC6E 117C 0004 0001             		move.b	#4,1(a0)
0000BC74 117C 0004 0018             		move.b	#4,$18(a0)
0000BC7A 117C 0009 0020             		move.b	#9,$20(a0)
0000BC80 117C 0010 0019             		move.b	#$10,$19(a0)
0000BC86 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BC8C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000BC92                            
0000BC92                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000BC92 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000BC98 6100 FBA4                  		bsr.w	AnimateSprite
0000BC9C 6100 0000                  		bsr.w	SpeedToPos
0000BCA0 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000BCA6 3028 0030                  		move.w	$30(a0),d0
0000BCAA B068 000C                  		cmp.w	$C(a0),d0
0000BCAE 6400                       		bcc.s	Obj2B_ChgAni
0000BCB0 3140 000C                  		move.w	d0,$C(a0)
0000BCB4 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BCBA                            
0000BCBA                            Obj2B_ChgAni:
0000BCBA 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000BCC0 0440 00C0                  		subi.w	#$C0,d0
0000BCC4 B068 000C                  		cmp.w	$C(a0),d0
0000BCC8 6400                       		bcc.s	locret_ABB6
0000BCCA 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000BCD0 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000BCD4 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000BCD6 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000BCDC                            
0000BCDC                            locret_ABB6:
0000BCDC 4E75                       		rts	
0000BCDE                            ; ===========================================================================
0000BCDE                            Ani_obj2B:
0000BCDE                            	include "_anim\obj2B.asm"
0000BCDE                            ; ---------------------------------------------------------------------------
0000BCDE                            ; Animation script - Chopper enemy
0000BCDE                            ; ---------------------------------------------------------------------------
0000BCDE 0000                       		dc.w byte_ABBE-Ani_obj2B
0000BCE0 0000                       		dc.w byte_ABC2-Ani_obj2B
0000BCE2 0000                       		dc.w byte_ABC6-Ani_obj2B
0000BCE4 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000BCE8 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000BCEC 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000BCF0 00                         		even
0000BCF0 00                         		even
0000BCF0                            
0000BCF0                            ; ---------------------------------------------------------------------------
0000BCF0                            ; Sprite mappings - Chopper enemy (GHZ)
0000BCF0                            ; ---------------------------------------------------------------------------
0000BCF0                            Map_obj2B:
0000BCF0                            	include "_maps\obj2B.asm"
0000BCF0                            ; ---------------------------------------------------------------------------
0000BCF0                            ; Sprite mappings - Chopper enemy (GHZ)
0000BCF0                            ; ---------------------------------------------------------------------------
0000BCF0 0000                       		dc.w byte_ABCE-Map_obj2B
0000BCF2 0000                       		dc.w byte_ABD4-Map_obj2B
0000BCF4 01                         byte_ABCE:	dc.b 1
0000BCF5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000BCFA 01                         byte_ABD4:	dc.b 1
0000BCFB F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000BD00                            		even
0000BD00                            		even
0000BD00                            
0000BD00                            ; ===========================================================================
0000BD00                            ; ---------------------------------------------------------------------------
0000BD00                            ; Object 2C - Jaws enemy (LZ)
0000BD00                            ; ---------------------------------------------------------------------------
0000BD00                            
0000BD00                            Obj2C:					; XREF: Obj_Index
0000BD00 7000                       		moveq	#0,d0
0000BD02 1028 0024                  		move.b	$24(a0),d0
0000BD06 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000BD0A 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000BD0E                            ; ===========================================================================
0000BD0E 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000BD10 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000BD12                            ; ===========================================================================
0000BD12                            
0000BD12                            Obj2C_Main:				; XREF: Obj2C_Index
0000BD12 5428 0024                  		addq.b	#2,$24(a0)
0000BD16 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000BD1E 317C 2486 0002             		move.w	#$2486,2(a0)
0000BD24 0028 0004 0001             		ori.b	#4,1(a0)
0000BD2A 117C 000A 0020             		move.b	#$A,$20(a0)
0000BD30 117C 0004 0018             		move.b	#4,$18(a0)
0000BD36 117C 0010 0019             		move.b	#$10,$19(a0)
0000BD3C 7000                       		moveq	#0,d0
0000BD3E 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000BD42 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000BD44 5340                       		subq.w	#1,d0
0000BD46 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000BD4A 3140 0032                  		move.w	d0,$32(a0)
0000BD4E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000BD54 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000BD5A 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000BD5C 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000BD60                            
0000BD60                            Obj2C_Turn:				; XREF: Obj2C_Index
0000BD60 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000BD64 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000BD66 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000BD6C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000BD70 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000BD76 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BD7C                            
0000BD7C                            Obj2C_Animate:
0000BD7C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000BD82 6100 FABA                  		bsr.w	AnimateSprite
0000BD86 6100 0000                  		bsr.w	SpeedToPos
0000BD8A 6000 0000                  		bra.w	MarkObjGone
0000BD8E                            ; ===========================================================================
0000BD8E                            Ani_obj2C:
0000BD8E                            	include "_anim\obj2C.asm"
0000BD8E                            ; ---------------------------------------------------------------------------
0000BD8E                            ; Animation script - Jaws enemy
0000BD8E                            ; ---------------------------------------------------------------------------
0000BD8E 0000                       		dc.w byte_AC6A-Ani_obj2C
0000BD90 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000BD96                            		even
0000BD96                            		even
0000BD96                            
0000BD96                            ; ---------------------------------------------------------------------------
0000BD96                            ; Sprite mappings - Jaws enemy (LZ)
0000BD96                            ; ---------------------------------------------------------------------------
0000BD96                            Map_obj2C:
0000BD96                            	include "_maps\obj2C.asm"
0000BD96                            mapjaws:
0000BD96 0000                       mapjaws_0: 	dc.w mapjaws_8-mapjaws
0000BD98 0000                       mapjaws_2: 	dc.w mapjaws_13-mapjaws
0000BD9A 0000                       mapjaws_4: 	dc.w mapjaws_1E-mapjaws
0000BD9C 0000                       mapjaws_6: 	dc.w mapjaws_29-mapjaws
0000BD9E 02                         mapjaws_8: 	dc.b $2
0000BD9F F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000BDA4 F505 4018 10               	dc.b $F5, $5, $40, $18, $10
0000BDA9 02                         mapjaws_13: 	dc.b $2
0000BDAA F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000BDAF F505 401C 10               	dc.b $F5, $5, $40, $1C, $10
0000BDB4 02                         mapjaws_1E: 	dc.b $2
0000BDB5 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000BDBA F505 5018 10               	dc.b $F5, $5, $50, $18, $10
0000BDBF 02                         mapjaws_29: 	dc.b $2
0000BDC0 F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000BDC5 F505 501C 10               	dc.b $F5, $5, $50, $1C, $10
0000BDCA                            	even
0000BDCA                            	even
0000BDCA                            
0000BDCA                            ; ===========================================================================
0000BDCA                            ; ---------------------------------------------------------------------------
0000BDCA                            ; Object 2D - Burrobot enemy (LZ)
0000BDCA                            ; ---------------------------------------------------------------------------
0000BDCA                            
0000BDCA                            Obj2D:					; XREF: Obj_Index
0000BDCA 7000                       		moveq	#0,d0
0000BDCC 1028 0024                  		move.b	$24(a0),d0
0000BDD0 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000BDD4 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000BDD8                            ; ===========================================================================
0000BDD8 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000BDDA 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000BDDC                            ; ===========================================================================
0000BDDC                            
0000BDDC                            Obj2D_Main:				; XREF: Obj2D_Index
0000BDDC 5428 0024                  		addq.b	#2,$24(a0)
0000BDE0 117C 0013 0016             		move.b	#$13,$16(a0)
0000BDE6 117C 0008 0017             		move.b	#8,$17(a0)
0000BDEC 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000BDF4 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000BDFA 0028 0004 0001             		ori.b	#4,1(a0)
0000BE00 117C 0004 0018             		move.b	#4,$18(a0)
0000BE06 117C 0005 0020             		move.b	#5,$20(a0)
0000BE0C 117C 000C 0019             		move.b	#$C,$19(a0)
0000BE12 5028 0025                  		addq.b	#8,$25(a0)	; run "Obj2D_ChkSonic" routine
0000BE16 117C 0004 001C             		move.b	#4,$1C(a0)
0000BE1C                            
0000BE1C                            Obj2D_Action:				; XREF: Obj2D_Index
0000BE1C 7000                       		moveq	#0,d0
0000BE1E 1028 0025                  		move.b	$25(a0),d0
0000BE22 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000BE26 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000BE2A 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000BE30 6100 FA0C                  		bsr.w	AnimateSprite
0000BE34 6000 0000                  		bra.w	MarkObjGone
0000BE38                            ; ===========================================================================
0000BE38 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000BE3A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000BE3C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000BE3E 0000                       		dc.w Obj2D_Jump2-Obj2D_Index2
0000BE40 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000BE42                            ; ===========================================================================
0000BE42                            
0000BE42                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000BE42 5368 0030                  		subq.w	#1,$30(a0)
0000BE46 6A00                       		bpl.s	locret_AD42
0000BE48 5428 0025                  		addq.b	#2,$25(a0)
0000BE4C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BE52 317C 0080 0010             		move.w	#$80,$10(a0)
0000BE58 117C 0001 001C             		move.b	#1,$1C(a0)
0000BE5E 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000BE64 6700                       		beq.s	locret_AD42
0000BE66 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000BE6A                            
0000BE6A                            locret_AD42:
0000BE6A 4E75                       		rts	
0000BE6C                            ; ===========================================================================
0000BE6C                            
0000BE6C                            Obj2D_Move:				; XREF: Obj2D_Index2
0000BE6C 5368 0030                  		subq.w	#1,$30(a0)
0000BE70 6B00                       		bmi.s	loc_AD84
0000BE72 6100 0000                  		bsr.w	SpeedToPos
0000BE76 0868 0000 0032             		bchg	#0,$32(a0)
0000BE7C 6600                       		bne.s	loc_AD78
0000BE7E 3628 0008                  		move.w	8(a0),d3
0000BE82 0643 000C                  		addi.w	#$C,d3
0000BE86 0828 0000 0022             		btst	#0,$22(a0)
0000BE8C 6600                       		bne.s	loc_AD6A
0000BE8E 0443 0018                  		subi.w	#$18,d3
0000BE92                            
0000BE92                            loc_AD6A:
0000BE92 4EB9 0000 0000             		jsr	ObjHitFloor2
0000BE98 0C41 000C                  		cmpi.w	#$C,d1
0000BE9C 6C00                       		bge.s	loc_AD84
0000BE9E 4E75                       		rts	
0000BEA0                            ; ===========================================================================
0000BEA0                            
0000BEA0                            loc_AD78:				; XREF: Obj2D_Move
0000BEA0 4EB9 0000 0000             		jsr	ObjHitFloor
0000BEA6 D368 000C                  		add.w	d1,$C(a0)
0000BEAA 4E75                       		rts	
0000BEAC                            ; ===========================================================================
0000BEAC                            
0000BEAC                            loc_AD84:				; XREF: Obj2D_Move
0000BEAC 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000BEB2 6700                       		beq.s	loc_ADA4
0000BEB4 5528 0025                  		subq.b	#2,$25(a0)
0000BEB8 317C 003B 0030             		move.w	#$3B,$30(a0)
0000BEBE 317C 0000 0010             		move.w	#0,$10(a0)
0000BEC4 117C 0000 001C             		move.b	#0,$1C(a0)
0000BECA 4E75                       		rts	
0000BECC                            ; ===========================================================================
0000BECC                            
0000BECC                            loc_ADA4:
0000BECC 5428 0025                  		addq.b	#2,$25(a0)
0000BED0 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BED6 117C 0002 001C             		move.b	#2,$1C(a0)
0000BEDC 4E75                       		rts	
0000BEDE                            ; ===========================================================================
0000BEDE                            
0000BEDE                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000BEDE 6100 0000                  		bsr.w	SpeedToPos
0000BEE2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000BEE8 6B00                       		bmi.s	locret_ADF0
0000BEEA 117C 0003 001C             		move.b	#3,$1C(a0)
0000BEF0 4EB9 0000 0000             		jsr	ObjHitFloor
0000BEF6 4A41                       		tst.w	d1
0000BEF8 6A00                       		bpl.s	locret_ADF0
0000BEFA D368 000C                  		add.w	d1,$C(a0)
0000BEFE 317C 0000 0012             		move.w	#0,$12(a0)
0000BF04 117C 0001 001C             		move.b	#1,$1C(a0)
0000BF0A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BF10 5528 0025                  		subq.b	#2,$25(a0)
0000BF14 6000 0000                  		bra.w	Obj2D_ChkSonic2
0000BF18                            ; ===========================================================================
0000BF18                            
0000BF18                            Obj2D_Jump2:				; XREF: Obj2D_Index2
0000BF18 6100 0000                  		bsr.w	SpeedToPos
0000BF1C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000BF22 5368 0030                  		subq.w	#1,$30(a0)
0000BF26 6A00                       		bpl.s	locret_ADF0
0000BF28 117C 0002 001C             		move.b	#2,$1C(a0)
0000BF2E 5528 0025                  		subq.b	#2,$25(a0)
0000BF32                            
0000BF32                            locret_ADF0:
0000BF32 4E75                       		rts	
0000BF34                            ; ===========================================================================
0000BF34                            
0000BF34                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000BF34 343C 0060                  		move.w	#$60,d2
0000BF38 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000BF3C 6400                       		bcc.s	locret_AE20
0000BF3E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000BF42 9068 000C                  		sub.w	$C(a0),d0
0000BF46 6400                       		bcc.s	locret_AE20
0000BF48 0C40 FF80                  		cmpi.w	#-$80,d0
0000BF4C 6500                       		bcs.s	locret_AE20
0000BF4E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BF52 6600                       		bne.s	locret_AE20
0000BF54 5528 0025                  		subq.b	#2,$25(a0)
0000BF58 317C 0004 0030             		move.w	#4,$30(a0)
0000BF5E 3141 0010                  		move.w	d1,$10(a0)
0000BF62 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BF68                            
0000BF68                            locret_AE20:
0000BF68 4E75                       		rts	
0000BF6A                            
0000BF6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF6A                            
0000BF6A                            
0000BF6A                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000BF6A 323C 0080                  		move.w	#$80,d1
0000BF6E 08E8 0000 0022             		bset	#0,$22(a0)
0000BF74 3038 D008                  		move.w	($FFFFD008).w,d0
0000BF78 9068 0008                  		sub.w	8(a0),d0
0000BF7C 6400                       		bcc.s	loc_AE40
0000BF7E 4440                       		neg.w	d0
0000BF80 4441                       		neg.w	d1
0000BF82 08A8 0000 0022             		bclr	#0,$22(a0)
0000BF88                            
0000BF88                            loc_AE40:
0000BF88 B042                       		cmp.w	d2,d0
0000BF8A 4E75                       		rts	
0000BF8C                            ; End of function Obj2D_ChkSonic2
0000BF8C                            
0000BF8C                            ; ===========================================================================
0000BF8C                            Ani_obj2D:
0000BF8C                            	include "_anim\obj2D.asm"
0000BF8C                            ; ---------------------------------------------------------------------------
0000BF8C                            ; Animation script - Burrobot enemy
0000BF8C                            ; ---------------------------------------------------------------------------
0000BF8C 0000                       		dc.w byte_AE4C-Ani_obj2D
0000BF8E 0000                       		dc.w byte_AE50-Ani_obj2D
0000BF90 0000                       		dc.w byte_AE54-Ani_obj2D
0000BF92 0000                       		dc.w byte_AE58-Ani_obj2D
0000BF94 0000                       		dc.w byte_AE542-Ani_obj2D
0000BF96 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000BF9A 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000BF9E 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000BFA2 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000BFA5 0307 08FF                  byte_AE542:	dc.b 3,	7, 8, $FF
0000BFAA 00                         		even
0000BFAA 00                         		even
0000BFAA                            
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA                            ; Sprite mappings - Burrobot enemy (LZ)
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA                            Map_obj2D:
0000BFAA                            	include "_maps\obj2D.asm"
0000BFAA                            burromap:
0000BFAA 0000                       burromap_0: 	dc.w burromap_12-burromap
0000BFAC 0000                       burromap_2: 	dc.w burromap_1D-burromap
0000BFAE 0000                       burromap_4: 	dc.w burromap_28-burromap
0000BFB0 0000                       burromap_6: 	dc.w burromap_33-burromap
0000BFB2 0000                       burromap_8: 	dc.w burromap_3E-burromap
0000BFB4 0000                       burromap_A: 	dc.w burromap_49-burromap
0000BFB6 0000                       burromap_C: 	dc.w burromap_54-burromap
0000BFB8 0000                       burromap_E: 	dc.w burromap_5F-burromap
0000BFBA 0000                       burromap_10: 	dc.w burromap_65-burromap
0000BFBC 02                         burromap_12: 	dc.b $2
0000BFBD EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0000BFC2 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000BFC7 02                         burromap_1D: 	dc.b $2
0000BFC8 EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000BFCD 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
0000BFD2 02                         burromap_28: 	dc.b $2
0000BFD3 E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000BFD8 000A 0027 F4               	dc.b $0, $A, $0, $27, $F4
0000BFDD 02                         burromap_33: 	dc.b $2
0000BFDE E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000BFE3 000A 0039 F4               	dc.b $0, $A, $0, $39, $F4
0000BFE8 02                         burromap_3E: 	dc.b $2
0000BFE9 E80A 000F F0               	dc.b $E8, $A, $0, $F, $F0
0000BFEE 000A 0042 F4               	dc.b $0, $A, $0, $42, $F4
0000BFF3 02                         burromap_49: 	dc.b $2
0000BFF4 F406 004B E8               	dc.b $F4, $6, $0, $4B, $E8
0000BFF9 F40A 0051 F8               	dc.b $F4, $A, $0, $51, $F8
0000BFFE 02                         burromap_54: 	dc.b $2
0000BFFF EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C004 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C009 01                         burromap_5F: 	dc.b $1
0000C00A E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C00F 01                         burromap_65: 	dc.b $1
0000C010 E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C016 00                         	even
0000C016 00                         	even
0000C016                            
0000C016                            ; ===========================================================================
0000C016                            ; ---------------------------------------------------------------------------
0000C016                            ; Object 2F - large moving platforms (MZ)
0000C016                            ; ---------------------------------------------------------------------------
0000C016                            
0000C016                            Obj2F:					; XREF: Obj_Index
0000C016 7000                       		moveq	#0,d0
0000C018 1028 0024                  		move.b	$24(a0),d0
0000C01C 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C020 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C024                            ; ===========================================================================
0000C024 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C026 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C028                            
0000C028 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C02A 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C02C 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C02E 0140                       		dc.b 1,	$40
0000C030 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C032 0220                       		dc.b 2,	$20
0000C034                            ; ===========================================================================
0000C034                            
0000C034                            Obj2F_Main:				; XREF: Obj2F_Index
0000C034 5428 0024                  		addq.b	#2,$24(a0)
0000C038 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C040 317C C000 0002             		move.w	#$C000,2(a0)
0000C046 117C 0004 0001             		move.b	#4,1(a0)
0000C04C 117C 0005 0018             		move.b	#5,$18(a0)
0000C052 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C058 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C05E 7000                       		moveq	#0,d0
0000C060 1028 0028                  		move.b	$28(a0),d0
0000C064 E448                       		lsr.w	#2,d0
0000C066 0240 001C                  		andi.w	#$1C,d0
0000C06A 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C06E 3019                       		move.w	(a1)+,d0
0000C070 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C074 214A 0030                  		move.l	a2,$30(a0)
0000C078 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C07C 1151 0019                  		move.b	(a1),$19(a0)
0000C080 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C086 117C 0040 0016             		move.b	#$40,$16(a0)
0000C08C 08E8 0004 0001             		bset	#4,1(a0)
0000C092                            
0000C092                            Obj2F_Action:				; XREF: Obj2F_Index
0000C092 6100 0000                  		bsr.w	Obj2F_Types
0000C096 4A28 0025                  		tst.b	$25(a0)
0000C09A 6700                       		beq.s	Obj2F_Solid
0000C09C 7200                       		moveq	#0,d1
0000C09E 1228 0019                  		move.b	$19(a0),d1
0000C0A2 0641 000B                  		addi.w	#$B,d1
0000C0A6 6100 C5DC                  		bsr.w	ExitPlatform
0000C0AA 0829 0003 0022             		btst	#3,$22(a1)
0000C0B0 6600 0000                  		bne.w	Obj2F_Slope
0000C0B4 4228 0025                  		clr.b	$25(a0)
0000C0B8 6000                       		bra.s	Obj2F_Display
0000C0BA                            ; ===========================================================================
0000C0BA                            
0000C0BA                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C0BA 7200                       		moveq	#0,d1
0000C0BC 1228 0019                  		move.b	$19(a0),d1
0000C0C0 0641 000B                  		addi.w	#$B,d1
0000C0C4 2468 0030                  		movea.l	$30(a0),a2
0000C0C8 3428 0008                  		move.w	8(a0),d2
0000C0CC 6100 D58C                  		bsr.w	SlopeObject2
0000C0D0 6000                       		bra.s	Obj2F_Display
0000C0D2                            ; ===========================================================================
0000C0D2                            
0000C0D2                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C0D2 7200                       		moveq	#0,d1
0000C0D4 1228 0019                  		move.b	$19(a0),d1
0000C0D8 0641 000B                  		addi.w	#$B,d1
0000C0DC 343C 0020                  		move.w	#$20,d2
0000C0E0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C0E6 6600                       		bne.s	loc_AF8E
0000C0E8 343C 0030                  		move.w	#$30,d2
0000C0EC                            
0000C0EC                            loc_AF8E:
0000C0EC 2468 0030                  		movea.l	$30(a0),a2
0000C0F0 6100 0000                  		bsr.w	SolidObject2F
0000C0F4                            
0000C0F4                            Obj2F_Display:				; XREF: Obj2F_Action
0000C0F4 6100 0000                  		bsr.w	DisplaySprite
0000C0F8 6000 0000                  		bra.w	Obj2F_ChkDel
0000C0FC                            
0000C0FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0FC                            
0000C0FC                            
0000C0FC                            Obj2F_Types:				; XREF: Obj2F_Action
0000C0FC 7000                       		moveq	#0,d0
0000C0FE 1028 0028                  		move.b	$28(a0),d0
0000C102 0240 0007                  		andi.w	#7,d0
0000C106 D040                       		add.w	d0,d0
0000C108 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C10C 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C110                            ; End of function Obj2F_Types
0000C110                            
0000C110                            ; ===========================================================================
0000C110 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C112 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C114 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C116 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C118 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C11A 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C11C                            ; ===========================================================================
0000C11C                            
0000C11C                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C11C 4E75                       		rts			; type 00 platform doesn't move
0000C11E                            ; ===========================================================================
0000C11E                            
0000C11E                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C11E 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C122 323C 0020                  		move.w	#$20,d1
0000C126 6000                       		bra.s	Obj2F_Move
0000C128                            ; ===========================================================================
0000C128                            
0000C128                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C128 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C12C 323C 0030                  		move.w	#$30,d1
0000C130 6000                       		bra.s	Obj2F_Move
0000C132                            ; ===========================================================================
0000C132                            
0000C132                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C132 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C136 323C 0040                  		move.w	#$40,d1
0000C13A 6000                       		bra.s	Obj2F_Move
0000C13C                            ; ===========================================================================
0000C13C                            
0000C13C                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C13C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C140 323C 0060                  		move.w	#$60,d1
0000C144                            
0000C144                            Obj2F_Move:
0000C144 0828 0003 0028             		btst	#3,$28(a0)
0000C14A 6700                       		beq.s	loc_AFF2
0000C14C 4440                       		neg.w	d0
0000C14E D041                       		add.w	d1,d0
0000C150                            
0000C150                            loc_AFF2:
0000C150 3228 002C                  		move.w	$2C(a0),d1
0000C154 9240                       		sub.w	d0,d1
0000C156 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C15A 4E75                       		rts	
0000C15C                            ; ===========================================================================
0000C15C                            
0000C15C                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C15C 1028 0034                  		move.b	$34(a0),d0
0000C160 4A28 0025                  		tst.b	$25(a0)
0000C164 6600                       		bne.s	loc_B010
0000C166 5500                       		subq.b	#2,d0
0000C168 6400                       		bcc.s	loc_B01C
0000C16A 7000                       		moveq	#0,d0
0000C16C 6000                       		bra.s	loc_B01C
0000C16E                            ; ===========================================================================
0000C16E                            
0000C16E                            loc_B010:
0000C16E 5800                       		addq.b	#4,d0
0000C170 0C00 0040                  		cmpi.b	#$40,d0
0000C174 6500                       		bcs.s	loc_B01C
0000C176 103C 0040                  		move.b	#$40,d0
0000C17A                            
0000C17A                            loc_B01C:
0000C17A 1140 0034                  		move.b	d0,$34(a0)
0000C17E 4EB9 0000 29CC             		jsr	(CalcSine).l
0000C184 E848                       		lsr.w	#4,d0
0000C186 3200                       		move.w	d0,d1
0000C188 D068 002C                  		add.w	$2C(a0),d0
0000C18C 3140 000C                  		move.w	d0,$C(a0)
0000C190 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C196 6600                       		bne.s	loc_B07A
0000C198 4A28 0035                  		tst.b	$35(a0)
0000C19C 6600                       		bne.s	loc_B07A
0000C19E 117C 0001 0035             		move.b	#1,$35(a0)
0000C1A4 6100 0000                  		bsr.w	SingleObjLoad2
0000C1A8 6600                       		bne.s	loc_B07A
0000C1AA 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000C1AE 3368 0008 0008             		move.w	8(a0),8(a1)
0000C1B4 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C1BA 5069 002C                  		addq.w	#8,$2C(a1)
0000C1BE 5769 002C                  		subq.w	#3,$2C(a1)
0000C1C2 0469 0040 0008             		subi.w	#$40,8(a1)
0000C1C8 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C1CE 2348 0038                  		move.l	a0,$38(a1)
0000C1D2 2448                       		movea.l	a0,a2
0000C1D4 6100                       		bsr.s	sub_B09C
0000C1D6                            
0000C1D6                            loc_B07A:
0000C1D6 7400                       		moveq	#0,d2
0000C1D8 45E8 0036                  		lea	$36(a0),a2
0000C1DC 141A                       		move.b	(a2)+,d2
0000C1DE 5302                       		subq.b	#1,d2
0000C1E0 6500                       		bcs.s	locret_B09A
0000C1E2                            
0000C1E2                            loc_B086:
0000C1E2 7000                       		moveq	#0,d0
0000C1E4 101A                       		move.b	(a2)+,d0
0000C1E6 ED48                       		lsl.w	#6,d0
0000C1E8 0640 D000                  		addi.w	#-$3000,d0
0000C1EC 3240                       		movea.w	d0,a1
0000C1EE 3341 003C                  		move.w	d1,$3C(a1)
0000C1F2 51CA FFEE                  		dbf	d2,loc_B086
0000C1F6                            
0000C1F6                            locret_B09A:
0000C1F6 4E75                       		rts	
0000C1F8                            
0000C1F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C1F8                            
0000C1F8                            
0000C1F8                            sub_B09C:
0000C1F8 45EA 0036                  		lea	$36(a2),a2
0000C1FC 7000                       		moveq	#0,d0
0000C1FE 1012                       		move.b	(a2),d0
0000C200 5212                       		addq.b	#1,(a2)
0000C202 45F2 0001                  		lea	1(a2,d0.w),a2
0000C206 3009                       		move.w	a1,d0
0000C208 0440 D000                  		subi.w	#-$3000,d0
0000C20C EC48                       		lsr.w	#6,d0
0000C20E 0240 007F                  		andi.w	#$7F,d0
0000C212 1480                       		move.b	d0,(a2)
0000C214 4E75                       		rts	
0000C216                            ; End of function sub_B09C
0000C216                            
0000C216                            ; ===========================================================================
0000C216                            
0000C216                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C216 4A28 0035                  		tst.b	$35(a0)
0000C21A 6700                       		beq.s	loc_B0C6
0000C21C 4A28 0001                  		tst.b	1(a0)
0000C220 6A00                       		bpl.s	Obj2F_DelFlames
0000C222                            
0000C222                            loc_B0C6:
0000C222 3028 002A                  		move.w	$2A(a0),d0
0000C226 0240 FF80                  		andi.w	#$FF80,d0
0000C22A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C22E 0441 0080                  		subi.w	#$80,d1
0000C232 0241 FF80                  		andi.w	#$FF80,d1
0000C236 9041                       		sub.w	d1,d0
0000C238 0C40 0280                  		cmpi.w	#$280,d0
0000C23C 6300                       		bls.s	Obj2F_NoDel
0000C23E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C242 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000C246 3440                       		movea.w	d0,a2	; load address into a2
0000C248 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C24C 6000 0000                  		bra.w	DeleteObject	; and delete object
0000C250                            
0000C250                            Obj2F_NoDel:
0000C250 4E75                       		rts	
0000C252                            ; ===========================================================================
0000C252                            
0000C252                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C252 7400                       		moveq	#0,d2
0000C254                            
0000C254                            loc_B0E8:
0000C254 45E8 0036                  		lea	$36(a0),a2
0000C258 1412                       		move.b	(a2),d2
0000C25A 421A                       		clr.b	(a2)+
0000C25C 5302                       		subq.b	#1,d2
0000C25E 6500                       		bcs.s	locret_B116
0000C260                            
0000C260                            loc_B0F4:
0000C260 7000                       		moveq	#0,d0
0000C262 1012                       		move.b	(a2),d0
0000C264 421A                       		clr.b	(a2)+
0000C266 ED48                       		lsl.w	#6,d0
0000C268 0640 D000                  		addi.w	#-$3000,d0
0000C26C 3240                       		movea.w	d0,a1
0000C26E 6100 0000                  		bsr.w	DeleteObject2
0000C272 51CA FFEC                  		dbf	d2,loc_B0F4
0000C276 117C 0000 0035             		move.b	#0,$35(a0)
0000C27C 117C 0000 0034             		move.b	#0,$34(a0)
0000C282                            
0000C282                            locret_B116:
0000C282 4E75                       		rts	
0000C284                            ; ===========================================================================
0000C284                            ; ---------------------------------------------------------------------------
0000C284                            ; Collision data for large moving platforms (MZ)
0000C284                            ; ---------------------------------------------------------------------------
0000C284                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C2D0                            		even
0000C2D0                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C2FC                            		even
0000C2FC                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C348                            		even
0000C348                            ; ===========================================================================
0000C348                            ; ---------------------------------------------------------------------------
0000C348                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C348                            ; (appears when	you walk on sinking platforms)
0000C348                            ; ---------------------------------------------------------------------------
0000C348                            
0000C348                            Obj35:					; XREF: Obj_Index
0000C348 7000                       		moveq	#0,d0
0000C34A 1028 0024                  		move.b	$24(a0),d0
0000C34E 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C352 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C356                            ; ===========================================================================
0000C356 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C358 0000                       		dc.w loc_B238-Obj35_Index
0000C35A 0000                       		dc.w Obj35_Move-Obj35_Index
0000C35C                            ; ===========================================================================
0000C35C                            
0000C35C                            Obj35_Main:				; XREF: Obj35_Index
0000C35C 5428 0024                  		addq.b	#2,$24(a0)
0000C360 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C368 317C 0345 0002             		move.w	#$345,2(a0)
0000C36E 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C374 117C 0004 0001             		move.b	#4,1(a0)
0000C37A 117C 0001 0018             		move.b	#1,$18(a0)
0000C380 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C386 117C 0008 0019             		move.b	#8,$19(a0)
0000C38C 303C 00C8                  		move.w	#$C8,d0
0000C390 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flame sound
0000C396 4A28 0028                  		tst.b	$28(a0)
0000C39A 6700                       		beq.s	loc_B238
0000C39C 5428 0024                  		addq.b	#2,$24(a0)
0000C3A0 6000 0000                  		bra.w	Obj35_Move
0000C3A4                            ; ===========================================================================
0000C3A4                            
0000C3A4                            loc_B238:				; XREF: Obj35_Index
0000C3A4 2268 0030                  		movea.l	$30(a0),a1
0000C3A8 3228 0008                  		move.w	8(a0),d1
0000C3AC 9268 002A                  		sub.w	$2A(a0),d1
0000C3B0 0641 000C                  		addi.w	#$C,d1
0000C3B4 3001                       		move.w	d1,d0
0000C3B6 E248                       		lsr.w	#1,d0
0000C3B8 1031 0000                  		move.b	(a1,d0.w),d0
0000C3BC 4440                       		neg.w	d0
0000C3BE D068 002C                  		add.w	$2C(a0),d0
0000C3C2 3400                       		move.w	d0,d2
0000C3C4 D068 003C                  		add.w	$3C(a0),d0
0000C3C8 3140 000C                  		move.w	d0,$C(a0)
0000C3CC 0C41 0084                  		cmpi.w	#$84,d1
0000C3D0 6400                       		bcc.s	loc_B2B0
0000C3D2 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C3DA 0C41 0080                  		cmpi.w	#$80,d1
0000C3DE 6400                       		bcc.s	loc_B2B0
0000C3E0 2028 0008                  		move.l	8(a0),d0
0000C3E4 0680 0008 0000             		addi.l	#$80000,d0
0000C3EA 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000C3F0 6600                       		bne.s	loc_B2B0
0000C3F2 6100 0000                  		bsr.w	SingleObjLoad2
0000C3F6 6600                       		bne.s	loc_B2B0
0000C3F8 12BC 0035                  		move.b	#$35,0(a1)
0000C3FC 3368 0008 0008             		move.w	8(a0),8(a1)
0000C402 3342 002C                  		move.w	d2,$2C(a1)
0000C406 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000C40C 137C 0001 0028             		move.b	#1,$28(a1)
0000C412 2468 0038                  		movea.l	$38(a0),a2
0000C416 6100 FDE0                  		bsr.w	sub_B09C
0000C41A                            
0000C41A                            loc_B2B0:
0000C41A 6000                       		bra.s	Obj35_Animate
0000C41C                            ; ===========================================================================
0000C41C                            
0000C41C                            Obj35_Move:				; XREF: Obj35_Index
0000C41C 3028 002C                  		move.w	$2C(a0),d0
0000C420 D068 003C                  		add.w	$3C(a0),d0
0000C424 3140 000C                  		move.w	d0,$C(a0)
0000C428                            
0000C428                            Obj35_Animate:				; XREF: loc_B238
0000C428 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000C42E 6100 F40E                  		bsr.w	AnimateSprite
0000C432 6000 0000                  		bra.w	DisplaySprite
0000C436                            ; ===========================================================================
0000C436                            Ani_obj35:
0000C436                            	include "_anim\obj35.asm"
0000C436                            ; ---------------------------------------------------------------------------
0000C436                            ; Animation script - fireball that sits on the	floor (MZ)
0000C436                            ; ---------------------------------------------------------------------------
0000C436 0000                       		dc.w byte_B2CE-Ani_obj35
0000C438 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000C43E                            		even
0000C43E                            		even
0000C43E                            
0000C43E                            ; ---------------------------------------------------------------------------
0000C43E                            ; Sprite mappings - large moving platforms (MZ)
0000C43E                            ; ---------------------------------------------------------------------------
0000C43E                            Map_obj2F:
0000C43E                            	include "_maps\obj2F.asm"
0000C43E                            ; ---------------------------------------------------------------------------
0000C43E                            ; Sprite mappings - large moving platforms (MZ)
0000C43E                            ; ---------------------------------------------------------------------------
0000C43E 0000                       		dc.w byte_B2DA-Map_obj2F
0000C440 0000                       		dc.w byte_B31C-Map_obj2F
0000C442 0000                       		dc.w byte_B34F-Map_obj2F
0000C444 0D                         byte_B2DA:	dc.b $D
0000C445 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000C44A F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000C44F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C454 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000C459 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000C45E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C463 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000C468 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000C46D F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000C472 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C477 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000C47C D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000C481 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000C486 0A                         byte_B31C:	dc.b $A
0000C487 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000C48C F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000C491 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C496 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000C49B E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000C4A0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C4A5 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000C4AA E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000C4AF C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000C4B4 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000C4B9 06                         byte_B34F:	dc.b 6
0000C4BA D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000C4BF F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C4C4 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000C4C9 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000C4CE F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C4D3 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000C4D8                            		even
0000C4D8                            		even
0000C4D8                            
0000C4D8                            ; ---------------------------------------------------------------------------
0000C4D8                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C4D8                            ; ---------------------------------------------------------------------------
0000C4D8                            Map_obj14:
0000C4D8                            	include "_maps\obj14.asm"
0000C4D8                            ; ---------------------------------------------------------------------------
0000C4D8                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C4D8                            ; ---------------------------------------------------------------------------
0000C4D8 0000                       		dc.w byte_B37A-Map_obj14
0000C4DA 0000                       		dc.w byte_B380-Map_obj14
0000C4DC 0000                       		dc.w byte_B386-Map_obj14
0000C4DE 0000                       		dc.w byte_B38C-Map_obj14
0000C4E0 0000                       		dc.w byte_B392-Map_obj14
0000C4E2 0000                       		dc.w byte_B398-Map_obj14
0000C4E4 01                         byte_B37A:	dc.b 1
0000C4E5 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000C4EA 01                         byte_B380:	dc.b 1
0000C4EB E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000C4F0 01                         byte_B386:	dc.b 1
0000C4F1 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000C4F6 01                         byte_B38C:	dc.b 1
0000C4F7 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000C4FC 01                         byte_B392:	dc.b 1
0000C4FD F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000C502 01                         byte_B398:	dc.b 1
0000C503 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000C508                            		even
0000C508                            		even
0000C508                            
0000C508                            ; ===========================================================================
0000C508                            ; ---------------------------------------------------------------------------
0000C508                            ; Object 30 - large green glassy blocks	(MZ)
0000C508                            ; ---------------------------------------------------------------------------
0000C508                            
0000C508                            Obj30:					; XREF: Obj_Index
0000C508 7000                       		moveq	#0,d0
0000C50A 1028 0024                  		move.b	$24(a0),d0
0000C50E 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000C512 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000C516 3028 0008                  		move.w	8(a0),d0
0000C51A 0240 FF80                  		andi.w	#$FF80,d0
0000C51E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C522 0441 0080                  		subi.w	#$80,d1
0000C526 0241 FF80                  		andi.w	#$FF80,d1
0000C52A 9041                       		sub.w	d1,d0
0000C52C 0C40 0280                  		cmpi.w	#$280,d0
0000C530 6300 0000                  		bls.w	DisplaySprite
0000C534 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C538 6700                       		beq.s	Obj30_Delete		; if it's zero, don't remember object
0000C53A 3440                       		movea.w	d0,a2	; load address into a2
0000C53C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C540                            
0000C540                            Obj30_Delete:
0000C540 6000 0000                  		bra.w	DeleteObject
0000C544                            ; ===========================================================================
0000C544 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000C546 0000                       		dc.w Obj30_Block012-Obj30_Index
0000C548 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000C54A 0000                       		dc.w Obj30_Block34-Obj30_Index
0000C54C 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000C54E                            
0000C54E 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000C551 0400 01                    		dc.b 4,	0, 1
0000C554 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000C557 0800 01                    		dc.b 8,	0, 1
0000C55A                            ; ===========================================================================
0000C55A                            
0000C55A                            Obj30_Main:				; XREF: Obj30_Index
0000C55A 45F9 0000 C54E             		lea	(Obj30_Vars1).l,a2
0000C560 7201                       		moveq	#1,d1
0000C562 117C 0048 0016             		move.b	#$48,$16(a0)
0000C568 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000C56E 6500                       		bcs.s	loc_B40C	; if yes, branch
0000C570 45F9 0000 C554             		lea	(Obj30_Vars2).l,a2
0000C576 7201                       		moveq	#1,d1
0000C578 117C 0038 0016             		move.b	#$38,$16(a0)
0000C57E                            
0000C57E                            loc_B40C:
0000C57E 2248                       		movea.l	a0,a1
0000C580 6000                       		bra.s	Obj30_Load	; load main object
0000C582                            ; ===========================================================================
0000C582                            
0000C582                            Obj30_Loop:
0000C582 6100 0000                  		bsr.w	SingleObjLoad2
0000C586 6600                       		bne.s	loc_B480
0000C588                            
0000C588                            Obj30_Load:				; XREF: Obj30_Main
0000C588 135A 0024                  		move.b	(a2)+,$24(a1)
0000C58C 12BC 0030                  		move.b	#$30,0(a1)
0000C590 3368 0008 0008             		move.w	8(a0),8(a1)
0000C596 101A                       		move.b	(a2)+,d0
0000C598 4880                       		ext.w	d0
0000C59A D068 000C                  		add.w	$C(a0),d0
0000C59E 3340 000C                  		move.w	d0,$C(a1)
0000C5A2 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000C5AA 337C C38E 0002             		move.w	#$C38E,2(a1)
0000C5B0 137C 0004 0001             		move.b	#4,1(a1)
0000C5B6 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C5BC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C5C2 137C 0020 0019             		move.b	#$20,$19(a1)
0000C5C8 137C 0004 0018             		move.b	#4,$18(a1)
0000C5CE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C5D2 2348 003C                  		move.l	a0,$3C(a1)
0000C5D6 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000C5DA                            
0000C5DA 137C 0010 0019             		move.b	#$10,$19(a1)
0000C5E0 137C 0003 0018             		move.b	#3,$18(a1)
0000C5E6 5029 0028                  		addq.b	#8,$28(a1)
0000C5EA 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C5F0                            
0000C5F0                            loc_B480:
0000C5F0 317C 0090 0032             		move.w	#$90,$32(a0)
0000C5F6 08E8 0004 0001             		bset	#4,1(a0)
0000C5FC                            
0000C5FC                            Obj30_Block012:				; XREF: Obj30_Index
0000C5FC 6100 0000                  		bsr.w	Obj30_Types
0000C600 323C 002B                  		move.w	#$2B,d1
0000C604 343C 0048                  		move.w	#$48,d2
0000C608 363C 0049                  		move.w	#$49,d3
0000C60C 3828 0008                  		move.w	8(a0),d4
0000C610 6000 0000                  		bra.w	SolidObject
0000C614                            ; ===========================================================================
0000C614                            
0000C614                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C614 2268 003C                  		movea.l	$3C(a0),a1
0000C618 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C61E 6000 0000                  		bra.w	Obj30_Types
0000C622                            ; ===========================================================================
0000C622                            
0000C622                            Obj30_Block34:				; XREF: Obj30_Index
0000C622 6100 0000                  		bsr.w	Obj30_Types
0000C626 323C 002B                  		move.w	#$2B,d1
0000C62A 343C 0038                  		move.w	#$38,d2
0000C62E 363C 0039                  		move.w	#$39,d3
0000C632 3828 0008                  		move.w	8(a0),d4
0000C636 6000 0000                  		bra.w	SolidObject
0000C63A                            ; ===========================================================================
0000C63A                            
0000C63A                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C63A 2268 003C                  		movea.l	$3C(a0),a1
0000C63E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C644 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C64A 6000 0002                  		bra.w	*+4
0000C64E                            
0000C64E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C64E                            
0000C64E                            
0000C64E                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C64E 7000                       		moveq	#0,d0
0000C650 1028 0028                  		move.b	$28(a0),d0
0000C654 0240 0007                  		andi.w	#7,d0
0000C658 D040                       		add.w	d0,d0
0000C65A 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C65E 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C662                            ; End of function Obj30_Types
0000C662                            
0000C662                            ; ===========================================================================
0000C662 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C664 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C666 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C668 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C66A 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C66C                            ; ===========================================================================
0000C66C                            
0000C66C                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C66C 4E75                       		rts	
0000C66E                            ; ===========================================================================
0000C66E                            
0000C66E                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C66E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C672 323C 0040                  		move.w	#$40,d1
0000C676 6000                       		bra.s	loc_B514
0000C678                            ; ===========================================================================
0000C678                            
0000C678                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C678 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C67C 323C 0040                  		move.w	#$40,d1
0000C680 4440                       		neg.w	d0
0000C682 D041                       		add.w	d1,d0
0000C684                            
0000C684                            loc_B514:				; XREF: Obj30_Type01
0000C684 0828 0003 0028             		btst	#3,$28(a0)
0000C68A 6700                       		beq.s	loc_B526
0000C68C 4440                       		neg.w	d0
0000C68E D041                       		add.w	d1,d0
0000C690 E208                       		lsr.b	#1,d0
0000C692 0640 0020                  		addi.w	#$20,d0
0000C696                            
0000C696                            loc_B526:
0000C696 6000 0000                  		bra.w	loc_B5EE
0000C69A                            ; ===========================================================================
0000C69A                            
0000C69A                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C69A 0828 0003 0028             		btst	#3,$28(a0)
0000C6A0 6700                       		beq.s	loc_B53E
0000C6A2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C6A6 0440 0010                  		subi.w	#$10,d0
0000C6AA 6000 0000                  		bra.w	loc_B5EE
0000C6AE                            ; ===========================================================================
0000C6AE                            
0000C6AE                            loc_B53E:
0000C6AE 0828 0003 0022             		btst	#3,$22(a0)
0000C6B4 6600                       		bne.s	loc_B54E
0000C6B6 08A8 0000 0034             		bclr	#0,$34(a0)
0000C6BC 6000                       		bra.s	loc_B582
0000C6BE                            ; ===========================================================================
0000C6BE                            
0000C6BE                            loc_B54E:
0000C6BE 4A28 0034                  		tst.b	$34(a0)
0000C6C2 6600                       		bne.s	loc_B582
0000C6C4 117C 0001 0034             		move.b	#1,$34(a0)
0000C6CA 08E8 0000 0035             		bset	#0,$35(a0)
0000C6D0 6700                       		beq.s	loc_B582
0000C6D2 08E8 0007 0034             		bset	#7,$34(a0)
0000C6D8 317C 0010 0036             		move.w	#$10,$36(a0)
0000C6DE 117C 000A 0038             		move.b	#$A,$38(a0)
0000C6E4 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C6EA 6600                       		bne.s	loc_B582
0000C6EC 317C 0040 0036             		move.w	#$40,$36(a0)
0000C6F2                            
0000C6F2                            loc_B582:
0000C6F2 4A28 0034                  		tst.b	$34(a0)
0000C6F6 6A00                       		bpl.s	loc_B5AA
0000C6F8 4A28 0038                  		tst.b	$38(a0)
0000C6FC 6700                       		beq.s	loc_B594
0000C6FE 5328 0038                  		subq.b	#1,$38(a0)
0000C702 6600                       		bne.s	loc_B5AA
0000C704                            
0000C704                            loc_B594:
0000C704 4A68 0032                  		tst.w	$32(a0)
0000C708 6700                       		beq.s	loc_B5A4
0000C70A 5368 0032                  		subq.w	#1,$32(a0)
0000C70E 5368 0036                  		subq.w	#1,$36(a0)
0000C712 6600                       		bne.s	loc_B5AA
0000C714                            
0000C714                            loc_B5A4:
0000C714 08A8 0007 0034             		bclr	#7,$34(a0)
0000C71A                            
0000C71A                            loc_B5AA:
0000C71A 3028 0032                  		move.w	$32(a0),d0
0000C71E 6000                       		bra.s	loc_B5EE
0000C720                            ; ===========================================================================
0000C720                            
0000C720                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C720 0828 0003 0028             		btst	#3,$28(a0)
0000C726 6700                       		beq.s	Obj30_ChkSwitch
0000C728 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C72C 0440 0010                  		subi.w	#$10,d0
0000C730 6000                       		bra.s	loc_B5EE
0000C732                            ; ===========================================================================
0000C732                            
0000C732                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C732 4A28 0034                  		tst.b	$34(a0)
0000C736 6600                       		bne.s	loc_B5E0
0000C738 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C73C 7000                       		moveq	#0,d0
0000C73E 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C742 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C744 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C748 6700                       		beq.s	loc_B5EA	; if not, branch
0000C74A 117C 0001 0034             		move.b	#1,$34(a0)
0000C750                            
0000C750                            loc_B5E0:
0000C750 4A68 0032                  		tst.w	$32(a0)
0000C754 6700                       		beq.s	loc_B5EA
0000C756 5568 0032                  		subq.w	#2,$32(a0)
0000C75A                            
0000C75A                            loc_B5EA:
0000C75A 3028 0032                  		move.w	$32(a0),d0
0000C75E                            
0000C75E                            loc_B5EE:
0000C75E 3228 0030                  		move.w	$30(a0),d1
0000C762 9240                       		sub.w	d0,d1
0000C764 3141 000C                  		move.w	d1,$C(a0)
0000C768 4E75                       		rts	
0000C76A                            ; ===========================================================================
0000C76A                            ; ---------------------------------------------------------------------------
0000C76A                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C76A                            ; ---------------------------------------------------------------------------
0000C76A                            Map_obj30:
0000C76A                            	include "_maps\obj30.asm"
0000C76A                            ; ---------------------------------------------------------------------------
0000C76A                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C76A                            ; ---------------------------------------------------------------------------
0000C76A 0000                       		dc.w byte_B600-Map_obj30
0000C76C 0000                       		dc.w byte_B63D-Map_obj30
0000C76E 0000                       		dc.w byte_B648-Map_obj30
0000C770 0C                         byte_B600:	dc.b $C
0000C771 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C776 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C77B C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C780 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C785 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C78A E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C78F 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C794 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C799 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C79E 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C7A3 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C7A8 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C7AD 02                         byte_B63D:	dc.b 2
0000C7AE 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C7B3 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C7B8 0A                         byte_B648:	dc.b $A
0000C7B9 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C7BE C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C7C3 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C7C8 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C7CD F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C7D2 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C7D7 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C7DC 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C7E1 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C7E6 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C7EC 00                         		even
0000C7EC 00                         		even
0000C7EC                            
0000C7EC                            ; ===========================================================================
0000C7EC                            ; ---------------------------------------------------------------------------
0000C7EC                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C7EC                            ; ---------------------------------------------------------------------------
0000C7EC                            
0000C7EC                            Obj31:					; XREF: Obj_Index
0000C7EC 7000                       		moveq	#0,d0
0000C7EE 1028 0024                  		move.b	$24(a0),d0
0000C7F2 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C7F6 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C7FA                            ; ===========================================================================
0000C7FA 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C7FC 0000                       		dc.w loc_B798-Obj31_Index
0000C7FE 0000                       		dc.w loc_B7FE-Obj31_Index
0000C800 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C802 0000                       		dc.w loc_B7E2-Obj31_Index
0000C804                            
0000C804 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C806 0100                       		dc.b 1,	0
0000C808                            
0000C808 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C80B 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C80E 08CC 03                    		dc.b 8,	$CC, 3
0000C811 06F0 02                    		dc.b 6,	$F0, 2
0000C814                            
0000C814 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C818 5000 7800                  		dc.w $5000, $7800
0000C81C 3800 5800                  		dc.w $3800, $5800
0000C820 B800                       		dc.w $B800
0000C822                            ; ===========================================================================
0000C822                            
0000C822                            Obj31_Main:				; XREF: Obj31_Index
0000C822 7000                       		moveq	#0,d0
0000C824 1028 0028                  		move.b	$28(a0),d0
0000C828 6A00                       		bpl.s	loc_B6CE
0000C82A 0240 007F                  		andi.w	#$7F,d0
0000C82E D040                       		add.w	d0,d0
0000C830 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C834 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C838 101A                       		move.b	(a2)+,d0
0000C83A 1140 0028                  		move.b	d0,$28(a0)
0000C83E                            
0000C83E                            loc_B6CE:
0000C83E 0200 000F                  		andi.b	#$F,d0
0000C842 D040                       		add.w	d0,d0
0000C844 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C848 4A40                       		tst.w	d0
0000C84A 6600                       		bne.s	loc_B6E0
0000C84C 3142 0032                  		move.w	d2,$32(a0)
0000C850                            
0000C850                            loc_B6E0:
0000C850 45F9 0000 C808             		lea	(Obj31_Var).l,a2
0000C856 2248                       		movea.l	a0,a1
0000C858 7203                       		moveq	#3,d1
0000C85A 6000                       		bra.s	Obj31_MakeStomper
0000C85C                            ; ===========================================================================
0000C85C                            
0000C85C                            Obj31_Loop:
0000C85C 6100 0000                  		bsr.w	SingleObjLoad2
0000C860 6600 0000                  		bne.w	Obj31_SetSize
0000C864                            
0000C864                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C864 135A 0024                  		move.b	(a2)+,$24(a1)
0000C868 12BC 0031                  		move.b	#$31,0(a1)
0000C86C 3368 0008 0008             		move.w	8(a0),8(a1)
0000C872 101A                       		move.b	(a2)+,d0
0000C874 4880                       		ext.w	d0
0000C876 D068 000C                  		add.w	$C(a0),d0
0000C87A 3340 000C                  		move.w	d0,$C(a1)
0000C87E 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C886 337C 0300 0002             		move.w	#$300,2(a1)
0000C88C 137C 0004 0001             		move.b	#4,1(a1)
0000C892 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C898 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C89E 137C 0010 0019             		move.b	#$10,$19(a1)
0000C8A4 3342 0034                  		move.w	d2,$34(a1)
0000C8A8 137C 0004 0018             		move.b	#4,$18(a1)
0000C8AE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C8B2 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C8B8 6600                       		bne.s	loc_B76A
0000C8BA 5341                       		subq.w	#1,d1
0000C8BC 1028 0028                  		move.b	$28(a0),d0
0000C8C0 0240 00F0                  		andi.w	#$F0,d0
0000C8C4 0C40 0020                  		cmpi.w	#$20,d0
0000C8C8 679A                       		beq.s	Obj31_MakeStomper
0000C8CA 137C 0038 0019             		move.b	#$38,$19(a1)
0000C8D0 137C 0090 0020             		move.b	#$90,$20(a1)
0000C8D6 5241                       		addq.w	#1,d1
0000C8D8                            
0000C8D8                            loc_B76A:
0000C8D8 2348 003C                  		move.l	a0,$3C(a1)
0000C8DC 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C8E0                            
0000C8E0 137C 0003 0018             		move.b	#3,$18(a1)
0000C8E6                            
0000C8E6                            Obj31_SetSize:
0000C8E6 7000                       		moveq	#0,d0
0000C8E8 1028 0028                  		move.b	$28(a0),d0
0000C8EC E648                       		lsr.w	#3,d0
0000C8EE 0200 000E                  		andi.b	#$E,d0
0000C8F2 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C8F6 115A 0019                  		move.b	(a2)+,$19(a0)
0000C8FA 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C8FE 6000                       		bra.s	loc_B798
0000C900                            ; ===========================================================================
0000C900 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C902 3009                       		dc.b $30, 9
0000C904 100A                       		dc.b $10, $A
0000C906                            ; ===========================================================================
0000C906                            
0000C906                            loc_B798:				; XREF: Obj31_Index
0000C906 6100 0000                  		bsr.w	Obj31_Types
0000C90A 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C910 7200                       		moveq	#0,d1
0000C912 1228 0019                  		move.b	$19(a0),d1
0000C916 0641 000B                  		addi.w	#$B,d1
0000C91A 343C 000C                  		move.w	#$C,d2
0000C91E 363C 000D                  		move.w	#$D,d3
0000C922 3828 0008                  		move.w	8(a0),d4
0000C926 6100 0000                  		bsr.w	SolidObject
0000C92A 0828 0003 0022             		btst	#3,$22(a0)
0000C930 6700                       		beq.s	Obj31_Display
0000C932 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C938 6400                       		bcc.s	Obj31_Display
0000C93A 2448                       		movea.l	a0,a2
0000C93C 41F8 D000                  		lea	($FFFFD000).w,a0
0000C940 4EB9 0000 0000             		jsr	KillSonic
0000C946 204A                       		movea.l	a2,a0
0000C948 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000C94E 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0000C954                            
0000C954                            Obj31_Display:
0000C954 6100 0000                  		bsr.w	DisplaySprite
0000C958 6000 0000                  		bra.w	Obj31_ChkDel
0000C95C                            ; ===========================================================================
0000C95C                            
0000C95C                            loc_B7E2:				; XREF: Obj31_Index
0000C95C 117C 0080 0016             		move.b	#$80,$16(a0)
0000C962 08E8 0004 0001             		bset	#4,1(a0)
0000C968 2268 003C                  		movea.l	$3C(a0),a1
0000C96C 1029 0032                  		move.b	$32(a1),d0
0000C970 EA08                       		lsr.b	#5,d0
0000C972 5600                       		addq.b	#3,d0
0000C974 1140 001A                  		move.b	d0,$1A(a0)
0000C978                            
0000C978                            loc_B7FE:				; XREF: Obj31_Index
0000C978 2268 003C                  		movea.l	$3C(a0),a1
0000C97C 7000                       		moveq	#0,d0
0000C97E 1029 0032                  		move.b	$32(a1),d0
0000C982 D068 0030                  		add.w	$30(a0),d0
0000C986 3140 000C                  		move.w	d0,$C(a0)
0000C98A                            
0000C98A                            Obj31_Display2:				; XREF: Obj31_Index
0000C98A 6100 0000                  		bsr.w	DisplaySprite
0000C98E                            
0000C98E                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C98E 3028 0008                  		move.w	8(a0),d0
0000C992 0240 FF80                  		andi.w	#$FF80,d0
0000C996 3238 F700                  		move.w	($FFFFF700).w,d1
0000C99A 0441 0080                  		subi.w	#$80,d1
0000C99E 0241 FF80                  		andi.w	#$FF80,d1
0000C9A2 9041                       		sub.w	d1,d0
0000C9A4 0C40 0280                  		cmpi.w	#$280,d0
0000C9A8 6300                       		bls.s	Obj31_NoDel
0000C9AA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C9AE 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000C9B2 3640                       		movea.w	d0,a3	; load address into a2
0000C9B4 0893 0007                  		bclr	#7,(a3)	; clear respawn table entry, so object can be loaded again
0000C9B8 6000 0000                  		bra.w	DeleteObject	; and delete object
0000C9BC                            
0000C9BC                            Obj31_NoDel:
0000C9BC 4E75                       		rts	
0000C9BE                            ; ===========================================================================
0000C9BE                            
0000C9BE                            Obj31_Types:				; XREF: loc_B798
0000C9BE 1028 0028                  		move.b	$28(a0),d0
0000C9C2 0240 000F                  		andi.w	#$F,d0
0000C9C6 D040                       		add.w	d0,d0
0000C9C8 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C9CC 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C9D0                            ; ===========================================================================
0000C9D0 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C9D2 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C9D4 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C9D6 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C9D8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C9DA 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C9DC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C9DE                            ; ===========================================================================
0000C9DE                            
0000C9DE                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C9DE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C9E2 7000                       		moveq	#0,d0
0000C9E4 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C9E8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C9EC 6700                       		beq.s	loc_B8A8	; if not, branch
0000C9EE 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C9F2 6A00                       		bpl.s	loc_B872
0000C9F4 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C9FA 6700                       		beq.s	loc_B8A0
0000C9FC                            
0000C9FC                            loc_B872:
0000C9FC 4A68 0032                  		tst.w	$32(a0)
0000CA00 6700                       		beq.s	loc_B8A0
0000CA02 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CA06 0200 000F                  		andi.b	#$F,d0
0000CA0A 6600                       		bne.s	loc_B892
0000CA0C 4A28 0001                  		tst.b	1(a0)
0000CA10 6A00                       		bpl.s	loc_B892
0000CA12 303C 00C7                  		move.w	#$C7,d0
0000CA16 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CA1C                            
0000CA1C                            loc_B892:
0000CA1C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CA22 6400                       		bcc.s	Obj31_Restart
0000CA24 317C 0000 0032             		move.w	#0,$32(a0)
0000CA2A                            
0000CA2A                            loc_B8A0:
0000CA2A 317C 0000 0012             		move.w	#0,$12(a0)
0000CA30 6000                       		bra.s	Obj31_Restart
0000CA32                            ; ===========================================================================
0000CA32                            
0000CA32                            loc_B8A8:				; XREF: Obj31_Type00
0000CA32 3228 0034                  		move.w	$34(a0),d1
0000CA36 B268 0032                  		cmp.w	$32(a0),d1
0000CA3A 6700                       		beq.s	Obj31_Restart
0000CA3C 3028 0012                  		move.w	$12(a0),d0
0000CA40 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CA46 D168 0032                  		add.w	d0,$32(a0)
0000CA4A B268 0032                  		cmp.w	$32(a0),d1
0000CA4E 6200                       		bhi.s	Obj31_Restart
0000CA50 3141 0032                  		move.w	d1,$32(a0)
0000CA54 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CA5A 4A28 0001                  		tst.b	1(a0)
0000CA5E 6A00                       		bpl.s	Obj31_Restart
0000CA60 303C 00BD                  		move.w	#$BD,d0
0000CA64 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CA6A                            
0000CA6A                            Obj31_Restart:
0000CA6A 7000                       		moveq	#0,d0
0000CA6C 1028 0032                  		move.b	$32(a0),d0
0000CA70 D068 0030                  		add.w	$30(a0),d0
0000CA74 3140 000C                  		move.w	d0,$C(a0)
0000CA78 4E75                       		rts	
0000CA7A                            ; ===========================================================================
0000CA7A                            
0000CA7A                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000CA7A 4A68 0036                  		tst.w	$36(a0)
0000CA7E 6700                       		beq.s	loc_B938
0000CA80 4A68 0038                  		tst.w	$38(a0)
0000CA84 6700                       		beq.s	loc_B902
0000CA86 5368 0038                  		subq.w	#1,$38(a0)
0000CA8A 6000                       		bra.s	loc_B97C
0000CA8C                            ; ===========================================================================
0000CA8C                            
0000CA8C                            loc_B902:
0000CA8C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CA90 0200 000F                  		andi.b	#$F,d0
0000CA94 6600                       		bne.s	loc_B91C
0000CA96 4A28 0001                  		tst.b	1(a0)
0000CA9A 6A00                       		bpl.s	loc_B91C
0000CA9C 303C 00C7                  		move.w	#$C7,d0
0000CAA0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CAA6                            
0000CAA6                            loc_B91C:
0000CAA6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CAAC 6400                       		bcc.s	loc_B97C
0000CAAE 317C 0000 0032             		move.w	#0,$32(a0)
0000CAB4 317C 0000 0012             		move.w	#0,$12(a0)
0000CABA 317C 0000 0036             		move.w	#0,$36(a0)
0000CAC0 6000                       		bra.s	loc_B97C
0000CAC2                            ; ===========================================================================
0000CAC2                            
0000CAC2                            loc_B938:				; XREF: Obj31_Type01
0000CAC2 3228 0034                  		move.w	$34(a0),d1
0000CAC6 B268 0032                  		cmp.w	$32(a0),d1
0000CACA 6700                       		beq.s	loc_B97C
0000CACC 3028 0012                  		move.w	$12(a0),d0
0000CAD0 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CAD6 D168 0032                  		add.w	d0,$32(a0)
0000CADA B268 0032                  		cmp.w	$32(a0),d1
0000CADE 6200                       		bhi.s	loc_B97C
0000CAE0 3141 0032                  		move.w	d1,$32(a0)
0000CAE4 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CAEA 317C 0001 0036             		move.w	#1,$36(a0)
0000CAF0 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CAF6 4A28 0001                  		tst.b	1(a0)
0000CAFA 6A00                       		bpl.s	loc_B97C
0000CAFC 303C 00BD                  		move.w	#$BD,d0
0000CB00 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CB06                            
0000CB06                            loc_B97C:
0000CB06 6000 FF62                  		bra.w	Obj31_Restart
0000CB0A                            ; ===========================================================================
0000CB0A                            
0000CB0A                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000CB0A 3038 D008                  		move.w	($FFFFD008).w,d0
0000CB0E 9068 0008                  		sub.w	8(a0),d0
0000CB12 6400                       		bcc.s	loc_B98C
0000CB14 4440                       		neg.w	d0
0000CB16                            
0000CB16                            loc_B98C:
0000CB16 0C40 0090                  		cmpi.w	#$90,d0
0000CB1A 6400                       		bcc.s	loc_B996
0000CB1C 5228 0028                  		addq.b	#1,$28(a0)
0000CB20                            
0000CB20                            loc_B996:
0000CB20 6000 FF48                  		bra.w	Obj31_Restart
0000CB24                            ; ===========================================================================
0000CB24                            ; ---------------------------------------------------------------------------
0000CB24                            ; Object 45 - spiked metal block from beta version (MZ)
0000CB24                            ; ---------------------------------------------------------------------------
0000CB24                            
0000CB24                            Obj45:					; XREF: Obj_Index
0000CB24 7000                       		moveq	#0,d0
0000CB26 1028 0024                  		move.b	$24(a0),d0
0000CB2A 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000CB2E 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000CB32                            ; ===========================================================================
0000CB32 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000CB34 0000                       		dc.w Obj45_Solid-Obj45_Index
0000CB36 0000                       		dc.w loc_BA8E-Obj45_Index
0000CB38 0000                       		dc.w Obj45_Display-Obj45_Index
0000CB3A 0000                       		dc.w loc_BA7A-Obj45_Index
0000CB3C                            
0000CB3C 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000CB3F 04E4 01                    		dc.b	4, $E4,	  1
0000CB42 0834 03                    		dc.b	8, $34,	  3
0000CB45 0628 02                    		dc.b	6, $28,	  2
0000CB48                            
0000CB48 3800                       word_B9BE:	dc.w $3800
0000CB4A A000                       		dc.w -$6000
0000CB4C 5000                       		dc.w $5000
0000CB4E                            ; ===========================================================================
0000CB4E                            
0000CB4E                            Obj45_Main:				; XREF: Obj45_Index
0000CB4E 7000                       		moveq	#0,d0
0000CB50 1028 0028                  		move.b	$28(a0),d0
0000CB54 D040                       		add.w	d0,d0
0000CB56 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000CB5A 45F9 0000 CB3C             		lea	(Obj45_Var).l,a2
0000CB60 2248                       		movea.l	a0,a1
0000CB62 7203                       		moveq	#3,d1
0000CB64 6000                       		bra.s	Obj45_Load
0000CB66                            ; ===========================================================================
0000CB66                            
0000CB66                            Obj45_Loop:
0000CB66 6100 0000                  		bsr.w	SingleObjLoad2
0000CB6A 6600                       		bne.s	loc_BA52
0000CB6C                            
0000CB6C                            Obj45_Load:				; XREF: Obj45_Main
0000CB6C 135A 0024                  		move.b	(a2)+,$24(a1)
0000CB70 12BC 0045                  		move.b	#$45,0(a1)
0000CB74 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CB7A 101A                       		move.b	(a2)+,d0
0000CB7C 4880                       		ext.w	d0
0000CB7E D068 0008                  		add.w	8(a0),d0
0000CB82 3340 0008                  		move.w	d0,8(a1)
0000CB86 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000CB8E 337C 0300 0002             		move.w	#$300,2(a1)
0000CB94 137C 0004 0001             		move.b	#4,1(a1)
0000CB9A 3369 0008 0030             		move.w	8(a1),$30(a1)
0000CBA0 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000CBA6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CBAC 137C 0020 0019             		move.b	#$20,$19(a1)
0000CBB2 3342 0034                  		move.w	d2,$34(a1)
0000CBB6 137C 0004 0018             		move.b	#4,$18(a1)
0000CBBC 0C12 0001                  		cmpi.b	#1,(a2)
0000CBC0 6600                       		bne.s	loc_BA40
0000CBC2 137C 0091 0020             		move.b	#$91,$20(a1)
0000CBC8                            
0000CBC8                            loc_BA40:
0000CBC8 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CBCC 2348 003C                  		move.l	a0,$3C(a1)
0000CBD0 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000CBD4                            
0000CBD4 137C 0003 0018             		move.b	#3,$18(a1)
0000CBDA                            
0000CBDA                            loc_BA52:
0000CBDA 117C 0010 0019             		move.b	#$10,$19(a0)
0000CBE0                            
0000CBE0                            Obj45_Solid:				; XREF: Obj45_Index
0000CBE0 3F28 0008                  		move.w	8(a0),-(sp)
0000CBE4 6100 0000                  		bsr.w	Obj45_Move
0000CBE8 323C 0017                  		move.w	#$17,d1
0000CBEC 343C 0020                  		move.w	#$20,d2
0000CBF0 363C 0020                  		move.w	#$20,d3
0000CBF4 381F                       		move.w	(sp)+,d4
0000CBF6 6100 0000                  		bsr.w	SolidObject
0000CBFA 6100 0000                  		bsr.w	DisplaySprite
0000CBFE 6000 0000                  		bra.w	Obj45_ChkDel
0000CC02                            ; ===========================================================================
0000CC02                            
0000CC02                            loc_BA7A:				; XREF: Obj45_Index
0000CC02 2268 003C                  		movea.l	$3C(a0),a1
0000CC06 1029 0032                  		move.b	$32(a1),d0
0000CC0A 0600 0010                  		addi.b	#$10,d0
0000CC0E EA08                       		lsr.b	#5,d0
0000CC10 5600                       		addq.b	#3,d0
0000CC12 1140 001A                  		move.b	d0,$1A(a0)
0000CC16                            
0000CC16                            loc_BA8E:				; XREF: Obj45_Index
0000CC16 2268 003C                  		movea.l	$3C(a0),a1
0000CC1A 7000                       		moveq	#0,d0
0000CC1C 1029 0032                  		move.b	$32(a1),d0
0000CC20 4440                       		neg.w	d0
0000CC22 D068 0030                  		add.w	$30(a0),d0
0000CC26 3140 0008                  		move.w	d0,8(a0)
0000CC2A                            
0000CC2A                            Obj45_Display:				; XREF: Obj45_Index
0000CC2A 6100 0000                  		bsr.w	DisplaySprite
0000CC2E                            
0000CC2E                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000CC2E 3028 003A                  		move.w	$3A(a0),d0
0000CC32 0240 FF80                  		andi.w	#$FF80,d0
0000CC36 3238 F700                  		move.w	($FFFFF700).w,d1
0000CC3A 0441 0080                  		subi.w	#$80,d1
0000CC3E 0241 FF80                  		andi.w	#$FF80,d1
0000CC42 9041                       		sub.w	d1,d0
0000CC44 0C40 0280                  		cmpi.w	#$280,d0
0000CC48 6300                       		bls.s	Obj45_NoDel
0000CC4A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CC4E 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CC52 3440                       		movea.w	d0,a2	; load address into a2
0000CC54 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000CC58 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CC5C                            
0000CC5C                            Obj45_NoDel:
0000CC5C 4E75                       		rts	
0000CC5E                            
0000CC5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CC5E                            
0000CC5E                            
0000CC5E                            Obj45_Move:				; XREF: Obj45_Solid
0000CC5E 7000                       		moveq	#0,d0
0000CC60 1028 0028                  		move.b	$28(a0),d0
0000CC64 D040                       		add.w	d0,d0
0000CC66 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000CC6A 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000CC6E                            ; End of function Obj45_Move
0000CC6E                            
0000CC6E                            ; ===========================================================================
0000CC6E 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000CC70 0000                       		dc.w loc_BADA-off_BAD6
0000CC72                            ; ===========================================================================
0000CC72                            
0000CC72                            loc_BADA:				; XREF: off_BAD6
0000CC72 4A68 0036                  		tst.w	$36(a0)
0000CC76 6700                       		beq.s	loc_BB08
0000CC78 4A68 0038                  		tst.w	$38(a0)
0000CC7C 6700                       		beq.s	loc_BAEC
0000CC7E 5368 0038                  		subq.w	#1,$38(a0)
0000CC82 6000                       		bra.s	loc_BB3C
0000CC84                            ; ===========================================================================
0000CC84                            
0000CC84                            loc_BAEC:
0000CC84 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CC8A 6400                       		bcc.s	loc_BB3C
0000CC8C 317C 0000 0032             		move.w	#0,$32(a0)
0000CC92 317C 0000 0010             		move.w	#0,$10(a0)
0000CC98 317C 0000 0036             		move.w	#0,$36(a0)
0000CC9E 6000                       		bra.s	loc_BB3C
0000CCA0                            ; ===========================================================================
0000CCA0                            
0000CCA0                            loc_BB08:				; XREF: loc_BADA
0000CCA0 3228 0034                  		move.w	$34(a0),d1
0000CCA4 B268 0032                  		cmp.w	$32(a0),d1
0000CCA8 6700                       		beq.s	loc_BB3C
0000CCAA 3028 0010                  		move.w	$10(a0),d0
0000CCAE 0668 0070 0010             		addi.w	#$70,$10(a0)
0000CCB4 D168 0032                  		add.w	d0,$32(a0)
0000CCB8 B268 0032                  		cmp.w	$32(a0),d1
0000CCBC 6200                       		bhi.s	loc_BB3C
0000CCBE 3141 0032                  		move.w	d1,$32(a0)
0000CCC2 317C 0000 0010             		move.w	#0,$10(a0)
0000CCC8 317C 0001 0036             		move.w	#1,$36(a0)
0000CCCE 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CCD4                            
0000CCD4                            loc_BB3C:
0000CCD4 7000                       		moveq	#0,d0
0000CCD6 1028 0032                  		move.b	$32(a0),d0
0000CCDA 4440                       		neg.w	d0
0000CCDC D068 0030                  		add.w	$30(a0),d0
0000CCE0 3140 0008                  		move.w	d0,8(a0)
0000CCE4 4E75                       		rts	
0000CCE6                            ; ===========================================================================
0000CCE6                            ; ---------------------------------------------------------------------------
0000CCE6                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CCE6                            ; ---------------------------------------------------------------------------
0000CCE6                            Map_obj31:
0000CCE6                            	include "_maps\obj31.asm"
0000CCE6                            ; ---------------------------------------------------------------------------
0000CCE6                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CCE6                            ; ---------------------------------------------------------------------------
0000CCE6 0000                       		dc.w byte_BB64-Map_obj31
0000CCE8 0000                       		dc.w byte_BB7E-Map_obj31
0000CCEA 0000                       		dc.w byte_BB98-Map_obj31
0000CCEC 0000                       		dc.w byte_BB9E-Map_obj31
0000CCEE 0000                       		dc.w byte_BBA9-Map_obj31
0000CCF0 0000                       		dc.w byte_BBBE-Map_obj31
0000CCF2 0000                       		dc.w byte_BBDD-Map_obj31
0000CCF4 0000                       		dc.w byte_BC06-Map_obj31
0000CCF6 0000                       		dc.w byte_BC06-Map_obj31
0000CCF8 0000                       		dc.w byte_BC39-Map_obj31
0000CCFA 0000                       		dc.w byte_BC53-Map_obj31
0000CCFC 05                         byte_BB64:	dc.b 5
0000CCFD F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000CD02 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000CD07 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CD0C F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000CD11 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000CD16 05                         byte_BB7E:	dc.b 5
0000CD17 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000CD1C F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000CD21 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000CD26 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000CD2B F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000CD30 01                         byte_BB98:	dc.b 1
0000CD31 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000CD36 02                         byte_BB9E:	dc.b 2
0000CD37 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CD3C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CD41 04                         byte_BBA9:	dc.b 4
0000CD42 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CD47 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CD4C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CD51 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CD56 06                         byte_BBBE:	dc.b 6
0000CD57 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CD5C D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CD61 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CD66 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CD6B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CD70 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CD75 08                         byte_BBDD:	dc.b 8
0000CD76 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CD7B B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CD80 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CD85 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CD8A E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CD8F F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CD94 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CD99 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CD9E 0A                         byte_BC06:	dc.b $A
0000CD9F 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000CDA4 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000CDA9 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CDAE B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CDB3 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CDB8 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CDBD E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CDC2 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CDC7 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CDCC 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CDD1 05                         byte_BC39:	dc.b 5
0000CDD2 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000CDD7 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000CDDC F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000CDE1 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000CDE6 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CDEB 01                         byte_BC53:	dc.b 1
0000CDEC EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000CDF2 00                         		even
0000CDF2 00                         		even
0000CDF2                            
0000CDF2                            ; ---------------------------------------------------------------------------
0000CDF2                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CDF2                            ; ---------------------------------------------------------------------------
0000CDF2                            Map_obj45:
0000CDF2                            	include "_maps\obj45.asm"
0000CDF2                            ; ---------------------------------------------------------------------------
0000CDF2                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CDF2                            ; ---------------------------------------------------------------------------
0000CDF2 0000                       		dc.w byte_BC6C-Map_obj45
0000CDF4 0000                       		dc.w byte_BC7C-Map_obj45
0000CDF6 0000                       		dc.w byte_BC8C-Map_obj45
0000CDF8 0000                       		dc.w byte_BC92-Map_obj45
0000CDFA 0000                       		dc.w byte_BC9D-Map_obj45
0000CDFC 0000                       		dc.w byte_BCB2-Map_obj45
0000CDFE 0000                       		dc.w byte_BCD1-Map_obj45
0000CE00 0000                       		dc.w byte_BCFA-Map_obj45
0000CE02 0000                       		dc.w byte_BCFA-Map_obj45
0000CE04 03                         byte_BC6C:	dc.b 3
0000CE05 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000CE0A 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000CE0F F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000CE14 03                         byte_BC7C:	dc.b 3
0000CE15 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000CE1A FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000CE1F 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000CE24 01                         byte_BC8C:	dc.b 1
0000CE25 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000CE2A 02                         byte_BC92:	dc.b 2
0000CE2B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CE30 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CE35 04                         byte_BC9D:	dc.b 4
0000CE36 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CE3B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CE40 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CE45 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CE4A 06                         byte_BCB2:	dc.b 6
0000CE4B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CE50 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CE55 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CE5A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CE5F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CE64 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CE69 08                         byte_BCD1:	dc.b 8
0000CE6A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CE6F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CE74 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CE79 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CE7E F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CE83 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CE88 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CE8D F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CE92 08                         byte_BCFA:	dc.b 8
0000CE93 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CE98 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CE9D F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CEA2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CEA7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CEAC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CEB1 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CEB6 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CEBB F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000CEC0 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000CEC6 00                         		even
0000CEC6 00                         		even
0000CEC6                            
0000CEC6                            ; ===========================================================================
0000CEC6                            ; ---------------------------------------------------------------------------
0000CEC6                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000CEC6                            ; ---------------------------------------------------------------------------
0000CEC6                            
0000CEC6                            Obj32:					; XREF: Obj_Index
0000CEC6 7000                       		moveq	#0,d0
0000CEC8 1028 0024                  		move.b	$24(a0),d0
0000CECC 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000CED0 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000CED4                            ; ===========================================================================
0000CED4 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000CED6 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000CED8                            ; ===========================================================================
0000CED8                            
0000CED8                            Obj32_Main:				; XREF: Obj32_Index
0000CED8 5428 0024                  		addq.b	#2,$24(a0)
0000CEDC 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000CEE4 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000CEEA 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000CEF0 6700                       		beq.s	loc_BD60
0000CEF2 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000CEF8                            
0000CEF8                            loc_BD60:
0000CEF8 117C 0004 0001             		move.b	#4,1(a0)
0000CEFE 117C 0010 0019             		move.b	#$10,$19(a0)
0000CF04 117C 0004 0018             		move.b	#4,$18(a0)
0000CF0A 5668 000C                  		addq.w	#3,$C(a0)
0000CF0E                            
0000CF0E                            Obj32_Pressed:				; XREF: Obj32_Index
0000CF0E 4A28 0001                  		tst.b	1(a0)
0000CF12 6A00                       		bpl.s	Obj32_Display
0000CF14 323C 001B                  		move.w	#$1B,d1
0000CF18 343C 0005                  		move.w	#5,d2
0000CF1C 363C 0005                  		move.w	#5,d3
0000CF20 3828 0008                  		move.w	8(a0),d4
0000CF24 6100 0000                  		bsr.w	SolidObject
0000CF28 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000CF2E 1028 0028                  		move.b	$28(a0),d0
0000CF32 0240 000F                  		andi.w	#$F,d0
0000CF36 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000CF3A 47F3 0000                  		lea	(a3,d0.w),a3
0000CF3E 7600                       		moveq	#0,d3
0000CF40 0828 0006 0028             		btst	#6,$28(a0)
0000CF46 6700                       		beq.s	loc_BDB2
0000CF48 7607                       		moveq	#7,d3
0000CF4A                            
0000CF4A                            loc_BDB2:
0000CF4A 4A28 0028                  		tst.b	$28(a0)
0000CF4E 6A00                       		bpl.s	loc_BDBE
0000CF50 6100 0000                  		bsr.w	Obj32_MZBlock
0000CF54 6600                       		bne.s	loc_BDC8
0000CF56                            
0000CF56                            loc_BDBE:
0000CF56 4A28 0025                  		tst.b	$25(a0)
0000CF5A 6600                       		bne.s	loc_BDC8
0000CF5C 0793                       		bclr	d3,(a3)
0000CF5E 6000                       		bra.s	loc_BDDE
0000CF60                            ; ===========================================================================
0000CF60                            
0000CF60                            loc_BDC8:
0000CF60 4A13                       		tst.b	(a3)
0000CF62 6600                       		bne.s	loc_BDD6
0000CF64 303C 00CD                  		move.w	#$CD,d0
0000CF68 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play switch sound
0000CF6E                            
0000CF6E                            loc_BDD6:
0000CF6E 07D3                       		bset	d3,(a3)
0000CF70 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000CF76                            
0000CF76                            loc_BDDE:
0000CF76 0828 0005 0028             		btst	#5,$28(a0)
0000CF7C 6700                       		beq.s	Obj32_Display
0000CF7E 5328 001E                  		subq.b	#1,$1E(a0)
0000CF82 6A00                       		bpl.s	Obj32_Display
0000CF84 117C 0007 001E             		move.b	#7,$1E(a0)
0000CF8A 0868 0001 001A             		bchg	#1,$1A(a0)
0000CF90                            
0000CF90                            Obj32_Display:
0000CF90 6100 0000                  		bsr.w	DisplaySprite
0000CF94 3028 0008                  		move.w	8(a0),d0
0000CF98 0240 FF80                  		andi.w	#$FF80,d0
0000CF9C 3238 F700                  		move.w	($FFFFF700).w,d1
0000CFA0 0441 0080                  		subi.w	#$80,d1
0000CFA4 0241 FF80                  		andi.w	#$FF80,d1
0000CFA8 9041                       		sub.w	d1,d0
0000CFAA 0C40 0280                  		cmpi.w	#$280,d0
0000CFAE 6300                       		bls.s	Obj32_NoDel
0000CFB0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CFB4 6700                       		beq.s	Obj32_Delete		; if it's zero, don't remember object
0000CFB6 3440                       		movea.w	d0,a2	; load address into a2
0000CFB8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000CFBC 6000                       		bra.s	Obj32_Delete	; and delete object
0000CFBE                            
0000CFBE                            Obj32_NoDel:
0000CFBE 4E75                       		rts	
0000CFC0                            ; ===========================================================================
0000CFC0                            
0000CFC0                            Obj32_Delete:
0000CFC0 6100 0000                  		bsr.w	DeleteObject
0000CFC4 4E75                       		rts	
0000CFC6                            
0000CFC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CFC6                            
0000CFC6                            
0000CFC6                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000CFC6 3F03                       		move.w	d3,-(sp)
0000CFC8 3428 0008                  		move.w	8(a0),d2
0000CFCC 3628 000C                  		move.w	$C(a0),d3
0000CFD0 0442 0010                  		subi.w	#$10,d2
0000CFD4 5143                       		subq.w	#8,d3
0000CFD6 383C 0020                  		move.w	#$20,d4
0000CFDA 3A3C 0010                  		move.w	#$10,d5
0000CFDE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000CFE2 3C3C 005F                  		move.w	#$5F,d6
0000CFE6                            
0000CFE6                            Obj32_MZLoop:
0000CFE6 4A29 0001                  		tst.b	1(a1)
0000CFEA 6A00                       		bpl.s	loc_BE4E
0000CFEC 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000CFF0 6700                       		beq.s	loc_BE5E	; if yes, branch
0000CFF2                            
0000CFF2                            loc_BE4E:
0000CFF2 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000CFF6 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000CFFA                            
0000CFFA 361F                       		move.w	(sp)+,d3
0000CFFC 7000                       		moveq	#0,d0
0000CFFE                            
0000CFFE                            locret_BE5A:
0000CFFE 4E75                       		rts	
0000D000                            ; ===========================================================================
0000D000 1010                       Obj32_MZData:	dc.b $10, $10
0000D002                            ; ===========================================================================
0000D002                            
0000D002                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D002 7001                       		moveq	#1,d0
0000D004 0240 003F                  		andi.w	#$3F,d0
0000D008 D040                       		add.w	d0,d0
0000D00A 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D00E 121A                       		move.b	(a2)+,d1
0000D010 4881                       		ext.w	d1
0000D012 3029 0008                  		move.w	8(a1),d0
0000D016 9041                       		sub.w	d1,d0
0000D018 9042                       		sub.w	d2,d0
0000D01A 6400                       		bcc.s	loc_BE80
0000D01C D241                       		add.w	d1,d1
0000D01E D041                       		add.w	d1,d0
0000D020 6500                       		bcs.s	loc_BE84
0000D022 60CE                       		bra.s	loc_BE4E
0000D024                            ; ===========================================================================
0000D024                            
0000D024                            loc_BE80:
0000D024 B044                       		cmp.w	d4,d0
0000D026 62CA                       		bhi.s	loc_BE4E
0000D028                            
0000D028                            loc_BE84:
0000D028 121A                       		move.b	(a2)+,d1
0000D02A 4881                       		ext.w	d1
0000D02C 3029 000C                  		move.w	$C(a1),d0
0000D030 9041                       		sub.w	d1,d0
0000D032 9043                       		sub.w	d3,d0
0000D034 6400                       		bcc.s	loc_BE9A
0000D036 D241                       		add.w	d1,d1
0000D038 D041                       		add.w	d1,d0
0000D03A 6500                       		bcs.s	loc_BE9E
0000D03C 60B4                       		bra.s	loc_BE4E
0000D03E                            ; ===========================================================================
0000D03E                            
0000D03E                            loc_BE9A:
0000D03E B045                       		cmp.w	d5,d0
0000D040 62B0                       		bhi.s	loc_BE4E
0000D042                            
0000D042                            loc_BE9E:
0000D042 361F                       		move.w	(sp)+,d3
0000D044 7001                       		moveq	#1,d0
0000D046 4E75                       		rts	
0000D048                            ; End of function Obj32_MZBlock
0000D048                            
0000D048                            ; ===========================================================================
0000D048                            ; ---------------------------------------------------------------------------
0000D048                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D048                            ; ---------------------------------------------------------------------------
0000D048                            Map_obj32:
0000D048                            	include "_maps\obj32.asm"
0000D048                            ; ---------------------------------------------------------------------------
0000D048                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D048                            ; ---------------------------------------------------------------------------
0000D048 0000                       		dc.w byte_BEAC-Map_obj32
0000D04A 0000                       		dc.w byte_BEB7-Map_obj32
0000D04C 0000                       		dc.w byte_BEC2-Map_obj32
0000D04E 0000                       		dc.w byte_BEB7-Map_obj32
0000D050 02                         byte_BEAC:	dc.b 2
0000D051 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D056 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D05B 02                         byte_BEB7:	dc.b 2
0000D05C F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D061 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D066 02                         byte_BEC2:	dc.b 2
0000D067 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D06C F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D071 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D076                            		even
0000D076                            		even
0000D076                            
0000D076                            ; ===========================================================================
0000D076                            ; ---------------------------------------------------------------------------
0000D076                            ; Object 33 - pushable blocks (MZ, LZ)
0000D076                            ; ---------------------------------------------------------------------------
0000D076                            
0000D076                            Obj33:					; XREF: Obj_Index
0000D076 7000                       		moveq	#0,d0
0000D078 1028 0024                  		move.b	$24(a0),d0
0000D07C 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D080 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D084                            ; ===========================================================================
0000D084 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D086 0000                       		dc.w loc_BF6E-Obj33_Index
0000D088 0000                       		dc.w loc_C02C-Obj33_Index
0000D08A                            
0000D08A 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D08C 4001                       		dc.b $40, 1
0000D08E                            ; ===========================================================================
0000D08E                            
0000D08E                            Obj33_Main:				; XREF: Obj33_Index
0000D08E 5428 0024                  		addq.b	#2,$24(a0)
0000D092 117C 000F 0016             		move.b	#$F,$16(a0)
0000D098 117C 000F 0017             		move.b	#$F,$17(a0)
0000D09E 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D0A6 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D0AC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D0B2 6600                       		bne.s	loc_BF16
0000D0B4 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D0BA                            
0000D0BA                            loc_BF16:
0000D0BA 117C 0004 0001             		move.b	#4,1(a0)
0000D0C0 117C 0003 0018             		move.b	#3,$18(a0)
0000D0C6 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D0CC 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D0D2 7000                       		moveq	#0,d0
0000D0D4 1028 0028                  		move.b	$28(a0),d0
0000D0D8 D040                       		add.w	d0,d0
0000D0DA 0240 000E                  		andi.w	#$E,d0
0000D0DE 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D0E2 115A 0019                  		move.b	(a2)+,$19(a0)
0000D0E6 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D0EA 4A28 0028                  		tst.b	$28(a0)
0000D0EE 6700                       		beq.s	Obj33_ChkGone
0000D0F0 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D0F6                            
0000D0F6                            Obj33_ChkGone:
0000D0F6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D0FA 6700                       		beq.s	loc_BF6E		; if it's zero, don't remember object
0000D0FC 3440                       		movea.w	d0,a2	; load address into a2
0000D0FE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D102 08D2 0000                  		bset	#0,(a2)
0000D106 6600 0000                  		bne.w	DeleteObject
0000D10A                            
0000D10A                            loc_BF6E:				; XREF: Obj33_Index
0000D10A 4A28 0032                  		tst.b	$32(a0)
0000D10E 6600 0000                  		bne.w	loc_C046
0000D112 7200                       		moveq	#0,d1
0000D114 1228 0019                  		move.b	$19(a0),d1
0000D118 0641 000B                  		addi.w	#$B,d1
0000D11C 343C 0010                  		move.w	#$10,d2
0000D120 363C 0011                  		move.w	#$11,d3
0000D124 3828 0008                  		move.w	8(a0),d4
0000D128 6100 0000                  		bsr.w	loc_C186
0000D12C 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D132 6600                       		bne.s	loc_BFC6	; if not, branch
0000D134 08A8 0007 0028             		bclr	#7,$28(a0)
0000D13A 3028 0008                  		move.w	8(a0),d0
0000D13E 0C40 0A20                  		cmpi.w	#$A20,d0
0000D142 6500                       		bcs.s	loc_BFC6
0000D144 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D148 6400                       		bcc.s	loc_BFC6
0000D14A 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D14E 0440 001C                  		subi.w	#$1C,d0
0000D152 3140 000C                  		move.w	d0,$C(a0)
0000D156 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D15C 08E8 0007 0028             		bset	#7,$28(a0)
0000D162                            
0000D162                            loc_BFC6:
0000D162 3028 0008                  		move.w	8(a0),d0
0000D166 0240 FF80                  		andi.w	#$FF80,d0
0000D16A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D16E 0441 0080                  		subi.w	#$80,d1
0000D172 0241 FF80                  		andi.w	#$FF80,d1
0000D176 9041                       		sub.w	d1,d0
0000D178 0C40 0280                  		cmpi.w	#$280,d0
0000D17C 6300 0000                  		bls.w	DisplaySprite
0000D180 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D184 6700                       		beq.s	loc_BFE6	; if it's zero, don't remember object
0000D186 3440                       		movea.w	d0,a2	; load address into a2
0000D188 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D18C                            
0000D18C                            loc_BFE6:
0000D18C 3028 0034                  		move.w	$34(a0),d0
0000D190 0240 FF80                  		andi.w	#$FF80,d0
0000D194 3238 F700                  		move.w	($FFFFF700).w,d1
0000D198 0441 0080                  		subi.w	#$80,d1
0000D19C 0241 FF80                  		andi.w	#$FF80,d1
0000D1A0 9041                       		sub.w	d1,d0
0000D1A2 0C40 0280                  		cmpi.w	#$280,d0
0000D1A6 6200                       		bhi.s	loc_C016
0000D1A8 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D1AE 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D1B4 117C 0004 0024             		move.b	#4,$24(a0)
0000D1BA 6000                       		bra.s	loc_C02C
0000D1BC                            ; ===========================================================================
0000D1BC                            
0000D1BC                            loc_C016:
0000D1BC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D1C0 6700                       		beq.s	loc_C028		; if it's zero, don't remember object
0000D1C2 3440                       		movea.w	d0,a2	; load address into a2
0000D1C4 0892 0000                  		bclr	#0,(a2)
0000D1C8                            
0000D1C8                            loc_C028:
0000D1C8 6000 0000                  		bra.w	DeleteObject
0000D1CC                            ; ===========================================================================
0000D1CC                            
0000D1CC                            loc_C02C:				; XREF: Obj33_Index
0000D1CC 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D1D0 6700                       		beq.s	locret_C044
0000D1D2 117C 0002 0024             		move.b	#2,$24(a0)
0000D1D8 4228 0032                  		clr.b	$32(a0)
0000D1DC 4268 0010                  		clr.w	$10(a0)
0000D1E0 4268 0012                  		clr.w	$12(a0)
0000D1E4                            
0000D1E4                            locret_C044:
0000D1E4 4E75                       		rts	
0000D1E6                            ; ===========================================================================
0000D1E6                            
0000D1E6                            loc_C046:				; XREF: loc_BF6E
0000D1E6 3F28 0008                  		move.w	8(a0),-(sp)
0000D1EA 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D1F0 6400                       		bcc.s	loc_C056
0000D1F2 6100 0000                  		bsr.w	SpeedToPos
0000D1F6                            
0000D1F6                            loc_C056:
0000D1F6 0828 0001 0022             		btst	#1,$22(a0)
0000D1FC 6700                       		beq.s	loc_C0A0
0000D1FE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D204 4EB9 0000 0000             		jsr	ObjHitFloor
0000D20A 4A41                       		tst.w	d1
0000D20C 6A00 0000                  		bpl.w	loc_C09E
0000D210 D368 000C                  		add.w	d1,$C(a0)
0000D214 4268 0012                  		clr.w	$12(a0)
0000D218 08A8 0001 0022             		bclr	#1,$22(a0)
0000D21E 3011                       		move.w	(a1),d0
0000D220 0240 03FF                  		andi.w	#$3FF,d0
0000D224 0C40 016A                  		cmpi.w	#$16A,d0
0000D228 6500                       		bcs.s	loc_C09E
0000D22A 3028 0030                  		move.w	$30(a0),d0
0000D22E E640                       		asr.w	#3,d0
0000D230 3140 0010                  		move.w	d0,$10(a0)
0000D234 117C 0001 0032             		move.b	#1,$32(a0)
0000D23A 4268 000E                  		clr.w	$E(a0)
0000D23E                            
0000D23E                            loc_C09E:
0000D23E 6000                       		bra.s	loc_C0E6
0000D240                            ; ===========================================================================
0000D240                            
0000D240                            loc_C0A0:
0000D240 4A68 0010                  		tst.w	$10(a0)
0000D244 6700 0000                  		beq.w	loc_C0D6
0000D248 6B00                       		bmi.s	loc_C0BC
0000D24A 7600                       		moveq	#0,d3
0000D24C 1628 0019                  		move.b	$19(a0),d3
0000D250 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D256 4A41                       		tst.w	d1		; has block touched a wall?
0000D258 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D25A 6000                       		bra.s	loc_C0E6
0000D25C                            ; ===========================================================================
0000D25C                            
0000D25C                            loc_C0BC:
0000D25C 7600                       		moveq	#0,d3
0000D25E 1628 0019                  		move.b	$19(a0),d3
0000D262 4643                       		not.w	d3
0000D264 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D26A 4A41                       		tst.w	d1		; has block touched a wall?
0000D26C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D26E 6000                       		bra.s	loc_C0E6
0000D270                            ; ===========================================================================
0000D270                            
0000D270                            Obj33_StopPush:
0000D270 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D274 6000                       		bra.s	loc_C0E6
0000D276                            ; ===========================================================================
0000D276                            
0000D276                            loc_C0D6:
0000D276 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D27E 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D284 6400                       		bcc.s	loc_C104
0000D286                            
0000D286                            loc_C0E6:
0000D286 7200                       		moveq	#0,d1
0000D288 1228 0019                  		move.b	$19(a0),d1
0000D28C 0641 000B                  		addi.w	#$B,d1
0000D290 343C 0010                  		move.w	#$10,d2
0000D294 363C 0011                  		move.w	#$11,d3
0000D298 381F                       		move.w	(sp)+,d4
0000D29A 6100 0000                  		bsr.w	loc_C186
0000D29E 6100                       		bsr.s	Obj33_ChkLava
0000D2A0 6000 FEC0                  		bra.w	loc_BFC6
0000D2A4                            ; ===========================================================================
0000D2A4                            
0000D2A4                            loc_C104:
0000D2A4 381F                       		move.w	(sp)+,d4
0000D2A6 43F8 D000                  		lea	($FFFFD000).w,a1
0000D2AA 08A9 0003 0022             		bclr	#3,$22(a1)
0000D2B0 08A8 0003 0022             		bclr	#3,$22(a0)
0000D2B6 6000 FED4                  		bra.w	loc_BFE6
0000D2BA                            ; ===========================================================================
0000D2BA                            
0000D2BA                            Obj33_ChkLava:
0000D2BA 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D2C0 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D2C2 343C FFE0                  		move.w	#-$20,d2
0000D2C6 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D2CC 6700                       		beq.s	Obj33_LoadLava
0000D2CE 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D2D4 6700                       		beq.s	Obj33_LoadLava
0000D2D6 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D2DC 6700                       		beq.s	Obj33_LoadLava
0000D2DE 4E75                       		rts	
0000D2E0                            ; ===========================================================================
0000D2E0                            
0000D2E0                            Obj33_ChkLava2:
0000D2E0 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D2E6 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D2E8 343C 0020                  		move.w	#$20,d2
0000D2EC 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D2F2 6700                       		beq.s	Obj33_LoadLava
0000D2F4 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D2FA 6700                       		beq.s	Obj33_LoadLava
0000D2FC                            
0000D2FC                            Obj33_NoLava:
0000D2FC 4E75                       		rts	
0000D2FE                            ; ===========================================================================
0000D2FE                            
0000D2FE                            Obj33_LoadLava:
0000D2FE 6100 0000                  		bsr.w	SingleObjLoad
0000D302 6600                       		bne.s	locret_C184
0000D304 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000D308 3368 0008 0008             		move.w	8(a0),8(a1)
0000D30E D569 0008                  		add.w	d2,8(a1)
0000D312 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D318 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D31E 2348 003C                  		move.l	a0,$3C(a1)
0000D322                            
0000D322                            locret_C184:
0000D322 4E75                       		rts	
0000D324                            ; ===========================================================================
0000D324                            
0000D324                            loc_C186:				; XREF: loc_BF6E
0000D324 1028 0025                  		move.b	$25(a0),d0
0000D328 6700 0000                  		beq.w	loc_C218
0000D32C 5500                       		subq.b	#2,d0
0000D32E 6600                       		bne.s	loc_C1AA
0000D330 6100 B352                  		bsr.w	ExitPlatform
0000D334 0829 0003 0022             		btst	#3,$22(a1)
0000D33A 6600                       		bne.s	loc_C1A4
0000D33C 4228 0025                  		clr.b	$25(a0)
0000D340 4E75                       		rts	
0000D342                            ; ===========================================================================
0000D342                            
0000D342                            loc_C1A4:
0000D342 3404                       		move.w	d4,d2
0000D344 6000 B8A8                  		bra.w	MvSonicOnPtfm
0000D348                            ; ===========================================================================
0000D348                            
0000D348                            loc_C1AA:
0000D348 5500                       		subq.b	#2,d0
0000D34A 6600                       		bne.s	loc_C1F2
0000D34C 6100 0000                  		bsr.w	SpeedToPos
0000D350 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D356 4EB9 0000 0000             		jsr	ObjHitFloor
0000D35C 4A41                       		tst.w	d1
0000D35E 6A00 0000                  		bpl.w	locret_C1F0
0000D362 D368 000C                  		add.w	d1,$C(a0)
0000D366 4268 0012                  		clr.w	$12(a0)
0000D36A 4228 0025                  		clr.b	$25(a0)
0000D36E 3011                       		move.w	(a1),d0
0000D370 0240 03FF                  		andi.w	#$3FF,d0
0000D374 0C40 016A                  		cmpi.w	#$16A,d0
0000D378 6500                       		bcs.s	locret_C1F0
0000D37A 3028 0030                  		move.w	$30(a0),d0
0000D37E E640                       		asr.w	#3,d0
0000D380 3140 0010                  		move.w	d0,$10(a0)
0000D384 117C 0001 0032             		move.b	#1,$32(a0)
0000D38A 4268 000E                  		clr.w	$E(a0)
0000D38E                            
0000D38E                            locret_C1F0:
0000D38E 4E75                       		rts	
0000D390                            ; ===========================================================================
0000D390                            
0000D390                            loc_C1F2:
0000D390 6100 0000                  		bsr.w	SpeedToPos
0000D394 3028 0008                  		move.w	8(a0),d0
0000D398 0240 000C                  		andi.w	#$C,d0
0000D39C 6600 0000                  		bne.w	locret_C2E4
0000D3A0 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D3A6 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D3AC 4268 0010                  		clr.w	$10(a0)
0000D3B0 5528 0025                  		subq.b	#2,$25(a0)
0000D3B4 4E75                       		rts	
0000D3B6                            ; ===========================================================================
0000D3B6                            
0000D3B6                            loc_C218:
0000D3B6 6100 0000                  		bsr.w	loc_FAC8
0000D3BA 4A44                       		tst.w	d4
0000D3BC 6700 0000                  		beq.w	locret_C2E4
0000D3C0 6B00 0000                  		bmi.w	locret_C2E4
0000D3C4 4A28 0032                  		tst.b	$32(a0)
0000D3C8 6700                       		beq.s	loc_C230
0000D3CA 6000 0000                  		bra.w	locret_C2E4
0000D3CE                            ; ===========================================================================
0000D3CE                            
0000D3CE                            loc_C230:
0000D3CE 4A40                       		tst.w	d0
0000D3D0 6700 0000                  		beq.w	locret_C2E4
0000D3D4 6B00                       		bmi.s	loc_C268
0000D3D6 0829 0000 0022             		btst	#0,$22(a1)
0000D3DC 6600 0000                  		bne.w	locret_C2E4
0000D3E0 3F00                       		move.w	d0,-(sp)
0000D3E2 7600                       		moveq	#0,d3
0000D3E4 1628 0019                  		move.b	$19(a0),d3
0000D3E8 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D3EE 301F                       		move.w	(sp)+,d0
0000D3F0 4A41                       		tst.w	d1
0000D3F2 6B00 0000                  		bmi.w	locret_C2E4
0000D3F6 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D3FE 7001                       		moveq	#1,d0
0000D400 323C 0040                  		move.w	#$40,d1
0000D404 6000                       		bra.s	loc_C294
0000D406                            ; ===========================================================================
0000D406                            
0000D406                            loc_C268:
0000D406 0829 0000 0022             		btst	#0,$22(a1)
0000D40C 6700                       		beq.s	locret_C2E4
0000D40E 3F00                       		move.w	d0,-(sp)
0000D410 7600                       		moveq	#0,d3
0000D412 1628 0019                  		move.b	$19(a0),d3
0000D416 4643                       		not.w	d3
0000D418 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D41E 301F                       		move.w	(sp)+,d0
0000D420 4A41                       		tst.w	d1
0000D422 6B00                       		bmi.s	locret_C2E4
0000D424 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000D42C 70FF                       		moveq	#-1,d0
0000D42E 323C FFC0                  		move.w	#-$40,d1
0000D432                            
0000D432                            loc_C294:
0000D432 43F8 D000                  		lea	($FFFFD000).w,a1
0000D436 D169 0008                  		add.w	d0,8(a1)
0000D43A 3341 0020                  		move.w	d1,$20(a1)
0000D43E 337C 0000 0010             		move.w	#0,$10(a1)
0000D444 3F00                       		move.w	d0,-(sp)
0000D446 303C 00A7                  		move.w	#$A7,d0
0000D44A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play pushing sound
0000D450 301F                       		move.w	(sp)+,d0
0000D452 4A28 0028                  		tst.b	$28(a0)
0000D456 6B00                       		bmi.s	locret_C2E4
0000D458 3F00                       		move.w	d0,-(sp)
0000D45A 4EB9 0000 0000             		jsr	ObjHitFloor
0000D460 301F                       		move.w	(sp)+,d0
0000D462 0C41 0004                  		cmpi.w	#4,d1
0000D466 6F00                       		ble.s	loc_C2E0
0000D468 317C 0400 0010             		move.w	#$400,$10(a0)
0000D46E 4A40                       		tst.w	d0
0000D470 6A00                       		bpl.s	loc_C2D8
0000D472 4468 0010                  		neg.w	$10(a0)
0000D476                            
0000D476                            loc_C2D8:
0000D476 117C 0006 0025             		move.b	#6,$25(a0)
0000D47C 6000                       		bra.s	locret_C2E4
0000D47E                            ; ===========================================================================
0000D47E                            
0000D47E                            loc_C2E0:
0000D47E D368 000C                  		add.w	d1,$C(a0)
0000D482                            
0000D482                            locret_C2E4:
0000D482 4E75                       		rts	
0000D484                            ; ===========================================================================
0000D484                            ; ---------------------------------------------------------------------------
0000D484                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D484                            ; ---------------------------------------------------------------------------
0000D484                            Map_obj33:
0000D484                            	include "_maps\obj33.asm"
0000D484                            ; ---------------------------------------------------------------------------
0000D484                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D484                            ; ---------------------------------------------------------------------------
0000D484 0000                       		dc.w byte_C2EA-Map_obj33
0000D486 0000                       		dc.w byte_C2F0-Map_obj33
0000D488 01                         byte_C2EA:	dc.b 1
0000D489 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000D48E 04                         byte_C2F0:	dc.b 4
0000D48F F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000D494 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000D499 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000D49E F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000D4A4 00                         		even
0000D4A4 00                         		even
0000D4A4                            
0000D4A4                            ; ===========================================================================
0000D4A4                            ; ---------------------------------------------------------------------------
0000D4A4                            ; Object 34 - zone title cards
0000D4A4                            ; ---------------------------------------------------------------------------
0000D4A4                            
0000D4A4                            Obj34:					; XREF: Obj_Index
0000D4A4 7000                       		moveq	#0,d0
0000D4A6 1028 0024                  		move.b	$24(a0),d0
0000D4AA 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000D4AE 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000D4B2                            ; ===========================================================================
0000D4B2 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000D4B4 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000D4B6 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D4B8 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D4BA                            ; ===========================================================================
0000D4BA                            
0000D4BA                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000D4BA 2248                       		movea.l	a0,a1
0000D4BC 7000                       		moveq	#0,d0
0000D4BE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D4C2 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000D4C8 6600                       		bne.s	Obj34_CheckFZ
0000D4CA 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000D4CC                            
0000D4CC                            Obj34_CheckFZ:
0000D4CC 3400                       		move.w	d0,d2
0000D4CE 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000D4D4 6600                       		bne.s	Obj34_LoadConfig
0000D4D6 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000D4D8 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D4DA                            
0000D4DA                            Obj34_LoadConfig:
0000D4DA 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000D4E0 E948                       		lsl.w	#4,d0
0000D4E2 D6C0                       		adda.w	d0,a3
0000D4E4 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000D4EA 7203                       		moveq	#3,d1
0000D4EC                            
0000D4EC                            Obj34_Loop:
0000D4EC 12BC 0034                  		move.b	#$34,0(a1)
0000D4F0 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000D4F4 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000D4F8 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000D4FC 335A 000A                  		move.w	(a2)+,$A(a1)
0000D500 135A 0024                  		move.b	(a2)+,$24(a1)
0000D504 101A                       		move.b	(a2)+,d0
0000D506 6600                       		bne.s	Obj34_ActNumber
0000D508 1002                       		move.b	d2,d0
0000D50A                            
0000D50A                            Obj34_ActNumber:
0000D50A 0C00 0007                  		cmpi.b	#7,d0
0000D50E 6600                       		bne.s	Obj34_MakeSprite
0000D510 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000D514 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000D51A 6600                       		bne.s	Obj34_MakeSprite
0000D51C 5300                       		subq.b	#1,d0
0000D51E                            
0000D51E                            Obj34_MakeSprite:
0000D51E 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000D522 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000D52A 337C 8580 0002             		move.w	#$8580,2(a1)
0000D530 137C 0078 0019             		move.b	#$78,$19(a1)
0000D536 137C 0000 0001             		move.b	#0,1(a1)
0000D53C 137C 0000 0018             		move.b	#0,$18(a1)
0000D542 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000D548 43E9 0040                  		lea	$40(a1),a1	; next object
0000D54C 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000D550                            
0000D550                            Obj34_ChkPos:				; XREF: Obj34_Index
0000D550 7210                       		moveq	#$10,d1		; set horizontal speed
0000D552 3028 0030                  		move.w	$30(a0),d0
0000D556 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000D55A 6700                       		beq.s	loc_C3C8	; if yes, branch
0000D55C 6C00                       		bge.s	Obj34_Move
0000D55E 4441                       		neg.w	d1
0000D560                            
0000D560                            Obj34_Move:
0000D560 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D564                            
0000D564                            loc_C3C8:
0000D564 3028 0008                  		move.w	8(a0),d0
0000D568 6B00                       		bmi.s	locret_C3D8
0000D56A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D56E 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000D570 6000 0000                  		bra.w	DisplaySprite
0000D574                            ; ===========================================================================
0000D574                            
0000D574                            locret_C3D8:
0000D574 4E75                       		rts	
0000D576                            ; ===========================================================================
0000D576                            
0000D576                            Obj34_Wait:				; XREF: Obj34_Index
0000D576 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000D57A 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000D57C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000D580 6000 0000                  		bra.w	DisplaySprite
0000D584                            ; ===========================================================================
0000D584                            
0000D584                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000D584 4A28 0001                  		tst.b	1(a0)
0000D588 6A00                       		bpl.s	Obj34_ChangeArt
0000D58A 7220                       		moveq	#$20,d1
0000D58C 3028 0032                  		move.w	$32(a0),d0
0000D590 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000D594 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000D596 6C00                       		bge.s	Obj34_Move2
0000D598 4441                       		neg.w	d1
0000D59A                            
0000D59A                            Obj34_Move2:
0000D59A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D59E 3028 0008                  		move.w	8(a0),d0
0000D5A2 6B00                       		bmi.s	locret_C412
0000D5A4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D5A8 6400                       		bcc.s	locret_C412	; if yes, branch
0000D5AA 6000 0000                  		bra.w	DisplaySprite
0000D5AE                            ; ===========================================================================
0000D5AE                            
0000D5AE                            locret_C412:
0000D5AE 4E75                       		rts	
0000D5B0                            ; ===========================================================================
0000D5B0                            
0000D5B0                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000D5B0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D5B6 6600                       		bne.s	Obj34_Delete
0000D5B8 7002                       		moveq	#2,d0
0000D5BA 4EB9 0000 1434             		jsr	(LoadPLC).l	; load explosion patterns
0000D5C0 7000                       		moveq	#0,d0
0000D5C2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D5C6 0640 0015                  		addi.w	#$15,d0
0000D5CA 4EB9 0000 1434             		jsr	(LoadPLC).l	; load animal patterns
0000D5D0                            
0000D5D0                            Obj34_Delete:
0000D5D0 6000 0000                  		bra.w	DeleteObject
0000D5D4                            ; ===========================================================================
0000D5D4 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000D5D6 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000D5D8 00E4                       		dc.w $E4
0000D5DA 0206                       		dc.b 2,	6
0000D5DC 00EA                       		dc.w $EA
0000D5DE 0207                       		dc.b 2,	7
0000D5E0 00E0                       		dc.w $E0
0000D5E2 020A                       		dc.b 2,	$A
0000D5E4                            ; ---------------------------------------------------------------------------
0000D5E4                            ; Title	card configuration data
0000D5E4                            ; Format:
0000D5E4                            ; 4 bytes per item (YYYY XXXX)
0000D5E4                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000D5E4                            ; ---------------------------------------------------------------------------
0000D5E4 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D5F4 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000D604 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D614 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D624 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D634 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D644 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D654                            ; ===========================================================================
0000D654                            ; ---------------------------------------------------------------------------
0000D654                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D654                            ; ---------------------------------------------------------------------------
0000D654                            
0000D654                            Obj39:					; XREF: Obj_Index
0000D654 7000                       		moveq	#0,d0
0000D656 1028 0024                  		move.b	$24(a0),d0
0000D65A 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D65E 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D662                            ; ===========================================================================
0000D662 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D664 0000                       		dc.w loc_C50C-Obj39_Index
0000D666 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D668                            ; ===========================================================================
0000D668                            
0000D668                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D668 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D66C 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D66E 4E75                       		rts	
0000D670                            ; ===========================================================================
0000D670                            
0000D670                            Obj39_Main:
0000D670 5428 0024                  		addq.b	#2,$24(a0)
0000D674 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D67A 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D680 6700                       		beq.s	loc_C4EC	; if not, branch
0000D682 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D688                            
0000D688                            loc_C4EC:
0000D688 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D68E 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D696 317C 855E 0002             		move.w	#$855E,2(a0)
0000D69C 117C 0000 0001             		move.b	#0,1(a0)
0000D6A2 117C 0000 0018             		move.b	#0,$18(a0)
0000D6A8                            
0000D6A8                            loc_C50C:				; XREF: Obj39_Index
0000D6A8 7210                       		moveq	#$10,d1		; set horizontal speed
0000D6AA 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D6B0 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D6B2 6500                       		bcs.s	Obj39_Move
0000D6B4 4441                       		neg.w	d1
0000D6B6                            
0000D6B6                            Obj39_Move:
0000D6B6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D6BA 6000 0000                  		bra.w	DisplaySprite
0000D6BE                            ; ===========================================================================
0000D6BE                            
0000D6BE                            Obj39_SetWait:				; XREF: Obj39_Main
0000D6BE 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D6C4 5428 0024                  		addq.b	#2,$24(a0)
0000D6C8 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000D6CE 4A38 FE18                  		tst.b	($FFFFFE18).w
0000D6D2 6600                       		bne.s	@nocontinues
0000D6D4 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
0000D6DA                            
0000D6DA                            	@nocontinues:
0000D6DA 4E75                       		rts	
0000D6DC                            ; ===========================================================================
0000D6DC                            
0000D6DC                            Obj39_Wait:				; XREF: Obj39_Index
0000D6DC 1038 F605                  		move.b	($FFFFF605).w,d0
0000D6E0 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D6E4 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D6E6 0828 0000 001A             		btst	#0,$1A(a0)
0000D6EC 6600                       		bne.s	Obj39_Display
0000D6EE 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D6F2 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D6F4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D6F8 6000 0000                  		bra.w	DisplaySprite
0000D6FC                            ; ===========================================================================
0000D6FC                            
0000D6FC                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D6FC 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D700 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D702 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D708 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D70C 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D70E 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D714 6000                       		bra.s	Obj39_Display
0000D716                            ; ===========================================================================
0000D716                            
0000D716                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D716 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D71C                            
0000D71C                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D71C 6000 0000                  		bra.w	DisplaySprite
0000D720                            ; ===========================================================================
0000D720                            ; ---------------------------------------------------------------------------
0000D720                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D720                            ; ---------------------------------------------------------------------------
0000D720                            
0000D720                            Obj3A:					; XREF: Obj_Index
0000D720 7000                       		moveq	#0,d0
0000D722 1028 0024                  		move.b	$24(a0),d0
0000D726 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D72A 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D72E                            ; ===========================================================================
0000D72E 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D730 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D732 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D734 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D736 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D738 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D73A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D73C 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D73E 0000                       		dc.w loc_C766-Obj3A_Index
0000D740                            ; ===========================================================================
0000D740                            
0000D740                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D740 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D744 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D746 4E75                       		rts	
0000D748                            ; ===========================================================================
0000D748                            
0000D748                            Obj3A_Main:
0000D748 2248                       		movea.l	a0,a1
0000D74A 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D750 7206                       		moveq	#6,d1
0000D752                            
0000D752                            Obj3A_Loop:
0000D752 12BC 003A                  		move.b	#$3A,0(a1)
0000D756 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D75A 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D75E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D762 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D766 135A 0024                  		move.b	(a2)+,$24(a1)
0000D76A 101A                       		move.b	(a2)+,d0
0000D76C 0C00 0006                  		cmpi.b	#6,d0
0000D770 6600                       		bne.s	loc_C5CA
0000D772 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D776                            
0000D776                            loc_C5CA:
0000D776 1340 001A                  		move.b	d0,$1A(a1)
0000D77A 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D782 337C 8580 0002             		move.w	#$8580,2(a1)
0000D788 137C 0000 0001             		move.b	#0,1(a1)
0000D78E 43E9 0040                  		lea	$40(a1),a1
0000D792 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D796                            
0000D796                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D796 7210                       		moveq	#$10,d1		; set horizontal speed
0000D798 3028 0030                  		move.w	$30(a0),d0
0000D79C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D7A0 6700                       		beq.s	loc_C61A	; if yes, branch
0000D7A2 6C00                       		bge.s	Obj3A_Move
0000D7A4 4441                       		neg.w	d1
0000D7A6                            
0000D7A6                            Obj3A_Move:
0000D7A6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D7AA                            
0000D7AA                            loc_C5FE:				; XREF: loc_C61A
0000D7AA 3028 0008                  		move.w	8(a0),d0
0000D7AE 6B00                       		bmi.s	locret_C60E
0000D7B0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D7B4 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D7B6 6000 0000                  		bra.w	DisplaySprite
0000D7BA                            ; ===========================================================================
0000D7BA                            
0000D7BA                            locret_C60E:
0000D7BA 4E75                       		rts	
0000D7BC                            ; ===========================================================================
0000D7BC                            
0000D7BC                            loc_C610:				; XREF: loc_C61A
0000D7BC 117C 000E 0024             		move.b	#$E,$24(a0)
0000D7C2 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D7C6                            ; ===========================================================================
0000D7C6                            
0000D7C6                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D7C6 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D7CC 67EE                       		beq.s	loc_C610
0000D7CE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D7D4 66D4                       		bne.s	loc_C5FE
0000D7D6 5428 0024                  		addq.b	#2,$24(a0)
0000D7DA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D7E0                            
0000D7E0                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D7E0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D7E4 6600                       		bne.s	Obj3A_Display
0000D7E6 5428 0024                  		addq.b	#2,$24(a0)
0000D7EA                            
0000D7EA                            Obj3A_Display:
0000D7EA 6000 0000                  		bra.w	DisplaySprite
0000D7EE                            ; ===========================================================================
0000D7EE                            
0000D7EE                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D7EE 6100 0000                  		bsr.w	DisplaySprite
0000D7F2 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D7F8 7000                       		moveq	#0,d0
0000D7FA 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D7FE 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D800 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D804 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D80A                            
0000D80A                            Obj3A_RingBonus:
0000D80A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D80E 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D810 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D814 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D81A                            
0000D81A                            Obj3A_ChkBonus:
0000D81A 4A40                       		tst.w	d0		; is there any bonus?
0000D81C 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D81E 303C 00C5                  		move.w	#$C5,d0
0000D822 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D828 5428 0024                  		addq.b	#2,$24(a0)
0000D82C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D832 6600                       		bne.s	Obj3A_SetDelay
0000D834 5828 0024                  		addq.b	#4,$24(a0)
0000D838                            
0000D838                            Obj3A_SetDelay:
0000D838 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D83E                            
0000D83E                            locret_C692:
0000D83E 4E75                       		rts	
0000D840                            ; ===========================================================================
0000D840                            
0000D840                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D840 4EB9 0000 0000             		jsr	AddPoints
0000D846 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D84A 0200 0003                  		andi.b	#3,d0
0000D84E 66EE                       		bne.s	locret_C692
0000D850 303C 00CD                  		move.w	#$CD,d0
0000D854 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D85A                            ; ===========================================================================
0000D85A                            
0000D85A                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D85A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D85E 0240 0007                  		andi.w	#7,d0
0000D862 E748                       		lsl.w	#3,d0
0000D864 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D868 0241 0003                  		andi.w	#3,d1
0000D86C D241                       		add.w	d1,d1
0000D86E D041                       		add.w	d1,d0
0000D870 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D874 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D878 4A40                       		tst.w	d0
0000D87A 6600                       		bne.s	Obj3A_ChkSS
0000D87C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to level (00)
0000D882 6000                       		bra.s	Obj3A_Display2
0000D884                            ; ===========================================================================
0000D884                            
0000D884                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D884 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D888 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D88C 6700                       		beq.s	loc_C6EA	; if not, branch
0000D88E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D894 6000                       		bra.s	Obj3A_Display2
0000D896                            ; ===========================================================================
0000D896                            
0000D896                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D896 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D89C                            
0000D89C                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D89C 6000 0000                  		bra.w	DisplaySprite
0000D8A0                            ; ===========================================================================
0000D8A0                            ; ---------------------------------------------------------------------------
0000D8A0                            ; Level	order array
0000D8A0                            ; ---------------------------------------------------------------------------
0000D8A0                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D8D0                            		even
0000D8D0                            ; ===========================================================================
0000D8D0                            
0000D8D0                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D8D0 7220                       		moveq	#$20,d1		; set horizontal speed
0000D8D2 3028 0032                  		move.w	$32(a0),d0
0000D8D6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D8DA 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D8DC 6C00                       		bge.s	Obj3A_Move2
0000D8DE 4441                       		neg.w	d1
0000D8E0                            
0000D8E0                            Obj3A_Move2:
0000D8E0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D8E4 3028 0008                  		move.w	8(a0),d0
0000D8E8 6B00                       		bmi.s	locret_C748
0000D8EA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D8EE 6400                       		bcc.s	locret_C748	; if yes, branch
0000D8F0 6000 0000                  		bra.w	DisplaySprite
0000D8F4                            ; ===========================================================================
0000D8F4                            
0000D8F4                            locret_C748:
0000D8F4 4E75                       		rts	
0000D8F6                            ; ===========================================================================
0000D8F6                            
0000D8F6                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D8F6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D8FC 6600 0000                  		bne.w	DeleteObject
0000D900 5428 0024                  		addq.b	#2,$24(a0)
0000D904 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D908 303C 008D                  		move.w	#$8D,d0
0000D90C 4EF9 0000 11F0             		jmp	(PlaySound).l	; play FZ music
0000D912                            ; ===========================================================================
0000D912                            
0000D912                            loc_C766:				; XREF: Obj3A_Index
0000D912 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D916 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D91C 6700 0000                  		beq.w	DeleteObject
0000D920 4E75                       		rts	
0000D922                            ; ===========================================================================
0000D922 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D928 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D92A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D930 0201                       		dc.b 2,	1
0000D932 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D938 0206                       		dc.b 2,	6
0000D93A 0520 0120 00EC             		dc.w $520, $120, $EC
0000D940 0202                       		dc.b 2,	2
0000D942 0540 0120 00FC             		dc.w $540, $120, $FC
0000D948 0203                       		dc.b 2,	3
0000D94A 0560 0120 010C             		dc.w $560, $120, $10C
0000D950 0204                       		dc.b 2,	4
0000D952 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D958 0205                       		dc.b 2,	5
0000D95A                            ; ===========================================================================
0000D95A                            ; ---------------------------------------------------------------------------
0000D95A                            ; Object 7E - special stage results screen
0000D95A                            ; ---------------------------------------------------------------------------
0000D95A                            
0000D95A                            Obj7E:					; XREF: Obj_Index
0000D95A 7000                       		moveq	#0,d0
0000D95C 1028 0024                  		move.b	$24(a0),d0
0000D960 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D964 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D968                            ; ===========================================================================
0000D968 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D96A 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D96C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D96E 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D970 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D972 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D974 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D976 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D978 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D97A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D97C 0000                       		dc.w loc_C91A-Obj7E_Index
0000D97E                            ; ===========================================================================
0000D97E                            
0000D97E                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D97E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D982 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D984 4E75                       		rts	
0000D986                            ; ===========================================================================
0000D986                            
0000D986                            Obj7E_Main:
0000D986 2248                       		movea.l	a0,a1
0000D988 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D98E 7203                       		moveq	#3,d1
0000D990 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D996 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D998 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D99A                            
0000D99A                            Obj7E_Loop:
0000D99A 12BC 007E                  		move.b	#$7E,0(a1)
0000D99E 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D9A2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D9A6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D9AA 135A 0024                  		move.b	(a2)+,$24(a1)
0000D9AE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D9B2 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D9BA 337C A580 0002             		move.w	#$A580,2(a1)
0000D9C0 137C 0000 0001             		move.b	#0,1(a1)
0000D9C6 43E9 0040                  		lea	$40(a1),a1
0000D9CA 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D9CE                            
0000D9CE 7007                       		moveq	#7,d0
0000D9D0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D9D4 6700                       		beq.s	loc_C842
0000D9D6 7000                       		moveq	#0,d0
0000D9D8 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D9DC 6600                       		bne.s	loc_C842	; if not, branch
0000D9DE 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D9E0 317C 0018 0008             		move.w	#$18,8(a0)
0000D9E6 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D9EC                            
0000D9EC                            loc_C842:
0000D9EC 1140 001A                  		move.b	d0,$1A(a0)
0000D9F0                            
0000D9F0                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D9F0 7210                       		moveq	#$10,d1		; set horizontal speed
0000D9F2 3028 0030                  		move.w	$30(a0),d0
0000D9F6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D9FA 6700                       		beq.s	loc_C86C	; if yes, branch
0000D9FC 6C00                       		bge.s	Obj7E_Move
0000D9FE 4441                       		neg.w	d1
0000DA00                            
0000DA00                            Obj7E_Move:
0000DA00 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DA04                            
0000DA04                            loc_C85A:				; XREF: loc_C86C
0000DA04 3028 0008                  		move.w	8(a0),d0
0000DA08 6B00                       		bmi.s	locret_C86A
0000DA0A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DA0E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000DA10 6000 0000                  		bra.w	DisplaySprite
0000DA14                            ; ===========================================================================
0000DA14                            
0000DA14                            locret_C86A:
0000DA14 4E75                       		rts	
0000DA16                            ; ===========================================================================
0000DA16                            
0000DA16                            loc_C86C:				; XREF: Obj7E_ChkPos
0000DA16 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DA1C 66E6                       		bne.s	loc_C85A
0000DA1E 5428 0024                  		addq.b	#2,$24(a0)
0000DA22 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DA28 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000DA2E                            
0000DA2E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000DA2E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DA32 6600                       		bne.s	Obj7E_Display
0000DA34 5428 0024                  		addq.b	#2,$24(a0)
0000DA38                            
0000DA38                            Obj7E_Display:
0000DA38 6000 0000                  		bra.w	DisplaySprite
0000DA3C                            ; ===========================================================================
0000DA3C                            
0000DA3C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000DA3C 6100 0000                  		bsr.w	DisplaySprite
0000DA40 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000DA46 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000DA4A 6700                       		beq.s	loc_C8C4	; if yes, branch
0000DA4C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000DA52 700A                       		moveq	#10,d0		; add 10 to score
0000DA54 4EB9 0000 0000             		jsr	AddPoints
0000DA5A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DA5E 0200 0003                  		andi.b	#3,d0
0000DA62 6600                       		bne.s	locret_C8EA
0000DA64 303C 00CD                  		move.w	#$CD,d0
0000DA68 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000DA6E                            ; ===========================================================================
0000DA6E                            
0000DA6E                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000DA6E 303C 00C5                  		move.w	#$C5,d0
0000DA72 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000DA78 5428 0024                  		addq.b	#2,$24(a0)
0000DA7C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DA82 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000DA88 6500                       		bcs.s	locret_C8EA	; if not, branch
0000DA8A 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000DA90 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000DA94                            
0000DA94                            locret_C8EA:
0000DA94 4E75                       		rts	
0000DA96                            ; ===========================================================================
0000DA96                            
0000DA96                            Obj7E_Exit:				; XREF: Obj7E_Index
0000DA96 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DA9C 6000 0000                  		bra.w	DisplaySprite
0000DAA0                            ; ===========================================================================
0000DAA0                            
0000DAA0                            Obj7E_Continue:				; XREF: Obj7E_Index
0000DAA0 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000DAA6 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000DAAC 303C 00BF                  		move.w	#$BF,d0
0000DAB0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play continues music
0000DAB6 5428 0024                  		addq.b	#2,$24(a0)
0000DABA 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000DAC0 6000 0000                  		bra.w	DisplaySprite
0000DAC4                            ; ===========================================================================
0000DAC4                            
0000DAC4                            loc_C91A:				; XREF: Obj7E_Index
0000DAC4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DAC8 0200 000F                  		andi.b	#$F,d0
0000DACC 6600                       		bne.s	Obj7E_Display2
0000DACE 0868 0000 001A             		bchg	#0,$1A(a0)
0000DAD4                            
0000DAD4                            Obj7E_Display2:
0000DAD4 6000 0000                  		bra.w	DisplaySprite
0000DAD8                            ; ===========================================================================
0000DAD8 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000DADE 0200                       		dc.b 2,	0		; rountine number, frame number
0000DAE0 0320 0120 0118             		dc.w $320, $120, $118
0000DAE6 0201                       		dc.b 2,	1
0000DAE8 0360 0120 0128             		dc.w $360, $120, $128
0000DAEE 0202                       		dc.b 2,	2
0000DAF0 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000DAF6 0203                       		dc.b 2,	3
0000DAF8 03A0 0120 0138             		dc.w $3A0, $120, $138
0000DAFE 0206                       		dc.b 2,	6
0000DB00                            ; ===========================================================================
0000DB00                            ; ---------------------------------------------------------------------------
0000DB00                            ; Object 7F - chaos emeralds from the special stage results screen
0000DB00                            ; ---------------------------------------------------------------------------
0000DB00                            
0000DB00                            Obj7F:					; XREF: Obj_Index
0000DB00 7000                       		moveq	#0,d0
0000DB02 1028 0024                  		move.b	$24(a0),d0
0000DB06 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000DB0A 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000DB0E                            ; ===========================================================================
0000DB0E 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000DB10 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000DB12                            
0000DB12                            ; ---------------------------------------------------------------------------
0000DB12                            ; X-axis positions for chaos emeralds
0000DB12                            ; ---------------------------------------------------------------------------
0000DB12 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000DB1E                            ; ===========================================================================
0000DB1E                            
0000DB1E                            Obj7F_Main:				; XREF: Obj7F_Index
0000DB1E 2248                       		movea.l	a0,a1
0000DB20 45F9 0000 DB12             		lea	(Obj7F_PosData).l,a2
0000DB26 7400                       		moveq	#0,d2
0000DB28 7200                       		moveq	#0,d1
0000DB2A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000DB2E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000DB30 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000DB34                            
0000DB34                            Obj7F_Loop:
0000DB34 12BC 007F                  		move.b	#$7F,0(a1)
0000DB38 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000DB3C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000DB42 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000DB46 1633 2000                  		move.b	(a3,d2.w),d3
0000DB4A 1343 001A                  		move.b	d3,$1A(a1)
0000DB4E 1343 001C                  		move.b	d3,$1C(a1)
0000DB52 5202                       		addq.b	#1,d2
0000DB54 5429 0024                  		addq.b	#2,$24(a1)
0000DB58 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000DB60 337C 8541 0002             		move.w	#$8541,2(a1)
0000DB66 137C 0000 0001             		move.b	#0,1(a1)
0000DB6C 43E9 0040                  		lea	$40(a1),a1	; next object
0000DB70 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000DB74                            
0000DB74                            Obj7F_Flash:				; XREF: Obj7F_Index
0000DB74 1028 001A                  		move.b	$1A(a0),d0
0000DB78 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000DB7E 0C00 0006                  		cmpi.b	#6,d0
0000DB82 6600                       		bne.s	Obj7F_Display
0000DB84 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000DB8A                            
0000DB8A                            Obj7F_Display:
0000DB8A 6000 0000                  		bra.w	DisplaySprite
0000DB8E                            ; ===========================================================================
0000DB8E                            ; ---------------------------------------------------------------------------
0000DB8E                            ; Sprite mappings - zone title cards
0000DB8E                            ; ---------------------------------------------------------------------------
0000DB8E 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000DB90 0000                       		dc.w byte_CA2C-Map_obj34
0000DB92 0000                       		dc.w byte_CA5A-Map_obj34
0000DB94 0000                       		dc.w byte_CA7A-Map_obj34
0000DB96 0000                       		dc.w byte_CAA8-Map_obj34
0000DB98 0000                       		dc.w byte_CADC-Map_obj34
0000DB9A 0000                       		dc.w byte_CB10-Map_obj34
0000DB9C 0000                       		dc.w byte_CB26-Map_obj34
0000DB9E 0000                       		dc.w byte_CB31-Map_obj34
0000DBA0 0000                       		dc.w byte_CB3C-Map_obj34
0000DBA2 0000                       		dc.w byte_CB47-Map_obj34
0000DBA4 0000                       		dc.w byte_CB8A-Map_obj34
0000DBA6 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000DBA7 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000DBAC F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000DBB1 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000DBB6 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000DBBB F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DBC0 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000DBC5 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000DBCA F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000DBCF F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000DBD4 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000DBD5 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000DBDA F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000DBDF F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000DBE4 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000DBE9 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000DBEE F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000DBF3 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000DBF8 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DBFD F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000DC02 06                         byte_CA5A:	dc.b 6			; MARBLE
0000DC03 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000DC08 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DC0D F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000DC12 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000DC17 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000DC1C F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000DC21 00                         		dc.b 0
0000DC22 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000DC23 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000DC28 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000DC2D F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000DC32 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000DC37 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000DC3C F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000DC41 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000DC46 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000DC4B F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000DC50 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000DC51 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DC56 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000DC5B F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DC60 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DC65 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000DC6A F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000DC6F F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000DC74 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000DC79 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000DC7E F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000DC83 00                         		dc.b 0
0000DC84 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000DC85 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DC8A F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000DC8F F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DC94 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000DC99 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000DC9E F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000DCA3 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000DCA8 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000DCAD F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000DCB2 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000DCB7 00                         		dc.b 0
0000DCB8 04                         byte_CB10:	dc.b 4			; ZONE
0000DCB9 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000DCBE F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000DCC3 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000DCC8 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DCCD 00                         		dc.b 0
0000DCCE 02                         byte_CB26:	dc.b 2			; ACT 1
0000DCCF 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DCD4 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000DCD9 02                         byte_CB31:	dc.b 2			; ACT 2
0000DCDA 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DCDF F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000DCE4 02                         byte_CB3C:	dc.b 2			; ACT 3
0000DCE5 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DCEA F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000DCEF 0D                         byte_CB47:	dc.b $D			; Oval
0000DCF0 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000DCF5 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000DCFA EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000DCFF F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000DD04 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000DD09 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000DD0E 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000DD13 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000DD18 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000DD1D F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000DD22 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000DD27 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000DD2C 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000DD31 00                         		dc.b 0
0000DD32 05                         byte_CB8A:	dc.b 5			; FINAL
0000DD33 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000DD38 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000DD3D F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DD42 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000DD47 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000DD4C                            		even
0000DD4C                            ; ---------------------------------------------------------------------------
0000DD4C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DD4C                            ; ---------------------------------------------------------------------------
0000DD4C                            Map_obj39:
0000DD4C                            	include "_maps\obj39.asm"
0000DD4C                            ; ---------------------------------------------------------------------------
0000DD4C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DD4C                            ; ---------------------------------------------------------------------------
0000DD4C 0000                       		dc.w byte_CBAC-Map_obj39
0000DD4E 0000                       		dc.w byte_CBB7-Map_obj39
0000DD50 0000                       		dc.w byte_CBC2-Map_obj39
0000DD52 0000                       		dc.w byte_CBCD-Map_obj39
0000DD54 02                         byte_CBAC:	dc.b 2
0000DD55 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000DD5A F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000DD5F 02                         byte_CBB7:	dc.b 2
0000DD60 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000DD65 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000DD6A 02                         byte_CBC2:	dc.b 2
0000DD6B F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000DD70 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000DD75 02                         byte_CBCD:	dc.b 2
0000DD76 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000DD7B F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000DD80                            		even
0000DD80                            		even
0000DD80                            
0000DD80                            ; ---------------------------------------------------------------------------
0000DD80                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000DD80                            ; ---------------------------------------------------------------------------
0000DD80 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000DD82 0000                       		dc.w byte_CC13-Map_obj3A
0000DD84 0000                       		dc.w byte_CC32-Map_obj3A
0000DD86 0000                       		dc.w byte_CC51-Map_obj3A
0000DD88 0000                       		dc.w byte_CC75-Map_obj3A
0000DD8A FF6F                       		dc.w byte_CB47-Map_obj3A
0000DD8C FF4E                       		dc.w byte_CB26-Map_obj3A
0000DD8E FF59                       		dc.w byte_CB31-Map_obj3A
0000DD90 FF64                       		dc.w byte_CB3C-Map_obj3A
0000DD92 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000DD93 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000DD98 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000DD9D F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000DDA2 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000DDA7 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000DDAC F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000DDB1 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000DDB6 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000DDBB 06                         byte_CC13:	dc.b 6			; PASSED
0000DDBC F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000DDC1 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DDC6 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000DDCB F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000DDD0 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DDD5 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000DDDA 06                         byte_CC32:	dc.b 6			; SCORE
0000DDDB F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DDE0 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DDE5 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DDEA F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DDEF F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DDF4 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DDF9 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000DDFA F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000DDFF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DE04 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DE09 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DE0E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DE13 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000DE18 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DE1D 07                         byte_CC75:	dc.b 7			; RING BONUS
0000DE1E F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DE23 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DE28 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DE2D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DE32 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DE37 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DE3C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DE42 00                         		even
0000DE42                            ; ---------------------------------------------------------------------------
0000DE42                            ; Sprite mappings - special stage results screen
0000DE42                            ; ---------------------------------------------------------------------------
0000DE42 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000DE44 0000                       		dc.w byte_CCEE-Map_obj7E
0000DE46 0000                       		dc.w byte_CD0D-Map_obj7E
0000DE48 FEAD                       		dc.w byte_CB47-Map_obj7E
0000DE4A 0000                       		dc.w byte_CD31-Map_obj7E
0000DE4C 0000                       		dc.w byte_CD46-Map_obj7E
0000DE4E 0000                       		dc.w byte_CD5B-Map_obj7E
0000DE50 0000                       		dc.w byte_CD6B-Map_obj7E
0000DE52 0000                       		dc.w byte_CDA8-Map_obj7E
0000DE54 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000DE55 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000DE5A F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000DE5F F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000DE64 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000DE69 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000DE6E F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000DE73 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000DE78 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DE7D F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000DE82 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000DE87 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000DE8C F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000DE91 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000DE96 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000DE97 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DE9C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DEA1 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DEA6 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DEAB F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DEB0 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DEB5 07                         byte_CD0D:	dc.b 7
0000DEB6 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DEBB F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DEC0 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DEC5 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DECA FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DECF F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DED4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DED9 04                         byte_CD31:	dc.b 4
0000DEDA F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DEDF F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DEE4 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DEE9 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000DEEE 04                         byte_CD46:	dc.b 4
0000DEEF F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DEF4 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DEF9 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DEFE F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000DF03 03                         byte_CD5B:	dc.b 3
0000DF04 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DF09 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DF0E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DF13 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000DF14 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000DF19 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000DF1E F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000DF23 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000DF28 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DF2D F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000DF32 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000DF37 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000DF3C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DF41 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000DF46 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000DF4B F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000DF50 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000DF51 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000DF56 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000DF5B F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000DF60 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000DF65 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000DF6A F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000DF6F F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000DF74 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000DF79 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000DF7E F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000DF83 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000DF88 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000DF8D F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000DF92 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000DF97 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000DF9C                            		even
0000DF9C                            ; ---------------------------------------------------------------------------
0000DF9C                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DF9C                            ; ---------------------------------------------------------------------------
0000DF9C                            Map_obj7F:
0000DF9C                            	include "_maps\obj7F.asm"
0000DF9C                            ; ---------------------------------------------------------------------------
0000DF9C                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DF9C                            ; ---------------------------------------------------------------------------
0000DF9C 0000                       		dc.w byte_CE02-Map_obj7F
0000DF9E 0000                       		dc.w byte_CE08-Map_obj7F
0000DFA0 0000                       		dc.w byte_CE0E-Map_obj7F
0000DFA2 0000                       		dc.w byte_CE14-Map_obj7F
0000DFA4 0000                       		dc.w byte_CE1A-Map_obj7F
0000DFA6 0000                       		dc.w byte_CE20-Map_obj7F
0000DFA8 0000                       		dc.w byte_CE26-Map_obj7F
0000DFAA 01                         byte_CE02:	dc.b 1
0000DFAB F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8
0000DFB0 01                         byte_CE08:	dc.b 1
0000DFB1 F805 2000 F8               		dc.b $F8, 5, $20,	0, $F8
0000DFB6 01                         byte_CE0E:	dc.b 1
0000DFB7 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000DFBC 01                         byte_CE14:	dc.b 1
0000DFBD F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000DFC2 01                         byte_CE1A:	dc.b 1
0000DFC3 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8
0000DFC8 01                         byte_CE20:	dc.b 1
0000DFC9 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8
0000DFCE 00                         byte_CE26:	dc.b 0			; Blank frame
0000DFD0 00                         		even
0000DFD0 00                         		even
0000DFD0                            
0000DFD0                            ; ===========================================================================
0000DFD0                            ; ---------------------------------------------------------------------------
0000DFD0                            ; Object 36 - spikes
0000DFD0                            ; ---------------------------------------------------------------------------
0000DFD0                            
0000DFD0                            Obj36:					; XREF: Obj_Index
0000DFD0 7000                       		moveq	#0,d0
0000DFD2 1028 0024                  		move.b	$24(a0),d0
0000DFD6 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000DFDA 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000DFDE                            ; ===========================================================================
0000DFDE 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000DFE0 0000                       		dc.w Obj36_Solid-Obj36_Index
0000DFE2                            
0000DFE2 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000DFE4 0110                       		dc.b 1,	$10
0000DFE6 0204                       		dc.b 2,	4
0000DFE8 031C                       		dc.b 3,	$1C
0000DFEA 0440                       		dc.b 4,	$40
0000DFEC 0510                       		dc.b 5,	$10
0000DFEE                            ; ===========================================================================
0000DFEE                            
0000DFEE                            Obj36_Main:				; XREF: Obj36_Index
0000DFEE 5428 0024                  		addq.b	#2,$24(a0)
0000DFF2 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000DFFA 317C 051B 0002             		move.w	#$51B,2(a0)
0000E000 0028 0004 0001             		ori.b	#4,1(a0)
0000E006 117C 0004 0018             		move.b	#4,$18(a0)
0000E00C 1028 0028                  		move.b	$28(a0),d0
0000E010 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E016 0240 00F0                  		andi.w	#$F0,d0
0000E01A 43F9 0000 DFE2             		lea	(Obj36_Var).l,a1
0000E020 E648                       		lsr.w	#3,d0
0000E022 D2C0                       		adda.w	d0,a1
0000E024 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E028 1159 0019                  		move.b	(a1)+,$19(a0)
0000E02C 3168 0008 0030             		move.w	8(a0),$30(a0)
0000E032 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000E038                            
0000E038                            Obj36_Solid:				; XREF: Obj36_Index
0000E038 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000E03C 343C 0004                  		move.w	#4,d2
0000E040 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000E046 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000E048 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000E04E 6600                       		bne.s	Obj36_Upright	; if not, branch
0000E050 343C 0014                  		move.w	#$14,d2
0000E054                            
0000E054                            ; Spikes types $1x and $5x face	sideways
0000E054                            
0000E054                            Obj36_SideWays:				; XREF: Obj36_Solid
0000E054 323C 001B                  		move.w	#$1B,d1
0000E058 3602                       		move.w	d2,d3
0000E05A 5243                       		addq.w	#1,d3
0000E05C 3828 0008                  		move.w	8(a0),d4
0000E060 6100 0000                  		bsr.w	SolidObject
0000E064 0828 0003 0022             		btst	#3,$22(a0)
0000E06A 6600                       		bne.s	Obj36_Display
0000E06C 0C44 0001                  		cmpi.w	#1,d4
0000E070 6700                       		beq.s	Obj36_Hurt
0000E072 6000                       		bra.s	Obj36_Display
0000E074                            ; ===========================================================================
0000E074                            
0000E074                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E074                            
0000E074                            Obj36_Upright:				; XREF: Obj36_Solid
0000E074 7200                       		moveq	#0,d1
0000E076 1228 0019                  		move.b	$19(a0),d1
0000E07A 0641 000B                  		addi.w	#$B,d1
0000E07E 343C 0010                  		move.w	#$10,d2
0000E082 363C 0011                  		move.w	#$11,d3
0000E086 3828 0008                  		move.w	8(a0),d4
0000E08A 6100 0000                  		bsr.w	SolidObject
0000E08E 0828 0003 0022             		btst	#3,$22(a0)
0000E094 6600                       		bne.s	Obj36_Hurt
0000E096 4A44                       		tst.w	d4
0000E098 6A00                       		bpl.s	Obj36_Display
0000E09A                            
0000E09A                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E09A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E09E 6600                       		bne.s	Obj36_PreDisplay	; if yes, branch
0000E0A0 2F08                       		move.l	a0,-(sp)
0000E0A2 2448                       		movea.l	a0,a2
0000E0A4 41F8 D000                  		lea	($FFFFD000).w,a0
0000E0A8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E0AE 6400                       		bcc.s	loc_CF20
0000E0B0 2628 000C                  		move.l	$C(a0),d3
0000E0B4 3028 0012                  		move.w	$12(a0),d0
0000E0B8 48C0                       		ext.l	d0
0000E0BA E180                       		asl.l	#8,d0
0000E0BC 9680                       		sub.l	d0,d3
0000E0BE 2143 000C                  		move.l	d3,$C(a0)
0000E0C2 4EB9 0000 0000             		jsr	HurtSonic
0000E0C8                            
0000E0C8                            loc_CF20:
0000E0C8 205F                       		movea.l	(sp)+,a0
0000E0CA 6000                       		bra.s	Obj36_Display
0000E0CC                            
0000E0CC                            Obj36_PreDisplay:
0000E0CC 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0000E0D2 6E00                       		bgt.s	Obj36_Display
0000E0D4 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0000E0DA 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000E0E0                            
0000E0E0                            Obj36_Display:
0000E0E0 6100 0000                  		bsr.w	DisplaySprite
0000E0E4 3028 0030                  		move.w	$30(a0),d0
0000E0E8 0240 FF80                  		andi.w	#$FF80,d0
0000E0EC 3238 F700                  		move.w	($FFFFF700).w,d1
0000E0F0 0441 0080                  		subi.w	#$80,d1
0000E0F4 0241 FF80                  		andi.w	#$FF80,d1
0000E0F8 9041                       		sub.w	d1,d0
0000E0FA 0C40 0280                  		cmpi.w	#$280,d0
0000E0FE 6300                       		bls.s	Obj36_NoDel
0000E100 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E104 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E108 3440                       		movea.w	d0,a2	; load address into a2
0000E10A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E10E 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E112                            
0000E112                            Obj36_NoDel:
0000E112 4E75                       		rts	
0000E114                            ; ===========================================================================
0000E114                            
0000E114                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E114 7000                       		moveq	#0,d0
0000E116 1028 0028                  		move.b	$28(a0),d0
0000E11A D040                       		add.w	d0,d0
0000E11C 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E120 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E124                            ; ===========================================================================
0000E124 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E126 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E128 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E12A                            ; ===========================================================================
0000E12A                            
0000E12A                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E12A 4E75                       		rts			; don't move the object
0000E12C                            ; ===========================================================================
0000E12C                            
0000E12C                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E12C 6100 0000                  		bsr.w	Obj36_Wait
0000E130 7000                       		moveq	#0,d0
0000E132 1028 0034                  		move.b	$34(a0),d0
0000E136 D068 0032                  		add.w	$32(a0),d0
0000E13A 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E13E 4E75                       		rts	
0000E140                            ; ===========================================================================
0000E140                            
0000E140                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E140 6100 0000                  		bsr.w	Obj36_Wait
0000E144 7000                       		moveq	#0,d0
0000E146 1028 0034                  		move.b	$34(a0),d0
0000E14A D068 0030                  		add.w	$30(a0),d0
0000E14E 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E152 4E75                       		rts	
0000E154                            ; ===========================================================================
0000E154                            
0000E154                            Obj36_Wait:
0000E154 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E158 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E15A 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E15E 6600                       		bne.s	locret_CFE6
0000E160 4A28 0001                  		tst.b	1(a0)
0000E164 6A00                       		bpl.s	locret_CFE6
0000E166 303C 00B6                  		move.w	#$B6,d0
0000E16A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E170 6000                       		bra.s	locret_CFE6
0000E172                            ; ===========================================================================
0000E172                            
0000E172                            loc_CFA4:
0000E172 4A68 0036                  		tst.w	$36(a0)
0000E176 6700                       		beq.s	loc_CFC6
0000E178 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E17E 6400                       		bcc.s	locret_CFE6
0000E180 317C 0000 0034             		move.w	#0,$34(a0)
0000E186 317C 0000 0036             		move.w	#0,$36(a0)
0000E18C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E192 6000                       		bra.s	locret_CFE6
0000E194                            ; ===========================================================================
0000E194                            
0000E194                            loc_CFC6:
0000E194 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E19A 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E1A0 6500                       		bcs.s	locret_CFE6
0000E1A2 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E1A8 317C 0001 0036             		move.w	#1,$36(a0)
0000E1AE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E1B4                            
0000E1B4                            locret_CFE6:
0000E1B4 4E75                       		rts	
0000E1B6                            ; ===========================================================================
0000E1B6                            ; ---------------------------------------------------------------------------
0000E1B6                            ; Sprite mappings - spikes
0000E1B6                            ; ---------------------------------------------------------------------------
0000E1B6                            Map_obj36:
0000E1B6                            	include "_maps\obj36.asm"
0000E1B6                            ; ---------------------------------------------------------------------------
0000E1B6                            ; Sprite mappings - spikes
0000E1B6                            ; ---------------------------------------------------------------------------
0000E1B6 0000                       		dc.w byte_CFF4-Map_obj36
0000E1B8 0000                       		dc.w byte_D004-Map_obj36
0000E1BA 0000                       		dc.w byte_D014-Map_obj36
0000E1BC 0000                       		dc.w byte_D01A-Map_obj36
0000E1BE 0000                       		dc.w byte_D02A-Map_obj36
0000E1C0 0000                       		dc.w byte_D049-Map_obj36
0000E1C2 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000E1C3 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000E1C8 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E1CD F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000E1D2 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000E1D3 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000E1D8 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E1DD 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000E1E2 01                         byte_D014:	dc.b 1			; 1 spike
0000E1E3 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E1E8 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000E1E9 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000E1EE F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E1F3 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000E1F8 06                         byte_D02A:	dc.b 6			; 6 spikes
0000E1F9 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000E1FE F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000E203 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000E208 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000E20D F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000E212 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000E217 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000E218 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E21E 00                         		even
0000E21E 00                         		even
0000E21E                            
0000E21E                            ; ===========================================================================
0000E21E                            ; ---------------------------------------------------------------------------
0000E21E                            ; Object 3B - purple rock (GHZ)
0000E21E                            ; ---------------------------------------------------------------------------
0000E21E                            
0000E21E                            Obj3B:					; XREF: Obj_Index
0000E21E 7000                       		moveq	#0,d0
0000E220 1028 0024                  		move.b	$24(a0),d0
0000E224 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000E228 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000E22C                            ; ===========================================================================
0000E22C 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000E22E 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000E230                            ; ===========================================================================
0000E230                            
0000E230                            Obj3B_Main:				; XREF: Obj3B_Index
0000E230 5428 0024                  		addq.b	#2,$24(a0)
0000E234 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000E23C 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000E242 117C 0004 0001             		move.b	#4,1(a0)
0000E248 117C 0013 0019             		move.b	#$13,$19(a0)
0000E24E 117C 0004 0018             		move.b	#4,$18(a0)
0000E254                            
0000E254                            Obj3B_Solid:				; XREF: Obj3B_Index
0000E254 323C 001B                  		move.w	#$1B,d1
0000E258 343C 0010                  		move.w	#$10,d2
0000E25C 363C 0010                  		move.w	#$10,d3
0000E260 3828 0008                  		move.w	8(a0),d4
0000E264 6100 0000                  		bsr.w	SolidObject
0000E268 6100 0000                  		bsr.w	DisplaySprite
0000E26C 3028 0008                  		move.w	8(a0),d0
0000E270 0240 FF80                  		andi.w	#$FF80,d0
0000E274 3238 F700                  		move.w	($FFFFF700).w,d1
0000E278 0441 0080                  		subi.w	#$80,d1
0000E27C 0241 FF80                  		andi.w	#$FF80,d1
0000E280 9041                       		sub.w	d1,d0
0000E282 0C40 0280                  		cmpi.w	#$280,d0
0000E286 6300                       		bls.s	Obj3B_NoDel
0000E288 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E28C 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E290 3440                       		movea.w	d0,a2	; load address into a2
0000E292 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E296 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E29A                            
0000E29A                            Obj3B_NoDel:
0000E29A 4E75                       		rts	
0000E29C                            ; ===========================================================================
0000E29C                            ; ---------------------------------------------------------------------------
0000E29C                            ; Object 49 - waterfall	sound effect (GHZ)
0000E29C                            ; ---------------------------------------------------------------------------
0000E29C                            
0000E29C                            Obj49:					; XREF: Obj_Index
0000E29C 7000                       		moveq	#0,d0
0000E29E 1028 0024                  		move.b	$24(a0),d0
0000E2A2 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000E2A6 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000E2AA                            ; ===========================================================================
0000E2AA 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000E2AC 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000E2AE                            ; ===========================================================================
0000E2AE                            
0000E2AE                            Obj49_Main:				; XREF: Obj49_Index
0000E2AE 5428 0024                  		addq.b	#2,$24(a0)
0000E2B2 117C 0004 0001             		move.b	#4,1(a0)
0000E2B8                            
0000E2B8                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000E2B8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E2BC 0200 003F                  		andi.b	#$3F,d0
0000E2C0 6600                       		bne.s	Obj49_ChkDel
0000E2C2 303C 00D0                  		move.w	#$D0,d0
0000E2C6 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000E2CC                            
0000E2CC                            Obj49_ChkDel:
0000E2CC 3028 0008                  		move.w	8(a0),d0
0000E2D0 0240 FF80                  		andi.w	#$FF80,d0
0000E2D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E2D8 0441 0080                  		subi.w	#$80,d1
0000E2DC 0241 FF80                  		andi.w	#$FF80,d1
0000E2E0 9041                       		sub.w	d1,d0
0000E2E2 0C40 0280                  		cmpi.w	#$280,d0
0000E2E6 6300                       		bls.s	Obj49_NoDel
0000E2E8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E2EC 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E2F0 3440                       		movea.w	d0,a2	; load address into a2
0000E2F2 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E2F6 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E2FA                            
0000E2FA                            Obj49_NoDel:
0000E2FA 4E75                       		rts	
0000E2FC                            ; ===========================================================================
0000E2FC                            ; ---------------------------------------------------------------------------
0000E2FC                            ; Sprite mappings - purple rock	(GHZ)
0000E2FC                            ; ---------------------------------------------------------------------------
0000E2FC                            Map_obj3B:
0000E2FC                            	include "_maps\obj3B.asm"
0000E2FC                            ; ---------------------------------------------------------------------------
0000E2FC                            ; Sprite mappings - purple rock	(GHZ)
0000E2FC                            ; ---------------------------------------------------------------------------
0000E2FC 0000                       		dc.w byte_D110-Map_obj3B
0000E2FE 02                         byte_D110:	dc.b 2
0000E2FF F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000E304 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000E30A 00                         		even
0000E30A 00                         		even
0000E30A                            
0000E30A                            ; ===========================================================================
0000E30A                            ; ---------------------------------------------------------------------------
0000E30A                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000E30A                            ; ---------------------------------------------------------------------------
0000E30A                            
0000E30A                            Obj3C:					; XREF: Obj_Index
0000E30A 7000                       		moveq	#0,d0
0000E30C 1028 0024                  		move.b	$24(a0),d0
0000E310 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000E314 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000E318 6000 0000                  		bra.w	MarkObjGone
0000E31C                            ; ===========================================================================
0000E31C 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000E31E 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000E320 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000E322                            ; ===========================================================================
0000E322                            
0000E322                            Obj3C_Main:				; XREF: Obj3C_Index
0000E322 5428 0024                  		addq.b	#2,$24(a0)
0000E326 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000E32E 317C 450F 0002             		move.w	#$450F,2(a0)
0000E334 117C 0004 0001             		move.b	#4,1(a0)
0000E33A 117C 0010 0019             		move.b	#$10,$19(a0)
0000E340 117C 0004 0018             		move.b	#4,$18(a0)
0000E346 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000E34C                            
0000E34C                            Obj3C_Solid:				; XREF: Obj3C_Index
0000E34C 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000E352 323C 001B                  		move.w	#$1B,d1
0000E356 343C 0020                  		move.w	#$20,d2
0000E35A 363C 0020                  		move.w	#$20,d3
0000E35E 3828 0008                  		move.w	8(a0),d4
0000E362 6100 0000                  		bsr.w	SolidObject
0000E366 0828 0005 0022             		btst	#5,$22(a0)
0000E36C 6600                       		bne.s	Obj3C_ChkRoll
0000E36E                            
0000E36E                            locret_D180:
0000E36E 4E75                       		rts	
0000E370                            ; ===========================================================================
0000E370                            
0000E370                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000E370 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000E376 66F6                       		bne.s	locret_D180	; if not, branch
0000E378 3028 0030                  		move.w	$30(a0),d0
0000E37C 6A00                       		bpl.s	Obj3C_ChkSpeed
0000E37E 4440                       		neg.w	d0
0000E380                            
0000E380                            Obj3C_ChkSpeed:
0000E380 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000E384 65E8                       		bcs.s	locret_D180	; if not, branch
0000E386 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000E38C 5869 0008                  		addq.w	#4,8(a1)
0000E390 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000E396 3028 0008                  		move.w	8(a0),d0
0000E39A B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000E39E 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000E3A0 5169 0008                  		subq.w	#8,8(a1)
0000E3A4 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000E3AA                            
0000E3AA                            Obj3C_Smash:
0000E3AA 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000E3B0 08A8 0005 0022             		bclr	#5,$22(a0)
0000E3B6 08A9 0005 0022             		bclr	#5,$22(a1)
0000E3BC 7207                       		moveq	#7,d1		; load 8 fragments
0000E3BE 343C 0070                  		move.w	#$70,d2
0000E3C2 6100                       		bsr.s	SmashObject
0000E3C4                            
0000E3C4                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000E3C4 6100 0000                  		bsr.w	SpeedToPos
0000E3C8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000E3CE 6100 0000                  		bsr.w	DisplaySprite
0000E3D2 4A28 0001                  		tst.b	1(a0)
0000E3D6 6A00 0000                  		bpl.w	DeleteObject
0000E3DA 4E75                       		rts	
0000E3DC                            
0000E3DC                            ; ---------------------------------------------------------------------------
0000E3DC                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000E3DC                            ; ---------------------------------------------------------------------------
0000E3DC                            
0000E3DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3DC                            
0000E3DC                            
0000E3DC                            SmashObject:				; XREF: Obj3C_Smash
0000E3DC 7000                       		moveq	#0,d0
0000E3DE 1028 001A                  		move.b	$1A(a0),d0
0000E3E2 D040                       		add.w	d0,d0
0000E3E4 2668 0004                  		movea.l	4(a0),a3
0000E3E8 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000E3EC 524B                       		addq.w	#1,a3
0000E3EE 08E8 0005 0001             		bset	#5,1(a0)
0000E3F4 1810                       		move.b	0(a0),d4
0000E3F6 1A28 0001                  		move.b	1(a0),d5
0000E3FA 2248                       		movea.l	a0,a1
0000E3FC 6000                       		bra.s	Smash_LoadFrag
0000E3FE                            ; ===========================================================================
0000E3FE                            
0000E3FE                            Smash_Loop:
0000E3FE 6100 0000                  		bsr.w	SingleObjLoad
0000E402 6600                       		bne.s	Smash_PlaySnd
0000E404 5A4B                       		addq.w	#5,a3
0000E406                            
0000E406                            Smash_LoadFrag:				; XREF: SmashObject
0000E406 137C 0004 0024             		move.b	#4,$24(a1)
0000E40C 1284                       		move.b	d4,0(a1)
0000E40E 234B 0004                  		move.l	a3,4(a1)
0000E412 1345 0001                  		move.b	d5,1(a1)
0000E416 3368 0008 0008             		move.w	8(a0),8(a1)
0000E41C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E422 3368 0002 0002             		move.w	2(a0),2(a1)
0000E428 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E42E 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E434 335C 0010                  		move.w	(a4)+,$10(a1)
0000E438 335C 0012                  		move.w	(a4)+,$12(a1)
0000E43C B3C8                       		cmpa.l	a0,a1
0000E43E 6400                       		bcc.s	loc_D268
0000E440 2F08                       		move.l	a0,-(sp)
0000E442 2049                       		movea.l	a1,a0
0000E444 6100 0000                  		bsr.w	SpeedToPos
0000E448 D568 0012                  		add.w	d2,$12(a0)
0000E44C 205F                       		movea.l	(sp)+,a0
0000E44E 6100 0000                  		bsr.w	DisplaySprite2
0000E452                            
0000E452                            loc_D268:
0000E452 51C9 FFAA                  		dbf	d1,Smash_Loop
0000E456                            
0000E456                            Smash_PlaySnd:
0000E456 303C 00CB                  		move.w	#$CB,d0
0000E45A 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play smashing sound
0000E460                            ; End of function SmashObject
0000E460                            
0000E460                            ; ===========================================================================
0000E460                            ; Smashed block	fragment speeds
0000E460                            ;
0000E460 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000E464 0600 FF00                  		dc.w $600, $FF00
0000E468 0600 0100                  		dc.w $600, $100
0000E46C 0400 0500                  		dc.w $400, $500
0000E470 0600 FA00                  		dc.w $600, $FA00
0000E474 0800 FE00                  		dc.w $800, $FE00
0000E478 0800 0200                  		dc.w $800, $200
0000E47C 0600 0600                  		dc.w $600, $600
0000E480                            
0000E480 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000E484 F800 FE00                  		dc.w $F800, $FE00
0000E488 F800 0200                  		dc.w $F800, $200
0000E48C FA00 0600                  		dc.w $FA00, $600
0000E490 FC00 FB00                  		dc.w $FC00, $FB00
0000E494 FA00 FF00                  		dc.w $FA00, $FF00
0000E498 FA00 0100                  		dc.w $FA00, $100
0000E49C FC00 0500                  		dc.w $FC00, $500
0000E4A0                            ; ---------------------------------------------------------------------------
0000E4A0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E4A0                            ; ---------------------------------------------------------------------------
0000E4A0                            Map_obj3C:
0000E4A0                            	include "_maps\obj3C.asm"
0000E4A0                            ; ---------------------------------------------------------------------------
0000E4A0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E4A0                            ; ---------------------------------------------------------------------------
0000E4A0 0000                       		dc.w byte_D2BC-Map_obj3C
0000E4A2 0000                       		dc.w byte_D2E5-Map_obj3C
0000E4A4 0000                       		dc.w byte_D30E-Map_obj3C
0000E4A6 08                         byte_D2BC:	dc.b 8
0000E4A7 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000E4AC F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000E4B1 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000E4B6 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000E4BB E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E4C0 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E4C5 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E4CA 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E4CF 08                         byte_D2E5:	dc.b 8
0000E4D0 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E4D5 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E4DA 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E4DF 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E4E4 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E4E9 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E4EE 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E4F3 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E4F8 08                         byte_D30E:	dc.b 8
0000E4F9 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E4FE F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E503 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E508 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E50D E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000E512 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000E517 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000E51C 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000E522 00                         		even
0000E522 00                         		even
0000E522                            
0000E522                            ; ---------------------------------------------------------------------------
0000E522                            ; Object code loading subroutine
0000E522                            ; ---------------------------------------------------------------------------
0000E522                            
0000E522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E522                            
0000E522                            
0000E522                            ObjectsLoad:				; XREF: TitleScreen; et al
0000E522 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000E526 7E7F                       		moveq	#$7F,d7
0000E528 7000                       		moveq	#0,d0
0000E52A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000E530 6400                       		bcc.s	loc_D362
0000E532                            
0000E532                            loc_D348:
0000E532 1010                       		move.b	(a0),d0		; load object number from RAM
0000E534 6700                       		beq.s	loc_D358
0000E536 D040                       		add.w	d0,d0
0000E538 D040                       		add.w	d0,d0
0000E53A 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000E53E 4E91                       		jsr	(a1)		; run the object's code
0000E540 7000                       		moveq	#0,d0
0000E542                            
0000E542                            loc_D358:
0000E542 41E8 0040                  		lea	$40(a0),a0	; next object
0000E546 51CF FFEA                  		dbf	d7,loc_D348
0000E54A 4E75                       		rts
0000E54C                            ; ===========================================================================
0000E54C                            
0000E54C                            loc_D362:
0000E54C 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000E552 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000E554 7E1F                       		moveq	#$1F,d7
0000E556 61DA                       		bsr.s	loc_D348
0000E558 7E5F                       		moveq	#$5F,d7
0000E55A                            
0000E55A                            loc_D368:
0000E55A 7000                       		moveq	#0,d0
0000E55C 1010                       		move.b	(a0),d0
0000E55E 6700                       		beq.s	loc_D378
0000E560 4A28 0001                  		tst.b	1(a0)
0000E564 6A00                       		bpl.s	loc_D378
0000E566 6100 0000                  		bsr.w	DisplaySprite
0000E56A                            
0000E56A                            loc_D378:
0000E56A 41E8 0040                  		lea	$40(a0),a0
0000E56E                            
0000E56E                            loc_D37C:
0000E56E 51CF FFEA                  		dbf	d7,loc_D368
0000E572 4E75                       		rts
0000E574                            ; End of function ObjectsLoad
0000E574                            
0000E574                            ; ===========================================================================
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            ; Object pointers
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            Obj_Index:
0000E574                            	include "_inc\Object pointers.asm"
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            ; Object pointers
0000E574                            ; ---------------------------------------------------------------------------
0000E574 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj02,	ObjectFall, ObjectFall
0000E584 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000E594 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E5A4 0000 0000 0000 B742 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E5B4 0000 83F0 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E5C4 0000 8A22 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E5D4 0000 92DC 0000 9344 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E5E4 0000 9A58 0000 9D52 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E5F4 0000 0000 0000 A9D6 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E604 0000 AD18 0000 B26E 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E614 0000 A60E 0000 9B3A 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E624 0000 BDCA 0000 B434 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E634 0000 C7EC 0000 CEC6 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E644 0000 C348 0000 DFD0 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E654 0000 D654 0000 D720 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E664 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E674 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E684 0000 CB24 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E694 0000 E29C 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E6A4 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E6B4 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E6C4 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E6D4 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E6E4 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E6F4 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E704 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E714 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E724 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E734 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E744 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E754 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E764 0000 0000 0000 D95A 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E774 0000 511A 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E784 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E794 0000 57E0 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E794 0000 57E0 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E7A4                            
0000E7A4                            ; ---------------------------------------------------------------------------
0000E7A4                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E7A4                            ; ---------------------------------------------------------------------------
0000E7A4                            
0000E7A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E7A4                            
0000E7A4                            
0000E7A4                            ObjectFall:
0000E7A4 3028 0010                  		move.w	$10(a0),d0
0000E7A8 48C0                       		ext.l	d0
0000E7AA E188                       		lsl.l	#8,d0
0000E7AC D1A8 0008                  		add.l	d0,8(a0)
0000E7B0 3028 0012                  		move.w	$12(a0),d0
0000E7B4 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E7BA 48C0                       		ext.l	d0
0000E7BC E188                       		lsl.l	#8,d0
0000E7BE D1A8 000C                  		add.l	d0,$C(a0)
0000E7C2 4E75                       		rts	
0000E7C4                            
0000E7C4                            ; End of function ObjectFall
0000E7C4                            
0000E7C4                            ; ---------------------------------------------------------------------------
0000E7C4                            ; Subroutine translating object	speed to update	object position
0000E7C4                            ; ---------------------------------------------------------------------------
0000E7C4                            
0000E7C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E7C4                            
0000E7C4                            
0000E7C4                            SpeedToPos:
0000E7C4 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E7C8 48C0                       		ext.l	d0
0000E7CA E188                       		lsl.l	#8,d0		; multiply speed by $100
0000E7CC D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000E7D0 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E7D4 48C0                       		ext.l	d0
0000E7D6 E188                       		lsl.l	#8,d0		; multiply by $100
0000E7D8 D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000E7DC 4E75                       		rts	
0000E7DE                            
0000E7DE                            ; End of function SpeedToPos
0000E7DE                            
0000E7DE                            ; ---------------------------------------------------------------------------
0000E7DE                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E7DE                            ; ---------------------------------------------------------------------------
0000E7DE                            
0000E7DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E7DE                            
0000E7DE                            
0000E7DE                            DisplaySprite:
0000E7DE 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E7E2 3028 0018                  		move.w	$18(a0),d0
0000E7E6 E248                       		lsr.w	#1,d0
0000E7E8 0240 0380                  		andi.w	#$380,d0
0000E7EC D2C0                       		adda.w	d0,a1
0000E7EE 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E7F2 6400                       		bcc.s	locret_D620
0000E7F4 5451                       		addq.w	#2,(a1)
0000E7F6 D2D1                       		adda.w	(a1),a1
0000E7F8 3288                       		move.w	a0,(a1)
0000E7FA                            
0000E7FA                            locret_D620:
0000E7FA 4E75                       		rts	
0000E7FC                            ; End of function DisplaySprite
0000E7FC                            
0000E7FC                            ; ---------------------------------------------------------------------------
0000E7FC                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E7FC                            ; ---------------------------------------------------------------------------
0000E7FC                            
0000E7FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E7FC                            
0000E7FC                            
0000E7FC                            DisplaySprite2:
0000E7FC 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E800 3029 0018                  		move.w	$18(a1),d0
0000E804 E248                       		lsr.w	#1,d0
0000E806 0240 0380                  		andi.w	#$380,d0
0000E80A D4C0                       		adda.w	d0,a2
0000E80C 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E810 6400                       		bcc.s	locret_D63E
0000E812 5452                       		addq.w	#2,(a2)
0000E814 D4D2                       		adda.w	(a2),a2
0000E816 3489                       		move.w	a1,(a2)
0000E818                            
0000E818                            locret_D63E:
0000E818 4E75                       		rts	
0000E81A                            ; End of function DisplaySprite2
0000E81A                            
0000E81A                            
0000E81A                            DisplaySprite3:
0000E81A 43F8 AC00                      lea    ($FFFFAC00).w,a1
0000E81E D2C0                           adda.w    d0,a1
0000E820 0C51 007E                      cmpi.w    #$7E,(a1)
0000E824 6400                           bhs.s    return_16542
0000E826 5451                           addq.w    #2,(a1)
0000E828 D2D1                           adda.w    (a1),a1
0000E82A 3288                           move.w    a0,(a1)
0000E82C                            
0000E82C                            return_16542:
0000E82C 4E75                           rts
0000E82E                            ; ---------------------------------------------------------------------------
0000E82E                            ; Subroutine to	delete an object
0000E82E                            ; ---------------------------------------------------------------------------
0000E82E                            
0000E82E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E82E                            
0000E82E                            
0000E82E                            DeleteObject:
0000E82E 2248                       		movea.l	a0,a1
0000E830                            
0000E830                            DeleteObject2:
0000E830 7200                       		moveq	#0,d1
0000E832 700F                       		moveq	#$F,d0
0000E834                            
0000E834                            loc_D646:
0000E834 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E836 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E83A 4E75                       		rts	
0000E83C                            ; End of function DeleteObject
0000E83C                            
0000E83C                            ; ===========================================================================
0000E83C 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E840 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E844 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E848 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E84C                            ; ---------------------------------------------------------------------------
0000E84C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E84C                            ; ---------------------------------------------------------------------------
0000E84C                            
0000E84C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E84C                            
0000E84C                            
0000E84C                            BuildSprites:                ; XREF: TitleScreen; et al
0000E84C 45F8 F800                          lea    ($FFFFF800).w,a2 ; set address for sprite table
0000E850 4EB9 0000 0000                     jsr		Obj02
0000E856 4A38 FFD0                          tst.b    ($FFFFFFD0).w ; this was level_started_flag
0000E85A 6700                               beq.s    BuildSprites_2
0000E85C 4EB9 0000 0000                     jsr    loc_40804
0000E862                            
0000E862                            BuildSprites_2:
0000E862 49F8 AC00                          lea    ($FFFFAC00).w,a4
0000E866 7E07                               moveq    #7,d7
0000E868                            
0000E868                            loc_D66A:
0000E868 0C47 0005                  		cmpi.w	#$07-$02,d7
0000E86C 6600                       		bne.s	BuildSpritesCont
0000E86E 4A38 870D                  		tst.b	(Level_started_flag).w
0000E872 6700                       		beq.s	BuildSpritesCont
0000E874 48E7 0108                  		movem.l	d7/a4,-(sp)
0000E878 6100 0000                  		bsr.w	BuildRings
0000E87C 4CDF 1080                  		movem.l	(sp)+,d7/a4
0000E880                            
0000E880                            BuildSpritesCont:
0000E880 4A54                       		tst.w	(a4)
0000E882 6700 0000                  		beq.w	loc_D72E
0000E886 7C02                       		moveq	#2,d6
0000E888                            
0000E888                            loc_D672:
0000E888 3074 6000                          movea.w    (a4,d6.w),a0
0000E88C 4A10                               tst.b    (a0)
0000E88E 6700 0000                          beq.w    loc_D726
0000E892 08A8 0007 0001                     bclr    #7,1(a0)
0000E898 1028 0001                          move.b    1(a0),d0
0000E89C 1800                               move.b    d0,d4
0000E89E 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000E8A2 6700                               beq.s    @skip    ; if it is, branch
0000E8A4 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000E8A8 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000E8AC                               @skip:
0000E8AC 0240 000C                  		andi.w	#$C,d0
0000E8B0 6700                       		beq.s	loc_D6DE
0000E8B2 227B 0088                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E8B6 7000                       		moveq	#0,d0
0000E8B8 1028 0019                  		move.b	$19(a0),d0
0000E8BC 3628 0008                  		move.w	8(a0),d3
0000E8C0 9651                       		sub.w	(a1),d3
0000E8C2 3203                       		move.w	d3,d1
0000E8C4 D240                       		add.w	d0,d1
0000E8C6 6B00 0000                  		bmi.w	loc_D726
0000E8CA 3203                       		move.w	d3,d1
0000E8CC 9240                       		sub.w	d0,d1
0000E8CE 0C41 0140                  		cmpi.w	#$140,d1
0000E8D2 6C00                       		bge.s	loc_D726
0000E8D4 0643 0080                  		addi.w	#$80,d3
0000E8D8 0804 0004                  		btst	#4,d4
0000E8DC 6700                       		beq.s	loc_D6E8
0000E8DE 7000                       		moveq	#0,d0
0000E8E0 1028 0016                  		move.b	$16(a0),d0
0000E8E4 3428 000C                  		move.w	$C(a0),d2
0000E8E8 9469 0004                  		sub.w	4(a1),d2
0000E8EC 3202                       		move.w	d2,d1
0000E8EE D240                       		add.w	d0,d1
0000E8F0 6B00                       		bmi.s	loc_D726
0000E8F2 3202                       		move.w	d2,d1
0000E8F4 9240                       		sub.w	d0,d1
0000E8F6 0C41 00E0                  		cmpi.w	#$E0,d1
0000E8FA 6C00                       		bge.s	loc_D726
0000E8FC 0642 0080                  		addi.w	#$80,d2
0000E900 6000                       		bra.s	loc_D700
0000E902                            ; ===========================================================================
0000E902                            
0000E902                            loc_D6DE:
0000E902 3428 000A                  		move.w	$A(a0),d2
0000E906 3628 0008                  		move.w	8(a0),d3
0000E90A 6000                       		bra.s	loc_D700
0000E90C                            ; ===========================================================================
0000E90C                            
0000E90C                            loc_D6E8:
0000E90C 3428 000C                  		move.w	$C(a0),d2
0000E910 9469 0004                  		sub.w	4(a1),d2
0000E914 0642 0080                  		addi.w	#$80,d2
0000E918 0C42 0060                  		cmpi.w	#$60,d2
0000E91C 6500                       		bcs.s	loc_D726
0000E91E 0C42 0180                  		cmpi.w	#$180,d2
0000E922 6400                       		bcc.s	loc_D726
0000E924                            
0000E924                            loc_D700:
0000E924 2268 0004                  		movea.l	4(a0),a1
0000E928 7200                       		moveq	#0,d1
0000E92A 0804 0005                  		btst	#5,d4
0000E92E 6600                       		bne.s	loc_D71C
0000E930 1228 001A                  		move.b	$1A(a0),d1
0000E934 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000E936 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E93A 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000E93C 1219                       		move.b	(a1)+,d1
0000E93E 5301                       		subq.b	#1,d1
0000E940 6B00                       		bmi.s	loc_D720
0000E942                            
0000E942                            loc_D71C:
0000E942 4EB9 0000 0000             		jsr	sub_D750
0000E948                            
0000E948                            loc_D720:
0000E948 08E8 0007 0001             		bset	#7,1(a0)
0000E94E                            
0000E94E                            loc_D726:
0000E94E 5446                       		addq.w	#2,d6
0000E950 5554                       		subq.w	#2,(a4)
0000E952 6600 FF34                  		bne.w	loc_D672
0000E956                            
0000E956                            loc_D72E:
0000E956 49EC 0080                  		lea	$80(a4),a4
0000E95A 51CF FF0C                  		dbf	d7,loc_D66A
0000E95E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E962 0C05 0050                  		cmpi.b	#$50,d5
0000E966 6700                       		beq.s	loc_D748
0000E968 24BC 0000 0000             		move.l	#0,(a2)
0000E96E 4E75                       		rts	
0000E970                            ; ===========================================================================
0000E970                            
0000E970                            loc_D748:
0000E970 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E976 4E75                       		rts	
0000E978                            ; End of function BuildSprites
0000E978                            
0000E978                            BuildSprites_MultiDraw:
0000E978 2F0C                       	move.l	a4,-(sp)
0000E97A 49F8 F700                  	lea	($FFFFF700).w,a4
0000E97E 3668 0002                  	movea.w	2(a0),a3
0000E982 2A68 0004                  	movea.l	4(a0),a5
0000E986 7000                       	moveq	#0,d0
0000E988                            
0000E988                            	; check if object is within X bounds
0000E988 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000E98C 3628 0008                  	move.w	8(a0),d3
0000E990 9654                       	sub.w	(a4),d3
0000E992 3203                       	move.w	d3,d1                            
0000E994 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000E996 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000E99A 3203                       	move.w	d3,d1
0000E99C 9240                       	sub.w	d0,d1
0000E99E 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000E9A2 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000E9A6 0643 0080                  	addi.w	#128,d3
0000E9AA                            
0000E9AA                            	; check if object is within Y bounds
0000E9AA 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000E9AE 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000E9B0 7000                       	moveq	#0,d0
0000E9B2 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000E9B6 3428 000C                  	move.w	$C(a0),d2
0000E9BA 946C 0004                  	sub.w	4(a4),d2
0000E9BE 3202                       	move.w	d2,d1
0000E9C0 D240                       	add.w	d0,d1
0000E9C2 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000E9C6 3202                       	move.w	d2,d1
0000E9C8 9240                       	sub.w	d0,d1
0000E9CA 0C41 00E0                  	cmpi.w	#224,d1
0000E9CE 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000E9D2 0642 0080                  	addi.w	#128,d2
0000E9D6 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000E9D8                            BuildSpritesMulti_ApproxYCheck:
0000E9D8 3428 000C                  	move.w	$C(a0),d2
0000E9DC 946C 0004                  	sub.w	4(a4),d2
0000E9E0 0642 0080                  	addi.w	#128,d2
0000E9E4 0242 07FF                  	andi.w	#$7FF,d2
0000E9E8 0C42 0060                  	cmpi.w	#-32+128,d2
0000E9EC 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000E9EE 0C42 0180                  	cmpi.w	#32+128+224,d2
0000E9F2 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000E9F4                            BuildSpritesMulti_DrawSprite:
0000E9F4 7200                       	moveq	#0,d1
0000E9F6 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000E9FA 6700                       	beq.s	@noparenttodraw
0000E9FC D241                       	add.w	d1,d1
0000E9FE 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000EA00 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EA04 7200                       	moveq	#0,d1
0000EA06 1219                       	move.b	(a1)+,d1
0000EA08 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EA0A 6B00                       	bmi.s	@noparenttodraw                  ; if there are 0 pieces, branch
0000EA0C 3F04                       	move.w	d4,-(sp)
0000EA0E 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000EA14 381F                       	move.w	(sp)+,d4
0000EA16                            @noparenttodraw:
0000EA16 0028 0080 0001             	ori.b	#$80,1(a0)	         ; set onscreen flag
0000EA1C 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000EA20 7000                       	moveq	#0,d0
0000EA22 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000EA26 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000EA28 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000EA2A                            
0000EA2A                            @drawchildloop:
0000EA2A 4840                       	swap	d0
0000EA2C 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000EA2E 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000EA30 0643 0080                  	addi.w	#128,d3
0000EA34 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000EA36 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000EA3A 0642 0080                  	addi.w	#128,d2
0000EA3E 0242 07FF                  	andi.w	#$7FF,d2
0000EA42 524E                       	addq.w	#1,a6
0000EA44 7200                       	moveq	#0,d1
0000EA46 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000EA48 D241                       	add.w	d1,d1
0000EA4A 224D                       	movea.l	a5,a1
0000EA4C D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EA50 7200                       	moveq	#0,d1
0000EA52 1219                       	move.b	(a1)+,d1
0000EA54 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EA56 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000EA58 3F04                       	move.w	d4,-(sp)
0000EA5A 4EB9 0000 0000             	jsr	ChkDrawSprite
0000EA60 381F                       	move.w	(sp)+,d4
0000EA62                            @nochildleft:
0000EA62 4840                       	swap	d0
0000EA64 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000EA68                            ; loc_16804:
0000EA68                            BuildSprites_MultiDraw_NextObj:
0000EA68 285F                       	movea.l	(sp)+,a4
0000EA6A 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000EA6E                            
0000EA6E                            
0000EA6E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EA6E                            
0000EA6E                            ; sub_1680A:
0000EA6E                            ChkDrawSprite:
0000EA6E 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000EA72 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000EA74 4E75                       	rts	; otherwise, return
0000EA76                            
0000EA76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EA76                            
0000EA76                            
0000EA76                            sub_D750:				; XREF: BuildSprites
0000EA76 3668 0002                  		movea.w	2(a0),a3
0000EA7A                            loc_1681C:
0000EA7A 0804 0000                  		btst	#0,d4
0000EA7E 6600                       		bne.s	loc_D796
0000EA80 0804 0001                  		btst	#1,d4
0000EA84 6600 0000                  		bne.w	loc_D7E4
0000EA88                            ; End of function sub_D750
0000EA88                            
0000EA88                            
0000EA88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EA88                            
0000EA88                            
0000EA88                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000EA88 0C05 0050                  		cmpi.b	#$50,d5
0000EA8C 6700                       		beq.s	locret_D794
0000EA8E                            DrawSprite_Loop:				; XREF: sub_D762; SS_ShowLayout	
0000EA8E 1019                       		move.b	(a1)+,d0
0000EA90 4880                       		ext.w	d0
0000EA92 D042                       		add.w	d2,d0
0000EA94 34C0                       		move.w	d0,(a2)+
0000EA96 14D9                       		move.b	(a1)+,(a2)+
0000EA98 5205                       		addq.b	#1,d5
0000EA9A 14C5                       		move.b	d5,(a2)+
0000EA9C 1019                       		move.b	(a1)+,d0
0000EA9E E148                       		lsl.w	#8,d0
0000EAA0 1019                       		move.b	(a1)+,d0
0000EAA2 D04B                       		add.w	a3,d0
0000EAA4 34C0                       		move.w	d0,(a2)+
0000EAA6 1019                       		move.b	(a1)+,d0
0000EAA8 4880                       		ext.w	d0
0000EAAA D043                       		add.w	d3,d0
0000EAAC 0240 01FF                  		andi.w	#$1FF,d0
0000EAB0 6600                       		bne.s	loc_D78E
0000EAB2 5240                       		addq.w	#1,d0
0000EAB4                            
0000EAB4                            loc_D78E:
0000EAB4 34C0                       		move.w	d0,(a2)+
0000EAB6 51C9 FFD0                  		dbf	d1,sub_D762
0000EABA                            
0000EABA                            locret_D794:
0000EABA 4E75                       		rts	
0000EABC                            ; End of function sub_D762
0000EABC                            
0000EABC                            ; ===========================================================================
0000EABC                            
0000EABC                            loc_D796:
0000EABC 0804 0001                  		btst	#1,d4
0000EAC0 6600 0000                  		bne.w	loc_D82A
0000EAC4                            
0000EAC4                            loc_D79E:
0000EAC4 0C05 0050                  		cmpi.b	#$50,d5
0000EAC8 6700                       		beq.s	locret_D7E2
0000EACA 1019                       		move.b	(a1)+,d0
0000EACC 4880                       		ext.w	d0
0000EACE D042                       		add.w	d2,d0
0000EAD0 34C0                       		move.w	d0,(a2)+
0000EAD2 1819                       		move.b	(a1)+,d4
0000EAD4 14C4                       		move.b	d4,(a2)+
0000EAD6 5205                       		addq.b	#1,d5
0000EAD8 14C5                       		move.b	d5,(a2)+
0000EADA 1019                       		move.b	(a1)+,d0
0000EADC E148                       		lsl.w	#8,d0
0000EADE 1019                       		move.b	(a1)+,d0
0000EAE0 D04B                       		add.w	a3,d0
0000EAE2 0A40 0800                  		eori.w	#$800,d0
0000EAE6 34C0                       		move.w	d0,(a2)+
0000EAE8 1019                       		move.b	(a1)+,d0
0000EAEA 4880                       		ext.w	d0
0000EAEC 4440                       		neg.w	d0
0000EAEE D804                       		add.b	d4,d4
0000EAF0 0244 0018                  		andi.w	#$18,d4
0000EAF4 5044                       		addq.w	#8,d4
0000EAF6 9044                       		sub.w	d4,d0
0000EAF8 D043                       		add.w	d3,d0
0000EAFA 0240 01FF                  		andi.w	#$1FF,d0
0000EAFE 6600                       		bne.s	loc_D7DC
0000EB00 5240                       		addq.w	#1,d0
0000EB02                            
0000EB02                            loc_D7DC:
0000EB02 34C0                       		move.w	d0,(a2)+
0000EB04 51C9 FFBE                  		dbf	d1,loc_D79E
0000EB08                            
0000EB08                            locret_D7E2:
0000EB08 4E75                       		rts	
0000EB0A                            ; ===========================================================================
0000EB0A                            
0000EB0A                            loc_D7E4:				; XREF: sub_D750
0000EB0A 0C05 0050                  		cmpi.b	#$50,d5
0000EB0E 6700                       		beq.s	locret_D828
0000EB10 1019                       		move.b	(a1)+,d0
0000EB12 1811                       		move.b	(a1),d4
0000EB14 4880                       		ext.w	d0
0000EB16 4440                       		neg.w	d0
0000EB18 E70C                       		lsl.b	#3,d4
0000EB1A 0244 0018                  		andi.w	#$18,d4
0000EB1E 5044                       		addq.w	#8,d4
0000EB20 9044                       		sub.w	d4,d0
0000EB22 D042                       		add.w	d2,d0
0000EB24 34C0                       		move.w	d0,(a2)+
0000EB26 14D9                       		move.b	(a1)+,(a2)+
0000EB28 5205                       		addq.b	#1,d5
0000EB2A 14C5                       		move.b	d5,(a2)+
0000EB2C 1019                       		move.b	(a1)+,d0
0000EB2E E148                       		lsl.w	#8,d0
0000EB30 1019                       		move.b	(a1)+,d0
0000EB32 D04B                       		add.w	a3,d0
0000EB34 0A40 1000                  		eori.w	#$1000,d0
0000EB38 34C0                       		move.w	d0,(a2)+
0000EB3A 1019                       		move.b	(a1)+,d0
0000EB3C 4880                       		ext.w	d0
0000EB3E D043                       		add.w	d3,d0
0000EB40 0240 01FF                  		andi.w	#$1FF,d0
0000EB44 6600                       		bne.s	loc_D822
0000EB46 5240                       		addq.w	#1,d0
0000EB48                            
0000EB48                            loc_D822:
0000EB48 34C0                       		move.w	d0,(a2)+
0000EB4A 51C9 FFBE                  		dbf	d1,loc_D7E4
0000EB4E                            
0000EB4E                            locret_D828:
0000EB4E 4E75                       		rts	
0000EB50                            ; ===========================================================================
0000EB50                            
0000EB50                            loc_D82A:
0000EB50 0C05 0050                  		cmpi.b	#$50,d5
0000EB54 6700                       		beq.s	locret_D87C
0000EB56 1019                       		move.b	(a1)+,d0
0000EB58 1811                       		move.b	(a1),d4
0000EB5A 4880                       		ext.w	d0
0000EB5C 4440                       		neg.w	d0
0000EB5E E70C                       		lsl.b	#3,d4
0000EB60 0244 0018                  		andi.w	#$18,d4
0000EB64 5044                       		addq.w	#8,d4
0000EB66 9044                       		sub.w	d4,d0
0000EB68 D042                       		add.w	d2,d0
0000EB6A 34C0                       		move.w	d0,(a2)+
0000EB6C 1819                       		move.b	(a1)+,d4
0000EB6E 14C4                       		move.b	d4,(a2)+
0000EB70 5205                       		addq.b	#1,d5
0000EB72 14C5                       		move.b	d5,(a2)+
0000EB74 1019                       		move.b	(a1)+,d0
0000EB76 E148                       		lsl.w	#8,d0
0000EB78 1019                       		move.b	(a1)+,d0
0000EB7A D04B                       		add.w	a3,d0
0000EB7C 0A40 1800                  		eori.w	#$1800,d0
0000EB80 34C0                       		move.w	d0,(a2)+
0000EB82 1019                       		move.b	(a1)+,d0
0000EB84 4880                       		ext.w	d0
0000EB86 4440                       		neg.w	d0
0000EB88 D804                       		add.b	d4,d4
0000EB8A 0244 0018                  		andi.w	#$18,d4
0000EB8E 5044                       		addq.w	#8,d4
0000EB90 9044                       		sub.w	d4,d0
0000EB92 D043                       		add.w	d3,d0
0000EB94 0240 01FF                  		andi.w	#$1FF,d0
0000EB98 6600                       		bne.s	loc_D876
0000EB9A 5240                       		addq.w	#1,d0
0000EB9C                            
0000EB9C                            loc_D876:
0000EB9C 34C0                       		move.w	d0,(a2)+
0000EB9E 51C9 FFB0                  		dbf	d1,loc_D82A
0000EBA2                            
0000EBA2                            locret_D87C:
0000EBA2 4E75                       		rts	
0000EBA4                            ; ---------------------------------------------------------------------------
0000EBA4                            ; Subroutine to	check if an object is on the screen
0000EBA4                            ; ---------------------------------------------------------------------------
0000EBA4                            
0000EBA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBA4                            
0000EBA4                            
0000EBA4                            ChkObjOnScreen:
0000EBA4 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000EBA8 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000EBAC 6B00                       		bmi.s	NotOnScreen
0000EBAE 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000EBB2 6C00                       		bge.s	NotOnScreen	; if not, branch
0000EBB4                            
0000EBB4 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000EBB8 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000EBBC 6B00                       		bmi.s	NotOnScreen
0000EBBE 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000EBC2 6C00                       		bge.s	NotOnScreen	; if not, branch
0000EBC4                            
0000EBC4 7000                       		moveq	#0,d0		; set flag to 0
0000EBC6 4E75                       		rts	
0000EBC8                            ; ===========================================================================
0000EBC8                            
0000EBC8                            NotOnScreen:				; XREF: ChkObjOnScreen
0000EBC8 7001                       		moveq	#1,d0		; set flag to 1
0000EBCA 4E75                       		rts	
0000EBCC                            ; End of function ChkObjOnScreen
0000EBCC                            
0000EBCC                            
0000EBCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBCC                            
0000EBCC                            
0000EBCC                            ChkObjOnScreen2:
0000EBCC 7200                       		moveq	#0,d1
0000EBCE 1228 0019                  		move.b	$19(a0),d1
0000EBD2 3028 0008                  		move.w	8(a0),d0
0000EBD6 9078 F700                  		sub.w	($FFFFF700).w,d0
0000EBDA D041                       		add.w	d1,d0
0000EBDC 6B00                       		bmi.s	NotOnScreen2
0000EBDE D241                       		add.w	d1,d1
0000EBE0 9041                       		sub.w	d1,d0
0000EBE2 0C40 0140                  		cmpi.w	#320,d0
0000EBE6 6C00                       		bge.s	NotOnScreen2
0000EBE8                            
0000EBE8 3228 000C                  		move.w	$C(a0),d1
0000EBEC 9278 F704                  		sub.w	($FFFFF704).w,d1
0000EBF0 6B00                       		bmi.s	NotOnScreen2
0000EBF2 0C41 00E0                  		cmpi.w	#224,d1
0000EBF6 6C00                       		bge.s	NotOnScreen2
0000EBF8                            
0000EBF8 7000                       		moveq	#0,d0
0000EBFA 4E75                       		rts	
0000EBFC                            ; ===========================================================================
0000EBFC                            
0000EBFC                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000EBFC 7001                       		moveq	#1,d0
0000EBFE 4E75                       		rts	
0000EC00                            ; End of function ChkObjOnScreen2
0000EC00                            
0000EC00                            ; ---------------------------------------------------------------------------
0000EC00                            ; Subroutine to	load a level's objects
0000EC00                            ; ---------------------------------------------------------------------------
0000EC00                            
0000EC00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC00                            
0000EC00                            
0000EC00                            ; ---------------------------------------------------------------------------
0000EC00                            ; Objects Manager
0000EC00                            ; Subroutine to load objects whenever they are close to the screen. Unlike in
0000EC00                            ; normal s2, in this version every object gets an entry in the respawn table.
0000EC00                            ; This is necessary to get the additional y-range checks to work.
0000EC00                            ;
0000EC00                            ; input variables:
0000EC00                            ;  -none-
0000EC00                            ;
0000EC00                            ; writes:
0000EC00                            ;  d0, d1, d2
0000EC00                            ;  d3 = upper boundary to load object
0000EC00                            ;  d4 = lower boundary to load object
0000EC00                            ;  d5 = #$FFF, used to filter out object's y position
0000EC00                            ;  d6 = camera position
0000EC00                            ;
0000EC00                            ;  a0 = address in object placement list
0000EC00                            ;  a3 = address in object respawn table
0000EC00                            ;  a6 = object loading routine
0000EC00                            ; ---------------------------------------------------------------------------
0000EC00                             
0000EC00                            ; loc_17AA4
0000EC00                            ObjPosLoad:
0000EC00 7000                       	moveq	#0,d0
0000EC02 1038 F76C                  	move.b	($FFFFF76C).w,d0
0000EC06 4EFB 0000                  	jmp	ObjPosLoad_States(pc,d0.w)
0000EC0A                             
0000EC0A                            ; ============== JUMP TABLE	=============================================
0000EC0A                            ObjPosLoad_States:
0000EC0A 6000 0000                  	bra.w	ObjPosLoad_Init		; 0
0000EC0E 6000 0000                  	bra.w	ObjPosLoad_Main		; 2
0000EC12                            ; ============== END JUMP TABLE	=============================================
0000EC12                             
0000EC12                            ObjPosLoad_Init:
0000EC12 5838 F76C                  	addq.b	#4,($FFFFF76C).w
0000EC16                             
0000EC16 41F8 8000                  	lea     (Object_Respawn_Table).w,a0
0000EC1A 7000                       	moveq   #0,d0
0000EC1C 323C 00BF                  	move.w  #$BF,d1 ; set loop counter
0000EC20                            OPLBack1:
0000EC20 20C0                       	move.l  d0,(a0)+
0000EC22 51C9 FFFC                  	dbf     d1,OPLBack1
0000EC26                             
0000EC26 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000EC2A                            ;
0000EC2A                            ;	ror.b	#1,d0			; this is from s3k
0000EC2A                            ;	lsr.w	#5,d0
0000EC2A                            ;	lea	(Off_Objects).l,a0
0000EC2A                            ;	movea.l	(a0,d0.w),a0
0000EC2A                            ;
0000EC2A ED08                       	lsl.b	#6,d0
0000EC2C E848                       	lsr.w	#4,d0
0000EC2E 41F9 0000 0000             	lea	(ObjPos_Index).l,a0	; load the first pointer in the object layout list pointer index,
0000EC34 D0F0 0000                  	adda.w	(a0,d0.w),a0		; load the pointer to the current object layout
0000EC38                             
0000EC38                            	; initialize each object load address with the first object in the layout
0000EC38 21C8 F770                  	move.l	a0,($FFFFF770).w
0000EC3C 21C8 F774                  	move.l	a0,($FFFFF774).w
0000EC40 47F8 8000                  	lea	(Object_Respawn_Table).w,a3
0000EC44                             
0000EC44 3C38 F700                  	move.w	($FFFFF700).w,d6
0000EC48 0446 0080                  	subi.w	#$80,d6	; look one chunk to the left
0000EC4C 6400                       	bcc.s	OPL1	; if the result was negative,
0000EC4E 7C00                       	moveq	#0,d6	; cap at zero
0000EC50                            	OPL1:	
0000EC50 0246 FF80                  	andi.w	#$FF80,d6	; limit to increments of $80 (width of a chunk)
0000EC54                             
0000EC54 2078 F770                  	movea.l	($FFFFF770).w,a0	; get first object in layout
0000EC58                             
0000EC58                            OPLBack2:	; at the beginning of a level this gives respawn table entries to any object that is one chunk
0000EC58                            	; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
0000EC58 BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000EC5A 6300                       	bls.s	OPL2		; if yes, branch
0000EC5C 5C48                       	addq.w	#6,a0	; next object
0000EC5E 524B                       	addq.w	#1,a3	; respawn index of next object going right
0000EC60 60F6                       	bra.s	OPLBack2
0000EC62                            ; ---------------------------------------------------------------------------
0000EC62                             
0000EC62                            OPL2:	
0000EC62 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember rightmost object that has been processed, so far (we still need to look forward)
0000EC66 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EC6A                             
0000EC6A 47F8 8000                  	lea	(Object_Respawn_Table).w,a3	; reset a3
0000EC6E 2078 F774                  	movea.l	($FFFFF774).w,a0	; reset a0
0000EC72 0446 0080                  	subi.w	#$80,d6		; look even farther left (any object behind this is out of range)
0000EC76 6500                       	bcs.s	OPL3		; branch, if camera position would be behind level's left boundary
0000EC78                             
0000EC78                             OPLBack3:	; count how many objects are behind the screen that are not in range and need to remember their state
0000EC78 BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000EC7A 6300                       	bls.s	OPL3		; if yes, branch
0000EC7C 5C48                       	addq.w	#6,a0
0000EC7E 524B                       	addq.w	#1,a3	; respawn index of next object going left
0000EC80 60F6                       	bra.s	OPLBack3	; continue with next object
0000EC82                            ; ---------------------------------------------------------------------------
0000EC82                             
0000EC82                            OPL3:	
0000EC82 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EC86 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EC8A                             
0000EC8A 31FC FFFF FE2A             	move.w	#-1,(Camera_X_Pos_last).w	; make sure ObjPosLoad_GoingForward is run
0000EC90                             
0000EC90 3038 F704                  	move.w	($FFFFF704).w,d0
0000EC94 0240 FF80                  	andi.w	#$FF80,d0
0000EC98 31C0 F76E                  	move.w	d0,(Camera_Y_pos_last).w	; make sure the Y check isn't run unnecessarily during initialization
0000EC9C                            ; ---------------------------------------------------------------------------
0000EC9C                             
0000EC9C                            ObjPosLoad_Main:
0000EC9C                            	; get coarse camera position
0000EC9C                            ;	move.w	($FFFFF704).w,d1
0000EC9C                            ;	subi.w	#$80,d1
0000EC9C                            ;	andi.w	#$FF80,d1
0000EC9C                            ;	move.w	d1,(Camera_Y_pos_coarse).w
0000EC9C                             
0000EC9C                            ;	move.w	($FFFFF700).w,d1
0000EC9C                            ;	subi.w	#$80,d1
0000EC9C                            ;	andi.w	#$FF80,d1
0000EC9C                            ;	move.w	d1,(Camera_X_pos_coarse).w
0000EC9C                             
0000EC9C 4A78 F726                  	tst.w	($FFFFF726).w	; does this level y-wrap?
0000ECA0 6A00                       	bpl.s	ObjMan_Main_NoYWrap	; if not, branch
0000ECA2 4DF9 0000 0000             	lea	(ChkLoadObj_YWrap).l,a6	; set object loading routine
0000ECA8 3638 F704                  	move.w	($FFFFF704).w,d3
0000ECAC 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000ECB0 3803                       	move.w	d3,d4
0000ECB2 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000ECB6 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000ECBA 6A00                       	bpl.s	OPL4		; branch, if upper boundary > 0
0000ECBC 0243 07FF                  	andi.w	#$7FF,d3	; wrap value
0000ECC0 6000                       	bra.s	ObjMan_Main_Cont
0000ECC2                            ; ---------------------------------------------------------------------------
0000ECC2                             
0000ECC2                            OPL4:	
0000ECC2 303C 07FF                  	move.w	#$7FF,d0
0000ECC6 5240                       	addq.w	#1,d0
0000ECC8 B840                       	cmp.w	d0,d4
0000ECCA 6300                       	bls.s	OPL5		; branch, if lower boundary < $7FF
0000ECCC 0244 07FF                  	andi.w	#$7FF,d4	; wrap value
0000ECD0 6000                       	bra.s	ObjMan_Main_Cont
0000ECD2                            ; ---------------------------------------------------------------------------
0000ECD2                             
0000ECD2                            ObjMan_Main_NoYWrap:
0000ECD2 3638 F704                  	move.w	($FFFFF704).w,d3
0000ECD6 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000ECDA 3803                       	move.w	d3,d4
0000ECDC 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000ECE0 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000ECE4 6A00                       	bpl.s	OPL5
0000ECE6 7600                       	moveq	#0,d3	; no negative values allowed
0000ECE8                             
0000ECE8                            OPL5:	
0000ECE8 4DF9 0000 0000             	lea	(ChkLoadObj).l,a6	; set object loading routine
0000ECEE                             
0000ECEE                            ObjMan_Main_Cont:
0000ECEE 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000ECF2 3C38 F700                  	move.w	($FFFFF700).w,d6
0000ECF6 0246 FF80                  	andi.w	#$FF80,d6
0000ECFA BC78 FE2A                  	cmp.w	(Camera_X_Pos_last).w,d6	; is the X range the same as last time?
0000ECFE 6700 0000                  	beq.w	ObjPosLoad_SameXRange	; if yes, branch
0000ED02 6C00                       	bge.s	ObjPosLoad_GoingForward	; if new pos is greater than old pos, branch
0000ED04                             
0000ED04                            	; if the player is moving back
0000ED04 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w	; remember current position for next time
0000ED08                             
0000ED08 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object going left
0000ED0C 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000ED10                             
0000ED10 0446 0080                  	subi.w	#$80,d6			; look one chunk to the left
0000ED14 6500                       	bcs.s	ObjMan_GoingBack_Part2	; branch, if camera position would be behind level's left boundary
0000ED16                             
0000ED16 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000ED1C 6600                       	bne.s	ObjMan_GoingBack_Part2		; branch, if there are none
0000ED1E                            OPLBack4:	; load all objects left of the screen that are now in range
0000ED1E BC68 FFFA                  	cmp.w	-6(a0),d6		; is the previous object's X pos less than d6?
0000ED22 6C00                       	bge.s	ObjMan_GoingBack_Part2	; if it is, branch
0000ED24 5D48                       	subq.w	#6,a0		; get object's address
0000ED26 534B                       	subq.w	#1,a3		; and respawn table index
0000ED28 4E96                       	jsr	(a6)		; load object
0000ED2A 6600                       	bne.s	OPL6		; branch, if SST is full
0000ED2C 5D48                       	subq.w	#6,a0
0000ED2E 60EE                       	bra.s	OPLBack4	; continue with previous object
0000ED30                            ; ---------------------------------------------------------------------------
0000ED30                             
0000ED30                            OPL6:	
0000ED30                            	; undo a few things, if the object couldn't load
0000ED30 5C48                       	addq.w	#6,a0	; go back to last object
0000ED32 524B                       	addq.w	#1,a3	; since we didn't load the object, undo last change
0000ED34                             
0000ED34                            ObjMan_GoingBack_Part2:
0000ED34 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object going left
0000ED38 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000ED3C 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object going right
0000ED40 3678 F778                  	movea.w	($FFFFF778).w,a3	; and its respawn table index
0000ED44 0646 0300                  	addi.w	#$300,d6	; look two chunks beyond the right edge of the screen
0000ED48                             
0000ED48                            OPLBack5:	; subtract number of objects that have been moved out of range (from the right side)
0000ED48 BC68 FFFA                  	cmp.w	-6(a0),d6	; is the previous object's X pos less than d6?
0000ED4C 6E00                       	bgt.s	OPL7		; if it is, branch
0000ED4E 5D48                       	subq.w	#6,a0		; get object's address
0000ED50 534B                       	subq.w	#1,a3		; and respawn table index
0000ED52 60F4                       	bra.s	OPLBack5	; continue with previous object
0000ED54                            ; ---------------------------------------------------------------------------
0000ED54                             
0000ED54                            OPL7:	
0000ED54 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object going right
0000ED58 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000ED5C 6000                       	bra.s	ObjPosLoad_SameXRange
0000ED5E                            ; ---------------------------------------------------------------------------
0000ED5E                             
0000ED5E                            ObjPosLoad_GoingForward:
0000ED5E 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w
0000ED62                             
0000ED62 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object from the right
0000ED66 3678 F778                  	movea.w ($FFFFF778).w,a3	; and its respawn table index
0000ED6A 0646 0280                  	addi.w	#$280,d6	; look two chunks forward
0000ED6E 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000ED74 6600                       	bne.s	ObjMan_GoingForward_Part2	; branch, if there are none
0000ED76                             
0000ED76                            OPLBack6:	; load all objects right of the screen that are now in range
0000ED76 BC50                       	cmp.w	(a0),d6				; is object's x position >= d6?
0000ED78 6300                       	bls.s	ObjMan_GoingForward_Part2	; if yes, branch
0000ED7A 4E96                       	jsr	(a6)		; load object (and get address of next object)
0000ED7C 524B                       	addq.w	#1,a3		; respawn index of next object to the right
0000ED7E 67F6                       	beq.s	OPLBack6	; continue loading objects, if the SST isn't full
0000ED80                             
0000ED80                            ObjMan_GoingForward_Part2:
0000ED80 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object from the right
0000ED84 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000ED88 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object from the left
0000ED8C 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000ED90 0446 0300                  	subi.w	#$300,d6		; look one chunk behind the left edge of the screen
0000ED94 6500                       	bcs.s	ObjMan_GoingForward_End	; branch, if camera position would be behind level's left boundary
0000ED96                             
0000ED96                            OPLBack7:	; subtract number of objects that have been moved out of range (from the left)
0000ED96 BC50                       	cmp.w	(a0),d6			; is object's x position >= d6?
0000ED98 6300                       	bls.s	ObjMan_GoingForward_End	; if yes, branch
0000ED9A 5C48                       	addq.w	#6,a0	; next object
0000ED9C 524B                       	addq.w	#1,a3	; respawn index of next object to the left
0000ED9E 60F6                       	bra.s	OPLBack7	; continue with next object
0000EDA0                            ; ---------------------------------------------------------------------------
0000EDA0                             
0000EDA0                            ObjMan_GoingForward_End:
0000EDA0 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EDA4 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EDA8                             
0000EDA8                            ObjPosLoad_SameXRange:
0000EDA8 3C38 F704                  	move.w	($FFFFF704).w,d6
0000EDAC 0246 FF80                  	andi.w	#$FF80,d6
0000EDB0 3606                       	move.w	d6,d3
0000EDB2 BC78 F76E                  	cmp.w	(Camera_Y_pos_last).w,d6	; is the y range the same as last time?
0000EDB6 6700 0000                  	beq.w	ObjPosLoad_SameYRange	; if yes, branch
0000EDBA 6C00                       	bge.s	ObjPosLoad_GoingDown	; if the player is moving down
0000EDBC                             
0000EDBC                            	; if the player is moving up
0000EDBC 4A78 F72C                  	tst.w	($FFFFF72C).w	; does the level y-wrap?
0000EDC0 6A00                       	bpl.s	ObjMan_GoingUp_NoYWrap	; if not, branch
0000EDC2 4A46                       	tst.w	d6
0000EDC4 6600                       	bne.s	ObjMan_GoingUp_YWrap
0000EDC6 0C78 0080 F76E             	cmpi.w	#$80,(Camera_Y_pos_last).w
0000EDCC 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000EDCE                             
0000EDCE                            ObjMan_GoingUp_YWrap:
0000EDCE 0443 0080                  	subi.w	#$80,d3			; look one chunk up
0000EDD2 6A00                       	bpl.s	ObjPosLoad_YCheck	; go to y check, if camera y position >= $80
0000EDD4 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000EDD8 6000                       	bra.s	ObjPosLoad_YCheck
0000EDDA                             
0000EDDA                            ; ---------------------------------------------------------------------------
0000EDDA                             
0000EDDA                            ObjMan_GoingUp_NoYWrap:
0000EDDA 0443 0080                  	subi.w	#$80,d3				; look one chunk up
0000EDDE 6B00 0000                  	bmi.w	ObjPosLoad_SameYRange	; don't do anything if camera y position is < $80
0000EDE2 6000                       	bra.s	ObjPosLoad_YCheck
0000EDE4                            ; ---------------------------------------------------------------------------
0000EDE4                             
0000EDE4                            ObjPosLoad_GoingDown:
0000EDE4 4A78 F72C                  	tst.w	($FFFFF72C).w		; does the level y-wrap?
0000EDE8 6A00                       	bpl.s	ObjMan_GoingDown_NoYWrap	; if not, branch
0000EDEA 4A78 F76E                  	tst.w	(Camera_Y_pos_last).w
0000EDEE 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000EDF0 0C46 0080                  	cmpi.w	#$80,d6
0000EDF4 66D8                       	bne.s	ObjMan_GoingUp_YWrap
0000EDF6                             
0000EDF6                            ObjMan_GoingDown_YWrap:
0000EDF6 0643 0180                  	addi.w	#$180,d3		; look one chunk down
0000EDFA 0C43 07FF                  	cmpi.w	#$7FF,d3
0000EDFE 6500                       	bcs.s	ObjPosLoad_YCheck	; go to  check, if camera y position < $7FF
0000EE00 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000EE04 6000                       	bra.s	ObjPosLoad_YCheck
0000EE06                            ; ---------------------------------------------------------------------------
0000EE06                             
0000EE06                            ObjMan_GoingDown_NoYWrap:
0000EE06 0643 0180                  	addi.w	#$180,d3			; look one chunk down
0000EE0A 0C43 07FF                  	cmpi.w	#$7FF,d3
0000EE0E 6200                       	bhi.s	ObjPosLoad_SameYRange	; don't do anything, if camera is too close to bottom
0000EE10                             
0000EE10                            ObjPosLoad_YCheck:
0000EE10 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; get an empty object slot
0000EE16 6600                       	bne.s	ObjPosLoad_SameYRange	; branch, if there are none
0000EE18 3803                       	move.w	d3,d4
0000EE1A 0644 0080                  	addi.w	#$80,d4
0000EE1E 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000EE22 2078 F774                  	movea.l	($FFFFF774).w,a0	; get next object going left
0000EE26 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EE2A 2E38 F770                  	move.l	($FFFFF770).w,d7	; get next object going right
0000EE2E 9E88                       	sub.l	a0,d7	; d7 = number of objects between the left and right boundaries * 6
0000EE30 6700                       	beq.s	ObjPosLoad_SameYRange	; branch if there are no objects inbetween
0000EE32 5448                       	addq.w	#2,a0	; align to object's y position
0000EE34                             
0000EE34                            OPLBack8:	; check, if current object needs to be loaded
0000EE34 4A13                       	tst.b	(a3)	; is object already loaded?
0000EE36 6B00                       	bmi.s	OPL8	; if yes, branch
0000EE38 3210                       	move.w	(a0),d1
0000EE3A C245                       	and.w	d5,d1	; get object's y position
0000EE3C B243                       	cmp.w	d3,d1
0000EE3E 6500                       	bcs.s	OPL8	; branch, if object is out of range from the top
0000EE40 B244                       	cmp.w	d4,d1
0000EE42 6200                       	bhi.s	OPL8	; branch, if object is out of range from the bottom
0000EE44 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000EE48                            	; load object
0000EE48 3368 FFFE 0008             	move.w	-2(a0),8(a1)
0000EE4E 3210                       	move.w	(a0),d1
0000EE50 3401                       	move.w	d1,d2
0000EE52 C245                       	and.w	d5,d1	; get object's y position
0000EE54 3341 000C                  	move.w	d1,$C(a1)
0000EE58 E75A                       	rol.w	#3,d2
0000EE5A 0242 0003                  	andi.w	#3,d2	; get object's render flags and status
0000EE5E 1342 0001                  	move.b	d2,1(a1)
0000EE62 1342 0022                  	move.b	d2,$22(a1)
0000EE66 7000                           moveq	#0,d0
0000EE68 1028 0002                  	move.b	2(a0),d0
0000EE6C 0200 007F                  	andi.b	#$7F,d0
0000EE70 1280                       	move.b	d0,0(a1)
0000EE72 1368 0003 0028             	move.b	3(a0),$28(a1)
0000EE78 334B 0014                  	move.w	a3,respawn_index(a1)
0000EE7C 4EB9 0000 0000             	jsr	(SingleObjLoad).l	; find new object slot
0000EE82 6600                       	bne.s	ObjPosLoad_SameYRange	; brach, if there are none left
0000EE84                            OPL8:
0000EE84 5C48                       	addq.w	#6,a0	; address of next object
0000EE86 524B                       	addq.w	#1,a3	; and its respawn index
0000EE88 5D47                       	subq.w	#6,d7	; subtract from size of remaining objects
0000EE8A 66A8                       	bne.s	OPLBack8	; branch, if there are more
0000EE8C                             
0000EE8C                            ObjPosLoad_SameYRange:
0000EE8C 31C6 F76E                  	move.w	d6,(Camera_Y_pos_last).w
0000EE90 4E75                       	rts		
0000EE92                            ; ===========================================================================
0000EE92                            ; ---------------------------------------------------------------------------
0000EE92                            ; Subroutines to check if an object needs to be loaded,
0000EE92                            ; with and without y-wrapping enabled.
0000EE92                            ;
0000EE92                            ; input variables:
0000EE92                            ;  d3 = upper boundary to load object
0000EE92                            ;  d4 = lower boundary to load object
0000EE92                            ;  d5 = #$FFF, used to filter out object's y position
0000EE92                            ;
0000EE92                            ;  a0 = address in object placement list
0000EE92                            ;  a1 = object
0000EE92                            ;  a3 = address in object respawn table
0000EE92                            ;
0000EE92                            ; writes:
0000EE92                            ;  d1, d2, d7
0000EE92                            ; ---------------------------------------------------------------------------
0000EE92                            ChkLoadObj_YWrap:
0000EE92 4A13                       	tst.b	(a3)	; is object already loaded?
0000EE94 6A00                       	bpl.s	OPL9	; if not, branch
0000EE96 5C48                       	addq.w	#6,a0	; address of next object
0000EE98 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000EE9A 4E75                       	rts	
0000EE9C                            ; ---------------------------------------------------------------------------
0000EE9C                             
0000EE9C                            OPL9:	
0000EE9C 3E18                       	move.w	(a0)+,d7	; x_pos
0000EE9E 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000EEA0 3401                       	move.w	d1,d2	; does this object skip y-Checks?
0000EEA2 6B00                       	bmi.s	OPL10	; if yes, branch
0000EEA4 C245                       	and.w	d5,d1	; y_pos
0000EEA6 B243                       	cmp.w	d3,d1
0000EEA8 6400                       	bcc.s	LoadObj_YWrap
0000EEAA B244                       	cmp.w	d4,d1
0000EEAC 6300                       	bls.s	LoadObj_YWrap
0000EEAE 5448                       	addq.w	#2,a0	; address of next object
0000EEB0 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000EEB2 4E75                       	rts	
0000EEB4                            ; ---------------------------------------------------------------------------
0000EEB4                             
0000EEB4                            OPL10:	
0000EEB4 C245                       	and.w	d5,d1	; y_pos
0000EEB6                             
0000EEB6                            LoadObj_YWrap:
0000EEB6 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000EEBA 3347 0008                  	move.w	d7,8(a1)
0000EEBE 3341 000C                  	move.w	d1,$C(a1)
0000EEC2 E75A                       	rol.w	#3,d2	; adjust bits
0000EEC4 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000EEC8 1342 0001                  	move.b	d2,1(a1)
0000EECC 1342 0022                  	move.b	d2,$22(a1)
0000EED0 7000                           moveq	#0,d0
0000EED2 1018                       	move.b	(a0)+,d0
0000EED4 0200 007F                  	andi.b	#$7F,d0
0000EED8 1280                       	move.b	d0,0(a1)
0000EEDA 1358 0028                  	move.b	(a0)+,$28(a1)
0000EEDE 334B 0014                  	move.w	a3,respawn_index(a1)
0000EEE2 6000                       	bra.s	SingleObjLoad	; find new object slot
0000EEE4                             
0000EEE4                            ;loc_17F36
0000EEE4                            ChkLoadObj:
0000EEE4 4A13                       	tst.b	(a3)	; is object already loaded?
0000EEE6 6A00                       	bpl.s	OPL11	; if not, branch
0000EEE8 5C48                       	addq.w	#6,a0	; address of next object
0000EEEA 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000EEEC 4E75                       	rts
0000EEEE                            ; ---------------------------------------------------------------------------
0000EEEE                             
0000EEEE                            OPL11:	
0000EEEE 3E18                       	move.w	(a0)+,d7	; x_pos
0000EEF0 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000EEF2 3401                       	move.w	d1,d2	; does this object skip y-Checks?	;*6
0000EEF4 6B00                       	bmi.s	OPL13	; if yes, branch
0000EEF6 C245                       	and.w	d5,d1	; y_pos
0000EEF8 B243                       	cmp.w	d3,d1
0000EEFA 6500                       	bcs.s	OPL12	; branch, if object is out of range from the top
0000EEFC B244                       	cmp.w	d4,d1
0000EEFE 6300                       	bls.s	LoadObj	; branch, if object is in range from the bottom
0000EF00                            OPL12:
0000EF00 5448                       	addq.w	#2,a0	; address of next object
0000EF02 7200                       	moveq	#0,d1
0000EF04 4E75                       	rts		
0000EF06                            ; ---------------------------------------------------------------------------
0000EF06                             
0000EF06                            OPL13:	
0000EF06 C245                       	and.w	d5,d1	; y_pos
0000EF08                             
0000EF08                            LoadObj:
0000EF08 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000EF0C 3347 0008                  	move.w	d7,8(a1)
0000EF10 3341 000C                  	move.w	d1,$C(a1)
0000EF14 E75A                       	rol.w	#3,d2	; adjust bits
0000EF16 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000EF1A 1342 0001                  	move.b	d2,1(a1)
0000EF1E 1342 0022                  	move.b	d2,$22(a1)
0000EF22 7000                           moveq	#0,d0
0000EF24 1018                           move.b	(a0)+,d0
0000EF26 0200 007F                  	andi.b	#$7F,d0
0000EF2A 1280                       	move.b	d0,0(a1)
0000EF2C 1358 0028                  	move.b	(a0)+,$28(a1)
0000EF30 334B 0014                  	move.w	a3,respawn_index(a1)
0000EF34                            	; continue straight to SingleObjLoad
0000EF34                            ; End of function ChkLoadObj
0000EF34                            ; ===========================================================================
0000EF34                            
0000EF34                            ; ---------------------------------------------------------------------------
0000EF34                            ; Single object	loading	subroutine
0000EF34                            ; ---------------------------------------------------------------------------
0000EF34                            
0000EF34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EF34                            
0000EF34                            
0000EF34                            SingleObjLoad:
0000EF34 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000EF38 303C 005F                  		move.w	#$5F,d0
0000EF3C                            
0000EF3C                            loc_DA94:
0000EF3C 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000EF3E 6700                       		beq.s	locret_DAA0	; if yes, branch
0000EF40 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000EF44 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000EF48                            
0000EF48                            locret_DAA0:
0000EF48 4E75                       		rts	
0000EF4A                            ; End of function SingleObjLoad
0000EF4A                            
0000EF4A                            
0000EF4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EF4A                            
0000EF4A                            
0000EF4A                            SingleObjLoad2:
0000EF4A 2248                       		movea.l	a0,a1
0000EF4C 303C F000                  		move.w	#-$1000,d0
0000EF50 9048                       		sub.w	a0,d0
0000EF52 EC48                       		lsr.w	#6,d0
0000EF54 5340                       		subq.w	#1,d0
0000EF56 6500                       		bcs.s	locret_DABC
0000EF58                            
0000EF58                            loc_DAB0:
0000EF58 4A11                       		tst.b	(a1)
0000EF5A 6700                       		beq.s	locret_DABC
0000EF5C 43E9 0040                  		lea	$40(a1),a1
0000EF60 51C8 FFF6                  		dbf	d0,loc_DAB0
0000EF64                            
0000EF64                            locret_DABC:
0000EF64 4E75                       		rts	
0000EF66                            ; End of function SingleObjLoad2
0000EF66                            
0000EF66                            ; ===========================================================================
0000EF66                            RingsManager:
0000EF66 7000                       	moveq	#0,d0
0000EF68 1038 870C                  	move.b	(Rings_manager_routine).w,d0
0000EF6C 303B 0000                  	move.w	RingsManager_States(pc,d0.w),d0
0000EF70 4EFB 0000                  	jmp	RingsManager_States(pc,d0.w)
0000EF74                            ; ===========================================================================
0000EF74                            ; off_16F96:
0000EF74                            RingsManager_States:
0000EF74 0000                       	dc.w RingsManager_Init-RingsManager_States
0000EF76 0000                       	dc.w RingsManager_Main-RingsManager_States
0000EF78                            ; ===========================================================================
0000EF78                            ; loc_16F9A:
0000EF78                            RingsManager_Init:
0000EF78 5438 870C                  	addq.b	#2,(Rings_manager_routine).w ; => RingsManager_Main
0000EF7C 6100 0000                  	bsr.w	RingsManager_Setup
0000EF80 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000EF84 45F8 8300                  	lea	(Ring_Positions).w,a2
0000EF88 3838 F700                  	move.w	($FFFFF700).w,d4
0000EF8C 5144                       	subq.w	#8,d4
0000EF8E 6200                       	bhi.s	loc_16FB6
0000EF90 7801                       	moveq	#1,d4
0000EF92 6000                       	bra.s	loc_16FB6
0000EF94                            ; ===========================================================================
0000EF94                            
0000EF94                            loc_16FB2:
0000EF94 5849                       	addq.w	#4,a1
0000EF96 544A                       	addq.w	#2,a2
0000EF98                            
0000EF98                            loc_16FB6:
0000EF98 B851                       	cmp.w	(a1),d4
0000EF9A 62F8                       	bhi.s	loc_16FB2
0000EF9C 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000EFA0 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000EFA4 0644 0150                  	addi.w	#$150,d4
0000EFA8 6000                       	bra.s	loc_16FCE
0000EFAA                            ; ===========================================================================
0000EFAA                            
0000EFAA                            loc_16FCA:
0000EFAA 5849                       	addq.w	#4,a1
0000EFAC                            
0000EFAC                            loc_16FCE:
0000EFAC B851                       	cmp.w	(a1),d4
0000EFAE 62FA                       	bhi.s	loc_16FCA
0000EFB0 21C9 8704                  	move.l	a1,(Ring_end_addr_ROM).w
0000EFB4 4E75                       	rts
0000EFB6                            ; ===========================================================================
0000EFB6                            ; loc_16FDE:
0000EFB6                            RingsManager_Main:
0000EFB6 45F8 870E                  	lea	(Ring_consumption_table).w,a2
0000EFBA 321A                       	move.w	(a2)+,d1
0000EFBC 5341                       	subq.w	#1,d1
0000EFBE 6500                       	bcs.s	loc_17014
0000EFC0                            
0000EFC0                            loc_16FE8:
0000EFC0 301A                       	move.w	(a2)+,d0
0000EFC2 67FC                       	beq.s	loc_16FE8
0000EFC4 3240                       	movea.w	d0,a1
0000EFC6 5311                       	subq.b	#1,(a1)
0000EFC8 6600                       	bne.s	loc_17010
0000EFCA 12BC 0006                  	move.b	#6,(a1)
0000EFCE 5229 0001                  	addq.b	#1,1(a1)
0000EFD2 0C29 0008 0001             	cmpi.b	#8,1(a1)
0000EFD8 6600                       	bne.s	loc_17010
0000EFDA 32BC FFFF                  	move.w	#-1,(a1)
0000EFDE 357C 0000 FFFE             	move.w	#0,-2(a2)
0000EFE4 5378 870E                  	subq.w	#1,(Ring_consumption_table).w
0000EFE8                            
0000EFE8                            loc_17010:
0000EFE8 51C9 FFD6                  	dbf	d1,loc_16FE8
0000EFEC                            
0000EFEC                            loc_17014:
0000EFEC 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000EFF0 3478 8708                  	movea.w	(Ring_start_addr_RAM).w,a2
0000EFF4 3838 F700                  	move.w	($FFFFF700).w,d4
0000EFF8 5144                       	subq.w	#8,d4
0000EFFA 6200                       	bhi.s	loc_17028
0000EFFC 7801                       	moveq	#1,d4
0000EFFE 6000                       	bra.s	loc_17028
0000F000                            ; ===========================================================================
0000F000                            
0000F000                            loc_17024:
0000F000 5849                       	addq.w	#4,a1
0000F002 544A                       	addq.w	#2,a2
0000F004                            
0000F004                            loc_17028:
0000F004 B851                       	cmp.w	(a1),d4
0000F006 62F8                       	bhi.s	loc_17024
0000F008 6000                       	bra.s	loc_17032
0000F00A                            ; ===========================================================================
0000F00A                            
0000F00A                            loc_17030:
0000F00A 5949                       	subq.w	#4,a1
0000F00C 554A                       	subq.w	#2,a2
0000F00E                            
0000F00E                            loc_17032:
0000F00E B869 FFFC                  	cmp.w	-4(a1),d4
0000F012 63F6                       	bls.s	loc_17030
0000F014 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F018 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F01C 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F020 0644 0150                  	addi.w	#$150,d4
0000F024 6000                       	bra.s	loc_1704A
0000F026                            ; ===========================================================================
0000F026                            
0000F026                            loc_17046:
0000F026 584A                       	addq.w	#4,a2
0000F028                            
0000F028                            loc_1704A:
0000F028 B852                       	cmp.w	(a2),d4
0000F02A 62FA                       	bhi.s	loc_17046
0000F02C 6000                       	bra.s	loc_17054
0000F02E                            ; ===========================================================================
0000F02E                            
0000F02E                            loc_17052:
0000F02E 594A                       	subq.w	#4,a2
0000F030                            
0000F030                            loc_17054:
0000F030 B86A FFFC                  	cmp.w	-4(a2),d4
0000F034 63F8                       	bls.s	loc_17052
0000F036 21CA 8704                  	move.l	a2,(Ring_end_addr_ROM).w
0000F03A 4E75                       	rts
0000F03C                            
0000F03C                            ; ===========================================================================
0000F03C                            
0000F03C                            Touch_Rings:
0000F03C 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F040 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F044                            
0000F044                            loc_170D0:
0000F044 B5C9                       	cmpa.l	a1,a2
0000F046 6700 0000                  	beq.w	return_17166
0000F04A 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F04E 0C68 005A 0030             	cmpi.w	#$5A,$30(a0)
0000F054 6400 0000                  	bcc.w	return_17166
0000F058                            	
0000F058                            Touch_Rings_NoAttraction:
0000F058 3428 0008                  	move.w	8(a0),d2
0000F05C 3628 000C                  	move.w	$C(a0),d3
0000F060 5142                       	subi.w	#8,d2
0000F062 7A00                       	moveq	#0,d5
0000F064 1A28 0016                  	move.b	$16(a0),d5
0000F068 5705                       	subq.b	#3,d5
0000F06A 9645                       	sub.w	d5,d3
0000F06C 0C28 004D 0004             	cmpi.b	#$4D,4(a0)
0000F072 6600                       	bne.s	RM1
0000F074 0643 000C                  	addi.w	#$C,d3
0000F078 7A0A                       	moveq	#$A,d5
0000F07A                            RM1:
0000F07A 323C 0006                  	move.w	#6,d1
0000F07E 3C3C 000C                  	move.w	#$C,d6
0000F082 383C 0010                  	move.w	#$10,d4
0000F086 DA45                       	add.w	d5,d5
0000F088                            
0000F088                            loc_17112:
0000F088 4A54                       	tst.w	(a4)
0000F08A 6600 0000                  	bne.w	loc_1715C
0000F08E 3011                       	move.w	(a1),d0
0000F090 9041                       	sub.w	d1,d0
0000F092 9042                       	sub.w	d2,d0
0000F094 6400                       	bcc.s	loc_1712A
0000F096 D046                       	add.w	d6,d0
0000F098 6500                       	bcs.s	loc_17130
0000F09A 6000 0000                  	bra.w	loc_1715C
0000F09E                            ; ===========================================================================
0000F09E                            
0000F09E                            loc_1712A:
0000F09E B044                       	cmp.w	d4,d0
0000F0A0 6200 0000                  	bhi.w	loc_1715C
0000F0A4                            
0000F0A4                            loc_17130:
0000F0A4 3029 0002                  	move.w	2(a1),d0
0000F0A8 9041                       	sub.w	d1,d0
0000F0AA 9043                       	sub.w	d3,d0
0000F0AC 6400                       	bcc.s	loc_17142
0000F0AE D046                       	add.w	d6,d0
0000F0B0 6500                       	bcs.s	loc_17148
0000F0B2 6000 0000                  	bra.w	loc_1715C
0000F0B6                            ; ===========================================================================
0000F0B6                            
0000F0B6                            loc_17142:
0000F0B6 B045                       	cmp.w	d5,d0
0000F0B8 6200 0000                  	bhi.w	loc_1715C
0000F0BC                            
0000F0BC                            loc_17148:
0000F0BC 38BC 0604                  	move.w	#$604,(a4)
0000F0C0 6100                       	bsr.s	loc_17168
0000F0C2 47F8 8710                  	lea	(Ring_consumption_table+2).w,a3
0000F0C6                            
0000F0C6                            loc_17152:
0000F0C6 4A5B                       	tst.w	(a3)+
0000F0C8 66FC                       	bne.s	loc_17152
0000F0CA 370C                       	move.w	a4,-(a3)
0000F0CC 5278 870E                  	addq.w	#1,(Ring_consumption_table).w
0000F0D0                            
0000F0D0                            loc_1715C:
0000F0D0 5849                       	addq.w	#4,a1
0000F0D2 544C                       	addq.w	#2,a4
0000F0D4 B5C9                       	cmpa.l	a1,a2
0000F0D6 6600 FFB0                  	bne.w	loc_17112
0000F0DA                            
0000F0DA                            return_17166:
0000F0DA 4E75                       	rts
0000F0DC                            ; ===========================================================================
0000F0DC                            
0000F0DC                            loc_17168:
0000F0DC 5378 870A                  	subq.w	#1,(Perfect_rings_left).w
0000F0E0 6000 BCAE                  	bra.w	CollectRing
0000F0E4                            ; ===========================================================================
0000F0E4                            
0000F0E4                            BuildRings:
0000F0E4 2078 8700                  	movea.l	(Ring_start_addr_ROM).w,a0
0000F0E8 2E38 8704                  	move.l	(Ring_end_addr_ROM).w,d7
0000F0EC 9E88                       	sub.l	a0,d7
0000F0EE 6600                       	bne.s	loc_17186
0000F0F0 4E75                       	rts
0000F0F2                            ; ===========================================================================
0000F0F2                            
0000F0F2                            loc_17186:
0000F0F2 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F0F6 47F8 F700                  	lea	($FFFFF700).w,a3
0000F0FA                            
0000F0FA                            loc_1718A:
0000F0FA 4A5C                       	tst.w	(a4)+
0000F0FC 6B00 0000                  	bmi.w	loc_171EC
0000F100 3610                       	move.w	(a0),d3
0000F102 9653                       	sub.w	(a3),d3
0000F104 0643 0080                  	addi.w	#$80,d3
0000F108 3428 0002                  	move.w	2(a0),d2
0000F10C 946B 0004                  	sub.w	4(a3),d2
0000F110 0242 07FF                  	andi.w	#$7FF,d2
0000F114 5042                       	addi.w	#8,d2
0000F116 6B00                       	bmi.s	loc_171EC
0000F118 0C42 00F0                  	cmpi.w	#$F0,d2
0000F11C 6C00                       	bge.s	loc_171EC
0000F11E 0642 0078                  	addi.w	#$78,d2
0000F122 43F9 0000 B0E8             	lea	(Map_Obj25).l,a1
0000F128 7200                       	moveq	#0,d1
0000F12A 122C FFFF                  	move.b	-1(a4),d1
0000F12E 6600                       	bne.s	loc_171C8
0000F130 1238 FEC3                  	move.b	($FFFFFEC3).w,d1
0000F134                            
0000F134                            loc_171C8:
0000F134 D241                       	add.w	d1,d1
0000F136 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F13A 7200                       	moveq	#$00,d1
0000F13C 1219                       	move.b	(a1)+,d1
0000F13E 5301                       	subq.b	#1,d1
0000F140 6B00                       	bmi.s	loc_171EC
0000F142 1019                       	move.b	(a1)+,d0
0000F144 4880                       	ext.w	d0
0000F146 D042                       	add.w	d2,d0
0000F148 34C0                       	move.w	d0,(a2)+
0000F14A 14D9                       	move.b	(a1)+,(a2)+
0000F14C 5205                       	addq.b	#1,d5
0000F14E 14C5                       	move.b	d5,(a2)+
0000F150 1019                       	move.b	(a1)+,d0
0000F152 E148                       	lsl.w	#8,d0
0000F154 1019                       	move.b	(a1)+,d0
0000F156 0640 26BA                  	addi.w	#($2000+ringart),d0
0000F15A 34C0                       	move.w	d0,(a2)+
0000F15C 1019                       	move.b	(a1)+,d0
0000F15E 4880                       	ext.w	d0
0000F160 D043                       	add.w	d3,d0
0000F162 34C0                       	move.w	d0,(a2)+
0000F164                            
0000F164                            loc_171EC:
0000F164 5848                       	addq.w	#4,a0
0000F166 5947                       	subq.w	#4,d7
0000F168 6600 FF90                  	bne.w	loc_1718A
0000F16C 4E75                       	rts
0000F16E                            ; ===========================================================================
0000F16E                            
0000F16E                            RingsManager_Setup:
0000F16E 43F8 8300                  	lea	(Ring_Positions).w,a1
0000F172 7000                       	moveq	#0,d0
0000F174 323C 00FF                  	move.w	#Rings_Space/4-1,d1
0000F178                            
0000F178                            loc_172AE:				; CODE XREF: h+33Cj
0000F178 22C0                       	move.l	d0,(a1)+
0000F17A 51C9 FFFC                  	dbf	d1,loc_172AE
0000F17E                            
0000F17E                            	; d0 = 0
0000F17E 43F8 870E                  	lea	(Ring_consumption_table).w,a1
0000F182 323C 001F                  	move.w	#$1F,d1
0000F186                            RMBack1:
0000F186 22C0                       	move.l	d0,(a1)+
0000F188 51C9 FFFC                  	dbf	d1,RMBack1
0000F18C                            
0000F18C 7A00                       	moveq	#0,d5
0000F18E 7000                       	moveq	#0,d0
0000F190 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000F194 ED08                       	lsl.b	#6,d0
0000F196 E848                       	lsr.w	#4,d0
0000F198 43F9 0000 0000             	lea	(RingPos_Index).l,a1
0000F19E 3031 0000                  	move.w	(a1,d0.w),d0
0000F1A2 43F1 0000                  	lea	(a1,d0.w),a1
0000F1A6 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F1AA 5849                       	addq.w	#4,a1
0000F1AC 7A00                       	moveq	#0,d5
0000F1AE 303C 01FE                  	move.w	#(Max_Rings-1),d0	
0000F1B2                            	
0000F1B2                            RMBack2:
0000F1B2 4A99                       	tst.l	(a1)+
0000F1B4 6B00                       	bmi.s	RM2
0000F1B6 5245                       	addq.w	#1,d5
0000F1B8 51C8 FFF8                  	dbf	d0,RMBack2
0000F1BC                            RM2:
0000F1BC 31C5 870A                  	move.w	d5,(Perfect_rings_left).w
0000F1C0 4E75                       	rts
0000F1C2                            ; ===========================================================================
0000F1C2                            
0000F1C2                            ; ===========================================================================
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2                            ; Object 41 - springs
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2                            
0000F1C2                            Obj41:					; XREF: Obj_Index
0000F1C2 7000                       		moveq	#0,d0
0000F1C4 1028 0024                  		move.b	$24(a0),d0
0000F1C8 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F1CC 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F1D0 6100 F60C                  		bsr.w	DisplaySprite
0000F1D4 3028 0008                  		move.w	8(a0),d0
0000F1D8 0240 FF80                  		andi.w	#$FF80,d0
0000F1DC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F1E0 0441 0080                  		subi.w	#$80,d1
0000F1E4 0241 FF80                  		andi.w	#$FF80,d1
0000F1E8 9041                       		sub.w	d1,d0
0000F1EA 0C40 0280                  		cmpi.w	#$280,d0
0000F1EE 6300                       		bls.s	Obj41_NoDel
0000F1F0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F1F4 6700 F638                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000F1F8 3440                       		movea.w	d0,a2	; load address into a2
0000F1FA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F1FE 6000 F62E                  		bra.w	DeleteObject	; and delete object
0000F202                            
0000F202                            Obj41_NoDel:
0000F202 4E75                       		rts	
0000F204                            ; ===========================================================================
0000F204 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F206 0000                       		dc.w Obj41_Up-Obj41_Index
0000F208 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F20A 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F20C 0000                       		dc.w Obj41_LR-Obj41_Index
0000F20E 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F210 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F212 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F214 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F216 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F218                            
0000F218 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F21A F600                       		dc.w -$A00		; power	of yellow spring
0000F21C                            ; ===========================================================================
0000F21C                            
0000F21C                            Obj41_Main:				; XREF: Obj41_Index
0000F21C 5428 0024                  		addq.b	#2,$24(a0)
0000F220 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F228 317C 0523 0002             		move.w	#$523,2(a0)
0000F22E 0028 0004 0001             		ori.b	#4,1(a0)
0000F234 117C 0010 0019             		move.b	#$10,$19(a0)
0000F23A 117C 0004 0018             		move.b	#4,$18(a0)
0000F240 1028 0028                  		move.b	$28(a0),d0
0000F244 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F248 6700                       		beq.s	loc_DB54	; if not, branch
0000F24A 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F250 117C 0001 001C             		move.b	#1,$1C(a0)
0000F256 117C 0003 001A             		move.b	#3,$1A(a0)
0000F25C 317C 0533 0002             		move.w	#$533,2(a0)
0000F262 117C 0008 0019             		move.b	#8,$19(a0)
0000F268                            
0000F268                            loc_DB54:
0000F268 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F26C 6700                       		beq.s	loc_DB66	; if not, branch
0000F26E 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F274 08E8 0001 0022             		bset	#1,$22(a0)
0000F27A                            
0000F27A                            loc_DB66:
0000F27A 0800 0001                  		btst	#1,d0
0000F27E 6700                       		beq.s	loc_DB72
0000F280 08E8 0005 0002             		bset	#5,2(a0)
0000F286                            
0000F286                            loc_DB72:
0000F286 0240 000F                  		andi.w	#$F,d0
0000F28A 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F290 4E75                       		rts	
0000F292                            ; ===========================================================================
0000F292                            
0000F292                            Obj41_Up:				; XREF: Obj41_Index
0000F292 323C 001B                  		move.w	#$1B,d1
0000F296 343C 0008                  		move.w	#8,d2
0000F29A 363C 0010                  		move.w	#$10,d3
0000F29E 3828 0008                  		move.w	8(a0),d4
0000F2A2 6100 0000                  		bsr.w	SolidObject
0000F2A6 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F2AA 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F2AC 4E75                       		rts	
0000F2AE                            ; ===========================================================================
0000F2AE                            
0000F2AE                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F2AE 5428 0024                  		addq.b	#2,$24(a0)
0000F2B2 5069 000C                  		addq.w	#8,$C(a1)
0000F2B6 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F2BC 08E9 0001 0022             		bset	#1,$22(a1)
0000F2C2 08A9 0003 0022             		bclr	#3,$22(a1)
0000F2C8 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F2CE 137C 0002 0024             		move.b	#2,$24(a1)
0000F2D4 08A8 0003 0022             		bclr	#3,$22(a0)
0000F2DA 4228 0025                  		clr.b	$25(a0)
0000F2DE 303C 00CC                  		move.w	#$CC,d0
0000F2E2 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0000F2E8                            
0000F2E8                            Obj41_AniUp:				; XREF: Obj41_Index
0000F2E8 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F2EE 6000 C54E                  		bra.w	AnimateSprite
0000F2F2                            ; ===========================================================================
0000F2F2                            
0000F2F2                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F2F2 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F2F8 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F2FC 4E75                       		rts	
0000F2FE                            ; ===========================================================================
0000F2FE                            
0000F2FE                            Obj41_LR:				; XREF: Obj41_Index
0000F2FE 323C 0013                  		move.w	#$13,d1
0000F302 343C 000E                  		move.w	#$E,d2
0000F306 363C 000F                  		move.w	#$F,d3
0000F30A 3828 0008                  		move.w	8(a0),d4
0000F30E 6100 0000                  		bsr.w	SolidObject
0000F312 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F318 6600                       		bne.s	loc_DC0C
0000F31A 117C 0008 0024             		move.b	#8,$24(a0)
0000F320                            
0000F320                            loc_DC0C:
0000F320 0828 0005 0022             		btst	#5,$22(a0)
0000F326 6600                       		bne.s	Obj41_BounceLR
0000F328 4E75                       		rts	
0000F32A                            ; ===========================================================================
0000F32A                            
0000F32A                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F32A 5428 0024                  		addq.b	#2,$24(a0)
0000F32E 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F334 5069 0008                  		addq.w	#8,8(a1)
0000F338 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F33E 6600                       		bne.s	loc_DC36	; if yes, branch
0000F340 0469 0010 0008             		subi.w	#$10,8(a1)
0000F346 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F34A                            
0000F34A                            loc_DC36:
0000F34A 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F350 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000F356 0869 0000 0022             		bchg	#0,$22(a1)
0000F35C 0829 0002 0022             		btst	#2,$22(a1)
0000F362 6600                       		bne.s	loc_DC56
0000F364 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000F36A                            
0000F36A                            loc_DC56:
0000F36A 08A8 0005 0022             		bclr	#5,$22(a0)
0000F370 08A9 0005 0022             		bclr	#5,$22(a1)
0000F376 303C 00CC                  		move.w	#$CC,d0
0000F37A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0000F380                            
0000F380                            Obj41_AniLR:				; XREF: Obj41_Index
0000F380 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F386 6000 C4B6                  		bra.w	AnimateSprite
0000F38A                            ; ===========================================================================
0000F38A                            
0000F38A                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F38A 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F390 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F394 4E75                       		rts	
0000F396                            ; ===========================================================================
0000F396                            
0000F396                            Obj41_Dwn:				; XREF: Obj41_Index
0000F396 323C 001B                  		move.w	#$1B,d1
0000F39A 343C 0008                  		move.w	#8,d2
0000F39E 363C 0010                  		move.w	#$10,d3
0000F3A2 3828 0008                  		move.w	8(a0),d4
0000F3A6 6100 0000                  		bsr.w	SolidObject
0000F3AA 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F3B0 6600                       		bne.s	loc_DCA4
0000F3B2 117C 000E 0024             		move.b	#$E,$24(a0)
0000F3B8                            
0000F3B8                            loc_DCA4:
0000F3B8 4A28 0025                  		tst.b	$25(a0)
0000F3BC 6600                       		bne.s	locret_DCAE
0000F3BE 4A44                       		tst.w	d4
0000F3C0 6B00                       		bmi.s	Obj41_BounceDwn
0000F3C2                            
0000F3C2                            locret_DCAE:
0000F3C2 4E75                       		rts	
0000F3C4                            ; ===========================================================================
0000F3C4                            
0000F3C4                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F3C4 5428 0024                  		addq.b	#2,$24(a0)
0000F3C8 5169 000C                  		subq.w	#8,$C(a1)
0000F3CC 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F3D2 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F3D6 08E9 0001 0022             		bset	#1,$22(a1)
0000F3DC 08A9 0003 0022             		bclr	#3,$22(a1)
0000F3E2 137C 0002 0024             		move.b	#2,$24(a1)
0000F3E8 08A8 0003 0022             		bclr	#3,$22(a0)
0000F3EE 4228 0025                  		clr.b	$25(a0)
0000F3F2 303C 00CC                  		move.w	#$CC,d0
0000F3F6 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0000F3FC                            
0000F3FC                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F3FC 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F402 6000 C43A                  		bra.w	AnimateSprite
0000F406                            ; ===========================================================================
0000F406                            
0000F406                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F406 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F40C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F410 4E75                       		rts	
0000F412                            ; ===========================================================================
0000F412                            Ani_obj41:
0000F412                            	include "_anim\obj41.asm"
0000F412                            ; ---------------------------------------------------------------------------
0000F412                            ; Animation script - springs
0000F412                            ; ---------------------------------------------------------------------------
0000F412 0000                       		dc.w byte_DD02-Ani_obj41
0000F414 0000                       		dc.w byte_DD0E-Ani_obj41
0000F416 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F422 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F42E                            		even
0000F42E                            		even
0000F42E                            
0000F42E                            ; ---------------------------------------------------------------------------
0000F42E                            ; Sprite mappings - springs
0000F42E                            ; ---------------------------------------------------------------------------
0000F42E                            Map_obj41:
0000F42E                            	include "_maps\obj41.asm"
0000F42E                            ; ---------------------------------------------------------------------------
0000F42E                            ; Sprite mappings - springs
0000F42E                            ; ---------------------------------------------------------------------------
0000F42E 0000                       		dc.w byte_DD26-Map_obj41
0000F430 0000                       		dc.w byte_DD31-Map_obj41
0000F432 0000                       		dc.w byte_DD37-Map_obj41
0000F434 0000                       		dc.w byte_DD47-Map_obj41
0000F436 0000                       		dc.w byte_DD4D-Map_obj41
0000F438 0000                       		dc.w byte_DD53-Map_obj41
0000F43A 02                         byte_DD26:	dc.b 2
0000F43B F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F440 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F445 01                         byte_DD31:	dc.b 1
0000F446 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F44B 03                         byte_DD37:	dc.b 3
0000F44C E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F451 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F456 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F45B 01                         byte_DD47:	dc.b 1
0000F45C F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F461 01                         byte_DD4D:	dc.b 1
0000F462 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F467 04                         byte_DD53:	dc.b 4
0000F468 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F46D F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F472 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F477 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F47C                            		even
0000F47C                            		even
0000F47C                            
0000F47C                            ; ===========================================================================
0000F47C                            ; ---------------------------------------------------------------------------
0000F47C                            ; Object 42 - Newtron enemy (GHZ)
0000F47C                            ; ---------------------------------------------------------------------------
0000F47C                            
0000F47C                            Obj42:					; XREF: Obj_Index
0000F47C 7000                       		moveq	#0,d0
0000F47E 1028 0024                  		move.b	$24(a0),d0
0000F482 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F486 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F48A                            ; ===========================================================================
0000F48A 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F48C 0000                       		dc.w Obj42_Action-Obj42_Index
0000F48E 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F490                            ; ===========================================================================
0000F490                            
0000F490                            Obj42_Main:				; XREF: Obj42_Index
0000F490 5428 0024                  		addq.b	#2,$24(a0)
0000F494 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F49C 317C 049B 0002             		move.w	#$49B,2(a0)
0000F4A2 117C 0004 0001             		move.b	#4,1(a0)
0000F4A8 117C 0004 0018             		move.b	#4,$18(a0)
0000F4AE 117C 0014 0019             		move.b	#$14,$19(a0)
0000F4B4 117C 0010 0016             		move.b	#$10,$16(a0)
0000F4BA 117C 0008 0017             		move.b	#8,$17(a0)
0000F4C0                            
0000F4C0                            Obj42_Action:				; XREF: Obj42_Index
0000F4C0 7000                       		moveq	#0,d0
0000F4C2 1028 0025                  		move.b	$25(a0),d0
0000F4C6 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F4CA 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F4CE 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F4D4 6100 C368                  		bsr.w	AnimateSprite
0000F4D8 6000 0000                  		bra.w	MarkObjGone
0000F4DC                            ; ===========================================================================
0000F4DC 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F4DE 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F4E0 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F4E2 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F4E4 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F4E6                            ; ===========================================================================
0000F4E6                            
0000F4E6                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F4E6 08E8 0000 0022             		bset	#0,$22(a0)
0000F4EC 3038 D008                  		move.w	($FFFFD008).w,d0
0000F4F0 9068 0008                  		sub.w	8(a0),d0
0000F4F4 6400                       		bcc.s	loc_DDEA
0000F4F6 4440                       		neg.w	d0
0000F4F8 08A8 0000 0022             		bclr	#0,$22(a0)
0000F4FE                            
0000F4FE                            loc_DDEA:
0000F4FE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F502 6400                       		bcc.s	locret_DE12	; if not, branch
0000F504 5428 0025                  		addq.b	#2,$25(a0)
0000F508 117C 0001 001C             		move.b	#1,$1C(a0)
0000F50E 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F512 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F514 317C 249B 0002             		move.w	#$249B,2(a0)
0000F51A 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F520 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F526                            
0000F526                            locret_DE12:
0000F526 4E75                       		rts	
0000F528                            ; ===========================================================================
0000F528                            
0000F528                            Obj42_Type00:				; XREF: Obj42_Index2
0000F528 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F52E 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F530 08E8 0000 0022             		bset	#0,$22(a0)
0000F536 3038 D008                  		move.w	($FFFFD008).w,d0
0000F53A 9068 0008                  		sub.w	8(a0),d0
0000F53E 6400                       		bcc.s	locret_DE32
0000F540 08A8 0000 0022             		bclr	#0,$22(a0)
0000F546                            
0000F546                            locret_DE32:
0000F546 4E75                       		rts	
0000F548                            ; ===========================================================================
0000F548                            
0000F548                            Obj42_Fall:				; XREF: Obj42_Type00
0000F548 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F54E 6600                       		bne.s	loc_DE42
0000F550 117C 000C 0020             		move.b	#$C,$20(a0)
0000F556                            
0000F556                            loc_DE42:
0000F556 6100 F24C                  		bsr.w	ObjectFall
0000F55A 6100 0000                  		bsr.w	ObjHitFloor
0000F55E 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F560 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F562 D368 000C                  		add.w	d1,$C(a0)
0000F566 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F56C 5428 0025                  		addq.b	#2,$25(a0)
0000F570 117C 0002 001C             		move.b	#2,$1C(a0)
0000F576 0828 0005 0002             		btst	#5,2(a0)
0000F57C 6700                       		beq.s	Obj42_Move
0000F57E 5228 001C                  		addq.b	#1,$1C(a0)
0000F582                            
0000F582                            Obj42_Move:
0000F582 117C 000D 0020             		move.b	#$D,$20(a0)
0000F588 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F58E 0828 0000 0022             		btst	#0,$22(a0)
0000F594 6600                       		bne.s	locret_DE86
0000F596 4468 0010                  		neg.w	$10(a0)
0000F59A                            
0000F59A                            locret_DE86:
0000F59A 4E75                       		rts	
0000F59C                            ; ===========================================================================
0000F59C                            
0000F59C                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F59C 6100 F226                  		bsr.w	SpeedToPos
0000F5A0 6100 0000                  		bsr.w	ObjHitFloor
0000F5A4 0C41 FFF8                  		cmpi.w	#-8,d1
0000F5A8 6D00                       		blt.s	loc_DEA2
0000F5AA 0C41 000C                  		cmpi.w	#$C,d1
0000F5AE 6C00                       		bge.s	loc_DEA2
0000F5B0 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F5B4 4E75                       		rts	
0000F5B6                            ; ===========================================================================
0000F5B6                            
0000F5B6                            loc_DEA2:
0000F5B6 5428 0025                  		addq.b	#2,$25(a0)
0000F5BA 4E75                       		rts	
0000F5BC                            ; ===========================================================================
0000F5BC                            
0000F5BC                            Obj42_Speed:				; XREF: Obj42_Index2
0000F5BC 6100 F206                  		bsr.w	SpeedToPos
0000F5C0 4E75                       		rts	
0000F5C2                            ; ===========================================================================
0000F5C2                            
0000F5C2                            Obj42_Type01:				; XREF: Obj42_Index2
0000F5C2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F5C8 6600                       		bne.s	Obj42_FireMissile
0000F5CA 117C 000C 0020             		move.b	#$C,$20(a0)
0000F5D0                            
0000F5D0                            Obj42_FireMissile:
0000F5D0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F5D6 6600                       		bne.s	locret_DF14
0000F5D8 4A28 0032                  		tst.b	$32(a0)
0000F5DC 6600                       		bne.s	locret_DF14
0000F5DE 117C 0001 0032             		move.b	#1,$32(a0)
0000F5E4 6100 F94E                  		bsr.w	SingleObjLoad
0000F5E8 6600                       		bne.s	locret_DF14
0000F5EA 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F5EE 3368 0008 0008             		move.w	8(a0),8(a1)
0000F5F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F5FA 5169 000C                  		subq.w	#8,$C(a1)
0000F5FE 337C 0200 0010             		move.w	#$200,$10(a1)
0000F604 303C 0014                  		move.w	#$14,d0
0000F608 0828 0000 0022             		btst	#0,$22(a0)
0000F60E 6600                       		bne.s	loc_DF04
0000F610 4440                       		neg.w	d0
0000F612 4469 0010                  		neg.w	$10(a1)
0000F616                            
0000F616                            loc_DF04:
0000F616 D169 0008                  		add.w	d0,8(a1)
0000F61A 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F620 137C 0001 0028             		move.b	#1,$28(a1)
0000F626                            
0000F626                            locret_DF14:
0000F626 4E75                       		rts	
0000F628                            ; ===========================================================================
0000F628                            
0000F628                            Obj42_Delete:				; XREF: Obj42_Index
0000F628 6000 F204                  		bra.w	DeleteObject
0000F62C                            ; ===========================================================================
0000F62C                            Ani_obj42:
0000F62C                            	include "_anim\obj42.asm"
0000F62C                            ; ---------------------------------------------------------------------------
0000F62C                            ; Animation script - Newtron enemy
0000F62C                            ; ---------------------------------------------------------------------------
0000F62C 0000                       		dc.w byte_DF24-Ani_obj42
0000F62E 0000                       		dc.w byte_DF28-Ani_obj42
0000F630 0000                       		dc.w byte_DF30-Ani_obj42
0000F632 0000                       		dc.w byte_DF34-Ani_obj42
0000F634 0000                       		dc.w byte_DF38-Ani_obj42
0000F636 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F63A 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F642 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F646 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F64A 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F654                            		even
0000F654                            		even
0000F654                            
0000F654                            ; ---------------------------------------------------------------------------
0000F654                            ; Sprite mappings - Newtron enemy (GHZ)
0000F654                            ; ---------------------------------------------------------------------------
0000F654                            Map_obj42:
0000F654                            	include "_maps\obj42.asm"
0000F654                            ; ---------------------------------------------------------------------------
0000F654                            ; Sprite mappings - Newtron enemy (GHZ)
0000F654                            ; ---------------------------------------------------------------------------
0000F654 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F658 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F65C 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F660 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F664 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F668 0000                       		dc.w byte_DFF8-Map_obj42
0000F66A 03                         byte_DF58:	dc.b 3
0000F66B EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F670 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F675 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F67A 03                         byte_DF68:	dc.b 3
0000F67B EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F680 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F685 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F68A 03                         byte_DF78:	dc.b 3
0000F68B EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F690 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F695 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F69A 04                         byte_DF88:	dc.b 4
0000F69B EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F6A0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F6A5 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F6AA 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F6AF 03                         byte_DF9D:	dc.b 3
0000F6B0 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F6B5 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F6BA 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F6BF 02                         byte_DFAD:	dc.b 2
0000F6C0 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F6C5 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F6CA 03                         byte_DFB8:	dc.b 3
0000F6CB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F6D0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F6D5 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F6DA 03                         byte_DFC8:	dc.b 3
0000F6DB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F6E0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F6E5 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F6EA 03                         byte_DFD8:	dc.b 3
0000F6EB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F6F0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F6F5 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F6FA 03                         byte_DFE8:	dc.b 3
0000F6FB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F700 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F705 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000F70A 00                         byte_DFF8:	dc.b 0
0000F70C 00                         		even
0000F70C 00                         		even
0000F70C                            
0000F70C                            ; ===========================================================================
0000F70C                            ; ---------------------------------------------------------------------------
0000F70C                            ; Object 43 - Roller enemy (SYZ)
0000F70C                            ; ---------------------------------------------------------------------------
0000F70C                            
0000F70C                            Obj43:					; XREF: Obj_Index
0000F70C 7000                       		moveq	#0,d0
0000F70E 1028 0024                  		move.b	$24(a0),d0
0000F712 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000F716 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000F71A                            ; ===========================================================================
0000F71A 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000F71C 0000                       		dc.w Obj43_Action-Obj43_Index
0000F71E                            ; ===========================================================================
0000F71E                            
0000F71E                            Obj43_Main:				; XREF: Obj43_Index
0000F71E 117C 000E 0016             		move.b	#$E,$16(a0)
0000F724 117C 0008 0017             		move.b	#8,$17(a0)
0000F72A 6100 F078                  		bsr.w	ObjectFall
0000F72E 6100 0000                  		bsr.w	ObjHitFloor
0000F732 4A41                       		tst.w	d1
0000F734 6A00                       		bpl.s	locret_E052
0000F736 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000F73A 317C 0000 0012             		move.w	#0,$12(a0)
0000F740 5428 0024                  		addq.b	#2,$24(a0)
0000F744 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000F74C 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000F752 117C 0004 0001             		move.b	#4,1(a0)
0000F758 117C 0004 0018             		move.b	#4,$18(a0)
0000F75E 117C 0010 0019             		move.b	#$10,$19(a0)
0000F764                            
0000F764                            locret_E052:
0000F764 4E75                       		rts	
0000F766                            ; ===========================================================================
0000F766                            
0000F766                            Obj43_Action:				; XREF: Obj43_Index
0000F766 7000                       		moveq	#0,d0
0000F768 1028 0025                  		move.b	$25(a0),d0
0000F76C 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000F770 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000F774 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000F77A 6100 C0C2                  		bsr.w	AnimateSprite
0000F77E 3028 0008                  		move.w	8(a0),d0
0000F782 0240 FF80                  		andi.w	#$FF80,d0
0000F786 3238 F700                  		move.w	($FFFFF700).w,d1
0000F78A 0441 0080                  		subi.w	#$80,d1
0000F78E 0241 FF80                  		andi.w	#$FF80,d1
0000F792 9041                       		sub.w	d1,d0
0000F794 0C40 0280                  		cmpi.w	#$280,d0
0000F798 6E00 0000                  		bgt.w	Obj43_ChkGone
0000F79C 6000 F040                  		bra.w	DisplaySprite
0000F7A0                            ; ===========================================================================
0000F7A0                            
0000F7A0                            Obj43_ChkGone:				; XREF: Obj43_Action
0000F7A0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F7A4 6700                       		beq.s	Obj43_Delete		; if it's zero, don't remember object
0000F7A6 3440                       		movea.w	d0,a2	; load address into a2
0000F7A8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F7AC                            
0000F7AC                            Obj43_Delete:
0000F7AC 6000 F080                  		bra.w	DeleteObject
0000F7B0                            ; ===========================================================================
0000F7B0 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000F7B2 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000F7B4 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000F7B6 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000F7B8                            ; ===========================================================================
0000F7B8                            
0000F7B8                            Obj43_RollChk:				; XREF: Obj43_Index2
0000F7B8 3038 D008                  		move.w	($FFFFD008).w,d0
0000F7BC 0440 0100                  		subi.w	#$100,d0
0000F7C0 6500                       		bcs.s	loc_E0D2
0000F7C2 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000F7C6 6500                       		bcs.s	loc_E0D2
0000F7C8 5828 0025                  		addq.b	#4,$25(a0)
0000F7CC 117C 0002 001C             		move.b	#2,$1C(a0)
0000F7D2 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000F7D8 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000F7DE                            
0000F7DE                            loc_E0D2:
0000F7DE 588F                       		addq.l	#4,sp
0000F7E0 4E75                       		rts	
0000F7E2                            ; ===========================================================================
0000F7E2                            
0000F7E2                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000F7E2 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000F7E8 6700                       		beq.s	loc_E0F8
0000F7EA 5368 0030                  		subq.w	#1,$30(a0)
0000F7EE 6A00                       		bpl.s	locret_E0F6
0000F7F0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F7F6 317C 0700 0010             		move.w	#$700,$10(a0)
0000F7FC 117C 008E 0020             		move.b	#$8E,$20(a0)
0000F802                            
0000F802                            locret_E0F6:
0000F802 4E75                       		rts	
0000F804                            ; ===========================================================================
0000F804                            
0000F804                            loc_E0F8:
0000F804 5428 0025                  		addq.b	#2,$25(a0)
0000F808 4E75                       		rts	
0000F80A                            ; ===========================================================================
0000F80A                            
0000F80A                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000F80A 6100 0000                  		bsr.w	Obj43_Stop
0000F80E 6100 EFB4                  		bsr.w	SpeedToPos
0000F812 6100 0000                  		bsr.w	ObjHitFloor
0000F816 0C41 FFF8                  		cmpi.w	#-8,d1
0000F81A 6D00                       		blt.s	Obj43_Jump
0000F81C 0C41 000C                  		cmpi.w	#$C,d1
0000F820 6C00                       		bge.s	Obj43_Jump
0000F822 D368 000C                  		add.w	d1,$C(a0)
0000F826 4E75                       		rts	
0000F828                            ; ===========================================================================
0000F828                            
0000F828                            Obj43_Jump:
0000F828 5428 0025                  		addq.b	#2,$25(a0)
0000F82C 08E8 0000 0032             		bset	#0,$32(a0)
0000F832 6700                       		beq.s	locret_E12E
0000F834 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000F83A                            
0000F83A                            locret_E12E:
0000F83A 4E75                       		rts	
0000F83C                            ; ===========================================================================
0000F83C                            
0000F83C                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000F83C 6100 EF66                  		bsr.w	ObjectFall
0000F840 4A68 0012                  		tst.w	$12(a0)
0000F844 6B00                       		bmi.s	locret_E150
0000F846 6100 0000                  		bsr.w	ObjHitFloor
0000F84A 4A41                       		tst.w	d1
0000F84C 6A00                       		bpl.s	locret_E150
0000F84E D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000F852 5528 0025                  		subq.b	#2,$25(a0)
0000F856 317C 0000 0012             		move.w	#0,$12(a0)
0000F85C                            
0000F85C                            locret_E150:
0000F85C 4E75                       		rts	
0000F85E                            
0000F85E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F85E                            
0000F85E                            
0000F85E                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000F85E 4A28 0032                  		tst.b	$32(a0)
0000F862 6B00                       		bmi.s	locret_E188
0000F864 3038 D008                  		move.w	($FFFFD008).w,d0
0000F868 0440 0030                  		subi.w	#$30,d0
0000F86C 9068 0008                  		sub.w	8(a0),d0
0000F870 6400                       		bcc.s	locret_E188
0000F872 117C 0000 001C             		move.b	#0,$1C(a0)
0000F878 117C 000E 0020             		move.b	#$E,$20(a0)
0000F87E 4268 0010                  		clr.w	$10(a0)
0000F882 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000F888 117C 0002 0025             		move.b	#2,$25(a0)
0000F88E 08E8 0007 0032             		bset	#7,$32(a0)
0000F894                            
0000F894                            locret_E188:
0000F894 4E75                       		rts	
0000F896                            ; End of function Obj43_Stop
0000F896                            
0000F896                            ; ===========================================================================
0000F896                            Ani_obj43:
0000F896                            	include "_anim\obj43.asm"
0000F896                            ; ---------------------------------------------------------------------------
0000F896                            ; Animation script - Roller enemy
0000F896                            ; ---------------------------------------------------------------------------
0000F896 0000                       		dc.w byte_E190-Ani_obj43
0000F898 0000                       		dc.w byte_E196-Ani_obj43
0000F89A 0000                       		dc.w byte_E19C-Ani_obj43
0000F89C 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000F8A2 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000F8A8 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000F8AE 00                         		even
0000F8AE 00                         		even
0000F8AE                            
0000F8AE                            ; ---------------------------------------------------------------------------
0000F8AE                            ; Sprite mappings - Roller enemy (SYZ)
0000F8AE                            ; ---------------------------------------------------------------------------
0000F8AE                            Map_obj43:
0000F8AE                            	include "_maps\obj43.asm"
0000F8AE                            ; ---------------------------------------------------------------------------
0000F8AE                            ; Sprite mappings - Roller enemy (SYZ)
0000F8AE                            ; ---------------------------------------------------------------------------
0000F8AE 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000F8B2 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000F8B6 0000                       		dc.w byte_E1CE-Map_obj43
0000F8B8 02                         byte_E1AC:	dc.b 2
0000F8B9 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000F8BE F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000F8C3 02                         byte_E1B7:	dc.b 2
0000F8C4 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000F8C9 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000F8CE 01                         byte_E1C2:	dc.b 1
0000F8CF F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000F8D4 01                         byte_E1C8:	dc.b 1
0000F8D5 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000F8DA 01                         byte_E1CE:	dc.b 1
0000F8DB F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000F8E0                            		even
0000F8E0                            		even
0000F8E0                            
0000F8E0                            ; ===========================================================================
0000F8E0                            ; ---------------------------------------------------------------------------
0000F8E0                            ; Object 44 - walls (GHZ)
0000F8E0                            ; ---------------------------------------------------------------------------
0000F8E0                            
0000F8E0                            Obj44:					; XREF: Obj_Index
0000F8E0 7000                       		moveq	#0,d0
0000F8E2 1028 0024                  		move.b	$24(a0),d0
0000F8E6 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000F8EA 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000F8EE                            ; ===========================================================================
0000F8EE 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000F8F0 0000                       		dc.w Obj44_Solid-Obj44_Index
0000F8F2 0000                       		dc.w Obj44_Display-Obj44_Index
0000F8F4                            ; ===========================================================================
0000F8F4                            
0000F8F4                            Obj44_Main:				; XREF: Obj44_Index
0000F8F4 5428 0024                  		addq.b	#2,$24(a0)
0000F8F8 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000F900 317C 434C 0002             		move.w	#$434C,2(a0)
0000F906 0028 0004 0001             		ori.b	#4,1(a0)
0000F90C 117C 0008 0019             		move.b	#8,$19(a0)
0000F912 117C 0006 0018             		move.b	#6,$18(a0)
0000F918 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000F91E 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000F924 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000F926 5428 0024                  		addq.b	#2,$24(a0)
0000F92A 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000F92C                            ; ===========================================================================
0000F92C                            
0000F92C                            Obj44_Solid:				; XREF: Obj44_Index
0000F92C 323C 0013                  		move.w	#$13,d1
0000F930 343C 0028                  		move.w	#$28,d2
0000F934 6100 A332                  		bsr.w	Obj44_SolidWall
0000F938                            
0000F938                            Obj44_Display:				; XREF: Obj44_Index
0000F938 6100 EEA4                  		bsr.w	DisplaySprite
0000F93C 3028 0008                  		move.w	8(a0),d0
0000F940 0240 FF80                  		andi.w	#$FF80,d0
0000F944 3238 F700                  		move.w	($FFFFF700).w,d1
0000F948 0441 0080                  		subi.w	#$80,d1
0000F94C 0241 FF80                  		andi.w	#$FF80,d1
0000F950 9041                       		sub.w	d1,d0
0000F952 0C40 0280                  		cmpi.w	#$280,d0
0000F956 6300                       		bls.s	Obj44_NoDel
0000F958 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F95C 6700 EED0                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000F960 3440                       		movea.w	d0,a2	; load address into a2
0000F962 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F966 6000 EEC6                  		bra.w	DeleteObject	; and delete object
0000F96A                            
0000F96A                            Obj44_NoDel:
0000F96A 4E75                       		rts	
0000F96C                            ; ===========================================================================
0000F96C                            ; ---------------------------------------------------------------------------
0000F96C                            ; Sprite mappings - walls (GHZ)
0000F96C                            ; ---------------------------------------------------------------------------
0000F96C                            Map_obj44:
0000F96C                            	include "_maps\obj44.asm"
0000F96C                            ; ---------------------------------------------------------------------------
0000F96C                            ; Sprite mappings - walls (GHZ)
0000F96C                            ; ---------------------------------------------------------------------------
0000F96C 0000                       		dc.w byte_E256-Map_obj44
0000F96E 0000                       		dc.w byte_E26B-Map_obj44
0000F970 0000                       		dc.w byte_E280-Map_obj44
0000F972 04                         byte_E256:	dc.b 4
0000F973 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000F978 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F97D 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000F982 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000F987 04                         byte_E26B:	dc.b 4
0000F988 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000F98D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F992 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000F997 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000F99C 04                         byte_E280:	dc.b 4
0000F99D E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000F9A2 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000F9A7 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000F9AC 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000F9B2 00                         		even
0000F9B2 00                         		even
0000F9B2                            
0000F9B2                            ; ===========================================================================
0000F9B2                            ; ---------------------------------------------------------------------------
0000F9B2                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000F9B2                            ; ---------------------------------------------------------------------------
0000F9B2                            
0000F9B2                            Obj13:					; XREF: Obj_Index
0000F9B2 7000                       		moveq	#0,d0
0000F9B4 1028 0024                  		move.b	$24(a0),d0
0000F9B8 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000F9BC 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000F9C0 6000 0000                  		bra.w	Obj14_ChkDel
0000F9C4                            ; ===========================================================================
0000F9C4 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000F9C6 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000F9C8                            ; ---------------------------------------------------------------------------
0000F9C8                            ;
0000F9C8                            ; Lava ball production rates
0000F9C8                            ;
0000F9C8 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000F9CE                            ; ===========================================================================
0000F9CE                            
0000F9CE                            Obj13_Main:				; XREF: Obj13_Index
0000F9CE 5428 0024                  		addq.b	#2,$24(a0)
0000F9D2 1028 0028                  		move.b	$28(a0),d0
0000F9D6 E848                       		lsr.w	#4,d0
0000F9D8 0240 000F                  		andi.w	#$F,d0
0000F9DC 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000F9E2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000F9E8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000F9EE                            
0000F9EE                            Obj13_MakeLava:				; XREF: Obj13_Index
0000F9EE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000F9F2 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000F9F4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000F9FA 6100 F1A8                  		bsr.w	ChkObjOnScreen
0000F9FE 6600                       		bne.s	locret_E302
0000FA00 6100 F532                  		bsr.w	SingleObjLoad
0000FA04 6600                       		bne.s	locret_E302
0000FA06 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FA0A 3368 0008 0008             		move.w	8(a0),8(a1)
0000FA10 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FA16 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FA1C                            
0000FA1C                            locret_E302:
0000FA1C 4E75                       		rts	
0000FA1E                            ; ===========================================================================
0000FA1E                            ; ---------------------------------------------------------------------------
0000FA1E                            ; Object 14 - lava balls (MZ, SLZ)
0000FA1E                            ; ---------------------------------------------------------------------------
0000FA1E                            
0000FA1E                            Obj14:					; XREF: Obj_Index
0000FA1E 7000                       		moveq	#0,d0
0000FA20 1028 0024                  		move.b	$24(a0),d0
0000FA24 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FA28 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FA2C 6000 EDB0                  		bra.w	DisplaySprite
0000FA30                            ; ===========================================================================
0000FA30 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FA32 0000                       		dc.w Obj14_Action-Obj14_Index
0000FA34 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FA36                            
0000FA36 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FA40 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FA48                            ; ===========================================================================
0000FA48                            
0000FA48                            Obj14_Main:				; XREF: Obj14_Index
0000FA48 5428 0024                  		addq.b	#2,$24(a0)
0000FA4C 117C 0008 0016             		move.b	#8,$16(a0)
0000FA52 117C 0008 0017             		move.b	#8,$17(a0)
0000FA58 217C 0000 C4D8 0004        		move.l	#Map_obj14,4(a0)
0000FA60 317C 0345 0002             		move.w	#$345,2(a0)
0000FA66 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FA6C 6600                       		bne.s	loc_E35A
0000FA6E 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FA74                            
0000FA74                            loc_E35A:
0000FA74 117C 0004 0001             		move.b	#4,1(a0)
0000FA7A 117C 0003 0018             		move.b	#3,$18(a0)
0000FA80 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FA86 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FA8C 4A28 0029                  		tst.b	$29(a0)
0000FA90 6700                       		beq.s	Obj14_SetSpeed
0000FA92 5428 0018                  		addq.b	#2,$18(a0)
0000FA96                            
0000FA96                            Obj14_SetSpeed:
0000FA96 7000                       		moveq	#0,d0
0000FA98 1028 0028                  		move.b	$28(a0),d0
0000FA9C D040                       		add.w	d0,d0
0000FA9E 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FAA4 117C 0008 0019             		move.b	#8,$19(a0)
0000FAAA 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FAB0 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FAB2 117C 0010 0019             		move.b	#$10,$19(a0)
0000FAB8 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FABE 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FAC4 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FACA                            
0000FACA                            Obj14_PlaySnd:
0000FACA 303C 00AE                  		move.w	#$AE,d0
0000FACE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FAD4                            
0000FAD4                            Obj14_Action:				; XREF: Obj14_Index
0000FAD4 7000                       		moveq	#0,d0
0000FAD6 1028 0028                  		move.b	$28(a0),d0
0000FADA D040                       		add.w	d0,d0
0000FADC 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FAE0 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FAE4 6100 ECDE                  		bsr.w	SpeedToPos
0000FAE8 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FAEE 6100 BD4E                  		bsr.w	AnimateSprite
0000FAF2                            
0000FAF2                            Obj14_ChkDel:				; XREF: Obj13
0000FAF2 3028 0008                  		move.w	8(a0),d0
0000FAF6 0240 FF80                  		andi.w	#$FF80,d0
0000FAFA 3238 F700                  		move.w	($FFFFF700).w,d1
0000FAFE 0441 0080                  		subi.w	#$80,d1
0000FB02 0241 FF80                  		andi.w	#$FF80,d1
0000FB06 9041                       		sub.w	d1,d0
0000FB08 0C40 0280                  		cmpi.w	#$280,d0
0000FB0C 6300                       		bls.s	Obj14_NoDel
0000FB0E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FB12 6700 ED1A                  		beq.w	DeleteObject	; if it's zero, don't remember object
0000FB16 3440                       		movea.w	d0,a2	; load address into a2
0000FB18 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FB1C 6000 ED10                  		bra.w	DeleteObject	; and delete object
0000FB20                            
0000FB20                            Obj14_NoDel:
0000FB20 4E75                       		rts	
0000FB22                            ; ===========================================================================
0000FB22 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FB26 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FB2A 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FB2E 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FB32 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FB34                            ; ===========================================================================
0000FB34                            ; lavaball types 00-03 fly up and fall back down
0000FB34                            
0000FB34                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FB34 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FB3A 3028 0030                  		move.w	$30(a0),d0
0000FB3E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FB42 6400                       		bcc.s	loc_E41E	; if not, branch
0000FB44 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FB48                            
0000FB48                            loc_E41E:
0000FB48 08A8 0001 0022             		bclr	#1,$22(a0)
0000FB4E 4A68 0012                  		tst.w	$12(a0)
0000FB52 6A00                       		bpl.s	locret_E430
0000FB54 08E8 0001 0022             		bset	#1,$22(a0)
0000FB5A                            
0000FB5A                            locret_E430:
0000FB5A 4E75                       		rts	
0000FB5C                            ; ===========================================================================
0000FB5C                            ; lavaball type	04 flies up until it hits the ceiling
0000FB5C                            
0000FB5C                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FB5C 08E8 0001 0022             		bset	#1,$22(a0)
0000FB62 6100 0000                  		bsr.w	ObjHitCeiling
0000FB66 4A41                       		tst.w	d1
0000FB68 6A00                       		bpl.s	locret_E452
0000FB6A 117C 0008 0028             		move.b	#8,$28(a0)
0000FB70 117C 0001 001C             		move.b	#1,$1C(a0)
0000FB76 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FB7C                            
0000FB7C                            locret_E452:
0000FB7C 4E75                       		rts	
0000FB7E                            ; ===========================================================================
0000FB7E                            ; lavaball type	05 falls down until it hits the	floor
0000FB7E                            
0000FB7E                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FB7E 08A8 0001 0022             		bclr	#1,$22(a0)
0000FB84 6100 0000                  		bsr.w	ObjHitFloor
0000FB88 4A41                       		tst.w	d1
0000FB8A 6A00                       		bpl.s	locret_E474
0000FB8C 117C 0008 0028             		move.b	#8,$28(a0)
0000FB92 117C 0001 001C             		move.b	#1,$1C(a0)
0000FB98 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000FB9E                            
0000FB9E                            locret_E474:
0000FB9E 4E75                       		rts	
0000FBA0                            ; ===========================================================================
0000FBA0                            ; lavaball types 06-07 move sideways
0000FBA0                            
0000FBA0                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000FBA0 08E8 0000 0022             		bset	#0,$22(a0)
0000FBA6 76F8                       		moveq	#-8,d3
0000FBA8 6100 0000                  		bsr.w	ObjHitWallLeft
0000FBAC 4A41                       		tst.w	d1
0000FBAE 6A00                       		bpl.s	locret_E498
0000FBB0 117C 0008 0028             		move.b	#8,$28(a0)
0000FBB6 117C 0003 001C             		move.b	#3,$1C(a0)
0000FBBC 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FBC2                            
0000FBC2                            locret_E498:
0000FBC2 4E75                       		rts	
0000FBC4                            ; ===========================================================================
0000FBC4                            
0000FBC4                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000FBC4 08A8 0000 0022             		bclr	#0,$22(a0)
0000FBCA 7608                       		moveq	#8,d3
0000FBCC 6100 0000                  		bsr.w	ObjHitWallRight
0000FBD0 4A41                       		tst.w	d1
0000FBD2 6A00                       		bpl.s	locret_E4BC
0000FBD4 117C 0008 0028             		move.b	#8,$28(a0)
0000FBDA 117C 0003 001C             		move.b	#3,$1C(a0)
0000FBE0 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FBE6                            
0000FBE6                            locret_E4BC:
0000FBE6 4E75                       		rts	
0000FBE8                            ; ===========================================================================
0000FBE8                            
0000FBE8                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000FBE8 4E75                       		rts	
0000FBEA                            ; ===========================================================================
0000FBEA                            
0000FBEA                            Obj14_Delete:				; XREF: Obj14_Index
0000FBEA 6000 EC42                  		bra.w	DeleteObject
0000FBEE                            ; ===========================================================================
0000FBEE                            Ani_obj14:
0000FBEE                            	include "_anim\obj14.asm"
0000FBEE                            ; ---------------------------------------------------------------------------
0000FBEE                            ; Animation script - lava balls
0000FBEE                            ; ---------------------------------------------------------------------------
0000FBEE 0000                       		dc.w byte_E4CC-Ani_obj14
0000FBF0 0000                       		dc.w byte_E4D2-Ani_obj14
0000FBF2 0000                       		dc.w byte_E4D6-Ani_obj14
0000FBF4 0000                       		dc.w byte_E4DC-Ani_obj14
0000FBF6 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000FBFC 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000FC00 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000FC06 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000FC0A                            		even
0000FC0A                            		even
0000FC0A                            
0000FC0A                            ; ===========================================================================
0000FC0A                            ; ---------------------------------------------------------------------------
0000FC0A                            ; Object 6D - flame thrower (SBZ)
0000FC0A                            ; ---------------------------------------------------------------------------
0000FC0A                            
0000FC0A                            Obj6D:					; XREF: Obj_Index
0000FC0A 7000                       		moveq	#0,d0
0000FC0C 1028 0024                  		move.b	$24(a0),d0
0000FC10 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000FC14 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000FC18                            ; ===========================================================================
0000FC18 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000FC1A 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000FC1C                            ; ===========================================================================
0000FC1C                            
0000FC1C                            Obj6D_Main:				; XREF: Obj6D_Index
0000FC1C 5428 0024                  		addq.b	#2,$24(a0)
0000FC20 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000FC28 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000FC2E 0028 0004 0001             		ori.b	#4,1(a0)
0000FC34 117C 0001 0018             		move.b	#1,$18(a0)
0000FC3A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FC40 117C 000C 0019             		move.b	#$C,$19(a0)
0000FC46 1028 0028                  		move.b	$28(a0),d0
0000FC4A 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000FC4E D040                       		add.w	d0,d0		; multiply by 2
0000FC50 3140 0030                  		move.w	d0,$30(a0)
0000FC54 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000FC58 1028 0028                  		move.b	$28(a0),d0
0000FC5C 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000FC60 EB48                       		lsl.w	#5,d0		; multiply by $20
0000FC62 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000FC66 117C 000A 0036             		move.b	#$A,$36(a0)
0000FC6C 0828 0001 0022             		btst	#1,$22(a0)
0000FC72 6700                       		beq.s	Obj6D_Action
0000FC74 117C 0002 001C             		move.b	#2,$1C(a0)
0000FC7A 117C 0015 0036             		move.b	#$15,$36(a0)
0000FC80                            
0000FC80                            Obj6D_Action:				; XREF: Obj6D_Index
0000FC80 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000FC84 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000FC86 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000FC8C 0868 0000 001C             		bchg	#0,$1C(a0)
0000FC92 6700                       		beq.s	loc_E57A
0000FC94 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000FC9A 303C 00B3                  		move.w	#$B3,d0
0000FC9E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flame sound
0000FCA4                            
0000FCA4                            loc_E57A:
0000FCA4 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000FCAA 6100 BB92                  		bsr.w	AnimateSprite
0000FCAE 117C 0000 0020             		move.b	#0,$20(a0)
0000FCB4 1028 0036                  		move.b	$36(a0),d0
0000FCB8 B028 001A                  		cmp.b	$1A(a0),d0
0000FCBC 6600                       		bne.s	Obj6D_ChkDel
0000FCBE 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000FCC4                            
0000FCC4                            Obj6D_ChkDel:
0000FCC4 3028 0008                  		move.w	8(a0),d0
0000FCC8 0240 FF80                  		andi.w	#$FF80,d0
0000FCCC 3238 F700                  		move.w	($FFFFF700).w,d1
0000FCD0 0441 0080                  		subi.w	#$80,d1
0000FCD4 0241 FF80                  		andi.w	#$FF80,d1
0000FCD8 9041                       		sub.w	d1,d0
0000FCDA 0C40 0280                  		cmpi.w	#$280,d0
0000FCDE 6300 EAFE                  		bls.w	DisplaySprite
0000FCE2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FCE6 6700 EB46                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
0000FCEA 3440                       		movea.w	d0,a2	; load address into a2
0000FCEC 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0000FCF0 6000 EB3C                  		bra.w	DeleteObject
0000FCF4                            ; ===========================================================================
0000FCF4                            Ani_obj6D:
0000FCF4                            	include "_anim\obj6D.asm"
0000FCF4                            ; ---------------------------------------------------------------------------
0000FCF4                            ; Animation script - flamethrower (SBZ)
0000FCF4                            ; ---------------------------------------------------------------------------
0000FCF4 0000                       		dc.w byte_E5C4-Ani_obj6D
0000FCF6 0000                       		dc.w byte_E5D2-Ani_obj6D
0000FCF8 0000                       		dc.w byte_E5DC-Ani_obj6D
0000FCFA 0000                       		dc.w byte_E5EA-Ani_obj6D
0000FCFC 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000FD0A 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000FD14 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000FD22 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000FD2C                            		even
0000FD2C                            		even
0000FD2C                            
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C                            ; Sprite mappings - flame thrower (SBZ)
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C                            Map_obj6D:
0000FD2C                            	include "_maps\obj6D.asm"
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C                            ; Sprite mappings - flame thrower (SBZ)
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000FD30 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000FD34 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000FD38 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000FD3C 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000FD40 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000FD44 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000FD48 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000FD4C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000FD50 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000FD54 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000FD58 01                         byte_E620:	dc.b 1
0000FD59 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FD5E 02                         byte_E626:	dc.b 2
0000FD5F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FD64 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FD69 02                         byte_E631:	dc.b 2
0000FD6A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FD6F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FD74 03                         byte_E63C:	dc.b 3
0000FD75 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FD7A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FD7F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FD84 03                         byte_E64C:	dc.b 3
0000FD85 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FD8A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FD8F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FD94 04                         byte_E65C:	dc.b 4
0000FD95 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FD9A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FD9F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FDA4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FDA9 04                         byte_E671:	dc.b 4
0000FDAA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FDAF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FDB4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FDB9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FDBE 05                         byte_E686:	dc.b 5
0000FDBF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000FDC4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FDC9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FDCE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FDD3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FDD8 05                         byte_E6A0:	dc.b 5
0000FDD9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FDDE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FDE3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FDE8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FDED 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FDF2 06                         byte_E6BA:	dc.b 6
0000FDF3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000FDF8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000FDFD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FE02 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000FE07 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FE0C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FE11 06                         byte_E6D9:	dc.b 6
0000FE12 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000FE17 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FE1C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000FE21 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FE26 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FE2B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FE30 01                         byte_E6F8:	dc.b 1
0000FE31 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FE36 02                         byte_E6FE:	dc.b 2
0000FE37 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FE3C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FE41 02                         byte_E709:	dc.b 2
0000FE42 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FE47 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FE4C 03                         byte_E714:	dc.b 3
0000FE4D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FE52 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FE57 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FE5C 03                         byte_E724:	dc.b 3
0000FE5D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FE62 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FE67 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FE6C 04                         byte_E734:	dc.b 4
0000FE6D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FE72 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FE77 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FE7C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FE81 04                         byte_E749:	dc.b 4
0000FE82 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FE87 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FE8C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FE91 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FE96 05                         byte_E75E:	dc.b 5
0000FE97 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000FE9C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FEA1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FEA6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FEAB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FEB0 05                         byte_E778:	dc.b 5
0000FEB1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FEB6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FEBB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FEC0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FEC5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FECA 06                         byte_E792:	dc.b 6
0000FECB E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000FED0 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000FED5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FEDA 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000FEDF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FEE4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FEE9 06                         byte_E7B1:	dc.b 6
0000FEEA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000FEEF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FEF4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000FEF9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FEFE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF03 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF08                            		even
0000FF08                            		even
0000FF08                            
0000FF08                            ; ===========================================================================
0000FF08                            ; ---------------------------------------------------------------------------
0000FF08                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000FF08                            ; ---------------------------------------------------------------------------
0000FF08                            
0000FF08                            Obj46:					; XREF: Obj_Index
0000FF08 7000                       		moveq	#0,d0
0000FF0A 1028 0024                  		move.b	$24(a0),d0
0000FF0E 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000FF12 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000FF16                            ; ===========================================================================
0000FF16 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000FF18 0000                       		dc.w Obj46_Action-Obj46_Index
0000FF1A                            ; ===========================================================================
0000FF1A                            
0000FF1A                            Obj46_Main:				; XREF: Obj46_Index
0000FF1A 5428 0024                  		addq.b	#2,$24(a0)
0000FF1E 117C 000F 0016             		move.b	#$F,$16(a0)
0000FF24 117C 000F 0017             		move.b	#$F,$17(a0)
0000FF2A 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000FF32 317C 4000 0002             		move.w	#$4000,2(a0)
0000FF38 117C 0004 0001             		move.b	#4,1(a0)
0000FF3E 117C 0003 0018             		move.b	#3,$18(a0)
0000FF44 117C 0010 0019             		move.b	#$10,$19(a0)
0000FF4A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FF50 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000FF56                            
0000FF56                            Obj46_Action:				; XREF: Obj46_Index
0000FF56 4A28 0001                  		tst.b	1(a0)
0000FF5A 6A00                       		bpl.s	Obj46_ChkDel
0000FF5C 7000                       		moveq	#0,d0
0000FF5E 1028 0028                  		move.b	$28(a0),d0	; get object type
0000FF62 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000FF66 D040                       		add.w	d0,d0
0000FF68 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000FF6C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000FF70 323C 001B                  		move.w	#$1B,d1
0000FF74 343C 0010                  		move.w	#$10,d2
0000FF78 363C 0011                  		move.w	#$11,d3
0000FF7C 3828 0008                  		move.w	8(a0),d4
0000FF80 6100 0000                  		bsr.w	SolidObject
0000FF84                            
0000FF84                            Obj46_ChkDel:
0000FF84 6100 E858                  		bsr.w	DisplaySprite
0000FF88 3028 0008                  		move.w	8(a0),d0
0000FF8C 0240 FF80                  		andi.w	#$FF80,d0
0000FF90 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF94 0441 0080                  		subi.w	#$80,d1
0000FF98 0241 FF80                  		andi.w	#$FF80,d1
0000FF9C 9041                       		sub.w	d1,d0
0000FF9E 0C40 0280                  		cmpi.w	#$280,d0
0000FFA2 6300                       		bls.s	Obj46_NoDel
0000FFA4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FFA8 6700 E884                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000FFAC 3440                       		movea.w	d0,a2	; load address into a2
0000FFAE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FFB2 6000 E87A                  		bra.w	DeleteObject	; and delete object
0000FFB6                            
0000FFB6                            Obj46_NoDel:
0000FFB6 4E75                       		rts	
0000FFB8                            ; ===========================================================================
0000FFB8 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000FFBA 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000FFBC 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000FFBE 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000FFC0 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000FFC2                            ; ===========================================================================
0000FFC2                            
0000FFC2                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000FFC2 4E75                       		rts	
0000FFC4                            ; ===========================================================================
0000FFC4                            
0000FFC4                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000FFC4 3038 D008                  		move.w	($FFFFD008).w,d0
0000FFC8 9068 0008                  		sub.w	8(a0),d0
0000FFCC 6400                       		bcc.s	loc_E888
0000FFCE 4440                       		neg.w	d0
0000FFD0                            
0000FFD0                            loc_E888:
0000FFD0 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000FFD4 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000FFD6 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000FFDC                            
0000FFDC                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000FFDC 7000                       		moveq	#0,d0
0000FFDE 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000FFE2 0828 0003 0028             		btst	#3,$28(a0)
0000FFE8 6700                       		beq.s	loc_E8A8
0000FFEA 4440                       		neg.w	d0
0000FFEC 0640 0010                  		addi.w	#$10,d0
0000FFF0                            
0000FFF0                            loc_E8A8:
0000FFF0 3228 0030                  		move.w	$30(a0),d1
0000FFF4 9240                       		sub.w	d0,d1
0000FFF6 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000FFFA 4E75                       		rts	
0000FFFC                            ; ===========================================================================
0000FFFC                            
0000FFFC                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000FFFC 6100 E7C6                  		bsr.w	SpeedToPos
00010000 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00010006 6100 0000                  		bsr.w	ObjHitFloor
0001000A 4A41                       		tst.w	d1		; has the block	hit the	floor?
0001000C 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010010 D368 000C                  		add.w	d1,$C(a0)
00010014 4268 0012                  		clr.w	$12(a0)		; stop the block falling
00010018 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001001E 117C 0004 0028             		move.b	#4,$28(a0)
00010024 3011                       		move.w	(a1),d0
00010026 0240 03FF                  		andi.w	#$3FF,d0
0001002A 0C40 02E8                  		cmpi.w	#$2E8,d0
0001002E 6400                       		bcc.s	locret_E8EE
00010030 117C 0000 0028             		move.b	#0,$28(a0)
00010036                            
00010036                            locret_E8EE:
00010036 4E75                       		rts	
00010038                            ; ===========================================================================
00010038                            
00010038                            Obj46_Type04:				; XREF: Obj46_TypeIndex
00010038 7000                       		moveq	#0,d0
0001003A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0001003E E648                       		lsr.w	#3,d0
00010040 3228 0030                  		move.w	$30(a0),d1
00010044 9240                       		sub.w	d0,d1
00010046 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0001004A 4E75                       		rts	
0001004C                            ; ===========================================================================
0001004C                            ; ---------------------------------------------------------------------------
0001004C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001004C                            ; ---------------------------------------------------------------------------
0001004C                            Map_obj46:
0001004C                            	include "_maps\obj46.asm"
0001004C                            ; ---------------------------------------------------------------------------
0001004C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001004C                            ; ---------------------------------------------------------------------------
0001004C 0000                       		dc.w byte_E906-Map_obj46
0001004E 01                         byte_E906:	dc.b 1
0001004F F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010054                            		even
00010054                            		even
00010054                            
00010054                            ; ===========================================================================
00010054                            ; ---------------------------------------------------------------------------
00010054                            ; Object 12 - lamp (SYZ)
00010054                            ; ---------------------------------------------------------------------------
00010054                            
00010054                            Obj12:					; XREF: Obj_Index
00010054 7000                       		moveq	#0,d0
00010056 1028 0024                  		move.b	$24(a0),d0
0001005A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0001005E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
00010062                            ; ===========================================================================
00010062 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
00010064 0000                       		dc.w Obj12_Animate-Obj12_Index
00010066                            ; ===========================================================================
00010066                            
00010066                            Obj12_Main:				; XREF: Obj12_Index
00010066 5428 0024                  		addq.b	#2,$24(a0)
0001006A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
00010072 317C 0000 0002             		move.w	#0,2(a0)
00010078 117C 0004 0001             		move.b	#4,1(a0)
0001007E 117C 0010 0019             		move.b	#$10,$19(a0)
00010084 117C 0006 0018             		move.b	#6,$18(a0)
0001008A                            
0001008A                            Obj12_Animate:				; XREF: Obj12_Index
0001008A 5328 001E                  		subq.b	#1,$1E(a0)
0001008E 6A00                       		bpl.s	Obj12_ChkDel
00010090 117C 0007 001E             		move.b	#7,$1E(a0)
00010096 5228 001A                  		addq.b	#1,$1A(a0)
0001009A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000100A0 6500                       		bcs.s	Obj12_ChkDel
000100A2 117C 0000 001A             		move.b	#0,$1A(a0)
000100A8                            
000100A8                            Obj12_ChkDel:
000100A8 3028 0008                  		move.w	8(a0),d0
000100AC 0240 FF80                  		andi.w	#$FF80,d0
000100B0 3238 F700                  		move.w	($FFFFF700).w,d1
000100B4 0441 0080                  		subi.w	#$80,d1
000100B8 0241 FF80                  		andi.w	#$FF80,d1
000100BC 9041                       		sub.w	d1,d0
000100BE 0C40 0280                  		cmpi.w	#$280,d0
000100C2 6300 E71A                  		bls.w	DisplaySprite
000100C6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000100CA 6700 E762                  		beq.w	DeleteObject		; if it's zero, don't remember object
000100CE 3440                       		movea.w	d0,a2	; load address into a2
000100D0 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000100D4 6000 E758                  		bra.w	DeleteObject	; and delete object
000100D8                            ; ===========================================================================
000100D8                            ; ---------------------------------------------------------------------------
000100D8                            ; Sprite mappings - lamp (SYZ)
000100D8                            ; ---------------------------------------------------------------------------
000100D8                            Map_obj12:
000100D8                            	include "_maps\obj12.asm"
000100D8                            ; ---------------------------------------------------------------------------
000100D8                            ; Sprite mappings - lamp (SYZ)
000100D8                            ; ---------------------------------------------------------------------------
000100D8 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
000100DC 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
000100E0 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
000100E4 02                         byte_E98E:	dc.b 2
000100E5 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
000100EA 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
000100EF 02                         byte_E999:	dc.b 2
000100F0 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
000100F5 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
000100FA 02                         byte_E9A4:	dc.b 2
000100FB F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
00010100 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00010105 02                         byte_E9AF:	dc.b 2
00010106 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0001010B 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
00010110 02                         byte_E9BA:	dc.b 2
00010111 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
00010116 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0001011B 02                         byte_E9C5:	dc.b 2
0001011C F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
00010121 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
00010126                            		even
00010126                            		even
00010126                            
00010126                            ; ===========================================================================
00010126                            ; ---------------------------------------------------------------------------
00010126                            ; Object 47 - pinball bumper (SYZ)
00010126                            ; ---------------------------------------------------------------------------
00010126                            
00010126                            Obj47:					; XREF: Obj_Index
00010126 7000                       		moveq	#0,d0
00010128 1028 0024                  		move.b	$24(a0),d0
0001012C 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
00010130 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
00010134                            ; ===========================================================================
00010134 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
00010136 0000                       		dc.w Obj47_Hit-Obj47_Index
00010138                            ; ===========================================================================
00010138                            
00010138                            Obj47_Main:				; XREF: Obj47_Index
00010138 5428 0024                  		addq.b	#2,$24(a0)
0001013C 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
00010144 317C 0380 0002             		move.w	#$380,2(a0)
0001014A 117C 0004 0001             		move.b	#4,1(a0)
00010150 117C 0010 0019             		move.b	#$10,$19(a0)
00010156 117C 0001 0018             		move.b	#1,$18(a0)
0001015C 117C 00D7 0020             		move.b	#$D7,$20(a0)
00010162                            
00010162                            Obj47_Hit:				; XREF: Obj47_Index
00010162 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
00010166 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0001016A 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
00010170 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
00010176 4228 0021                  		clr.b	$21(a0)
0001017A 43F8 D000                  		lea	($FFFFD000).w,a1
0001017E 3228 0008                  		move.w	8(a0),d1
00010182 3428 000C                  		move.w	$C(a0),d2
00010186 9269 0008                  		sub.w	8(a1),d1
0001018A 9469 000C                  		sub.w	$C(a1),d2
0001018E 4EB9 0000 2C94             		jsr	(CalcAngle).l
00010194 4EB9 0000 29CC             		jsr	(CalcSine).l
0001019A C3FC F900                  		muls.w	#-$700,d1
0001019E E081                       		asr.l	#8,d1
000101A0 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
000101A4 C1FC F900                  		muls.w	#-$700,d0
000101A8 E080                       		asr.l	#8,d0
000101AA 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
000101AE 08E9 0001 0022             		bset	#1,$22(a1)
000101B4 08A9 0004 0022             		bclr	#4,$22(a1)
000101BA 08A9 0005 0022             		bclr	#5,$22(a1)
000101C0 4229 003C                  		clr.b	$3C(a1)
000101C4 117C 0001 001C             		move.b	#1,$1C(a0)
000101CA 303C 00B4                  		move.w	#$B4,d0
000101CE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play bumper sound
000101D4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000101D8 6700                       		beq.s	Obj47_Score		; if it's zero, don't remember object
000101DA 3440                       		movea.w	d0,a2	; load address into a2
000101DC 0C12 008A                  		cmpi.b	#$8A,(a2)	; has bumper been hit $8A times?
000101E0 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
000101E2 5212                       		addq.b	#1,(a2)
000101E4                            
000101E4                            Obj47_Score:
000101E4 7001                       		moveq	#1,d0
000101E6 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
000101EC 6100 ED46                  		bsr.w	SingleObjLoad
000101F0 6600                       		bne.s	Obj47_Display
000101F2 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000101F6 3368 0008 0008             		move.w	8(a0),8(a1)
000101FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010202 137C 0004 001A             		move.b	#4,$1A(a1)
00010208                            
00010208                            Obj47_Display:
00010208 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0001020E 6100 B62E                  		bsr.w	AnimateSprite
00010212 3028 0008                  		move.w	8(a0),d0
00010216 0240 FF80                  		andi.w	#$FF80,d0
0001021A 3238 F700                  		move.w	($FFFFF700).w,d1
0001021E 0441 0080                  		subi.w	#$80,d1
00010222 0241 FF80                  		andi.w	#$FF80,d1
00010226 9041                       		sub.w	d1,d0
00010228 0C40 0280                  		cmpi.w	#$280,d0
0001022C 6200                       		bhi.s	Obj47_ChkHit
0001022E 6000 E5AE                  		bra.w	DisplaySprite
00010232                            ; ===========================================================================
00010232                            
00010232                            Obj47_ChkHit:				; XREF: Obj47_Display
00010232 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010236 6700                       		beq.s	Obj47_Delete		; if it's zero, don't remember object
00010238 3440                       		movea.w	d0,a2	; load address into a2
0001023A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001023E                            
0001023E                            Obj47_Delete:
0001023E 6000 E5EE                  		bra.w	DeleteObject
00010242                            ; ===========================================================================
00010242                            Ani_obj47:
00010242                            	include "_anim\obj47.asm"
00010242                            ; ---------------------------------------------------------------------------
00010242                            ; Animation script - flamethrower (SBZ)
00010242                            ; ---------------------------------------------------------------------------
00010242 0000                       		dc.w byte_EAF4-Ani_obj47
00010244 0000                       		dc.w byte_EAF8-Ani_obj47
00010246 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0001024A 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
00010252                            		even
00010252                            		even
00010252                            
00010252                            ; ---------------------------------------------------------------------------
00010252                            ; Sprite mappings - pinball bumper (SYZ)
00010252                            ; ---------------------------------------------------------------------------
00010252                            Map_obj47:
00010252                            	include "_maps\obj47.asm"
00010252                            ; ---------------------------------------------------------------------------
00010252                            ; Sprite mappings - pinball bumper (SYZ)
00010252                            ; ---------------------------------------------------------------------------
00010252 0000                       		dc.w byte_EB06-Map_obj47
00010254 0000                       		dc.w byte_EB11-Map_obj47
00010256 0000                       		dc.w byte_EB1C-Map_obj47
00010258 02                         byte_EB06:	dc.b 2
00010259 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0001025E F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010263 02                         byte_EB11:	dc.b 2
00010264 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010269 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0001026E 02                         byte_EB1C:	dc.b 2
0001026F F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010274 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0001027A 00                         		even
0001027A 00                         		even
0001027A                            
0001027A                            ; ===========================================================================
0001027A                            ; ---------------------------------------------------------------------------
0001027A                            ; Object 0D - signpost at the end of a level
0001027A                            ; ---------------------------------------------------------------------------
0001027A                            
0001027A                            Obj0D:					; XREF: Obj_Index
0001027A 7000                       		moveq	#0,d0
0001027C 1028 0024                  		move.b	$24(a0),d0
00010280 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
00010284 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
00010288 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0001028E 6100 B5AE                  		bsr.w	AnimateSprite
00010292 6100 E54A                  		bsr.w	DisplaySprite
00010296 3028 0008                  		move.w	8(a0),d0
0001029A 0240 FF80                  		andi.w	#$FF80,d0
0001029E 3238 F700                  		move.w	($FFFFF700).w,d1
000102A2 0441 0080                  		subi.w	#$80,d1
000102A6 0241 FF80                  		andi.w	#$FF80,d1
000102AA 9041                       		sub.w	d1,d0
000102AC 0C40 0280                  		cmpi.w	#$280,d0
000102B0 6300                       		bls.s	Obj0D_NoDel
000102B2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000102B6 6700 E576                  		beq.w	DeleteObject		; if it's zero, don't remember object
000102BA 3440                       		movea.w	d0,a2	; load address into a2
000102BC 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000102C0 6000 E56C                  		bra.w	DeleteObject	; and delete object
000102C4                            
000102C4                            Obj0D_NoDel:
000102C4 4E75                       		rts	
000102C6                            ; ===========================================================================
000102C6 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
000102C8 0000                       		dc.w Obj0D_Touch-Obj0D_Index
000102CA 0000                       		dc.w Obj0D_Spin-Obj0D_Index
000102CC 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
000102CE 0000                       		dc.w locret_ED1A-Obj0D_Index
000102D0                            ; ===========================================================================
000102D0                            
000102D0                            Obj0D_Main:				; XREF: Obj0D_Index
000102D0 5428 0024                  		addq.b	#2,$24(a0)
000102D4 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
000102DC 317C 0680 0002             		move.w	#$680,2(a0)
000102E2 117C 0004 0001             		move.b	#4,1(a0)
000102E8 117C 0018 0019             		move.b	#$18,$19(a0)
000102EE 117C 0004 0018             		move.b	#4,$18(a0)
000102F4                            
000102F4                            Obj0D_Touch:				; XREF: Obj0D_Index
000102F4 3038 D008                  		move.w	($FFFFD008).w,d0
000102F8 9068 0008                  		sub.w	8(a0),d0
000102FC 6500                       		bcs.s	locret_EBBA
000102FE 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010302 6400                       		bcc.s	locret_EBBA	; if not, branch
00010304 303C 00CF                  		move.w	#$CF,d0
00010308 4EB9 0000 11F0             		jsr	(PlaySound).l	; play signpost	sound
0001030E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010312 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
00010318 5428 0024                  		addq.b	#2,$24(a0)
0001031C                            
0001031C                            locret_EBBA:
0001031C 4E75                       		rts	
0001031E                            ; ===========================================================================
0001031E                            
0001031E                            Obj0D_Spin:				; XREF: Obj0D_Index
0001031E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00010322 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00010324 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0001032A 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0001032E 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
00010334 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
00010336 5428 0024                  		addq.b	#2,$24(a0)
0001033A                            
0001033A                            Obj0D_Sparkle:
0001033A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0001033E 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00010340 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
00010346 7000                       		moveq	#0,d0
00010348 1028 0034                  		move.b	$34(a0),d0
0001034C 5428 0034                  		addq.b	#2,$34(a0)
00010350 0228 000E 0034             		andi.b	#$E,$34(a0)
00010356 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0001035A 6100 EBD8                  		bsr.w	SingleObjLoad
0001035E 6600                       		bne.s	locret_EC42
00010360 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
00010364 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0001036A 101A                       		move.b	(a2)+,d0
0001036C 4880                       		ext.w	d0
0001036E D068 0008                  		add.w	8(a0),d0
00010372 3340 0008                  		move.w	d0,8(a1)
00010376 101A                       		move.b	(a2)+,d0
00010378 4880                       		ext.w	d0
0001037A D068 000C                  		add.w	$C(a0),d0
0001037E 3340 000C                  		move.w	d0,$C(a1)
00010382 237C 0000 B0E8 0004        		move.l	#Map_obj25,4(a1)
0001038A 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
00010390 137C 0004 0001             		move.b	#4,1(a1)
00010396 137C 0002 0018             		move.b	#2,$18(a1)
0001039C 137C 0008 0019             		move.b	#8,$19(a1)
000103A2                            
000103A2                            locret_EC42:
000103A2 4E75                       		rts	
000103A4                            ; ===========================================================================
000103A4 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
000103A6 0808                       		dc.b	8,   8
000103A8 F000                       		dc.b -$10,   0
000103AA 18F8                       		dc.b  $18,  -8
000103AC 00F8                       		dc.b	0,  -8
000103AE 1000                       		dc.b  $10,   0
000103B0 E808                       		dc.b -$18,   8
000103B2 1810                       		dc.b  $18, $10
000103B4                            ; ===========================================================================
000103B4                            
000103B4                            Obj0D_SonicRun:				; XREF: Obj0D_Index
000103B4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000103B8 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
000103BC 0838 0001 D022             		btst	#1,($FFFFD022).w
000103C2 6600                       		bne.s	loc_EC70
000103C4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000103CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
000103D0                            
000103D0                            loc_EC70:
000103D0 4A38 D000                  		tst.b	($FFFFD000).w
000103D4 6700                       		beq.s	loc_EC86
000103D6 3038 D008                  		move.w	($FFFFD008).w,d0
000103DA 3238 F72A                  		move.w	($FFFFF72A).w,d1
000103DE 0641 0128                  		addi.w	#$128,d1
000103E2 B041                       		cmp.w	d1,d0
000103E4 6500                       		bcs.s	locret_ECEE
000103E6                            
000103E6                            loc_EC86:
000103E6 5428 0024                  		addq.b	#2,$24(a0)
000103EA                            
000103EA                            ; ---------------------------------------------------------------------------
000103EA                            ; Subroutine to	set up bonuses at the end of an	act
000103EA                            ; ---------------------------------------------------------------------------
000103EA                            
000103EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000103EA                            
000103EA                            
000103EA                            GotThroughAct:				; XREF: Obj3E_EndAct
000103EA 4A38 D5C0                  		tst.b	($FFFFD5C0).w
000103EE 6600                       		bne.s	locret_ECEE
000103F0 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
000103F6 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
000103FA 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000103FE 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00010404 2F08                               move.l  a0,-(sp)            ; save object address to stack
00010406 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00010410 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00010416 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
0001041C 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
00010420 205F                               move.l  (sp)+,a0            ; get object address from stack
00010422 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
00010428 7000                       		moveq	#0,d0
0001042A 1038 FE23                  		move.b	($FFFFFE23).w,d0
0001042E C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010432 7200                       		moveq	#0,d1
00010434 1238 FE24                  		move.b	($FFFFFE24).w,d1
00010438 D041                       		add.w	d1,d0		; add up your time
0001043A 80FC 000F                  		divu.w	#15,d0		; divide by 15
0001043E 7214                       		moveq	#$14,d1
00010440 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010442 6500                       		bcs.s	loc_ECD0	; if not, branch
00010444 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010446                            
00010446                            loc_ECD0:
00010446 D040                       		add.w	d0,d0
00010448 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0001044E 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
00010452 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010456 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0001045A 303C 008E                  		move.w	#$8E,d0
0001045E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
00010464                            
00010464                            locret_ECEE:
00010464 4E75                       		rts	
00010466                            ; End of function GotThroughAct
00010466                            
00010466                            ; ===========================================================================
00010466 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0001047A 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010490                            ; ===========================================================================
00010490                            
00010490                            locret_ED1A:				; XREF: Obj0D_Index
00010490 4E75                       		rts	
00010492                            ; ===========================================================================
00010492                            Ani_obj0D:
00010492                            	include "_anim\obj0D.asm"
00010492                            ; ---------------------------------------------------------------------------
00010492                            ; Animation script - signpost
00010492                            ; ---------------------------------------------------------------------------
00010492 0000                       		dc.w byte_ED24-Ani_obj0D
00010494 0000                       		dc.w byte_ED28-Ani_obj0D
00010496 0000                       		dc.w byte_ED2E-Ani_obj0D
00010498 0000                       		dc.w byte_ED34-Ani_obj0D
0001049A 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0001049E 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
000104A4 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
000104AA 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
000104AE 00                         		even
000104AE 00                         		even
000104AE                            
000104AE                            ; ---------------------------------------------------------------------------
000104AE                            ; Sprite mappings - signpost
000104AE                            ; ---------------------------------------------------------------------------
000104AE                            Map_obj0D:
000104AE                            	include "_maps\obj0D.asm"
000104AE                            ; ---------------------------------------------------------------------------
000104AE                            ; Sprite mappings - signpost
000104AE                            ; ---------------------------------------------------------------------------
000104AE 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
000104B2 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
000104B6 0000                       		dc.w byte_ED73-Map_obj0D
000104B8 03                         byte_ED42:	dc.b 3
000104B9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
000104BE F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
000104C3 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
000104C8 02                         byte_ED52:	dc.b 2
000104C9 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
000104CE 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
000104D3 02                         byte_ED5D:	dc.b 2
000104D4 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
000104D9 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
000104DE 02                         byte_ED68:	dc.b 2
000104DF F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
000104E4 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
000104E9 03                         byte_ED73:	dc.b 3
000104EA F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
000104EF F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
000104F4 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
000104FA 00                         		even
000104FA 00                         		even
000104FA                            
000104FA                            ; ===========================================================================
000104FA                            ; ---------------------------------------------------------------------------
000104FA                            ; Object 4C - lava geyser / lavafall producer (MZ)
000104FA                            ; ---------------------------------------------------------------------------
000104FA                            
000104FA                            Obj4C:					; XREF: Obj_Index
000104FA 7000                       		moveq	#0,d0
000104FC 1028 0024                  		move.b	$24(a0),d0
00010500 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00010504 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00010508 6000 0000                  		bra.w	Obj4D_ChkDel
0001050C                            ; ===========================================================================
0001050C 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0001050E 0000                       		dc.w loc_EDCC-Obj4C_Index
00010510 0000                       		dc.w loc_EE3E-Obj4C_Index
00010512 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00010514 0000                       		dc.w Obj4C_Display-Obj4C_Index
00010516 0000                       		dc.w Obj4C_Delete-Obj4C_Index
00010518                            ; ===========================================================================
00010518                            
00010518                            Obj4C_Main:				; XREF: Obj4C_Index
00010518 5428 0024                  		addq.b	#2,$24(a0)
0001051C 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00010524 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0001052A 117C 0004 0001             		move.b	#4,1(a0)
00010530 117C 0001 0018             		move.b	#1,$18(a0)
00010536 117C 0038 0019             		move.b	#$38,$19(a0)
0001053C 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
00010542                            
00010542                            loc_EDCC:				; XREF: Obj4C_Index
00010542 5368 0032                  		subq.w	#1,$32(a0)
00010546 6A00                       		bpl.s	locret_EDF0
00010548 3168 0034 0032             		move.w	$34(a0),$32(a0)
0001054E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010552 3228 000C                  		move.w	$C(a0),d1
00010556 B041                       		cmp.w	d1,d0
00010558 6400                       		bcc.s	locret_EDF0
0001055A 0441 0170                  		subi.w	#$170,d1
0001055E B041                       		cmp.w	d1,d0
00010560 6500                       		bcs.s	locret_EDF0
00010562 5428 0024                  		addq.b	#2,$24(a0)
00010566                            
00010566                            locret_EDF0:
00010566 4E75                       		rts	
00010568                            ; ===========================================================================
00010568                            
00010568                            Obj4C_MakeLava:				; XREF: Obj4C_Index
00010568 5428 0024                  		addq.b	#2,$24(a0)
0001056C 6100 E9DC                  		bsr.w	SingleObjLoad2
00010570 6600                       		bne.s	loc_EE18
00010572 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
00010576 3368 0008 0008             		move.w	8(a0),8(a1)
0001057C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010582 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010588 2348 003C                  		move.l	a0,$3C(a1)
0001058C                            
0001058C                            loc_EE18:
0001058C 117C 0001 001C             		move.b	#1,$1C(a0)
00010592 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010596 6700                       		beq.s	Obj4C_Type00	; if yes, branch
00010598 117C 0004 001C             		move.b	#4,$1C(a0)
0001059E 6000                       		bra.s	Obj4C_Display
000105A0                            ; ===========================================================================
000105A0                            
000105A0                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
000105A0 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
000105A4 08E9 0001 0022             		bset	#1,$22(a1)
000105AA 337C FA80 0012             		move.w	#-$580,$12(a1)
000105B0 6000                       		bra.s	Obj4C_Display
000105B2                            ; ===========================================================================
000105B2                            
000105B2                            loc_EE3E:				; XREF: Obj4C_Index
000105B2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000105B6 6700                       		beq.s	Obj4C_Display	; if yes, branch
000105B8 5428 0024                  		addq.b	#2,$24(a0)
000105BC 4E75                       		rts	
000105BE                            ; ===========================================================================
000105BE                            
000105BE                            Obj4C_Display:				; XREF: Obj4C_Index
000105BE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
000105C4 6100 B278                  		bsr.w	AnimateSprite
000105C8 6100 E214                  		bsr.w	DisplaySprite
000105CC 4E75                       		rts	
000105CE                            ; ===========================================================================
000105CE                            
000105CE                            Obj4C_Delete:				; XREF: Obj4C_Index
000105CE 117C 0000 001C             		move.b	#0,$1C(a0)
000105D4 117C 0002 0024             		move.b	#2,$24(a0)
000105DA 4A28 0028                  		tst.b	$28(a0)
000105DE 6700 E24E                  		beq.w	DeleteObject
000105E2 4E75                       		rts	
000105E4                            ; ===========================================================================
000105E4                            ; ---------------------------------------------------------------------------
000105E4                            ; Object 4D - lava geyser / lavafall (MZ)
000105E4                            ; ---------------------------------------------------------------------------
000105E4                            
000105E4                            Obj4D:					; XREF: Obj_Index
000105E4 7000                       		moveq	#0,d0
000105E6 1028 0024                  		move.b	$24(a0),d0
000105EA 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
000105EE 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
000105F2 6000 E1EA                  		bra.w	DisplaySprite
000105F6                            ; ===========================================================================
000105F6 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
000105F8 0000                       		dc.w Obj4D_Action-Obj4D_Index
000105FA 0000                       		dc.w loc_EFFC-Obj4D_Index
000105FC 0000                       		dc.w Obj4D_Delete-Obj4D_Index
000105FE                            
000105FE FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
00010602                            ; ===========================================================================
00010602                            
00010602                            Obj4D_Main:				; XREF: Obj4D_Index
00010602 5428 0024                  		addq.b	#2,$24(a0)
00010606 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001060C 4A28 0028                  		tst.b	$28(a0)
00010610 6700                       		beq.s	loc_EEA4
00010612 0468 0250 000C             		subi.w	#$250,$C(a0)
00010618                            
00010618                            loc_EEA4:
00010618 7000                       		moveq	#0,d0
0001061A 1028 0028                  		move.b	$28(a0),d0
0001061E D040                       		add.w	d0,d0
00010620 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
00010626 2248                       		movea.l	a0,a1
00010628 7201                       		moveq	#1,d1
0001062A 6100                       		bsr.s	Obj4D_MakeLava
0001062C 6000                       		bra.s	loc_EF10
0001062E                            ; ===========================================================================
0001062E                            
0001062E                            Obj4D_Loop:
0001062E 6100 E91A                  		bsr.w	SingleObjLoad2
00010632 6600                       		bne.s	loc_EF0A
00010634                            
00010634                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00010634 12BC 004D                  		move.b	#$4D,0(a1)
00010638 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00010640 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010646 137C 0004 0001             		move.b	#4,1(a1)
0001064C 137C 0020 0019             		move.b	#$20,$19(a1)
00010652 3368 0008 0008             		move.w	8(a0),8(a1)
00010658 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001065E 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010664 137C 0001 0018             		move.b	#1,$18(a1)
0001066A 137C 0005 001C             		move.b	#5,$1C(a1)
00010670 4A28 0028                  		tst.b	$28(a0)
00010674 6700                       		beq.s	loc_EF0A
00010676 137C 0002 001C             		move.b	#2,$1C(a1)
0001067C                            
0001067C                            loc_EF0A:
0001067C 51C9 FFB0                  		dbf	d1,Obj4D_Loop
00010680 4E75                       		rts	
00010682                            ; ===========================================================================
00010682                            
00010682                            loc_EF10:				; XREF: Obj4D_Main
00010682 0669 0060 000C             		addi.w	#$60,$C(a1)
00010688 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001068E 0669 0060 0030             		addi.w	#$60,$30(a1)
00010694 137C 0093 0020             		move.b	#$93,$20(a1)
0001069A 137C 0080 0016             		move.b	#$80,$16(a1)
000106A0 08E9 0004 0001             		bset	#4,1(a1)
000106A6 5829 0024                  		addq.b	#4,$24(a1)
000106AA 2348 003C                  		move.l	a0,$3C(a1)
000106AE 4A28 0028                  		tst.b	$28(a0)
000106B2 6700                       		beq.s	Obj4D_PlaySnd
000106B4 7200                       		moveq	#0,d1
000106B6 6100 FF76                  		bsr.w	Obj4D_Loop
000106BA 5429 0024                  		addq.b	#2,$24(a1)
000106BE 08E9 0004 0002             		bset	#4,2(a1)
000106C4 0669 0100 000C             		addi.w	#$100,$C(a1)
000106CA 137C 0000 0018             		move.b	#0,$18(a1)
000106D0 3368 0030 0030             		move.w	$30(a0),$30(a1)
000106D6 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000106DC 117C 0000 0028             		move.b	#0,$28(a0)
000106E2                            
000106E2                            Obj4D_PlaySnd:
000106E2 303C 00C8                  		move.w	#$C8,d0
000106E6 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flame sound
000106EC                            
000106EC                            Obj4D_Action:				; XREF: Obj4D_Index
000106EC 7000                       		moveq	#0,d0
000106EE 1028 0028                  		move.b	$28(a0),d0
000106F2 D040                       		add.w	d0,d0
000106F4 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
000106F8 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
000106FC 6100 E0C6                  		bsr.w	SpeedToPos
00010700 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010706 6100 B136                  		bsr.w	AnimateSprite
0001070A                            
0001070A                            Obj4D_ChkDel:				; XREF: Obj4C
0001070A 3028 0008                  		move.w	8(a0),d0
0001070E 0240 FF80                  		andi.w	#$FF80,d0
00010712 3238 F700                  		move.w	($FFFFF700).w,d1
00010716 0441 0080                  		subi.w	#$80,d1
0001071A 0241 FF80                  		andi.w	#$FF80,d1
0001071E 9041                       		sub.w	d1,d0
00010720 0C40 0280                  		cmpi.w	#$280,d0
00010724 6300                       		bls.s	Obj4D_NoDel
00010726 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001072A 6700 E102                  		beq.w	DeleteObject	; if it's zero, don't remember object
0001072E 3440                       		movea.w	d0,a2	; load address into a2
00010730 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010734 6000 E0F8                  		bra.w	DeleteObject	; and delete object
00010738                            
00010738                            Obj4D_NoDel:
00010738 4E75                       		rts	
0001073A                            ; ===========================================================================
0001073A 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0001073C 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0001073E                            ; ===========================================================================
0001073E                            
0001073E                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0001073E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010744 3028 0030                  		move.w	$30(a0),d0
00010748 B068 000C                  		cmp.w	$C(a0),d0
0001074C 6400                       		bcc.s	locret_EFDA
0001074E 5828 0024                  		addq.b	#4,$24(a0)
00010752 2268 003C                  		movea.l	$3C(a0),a1
00010756 137C 0003 001C             		move.b	#3,$1C(a1)
0001075C                            
0001075C                            locret_EFDA:
0001075C 4E75                       		rts	
0001075E                            ; ===========================================================================
0001075E                            
0001075E                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0001075E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010764 3028 0030                  		move.w	$30(a0),d0
00010768 B068 000C                  		cmp.w	$C(a0),d0
0001076C 6400                       		bcc.s	locret_EFFA
0001076E 5828 0024                  		addq.b	#4,$24(a0)
00010772 2268 003C                  		movea.l	$3C(a0),a1
00010776 137C 0001 001C             		move.b	#1,$1C(a1)
0001077C                            
0001077C                            locret_EFFA:
0001077C 4E75                       		rts	
0001077E                            ; ===========================================================================
0001077E                            
0001077E                            loc_EFFC:				; XREF: Obj4D_Index
0001077E 2268 003C                  		movea.l	$3C(a0),a1
00010782 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00010788 6700 0000                  		beq.w	Obj4D_Delete
0001078C 3029 000C                  		move.w	$C(a1),d0
00010790 0640 0060                  		addi.w	#$60,d0
00010794 3140 000C                  		move.w	d0,$C(a0)
00010798 9068 0030                  		sub.w	$30(a0),d0
0001079C 4440                       		neg.w	d0
0001079E 7208                       		moveq	#8,d1
000107A0 0C40 0040                  		cmpi.w	#$40,d0
000107A4 6C00                       		bge.s	loc_F026
000107A6 720B                       		moveq	#$B,d1
000107A8                            
000107A8                            loc_F026:
000107A8 0C40 0080                  		cmpi.w	#$80,d0
000107AC 6F00                       		ble.s	loc_F02E
000107AE 720E                       		moveq	#$E,d1
000107B0                            
000107B0                            loc_F02E:
000107B0 5328 001E                  		subq.b	#1,$1E(a0)
000107B4 6A00                       		bpl.s	loc_F04C
000107B6 117C 0007 001E             		move.b	#7,$1E(a0)
000107BC 5228 001B                  		addq.b	#1,$1B(a0)
000107C0 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
000107C6 6500                       		bcs.s	loc_F04C
000107C8 117C 0000 001B             		move.b	#0,$1B(a0)
000107CE                            
000107CE                            loc_F04C:
000107CE 1028 001B                  		move.b	$1B(a0),d0
000107D2 D001                       		add.b	d1,d0
000107D4 1140 001A                  		move.b	d0,$1A(a0)
000107D8 6000 FF30                  		bra.w	Obj4D_ChkDel
000107DC                            ; ===========================================================================
000107DC                            
000107DC                            Obj4D_Delete:				; XREF: Obj4D_Index
000107DC 6000 E050                  		bra.w	DeleteObject
000107E0                            ; ===========================================================================
000107E0                            ; ---------------------------------------------------------------------------
000107E0                            ; Object 4E - advancing	wall of	lava (MZ)
000107E0                            ; ---------------------------------------------------------------------------
000107E0                            
000107E0                            Obj4E:					; XREF: Obj_Index
000107E0 7000                       		moveq	#0,d0
000107E2 1028 0024                  		move.b	$24(a0),d0
000107E6 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
000107EA 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
000107EE                            ; ===========================================================================
000107EE 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
000107F0 0000                       		dc.w Obj4E_Solid-Obj4E_Index
000107F2 0000                       		dc.w Obj4E_Action-Obj4E_Index
000107F4 0000                       		dc.w Obj4E_Move2-Obj4E_Index
000107F6 0000                       		dc.w Obj4E_Delete-Obj4E_Index
000107F8                            ; ===========================================================================
000107F8                            
000107F8                            Obj4E_Main:				; XREF: Obj4E_Index
000107F8 5828 0024                  		addq.b	#4,$24(a0)
000107FC 2248                       		movea.l	a0,a1
000107FE 7201                       		moveq	#1,d1
00010800 6000                       		bra.s	Obj4E_Main2
00010802                            ; ===========================================================================
00010802                            
00010802                            Obj4E_Loop:
00010802 6100 E746                  		bsr.w	SingleObjLoad2
00010806 6600                       		bne.s	loc_F0C8
00010808                            
00010808                            Obj4E_Main2:				; XREF: Obj4E_Main
00010808 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0001080C 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010814 337C 63A8 0002             		move.w	#$63A8,2(a1)
0001081A 137C 0004 0001             		move.b	#4,1(a1)
00010820 137C 0050 0019             		move.b	#$50,$19(a1)
00010826 3368 0008 0008             		move.w	8(a0),8(a1)
0001082C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010832 137C 0001 0018             		move.b	#1,$18(a1)
00010838 137C 0000 001C             		move.b	#0,$1C(a1)
0001083E 137C 0094 0020             		move.b	#$94,$20(a1)
00010844 2348 003C                  		move.l	a0,$3C(a1)
00010848                            
00010848                            loc_F0C8:
00010848 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0001084C                            
0001084C 5C29 0024                  		addq.b	#6,$24(a1)
00010850 137C 0004 001A             		move.b	#4,$1A(a1)
00010856                            
00010856                            Obj4E_Action:				; XREF: Obj4E_Index
00010856 3038 D008                  		move.w	($FFFFD008).w,d0
0001085A 9068 0008                  		sub.w	8(a0),d0
0001085E 6400                       		bcc.s	Obj4E_ChkSonic
00010860 4440                       		neg.w	d0
00010862                            
00010862                            Obj4E_ChkSonic:
00010862 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010866 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010868 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001086C 9068 000C                  		sub.w	$C(a0),d0
00010870 6400                       		bcc.s	loc_F0F4
00010872 4440                       		neg.w	d0
00010874                            
00010874                            loc_F0F4:
00010874 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00010878 6400                       		bcc.s	Obj4E_Move	; if not, branch
0001087A 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
00010880 6000                       		bra.s	Obj4E_Solid
00010882                            ; ===========================================================================
00010882                            
00010882                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
00010882 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010886 6700                       		beq.s	Obj4E_Solid	; if not, branch
00010888 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0001088E 5528 0024                  		subq.b	#2,$24(a0)
00010892                            
00010892                            Obj4E_Solid:				; XREF: Obj4E_Index
00010892 323C 002B                  		move.w	#$2B,d1
00010896 343C 0018                  		move.w	#$18,d2
0001089A 3602                       		move.w	d2,d3
0001089C 5243                       		addq.w	#1,d3
0001089E 3828 0008                  		move.w	8(a0),d4
000108A2 1028 0024                  		move.b	$24(a0),d0
000108A6 3F00                       		move.w	d0,-(sp)
000108A8 6100 0000                  		bsr.w	SolidObject
000108AC 301F                       		move.w	(sp)+,d0
000108AE 1140 0024                  		move.b	d0,$24(a0)
000108B2 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
000108B8 6600                       		bne.s	Obj4E_Animate	; if not, branch
000108BA 4268 0010                  		clr.w	$10(a0)		; stop object moving
000108BE 4228 0036                  		clr.b	$36(a0)
000108C2                            
000108C2                            Obj4E_Animate:
000108C2 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
000108C8 6100 AF74                  		bsr.w	AnimateSprite
000108CC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000108D2 6400                       		bcc.s	Obj4E_ChkDel
000108D4 6100 DEEE                  		bsr.w	SpeedToPos
000108D8                            
000108D8                            Obj4E_ChkDel:
000108D8 6100 DF04                  		bsr.w	DisplaySprite
000108DC 4A28 0036                  		tst.b	$36(a0)
000108E0 6600                       		bne.s	locret_F17E
000108E2 3028 0008                  		move.w	8(a0),d0
000108E6 0240 FF80                  		andi.w	#$FF80,d0
000108EA 3238 F700                  		move.w	($FFFFF700).w,d1
000108EE 0441 0080                  		subi.w	#$80,d1
000108F2 0241 FF80                  		andi.w	#$FF80,d1
000108F6 9041                       		sub.w	d1,d0
000108F8 0C40 0280                  		cmpi.w	#$280,d0
000108FC 6200                       		bhi.s	Obj4E_ChkGone
000108FE                            
000108FE                            locret_F17E:
000108FE 4E75                       		rts	
00010900                            ; ===========================================================================
00010900                            
00010900                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010900 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010904 3440                       		movea.w	d0,a2	; load address into a2
00010906 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001090A 117C 0008 0024             		move.b	#8,$24(a0)
00010910 4E75                       		rts	
00010912                            ; ===========================================================================
00010912                            
00010912                            Obj4E_Move2:				; XREF: Obj4E_Index
00010912 2268 003C                  		movea.l	$3C(a0),a1
00010916 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0001091C 6700                       		beq.s	Obj4E_Delete
0001091E 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010924 0468 0080 0008             		subi.w	#$80,8(a0)
0001092A 6000 DEB2                  		bra.w	DisplaySprite
0001092E                            ; ===========================================================================
0001092E                            
0001092E                            Obj4E_Delete:				; XREF: Obj4E_Index
0001092E 6000 DEFE                  		bra.w	DeleteObject
00010932                            ; ===========================================================================
00010932                            ; ---------------------------------------------------------------------------
00010932                            ; Object 54 - invisible	lava tag (MZ)
00010932                            ; ---------------------------------------------------------------------------
00010932                            
00010932                            Obj54:					; XREF: Obj_Index
00010932 7000                       		moveq	#0,d0
00010934 1028 0024                  		move.b	$24(a0),d0
00010938 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0001093C 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010940                            ; ===========================================================================
00010940 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010942 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010944                            
00010944 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010948                            ; ===========================================================================
00010948                            
00010948                            Obj54_Main:				; XREF: Obj54_Index
00010948 5428 0024                  		addq.b	#2,$24(a0)
0001094C 7000                       		moveq	#0,d0
0001094E 1028 0028                  		move.b	$28(a0),d0
00010952 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010958 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010960 117C 0084 0001             		move.b	#$84,1(a0)
00010966                            
00010966                            Obj54_ChkDel:				; XREF: Obj54_Index
00010966 3028 0008                  		move.w	8(a0),d0
0001096A 0240 FF80                  		andi.w	#$FF80,d0
0001096E 3238 F700                  		move.w	($FFFFF700).w,d1
00010972 0441 0080                  		subi.w	#$80,d1
00010976 0241 FF80                  		andi.w	#$FF80,d1
0001097A 9041                       		sub.w	d1,d0
0001097C 6B00 DEB0                  		bmi.w	DeleteObject
00010980 0C40 0280                  		cmpi.w	#$280,d0
00010984 6300                       		bls.s	Obj54_NoDel
00010986                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00010986                            	;	beq.w	DeleteObject		; if it's zero, don't remember object
00010986                            	;	movea.w	d0,a2	; load address into a2
00010986                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010986 6000 DEA6                  		bra.w	DeleteObject	; and delete object
0001098A                            
0001098A                            Obj54_NoDel:
0001098A 4E75                       		rts	
0001098C                            ; ===========================================================================
0001098C                            ; ---------------------------------------------------------------------------
0001098C                            ; Sprite mappings - invisible lava tag (MZ)
0001098C                            ; ---------------------------------------------------------------------------
0001098C                            Map_obj54:
0001098C                            	include "_maps\obj54.asm"
0001098C                            ; ---------------------------------------------------------------------------
0001098C                            ; Sprite mappings - invisible lava tag (MZ)
0001098C                            ; ---------------------------------------------------------------------------
0001098C 0000                       		dc.w byte_F212-Map_obj54
0001098E 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010990 00                         		even
00010990 00                         		even
00010990                            
00010990                            Ani_obj4C:
00010990                            	include "_anim\obj4C.asm"
00010990                            ; ---------------------------------------------------------------------------
00010990                            ; Animation script - geyser of lava (MZ)
00010990                            ; ---------------------------------------------------------------------------
00010990 0000                       		dc.w byte_F220-Ani_obj4C
00010992 0000                       		dc.w byte_F22A-Ani_obj4C
00010994 0000                       		dc.w byte_F22E-Ani_obj4C
00010996 0000                       		dc.w byte_F232-Ani_obj4C
00010998 0000                       		dc.w byte_F23A-Ani_obj4C
0001099A 0000                       		dc.w byte_F23E-Ani_obj4C
0001099C 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
000109A6 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
000109AA 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
000109AE 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
000109B6 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
000109BA 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
000109BE                            		even
000109BE                            		even
000109BE                            
000109BE                            Ani_obj4E:
000109BE                            	include "_anim\obj4E.asm"
000109BE                            ; ---------------------------------------------------------------------------
000109BE                            ; Animation script - advancing wall of lava (MZ)
000109BE                            ; ---------------------------------------------------------------------------
000109BE 0000                       		dc.w byte_F244-Ani_obj4E
000109C0 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
000109C6                            		even
000109C6                            		even
000109C6                            
000109C6                            ; ---------------------------------------------------------------------------
000109C6                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000109C6                            ; ---------------------------------------------------------------------------
000109C6                            Map_obj4C:
000109C6                            	include "_maps\obj4C.asm"
000109C6                            ; ---------------------------------------------------------------------------
000109C6                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000109C6                            ; ---------------------------------------------------------------------------
000109C6 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
000109CA 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
000109CE 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
000109D2 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
000109D6 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
000109DA 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
000109DE 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
000109E2 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
000109E6 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
000109EA 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
000109EE 02                         byte_F272:	dc.b 2
000109EF EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000109F4 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000109F9 02                         byte_F27D:	dc.b 2
000109FA EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000109FF EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010A04 04                         byte_F288:	dc.b 4
00010A05 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010A0A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010A0F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010A14 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010A19 04                         byte_F29D:	dc.b 4
00010A1A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010A1F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010A24 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010A29 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010A2E 06                         byte_F2B2:	dc.b 6
00010A2F EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010A34 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010A39 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010A3E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010A43 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010A48 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010A4D 06                         byte_F2D1:	dc.b 6
00010A4E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010A53 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010A58 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010A5D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010A62 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010A67 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010A6C 02                         byte_F2F0:	dc.b 2
00010A6D E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010A72 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010A77 02                         byte_F2FB:	dc.b 2
00010A78 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010A7D E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010A82 0A                         byte_F306:	dc.b $A
00010A83 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010A88 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010A8D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010A92 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010A97 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010A9C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010AA1 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010AA6 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010AAB 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010AB0 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010AB5 0A                         byte_F339:	dc.b $A
00010AB6 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010ABB 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010AC0 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010AC5 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010ACA D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010ACF D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010AD4 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010AD9 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010ADE 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010AE3 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010AE8 0A                         byte_F36C:	dc.b $A
00010AE9 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010AEE 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010AF3 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010AF8 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010AFD D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010B02 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010B07 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010B0C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010B11 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010B16 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010B1B 06                         byte_F39F:	dc.b 6
00010B1C 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010B21 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010B26 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010B2B B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010B30 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010B35 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010B3A 06                         byte_F3BE:	dc.b 6
00010B3B 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010B40 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010B45 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010B4A B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010B4F D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010B54 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010B59 06                         byte_F3DD:	dc.b 6
00010B5A 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010B5F 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010B64 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010B69 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010B6E D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010B73 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010B78 10                         byte_F3FC:	dc.b $10
00010B79 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010B7E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010B83 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010B88 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010B8D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010B92 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010B97 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010B9C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010BA1 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010BA6 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010BAB 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010BB0 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010BB5 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010BBA 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010BBF 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010BC4 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010BC9 10                         byte_F44D:	dc.b $10
00010BCA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010BCF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010BD4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010BD9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010BDE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010BE3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010BE8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010BED F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010BF2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010BF7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010BFC 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010C01 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010C06 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010C0B 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010C10 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010C15 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010C1A 10                         byte_F49E:	dc.b $10
00010C1B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010C20 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010C25 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010C2A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010C2F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010C34 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010C39 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010C3E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010C43 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010C48 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010C4D 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010C52 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010C57 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010C5C 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010C61 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010C66 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010C6B 06                         byte_F4EF:	dc.b 6
00010C6C E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010C71 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010C76 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010C7B E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010C80 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010C85 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010C8A 06                         byte_F50E:	dc.b 6
00010C8B E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010C90 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010C95 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010C9A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010C9F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010CA4 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010CA9 00                         byte_F52D:	dc.b 0
00010CAA                            		even
00010CAA                            		even
00010CAA                            
00010CAA                            ; ---------------------------------------------------------------------------
00010CAA                            ; Sprite mappings - advancing wall of lava (MZ)
00010CAA                            ; ---------------------------------------------------------------------------
00010CAA                            Map_obj4E:
00010CAA                            	include "_maps\obj4E.asm"
00010CAA                            ; ---------------------------------------------------------------------------
00010CAA                            ; Sprite mappings - advancing wall of lava (MZ)
00010CAA                            ; ---------------------------------------------------------------------------
00010CAA 0000                       		dc.w byte_F538-Map_obj4E
00010CAC 0000                       		dc.w byte_F566-Map_obj4E
00010CAE 0000                       		dc.w byte_F594-Map_obj4E
00010CB0 0000                       		dc.w byte_F5C2-Map_obj4E
00010CB2 0000                       		dc.w byte_F5F0-Map_obj4E
00010CB4 09                         byte_F538:	dc.b 9
00010CB5 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00010CBA 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010CBF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010CC4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010CC9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010CCE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010CD3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010CD8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010CDD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010CE2 09                         byte_F566:	dc.b 9
00010CE3 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010CE8 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010CED 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010CF2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010CF7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010CFC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010D01 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010D06 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010D0B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010D10 09                         byte_F594:	dc.b 9
00010D11 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00010D16 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010D1B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010D20 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010D25 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010D2A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010D2F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010D34 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010D39 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010D3E 09                         byte_F5C2:	dc.b 9
00010D3F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010D44 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00010D49 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010D4E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010D53 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010D58 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010D5D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010D62 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010D67 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010D6C 08                         byte_F5F0:	dc.b 8
00010D6D E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010D72 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010D77 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010D7C 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010D81 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010D86 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010D8B E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010D90 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010D96 00                         		even
00010D96 00                         		even
00010D96                            
00010D96                            ; ===========================================================================
00010D96                            ; ---------------------------------------------------------------------------
00010D96                            ; Object 40 - Moto Bug enemy (GHZ)
00010D96                            ; ---------------------------------------------------------------------------
00010D96                            
00010D96                            Obj40:					; XREF: Obj_Index
00010D96 7000                       		moveq	#0,d0
00010D98 1028 0024                  		move.b	$24(a0),d0
00010D9C 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010DA0 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010DA4                            ; ===========================================================================
00010DA4 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010DA6 0000                       		dc.w Obj40_Action-Obj40_Index
00010DA8 0000                       		dc.w Obj40_Animate-Obj40_Index
00010DAA 0000                       		dc.w Obj40_Delete-Obj40_Index
00010DAC                            ; ===========================================================================
00010DAC                            
00010DAC                            Obj40_Main:				; XREF: Obj40_Index
00010DAC 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010DB4 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010DBA 117C 0004 0001             		move.b	#4,1(a0)
00010DC0 117C 0004 0018             		move.b	#4,$18(a0)
00010DC6 117C 0014 0019             		move.b	#$14,$19(a0)
00010DCC 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010DD0 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010DD2 117C 000E 0016             		move.b	#$E,$16(a0)
00010DD8 117C 0008 0017             		move.b	#8,$17(a0)
00010DDE 117C 000C 0020             		move.b	#$C,$20(a0)
00010DE4 6100 D9BE                  		bsr.w	ObjectFall
00010DE8 4EB9 0000 0000             		jsr	ObjHitFloor
00010DEE 4A41                       		tst.w	d1
00010DF0 6A00                       		bpl.s	locret_F68A
00010DF2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010DF6 317C 0000 0012             		move.w	#0,$12(a0)
00010DFC 5428 0024                  		addq.b	#2,$24(a0)
00010E00 0868 0000 0022             		bchg	#0,$22(a0)
00010E06                            
00010E06                            locret_F68A:
00010E06 4E75                       		rts	
00010E08                            ; ===========================================================================
00010E08                            
00010E08                            Obj40_SetSmoke:				; XREF: Obj40_Main
00010E08 5828 0024                  		addq.b	#4,$24(a0)
00010E0C 6000 0000                  		bra.w	Obj40_Animate
00010E10                            ; ===========================================================================
00010E10                            
00010E10                            Obj40_Action:				; XREF: Obj40_Index
00010E10 7000                       		moveq	#0,d0
00010E12 1028 0025                  		move.b	$25(a0),d0
00010E16 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010E1A 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00010E1E 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010E24 6100 AA18                  		bsr.w	AnimateSprite
00010E28                            
00010E28                            ; ---------------------------------------------------------------------------
00010E28                            ; Routine to mark an enemy/monitor/ring	as destroyed
00010E28                            ; ---------------------------------------------------------------------------
00010E28                            
00010E28                            MarkObjGone:
00010E28 3028 0008                  		move.w	8(a0),d0
00010E2C 0240 FF80                  		andi.w	#$FF80,d0
00010E30 3238 F700                  		move.w	($FFFFF700).w,d1
00010E34 0441 0080                  		subi.w	#$80,d1
00010E38 0241 FF80                  		andi.w	#$FF80,d1
00010E3C 9041                       		sub.w	d1,d0
00010E3E 0C40 0280                  		cmpi.w	#$280,d0
00010E42 6200 0000                  		bhi.w	Mark_ChkGone
00010E46 6000 D996                  		bra.w	DisplaySprite
00010E4A                            ; ===========================================================================
00010E4A                            
00010E4A                            Mark_ChkGone:
00010E4A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010E4E 6700 D9DE                  		beq.w	DeleteObject	; if it's zero, don't remember object
00010E52 3440                       		movea.w	d0,a2	; load address into a2
00010E54 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010E58                            
00010E58                            Mark_Delete:
00010E58 6000 D9D4                  		bra.w	DeleteObject
00010E5C                            
00010E5C                            ; ===========================================================================
00010E5C 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010E5E 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010E60                            ; ===========================================================================
00010E60                            
00010E60                            Obj40_Move:				; XREF: Obj40_Index2
00010E60 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010E64 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00010E66 5428 0025                  		addq.b	#2,$25(a0)
00010E6A 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010E70 117C 0001 001C             		move.b	#1,$1C(a0)
00010E76 0868 0000 0022             		bchg	#0,$22(a0)
00010E7C 6600                       		bne.s	locret_F70A
00010E7E 4468 0010                  		neg.w	$10(a0)		; change direction
00010E82                            
00010E82                            locret_F70A:
00010E82 4E75                       		rts	
00010E84                            ; ===========================================================================
00010E84                            
00010E84                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010E84 6100 D93E                  		bsr.w	SpeedToPos
00010E88 4EB9 0000 0000             		jsr	ObjHitFloor
00010E8E 0C41 FFF8                  		cmpi.w	#-8,d1
00010E92 6D00                       		blt.s	Obj40_Pause
00010E94 0C41 000C                  		cmpi.w	#$C,d1
00010E98 6C00                       		bge.s	Obj40_Pause
00010E9A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010E9E 5328 0033                  		subq.b	#1,$33(a0)
00010EA2 6A00                       		bpl.s	locret_F756
00010EA4 117C 000F 0033             		move.b	#$F,$33(a0)
00010EAA 6100 E088                  		bsr.w	SingleObjLoad
00010EAE 6600                       		bne.s	locret_F756
00010EB0 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00010EB4 3368 0008 0008             		move.w	8(a0),8(a1)
00010EBA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010EC0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00010EC6 137C 0002 001C             		move.b	#2,$1C(a1)
00010ECC                            
00010ECC                            locret_F756:
00010ECC 4E75                       		rts	
00010ECE                            ; ===========================================================================
00010ECE                            
00010ECE                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010ECE 5528 0025                  		subq.b	#2,$25(a0)
00010ED2 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010ED8 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00010EDE 117C 0000 001C             		move.b	#0,$1C(a0)
00010EE4 4E75                       		rts	
00010EE6                            ; ===========================================================================
00010EE6                            
00010EE6                            Obj40_Animate:				; XREF: Obj40_Index
00010EE6 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010EEC 6100 A950                  		bsr.w	AnimateSprite
00010EF0 6000 D8EC                  		bra.w	DisplaySprite
00010EF4                            ; ===========================================================================
00010EF4                            
00010EF4                            Obj40_Delete:				; XREF: Obj40_Index
00010EF4 6000 D938                  		bra.w	DeleteObject
00010EF8                            ; ===========================================================================
00010EF8                            Ani_obj40:
00010EF8                            	include "_anim\obj40.asm"
00010EF8                            ; ---------------------------------------------------------------------------
00010EF8                            ; Animation script - Motobug enemy
00010EF8                            ; ---------------------------------------------------------------------------
00010EF8 0000                       		dc.w byte_F788-Ani_obj40
00010EFA 0000                       		dc.w byte_F78C-Ani_obj40
00010EFC 0000                       		dc.w byte_F792-Ani_obj40
00010EFE 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00010F02 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00010F08 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00010F16                            		even
00010F16                            		even
00010F16                            
00010F16                            ; ---------------------------------------------------------------------------
00010F16                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010F16                            ; ---------------------------------------------------------------------------
00010F16                            Map_obj40:
00010F16                            	include "_maps\obj40.asm"
00010F16                            ; ---------------------------------------------------------------------------
00010F16                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010F16                            ; ---------------------------------------------------------------------------
00010F16 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
00010F1A 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
00010F1E 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00010F22 0000                       		dc.w byte_F804-Map_obj40
00010F24 04                         byte_F7AE:	dc.b 4
00010F25 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00010F2A 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
00010F2F F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00010F34 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
00010F39 04                         byte_F7C3:	dc.b 4
00010F3A F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
00010F3F 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
00010F44 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
00010F49 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
00010F4E 05                         byte_F7D8:	dc.b 5
00010F4F F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00010F54 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
00010F59 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00010F5E 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
00010F63 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
00010F68 01                         byte_F7F2:	dc.b 1
00010F69 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
00010F6E 01                         byte_F7F8:	dc.b 1
00010F6F FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
00010F74 01                         byte_F7FE:	dc.b 1
00010F75 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
00010F7A 00                         byte_F804:	dc.b 0
00010F7C 00                         		even
00010F7C 00                         		even
00010F7C                            
00010F7C                            ; ===========================================================================
00010F7C                            ; ---------------------------------------------------------------------------
00010F7C                            ; Object 4F - blank
00010F7C                            ; ---------------------------------------------------------------------------
00010F7C                            
00010F7C                            Obj4F:					; XREF: Obj_Index
00010F7C 4E75                       		rts	
00010F7E                            
00010F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010F7E                            
00010F7E                            
00010F7E                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010F7E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010F82 D047                       		add.w	d7,d0
00010F84 0240 0003                  		andi.w	#3,d0
00010F88 6600                       		bne.s	loc_F836
00010F8A 7600                       		moveq	#0,d3
00010F8C 1628 0019                  		move.b	$19(a0),d3
00010F90 4A68 0010                  		tst.w	$10(a0)
00010F94 6B00                       		bmi.s	loc_F82C
00010F96 6100 0000                  		bsr.w	ObjHitWallRight
00010F9A 4A41                       		tst.w	d1
00010F9C 6A00                       		bpl.s	loc_F836
00010F9E                            
00010F9E                            loc_F828:
00010F9E 7001                       		moveq	#1,d0
00010FA0 4E75                       		rts	
00010FA2                            ; ===========================================================================
00010FA2                            
00010FA2                            loc_F82C:
00010FA2 4643                       		not.w	d3
00010FA4 6100 0000                  		bsr.w	ObjHitWallLeft
00010FA8 4A41                       		tst.w	d1
00010FAA 6BF2                       		bmi.s	loc_F828
00010FAC                            
00010FAC                            loc_F836:
00010FAC 7000                       		moveq	#0,d0
00010FAE 4E75                       		rts	
00010FB0                            ; End of function Obj50_ChkWall
00010FB0                            
00010FB0                            ; ===========================================================================
00010FB0                            ; ---------------------------------------------------------------------------
00010FB0                            ; Object 50 - Yadrin enemy (SYZ)
00010FB0                            ; ---------------------------------------------------------------------------
00010FB0                            
00010FB0                            Obj50:					; XREF: Obj_Index
00010FB0 7000                       		moveq	#0,d0
00010FB2 1028 0024                  		move.b	$24(a0),d0
00010FB6 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010FBA 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010FBE                            ; ===========================================================================
00010FBE 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010FC0 0000                       		dc.w Obj50_Action-Obj50_Index
00010FC2                            ; ===========================================================================
00010FC2                            
00010FC2                            Obj50_Main:				; XREF: Obj50_Index
00010FC2 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010FCA 317C 247B 0002             		move.w	#$247B,2(a0)
00010FD0 117C 0004 0001             		move.b	#4,1(a0)
00010FD6 117C 0004 0018             		move.b	#4,$18(a0)
00010FDC 117C 0014 0019             		move.b	#$14,$19(a0)
00010FE2 117C 0011 0016             		move.b	#$11,$16(a0)
00010FE8 117C 0008 0017             		move.b	#8,$17(a0)
00010FEE 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010FF4 6100 D7AE                  		bsr.w	ObjectFall
00010FF8 6100 0000                  		bsr.w	ObjHitFloor
00010FFC 4A41                       		tst.w	d1
00010FFE 6A00                       		bpl.s	locret_F89E
00011000 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011004 317C 0000 0012             		move.w	#0,$12(a0)
0001100A 5428 0024                  		addq.b	#2,$24(a0)
0001100E 0868 0000 0022             		bchg	#0,$22(a0)
00011014                            
00011014                            locret_F89E:
00011014 4E75                       		rts	
00011016                            ; ===========================================================================
00011016                            
00011016                            Obj50_Action:				; XREF: Obj50_Index
00011016 7000                       		moveq	#0,d0
00011018 1028 0025                  		move.b	$25(a0),d0
0001101C 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00011020 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00011024 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0001102A 6100 A812                  		bsr.w	AnimateSprite
0001102E 6000 FDF8                  		bra.w	MarkObjGone
00011032                            ; ===========================================================================
00011032 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00011034 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00011036                            ; ===========================================================================
00011036                            
00011036                            Obj50_Move:				; XREF: Obj50_Index2
00011036 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001103A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0001103C 5428 0025                  		addq.b	#2,$25(a0)
00011040 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00011046 117C 0001 001C             		move.b	#1,$1C(a0)
0001104C 0868 0000 0022             		bchg	#0,$22(a0)
00011052 6600                       		bne.s	locret_F8E2
00011054 4468 0010                  		neg.w	$10(a0)		; change direction
00011058                            
00011058                            locret_F8E2:
00011058 4E75                       		rts	
0001105A                            ; ===========================================================================
0001105A                            
0001105A                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0001105A 6100 D768                  		bsr.w	SpeedToPos
0001105E 6100 0000                  		bsr.w	ObjHitFloor
00011062 0C41 FFF8                  		cmpi.w	#-8,d1
00011066 6D00                       		blt.s	Obj50_Pause
00011068 0C41 000C                  		cmpi.w	#$C,d1
0001106C 6C00                       		bge.s	Obj50_Pause
0001106E D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00011072 6100 FF0A                  		bsr.w	Obj50_ChkWall
00011076 6600                       		bne.s	Obj50_Pause
00011078 4E75                       		rts	
0001107A                            ; ===========================================================================
0001107A                            
0001107A                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0001107A 5528 0025                  		subq.b	#2,$25(a0)
0001107E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00011084 317C 0000 0010             		move.w	#0,$10(a0)
0001108A 117C 0000 001C             		move.b	#0,$1C(a0)
00011090 4E75                       		rts	
00011092                            ; ===========================================================================
00011092                            Ani_obj50:
00011092                            	include "_anim\obj50.asm"
00011092                            ; ---------------------------------------------------------------------------
00011092                            ; Animation script - Yadrin enemy
00011092                            ; ---------------------------------------------------------------------------
00011092 0000                       		dc.w byte_F920-Ani_obj50
00011094 0000                       		dc.w byte_F924-Ani_obj50
00011096 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0001109A 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000110A4                            		even
000110A4                            		even
000110A4                            
000110A4                            ; ---------------------------------------------------------------------------
000110A4                            ; Sprite mappings - Yadrin enemy (SYZ)
000110A4                            ; ---------------------------------------------------------------------------
000110A4                            Map_obj50:
000110A4                            	include "_maps\obj50.asm"
000110A4                            ; ---------------------------------------------------------------------------
000110A4                            ; Sprite mappings - Yadrin enemy (SYZ)
000110A4                            ; ---------------------------------------------------------------------------
000110A4 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
000110A8 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
000110AC 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
000110B0 05                         byte_F93A:	dc.b 5
000110B1 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
000110B6 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
000110BB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000110C0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000110C5 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000110CA 05                         byte_F954:	dc.b 5
000110CB F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000110D0 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000110D5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000110DA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000110DF 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000110E4 05                         byte_F96E:	dc.b 5
000110E5 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000110EA 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000110EF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000110F4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000110F9 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000110FE 05                         byte_F988:	dc.b 5
000110FF F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011104 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00011109 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001110E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011113 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011118 05                         byte_F9A2:	dc.b 5
00011119 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0001111E FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011123 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011128 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001112D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011132 05                         byte_F9BC:	dc.b 5
00011133 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00011138 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001113D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011142 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011147 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001114C                            		even
0001114C                            		even
0001114C                            
0001114C                            ; ---------------------------------------------------------------------------
0001114C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0001114C                            ;
0001114C                            ; variables:
0001114C                            ; d1 = width
0001114C                            ; d2 = height /	2 (when	jumping)
0001114C                            ; d3 = height /	2 (when	walking)
0001114C                            ; d4 = x-axis position
0001114C                            ; ---------------------------------------------------------------------------
0001114C                            
0001114C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001114C                            
0001114C                            
0001114C                            SolidObject:
0001114C 4A28 0025                  		tst.b	$25(a0)
00011150 6700 0000                  		beq.w	loc_FAC8
00011154 3401                       		move.w	d1,d2
00011156 D442                       		add.w	d2,d2
00011158 43F8 D000                  		lea	($FFFFD000).w,a1
0001115C 0829 0001 0022             		btst	#1,$22(a1)
00011162 6600                       		bne.s	loc_F9FE
00011164 3029 0008                  		move.w	8(a1),d0
00011168 9068 0008                  		sub.w	8(a0),d0
0001116C D041                       		add.w	d1,d0
0001116E 6B00                       		bmi.s	loc_F9FE
00011170 B042                       		cmp.w	d2,d0
00011172 6500                       		bcs.s	loc_FA12
00011174                            
00011174                            loc_F9FE:
00011174 08A9 0003 0022             		bclr	#3,$22(a1)
0001117A 08A8 0003 0022             		bclr	#3,$22(a0)
00011180 4228 0025                  		clr.b	$25(a0)
00011184 7800                       		moveq	#0,d4
00011186 4E75                       		rts	
00011188                            ; ===========================================================================
00011188                            
00011188                            loc_FA12:
00011188 3404                       		move.w	d4,d2
0001118A 4EB9 0000 8BEE             		jsr	(MvSonicOnPtfm).l
00011190 7800                       		moveq	#0,d4
00011192 4E75                       		rts	
00011194                            ; ===========================================================================
00011194                            
00011194                            SolidObject71:				; XREF: Obj71_Solid
00011194 4A28 0025                  		tst.b	$25(a0)
00011198 6700 0000                  		beq.w	loc_FAD0
0001119C 3401                       		move.w	d1,d2
0001119E D442                       		add.w	d2,d2
000111A0 43F8 D000                  		lea	($FFFFD000).w,a1
000111A4 0829 0001 0022             		btst	#1,$22(a1)
000111AA 6600                       		bne.s	loc_FA44
000111AC 3029 0008                  		move.w	8(a1),d0
000111B0 9068 0008                  		sub.w	8(a0),d0
000111B4 D041                       		add.w	d1,d0
000111B6 6B00                       		bmi.s	loc_FA44
000111B8 B042                       		cmp.w	d2,d0
000111BA 6500                       		bcs.s	loc_FA58
000111BC                            
000111BC                            loc_FA44:
000111BC 08A9 0003 0022             		bclr	#3,$22(a1)
000111C2 08A8 0003 0022             		bclr	#3,$22(a0)
000111C8 4228 0025                  		clr.b	$25(a0)
000111CC 7800                       		moveq	#0,d4
000111CE 4E75                       		rts	
000111D0                            ; ===========================================================================
000111D0                            
000111D0                            loc_FA58:
000111D0 3404                       		move.w	d4,d2
000111D2 4EB9 0000 8BEE             		jsr	(MvSonicOnPtfm).l
000111D8 7800                       		moveq	#0,d4
000111DA 4E75                       		rts	
000111DC                            ; ===========================================================================
000111DC                            
000111DC                            SolidObject2F:				; XREF: Obj2F_Solid
000111DC 43F8 D000                  		lea	($FFFFD000).w,a1
000111E0 4A28 0001                  		tst.b	1(a0)
000111E4 6A00 0000                  		bpl.w	loc_FB92
000111E8 3029 0008                  		move.w	8(a1),d0
000111EC 9068 0008                  		sub.w	8(a0),d0
000111F0 D041                       		add.w	d1,d0
000111F2 6B00 0000                  		bmi.w	loc_FB92
000111F6 3601                       		move.w	d1,d3
000111F8 D643                       		add.w	d3,d3
000111FA B043                       		cmp.w	d3,d0
000111FC 6200 0000                  		bhi.w	loc_FB92
00011200 3A00                       		move.w	d0,d5
00011202 0828 0000 0001             		btst	#0,1(a0)
00011208 6700                       		beq.s	loc_FA94
0001120A 4645                       		not.w	d5
0001120C DA43                       		add.w	d3,d5
0001120E                            
0001120E                            loc_FA94:
0001120E E24D                       		lsr.w	#1,d5
00011210 7600                       		moveq	#0,d3
00011212 1632 5000                  		move.b	(a2,d5.w),d3
00011216 9612                       		sub.b	(a2),d3
00011218 3A28 000C                  		move.w	$C(a0),d5
0001121C 9A43                       		sub.w	d3,d5
0001121E 1629 0016                  		move.b	$16(a1),d3
00011222 4883                       		ext.w	d3
00011224 D443                       		add.w	d3,d2
00011226 3629 000C                  		move.w	$C(a1),d3
0001122A 9645                       		sub.w	d5,d3
0001122C 5843                       		addq.w	#4,d3
0001122E D642                       		add.w	d2,d3
00011230 6B00 0000                  		bmi.w	loc_FB92
00011234 3802                       		move.w	d2,d4
00011236 D844                       		add.w	d4,d4
00011238 B644                       		cmp.w	d4,d3
0001123A 6400 0000                  		bcc.w	loc_FB92
0001123E 6000 0000                  		bra.w	loc_FB0E
00011242                            ; ===========================================================================
00011242                            
00011242                            loc_FAC8:
00011242 4A28 0001                  		tst.b	1(a0)
00011246 6A00 0000                  		bpl.w	loc_FB92
0001124A                            
0001124A                            loc_FAD0:
0001124A 43F8 D000                  		lea	($FFFFD000).w,a1
0001124E 3029 0008                  		move.w	8(a1),d0
00011252 9068 0008                  		sub.w	8(a0),d0
00011256 D041                       		add.w	d1,d0
00011258 6B00 0000                  		bmi.w	loc_FB92
0001125C 3601                       		move.w	d1,d3
0001125E D643                       		add.w	d3,d3
00011260 B043                       		cmp.w	d3,d0
00011262 6200 0000                  		bhi.w	loc_FB92
00011266 1629 0016                  		move.b	$16(a1),d3
0001126A 4883                       		ext.w	d3
0001126C D443                       		add.w	d3,d2
0001126E 3629 000C                  		move.w	$C(a1),d3
00011272 9668 000C                  		sub.w	$C(a0),d3
00011276 5843                       		addq.w	#4,d3
00011278 D642                       		add.w	d2,d3
0001127A 6B00 0000                  		bmi.w	loc_FB92
0001127E 3802                       		move.w	d2,d4
00011280 D844                       		add.w	d4,d4
00011282 B644                       		cmp.w	d4,d3
00011284 6400 0000                  		bcc.w	loc_FB92
00011288                            
00011288                            loc_FB0E:
00011288 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001128C 6B00 0000                  		bmi.w	loc_FB92
00011290 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00011296 6400 0000                  		bcc.w	loc_FB92
0001129A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001129E 6600 0000                  		bne.w	loc_FBAC
000112A2 3A00                       		move.w	d0,d5
000112A4 B240                       		cmp.w	d0,d1
000112A6 6400                       		bcc.s	loc_FB36
000112A8 D241                       		add.w	d1,d1
000112AA 9041                       		sub.w	d1,d0
000112AC 3A00                       		move.w	d0,d5
000112AE 4445                       		neg.w	d5
000112B0                            
000112B0                            loc_FB36:
000112B0 3203                       		move.w	d3,d1
000112B2 B443                       		cmp.w	d3,d2
000112B4 6400                       		bcc.s	loc_FB44
000112B6 5943                       		subq.w	#4,d3
000112B8 9644                       		sub.w	d4,d3
000112BA 3203                       		move.w	d3,d1
000112BC 4441                       		neg.w	d1
000112BE                            
000112BE                            loc_FB44:
000112BE BA41                       		cmp.w	d1,d5
000112C0 6200 0000                  		bhi.w	loc_FBB0
000112C4 0C41 0004                  		cmpi.w	#4,d1
000112C8 6300                       		bls.s	loc_FB8C
000112CA 4A40                       		tst.w	d0
000112CC 6700                       		beq.s	loc_FB70
000112CE 6B00                       		bmi.s	loc_FB5E
000112D0 4A69 0010                  		tst.w	$10(a1)
000112D4 6B00                       		bmi.s	loc_FB70
000112D6 6000                       		bra.s	loc_FB64
000112D8                            ; ===========================================================================
000112D8                            
000112D8                            loc_FB5E:
000112D8 4A69 0010                  		tst.w	$10(a1)
000112DC 6A00                       		bpl.s	loc_FB70
000112DE                            
000112DE                            loc_FB64:
000112DE 337C 0000 0020             		move.w	#0,$20(a1)	; stop Sonic moving
000112E4 337C 0000 0010             		move.w	#0,$10(a1)
000112EA                            
000112EA                            loc_FB70:
000112EA 9169 0008                  		sub.w	d0,8(a1)
000112EE 0829 0001 0022             		btst	#1,$22(a1)
000112F4 6600                       		bne.s	loc_FB8C
000112F6 08E9 0005 0022             		bset	#5,$22(a1)
000112FC 08E8 0005 0022             		bset	#5,$22(a0)
00011302 7801                       		moveq	#1,d4
00011304 4E75                       		rts	
00011306                            ; ===========================================================================
00011306                            
00011306                            loc_FB8C:
00011306 6100                       		bsr.s	loc_FBA0
00011308 7801                       		moveq	#1,d4
0001130A 4E75                       		rts	
0001130C                            ; ===========================================================================
0001130C                            loc_FB92:
0001130C 0828 0005 0022             		btst	#5,$22(a0)
00011312 6700                       		beq.s	loc_FBAC
00011314 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0001131A 6700                       		beq.s	loc_FBA0
0001131C 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
00011322 6700                       		beq.s	loc_FBA0
00011324 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
0001132A 6700                       		beq.s	loc_FBA0
0001132C 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00011332                            
00011332                            loc_FBA0:
00011332 08A8 0005 0022             		bclr	#5,$22(a0)
00011338 08A9 0005 0022             		bclr	#5,$22(a1)
0001133E                            
0001133E                            loc_FBAC:
0001133E 7800                       		moveq	#0,d4
00011340 4E75                       		rts	
00011342                            ; ===========================================================================
00011342                            
00011342                            loc_FBB0:
00011342 4A43                       		tst.w	d3
00011344 6B00                       		bmi.s	loc_FBBC
00011346 0C43 0010                  		cmpi.w	#$10,d3
0001134A 6500                       		bcs.s	loc_FBEE
0001134C 60BE                       		bra.s	loc_FB92
0001134E                            ; ===========================================================================
0001134E                            
0001134E                            loc_FBBC:
0001134E 4A69 0012                  		tst.w	$12(a1)
00011352 6700                       		beq.s	loc_FBD6
00011354 6A00                       		bpl.s	loc_FBD2
00011356 4A43                       		tst.w	d3
00011358 6A00                       		bpl.s	loc_FBD2
0001135A 9769 000C                  		sub.w	d3,$C(a1)
0001135E 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00011364                            
00011364                            loc_FBD2:
00011364 78FF                       		moveq	#-1,d4
00011366 4E75                       		rts	
00011368                            ; ===========================================================================
00011368                            
00011368                            loc_FBD6:
00011368 0829 0001 0022             		btst	#1,$22(a1)
0001136E 66F4                       		bne.s	loc_FBD2
00011370 2F08                       		move.l	a0,-(sp)
00011372 2049                       		movea.l	a1,a0
00011374 4EB9 0000 0000             		jsr	KillSonic
0001137A 205F                       		movea.l	(sp)+,a0
0001137C 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
00011382 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00011388 78FF                       		moveq	#-1,d4
0001138A 4E75                       		rts	
0001138C                            ; ===========================================================================
0001138C                            
0001138C                            loc_FBEE:
0001138C 5943                       		subq.w	#4,d3
0001138E 7200                       		moveq	#0,d1
00011390 1228 0019                  		move.b	$19(a0),d1
00011394 3401                       		move.w	d1,d2
00011396 D442                       		add.w	d2,d2
00011398 D269 0008                  		add.w	8(a1),d1
0001139C 9268 0008                  		sub.w	8(a0),d1
000113A0 6B00                       		bmi.s	loc_FC28
000113A2 B242                       		cmp.w	d2,d1
000113A4 6400                       		bcc.s	loc_FC28
000113A6 4A69 0012                  		tst.w	$12(a1)
000113AA 6B00                       		bmi.s	loc_FC28
000113AC 9769 000C                  		sub.w	d3,$C(a1)
000113B0 5369 000C                  		subq.w	#1,$C(a1)
000113B4 6100                       		bsr.s	sub_FC2C
000113B6 117C 0002 0025             		move.b	#2,$25(a0)
000113BC 08E8 0003 0022             		bset	#3,$22(a0)
000113C2 78FF                       		moveq	#-1,d4
000113C4 4E75                       		rts	
000113C6                            ; ===========================================================================
000113C6                            
000113C6                            loc_FC28:
000113C6 7800                       		moveq	#0,d4
000113C8 4E75                       		rts	
000113CA                            ; End of function SolidObject
000113CA                            
000113CA                            
000113CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000113CA                            
000113CA                            
000113CA                            sub_FC2C:				; XREF: SolidObject
000113CA 0829 0003 0022             		btst	#3,$22(a1)
000113D0 6700                       		beq.s	loc_FC4E
000113D2 7000                       		moveq	#0,d0
000113D4 1029 003D                  		move.b	$3D(a1),d0
000113D8 ED48                       		lsl.w	#6,d0
000113DA 0680 00FF D000             		addi.l	#$FFD000,d0
000113E0 2440                       		movea.l	d0,a2
000113E2 08AA 0003 0022             		bclr	#3,$22(a2)
000113E8 422A 0025                  		clr.b	$25(a2)
000113EC                            
000113EC                            loc_FC4E:
000113EC 3008                       		move.w	a0,d0
000113EE 0440 D000                  		subi.w	#-$3000,d0
000113F2 EC48                       		lsr.w	#6,d0
000113F4 0240 007F                  		andi.w	#$7F,d0
000113F8 1340 003D                  		move.b	d0,$3D(a1)
000113FC 137C 0000 0026             		move.b	#0,$26(a1)
00011402 337C 0000 0012             		move.w	#0,$12(a1)
00011408 3369 0010 0020             		move.w	$10(a1),$20(a1)
0001140E 0829 0001 0022             		btst	#1,$22(a1)
00011414 6700                       		beq.s	loc_FC84
00011416 2F08                       		move.l	a0,-(sp)
00011418 2049                       		movea.l	a1,a0
0001141A 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00011420 205F                       		movea.l	(sp)+,a0
00011422                            
00011422                            loc_FC84:
00011422 08E9 0003 0022             		bset	#3,$22(a1)
00011428 08E8 0003 0022             		bset	#3,$22(a0)
0001142E 4E75                       		rts	
00011430                            ; End of function sub_FC2C
00011430                            
00011430                            ; ===========================================================================
00011430                            ; ---------------------------------------------------------------------------
00011430                            ; Object 51 - smashable	green block (MZ)
00011430                            ; ---------------------------------------------------------------------------
00011430                            
00011430                            Obj51:					; XREF: Obj_Index
00011430 7000                       		moveq	#0,d0
00011432 1028 0024                  		move.b	$24(a0),d0
00011436 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001143A 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001143E 6000 F9E8                  		bra.w	MarkObjGone
00011442                            ; ===========================================================================
00011442 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00011444 0000                       		dc.w Obj51_Solid-Obj51_Index
00011446 0000                       		dc.w Obj51_Display-Obj51_Index
00011448                            ; ===========================================================================
00011448                            
00011448                            Obj51_Main:				; XREF: Obj51_Index
00011448 5428 0024                  		addq.b	#2,$24(a0)
0001144C 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00011454 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001145A 117C 0004 0001             		move.b	#4,1(a0)
00011460 117C 0010 0019             		move.b	#$10,$19(a0)
00011466 117C 0004 0018             		move.b	#4,$18(a0)
0001146C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00011472                            
00011472                            Obj51_Solid:				; XREF: Obj51_Index
00011472 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00011478 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001147E 323C 001B                  		move.w	#$1B,d1
00011482 343C 0010                  		move.w	#$10,d2
00011486 363C 0011                  		move.w	#$11,d3
0001148A 3828 0008                  		move.w	8(a0),d4
0001148E 6100 FCBC                  		bsr.w	SolidObject
00011492 0828 0003 0022             		btst	#3,$22(a0)
00011498 6600                       		bne.s	Obj51_Smash
0001149A                            
0001149A                            locret_FCFC:
0001149A 4E75                       		rts	
0001149C                            ; ===========================================================================
0001149C                            
0001149C                            Obj51_Smash:				; XREF: Obj51_Solid
0001149C 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000114A2 66F6                       		bne.s	locret_FCFC	; if not, branch
000114A4 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000114AA 08E9 0002 0022             		bset	#2,$22(a1)
000114B0 137C 000E 0016             		move.b	#$E,$16(a1)
000114B6 137C 0007 0017             		move.b	#7,$17(a1)
000114BC 137C 0002 001C             		move.b	#2,$1C(a1)
000114C2 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000114C8 08E9 0001 0022             		bset	#1,$22(a1)
000114CE 08A9 0003 0022             		bclr	#3,$22(a1)
000114D4 137C 0002 0024             		move.b	#2,$24(a1)
000114DA 08A8 0003 0022             		bclr	#3,$22(a0)
000114E0 4228 0025                  		clr.b	$25(a0)
000114E4 117C 0001 001A             		move.b	#1,$1A(a0)
000114EA 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000114F0 7203                       		moveq	#3,d1		; set number of	fragments to 4
000114F2 343C 0038                  		move.w	#$38,d2
000114F6 6100 CEE4                  		bsr.w	SmashObject
000114FA 6100 DA38                  		bsr.w	SingleObjLoad
000114FE 6600                       		bne.s	Obj51_Display
00011500 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011504 3368 0008 0008             		move.w	8(a0),8(a1)
0001150A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011510 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00011514 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00011518 0C42 0006                  		cmpi.w	#6,d2
0001151C 6500                       		bcs.s	Obj51_Bonus
0001151E 7406                       		moveq	#6,d2
00011520                            
00011520                            Obj51_Bonus:
00011520 7000                       		moveq	#0,d0
00011522 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00011526 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001152C 6500                       		bcs.s	loc_FD98	; if not, branch
0001152E 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011532 740A                       		moveq	#10,d2
00011534                            
00011534                            loc_FD98:
00011534 4EB9 0000 0000             		jsr	AddPoints
0001153A E24A                       		lsr.w	#1,d2
0001153C 1342 001A                  		move.b	d2,$1A(a1)
00011540                            
00011540                            Obj51_Display:				; XREF: Obj51_Index
00011540 6100 D282                  		bsr.w	SpeedToPos
00011544 0668 0038 0012             		addi.w	#$38,$12(a0)
0001154A 6100 D292                  		bsr.w	DisplaySprite
0001154E 4A28 0001                  		tst.b	1(a0)
00011552 6A00 D2DA                  		bpl.w	DeleteObject
00011556 4E75                       		rts	
00011558                            ; ===========================================================================
00011558 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0001155C FF00 FF00                  		dc.w $FF00, $FF00
00011560 0200 FE00                  		dc.w $200, $FE00
00011564 0100 FF00                  		dc.w $100, $FF00
00011568                            
00011568 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00011570                            ; ---------------------------------------------------------------------------
00011570                            ; Sprite mappings - smashable green block (MZ)
00011570                            ; ---------------------------------------------------------------------------
00011570                            Map_obj51:
00011570                            	include "_maps\obj51.asm"
00011570                            ; ---------------------------------------------------------------------------
00011570                            ; Sprite mappings - smashable green block (MZ)
00011570                            ; ---------------------------------------------------------------------------
00011570 0000                       		dc.w byte_FDD8-Map_obj51
00011572 0000                       		dc.w byte_FDE3-Map_obj51
00011574 02                         byte_FDD8:	dc.b 2
00011575 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0001157A 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001157F 04                         byte_FDE3:	dc.b 4
00011580 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00011585 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0001158A F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001158F 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00011594                            		even
00011594                            		even
00011594                            
00011594                            ; ===========================================================================
00011594                            ; ---------------------------------------------------------------------------
00011594                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011594                            ; ---------------------------------------------------------------------------
00011594                            
00011594                            Obj52:					; XREF: Obj_Index
00011594 7000                       		moveq	#0,d0
00011596 1028 0024                  		move.b	$24(a0),d0
0001159A 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001159E 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000115A2                            ; ===========================================================================
000115A2 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000115A4 0000                       		dc.w Obj52_Platform-Obj52_Index
000115A6 0000                       		dc.w Obj52_StandOn-Obj52_Index
000115A8                            
000115A8 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000115AA 2001                       		dc.b $20, 1
000115AC 2002                       		dc.b $20, 2
000115AE 4003                       		dc.b $40, 3
000115B0 3004                       		dc.b $30, 4
000115B2                            ; ===========================================================================
000115B2                            
000115B2                            Obj52_Main:				; XREF: Obj52_Index
000115B2 5428 0024                  		addq.b	#2,$24(a0)
000115B6 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000115BE 317C 42B8 0002             		move.w	#$42B8,2(a0)
000115C4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000115CA 6600                       		bne.s	loc_FE44
000115CC 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000115D4 317C 43BC 0002             		move.w	#$43BC,2(a0)
000115DA 117C 0007 0016             		move.b	#7,$16(a0)
000115E0                            
000115E0                            loc_FE44:
000115E0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000115E6 6600                       		bne.s	loc_FE60
000115E8 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000115EE 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000115F4 6700                       		beq.s	loc_FE60	; if yes, branch
000115F6 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000115FC                            
000115FC                            loc_FE60:
000115FC 117C 0004 0001             		move.b	#4,1(a0)
00011602 7000                       		moveq	#0,d0
00011604 1028 0028                  		move.b	$28(a0),d0
00011608 E648                       		lsr.w	#3,d0
0001160A 0240 001E                  		andi.w	#$1E,d0
0001160E 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00011612 115A 0019                  		move.b	(a2)+,$19(a0)
00011616 115A 001A                  		move.b	(a2)+,$1A(a0)
0001161A 117C 0004 0018             		move.b	#4,$18(a0)
00011620 3168 0008 0030             		move.w	8(a0),$30(a0)
00011626 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001162C 0228 000F 0028             		andi.b	#$F,$28(a0)
00011632                            
00011632                            Obj52_Platform:				; XREF: Obj52_Index
00011632 6100 0000                  		bsr.w	Obj52_Move
00011636 7200                       		moveq	#0,d1
00011638 1228 0019                  		move.b	$19(a0),d1
0001163C 4EB9 0000 8510             		jsr	(PlatformObject).l
00011642 6000                       		bra.s	Obj52_ChkDel
00011644                            ; ===========================================================================
00011644                            
00011644                            Obj52_StandOn:				; XREF: Obj52_Index
00011644 7200                       		moveq	#0,d1
00011646 1228 0019                  		move.b	$19(a0),d1
0001164A 4EB9 0000 8684             		jsr	(ExitPlatform).l
00011650 3F28 0008                  		move.w	8(a0),-(sp)
00011654 6100 0000                  		bsr.w	Obj52_Move
00011658 341F                       		move.w	(sp)+,d2
0001165A 4EB9 0000 8BFA             		jsr	(MvSonicOnPtfm2).l
00011660                            
00011660                            Obj52_ChkDel:				; XREF: Obj52_Platform
00011660 3028 0030                  		move.w	$30(a0),d0
00011664 0240 FF80                  		andi.w	#$FF80,d0
00011668 3238 F700                  		move.w	($FFFFF700).w,d1
0001166C 0441 0080                  		subi.w	#$80,d1
00011670 0241 FF80                  		andi.w	#$FF80,d1
00011674 9041                       		sub.w	d1,d0
00011676 0C40 0280                  		cmpi.w	#$280,d0
0001167A 6300 D162                  		bls.w	DisplaySprite
0001167E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011682 6700 D1AA                  		beq.w	DeleteObject		; if it's zero, don't remember object
00011686 3440                       		movea.w	d0,a2	; load address into a2
00011688 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001168C 6000 D1A0                  		bra.w	DeleteObject	; and delete object
00011690                            ; ===========================================================================
00011690                            
00011690                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00011690 7000                       		moveq	#0,d0
00011692 1028 0028                  		move.b	$28(a0),d0
00011696 0240 000F                  		andi.w	#$F,d0
0001169A D040                       		add.w	d0,d0
0001169C 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000116A0 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000116A4                            ; ===========================================================================
000116A4 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000116A8 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000116AC 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000116B0 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000116B4 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000116B8 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000116BA                            ; ===========================================================================
000116BA                            
000116BA                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000116BA 4E75                       		rts	
000116BC                            ; ===========================================================================
000116BC                            
000116BC                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000116BC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000116C0 323C 0060                  		move.w	#$60,d1
000116C4 0828 0000 0022             		btst	#0,$22(a0)
000116CA 6700                       		beq.s	loc_FF26
000116CC 4440                       		neg.w	d0
000116CE D041                       		add.w	d1,d0
000116D0                            
000116D0                            loc_FF26:
000116D0 3228 0030                  		move.w	$30(a0),d1
000116D4 9240                       		sub.w	d0,d1
000116D6 3141 0008                  		move.w	d1,8(a0)
000116DA 4E75                       		rts	
000116DC                            ; ===========================================================================
000116DC                            
000116DC                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000116DC 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000116E2 6600                       		bne.s	Obj52_02_Wait
000116E4 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000116E8                            
000116E8                            Obj52_02_Wait:
000116E8 4E75                       		rts	
000116EA                            ; ===========================================================================
000116EA                            
000116EA                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000116EA 7600                       		moveq	#0,d3
000116EC 1628 0019                  		move.b	$19(a0),d3
000116F0 6100 0000                  		bsr.w	ObjHitWallRight
000116F4 4A41                       		tst.w	d1		; has the platform hit a wall?
000116F6 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000116F8 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000116FC 3168 0008 0030             		move.w	8(a0),$30(a0)
00011702 4E75                       		rts	
00011704                            ; ===========================================================================
00011704                            
00011704                            Obj52_03_End:
00011704 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00011708 4E75                       		rts	
0001170A                            ; ===========================================================================
0001170A                            
0001170A                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001170A 7600                       		moveq	#0,d3
0001170C 1628 0019                  		move.b	$19(a0),d3
00011710 6100 0000                  		bsr.w	ObjHitWallRight
00011714 4A41                       		tst.w	d1		; has the platform hit a wall?
00011716 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00011718 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001171C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011722 4E75                       		rts	
00011724                            ; ===========================================================================
00011724                            
00011724                            Obj52_05_End:
00011724 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00011728 4E75                       		rts	
0001172A                            ; ===========================================================================
0001172A                            
0001172A                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001172A 6100 D098                  		bsr.w	SpeedToPos
0001172E 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00011734 6100 0000                  		bsr.w	ObjHitFloor
00011738 4A41                       		tst.w	d1		; has platform hit the floor?
0001173A 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001173E D368 000C                  		add.w	d1,$C(a0)
00011742 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00011746 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001174A                            
0001174A                            locret_FFA0:
0001174A 4E75                       		rts	
0001174C                            ; ===========================================================================
0001174C                            
0001174C                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001174C 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00011750 6700                       		beq.s	Obj52_07_ChkDel
00011752 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00011756                            
00011756                            Obj52_07_ChkDel:
00011756 588F                       		addq.l	#4,sp
00011758 3028 0030                  		move.w	$30(a0),d0
0001175C 0240 FF80                  		andi.w	#$FF80,d0
00011760 3238 F700                  		move.w	($FFFFF700).w,d1
00011764 0441 0080                  		subi.w	#$80,d1
00011768 0241 FF80                  		andi.w	#$FF80,d1
0001176C 9041                       		sub.w	d1,d0
0001176E 0C40 0280                  		cmpi.w	#$280,d0
00011772 6200 D0BA                  		bhi.w	DeleteObject
00011776 4E75                       		rts	
00011778                            ; ===========================================================================
00011778                            
00011778                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00011778 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001177C 323C 0080                  		move.w	#$80,d1
00011780 0828 0000 0022             		btst	#0,$22(a0)
00011786 6700                       		beq.s	loc_FFE2
00011788 4440                       		neg.w	d0
0001178A D041                       		add.w	d1,d0
0001178C                            
0001178C                            loc_FFE2:
0001178C 3228 0032                  		move.w	$32(a0),d1
00011790 9240                       		sub.w	d0,d1
00011792 3141 000C                  		move.w	d1,$C(a0)
00011796 4E75                       		rts	
00011798                            ; ===========================================================================
00011798                            
00011798                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00011798 7600                       		moveq	#0,d3
0001179A 1628 0019                  		move.b	$19(a0),d3
0001179E D643                       		add.w	d3,d3
000117A0 7208                       		moveq	#8,d1
000117A2 0828 0000 0022             		btst	#0,$22(a0)
000117A8 6700                       		beq.s	loc_10004
000117AA 4441                       		neg.w	d1
000117AC 4443                       		neg.w	d3
000117AE                            
000117AE                            loc_10004:
000117AE 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000117B2 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000117B4 3028 0008                  		move.w	8(a0),d0
000117B8 9068 0030                  		sub.w	$30(a0),d0
000117BC B043                       		cmp.w	d3,d0
000117BE 6700                       		beq.s	Obj52_0A_Wait
000117C0 D368 0008                  		add.w	d1,8(a0)	; move platform
000117C4 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000117CA 4E75                       		rts	
000117CC                            ; ===========================================================================
000117CC                            
000117CC                            Obj52_0A_Wait:
000117CC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000117D0 6600                       		bne.s	locret_1002E	; if time remains, branch
000117D2 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000117D8                            
000117D8                            locret_1002E:
000117D8 4E75                       		rts	
000117DA                            ; ===========================================================================
000117DA                            
000117DA                            Obj52_0A_Back:
000117DA 3028 0008                  		move.w	8(a0),d0
000117DE 9068 0030                  		sub.w	$30(a0),d0
000117E2 6700                       		beq.s	Obj52_0A_Reset
000117E4 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000117E8 4E75                       		rts	
000117EA                            ; ===========================================================================
000117EA                            
000117EA                            Obj52_0A_Reset:
000117EA 4268 0036                  		clr.w	$36(a0)
000117EE 5328 0028                  		subq.b	#1,$28(a0)
000117F2 4E75                       		rts	
000117F4                            ; ===========================================================================
000117F4                            ; ---------------------------------------------------------------------------
000117F4                            ; Sprite mappings - moving blocks (MZ, SBZ)
000117F4                            ; ---------------------------------------------------------------------------
000117F4                            Map_obj52:
000117F4                            	include "_maps\obj52mz.asm"
000117F4                            ; ---------------------------------------------------------------------------
000117F4                            ; Sprite mappings - moving blocks (MZ, SBZ)
000117F4                            ; ---------------------------------------------------------------------------
000117F4 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000117F8 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000117FC 0000                       		dc.w byte_1008F-Map_obj52
000117FE 01                         byte_10054:	dc.b 1
000117FF F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011804 02                         byte_1005A:	dc.b 2
00011805 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001180A F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001180F 04                         byte_10065:	dc.b 4
00011810 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011815 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001181A F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001181F 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011824 04                         byte_1007A:	dc.b 4
00011825 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001182A F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001182F F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00011834 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00011839 03                         byte_1008F:	dc.b 3
0001183A F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001183F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011844 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001184A 00                         		even
0001184A 00                         		even
0001184A                            
0001184A                            ; ---------------------------------------------------------------------------
0001184A                            ; Sprite mappings - moving block (LZ)
0001184A                            ; ---------------------------------------------------------------------------
0001184A                            Map_obj52a:
0001184A                            	include "_maps\obj52lz.asm"
0001184A                            ; ---------------------------------------------------------------------------
0001184A                            ; Sprite mappings - moving block (LZ)
0001184A                            ; ---------------------------------------------------------------------------
0001184A 0000                       		dc.w byte_100A2-Map_obj52a
0001184C 01                         byte_100A2:	dc.b 1
0001184D F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00011852                            		even
00011852                            		even
00011852                            
00011852                            ; ===========================================================================
00011852                            ; ---------------------------------------------------------------------------
00011852                            ; Object 55 - Basaran enemy (MZ)
00011852                            ; ---------------------------------------------------------------------------
00011852                            
00011852                            Obj55:					; XREF: Obj_Index
00011852 7000                       		moveq	#0,d0
00011854 1028 0024                  		move.b	$24(a0),d0
00011858 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001185C 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00011860                            ; ===========================================================================
00011860 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011862 0000                       		dc.w Obj55_Action-Obj55_Index
00011864                            ; ===========================================================================
00011864                            
00011864                            Obj55_Main:				; XREF: Obj55_Index
00011864 5428 0024                  		addq.b	#2,$24(a0)
00011868 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00011870 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011876 117C 0004 0001             		move.b	#4,1(a0)
0001187C 117C 000C 0016             		move.b	#$C,$16(a0)
00011882 117C 0002 0018             		move.b	#2,$18(a0)
00011888 117C 000B 0020             		move.b	#$B,$20(a0)
0001188E 117C 0010 0019             		move.b	#$10,$19(a0)
00011894                            
00011894                            Obj55_Action:				; XREF: Obj55_Index
00011894 7000                       		moveq	#0,d0
00011896 1028 0025                  		move.b	$25(a0),d0
0001189A 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001189E 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000118A2 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000118A8 6100 9F94                  		bsr.w	AnimateSprite
000118AC 6000 F57A                  		bra.w	MarkObjGone
000118B0                            ; ===========================================================================
000118B0 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000118B2 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000118B4 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000118B6 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000118B8                            ; ===========================================================================
000118B8                            
000118B8                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000118B8 343C 0080                  		move.w	#$80,d2
000118BC 6100 0000                  		bsr.w	Obj55_ChkSonic
000118C0 6400                       		bcc.s	Obj55_NoDrop
000118C2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000118C6 3140 0036                  		move.w	d0,$36(a0)
000118CA 9068 000C                  		sub.w	$C(a0),d0
000118CE 6500                       		bcs.s	Obj55_NoDrop
000118D0 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000118D4 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000118D6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000118DA 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000118DC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000118E0 D007                       		add.b	d7,d0
000118E2 0200 0007                  		andi.b	#7,d0
000118E6 6600                       		bne.s	Obj55_NoDrop
000118E8 117C 0001 001C             		move.b	#1,$1C(a0)
000118EE 5428 0025                  		addq.b	#2,$25(a0)
000118F2                            
000118F2                            Obj55_NoDrop:
000118F2 4E75                       		rts	
000118F4                            ; ===========================================================================
000118F4                            
000118F4                            Obj55_DropFly:				; XREF: Obj55_Index2
000118F4 6100 CECE                  		bsr.w	SpeedToPos
000118F8 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000118FE 343C 0080                  		move.w	#$80,d2
00011902 6100 0000                  		bsr.w	Obj55_ChkSonic
00011906 3028 0036                  		move.w	$36(a0),d0
0001190A 9068 000C                  		sub.w	$C(a0),d0
0001190E 6500                       		bcs.s	Obj55_ChkDel
00011910 0C40 0010                  		cmpi.w	#$10,d0
00011914 6400                       		bcc.s	locret_10180
00011916 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
0001191A 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011920 117C 0002 001C             		move.b	#2,$1C(a0)
00011926 5428 0025                  		addq.b	#2,$25(a0)
0001192A                            
0001192A                            locret_10180:
0001192A 4E75                       		rts	
0001192C                            ; ===========================================================================
0001192C                            
0001192C                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0001192C 4A28 0001                  		tst.b	1(a0)
00011930 6A00 CEFC                  		bpl.w	DeleteObject
00011934 4E75                       		rts	
00011936                            ; ===========================================================================
00011936                            
00011936                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011936 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001193A 0200 000F                  		andi.b	#$F,d0
0001193E 6600                       		bne.s	loc_101A0
00011940 303C 00C0                  		move.w	#$C0,d0
00011944 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flapping sound
0001194A                            
0001194A                            loc_101A0:
0001194A 6100 CE78                  		bsr.w	SpeedToPos
0001194E 3038 D008                  		move.w	($FFFFD008).w,d0
00011952 9068 0008                  		sub.w	8(a0),d0
00011956 6400                       		bcc.s	loc_101B0
00011958 4440                       		neg.w	d0
0001195A                            
0001195A                            loc_101B0:
0001195A 0C40 0080                  		cmpi.w	#$80,d0
0001195E 6500                       		bcs.s	locret_101C6
00011960 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011964 D007                       		add.b	d7,d0
00011966 0200 0007                  		andi.b	#7,d0
0001196A 6600                       		bne.s	locret_101C6
0001196C 5428 0025                  		addq.b	#2,$25(a0)
00011970                            
00011970                            locret_101C6:
00011970 4E75                       		rts	
00011972                            ; ===========================================================================
00011972                            
00011972                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011972 6100 CE50                  		bsr.w	SpeedToPos
00011976 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001197C 6100 0000                  		bsr.w	ObjHitCeiling
00011980 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011982 6A00                       		bpl.s	locret_101F4	; if not, branch
00011984 9368 000C                  		sub.w	d1,$C(a0)
00011988 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001198E 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011992 4268 0012                  		clr.w	$12(a0)
00011996 4228 001C                  		clr.b	$1C(a0)
0001199A 4228 0025                  		clr.b	$25(a0)
0001199E                            
0001199E                            locret_101F4:
0001199E 4E75                       		rts	
000119A0                            ; ===========================================================================
000119A0                            
000119A0                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000119A0 323C 0100                  		move.w	#$100,d1
000119A4 08E8 0000 0022             		bset	#0,$22(a0)
000119AA 3038 D008                  		move.w	($FFFFD008).w,d0
000119AE 9068 0008                  		sub.w	8(a0),d0
000119B2 6400                       		bcc.s	loc_10214
000119B4 4440                       		neg.w	d0
000119B6 4441                       		neg.w	d1
000119B8 08A8 0000 0022             		bclr	#0,$22(a0)
000119BE                            
000119BE                            loc_10214:
000119BE B042                       		cmp.w	d2,d0
000119C0 4E75                       		rts	
000119C2                            ; ===========================================================================
000119C2 6100 CE00                  		bsr.w	SpeedToPos
000119C6 6100 CE16                  		bsr.w	DisplaySprite
000119CA 4A28 0001                  		tst.b	1(a0)
000119CE 6A00 CE5E                  		bpl.w	DeleteObject
000119D2 4E75                       		rts	
000119D4                            ; ===========================================================================
000119D4                            Ani_obj55:
000119D4                            	include "_anim\obj55.asm"
000119D4                            ; ---------------------------------------------------------------------------
000119D4                            ; Animation script - Basaran enemy
000119D4                            ; ---------------------------------------------------------------------------
000119D4 0000                       		dc.w byte_10230-Ani_obj55
000119D6 0000                       		dc.w byte_10234-Ani_obj55
000119D8 0000                       		dc.w byte_10238-Ani_obj55
000119DA 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000119DE 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000119E2 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000119E8                            		even
000119E8                            		even
000119E8                            
000119E8                            ; ---------------------------------------------------------------------------
000119E8                            ; Sprite mappings - Basaran enemy (MZ)
000119E8                            ; ---------------------------------------------------------------------------
000119E8                            Map_obj55:
000119E8                            	include "_maps\obj55.asm"
000119E8                            ; ---------------------------------------------------------------------------
000119E8                            ; Sprite mappings - Basaran enemy (MZ)
000119E8                            ; ---------------------------------------------------------------------------
000119E8 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000119EC 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000119F0 01                         byte_10246:	dc.b 1
000119F1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000119F6 03                         byte_1024C:	dc.b 3
000119F7 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000119FC 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011A01 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011A06 04                         byte_1025C:	dc.b 4
00011A07 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011A0C 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011A11 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011A16 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011A1B 04                         byte_10271:	dc.b 4
00011A1C F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011A21 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011A26 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011A2B FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011A30                            		even
00011A30                            		even
00011A30                            
00011A30                            ; ===========================================================================
00011A30                            ; ---------------------------------------------------------------------------
00011A30                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011A30                            ; ---------------------------------------------------------------------------
00011A30                            
00011A30                            Obj56:					; XREF: Obj_Index
00011A30 7000                       		moveq	#0,d0
00011A32 1028 0024                  		move.b	$24(a0),d0
00011A36 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011A3A 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011A3E                            ; ===========================================================================
00011A3E 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011A40 0000                       		dc.w Obj56_Action-Obj56_Index
00011A42                            
00011A42 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011A44 2020                       		dc.b  $20, $20
00011A46 1020                       		dc.b  $10, $20
00011A48 201A                       		dc.b  $20, $1A
00011A4A 1027                       		dc.b  $10, $27
00011A4C 1010                       		dc.b  $10, $10
00011A4E 0820                       		dc.b	8, $20
00011A50 4010                       		dc.b  $40, $10
00011A52                            ; ===========================================================================
00011A52                            
00011A52                            Obj56_Main:				; XREF: Obj56_Index
00011A52 5428 0024                  		addq.b	#2,$24(a0)
00011A56 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011A5E 317C 4000 0002             		move.w	#$4000,2(a0)
00011A64 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011A6A 6600                       		bne.s	loc_102C8
00011A6C 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011A72                            
00011A72                            loc_102C8:
00011A72 117C 0004 0001             		move.b	#4,1(a0)
00011A78 117C 0003 0018             		move.b	#3,$18(a0)
00011A7E 7000                       		moveq	#0,d0
00011A80 1028 0028                  		move.b	$28(a0),d0
00011A84 E648                       		lsr.w	#3,d0
00011A86 0240 000E                  		andi.w	#$E,d0
00011A8A 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011A8E 115A 0019                  		move.b	(a2)+,$19(a0)
00011A92 1152 0016                  		move.b	(a2),$16(a0)
00011A96 E248                       		lsr.w	#1,d0
00011A98 1140 001A                  		move.b	d0,$1A(a0)
00011A9C 3168 0008 0034             		move.w	8(a0),$34(a0)
00011AA2 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011AA8 7000                       		moveq	#0,d0
00011AAA 1012                       		move.b	(a2),d0
00011AAC D040                       		add.w	d0,d0
00011AAE 3140 003A                  		move.w	d0,$3A(a0)
00011AB2 7000                       		moveq	#0,d0
00011AB4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011ABA 6700                       		beq.s	loc_10332
00011ABC 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011AC0 0240 000F                  		andi.w	#$F,d0
00011AC4 5140                       		subq.w	#8,d0
00011AC6 6500                       		bcs.s	loc_10332
00011AC8 E548                       		lsl.w	#2,d0
00011ACA 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011ACE 45F2 0000                  		lea	(a2,d0.w),a2
00011AD2 4A52                       		tst.w	(a2)
00011AD4 6A00                       		bpl.s	loc_10332
00011AD6 0868 0000 0022             		bchg	#0,$22(a0)
00011ADC                            
00011ADC                            loc_10332:
00011ADC 1028 0028                  		move.b	$28(a0),d0
00011AE0 6A00                       		bpl.s	Obj56_Action
00011AE2 0200 000F                  		andi.b	#$F,d0
00011AE6 1140 003C                  		move.b	d0,$3C(a0)
00011AEA 117C 0005 0028             		move.b	#5,$28(a0)
00011AF0 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011AF6 6600                       		bne.s	Obj56_ChkGone
00011AF8 117C 000C 0028             		move.b	#$C,$28(a0)
00011AFE 317C 0080 003A             		move.w	#$80,$3A(a0)
00011B04                            
00011B04                            Obj56_ChkGone:
00011B04 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011B08 6700                       		beq.s	Obj56_Action		; if it's zero, don't remember object
00011B0A 3440                       		movea.w	d0,a2	; load address into a2
00011B0C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00011B10 0812 0000                  		btst	#0,(a2)
00011B14 6700                       		beq.s	Obj56_Action
00011B16 5228 0028                  		addq.b	#1,$28(a0)
00011B1A 4268 003A                  		clr.w	$3A(a0)
00011B1E                            
00011B1E                            Obj56_Action:				; XREF: Obj56_Index
00011B1E 3F28 0008                  		move.w	8(a0),-(sp)
00011B22 7000                       		moveq	#0,d0
00011B24 1028 0028                  		move.b	$28(a0),d0	; get object type
00011B28 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011B2C D040                       		add.w	d0,d0
00011B2E 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011B32 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011B36 381F                       		move.w	(sp)+,d4
00011B38 4A28 0001                  		tst.b	1(a0)
00011B3C 6A00                       		bpl.s	Obj56_ChkDel
00011B3E 7200                       		moveq	#0,d1
00011B40 1228 0019                  		move.b	$19(a0),d1
00011B44 0641 000B                  		addi.w	#$B,d1
00011B48 7400                       		moveq	#0,d2
00011B4A 1428 0016                  		move.b	$16(a0),d2
00011B4E 3602                       		move.w	d2,d3
00011B50 5243                       		addq.w	#1,d3
00011B52 6100 F5F8                  		bsr.w	SolidObject
00011B56                            
00011B56                            Obj56_ChkDel:
00011B56 3028 0034                  		move.w	$34(a0),d0
00011B5A 0240 FF80                  		andi.w	#$FF80,d0
00011B5E 3238 F700                  		move.w	($FFFFF700).w,d1
00011B62 0441 0080                  		subi.w	#$80,d1
00011B66 0241 FF80                  		andi.w	#$FF80,d1
00011B6A 9041                       		sub.w	d1,d0
00011B6C 0C40 0280                  		cmpi.w	#$280,d0
00011B70 6300 CC6C                  		bls.w	DisplaySprite
00011B74 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011B78 6700 CCB4                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00011B7C 3440                       		movea.w	d0,a2	; load address into a2
00011B7E 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00011B82 6000 CCAA                  		bra.w	DeleteObject
00011B86                            ; ===========================================================================
00011B86 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011B8A 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011B8E 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011B92 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011B96 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011B9A 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011B9E 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011BA2                            ; ===========================================================================
00011BA2                            
00011BA2                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011BA2 4E75                       		rts	
00011BA4                            ; ===========================================================================
00011BA4                            
00011BA4                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011BA4 323C 0040                  		move.w	#$40,d1
00011BA8 7000                       		moveq	#0,d0
00011BAA 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011BAE 6000                       		bra.s	Obj56_Move_LR
00011BB0                            ; ===========================================================================
00011BB0                            
00011BB0                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011BB0 323C 0080                  		move.w	#$80,d1
00011BB4 7000                       		moveq	#0,d0
00011BB6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011BBA                            
00011BBA                            Obj56_Move_LR:
00011BBA 0828 0000 0022             		btst	#0,$22(a0)
00011BC0 6700                       		beq.s	loc_10416
00011BC2 4440                       		neg.w	d0
00011BC4 D041                       		add.w	d1,d0
00011BC6                            
00011BC6                            loc_10416:
00011BC6 3228 0034                  		move.w	$34(a0),d1
00011BCA 9240                       		sub.w	d0,d1
00011BCC 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011BD0 4E75                       		rts	
00011BD2                            ; ===========================================================================
00011BD2                            
00011BD2                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011BD2 323C 0040                  		move.w	#$40,d1
00011BD6 7000                       		moveq	#0,d0
00011BD8 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011BDC 6000                       		bra.s	Obj56_Move_UD
00011BDE                            ; ===========================================================================
00011BDE                            
00011BDE                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011BDE 323C 0080                  		move.w	#$80,d1
00011BE2 7000                       		moveq	#0,d0
00011BE4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011BE8                            
00011BE8                            Obj56_Move_UD:
00011BE8 0828 0000 0022             		btst	#0,$22(a0)
00011BEE 6700                       		beq.s	loc_10444
00011BF0 4440                       		neg.w	d0
00011BF2 D041                       		add.w	d1,d0
00011BF4                            
00011BF4                            loc_10444:
00011BF4 3228 0030                  		move.w	$30(a0),d1
00011BF8 9240                       		sub.w	d0,d1
00011BFA 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011BFE 4E75                       		rts	
00011C00                            ; ===========================================================================
00011C00                            
00011C00                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011C00 4A28 0038                  		tst.b	$38(a0)
00011C04 6600                       		bne.s	loc_104A4
00011C06 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011C0C 6600                       		bne.s	loc_1047A	; if not, branch
00011C0E 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00011C14 6600                       		bne.s	loc_1047A
00011C16 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011C1A 3038 D008                  		move.w	($FFFFD008).w,d0
00011C1E B068 0008                  		cmp.w	8(a0),d0
00011C22 6400                       		bcc.s	loc_1047A
00011C24 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00011C2A                            
00011C2A                            loc_1047A:
00011C2A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011C2E 7000                       		moveq	#0,d0
00011C30 1028 003C                  		move.b	$3C(a0),d0
00011C34 0832 0000 0000             		btst	#0,(a2,d0.w)
00011C3A 6700                       		beq.s	loc_104AE
00011C3C 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011C42 6600                       		bne.s	loc_1049E	; if not, branch
00011C44 0C00 0003                  		cmpi.b	#3,d0
00011C48 6600                       		bne.s	loc_1049E
00011C4A 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011C4E                            
00011C4E                            loc_1049E:
00011C4E 117C 0001 0038             		move.b	#1,$38(a0)
00011C54                            
00011C54                            loc_104A4:
00011C54 4A68 003A                  		tst.w	$3A(a0)
00011C58 6700                       		beq.s	loc_104C8
00011C5A 5568 003A                  		subq.w	#2,$3A(a0)
00011C5E                            
00011C5E                            loc_104AE:
00011C5E 3028 003A                  		move.w	$3A(a0),d0
00011C62 0828 0000 0022             		btst	#0,$22(a0)
00011C68 6700                       		beq.s	loc_104BC
00011C6A 4440                       		neg.w	d0
00011C6C                            
00011C6C                            loc_104BC:
00011C6C 3228 0030                  		move.w	$30(a0),d1
00011C70 D240                       		add.w	d0,d1
00011C72 3141 000C                  		move.w	d1,$C(a0)
00011C76 4E75                       		rts	
00011C78                            ; ===========================================================================
00011C78                            
00011C78                            loc_104C8:
00011C78 5228 0028                  		addq.b	#1,$28(a0)
00011C7C 4228 0038                  		clr.b	$38(a0)
00011C80 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011C84 67D8                       		beq.s	loc_104AE		; if it's zero, don't remember object
00011C86 3440                       		movea.w	d0,a2	; load address into a2
00011C88 08D2 0000                  		bset	#0,(a2)
00011C8C 60D0                       		bra.s	loc_104AE
00011C8E                            ; ===========================================================================
00011C8E                            
00011C8E                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011C8E 4A28 0038                  		tst.b	$38(a0)
00011C92 6600                       		bne.s	loc_10500
00011C94 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011C98 7000                       		moveq	#0,d0
00011C9A 1028 003C                  		move.b	$3C(a0),d0
00011C9E 4A32 0000                  		tst.b	(a2,d0.w)
00011CA2 6A00                       		bpl.s	loc_10512
00011CA4 117C 0001 0038             		move.b	#1,$38(a0)
00011CAA                            
00011CAA                            loc_10500:
00011CAA 7000                       		moveq	#0,d0
00011CAC 1028 0016                  		move.b	$16(a0),d0
00011CB0 D040                       		add.w	d0,d0
00011CB2 B068 003A                  		cmp.w	$3A(a0),d0
00011CB6 6700                       		beq.s	loc_1052C
00011CB8 5468 003A                  		addq.w	#2,$3A(a0)
00011CBC                            
00011CBC                            loc_10512:
00011CBC 3028 003A                  		move.w	$3A(a0),d0
00011CC0 0828 0000 0022             		btst	#0,$22(a0)
00011CC6 6700                       		beq.s	loc_10520
00011CC8 4440                       		neg.w	d0
00011CCA                            
00011CCA                            loc_10520:
00011CCA 3228 0030                  		move.w	$30(a0),d1
00011CCE D240                       		add.w	d0,d1
00011CD0 3141 000C                  		move.w	d1,$C(a0)
00011CD4 4E75                       		rts	
00011CD6                            ; ===========================================================================
00011CD6                            
00011CD6                            loc_1052C:
00011CD6 5328 0028                  		subq.b	#1,$28(a0)
00011CDA 4228 0038                  		clr.b	$38(a0)
00011CDE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011CE2 67D8                       		beq.s	loc_10512		; if it's zero, don't remember object
00011CE4 3440                       		movea.w	d0,a2	; load address into a2
00011CE6 0892 0000                  		bclr	#0,(a2)
00011CEA 60D0                       		bra.s	loc_10512
00011CEC                            ; ===========================================================================
00011CEC                            
00011CEC                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011CEC 4A28 0038                  		tst.b	$38(a0)
00011CF0 6600                       		bne.s	loc_1055E
00011CF2 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011CF6 6700                       		beq.s	locret_10578
00011CF8 117C 0001 0038             		move.b	#1,$38(a0)
00011CFE 4268 003A                  		clr.w	$3A(a0)
00011D02                            
00011D02                            loc_1055E:
00011D02 5268 0008                  		addq.w	#1,8(a0)
00011D06 3168 0008 0034             		move.w	8(a0),$34(a0)
00011D0C 5268 003A                  		addq.w	#1,$3A(a0)
00011D10 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00011D16 6600                       		bne.s	locret_10578
00011D18 4228 0028                  		clr.b	$28(a0)
00011D1C                            
00011D1C                            locret_10578:
00011D1C 4E75                       		rts	
00011D1E                            ; ===========================================================================
00011D1E                            
00011D1E                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00011D1E 4A28 0038                  		tst.b	$38(a0)
00011D22 6600                       		bne.s	loc_10598
00011D24 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011D28 7000                       		moveq	#0,d0
00011D2A 1028 003C                  		move.b	$3C(a0),d0
00011D2E 0832 0000 0000             		btst	#0,(a2,d0.w)
00011D34 6700                       		beq.s	loc_105A2
00011D36 117C 0001 0038             		move.b	#1,$38(a0)
00011D3C                            
00011D3C                            loc_10598:
00011D3C 4A68 003A                  		tst.w	$3A(a0)
00011D40 6700                       		beq.s	loc_105C0
00011D42 5568 003A                  		subq.w	#2,$3A(a0)
00011D46                            
00011D46                            loc_105A2:
00011D46 3028 003A                  		move.w	$3A(a0),d0
00011D4A 0828 0000 0022             		btst	#0,$22(a0)
00011D50 6700                       		beq.s	loc_105B4
00011D52 4440                       		neg.w	d0
00011D54 0640 0080                  		addi.w	#$80,d0
00011D58                            
00011D58                            loc_105B4:
00011D58 3228 0034                  		move.w	$34(a0),d1
00011D5C D240                       		add.w	d0,d1
00011D5E 3141 0008                  		move.w	d1,8(a0)
00011D62 4E75                       		rts	
00011D64                            ; ===========================================================================
00011D64                            
00011D64                            loc_105C0:
00011D64 5228 0028                  		addq.b	#1,$28(a0)
00011D68 4228 0038                  		clr.b	$38(a0)
00011D6C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011D70 67D4                       		beq.s	loc_105A2		; if it's zero, don't remember object
00011D72 3440                       		movea.w	d0,a2	; load address into a2
00011D74 08D2 0000                  		bset	#0,(a2)
00011D78 60CC                       		bra.s	loc_105A2
00011D7A                            ; ===========================================================================
00011D7A                            
00011D7A                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011D7A 4A28 0038                  		tst.b	$38(a0)
00011D7E 6600                       		bne.s	loc_105F8
00011D80 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011D84 7000                       		moveq	#0,d0
00011D86 1028 003C                  		move.b	$3C(a0),d0
00011D8A 4A32 0000                  		tst.b	(a2,d0.w)
00011D8E 6A00                       		bpl.s	loc_10606
00011D90 117C 0001 0038             		move.b	#1,$38(a0)
00011D96                            
00011D96                            loc_105F8:
00011D96 303C 0080                  		move.w	#$80,d0
00011D9A B068 003A                  		cmp.w	$3A(a0),d0
00011D9E 6700                       		beq.s	loc_10624
00011DA0 5468 003A                  		addq.w	#2,$3A(a0)
00011DA4                            
00011DA4                            loc_10606:
00011DA4 3028 003A                  		move.w	$3A(a0),d0
00011DA8 0828 0000 0022             		btst	#0,$22(a0)
00011DAE 6700                       		beq.s	loc_10618
00011DB0 4440                       		neg.w	d0
00011DB2 0640 0080                  		addi.w	#$80,d0
00011DB6                            
00011DB6                            loc_10618:
00011DB6 3228 0034                  		move.w	$34(a0),d1
00011DBA D240                       		add.w	d0,d1
00011DBC 3141 0008                  		move.w	d1,8(a0)
00011DC0 4E75                       		rts	
00011DC2                            ; ===========================================================================
00011DC2                            
00011DC2                            loc_10624:
00011DC2 5328 0028                  		subq.b	#1,$28(a0)
00011DC6 4228 0038                  		clr.b	$38(a0)
00011DCA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011DCE 67D4                       		beq.s	loc_10606		; if it's zero, don't remember object
00011DD0 3440                       		movea.w	d0,a2	; load address into a2
00011DD2 0892 0000                  		bclr	#0,(a2)
00011DD6 60CC                       		bra.s	loc_10606
00011DD8                            ; ===========================================================================
00011DD8                            
00011DD8                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011DD8 323C 0010                  		move.w	#$10,d1
00011DDC 7000                       		moveq	#0,d0
00011DDE 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011DE2 E248                       		lsr.w	#1,d0
00011DE4 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011DE8 6000                       		bra.s	Obj56_Move_Sqr
00011DEA                            ; ===========================================================================
00011DEA                            
00011DEA                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011DEA 323C 0030                  		move.w	#$30,d1
00011DEE 7000                       		moveq	#0,d0
00011DF0 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011DF4 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011DF8 6000                       		bra.s	Obj56_Move_Sqr
00011DFA                            ; ===========================================================================
00011DFA                            
00011DFA                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00011DFA 323C 0050                  		move.w	#$50,d1
00011DFE 7000                       		moveq	#0,d0
00011E00 1038 FE90                  		move.b	($FFFFFE90).w,d0
00011E04 3638 FE92                  		move.w	($FFFFFE92).w,d3
00011E08 6000                       		bra.s	Obj56_Move_Sqr
00011E0A                            ; ===========================================================================
00011E0A                            
00011E0A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00011E0A 323C 0070                  		move.w	#$70,d1
00011E0E 7000                       		moveq	#0,d0
00011E10 1038 FE94                  		move.b	($FFFFFE94).w,d0
00011E14 3638 FE96                  		move.w	($FFFFFE96).w,d3
00011E18                            
00011E18                            Obj56_Move_Sqr:
00011E18 4A43                       		tst.w	d3
00011E1A 6600                       		bne.s	loc_1068E
00011E1C 5228 0022                  		addq.b	#1,$22(a0)
00011E20 0228 0003 0022             		andi.b	#3,$22(a0)
00011E26                            
00011E26                            loc_1068E:
00011E26 1428 0022                  		move.b	$22(a0),d2
00011E2A 0202 0003                  		andi.b	#3,d2
00011E2E 6600                       		bne.s	loc_106AE
00011E30 9041                       		sub.w	d1,d0
00011E32 D068 0034                  		add.w	$34(a0),d0
00011E36 3140 0008                  		move.w	d0,8(a0)
00011E3A 4441                       		neg.w	d1
00011E3C D268 0030                  		add.w	$30(a0),d1
00011E40 3141 000C                  		move.w	d1,$C(a0)
00011E44 4E75                       		rts	
00011E46                            ; ===========================================================================
00011E46                            
00011E46                            loc_106AE:
00011E46 5302                       		subq.b	#1,d2
00011E48 6600                       		bne.s	loc_106CC
00011E4A 5341                       		subq.w	#1,d1
00011E4C 9041                       		sub.w	d1,d0
00011E4E 4440                       		neg.w	d0
00011E50 D068 0030                  		add.w	$30(a0),d0
00011E54 3140 000C                  		move.w	d0,$C(a0)
00011E58 5241                       		addq.w	#1,d1
00011E5A D268 0034                  		add.w	$34(a0),d1
00011E5E 3141 0008                  		move.w	d1,8(a0)
00011E62 4E75                       		rts	
00011E64                            ; ===========================================================================
00011E64                            
00011E64                            loc_106CC:
00011E64 5302                       		subq.b	#1,d2
00011E66 6600                       		bne.s	loc_106EA
00011E68 5341                       		subq.w	#1,d1
00011E6A 9041                       		sub.w	d1,d0
00011E6C 4440                       		neg.w	d0
00011E6E D068 0034                  		add.w	$34(a0),d0
00011E72 3140 0008                  		move.w	d0,8(a0)
00011E76 5241                       		addq.w	#1,d1
00011E78 D268 0030                  		add.w	$30(a0),d1
00011E7C 3141 000C                  		move.w	d1,$C(a0)
00011E80 4E75                       		rts	
00011E82                            ; ===========================================================================
00011E82                            
00011E82                            loc_106EA:
00011E82 9041                       		sub.w	d1,d0
00011E84 D068 0030                  		add.w	$30(a0),d0
00011E88 3140 000C                  		move.w	d0,$C(a0)
00011E8C 4441                       		neg.w	d1
00011E8E D268 0034                  		add.w	$34(a0),d1
00011E92 3141 0008                  		move.w	d1,8(a0)
00011E96 4E75                       		rts	
00011E98                            ; ===========================================================================
00011E98                            ; ---------------------------------------------------------------------------
00011E98                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011E98                            ; ---------------------------------------------------------------------------
00011E98                            Map_obj56:
00011E98                            	include "_maps\obj56.asm"
00011E98                            ; ---------------------------------------------------------------------------
00011E98                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011E98                            ; ---------------------------------------------------------------------------
00011E98 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011E9C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011EA0 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011EA4 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011EA8 01                         byte_10710:	dc.b 1
00011EA9 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011EAE 04                         byte_10716:	dc.b 4
00011EAF E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011EB4 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011EB9 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011EBE 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011EC3 02                         byte_1072B:	dc.b 2
00011EC4 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011EC9 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011ECE 04                         byte_10736:	dc.b 4
00011ECF E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011ED4 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011ED9 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00011EDE 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011EE3 03                         byte_1074B:	dc.b 3
00011EE4 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011EE9 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00011EEE 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00011EF3 01                         byte_1075B:	dc.b 1
00011EF4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011EF9 02                         byte_10761:	dc.b 2
00011EFA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011EFF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011F04 04                         byte_1076C:	dc.b 4
00011F05 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00011F0A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00011F0F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00011F14 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00011F1A 00                         		even
00011F1A 00                         		even
00011F1A                            
00011F1A                            ; ===========================================================================
00011F1A                            ; ---------------------------------------------------------------------------
00011F1A                            ; Object 57 - spiked balls (SYZ, LZ)
00011F1A                            ; ---------------------------------------------------------------------------
00011F1A                            
00011F1A                            Obj57:					; XREF: Obj_Index
00011F1A 7000                       		moveq	#0,d0
00011F1C 1028 0024                  		move.b	$24(a0),d0
00011F20 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00011F24 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00011F28                            ; ===========================================================================
00011F28 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00011F2A 0000                       		dc.w Obj57_Move-Obj57_Index
00011F2C 0000                       		dc.w Obj57_Display-Obj57_Index
00011F2E                            ; ===========================================================================
00011F2E                            
00011F2E                            Obj57_Main:				; XREF: Obj57_Index
00011F2E 5428 0024                  		addq.b	#2,$24(a0)
00011F32 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00011F3A 317C 03BA 0002             		move.w	#$3BA,2(a0)
00011F40 117C 0004 0001             		move.b	#4,1(a0)
00011F46 117C 0004 0018             		move.b	#4,$18(a0)
00011F4C 117C 0008 0019             		move.b	#8,$19(a0)
00011F52 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011F58 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011F5E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011F64 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011F6A 6600                       		bne.s	loc_107E8
00011F6C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011F72 317C 0310 0002             		move.w	#$310,2(a0)
00011F78 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011F80                            
00011F80                            loc_107E8:
00011F80 1228 0028                  		move.b	$28(a0),d1	; get object type
00011F84 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011F88 4881                       		ext.w	d1
00011F8A E741                       		asl.w	#3,d1		; multiply by 8
00011F8C 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011F90 1028 0022                  		move.b	$22(a0),d0
00011F94 E418                       		ror.b	#2,d0
00011F96 0200 00C0                  		andi.b	#-$40,d0
00011F9A 1140 0026                  		move.b	d0,$26(a0)
00011F9E 45E8 0029                  		lea	$29(a0),a2
00011FA2 1228 0028                  		move.b	$28(a0),d1	; get object type
00011FA6 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011FAA 14FC 0000                  		move.b	#0,(a2)+
00011FAE 3601                       		move.w	d1,d3
00011FB0 E94B                       		lsl.w	#4,d3
00011FB2 1143 003C                  		move.b	d3,$3C(a0)
00011FB6 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011FB8 6500                       		bcs.s	loc_10894
00011FBA 0828 0003 0028             		btst	#3,$28(a0)
00011FC0 6700                       		beq.s	Obj57_MakeChain
00011FC2 5341                       		subq.w	#1,d1
00011FC4 6500                       		bcs.s	loc_10894
00011FC6                            
00011FC6                            Obj57_MakeChain:
00011FC6 6100 CF6C                  		bsr.w	SingleObjLoad
00011FCA 6600                       		bne.s	loc_10894
00011FCC 5228 0029                  		addq.b	#1,$29(a0)
00011FD0 3A09                       		move.w	a1,d5
00011FD2 0445 D000                  		subi.w	#-$3000,d5
00011FD6 EC4D                       		lsr.w	#6,d5
00011FD8 0245 007F                  		andi.w	#$7F,d5
00011FDC 14C5                       		move.b	d5,(a2)+
00011FDE 137C 0004 0024             		move.b	#4,$24(a1)
00011FE4 1290                       		move.b	0(a0),0(a1)
00011FE6 2368 0004 0004             		move.l	4(a0),4(a1)
00011FEC 3368 0002 0002             		move.w	2(a0),2(a1)
00011FF2 1368 0001 0001             		move.b	1(a0),1(a1)
00011FF8 1368 0018 0018             		move.b	$18(a0),$18(a1)
00011FFE 1368 0019 0019             		move.b	$19(a0),$19(a1)
00012004 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001200A 0403 0010                  		subi.b	#$10,d3
0001200E 1343 003C                  		move.b	d3,$3C(a1)
00012012 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00012018 6600                       		bne.s	loc_10890
0001201A 4A03                       		tst.b	d3
0001201C 6600                       		bne.s	loc_10890
0001201E 137C 0002 001A             		move.b	#2,$1A(a1)
00012024                            
00012024                            loc_10890:
00012024 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00012028                            
00012028                            loc_10894:
00012028 3A08                       		move.w	a0,d5
0001202A 0445 D000                  		subi.w	#-$3000,d5
0001202E EC4D                       		lsr.w	#6,d5
00012030 0245 007F                  		andi.w	#$7F,d5
00012034 14C5                       		move.b	d5,(a2)+
00012036 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001203C 6600                       		bne.s	Obj57_Move
0001203E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00012044 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001204A                            
0001204A                            Obj57_Move:				; XREF: Obj57_Index
0001204A 6100 0000                  		bsr.w	Obj57_MoveSub
0001204E 6000 0000                  		bra.w	Obj57_ChkDel
00012052                            ; ===========================================================================
00012052                            
00012052                            Obj57_MoveSub:				; XREF: Obj57_Move
00012052 3028 003E                  		move.w	$3E(a0),d0
00012056 D168 0026                  		add.w	d0,$26(a0)
0001205A 1028 0026                  		move.b	$26(a0),d0
0001205E 4EB9 0000 29CC             		jsr	(CalcSine).l
00012064 3428 0038                  		move.w	$38(a0),d2
00012068 3628 003A                  		move.w	$3A(a0),d3
0001206C 45E8 0029                  		lea	$29(a0),a2
00012070 7C00                       		moveq	#0,d6
00012072 1C1A                       		move.b	(a2)+,d6
00012074                            
00012074                            Obj57_MoveLoop:
00012074 7800                       		moveq	#0,d4
00012076 181A                       		move.b	(a2)+,d4
00012078 ED4C                       		lsl.w	#6,d4
0001207A 0684 00FF D000             		addi.l	#$FFD000,d4
00012080 2244                       		movea.l	d4,a1
00012082 7800                       		moveq	#0,d4
00012084 1829 003C                  		move.b	$3C(a1),d4
00012088 2A04                       		move.l	d4,d5
0001208A C9C0                       		muls.w	d0,d4
0001208C E084                       		asr.l	#8,d4
0001208E CBC1                       		muls.w	d1,d5
00012090 E085                       		asr.l	#8,d5
00012092 D842                       		add.w	d2,d4
00012094 DA43                       		add.w	d3,d5
00012096 3344 000C                  		move.w	d4,$C(a1)
0001209A 3345 0008                  		move.w	d5,8(a1)
0001209E 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000120A2 4E75                       		rts	
000120A4                            ; ===========================================================================
000120A4                            
000120A4                            Obj57_ChkDel:				; XREF: Obj57_Move
000120A4 3028 003A                  		move.w	$3A(a0),d0
000120A8 0240 FF80                  		andi.w	#$FF80,d0
000120AC 3238 F700                  		move.w	($FFFFF700).w,d1
000120B0 0441 0080                  		subi.w	#$80,d1
000120B4 0241 FF80                  		andi.w	#$FF80,d1
000120B8 9041                       		sub.w	d1,d0
000120BA 0C40 0280                  		cmpi.w	#$280,d0
000120BE 6300 C71E                  		bls.w	DisplaySprite
000120C2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000120C6 6700                       		beq.s	Obj57_Delete	; if it's zero, object was placed in debug mode
000120C8 3440                       		movea.w	d0,a2	; load address into a2
000120CA 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000120CE                            ; ===========================================================================
000120CE                            
000120CE                            Obj57_Delete:				; XREF: Obj57_ChkDel
000120CE 7400                       		moveq	#0,d2
000120D0 45E8 0029                  		lea	$29(a0),a2
000120D4 141A                       		move.b	(a2)+,d2
000120D6                            
000120D6                            Obj57_DelLoop:
000120D6 7000                       		moveq	#0,d0
000120D8 101A                       		move.b	(a2)+,d0
000120DA ED48                       		lsl.w	#6,d0
000120DC 0680 00FF D000             		addi.l	#$FFD000,d0
000120E2 2240                       		movea.l	d0,a1
000120E4 6100 C74A                  		bsr.w	DeleteObject2
000120E8 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000120EC                            
000120EC 4E75                       		rts	
000120EE                            ; ===========================================================================
000120EE                            
000120EE                            Obj57_Display:				; XREF: Obj57_Index
000120EE 6000 C6EE                  		bra.w	DisplaySprite
000120F2                            ; ===========================================================================
000120F2                            ; ---------------------------------------------------------------------------
000120F2                            ; Sprite mappings - chain of spiked balls (SYZ)
000120F2                            ; ---------------------------------------------------------------------------
000120F2                            Map_obj57:
000120F2                            	include "_maps\obj57syz.asm"
000120F2                            ; ---------------------------------------------------------------------------
000120F2                            ; Sprite mappings - chain of spiked balls (SYZ)
000120F2                            ; ---------------------------------------------------------------------------
000120F2 0000                       		dc.w byte_10958-Map_obj57
000120F4 01                         byte_10958:	dc.b 1
000120F5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000120FA                            		even
000120FA                            		even
000120FA                            
000120FA                            ; ---------------------------------------------------------------------------
000120FA                            ; Sprite mappings - spiked ball	on a chain (LZ)
000120FA                            ; ---------------------------------------------------------------------------
000120FA                            Map_obj57a:
000120FA                            	include "_maps\obj57lz.asm"
000120FA                            ; ---------------------------------------------------------------------------
000120FA                            ; Sprite mappings - spiked ball	on a chain (LZ)
000120FA                            ; ---------------------------------------------------------------------------
000120FA 0000                       		dc.w byte_10964-Map_obj57a
000120FC 0000                       		dc.w byte_1096A-Map_obj57a
000120FE 0000                       		dc.w byte_10970-Map_obj57a
00012100 01                         byte_10964:	dc.b 1
00012101 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012106 01                         byte_1096A:	dc.b 1
00012107 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001210C 01                         byte_10970:	dc.b 1
0001210D F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00012112                            		even
00012112                            		even
00012112                            
00012112                            ; ===========================================================================
00012112                            ; ---------------------------------------------------------------------------
00012112                            ; Object 58 - giant spiked balls (SYZ)
00012112                            ; ---------------------------------------------------------------------------
00012112                            
00012112                            Obj58:					; XREF: Obj_Index
00012112 7000                       		moveq	#0,d0
00012114 1028 0024                  		move.b	$24(a0),d0
00012118 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001211C 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00012120                            ; ===========================================================================
00012120 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00012122 0000                       		dc.w Obj58_Move-Obj58_Index
00012124                            ; ===========================================================================
00012124                            
00012124                            Obj58_Main:				; XREF: Obj58_Index
00012124 5428 0024                  		addq.b	#2,$24(a0)
00012128 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00012130 317C 0396 0002             		move.w	#$396,2(a0)
00012136 117C 0004 0001             		move.b	#4,1(a0)
0001213C 117C 0004 0018             		move.b	#4,$18(a0)
00012142 117C 0018 0019             		move.b	#$18,$19(a0)
00012148 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001214E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00012154 117C 0086 0020             		move.b	#$86,$20(a0)
0001215A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001215E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012162 4881                       		ext.w	d1
00012164 E741                       		asl.w	#3,d1		; multiply by 8
00012166 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001216A 1028 0022                  		move.b	$22(a0),d0
0001216E E418                       		ror.b	#2,d0
00012170 0200 00C0                  		andi.b	#$C0,d0
00012174 1140 0026                  		move.b	d0,$26(a0)
00012178 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0001217E                            
0001217E                            Obj58_Move:				; XREF: Obj58_Index
0001217E 7000                       		moveq	#0,d0
00012180 1028 0028                  		move.b	$28(a0),d0	; get object type
00012184 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012188 D040                       		add.w	d0,d0
0001218A 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0001218E 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00012192 3028 003A                  		move.w	$3A(a0),d0
00012196 0240 FF80                  		andi.w	#$FF80,d0
0001219A 3238 F700                  		move.w	($FFFFF700).w,d1
0001219E 0441 0080                  		subi.w	#$80,d1
000121A2 0241 FF80                  		andi.w	#$FF80,d1
000121A6 9041                       		sub.w	d1,d0
000121A8 0C40 0280                  		cmpi.w	#$280,d0
000121AC 6300 C630                  		bls.w	DisplaySprite
000121B0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000121B4 6700 C678                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000121B8 3440                       		movea.w	d0,a2	; load address into a2
000121BA 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000121BE 6000 C66E                  		bra.w	DeleteObject
000121C2                            ; ===========================================================================
000121C2 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000121C4 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000121C6 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000121C8 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000121CA                            ; ===========================================================================
000121CA                            
000121CA                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000121CA 4E75                       		rts	
000121CC                            ; ===========================================================================
000121CC                            
000121CC                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000121CC 323C 0060                  		move.w	#$60,d1
000121D0 7000                       		moveq	#0,d0
000121D2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000121D6 0828 0000 0022             		btst	#0,$22(a0)
000121DC 6700                       		beq.s	loc_10A38
000121DE 4440                       		neg.w	d0
000121E0 D041                       		add.w	d1,d0
000121E2                            
000121E2                            loc_10A38:
000121E2 3228 003A                  		move.w	$3A(a0),d1
000121E6 9240                       		sub.w	d0,d1
000121E8 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000121EC 4E75                       		rts	
000121EE                            ; ===========================================================================
000121EE                            
000121EE                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000121EE 323C 0060                  		move.w	#$60,d1
000121F2 7000                       		moveq	#0,d0
000121F4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000121F8 0828 0000 0022             		btst	#0,$22(a0)
000121FE 6700                       		beq.s	loc_10A5C
00012200 4440                       		neg.w	d0
00012202 0640 0080                  		addi.w	#$80,d0
00012206                            
00012206                            loc_10A5C:
00012206 3228 0038                  		move.w	$38(a0),d1
0001220A 9240                       		sub.w	d0,d1
0001220C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00012210 4E75                       		rts	
00012212                            ; ===========================================================================
00012212                            
00012212                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00012212 3028 003E                  		move.w	$3E(a0),d0
00012216 D168 0026                  		add.w	d0,$26(a0)
0001221A 1028 0026                  		move.b	$26(a0),d0
0001221E 4EB9 0000 29CC             		jsr	(CalcSine).l
00012224 3428 0038                  		move.w	$38(a0),d2
00012228 3628 003A                  		move.w	$3A(a0),d3
0001222C 7800                       		moveq	#0,d4
0001222E 1828 003C                  		move.b	$3C(a0),d4
00012232 2A04                       		move.l	d4,d5
00012234 C9C0                       		muls.w	d0,d4
00012236 E084                       		asr.l	#8,d4
00012238 CBC1                       		muls.w	d1,d5
0001223A E085                       		asr.l	#8,d5
0001223C D842                       		add.w	d2,d4
0001223E DA43                       		add.w	d3,d5
00012240 3144 000C                  		move.w	d4,$C(a0)
00012244 3145 0008                  		move.w	d5,8(a0)
00012248 4E75                       		rts	
0001224A                            ; ===========================================================================
0001224A                            ; ---------------------------------------------------------------------------
0001224A                            ; Sprite mappings - SBZ	spiked ball on a chain
0001224A                            ; ---------------------------------------------------------------------------
0001224A                            Map_obj15b:
0001224A                            	include "_maps\obj15sbz.asm"
0001224A                            ; ---------------------------------------------------------------------------
0001224A                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001224A                            ; ---------------------------------------------------------------------------
0001224A 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001224E 0000                       		dc.w byte_10AC6-Map_obj15b
00012250 05                         byte_10AA6:	dc.b 5
00012251 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00012256 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001225B F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00012260 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00012265 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001226A 01                         byte_10AC0:	dc.b 1
0001226B F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00012270 02                         byte_10AC6:	dc.b 2
00012271 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00012276 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001227C 00                         		even
0001227C 00                         		even
0001227C                            
0001227C                            ; ===========================================================================
0001227C                            ; ---------------------------------------------------------------------------
0001227C                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001227C                            ; ---------------------------------------------------------------------------
0001227C                            
0001227C                            Obj59:					; XREF: Obj_Index
0001227C 7000                       		moveq	#0,d0
0001227E 1028 0024                  		move.b	$24(a0),d0
00012282 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00012286 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001228A 3028 0032                  		move.w	$32(a0),d0
0001228E 0240 FF80                  		andi.w	#$FF80,d0
00012292 3238 F700                  		move.w	($FFFFF700).w,d1
00012296 0441 0080                  		subi.w	#$80,d1
0001229A 0241 FF80                  		andi.w	#$FF80,d1
0001229E 9041                       		sub.w	d1,d0
000122A0 0C40 0280                  		cmpi.w	#$280,d0
000122A4 6300 C538                  		bls.w	DisplaySprite
000122A8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000122AC 6700 C580                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000122B0 3440                       		movea.w	d0,a2	; load address into a2
000122B2 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000122B6 6000 C576                  		bra.w	DeleteObject
000122BA                            ; ===========================================================================
000122BA 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000122BC 0000                       		dc.w Obj59_Platform-Obj59_Index
000122BE 0000                       		dc.w Obj59_Action-Obj59_Index
000122C0 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000122C2                            
000122C2 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000122C4                            
000122C4 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000122C6 2001                       		dc.b $20, 1
000122C8 3401                       		dc.b $34, 1
000122CA 1003                       		dc.b $10, 3
000122CC 2003                       		dc.b $20, 3
000122CE 3403                       		dc.b $34, 3
000122D0 1401                       		dc.b $14, 1
000122D2 2401                       		dc.b $24, 1
000122D4 2C01                       		dc.b $2C, 1
000122D6 1403                       		dc.b $14, 3
000122D8 2403                       		dc.b $24, 3
000122DA 2C03                       		dc.b $2C, 3
000122DC 2005                       		dc.b $20, 5
000122DE 2007                       		dc.b $20, 7
000122E0 3009                       		dc.b $30, 9
000122E2                            ; ===========================================================================
000122E2                            
000122E2                            Obj59_Main:				; XREF: Obj59_Index
000122E2 5428 0024                  		addq.b	#2,$24(a0)
000122E6 7000                       		moveq	#0,d0
000122E8 1028 0028                  		move.b	$28(a0),d0
000122EC 6A00                       		bpl.s	Obj59_Main2
000122EE 5828 0024                  		addq.b	#4,$24(a0)
000122F2 0240 007F                  		andi.w	#$7F,d0
000122F6 C0FC 0006                  		mulu.w	#6,d0
000122FA 3140 003C                  		move.w	d0,$3C(a0)
000122FE 3140 003E                  		move.w	d0,$3E(a0)
00012302 588F                       		addq.l	#4,sp
00012304 4E75                       		rts	
00012306                            ; ===========================================================================
00012306                            
00012306                            Obj59_Main2:
00012306 E648                       		lsr.w	#3,d0
00012308 0240 001E                  		andi.w	#$1E,d0
0001230C 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00012310 115A 0019                  		move.b	(a2)+,$19(a0)
00012314 115A 001A                  		move.b	(a2)+,$1A(a0)
00012318 7000                       		moveq	#0,d0
0001231A 1028 0028                  		move.b	$28(a0),d0
0001231E D040                       		add.w	d0,d0
00012320 0240 001E                  		andi.w	#$1E,d0
00012324 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00012328 101A                       		move.b	(a2)+,d0
0001232A E548                       		lsl.w	#2,d0
0001232C 3140 003C                  		move.w	d0,$3C(a0)
00012330 115A 0028                  		move.b	(a2)+,$28(a0)
00012334 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001233C 317C 4000 0002             		move.w	#$4000,2(a0)
00012342 117C 0004 0001             		move.b	#4,1(a0)
00012348 117C 0004 0018             		move.b	#4,$18(a0)
0001234E 3168 0008 0032             		move.w	8(a0),$32(a0)
00012354 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001235A                            
0001235A                            Obj59_Platform:				; XREF: Obj59_Index
0001235A 7200                       		moveq	#0,d1
0001235C 1228 0019                  		move.b	$19(a0),d1
00012360 4EB9 0000 8510             		jsr	(PlatformObject).l
00012366 6000 0000                  		bra.w	Obj59_Types
0001236A                            ; ===========================================================================
0001236A                            
0001236A                            Obj59_Action:				; XREF: Obj59_Index
0001236A 7200                       		moveq	#0,d1
0001236C 1228 0019                  		move.b	$19(a0),d1
00012370 4EB9 0000 8684             		jsr	(ExitPlatform).l
00012376 3F28 0008                  		move.w	8(a0),-(sp)
0001237A 6100 0000                  		bsr.w	Obj59_Types
0001237E 341F                       		move.w	(sp)+,d2
00012380 4A10                       		tst.b	0(a0)
00012382 6700                       		beq.s	locret_10BD4
00012384 4EF9 0000 8BFA             		jmp	(MvSonicOnPtfm2).l
0001238A                            ; ===========================================================================
0001238A                            
0001238A                            locret_10BD4:
0001238A 4E75                       		rts	
0001238C                            ; ===========================================================================
0001238C                            
0001238C                            Obj59_Types:
0001238C 7000                       		moveq	#0,d0
0001238E 1028 0028                  		move.b	$28(a0),d0
00012392 0240 000F                  		andi.w	#$F,d0
00012396 D040                       		add.w	d0,d0
00012398 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001239C 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000123A0                            ; ===========================================================================
000123A0 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000123A4 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000123A8 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000123AC 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000123B0 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000123B4                            ; ===========================================================================
000123B4                            
000123B4                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000123B4 4E75                       		rts	
000123B6                            ; ===========================================================================
000123B6                            
000123B6                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000123B6 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000123BC 6600                       		bne.s	locret_10C0C
000123BE 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000123C2                            
000123C2                            locret_10C0C:
000123C2 4E75                       		rts	
000123C4                            ; ===========================================================================
000123C4                            
000123C4                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000123C4 6100 0000                  		bsr.w	Obj59_Move
000123C8 3028 0034                  		move.w	$34(a0),d0
000123CC 4440                       		neg.w	d0
000123CE D068 0030                  		add.w	$30(a0),d0
000123D2 3140 000C                  		move.w	d0,$C(a0)
000123D6 4E75                       		rts	
000123D8                            ; ===========================================================================
000123D8                            
000123D8                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000123D8 6100 0000                  		bsr.w	Obj59_Move
000123DC 3028 0034                  		move.w	$34(a0),d0
000123E0 D068 0030                  		add.w	$30(a0),d0
000123E4 3140 000C                  		move.w	d0,$C(a0)
000123E8 4E75                       		rts	
000123EA                            ; ===========================================================================
000123EA                            
000123EA                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000123EA 6100 0000                  		bsr.w	Obj59_Move
000123EE 3028 0034                  		move.w	$34(a0),d0
000123F2 E240                       		asr.w	#1,d0
000123F4 4440                       		neg.w	d0
000123F6 D068 0030                  		add.w	$30(a0),d0
000123FA 3140 000C                  		move.w	d0,$C(a0)
000123FE 3028 0034                  		move.w	$34(a0),d0
00012402 D068 0032                  		add.w	$32(a0),d0
00012406 3140 0008                  		move.w	d0,8(a0)
0001240A 4E75                       		rts	
0001240C                            ; ===========================================================================
0001240C                            
0001240C                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001240C 6100 0000                  		bsr.w	Obj59_Move
00012410 3028 0034                  		move.w	$34(a0),d0
00012414 E240                       		asr.w	#1,d0
00012416 D068 0030                  		add.w	$30(a0),d0
0001241A 3140 000C                  		move.w	d0,$C(a0)
0001241E 3028 0034                  		move.w	$34(a0),d0
00012422 4440                       		neg.w	d0
00012424 D068 0032                  		add.w	$32(a0),d0
00012428 3140 0008                  		move.w	d0,8(a0)
0001242C 4E75                       		rts	
0001242E                            ; ===========================================================================
0001242E                            
0001242E                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001242E 6100 0000                  		bsr.w	Obj59_Move
00012432 3028 0034                  		move.w	$34(a0),d0
00012436 4440                       		neg.w	d0
00012438 D068 0030                  		add.w	$30(a0),d0
0001243C 3140 000C                  		move.w	d0,$C(a0)
00012440 4A28 0028                  		tst.b	$28(a0)
00012444 6700 0000                  		beq.w	loc_10C94
00012448 4E75                       		rts	
0001244A                            ; ===========================================================================
0001244A                            
0001244A                            loc_10C94:
0001244A 0828 0003 0022             		btst	#3,$22(a0)
00012450 6700                       		beq.s	Obj59_Delete
00012452 08E9 0001 0022             		bset	#1,$22(a1)
00012458 08A9 0003 0022             		bclr	#3,$22(a1)
0001245E 137C 0002 0024             		move.b	#2,$24(a1)
00012464                            
00012464                            Obj59_Delete:
00012464 6000 C3C8                  		bra.w	DeleteObject
00012468                            
00012468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012468                            
00012468                            
00012468                            Obj59_Move:				; XREF: Obj59_Type02; et al
00012468 3028 0038                  		move.w	$38(a0),d0
0001246C 4A28 003A                  		tst.b	$3A(a0)
00012470 6600                       		bne.s	loc_10CC8
00012472 0C40 0800                  		cmpi.w	#$800,d0
00012476 6400                       		bcc.s	loc_10CD0
00012478 0640 0010                  		addi.w	#$10,d0
0001247C 6000                       		bra.s	loc_10CD0
0001247E                            ; ===========================================================================
0001247E                            
0001247E                            loc_10CC8:
0001247E 4A40                       		tst.w	d0
00012480 6700                       		beq.s	loc_10CD0
00012482 0440 0010                  		subi.w	#$10,d0
00012486                            
00012486                            loc_10CD0:
00012486 3140 0038                  		move.w	d0,$38(a0)
0001248A 48C0                       		ext.l	d0
0001248C E180                       		asl.l	#8,d0
0001248E D0A8 0034                  		add.l	$34(a0),d0
00012492 2140 0034                  		move.l	d0,$34(a0)
00012496 4840                       		swap	d0
00012498 3428 003C                  		move.w	$3C(a0),d2
0001249C B042                       		cmp.w	d2,d0
0001249E 6300                       		bls.s	loc_10CF0
000124A0 117C 0001 003A             		move.b	#1,$3A(a0)
000124A6                            
000124A6                            loc_10CF0:
000124A6 D442                       		add.w	d2,d2
000124A8 B042                       		cmp.w	d2,d0
000124AA 6600                       		bne.s	locret_10CFA
000124AC 4228 0028                  		clr.b	$28(a0)
000124B0                            
000124B0                            locret_10CFA:
000124B0 4E75                       		rts	
000124B2                            ; End of function Obj59_Move
000124B2                            
000124B2                            ; ===========================================================================
000124B2                            
000124B2                            Obj59_MakeMulti:			; XREF: Obj59_Index
000124B2 5368 003C                  		subq.w	#1,$3C(a0)
000124B6 6600                       		bne.s	Obj59_ChkDel
000124B8 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000124BE 6100 CA74                  		bsr.w	SingleObjLoad
000124C2 6600                       		bne.s	Obj59_ChkDel
000124C4 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000124C8 3368 0008 0008             		move.w	8(a0),8(a1)
000124CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000124D4 137C 000E 0028             		move.b	#$E,$28(a1)
000124DA                            
000124DA                            Obj59_ChkDel:
000124DA 588F                       		addq.l	#4,sp
000124DC 3028 0008                  		move.w	8(a0),d0
000124E0 0240 FF80                  		andi.w	#$FF80,d0
000124E4 3238 F700                  		move.w	($FFFFF700).w,d1
000124E8 0441 0080                  		subi.w	#$80,d1
000124EC 0241 FF80                  		andi.w	#$FF80,d1
000124F0 9041                       		sub.w	d1,d0
000124F2 0C40 0280                  		cmpi.w	#$280,d0
000124F6 6200 C336                  		bhi.w	DeleteObject
000124FA 4E75                       		rts	
000124FC                            ; ===========================================================================
000124FC                            ; ---------------------------------------------------------------------------
000124FC                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000124FC                            ; ---------------------------------------------------------------------------
000124FC                            Map_obj59:
000124FC                            	include "_maps\obj59.asm"
000124FC                            ; ---------------------------------------------------------------------------
000124FC                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000124FC                            ; ---------------------------------------------------------------------------
000124FC 0000                       		dc.w byte_10D4A-Map_obj59
000124FE 03                         byte_10D4A:	dc.b 3
000124FF F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012504 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012509 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001250E                            		even
0001250E                            		even
0001250E                            
0001250E                            ; ===========================================================================
0001250E                            ; ---------------------------------------------------------------------------
0001250E                            ; Object 5A - platforms	moving in circles (SLZ)
0001250E                            ; ---------------------------------------------------------------------------
0001250E                            
0001250E                            Obj5A:					; XREF: Obj_Index
0001250E 7000                       		moveq	#0,d0
00012510 1028 0024                  		move.b	$24(a0),d0
00012514 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00012518 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001251C 3028 0032                  		move.w	$32(a0),d0
00012520 0240 FF80                  		andi.w	#$FF80,d0
00012524 3238 F700                  		move.w	($FFFFF700).w,d1
00012528 0441 0080                  		subi.w	#$80,d1
0001252C 0241 FF80                  		andi.w	#$FF80,d1
00012530 9041                       		sub.w	d1,d0
00012532 0C40 0280                  		cmpi.w	#$280,d0
00012536 6300 C2A6                  		bls.w	DisplaySprite
0001253A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001253E 6700 C2EE                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00012542 3440                       		movea.w	d0,a2	; load address into a2
00012544 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00012548 6000 C2E4                  		bra.w	DeleteObject
0001254C                            ; ===========================================================================
0001254C 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001254E 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00012550 0000                       		dc.w Obj5A_Action-Obj5A_Index
00012552                            ; ===========================================================================
00012552                            
00012552                            Obj5A_Main:				; XREF: Obj5A_Index
00012552 5428 0024                  		addq.b	#2,$24(a0)
00012556 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001255E 317C 4000 0002             		move.w	#$4000,2(a0)
00012564 117C 0004 0001             		move.b	#4,1(a0)
0001256A 117C 0004 0018             		move.b	#4,$18(a0)
00012570 117C 0018 0019             		move.b	#$18,$19(a0)
00012576 3168 0008 0032             		move.w	8(a0),$32(a0)
0001257C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012582                            
00012582                            Obj5A_Platform:				; XREF: Obj5A_Index
00012582 7200                       		moveq	#0,d1
00012584 1228 0019                  		move.b	$19(a0),d1
00012588 4EB9 0000 8510             		jsr	(PlatformObject).l
0001258E 6000 0000                  		bra.w	Obj5A_Types
00012592                            ; ===========================================================================
00012592                            
00012592                            Obj5A_Action:				; XREF: Obj5A_Index
00012592 7200                       		moveq	#0,d1
00012594 1228 0019                  		move.b	$19(a0),d1
00012598 4EB9 0000 8684             		jsr	(ExitPlatform).l
0001259E 3F28 0008                  		move.w	8(a0),-(sp)
000125A2 6100 0000                  		bsr.w	Obj5A_Types
000125A6 341F                       		move.w	(sp)+,d2
000125A8 4EF9 0000 8BFA             		jmp	(MvSonicOnPtfm2).l
000125AE                            ; ===========================================================================
000125AE                            
000125AE                            Obj5A_Types:
000125AE 7000                       		moveq	#0,d0
000125B0 1028 0028                  		move.b	$28(a0),d0
000125B4 0240 000C                  		andi.w	#$C,d0
000125B8 E248                       		lsr.w	#1,d0
000125BA 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000125BE 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000125C2                            ; ===========================================================================
000125C2 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000125C4 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000125C6                            ; ===========================================================================
000125C6                            
000125C6                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000125C6 1238 FE80                  		move.b	($FFFFFE80).w,d1
000125CA 0401 0050                  		subi.b	#$50,d1
000125CE 4881                       		ext.w	d1
000125D0 1438 FE84                  		move.b	($FFFFFE84).w,d2
000125D4 0402 0050                  		subi.b	#$50,d2
000125D8 4882                       		ext.w	d2
000125DA 0828 0000 0028             		btst	#0,$28(a0)
000125E0 6700                       		beq.s	loc_10E24
000125E2 4441                       		neg.w	d1
000125E4 4442                       		neg.w	d2
000125E6                            
000125E6                            loc_10E24:
000125E6 0828 0001 0028             		btst	#1,$28(a0)
000125EC 6700                       		beq.s	loc_10E30
000125EE 4441                       		neg.w	d1
000125F0 C342                       		exg	d1,d2
000125F2                            
000125F2                            loc_10E30:
000125F2 D268 0032                  		add.w	$32(a0),d1
000125F6 3141 0008                  		move.w	d1,8(a0)
000125FA D468 0030                  		add.w	$30(a0),d2
000125FE 3142 000C                  		move.w	d2,$C(a0)
00012602 4E75                       		rts	
00012604                            ; ===========================================================================
00012604                            
00012604                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00012604 1238 FE80                  		move.b	($FFFFFE80).w,d1
00012608 0401 0050                  		subi.b	#$50,d1
0001260C 4881                       		ext.w	d1
0001260E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012612 0402 0050                  		subi.b	#$50,d2
00012616 4882                       		ext.w	d2
00012618 0828 0000 0028             		btst	#0,$28(a0)
0001261E 6700                       		beq.s	loc_10E62
00012620 4441                       		neg.w	d1
00012622 4442                       		neg.w	d2
00012624                            
00012624                            loc_10E62:
00012624 0828 0001 0028             		btst	#1,$28(a0)
0001262A 6700                       		beq.s	loc_10E6E
0001262C 4441                       		neg.w	d1
0001262E C342                       		exg	d1,d2
00012630                            
00012630                            loc_10E6E:
00012630 4441                       		neg.w	d1
00012632 D268 0032                  		add.w	$32(a0),d1
00012636 3141 0008                  		move.w	d1,8(a0)
0001263A D468 0030                  		add.w	$30(a0),d2
0001263E 3142 000C                  		move.w	d2,$C(a0)
00012642 4E75                       		rts	
00012644                            ; ===========================================================================
00012644                            ; ---------------------------------------------------------------------------
00012644                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012644                            ; ---------------------------------------------------------------------------
00012644                            Map_obj5A:
00012644                            	include "_maps\obj5A.asm"
00012644                            ; ---------------------------------------------------------------------------
00012644                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012644                            ; ---------------------------------------------------------------------------
00012644 0000                       		dc.w byte_10E84-Map_obj5A
00012646 02                         byte_10E84:	dc.b 2
00012647 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001264C F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012652 00                         		even
00012652 00                         		even
00012652                            
00012652                            ; ===========================================================================
00012652                            ; ---------------------------------------------------------------------------
00012652                            ; Object 5B - blocks that form a staircase (SLZ)
00012652                            ; ---------------------------------------------------------------------------
00012652                            
00012652                            Obj5B:					; XREF: Obj_Index
00012652 7000                       		moveq	#0,d0
00012654 1028 0024                  		move.b	$24(a0),d0
00012658 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001265C 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00012660 3028 0030                  		move.w	$30(a0),d0
00012664 0240 FF80                  		andi.w	#$FF80,d0
00012668 3238 F700                  		move.w	($FFFFF700).w,d1
0001266C 0441 0080                  		subi.w	#$80,d1
00012670 0241 FF80                  		andi.w	#$FF80,d1
00012674 9041                       		sub.w	d1,d0
00012676 0C40 0280                  		cmpi.w	#$280,d0
0001267A 6300 C162                  		bls.w	DisplaySprite
0001267E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012682 6700 C1AA                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00012686 3440                       		movea.w	d0,a2	; load address into a2
00012688 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0001268C 6000 C1A0                  		bra.w	DeleteObject
00012690                            ; ===========================================================================
00012690 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00012692 0000                       		dc.w Obj5B_Move-Obj5B_Index
00012694 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00012696                            ; ===========================================================================
00012696                            
00012696                            Obj5B_Main:				; XREF: Obj5B_Index
00012696 5428 0024                  		addq.b	#2,$24(a0)
0001269A 7638                       		moveq	#$38,d3
0001269C 7801                       		moveq	#1,d4
0001269E 0828 0000 0022             		btst	#0,$22(a0)
000126A4 6700                       		beq.s	loc_10EDA
000126A6 763B                       		moveq	#$3B,d3
000126A8 78FF                       		moveq	#-1,d4
000126AA                            
000126AA                            loc_10EDA:
000126AA 3428 0008                  		move.w	8(a0),d2
000126AE 2248                       		movea.l	a0,a1
000126B0 7203                       		moveq	#3,d1
000126B2 6000                       		bra.s	Obj5B_MakeBlocks
000126B4                            ; ===========================================================================
000126B4                            
000126B4                            Obj5B_Loop:
000126B4 6100 C894                  		bsr.w	SingleObjLoad2
000126B8 6600 0000                  		bne.w	Obj5B_Move
000126BC 137C 0004 0024             		move.b	#4,$24(a1)
000126C2                            
000126C2                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000126C2 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000126C6 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000126CE 337C 4000 0002             		move.w	#$4000,2(a1)
000126D4 137C 0004 0001             		move.b	#4,1(a1)
000126DA 137C 0003 0018             		move.b	#3,$18(a1)
000126E0 137C 0010 0019             		move.b	#$10,$19(a1)
000126E6 1368 0028 0028             		move.b	$28(a0),$28(a1)
000126EC 3342 0008                  		move.w	d2,8(a1)
000126F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000126F6 3368 0008 0030             		move.w	8(a0),$30(a1)
000126FC 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012702 0642 0020                  		addi.w	#$20,d2
00012706 1343 0037                  		move.b	d3,$37(a1)
0001270A 2348 003C                  		move.l	a0,$3C(a1)
0001270E D604                       		add.b	d4,d3
00012710 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012714                            
00012714                            Obj5B_Move:				; XREF: Obj5B_Index
00012714 7000                       		moveq	#0,d0
00012716 1028 0028                  		move.b	$28(a0),d0
0001271A 0240 0007                  		andi.w	#7,d0
0001271E D040                       		add.w	d0,d0
00012720 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012724 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00012728                            
00012728                            Obj5B_Solid:				; XREF: Obj5B_Index
00012728 2468 003C                  		movea.l	$3C(a0),a2
0001272C 7000                       		moveq	#0,d0
0001272E 1028 0037                  		move.b	$37(a0),d0
00012732 1032 0000                  		move.b	(a2,d0.w),d0
00012736 D068 0032                  		add.w	$32(a0),d0
0001273A 3140 000C                  		move.w	d0,$C(a0)
0001273E 7200                       		moveq	#0,d1
00012740 1228 0019                  		move.b	$19(a0),d1
00012744 0641 000B                  		addi.w	#$B,d1
00012748 343C 0010                  		move.w	#$10,d2
0001274C 363C 0011                  		move.w	#$11,d3
00012750 3828 0008                  		move.w	8(a0),d4
00012754 6100 E9F6                  		bsr.w	SolidObject
00012758 4A04                       		tst.b	d4
0001275A 6A00                       		bpl.s	loc_10F92
0001275C 1544 0036                  		move.b	d4,$36(a2)
00012760                            
00012760                            loc_10F92:
00012760 0828 0003 0022             		btst	#3,$22(a0)
00012766 6700                       		beq.s	locret_10FA0
00012768 157C 0001 0036             		move.b	#1,$36(a2)
0001276E                            
0001276E                            locret_10FA0:
0001276E 4E75                       		rts	
00012770                            ; ===========================================================================
00012770 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00012772 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012774 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00012776 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012778                            ; ===========================================================================
00012778                            
00012778                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00012778 4A68 0034                  		tst.w	$34(a0)
0001277C 6600                       		bne.s	loc_10FC0
0001277E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00012784 6600                       		bne.s	locret_10FBE
00012786 317C 001E 0034             		move.w	#$1E,$34(a0)
0001278C                            
0001278C                            locret_10FBE:
0001278C 4E75                       		rts	
0001278E                            ; ===========================================================================
0001278E                            
0001278E                            loc_10FC0:
0001278E 5368 0034                  		subq.w	#1,$34(a0)
00012792 66F8                       		bne.s	locret_10FBE
00012794 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012798 4E75                       		rts	
0001279A                            ; ===========================================================================
0001279A                            
0001279A                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001279A 4A68 0034                  		tst.w	$34(a0)
0001279E 6600                       		bne.s	loc_10FE0
000127A0 4A28 0036                  		tst.b	$36(a0)
000127A4 6A00                       		bpl.s	locret_10FDE
000127A6 317C 003C 0034             		move.w	#$3C,$34(a0)
000127AC                            
000127AC                            locret_10FDE:
000127AC 4E75                       		rts	
000127AE                            ; ===========================================================================
000127AE                            
000127AE                            loc_10FE0:
000127AE 5368 0034                  		subq.w	#1,$34(a0)
000127B2 6600                       		bne.s	loc_10FEC
000127B4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000127B8 4E75                       		rts	
000127BA                            ; ===========================================================================
000127BA                            
000127BA                            loc_10FEC:
000127BA 43E8 0038                  		lea	$38(a0),a1
000127BE 3028 0034                  		move.w	$34(a0),d0
000127C2 E408                       		lsr.b	#2,d0
000127C4 0200 0001                  		andi.b	#1,d0
000127C8 12C0                       		move.b	d0,(a1)+
000127CA 0A00 0001                  		eori.b	#1,d0
000127CE 12C0                       		move.b	d0,(a1)+
000127D0 0A00 0001                  		eori.b	#1,d0
000127D4 12C0                       		move.b	d0,(a1)+
000127D6 0A00 0001                  		eori.b	#1,d0
000127DA 12C0                       		move.b	d0,(a1)+
000127DC 4E75                       		rts	
000127DE                            ; ===========================================================================
000127DE                            
000127DE                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000127DE 43E8 0038                  		lea	$38(a0),a1
000127E2 0C11 0080                  		cmpi.b	#$80,(a1)
000127E6 6700                       		beq.s	locret_11038
000127E8 5211                       		addq.b	#1,(a1)
000127EA 7200                       		moveq	#0,d1
000127EC 1219                       		move.b	(a1)+,d1
000127EE 4841                       		swap	d1
000127F0 E289                       		lsr.l	#1,d1
000127F2 2401                       		move.l	d1,d2
000127F4 E289                       		lsr.l	#1,d1
000127F6 2601                       		move.l	d1,d3
000127F8 D682                       		add.l	d2,d3
000127FA 4841                       		swap	d1
000127FC 4842                       		swap	d2
000127FE 4843                       		swap	d3
00012800 12C3                       		move.b	d3,(a1)+
00012802 12C2                       		move.b	d2,(a1)+
00012804 12C1                       		move.b	d1,(a1)+
00012806                            
00012806                            locret_11038:
00012806 4E75                       		rts	
00012808 4E75                       		rts	
0001280A                            ; ===========================================================================
0001280A                            ; ---------------------------------------------------------------------------
0001280A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001280A                            ; ---------------------------------------------------------------------------
0001280A                            Map_obj5B:
0001280A                            	include "_maps\obj5B.asm"
0001280A                            ; ---------------------------------------------------------------------------
0001280A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001280A                            ; ---------------------------------------------------------------------------
0001280A 0000                       		dc.w byte_1103E-Map_obj5B
0001280C 01                         byte_1103E:	dc.b 1
0001280D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012812                            		even
00012812                            		even
00012812                            
00012812                            ; ===========================================================================
00012812                            ; ---------------------------------------------------------------------------
00012812                            ; Object 5C - metal girders in foreground (SLZ)
00012812                            ; ---------------------------------------------------------------------------
00012812                            
00012812                            Obj5C:					; XREF: Obj_Index
00012812 7000                       		moveq	#0,d0
00012814 1028 0024                  		move.b	$24(a0),d0
00012818 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001281C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012820                            ; ===========================================================================
00012820 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012822 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012824                            ; ===========================================================================
00012824                            
00012824                            Obj5C_Main:				; XREF: Obj5C_Index
00012824 5428 0024                  		addq.b	#2,$24(a0)
00012828 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012830 317C 83CC 0002             		move.w	#$83CC,2(a0)
00012836 117C 0010 0019             		move.b	#$10,$19(a0)
0001283C                            
0001283C                            Obj5C_Display:				; XREF: Obj5C_Index
0001283C 2238 F700                  		move.l	($FFFFF700).w,d1
00012840 D281                       		add.l	d1,d1
00012842 4841                       		swap	d1
00012844 4441                       		neg.w	d1
00012846 3141 0008                  		move.w	d1,8(a0)
0001284A 2238 F704                  		move.l	($FFFFF704).w,d1
0001284E D281                       		add.l	d1,d1
00012850 4841                       		swap	d1
00012852 0241 003F                  		andi.w	#$3F,d1
00012856 4441                       		neg.w	d1
00012858 0641 0100                  		addi.w	#$100,d1
0001285C 3141 000A                  		move.w	d1,$A(a0)
00012860 6000 BF7C                  		bra.w	DisplaySprite
00012864                            ; ===========================================================================
00012864                            ; ---------------------------------------------------------------------------
00012864                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012864                            ; ---------------------------------------------------------------------------
00012864                            Map_obj5C:
00012864                            	include "_maps\obj5C.asm"
00012864                            ; ---------------------------------------------------------------------------
00012864                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012864                            ; ---------------------------------------------------------------------------
00012864 0000                       		dc.w byte_11098-Map_obj5C
00012866 09                         byte_11098:	dc.b 9
00012867 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001286C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00012871 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00012876 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001287B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00012880 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00012885 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001288A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001288F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012894                            		even
00012894                            		even
00012894                            
00012894                            ; ===========================================================================
00012894                            ; ---------------------------------------------------------------------------
00012894                            ; Object 1B - water surface (LZ)
00012894                            ; ---------------------------------------------------------------------------
00012894                            
00012894                            Obj1B:					; XREF: Obj_Index
00012894 7000                       		moveq	#0,d0
00012896 1028 0024                  		move.b	$24(a0),d0
0001289A 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001289E 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000128A2                            ; ===========================================================================
000128A2 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000128A4 0000                       		dc.w Obj1B_Action-Obj1B_Index
000128A6                            ; ===========================================================================
000128A6                            
000128A6                            Obj1B_Main:				; XREF: Obj1B_Index
000128A6 5428 0024                  		addq.b	#2,$24(a0)
000128AA 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
000128B2 317C C300 0002             		move.w	#$C300,2(a0)
000128B8 117C 0004 0001             		move.b	#4,1(a0)
000128BE 117C 0080 0019             		move.b	#$80,$19(a0)
000128C4 3168 0008 0030             		move.w	8(a0),$30(a0)
000128CA                            
000128CA                            Obj1B_Action:				; XREF: Obj1B_Index
000128CA 3238 F700                  		move.w	($FFFFF700).w,d1
000128CE 0241 FFE0                  		andi.w	#$FFE0,d1
000128D2 D268 0030                  		add.w	$30(a0),d1
000128D6 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000128DC 6700                       		beq.s	loc_11114
000128DE 0641 0020                  		addi.w	#$20,d1
000128E2                            
000128E2                            loc_11114:
000128E2 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000128E6 3238 F646                  		move.w	($FFFFF646).w,d1
000128EA 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000128EE 4A28 0032                  		tst.b	$32(a0)
000128F2 6600                       		bne.s	Obj1B_Animate
000128F4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000128FA 6700                       		beq.s	loc_1114A	; if not, branch
000128FC 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012900 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012906 6000                       		bra.s	Obj1B_Display
00012908                            ; ===========================================================================
00012908                            
00012908                            Obj1B_Animate:				; XREF: loc_11114
00012908 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001290C 6600                       		bne.s	Obj1B_Display	; if yes, branch
0001290E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012914 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012918                            
00012918                            loc_1114A:				; XREF: loc_11114
00012918 5328 001E                  		subq.b	#1,$1E(a0)
0001291C 6A00                       		bpl.s	Obj1B_Display
0001291E 117C 0007 001E             		move.b	#7,$1E(a0)
00012924 5228 001A                  		addq.b	#1,$1A(a0)
00012928 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
0001292E 6500                       		bcs.s	Obj1B_Display
00012930 117C 0000 001A             		move.b	#0,$1A(a0)
00012936                            
00012936                            Obj1B_Display:
00012936 6000 BEA6                  		bra.w	DisplaySprite
0001293A                            ; ===========================================================================
0001293A                            ; ---------------------------------------------------------------------------
0001293A                            ; Sprite mappings - water surface (LZ)
0001293A                            ; ---------------------------------------------------------------------------
0001293A                            Map_obj1B:
0001293A                            	include "_maps\obj1B.asm"
0001293A                            ; ---------------------------------------------------------------------------
0001293A                            ; Sprite mappings - water surface (LZ)
0001293A                            ; ---------------------------------------------------------------------------
0001293A 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0001293E 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012942 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012946 03                         byte_11178:	dc.b 3
00012947 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001294C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012951 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012956 03                         byte_11188:	dc.b 3
00012957 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001295C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012961 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012966 03                         byte_11198:	dc.b 3
00012967 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001296C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012971 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012976 06                         byte_111A8:	dc.b 6
00012977 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001297C FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012981 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012986 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001298B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012990 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012995 06                         byte_111C7:	dc.b 6
00012996 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001299B FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
000129A0 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000129A5 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
000129AA FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000129AF FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
000129B4 06                         byte_111E6:	dc.b 6
000129B5 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000129BA FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
000129BF FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000129C4 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000129C9 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000129CE FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000129D4 00                         		even
000129D4 00                         		even
000129D4                            
000129D4                            ; ===========================================================================
000129D4                            ; ---------------------------------------------------------------------------
000129D4                            ; Object 0B - pole that	breaks (LZ)
000129D4                            ; ---------------------------------------------------------------------------
000129D4                            
000129D4                            Obj0B:					; XREF: Obj_Index
000129D4 7000                       		moveq	#0,d0
000129D6 1028 0024                  		move.b	$24(a0),d0
000129DA 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000129DE 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000129E2                            ; ===========================================================================
000129E2 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000129E4 0000                       		dc.w Obj0B_Action-Obj0B_Index
000129E6 0000                       		dc.w Obj0B_Display-Obj0B_Index
000129E8                            ; ===========================================================================
000129E8                            
000129E8                            Obj0B_Main:				; XREF: Obj0B_Index
000129E8 5428 0024                  		addq.b	#2,$24(a0)
000129EC 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000129F4 317C 43DE 0002             		move.w	#$43DE,2(a0)
000129FA 117C 0004 0001             		move.b	#4,1(a0)
00012A00 117C 0008 0019             		move.b	#8,$19(a0)
00012A06 117C 0004 0018             		move.b	#4,$18(a0)
00012A0C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012A12 7000                       		moveq	#0,d0
00012A14 1028 0028                  		move.b	$28(a0),d0	; get object type
00012A18 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012A1C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012A20                            
00012A20                            Obj0B_Action:				; XREF: Obj0B_Index
00012A20 4A28 0032                  		tst.b	$32(a0)
00012A24 6700                       		beq.s	Obj0B_Grab
00012A26 4A68 0030                  		tst.w	$30(a0)
00012A2A 6700                       		beq.s	Obj0B_MoveUp
00012A2C 5368 0030                  		subq.w	#1,$30(a0)
00012A30 6600                       		bne.s	Obj0B_MoveUp
00012A32 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012A38 6000                       		bra.s	Obj0B_Release
00012A3A                            ; ===========================================================================
00012A3A                            
00012A3A                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012A3A 43F8 D000                  		lea	($FFFFD000).w,a1
00012A3E 3028 000C                  		move.w	$C(a0),d0
00012A42 0440 0018                  		subi.w	#$18,d0
00012A46 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00012A4C 6700                       		beq.s	Obj0B_MoveDown
00012A4E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012A52 B069 000C                  		cmp.w	$C(a1),d0
00012A56 6500                       		bcs.s	Obj0B_MoveDown
00012A58 3340 000C                  		move.w	d0,$C(a1)
00012A5C                            
00012A5C                            Obj0B_MoveDown:
00012A5C 0640 0024                  		addi.w	#$24,d0
00012A60 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012A66 6700                       		beq.s	Obj0B_LetGo
00012A68 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012A6C B069 000C                  		cmp.w	$C(a1),d0
00012A70 6400                       		bcc.s	Obj0B_LetGo
00012A72 3340 000C                  		move.w	d0,$C(a1)
00012A76                            
00012A76                            Obj0B_LetGo:
00012A76 1038 F603                  		move.b	($FFFFF603).w,d0
00012A7A 0240 0070                  		andi.w	#$70,d0
00012A7E 6700                       		beq.s	Obj0B_Display
00012A80                            
00012A80                            Obj0B_Release:				; XREF: Obj0B_Action
00012A80 4228 0020                  		clr.b	$20(a0)
00012A84 5428 0024                  		addq.b	#2,$24(a0)
00012A88 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012A8C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012A90 4228 0032                  		clr.b	$32(a0)
00012A94 6000                       		bra.s	Obj0B_Display
00012A96                            ; ===========================================================================
00012A96                            
00012A96                            Obj0B_Grab:				; XREF: Obj0B_Action
00012A96 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012A9A 6700                       		beq.s	Obj0B_Display	; if not, branch
00012A9C 43F8 D000                  		lea	($FFFFD000).w,a1
00012AA0 3028 0008                  		move.w	8(a0),d0
00012AA4 0640 0014                  		addi.w	#$14,d0
00012AA8 B069 0008                  		cmp.w	8(a1),d0
00012AAC 6400                       		bcc.s	Obj0B_Display
00012AAE 4228 0021                  		clr.b	$21(a0)
00012AB2 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012AB8 6400                       		bcc.s	Obj0B_Display
00012ABA 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012ABE 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012AC2 3028 0008                  		move.w	8(a0),d0
00012AC6 0640 0014                  		addi.w	#$14,d0
00012ACA 3340 0008                  		move.w	d0,8(a1)
00012ACE 08A9 0000 0022             		bclr	#0,$22(a1)
00012AD4 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012ADA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012AE0 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012AE6 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012AEC                            
00012AEC                            Obj0B_Display:				; XREF: Obj0B_Index
00012AEC 6000 E33A                  		bra.w	MarkObjGone
00012AF0                            ; ===========================================================================
00012AF0                            ; ---------------------------------------------------------------------------
00012AF0                            ; Sprite mappings - pole that breaks (LZ)
00012AF0                            ; ---------------------------------------------------------------------------
00012AF0                            Map_obj0B:
00012AF0                            	include "_maps\obj0B.asm"
00012AF0                            ; ---------------------------------------------------------------------------
00012AF0                            ; Sprite mappings - pole that breaks (LZ)
00012AF0                            ; ---------------------------------------------------------------------------
00012AF0 0000                       		dc.w byte_11326-Map_obj0B
00012AF2 0000                       		dc.w byte_11331-Map_obj0B
00012AF4 02                         byte_11326:	dc.b 2			; normal pole
00012AF5 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012AFA 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012AFF 04                         byte_11331:	dc.b 4			; broken pole
00012B00 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012B05 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012B0A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012B0F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012B14                            		even
00012B14                            		even
00012B14                            
00012B14                            ; ===========================================================================
00012B14                            ; ---------------------------------------------------------------------------
00012B14                            ; Object 0C - flapping door (LZ)
00012B14                            ; ---------------------------------------------------------------------------
00012B14                            
00012B14                            Obj0C:					; XREF: Obj_Index
00012B14 7000                       		moveq	#0,d0
00012B16 1028 0024                  		move.b	$24(a0),d0
00012B1A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012B1E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012B22                            ; ===========================================================================
00012B22 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012B24 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012B26                            ; ===========================================================================
00012B26                            
00012B26                            Obj0C_Main:				; XREF: Obj0C_Index
00012B26 5428 0024                  		addq.b	#2,$24(a0)
00012B2A 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012B32 317C 4328 0002             		move.w	#$4328,2(a0)
00012B38 0028 0004 0001             		ori.b	#4,1(a0)
00012B3E 117C 0028 0019             		move.b	#$28,$19(a0)
00012B44 7000                       		moveq	#0,d0
00012B46 1028 0028                  		move.b	$28(a0),d0	; get object type
00012B4A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012B4E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012B52                            
00012B52                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012B52 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012B56 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012B58 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012B5E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012B64 4A28 0001                  		tst.b	1(a0)
00012B68 6A00                       		bpl.s	Obj0C_Solid
00012B6A 303C 00BB                  		move.w	#$BB,d0
00012B6E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play door sound
00012B74                            
00012B74                            Obj0C_Solid:
00012B74 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012B7A 6100 8CC2                  		bsr.w	AnimateSprite
00012B7E 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012B82 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012B86 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012B88 3038 D008                  		move.w	($FFFFD008).w,d0
00012B8C B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012B90 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012B92 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012B98 323C 0013                  		move.w	#$13,d1
00012B9C 343C 0020                  		move.w	#$20,d2
00012BA0 3602                       		move.w	d2,d3
00012BA2 5243                       		addq.w	#1,d3
00012BA4 3828 0008                  		move.w	8(a0),d4
00012BA8 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
00012BAC                            
00012BAC                            Obj0C_Display:
00012BAC 6000 E27A                  		bra.w	MarkObjGone
00012BB0                            ; ===========================================================================
00012BB0                            Ani_obj0C:
00012BB0                            	include "_anim\obj0C.asm"
00012BB0                            ; ---------------------------------------------------------------------------
00012BB0                            ; Animation script - flapping door (LZ)
00012BB0                            ; ---------------------------------------------------------------------------
00012BB0 0000                       		dc.w byte_113E6-Ani_obj0C
00012BB2 0000                       		dc.w byte_113EC-Ani_obj0C
00012BB4 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012BBA 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012BC0                            		even
00012BC0                            		even
00012BC0                            
00012BC0                            ; ---------------------------------------------------------------------------
00012BC0                            ; Sprite mappings - flapping door (LZ)
00012BC0                            ; ---------------------------------------------------------------------------
00012BC0                            Map_obj0C:
00012BC0                            	include "_maps\obj0C.asm"
00012BC0                            ; ---------------------------------------------------------------------------
00012BC0                            ; Sprite mappings - flapping door (LZ)
00012BC0                            ; ---------------------------------------------------------------------------
00012BC0 0000                       		dc.w byte_113F8-Map_obj0C
00012BC2 0000                       		dc.w byte_11403-Map_obj0C
00012BC4 0000                       		dc.w byte_1140E-Map_obj0C
00012BC6 02                         byte_113F8:	dc.b 2
00012BC7 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012BCC 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012BD1 02                         byte_11403:	dc.b 2
00012BD2 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012BD7 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012BDC 02                         byte_1140E:	dc.b 2
00012BDD D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012BE2 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012BE8 00                         		even
00012BE8 00                         		even
00012BE8                            
00012BE8                            ; ===========================================================================
00012BE8                            ; ---------------------------------------------------------------------------
00012BE8                            ; Object 71 - invisible	solid blocks
00012BE8                            ; ---------------------------------------------------------------------------
00012BE8                            
00012BE8                            Obj71:					; XREF: Obj_Index
00012BE8 7000                       		moveq	#0,d0
00012BEA 1028 0024                  		move.b	$24(a0),d0
00012BEE 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012BF2 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012BF6                            ; ===========================================================================
00012BF6 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012BF8 0000                       		dc.w Obj71_Solid-Obj71_Index
00012BFA                            ; ===========================================================================
00012BFA                            
00012BFA                            Obj71_Main:				; XREF: Obj71_Index
00012BFA 5428 0024                  		addq.b	#2,$24(a0)
00012BFE 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012C06 317C 8680 0002             		move.w	#$8680,2(a0)
00012C0C 0028 0004 0001             		ori.b	#4,1(a0)
00012C12 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C16 1200                       		move.b	d0,d1
00012C18 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012C1C 0640 0010                  		addi.w	#$10,d0
00012C20 E248                       		lsr.w	#1,d0
00012C22 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012C26 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012C2A 5241                       		addq.w	#1,d1
00012C2C E749                       		lsl.w	#3,d1
00012C2E 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012C32                            
00012C32                            Obj71_Solid:				; XREF: Obj71_Index
00012C32 6100 BF70                  		bsr.w	ChkObjOnScreen
00012C36 6600                       		bne.s	Obj71_ChkDel
00012C38 7200                       		moveq	#0,d1
00012C3A 1228 0019                  		move.b	$19(a0),d1
00012C3E 0641 000B                  		addi.w	#$B,d1
00012C42 7400                       		moveq	#0,d2
00012C44 1428 0016                  		move.b	$16(a0),d2
00012C48 3602                       		move.w	d2,d3
00012C4A 5243                       		addq.w	#1,d3
00012C4C 3828 0008                  		move.w	8(a0),d4
00012C50 6100 E542                  		bsr.w	SolidObject71
00012C54                            
00012C54                            Obj71_ChkDel:
00012C54 3028 0008                  		move.w	8(a0),d0
00012C58 0240 FF80                  		andi.w	#$FF80,d0
00012C5C 3238 F700                  		move.w	($FFFFF700).w,d1
00012C60 0441 0080                  		subi.w	#$80,d1
00012C64 0241 FF80                  		andi.w	#$FF80,d1
00012C68 9041                       		sub.w	d1,d0
00012C6A 0C40 0280                  		cmpi.w	#$280,d0
00012C6E 6300                       		bls.s	Obj71_NoDel
00012C70 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012C74 6700                       		beq.s	Obj71_Delete		; if it's zero, don't remember object
00012C76 3440                       		movea.w	d0,a2	; load address into a2
00012C78 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012C7C 6000                       		bra.s	Obj71_Delete	; and delete object
00012C7E                            
00012C7E                            Obj71_NoDel:
00012C7E 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012C82 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012C84 4EFA BB58                  		jmp	DisplaySprite	; if yes, display the object
00012C88                            ; ===========================================================================
00012C88                            
00012C88                            Obj71_NoDisplay:
00012C88 4E75                       		rts	
00012C8A                            ; ===========================================================================
00012C8A                            
00012C8A                            Obj71_Delete:
00012C8A 4EFA BBA2                  		jmp	DeleteObject
00012C8E                            ; ===========================================================================
00012C8E                            ; ---------------------------------------------------------------------------
00012C8E                            ; Sprite mappings - invisible solid blocks
00012C8E                            ; ---------------------------------------------------------------------------
00012C8E                            Map_obj71:
00012C8E                            	include "_maps\obj71.asm"
00012C8E                            ; ---------------------------------------------------------------------------
00012C8E                            ; Sprite mappings - invisible solid blocks
00012C8E                            ; ---------------------------------------------------------------------------
00012C8E 0000                       		dc.w byte_114BC-Map_obj71
00012C90 0000                       		dc.w byte_114D1-Map_obj71
00012C92 0000                       		dc.w byte_114E6-Map_obj71
00012C94 04                         byte_114BC:	dc.b 4
00012C95 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012C9A F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012C9F 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012CA4 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012CA9 04                         byte_114D1:	dc.b 4
00012CAA E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012CAF E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012CB4 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012CB9 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012CBE 04                         byte_114E6:	dc.b 4
00012CBF E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012CC4 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012CC9 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012CCE 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012CD4 00                         		even
00012CD4 00                         		even
00012CD4                            
00012CD4                            ; ===========================================================================
00012CD4                            ; ---------------------------------------------------------------------------
00012CD4                            ; Object 5D - fans (SLZ)
00012CD4                            ; ---------------------------------------------------------------------------
00012CD4                            
00012CD4                            Obj5D:					; XREF: Obj_Index
00012CD4 7000                       		moveq	#0,d0
00012CD6 1028 0024                  		move.b	$24(a0),d0
00012CDA 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012CDE 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012CE2                            ; ===========================================================================
00012CE2 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012CE4 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012CE6                            ; ===========================================================================
00012CE6                            
00012CE6                            Obj5D_Main:				; XREF: Obj5D_Index
00012CE6 5428 0024                  		addq.b	#2,$24(a0)
00012CEA 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012CF2 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012CF8 0028 0004 0001             		ori.b	#4,1(a0)
00012CFE 117C 0010 0019             		move.b	#$10,$19(a0)
00012D04 117C 0004 0018             		move.b	#4,$18(a0)
00012D0A                            
00012D0A                            Obj5D_Delay:				; XREF: Obj5D_Index
00012D0A 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012D10 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012D12 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012D16 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012D18 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012D1E 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012D24 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012D26 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012D2C                            
00012D2C                            Obj5D_Blow:
00012D2C 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012D30 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012D34 43F8 D000                  		lea	($FFFFD000).w,a1
00012D38 3029 0008                  		move.w	8(a1),d0
00012D3C 9068 0008                  		sub.w	8(a0),d0
00012D40 0828 0000 0022             		btst	#0,$22(a0)
00012D46 6600                       		bne.s	Obj5D_ChkSonic
00012D48 4440                       		neg.w	d0
00012D4A                            
00012D4A                            Obj5D_ChkSonic:
00012D4A 0640 0050                  		addi.w	#$50,d0
00012D4E 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00012D52 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00012D54 3229 000C                  		move.w	$C(a1),d1
00012D58 0641 0060                  		addi.w	#$60,d1
00012D5C 9268 000C                  		sub.w	$C(a0),d1
00012D60 6500                       		bcs.s	Obj5D_Animate
00012D62 0C41 0070                  		cmpi.w	#$70,d1
00012D66 6400                       		bcc.s	Obj5D_Animate
00012D68 0440 0050                  		subi.w	#$50,d0
00012D6C 6400                       		bcc.s	loc_1159A
00012D6E 4640                       		not.w	d0
00012D70 D040                       		add.w	d0,d0
00012D72                            
00012D72                            loc_1159A:
00012D72 0640 0060                  		addi.w	#$60,d0
00012D76 0828 0000 0022             		btst	#0,$22(a0)
00012D7C 6600                       		bne.s	loc_115A8
00012D7E 4440                       		neg.w	d0
00012D80                            
00012D80                            loc_115A8:
00012D80 4400                       		neg.b	d0
00012D82 E840                       		asr.w	#4,d0
00012D84 0828 0000 0028             		btst	#0,$28(a0)
00012D8A 6700                       		beq.s	Obj5D_MoveSonic
00012D8C 4440                       		neg.w	d0
00012D8E                            
00012D8E                            Obj5D_MoveSonic:
00012D8E D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00012D92                            
00012D92                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00012D92 5328 001E                  		subq.b	#1,$1E(a0)
00012D96 6A00                       		bpl.s	Obj5D_ChkDel
00012D98 117C 0000 001E             		move.b	#0,$1E(a0)
00012D9E 5228 001B                  		addq.b	#1,$1B(a0)
00012DA2 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012DA8 6500                       		bcs.s	loc_115D8
00012DAA 117C 0000 001B             		move.b	#0,$1B(a0)
00012DB0                            
00012DB0                            loc_115D8:
00012DB0 7000                       		moveq	#0,d0
00012DB2 0828 0000 0028             		btst	#0,$28(a0)
00012DB8 6700                       		beq.s	loc_115E4
00012DBA 7002                       		moveq	#2,d0
00012DBC                            
00012DBC                            loc_115E4:
00012DBC D028 001B                  		add.b	$1B(a0),d0
00012DC0 1140 001A                  		move.b	d0,$1A(a0)
00012DC4                            
00012DC4                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012DC4 6100 BA18                  		bsr.w	DisplaySprite
00012DC8 3028 0008                  		move.w	8(a0),d0
00012DCC 0240 FF80                  		andi.w	#$FF80,d0
00012DD0 3238 F700                  		move.w	($FFFFF700).w,d1
00012DD4 0441 0080                  		subi.w	#$80,d1
00012DD8 0241 FF80                  		andi.w	#$FF80,d1
00012DDC 9041                       		sub.w	d1,d0
00012DDE 0C40 0280                  		cmpi.w	#$280,d0
00012DE2 6300                       		bls.s	Obj5D_NoDel
00012DE4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012DE8 6700 BA44                  		beq.w	DeleteObject		; if it's zero, don't remember object
00012DEC 3440                       		movea.w	d0,a2	; load address into a2
00012DEE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012DF2 6000 BA3A                  		bra.w	DeleteObject	; and delete object
00012DF6                            
00012DF6                            Obj5D_NoDel:
00012DF6 4E75                       		rts	
00012DF8                            ; ===========================================================================
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8                            ; Sprite mappings - fans (SLZ)
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8                            Map_obj5D:
00012DF8                            	include "_maps\obj5D.asm"
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8                            ; Sprite mappings - fans (SLZ)
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012DFC 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012E00 0000                       		dc.w byte_1161A-Map_obj5D
00012E02 02                         byte_1161A:	dc.b 2
00012E03 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012E08 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012E0D 02                         byte_11625:	dc.b 2
00012E0E F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012E13 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012E18 02                         byte_11630:	dc.b 2
00012E19 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012E1E 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012E24 00                         		even
00012E24 00                         		even
00012E24                            
00012E24                            ; ===========================================================================
00012E24                            ; ---------------------------------------------------------------------------
00012E24                            ; Object 5E - seesaws (SLZ)
00012E24                            ; ---------------------------------------------------------------------------
00012E24                            
00012E24                            Obj5E:					; XREF: Obj_Index
00012E24 7000                       		moveq	#0,d0
00012E26 1028 0024                  		move.b	$24(a0),d0
00012E2A 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012E2E 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012E32 3028 0030                  		move.w	$30(a0),d0
00012E36 0240 FF80                  		andi.w	#$FF80,d0
00012E3A 3238 F700                  		move.w	($FFFFF700).w,d1
00012E3E 0441 0080                  		subi.w	#$80,d1
00012E42 0241 FF80                  		andi.w	#$FF80,d1
00012E46 9041                       		sub.w	d1,d0
00012E48 6B00 B9E4                  		bmi.w	DeleteObject
00012E4C 0C40 0280                  		cmpi.w	#$280,d0
00012E50 6300 B98C                  		bls.w	DisplaySprite
00012E54 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012E58 6700 B9D4                  		beq.w	DeleteObject		; if it's zero, don't remember object
00012E5C 3440                       		movea.w	d0,a2	; load address into a2
00012E5E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012E62 6000 B9CA                  		bra.w	DeleteObject	; and delete object		
00012E66                            ; ===========================================================================
00012E66 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012E68 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012E6A 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012E6C 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012E6E 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00012E70 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00012E72                            ; ===========================================================================
00012E72                            
00012E72                            Obj5E_Main:				; XREF: Obj5E_Index
00012E72 5428 0024                  		addq.b	#2,$24(a0)
00012E76 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00012E7E 317C 0374 0002             		move.w	#$374,2(a0)
00012E84 0028 0004 0001             		ori.b	#4,1(a0)
00012E8A 117C 0004 0018             		move.b	#4,$18(a0)
00012E90 117C 0030 0019             		move.b	#$30,$19(a0)
00012E96 3168 0008 0030             		move.w	8(a0),$30(a0)
00012E9C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00012EA0 6600                       		bne.s	loc_116D2	; if not, branch
00012EA2 6100 C0A6                  		bsr.w	SingleObjLoad2
00012EA6 6600                       		bne.s	loc_116D2
00012EA8 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00012EAC 5C29 0024                  		addq.b	#6,$24(a1)
00012EB0 3368 0008 0008             		move.w	8(a0),8(a1)
00012EB6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012EBC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012EC2 2348 003C                  		move.l	a0,$3C(a1)
00012EC6                            
00012EC6                            loc_116D2:
00012EC6 0828 0000 0022             		btst	#0,$22(a0)
00012ECC 6700                       		beq.s	loc_116E0
00012ECE 117C 0002 001A             		move.b	#2,$1A(a0)
00012ED4                            
00012ED4                            loc_116E0:
00012ED4 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00012EDA                            
00012EDA                            Obj5E_Slope:				; XREF: Obj5E_Index
00012EDA 1228 003A                  		move.b	$3A(a0),d1
00012EDE 6100 0000                  		bsr.w	loc_11766
00012EE2 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012EE8 0828 0000 001A             		btst	#0,$1A(a0)
00012EEE 6700                       		beq.s	loc_11702
00012EF0 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012EF6                            
00012EF6                            loc_11702:
00012EF6 43F8 D000                  		lea	($FFFFD000).w,a1
00012EFA 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012F00 323C 0030                  		move.w	#$30,d1
00012F04 4EB9 0000 85E4             		jsr	(SlopeObject).l
00012F0A 4E75                       		rts	
00012F0C                            ; ===========================================================================
00012F0C                            
00012F0C                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012F0C 6100 0000                  		bsr.w	loc_1174A
00012F10 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012F16 0828 0000 001A             		btst	#0,$1A(a0)
00012F1C 6700                       		beq.s	loc_11730
00012F1E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012F24                            
00012F24                            loc_11730:
00012F24 323C 0030                  		move.w	#$30,d1
00012F28 4EB9 0000 8684             		jsr	(ExitPlatform).l
00012F2E 323C 0030                  		move.w	#$30,d1
00012F32 3428 0008                  		move.w	8(a0),d2
00012F36 4EB9 0000 965A             		jsr	SlopeObject2
00012F3C 4E75                       		rts	
00012F3E                            ; ===========================================================================
00012F3E                            
00012F3E                            loc_1174A:				; XREF: Obj5E_Slope2
00012F3E 7202                       		moveq	#2,d1
00012F40 43F8 D000                  		lea	($FFFFD000).w,a1
00012F44 3028 0008                  		move.w	8(a0),d0
00012F48 9069 0008                  		sub.w	8(a1),d0
00012F4C 6400                       		bcc.s	loc_1175E
00012F4E 4440                       		neg.w	d0
00012F50 7200                       		moveq	#0,d1
00012F52                            
00012F52                            loc_1175E:
00012F52 0C40 0008                  		cmpi.w	#8,d0
00012F56 6400                       		bcc.s	loc_11766
00012F58 7201                       		moveq	#1,d1
00012F5A                            
00012F5A                            loc_11766:
00012F5A 1028 001A                  		move.b	$1A(a0),d0
00012F5E B001                       		cmp.b	d1,d0
00012F60 6700                       		beq.s	locret_11790
00012F62 6400                       		bcc.s	loc_11772
00012F64 5400                       		addq.b	#2,d0
00012F66                            
00012F66                            loc_11772:
00012F66 5300                       		subq.b	#1,d0
00012F68 1140 001A                  		move.b	d0,$1A(a0)
00012F6C 1141 003A                  		move.b	d1,$3A(a0)
00012F70 08A8 0000 0001             		bclr	#0,1(a0)
00012F76 0828 0001 001A             		btst	#1,$1A(a0)
00012F7C 6700                       		beq.s	locret_11790
00012F7E 08E8 0000 0001             		bset	#0,1(a0)
00012F84                            
00012F84                            locret_11790:
00012F84 4E75                       		rts	
00012F86                            ; ===========================================================================
00012F86                            
00012F86                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00012F86 5428 0024                  		addq.b	#2,$24(a0)
00012F8A 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00012F92 317C 04F0 0002             		move.w	#$4F0,2(a0)
00012F98 0028 0004 0001             		ori.b	#4,1(a0)
00012F9E 117C 0004 0018             		move.b	#4,$18(a0)
00012FA4 117C 008B 0020             		move.b	#$8B,$20(a0)
00012FAA 117C 000C 0019             		move.b	#$C,$19(a0)
00012FB0 3168 0008 0030             		move.w	8(a0),$30(a0)
00012FB6 0668 0028 0008             		addi.w	#$28,8(a0)
00012FBC 3168 000C 0034             		move.w	$C(a0),$34(a0)
00012FC2 117C 0001 001A             		move.b	#1,$1A(a0)
00012FC8 0828 0000 0022             		btst	#0,$22(a0)
00012FCE 6700                       		beq.s	Obj5E_MoveSpike
00012FD0 0468 0050 0008             		subi.w	#$50,8(a0)
00012FD6 117C 0002 003A             		move.b	#2,$3A(a0)
00012FDC                            
00012FDC                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012FDC 2268 003C                  		movea.l	$3C(a0),a1
00012FE0 7000                       		moveq	#0,d0
00012FE2 1028 003A                  		move.b	$3A(a0),d0
00012FE6 9029 003A                  		sub.b	$3A(a1),d0
00012FEA 6700                       		beq.s	loc_1183E
00012FEC 6400                       		bcc.s	loc_117FC
00012FEE 4400                       		neg.b	d0
00012FF0                            
00012FF0                            loc_117FC:
00012FF0 323C F7E8                  		move.w	#-$818,d1
00012FF4 343C FEEC                  		move.w	#-$114,d2
00012FF8 0C00 0001                  		cmpi.b	#1,d0
00012FFC 6700                       		beq.s	loc_11822
00012FFE 323C F510                  		move.w	#-$AF0,d1
00013002 343C FF34                  		move.w	#-$CC,d2
00013006 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001300C 6D00                       		blt.s	loc_11822
0001300E 323C F200                  		move.w	#-$E00,d1
00013012 343C FF60                  		move.w	#-$A0,d2
00013016                            
00013016                            loc_11822:
00013016 3141 0012                  		move.w	d1,$12(a0)
0001301A 3142 0010                  		move.w	d2,$10(a0)
0001301E 3028 0008                  		move.w	8(a0),d0
00013022 9068 0030                  		sub.w	$30(a0),d0
00013026 6400                       		bcc.s	loc_11838
00013028 4468 0010                  		neg.w	$10(a0)
0001302C                            
0001302C                            loc_11838:
0001302C 5428 0024                  		addq.b	#2,$24(a0)
00013030 6000                       		bra.s	Obj5E_SpikeFall
00013032                            ; ===========================================================================
00013032                            
00013032                            loc_1183E:				; XREF: Obj5E_MoveSpike
00013032 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00013038 7000                       		moveq	#0,d0
0001303A 1029 001A                  		move.b	$1A(a1),d0
0001303E 343C 0028                  		move.w	#$28,d2
00013042 3228 0008                  		move.w	8(a0),d1
00013046 9268 0030                  		sub.w	$30(a0),d1
0001304A 6400                       		bcc.s	loc_1185C
0001304C 4442                       		neg.w	d2
0001304E 5440                       		addq.w	#2,d0
00013050                            
00013050                            loc_1185C:
00013050 D040                       		add.w	d0,d0
00013052 3228 0034                  		move.w	$34(a0),d1
00013056 D272 0000                  		add.w	(a2,d0.w),d1
0001305A 3141 000C                  		move.w	d1,$C(a0)
0001305E D468 0030                  		add.w	$30(a0),d2
00013062 3142 0008                  		move.w	d2,8(a0)
00013066 4268 000E                  		clr.w	$E(a0)
0001306A 4268 000A                  		clr.w	$A(a0)
0001306E 4E75                       		rts	
00013070                            ; ===========================================================================
00013070                            
00013070                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00013070 4A68 0012                  		tst.w	$12(a0)
00013074 6A00                       		bpl.s	loc_1189A
00013076 6100 B72C                  		bsr.w	ObjectFall
0001307A 3028 0034                  		move.w	$34(a0),d0
0001307E 0440 002F                  		subi.w	#$2F,d0
00013082 B068 000C                  		cmp.w	$C(a0),d0
00013086 6E00                       		bgt.s	locret_11898
00013088 6100 B71A                  		bsr.w	ObjectFall
0001308C                            
0001308C                            locret_11898:
0001308C 4E75                       		rts	
0001308E                            ; ===========================================================================
0001308E                            
0001308E                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001308E 6100 B714                  		bsr.w	ObjectFall
00013092 2268 003C                  		movea.l	$3C(a0),a1
00013096 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001309C 7000                       		moveq	#0,d0
0001309E 1029 001A                  		move.b	$1A(a1),d0
000130A2 3228 0008                  		move.w	8(a0),d1
000130A6 9268 0030                  		sub.w	$30(a0),d1
000130AA 6400                       		bcc.s	loc_118BA
000130AC 5440                       		addq.w	#2,d0
000130AE                            
000130AE                            loc_118BA:
000130AE D040                       		add.w	d0,d0
000130B0 3228 0034                  		move.w	$34(a0),d1
000130B4 D272 0000                  		add.w	(a2,d0.w),d1
000130B8 B268 000C                  		cmp.w	$C(a0),d1
000130BC 6E00                       		bgt.s	locret_11938
000130BE 2268 003C                  		movea.l	$3C(a0),a1
000130C2 7202                       		moveq	#2,d1
000130C4 4A68 0010                  		tst.w	$10(a0)
000130C8 6B00                       		bmi.s	Obj5E_Spring
000130CA 7200                       		moveq	#0,d1
000130CC                            
000130CC                            Obj5E_Spring:
000130CC 1341 003A                  		move.b	d1,$3A(a1)
000130D0 1141 003A                  		move.b	d1,$3A(a0)
000130D4 B229 001A                  		cmp.b	$1A(a1),d1
000130D8 6700                       		beq.s	loc_1192C
000130DA 08A9 0003 0022             		bclr	#3,$22(a1)
000130E0 6700                       		beq.s	loc_1192C
000130E2 4229 0025                  		clr.b	$25(a1)
000130E6 137C 0002 0024             		move.b	#2,$24(a1)
000130EC 45F8 D000                  		lea	($FFFFD000).w,a2
000130F0 3568 0012 0012             		move.w	$12(a0),$12(a2)
000130F6 446A 0012                  		neg.w	$12(a2)
000130FA 08EA 0001 0022             		bset	#1,$22(a2)
00013100 08AA 0003 0022             		bclr	#3,$22(a2)
00013106 422A 003C                  		clr.b	$3C(a2)
0001310A 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00013110 157C 0002 0024             		move.b	#2,$24(a2)
00013116 303C 00CC                  		move.w	#$CC,d0
0001311A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
00013120                            
00013120                            loc_1192C:
00013120 4268 0010                  		clr.w	$10(a0)
00013124 4268 0012                  		clr.w	$12(a0)
00013128 5528 0024                  		subq.b	#2,$24(a0)
0001312C                            
0001312C                            locret_11938:
0001312C 4E75                       		rts	
0001312E                            ; ===========================================================================
0001312E FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00013138                            
00013138                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00013168                            		even
00013168                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00013198                            		even
00013198                            ; ---------------------------------------------------------------------------
00013198                            ; Sprite mappings - seesaws (SLZ)
00013198                            ; ---------------------------------------------------------------------------
00013198                            Map_obj5E:
00013198                            	include "_maps\obj5E.asm"
00013198                            ; ---------------------------------------------------------------------------
00013198                            ; Sprite mappings - seesaws (SLZ)
00013198                            ; ---------------------------------------------------------------------------
00013198 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001319C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000131A0 07                         byte_119AC:	dc.b 7
000131A1 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000131A6 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000131AB E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000131B0 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000131B5 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000131BA F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000131BF FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000131C4 04                         byte_119D0:	dc.b 4
000131C5 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000131CA E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000131CF E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000131D4 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000131DA 00                         		even
000131DA 00                         		even
000131DA                            
000131DA                            ; ---------------------------------------------------------------------------
000131DA                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000131DA                            ; ---------------------------------------------------------------------------
000131DA                            Map_obj5Ea:
000131DA                            	include "_maps\obj5Eballs.asm"
000131DA                            ; ---------------------------------------------------------------------------
000131DA                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000131DA                            ; ---------------------------------------------------------------------------
000131DA 0000                       		dc.w byte_119EA-Map_obj5Ea
000131DC 0000                       		dc.w byte_119F0-Map_obj5Ea
000131DE 01                         byte_119EA:	dc.b 1
000131DF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000131E4 01                         byte_119F0:	dc.b 1
000131E5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000131EA                            		even
000131EA                            		even
000131EA                            
000131EA                            ; ===========================================================================
000131EA                            ; ---------------------------------------------------------------------------
000131EA                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000131EA                            ; ---------------------------------------------------------------------------
000131EA                            
000131EA                            Obj5F:					; XREF: Obj_Index
000131EA 7000                       		moveq	#0,d0
000131EC 1028 0024                  		move.b	$24(a0),d0
000131F0 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000131F4 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000131F8                            ; ===========================================================================
000131F8 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000131FA 0000                       		dc.w Obj5F_Action-Obj5F_Index
000131FC 0000                       		dc.w Obj5F_Display-Obj5F_Index
000131FE 0000                       		dc.w Obj5F_End-Obj5F_Index
00013200                            ; ===========================================================================
00013200                            
00013200                            Obj5F_Main:				; XREF: Obj5F_Index
00013200 5428 0024                  		addq.b	#2,$24(a0)
00013204 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001320C 317C 0400 0002             		move.w	#$400,2(a0)
00013212 0028 0004 0001             		ori.b	#4,1(a0)
00013218 117C 0003 0018             		move.b	#3,$18(a0)
0001321E 117C 000C 0019             		move.b	#$C,$19(a0)
00013224 1028 0028                  		move.b	$28(a0),d0
00013228 6700                       		beq.s	loc_11A3C
0001322A 1140 0024                  		move.b	d0,$24(a0)
0001322E 4E75                       		rts	
00013230                            ; ===========================================================================
00013230                            
00013230                            loc_11A3C:
00013230 117C 009A 0020             		move.b	#$9A,$20(a0)
00013236 0868 0000 0022             		bchg	#0,$22(a0)
0001323C                            
0001323C                            Obj5F_Action:				; XREF: Obj5F_Index
0001323C 7000                       		moveq	#0,d0
0001323E 1028 0025                  		move.b	$25(a0),d0
00013242 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00013246 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001324A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013250 6100 85EC                  		bsr.w	AnimateSprite
00013254 6000 DBD2                  		bra.w	MarkObjGone
00013258                            ; ===========================================================================
00013258 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001325A 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
0001325C 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001325E                            ; ===========================================================================
0001325E                            
0001325E                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001325E 6100 0000                  		bsr.w	Obj5F_ChkSonic
00013262 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013266 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00013268 5428 0025                  		addq.b	#2,$25(a0)
0001326C 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00013272 317C 0010 0010             		move.w	#$10,$10(a0)
00013278 117C 0001 001C             		move.b	#1,$1C(a0)
0001327E 0868 0000 0022             		bchg	#0,$22(a0)
00013284 6700                       		beq.s	locret_11A96
00013286 4468 0010                  		neg.w	$10(a0)		; change direction
0001328A                            
0001328A                            locret_11A96:
0001328A 4E75                       		rts	
0001328C                            ; ===========================================================================
0001328C                            
0001328C                            Obj5F_Wait:				; XREF: Obj5F_Index2
0001328C 6100 0000                  		bsr.w	Obj5F_ChkSonic
00013290 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013294 6B00                       		bmi.s	loc_11AA8
00013296 6100 B52C                  		bsr.w	SpeedToPos
0001329A 4E75                       		rts	
0001329C                            ; ===========================================================================
0001329C                            
0001329C                            loc_11AA8:
0001329C 5528 0025                  		subq.b	#2,$25(a0)
000132A0 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000132A6 4268 0010                  		clr.w	$10(a0)		; stop walking
000132AA 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000132B0 4E75                       		rts	
000132B2                            ; ===========================================================================
000132B2                            
000132B2                            Obj5F_Explode:				; XREF: Obj5F_Index2
000132B2 5368 0030                  		subq.w	#1,$30(a0)
000132B6 6A00                       		bpl.s	locret_11AD0
000132B8 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000132BC 117C 0000 0024             		move.b	#0,$24(a0)
000132C2                            
000132C2                            locret_11AD0:
000132C2 4E75                       		rts	
000132C4                            ; ===========================================================================
000132C4                            
000132C4                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000132C4 3038 D008                  		move.w	($FFFFD008).w,d0
000132C8 9068 0008                  		sub.w	8(a0),d0
000132CC 6400                       		bcc.s	loc_11ADE
000132CE 4440                       		neg.w	d0
000132D0                            
000132D0                            loc_11ADE:
000132D0 0C40 0060                  		cmpi.w	#$60,d0
000132D4 6400                       		bcc.s	locret_11B5E
000132D6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000132DA 9068 000C                  		sub.w	$C(a0),d0
000132DE 6400                       		bcc.s	Obj5F_MakeFuse
000132E0 4440                       		neg.w	d0
000132E2                            
000132E2                            Obj5F_MakeFuse:
000132E2 0C40 0060                  		cmpi.w	#$60,d0
000132E6 6400                       		bcc.s	locret_11B5E
000132E8 4A78 FE08                  		tst.w	($FFFFFE08).w
000132EC 6600                       		bne.s	locret_11B5E
000132EE 117C 0004 0025             		move.b	#4,$25(a0)
000132F4 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000132FA 4268 0010                  		clr.w	$10(a0)
000132FE 117C 0002 001C             		move.b	#2,$1C(a0)
00013304 6100 BC44                  		bsr.w	SingleObjLoad2
00013308 6600                       		bne.s	locret_11B5E
0001330A 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001330E 3368 0008 0008             		move.w	8(a0),8(a1)
00013314 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001331A 3368 000C 0034             		move.w	$C(a0),$34(a1)
00013320 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013326 137C 0004 0028             		move.b	#4,$28(a1)
0001332C 137C 0003 001C             		move.b	#3,$1C(a1)
00013332 337C 0010 0012             		move.w	#$10,$12(a1)
00013338 0828 0001 0022             		btst	#1,$22(a0)
0001333E 6700                       		beq.s	loc_11B54
00013340 4469 0012                  		neg.w	$12(a1)
00013344                            
00013344                            loc_11B54:
00013344 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001334A 2348 003C                  		move.l	a0,$3C(a1)
0001334E                            
0001334E                            locret_11B5E:
0001334E 4E75                       		rts	
00013350                            ; ===========================================================================
00013350                            
00013350                            Obj5F_Display:				; XREF: Obj5F_Index
00013350 6100                       		bsr.s	loc_11B70
00013352 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013358 6100 84E4                  		bsr.w	AnimateSprite
0001335C 6000 DACA                  		bra.w	MarkObjGone
00013360                            ; ===========================================================================
00013360                            
00013360                            loc_11B70:
00013360 5368 0030                  		subq.w	#1,$30(a0)
00013364 6B00                       		bmi.s	loc_11B7C
00013366 6100 B45C                  		bsr.w	SpeedToPos
0001336A 4E75                       		rts	
0001336C                            ; ===========================================================================
0001336C                            
0001336C                            loc_11B7C:
0001336C 4268 0030                  		clr.w	$30(a0)
00013370 4228 0024                  		clr.b	$24(a0)
00013374 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001337A 7203                       		moveq	#3,d1
0001337C 2248                       		movea.l	a0,a1
0001337E 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00013384 6000                       		bra.s	Obj5F_MakeShrap
00013386                            ; ===========================================================================
00013386                            
00013386                            Obj5F_Loop:
00013386 6100 BBC2                  		bsr.w	SingleObjLoad2
0001338A 6600                       		bne.s	loc_11BCE
0001338C                            
0001338C                            Obj5F_MakeShrap:			; XREF: loc_11B7C
0001338C 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00013390 3368 0008 0008             		move.w	8(a0),8(a1)
00013396 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001339C 137C 0006 0028             		move.b	#6,$28(a1)
000133A2 137C 0004 001C             		move.b	#4,$1C(a1)
000133A8 335A 0010                  		move.w	(a2)+,$10(a1)
000133AC 335A 0012                  		move.w	(a2)+,$12(a1)
000133B0 137C 0098 0020             		move.b	#$98,$20(a1)
000133B6 08E9 0007 0001             		bset	#7,1(a1)
000133BC                            
000133BC                            loc_11BCE:
000133BC 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000133C0                            
000133C0 117C 0006 0024             		move.b	#6,$24(a0)
000133C6                            
000133C6                            Obj5F_End:				; XREF: Obj5F_Index
000133C6 6100 B3FC                  		bsr.w	SpeedToPos
000133CA 0668 0018 0012             		addi.w	#$18,$12(a0)
000133D0 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000133D6 6100 8466                  		bsr.w	AnimateSprite
000133DA 4A28 0001                  		tst.b	1(a0)
000133DE 6A00 B44E                  		bpl.w	DeleteObject
000133E2 6000 B3FA                  		bra.w	DisplaySprite
000133E6                            ; ===========================================================================
000133E6 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000133F6                            
000133F6                            Ani_obj5F:
000133F6                            	include "_anim\obj5F.asm"
000133F6                            ; ---------------------------------------------------------------------------
000133F6                            ; Animation script - Bomb enemy
000133F6                            ; ---------------------------------------------------------------------------
000133F6 0000                       		dc.w byte_11C12-Ani_obj5F
000133F8 0000                       		dc.w byte_11C16-Ani_obj5F
000133FA 0000                       		dc.w byte_11C1C-Ani_obj5F
000133FC 0000                       		dc.w byte_11C20-Ani_obj5F
000133FE 0000                       		dc.w byte_11C24-Ani_obj5F
00013400 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00013404 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001340A 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001340E 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00013412 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00013416                            		even
00013416                            		even
00013416                            
00013416                            ; ---------------------------------------------------------------------------
00013416                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013416                            ; ---------------------------------------------------------------------------
00013416                            Map_obj5F:
00013416                            	include "_maps\obj5F.asm"
00013416                            ; ---------------------------------------------------------------------------
00013416                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013416                            ; ---------------------------------------------------------------------------
00013416 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001341A 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001341E 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00013422 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00013426 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001342A 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001342E 03                         byte_11C40:	dc.b 3
0001342F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013434 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013439 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001343E 03                         byte_11C50:	dc.b 3
0001343F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013444 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013449 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001344E 03                         byte_11C60:	dc.b 3
0001344F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013454 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013459 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001345E 03                         byte_11C70:	dc.b 3
0001345F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013464 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013469 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001346E 03                         byte_11C80:	dc.b 3
0001346F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013474 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013479 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001347E 03                         byte_11C90:	dc.b 3
0001347F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013484 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013489 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001348E 02                         byte_11CA0:	dc.b 2
0001348F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013494 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013499 02                         byte_11CAB:	dc.b 2
0001349A F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001349F 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000134A4 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000134A5 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000134AA 01                         byte_11CBC:	dc.b 1			; fuse
000134AB E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000134B0 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000134B1 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000134B6 01                         byte_11CC8:	dc.b 1			; fireball
000134B7 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000134BC                            		even
000134BC                            		even
000134BC                            
000134BC                            ; ===========================================================================
000134BC                            ; ---------------------------------------------------------------------------
000134BC                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000134BC                            ; ---------------------------------------------------------------------------
000134BC                            
000134BC                            Obj60:					; XREF: Obj_Index
000134BC 7000                       		moveq	#0,d0
000134BE 1028 0024                  		move.b	$24(a0),d0
000134C2 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000134C6 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000134CA                            ; ===========================================================================
000134CA 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000134CC 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000134CE 0000                       		dc.w Obj60_Display-Obj60_Index
000134D0 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000134D2 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000134D4                            ; ===========================================================================
000134D4                            
000134D4                            Obj60_Main:				; XREF: Obj60_Index
000134D4 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000134DC 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000134E2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000134E8 6700                       		beq.s	loc_11D02
000134EA 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000134F0                            
000134F0                            loc_11D02:
000134F0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000134F6 6600                       		bne.s	loc_11D10
000134F8 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000134FE                            
000134FE                            loc_11D10:
000134FE 0028 0004 0001             		ori.b	#4,1(a0)
00013504 117C 0004 0018             		move.b	#4,$18(a0)
0001350A 117C 000B 0020             		move.b	#$B,$20(a0)
00013510 117C 000C 0019             		move.b	#$C,$19(a0)
00013516 7400                       		moveq	#0,d2
00013518 45E8 0037                  		lea	$37(a0),a2
0001351C 264A                       		movea.l	a2,a3
0001351E 524A                       		addq.w	#1,a2
00013520 7203                       		moveq	#3,d1
00013522                            
00013522                            Obj60_MakeOrbs:
00013522 6100 BA26                  		bsr.w	SingleObjLoad2
00013526 6600                       		bne.s	loc_11D90
00013528 5213                       		addq.b	#1,(a3)
0001352A 3A09                       		move.w	a1,d5
0001352C 0445 D000                  		subi.w	#-$3000,d5
00013530 EC4D                       		lsr.w	#6,d5
00013532 0245 007F                  		andi.w	#$7F,d5
00013536 14C5                       		move.b	d5,(a2)+
00013538 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001353A 137C 0006 0024             		move.b	#6,$24(a1)
00013540 2368 0004 0004             		move.l	4(a0),4(a1)
00013546 3368 0002 0002             		move.w	2(a0),2(a1)
0001354C 0029 0004 0001             		ori.b	#4,1(a1)
00013552 137C 0004 0018             		move.b	#4,$18(a1)
00013558 137C 0008 0019             		move.b	#8,$19(a1)
0001355E 137C 0003 001A             		move.b	#3,$1A(a1)
00013564 137C 0098 0020             		move.b	#$98,$20(a1)
0001356A 1342 0026                  		move.b	d2,$26(a1)
0001356E 0602 0040                  		addi.b	#$40,d2
00013572 2348 003C                  		move.l	a0,$3C(a1)
00013576 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001357A                            
0001357A                            loc_11D90:
0001357A 7001                       		moveq	#1,d0
0001357C 0828 0000 0022             		btst	#0,$22(a0)
00013582 6700                       		beq.s	Obj60_Move
00013584 4440                       		neg.w	d0
00013586                            
00013586                            Obj60_Move:
00013586 1140 0036                  		move.b	d0,$36(a0)
0001358A 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00013590 5428 0024                  		addq.b	#2,$24(a0)
00013594 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001359A 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000135A0 6700                       		beq.s	locret_11DBC	; if not, branch
000135A2 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000135A6                            
000135A6                            locret_11DBC:
000135A6 4E75                       		rts	
000135A8                            ; ===========================================================================
000135A8                            
000135A8                            Obj60_ChkSonic:				; XREF: Obj60_Index
000135A8 3038 D008                  		move.w	($FFFFD008).w,d0
000135AC 9068 0008                  		sub.w	8(a0),d0
000135B0 6400                       		bcc.s	loc_11DCA
000135B2 4440                       		neg.w	d0
000135B4                            
000135B4                            loc_11DCA:
000135B4 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000135B8 6400                       		bcc.s	Obj60_Animate	; if not, branch
000135BA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000135BE 9068 000C                  		sub.w	$C(a0),d0
000135C2 6400                       		bcc.s	loc_11DDC
000135C4 4440                       		neg.w	d0
000135C6                            
000135C6                            loc_11DDC:
000135C6 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000135CA 6400                       		bcc.s	Obj60_Animate	; if not, branch
000135CC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000135D0 6600                       		bne.s	Obj60_Animate	; if yes, branch
000135D2 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000135D8                            
000135D8                            Obj60_Animate:
000135D8 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000135DE 6100 825E                  		bsr.w	AnimateSprite
000135E2 6000 0000                  		bra.w	Obj60_ChkDel
000135E6                            ; ===========================================================================
000135E6                            
000135E6                            Obj60_Display:				; XREF: Obj60_Index
000135E6 6100 B1DC                  		bsr.w	SpeedToPos
000135EA                            
000135EA                            Obj60_ChkDel:				; XREF: Obj60_Animate
000135EA 3028 0008                  		move.w	8(a0),d0
000135EE 0240 FF80                  		andi.w	#$FF80,d0
000135F2 3238 F700                  		move.w	($FFFFF700).w,d1
000135F6 0441 0080                  		subi.w	#$80,d1
000135FA 0241 FF80                  		andi.w	#$FF80,d1
000135FE 9041                       		sub.w	d1,d0
00013600 0C40 0280                  		cmpi.w	#$280,d0
00013604 6200 0000                  		bhi.w	Obj60_ChkGone
00013608 6000 B1D4                  		bra.w	DisplaySprite
0001360C                            ; ===========================================================================
0001360C                            
0001360C                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001360C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013610 6700                       		beq.s	loc_11E34		; if it's zero, don't remember object
00013612 3440                       		movea.w	d0,a2	; load address into a2
00013614 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00013618                            
00013618                            loc_11E34:
00013618 45E8 0037                  		lea	$37(a0),a2
0001361C 7400                       		moveq	#0,d2
0001361E 141A                       		move.b	(a2)+,d2
00013620 5342                       		subq.w	#1,d2
00013622 6500                       		bcs.s	Obj60_Delete
00013624                            
00013624                            loc_11E40:
00013624 7000                       		moveq	#0,d0
00013626 101A                       		move.b	(a2)+,d0
00013628 ED48                       		lsl.w	#6,d0
0001362A 0680 00FF D000             		addi.l	#$FFD000,d0
00013630 2240                       		movea.l	d0,a1
00013632 6100 B1FC                  		bsr.w	DeleteObject2
00013636 51CA FFEC                  		dbf	d2,loc_11E40
0001363A                            
0001363A                            Obj60_Delete:
0001363A 6000 B1F2                  		bra.w	DeleteObject
0001363E                            ; ===========================================================================
0001363E                            
0001363E                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001363E 2268 003C                  		movea.l	$3C(a0),a1
00013642 0C11 0060                  		cmpi.b	#$60,0(a1)
00013646 6600 B1E6                  		bne.w	DeleteObject
0001364A 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00013650 6600                       		bne.s	Obj60_Circle
00013652 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00013658 6600                       		bne.s	Obj60_Circle
0001365A 5428 0024                  		addq.b	#2,$24(a0)
0001365E 5329 0037                  		subq.b	#1,$37(a1)
00013662 6600                       		bne.s	Obj60_FireOrb
00013664 5429 0024                  		addq.b	#2,$24(a1)
00013668                            
00013668                            Obj60_FireOrb:
00013668 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
0001366E 0829 0000 0022             		btst	#0,$22(a1)
00013674 6700                       		beq.s	Obj60_Display2
00013676 4468 0010                  		neg.w	$10(a0)
0001367A                            
0001367A                            Obj60_Display2:
0001367A 6000 B162                  		bra.w	DisplaySprite
0001367E                            ; ===========================================================================
0001367E                            
0001367E                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001367E 1028 0026                  		move.b	$26(a0),d0
00013682 4EB9 0000 29CC             		jsr	(CalcSine).l
00013688 E841                       		asr.w	#4,d1
0001368A D269 0008                  		add.w	8(a1),d1
0001368E 3141 0008                  		move.w	d1,8(a0)
00013692 E840                       		asr.w	#4,d0
00013694 D069 000C                  		add.w	$C(a1),d0
00013698 3140 000C                  		move.w	d0,$C(a0)
0001369C 1029 0036                  		move.b	$36(a1),d0
000136A0 D128 0026                  		add.b	d0,$26(a0)
000136A4 6000 B138                  		bra.w	DisplaySprite
000136A8                            ; ===========================================================================
000136A8                            
000136A8                            Obj60_ChkDel2:				; XREF: Obj60_Index
000136A8 6100 B11A                  		bsr.w	SpeedToPos
000136AC 4A28 0001                  		tst.b	1(a0)
000136B0 6A00 B17C                  		bpl.w	DeleteObject
000136B4 6000 B128                  		bra.w	DisplaySprite
000136B8                            ; ===========================================================================
000136B8                            Ani_obj60:
000136B8                            	include "_anim\obj60.asm"
000136B8                            ; ---------------------------------------------------------------------------
000136B8                            ; Animation script - Orbinaut enemy
000136B8                            ; ---------------------------------------------------------------------------
000136B8 0000                       		dc.w byte_11EDA-Ani_obj60
000136BA 0000                       		dc.w byte_11EDE-Ani_obj60
000136BC 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000136C0 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000136C6                            		even
000136C6                            		even
000136C6                            
000136C6                            ; ---------------------------------------------------------------------------
000136C6                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000136C6                            ; ---------------------------------------------------------------------------
000136C6                            Map_obj60:
000136C6                            	include "_maps\obj60.asm"
000136C6                            ; ---------------------------------------------------------------------------
000136C6                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000136C6                            ; ---------------------------------------------------------------------------
000136C6 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000136CA 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000136CE 01                         byte_11EEC:	dc.b 1
000136CF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000136D4 01                         byte_11EF2:	dc.b 1
000136D5 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000136DA 01                         byte_11EF8:	dc.b 1
000136DB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000136E0 01                         byte_11EFE:	dc.b 1
000136E1 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000136E6                            		even
000136E6                            		even
000136E6                            
000136E6                            ; ===========================================================================
000136E6                            ; ---------------------------------------------------------------------------
000136E6                            ; Object 16 - harpoon (LZ)
000136E6                            ; ---------------------------------------------------------------------------
000136E6                            
000136E6                            Obj16:					; XREF: Obj_Index
000136E6 7000                       		moveq	#0,d0
000136E8 1028 0024                  		move.b	$24(a0),d0
000136EC 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000136F0 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000136F4                            ; ===========================================================================
000136F4 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000136F6 0000                       		dc.w Obj16_Move-Obj16_Index
000136F8 0000                       		dc.w Obj16_Wait-Obj16_Index
000136FA                            ; ===========================================================================
000136FA                            
000136FA                            Obj16_Main:				; XREF: Obj16_Index
000136FA 5428 0024                  		addq.b	#2,$24(a0)
000136FE 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00013706 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001370C 0028 0004 0001             		ori.b	#4,1(a0)
00013712 117C 0004 0018             		move.b	#4,$18(a0)
00013718 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001371E 117C 0014 0019             		move.b	#$14,$19(a0)
00013724 317C 003C 0030             		move.w	#60,$30(a0)
0001372A                            
0001372A                            Obj16_Move:				; XREF: Obj16_Index
0001372A 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00013730 6100 810C                  		bsr.w	AnimateSprite
00013734 7000                       		moveq	#0,d0
00013736 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001373A 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00013740 6000 D6E6                  		bra.w	MarkObjGone
00013744                            ; ===========================================================================
00013744 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001374A                            ; ===========================================================================
0001374A                            
0001374A                            Obj16_Wait:				; XREF: Obj16_Index
0001374A 5368 0030                  		subq.w	#1,$30(a0)
0001374E 6A00                       		bpl.s	Obj16_ChkDel
00013750 317C 003C 0030             		move.w	#60,$30(a0)
00013756 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001375A 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00013760                            
00013760                            Obj16_ChkDel:
00013760 6000 D6C6                  		bra.w	MarkObjGone
00013764                            ; ===========================================================================
00013764                            Ani_obj16:
00013764                            	include "_anim\obj16.asm"
00013764                            ; ---------------------------------------------------------------------------
00013764                            ; Animation script - harpoon (LZ)
00013764                            ; ---------------------------------------------------------------------------
00013764 0000                       		dc.w byte_11F8A-Ani_obj16
00013766 0000                       		dc.w byte_11F8E-Ani_obj16
00013768 0000                       		dc.w byte_11F92-Ani_obj16
0001376A 0000                       		dc.w byte_11F96-Ani_obj16
0001376C 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00013770 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00013774 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00013778 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0001377C                            		even
0001377C                            		even
0001377C                            
0001377C                            ; ---------------------------------------------------------------------------
0001377C                            ; Sprite mappings - harpoon (LZ)
0001377C                            ; ---------------------------------------------------------------------------
0001377C                            Map_obj16:
0001377C                            	include "_maps\obj16.asm"
0001377C                            ; ---------------------------------------------------------------------------
0001377C                            ; Sprite mappings - harpoon (LZ)
0001377C                            ; ---------------------------------------------------------------------------
0001377C 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00013780 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00013784 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00013788 01                         byte_11FA6:	dc.b 1
00013789 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001378E 01                         byte_11FAC:	dc.b 1
0001378F FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00013794 02                         byte_11FB2:	dc.b 2
00013795 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001379A FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001379F 01                         byte_11FBD:	dc.b 1
000137A0 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000137A5 01                         byte_11FC3:	dc.b 1
000137A6 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000137AB 02                         byte_11FC9:	dc.b 2
000137AC D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000137B1 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000137B6                            		even
000137B6                            		even
000137B6                            
000137B6                            ; ===========================================================================
000137B6                            ; ---------------------------------------------------------------------------
000137B6                            ; Object 61 - blocks (LZ)
000137B6                            ; ---------------------------------------------------------------------------
000137B6                            
000137B6                            Obj61:					; XREF: Obj_Index
000137B6 7000                       		moveq	#0,d0
000137B8 1028 0024                  		move.b	$24(a0),d0
000137BC 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000137C0 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000137C4                            ; ===========================================================================
000137C4 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000137C6 0000                       		dc.w Obj61_Action-Obj61_Index
000137C8                            
000137C8 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000137CA 200C                       		dc.b $20, $C
000137CC 1010                       		dc.b $10, $10
000137CE 1010                       		dc.b $10, $10
000137D0                            ; ===========================================================================
000137D0                            
000137D0                            Obj61_Main:				; XREF: Obj61_Index
000137D0 5428 0024                  		addq.b	#2,$24(a0)
000137D4 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000137DC 317C 43E6 0002             		move.w	#$43E6,2(a0)
000137E2 117C 0004 0001             		move.b	#4,1(a0)
000137E8 117C 0003 0018             		move.b	#3,$18(a0)
000137EE 7000                       		moveq	#0,d0
000137F0 1028 0028                  		move.b	$28(a0),d0
000137F4 E648                       		lsr.w	#3,d0
000137F6 0240 000E                  		andi.w	#$E,d0
000137FA 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000137FE 115A 0019                  		move.b	(a2)+,$19(a0)
00013802 1152 0016                  		move.b	(a2),$16(a0)
00013806 E248                       		lsr.w	#1,d0
00013808 1140 001A                  		move.b	d0,$1A(a0)
0001380C 3168 0008 0034             		move.w	8(a0),$34(a0)
00013812 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013818 1028 0028                  		move.b	$28(a0),d0
0001381C 0200 000F                  		andi.b	#$F,d0
00013820 6700                       		beq.s	Obj61_Action
00013822 0C00 0007                  		cmpi.b	#7,d0
00013826 6700                       		beq.s	Obj61_Action
00013828 117C 0001 0038             		move.b	#1,$38(a0)
0001382E                            
0001382E                            Obj61_Action:				; XREF: Obj61_Index
0001382E 3F28 0008                  		move.w	8(a0),-(sp)
00013832 7000                       		moveq	#0,d0
00013834 1028 0028                  		move.b	$28(a0),d0
00013838 0240 000F                  		andi.w	#$F,d0
0001383C D040                       		add.w	d0,d0
0001383E 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00013842 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013846 381F                       		move.w	(sp)+,d4
00013848 4A28 0001                  		tst.b	1(a0)
0001384C 6A00                       		bpl.s	Obj61_ChkDel
0001384E 7200                       		moveq	#0,d1
00013850 1228 0019                  		move.b	$19(a0),d1
00013854 0641 000B                  		addi.w	#$B,d1
00013858 7400                       		moveq	#0,d2
0001385A 1428 0016                  		move.b	$16(a0),d2
0001385E 3602                       		move.w	d2,d3
00013860 5243                       		addq.w	#1,d3
00013862 6100 D8E8                  		bsr.w	SolidObject
00013866 1144 003F                  		move.b	d4,$3F(a0)
0001386A 6100 0000                  		bsr.w	loc_12180
0001386E                            
0001386E                            Obj61_ChkDel:
0001386E 3028 0034                  		move.w	$34(a0),d0
00013872 0240 FF80                  		andi.w	#$FF80,d0
00013876 3238 F700                  		move.w	($FFFFF700).w,d1
0001387A 0441 0080                  		subi.w	#$80,d1
0001387E 0241 FF80                  		andi.w	#$FF80,d1
00013882 9041                       		sub.w	d1,d0
00013884 0C40 0280                  		cmpi.w	#$280,d0
00013888 6300 AF54                  		bls.w	DisplaySprite
0001388C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013890 6700 AF9C                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00013894 3440                       		movea.w	d0,a2	; load address into a2
00013896 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0001389A 6000 AF92                  		bra.w	DeleteObject
0001389E                            ; ===========================================================================
0001389E 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000138A2 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000138A6 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000138AA 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000138AE                            ; ===========================================================================
000138AE                            
000138AE                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000138AE 4E75                       		rts	
000138B0                            ; ===========================================================================
000138B0                            
000138B0                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000138B0 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000138B4 6600                       		bne.s	loc_120D6	; if yes, branch
000138B6 0828 0003 0022             		btst	#3,$22(a0)
000138BC 6700                       		beq.s	locret_120D4
000138BE 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
000138C4                            
000138C4                            locret_120D4:
000138C4 4E75                       		rts	
000138C6                            ; ===========================================================================
000138C6                            
000138C6                            loc_120D6:
000138C6 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000138CA 66F8                       		bne.s	locret_120D4	; if time remains, branch
000138CC 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000138D0 4228 0038                  		clr.b	$38(a0)
000138D4 4E75                       		rts	
000138D6                            ; ===========================================================================
000138D6                            
000138D6                            Obj61_Type02:				; XREF: Obj61_TypeIndex
000138D6 6100 AEEC                  		bsr.w	SpeedToPos
000138DA 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
000138DE 6100 0000                  		bsr.w	ObjHitFloor
000138E2 4A41                       		tst.w	d1
000138E4 6A00 0000                  		bpl.w	locret_12106
000138E8 5241                       		addq.w	#1,d1
000138EA D368 000C                  		add.w	d1,$C(a0)
000138EE 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
000138F2 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000138F6                            
000138F6                            locret_12106:
000138F6 4E75                       		rts	
000138F8                            ; ===========================================================================
000138F8                            
000138F8                            Obj61_Type04:				; XREF: Obj61_TypeIndex
000138F8 6100 AECA                  		bsr.w	SpeedToPos
000138FC 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013900 6100 0000                  		bsr.w	ObjHitCeiling
00013904 4A41                       		tst.w	d1
00013906 6A00 0000                  		bpl.w	locret_12126
0001390A 9368 000C                  		sub.w	d1,$C(a0)
0001390E 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013912 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013916                            
00013916                            locret_12126:
00013916 4E75                       		rts	
00013918                            ; ===========================================================================
00013918                            
00013918                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013918 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001391E 6600                       		bne.s	locret_12138	; if not, branch
00013920 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013924 4228 0038                  		clr.b	$38(a0)
00013928                            
00013928                            locret_12138:
00013928 4E75                       		rts	
0001392A                            ; ===========================================================================
0001392A                            
0001392A                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001392A 3038 F646                  		move.w	($FFFFF646).w,d0
0001392E 9068 000C                  		sub.w	$C(a0),d0
00013932 6700                       		beq.s	locret_1217E
00013934 6400                       		bcc.s	loc_12162
00013936 0C40 FFFE                  		cmpi.w	#-2,d0
0001393A 6C00                       		bge.s	loc_1214E
0001393C 70FE                       		moveq	#-2,d0
0001393E                            
0001393E                            loc_1214E:
0001393E D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013942 6100 0000                  		bsr.w	ObjHitCeiling
00013946 4A41                       		tst.w	d1
00013948 6A00 0000                  		bpl.w	locret_12160
0001394C 9368 000C                  		sub.w	d1,$C(a0)
00013950                            
00013950                            locret_12160:
00013950 4E75                       		rts	
00013952                            ; ===========================================================================
00013952                            
00013952                            loc_12162:				; XREF: Obj61_Type07
00013952 0C40 0002                  		cmpi.w	#2,d0
00013956 6F00                       		ble.s	loc_1216A
00013958 7002                       		moveq	#2,d0
0001395A                            
0001395A                            loc_1216A:
0001395A D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001395E 6100 0000                  		bsr.w	ObjHitFloor
00013962 4A41                       		tst.w	d1
00013964 6A00 0000                  		bpl.w	locret_1217E
00013968 5241                       		addq.w	#1,d1
0001396A D368 000C                  		add.w	d1,$C(a0)
0001396E                            
0001396E                            locret_1217E:
0001396E 4E75                       		rts	
00013970                            ; ===========================================================================
00013970                            
00013970                            loc_12180:				; XREF: Obj61_Action
00013970 4A28 0038                  		tst.b	$38(a0)
00013974 6700                       		beq.s	locret_121C0
00013976 0828 0003 0022             		btst	#3,$22(a0)
0001397C 6600                       		bne.s	loc_1219A
0001397E 4A28 003E                  		tst.b	$3E(a0)
00013982 6700                       		beq.s	locret_121C0
00013984 5928 003E                  		subq.b	#4,$3E(a0)
00013988 6000                       		bra.s	loc_121A6
0001398A                            ; ===========================================================================
0001398A                            
0001398A                            loc_1219A:
0001398A 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013990 6700                       		beq.s	locret_121C0
00013992 5828 003E                  		addq.b	#4,$3E(a0)
00013996                            
00013996                            loc_121A6:
00013996 1028 003E                  		move.b	$3E(a0),d0
0001399A 4EB9 0000 29CC             		jsr	(CalcSine).l
000139A0 323C 0400                  		move.w	#$400,d1
000139A4 C1C1                       		muls.w	d1,d0
000139A6 4840                       		swap	d0
000139A8 D068 0030                  		add.w	$30(a0),d0
000139AC 3140 000C                  		move.w	d0,$C(a0)
000139B0                            
000139B0                            locret_121C0:
000139B0 4E75                       		rts	
000139B2                            ; ===========================================================================
000139B2                            ; ---------------------------------------------------------------------------
000139B2                            ; Sprite mappings - blocks (LZ)
000139B2                            ; ---------------------------------------------------------------------------
000139B2                            Map_obj61:
000139B2                            	include "_maps\obj61.asm"
000139B2                            ; ---------------------------------------------------------------------------
000139B2                            ; Sprite mappings - blocks (LZ)
000139B2                            ; ---------------------------------------------------------------------------
000139B2 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000139B6 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000139BA 01                         byte_121CA:	dc.b 1
000139BB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000139C0 02                         byte_121D0:	dc.b 2
000139C1 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000139C6 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000139CB 01                         byte_121DB:	dc.b 1
000139CC F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000139D1 01                         byte_121E1:	dc.b 1
000139D2 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
000139D8 00                         		even
000139D8 00                         		even
000139D8                            
000139D8                            ; ===========================================================================
000139D8                            ; ---------------------------------------------------------------------------
000139D8                            ; Object 62 - gargoyle head (LZ)
000139D8                            ; ---------------------------------------------------------------------------
000139D8                            
000139D8                            Obj62:					; XREF: Obj_Index
000139D8 7000                       		moveq	#0,d0
000139DA 1028 0024                  		move.b	$24(a0),d0
000139DE 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
000139E2 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
000139E6 6000 D440                  		bra.w	MarkObjGone
000139EA                            ; ===========================================================================
000139EA 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
000139EC 0000                       		dc.w Obj62_MakeFire-Obj62_Index
000139EE 0000                       		dc.w Obj62_FireBall-Obj62_Index
000139F0 0000                       		dc.w Obj62_AniFire-Obj62_Index
000139F2                            
000139F2 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000139FA                            ; ===========================================================================
000139FA                            
000139FA                            Obj62_Main:				; XREF: Obj62_Index
000139FA 5428 0024                  		addq.b	#2,$24(a0)
000139FE 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013A06 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013A0C 0028 0004 0001             		ori.b	#4,1(a0)
00013A12 117C 0003 0018             		move.b	#3,$18(a0)
00013A18 117C 0010 0019             		move.b	#$10,$19(a0)
00013A1E 1028 0028                  		move.b	$28(a0),d0	; get object type
00013A22 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013A26 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013A2C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013A32 0228 000F 0028             		andi.b	#$F,$28(a0)
00013A38                            
00013A38                            Obj62_MakeFire:				; XREF: Obj62_Index
00013A38 5328 001E                  		subq.b	#1,$1E(a0)
00013A3C 6600                       		bne.s	Obj62_NoFire
00013A3E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013A44 6100 B15E                  		bsr.w	ChkObjOnScreen
00013A48 6600                       		bne.s	Obj62_NoFire
00013A4A 6100 B4E8                  		bsr.w	SingleObjLoad
00013A4E 6600                       		bne.s	Obj62_NoFire
00013A50 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013A54 5829 0024                  		addq.b	#4,$24(a1)
00013A58 3368 0008 0008             		move.w	8(a0),8(a1)
00013A5E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013A64 1368 0001 0001             		move.b	1(a0),1(a1)
00013A6A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013A70                            
00013A70                            Obj62_NoFire:
00013A70 4E75                       		rts	
00013A72                            ; ===========================================================================
00013A72                            
00013A72                            Obj62_FireBall:				; XREF: Obj62_Index
00013A72 5428 0024                  		addq.b	#2,$24(a0)
00013A76 117C 0008 0016             		move.b	#8,$16(a0)
00013A7C 117C 0008 0017             		move.b	#8,$17(a0)
00013A82 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013A8A 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013A90 0028 0004 0001             		ori.b	#4,1(a0)
00013A96 117C 0004 0018             		move.b	#4,$18(a0)
00013A9C 117C 0098 0020             		move.b	#$98,$20(a0)
00013AA2 117C 0008 0019             		move.b	#8,$19(a0)
00013AA8 117C 0002 001A             		move.b	#2,$1A(a0)
00013AAE 5068 000C                  		addq.w	#8,$C(a0)
00013AB2 317C 0200 0010             		move.w	#$200,$10(a0)
00013AB8 0828 0000 0022             		btst	#0,$22(a0)
00013ABE 6600                       		bne.s	Obj62_Sound
00013AC0 4468 0010                  		neg.w	$10(a0)
00013AC4                            
00013AC4                            Obj62_Sound:
00013AC4 303C 00AE                  		move.w	#$AE,d0
00013AC8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013ACE                            
00013ACE                            Obj62_AniFire:				; XREF: Obj62_Index
00013ACE 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013AD2 0200 0007                  		andi.b	#7,d0
00013AD6 6600                       		bne.s	Obj62_StopFire
00013AD8 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013ADE                            
00013ADE                            Obj62_StopFire:
00013ADE 6100 ACE4                  		bsr.w	SpeedToPos
00013AE2 0828 0000 0022             		btst	#0,$22(a0)
00013AE8 6600                       		bne.s	Obj62_StopFire2
00013AEA 76F8                       		moveq	#-8,d3
00013AEC 6100 0000                  		bsr.w	ObjHitWallLeft
00013AF0 4A41                       		tst.w	d1
00013AF2 6B00 AD3A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013AF6 4E75                       		rts	
00013AF8                            ; ===========================================================================
00013AF8                            
00013AF8                            Obj62_StopFire2:
00013AF8 7608                       		moveq	#8,d3
00013AFA 6100 0000                  		bsr.w	ObjHitWallRight
00013AFE 4A41                       		tst.w	d1
00013B00 6B00 AD2C                  		bmi.w	DeleteObject
00013B04 4E75                       		rts	
00013B06                            ; ===========================================================================
00013B06                            ; ---------------------------------------------------------------------------
00013B06                            ; Sprite mappings - gargoyle head (LZ)
00013B06                            ; ---------------------------------------------------------------------------
00013B06                            Map_obj62:
00013B06                            	include "_maps\obj62.asm"
00013B06                            ; ---------------------------------------------------------------------------
00013B06                            ; Sprite mappings - gargoyle head (LZ)
00013B06                            ; ---------------------------------------------------------------------------
00013B06 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013B0A 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013B0E 03                         byte_12320:	dc.b 3
00013B0F F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013B14 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013B19 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013B1E 01                         byte_12330:	dc.b 1
00013B1F FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013B24 01                         byte_12336:	dc.b 1
00013B25 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013B2A                            		even
00013B2A                            		even
00013B2A                            
00013B2A                            ; ===========================================================================
00013B2A                            ; ---------------------------------------------------------------------------
00013B2A                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013B2A                            ; ---------------------------------------------------------------------------
00013B2A                            
00013B2A                            Obj63:					; XREF: Obj_Index
00013B2A 7000                       		moveq	#0,d0
00013B2C 1028 0024                  		move.b	$24(a0),d0
00013B30 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013B34 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013B38 3028 0030                  		move.w	$30(a0),d0
00013B3C 0240 FF80                  		andi.w	#$FF80,d0
00013B40 3238 F700                  		move.w	($FFFFF700).w,d1
00013B44 0441 0080                  		subi.w	#$80,d1
00013B48 0241 FF80                  		andi.w	#$FF80,d1
00013B4C 9041                       		sub.w	d1,d0
00013B4E 0C40 0280                  		cmpi.w	#$280,d0
00013B52 6300                       		bls.s	Obj63_Display
00013B54 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013B58 6700                       		beq.s	loc_1236A		; if it's zero, don't remember object
00013B5A 3440                       		movea.w	d0,a2	; load address into a2
00013B5C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00013B60 6000                       		bra.s	loc_1236A	; and delete object
00013B62                            
00013B62                            Obj63_Display:				; XREF: loc_1236A
00013B62 6000 AC7A                  		bra.w	DisplaySprite
00013B66                            ; ===========================================================================
00013B66                            
00013B66                            loc_1236A:				; XREF: Obj63
00013B66 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013B6C 6600                       		bne.s	loc_12378
00013B6E 0C40 FF80                  		cmpi.w	#-$80,d0
00013B72 64EE                       		bcc.s	Obj63_Display
00013B74                            
00013B74                            loc_12378:
00013B74 1028 002F                  		move.b	$2F(a0),d0
00013B78 6A00 ACB4                  		bpl.w	DeleteObject
00013B7C 0240 007F                  		andi.w	#$7F,d0
00013B80 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013B84 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013B8A 6000 ACA2                  		bra.w	DeleteObject
00013B8E                            ; ===========================================================================
00013B8E 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013B90 0000                       		dc.w loc_124B2-Obj63_Index
00013B92 0000                       		dc.w loc_124C2-Obj63_Index
00013B94 0000                       		dc.w loc_124DE-Obj63_Index
00013B96                            ; ===========================================================================
00013B96                            
00013B96                            Obj63_Main:				; XREF: Obj63_Index
00013B96 1028 0028                  		move.b	$28(a0),d0
00013B9A 6B00 0000                  		bmi.w	loc_12460
00013B9E 5428 0024                  		addq.b	#2,$24(a0)
00013BA2 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013BAA 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013BB0 0028 0004 0001             		ori.b	#4,1(a0)
00013BB6 117C 0010 0019             		move.b	#$10,$19(a0)
00013BBC 117C 0004 0018             		move.b	#4,$18(a0)
00013BC2 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013BC8 6600                       		bne.s	loc_123E2
00013BCA 5828 0024                  		addq.b	#4,$24(a0)
00013BCE 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013BD4 117C 0001 0018             		move.b	#1,$18(a0)
00013BDA 6000 0000                  		bra.w	loc_124DE
00013BDE                            ; ===========================================================================
00013BDE                            
00013BDE                            loc_123E2:
00013BDE 117C 0004 001A             		move.b	#4,$1A(a0)
00013BE4 7000                       		moveq	#0,d0
00013BE6 1028 0028                  		move.b	$28(a0),d0
00013BEA 3200                       		move.w	d0,d1
00013BEC E648                       		lsr.w	#3,d0
00013BEE 0240 001E                  		andi.w	#$1E,d0
00013BF2 45FA 0000                  		lea	Obj63_Data(pc),a2
00013BF6 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013BFA 315A 0038                  		move.w	(a2)+,$38(a0)
00013BFE 315A 0030                  		move.w	(a2)+,$30(a0)
00013C02 214A 003C                  		move.l	a2,$3C(a0)
00013C06 0241 000F                  		andi.w	#$F,d1
00013C0A E549                       		lsl.w	#2,d1
00013C0C 1141 0038                  		move.b	d1,$38(a0)
00013C10 117C 0004 003A             		move.b	#4,$3A(a0)
00013C16 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013C1A 6700                       		beq.s	loc_1244C
00013C1C 117C 0001 003B             		move.b	#1,$3B(a0)
00013C22 4428 003A                  		neg.b	$3A(a0)
00013C26 7200                       		moveq	#0,d1
00013C28 1228 0038                  		move.b	$38(a0),d1
00013C2C D228 003A                  		add.b	$3A(a0),d1
00013C30 B228 0039                  		cmp.b	$39(a0),d1
00013C34 6500                       		bcs.s	loc_12448
00013C36 1001                       		move.b	d1,d0
00013C38 7200                       		moveq	#0,d1
00013C3A 4A00                       		tst.b	d0
00013C3C 6A00                       		bpl.s	loc_12448
00013C3E 1228 0039                  		move.b	$39(a0),d1
00013C42 5901                       		subq.b	#4,d1
00013C44                            
00013C44                            loc_12448:
00013C44 1141 0038                  		move.b	d1,$38(a0)
00013C48                            
00013C48                            loc_1244C:
00013C48 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013C4E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013C54 6100 0000                  		bsr.w	Obj63_ChangeDir
00013C58 6000 0000                  		bra.w	loc_124B2
00013C5C                            ; ===========================================================================
00013C5C                            
00013C5C                            loc_12460:				; XREF: Obj63_Main
00013C5C 1140 002F                  		move.b	d0,$2F(a0)
00013C60 0240 007F                  		andi.w	#$7F,d0
00013C64 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013C68 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013C6E 6600 ABBE                  		bne.w	DeleteObject
00013C72 D040                       		add.w	d0,d0
00013C74 0240 001E                  		andi.w	#$1E,d0
00013C78 0640 0070                  		addi.w	#$70,d0
00013C7C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00013C82 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013C86 321A                       		move.w	(a2)+,d1
00013C88 2248                       		movea.l	a0,a1
00013C8A 6000                       		bra.s	Obj63_MakePtfms
00013C8C                            ; ===========================================================================
00013C8C                            
00013C8C                            Obj63_Loop:
00013C8C 6100 B2A6                  		bsr.w	SingleObjLoad
00013C90 6600                       		bne.s	loc_124AA
00013C92                            
00013C92                            Obj63_MakePtfms:			; XREF: loc_12460
00013C92 12BC 0063                  		move.b	#$63,0(a1)
00013C96 335A 0008                  		move.w	(a2)+,8(a1)
00013C9A 335A 000C                  		move.w	(a2)+,$C(a1)
00013C9E 301A                       		move.w	(a2)+,d0
00013CA0 1340 0028                  		move.b	d0,$28(a1)
00013CA4                            
00013CA4                            loc_124AA:
00013CA4 51C9 FFE6                  		dbf	d1,Obj63_Loop
00013CA8                            
00013CA8 588F                       		addq.l	#4,sp
00013CAA 4E75                       		rts	
00013CAC                            ; ===========================================================================
00013CAC                            
00013CAC                            loc_124B2:				; XREF: Obj63_Index
00013CAC 7200                       		moveq	#0,d1
00013CAE 1228 0019                  		move.b	$19(a0),d1
00013CB2 4EB9 0000 8510             		jsr	(PlatformObject).l
00013CB8 6000 0000                  		bra.w	sub_12502
00013CBC                            ; ===========================================================================
00013CBC                            
00013CBC                            loc_124C2:				; XREF: Obj63_Index
00013CBC 7200                       		moveq	#0,d1
00013CBE 1228 0019                  		move.b	$19(a0),d1
00013CC2 4EB9 0000 8684             		jsr	(ExitPlatform).l
00013CC8 3F28 0008                  		move.w	8(a0),-(sp)
00013CCC 6100 0000                  		bsr.w	sub_12502
00013CD0 341F                       		move.w	(sp)+,d2
00013CD2 4EF9 0000 8BFA             		jmp	(MvSonicOnPtfm2).l
00013CD8                            ; ===========================================================================
00013CD8                            
00013CD8                            loc_124DE:				; XREF: Obj63_Index
00013CD8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013CDC 0240 0003                  		andi.w	#3,d0
00013CE0 6600                       		bne.s	loc_124FC
00013CE2 7201                       		moveq	#1,d1
00013CE4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013CE8 6700                       		beq.s	loc_124F2
00013CEA 4401                       		neg.b	d1
00013CEC                            
00013CEC                            loc_124F2:
00013CEC D328 001A                  		add.b	d1,$1A(a0)
00013CF0 0228 0003 001A             		andi.b	#3,$1A(a0)
00013CF6                            
00013CF6                            loc_124FC:
00013CF6 588F                       		addq.l	#4,sp
00013CF8 6000 D12E                  		bra.w	MarkObjGone
00013CFC                            
00013CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CFC                            
00013CFC                            
00013CFC                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013CFC 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013D00 6700                       		beq.s	loc_12520
00013D02 4A28 003B                  		tst.b	$3B(a0)
00013D06 6600                       		bne.s	loc_12520
00013D08 117C 0001 003B             		move.b	#1,$3B(a0)
00013D0E 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013D14 4428 003A                  		neg.b	$3A(a0)
00013D18 6000                       		bra.s	loc_12534
00013D1A                            ; ===========================================================================
00013D1A                            
00013D1A                            loc_12520:
00013D1A 3028 0008                  		move.w	8(a0),d0
00013D1E B068 0034                  		cmp.w	$34(a0),d0
00013D22 6600                       		bne.s	loc_1256A
00013D24 3028 000C                  		move.w	$C(a0),d0
00013D28 B068 0036                  		cmp.w	$36(a0),d0
00013D2C 6600                       		bne.s	loc_1256A
00013D2E                            
00013D2E                            loc_12534:
00013D2E 7200                       		moveq	#0,d1
00013D30 1228 0038                  		move.b	$38(a0),d1
00013D34 D228 003A                  		add.b	$3A(a0),d1
00013D38 B228 0039                  		cmp.b	$39(a0),d1
00013D3C 6500                       		bcs.s	loc_12552
00013D3E 1001                       		move.b	d1,d0
00013D40 7200                       		moveq	#0,d1
00013D42 4A00                       		tst.b	d0
00013D44 6A00                       		bpl.s	loc_12552
00013D46 1228 0039                  		move.b	$39(a0),d1
00013D4A 5901                       		subq.b	#4,d1
00013D4C                            
00013D4C                            loc_12552:
00013D4C 1141 0038                  		move.b	d1,$38(a0)
00013D50 2268 003C                  		movea.l	$3C(a0),a1
00013D54 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013D5A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013D60 6100 0000                  		bsr.w	Obj63_ChangeDir
00013D64                            
00013D64                            loc_1256A:
00013D64 6100 AA5E                  		bsr.w	SpeedToPos
00013D68 4E75                       		rts	
00013D6A                            ; End of function sub_12502
00013D6A                            
00013D6A                            
00013D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D6A                            
00013D6A                            
00013D6A                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013D6A 7000                       		moveq	#0,d0
00013D6C 343C FF00                  		move.w	#-$100,d2
00013D70 3028 0008                  		move.w	8(a0),d0
00013D74 9068 0034                  		sub.w	$34(a0),d0
00013D78 6400                       		bcc.s	loc_12584
00013D7A 4440                       		neg.w	d0
00013D7C 4442                       		neg.w	d2
00013D7E                            
00013D7E                            loc_12584:
00013D7E 7200                       		moveq	#0,d1
00013D80 363C FF00                  		move.w	#-$100,d3
00013D84 3228 000C                  		move.w	$C(a0),d1
00013D88 9268 0036                  		sub.w	$36(a0),d1
00013D8C 6400                       		bcc.s	loc_12598
00013D8E 4441                       		neg.w	d1
00013D90 4443                       		neg.w	d3
00013D92                            
00013D92                            loc_12598:
00013D92 B240                       		cmp.w	d0,d1
00013D94 6500                       		bcs.s	loc_125C2
00013D96 3028 0008                  		move.w	8(a0),d0
00013D9A 9068 0034                  		sub.w	$34(a0),d0
00013D9E 6700                       		beq.s	loc_125AE
00013DA0 48C0                       		ext.l	d0
00013DA2 E180                       		asl.l	#8,d0
00013DA4 81C1                       		divs.w	d1,d0
00013DA6 4440                       		neg.w	d0
00013DA8                            
00013DA8                            loc_125AE:
00013DA8 3140 0010                  		move.w	d0,$10(a0)
00013DAC 3143 0012                  		move.w	d3,$12(a0)
00013DB0 4840                       		swap	d0
00013DB2 3140 000A                  		move.w	d0,$A(a0)
00013DB6 4268 000E                  		clr.w	$E(a0)
00013DBA 4E75                       		rts	
00013DBC                            ; ===========================================================================
00013DBC                            
00013DBC                            loc_125C2:				; XREF: Obj63_ChangeDir
00013DBC 3228 000C                  		move.w	$C(a0),d1
00013DC0 9268 0036                  		sub.w	$36(a0),d1
00013DC4 6700                       		beq.s	loc_125D4
00013DC6 48C1                       		ext.l	d1
00013DC8 E181                       		asl.l	#8,d1
00013DCA 83C0                       		divs.w	d0,d1
00013DCC 4441                       		neg.w	d1
00013DCE                            
00013DCE                            loc_125D4:
00013DCE 3141 0012                  		move.w	d1,$12(a0)
00013DD2 3142 0010                  		move.w	d2,$10(a0)
00013DD6 4841                       		swap	d1
00013DD8 3141 000E                  		move.w	d1,$E(a0)
00013DDC 4268 000A                  		clr.w	$A(a0)
00013DE0 4E75                       		rts	
00013DE2                            ; End of function Obj63_ChangeDir
00013DE2                            
00013DE2                            ; ===========================================================================
00013DE2 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013DE4 0000                       		dc.w word_12610-Obj63_Data
00013DE6 0000                       		dc.w word_12628-Obj63_Data
00013DE8 0000                       		dc.w word_1263C-Obj63_Data
00013DEA 0000                       		dc.w word_12650-Obj63_Data
00013DEC 0000                       		dc.w word_12668-Obj63_Data
00013DEE 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013DFE 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013E0A 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013E1A 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013E22 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013E36 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013E4A 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013E62 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013E76                            
00013E76                            ; ---------------------------------------------------------------------------
00013E76                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013E76                            ; ---------------------------------------------------------------------------
00013E76                            Map_obj63:
00013E76                            	include "_maps\obj63.asm"
00013E76                            ; ---------------------------------------------------------------------------
00013E76                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013E76                            ; ---------------------------------------------------------------------------
00013E76 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013E7A 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013E7E 0000                       		dc.w byte_1269E-Map_obj63
00013E80 01                         byte_12686:	dc.b 1
00013E81 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013E86 01                         byte_1268C:	dc.b 1
00013E87 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00013E8C 01                         byte_12692:	dc.b 1
00013E8D F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00013E92 01                         byte_12698:	dc.b 1
00013E93 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00013E98 01                         byte_1269E:	dc.b 1
00013E99 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00013E9E                            		even
00013E9E                            		even
00013E9E                            
00013E9E                            ; ===========================================================================
00013E9E                            ; ---------------------------------------------------------------------------
00013E9E                            ; Object 64 - bubbles (LZ)
00013E9E                            ; ---------------------------------------------------------------------------
00013E9E                            
00013E9E                            Obj64:					; XREF: Obj_Index
00013E9E 7000                       		moveq	#0,d0
00013EA0 1028 0024                  		move.b	$24(a0),d0
00013EA4 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00013EA8 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00013EAC                            ; ===========================================================================
00013EAC 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00013EAE 0000                       		dc.w Obj64_Animate-Obj64_Index
00013EB0 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00013EB2 0000                       		dc.w Obj64_Display2-Obj64_Index
00013EB4 0000                       		dc.w Obj64_Delete3-Obj64_Index
00013EB6 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00013EB8                            ; ===========================================================================
00013EB8                            
00013EB8                            Obj64_Main:				; XREF: Obj64_Index
00013EB8 5428 0024                  		addq.b	#2,$24(a0)
00013EBC 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00013EC4 317C 8348 0002             		move.w	#$8348,2(a0)
00013ECA 117C 0084 0001             		move.b	#$84,1(a0)
00013ED0 117C 0010 0019             		move.b	#$10,$19(a0)
00013ED6 117C 0001 0018             		move.b	#1,$18(a0)
00013EDC 1028 0028                  		move.b	$28(a0),d0	; get object type
00013EE0 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00013EE2 5028 0024                  		addq.b	#8,$24(a0)
00013EE6 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00013EEA 1140 0032                  		move.b	d0,$32(a0)
00013EEE 1140 0033                  		move.b	d0,$33(a0)
00013EF2 117C 0006 001C             		move.b	#6,$1C(a0)
00013EF8 6000 0000                  		bra.w	Obj64_BblMaker
00013EFC                            ; ===========================================================================
00013EFC                            
00013EFC                            Obj64_Bubble:				; XREF: Obj64_Main
00013EFC 1140 001C                  		move.b	d0,$1C(a0)
00013F00 3168 0008 0030             		move.w	8(a0),$30(a0)
00013F06 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00013F0C 4EB9 0000 29A6             		jsr	(RandomNumber).l
00013F12 1140 0026                  		move.b	d0,$26(a0)
00013F16                            
00013F16                            Obj64_Animate:				; XREF: Obj64_Index
00013F16 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013F1C 4EB9 0000 B83E             		jsr	AnimateSprite
00013F22 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013F28 6600                       		bne.s	Obj64_ChkWater
00013F2A 117C 0001 002E             		move.b	#1,$2E(a0)
00013F30                            
00013F30                            Obj64_ChkWater:				; XREF: Obj64_Index
00013F30 3038 F646                  		move.w	($FFFFF646).w,d0
00013F34 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013F38 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013F3A                            
00013F3A                            Obj64_Burst:				; XREF: Obj64_Wobble
00013F3A 117C 0006 0024             		move.b	#6,$24(a0)
00013F40 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013F44 6000 0000                  		bra.w	Obj64_Display2
00013F48                            ; ===========================================================================
00013F48                            
00013F48                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013F48 1028 0026                  		move.b	$26(a0),d0
00013F4C 5228 0026                  		addq.b	#1,$26(a0)
00013F50 0240 007F                  		andi.w	#$7F,d0
00013F54 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013F5A 1031 0000                  		move.b	(a1,d0.w),d0
00013F5E 4880                       		ext.w	d0
00013F60 D068 0030                  		add.w	$30(a0),d0
00013F64 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013F68 4A28 002E                  		tst.b	$2E(a0)
00013F6C 6700                       		beq.s	Obj64_Display
00013F6E 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00013F72 6700                       		beq.s	Obj64_Display	; if not, branch
00013F74                            
00013F74 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00013F78 303C 00AD                  		move.w	#$AD,d0
00013F7C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00013F82 43F8 D000                  		lea	($FFFFD000).w,a1
00013F86 4269 0010                  		clr.w	$10(a1)
00013F8A 4269 0012                  		clr.w	$12(a1)
00013F8E 4269 0020                  		clr.w	$20(a1)
00013F92 137C 0015 001C             		move.b	#$15,$1C(a1)
00013F98 337C 0023 003E             		move.w	#$23,$3E(a1)
00013F9E 137C 0000 003C             		move.b	#0,$3C(a1)
00013FA4 08A9 0005 0022             		bclr	#5,$22(a1)
00013FAA 08A9 0004 0022             		bclr	#4,$22(a1)
00013FB0 0829 0002 0022             		btst	#2,$22(a1)
00013FB6 6700 FF82                  		beq.w	Obj64_Burst
00013FBA 08A9 0002 0022             		bclr	#2,$22(a1)
00013FC0 137C 0013 0016             		move.b	#$13,$16(a1)
00013FC6 137C 0009 0017             		move.b	#9,$17(a1)
00013FCC 5B69 000C                  		subq.w	#5,$C(a1)
00013FD0 6000 FF68                  		bra.w	Obj64_Burst
00013FD4                            ; ===========================================================================
00013FD4                            
00013FD4                            Obj64_Display:				; XREF: Obj64_Wobble
00013FD4 6100 A7EE                  		bsr.w	SpeedToPos
00013FD8 4A28 0001                  		tst.b	1(a0)
00013FDC 6A00                       		bpl.s	Obj64_Delete
00013FDE 4EFA A7FE                  		jmp	DisplaySprite
00013FE2                            ; ===========================================================================
00013FE2                            
00013FE2                            Obj64_Delete:
00013FE2 4EFA A84A                  		jmp	DeleteObject
00013FE6                            ; ===========================================================================
00013FE6                            
00013FE6                            Obj64_Display2:				; XREF: Obj64_Index
00013FE6 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013FEC 4EB9 0000 B83E             		jsr	AnimateSprite
00013FF2 4A28 0001                  		tst.b	1(a0)
00013FF6 6A00                       		bpl.s	Obj64_Delete2
00013FF8 4EFA A7E4                  		jmp	DisplaySprite
00013FFC                            ; ===========================================================================
00013FFC                            
00013FFC                            Obj64_Delete2:
00013FFC 4EFA A830                  		jmp	DeleteObject
00014000                            ; ===========================================================================
00014000                            
00014000                            Obj64_Delete3:				; XREF: Obj64_Index
00014000 6000 A82C                  		bra.w	DeleteObject
00014004                            ; ===========================================================================
00014004                            
00014004                            Obj64_BblMaker:				; XREF: Obj64_Index
00014004 4A68 0036                  		tst.w	$36(a0)
00014008 6600                       		bne.s	loc_12874
0001400A 3038 F646                  		move.w	($FFFFF646).w,d0
0001400E B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00014012 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00014016 4A28 0001                  		tst.b	1(a0)
0001401A 6A00 0000                  		bpl.w	Obj64_ChkDel
0001401E 5368 0038                  		subq.w	#1,$38(a0)
00014022 6A00 0000                  		bpl.w	loc_12914
00014026 317C 0001 0036             		move.w	#1,$36(a0)
0001402C                            
0001402C                            loc_1283A:
0001402C 4EB9 0000 29A6             		jsr	(RandomNumber).l
00014032 3200                       		move.w	d0,d1
00014034 0240 0007                  		andi.w	#7,d0
00014038 0C40 0006                  		cmpi.w	#6,d0
0001403C 64EE                       		bcc.s	loc_1283A
0001403E                            
0001403E 1140 0034                  		move.b	d0,$34(a0)
00014042 0241 000C                  		andi.w	#$C,d1
00014046 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001404C D2C1                       		adda.w	d1,a1
0001404E 2149 003C                  		move.l	a1,$3C(a0)
00014052 5328 0032                  		subq.b	#1,$32(a0)
00014056 6A00                       		bpl.s	loc_12872
00014058 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001405E 08E8 0007 0036             		bset	#7,$36(a0)
00014064                            
00014064                            loc_12872:
00014064 6000                       		bra.s	loc_1287C
00014066                            ; ===========================================================================
00014066                            
00014066                            loc_12874:				; XREF: Obj64_BblMaker
00014066 5368 0038                  		subq.w	#1,$38(a0)
0001406A 6A00 0000                  		bpl.w	loc_12914
0001406E                            
0001406E                            loc_1287C:
0001406E 4EB9 0000 29A6             		jsr	(RandomNumber).l
00014074 0240 001F                  		andi.w	#$1F,d0
00014078 3140 0038                  		move.w	d0,$38(a0)
0001407C 6100 AEB6                  		bsr.w	SingleObjLoad
00014080 6600                       		bne.s	loc_128F8
00014082 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00014086 3368 0008 0008             		move.w	8(a0),8(a1)
0001408C 4EB9 0000 29A6             		jsr	(RandomNumber).l
00014092 0240 000F                  		andi.w	#$F,d0
00014096 5140                       		subq.w	#8,d0
00014098 D169 0008                  		add.w	d0,8(a1)
0001409C 3368 000C 000C             		move.w	$C(a0),$C(a1)
000140A2 7000                       		moveq	#0,d0
000140A4 1028 0034                  		move.b	$34(a0),d0
000140A8 2468 003C                  		movea.l	$3C(a0),a2
000140AC 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000140B2 0828 0007 0036             		btst	#7,$36(a0)
000140B8 6700                       		beq.s	loc_128F8
000140BA 4EB9 0000 29A6             		jsr	(RandomNumber).l
000140C0 0240 0003                  		andi.w	#3,d0
000140C4 6600                       		bne.s	loc_128E4
000140C6 08E8 0006 0036             		bset	#6,$36(a0)
000140CC 6600                       		bne.s	loc_128F8
000140CE 137C 0002 0028             		move.b	#2,$28(a1)
000140D4                            
000140D4                            loc_128E4:
000140D4 4A28 0034                  		tst.b	$34(a0)
000140D8 6600                       		bne.s	loc_128F8
000140DA 08E8 0006 0036             		bset	#6,$36(a0)
000140E0 6600                       		bne.s	loc_128F8
000140E2 137C 0002 0028             		move.b	#2,$28(a1)
000140E8                            
000140E8                            loc_128F8:
000140E8 5328 0034                  		subq.b	#1,$34(a0)
000140EC 6A00                       		bpl.s	loc_12914
000140EE 4EB9 0000 29A6             		jsr	(RandomNumber).l
000140F4 0240 007F                  		andi.w	#$7F,d0
000140F8 0640 0080                  		addi.w	#$80,d0
000140FC D168 0038                  		add.w	d0,$38(a0)
00014100 4268 0036                  		clr.w	$36(a0)
00014104                            
00014104                            loc_12914:
00014104 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001410A 4EB9 0000 B83E             		jsr	AnimateSprite
00014110                            
00014110                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00014110 3028 0008                  		move.w	8(a0),d0
00014114 0240 FF80                  		andi.w	#$FF80,d0
00014118 3238 F700                  		move.w	($FFFFF700).w,d1
0001411C 0441 0080                  		subi.w	#$80,d1
00014120 0241 FF80                  		andi.w	#$FF80,d1
00014124 9041                       		sub.w	d1,d0
00014126 0C40 0280                  		cmpi.w	#$280,d0
0001412A 6300                       		bls.s	Obj64_NoDel
0001412C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00014130 6700 A6FC                  		beq.w	DeleteObject		; if it's zero, don't remember object
00014134 3440                       		movea.w	d0,a2	; load address into a2
00014136 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001413A 6000 A6F2                  		bra.w	DeleteObject	; and delete object
0001413E                            
0001413E                            Obj64_NoDel:	
0001413E 3038 F646                  		move.w	($FFFFF646).w,d0
00014142 B068 000C                  		cmp.w	$C(a0),d0
00014146 6500 A696                  		bcs.w	DisplaySprite
0001414A 4E75                       		rts	
0001414C                            ; ===========================================================================
0001414C                            ; bubble production sequence
0001414C                            
0001414C                            ; 0 = small bubble, 1 =	large bubble
0001414C                            
0001414C 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001415E                            
0001415E                            ; ===========================================================================
0001415E                            
0001415E                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001415E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014162 6B00                       		bmi.s	loc_12998
00014164 43F8 D000                  		lea	($FFFFD000).w,a1
00014168 3029 0008                  		move.w	8(a1),d0
0001416C 3228 0008                  		move.w	8(a0),d1
00014170 0441 0010                  		subi.w	#$10,d1
00014174 B240                       		cmp.w	d0,d1
00014176 6400                       		bcc.s	loc_12998
00014178 0641 0020                  		addi.w	#$20,d1
0001417C B240                       		cmp.w	d0,d1
0001417E 6500                       		bcs.s	loc_12998
00014180 3029 000C                  		move.w	$C(a1),d0
00014184 3228 000C                  		move.w	$C(a0),d1
00014188 B240                       		cmp.w	d0,d1
0001418A 6400                       		bcc.s	loc_12998
0001418C 0641 0010                  		addi.w	#$10,d1
00014190 B240                       		cmp.w	d0,d1
00014192 6500                       		bcs.s	loc_12998
00014194 7001                       		moveq	#1,d0
00014196 4E75                       		rts	
00014198                            ; ===========================================================================
00014198                            
00014198                            loc_12998:
00014198 7000                       		moveq	#0,d0
0001419A 4E75                       		rts	
0001419C                            ; ===========================================================================
0001419C                            Ani_obj64:
0001419C                            	include "_anim\obj64.asm"
0001419C                            ; ---------------------------------------------------------------------------
0001419C                            ; Animation script - bubbles (LZ)
0001419C                            ; ---------------------------------------------------------------------------
0001419C 0000                       		dc.w byte_129AA-Ani_obj64
0001419E 0000                       		dc.w byte_129B0-Ani_obj64
000141A0 0000                       		dc.w byte_129B6-Ani_obj64
000141A2 0000                       		dc.w byte_129BE-Ani_obj64
000141A4 0000                       		dc.w byte_129BE-Ani_obj64
000141A6 0000                       		dc.w byte_129C0-Ani_obj64
000141A8 0000                       		dc.w byte_129C6-Ani_obj64
000141AA 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000141B0 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000141B6 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000141BE 04FC                       byte_129BE:	dc.b 4,	$FC
000141C0 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000141C6 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000141CC 00                         		even
000141CC 00                         		even
000141CC                            
000141CC                            ; ---------------------------------------------------------------------------
000141CC                            ; Sprite mappings - bubbles (LZ)
000141CC                            ; ---------------------------------------------------------------------------
000141CC                            Map_obj64:
000141CC                            	include "_maps\obj64.asm"
000141CC                            bubmap:
000141CC 0000                       bubmap_0: 	dc.w bubmap_2E-bubmap
000141CE 0000                       bubmap_2: 	dc.w bubmap_34-bubmap
000141D0 0000                       bubmap_4: 	dc.w bubmap_3A-bubmap
000141D2 0000                       bubmap_6: 	dc.w bubmap_40-bubmap
000141D4 0000                       bubmap_8: 	dc.w bubmap_46-bubmap
000141D6 0000                       bubmap_A: 	dc.w bubmap_4C-bubmap
000141D8 0000                       bubmap_C: 	dc.w bubmap_52-bubmap
000141DA 0000                       bubmap_E: 	dc.w bubmap_58-bubmap
000141DC 0000                       bubmap_10: 	dc.w bubmap_6D-bubmap
000141DE 0000                       bubmap_12: 	dc.w bubmap_82-bubmap
000141E0 0000                       bubmap_14: 	dc.w bubmap_88-bubmap
000141E2 0000                       bubmap_16: 	dc.w bubmap_8E-bubmap
000141E4 0000                       bubmap_18: 	dc.w bubmap_94-bubmap
000141E6 0000                       bubmap_1A: 	dc.w bubmap_9A-bubmap
000141E8 0000                       bubmap_1C: 	dc.w bubmap_A0-bubmap
000141EA 0000                       bubmap_1E: 	dc.w bubmap_A6-bubmap
000141EC 0000                       bubmap_20: 	dc.w bubmap_AC-bubmap
000141EE 0000                       bubmap_22: 	dc.w bubmap_B2-bubmap
000141F0 0000                       bubmap_24: 	dc.w bubmap_B8-bubmap
000141F2 0000                       bubmap_26: 	dc.w bubmap_BE-bubmap
000141F4 0000                       bubmap_28: 	dc.w bubmap_C4-bubmap
000141F6 0000                       bubmap_2A: 	dc.w bubmap_CA-bubmap
000141F8 0000                       bubmap_2C: 	dc.w bubmap_D0-bubmap
000141FA 01                         bubmap_2E: 	dc.b $1
000141FB FC00 6000 FC               	dc.b $FC, $0, $60, $0, $FC
00014200 01                         bubmap_34: 	dc.b $1
00014201 FC00 6001 FC               	dc.b $FC, $0, $60, $1, $FC
00014206 01                         bubmap_3A: 	dc.b $1
00014207 FC00 6002 FC               	dc.b $FC, $0, $60, $2, $FC
0001420C 01                         bubmap_40: 	dc.b $1
0001420D F805 6003 F8               	dc.b $F8, $5, $60, $3, $F8
00014212 01                         bubmap_46: 	dc.b $1
00014213 F805 6007 F8               	dc.b $F8, $5, $60, $7, $F8
00014218 01                         bubmap_4C: 	dc.b $1
00014219 F40A 600B F4               	dc.b $F4, $A, $60, $B, $F4
0001421E 01                         bubmap_52: 	dc.b $1
0001421F F00F 6014 F0               	dc.b $F0, $F, $60, $14, $F0
00014224 04                         bubmap_58: 	dc.b $4
00014225 F005 6024 F0               	dc.b $F0, $5, $60, $24, $F0
0001422A F005 6824 00               	dc.b $F0, $5, $68, $24, $0
0001422F 0005 7024 F0               	dc.b $0, $5, $70, $24, $F0
00014234 0005 7824 00               	dc.b $0, $5, $78, $24, $0
00014239 04                         bubmap_6D: 	dc.b $4
0001423A F005 6028 F0               	dc.b $F0, $5, $60, $28, $F0
0001423F F005 6828 00               	dc.b $F0, $5, $68, $28, $0
00014244 0005 7028 F0               	dc.b $0, $5, $70, $28, $F0
00014249 0005 7828 00               	dc.b $0, $5, $78, $28, $0
0001424E 01                         bubmap_82: 	dc.b $1
0001424F F406 002C F8               	dc.b $F4, $6, $0, $2C, $F8
00014254 01                         bubmap_88: 	dc.b $1
00014255 F406 0032 F8               	dc.b $F4, $6, $0, $32, $F8
0001425A 01                         bubmap_8E: 	dc.b $1
0001425B F406 0038 F8               	dc.b $F4, $6, $0, $38, $F8
00014260 01                         bubmap_94: 	dc.b $1
00014261 F406 003E F8               	dc.b $F4, $6, $0, $3E, $F8
00014266 01                         bubmap_9A: 	dc.b $1
00014267 F406 2044 F8               	dc.b $F4, $6, $20, $44, $F8
0001426C 01                         bubmap_A0: 	dc.b $1
0001426D F406 204A F8               	dc.b $F4, $6, $20, $4A, $F8
00014272 01                         bubmap_A6: 	dc.b $1
00014273 F406 2050 F8               	dc.b $F4, $6, $20, $50, $F8
00014278 01                         bubmap_AC: 	dc.b $1
00014279 F406 2056 F8               	dc.b $F4, $6, $20, $56, $F8
0001427E 01                         bubmap_B2: 	dc.b $1
0001427F F406 205C F8               	dc.b $F4, $6, $20, $5C, $F8
00014284 01                         bubmap_B8: 	dc.b $1
00014285 F406 2062 F8               	dc.b $F4, $6, $20, $62, $F8
0001428A 01                         bubmap_BE: 	dc.b $1
0001428B F805 6068 F8               	dc.b $F8, $5, $60, $68, $F8
00014290 01                         bubmap_C4: 	dc.b $1
00014291 F805 606C F8               	dc.b $F8, $5, $60, $6C, $F8
00014296 01                         bubmap_CA: 	dc.b $1
00014297 F805 6070 F8               	dc.b $F8, $5, $60, $70, $F8
0001429C 00                         bubmap_D0: 	dc.b $0
0001429E 00                         	even
0001429E 00                         	even
0001429E                            
0001429E                            ; ===========================================================================
0001429E                            ; ---------------------------------------------------------------------------
0001429E                            ; Object 65 - waterfalls (LZ)
0001429E                            ; ---------------------------------------------------------------------------
0001429E                            
0001429E                            Obj65:					; XREF: Obj_Index
0001429E 7000                       		moveq	#0,d0
000142A0 1028 0024                  		move.b	$24(a0),d0
000142A4 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000142A8 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000142AC                            ; ===========================================================================
000142AC 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000142AE 0000                       		dc.w Obj65_Animate-Obj65_Index
000142B0 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000142B2 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000142B4 0000                       		dc.w loc_12B36-Obj65_Index
000142B6                            ; ===========================================================================
000142B6                            
000142B6                            Obj65_Main:				; XREF: Obj65_Index
000142B6 5828 0024                  		addq.b	#4,$24(a0)
000142BA 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000142C2 317C 4259 0002             		move.w	#$4259,2(a0)
000142C8 0028 0004 0001             		ori.b	#4,1(a0)
000142CE 117C 0018 0019             		move.b	#$18,$19(a0)
000142D4 117C 0001 0018             		move.b	#1,$18(a0)
000142DA 1028 0028                  		move.b	$28(a0),d0	; get object type
000142DE 6A00                       		bpl.s	loc_12AE6
000142E0 08E8 0007 0002             		bset	#7,2(a0)
000142E6                            
000142E6                            loc_12AE6:
000142E6 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000142EA 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000142EE 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000142F2 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000142F4 4228 0018                  		clr.b	$18(a0)
000142F8 5528 0024                  		subq.b	#2,$24(a0)
000142FC 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00014302 6700                       		beq.s	loc_12B0A	; if not, branch
00014304 117C 0006 0024             		move.b	#6,$24(a0)
0001430A                            
0001430A                            loc_12B0A:
0001430A 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00014310 6700                       		beq.s	Obj65_Animate	; if not, branch
00014312 117C 0008 0024             		move.b	#8,$24(a0)
00014318                            
00014318                            Obj65_Animate:				; XREF: Obj65_Index
00014318 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001431E 4EB9 0000 B83E             		jsr	AnimateSprite
00014324                            
00014324                            Obj65_ChkDel:				; XREF: Obj65_Index
00014324 6000 CB02                  		bra.w	MarkObjGone
00014328                            ; ===========================================================================
00014328                            
00014328                            Obj65_FixHeight:			; XREF: Obj65_Index
00014328 3038 F646                  		move.w	($FFFFF646).w,d0
0001432C 0440 0010                  		subi.w	#$10,d0
00014330 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00014334 60E2                       		bra.s	Obj65_Animate
00014336                            ; ===========================================================================
00014336                            
00014336                            loc_12B36:				; XREF: Obj65_Index
00014336 08A8 0007 0002             		bclr	#7,2(a0)
0001433C 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00014342 6600                       		bne.s	Obj65_Animate2
00014344 08E8 0007 0002             		bset	#7,2(a0)
0001434A                            
0001434A                            Obj65_Animate2:
0001434A 60CC                       		bra.s	Obj65_Animate
0001434C                            ; ===========================================================================
0001434C                            Ani_obj65:
0001434C                            	include "_anim\obj65.asm"
0001434C                            ; ---------------------------------------------------------------------------
0001434C                            ; Animation script - waterfall (LZ)
0001434C                            ; ---------------------------------------------------------------------------
0001434C 0000                       		dc.w byte_12B4E-Ani_obj65
0001434E 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00014354 00                         		even
00014354 00                         		even
00014354                            
00014354                            ; ---------------------------------------------------------------------------
00014354                            ; Sprite mappings - waterfalls (LZ)
00014354                            ; ---------------------------------------------------------------------------
00014354                            Map_obj65:
00014354                            	include "_maps\obj65.asm"
00014354                            ; ---------------------------------------------------------------------------
00014354                            ; Sprite mappings - waterfalls (LZ)
00014354                            ; ---------------------------------------------------------------------------
00014354 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00014358 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001435C 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00014360 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00014364 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00014368 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001436C 01                         byte_12B6C:	dc.b 1
0001436D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014372 02                         byte_12B72:	dc.b 2
00014373 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014378 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001437D 02                         byte_12B7D:	dc.b 2
0001437E F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014383 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014388 01                         byte_12B88:	dc.b 1
00014389 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001438E 02                         byte_12B8E:	dc.b 2
0001438F F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014394 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014399 01                         byte_12B99:	dc.b 1
0001439A F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001439F 01                         byte_12B9F:	dc.b 1
000143A0 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000143A5 01                         byte_12BA5:	dc.b 1
000143A6 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000143AB 02                         byte_12BAB:	dc.b 2
000143AC F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000143B1 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000143B6 02                         byte_12BB6:	dc.b 2
000143B7 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000143BC F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000143C1 02                         byte_12BC1:	dc.b 2
000143C2 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000143C7 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000143CC 02                         byte_12BCC:	dc.b 2
000143CD F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000143D2 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000143D8 00                         		even
000143D8 00                         		even
000143D8                            
000143D8                            ; ===========================================================================
000143D8                            ; ---------------------------------------------------------------------------
000143D8                            ; Object 01 - Sonic
000143D8                            ; ---------------------------------------------------------------------------
000143D8                            
000143D8                            Obj01:					; XREF: Obj_Index
000143D8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000143DC 6700                       		beq.s	Obj01_Normal	; if not, branch
000143DE 4EF9 0000 0000             		jmp	DebugMode
000143E4                            ; ===========================================================================
000143E4                            
000143E4                            Obj01_Normal:
000143E4 7000                       		moveq	#0,d0
000143E6 1028 0024                  		move.b	$24(a0),d0
000143EA 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000143EE 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000143F2                            ; ===========================================================================
000143F2 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000143F4 0000                       		dc.w Obj01_Control-Obj01_Index
000143F6 0000                       		dc.w Obj01_Hurt-Obj01_Index
000143F8 0000                       		dc.w Obj01_Death-Obj01_Index
000143FA 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000143FC 0000                       		dc.w Sonic_Drowned-Obj01_Index
000143FE                            ;===========================================================================
000143FE                            
000143FE                            Obj01_Main:				; XREF: Obj01_Index
000143FE 5428 0024                  		addq.b	#2,$24(a0)
00014402 117C 0013 0016             		move.b	#$13,$16(a0)
00014408 117C 0009 0017             		move.b	#9,$17(a0)
0001440E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00014416 317C 0780 0002             		move.w	#$780,2(a0)
0001441C 117C 0002 0018             		move.b	#2,$18(a0)
00014422 117C 0018 0019             		move.b	#$18,$19(a0)
00014428 117C 0004 0001             		move.b	#4,1(a0)
0001442E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00014434 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001443A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00014440                            
00014440                            Obj01_Control:				; XREF: Obj01_Index
00014440 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00014444 6700                       		beq.s	loc_12C58	; if not, branch
00014446 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001444C 6700                       		beq.s	loc_12C58	; if not, branch
0001444E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00014454 4238 F7CC                  		clr.b	($FFFFF7CC).w
00014458 4E75                       		rts	
0001445A                            ; ===========================================================================
0001445A                            
0001445A                            loc_12C58:
0001445A 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001445E 6600                       		bne.s	loc_12C64	; if yes, branch
00014460 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00014466                            
00014466                            loc_12C64:
00014466 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001446C 6600                       		bne.s	loc_12C7E	; if yes, branch
0001446E 7000                       		moveq	#0,d0
00014470 1028 0022                  		move.b	$22(a0),d0
00014474 0240 0006                  		andi.w	#6,d0
00014478 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001447C 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00014480                            
00014480                            loc_12C7E:
00014480 6100                       		bsr.s	Sonic_Display
00014482 6100 0000                  		bsr.w	Sonic_RecordPos
00014486 6100 0000                  		bsr.w	Sonic_Water
0001448A 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00014490 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00014496 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001449A 6700                       		beq.s	loc_12CA6
0001449C 4A28 001C                  		tst.b	$1C(a0)
000144A0 6600                       		bne.s	loc_12CA6
000144A2 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000144A8                            
000144A8                            loc_12CA6:
000144A8 6100 0000                  		bsr.w	Sonic_Animate
000144AC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000144B0 6B00                       		bmi.s	loc_12CB6
000144B2 4EB9 0000 0000             		jsr	TouchResponse
000144B8                            
000144B8                            loc_12CB6:
000144B8 6100 0000                  		bsr.w	Sonic_Loops
000144BC 6100 0000                  		bsr.w	LoadSonicDynPLC
000144C0 4E75                       		rts	
000144C2                            ; ===========================================================================
000144C2 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000144C4 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000144C6 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000144C8 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000144CA                            ; ---------------------------------------------------------------------------
000144CA                            ; Music	to play	after invincibility wears off
000144CA                            ; ---------------------------------------------------------------------------
000144CA                            MusicList2:	incbin	misc\muslist2.bin
000144D0                            		even
000144D0                            ; ===========================================================================
000144D0                            
000144D0                            Sonic_Display:				; XREF: loc_12C7E
000144D0 3028 0030                  		move.w	$30(a0),d0
000144D4 6700                       		beq.s	Obj01_Display
000144D6 5368 0030                  		subq.w	#1,$30(a0)
000144DA E648                       		lsr.w	#3,d0
000144DC 6400                       		bcc.s	Obj01_ChkInvin
000144DE                            
000144DE                            Obj01_Display:
000144DE 4EBA A2FE                  		jsr	DisplaySprite
000144E2                            
000144E2                            Obj01_ChkInvin:
000144E2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000144E6 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
000144E8 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000144EC 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
000144EE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000144F2 6600                       		bne.s	Obj01_ChkShoes
000144F4 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000144F8 6600                       		bne.s	Obj01_RmvInvin
000144FA 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014500 6500                       		bcs.s	Obj01_RmvInvin
00014502 7000                       		moveq	#0,d0
00014504 1038 FE10                  		move.b	($FFFFFE10).w,d0
00014508 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
0001450E 6600                       		bne.s	Obj01_PlayMusic
00014510 7005                       		moveq	#5,d0		; play SBZ music
00014512                            
00014512                            Obj01_PlayMusic:
00014512 43F9 0001 44CA             		lea	(MusicList2).l,a1
00014518 1031 0000                  		move.b	(a1,d0.w),d0
0001451C 4EB9 0000 11F0             		jsr	(PlaySound).l	; play normal music
00014522                            
00014522                            Obj01_RmvInvin:
00014522 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00014528                            
00014528                            Obj01_ChkShoes:
00014528 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001452C 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001452E 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00014532 6700                       		beq.s	Obj01_ExitChk
00014534 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00014538 6600                       		bne.s	Obj01_ExitChk
0001453A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00014540 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00014546 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001454C 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00014552 303C 00E3                  		move.w	#$E3,d0
00014556 4EF9 0000 11F0             		jmp	(PlaySound).l	; run music at normal speed
0001455C                            ; ===========================================================================
0001455C                            
0001455C                            Obj01_ExitChk:
0001455C 4E75                       		rts	
0001455E                            
0001455E                            ; ---------------------------------------------------------------------------
0001455E                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001455E                            ; ---------------------------------------------------------------------------
0001455E                            
0001455E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001455E                            
0001455E                            
0001455E                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001455E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014562 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014566 43F1 0000                  		lea	(a1,d0.w),a1
0001456A 32E8 0008                  		move.w	8(a0),(a1)+
0001456E 32E8 000C                  		move.w	$C(a0),(a1)+
00014572 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00014576 4E75                       		rts	
00014578                            ; End of function Sonic_RecordPos
00014578                            
00014578                            ; ---------------------------------------------------------------------------
00014578                            ; Subroutine for Sonic when he's underwater
00014578                            ; ---------------------------------------------------------------------------
00014578                            
00014578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014578                            
00014578                            
00014578                            Sonic_Water:				; XREF: loc_12C7E
00014578 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001457E 6700                       		beq.s	Obj01_InWater	; if yes, branch
00014580                            
00014580                            locret_12D80:
00014580 4E75                       		rts	
00014582                            ; ===========================================================================
00014582                            
00014582                            Obj01_InWater:
00014582 3038 F646                  		move.w	($FFFFF646).w,d0
00014586 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001458A 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001458C 08E8 0006 0022             		bset	#6,$22(a0)
00014592 66EC                       		bne.s	locret_12D80
00014594 6100 0000                  		bsr.w	ResumeMusic
00014598 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001459E 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000145A4 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000145AA 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000145B0 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000145B6 E0E8 0010                  		asr	$10(a0)
000145BA E0E8 0012                  		asr	$12(a0)
000145BE E0E8 0012                  		asr	$12(a0)
000145C2 67BC                       		beq.s	locret_12D80
000145C4 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000145CA 303C 00AA                  		move.w	#$AA,d0
000145CE 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play splash sound
000145D4                            ; ===========================================================================
000145D4                            
000145D4                            Obj01_OutWater:
000145D4 08A8 0006 0022             		bclr	#6,$22(a0)
000145DA 67A4                       		beq.s	locret_12D80
000145DC 6100 0000                  		bsr.w	ResumeMusic
000145E0 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000145E6 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000145EC 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000145F2 E1E8 0012                  		asl	$12(a0)
000145F6 6700 FF88                  		beq.w	locret_12D80
000145FA 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014600 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00014606 6E00                       		bgt.s	loc_12E0E
00014608 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001460E                            
0001460E                            loc_12E0E:
0001460E 303C 00AA                  		move.w	#$AA,d0
00014612 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play splash sound
00014618                            ; End of function Sonic_Water
00014618                            
00014618                            ; ===========================================================================
00014618                            ; ---------------------------------------------------------------------------
00014618                            ; Modes	for controlling	Sonic
00014618                            ; ---------------------------------------------------------------------------
00014618                            
00014618                            Obj01_MdNormal:				; XREF: Obj01_Modes
00014618 6100 0000                  		bsr.w	Sonic_Jump
0001461C 6100 0000                  		bsr.w	Sonic_SlopeResist
00014620 6100 0000                  		bsr.w	Sonic_Move
00014624 6100 0000                  		bsr.w	Sonic_Roll
00014628 6100 0000                  		bsr.w	Sonic_LevelBound
0001462C 4EBA A196                  		jsr	SpeedToPos
00014630 6100 0000                  		bsr.w	Sonic_AnglePos
00014634 6100 0000                  		bsr.w	Sonic_SlopeRepel
00014638 4E75                       		rts	
0001463A                            ; ===========================================================================
0001463A                            
0001463A                            Obj01_MdJump:				; XREF: Obj01_Modes
0001463A 6100 0000                  		bsr.w	Sonic_JumpHeight
0001463E 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014642 6100 0000                  		bsr.w	Sonic_LevelBound
00014646 4EBA A15C                  		jsr	ObjectFall
0001464A 0828 0006 0022             		btst	#6,$22(a0)
00014650 6700                       		beq.s	loc_12E5C
00014652 0468 0028 0012             		subi.w	#$28,$12(a0)
00014658                            
00014658                            loc_12E5C:
00014658 6100 0000                  		bsr.w	Sonic_JumpAngle
0001465C 6100 0000                  		bsr.w	Sonic_Floor
00014660 0C38 0030 F5E2             		cmpi.b	#$30,(SonimeSST+sonime_airtimer).w
00014666 6600                       		bne.s	@addtimer
00014668 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001466E 6300                       		bls.s	@done
00014670 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
00014676 6700                       		beq.s	@done
00014678 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0001467E 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
00014684 6000                       		bra.s	@done
00014686                            
00014686                            
00014686                            	@addtimer:
00014686 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
0001468A 4A38 D012                  		tst.b	($FFFFD012).w
0001468E 6A00                       		bpl.s	@done
00014690 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00014694                            
00014694                            	@done:
00014694 4E75                       		rts	
00014696                            ; ===========================================================================
00014696                            
00014696                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014696 6100 0000                  		bsr.w	Sonic_Jump
0001469A 6100 0000                  		bsr.w	Sonic_RollRepel
0001469E 6100 0000                  		bsr.w	Sonic_RollSpeed
000146A2 6100 0000                  		bsr.w	Sonic_LevelBound
000146A6 4EBA A11C                  		jsr	SpeedToPos
000146AA 6100 0000                  		bsr.w	Sonic_AnglePos
000146AE 6100 0000                  		bsr.w	Sonic_SlopeRepel
000146B2 4E75                       		rts	
000146B4                            ; ===========================================================================
000146B4                            
000146B4                            Obj01_MdJump2:				; XREF: Obj01_Modes
000146B4 6100 0000                  		bsr.w	Sonic_JumpHeight
000146B8 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000146BC 6100 0000                  		bsr.w	Sonic_LevelBound
000146C0 4EBA A0E2                  		jsr	ObjectFall
000146C4 0828 0006 0022             		btst	#6,$22(a0)
000146CA 6700                       		beq.s	loc_12EA6
000146CC 0468 0028 0012             		subi.w	#$28,$12(a0)
000146D2                            
000146D2                            loc_12EA6:
000146D2 6100 0000                  		bsr.w	Sonic_JumpAngle
000146D6 6100 0000                  		bsr.w	Sonic_Floor
000146DA 0C38 0040 F5E2             		cmpi.b	#$40,(SonimeSST+sonime_airtimer).w
000146E0 6600                       		bne.s	@addtimer
000146E2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000146E8 6300                       		bls.s	@done
000146EA 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
000146F0 6700                       		beq.s	@done
000146F2 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
000146F8 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
000146FE 6000                       		bra.s	@done
00014700                            
00014700                            
00014700                            	@addtimer:
00014700 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
00014704 4A38 D012                  		tst.b	($FFFFD012).w
00014708 6A00                       		bpl.s	@done
0001470A 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001470E                            
0001470E                            	@done:
0001470E 4E75                       		rts	
00014710                            ; ---------------------------------------------------------------------------
00014710                            ; Subroutine to	make Sonic walk/run
00014710                            ; ---------------------------------------------------------------------------
00014710                            
00014710                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014710                            
00014710                            
00014710                            Sonic_Move:				; XREF: Obj01_MdNormal
00014710 3C38 F760                  		move.w	($FFFFF760).w,d6
00014714 3A38 F762                  		move.w	($FFFFF762).w,d5
00014718 3838 F764                  		move.w	($FFFFF764).w,d4
0001471C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014720 6600 0000                  		bne.w	loc_12FEE
00014724 4A68 003E                  		tst.w	$3E(a0)
00014728 6600 0000                  		bne.w	Obj01_ResetScr
0001472C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014732 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00014734 6100 0000                  		bsr.w	Sonic_MoveLeft
00014738                            
00014738                            Obj01_NotLeft:
00014738 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001473E 6700                       		beq.s	Obj01_NotRight	; if not, branch
00014740 6100 0000                  		bsr.w	Sonic_MoveRight
00014744                            
00014744                            Obj01_NotRight:
00014744 1028 0026                  		move.b	$26(a0),d0
00014748 0600 0020                  		addi.b	#$20,d0
0001474C 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00014750 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014754 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
00014758 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001475C 08A8 0005 0022             		bclr	#5,$22(a0)
00014762 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014768 0828 0003 0022             		btst	#3,$22(a0)
0001476E 6700                       		beq.s	Sonic_Balance
00014770 7000                       		moveq	#0,d0
00014772 1028 003D                  		move.b	$3D(a0),d0
00014776 ED48                       		lsl.w	#6,d0
00014778 43F8 D000                  		lea	($FFFFD000).w,a1
0001477C 43F1 0000                  		lea	(a1,d0.w),a1
00014780 4A29 0022                  		tst.b	$22(a1)
00014784 6B00                       		bmi.s	Sonic_LookUp
00014786 7200                       		moveq	#0,d1
00014788 1229 0019                  		move.b	$19(a1),d1
0001478C 3401                       		move.w	d1,d2
0001478E D442                       		add.w	d2,d2
00014790 5942                       		subq.w	#4,d2
00014792 D268 0008                  		add.w	8(a0),d1
00014796 9269 0008                  		sub.w	8(a1),d1
0001479A 0C41 0004                  		cmpi.w	#4,d1
0001479E 6D00                       		blt.s	loc_12F6A
000147A0 B242                       		cmp.w	d2,d1
000147A2 6C00                       		bge.s	loc_12F5A
000147A4 6000                       		bra.s	Sonic_LookUp
000147A6                            ; ===========================================================================
000147A6                            
000147A6                            Sonic_Balance:
000147A6 4EB9 0000 0000             		jsr	ObjHitFloor
000147AC 0C41 000C                  		cmpi.w	#$C,d1
000147B0 6D00                       		blt.s	Sonic_LookUp
000147B2 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000147B8 6600                       		bne.s	loc_12F62
000147BA                            
000147BA                            loc_12F5A:
000147BA 08A8 0000 0022             		bclr	#0,$22(a0)
000147C0 6000                       		bra.s	loc_12F70
000147C2                            ; ===========================================================================
000147C2                            
000147C2                            loc_12F62:
000147C2 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000147C8 6600                       		bne.s	Sonic_LookUp
000147CA                            
000147CA                            loc_12F6A:
000147CA 08E8 0000 0022             		bset	#0,$22(a0)
000147D0                            
000147D0                            loc_12F70:
000147D0 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000147D6 6000                       		bra.s	Obj01_ResetScr
000147D8                            ; ===========================================================================
000147D8                            
000147D8                            Sonic_LookUp:
000147D8 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000147DE 6700                       		beq.s	Sonic_Duck	; if not, branch
000147E0 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000147E6 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000147EC 6700                       		beq.s	loc_12FC2
000147EE 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000147F2 6000                       		bra.s	loc_12FC2
000147F4                            ; ===========================================================================
000147F4                            
000147F4                            Sonic_Duck:
000147F4 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000147FA 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000147FC 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00014802 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00014808 6700                       		beq.s	loc_12FC2
0001480A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001480E 6000                       		bra.s	loc_12FC2
00014810                            ; ===========================================================================
00014810                            
00014810                            Obj01_ResetScr:
00014810 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00014816 6700                       		beq.s	loc_12FC2	; if yes, branch
00014818 6400                       		bcc.s	loc_12FBE
0001481A 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001481E                            
0001481E                            loc_12FBE:
0001481E 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00014822                            
00014822                            loc_12FC2:
00014822 1038 F602                  		move.b	($FFFFF602).w,d0
00014826 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001482A 6600                       		bne.s	loc_12FEE	; if yes, branch
0001482C 3028 0020                  		move.w	$20(a0),d0
00014830 6700                       		beq.s	loc_12FEE
00014832 6B00                       		bmi.s	loc_12FE2
00014834 9045                       		sub.w	d5,d0
00014836 6400                       		bcc.s	loc_12FDC
00014838 303C 0000                  		move.w	#0,d0
0001483C                            
0001483C                            loc_12FDC:
0001483C 3140 0020                  		move.w	d0,$20(a0)
00014840 6000                       		bra.s	loc_12FEE
00014842                            ; ===========================================================================
00014842                            
00014842                            loc_12FE2:
00014842 D045                       		add.w	d5,d0
00014844 6400                       		bcc.s	loc_12FEA
00014846 303C 0000                  		move.w	#0,d0
0001484A                            
0001484A                            loc_12FEA:
0001484A 3140 0020                  		move.w	d0,$20(a0)
0001484E                            
0001484E                            loc_12FEE:
0001484E 1028 0026                  		move.b	$26(a0),d0
00014852 4EB9 0000 29CC             		jsr	(CalcSine).l
00014858 C3E8 0020                  		muls.w	$20(a0),d1
0001485C E081                       		asr.l	#8,d1
0001485E 3141 0010                  		move.w	d1,$10(a0)
00014862 C1E8 0020                  		muls.w	$20(a0),d0
00014866 E080                       		asr.l	#8,d0
00014868 3140 0012                  		move.w	d0,$12(a0)
0001486C                            
0001486C                            loc_1300C:
0001486C 1028 0026                  		move.b	$26(a0),d0
00014870 0600 0040                  		addi.b	#$40,d0
00014874 6B00                       		bmi.s	locret_1307C
00014876 123C 0040                  		move.b	#$40,d1
0001487A 4A68 0020                  		tst.w	$20(a0)
0001487E 6700                       		beq.s	locret_1307C
00014880 6B00                       		bmi.s	loc_13024
00014882 4441                       		neg.w	d1
00014884                            
00014884                            loc_13024:
00014884 1028 0026                  		move.b	$26(a0),d0
00014888 D001                       		add.b	d1,d0
0001488A 3F00                       		move.w	d0,-(sp)
0001488C 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014890 301F                       		move.w	(sp)+,d0
00014892 4A41                       		tst.w	d1
00014894 6A00                       		bpl.s	locret_1307C
00014896 E141                       		asl.w	#8,d1
00014898 0600 0020                  		addi.b	#$20,d0
0001489C 0200 00C0                  		andi.b	#$C0,d0
000148A0 6700                       		beq.s	loc_13078
000148A2 0C00 0040                  		cmpi.b	#$40,d0
000148A6 6700                       		beq.s	loc_13066
000148A8 0C00 0080                  		cmpi.b	#$80,d0
000148AC 6700                       		beq.s	loc_13060
000148AE D368 0010                  		add.w	d1,$10(a0)
000148B2 08E8 0005 0022             		bset	#5,$22(a0)
000148B8 317C 0000 0020             		move.w	#0,$20(a0)
000148BE 4E75                       		rts	
000148C0                            ; ===========================================================================
000148C0                            
000148C0                            loc_13060:
000148C0 9368 0012                  		sub.w	d1,$12(a0)
000148C4 4E75                       		rts	
000148C6                            ; ===========================================================================
000148C6                            
000148C6                            loc_13066:
000148C6 9368 0010                  		sub.w	d1,$10(a0)
000148CA 08E8 0005 0022             		bset	#5,$22(a0)
000148D0 317C 0000 0020             		move.w	#0,$20(a0)
000148D6 4E75                       		rts	
000148D8                            ; ===========================================================================
000148D8                            
000148D8                            loc_13078:
000148D8 D368 0012                  		add.w	d1,$12(a0)
000148DC                            
000148DC                            locret_1307C:
000148DC 4E75                       		rts	
000148DE                            ; End of function Sonic_Move
000148DE                            
000148DE                            
000148DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148DE                            
000148DE                            
000148DE                            Sonic_MoveLeft:				; XREF: Sonic_Move
000148DE 3028 0020                  		move.w	$20(a0),d0
000148E2 6700                       		beq.s	loc_13086
000148E4 6A00                       		bpl.s	loc_130B2
000148E6                            
000148E6                            loc_13086:
000148E6 08E8 0000 0022             		bset	#0,$22(a0)
000148EC 6600                       		bne.s	loc_1309A
000148EE 08A8 0005 0022             		bclr	#5,$22(a0)
000148F4 117C 0001 001D             		move.b	#1,$1D(a0)
000148FA                            
000148FA                            loc_1309A:
000148FA 9045                       		sub.w	d5,d0
000148FC 3206                       		move.w	d6,d1
000148FE 4441                       		neg.w	d1
00014900 B041                       		cmp.w	d1,d0
00014902 6E00                       		bgt.s	loc_130A6
00014904 3001                       		move.w	d1,d0
00014906                            
00014906                            loc_130A6:
00014906 3140 0020                  		move.w	d0,$20(a0)
0001490A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014910 4E75                       		rts	
00014912                            ; ===========================================================================
00014912                            
00014912                            loc_130B2:				; XREF: Sonic_MoveLeft
00014912 9044                       		sub.w	d4,d0
00014914 6400                       		bcc.s	loc_130BA
00014916 303C FF80                  		move.w	#-$80,d0
0001491A                            
0001491A                            loc_130BA:
0001491A 3140 0020                  		move.w	d0,$20(a0)
0001491E 1028 0026                  		move.b	$26(a0),d0
00014922 0600 0020                  		addi.b	#$20,d0
00014926 0200 00C0                  		andi.b	#$C0,d0
0001492A 6600                       		bne.s	locret_130E8
0001492C 0C40 0400                  		cmpi.w	#$400,d0
00014930 6D00                       		blt.s	locret_130E8
00014932 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014938 08A8 0000 0022             		bclr	#0,$22(a0)
0001493E 303C 00A4                  		move.w	#$A4,d0
00014942 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stopping sound
00014948                            
00014948                            locret_130E8:
00014948 4E75                       		rts	
0001494A                            ; End of function Sonic_MoveLeft
0001494A                            
0001494A                            
0001494A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001494A                            
0001494A                            
0001494A                            Sonic_MoveRight:			; XREF: Sonic_Move
0001494A 3028 0020                  		move.w	$20(a0),d0
0001494E 6B00                       		bmi.s	loc_13118
00014950 08A8 0000 0022             		bclr	#0,$22(a0)
00014956 6700                       		beq.s	loc_13104
00014958 08A8 0005 0022             		bclr	#5,$22(a0)
0001495E 117C 0001 001D             		move.b	#1,$1D(a0)
00014964                            
00014964                            loc_13104:
00014964 D045                       		add.w	d5,d0
00014966 B046                       		cmp.w	d6,d0
00014968 6D00                       		blt.s	loc_1310C
0001496A 3006                       		move.w	d6,d0
0001496C                            
0001496C                            loc_1310C:
0001496C 3140 0020                  		move.w	d0,$20(a0)
00014970 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014976 4E75                       		rts	
00014978                            ; ===========================================================================
00014978                            
00014978                            loc_13118:				; XREF: Sonic_MoveRight
00014978 D044                       		add.w	d4,d0
0001497A 6400                       		bcc.s	loc_13120
0001497C 303C 0080                  		move.w	#$80,d0
00014980                            
00014980                            loc_13120:
00014980 3140 0020                  		move.w	d0,$20(a0)
00014984 1028 0026                  		move.b	$26(a0),d0
00014988 0600 0020                  		addi.b	#$20,d0
0001498C 0200 00C0                  		andi.b	#$C0,d0
00014990 6600                       		bne.s	locret_1314E
00014992 0C40 FC00                  		cmpi.w	#-$400,d0
00014996 6E00                       		bgt.s	locret_1314E
00014998 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001499E 08E8 0000 0022             		bset	#0,$22(a0)
000149A4 303C 00A4                  		move.w	#$A4,d0
000149A8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stopping sound
000149AE                            
000149AE                            locret_1314E:
000149AE 4E75                       		rts	
000149B0                            ; End of function Sonic_MoveRight
000149B0                            
000149B0                            ; ---------------------------------------------------------------------------
000149B0                            ; Subroutine to	change Sonic's speed as he rolls
000149B0                            ; ---------------------------------------------------------------------------
000149B0                            
000149B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149B0                            
000149B0                            
000149B0                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000149B0 3C38 F760                  		move.w	($FFFFF760).w,d6
000149B4 E346                       		asl.w	#1,d6
000149B6 3A38 F762                  		move.w	($FFFFF762).w,d5
000149BA E245                       		asr.w	#1,d5
000149BC 3838 F764                  		move.w	($FFFFF764).w,d4
000149C0 E444                       		asr.w	#2,d4
000149C2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000149C6 6600 0000                  		bne.w	loc_131CC
000149CA 4A68 003E                  		tst.w	$3E(a0)
000149CE 6600                       		bne.s	loc_13188
000149D0 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000149D6 6700                       		beq.s	loc_1317C	; if not, branch
000149D8 6100 0000                  		bsr.w	Sonic_RollLeft
000149DC                            
000149DC                            loc_1317C:
000149DC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000149E2 6700                       		beq.s	loc_13188	; if not, branch
000149E4 6100 0000                  		bsr.w	Sonic_RollRight
000149E8                            
000149E8                            loc_13188:
000149E8 3028 0020                  		move.w	$20(a0),d0
000149EC 6700                       		beq.s	loc_131AA
000149EE 6B00                       		bmi.s	loc_1319E
000149F0 9045                       		sub.w	d5,d0
000149F2 6400                       		bcc.s	loc_13198
000149F4 303C 0000                  		move.w	#0,d0
000149F8                            
000149F8                            loc_13198:
000149F8 3140 0020                  		move.w	d0,$20(a0)
000149FC 6000                       		bra.s	loc_131AA
000149FE                            ; ===========================================================================
000149FE                            
000149FE                            loc_1319E:				; XREF: Sonic_RollSpeed
000149FE D045                       		add.w	d5,d0
00014A00 6400                       		bcc.s	loc_131A6
00014A02 303C 0000                  		move.w	#0,d0
00014A06                            
00014A06                            loc_131A6:
00014A06 3140 0020                  		move.w	d0,$20(a0)
00014A0A                            
00014A0A                            loc_131AA:
00014A0A 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
00014A0E 6600                       		bne.s	loc_131CC	; if yes, branch
00014A10                            
00014A10                            	@NoReset:
00014A10 08A8 0002 0022             		bclr	#2,$22(a0)
00014A16 117C 0013 0016             		move.b	#$13,$16(a0)
00014A1C 117C 0009 0017             		move.b	#9,$17(a0)
00014A22 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014A28 5B68 000C                  		subq.w	#5,$C(a0)
00014A2C                            
00014A2C                            loc_131CC:
00014A2C 1028 0026                  		move.b	$26(a0),d0
00014A30 4EB9 0000 29CC             		jsr	(CalcSine).l
00014A36 C1E8 0020                  		muls.w	$20(a0),d0
00014A3A E080                       		asr.l	#8,d0
00014A3C 3140 0012                  		move.w	d0,$12(a0)
00014A40 C3E8 0020                  		muls.w	$20(a0),d1
00014A44 E081                       		asr.l	#8,d1
00014A46 0C41 1000                  		cmpi.w	#$1000,d1
00014A4A 6F00                       		ble.s	loc_131F0
00014A4C 323C 1000                  		move.w	#$1000,d1
00014A50                            
00014A50                            loc_131F0:
00014A50 0C41 F000                  		cmpi.w	#-$1000,d1
00014A54 6C00                       		bge.s	loc_131FA
00014A56 323C F000                  		move.w	#-$1000,d1
00014A5A                            
00014A5A                            loc_131FA:
00014A5A 3141 0010                  		move.w	d1,$10(a0)
00014A5E 6000 FE0C                  		bra.w	loc_1300C
00014A62                            ; End of function Sonic_RollSpeed
00014A62                            
00014A62                            
00014A62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A62                            
00014A62                            
00014A62                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00014A62 3028 0020                  		move.w	$20(a0),d0
00014A66 6700                       		beq.s	loc_1320A
00014A68 6A00                       		bpl.s	loc_13218
00014A6A                            
00014A6A                            loc_1320A:
00014A6A 08E8 0000 0022             		bset	#0,$22(a0)
00014A70 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014A76 4E75                       		rts	
00014A78                            ; ===========================================================================
00014A78                            
00014A78                            loc_13218:
00014A78 9044                       		sub.w	d4,d0
00014A7A 6400                       		bcc.s	loc_13220
00014A7C 303C FF80                  		move.w	#-$80,d0
00014A80                            
00014A80                            loc_13220:
00014A80 3140 0020                  		move.w	d0,$20(a0)
00014A84 4E75                       		rts	
00014A86                            ; End of function Sonic_RollLeft
00014A86                            
00014A86                            
00014A86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A86                            
00014A86                            
00014A86                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00014A86 3028 0020                  		move.w	$20(a0),d0
00014A8A 6B00                       		bmi.s	loc_1323A
00014A8C 08A8 0000 0022             		bclr	#0,$22(a0)
00014A92 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014A98 4E75                       		rts	
00014A9A                            ; ===========================================================================
00014A9A                            
00014A9A                            loc_1323A:
00014A9A D044                       		add.w	d4,d0
00014A9C 6400                       		bcc.s	loc_13242
00014A9E 303C 0080                  		move.w	#$80,d0
00014AA2                            
00014AA2                            loc_13242:
00014AA2 3140 0020                  		move.w	d0,$20(a0)
00014AA6 4E75                       		rts	
00014AA8                            ; End of function Sonic_RollRight
00014AA8                            
00014AA8                            ; ---------------------------------------------------------------------------
00014AA8                            ; Subroutine to	change Sonic's direction while jumping
00014AA8                            ; ---------------------------------------------------------------------------
00014AA8                            
00014AA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AA8                            
00014AA8                            
00014AA8                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014AA8 3C38 F760                  		move.w	($FFFFF760).w,d6
00014AAC 3A38 F762                  		move.w	($FFFFF762).w,d5
00014AB0 E345                       		asl.w	#1,d5
00014AB2 0828 0004 0022             		btst	#4,$22(a0)
00014AB8 6600                       		bne.s	Obj01_ResetScr2
00014ABA 3028 0010                  		move.w	$10(a0),d0
00014ABE 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014AC4 6700                       		beq.s	loc_13278	; if not, branch
00014AC6 08E8 0000 0022             		bset	#0,$22(a0)
00014ACC 9045                       		sub.w	d5,d0
00014ACE 3206                       		move.w	d6,d1
00014AD0 4441                       		neg.w	d1
00014AD2 B041                       		cmp.w	d1,d0
00014AD4 6E00                       		bgt.s	loc_13278
00014AD6 3001                       		move.w	d1,d0
00014AD8                            
00014AD8                            loc_13278:
00014AD8 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014ADE 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00014AE0 08A8 0000 0022             		bclr	#0,$22(a0)
00014AE6 D045                       		add.w	d5,d0
00014AE8 B046                       		cmp.w	d6,d0
00014AEA 6D00                       		blt.s	Obj01_JumpMove
00014AEC 3006                       		move.w	d6,d0
00014AEE                            
00014AEE                            Obj01_JumpMove:
00014AEE 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00014AF2                            
00014AF2                            Obj01_ResetScr2:
00014AF2 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00014AF8 6700                       		beq.s	loc_132A4	; if yes, branch
00014AFA 6400                       		bcc.s	loc_132A0
00014AFC 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014B00                            
00014B00                            loc_132A0:
00014B00 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014B04                            
00014B04                            loc_132A4:
00014B04 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00014B0A 6500                       		bcs.s	locret_132D2	; if yes, branch
00014B0C 3028 0010                  		move.w	$10(a0),d0
00014B10 3200                       		move.w	d0,d1
00014B12 EA41                       		asr.w	#5,d1
00014B14 6700                       		beq.s	locret_132D2
00014B16 6B00                       		bmi.s	loc_132C6
00014B18 9041                       		sub.w	d1,d0
00014B1A 6400                       		bcc.s	loc_132C0
00014B1C 303C 0000                  		move.w	#0,d0
00014B20                            
00014B20                            loc_132C0:
00014B20 3140 0010                  		move.w	d0,$10(a0)
00014B24 4E75                       		rts	
00014B26                            ; ===========================================================================
00014B26                            
00014B26                            loc_132C6:
00014B26 9041                       		sub.w	d1,d0
00014B28 6500                       		bcs.s	loc_132CE
00014B2A 303C 0000                  		move.w	#0,d0
00014B2E                            
00014B2E                            loc_132CE:
00014B2E 3140 0010                  		move.w	d0,$10(a0)
00014B32                            
00014B32                            locret_132D2:
00014B32 4E75                       		rts	
00014B34                            ; End of function Sonic_ChgJumpDir
00014B34                            
00014B34                            ; ===========================================================================
00014B34                            ; ---------------------------------------------------------------------------
00014B34                            ; Unused subroutine to squash Sonic
00014B34                            ; ---------------------------------------------------------------------------
00014B34 1028 0026                  		move.b	$26(a0),d0
00014B38 0600 0020                  		addi.b	#$20,d0
00014B3C 0200 00C0                  		andi.b	#$C0,d0
00014B40 6600                       		bne.s	locret_13302
00014B42 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014B46 4A41                       		tst.w	d1
00014B48 6A00                       		bpl.s	locret_13302
00014B4A 317C 0000 0020             		move.w	#0,$20(a0)	; stop Sonic moving
00014B50 317C 0000 0010             		move.w	#0,$10(a0)
00014B56 317C 0000 0012             		move.w	#0,$12(a0)
00014B5C 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014B62                            
00014B62                            locret_13302:
00014B62 4E75                       		rts	
00014B64                            ; ---------------------------------------------------------------------------
00014B64                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00014B64                            ; ---------------------------------------------------------------------------
00014B64                            
00014B64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B64                            
00014B64                            
00014B64                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00014B64 2228 0008                  		move.l	8(a0),d1
00014B68 3028 0010                  		move.w	$10(a0),d0
00014B6C 48C0                       		ext.l	d0
00014B6E E180                       		asl.l	#8,d0
00014B70 D280                       		add.l	d0,d1
00014B72 4841                       		swap	d1
00014B74 3038 F728                  		move.w	($FFFFF728).w,d0
00014B78 0640 0010                  		addi.w	#$10,d0
00014B7C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014B7E 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014B80 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014B84 0640 0128                  		addi.w	#$128,d0
00014B88 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014B8C 6600                       		bne.s	loc_13332
00014B8E 0640 0040                  		addi.w	#$40,d0
00014B92                            
00014B92                            loc_13332:
00014B92 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014B94 6300                       		bls.s	Boundary_Sides	; if yes, branch
00014B96                            
00014B96                            loc_13336:
00014B96 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014B9A 0640 00E0                  		addi.w	#$E0,d0
00014B9E B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014BA2 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014BA4 4E75                       		rts	
00014BA6                            ; ===========================================================================
00014BA6                            
00014BA6                            Boundary_Bottom:
00014BA6 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00014BAC 6600                       		bne.s	JMPKillSonic	; if not, kill Sonic
00014BAE 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00014BB4 6500                       		bcs.s	JMPKillSonic
00014BB6 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00014BBA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014BC0 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00014BC6 4E75                       		rts	
00014BC8                            ; ===========================================================================
00014BC8                            
00014BC8                            Boundary_Sides:
00014BC8 3140 0008                  		move.w	d0,8(a0)
00014BCC 317C 0000 000A             		move.w	#0,$A(a0)
00014BD2 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014BD8 317C 0000 0020             		move.w	#0,$20(a0)
00014BDE 60B6                       		bra.s	loc_13336
00014BE0                            
00014BE0                            JMPKillSonic:
00014BE0 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00014BE6 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00014BEC 4EF9 0000 0000             		jmp	KillSonic
00014BF2                            ; End of function Sonic_LevelBound
00014BF2                            
00014BF2                            ; ---------------------------------------------------------------------------
00014BF2                            ; Subroutine allowing Sonic to roll when he's moving
00014BF2                            ; ---------------------------------------------------------------------------
00014BF2                            
00014BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BF2                            
00014BF2                            
00014BF2                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014BF2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014BF6 6600                       		bne.s	Obj01_NoRoll
00014BF8 3028 0020                  		move.w	$20(a0),d0
00014BFC 6A00                       		bpl.s	loc_13392
00014BFE 4440                       		neg.w	d0
00014C00                            
00014C00                            loc_13392:
00014C00 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00014C04 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014C06 1038 F602                  		move.b	($FFFFF602).w,d0
00014C0A 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00014C0E 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00014C10 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014C16 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00014C18                            
00014C18                            Obj01_NoRoll:
00014C18 4E75                       		rts	
00014C1A                            ; ===========================================================================
00014C1A                            
00014C1A                            Obj01_ChkRoll:
00014C1A 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00014C20 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00014C22 4E75                       		rts	
00014C24                            ; ===========================================================================
00014C24                            
00014C24                            Obj01_DoRoll:
00014C24 08E8 0002 0022             		bset	#2,$22(a0)
00014C2A 117C 000E 0016             		move.b	#$E,$16(a0)
00014C30 117C 0007 0017             		move.b	#7,$17(a0)
00014C36 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014C3C 5A68 000C                  		addq.w	#5,$C(a0)
00014C40 303C 00BE                  		move.w	#$BE,d0
00014C44 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rolling sound
00014C4A 4A68 0020                  		tst.w	$20(a0)
00014C4E 6600                       		bne.s	locret_133E8
00014C50 317C 0200 0020             		move.w	#$200,$20(a0)
00014C56                            
00014C56                            locret_133E8:
00014C56 4E75                       		rts	
00014C58                            ; End of function Sonic_Roll
00014C58                            
00014C58                            ; ---------------------------------------------------------------------------
00014C58                            ; Subroutine allowing Sonic to jump
00014C58                            ; ---------------------------------------------------------------------------
00014C58                            
00014C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C58                            
00014C58                            
00014C58                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014C58 1038 F603                  		move.b	($FFFFF603).w,d0
00014C5C 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014C60 6700 0000                  		beq.w	locret_1348E	; if not, branch
00014C64 31FC 6000 F5D8             		move.w	#$6000,(SonimeSST+sonime_waittimer).w
00014C6A 0C38 000B F5CE             		cmpi.b	#face_impatient,(SonimeSST+sonime_face).w
00014C70 6600                       		bne.s	@notfrustrated
00014C72 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00014C78                            
00014C78                            	@notfrustrated:
00014C78 7000                       		moveq	#0,d0
00014C7A 1028 0026                  		move.b	$26(a0),d0
00014C7E 0600 0080                  		addi.b	#$80,d0
00014C82 6100 0000                  		bsr.w	sub_14D48
00014C86 0C41 0006                  		cmpi.w	#6,d1
00014C8A 6D00 0000                  		blt.w	locret_1348E
00014C8E 343C 0680                  		move.w	#$680,d2
00014C92 0828 0006 0022             		btst	#6,$22(a0)
00014C98 6700                       		beq.s	loc_1341C
00014C9A 343C 0380                  		move.w	#$380,d2
00014C9E                            
00014C9E                            loc_1341C:
00014C9E 7000                       		moveq	#0,d0
00014CA0 1028 0026                  		move.b	$26(a0),d0
00014CA4 0400 0040                  		subi.b	#$40,d0
00014CA8 4EB9 0000 29CC             		jsr	(CalcSine).l
00014CAE C3C2                       		muls.w	d2,d1
00014CB0 E081                       		asr.l	#8,d1
00014CB2 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014CB6 C1C2                       		muls.w	d2,d0
00014CB8 E080                       		asr.l	#8,d0
00014CBA D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014CBE 08E8 0001 0022             		bset	#1,$22(a0)
00014CC4 08A8 0005 0022             		bclr	#5,$22(a0)
00014CCA 588F                       		addq.l	#4,sp
00014CCC 117C 0001 003C             		move.b	#1,$3C(a0)
00014CD2 4228 0038                  		clr.b	$38(a0)
00014CD6 303C 00A0                  		move.w	#$A0,d0
00014CDA 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play jumping sound
00014CE0 117C 0013 0016             		move.b	#$13,$16(a0)
00014CE6 117C 0009 0017             		move.b	#9,$17(a0)
00014CEC 0828 0002 0022             		btst	#2,$22(a0)
00014CF2 6600                       		bne.s	loc_13490
00014CF4 117C 000E 0016             		move.b	#$E,$16(a0)
00014CFA 117C 0007 0017             		move.b	#7,$17(a0)
00014D00 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014D06 08E8 0002 0022             		bset	#2,$22(a0)
00014D0C 5A68 000C                  		addq.w	#5,$C(a0)
00014D10                            
00014D10                            locret_1348E:
00014D10 4E75                       		rts	
00014D12                            ; ===========================================================================
00014D12                            
00014D12                            loc_13490:
00014D12 08E8 0004 0022             		bset	#4,$22(a0)
00014D18 4E75                       		rts	
00014D1A                            ; End of function Sonic_Jump
00014D1A                            
00014D1A                            
00014D1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D1A                            
00014D1A                            
00014D1A                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014D1A 4A28 003C                  		tst.b	$3C(a0)
00014D1E 6700                       		beq.s	loc_134C4
00014D20 323C FC00                  		move.w	#-$400,d1
00014D24 0828 0006 0022             		btst	#6,$22(a0)
00014D2A 6700                       		beq.s	loc_134AE
00014D2C 323C FE00                  		move.w	#-$200,d1
00014D30                            
00014D30                            loc_134AE:
00014D30 B268 0012                  		cmp.w	$12(a0),d1
00014D34 6F00                       		ble.s	locret_134C2
00014D36 1038 F602                  		move.b	($FFFFF602).w,d0
00014D3A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014D3E 6600                       		bne.s	locret_134C2	; if yes, branch
00014D40 3141 0012                  		move.w	d1,$12(a0)
00014D44                            
00014D44                            locret_134C2:
00014D44 4E75                       		rts	
00014D46                            ; ===========================================================================
00014D46                            
00014D46                            loc_134C4:
00014D46 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00014D4C 6C00                       		bge.s	locret_134D2
00014D4E 317C F040 0012             		move.w	#-$FC0,$12(a0)
00014D54                            
00014D54                            locret_134D2:
00014D54 4E75                       		rts	
00014D56                            ; End of function Sonic_JumpHeight
00014D56                            
00014D56                            ; ---------------------------------------------------------------------------
00014D56                            ; Subroutine to	slow Sonic walking up a	slope
00014D56                            ; ---------------------------------------------------------------------------
00014D56                            
00014D56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D56                            
00014D56                            
00014D56                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00014D56 1028 0026                  		move.b	$26(a0),d0
00014D5A 0600 0060                  		addi.b	#$60,d0
00014D5E 0C00 00C0                  		cmpi.b	#$C0,d0
00014D62 6400                       		bcc.s	locret_13508
00014D64 1028 0026                  		move.b	$26(a0),d0
00014D68 4EB9 0000 29CC             		jsr	(CalcSine).l
00014D6E C1FC 0020                  		muls.w	#$20,d0
00014D72 E080                       		asr.l	#8,d0
00014D74 4A68 0020                  		tst.w	$20(a0)
00014D78 6700                       		beq.s	locret_13508
00014D7A 6B00                       		bmi.s	loc_13504
00014D7C 4A40                       		tst.w	d0
00014D7E 6700                       		beq.s	locret_13502
00014D80 D168 0020                  		add.w	d0,$20(a0)	; change Sonic's inertia
00014D84                            
00014D84                            locret_13502:
00014D84 4E75                       		rts	
00014D86                            ; ===========================================================================
00014D86                            
00014D86                            loc_13504:
00014D86 D168 0020                  		add.w	d0,$20(a0)
00014D8A                            
00014D8A                            locret_13508:
00014D8A 4E75                       		rts	
00014D8C                            ; End of function Sonic_SlopeResist
00014D8C                            
00014D8C                            ; ---------------------------------------------------------------------------
00014D8C                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014D8C                            ; ---------------------------------------------------------------------------
00014D8C                            
00014D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D8C                            
00014D8C                            
00014D8C                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014D8C 1028 0026                  		move.b	$26(a0),d0
00014D90 0600 0060                  		addi.b	#$60,d0
00014D94 0C00 00C0                  		cmpi.b	#-$40,d0
00014D98 6400                       		bcc.s	locret_13544
00014D9A 1028 0026                  		move.b	$26(a0),d0
00014D9E 4EB9 0000 29CC             		jsr	(CalcSine).l
00014DA4 C1FC 0050                  		muls.w	#$50,d0
00014DA8 E080                       		asr.l	#8,d0
00014DAA 4A68 0020                  		tst.w	$20(a0)
00014DAE 6B00                       		bmi.s	loc_1353A
00014DB0 4A40                       		tst.w	d0
00014DB2 6A00                       		bpl.s	loc_13534
00014DB4 E480                       		asr.l	#2,d0
00014DB6                            
00014DB6                            loc_13534:
00014DB6 D168 0020                  		add.w	d0,$20(a0)
00014DBA 4E75                       		rts	
00014DBC                            ; ===========================================================================
00014DBC                            
00014DBC                            loc_1353A:
00014DBC 4A40                       		tst.w	d0
00014DBE 6B00                       		bmi.s	loc_13540
00014DC0 E480                       		asr.l	#2,d0
00014DC2                            
00014DC2                            loc_13540:
00014DC2 D168 0020                  		add.w	d0,$20(a0)
00014DC6                            
00014DC6                            locret_13544:
00014DC6 4E75                       		rts	
00014DC8                            ; End of function Sonic_RollRepel
00014DC8                            
00014DC8                            ; ---------------------------------------------------------------------------
00014DC8                            ; Subroutine to	push Sonic down	a slope
00014DC8                            ; ---------------------------------------------------------------------------
00014DC8                            
00014DC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DC8                            
00014DC8                            
00014DC8                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014DC8 4E71                       		nop	
00014DCA 4A28 0038                  		tst.b	$38(a0)
00014DCE 6600                       		bne.s	locret_13580
00014DD0 4A68 003E                  		tst.w	$3E(a0)
00014DD4 6600                       		bne.s	loc_13582
00014DD6 1028 0026                  		move.b	$26(a0),d0
00014DDA 0600 0020                  		addi.b	#$20,d0
00014DDE 0200 00C0                  		andi.b	#$C0,d0
00014DE2 6700                       		beq.s	locret_13580
00014DE4 3028 0020                  		move.w	$20(a0),d0
00014DE8 6A00                       		bpl.s	loc_1356A
00014DEA 4440                       		neg.w	d0
00014DEC                            
00014DEC                            loc_1356A:
00014DEC 0C40 0280                  		cmpi.w	#$280,d0
00014DF0 6400                       		bcc.s	locret_13580
00014DF2 4268 0020                  		clr.w	$20(a0)
00014DF6 08E8 0001 0022             		bset	#1,$22(a0)
00014DFC 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014E02                            
00014E02                            locret_13580:
00014E02 4E75                       		rts	
00014E04                            ; ===========================================================================
00014E04                            
00014E04                            loc_13582:
00014E04 5368 003E                  		subq.w	#1,$3E(a0)
00014E08 4E75                       		rts	
00014E0A                            ; End of function Sonic_SlopeRepel
00014E0A                            
00014E0A                            ; ---------------------------------------------------------------------------
00014E0A                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014E0A                            ; ---------------------------------------------------------------------------
00014E0A                            
00014E0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E0A                            
00014E0A                            
00014E0A                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014E0A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014E0E 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014E10 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014E12                            
00014E12 5400                       		addq.b	#2,d0		; increase angle
00014E14 6400                       		bcc.s	loc_13596
00014E16 7000                       		moveq	#0,d0
00014E18                            
00014E18                            loc_13596:
00014E18 6000                       		bra.s	loc_1359E
00014E1A                            ; ===========================================================================
00014E1A                            
00014E1A                            loc_13598:
00014E1A 5500                       		subq.b	#2,d0		; decrease angle
00014E1C 6400                       		bcc.s	loc_1359E
00014E1E 7000                       		moveq	#0,d0
00014E20                            
00014E20                            loc_1359E:
00014E20 1140 0026                  		move.b	d0,$26(a0)
00014E24                            
00014E24                            locret_135A2:
00014E24 4E75                       		rts	
00014E26                            ; End of function Sonic_JumpAngle
00014E26                            
00014E26                            ; ---------------------------------------------------------------------------
00014E26                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014E26                            ; ---------------------------------------------------------------------------
00014E26                            
00014E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E26                            
00014E26                            
00014E26                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014E26 3228 0010                  		move.w	$10(a0),d1
00014E2A 3428 0012                  		move.w	$12(a0),d2
00014E2E 4EB9 0000 2C94             		jsr	(CalcAngle).l
00014E34 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00014E38 0400 0020                  		subi.b	#$20,d0
00014E3C 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00014E40 0200 00C0                  		andi.b	#$C0,d0
00014E44 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00014E48 0C00 0040                  		cmpi.b	#$40,d0
00014E4C 6700 0000                  		beq.w	loc_13680
00014E50 0C00 0080                  		cmpi.b	#$80,d0
00014E54 6700 0000                  		beq.w	loc_136E2
00014E58 0C00 00C0                  		cmpi.b	#-$40,d0
00014E5C 6700 0000                  		beq.w	loc_1373E
00014E60 6100 0000                  		bsr.w	Sonic_HitWall
00014E64 4A41                       		tst.w	d1
00014E66 6A00                       		bpl.s	loc_135F0
00014E68 9368 0008                  		sub.w	d1,8(a0)
00014E6C 317C 0000 0010             		move.w	#0,$10(a0)
00014E72                            
00014E72                            loc_135F0:
00014E72 6100 0000                  		bsr.w	sub_14EB4
00014E76 4A41                       		tst.w	d1
00014E78 6A00                       		bpl.s	loc_13602
00014E7A D368 0008                  		add.w	d1,8(a0)
00014E7E 317C 0000 0010             		move.w	#0,$10(a0)
00014E84                            
00014E84                            loc_13602:
00014E84 6100 0000                  		bsr.w	Sonic_HitFloor
00014E88 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00014E8C 4A41                       		tst.w	d1
00014E8E 6A00                       		bpl.s	locret_1367E
00014E90 1428 0012                  		move.b	$12(a0),d2
00014E94 5002                       		addq.b	#8,d2
00014E96 4402                       		neg.b	d2
00014E98 B202                       		cmp.b	d2,d1
00014E9A 6C00                       		bge.s	loc_1361E
00014E9C B002                       		cmp.b	d2,d0
00014E9E 6D00                       		blt.s	locret_1367E
00014EA0                            
00014EA0                            loc_1361E:
00014EA0 D368 000C                  		add.w	d1,$C(a0)
00014EA4 1143 0026                  		move.b	d3,$26(a0)
00014EA8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014EAC 117C 0000 001C             		move.b	#0,$1C(a0)
00014EB2 1003                       		move.b	d3,d0
00014EB4 0600 0020                  		addi.b	#$20,d0
00014EB8 0200 0040                  		andi.b	#$40,d0
00014EBC 6600                       		bne.s	loc_1365C
00014EBE 1003                       		move.b	d3,d0
00014EC0 0600 0010                  		addi.b	#$10,d0
00014EC4 0200 0020                  		andi.b	#$20,d0
00014EC8 6700                       		beq.s	loc_1364E
00014ECA E0E8 0012                  		asr	$12(a0)
00014ECE 6000                       		bra.s	loc_13670
00014ED0                            ; ===========================================================================
00014ED0                            
00014ED0                            loc_1364E:
00014ED0 317C 0000 0012             		move.w	#0,$12(a0)
00014ED6 3168 0010 0020             		move.w	$10(a0),$20(a0)
00014EDC 4E75                       		rts	
00014EDE                            ; ===========================================================================
00014EDE                            
00014EDE                            loc_1365C:
00014EDE 317C 0000 0010             		move.w	#0,$10(a0)
00014EE4 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014EEA 6F00                       		ble.s	loc_13670
00014EEC 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00014EF2                            
00014EF2                            loc_13670:
00014EF2 3168 0012 0020             		move.w	$12(a0),$20(a0)
00014EF8 4A03                       		tst.b	d3
00014EFA 6A00                       		bpl.s	locret_1367E
00014EFC 4468 0020                  		neg.w	$20(a0)
00014F00                            
00014F00                            locret_1367E:
00014F00 4E75                       		rts	
00014F02                            ; ===========================================================================
00014F02                            
00014F02                            loc_13680:
00014F02 6100 0000                  		bsr.w	Sonic_HitWall
00014F06 4A41                       		tst.w	d1
00014F08 6A00                       		bpl.s	loc_1369A
00014F0A 9368 0008                  		sub.w	d1,8(a0)
00014F0E 317C 0000 0010             		move.w	#0,$10(a0)
00014F14 3168 0012 0020             		move.w	$12(a0),$20(a0)
00014F1A 4E75                       		rts	
00014F1C                            ; ===========================================================================
00014F1C                            
00014F1C                            loc_1369A:
00014F1C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014F20 4A41                       		tst.w	d1
00014F22 6A00                       		bpl.s	loc_136B4
00014F24 9368 000C                  		sub.w	d1,$C(a0)
00014F28 4A68 0012                  		tst.w	$12(a0)
00014F2C 6A00                       		bpl.s	locret_136B2
00014F2E 317C 0000 0012             		move.w	#0,$12(a0)
00014F34                            
00014F34                            locret_136B2:
00014F34 4E75                       		rts	
00014F36                            ; ===========================================================================
00014F36                            
00014F36                            loc_136B4:
00014F36 4A68 0012                  		tst.w	$12(a0)
00014F3A 6B00                       		bmi.s	locret_136E0
00014F3C 6100 0000                  		bsr.w	Sonic_HitFloor
00014F40 4A41                       		tst.w	d1
00014F42 6A00                       		bpl.s	locret_136E0
00014F44 D368 000C                  		add.w	d1,$C(a0)
00014F48 1143 0026                  		move.b	d3,$26(a0)
00014F4C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014F50 117C 0000 001C             		move.b	#0,$1C(a0)
00014F56 317C 0000 0012             		move.w	#0,$12(a0)
00014F5C 3168 0010 0020             		move.w	$10(a0),$20(a0)
00014F62                            
00014F62                            locret_136E0:
00014F62 4E75                       		rts	
00014F64                            ; ===========================================================================
00014F64                            
00014F64                            loc_136E2:
00014F64 6100 0000                  		bsr.w	Sonic_HitWall
00014F68 4A41                       		tst.w	d1
00014F6A 6A00                       		bpl.s	loc_136F4
00014F6C 9368 0008                  		sub.w	d1,8(a0)
00014F70 317C 0000 0010             		move.w	#0,$10(a0)
00014F76                            
00014F76                            loc_136F4:
00014F76 6100 0000                  		bsr.w	sub_14EB4
00014F7A 4A41                       		tst.w	d1
00014F7C 6A00                       		bpl.s	loc_13706
00014F7E D368 0008                  		add.w	d1,8(a0)
00014F82 317C 0000 0010             		move.w	#0,$10(a0)
00014F88                            
00014F88                            loc_13706:
00014F88 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014F8C 4A41                       		tst.w	d1
00014F8E 6A00                       		bpl.s	locret_1373C
00014F90 9368 000C                  		sub.w	d1,$C(a0)
00014F94 1003                       		move.b	d3,d0
00014F96 0600 0020                  		addi.b	#$20,d0
00014F9A 0200 0040                  		andi.b	#$40,d0
00014F9E 6600                       		bne.s	loc_13726
00014FA0 317C 0000 0012             		move.w	#0,$12(a0)
00014FA6 4E75                       		rts	
00014FA8                            ; ===========================================================================
00014FA8                            
00014FA8                            loc_13726:
00014FA8 1143 0026                  		move.b	d3,$26(a0)
00014FAC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014FB0 3168 0012 0020             		move.w	$12(a0),$20(a0)
00014FB6 4A03                       		tst.b	d3
00014FB8 6A00                       		bpl.s	locret_1373C
00014FBA 4468 0020                  		neg.w	$20(a0)
00014FBE                            
00014FBE                            locret_1373C:
00014FBE 4E75                       		rts	
00014FC0                            ; ===========================================================================
00014FC0                            
00014FC0                            loc_1373E:
00014FC0 6100 0000                  		bsr.w	sub_14EB4
00014FC4 4A41                       		tst.w	d1
00014FC6 6A00                       		bpl.s	loc_13758
00014FC8 D368 0008                  		add.w	d1,8(a0)
00014FCC 317C 0000 0010             		move.w	#0,$10(a0)
00014FD2 3168 0012 0020             		move.w	$12(a0),$20(a0)
00014FD8 4E75                       		rts	
00014FDA                            ; ===========================================================================
00014FDA                            
00014FDA                            loc_13758:
00014FDA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014FDE 4A41                       		tst.w	d1
00014FE0 6A00                       		bpl.s	loc_13772
00014FE2 9368 000C                  		sub.w	d1,$C(a0)
00014FE6 4A68 0012                  		tst.w	$12(a0)
00014FEA 6A00                       		bpl.s	locret_13770
00014FEC 317C 0000 0012             		move.w	#0,$12(a0)
00014FF2                            
00014FF2                            locret_13770:
00014FF2 4E75                       		rts	
00014FF4                            ; ===========================================================================
00014FF4                            
00014FF4                            loc_13772:
00014FF4 4A68 0012                  		tst.w	$12(a0)
00014FF8 6B00                       		bmi.s	locret_1379E
00014FFA 6100 0000                  		bsr.w	Sonic_HitFloor
00014FFE 4A41                       		tst.w	d1
00015000 6A00                       		bpl.s	locret_1379E
00015002 D368 000C                  		add.w	d1,$C(a0)
00015006 1143 0026                  		move.b	d3,$26(a0)
0001500A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001500E 117C 0000 001C             		move.b	#0,$1C(a0)
00015014 317C 0000 0012             		move.w	#0,$12(a0)
0001501A 3168 0010 0020             		move.w	$10(a0),$20(a0)
00015020                            
00015020                            locret_1379E:
00015020 4E75                       		rts	
00015022                            ; End of function Sonic_Floor
00015022                            
00015022                            ; ---------------------------------------------------------------------------
00015022                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00015022                            ; ---------------------------------------------------------------------------
00015022                            
00015022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015022                            
00015022                            
00015022                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00015022 0828 0004 0022             		btst	#4,$22(a0)
00015028 6700                       		beq.s	loc_137AE
0001502A 4E71                       		nop	
0001502C 4E71                       		nop	
0001502E 4E71                       		nop	
00015030                            
00015030                            loc_137AE:
00015030 08A8 0005 0022             		bclr	#5,$22(a0)
00015036 08A8 0001 0022             		bclr	#1,$22(a0)
0001503C 08A8 0004 0022             		bclr	#4,$22(a0)
00015042 0828 0002 0022             		btst	#2,$22(a0)
00015048 6700                       		beq.s	loc_137E4
0001504A 08A8 0002 0022             		bclr	#2,$22(a0)
00015050 117C 0013 0016             		move.b	#$13,$16(a0)
00015056 117C 0009 0017             		move.b	#9,$17(a0)
0001505C 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00015062 5B68 000C                  		subq.w	#5,$C(a0)
00015066                            
00015066                            loc_137E4:
00015066 117C 0000 003C             		move.b	#0,$3C(a0)
0001506C 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00015072 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00015076                            
00015076                            	@NoReset:
00015076 4E75                       		rts	
00015078                            ; End of function Sonic_ResetOnFloor
00015078                            
00015078                            ; ===========================================================================
00015078                            ; ---------------------------------------------------------------------------
00015078                            ; Sonic	when he	gets hurt
00015078                            ; ---------------------------------------------------------------------------
00015078                            
00015078                            Obj01_Hurt:				; XREF: Obj01_Index
00015078 4EBA 974A                  		jsr	SpeedToPos
0001507C 0668 0030 0012             		addi.w	#$30,$12(a0)
00015082 0828 0006 0022             		btst	#6,$22(a0)
00015088 6700                       		beq.s	loc_1380C
0001508A 0468 0020 0012             		subi.w	#$20,$12(a0)
00015090                            
00015090                            loc_1380C:
00015090 6100 0000                  		bsr.w	Sonic_HurtStop
00015094 6100 FACE                  		bsr.w	Sonic_LevelBound
00015098 6100 F4C4                  		bsr.w	Sonic_RecordPos
0001509C 6100 0000                  		bsr.w	Sonic_Animate
000150A0 6100 0000                  		bsr.w	LoadSonicDynPLC
000150A4 4EFA 9738                  		jmp	DisplaySprite
000150A8                            
000150A8                            ; ---------------------------------------------------------------------------
000150A8                            ; Subroutine to	stop Sonic falling after he's been hurt
000150A8                            ; ---------------------------------------------------------------------------
000150A8                            
000150A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150A8                            
000150A8                            
000150A8                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000150A8 3038 F72E                  		move.w	($FFFFF72E).w,d0
000150AC 0640 00E0                  		addi.w	#$E0,d0
000150B0 B068 000C                  		cmp.w	$C(a0),d0
000150B4 6500 FB2A                  		bcs.w	JMPKillSonic
000150B8 6100 FD6C                  		bsr.w	Sonic_Floor
000150BC 0828 0001 0022             		btst	#1,$22(a0)
000150C2 6600                       		bne.s	locret_13860
000150C4 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
000150CA 7000                       		moveq	#0,d0
000150CC 3140 0012                  		move.w	d0,$12(a0)
000150D0 3140 0010                  		move.w	d0,$10(a0)
000150D4 3140 0020                  		move.w	d0,$20(a0)
000150D8 117C 0000 001C             		move.b	#0,$1C(a0)
000150DE 5528 0024                  		subq.b	#2,$24(a0)
000150E2 317C 0078 0030             		move.w	#$78,$30(a0)
000150E8                            
000150E8                            locret_13860:
000150E8 4E75                       		rts	
000150EA                            ; End of function Sonic_HurtStop
000150EA                            
000150EA                            ; ===========================================================================
000150EA                            ; ---------------------------------------------------------------------------
000150EA                            ; Sonic	when he	dies
000150EA                            ; ---------------------------------------------------------------------------
000150EA                            
000150EA                            Obj01_Death:				; XREF: Obj01_Index
000150EA 6100 0000                  		bsr.w	GameOver
000150EE 4EBA 96B4                  		jsr	ObjectFall
000150F2 6100 F46A                  		bsr.w	Sonic_RecordPos
000150F6 6100 0000                  		bsr.w	Sonic_Animate
000150FA 6100 0000                  		bsr.w	LoadSonicDynPLC
000150FE 4EFA 96DE                  		jmp	DisplaySprite
00015102                            
00015102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015102                            
00015102                            
00015102                            GameOver:				; XREF: Obj01_Death
00015102 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015106 0640 0100                  		addi.w	#$100,d0
0001510A B068 000C                  		cmp.w	$C(a0),d0
0001510E 6400 0000                  		bcc.w	locret_13900
00015112 317C FFC8 0012             		move.w	#-$38,$12(a0)
00015118 5428 0024                  		addq.b	#2,$24(a0)
0001511C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00015120 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00015124 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00015128 6600                       		bne.s	loc_138D4
0001512A 317C 0000 003A             		move.w	#0,$3A(a0)
00015130 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00015136 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001513C 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00015142 4238 FE1A                  		clr.b	($FFFFFE1A).w
00015146                            
00015146                            loc_138C2:
00015146 303C 008F                  		move.w	#$8F,d0
0001514A 4EB9 0000 11F0             		jsr	(PlaySound).l	; play game over music
00015150 7003                       		moveq	#3,d0
00015152 4EF9 0000 1434             		jmp	(LoadPLC).l	; load game over patterns
00015158                            ; ===========================================================================
00015158                            
00015158                            loc_138D4:
00015158 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001515E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00015162 6700                       		beq.s	locret_13900	; if not, branch
00015164 317C 0000 003A             		move.w	#0,$3A(a0)
0001516A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00015170 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015176 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001517C 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00015182 60C2                       		bra.s	loc_138C2
00015184                            ; ===========================================================================
00015184                            
00015184                            locret_13900:
00015184 4E75                       		rts	
00015186                            ; End of function GameOver
00015186                            
00015186                            ; ===========================================================================
00015186                            ; ---------------------------------------------------------------------------
00015186                            ; Sonic	when the level is restarted
00015186                            ; ---------------------------------------------------------------------------
00015186                            
00015186                            Obj01_ResetLevel:			; XREF: Obj01_Index
00015186 4A68 003A                  		tst.w	$3A(a0)
0001518A 6700                       		beq.s	locret_13914
0001518C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00015190 6600                       		bne.s	locret_13914
00015192 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015198 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
0001519E                            
0001519E                            locret_13914:
0001519E 4E75                       		rts	
000151A0                            
000151A0                            ; ---------------------------------------------------------------------------
000151A0                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000151A0                            ; ---------------------------------------------------------------------------
000151A0                            
000151A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151A0                            
000151A0                            
000151A0                            Sonic_Loops:				; XREF: Obj01_Control
000151A0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
000151A6 6700                       		beq.s	loc_13926	; if yes, branch
000151A8 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
000151AC 6600 0000                  		bne.w	locret_139C2	; if not, branch
000151B0                            
000151B0                            loc_13926:
000151B0 3028 000C                  		move.w	$C(a0),d0
000151B4 E248                       		lsr.w	#1,d0
000151B6 0240 0380                  		andi.w	#$380,d0
000151BA 1228 0008                  		move.b	8(a0),d1
000151BE 0241 007F                  		andi.w	#$7F,d1
000151C2 D041                       		add.w	d1,d0
000151C4 43F8 A400                  		lea	($FFFFA400).w,a1
000151C8 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000151CC B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000151D0 6700 FA48                  		beq.w	Obj01_ChkRoll
000151D4 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000151D8 6700 FA40                  		beq.w	Obj01_ChkRoll
000151DC B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000151E0 6700                       		beq.s	loc_13976
000151E2 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000151E6 6700                       		beq.s	loc_13966
000151E8 08A8 0006 0001             		bclr	#6,1(a0)
000151EE 4E75                       		rts	
000151F0                            ; ===========================================================================
000151F0                            
000151F0                            loc_13966:
000151F0 0828 0001 0022             		btst	#1,$22(a0)
000151F6 6700                       		beq.s	loc_13976
000151F8 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000151FE 4E75                       		rts	
00015200                            ; ===========================================================================
00015200                            
00015200                            loc_13976:
00015200 3428 0008                  		move.w	8(a0),d2
00015204 0C02 002C                  		cmpi.b	#$2C,d2
00015208 6400                       		bcc.s	loc_13988
0001520A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00015210 4E75                       		rts	
00015212                            ; ===========================================================================
00015212                            
00015212                            loc_13988:
00015212 0C02 00E0                  		cmpi.b	#-$20,d2
00015216 6500                       		bcs.s	loc_13996
00015218 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001521E 4E75                       		rts	
00015220                            ; ===========================================================================
00015220                            
00015220                            loc_13996:
00015220 0828 0006 0001             		btst	#6,1(a0)
00015226 6600                       		bne.s	loc_139B2
00015228 1228 0026                  		move.b	$26(a0),d1
0001522C 6700                       		beq.s	locret_139C2
0001522E 0C01 0080                  		cmpi.b	#-$80,d1
00015232 6200                       		bhi.s	locret_139C2
00015234 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001523A 4E75                       		rts	
0001523C                            ; ===========================================================================
0001523C                            
0001523C                            loc_139B2:
0001523C 1228 0026                  		move.b	$26(a0),d1
00015240 0C01 0080                  		cmpi.b	#-$80,d1
00015244 6300                       		bls.s	locret_139C2
00015246 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001524C                            
0001524C                            locret_139C2:
0001524C 4E75                       		rts	
0001524E                            ; End of function Sonic_Loops
0001524E                            
0001524E                            ; ---------------------------------------------------------------------------
0001524E                            ; Sonic when he's drowning
0001524E                            ; ---------------------------------------------------------------------------
0001524E                             
0001524E                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
0001524E                             
0001524E                             
0001524E                            Sonic_Drowned:
0001524E 6100 9574                  		bsr.w   SpeedToPos		; Make Sonic able to move
00015252 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
00015258 6100 F304                  		bsr.w   Sonic_RecordPos	; Record position
0001525C 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
0001525E 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
00015262 6000 957A                  		bra.w   DisplaySprite	; And finally, display Sonic
00015266                            
00015266                            ; ---------------------------------------------------------------------------
00015266                            ; Subroutine to	animate	Sonic's sprites
00015266                            ; ---------------------------------------------------------------------------
00015266                            
00015266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015266                            
00015266                            
00015266                            Sonic_Animate:				; XREF: Obj01_Control; et al
00015266 43F9 0000 0000             		lea	(SonicAniData).l,a1
0001526C 7000                       		moveq	#0,d0
0001526E 1028 001C                  		move.b	$1C(a0),d0
00015272 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00015276 6700                       		beq.s	SAnim_Do	; if not, branch
00015278 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0001527C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00015282 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00015288                            
00015288                            SAnim_Do:
00015288 D040                       		add.w	d0,d0
0001528A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001528E 1011                       		move.b	(a1),d0
00015290 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00015292 1228 0022                  		move.b	$22(a0),d1
00015296 0201 0001                  		andi.b	#1,d1
0001529A 0228 00FC 0001             		andi.b	#$FC,1(a0)
000152A0 8328 0001                  		or.b	d1,1(a0)
000152A4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000152A8 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000152AA 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000152AE                            
000152AE                            SAnim_Do2:
000152AE 7200                       		moveq	#0,d1
000152B0 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000152B4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000152B8 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000152BA                            
000152BA                            SAnim_Next:
000152BA 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000152BE 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000152C2                            
000152C2                            SAnim_Delay:
000152C2 4E75                       		rts	
000152C4                            ; ===========================================================================
000152C4                            
000152C4                            SAnim_End_FF:
000152C4 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000152C6 6600                       		bne.s	SAnim_End_FE	; if not, branch
000152C8 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000152CE 1029 0001                  		move.b	1(a1),d0	; read sprite number
000152D2 60E6                       		bra.s	SAnim_Next
000152D4                            ; ===========================================================================
000152D4                            
000152D4                            SAnim_End_FE:
000152D4 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000152D6 6600                       		bne.s	SAnim_End_FD	; if not, branch
000152D8 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000152DC 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000152E0 9200                       		sub.b	d0,d1
000152E2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000152E6 60D2                       		bra.s	SAnim_Next
000152E8                            ; ===========================================================================
000152E8                            
000152E8                            SAnim_End_FD:
000152E8 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000152EA 6600                       		bne.s	SAnim_End	; if not, branch
000152EC 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000152F2                            
000152F2                            SAnim_End:
000152F2 4E75                       		rts	
000152F4                            ; ===========================================================================
000152F4                            
000152F4                            SAnim_WalkRun:				; XREF: SAnim_Do
000152F4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000152F8 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000152FA 5200                       		addq.b	#1,d0		; is animation walking/running?
000152FC 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00015300 7200                       		moveq	#0,d1
00015302 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00015306 1428 0022                  		move.b	$22(a0),d2
0001530A 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001530E 6600                       		bne.s	loc_13A70	; if yes, branch
00015310 4600                       		not.b	d0		; reverse angle
00015312                            
00015312                            loc_13A70:
00015312 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00015316 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00015318 7203                       		moveq	#3,d1
0001531A                            
0001531A                            loc_13A78:
0001531A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015320 B302                       		eor.b	d1,d2
00015322 8528 0001                  		or.b	d2,1(a0)
00015326 0828 0005 0022             		btst	#5,$22(a0)
0001532C 6600 0000                  		bne.w	SAnim_Push
00015330 E808                       		lsr.b	#4,d0		; divide angle by $10
00015332 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00015336 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
0001533A 6A00                       		bpl.s	loc_13A9C
0001533C 4442                       		neg.w	d2
0001533E                            
0001533E                            loc_13A9C:
0001533E 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00015344 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00015348 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001534A 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00015350 1200                       		move.b	d0,d1
00015352 E209                       		lsr.b	#1,d1
00015354 D001                       		add.b	d1,d0
00015356                            
00015356                            loc_13AB4:
00015356 D000                       		add.b	d0,d0
00015358 1600                       		move.b	d0,d3
0001535A 4442                       		neg.w	d2
0001535C 0642 0800                  		addi.w	#$800,d2
00015360 6A00                       		bpl.s	loc_13AC2
00015362 7400                       		moveq	#0,d2
00015364                            
00015364                            loc_13AC2:
00015364 E04A                       		lsr.w	#8,d2
00015366 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001536A 6100 FF42                  		bsr.w	SAnim_Do2
0001536E D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00015372 4E75                       		rts	
00015374                            ; ===========================================================================
00015374                            
00015374                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00015374 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00015376 6600                       		bne.s	SAnim_Push	; if not, branch
00015378 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
0001537C 6A00                       		bpl.s	loc_13ADE
0001537E 4442                       		neg.w	d2
00015380                            
00015380                            loc_13ADE:
00015380 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00015386 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001538A 6400                       		bcc.s	loc_13AF0	; if yes, branch
0001538C 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00015392                            
00015392                            loc_13AF0:
00015392 4442                       		neg.w	d2
00015394 0642 0400                  		addi.w	#$400,d2
00015398 6A00                       		bpl.s	loc_13AFA
0001539A 7400                       		moveq	#0,d2
0001539C                            
0001539C                            loc_13AFA:
0001539C E04A                       		lsr.w	#8,d2
0001539E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000153A2 1228 0022                  		move.b	$22(a0),d1
000153A6 0201 0001                  		andi.b	#1,d1
000153AA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000153B0 8328 0001                  		or.b	d1,1(a0)
000153B4 6000 FEF8                  		bra.w	SAnim_Do2
000153B8                            ; ===========================================================================
000153B8                            
000153B8                            SAnim_Push:				; XREF: SAnim_RollJump
000153B8 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
000153BC 6B00                       		bmi.s	loc_13B1E
000153BE 4442                       		neg.w	d2
000153C0                            
000153C0                            loc_13B1E:
000153C0 0642 0800                  		addi.w	#$800,d2
000153C4 6A00                       		bpl.s	loc_13B26
000153C6 7400                       		moveq	#0,d2
000153C8                            
000153C8                            loc_13B26:
000153C8 EC4A                       		lsr.w	#6,d2
000153CA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000153CE 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000153D4 1228 0022                  		move.b	$22(a0),d1
000153D8 0201 0001                  		andi.b	#1,d1
000153DC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000153E2 8328 0001                  		or.b	d1,1(a0)
000153E6 6000 FEC6                  		bra.w	SAnim_Do2
000153EA                            ; End of function Sonic_Animate
000153EA                            
000153EA                            ; ===========================================================================
000153EA                            SonicAniData:
000153EA                            	include "_anim\Sonic.asm"
000153EA                            ; ---------------------------------------------------------------------------
000153EA                            ; Animation script - Sonic
000153EA                            ; ---------------------------------------------------------------------------
000153EA 0000                       		dc.w SonAni_Walk-SonicAniData
000153EC 0000                       		dc.w SonAni_Run-SonicAniData
000153EE 0000                       		dc.w SonAni_Roll-SonicAniData
000153F0 0000                       		dc.w SonAni_Roll2-SonicAniData
000153F2 0000                       		dc.w SonAni_Push-SonicAniData
000153F4 0000                       		dc.w SonAni_Wait-SonicAniData
000153F6 0000                       		dc.w SonAni_Balance-SonicAniData
000153F8 0000                       		dc.w SonAni_LookUp-SonicAniData
000153FA 0000                       		dc.w SonAni_Duck-SonicAniData
000153FC 0000                       		dc.w SonAni_Warp1-SonicAniData
000153FE 0000                       		dc.w SonAni_Warp2-SonicAniData
00015400 0000                       		dc.w SonAni_Warp3-SonicAniData
00015402 0000                       		dc.w SonAni_Warp4-SonicAniData
00015404 0000                       		dc.w SonAni_Stop-SonicAniData
00015406 0000                       		dc.w SonAni_Float1-SonicAniData
00015408 0000                       		dc.w SonAni_Float2-SonicAniData
0001540A 0000                       		dc.w SonAni_Spring-SonicAniData
0001540C 0000                       		dc.w SonAni_LZHang-SonicAniData
0001540E 0000                       		dc.w SonAni_Leap1-SonicAniData
00015410 0000                       		dc.w SonAni_Leap2-SonicAniData
00015412 0000                       		dc.w SonAni_Surf-SonicAniData
00015414 0000                       		dc.w SonAni_Bubble-SonicAniData
00015416 0000                       		dc.w SonAni_Death1-SonicAniData
00015418 0000                       		dc.w SonAni_Drown-SonicAniData
0001541A 0000                       		dc.w SonAni_Death2-SonicAniData
0001541C 0000                       		dc.w SonAni_Shrink-SonicAniData
0001541E 0000                       		dc.w SonAni_Hurt-SonicAniData
00015420 0000                       		dc.w SonAni_LZSlide-SonicAniData
00015422 0000                       		dc.w SonAni_Blank-SonicAniData
00015424 0000                       		dc.w SonAni_Float3-SonicAniData
00015426 0000                       		dc.w SonAni_Float4-SonicAniData
00015428 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00015430 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00015438 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00015440 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00015448 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00015450 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00015466 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
0001546A 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
0001546E 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00015472 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00015476 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
0001547A 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
0001547E 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00015482 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00015486 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001548A 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00015492 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00015496 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001549A 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000154A0 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000154A6 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000154AA 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000154B2 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000154B6 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000154BA 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000154BE 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000154C8 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
000154CC 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000154D0 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000154D4 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000154DC 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000154E0                            		even
000154E0                            		even
000154E0                            
000154E0                            ; ---------------------------------------------------------------------------
000154E0                            ; Sonic	pattern	loading	subroutine
000154E0                            ; ---------------------------------------------------------------------------
000154E0                            
000154E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154E0                            
000154E0                            
000154E0                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000154E0 7000                       		moveq	#0,d0
000154E2 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000154E6 B038 F766                  		cmp.b	($FFFFF766).w,d0
000154EA 6700 0000                  		beq.w	locret_13C96
000154EE 11C0 F766                  		move.b	d0,($FFFFF766).w
000154F2 45F9 0000 0000             		lea	(SonicDynPLC).l,a2	
000154F8 D040                       		add.w	d0,d0
000154FA D4F2 0000                  		adda.w	(a2,d0.w),a2
000154FE 7A00                       		moveq	#0,d5
00015500 1A1A                       		move.b	(a2)+,d5
00015502 5345                       		subq.w	#1,d5
00015504 6B00                       		bmi.s	locret_13C96
00015506 383C F000                  		move.w	#$F000,d4
0001550A 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00015510                            
00015510                            SPLC_ReadEntry:
00015510 7200                       		moveq	#0,d1
00015512 121A                       		move.b	(a2)+,d1
00015514 E149                       		lsl.w	#8,d1
00015516 121A                       		move.b	(a2)+,d1
00015518 3601                       		move.w	d1,d3
0001551A E04B                       		lsr.w	#8,d3
0001551C 0243 00F0                  		andi.w	#$F0,d3
00015520 0643 0010                  		addi.w	#$10,d3
00015524 0241 0FFF                  		andi.w	#$FFF,d1
00015528 EB89                       		lsl.l	#5,d1
0001552A D286                       		add.l	d6,d1
0001552C 3404                       		move.w	d4,d2
0001552E D843                       		add.w	d3,d4
00015530 D843                       		add.w	d3,d4
00015532 4EB9 0000 4A58             		jsr	(QueueDMATransfer).l
00015538 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
0001553C                             
0001553C                            locret_13C96:
0001553C 4E75                       		rts	
0001553E                            ; End of function LoadSonicDynPLC
0001553E                            
0001553E                            ; ===========================================================================
0001553E                            ; ---------------------------------------------------------------------------
0001553E                            ; Object 02 - Sonime
0001553E                            ; ---------------------------------------------------------------------------
0001553E                            
0001553E                            Obj02:
0001553E 7000                       		moveq	#0,d0
00015540 41F8 F5C0                  		lea	(SonimeSST).w,a0
00015544 1028 0004                  		move.b	sonime_routine(a0),d0
00015548 323B 0000                  		move.w	Obj02_Index(pc,d0.w),d1
0001554C 4EFB 1000                  		jmp	Obj02_Index(pc,d1.w)
00015550                            ; ===========================================================================
00015550 0000                       Obj02_Index:	dc.w Obj02_Init-Obj02_Index
00015552 0000                       		dc.w Obj02_MoveIn-Obj02_Index
00015554 0000                       		dc.w Obj02_Animate-Obj02_Index
00015556                            ; ===========================================================================
00015556                            
00015556                            Obj02_Init:				; XREF: Obj0A_Index
00015556 5428 0004                  		addq.b	#2,sonime_routine(a0)
0001555A 223C 0000 0000             		move.l #Art_Sonime_Torso,d1
00015560 343C F400                  		move.w #(torsoart*$20),d2
00015564 363C 00C0                  		move.w #$C0,d3
00015568 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
0001556E 223C 0000 0000             		move.l #Art_Sonime_Head,d1
00015574 343C F580                  		move.w #(headart*$20),d2
00015578 363C 0140                  		move.w #$140,d3
0001557C 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
00015582 223C 0000 0000             		move.l #Art_Sonime_Hair,d1
00015588 343C F300                  		move.w #(hairart*$20),d2
0001558C 363C 0080                  		move.w #$80,d3
00015590 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
00015596 117C 0030 0017             		move.b	#$30,sonime_movein(a0)
0001559C 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
000155A2                            
000155A2                            Obj02_MoveIn:
000155A2 5528 0017                  		subq.b	#2,sonime_movein(a0)
000155A6 1028 0017                  		move.b	sonime_movein(a0),d0
000155AA 1140 0002                  		move.b	d0,sonime_headx(a0)
000155AE 1140 0016                  		move.b	d0,sonime_torsox(a0)
000155B2 1140 0009                  		move.b	d0,sonime_hairx(a0)
000155B6 4A00                       		tst.b	d0
000155B8 6600 0000                  		bne.w	Obj02_Display
000155BC 5428 0004                  		addq.b	#2,sonime_routine(a0)
000155C0                            
000155C0                            Obj02_Animate:
000155C0 5350                       		subi.w	#1,sonime_headtimer(a0)
000155C2 6A00 0000                  		bpl.w	Obj02_Face
000155C6 4EB8 29A6                  		jsr	RandomNumber
000155CA 0240 003F                  		andi.w	#$3F,d0
000155CE 0640 0080                  		addi.w	#$80,d0
000155D2 3080                       		move.w	d0,sonime_headtimer(a0)
000155D4 4EB8 29A6                  		jsr	RandomNumber
000155D8 0240 0006                  		andi.w	#6,d0
000155DC 303B 0000                  		move.w	Obj02_HeadIndex(pc,d0.w),d0
000155E0 4EFB 0000                  		jmp	Obj02_HeadIndex(pc,d0.w)
000155E4                            
000155E4                            ; ===========================================================================
000155E4 0000                       Obj02_HeadIndex:	dc.w Obj02_Up-Obj02_HeadIndex
000155E6 0000                       		dc.w Obj02_Down-Obj02_HeadIndex
000155E8 0000                       		dc.w Obj02_Left-Obj02_HeadIndex
000155EA 0000                       		dc.w Obj02_Right-Obj02_HeadIndex
000155EC                            ; ===========================================================================
000155EC                            
000155EC                            Obj02_Up:
000155EC 4A28 0003                  		tst.b	sonime_heady(a0)
000155F0 6D00                       		blt.s	Obj02_Down
000155F2 5328 0003                  		subi.b	#1,sonime_heady(a0)
000155F6 6000                       		bra.s	Obj02_Face
000155F8                            
000155F8                            Obj02_Down:
000155F8 4A28 0003                  		tst.b	sonime_heady(a0)
000155FC 6EEE                       		bgt.s	Obj02_Up
000155FE 5228 0003                  		addi.b	#1,sonime_heady(a0)
00015602 6000                       		bra.s	Obj02_Face
00015604                            
00015604                            Obj02_Left:
00015604 4A28 0002                  		tst.b	sonime_headx(a0)
00015608 6D00                       		blt.s	Obj02_Right
0001560A 5328 0002                  		subi.b	#1,sonime_headx(a0)
0001560E 6000                       		bra.s	Obj02_Face
00015610                            
00015610                            Obj02_Right:
00015610 4A28 0002                  		tst.b	sonime_headx(a0)
00015614 6EEE                       		bgt.s	Obj02_Left
00015616 5228 0002                  		addi.b	#1,sonime_headx(a0)
0001561A                            
0001561A                            Obj02_Face:
0001561A 4A38 FE12                  		tst.b	($FFFFFE12).w
0001561E 6700 0000                  		beq.w	@NoWait
00015622 0C28 0001 000E             		cmpi.b	#face_blink,sonime_face(a0)
00015628 6700                       		beq.s	@UnBlink
0001562A 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
0001562E 6A00 0000                  		bpl.w	@NoWait
00015632 317C 0003 0010             		move.w	#3,sonime_facetimer(a0)
00015638 117C 0001 000E             		move.b	#face_blink,sonime_face(a0)
0001563E 6000 0000                  		bra.w	@NoWait
00015642                            
00015642                            	@UnBlink:
00015642 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
00015646 6A00 0000                  		bpl.w	@NoWait
0001564A 117C 0004 000E             		move.b	#face_neutralr,sonime_face(a0)
00015650 4EB8 29A6                  		jsr	RandomNumber
00015654 0240 003F                  		andi.w	#$3F,d0
00015658 0640 00B0                  		addi.w	#$B0,d0
0001565C 3140 0010                  		move.w	d0,sonime_facetimer(a0)
00015660 4EB8 29A6                  		jsr	RandomNumber
00015664 0200 000F                  		andi.b	#$F,d0
00015668 4A00                       		tst.b	d0
0001566A 6700                       		beq.s	@NoBlink
0001566C 117C 0003 000E             		move.b	#face_neutralm,sonime_face(a0)
00015672 0C00 0001                  		cmpi.b	#1,d0
00015676 6700                       		beq.s	@NoBlink
00015678 117C 0002 000E             		move.b	#face_neutrallm,sonime_face(a0)
0001567E 0C00 0002                  		cmpi.b	#2,d0
00015682 6700                       		beq.s	@NoBlink
00015684 117C 0000 000E             		move.b	#face_neutrall,sonime_face(a0)
0001568A                            
0001568A                            	@NoBlink:
0001568A 0C38 0005 D01C             		cmpi.b	#5,($FFFFD01C).w
00015690 6600                       		bne.s	@NoWait
00015692 0C38 000F D01B             		cmpi.b	#$F,($FFFFD01B).w
00015698 6500                       		bcs.s	@NoWait
0001569A 117C 000B 000E             		move.b	#face_impatient,sonime_face(a0)
000156A0 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
000156F6                            
000156F6                            	@NoWait:
000156F6 0C78 0800 D010             		cmpi.w	#$800,($FFFFD010).w
000156FC 6D00                       		blt.s	@TooSlow
000156FE 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
00015704 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpeed
0001575A                            
0001575A                            	@TooSlow:
0001575A 0C78 F800 D010             		cmpi.w	#-$800,($FFFFD010).w
00015760 6E00                       		bgt.s	@TooSlow2
00015762 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
00015768                            
00015768                            	@TooSlow2:
00015768 7800                       		moveq	#0,d4
0001576A 1828 000E                  		move.b	sonime_face(a0),d4
0001576E B828 000F                  		cmp.b	sonime_faceold(a0),d4
00015772 6700                       		beq.s	Obj02_Ear
00015774 1144 000F                  		move.b	d4,sonime_faceold(a0)
00015778 ED4C                       		lsl.w	#6,d4
0001577A 3A04                       		move.w	d4,d5
0001577C DA45                       		add.w	d5,d5
0001577E D845                       		add.w	d5,d4
00015780 223C 0000 0000             		move.l #Art_Sonime_Faces,d1
00015786 D244                       		add.w	d4,d1
00015788 343C F5C0                  		move.w #(headart*$20+$40),d2
0001578C 363C 0020                  		move.w #$20,d3
00015790 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
00015796 223C 0000 0000             		move.l #(Art_Sonime_Faces+$40),d1
0001579C D244                       		add.w	d4,d1
0001579E 343C F640                  		move.w #(headart*$20+$C0),d2
000157A2 363C 0020                  		move.w #$20,d3
000157A6 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
000157AC 223C 0000 0000             		move.l #(Art_Sonime_Faces+$80),d1
000157B2 D244                       		add.w	d4,d1
000157B4 343C F6C0                  		move.w #(headart*$20+$140),d2
000157B8 363C 0020                  		move.w #$20,d3
000157BC 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
000157C2                            
000157C2                            Obj02_Ear:
000157C2 4A28 0012                  		tst.b	sonime_ear(a0)
000157C6 6600                       		bne.s	@UnTwitch
000157C8 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
000157CC 6A00                       		bpl.s	@NoTwitch
000157CE 317C 000F 0014             		move.w	#$F,sonime_eartimer(a0)
000157D4 4EB8 29A6                  		jsr	RandomNumber
000157D8 0200 0001                  		andi.b	#1,d0
000157DC 5200                       		addq.b	#1,d0
000157DE 1140 0012                  		move.b	d0,sonime_ear(a0)
000157E2 6000                       		bra.s	@NoTwitch
000157E4                            
000157E4                            	@UnTwitch:
000157E4 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
000157E8 6A00                       		bpl.s	@NoTwitch
000157EA 117C 0000 0012             		move.b	#0,sonime_ear(a0)
000157F0 4EB8 29A6                  		jsr	RandomNumber
000157F4 0240 007F                  		andi.w	#$7F,d0
000157F8 0640 0100                  		addi.w	#$100,d0
000157FC 3140 0014                  		move.w	d0,sonime_eartimer(a0)
00015800                            
00015800                            	@NoTwitch:
00015800 7800                       		moveq	#0,d4
00015802 1828 0012                  		move.b	sonime_ear(a0),d4
00015806 B828 0013                  		cmp.b	sonime_earold(a0),d4
0001580A 6700                       		beq.s	Obj02_Display
0001580C 1144 0013                  		move.b	d4,sonime_earold(a0)
00015810 EB0C                       		lsl.b	#5,d4
00015812 0204 0020                  		andi.b	#$20,d4
00015816 223C 0000 0000             		move.l #Art_Sonime_LeftEar,d1
0001581C D284                       		add.l	d4,d1
0001581E 343C F580                  		move.w #(headart*$20),d2
00015822 363C 0010                  		move.w #$10,d3
00015826 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
0001582C 7800                       		moveq	#0,d4
0001582E 1828 0012                  		move.b	sonime_ear(a0),d4
00015832 EB0C                       		lsl.b	#5,d4
00015834 0204 0040                  		andi.b	#$40,d4
00015838 223C 0000 0000             		move.l #Art_Sonime_RightEar,d1
0001583E D284                       		add.l	d4,d1
00015840 343C F680                  		move.w #(headart*$20+$100),d2
00015844 363C 0020                  		move.w #$20,d3
00015848 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
0001584E                            
0001584E                            Obj02_Display:
0001584E 7200                       		moveq	#0,d1
00015850 7400                       		moveq	#0,d2
00015852 7600                       		moveq	#0,d3
00015854 7800                       		moveq	#0,d4
00015856 7A00                       		moveq	#0,d5
00015858 1628 0002                  		move.b	sonime_headx(a0),d3	; set X pos
0001585C 1428 0003                  		move.b	sonime_heady(a0),d2	; set Y pos
00015860 4883                       		ext.w	d3
00015862 4882                       		ext.w	d2
00015864 0643 01A0                  		addi.w	#$1A0,d3
00015868 0642 0140                  		addi.w	#$140,d2
0001586C 43F9 0000 0000             		lea	(Map_sonime_head).l,a1
00015872 367C 87AC                  		movea.w	#($8000+headart),a3	; set art tile and flags
00015876 D241                       		add.w	d1,d1
00015878 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001587C 1219                       		move.b	(a1)+,d1
0001587E 5301                       		subq.b	#1,d1
00015880 6B00                       		bmi.s	@nextspr
00015882 6100 920A                  		bsr.w	DrawSprite_Loop
00015886                            
00015886                            	@nextspr:
00015886 7200                       		moveq	#0,d1
00015888 7600                       		moveq	#0,d3
0001588A 1628 0016                  		move.b	sonime_torsox(a0),d3
0001588E 0643 01A0                  		add.w	#$1A0,d3	; set X pos
00015892 343C 0154                  		move.w	#$154,d2	; set Y pos
00015896 43F9 0000 0000             		lea	(Map_sonime_torso).l,a1
0001589C 367C 87A0                  		movea.w	#($8000+torsoart),a3	; set art tile and flags
000158A0 D241                       		add.w	d1,d1
000158A2 D2F1 1000                  		adda.w	(a1,d1.w),a1
000158A6 1219                       		move.b	(a1)+,d1
000158A8 5301                       		subq.b	#1,d1
000158AA 6B00                       		bmi.s	@nextspr2
000158AC 6100 91E0                  		bsr.w	DrawSprite_Loop
000158B0                            
000158B0                            	@nextspr2:
000158B0 7200                       		moveq	#0,d1
000158B2 7400                       		moveq	#0,d2
000158B4 7600                       		moveq	#0,d3
000158B6 1628 0009                  		move.b	sonime_hairx(a0),d3	; set X pos
000158BA 1428 000D                  		move.b	sonime_hairy(a0),d2	; set Y pos
000158BE 4883                       		ext.w	d3
000158C0 4882                       		ext.w	d2
000158C2 0643 01A0                  		addi.w	#$1A0,d3
000158C6 0642 0153                  		addi.w	#$153,d2
000158CA 1168 0007 0009             		move.b	sonime_headx3(a0),sonime_hairx(a0)
000158D0 1168 000B 000D             		move.b	sonime_heady3(a0),sonime_hairy(a0)
000158D6 1168 0006 0007             		move.b	sonime_headx2(a0),sonime_headx3(a0)
000158DC 1168 000A 000B             		move.b	sonime_heady2(a0),sonime_heady3(a0)
000158E2 1168 0002 0006             		move.b	sonime_headx(a0),sonime_headx2(a0)
000158E8 1168 0003 000A             		move.b	sonime_heady(a0),sonime_heady2(a0)
000158EE 43F9 0000 0000             		lea	(Map_sonime_hair).l,a1
000158F4 367C 8798                  		movea.w	#($8000+hairart),a3	; set art tile and flags
000158F8 D241                       		add.w	d1,d1
000158FA D2F1 1000                  		adda.w	(a1,d1.w),a1
000158FE 1219                       		move.b	(a1)+,d1
00015900 5301                       		subq.b	#1,d1
00015902 6B00                       		bmi.s	Obj02_Done
00015904 6100 9188                  		bsr.w	DrawSprite_Loop
00015908                            
00015908                            Obj02_Done:		
00015908 4E75                       		rts	
0001590A                            
0001590A                            ; ---------------------------------------------------------------------------
0001590A                            ; Sprite mappings - sonime
0001590A                            ; ---------------------------------------------------------------------------
0001590A                            Map_sonime_torso:
0001590A                            	include "_maps\sonime_torso.asm"
0001590A                            ; ================================================================================
0001590A                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:06:55 GMT-0500 (Eastern Standard Time)
0001590A                            ; ================================================================================
0001590A                            
0001590A                            DATAUI6DX8OCWY:
0001590A 0000                       	dc.w DATAUI6DX8OCWY_0-DATAUI6DX8OCWY
0001590C 01                         DATAUI6DX8OCWY_0: dc.b $1
0001590D F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
00015912                            	even
00015912                            	even
00015912                            
00015912                            Map_sonime_head:
00015912                            	include "_maps\sonime_head.asm"
00015912                            ; ================================================================================
00015912                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:05:21 GMT-0500 (Eastern Standard Time)
00015912                            ; ================================================================================
00015912                            
00015912                            DATAYDZD849MEMA:
00015912 0000                       	dc.w DATAYDZD849MEMA_0-DATAYDZD849MEMA
00015914 03                         DATAYDZD849MEMA_0: dc.b $3
00015915 E80F 0000 F0               	dc.b $E8, $F, $0, $0, $F0
0001591A 0808 0010 F0               	dc.b $8, $8, $0, $10, $F0
0001591F 1000 0013 00               	dc.b $10, $0, $0, $13, $0
00015924                            	even
00015924                            	even
00015924                            
00015924                            Map_sonime_hair:
00015924                            	include "_maps\sonime_hair.asm"
00015924                            ; ================================================================================
00015924                            ; Sprite Mappings - generated by Flex 2 Sun Dec 20 2020 17:48:20 GMT-0500 (Eastern Standard Time)
00015924                            ; ================================================================================
00015924                            
00015924                            DATAQZ9CZ11E8T:
00015924 0000                       	dc.w DATAQZ9CZ11E8T_0-DATAQZ9CZ11E8T
00015926 03                         DATAQZ9CZ11E8T_0: dc.b $3
00015927 F40C 0000 F0               	dc.b $F4, $C, $0, $0, $F0
0001592C FC01 0004 F0               	dc.b $FC, $1, $0, $4, $F0
00015931 FC01 0006 08               	dc.b $FC, $1, $0, $6, $8
00015936                            	even
00015936                            	even
00015936                            
00015936                            ; ===========================================================================
00015936                            ; ---------------------------------------------------------------------------
00015936                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015936                            ; ---------------------------------------------------------------------------
00015936                            
00015936                            Obj0A:					; XREF: Obj_Index
00015936 7000                       		moveq	#0,d0
00015938 1028 0024                  		move.b	$24(a0),d0
0001593C 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015940 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015944                            ; ===========================================================================
00015944 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015948 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001594C 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015950 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015954 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015956                            ; ===========================================================================
00015956                            
00015956                            Obj0A_Main:				; XREF: Obj0A_Index
00015956 5428 0024                  		addq.b	#2,$24(a0)
0001595A 217C 0001 41CC 0004        		move.l	#Map_obj64,4(a0)
00015962 317C 8348 0002             		move.w	#$8348,2(a0)
00015968 117C 0084 0001             		move.b	#$84,1(a0)
0001596E 117C 0010 0019             		move.b	#$10,$19(a0)
00015974 117C 0001 0018             		move.b	#1,$18(a0)
0001597A 1028 0028                  		move.b	$28(a0),d0
0001597E 6A00                       		bpl.s	loc_13D00
00015980 5028 0024                  		addq.b	#8,$24(a0)
00015984 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001598C 317C 0440 0002             		move.w	#$440,2(a0)
00015992 0240 007F                  		andi.w	#$7F,d0
00015996 1140 0033                  		move.b	d0,$33(a0)
0001599A 6000 0000                  		bra.w	Obj0A_Countdown
0001599E                            ; ===========================================================================
0001599E                            
0001599E                            loc_13D00:
0001599E 1140 001C                  		move.b	d0,$1C(a0)
000159A2 3168 0008 0030             		move.w	8(a0),$30(a0)
000159A8 317C FF78 0012             		move.w	#-$88,$12(a0)
000159AE                            
000159AE                            Obj0A_Animate:				; XREF: Obj0A_Index
000159AE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000159B4 4EB9 0000 B83E             		jsr	AnimateSprite
000159BA                            
000159BA                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000159BA 3038 F646                  		move.w	($FFFFF646).w,d0
000159BE B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000159C2 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000159C4 117C 0006 0024             		move.b	#6,$24(a0)
000159CA 5E28 001C                  		addq.b	#7,$1C(a0)
000159CE 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000159D4 6700                       		beq.s	Obj0A_Display
000159D6 6000                       		bra.s	Obj0A_Display
000159D8                            ; ===========================================================================
000159D8                            
000159D8                            Obj0A_Wobble:
000159D8 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000159DC 6700                       		beq.s	loc_13D44
000159DE 5868 0030                  		addq.w	#4,$30(a0)
000159E2                            
000159E2                            loc_13D44:
000159E2 1028 0026                  		move.b	$26(a0),d0
000159E6 5228 0026                  		addq.b	#1,$26(a0)
000159EA 0240 007F                  		andi.w	#$7F,d0
000159EE 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000159F4 1031 0000                  		move.b	(a1,d0.w),d0
000159F8 4880                       		ext.w	d0
000159FA D068 0030                  		add.w	$30(a0),d0
000159FE 3140 0008                  		move.w	d0,8(a0)
00015A02 6100                       		bsr.s	Obj0A_ShowNumber
00015A04 4EBA 8DBE                  		jsr	SpeedToPos
00015A08 4A28 0001                  		tst.b	1(a0)
00015A0C 6A00                       		bpl.s	Obj0A_Delete
00015A0E 4EFA 8DCE                  		jmp	DisplaySprite
00015A12                            ; ===========================================================================
00015A12                            
00015A12                            Obj0A_Delete:
00015A12 4EFA 8E1A                  		jmp	DeleteObject
00015A16                            ; ===========================================================================
00015A16                            
00015A16                            Obj0A_Display:				; XREF: Obj0A_Index
00015A16 6100                       		bsr.s	Obj0A_ShowNumber
00015A18 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015A1E 4EB9 0000 B83E             		jsr	AnimateSprite
00015A24 4EFA 8DB8                  		jmp	DisplaySprite
00015A28                            ; ===========================================================================
00015A28                            
00015A28                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015A28 4EFA 8E04                  		jmp	DeleteObject
00015A2C                            ; ===========================================================================
00015A2C                            
00015A2C                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015A2C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015A32 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015A34 5368 0038                  		subq.w	#1,$38(a0)
00015A38 6600                       		bne.s	Obj0A_Display2
00015A3A 117C 000E 0024             		move.b	#$E,$24(a0)
00015A40 5E28 001C                  		addq.b	#7,$1C(a0)
00015A44 60D0                       		bra.s	Obj0A_Display
00015A46                            ; ===========================================================================
00015A46                            
00015A46                            Obj0A_Display2:
00015A46 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015A4C 4EB9 0000 B83E             		jsr	AnimateSprite
00015A52 4A28 0001                  		tst.b	1(a0)
00015A56 6A00                       		bpl.s	Obj0A_Delete3
00015A58 4EFA 8D84                  		jmp	DisplaySprite
00015A5C                            ; ===========================================================================
00015A5C                            
00015A5C                            Obj0A_Delete3:
00015A5C 4EFA 8DD0                  		jmp	DeleteObject
00015A60                            ; ===========================================================================
00015A60                            
00015A60                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015A60 4A68 0038                  		tst.w	$38(a0)
00015A64 6700                       		beq.s	locret_13E1A
00015A66 5368 0038                  		subq.w	#1,$38(a0)
00015A6A 6600                       		bne.s	locret_13E1A
00015A6C 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015A72 6400                       		bcc.s	locret_13E1A
00015A74 317C 000F 0038             		move.w	#$F,$38(a0)
00015A7A 4268 0012                  		clr.w	$12(a0)
00015A7E 117C 0080 0001             		move.b	#$80,1(a0)
00015A84 3028 0008                  		move.w	8(a0),d0
00015A88 9078 F700                  		sub.w	($FFFFF700).w,d0
00015A8C 0640 0080                  		addi.w	#$80,d0
00015A90 3140 0008                  		move.w	d0,8(a0)
00015A94 3028 000C                  		move.w	$C(a0),d0
00015A98 9078 F704                  		sub.w	($FFFFF704).w,d0
00015A9C 0640 0080                  		addi.w	#$80,d0
00015AA0 3140 000A                  		move.w	d0,$A(a0)
00015AA4 117C 000C 0024             		move.b	#$C,$24(a0)
00015AAA                            
00015AAA                            locret_13E1A:
00015AAA 4E75                       		rts	
00015AAC                            ; ===========================================================================
00015AAC                            Obj0A_WobbleData:
00015AAC 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015ABD 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015ACE 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015ADF 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015AEF FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015AFC FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015B09 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015B16 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015B23 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015B2C 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015B3D 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015B4E 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015B5F 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015B6F FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015B7C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015B89 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015B96 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015BA3 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015BAC                            ;===========================================================================
00015BAC                            
00015BAC                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015BAC 4A68 002C                  		tst.w	$2C(a0)
00015BB0 6600 0000                  		bne.w	loc_13F86
00015BB4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015BBA 6400 0000                  		bcc.w	locret_1408C
00015BBE 0838 0006 D022             		btst	#6,($FFFFD022).w
00015BC4 6700 0000                  		beq.w	locret_1408C
00015BC8 5368 0038                  		subq.w	#1,$38(a0)
00015BCC 6A00 0000                  		bpl.w	loc_13FAC
00015BD0 317C 003B 0038             		move.w	#59,$38(a0)
00015BD6 317C 0001 0036             		move.w	#1,$36(a0)
00015BDC 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015BE2 0240 0001                  		andi.w	#1,d0
00015BE6 1140 0034                  		move.b	d0,$34(a0)
00015BEA 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015BEE 0C40 0019                  		cmpi.w	#$19,d0
00015BF2 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015BF4 0C40 0014                  		cmpi.w	#$14,d0
00015BF8 6700                       		beq.s	Obj0A_WarnSound
00015BFA 0C40 000F                  		cmpi.w	#$F,d0
00015BFE 6700                       		beq.s	Obj0A_WarnSound
00015C00 0C40 000C                  		cmpi.w	#$C,d0
00015C04 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015C06 6600                       		bne.s	loc_13F02
00015C08 303C 0092                  		move.w	#$92,d0
00015C0C 4EB9 0000 11F0             		jsr	(PlaySound).l	; play countdown music
00015C12                            
00015C12                            loc_13F02:
00015C12 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00015C18 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00015C1E 5328 0032                  		subq.b	#1,$32(a0)
00015C22 6A00                       		bpl.s	Obj0A_ReduceAir
00015C24 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015C2A 08E8 0007 0036             		bset	#7,$36(a0)
00015C30 6000                       		bra.s	Obj0A_ReduceAir
00015C32                            ; ===========================================================================
00015C32                            
00015C32                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015C32 303C 00C2                  		move.w	#$C2,d0
00015C36 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00015C3C                            
00015C3C                            Obj0A_ReduceAir:
00015C3C 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015C40 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015C44 6100 0000                  		bsr.w	ResumeMusic
00015C48 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015C4E 303C 00B2                  		move.w	#$B2,d0
00015C52 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play drowning sound
00015C58 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
00015C5E 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00015C64 117C 000A 0034             		move.b	#$A,$34(a0)
00015C6A 317C 0001 0036             		move.w	#1,$36(a0)
00015C70 317C 0078 002C             		move.w	#$78,$2C(a0)
00015C76 2F08                       		move.l	a0,-(sp)
00015C78 41F8 D000                  		lea	($FFFFD000).w,a0
00015C7C 6100 F3A4                  		bsr.w	Sonic_ResetOnFloor
00015C80 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015C86 08E8 0001 0022             		bset	#1,$22(a0)
00015C8C 08E8 0007 0002             		bset	#7,2(a0)
00015C92 317C 0000 0012             		move.w	#0,$12(a0)
00015C98 317C 0000 0010             		move.w	#0,$10(a0)
00015C9E 317C 0000 0020             		move.w	#0,$20(a0)
00015CA4 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown		
00015CAA 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015CB0 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately		
00015CB6 205F                       		movea.l	(sp)+,a0
00015CB8 4E75                       		rts	
00015CBA                            ; ===========================================================================
00015CBA                            
00015CBA                            loc_13F86:
00015CBA 5368 002C                  		subq.w	#1,$2C(a0)
00015CBE 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
00015CC0 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
00015CC6 4E75                       		rts
00015CC8                            ; ===========================================================================
00015CC8                            
00015CC8                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015CC8 6000                       		bra.s	Obj0A_MakeItem
00015CCA                            ; ===========================================================================
00015CCA                            
00015CCA                            loc_13FAC:
00015CCA 4A68 0036                  		tst.w	$36(a0)
00015CCE 6700 0000                  		beq.w	locret_1408C
00015CD2 5368 003A                  		subq.w	#1,$3A(a0)
00015CD6 6A00 0000                  		bpl.w	locret_1408C
00015CDA                            
00015CDA                            Obj0A_MakeItem:
00015CDA 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015CE0 0240 000F                  		andi.w	#$F,d0
00015CE4 3140 003A                  		move.w	d0,$3A(a0)
00015CE8 4EBA 924A                  		jsr	SingleObjLoad
00015CEC 6600 0000                  		bne.w	locret_1408C
00015CF0 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015CF4 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015CFA 7006                       		moveq	#6,d0
00015CFC 0838 0000 D022             		btst	#0,($FFFFD022).w
00015D02 6700                       		beq.s	loc_13FF2
00015D04 4440                       		neg.w	d0
00015D06 137C 0040 0026             		move.b	#$40,$26(a1)
00015D0C                            
00015D0C                            loc_13FF2:
00015D0C D169 0008                  		add.w	d0,8(a1)
00015D10 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015D16 137C 0006 0028             		move.b	#6,$28(a1)
00015D1C 4A68 002C                  		tst.w	$2C(a0)
00015D20 6700 0000                  		beq.w	loc_1403E
00015D24 0268 0007 003A             		andi.w	#7,$3A(a0)
00015D2A 0668 0000 003A             		addi.w	#0,$3A(a0)
00015D30 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015D34 0440 000C                  		subi.w	#$C,d0
00015D38 3340 000C                  		move.w	d0,$C(a1)
00015D3C 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015D42 1340 0026                  		move.b	d0,$26(a1)
00015D46 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015D4A 0200 0003                  		andi.b	#3,d0
00015D4E 6600                       		bne.s	loc_14082
00015D50 137C 000E 0028             		move.b	#$E,$28(a1)
00015D56 6000                       		bra.s	loc_14082
00015D58                            ; ===========================================================================
00015D58                            
00015D58                            loc_1403E:
00015D58 0828 0007 0036             		btst	#7,$36(a0)
00015D5E 6700                       		beq.s	loc_14082
00015D60 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015D64 E24A                       		lsr.w	#1,d2
00015D66 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015D6C 0240 0003                  		andi.w	#3,d0
00015D70 6600                       		bne.s	loc_1406A
00015D72 08E8 0006 0036             		bset	#6,$36(a0)
00015D78 6600                       		bne.s	loc_14082
00015D7A 1342 0028                  		move.b	d2,$28(a1)
00015D7E 337C 001C 0038             		move.w	#$1C,$38(a1)
00015D84                            
00015D84                            loc_1406A:
00015D84 4A28 0034                  		tst.b	$34(a0)
00015D88 6600                       		bne.s	loc_14082
00015D8A 08E8 0006 0036             		bset	#6,$36(a0)
00015D90 6600                       		bne.s	loc_14082
00015D92 1342 0028                  		move.b	d2,$28(a1)
00015D96 337C 001C 0038             		move.w	#$1C,$38(a1)
00015D9C                            
00015D9C                            loc_14082:
00015D9C 5328 0034                  		subq.b	#1,$34(a0)
00015DA0 6A00                       		bpl.s	locret_1408C
00015DA2 4268 0036                  		clr.w	$36(a0)
00015DA6                            
00015DA6                            locret_1408C:
00015DA6 4E75                       		rts	
00015DA8                            
00015DA8                            ; ---------------------------------------------------------------------------
00015DA8                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015DA8                            ; ---------------------------------------------------------------------------
00015DA8                            
00015DA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DA8                            
00015DA8                            
00015DA8                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015DA8 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00015DAE 6200                       		bhi.s	loc_140AC
00015DB0 303C 0082                  		move.w	#$82,d0		; play LZ music
00015DB4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00015DBA 6600                       		bne.s	loc_140A6
00015DBC 303C 0086                  		move.w	#$86,d0		; play SBZ music
00015DC0                            
00015DC0                            loc_140A6:
00015DC0 4EB9 0000 11F0             		jsr	(PlaySound).l
00015DC6 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00015DCC 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00015DD2                            
00015DD2                            loc_140AC:
00015DD2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015DD8 4238 D372                  		clr.b	($FFFFD372).w
00015DDC 4E75                       		rts	
00015DDE                            ; End of function ResumeMusic
00015DDE                            
00015DDE                            ; ===========================================================================
00015DDE                            Ani_obj0A:
00015DDE                            	include "_anim\obj0A.asm"
00015DDE                            ; ---------------------------------------------------------------------------
00015DDE                            ; Animation script - countdown numbers and bubbles (LZ)
00015DDE                            ; ---------------------------------------------------------------------------
00015DDE 0000                       		dc.w byte_140D6-Ani_obj0A
00015DE0 0000                       		dc.w byte_140E0-Ani_obj0A
00015DE2 0000                       		dc.w byte_140EA-Ani_obj0A
00015DE4 0000                       		dc.w byte_140F4-Ani_obj0A
00015DE6 0000                       		dc.w byte_140FE-Ani_obj0A
00015DE8 0000                       		dc.w byte_14108-Ani_obj0A
00015DEA 0000                       		dc.w byte_14112-Ani_obj0A
00015DEC 0000                       		dc.w byte_14118-Ani_obj0A
00015DEE 0000                       		dc.w byte_14120-Ani_obj0A
00015DF0 0000                       		dc.w byte_14128-Ani_obj0A
00015DF2 0000                       		dc.w byte_14130-Ani_obj0A
00015DF4 0000                       		dc.w byte_14138-Ani_obj0A
00015DF6 0000                       		dc.w byte_14140-Ani_obj0A
00015DF8 0000                       		dc.w byte_14148-Ani_obj0A
00015DFA 0000                       		dc.w byte_1414A-Ani_obj0A
00015DFC 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015E06 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015E10 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00015E1A 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00015E24 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00015E2E 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00015E38 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015E3E 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00015E46 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015E4E 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00015E56 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015E5E 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00015E66 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015E6E 0EFC                       byte_14148:	dc.b $E, $FC
00015E70 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00015E76                            		even
00015E76                            		even
00015E76                            
00015E76                            ; ---------------------------------------------------------------------------
00015E76                            ; Sprite mappings - drowning countdown numbers (LZ)
00015E76                            ; ---------------------------------------------------------------------------
00015E76                            Map_obj0A:
00015E76                            	include "_maps\obj0A.asm"
00015E76                            ; ---------------------------------------------------------------------------
00015E76                            ; Sprite mappings - drowning countdown numbers (LZ)
00015E76                            ; ---------------------------------------------------------------------------
00015E76 0000                       		dc.w byte_14152-Map_obj0A
00015E78 01                         byte_14152:	dc.b 1
00015E79 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015E7E                            		even
00015E7E                            		even
00015E7E                            
00015E7E                            ; ===========================================================================
00015E7E                            ; ---------------------------------------------------------------------------
00015E7E                            ; Object 38 - shield
00015E7E                            ; ---------------------------------------------------------------------------
00015E7E                            
00015E7E                            Obj38: ; XREF: Obj_Index
00015E7E 223C 0000 0000             		move.l #UnC_Shield,d1 ; Call for Regular Shield Art
00015E84 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00015E88                            ; In this case, VRAM = $541*20
00015E88 363C 0200                  		move.w #$200,d3
00015E8C 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
00015E92                            ; ---------------------------------------------------------------------------
00015E92                            
00015E92                            ShieldObj_Main:
00015E92 7000                       		moveq #0,d0
00015E94 1028 0024                  		move.b $24(a0),d0
00015E98 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
00015E9C 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
00015EA0                            ; ===========================================================================
00015EA0                            Shield_Index:
00015EA0 0000                       		dc.w Shield_Init-Shield_Index
00015EA2 0000                       		dc.w ShieldChecks-Shield_Index
00015EA4                            ; ===========================================================================
00015EA4                            
00015EA4                            Shield_Init:
00015EA4 5428 0024                  		addq.b #2,$24(a0)
00015EA8 217C 0000 0000 0004        		move.l #Map_Obj38, $0004(A0) ; Load Shield Map into place
00015EB0 117C 0004 0001             		move.b #4,1(a0)
00015EB6 117C 0001 0018             		move.b #1,$18(a0)
00015EBC 117C 0018 0019             		move.b #$18,$19(a0)
00015EC2 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00015EC8 0838 0007 D002             		btst #7,($FFFFD002).w
00015ECE 6700                       		beq.s ShieldChecks
00015ED0 08E8 0007 0002             		bset #7,2(a0)
00015ED6                            ; ---------------------------------------------------------------------------
00015ED6                            
00015ED6                            ShieldChecks:
00015ED6 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00015EDA 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00015EDC 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00015EE0 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
00015EE2                            
00015EE2                            ShieldProperties:
00015EE2 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00015EE8 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00015EEE 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00015EF4 43F9 0000 0000             		lea (Ani_obj38).l, a1 ; Load Animation Scripts into a1
00015EFA 4EB9 0000 B83E             		jsr AnimateSprite
00015F00 4EFA 88DC                  		jmp DisplaySprite
00015F04                            
00015F04                            SonicHasShield:
00015F04 4E75                       		rts
00015F06                            
00015F06                            jmp_DeleteObj38: ; loc_12648:
00015F06 4EFA 8926                  		jmp DeleteObject 
00015F0A                            
00015F0A                            ; ---------------------------------------------------------------------------
00015F0A                            ; Object 4A - New Invincibility Object (ported from Sonic 2)
00015F0A                            ; ---------------------------------------------------------------------------
00015F0A                            
00015F0A                            Obj4A: ; XREF: Obj_Index
00015F0A 7000                       		moveq	#0,d0
00015F0C 1028 0000                  		move.b	InvStars_routine(a0),d0
00015F10 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
00015F14 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
00015F18                            ; ===========================================================================
00015F18                            
00015F18 0000                       InvStars_Index:	dc.w Obj4A_Init-InvStars_Index
00015F1A 0000                       		dc.w Obj4A_Main-InvStars_Index
00015F1C 0000                       		dc.w Obj4A_SubObject-InvStars_Index
00015F1E                            ; ===========================================================================
00015F1E                            
00015F1E                            off_1D992:
00015F1E 0000 0000                  		dc.l Ani_InvStars2 ; animation script
00015F22 000B                       		dc.w $B ; speed index,sub3 anim
00015F24 0000 0000                  		dc.l Ani_InvStars3
00015F28 160D                       		dc.w $160D
00015F2A 0000 0000                  		dc.l Ani_InvStars4
00015F2E 2C0D                       		dc.w $2C0D
00015F30                            ; ===========================================================================	
00015F30                            
00015F30 =0000000A                  InvStars_routine: equ $A ; the same as obRoutine in other objects
00015F30 =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
00015F30 =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
00015F30 =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
00015F30                            
00015F30                            
00015F30                            Obj4A_Init:
00015F30 223C 0000 0000             		move.l	#ArtUnc_InvStars,d1
00015F36 343C A820                  		move.w	#$A820,d2
00015F3A 363C 0200                  		move.w	#$200,d3
00015F3E 4EB9 0000 4A58             		jsr	(QueueDMATransfer).l
00015F44 7400                       		moveq	#0,d2
00015F46 45FA FFD0                  		lea	off_1D992-6(pc),a2
00015F4A 43D0                       		lea	(a0),a1
00015F4C 7203                       		moveq	#3,d1
00015F4E                            LoadStarsObject:	
00015F4E 1290                       		move.b	(a0),(a1) ; load obj35
00015F50 137C 0004 000A             		move.b	#4,InvStars_routine(a1)		; => @SubObject
00015F56 237C 0000 0000 0004        		move.l	#Map_InvStars,$4(a1)
00015F5E 337C 0541 0002             		move.w	#$541,$2(a1)
00015F64 137C 0044 0001             		move.b  #%001000100,1(a1)
00015F6A 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
00015F70 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)
00015F76 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
00015F7A 5242                       		addq.w	#1,d2
00015F7C 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
00015F80 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
00015F84 43E9 0040                  		lea	$40(a1),a1 ; a1=object
00015F88 51C9 FFC4                  		dbf	d1,LoadStarsObject
00015F8C                            
00015F8C 117C 0002 000A             		move.b	#2,InvStars_routine(a0)		; => @MainObject
00015F92 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
00015F98                            
00015F98                            Obj4A_Main:
00015F98 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
00015F9C 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
00015FA0 6700 888C                  		beq.w	DeleteObject
00015FA4 3029 0008                  		move.w	8(a1),d0
00015FA8 3140 0008                  		move.w	d0,8(a0)
00015FAC 3229 000C                  		move.w	$C(a1),d1
00015FB0 3141 000C                  		move.w	d1,$C(a0)
00015FB4 45E8 0010                  		lea	sub2_x_pos(a0),a2
00015FB8 47F9 0000 0000             		lea	Ani_InvStars1,a3
00015FBE 7A00                       		moveq	#0,d5
00015FC0                            
00015FC0                            Obj4A_GetFrame:
00015FC0 3428 0038                  		move.w	$38(a0),d2
00015FC4 1A33 2000                  		move.b	(a3,d2.w),d5
00015FC8 6A00                       		bpl.s	Obj4A_SetFrameandPos
00015FCA 4268 0038                  		clr.w	$38(a0)
00015FCE 60F0                       		bra.s	Obj4A_GetFrame
00015FD0                            ; ===========================================================================
00015FD0                            
00015FD0                            Obj4A_SetFrameandPos:
00015FD0 5268 0038                  		addq.w	#1,$38(a0)
00015FD4 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00015FDA 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00015FDE 4EB9 0000 0000             		jsr	Obj4A_Display2
00015FE4 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00015FE6 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00015FE8 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00015FEA 0646 0020                  		addi.w	#$20,d6
00015FEE 4EB9 0000 0000             		jsr	Obj4A_Display2
00015FF4 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00015FF6 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00015FF8 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00015FFA 7012                       		moveq	#$12,d0
00015FFC 0829 0000 0022             		btst	#0,$22(a1)
00016002 6700                       		beq.s	Obj4A_Display
00016004 4440                       		neg.w	d0
00016006                            
00016006                            Obj4A_Display:
00016006 D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
0001600A 303C 0080                  		move.w	#(1*$80),d0
0001600E 6000 880A                  		bra.w	DisplaySprite3
00016012                            ; ===========================================================================
00016012                            
00016012                            Obj4A_SubObject:
00016012 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
00016016 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
0001601A 6700 8812                  		beq.w	DeleteObject
0001601E 4BF8 F7A8                  		lea	($FFFFF7A8).w,a5
00016022 4DF8 CB00                  		lea	($FFFFCB00).w,a6
00016026                            	
00016026                            @getPosition_sub:
00016026 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
0001602A E509                       		lsl.b	#2,d1
0001602C 3401                       		move.w	d1,d2
0001602E D241                       		add.w	d1,d1
00016030 D242                       		add.w	d2,d1 
00016032 3015                       		move.w	(a5),d0
00016034 9001                       		sub.b	d1,d0
00016036 45F6 0000                  		lea	(a6,d0.w),a2
0001603A 301A                       		move.w	(a2)+,d0
0001603C 321A                       		move.w	(a2)+,d1
0001603E 3140 0008                  		move.w	d0,8(a0)
00016042 3141 000C                  		move.w	d1,$C(a0)
00016046 45E8 0010                  		lea	sub2_x_pos(a0),a2
0001604A 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
0001604E                            
0001604E                            Obj4A_GetSubFrame:
0001604E 3428 0038                  		move.w	$38(a0),d2
00016052 1A33 2000                  		move.b	(a3,d2.w),d5
00016056 6A00                       		bpl.s	Obj4A_SetSubFrameandPos
00016058 4268 0038                  		clr.w	$38(a0)
0001605C 60F0                       		bra.s	Obj4A_GetSubFrame
0001605E                            ; ===========================================================================
0001605E                            
0001605E                            Obj4A_SetSubFrameandPos:
0001605E 4845                       		swap	d5
00016060 D428 0035                  		add.b	$35(a0),d2
00016064 1A33 2000                  		move.b	(a3,d2.w),d5
00016068 5268 0038                  		addq.w	#1,$38(a0)
0001606C 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
00016070 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00016074 6100                       		bsr.s	Obj4A_Display2
00016076 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00016078 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
0001607A 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
0001607C 0646 0020                  		addi.w	#$20,d6
00016080 4845                       		swap	d5
00016082 6100                       		bsr.s	Obj4A_Display2
00016084 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00016086 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00016088 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
0001608A 7002                       		moveq	#2,d0
0001608C 0829 0000 0022             		btst	#0,$22(a1)
00016092 6700                       		beq.s	loc_1DB20
00016094 4440                       		neg.w	d0
00016096                            
00016096                            loc_1DB20:
00016096 D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
0001609A 303C 0080                  		move.w    #(1*$80),d0
0001609E 6000 877A                  		bra.w    DisplaySprite3
000160A2                            ; ===========================================================================
000160A2                            Obj4A_Display2:
000160A2 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
000160A6 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
000160AA 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
000160AE 4882                       		ext.w	d2
000160B0 4883                       		ext.w	d3
000160B2 D440                       		add.w	d0,d2 ; add object x position to x-move speed
000160B4 D641                       		add.w	d1,d3 ; add object y position to y-move speed
000160B6 4E75                       		rts
000160B8                            
000160B8                            InvStars_Speeds: ; x-move speed,	y-move speed	
000160B8 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F,   $10, $FC0F, $F90E, $F70D, $F40B, $F208, $F106, $F003
000160D8 F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, $F0FC, $F1F9, $F2F7, $F4F4, $F7F2, $F9F1, $FCF0, $FFF0,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
000160F8                            
000160F8                            ; ---------------------------------------------------------------------------
000160F8                            ; Animation script - invincibility stars
000160F8                            ; ---------------------------------------------------------------------------
000160F8                            
000160F8                            ; The animation script differs from the animate_sprite subroutine
000160F8                            ; Every positive byte - mapping
000160F8                            ; Every negative byte - loop flag 
000160F8                            
000160F8 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
00016106 00                         	even
00016106 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
00016111 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
0001611C 00                         	even
0001611C 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
00016129 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
00016136 00                         	even
00016136 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
00016143 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
00016150 00                         	even		
00016150                            
00016150                            
00016150                            Map_InvStars:
00016150                            	include "_maps\obj4A.asm"
00016150                            ; ================================================================================
00016150                            ; Sprite Mappings - generated by Flex 2 Wed Aug 11 2021 18:32:48 GMT+0100 (British Summer Time)
00016150                            ; ================================================================================
00016150                            
00016150                            DATAZEB5V6JRJ3H:
00016150 0000 0000                  	dc.w DATAZEB5V6JRJ3H_0-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_1-DATAZEB5V6JRJ3H
00016154 0000 0000                  	dc.w DATAZEB5V6JRJ3H_2-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_3-DATAZEB5V6JRJ3H
00016158 0000 0000                  	dc.w DATAZEB5V6JRJ3H_4-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_5-DATAZEB5V6JRJ3H
0001615C 0000 0000                  	dc.w DATAZEB5V6JRJ3H_6-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_7-DATAZEB5V6JRJ3H
00016160 0000                       	dc.w DATAZEB5V6JRJ3H_8-DATAZEB5V6JRJ3H
00016162 01                         DATAZEB5V6JRJ3H_0: dc.b $1
00016163 EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
00016168 01                         DATAZEB5V6JRJ3H_1: dc.b $1
00016169 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
0001616E 01                         DATAZEB5V6JRJ3H_2: dc.b $1
0001616F F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
00016174 01                         DATAZEB5V6JRJ3H_3: dc.b $1
00016175 F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
0001617A 01                         DATAZEB5V6JRJ3H_4: dc.b $1
0001617B F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
00016180 01                         DATAZEB5V6JRJ3H_5: dc.b $1
00016181 F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
00016186 01                         DATAZEB5V6JRJ3H_6: dc.b $1
00016187 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
0001618C 01                         DATAZEB5V6JRJ3H_7: dc.b $1
0001618D F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
00016192 01                         DATAZEB5V6JRJ3H_8: dc.b $1
00016193 F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
00016198                            	even
00016198                            	even
00016198                            ; ===========================================================================
00016198                            ; ---------------------------------------------------------------------------
00016198                            ; Object 08 - water splash (LZ)
00016198                            ; ---------------------------------------------------------------------------
00016198                            
00016198                            Obj08:					; XREF: Obj_Index
00016198 7000                       		moveq	#0,d0
0001619A 1028 0024                  		move.b	$24(a0),d0
0001619E 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000161A2 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000161A6                            ; ===========================================================================
000161A6 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000161A8 0000                       		dc.w Obj08_Display-Obj08_Index
000161AA 0000                       		dc.w Obj08_Delete-Obj08_Index
000161AC                            ; ===========================================================================
000161AC                            
000161AC                            Obj08_Main:				; XREF: Obj08_Index
000161AC 5428 0024                  		addq.b	#2,$24(a0)
000161B0 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000161B8 0028 0004 0001             		ori.b	#4,1(a0)
000161BE 117C 0001 0018             		move.b	#1,$18(a0)
000161C4 117C 0010 0019             		move.b	#$10,$19(a0)
000161CA 317C 4259 0002             		move.w	#$4259,2(a0)
000161D0 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
000161D6                            
000161D6                            Obj08_Display:				; XREF: Obj08_Index
000161D6 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
000161DC 43F9 0000 0000             		lea	(Ani_obj08).l,a1
000161E2 4EB9 0000 B83E             		jsr	AnimateSprite
000161E8 4EFA 85F4                  		jmp	DisplaySprite
000161EC                            ; ===========================================================================
000161EC                            
000161EC                            Obj08_Delete:				; XREF: Obj08_Index
000161EC 4EFA 8640                  		jmp	DeleteObject	; delete when animation	is complete
000161F0                            ; ===========================================================================
000161F0                            Ani_obj38:
000161F0                            	include "_anim\obj38.asm"
000161F0                            ; ---------------------------------------------------------------------------
000161F0                            ; Animation script - shield and invincibility stars
000161F0                            ; ---------------------------------------------------------------------------
000161F0 0000                       		dc.w byte_14356-Ani_obj38
000161F2 0000                       		dc.w byte_1435E-Ani_obj38
000161F4 0000                       		dc.w byte_14364-Ani_obj38
000161F6 0000                       		dc.w byte_1437E-Ani_obj38
000161F8 0000                       		dc.w byte_14398-Ani_obj38
000161FA 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00016202 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00016208 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00016219 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00016222 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00016233 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
0001623C 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001624D 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00016256                            		even
00016256                            		even
00016256                            
00016256                            ; ---------------------------------------------------------------------------
00016256                            ; Sprite mappings - shield and invincibility stars
00016256                            ; ---------------------------------------------------------------------------
00016256                            Map_obj38:
00016256                            	include "_maps\obj38.asm"
00016256                            ; ---------------------------------------------------------------------------
00016256                            ; Sprite mappings - shield and invincibility stars
00016256                            ; ---------------------------------------------------------------------------
00016256 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
0001625A 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
0001625E 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00016262 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00016266 04                         byte_143C2:	dc.b 4
00016267 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0001626C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00016271 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00016276 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
0001627B 04                         byte_143D7:	dc.b 4
0001627C E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00016281 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00016286 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
0001628B 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00016290 04                         byte_143EC:	dc.b 4
00016291 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00016296 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001629B 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000162A0 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000162A5 04                         byte_14401:	dc.b 4
000162A6 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000162AB E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000162B0 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000162B5 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000162BA 04                         byte_14416:	dc.b 4
000162BB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000162C0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000162C5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000162CA 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000162CF 04                         byte_1442B:	dc.b 4
000162D0 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000162D5 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000162DA 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000162DF 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000162E4 04                         byte_14440:	dc.b 4
000162E5 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000162EA E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000162EF 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000162F4 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000162FA 00                         		even
000162FA 00                         		even
000162FA                            
000162FA                            ; ---------------------------------------------------------------------------
000162FA                            ; Sprite mappings - special stage entry	from beta
000162FA                            ; ---------------------------------------------------------------------------
000162FA                            
000162FA                            Ani_obj08:
000162FA                            	include "_anim\obj08.asm"
000162FA                            ; ---------------------------------------------------------------------------
000162FA                            ; Animation script - water splash (LZ)
000162FA                            ; ---------------------------------------------------------------------------
000162FA 0000                       		dc.w byte_145C6-Ani_obj08
000162FC 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00016302                            		even
00016302                            		even
00016302                            
00016302                            ; ---------------------------------------------------------------------------
00016302                            ; Sprite mappings - water splash (LZ)
00016302                            ; ---------------------------------------------------------------------------
00016302                            Map_obj08:
00016302                            	include "_maps\obj08.asm"
00016302                            ; ---------------------------------------------------------------------------
00016302                            ; Sprite mappings - water splash (LZ)
00016302                            ; ---------------------------------------------------------------------------
00016302 0000                       		dc.w byte_145D2-Map_obj08
00016304 0000                       		dc.w byte_145DD-Map_obj08
00016306 0000                       		dc.w byte_145E8-Map_obj08
00016308 02                         byte_145D2:	dc.b 2
00016309 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001630E FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00016313 02                         byte_145DD:	dc.b 2
00016314 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00016319 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001631E 01                         byte_145E8:	dc.b 1
0001631F E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00016324                            		even
00016324                            		even
00016324                            
00016324                            ; ---------------------------------------------------------------------------
00016324                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00016324                            ; ---------------------------------------------------------------------------
00016324                            
00016324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016324                            
00016324                            
00016324                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00016324 0828 0003 0022             		btst	#3,$22(a0)
0001632A 6700                       		beq.s	loc_14602
0001632C 7000                       		moveq	#0,d0
0001632E 11C0 F768                  		move.b	d0,($FFFFF768).w
00016332 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016336 4E75                       		rts	
00016338                            ; ===========================================================================
00016338                            
00016338                            loc_14602:
00016338 7003                       		moveq	#3,d0
0001633A 11C0 F768                  		move.b	d0,($FFFFF768).w
0001633E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016342 1028 0026                  		move.b	$26(a0),d0
00016346 0600 0020                  		addi.b	#$20,d0
0001634A 6A00                       		bpl.s	loc_14624
0001634C 1028 0026                  		move.b	$26(a0),d0
00016350 6A00                       		bpl.s	loc_1461E
00016352 5300                       		subq.b	#1,d0
00016354                            
00016354                            loc_1461E:
00016354 0600 0020                  		addi.b	#$20,d0
00016358 6000                       		bra.s	loc_14630
0001635A                            ; ===========================================================================
0001635A                            
0001635A                            loc_14624:
0001635A 1028 0026                  		move.b	$26(a0),d0
0001635E 6A00                       		bpl.s	loc_1462C
00016360 5200                       		addq.b	#1,d0
00016362                            
00016362                            loc_1462C:
00016362 0600 001F                  		addi.b	#$1F,d0
00016366                            
00016366                            loc_14630:
00016366 0200 00C0                  		andi.b	#$C0,d0
0001636A 0C00 0040                  		cmpi.b	#$40,d0
0001636E 6700 0000                  		beq.w	Sonic_WalkVertL
00016372 0C00 0080                  		cmpi.b	#$80,d0
00016376 6700 0000                  		beq.w	Sonic_WalkCeiling
0001637A 0C00 00C0                  		cmpi.b	#$C0,d0
0001637E 6700 0000                  		beq.w	Sonic_WalkVertR
00016382 3428 000C                  		move.w	$C(a0),d2
00016386 3628 0008                  		move.w	8(a0),d3
0001638A 7000                       		moveq	#0,d0
0001638C 1028 0016                  		move.b	$16(a0),d0
00016390 4880                       		ext.w	d0
00016392 D440                       		add.w	d0,d2
00016394 1028 0017                  		move.b	$17(a0),d0
00016398 4880                       		ext.w	d0
0001639A D640                       		add.w	d0,d3
0001639C 49F8 F768                  		lea	($FFFFF768).w,a4
000163A0 367C 0010                  		movea.w	#$10,a3
000163A4 3C3C 0000                  		move.w	#0,d6
000163A8 7A0D                       		moveq	#$D,d5
000163AA 6100 0000                  		bsr.w	FindFloor
000163AE 3F01                       		move.w	d1,-(sp)
000163B0 3428 000C                  		move.w	$C(a0),d2
000163B4 3628 0008                  		move.w	8(a0),d3
000163B8 7000                       		moveq	#0,d0
000163BA 1028 0016                  		move.b	$16(a0),d0
000163BE 4880                       		ext.w	d0
000163C0 D440                       		add.w	d0,d2
000163C2 1028 0017                  		move.b	$17(a0),d0
000163C6 4880                       		ext.w	d0
000163C8 4440                       		neg.w	d0
000163CA D640                       		add.w	d0,d3
000163CC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000163D0 367C 0010                  		movea.w	#$10,a3
000163D4 3C3C 0000                  		move.w	#0,d6
000163D8 7A0D                       		moveq	#$D,d5
000163DA 6100 0000                  		bsr.w	FindFloor
000163DE 301F                       		move.w	(sp)+,d0
000163E0 6100 0000                  		bsr.w	Sonic_Angle
000163E4 4A41                       		tst.w	d1
000163E6 6700                       		beq.s	locret_146BE
000163E8 6A00                       		bpl.s	loc_146C0
000163EA 0C41 FFF2                  		cmpi.w	#-$E,d1
000163EE 6D00                       		blt.s	locret_146E6
000163F0 D368 000C                  		add.w	d1,$C(a0)
000163F4                            
000163F4                            locret_146BE:
000163F4 4E75                       		rts	
000163F6                            ; ===========================================================================
000163F6                            
000163F6                            loc_146C0:
000163F6 0C41 000E                  		cmpi.w	#$E,d1
000163FA 6E00                       		bgt.s	loc_146CC
000163FC                            
000163FC                            loc_146C6:
000163FC D368 000C                  		add.w	d1,$C(a0)
00016400 4E75                       		rts	
00016402                            ; ===========================================================================
00016402                            
00016402                            loc_146CC:
00016402 4A28 0038                  		tst.b	$38(a0)
00016406 66F4                       		bne.s	loc_146C6
00016408 08E8 0001 0022             		bset	#1,$22(a0)
0001640E 08A8 0005 0022             		bclr	#5,$22(a0)
00016414 117C 0001 001D             		move.b	#1,$1D(a0)
0001641A 4E75                       		rts	
0001641C                            ; ===========================================================================
0001641C                            
0001641C                            locret_146E6:
0001641C 4E75                       		rts	
0001641E                            ; End of function Sonic_AnglePos
0001641E                            
0001641E                            ; ===========================================================================
0001641E 2428 0008                  		move.l	8(a0),d2
00016422 3028 0010                  		move.w	$10(a0),d0
00016426 48C0                       		ext.l	d0
00016428 E180                       		asl.l	#8,d0
0001642A 9480                       		sub.l	d0,d2
0001642C 2142 0008                  		move.l	d2,8(a0)
00016430 303C 0038                  		move.w	#$38,d0
00016434 48C0                       		ext.l	d0
00016436 E180                       		asl.l	#8,d0
00016438 9680                       		sub.l	d0,d3
0001643A 2143 000C                  		move.l	d3,$C(a0)
0001643E 4E75                       		rts	
00016440                            ; ===========================================================================
00016440                            
00016440                            locret_1470A:
00016440 4E75                       		rts	
00016442                            ; ===========================================================================
00016442 2628 000C                  		move.l	$C(a0),d3
00016446 3028 0012                  		move.w	$12(a0),d0
0001644A 0440 0038                  		subi.w	#$38,d0
0001644E 3140 0012                  		move.w	d0,$12(a0)
00016452 48C0                       		ext.l	d0
00016454 E180                       		asl.l	#8,d0
00016456 9680                       		sub.l	d0,d3
00016458 2143 000C                  		move.l	d3,$C(a0)
0001645C 4E75                       		rts	
0001645E 4E75                       		rts	
00016460                            ; ===========================================================================
00016460 2428 0008                  		move.l	8(a0),d2
00016464 2628 000C                  		move.l	$C(a0),d3
00016468 3028 0010                  		move.w	$10(a0),d0
0001646C 48C0                       		ext.l	d0
0001646E E180                       		asl.l	#8,d0
00016470 9480                       		sub.l	d0,d2
00016472 3028 0012                  		move.w	$12(a0),d0
00016476 48C0                       		ext.l	d0
00016478 E180                       		asl.l	#8,d0
0001647A 9680                       		sub.l	d0,d3
0001647C 2142 0008                  		move.l	d2,8(a0)
00016480 2143 000C                  		move.l	d3,$C(a0)
00016484 4E75                       		rts	
00016486                            
00016486                            ; ---------------------------------------------------------------------------
00016486                            ; Subroutine to	change Sonic's angle as he walks along the floor
00016486                            ; ---------------------------------------------------------------------------
00016486                            
00016486                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016486                            
00016486                            
00016486                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00016486 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001648A B240                       		cmp.w	d0,d1
0001648C 6F00                       		ble.s	loc_1475E
0001648E 1438 F768                  		move.b	($FFFFF768).w,d2
00016492 3200                       		move.w	d0,d1
00016494                            
00016494                            loc_1475E:
00016494 0802 0000                  		btst	#0,d2
00016498 6600                       		bne.s	loc_1476A
0001649A 1142 0026                  		move.b	d2,$26(a0)
0001649E 4E75                       		rts	
000164A0                            ; ===========================================================================
000164A0                            
000164A0                            loc_1476A:
000164A0 1428 0026                  		move.b	$26(a0),d2
000164A4 0602 0020                  		addi.b	#$20,d2
000164A8 0202 00C0                  		andi.b	#$C0,d2
000164AC 1142 0026                  		move.b	d2,$26(a0)
000164B0 4E75                       		rts	
000164B2                            ; End of function Sonic_Angle
000164B2                            
000164B2                            ; ---------------------------------------------------------------------------
000164B2                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000164B2                            ; ---------------------------------------------------------------------------
000164B2                            
000164B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164B2                            
000164B2                            
000164B2                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000164B2 3428 000C                  		move.w	$C(a0),d2
000164B6 3628 0008                  		move.w	8(a0),d3
000164BA 7000                       		moveq	#0,d0
000164BC 1028 0017                  		move.b	$17(a0),d0
000164C0 4880                       		ext.w	d0
000164C2 4440                       		neg.w	d0
000164C4 D440                       		add.w	d0,d2
000164C6 1028 0016                  		move.b	$16(a0),d0
000164CA 4880                       		ext.w	d0
000164CC D640                       		add.w	d0,d3
000164CE 49F8 F768                  		lea	($FFFFF768).w,a4
000164D2 367C 0010                  		movea.w	#$10,a3
000164D6 3C3C 0000                  		move.w	#0,d6
000164DA 7A0D                       		moveq	#$D,d5
000164DC 6100 0000                  		bsr.w	FindWall
000164E0 3F01                       		move.w	d1,-(sp)
000164E2 3428 000C                  		move.w	$C(a0),d2
000164E6 3628 0008                  		move.w	8(a0),d3
000164EA 7000                       		moveq	#0,d0
000164EC 1028 0017                  		move.b	$17(a0),d0
000164F0 4880                       		ext.w	d0
000164F2 D440                       		add.w	d0,d2
000164F4 1028 0016                  		move.b	$16(a0),d0
000164F8 4880                       		ext.w	d0
000164FA D640                       		add.w	d0,d3
000164FC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016500 367C 0010                  		movea.w	#$10,a3
00016504 3C3C 0000                  		move.w	#0,d6
00016508 7A0D                       		moveq	#$D,d5
0001650A 6100 0000                  		bsr.w	FindWall
0001650E 301F                       		move.w	(sp)+,d0
00016510 6100 FF74                  		bsr.w	Sonic_Angle
00016514 4A41                       		tst.w	d1
00016516 6700                       		beq.s	locret_147F0
00016518 6A00                       		bpl.s	loc_147F2
0001651A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001651E 6D00 FF20                  		blt.w	locret_1470A
00016522 D368 0008                  		add.w	d1,8(a0)
00016526                            
00016526                            locret_147F0:
00016526 4E75                       		rts	
00016528                            ; ===========================================================================
00016528                            
00016528                            loc_147F2:
00016528 0C41 000E                  		cmpi.w	#$E,d1
0001652C 6E00                       		bgt.s	loc_147FE
0001652E                            
0001652E                            loc_147F8:
0001652E D368 0008                  		add.w	d1,8(a0)
00016532 4E75                       		rts	
00016534                            ; ===========================================================================
00016534                            
00016534                            loc_147FE:
00016534 4A28 0038                  		tst.b	$38(a0)
00016538 66F4                       		bne.s	loc_147F8
0001653A 08E8 0001 0022             		bset	#1,$22(a0)
00016540 08A8 0005 0022             		bclr	#5,$22(a0)
00016546 117C 0001 001D             		move.b	#1,$1D(a0)
0001654C 4E75                       		rts	
0001654E                            ; End of function Sonic_WalkVertR
0001654E                            
0001654E                            ; ---------------------------------------------------------------------------
0001654E                            ; Subroutine allowing Sonic to walk upside-down
0001654E                            ; ---------------------------------------------------------------------------
0001654E                            
0001654E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001654E                            
0001654E                            
0001654E                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001654E 3428 000C                  		move.w	$C(a0),d2
00016552 3628 0008                  		move.w	8(a0),d3
00016556 7000                       		moveq	#0,d0
00016558 1028 0016                  		move.b	$16(a0),d0
0001655C 4880                       		ext.w	d0
0001655E 9440                       		sub.w	d0,d2
00016560 0A42 000F                  		eori.w	#$F,d2
00016564 1028 0017                  		move.b	$17(a0),d0
00016568 4880                       		ext.w	d0
0001656A D640                       		add.w	d0,d3
0001656C 49F8 F768                  		lea	($FFFFF768).w,a4
00016570 367C FFF0                  		movea.w	#-$10,a3
00016574 3C3C 1000                  		move.w	#$1000,d6
00016578 7A0D                       		moveq	#$D,d5
0001657A 6100 0000                  		bsr.w	FindFloor
0001657E 3F01                       		move.w	d1,-(sp)
00016580 3428 000C                  		move.w	$C(a0),d2
00016584 3628 0008                  		move.w	8(a0),d3
00016588 7000                       		moveq	#0,d0
0001658A 1028 0016                  		move.b	$16(a0),d0
0001658E 4880                       		ext.w	d0
00016590 9440                       		sub.w	d0,d2
00016592 0A42 000F                  		eori.w	#$F,d2
00016596 1028 0017                  		move.b	$17(a0),d0
0001659A 4880                       		ext.w	d0
0001659C 9640                       		sub.w	d0,d3
0001659E 49F8 F76A                  		lea	($FFFFF76A).w,a4
000165A2 367C FFF0                  		movea.w	#-$10,a3
000165A6 3C3C 1000                  		move.w	#$1000,d6
000165AA 7A0D                       		moveq	#$D,d5
000165AC 6100 0000                  		bsr.w	FindFloor
000165B0 301F                       		move.w	(sp)+,d0
000165B2 6100 FED2                  		bsr.w	Sonic_Angle
000165B6 4A41                       		tst.w	d1
000165B8 6700                       		beq.s	locret_14892
000165BA 6A00                       		bpl.s	loc_14894
000165BC 0C41 FFF2                  		cmpi.w	#-$E,d1
000165C0 6D00 FE5A                  		blt.w	locret_146E6
000165C4 9368 000C                  		sub.w	d1,$C(a0)
000165C8                            
000165C8                            locret_14892:
000165C8 4E75                       		rts	
000165CA                            ; ===========================================================================
000165CA                            
000165CA                            loc_14894:
000165CA 0C41 000E                  		cmpi.w	#$E,d1
000165CE 6E00                       		bgt.s	loc_148A0
000165D0                            
000165D0                            loc_1489A:
000165D0 9368 000C                  		sub.w	d1,$C(a0)
000165D4 4E75                       		rts	
000165D6                            ; ===========================================================================
000165D6                            
000165D6                            loc_148A0:
000165D6 4A28 0038                  		tst.b	$38(a0)
000165DA 66F4                       		bne.s	loc_1489A
000165DC 08E8 0001 0022             		bset	#1,$22(a0)
000165E2 08A8 0005 0022             		bclr	#5,$22(a0)
000165E8 117C 0001 001D             		move.b	#1,$1D(a0)
000165EE 4E75                       		rts	
000165F0                            ; End of function Sonic_WalkCeiling
000165F0                            
000165F0                            ; ---------------------------------------------------------------------------
000165F0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000165F0                            ; ---------------------------------------------------------------------------
000165F0                            
000165F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165F0                            
000165F0                            
000165F0                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000165F0 3428 000C                  		move.w	$C(a0),d2
000165F4 3628 0008                  		move.w	8(a0),d3
000165F8 7000                       		moveq	#0,d0
000165FA 1028 0017                  		move.b	$17(a0),d0
000165FE 4880                       		ext.w	d0
00016600 9440                       		sub.w	d0,d2
00016602 1028 0016                  		move.b	$16(a0),d0
00016606 4880                       		ext.w	d0
00016608 9640                       		sub.w	d0,d3
0001660A 0A43 000F                  		eori.w	#$F,d3
0001660E 49F8 F768                  		lea	($FFFFF768).w,a4
00016612 367C FFF0                  		movea.w	#-$10,a3
00016616 3C3C 0800                  		move.w	#$800,d6
0001661A 7A0D                       		moveq	#$D,d5
0001661C 6100 0000                  		bsr.w	FindWall
00016620 3F01                       		move.w	d1,-(sp)
00016622 3428 000C                  		move.w	$C(a0),d2
00016626 3628 0008                  		move.w	8(a0),d3
0001662A 7000                       		moveq	#0,d0
0001662C 1028 0017                  		move.b	$17(a0),d0
00016630 4880                       		ext.w	d0
00016632 D440                       		add.w	d0,d2
00016634 1028 0016                  		move.b	$16(a0),d0
00016638 4880                       		ext.w	d0
0001663A 9640                       		sub.w	d0,d3
0001663C 0A43 000F                  		eori.w	#$F,d3
00016640 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016644 367C FFF0                  		movea.w	#-$10,a3
00016648 3C3C 0800                  		move.w	#$800,d6
0001664C 7A0D                       		moveq	#$D,d5
0001664E 6100 0000                  		bsr.w	FindWall
00016652 301F                       		move.w	(sp)+,d0
00016654 6100 FE30                  		bsr.w	Sonic_Angle
00016658 4A41                       		tst.w	d1
0001665A 6700                       		beq.s	locret_14934
0001665C 6A00                       		bpl.s	loc_14936
0001665E 0C41 FFF2                  		cmpi.w	#-$E,d1
00016662 6D00 FDDC                  		blt.w	locret_1470A
00016666 9368 0008                  		sub.w	d1,8(a0)
0001666A                            
0001666A                            locret_14934:
0001666A 4E75                       		rts	
0001666C                            ; ===========================================================================
0001666C                            
0001666C                            loc_14936:
0001666C 0C41 000E                  		cmpi.w	#$E,d1
00016670 6E00                       		bgt.s	loc_14942
00016672                            
00016672                            loc_1493C:
00016672 9368 0008                  		sub.w	d1,8(a0)
00016676 4E75                       		rts	
00016678                            ; ===========================================================================
00016678                            
00016678                            loc_14942:
00016678 4A28 0038                  		tst.b	$38(a0)
0001667C 66F4                       		bne.s	loc_1493C
0001667E 08E8 0001 0022             		bset	#1,$22(a0)
00016684 08A8 0005 0022             		bclr	#5,$22(a0)
0001668A 117C 0001 001D             		move.b	#1,$1D(a0)
00016690 4E75                       		rts	
00016692                            ; End of function Sonic_WalkVertL
00016692                            
00016692                            ; ---------------------------------------------------------------------------
00016692                            ; Subroutine to	find which tile	the object is standing on
00016692                            ; ---------------------------------------------------------------------------
00016692                            
00016692                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016692                            
00016692                            
00016692                            Floor_ChkTile_LocateBlock:
00016692 43F8 A400                  		lea	($FFFFA400).w,a1
00016696 1231 0000                  		move.b	(a1,d0.w),d1
0001669A 6700                       		beq.s	Floor_ChkTile_EmptyChunk	; if the chunk ID is 0 (empty chunk), branch
0001669C 6B00                       		bmi.s	loc_1499A
0001669E 5301                       		subq.b	#1,d1		; the empty chunk is not included in the chunk mappings, subtract 1 to read the correct data
000166A0 4881                       		ext.w	d1
000166A2 EE59                       		ror.w	#7,d1
000166A4 3002                       		move.w	d2,d0
000166A6 D040                       		add.w	d0,d0
000166A8 0240 01E0                  		andi.w	#$1E0,d0
000166AC D240                       		add.w	d0,d1
000166AE 3003                       		move.w	d3,d0
000166B0 E648                       		lsr.w	#3,d0
000166B2 0240 001E                  		andi.w	#$1E,d0
000166B6 D240                       		add.w	d0,d1
000166B8 4E75                       		rts	
000166BA                            ; ---------------------------------------------------------------------------
000166BA                            
000166BA                            loc_1499A:
000166BA 0241 007F                  		andi.w	#$7F,d1
000166BE 0828 0006 0001             		btst	#6,1(a0)
000166C4 6700                       		beq.s	loc_149B2
000166C6 5241                       		addq.w	#1,d1
000166C8 0C41 0029                  		cmpi.w	#$29,d1
000166CC 6600                       		bne.s	loc_149B2
000166CE 323C 0051                  		move.w	#$51,d1
000166D2                            
000166D2                            loc_149B2:
000166D2 5301                       		subq.b	#1,d1
000166D4 EE59                       		ror.w	#7,d1
000166D6 3002                       		move.w	d2,d0
000166D8 D040                       		add.w	d0,d0
000166DA 0240 01E0                  		andi.w	#$1E0,d0
000166DE D240                       		add.w	d0,d1
000166E0 3003                       		move.w	d3,d0
000166E2 E648                       		lsr.w	#3,d0
000166E4 0240 001E                  		andi.w	#$1E,d0
000166E8 D240                       		add.w	d0,d1
000166EA 4E75                       		rts	
000166EC                            ; ---------------------------------------------------------------------------
000166EC                            
000166EC                            Floor_ChkTile_EmptyChunk:
000166EC 43F8 FF00                  		lea	($FFFFFF00).w,a1	; override a1
000166F0 584F                       		addq.w	#4,sp			; pop a stack frame to avoid adding the address of the chunk mappings to a1
000166F2 4E75                       		rts	
000166F4                            
000166F4                            ; ---------------------------------------------------------------------------
000166F4                            ; Subroutine to	find which tile	the object is standing on
000166F4                            ; ---------------------------------------------------------------------------
000166F4                            
000166F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166F4                            
000166F4                            
000166F4                            Floor_ChkTile:				; XREF: FindFloor; et al
000166F4 3002                       		move.w	d2,d0
000166F6 E248                       		lsr.w	#1,d0
000166F8 0240 0380                  		andi.w	#$380,d0
000166FC 3203                       		move.w	d3,d1
000166FE E049                       		lsr.w	#8,d1
00016700 0241 007F                  		andi.w	#$7F,d1
00016704 D041                       		add.w	d1,d0
00016706 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
0001670A 6700                       		beq.s	@ghz		; if yes, branch		
0001670C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
00016712 6700                       		beq.s	@lz		
00016714 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
0001671A 6700                       		beq.s	@mz		
0001671C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
00016722 6700                       		beq.s	@slz		
00016724 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
0001672A 6700                       		beq.s	@syz		
0001672C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
00016732 6700                       		beq.s	@sbz				
00016734 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
0001673A 6700                       		beq.s	@ghz		; if yes, branch
0001673C 72FF                       		moveq	#-1,d1
0001673E 6100 FF52                  		bsr.w	Floor_ChkTile_LocateBlock
00016742 2241                       		movea.l	d1,a1
00016744 4E75                       		rts	
00016746                            ; ---------------------------------------------------------------------------
00016746                            
00016746                            @ghz:
00016746 7200                       		moveq	#0,d1
00016748 6100 FF48                  		bsr.w	Floor_ChkTile_LocateBlock
0001674C 0681 0000 0000             		add.l	#Blk256_GHZ,d1
00016752 2241                       		movea.l	d1,a1
00016754 4E75                       		rts	
00016756                            
00016756                            @lz:
00016756 7200                       		moveq	#0,d1
00016758 6100 FF38                  		bsr.w	Floor_ChkTile_LocateBlock
0001675C 0681 0000 0000             		add.l	#Blk256_LZ,d1
00016762 2241                       		movea.l	d1,a1
00016764 4E75                       		rts	
00016766                            
00016766                            @mz:
00016766 7200                       		moveq	#0,d1
00016768 6100 FF28                  		bsr.w	Floor_ChkTile_LocateBlock
0001676C 0681 0000 0000             		add.l	#Blk256_MZ,d1
00016772 2241                       		movea.l	d1,a1
00016774 4E75                       		rts	
00016776                            
00016776                            @slz:
00016776 7200                       		moveq	#0,d1
00016778 6100 FF18                  		bsr.w	Floor_ChkTile_LocateBlock
0001677C 0681 0000 0000             		add.l	#Blk256_SLZ,d1
00016782 2241                       		movea.l	d1,a1
00016784 4E75                       		rts	
00016786                            
00016786                            @syz:
00016786 7200                       		moveq	#0,d1
00016788 6100 FF08                  		bsr.w	Floor_ChkTile_LocateBlock
0001678C 0681 0000 0000             		add.l	#Blk256_SYZ,d1
00016792 2241                       		movea.l	d1,a1
00016794 4E75                       		rts	
00016796                            
00016796                            @sbz:
00016796 7200                       		moveq	#0,d1
00016798 6100 FEF8                  		bsr.w	Floor_ChkTile_LocateBlock
0001679C 0681 0000 0000             		add.l	#Blk256_SBZ,d1
000167A2 2241                       		movea.l	d1,a1
000167A4 4E75                       		rts			
000167A6                            ; End of function Floor_ChkTile
000167A6                            
000167A6                            
000167A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167A6                            
000167A6                            
000167A6                            FindFloor:				; XREF: Sonic_AnglePos; et al
000167A6 6100 FF4C                  		bsr.w	Floor_ChkTile
000167AA 3011                       		move.w	(a1),d0
000167AC 3800                       		move.w	d0,d4
000167AE 0240 07FF                  		andi.w	#$7FF,d0
000167B2 6700                       		beq.s	loc_149DE
000167B4 0B04                       		btst	d5,d4
000167B6 6600                       		bne.s	loc_149EC
000167B8                            
000167B8                            loc_149DE:
000167B8 D44B                       		add.w	a3,d2
000167BA 6100 0000                  		bsr.w	FindFloor2
000167BE 944B                       		sub.w	a3,d2
000167C0 0641 0010                  		addi.w	#$10,d1
000167C4 4E75                       		rts	
000167C6                            ; ===========================================================================
000167C6                            
000167C6                            loc_149EC:
000167C6 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000167CA 1032 0000                  		move.b	(a2,d0.w),d0
000167CE 0240 00FF                  		andi.w	#$FF,d0
000167D2 67E4                       		beq.s	loc_149DE
000167D4 45F9 0000 0000             		lea	(AngleMap).l,a2
000167DA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000167DE E948                       		lsl.w	#4,d0
000167E0 3203                       		move.w	d3,d1
000167E2 0804 000B                  		btst	#$B,d4
000167E6 6700                       		beq.s	loc_14A12
000167E8 4641                       		not.w	d1
000167EA 4414                       		neg.b	(a4)
000167EC                            
000167EC                            loc_14A12:
000167EC 0804 000C                  		btst	#$C,d4
000167F0 6700                       		beq.s	loc_14A22
000167F2 0614 0040                  		addi.b	#$40,(a4)
000167F6 4414                       		neg.b	(a4)
000167F8 0414 0040                  		subi.b	#$40,(a4)
000167FC                            
000167FC                            loc_14A22:
000167FC 0241 000F                  		andi.w	#$F,d1
00016800 D240                       		add.w	d0,d1
00016802 45F9 0000 0000             		lea	(CollArray1).l,a2
00016808 1032 1000                  		move.b	(a2,d1.w),d0
0001680C 4880                       		ext.w	d0
0001680E BD44                       		eor.w	d6,d4
00016810 0804 000C                  		btst	#$C,d4
00016814 6700                       		beq.s	loc_14A3E
00016816 4440                       		neg.w	d0
00016818                            
00016818                            loc_14A3E:
00016818 4A40                       		tst.w	d0
0001681A 679C                       		beq.s	loc_149DE
0001681C 6B00                       		bmi.s	loc_14A5A
0001681E 0C00 0010                  		cmpi.b	#$10,d0
00016822 6700                       		beq.s	loc_14A66
00016824 3202                       		move.w	d2,d1
00016826 0241 000F                  		andi.w	#$F,d1
0001682A D041                       		add.w	d1,d0
0001682C 323C 000F                  		move.w	#$F,d1
00016830 9240                       		sub.w	d0,d1
00016832 4E75                       		rts	
00016834                            ; ===========================================================================
00016834                            
00016834                            loc_14A5A:
00016834 3202                       		move.w	d2,d1
00016836 0241 000F                  		andi.w	#$F,d1
0001683A D041                       		add.w	d1,d0
0001683C 6A00 FF7A                  		bpl.w	loc_149DE
00016840                            
00016840                            loc_14A66:
00016840 944B                       		sub.w	a3,d2
00016842 6100 0000                  		bsr.w	FindFloor2
00016846 D44B                       		add.w	a3,d2
00016848 0441 0010                  		subi.w	#$10,d1
0001684C 4E75                       		rts	
0001684E                            ; End of function FindFloor
0001684E                            
0001684E                            
0001684E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001684E                            
0001684E                            
0001684E                            FindFloor2:				; XREF: FindFloor
0001684E 6100 FEA4                  		bsr.w	Floor_ChkTile
00016852 3011                       		move.w	(a1),d0
00016854 3800                       		move.w	d0,d4
00016856 0240 07FF                  		andi.w	#$7FF,d0
0001685A 6700                       		beq.s	loc_14A86
0001685C 0B04                       		btst	d5,d4
0001685E 6600                       		bne.s	loc_14A94
00016860                            
00016860                            loc_14A86:
00016860 323C 000F                  		move.w	#$F,d1
00016864 3002                       		move.w	d2,d0
00016866 0240 000F                  		andi.w	#$F,d0
0001686A 9240                       		sub.w	d0,d1
0001686C 4E75                       		rts	
0001686E                            ; ===========================================================================
0001686E                            
0001686E                            loc_14A94:
0001686E 2478 F796                  		movea.l	($FFFFF796).w,a2
00016872 1032 0000                  		move.b	(a2,d0.w),d0
00016876 0240 00FF                  		andi.w	#$FF,d0
0001687A 67E4                       		beq.s	loc_14A86
0001687C 45F9 0000 0000             		lea	(AngleMap).l,a2
00016882 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016886 E948                       		lsl.w	#4,d0
00016888 3203                       		move.w	d3,d1
0001688A 0804 000B                  		btst	#$B,d4
0001688E 6700                       		beq.s	loc_14ABA
00016890 4641                       		not.w	d1
00016892 4414                       		neg.b	(a4)
00016894                            
00016894                            loc_14ABA:
00016894 0804 000C                  		btst	#$C,d4
00016898 6700                       		beq.s	loc_14ACA
0001689A 0614 0040                  		addi.b	#$40,(a4)
0001689E 4414                       		neg.b	(a4)
000168A0 0414 0040                  		subi.b	#$40,(a4)
000168A4                            
000168A4                            loc_14ACA:
000168A4 0241 000F                  		andi.w	#$F,d1
000168A8 D240                       		add.w	d0,d1
000168AA 45F9 0000 0000             		lea	(CollArray1).l,a2
000168B0 1032 1000                  		move.b	(a2,d1.w),d0
000168B4 4880                       		ext.w	d0
000168B6 BD44                       		eor.w	d6,d4
000168B8 0804 000C                  		btst	#$C,d4
000168BC 6700                       		beq.s	loc_14AE6
000168BE 4440                       		neg.w	d0
000168C0                            
000168C0                            loc_14AE6:
000168C0 4A40                       		tst.w	d0
000168C2 679C                       		beq.s	loc_14A86
000168C4 6B00                       		bmi.s	loc_14AFC
000168C6 3202                       		move.w	d2,d1
000168C8 0241 000F                  		andi.w	#$F,d1
000168CC D041                       		add.w	d1,d0
000168CE 323C 000F                  		move.w	#$F,d1
000168D2 9240                       		sub.w	d0,d1
000168D4 4E75                       		rts	
000168D6                            ; ===========================================================================
000168D6                            
000168D6                            loc_14AFC:
000168D6 3202                       		move.w	d2,d1
000168D8 0241 000F                  		andi.w	#$F,d1
000168DC D041                       		add.w	d1,d0
000168DE 6A00 FF80                  		bpl.w	loc_14A86
000168E2 4641                       		not.w	d1
000168E4 4E75                       		rts	
000168E6                            ; End of function FindFloor2
000168E6                            
000168E6                            
000168E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168E6                            
000168E6                            
000168E6                            FindWall:				; XREF: Sonic_WalkVertR; et al
000168E6 6100 FE0C                  		bsr.w	Floor_ChkTile
000168EA 3011                       		move.w	(a1),d0
000168EC 3800                       		move.w	d0,d4
000168EE 0240 07FF                  		andi.w	#$7FF,d0
000168F2 6700                       		beq.s	loc_14B1E
000168F4 0B04                       		btst	d5,d4
000168F6 6600                       		bne.s	loc_14B2C
000168F8                            
000168F8                            loc_14B1E:
000168F8 D64B                       		add.w	a3,d3
000168FA 6100 0000                  		bsr.w	FindWall2
000168FE 964B                       		sub.w	a3,d3
00016900 0641 0010                  		addi.w	#$10,d1
00016904 4E75                       		rts	
00016906                            ; ===========================================================================
00016906                            
00016906                            loc_14B2C:
00016906 2478 F796                  		movea.l	($FFFFF796).w,a2
0001690A 1032 0000                  		move.b	(a2,d0.w),d0
0001690E 0240 00FF                  		andi.w	#$FF,d0
00016912 67E4                       		beq.s	loc_14B1E
00016914 45F9 0000 0000             		lea	(AngleMap).l,a2
0001691A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001691E E948                       		lsl.w	#4,d0
00016920 3202                       		move.w	d2,d1
00016922 0804 000C                  		btst	#$C,d4
00016926 6700                       		beq.s	loc_14B5A
00016928 4641                       		not.w	d1
0001692A 0614 0040                  		addi.b	#$40,(a4)
0001692E 4414                       		neg.b	(a4)
00016930 0414 0040                  		subi.b	#$40,(a4)
00016934                            
00016934                            loc_14B5A:
00016934 0804 000B                  		btst	#$B,d4
00016938 6700                       		beq.s	loc_14B62
0001693A 4414                       		neg.b	(a4)
0001693C                            
0001693C                            loc_14B62:
0001693C 0241 000F                  		andi.w	#$F,d1
00016940 D240                       		add.w	d0,d1
00016942 45F9 0000 0000             		lea	(CollArray2).l,a2
00016948 1032 1000                  		move.b	(a2,d1.w),d0
0001694C 4880                       		ext.w	d0
0001694E BD44                       		eor.w	d6,d4
00016950 0804 000B                  		btst	#$B,d4
00016954 6700                       		beq.s	loc_14B7E
00016956 4440                       		neg.w	d0
00016958                            
00016958                            loc_14B7E:
00016958 4A40                       		tst.w	d0
0001695A 679C                       		beq.s	loc_14B1E
0001695C 6B00                       		bmi.s	loc_14B9A
0001695E 0C00 0010                  		cmpi.b	#$10,d0
00016962 6700                       		beq.s	loc_14BA6
00016964 3203                       		move.w	d3,d1
00016966 0241 000F                  		andi.w	#$F,d1
0001696A D041                       		add.w	d1,d0
0001696C 323C 000F                  		move.w	#$F,d1
00016970 9240                       		sub.w	d0,d1
00016972 4E75                       		rts	
00016974                            ; ===========================================================================
00016974                            
00016974                            loc_14B9A:
00016974 3203                       		move.w	d3,d1
00016976 0241 000F                  		andi.w	#$F,d1
0001697A D041                       		add.w	d1,d0
0001697C 6A00 FF7A                  		bpl.w	loc_14B1E
00016980                            
00016980                            loc_14BA6:
00016980 964B                       		sub.w	a3,d3
00016982 6100 0000                  		bsr.w	FindWall2
00016986 D64B                       		add.w	a3,d3
00016988 0441 0010                  		subi.w	#$10,d1
0001698C 4E75                       		rts	
0001698E                            ; End of function FindWall
0001698E                            
0001698E                            
0001698E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001698E                            
0001698E                            
0001698E                            FindWall2:				; XREF: FindWall
0001698E 6100 FD64                  		bsr.w	Floor_ChkTile
00016992 3011                       		move.w	(a1),d0
00016994 3800                       		move.w	d0,d4
00016996 0240 07FF                  		andi.w	#$7FF,d0
0001699A 6700                       		beq.s	loc_14BC6
0001699C 0B04                       		btst	d5,d4
0001699E 6600                       		bne.s	loc_14BD4
000169A0                            
000169A0                            loc_14BC6:
000169A0 323C 000F                  		move.w	#$F,d1
000169A4 3003                       		move.w	d3,d0
000169A6 0240 000F                  		andi.w	#$F,d0
000169AA 9240                       		sub.w	d0,d1
000169AC 4E75                       		rts	
000169AE                            ; ===========================================================================
000169AE                            
000169AE                            loc_14BD4:
000169AE 2478 F796                  		movea.l	($FFFFF796).w,a2
000169B2 1032 0000                  		move.b	(a2,d0.w),d0
000169B6 0240 00FF                  		andi.w	#$FF,d0
000169BA 67E4                       		beq.s	loc_14BC6
000169BC 45F9 0000 0000             		lea	(AngleMap).l,a2
000169C2 18B2 0000                  		move.b	(a2,d0.w),(a4)
000169C6 E948                       		lsl.w	#4,d0
000169C8 3202                       		move.w	d2,d1
000169CA 0804 000C                  		btst	#$C,d4
000169CE 6700                       		beq.s	loc_14C02
000169D0 4641                       		not.w	d1
000169D2 0614 0040                  		addi.b	#$40,(a4)
000169D6 4414                       		neg.b	(a4)
000169D8 0414 0040                  		subi.b	#$40,(a4)
000169DC                            
000169DC                            loc_14C02:
000169DC 0804 000B                  		btst	#$B,d4
000169E0 6700                       		beq.s	loc_14C0A
000169E2 4414                       		neg.b	(a4)
000169E4                            
000169E4                            loc_14C0A:
000169E4 0241 000F                  		andi.w	#$F,d1
000169E8 D240                       		add.w	d0,d1
000169EA 45F9 0000 0000             		lea	(CollArray2).l,a2
000169F0 1032 1000                  		move.b	(a2,d1.w),d0
000169F4 4880                       		ext.w	d0
000169F6 BD44                       		eor.w	d6,d4
000169F8 0804 000B                  		btst	#$B,d4
000169FC 6700                       		beq.s	loc_14C26
000169FE 4440                       		neg.w	d0
00016A00                            
00016A00                            loc_14C26:
00016A00 4A40                       		tst.w	d0
00016A02 679C                       		beq.s	loc_14BC6
00016A04 6B00                       		bmi.s	loc_14C3C
00016A06 3203                       		move.w	d3,d1
00016A08 0241 000F                  		andi.w	#$F,d1
00016A0C D041                       		add.w	d1,d0
00016A0E 323C 000F                  		move.w	#$F,d1
00016A12 9240                       		sub.w	d0,d1
00016A14 4E75                       		rts	
00016A16                            ; ===========================================================================
00016A16                            
00016A16                            loc_14C3C:
00016A16 3203                       		move.w	d3,d1
00016A18 0241 000F                  		andi.w	#$F,d1
00016A1C D041                       		add.w	d1,d0
00016A1E 6A00 FF80                  		bpl.w	loc_14BC6
00016A22 4641                       		not.w	d1
00016A24 4E75                       		rts	
00016A26                            ; End of function FindWall2
00016A26                            
00016A26                            ; ---------------------------------------------------------------------------
00016A26                            ; Unused floor/wall subroutine - logs something	to do with collision
00016A26                            ; ---------------------------------------------------------------------------
00016A26                            
00016A26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A26                            
00016A26                            
00016A26                            FloorLog_Unk:				; XREF: Level
00016A26 4E75                       		rts	
00016A28                            
00016A28 43F9 0000 0000             		lea	(CollArray1).l,a1
00016A2E 45F9 0000 0000             		lea	(CollArray1).l,a2
00016A34 363C 00FF                  		move.w	#$FF,d3
00016A38                            
00016A38                            loc_14C5E:
00016A38 7A10                       		moveq	#$10,d5
00016A3A 343C 000F                  		move.w	#$F,d2
00016A3E                            
00016A3E                            loc_14C64:
00016A3E 7800                       		moveq	#0,d4
00016A40 323C 000F                  		move.w	#$F,d1
00016A44                            
00016A44                            loc_14C6A:
00016A44 3019                       		move.w	(a1)+,d0
00016A46 EAA8                       		lsr.l	d5,d0
00016A48 D944                       		addx.w	d4,d4
00016A4A 51C9 FFF8                  		dbf	d1,loc_14C6A
00016A4E                            
00016A4E 34C4                       		move.w	d4,(a2)+
00016A50 92FC 0020                  		suba.w	#$20,a1
00016A54 5345                       		subq.w	#1,d5
00016A56 51CA FFE6                  		dbf	d2,loc_14C64
00016A5A                            
00016A5A D2FC 0020                  		adda.w	#$20,a1
00016A5E 51CB FFD8                  		dbf	d3,loc_14C5E
00016A62                            
00016A62 43F9 0000 0000             		lea	(CollArray1).l,a1
00016A68 45F9 0000 0000             		lea	(CollArray2).l,a2
00016A6E 6100                       		bsr.s	FloorLog_Unk2
00016A70 43F9 0000 0000             		lea	(CollArray1).l,a1
00016A76 45F9 0000 0000             		lea	(CollArray1).l,a2
00016A7C                            
00016A7C                            ; End of function FloorLog_Unk
00016A7C                            
00016A7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A7C                            
00016A7C                            
00016A7C                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016A7C 363C 0FFF                  		move.w	#$FFF,d3
00016A80                            
00016A80                            loc_14CA6:
00016A80 7400                       		moveq	#0,d2
00016A82 323C 000F                  		move.w	#$F,d1
00016A86 3019                       		move.w	(a1)+,d0
00016A88 6700                       		beq.s	loc_14CD4
00016A8A 6B00                       		bmi.s	loc_14CBE
00016A8C                            
00016A8C                            loc_14CB2:
00016A8C E248                       		lsr.w	#1,d0
00016A8E 6400                       		bcc.s	loc_14CB8
00016A90 5202                       		addq.b	#1,d2
00016A92                            
00016A92                            loc_14CB8:
00016A92 51C9 FFF8                  		dbf	d1,loc_14CB2
00016A96                            
00016A96 6000                       		bra.s	loc_14CD6
00016A98                            ; ===========================================================================
00016A98                            
00016A98                            loc_14CBE:
00016A98 0C40 FFFF                  		cmpi.w	#-1,d0
00016A9C 6700                       		beq.s	loc_14CD0
00016A9E                            
00016A9E                            loc_14CC4:
00016A9E E348                       		lsl.w	#1,d0
00016AA0 6400                       		bcc.s	loc_14CCA
00016AA2 5302                       		subq.b	#1,d2
00016AA4                            
00016AA4                            loc_14CCA:
00016AA4 51C9 FFF8                  		dbf	d1,loc_14CC4
00016AA8                            
00016AA8 6000                       		bra.s	loc_14CD6
00016AAA                            ; ===========================================================================
00016AAA                            
00016AAA                            loc_14CD0:
00016AAA 303C 0010                  		move.w	#$10,d0
00016AAE                            
00016AAE                            loc_14CD4:
00016AAE 3400                       		move.w	d0,d2
00016AB0                            
00016AB0                            loc_14CD6:
00016AB0 14C2                       		move.b	d2,(a2)+
00016AB2 51CB FFCC                  		dbf	d3,loc_14CA6
00016AB6                            
00016AB6 4E75                       		rts	
00016AB8                            
00016AB8                            ; End of function FloorLog_Unk2
00016AB8                            
00016AB8                            
00016AB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AB8                            
00016AB8                            
00016AB8                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016AB8 2628 0008                  		move.l	8(a0),d3
00016ABC 2428 000C                  		move.l	$C(a0),d2
00016AC0 3228 0010                  		move.w	$10(a0),d1
00016AC4 48C1                       		ext.l	d1
00016AC6 E181                       		asl.l	#8,d1
00016AC8 D681                       		add.l	d1,d3
00016ACA 3228 0012                  		move.w	$12(a0),d1
00016ACE 48C1                       		ext.l	d1
00016AD0 E181                       		asl.l	#8,d1
00016AD2 D481                       		add.l	d1,d2
00016AD4 4842                       		swap	d2
00016AD6 4843                       		swap	d3
00016AD8 11C0 F768                  		move.b	d0,($FFFFF768).w
00016ADC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016AE0 1200                       		move.b	d0,d1
00016AE2 0600 0020                  		addi.b	#$20,d0
00016AE6 6A00                       		bpl.s	loc_14D1A
00016AE8 1001                       		move.b	d1,d0
00016AEA 6A00                       		bpl.s	loc_14D14
00016AEC 5300                       		subq.b	#1,d0
00016AEE                            
00016AEE                            loc_14D14:
00016AEE 0600 0020                  		addi.b	#$20,d0
00016AF2 6000                       		bra.s	loc_14D24
00016AF4                            ; ===========================================================================
00016AF4                            
00016AF4                            loc_14D1A:
00016AF4 1001                       		move.b	d1,d0
00016AF6 6A00                       		bpl.s	loc_14D20
00016AF8 5200                       		addq.b	#1,d0
00016AFA                            
00016AFA                            loc_14D20:
00016AFA 0600 001F                  		addi.b	#$1F,d0
00016AFE                            
00016AFE                            loc_14D24:
00016AFE 0200 00C0                  		andi.b	#$C0,d0
00016B02 6700 0000                  		beq.w	loc_14DF0
00016B06 0C00 0080                  		cmpi.b	#$80,d0
00016B0A 6700 0000                  		beq.w	loc_14F7C
00016B0E 0201 0038                  		andi.b	#$38,d1
00016B12 6600                       		bne.s	loc_14D3C
00016B14 5042                       		addq.w	#8,d2
00016B16                            
00016B16                            loc_14D3C:
00016B16 0C00 0040                  		cmpi.b	#$40,d0
00016B1A 6700 0000                  		beq.w	loc_1504A
00016B1E 6000 0000                  		bra.w	loc_14EBC
00016B22                            
00016B22                            ; End of function Sonic_WalkSpeed
00016B22                            
00016B22                            
00016B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B22                            
00016B22                            
00016B22                            sub_14D48:				; XREF: Sonic_Jump
00016B22 11C0 F768                  		move.b	d0,($FFFFF768).w
00016B26 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016B2A 0600 0020                  		addi.b	#$20,d0
00016B2E 0200 00C0                  		andi.b	#$C0,d0
00016B32 0C00 0040                  		cmpi.b	#$40,d0
00016B36 6700 0000                  		beq.w	loc_14FD6
00016B3A 0C00 0080                  		cmpi.b	#$80,d0
00016B3E 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016B42 0C00 00C0                  		cmpi.b	#$C0,d0
00016B46 6700 0000                  		beq.w	sub_14E50
00016B4A                            
00016B4A                            ; End of function sub_14D48
00016B4A                            
00016B4A                            ; ---------------------------------------------------------------------------
00016B4A                            ; Subroutine to	make Sonic land	on the floor after jumping
00016B4A                            ; ---------------------------------------------------------------------------
00016B4A                            
00016B4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B4A                            
00016B4A                            
00016B4A                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016B4A 3428 000C                  		move.w	$C(a0),d2
00016B4E 3628 0008                  		move.w	8(a0),d3
00016B52 7000                       		moveq	#0,d0
00016B54 1028 0016                  		move.b	$16(a0),d0
00016B58 4880                       		ext.w	d0
00016B5A D440                       		add.w	d0,d2
00016B5C 1028 0017                  		move.b	$17(a0),d0
00016B60 4880                       		ext.w	d0
00016B62 D640                       		add.w	d0,d3
00016B64 49F8 F768                  		lea	($FFFFF768).w,a4
00016B68 367C 0010                  		movea.w	#$10,a3
00016B6C 3C3C 0000                  		move.w	#0,d6
00016B70 7A0D                       		moveq	#$D,d5
00016B72 6100 FC32                  		bsr.w	FindFloor
00016B76 3F01                       		move.w	d1,-(sp)
00016B78 3428 000C                  		move.w	$C(a0),d2
00016B7C 3628 0008                  		move.w	8(a0),d3
00016B80 7000                       		moveq	#0,d0
00016B82 1028 0016                  		move.b	$16(a0),d0
00016B86 4880                       		ext.w	d0
00016B88 D440                       		add.w	d0,d2
00016B8A 1028 0017                  		move.b	$17(a0),d0
00016B8E 4880                       		ext.w	d0
00016B90 9640                       		sub.w	d0,d3
00016B92 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016B96 367C 0010                  		movea.w	#$10,a3
00016B9A 3C3C 0000                  		move.w	#0,d6
00016B9E 7A0D                       		moveq	#$D,d5
00016BA0 6100 FC04                  		bsr.w	FindFloor
00016BA4 301F                       		move.w	(sp)+,d0
00016BA6 143C 0000                  		move.b	#0,d2
00016BAA                            
00016BAA                            loc_14DD0:
00016BAA 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016BAE B240                       		cmp.w	d0,d1
00016BB0 6F00                       		ble.s	loc_14DDE
00016BB2 1638 F768                  		move.b	($FFFFF768).w,d3
00016BB6 C141                       		exg	d0,d1
00016BB8                            
00016BB8                            loc_14DDE:
00016BB8 0803 0000                  		btst	#0,d3
00016BBC 6700                       		beq.s	locret_14DE6
00016BBE 1602                       		move.b	d2,d3
00016BC0                            
00016BC0                            locret_14DE6:
00016BC0 4E75                       		rts	
00016BC2                            
00016BC2                            ; End of function Sonic_HitFloor
00016BC2                            
00016BC2                            ; ===========================================================================
00016BC2 3428 000C                  		move.w	$C(a0),d2
00016BC6 3628 0008                  		move.w	8(a0),d3
00016BCA                            
00016BCA                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016BCA 0642 000A                  		addi.w	#$A,d2
00016BCE 49F8 F768                  		lea	($FFFFF768).w,a4
00016BD2 367C 0010                  		movea.w	#$10,a3
00016BD6 3C3C 0000                  		move.w	#0,d6
00016BDA 7A0E                       		moveq	#$E,d5
00016BDC 6100 FBC8                  		bsr.w	FindFloor
00016BE0 143C 0000                  		move.b	#0,d2
00016BE4                            
00016BE4                            loc_14E0A:				; XREF: sub_14EB4
00016BE4 1638 F768                  		move.b	($FFFFF768).w,d3
00016BE8 0803 0000                  		btst	#0,d3
00016BEC 6700                       		beq.s	locret_14E16
00016BEE 1602                       		move.b	d2,d3
00016BF0                            
00016BF0                            locret_14E16:
00016BF0 4E75                       		rts	
00016BF2                            
00016BF2                            ; ---------------------------------------------------------------------------
00016BF2                            ; Subroutine allowing objects to interact with the floor
00016BF2                            ; ---------------------------------------------------------------------------
00016BF2                            
00016BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BF2                            
00016BF2                            
00016BF2                            ObjHitFloor:
00016BF2 3628 0008                  		move.w	8(a0),d3
00016BF6                            
00016BF6                            ; End of function ObjHitFloor
00016BF6                            
00016BF6                            
00016BF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BF6                            
00016BF6                            
00016BF6                            ObjHitFloor2:
00016BF6 3428 000C                  		move.w	$C(a0),d2
00016BFA 7000                       		moveq	#0,d0
00016BFC 1028 0016                  		move.b	$16(a0),d0
00016C00 4880                       		ext.w	d0
00016C02 D440                       		add.w	d0,d2
00016C04 49F8 F768                  		lea	($FFFFF768).w,a4
00016C08 18BC 0000                  		move.b	#0,(a4)
00016C0C 367C 0010                  		movea.w	#$10,a3
00016C10 3C3C 0000                  		move.w	#0,d6
00016C14 7A0D                       		moveq	#$D,d5
00016C16 6100 FB8E                  		bsr.w	FindFloor
00016C1A 1638 F768                  		move.b	($FFFFF768).w,d3
00016C1E 0803 0000                  		btst	#0,d3
00016C22 6700                       		beq.s	locret_14E4E
00016C24 163C 0000                  		move.b	#0,d3
00016C28                            
00016C28                            locret_14E4E:
00016C28 4E75                       		rts	
00016C2A                            ; End of function ObjHitFloor2
00016C2A                            
00016C2A                            
00016C2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C2A                            
00016C2A                            
00016C2A                            sub_14E50:				; XREF: sub_14D48
00016C2A 3428 000C                  		move.w	$C(a0),d2
00016C2E 3628 0008                  		move.w	8(a0),d3
00016C32 7000                       		moveq	#0,d0
00016C34 1028 0017                  		move.b	$17(a0),d0
00016C38 4880                       		ext.w	d0
00016C3A 9440                       		sub.w	d0,d2
00016C3C 1028 0016                  		move.b	$16(a0),d0
00016C40 4880                       		ext.w	d0
00016C42 D640                       		add.w	d0,d3
00016C44 49F8 F768                  		lea	($FFFFF768).w,a4
00016C48 367C 0010                  		movea.w	#$10,a3
00016C4C 3C3C 0000                  		move.w	#0,d6
00016C50 7A0E                       		moveq	#$E,d5
00016C52 6100 FC92                  		bsr.w	FindWall
00016C56 3F01                       		move.w	d1,-(sp)
00016C58 3428 000C                  		move.w	$C(a0),d2
00016C5C 3628 0008                  		move.w	8(a0),d3
00016C60 7000                       		moveq	#0,d0
00016C62 1028 0017                  		move.b	$17(a0),d0
00016C66 4880                       		ext.w	d0
00016C68 D440                       		add.w	d0,d2
00016C6A 1028 0016                  		move.b	$16(a0),d0
00016C6E 4880                       		ext.w	d0
00016C70 D640                       		add.w	d0,d3
00016C72 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016C76 367C 0010                  		movea.w	#$10,a3
00016C7A 3C3C 0000                  		move.w	#0,d6
00016C7E 7A0E                       		moveq	#$E,d5
00016C80 6100 FC64                  		bsr.w	FindWall
00016C84 301F                       		move.w	(sp)+,d0
00016C86 143C 00C0                  		move.b	#-$40,d2
00016C8A 6000 FF1E                  		bra.w	loc_14DD0
00016C8E                            
00016C8E                            ; End of function sub_14E50
00016C8E                            
00016C8E                            
00016C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C8E                            
00016C8E                            
00016C8E                            sub_14EB4:				; XREF: Sonic_Floor
00016C8E 3428 000C                  		move.w	$C(a0),d2
00016C92 3628 0008                  		move.w	8(a0),d3
00016C96                            
00016C96                            loc_14EBC:
00016C96 0643 000A                  		addi.w	#$A,d3
00016C9A 49F8 F768                  		lea	($FFFFF768).w,a4
00016C9E 367C 0010                  		movea.w	#$10,a3
00016CA2 3C3C 0000                  		move.w	#0,d6
00016CA6 7A0E                       		moveq	#$E,d5
00016CA8 6100 FC3C                  		bsr.w	FindWall
00016CAC 143C 00C0                  		move.b	#-$40,d2
00016CB0 6000 FF32                  		bra.w	loc_14E0A
00016CB4                            
00016CB4                            ; End of function sub_14EB4
00016CB4                            
00016CB4                            ; ---------------------------------------------------------------------------
00016CB4                            ; Subroutine to	detect when an object hits a wall to its right
00016CB4                            ; ---------------------------------------------------------------------------
00016CB4                            
00016CB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CB4                            
00016CB4                            
00016CB4                            ObjHitWallRight:
00016CB4 D668 0008                  		add.w	8(a0),d3
00016CB8 3428 000C                  		move.w	$C(a0),d2
00016CBC 49F8 F768                  		lea	($FFFFF768).w,a4
00016CC0 18BC 0000                  		move.b	#0,(a4)
00016CC4 367C 0010                  		movea.w	#$10,a3
00016CC8 3C3C 0000                  		move.w	#0,d6
00016CCC 7A0E                       		moveq	#$E,d5
00016CCE 6100 FC16                  		bsr.w	FindWall
00016CD2 1638 F768                  		move.b	($FFFFF768).w,d3
00016CD6 0803 0000                  		btst	#0,d3
00016CDA 6700                       		beq.s	locret_14F06
00016CDC 163C 00C0                  		move.b	#-$40,d3
00016CE0                            
00016CE0                            locret_14F06:
00016CE0 4E75                       		rts	
00016CE2                            
00016CE2                            ; End of function ObjHitWallRight
00016CE2                            
00016CE2                            ; ---------------------------------------------------------------------------
00016CE2                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00016CE2                            ; touches them
00016CE2                            ; ---------------------------------------------------------------------------
00016CE2                            
00016CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CE2                            
00016CE2                            
00016CE2                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00016CE2 3428 000C                  		move.w	$C(a0),d2
00016CE6 3628 0008                  		move.w	8(a0),d3
00016CEA 7000                       		moveq	#0,d0
00016CEC 1028 0016                  		move.b	$16(a0),d0
00016CF0 4880                       		ext.w	d0
00016CF2 9440                       		sub.w	d0,d2
00016CF4 0A42 000F                  		eori.w	#$F,d2
00016CF8 1028 0017                  		move.b	$17(a0),d0
00016CFC 4880                       		ext.w	d0
00016CFE D640                       		add.w	d0,d3
00016D00 49F8 F768                  		lea	($FFFFF768).w,a4
00016D04 367C FFF0                  		movea.w	#-$10,a3
00016D08 3C3C 1000                  		move.w	#$1000,d6
00016D0C 7A0E                       		moveq	#$E,d5
00016D0E 6100 FA96                  		bsr.w	FindFloor
00016D12 3F01                       		move.w	d1,-(sp)
00016D14 3428 000C                  		move.w	$C(a0),d2
00016D18 3628 0008                  		move.w	8(a0),d3
00016D1C 7000                       		moveq	#0,d0
00016D1E 1028 0016                  		move.b	$16(a0),d0
00016D22 4880                       		ext.w	d0
00016D24 9440                       		sub.w	d0,d2
00016D26 0A42 000F                  		eori.w	#$F,d2
00016D2A 1028 0017                  		move.b	$17(a0),d0
00016D2E 4880                       		ext.w	d0
00016D30 9640                       		sub.w	d0,d3
00016D32 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016D36 367C FFF0                  		movea.w	#-$10,a3
00016D3A 3C3C 1000                  		move.w	#$1000,d6
00016D3E 7A0E                       		moveq	#$E,d5
00016D40 6100 FA64                  		bsr.w	FindFloor
00016D44 301F                       		move.w	(sp)+,d0
00016D46 143C 0080                  		move.b	#-$80,d2
00016D4A 6000 FE5E                  		bra.w	loc_14DD0
00016D4E                            ; End of function Sonic_DontRunOnWalls
00016D4E                            
00016D4E                            ; ===========================================================================
00016D4E 3428 000C                  		move.w	$C(a0),d2
00016D52 3628 0008                  		move.w	8(a0),d3
00016D56                            
00016D56                            loc_14F7C:
00016D56 0442 000A                  		subi.w	#$A,d2
00016D5A 0A42 000F                  		eori.w	#$F,d2
00016D5E 49F8 F768                  		lea	($FFFFF768).w,a4
00016D62 367C FFF0                  		movea.w	#-$10,a3
00016D66 3C3C 1000                  		move.w	#$1000,d6
00016D6A 7A0E                       		moveq	#$E,d5
00016D6C 6100 FA38                  		bsr.w	FindFloor
00016D70 143C 0080                  		move.b	#-$80,d2
00016D74 6000 FE6E                  		bra.w	loc_14E0A
00016D78                            
00016D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D78                            
00016D78                            
00016D78                            ObjHitCeiling:
00016D78 3428 000C                  		move.w	$C(a0),d2
00016D7C 3628 0008                  		move.w	8(a0),d3
00016D80 7000                       		moveq	#0,d0
00016D82 1028 0016                  		move.b	$16(a0),d0
00016D86 4880                       		ext.w	d0
00016D88 9440                       		sub.w	d0,d2
00016D8A 0A42 000F                  		eori.w	#$F,d2
00016D8E 49F8 F768                  		lea	($FFFFF768).w,a4
00016D92 367C FFF0                  		movea.w	#-$10,a3
00016D96 3C3C 1000                  		move.w	#$1000,d6
00016D9A 7A0E                       		moveq	#$E,d5
00016D9C 6100 FA08                  		bsr.w	FindFloor
00016DA0 1638 F768                  		move.b	($FFFFF768).w,d3
00016DA4 0803 0000                  		btst	#0,d3
00016DA8 6700                       		beq.s	locret_14FD4
00016DAA 163C 0080                  		move.b	#-$80,d3
00016DAE                            
00016DAE                            locret_14FD4:
00016DAE 4E75                       		rts	
00016DB0                            ; End of function ObjHitCeiling
00016DB0                            
00016DB0                            ; ===========================================================================
00016DB0                            
00016DB0                            loc_14FD6:				; XREF: sub_14D48
00016DB0 3428 000C                  		move.w	$C(a0),d2
00016DB4 3628 0008                  		move.w	8(a0),d3
00016DB8 7000                       		moveq	#0,d0
00016DBA 1028 0017                  		move.b	$17(a0),d0
00016DBE 4880                       		ext.w	d0
00016DC0 9440                       		sub.w	d0,d2
00016DC2 1028 0016                  		move.b	$16(a0),d0
00016DC6 4880                       		ext.w	d0
00016DC8 9640                       		sub.w	d0,d3
00016DCA 0A43 000F                  		eori.w	#$F,d3
00016DCE 49F8 F768                  		lea	($FFFFF768).w,a4
00016DD2 367C FFF0                  		movea.w	#-$10,a3
00016DD6 3C3C 0800                  		move.w	#$800,d6
00016DDA 7A0E                       		moveq	#$E,d5
00016DDC 6100 FB08                  		bsr.w	FindWall
00016DE0 3F01                       		move.w	d1,-(sp)
00016DE2 3428 000C                  		move.w	$C(a0),d2
00016DE6 3628 0008                  		move.w	8(a0),d3
00016DEA 7000                       		moveq	#0,d0
00016DEC 1028 0017                  		move.b	$17(a0),d0
00016DF0 4880                       		ext.w	d0
00016DF2 D440                       		add.w	d0,d2
00016DF4 1028 0016                  		move.b	$16(a0),d0
00016DF8 4880                       		ext.w	d0
00016DFA 9640                       		sub.w	d0,d3
00016DFC 0A43 000F                  		eori.w	#$F,d3
00016E00 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016E04 367C FFF0                  		movea.w	#-$10,a3
00016E08 3C3C 0800                  		move.w	#$800,d6
00016E0C 7A0E                       		moveq	#$E,d5
00016E0E 6100 FAD6                  		bsr.w	FindWall
00016E12 301F                       		move.w	(sp)+,d0
00016E14 143C 0040                  		move.b	#$40,d2
00016E18 6000 FD90                  		bra.w	loc_14DD0
00016E1C                            
00016E1C                            ; ---------------------------------------------------------------------------
00016E1C                            ; Subroutine to	stop Sonic when	he jumps at a wall
00016E1C                            ; ---------------------------------------------------------------------------
00016E1C                            
00016E1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E1C                            
00016E1C                            
00016E1C                            Sonic_HitWall:				; XREF: Sonic_Floor
00016E1C 3428 000C                  		move.w	$C(a0),d2
00016E20 3628 0008                  		move.w	8(a0),d3
00016E24                            
00016E24                            loc_1504A:
00016E24 0443 000A                  		subi.w	#$A,d3
00016E28 0A43 000F                  		eori.w	#$F,d3
00016E2C 49F8 F768                  		lea	($FFFFF768).w,a4
00016E30 367C FFF0                  		movea.w	#-$10,a3
00016E34 3C3C 0800                  		move.w	#$800,d6
00016E38 7A0E                       		moveq	#$E,d5
00016E3A 6100 FAAA                  		bsr.w	FindWall
00016E3E 143C 0040                  		move.b	#$40,d2
00016E42 6000 FDA0                  		bra.w	loc_14E0A
00016E46                            ; End of function Sonic_HitWall
00016E46                            
00016E46                            ; ---------------------------------------------------------------------------
00016E46                            ; Subroutine to	detect when an object hits a wall to its left
00016E46                            ; ---------------------------------------------------------------------------
00016E46                            
00016E46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E46                            
00016E46                            
00016E46                            ObjHitWallLeft:
00016E46 D668 0008                  		add.w	8(a0),d3
00016E4A 3428 000C                  		move.w	$C(a0),d2
00016E4E 49F8 F768                  		lea	($FFFFF768).w,a4
00016E52 18BC 0000                  		move.b	#0,(a4)
00016E56 367C FFF0                  		movea.w	#-$10,a3
00016E5A 3C3C 0800                  		move.w	#$800,d6
00016E5E 7A0E                       		moveq	#$E,d5
00016E60 6100 FA84                  		bsr.w	FindWall
00016E64 1638 F768                  		move.b	($FFFFF768).w,d3
00016E68 0803 0000                  		btst	#0,d3
00016E6C 6700                       		beq.s	locret_15098
00016E6E 163C 0040                  		move.b	#$40,d3
00016E72                            
00016E72                            locret_15098:
00016E72 4E75                       		rts	
00016E74                            ; End of function ObjHitWallLeft
00016E74                            
00016E74                            ; ===========================================================================
00016E74                            ; ---------------------------------------------------------------------------
00016E74                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00016E74                            ; ---------------------------------------------------------------------------
00016E74                            
00016E74                            Obj66:					; XREF: Obj_Index
00016E74 7000                       		moveq	#0,d0
00016E76 1028 0024                  		move.b	$24(a0),d0
00016E7A 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00016E7E 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00016E82                            ; ===========================================================================
00016E82 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00016E84 0000                       		dc.w Obj66_Action-Obj66_Index
00016E86 0000                       		dc.w Obj66_Display-Obj66_Index
00016E88 0000                       		dc.w Obj66_Release-Obj66_Index
00016E8A                            ; ===========================================================================
00016E8A                            
00016E8A                            Obj66_Main:				; XREF: Obj66_Index
00016E8A 5428 0024                  		addq.b	#2,$24(a0)
00016E8E 323C 0001                  		move.w	#1,d1
00016E92 2248                       		movea.l	a0,a1
00016E94 6000                       		bra.s	Obj66_MakeItem
00016E96                            ; ===========================================================================
00016E96                            
00016E96                            Obj66_Loop:
00016E96 6100 809C                  		bsr.w	SingleObjLoad
00016E9A 6600                       		bne.s	loc_150FE
00016E9C 12BC 0066                  		move.b	#$66,0(a1)
00016EA0 5829 0024                  		addq.b	#4,$24(a1)
00016EA4 3368 0008 0008             		move.w	8(a0),8(a1)
00016EAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016EB0 137C 0003 0018             		move.b	#3,$18(a1)
00016EB6 137C 0010 001A             		move.b	#$10,$1A(a1)
00016EBC                            
00016EBC                            Obj66_MakeItem:				; XREF: Obj66_Main
00016EBC 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016EC4 337C 4348 0002             		move.w	#$4348,2(a1)
00016ECA 0029 0004 0001             		ori.b	#4,1(a1)
00016ED0 137C 0038 0019             		move.b	#$38,$19(a1)
00016ED6                            
00016ED6                            loc_150FE:
00016ED6 51C9 FFBE                  		dbf	d1,Obj66_Loop
00016EDA                            
00016EDA 117C 0030 0019             		move.b	#$30,$19(a0)
00016EE0 117C 0004 0018             		move.b	#4,$18(a0)
00016EE6 317C 003C 0030             		move.w	#$3C,$30(a0)
00016EEC 117C 0001 0034             		move.b	#1,$34(a0)
00016EF2 1168 0028 0038             		move.b	$28(a0),$38(a0)
00016EF8                            
00016EF8                            Obj66_Action:				; XREF: Obj66_Index
00016EF8 6100 0000                  		bsr.w	Obj66_ChkSwitch
00016EFC 4A28 0001                  		tst.b	1(a0)
00016F00 6A00 0000                  		bpl.w	Obj66_Display
00016F04 323C 0030                  		move.w	#$30,d1
00016F08 3401                       		move.w	d1,d2
00016F0A 3602                       		move.w	d2,d3
00016F0C 5243                       		addq.w	#1,d3
00016F0E 3828 0008                  		move.w	8(a0),d4
00016F12 6100 A238                  		bsr.w	SolidObject
00016F16 0828 0005 0022             		btst	#5,$22(a0)
00016F1C 6700 0000                  		beq.w	Obj66_Display
00016F20 43F8 D000                  		lea	($FFFFD000).w,a1
00016F24 720E                       		moveq	#$E,d1
00016F26 3029 0008                  		move.w	8(a1),d0
00016F2A B068 0008                  		cmp.w	8(a0),d0
00016F2E 6500                       		bcs.s	Obj66_GrabSonic
00016F30 7207                       		moveq	#7,d1
00016F32                            
00016F32                            Obj66_GrabSonic:
00016F32 B228 001A                  		cmp.b	$1A(a0),d1
00016F36 6600                       		bne.s	Obj66_Display
00016F38 1141 0032                  		move.b	d1,$32(a0)
00016F3C 5828 0024                  		addq.b	#4,$24(a0)
00016F40 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00016F46 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00016F4C 337C 0800 0020             		move.w	#$800,$20(a1)
00016F52 337C 0000 0010             		move.w	#0,$10(a1)
00016F58 337C 0000 0012             		move.w	#0,$12(a1)
00016F5E 08A8 0005 0022             		bclr	#5,$22(a0)
00016F64 08A9 0005 0022             		bclr	#5,$22(a1)
00016F6A 08E9 0001 0022             		bset	#1,$22(a1)
00016F70 3429 0008                  		move.w	8(a1),d2
00016F74 3629 000C                  		move.w	$C(a1),d3
00016F78 6100 0000                  		bsr.w	Obj66_ChgPos
00016F7C D569 0008                  		add.w	d2,8(a1)
00016F80 D769 000C                  		add.w	d3,$C(a1)
00016F84 E0E9 0008                  		asr	8(a1)
00016F88 E0E9 000C                  		asr	$C(a1)
00016F8C                            
00016F8C                            Obj66_Display:				; XREF: Obj66_Index
00016F8C 6000 9E9A                  		bra.w	MarkObjGone
00016F90                            ; ===========================================================================
00016F90                            
00016F90                            Obj66_Release:				; XREF: Obj66_Index
00016F90 1028 001A                  		move.b	$1A(a0),d0
00016F94 0C00 0004                  		cmpi.b	#4,d0
00016F98 6700                       		beq.s	loc_151C8
00016F9A 0C00 0007                  		cmpi.b	#7,d0
00016F9E 6600                       		bne.s	loc_151F8
00016FA0                            
00016FA0                            loc_151C8:
00016FA0 B028 0032                  		cmp.b	$32(a0),d0
00016FA4 6700                       		beq.s	loc_151F8
00016FA6 43F8 D000                  		lea	($FFFFD000).w,a1
00016FAA 337C 0000 0010             		move.w	#0,$10(a1)
00016FB0 337C 0800 0012             		move.w	#$800,$12(a1)
00016FB6 0C00 0004                  		cmpi.b	#4,d0
00016FBA 6700                       		beq.s	loc_151F0
00016FBC 337C 0800 0010             		move.w	#$800,$10(a1)
00016FC2 337C 0800 0012             		move.w	#$800,$12(a1)
00016FC8                            
00016FC8                            loc_151F0:
00016FC8 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00016FCC 5928 0024                  		subq.b	#4,$24(a0)
00016FD0                            
00016FD0                            loc_151F8:
00016FD0 6100                       		bsr.s	Obj66_ChkSwitch
00016FD2 6100                       		bsr.s	Obj66_ChgPos
00016FD4 6000 9E52                  		bra.w	MarkObjGone
00016FD8                            
00016FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FD8                            
00016FD8                            
00016FD8                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00016FD8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016FDC 7000                       		moveq	#0,d0
00016FDE 1028 0038                  		move.b	$38(a0),d0
00016FE2 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00016FE8 6700                       		beq.s	loc_15224	; if not, branch
00016FEA 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00016FEE 6600                       		bne.s	Obj66_Animate	; if yes, branch
00016FF0 4428 0034                  		neg.b	$34(a0)
00016FF4 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00016FFA 6000                       		bra.s	Obj66_Animate
00016FFC                            ; ===========================================================================
00016FFC                            
00016FFC                            loc_15224:
00016FFC 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00017000                            
00017000                            Obj66_Animate:
00017000 5328 001E                  		subq.b	#1,$1E(a0)
00017004 6A00                       		bpl.s	locret_15246
00017006 117C 0007 001E             		move.b	#7,$1E(a0)
0001700C 1228 0034                  		move.b	$34(a0),d1
00017010 1028 001A                  		move.b	$1A(a0),d0
00017014 D001                       		add.b	d1,d0
00017016 0200 000F                  		andi.b	#$F,d0
0001701A 1140 001A                  		move.b	d0,$1A(a0)
0001701E                            
0001701E                            locret_15246:
0001701E 4E75                       		rts	
00017020                            ; End of function Obj66_ChkSwitch
00017020                            
00017020                            
00017020                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017020                            
00017020                            
00017020                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00017020 43F8 D000                  		lea	($FFFFD000).w,a1
00017024 7000                       		moveq	#0,d0
00017026 1028 001A                  		move.b	$1A(a0),d0
0001702A D040                       		add.w	d0,d0
0001702C 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00017030 101A                       		move.b	(a2)+,d0
00017032 4880                       		ext.w	d0
00017034 D068 0008                  		add.w	8(a0),d0
00017038 3340 0008                  		move.w	d0,8(a1)
0001703C 101A                       		move.b	(a2)+,d0
0001703E 4880                       		ext.w	d0
00017040 D068 000C                  		add.w	$C(a0),d0
00017044 3340 000C                  		move.w	d0,$C(a1)
00017048 4E75                       		rts	
0001704A                            ; End of function Obj66_ChgPos
0001704A                            
0001704A                            ; ===========================================================================
0001704A E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
0001704E E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00017052 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00017056 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001705A 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0001705E 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00017062 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00017066 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001706A                            ; ---------------------------------------------------------------------------
0001706A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001706A                            ; ---------------------------------------------------------------------------
0001706A                            Map_obj66:
0001706A                            	include "_maps\obj66.asm"
0001706A                            ; ---------------------------------------------------------------------------
0001706A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001706A                            ; ---------------------------------------------------------------------------
0001706A 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
0001706E 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00017072 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00017076 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001707A 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
0001707E 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00017082 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00017086 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001708A 0000                       		dc.w byte_154A4-Map_obj66
0001708C 06                         byte_152B4:	dc.b 6
0001708D E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00017092 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00017097 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001709C E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000170A1 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000170A6 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000170AB 06                         byte_152D3:	dc.b 6
000170AC F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000170B1 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000170B6 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000170BB F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000170C0 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000170C5 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000170CA 06                         byte_152F2:	dc.b 6
000170CB 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000170D0 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000170D5 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000170DA 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000170DF 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000170E4 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000170E9 06                         byte_15311:	dc.b 6
000170EA 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000170EF 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000170F4 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000170F9 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000170FE 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00017103 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00017108 06                         byte_15330:	dc.b 6
00017109 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001710E 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00017113 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00017118 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001711D 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00017122 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00017127 06                         byte_1534F:	dc.b 6
00017128 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001712D 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00017132 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00017137 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001713C 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00017141 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00017146 06                         byte_1536E:	dc.b 6
00017147 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001714C 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00017151 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00017156 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001715B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00017160 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00017165 06                         byte_1538D:	dc.b 6
00017166 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001716B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00017170 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00017175 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001717A 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001717F 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00017184 06                         byte_153AC:	dc.b 6
00017185 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001718A 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
0001718F E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00017194 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00017199 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001719E 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000171A3 06                         byte_153CB:	dc.b 6
000171A4 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000171A9 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000171AE DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000171B3 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000171B8 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000171BD F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000171C2 06                         byte_153EA:	dc.b 6
000171C3 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000171C8 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000171CD D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000171D2 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000171D7 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000171DC E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000171E1 06                         byte_15409:	dc.b 6
000171E2 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000171E7 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000171EC CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000171F1 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000171F6 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000171FB E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00017200 06                         byte_15428:	dc.b 6
00017201 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00017206 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001720B C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00017210 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00017215 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001721A E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001721F 06                         byte_15447:	dc.b 6
00017220 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00017225 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001722A CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001722F CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00017234 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00017239 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001723E 06                         byte_15466:	dc.b 6
0001723F E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00017244 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00017249 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001724E D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00017253 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00017258 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001725D 06                         byte_15485:	dc.b 6
0001725E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00017263 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00017268 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001726D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00017272 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00017277 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001727C 0C                         byte_154A4:	dc.b $C
0001727D C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00017282 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00017287 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001728C C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00017291 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00017296 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001729B 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000172A0 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000172A5 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000172AA 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000172AF 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000172B4 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000172BA 00                         		even
000172BA 00                         		even
000172BA                            
000172BA                            ; ===========================================================================
000172BA                            ; ---------------------------------------------------------------------------
000172BA                            ; Object 67 - disc that	you run	around (SBZ)
000172BA                            ; ---------------------------------------------------------------------------
000172BA                            
000172BA                            Obj67:					; XREF: Obj_Index
000172BA 7000                       		moveq	#0,d0
000172BC 1028 0024                  		move.b	$24(a0),d0
000172C0 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
000172C4 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
000172C8                            ; ===========================================================================
000172C8 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
000172CA 0000                       		dc.w Obj67_Action-Obj67_Index
000172CC                            ; ===========================================================================
000172CC                            
000172CC                            Obj67_Main:				; XREF: Obj67_Index
000172CC 5428 0024                  		addq.b	#2,$24(a0)
000172D0 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
000172D8 317C C344 0002             		move.w	#$C344,2(a0)
000172DE 117C 0004 0001             		move.b	#4,1(a0)
000172E4 117C 0004 0018             		move.b	#4,$18(a0)
000172EA 117C 0008 0019             		move.b	#8,$19(a0)
000172F0 3168 0008 0032             		move.w	8(a0),$32(a0)
000172F6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000172FC 117C 0018 0034             		move.b	#$18,$34(a0)
00017302 117C 0048 0038             		move.b	#$48,$38(a0)
00017308 1228 0028                  		move.b	$28(a0),d1	; get object type
0001730C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00017310 6700                       		beq.s	loc_15546
00017312 117C 0010 0034             		move.b	#$10,$34(a0)
00017318 117C 0038 0038             		move.b	#$38,$38(a0)
0001731E                            
0001731E                            loc_15546:
0001731E 1228 0028                  		move.b	$28(a0),d1	; get object type
00017322 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017326 4881                       		ext.w	d1
00017328 E741                       		asl.w	#3,d1
0001732A 3141 0036                  		move.w	d1,$36(a0)
0001732E 1028 0022                  		move.b	$22(a0),d0
00017332 E418                       		ror.b	#2,d0
00017334 0200 00C0                  		andi.b	#-$40,d0
00017338 1140 0026                  		move.b	d0,$26(a0)
0001733C                            
0001733C                            Obj67_Action:				; XREF: Obj67_Index
0001733C 6100 0000                  		bsr.w	Obj67_MoveSonic
00017340 6100 0000                  		bsr.w	Obj67_MoveSpot
00017344 6000 0000                  		bra.w	Obj67_ChkDel
00017348                            ; ===========================================================================
00017348                            
00017348                            Obj67_MoveSonic:			; XREF: Obj67_Action
00017348 7400                       		moveq	#0,d2
0001734A 1428 0038                  		move.b	$38(a0),d2
0001734E 3602                       		move.w	d2,d3
00017350 D643                       		add.w	d3,d3
00017352 43F8 D000                  		lea	($FFFFD000).w,a1
00017356 3029 0008                  		move.w	8(a1),d0
0001735A 9068 0032                  		sub.w	$32(a0),d0
0001735E D042                       		add.w	d2,d0
00017360 B043                       		cmp.w	d3,d0
00017362 6400                       		bcc.s	loc_155A8
00017364 3229 000C                  		move.w	$C(a1),d1
00017368 9268 0030                  		sub.w	$30(a0),d1
0001736C D242                       		add.w	d2,d1
0001736E B243                       		cmp.w	d3,d1
00017370 6400                       		bcc.s	loc_155A8
00017372 0829 0001 0022             		btst	#1,$22(a1)
00017378 6700                       		beq.s	loc_155B8
0001737A 4228 003A                  		clr.b	$3A(a0)
0001737E 4E75                       		rts	
00017380                            ; ===========================================================================
00017380                            
00017380                            loc_155A8:
00017380 4A28 003A                  		tst.b	$3A(a0)
00017384 6700                       		beq.s	locret_155B6
00017386 4229 0038                  		clr.b	$38(a1)
0001738A 4228 003A                  		clr.b	$3A(a0)
0001738E                            
0001738E                            locret_155B6:
0001738E 4E75                       		rts	
00017390                            ; ===========================================================================
00017390                            
00017390                            loc_155B8:
00017390 4A28 003A                  		tst.b	$3A(a0)
00017394 6600                       		bne.s	loc_155E2
00017396 117C 0001 003A             		move.b	#1,$3A(a0)
0001739C 0829 0002 0022             		btst	#2,$22(a1)
000173A2 6600                       		bne.s	loc_155D0
000173A4 4229 001C                  		clr.b	$1C(a1)
000173A8                            
000173A8                            loc_155D0:
000173A8 08A9 0005 0022             		bclr	#5,$22(a1)
000173AE 137C 0001 001D             		move.b	#1,$1D(a1)
000173B4 137C 0001 0038             		move.b	#1,$38(a1)
000173BA                            
000173BA                            loc_155E2:
000173BA 3029 0020                  		move.w	$20(a1),d0
000173BE 4A68 0036                  		tst.w	$36(a0)
000173C2 6A00                       		bpl.s	loc_15608
000173C4 0C40 FC00                  		cmpi.w	#-$400,d0
000173C8 6F00                       		ble.s	loc_155FA
000173CA 337C FC00 0020             		move.w	#-$400,$20(a1)
000173D0 4E75                       		rts	
000173D2                            ; ===========================================================================
000173D2                            
000173D2                            loc_155FA:
000173D2 0C40 F100                  		cmpi.w	#-$F00,d0
000173D6 6C00                       		bge.s	locret_15606
000173D8 337C F100 0020             		move.w	#-$F00,$20(a1)
000173DE                            
000173DE                            locret_15606:
000173DE 4E75                       		rts	
000173E0                            ; ===========================================================================
000173E0                            
000173E0                            loc_15608:
000173E0 0C40 0400                  		cmpi.w	#$400,d0
000173E4 6C00                       		bge.s	loc_15616
000173E6 337C 0400 0020             		move.w	#$400,$20(a1)
000173EC 4E75                       		rts	
000173EE                            ; ===========================================================================
000173EE                            
000173EE                            loc_15616:
000173EE 0C40 0F00                  		cmpi.w	#$F00,d0
000173F2 6F00                       		ble.s	locret_15622
000173F4 337C 0F00 0020             		move.w	#$F00,$20(a1)
000173FA                            
000173FA                            locret_15622:
000173FA 4E75                       		rts	
000173FC                            ; ===========================================================================
000173FC                            
000173FC                            Obj67_MoveSpot:				; XREF: Obj67_Action
000173FC 3028 0036                  		move.w	$36(a0),d0
00017400 D168 0026                  		add.w	d0,$26(a0)
00017404 1028 0026                  		move.b	$26(a0),d0
00017408 4EB9 0000 29CC             		jsr	(CalcSine).l
0001740E 3428 0030                  		move.w	$30(a0),d2
00017412 3628 0032                  		move.w	$32(a0),d3
00017416 7800                       		moveq	#0,d4
00017418 1828 0034                  		move.b	$34(a0),d4
0001741C E14C                       		lsl.w	#8,d4
0001741E 2A04                       		move.l	d4,d5
00017420 C9C0                       		muls.w	d0,d4
00017422 4844                       		swap	d4
00017424 CBC1                       		muls.w	d1,d5
00017426 4845                       		swap	d5
00017428 D842                       		add.w	d2,d4
0001742A DA43                       		add.w	d3,d5
0001742C 3144 000C                  		move.w	d4,$C(a0)
00017430 3145 0008                  		move.w	d5,8(a0)
00017434 4E75                       		rts	
00017436                            ; ===========================================================================
00017436                            
00017436                            Obj67_ChkDel:				; XREF: Obj67_Action
00017436 3028 0032                  		move.w	$32(a0),d0
0001743A 0240 FF80                  		andi.w	#-$80,d0
0001743E 3238 F700                  		move.w	($FFFFF700).w,d1
00017442 0441 0080                  		subi.w	#$80,d1
00017446 0241 FF80                  		andi.w	#-$80,d1
0001744A 9041                       		sub.w	d1,d0
0001744C 0C40 0280                  		cmpi.w	#$280,d0
00017450 6200                       		bhi.s	Obj67_Delete
00017452 4EF9 0000 E7DE             		jmp	DisplaySprite
00017458                            ; ===========================================================================
00017458                            
00017458                            Obj67_Delete:
00017458 4EF9 0000 E82E             		jmp	DeleteObject
0001745E                            ; ===========================================================================
0001745E                            ; ---------------------------------------------------------------------------
0001745E                            ; Sprite mappings - disc that you run around (SBZ)
0001745E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001745E                            ; part of the level tiles.)
0001745E                            ; ---------------------------------------------------------------------------
0001745E                            Map_obj67:
0001745E                            	include "_maps\obj67.asm"
0001745E                            ; ---------------------------------------------------------------------------
0001745E                            ; Sprite mappings - disc that you run around (SBZ)
0001745E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001745E                            ; part of the level tiles.)
0001745E                            ; ---------------------------------------------------------------------------
0001745E 0000                       		dc.w byte_15688-Map_obj67
00017460 01                         byte_15688:	dc.b 1
00017461 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017466                            		even
00017466                            		even
00017466                            
00017466                            ; ===========================================================================
00017466                            ; ---------------------------------------------------------------------------
00017466                            ; Object 68 - conveyor belts (SBZ)
00017466                            ; ---------------------------------------------------------------------------
00017466                            
00017466                            Obj68:					; XREF: Obj_Index
00017466 7000                       		moveq	#0,d0
00017468 1028 0024                  		move.b	$24(a0),d0
0001746C 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00017470 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00017474                            ; ===========================================================================
00017474 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00017476 0000                       		dc.w Obj68_Action-Obj68_Index
00017478                            ; ===========================================================================
00017478                            
00017478                            Obj68_Main:				; XREF: Obj68_Index
00017478 5428 0024                  		addq.b	#2,$24(a0)
0001747C 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00017482 1228 0028                  		move.b	$28(a0),d1	; get object type
00017486 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001748A 6700                       		beq.s	loc_156BA	; if zero, branch
0001748C 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00017492                            
00017492                            loc_156BA:
00017492 1228 0028                  		move.b	$28(a0),d1	; get object type
00017496 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001749A 4881                       		ext.w	d1
0001749C E841                       		asr.w	#4,d1
0001749E 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000174A2                            
000174A2                            Obj68_Action:				; XREF: Obj68_Index
000174A2 6100                       		bsr.s	Obj68_MoveSonic
000174A4 3028 0008                  		move.w	8(a0),d0
000174A8 0240 FF80                  		andi.w	#$FF80,d0
000174AC 3238 F700                  		move.w	($FFFFF700).w,d1
000174B0 0441 0080                  		subi.w	#$80,d1
000174B4 0241 FF80                  		andi.w	#$FF80,d1
000174B8 9041                       		sub.w	d1,d0
000174BA 0C40 0280                  		cmpi.w	#$280,d0
000174BE 6300                       		bls.s	Obj68_NoDel
000174C0                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
000174C0                            	;	beq.s	Obj68_Delete		; if it's zero, don't remember object
000174C0                            	;	movea.w	d0,a2	; load address into a2
000174C0                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000174C0 6000                       		bra.s	Obj68_Delete	; and delete object
000174C2                            
000174C2                            Obj68_NoDel:
000174C2 4E75                       		rts	
000174C4                            ; ===========================================================================
000174C4                            
000174C4                            Obj68_Delete:
000174C4 4EF9 0000 E82E             		jmp	DeleteObject
000174CA                            ; ===========================================================================
000174CA                            
000174CA                            Obj68_MoveSonic:			; XREF: Obj68_Action
000174CA 7400                       		moveq	#0,d2
000174CC 1428 0038                  		move.b	$38(a0),d2
000174D0 3602                       		move.w	d2,d3
000174D2 D643                       		add.w	d3,d3
000174D4 43F8 D000                  		lea	($FFFFD000).w,a1
000174D8 3029 0008                  		move.w	8(a1),d0
000174DC 9068 0008                  		sub.w	8(a0),d0
000174E0 D042                       		add.w	d2,d0
000174E2 B043                       		cmp.w	d3,d0
000174E4 6400                       		bcc.s	locret_1572E
000174E6 3229 000C                  		move.w	$C(a1),d1
000174EA 9268 000C                  		sub.w	$C(a0),d1
000174EE 0641 0030                  		addi.w	#$30,d1
000174F2 0C41 0030                  		cmpi.w	#$30,d1
000174F6 6400                       		bcc.s	locret_1572E
000174F8 0829 0001 0022             		btst	#1,$22(a1)
000174FE 6600                       		bne.s	locret_1572E
00017500 3028 0036                  		move.w	$36(a0),d0
00017504 D169 0008                  		add.w	d0,8(a1)
00017508                            
00017508                            locret_1572E:
00017508 4E75                       		rts	
0001750A                            
0001750A                            ; ===========================================================================
0001750A                            ; ---------------------------------------------------------------------------
0001750A                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001750A                            ; ---------------------------------------------------------------------------
0001750A                            
0001750A                            Obj69:					; XREF: Obj_Index
0001750A 7000                       		moveq	#0,d0
0001750C 1028 0024                  		move.b	$24(a0),d0
00017510 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00017514 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00017518                            ; ===========================================================================
00017518 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001751A 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001751C 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001751E                            ; ===========================================================================
0001751E                            
0001751E                            Obj69_Main:				; XREF: Obj69_Index
0001751E 5428 0024                  		addq.b	#2,$24(a0)
00017522 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001752A 317C 4492 0002             		move.w	#$4492,2(a0)
00017530 0028 0004 0001             		ori.b	#4,1(a0)
00017536 117C 0080 0019             		move.b	#$80,$19(a0)
0001753C 7000                       		moveq	#0,d0
0001753E 1028 0028                  		move.b	$28(a0),d0
00017542 0240 000F                  		andi.w	#$F,d0
00017546 C0FC 003C                  		mulu.w	#$3C,d0
0001754A 3140 0032                  		move.w	d0,$32(a0)
0001754E 4A28 0028                  		tst.b	$28(a0)
00017552 6A00                       		bpl.s	Obj69_Trapdoor
00017554 5428 0024                  		addq.b	#2,$24(a0)
00017558 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00017560 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017566 117C 0010 0019             		move.b	#$10,$19(a0)
0001756C 117C 0002 001C             		move.b	#2,$1C(a0)
00017572 7000                       		moveq	#0,d0
00017574 1028 0028                  		move.b	$28(a0),d0	; get object type
00017578 3200                       		move.w	d0,d1
0001757A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001757E C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00017582 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00017586 3140 0032                  		move.w	d0,$32(a0)
0001758A 0241 0070                  		andi.w	#$70,d1
0001758E 0641 0010                  		addi.w	#$10,d1
00017592 E549                       		lsl.w	#2,d1
00017594 5341                       		subq.w	#1,d1
00017596 3141 0036                  		move.w	d1,$36(a0)
0001759A 6000                       		bra.s	Obj69_Spinner
0001759C                            ; ===========================================================================
0001759C                            
0001759C                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001759C 5368 0030                  		subq.w	#1,$30(a0)
000175A0 6A00                       		bpl.s	Obj69_Animate
000175A2 3168 0032 0030             		move.w	$32(a0),$30(a0)
000175A8 0868 0000 001C             		bchg	#0,$1C(a0)
000175AE 4A28 0001                  		tst.b	1(a0)
000175B2 6A00                       		bpl.s	Obj69_Animate
000175B4 303C 00BB                  		move.w	#$BB,d0
000175B8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play door sound
000175BE                            
000175BE                            Obj69_Animate:
000175BE 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000175C4 4EB9 0000 B83E             		jsr	AnimateSprite
000175CA 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000175CE 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000175D0 323C 004B                  		move.w	#$4B,d1
000175D4 343C 000C                  		move.w	#$C,d2
000175D8 3602                       		move.w	d2,d3
000175DA 5243                       		addq.w	#1,d3
000175DC 3828 0008                  		move.w	8(a0),d4
000175E0 6100 9B6A                  		bsr.w	SolidObject
000175E4 6000 9842                  		bra.w	MarkObjGone
000175E8                            ; ===========================================================================
000175E8                            
000175E8                            Obj69_NotSolid:
000175E8 0828 0003 0022             		btst	#3,$22(a0)
000175EE 6700                       		beq.s	Obj69_Display
000175F0 43F8 D000                  		lea	($FFFFD000).w,a1
000175F4 08A9 0003 0022             		bclr	#3,$22(a1)
000175FA 08A8 0003 0022             		bclr	#3,$22(a0)
00017600 4228 0025                  		clr.b	$25(a0)
00017604                            
00017604                            Obj69_Display:
00017604 6000 9822                  		bra.w	MarkObjGone
00017608                            ; ===========================================================================
00017608                            
00017608                            Obj69_Spinner:				; XREF: Obj69_Index
00017608 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001760C C068 0036                  		and.w	$36(a0),d0
00017610 6600                       		bne.s	Obj69_Delay
00017612 117C 0001 0034             		move.b	#1,$34(a0)
00017618                            
00017618                            Obj69_Delay:
00017618 4A28 0034                  		tst.b	$34(a0)
0001761C 6700                       		beq.s	Obj69_Animate2
0001761E 5368 0030                  		subq.w	#1,$30(a0)
00017622 6A00                       		bpl.s	Obj69_Animate2
00017624 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001762A 4228 0034                  		clr.b	$34(a0)
0001762E 0868 0000 001C             		bchg	#0,$1C(a0)
00017634                            
00017634                            Obj69_Animate2:
00017634 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001763A 4EB9 0000 B83E             		jsr	AnimateSprite
00017640 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00017644 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00017646 323C 001B                  		move.w	#$1B,d1
0001764A 343C 0007                  		move.w	#7,d2
0001764E 3602                       		move.w	d2,d3
00017650 5243                       		addq.w	#1,d3
00017652 3828 0008                  		move.w	8(a0),d4
00017656 6100 9AF4                  		bsr.w	SolidObject
0001765A 6000 97CC                  		bra.w	MarkObjGone
0001765E                            ; ===========================================================================
0001765E                            
0001765E                            Obj69_NotSolid2:
0001765E 0828 0003 0022             		btst	#3,$22(a0)
00017664 6700                       		beq.s	Obj69_Display2
00017666 43F8 D000                  		lea	($FFFFD000).w,a1
0001766A 08A9 0003 0022             		bclr	#3,$22(a1)
00017670 08A8 0003 0022             		bclr	#3,$22(a0)
00017676 4228 0025                  		clr.b	$25(a0)
0001767A                            
0001767A                            Obj69_Display2:
0001767A 6000 97AC                  		bra.w	MarkObjGone
0001767E                            ; ===========================================================================
0001767E                            Ani_obj69:
0001767E                            	include "_anim\obj69.asm"
0001767E                            ; ---------------------------------------------------------------------------
0001767E                            ; Animation script - trapdoor (SBZ)
0001767E                            ; ---------------------------------------------------------------------------
0001767E 0000                       		dc.w byte_158AC-Ani_obj69
00017680 0000                       		dc.w byte_158B2-Ani_obj69
00017682 0000                       		dc.w byte_158B8-Ani_obj69
00017684 0000                       		dc.w byte_158CC-Ani_obj69
00017686 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001768C 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00017692 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001769F 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000176A6 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000176B3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000176BA                            		even
000176BA                            		even
000176BA                            
000176BA                            ; ---------------------------------------------------------------------------
000176BA                            ; Sprite mappings - trapdoor (SBZ)
000176BA                            ; ---------------------------------------------------------------------------
000176BA                            Map_obj69:
000176BA                            	include "_maps\obj69.asm"
000176BA                            ; ---------------------------------------------------------------------------
000176BA                            ; Sprite mappings - trapdoor (SBZ)
000176BA                            ; ---------------------------------------------------------------------------
000176BA 0000                       		dc.w byte_158E6-Map_obj69
000176BC 0000                       		dc.w byte_158FB-Map_obj69
000176BE 0000                       		dc.w byte_15924-Map_obj69
000176C0 04                         byte_158E6:	dc.b 4
000176C1 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000176C6 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000176CB F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000176D0 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000176D5 08                         byte_158FB:	dc.b 8
000176D6 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000176DB 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000176E0 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000176E5 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000176EA F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000176EF 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000176F4 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000176F9 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000176FE 04                         byte_15924:	dc.b 4
000176FF 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00017704 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00017709 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001770E 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00017714 00                         		even
00017714 00                         		even
00017714                            
00017714                            ; ---------------------------------------------------------------------------
00017714                            ; Sprite mappings - spinning platforms (SBZ)
00017714                            ; ---------------------------------------------------------------------------
00017714                            Map_obj69a:
00017714                            	include "_maps\obj69a.asm"
00017714                            ; ---------------------------------------------------------------------------
00017714                            ; Sprite mappings - spinning platforms (SBZ)
00017714                            ; ---------------------------------------------------------------------------
00017714 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00017718 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0001771C 0000                       		dc.w byte_15970-Map_obj69a
0001771E 02                         byte_15944:	dc.b 2
0001771F F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00017724 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00017729 02                         byte_1594F:	dc.b 2
0001772A F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001772F 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00017734 02                         byte_1595A:	dc.b 2
00017735 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001773A 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001773F 02                         byte_15965:	dc.b 2
00017740 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00017745 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001774A 02                         byte_15970:	dc.b 2
0001774B F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017750 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017756 00                         		even
00017756 00                         		even
00017756                            
00017756                            ; ===========================================================================
00017756                            ; ---------------------------------------------------------------------------
00017756                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017756                            ; ---------------------------------------------------------------------------
00017756                            
00017756                            Obj6A:					; XREF: Obj_Index
00017756 7000                       		moveq	#0,d0
00017758 1028 0024                  		move.b	$24(a0),d0
0001775C 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00017760 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00017764                            ; ===========================================================================
00017764 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017766 0000                       		dc.w Obj6A_Action-Obj6A_Index
00017768                            ; ===========================================================================
00017768                            
00017768                            Obj6A_Main:				; XREF: Obj6A_Index
00017768 5428 0024                  		addq.b	#2,$24(a0)
0001776C 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00017774 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001777A 117C 0004 0001             		move.b	#4,1(a0)
00017780 117C 0004 0018             		move.b	#4,$18(a0)
00017786 117C 0020 0019             		move.b	#$20,$19(a0)
0001778C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017792 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017798 0C28 0003 0028             		cmpi.b	#3,$28(a0)
0001779E 6400                       		bcc.s	Obj6A_Action
000177A0 117C 00A2 0020             		move.b	#$A2,$20(a0)
000177A6                            
000177A6                            Obj6A_Action:				; XREF: Obj6A_Index
000177A6 7000                       		moveq	#0,d0
000177A8 1028 0028                  		move.b	$28(a0),d0
000177AC 0240 0007                  		andi.w	#7,d0
000177B0 D040                       		add.w	d0,d0
000177B2 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000177B6 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000177BA 3028 003A                  		move.w	$3A(a0),d0
000177BE 0240 FF80                  		andi.w	#$FF80,d0
000177C2 3238 F700                  		move.w	($FFFFF700).w,d1
000177C6 0441 0080                  		subi.w	#$80,d1
000177CA 0241 FF80                  		andi.w	#$FF80,d1
000177CE 9041                       		sub.w	d1,d0
000177D0 0C40 0280                  		cmpi.w	#$280,d0
000177D4 6300                       		bls.s	Obj6A_NoDel
000177D6                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
000177D6                            	;	beq.s	Obj6A_Delete		; if it's zero, don't remember object
000177D6                            	;	movea.w	d0,a2	; load address into a2
000177D6                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000177D6 6000                       		bra.s	Obj6A_Delete	; and delete object
000177D8                            
000177D8                            Obj6A_NoDel:
000177D8 4EF9 0000 E7DE             		jmp	DisplaySprite
000177DE                            ; ===========================================================================
000177DE                            
000177DE                            Obj6A_Delete:
000177DE 4EF9 0000 E82E             		jmp	DeleteObject
000177E4                            ; ===========================================================================
000177E4 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000177E8 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000177EC 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000177EE                            ; ===========================================================================
000177EE                            
000177EE                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000177EE 4E75                       		rts	
000177F0                            ; ===========================================================================
000177F0                            
000177F0                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000177F0 323C 0060                  		move.w	#$60,d1
000177F4 7000                       		moveq	#0,d0
000177F6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000177FA 0828 0000 0022             		btst	#0,$22(a0)
00017800 6700                       		beq.s	Obj6A_Animate01
00017802 4440                       		neg.w	d0
00017804 D041                       		add.w	d1,d0
00017806                            
00017806                            Obj6A_Animate01:
00017806 3228 003A                  		move.w	$3A(a0),d1
0001780A 9240                       		sub.w	d0,d1
0001780C 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017810 5328 001E                  		subq.b	#1,$1E(a0)
00017814 6A00                       		bpl.s	loc_15A46
00017816 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001781C 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00017822                            
00017822                            loc_15A46:
00017822 4A28 0001                  		tst.b	1(a0)
00017826 6A00                       		bpl.s	locret_15A60
00017828 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001782C 0240 000F                  		andi.w	#$F,d0
00017830 6600                       		bne.s	locret_15A60
00017832 303C 00B0                  		move.w	#$B0,d0
00017836 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
0001783C                            
0001783C                            locret_15A60:
0001783C 4E75                       		rts	
0001783E                            ; ===========================================================================
0001783E                            
0001783E                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001783E 323C 0030                  		move.w	#$30,d1
00017842 7000                       		moveq	#0,d0
00017844 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017848 0828 0000 0022             		btst	#0,$22(a0)
0001784E 6700                       		beq.s	Obj6A_Animate02
00017850 4440                       		neg.w	d0
00017852 0640 0080                  		addi.w	#$80,d0
00017856                            
00017856                            Obj6A_Animate02:
00017856 3228 0038                  		move.w	$38(a0),d1
0001785A 9240                       		sub.w	d0,d1
0001785C 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017860 5328 001E                  		subq.b	#1,$1E(a0)
00017864 6A00                       		bpl.s	loc_15A96
00017866 117C 0002 001E             		move.b	#2,$1E(a0)
0001786C 0868 0000 001A             		bchg	#0,$1A(a0)
00017872                            
00017872                            loc_15A96:
00017872 4A28 0001                  		tst.b	1(a0)
00017876 6A00                       		bpl.s	locret_15AB0
00017878 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001787C 0C00 0018                  		cmpi.b	#$18,d0
00017880 6600                       		bne.s	locret_15AB0
00017882 303C 00B0                  		move.w	#$B0,d0
00017886 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
0001788C                            
0001788C                            locret_15AB0:
0001788C 4E75                       		rts	
0001788E                            ; ===========================================================================
0001788E                            
0001788E                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001788E 4A28 003D                  		tst.b	$3D(a0)
00017892 6600                       		bne.s	Obj6A_Animate03
00017894 3038 D008                  		move.w	($FFFFD008).w,d0
00017898 0440 00C0                  		subi.w	#$C0,d0
0001789C 6500                       		bcs.s	loc_15B02
0001789E 9068 0008                  		sub.w	8(a0),d0
000178A2 6500                       		bcs.s	loc_15B02
000178A4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000178A8 0440 0080                  		subi.w	#$80,d0
000178AC B068 000C                  		cmp.w	$C(a0),d0
000178B0 6400                       		bcc.s	locret_15B04
000178B2 0640 0100                  		addi.w	#$100,d0
000178B6 B068 000C                  		cmp.w	$C(a0),d0
000178BA 6500                       		bcs.s	locret_15B04
000178BC 117C 0001 003D             		move.b	#1,$3D(a0)
000178C2 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000178C8 117C 00A2 0020             		move.b	#$A2,$20(a0)
000178CE 117C 0002 001A             		move.b	#2,$1A(a0)
000178D4 303C 00B0                  		move.w	#$B0,d0
000178D8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
000178DE                            
000178DE                            loc_15B02:
000178DE 588F                       		addq.l	#4,sp
000178E0                            
000178E0                            locret_15B04:
000178E0 4E75                       		rts	
000178E2                            ; ===========================================================================
000178E2                            
000178E2                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000178E2 4EB9 0000 E7C4             		jsr	SpeedToPos
000178E8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000178EE 5328 001E                  		subq.b	#1,$1E(a0)
000178F2 6A00                       		bpl.s	locret_15B24
000178F4 117C 0002 001E             		move.b	#2,$1E(a0)
000178FA 0868 0000 001A             		bchg	#0,$1A(a0)
00017900                            
00017900                            locret_15B24:
00017900 4E75                       		rts	
00017902                            ; ===========================================================================
00017902                            
00017902                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017902 4A28 003D                  		tst.b	$3D(a0)
00017906 6600                       		bne.s	Obj6A_Animate04
00017908 3038 D008                  		move.w	($FFFFD008).w,d0
0001790C 0640 00E0                  		addi.w	#$E0,d0
00017910 9068 0008                  		sub.w	8(a0),d0
00017914 6400                       		bcc.s	loc_15B74
00017916 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001791A 0440 0080                  		subi.w	#$80,d0
0001791E B068 000C                  		cmp.w	$C(a0),d0
00017922 6400                       		bcc.s	locret_15B76
00017924 0640 0100                  		addi.w	#$100,d0
00017928 B068 000C                  		cmp.w	$C(a0),d0
0001792C 6500                       		bcs.s	locret_15B76
0001792E 117C 0001 003D             		move.b	#1,$3D(a0)
00017934 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001793A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017940 117C 0002 001A             		move.b	#2,$1A(a0)
00017946 303C 00B0                  		move.w	#$B0,d0
0001794A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
00017950                            
00017950                            loc_15B74:
00017950 588F                       		addq.l	#4,sp
00017952                            
00017952                            locret_15B76:
00017952 4E75                       		rts	
00017954                            ; ===========================================================================
00017954                            
00017954                            Obj6A_Animate04:
00017954 4EB9 0000 E7C4             		jsr	SpeedToPos
0001795A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017960 5328 001E                  		subq.b	#1,$1E(a0)
00017964 6A00                       		bpl.s	locret_15B96
00017966 117C 0002 001E             		move.b	#2,$1E(a0)
0001796C 0868 0000 001A             		bchg	#0,$1A(a0)
00017972                            
00017972                            locret_15B96:
00017972 4E75                       		rts	
00017974                            ; ===========================================================================
00017974                            ; ---------------------------------------------------------------------------
00017974                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017974                            ; ---------------------------------------------------------------------------
00017974                            Map_obj6A:
00017974                            	include "_maps\obj6A.asm"
00017974                            ; ---------------------------------------------------------------------------
00017974                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017974                            ; ---------------------------------------------------------------------------
00017974 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017978 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001797C 07                         byte_15BA0:	dc.b 7
0001797D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017982 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017987 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001798C E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017991 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017996 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001799B 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000179A0 07                         byte_15BC4:	dc.b 7
000179A1 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000179A6 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000179AB E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000179B0 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000179B5 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000179BA 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000179BF 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000179C4 04                         byte_15BE8:	dc.b 4
000179C5 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000179CA E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000179CF 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000179D4 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000179D9 04                         byte_15BFD:	dc.b 4
000179DA E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000179DF E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000179E4 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000179E9 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000179EE                            		even
000179EE                            		even
000179EE                            
000179EE                            ; ===========================================================================
000179EE                            ; ---------------------------------------------------------------------------
000179EE                            ; Object 6B - stomper (SBZ)
000179EE                            ; ---------------------------------------------------------------------------
000179EE                            
000179EE                            Obj6B:					; XREF: Obj_Index
000179EE 7000                       		moveq	#0,d0
000179F0 1028 0024                  		move.b	$24(a0),d0
000179F4 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000179F8 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000179FC                            ; ===========================================================================
000179FC 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000179FE 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017A00                            
00017A00 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017A04 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017A08 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017A0C 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017A10 8040 0005                  		dc.b  $80, $40,	  0,   5
00017A14                            ; ===========================================================================
00017A14                            
00017A14                            Obj6B_Main:				; XREF: Obj6B_Index
00017A14 5428 0024                  		addq.b	#2,$24(a0)
00017A18 7000                       		moveq	#0,d0
00017A1A 1028 0028                  		move.b	$28(a0),d0
00017A1E E448                       		lsr.w	#2,d0
00017A20 0240 001C                  		andi.w	#$1C,d0
00017A24 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017A28 115B 0019                  		move.b	(a3)+,$19(a0)
00017A2C 115B 0016                  		move.b	(a3)+,$16(a0)
00017A30 E448                       		lsr.w	#2,d0
00017A32 1140 001A                  		move.b	d0,$1A(a0)
00017A36 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017A3E 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017A44 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017A4A 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017A4C 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017A52 6700                       		beq.s	Obj6B_SBZ3
00017A54                            
00017A54                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017A54 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017A58 6700                       		beq.s	Obj6B_Delete		; if it's zero, don't remember object
00017A5A 3440                       		movea.w	d0,a2	; load address into a2
00017A5C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017A60                            
00017A60                            Obj6B_Delete:
00017A60 4EF9 0000 E82E             		jmp	DeleteObject
00017A66                            ; ===========================================================================
00017A66                            
00017A66                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017A66 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017A6C 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017A72 6600                       		bne.s	Obj6B_SBZ12
00017A74 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017A78 6700                       		beq.s	Obj6B_SBZ12		; if it's zero, don't remember object
00017A7A 3440                       		movea.w	d0,a2	; load address into a2
00017A7C 0812 0000                  		btst	#0,(a2)
00017A80 6700                       		beq.s	Obj6B_SBZ12
00017A82 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017A86 60CC                       		bra.s	Obj6B_ChkGone
00017A88                            ; ===========================================================================
00017A88                            
00017A88                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017A88 0028 0004 0001             		ori.b	#4,1(a0)
00017A8E 117C 0004 0018             		move.b	#4,$18(a0)
00017A94 3168 0008 0034             		move.w	8(a0),$34(a0)
00017A9A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017AA0 7000                       		moveq	#0,d0
00017AA2 101B                       		move.b	(a3)+,d0
00017AA4 3140 003C                  		move.w	d0,$3C(a0)
00017AA8 7000                       		moveq	#0,d0
00017AAA 1028 0028                  		move.b	$28(a0),d0
00017AAE 6A00                       		bpl.s	Obj6B_Action
00017AB0 0200 000F                  		andi.b	#$F,d0
00017AB4 1140 003E                  		move.b	d0,$3E(a0)
00017AB8 1153 0028                  		move.b	(a3),$28(a0)
00017ABC 0C13 0005                  		cmpi.b	#5,(a3)
00017AC0 6600                       		bne.s	Obj6B_ChkGone2
00017AC2 08E8 0004 0001             		bset	#4,1(a0)
00017AC8                            
00017AC8                            Obj6B_ChkGone2:
00017AC8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017ACC 6700                       		beq.s	Obj6B_Action		; if it's zero, don't remember object
00017ACE 3440                       		movea.w	d0,a2	; load address into a2
00017AD0 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017AD4                            
00017AD4                            Obj6B_Action:				; XREF: Obj6B_Index
00017AD4 3F28 0008                  		move.w	8(a0),-(sp)
00017AD8 7000                       		moveq	#0,d0
00017ADA 1028 0028                  		move.b	$28(a0),d0
00017ADE 0240 000F                  		andi.w	#$F,d0
00017AE2 D040                       		add.w	d0,d0
00017AE4 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017AE8 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017AEC 381F                       		move.w	(sp)+,d4
00017AEE 4A28 0001                  		tst.b	1(a0)
00017AF2 6A00                       		bpl.s	Obj6B_ChkDel
00017AF4 7200                       		moveq	#0,d1
00017AF6 1228 0019                  		move.b	$19(a0),d1
00017AFA 0641 000B                  		addi.w	#$B,d1
00017AFE 7400                       		moveq	#0,d2
00017B00 1428 0016                  		move.b	$16(a0),d2
00017B04 3602                       		move.w	d2,d3
00017B06 5243                       		addq.w	#1,d3
00017B08 6100 9642                  		bsr.w	SolidObject
00017B0C                            
00017B0C                            Obj6B_ChkDel:
00017B0C 3028 0034                  		move.w	$34(a0),d0
00017B10 0240 FF80                  		andi.w	#$FF80,d0
00017B14 3238 F700                  		move.w	($FFFFF700).w,d1
00017B18 0441 0080                  		subi.w	#$80,d1
00017B1C 0241 FF80                  		andi.w	#$FF80,d1
00017B20 9041                       		sub.w	d1,d0
00017B22 0C40 0280                  		cmpi.w	#$280,d0
00017B26 6200                       		bhi.s	loc_15D64
00017B28 4EF9 0000 E7DE             		jmp	DisplaySprite
00017B2E                            ; ===========================================================================
00017B2E                            
00017B2E                            loc_15D64:
00017B2E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017B34 6600                       		bne.s	Obj6B_Delete2
00017B36 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017B3A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017B3E 6700                       		beq.s	Obj6B_Delete2		; if it's zero, don't remember object
00017B40 3440                       		movea.w	d0,a2	; load address into a2
00017B42 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017B46                            
00017B46                            Obj6B_Delete2:
00017B46 4EF9 0000 E82E             		jmp	DeleteObject
00017B4C                            ; ===========================================================================
00017B4C 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017B50 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017B54 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017B58                            ; ===========================================================================
00017B58                            
00017B58                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017B58 4E75                       		rts	
00017B5A                            ; ===========================================================================
00017B5A                            
00017B5A                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017B5A 4A28 0038                  		tst.b	$38(a0)
00017B5E 6600                       		bne.s	loc_15DB4
00017B60 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017B64 7000                       		moveq	#0,d0
00017B66 1028 003E                  		move.b	$3E(a0),d0
00017B6A 0832 0000 0000             		btst	#0,(a2,d0.w)
00017B70 6700                       		beq.s	loc_15DC2
00017B72 117C 0001 0038             		move.b	#1,$38(a0)
00017B78                            
00017B78                            loc_15DB4:
00017B78 3028 003C                  		move.w	$3C(a0),d0
00017B7C B068 003A                  		cmp.w	$3A(a0),d0
00017B80 6700                       		beq.s	loc_15DE0
00017B82 5468 003A                  		addq.w	#2,$3A(a0)
00017B86                            
00017B86                            loc_15DC2:
00017B86 3028 003A                  		move.w	$3A(a0),d0
00017B8A 0828 0000 0022             		btst	#0,$22(a0)
00017B90 6700                       		beq.s	loc_15DD4
00017B92 4440                       		neg.w	d0
00017B94 0640 0080                  		addi.w	#$80,d0
00017B98                            
00017B98                            loc_15DD4:
00017B98 3228 0034                  		move.w	$34(a0),d1
00017B9C 9240                       		sub.w	d0,d1
00017B9E 3141 0008                  		move.w	d1,8(a0)
00017BA2 4E75                       		rts	
00017BA4                            ; ===========================================================================
00017BA4                            
00017BA4                            loc_15DE0:
00017BA4 5228 0028                  		addq.b	#1,$28(a0)
00017BA8 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017BAE 4228 0038                  		clr.b	$38(a0)
00017BB2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017BB6 67CE                       		beq.s	loc_15DC2		; if it's zero, don't remember object
00017BB8 3440                       		movea.w	d0,a2	; load address into a2
00017BBA 08D2 0000                  		bset	#0,(a2)
00017BBE 60C6                       		bra.s	loc_15DC2
00017BC0                            ; ===========================================================================
00017BC0                            
00017BC0                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00017BC0 4A28 0038                  		tst.b	$38(a0)
00017BC4 6600                       		bne.s	loc_15E14
00017BC6 5368 0036                  		subq.w	#1,$36(a0)
00017BCA 6600                       		bne.s	loc_15E1E
00017BCC 117C 0001 0038             		move.b	#1,$38(a0)
00017BD2                            
00017BD2                            loc_15E14:
00017BD2 4A68 003A                  		tst.w	$3A(a0)
00017BD6 6700                       		beq.s	loc_15E3C
00017BD8 5568 003A                  		subq.w	#2,$3A(a0)
00017BDC                            
00017BDC                            loc_15E1E:
00017BDC 3028 003A                  		move.w	$3A(a0),d0
00017BE0 0828 0000 0022             		btst	#0,$22(a0)
00017BE6 6700                       		beq.s	loc_15E30
00017BE8 4440                       		neg.w	d0
00017BEA 0640 0080                  		addi.w	#$80,d0
00017BEE                            
00017BEE                            loc_15E30:
00017BEE 3228 0034                  		move.w	$34(a0),d1
00017BF2 9240                       		sub.w	d0,d1
00017BF4 3141 0008                  		move.w	d1,8(a0)
00017BF8 4E75                       		rts	
00017BFA                            ; ===========================================================================
00017BFA                            
00017BFA                            loc_15E3C:
00017BFA 5328 0028                  		subq.b	#1,$28(a0)
00017BFE 4228 0038                  		clr.b	$38(a0)
00017C02 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017C06 67D4                       		beq.s	loc_15E1E		; if it's zero, don't remember object
00017C08 3440                       		movea.w	d0,a2	; load address into a2
00017C0A 0892 0000                  		bclr	#0,(a2)
00017C0E 60CC                       		bra.s	loc_15E1E
00017C10                            ; ===========================================================================
00017C10                            
00017C10                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017C10 4A28 0038                  		tst.b	$38(a0)
00017C14 6600                       		bne.s	loc_15E7C
00017C16 4A68 003A                  		tst.w	$3A(a0)
00017C1A 6700                       		beq.s	loc_15E6A
00017C1C 5368 003A                  		subq.w	#1,$3A(a0)
00017C20 6000                       		bra.s	loc_15E8E
00017C22                            ; ===========================================================================
00017C22                            
00017C22                            loc_15E6A:
00017C22 5368 0036                  		subq.w	#1,$36(a0)
00017C26 6A00                       		bpl.s	loc_15E8E
00017C28 317C 003C 0036             		move.w	#$3C,$36(a0)
00017C2E 117C 0001 0038             		move.b	#1,$38(a0)
00017C34                            
00017C34                            loc_15E7C:
00017C34 5068 003A                  		addq.w	#8,$3A(a0)
00017C38 3028 003A                  		move.w	$3A(a0),d0
00017C3C B068 003C                  		cmp.w	$3C(a0),d0
00017C40 6600                       		bne.s	loc_15E8E
00017C42 4228 0038                  		clr.b	$38(a0)
00017C46                            
00017C46                            loc_15E8E:
00017C46 3028 003A                  		move.w	$3A(a0),d0
00017C4A 0828 0000 0022             		btst	#0,$22(a0)
00017C50 6700                       		beq.s	loc_15EA0
00017C52 4440                       		neg.w	d0
00017C54 0640 0038                  		addi.w	#$38,d0
00017C58                            
00017C58                            loc_15EA0:
00017C58 3228 0030                  		move.w	$30(a0),d1
00017C5C D240                       		add.w	d0,d1
00017C5E 3141 000C                  		move.w	d1,$C(a0)
00017C62 4E75                       		rts	
00017C64                            ; ===========================================================================
00017C64                            
00017C64                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017C64 4A28 0038                  		tst.b	$38(a0)
00017C68 6600                       		bne.s	loc_15ED0
00017C6A 4A68 003A                  		tst.w	$3A(a0)
00017C6E 6700                       		beq.s	loc_15EBE
00017C70 5168 003A                  		subq.w	#8,$3A(a0)
00017C74 6000                       		bra.s	loc_15EF0
00017C76                            ; ===========================================================================
00017C76                            
00017C76                            loc_15EBE:
00017C76 5368 0036                  		subq.w	#1,$36(a0)
00017C7A 6A00                       		bpl.s	loc_15EF0
00017C7C 317C 003C 0036             		move.w	#$3C,$36(a0)
00017C82 117C 0001 0038             		move.b	#1,$38(a0)
00017C88                            
00017C88                            loc_15ED0:
00017C88 3028 003A                  		move.w	$3A(a0),d0
00017C8C B068 003C                  		cmp.w	$3C(a0),d0
00017C90 6700                       		beq.s	loc_15EE0
00017C92 5068 003A                  		addq.w	#8,$3A(a0)
00017C96 6000                       		bra.s	loc_15EF0
00017C98                            ; ===========================================================================
00017C98                            
00017C98                            loc_15EE0:
00017C98 5368 0036                  		subq.w	#1,$36(a0)
00017C9C 6A00                       		bpl.s	loc_15EF0
00017C9E 317C 003C 0036             		move.w	#$3C,$36(a0)
00017CA4 4228 0038                  		clr.b	$38(a0)
00017CA8                            
00017CA8                            loc_15EF0:
00017CA8 3028 003A                  		move.w	$3A(a0),d0
00017CAC 0828 0000 0022             		btst	#0,$22(a0)
00017CB2 6700                       		beq.s	loc_15F02
00017CB4 4440                       		neg.w	d0
00017CB6 0640 0038                  		addi.w	#$38,d0
00017CBA                            
00017CBA                            loc_15F02:
00017CBA 3228 0030                  		move.w	$30(a0),d1
00017CBE D240                       		add.w	d0,d1
00017CC0 3141 000C                  		move.w	d1,$C(a0)
00017CC4 4E75                       		rts	
00017CC6                            ; ===========================================================================
00017CC6                            
00017CC6                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00017CC6 4A28 0038                  		tst.b	$38(a0)
00017CCA 6600                       		bne.s	loc_15F3E
00017CCC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017CD0 7000                       		moveq	#0,d0
00017CD2 1028 003E                  		move.b	$3E(a0),d0
00017CD6 0832 0000 0000             		btst	#0,(a2,d0.w)
00017CDC 6700                       		beq.s	locret_15F5C
00017CDE 117C 0001 0038             		move.b	#1,$38(a0)
00017CE4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017CE8 6700                       		beq.s	loc_15F3E		; if it's zero, don't remember object
00017CEA 3440                       		movea.w	d0,a2	; load address into a2
00017CEC 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017CF0                            
00017CF0                            loc_15F3E:
00017CF0 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017CF8 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017D00 3168 0008 0034             		move.w	8(a0),$34(a0)
00017D06 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017D0C 6700                       		beq.s	loc_15F5E
00017D0E                            
00017D0E                            locret_15F5C:
00017D0E 4E75                       		rts	
00017D10                            ; ===========================================================================
00017D10                            
00017D10                            loc_15F5E:
00017D10 4228 0028                  		clr.b	$28(a0)
00017D14 4228 0038                  		clr.b	$38(a0)
00017D18 4E75                       		rts	
00017D1A                            ; ===========================================================================
00017D1A                            ; ---------------------------------------------------------------------------
00017D1A                            ; Sprite mappings - stomper and	platforms (SBZ)
00017D1A                            ; ---------------------------------------------------------------------------
00017D1A                            Map_obj6B:
00017D1A                            	include "_maps\obj6B.asm"
00017D1A                            ; ---------------------------------------------------------------------------
00017D1A                            ; Sprite mappings - stomper and	platforms (SBZ)
00017D1A                            ; ---------------------------------------------------------------------------
00017D1A 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017D1E 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017D22 0000                       		dc.w byte_15FB0-Map_obj6B
00017D24 04                         byte_15F72:	dc.b 4
00017D25 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017D2A F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017D2F F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017D34 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017D39 08                         byte_15F87:	dc.b 8
00017D3A E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017D3F E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017D44 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017D49 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017D4E 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017D53 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017D58 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017D5D 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017D62 0E                         byte_15FB0:	dc.b $E
00017D63 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017D68 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017D6D C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017D72 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00017D77 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017D7C C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00017D81 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00017D86 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00017D8B E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00017D90 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00017D95 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00017D9A 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00017D9F 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00017DA4 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00017DAA 00                         		even
00017DAA 00                         		even
00017DAA                            
00017DAA                            ; ===========================================================================
00017DAA                            ; ---------------------------------------------------------------------------
00017DAA                            ; Object 6C - vanishing	platforms (SBZ)
00017DAA                            ; ---------------------------------------------------------------------------
00017DAA                            
00017DAA                            Obj6C:					; XREF: Obj_Index
00017DAA 7000                       		moveq	#0,d0
00017DAC 1028 0024                  		move.b	$24(a0),d0
00017DB0 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00017DB4 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00017DB8                            ; ===========================================================================
00017DB8 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00017DBA 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017DBC 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017DBE 0000                       		dc.w loc_16068-Obj6C_Index
00017DC0                            ; ===========================================================================
00017DC0                            
00017DC0                            Obj6C_Main:				; XREF: Obj6C_Index
00017DC0 5C28 0024                  		addq.b	#6,$24(a0)
00017DC4 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00017DCC 317C 44C3 0002             		move.w	#$44C3,2(a0)
00017DD2 0028 0004 0001             		ori.b	#4,1(a0)
00017DD8 117C 0010 0019             		move.b	#$10,$19(a0)
00017DDE 117C 0004 0018             		move.b	#4,$18(a0)
00017DE4 7000                       		moveq	#0,d0
00017DE6 1028 0028                  		move.b	$28(a0),d0	; get object type
00017DEA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017DEE 5240                       		addq.w	#1,d0		; add 1
00017DF0 EF48                       		lsl.w	#7,d0		; multiply by $80
00017DF2 3200                       		move.w	d0,d1
00017DF4 5340                       		subq.w	#1,d0
00017DF6 3140 0030                  		move.w	d0,$30(a0)
00017DFA 3140 0032                  		move.w	d0,$32(a0)
00017DFE 7000                       		moveq	#0,d0
00017E00 1028 0028                  		move.b	$28(a0),d0	; get object type
00017E04 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017E08 0641 0080                  		addi.w	#$80,d1
00017E0C C0C1                       		mulu.w	d1,d0
00017E0E E088                       		lsr.l	#8,d0
00017E10 3140 0036                  		move.w	d0,$36(a0)
00017E14 5341                       		subq.w	#1,d1
00017E16 3141 0038                  		move.w	d1,$38(a0)
00017E1A                            
00017E1A                            loc_16068:				; XREF: Obj6C_Index
00017E1A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017E1E 9068 0036                  		sub.w	$36(a0),d0
00017E22 C068 0038                  		and.w	$38(a0),d0
00017E26 6600                       		bne.s	Obj6C_Animate
00017E28 5928 0024                  		subq.b	#4,$24(a0)
00017E2C 6000                       		bra.s	Obj6C_Vanish
00017E2E                            ; ===========================================================================
00017E2E                            
00017E2E                            Obj6C_Animate:
00017E2E 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017E34 4EB9 0000 B83E             		jsr	AnimateSprite
00017E3A 6000 8FEC                  		bra.w	MarkObjGone
00017E3E                            ; ===========================================================================
00017E3E                            
00017E3E                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017E3E 5368 0030                  		subq.w	#1,$30(a0)
00017E42 6A00                       		bpl.s	loc_160AA
00017E44 317C 007F 0030             		move.w	#127,$30(a0)
00017E4A 4A28 001C                  		tst.b	$1C(a0)
00017E4E 6700                       		beq.s	loc_160A4
00017E50 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017E56                            
00017E56                            loc_160A4:
00017E56 0868 0000 001C             		bchg	#0,$1C(a0)
00017E5C                            
00017E5C                            loc_160AA:
00017E5C 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017E62 4EB9 0000 B83E             		jsr	AnimateSprite
00017E68 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017E6E 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00017E70 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00017E76 6600                       		bne.s	loc_160D6
00017E78 7200                       		moveq	#0,d1
00017E7A 1228 0019                  		move.b	$19(a0),d1
00017E7E 4EB9 0000 8510             		jsr	(PlatformObject).l
00017E84 6000 8FA2                  		bra.w	MarkObjGone
00017E88                            ; ===========================================================================
00017E88                            
00017E88                            loc_160D6:
00017E88 7200                       		moveq	#0,d1
00017E8A 1228 0019                  		move.b	$19(a0),d1
00017E8E 4EB9 0000 8684             		jsr	(ExitPlatform).l
00017E94 3428 0008                  		move.w	8(a0),d2
00017E98 4EB9 0000 8BFA             		jsr	(MvSonicOnPtfm2).l
00017E9E 6000 8F88                  		bra.w	MarkObjGone
00017EA2                            ; ===========================================================================
00017EA2                            
00017EA2                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00017EA2 0828 0003 0022             		btst	#3,$22(a0)
00017EA8 6700                       		beq.s	Obj6C_Display
00017EAA 43F8 D000                  		lea	($FFFFD000).w,a1
00017EAE 08A9 0003 0022             		bclr	#3,$22(a1)
00017EB4 08A8 0003 0022             		bclr	#3,$22(a0)
00017EBA 117C 0002 0024             		move.b	#2,$24(a0)
00017EC0 4228 0025                  		clr.b	$25(a0)
00017EC4                            
00017EC4                            Obj6C_Display:
00017EC4 6000 8F62                  		bra.w	MarkObjGone
00017EC8                            ; ===========================================================================
00017EC8                            Ani_obj6C:
00017EC8                            	include "_anim\obj6C.asm"
00017EC8                            ; ---------------------------------------------------------------------------
00017EC8                            ; Animation script - vanishing platforms (SBZ)
00017EC8                            ; ---------------------------------------------------------------------------
00017EC8 0000                       		dc.w byte_1611A-Ani_obj6C
00017ECA 0000                       		dc.w byte_16122-Ani_obj6C
00017ECC 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00017ED4 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017EDC                            		even
00017EDC                            		even
00017EDC                            
00017EDC                            ; ---------------------------------------------------------------------------
00017EDC                            ; Sprite mappings - vanishing platforms	(SBZ)
00017EDC                            ; ---------------------------------------------------------------------------
00017EDC                            Map_obj6C:
00017EDC                            	include "_maps\obj6C.asm"
00017EDC                            ; ---------------------------------------------------------------------------
00017EDC                            ; Sprite mappings - vanishing platforms	(SBZ)
00017EDC                            ; ---------------------------------------------------------------------------
00017EDC 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00017EE0 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00017EE4 01                         byte_16132:	dc.b 1
00017EE5 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017EEA 01                         byte_16138:	dc.b 1
00017EEB F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00017EF0 01                         byte_1613E:	dc.b 1
00017EF1 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00017EF6 00                         byte_16144:	dc.b 0
00017EF8 00                         		even
00017EF8 00                         		even
00017EF8                            
00017EF8                            ; ===========================================================================
00017EF8                            ; ---------------------------------------------------------------------------
00017EF8                            ; Object 6E - electrocution orbs (SBZ)
00017EF8                            ; ---------------------------------------------------------------------------
00017EF8                            
00017EF8                            Obj6E:					; XREF: Obj_Index
00017EF8 7000                       		moveq	#0,d0
00017EFA 1028 0024                  		move.b	$24(a0),d0
00017EFE 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00017F02 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00017F06                            ; ===========================================================================
00017F06 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00017F08 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00017F0A                            ; ===========================================================================
00017F0A                            
00017F0A                            Obj6E_Main:				; XREF: Obj6E_Index
00017F0A 5428 0024                  		addq.b	#2,$24(a0)
00017F0E 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00017F16 317C 047E 0002             		move.w	#$47E,2(a0)
00017F1C 0028 0004 0001             		ori.b	#4,1(a0)
00017F22 117C 0028 0019             		move.b	#$28,$19(a0)
00017F28 7000                       		moveq	#0,d0
00017F2A 1028 0028                  		move.b	$28(a0),d0	; read object type
00017F2E E948                       		lsl.w	#4,d0		; multiply by $10
00017F30 5340                       		subq.w	#1,d0
00017F32 3140 0034                  		move.w	d0,$34(a0)
00017F36                            
00017F36                            Obj6E_Shock:				; XREF: Obj6E_Index
00017F36 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017F3A C068 0034                  		and.w	$34(a0),d0
00017F3E 6600                       		bne.s	Obj6E_Animate
00017F40 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00017F46 4A28 0001                  		tst.b	1(a0)
00017F4A 6A00                       		bpl.s	Obj6E_Animate
00017F4C 303C 00B1                  		move.w	#$B1,d0
00017F50 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play electricity sound
00017F56                            
00017F56                            Obj6E_Animate:
00017F56 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00017F5C 4EB9 0000 B83E             		jsr	AnimateSprite
00017F62 117C 0000 0020             		move.b	#0,$20(a0)
00017F68 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017F6E 6600                       		bne.s	Obj6E_Display	; if not, branch
00017F70 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00017F76                            
00017F76                            Obj6E_Display:
00017F76 6000 8EB0                  		bra.w	MarkObjGone
00017F7A                            ; ===========================================================================
00017F7A                            Ani_obj6E:
00017F7A                            	include "_anim\obj6E.asm"
00017F7A                            ; ---------------------------------------------------------------------------
00017F7A                            ; Animation script - electrocution orbs (SBZ)
00017F7A                            ; ---------------------------------------------------------------------------
00017F7A 0000                       		dc.w byte_161CC-Ani_obj6E
00017F7C 0000                       		dc.w byte_161D0-Ani_obj6E
00017F7E 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00017F82 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00017F92                            		even
00017F92                            		even
00017F92                            
00017F92                            ; ---------------------------------------------------------------------------
00017F92                            ; Sprite mappings - electrocution orbs (SBZ)
00017F92                            ; ---------------------------------------------------------------------------
00017F92                            Map_obj6E:
00017F92                            	include "_maps\obj6E.asm"
00017F92                            ; ---------------------------------------------------------------------------
00017F92                            ; Sprite mappings - electrocution orbs (SBZ)
00017F92                            ; ---------------------------------------------------------------------------
00017F92 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00017F96 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00017F9A 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00017F9E 02                         byte_161EC:	dc.b 2
00017F9F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017FA4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017FA9 03                         byte_161F7:	dc.b 3
00017FAA F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017FAF F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017FB4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017FB9 05                         byte_16207:	dc.b 5
00017FBA F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017FBF F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017FC4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017FC9 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017FCE F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017FD3 04                         byte_16221:	dc.b 4
00017FD4 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017FD9 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017FDE F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017FE3 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017FE8 06                         byte_16236:	dc.b 6
00017FE9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017FEE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017FF3 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00017FF8 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00017FFD F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00018002 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00018007 04                         byte_16255:	dc.b 4
00018008 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001800D 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018012 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00018017 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
0001801C                            		even
0001801C                            		even
0001801C                            
0001801C                            ; ===========================================================================
0001801C                            ; ---------------------------------------------------------------------------
0001801C                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
0001801C                            ; ---------------------------------------------------------------------------
0001801C                            
0001801C                            Obj6F:					; XREF: Obj_Index
0001801C 7000                       		moveq	#0,d0
0001801E 1028 0024                  		move.b	$24(a0),d0
00018022 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00018026 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
0001802A 3028 0030                  		move.w	$30(a0),d0
0001802E 0240 FF80                  		andi.w	#$FF80,d0
00018032 3238 F700                  		move.w	($FFFFF700).w,d1
00018036 0441 0080                  		subi.w	#$80,d1
0001803A 0241 FF80                  		andi.w	#$FF80,d1
0001803E 9041                       		sub.w	d1,d0
00018040 0C40 0280                  		cmpi.w	#$280,d0
00018044 6300                       		bls.s	Obj6F_Display
00018046                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00018046                            	;	beq.s	loc_1629A		; if it's zero, don't remember object
00018046                            	;	movea.w	d0,a2	; load address into a2
00018046                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018046 6000                       		bra.s	loc_1629A	; and delete object
00018048                            
00018048                            Obj6F_Display:
00018048 4EF9 0000 E7DE             		jmp	DisplaySprite
0001804E                            ; ===========================================================================
0001804E                            
0001804E                            loc_1629A:
0001804E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00018054 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00018056 0C40 FF80                  		cmpi.w	#-$80,d0
0001805A 64EC                       		bcc.s	Obj6F_Display
0001805C                            
0001805C                            Obj6F_Act1or2:
0001805C 1028 002F                  		move.b	$2F(a0),d0
00018060 6A00                       		bpl.s	Obj6F_Delete
00018062 0240 007F                  		andi.w	#$7F,d0
00018066 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001806A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00018070                            
00018070                            Obj6F_Delete:
00018070 4EF9 0000 E82E             		jmp	DeleteObject
00018076                            ; ===========================================================================
00018076 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00018078 0000                       		dc.w loc_163D8-Obj6F_Index
0001807A                            ; ===========================================================================
0001807A                            
0001807A                            Obj6F_Main:				; XREF: Obj6F_Index
0001807A 1028 0028                  		move.b	$28(a0),d0
0001807E 6B00 0000                  		bmi.w	loc_16380
00018082 5428 0024                  		addq.b	#2,$24(a0)
00018086 217C 0001 7714 0004        		move.l	#Map_obj69a,4(a0)
0001808E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00018094 117C 0010 0019             		move.b	#$10,$19(a0)
0001809A 0028 0004 0001             		ori.b	#4,1(a0)
000180A0 117C 0004 0018             		move.b	#4,$18(a0)
000180A6 7000                       		moveq	#0,d0
000180A8 1028 0028                  		move.b	$28(a0),d0
000180AC 3200                       		move.w	d0,d1
000180AE E648                       		lsr.w	#3,d0
000180B0 0240 001E                  		andi.w	#$1E,d0
000180B4 45FA 0000                  		lea	off_164A6(pc),a2
000180B8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000180BC 315A 0038                  		move.w	(a2)+,$38(a0)
000180C0 315A 0030                  		move.w	(a2)+,$30(a0)
000180C4 214A 003C                  		move.l	a2,$3C(a0)
000180C8 0241 000F                  		andi.w	#$F,d1
000180CC E549                       		lsl.w	#2,d1
000180CE 1141 0038                  		move.b	d1,$38(a0)
000180D2 117C 0004 003A             		move.b	#4,$3A(a0)
000180D8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000180DC 6700                       		beq.s	loc_16356
000180DE 117C 0001 003B             		move.b	#1,$3B(a0)
000180E4 4428 003A                  		neg.b	$3A(a0)
000180E8 7200                       		moveq	#0,d1
000180EA 1228 0038                  		move.b	$38(a0),d1
000180EE D228 003A                  		add.b	$3A(a0),d1
000180F2 B228 0039                  		cmp.b	$39(a0),d1
000180F6 6500                       		bcs.s	loc_16352
000180F8 1001                       		move.b	d1,d0
000180FA 7200                       		moveq	#0,d1
000180FC 4A00                       		tst.b	d0
000180FE 6A00                       		bpl.s	loc_16352
00018100 1228 0039                  		move.b	$39(a0),d1
00018104 5901                       		subq.b	#4,d1
00018106                            
00018106                            loc_16352:
00018106 1141 0038                  		move.b	d1,$38(a0)
0001810A                            
0001810A                            loc_16356:
0001810A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00018110 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00018116 4A41                       		tst.w	d1
00018118 6600                       		bne.s	loc_1636C
0001811A 117C 0001 001C             		move.b	#1,$1C(a0)
00018120                            
00018120                            loc_1636C:
00018120 0C41 0008                  		cmpi.w	#8,d1
00018124 6600                       		bne.s	loc_16378
00018126 117C 0000 001C             		move.b	#0,$1C(a0)
0001812C                            
0001812C                            loc_16378:
0001812C 6100 BC3C                  		bsr.w	Obj63_ChangeDir
00018130 6000 0000                  		bra.w	loc_163D8
00018134                            ; ===========================================================================
00018134                            
00018134                            loc_16380:				; XREF: Obj6F_Main
00018134 1140 002F                  		move.b	d0,$2F(a0)
00018138 0240 007F                  		andi.w	#$7F,d0
0001813C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00018140 08F2 0000 0000             		bset	#0,(a2,d0.w)
00018146 6700                       		beq.s	loc_1639A
00018148 4EF9 0000 E82E             		jmp	DeleteObject
0001814E                            ; ===========================================================================
0001814E                            
0001814E                            loc_1639A:
0001814E D040                       		add.w	d0,d0
00018150 0240 001E                  		andi.w	#$1E,d0
00018154 0640 0080                  		addi.w	#$80,d0
00018158 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001815E D4F2 0000                  		adda.w	(a2,d0.w),a2
00018162 321A                       		move.w	(a2)+,d1
00018164 2248                       		movea.l	a0,a1
00018166 6000                       		bra.s	Obj6F_LoadPform
00018168                            ; ===========================================================================
00018168                            
00018168                            Obj6F_Loop:
00018168 4EB9 0000 EF34             		jsr	SingleObjLoad
0001816E 6600                       		bne.s	loc_163D0
00018170                            
00018170                            Obj6F_LoadPform:			; XREF: loc_1639A
00018170 12BC 006F                  		move.b	#$6F,0(a1)
00018174 335A 0008                  		move.w	(a2)+,8(a1)
00018178 335A 000C                  		move.w	(a2)+,$C(a1)
0001817C 301A                       		move.w	(a2)+,d0
0001817E 1340 0028                  		move.b	d0,$28(a1)
00018182                            
00018182                            loc_163D0:
00018182 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00018186                            
00018186 588F                       		addq.l	#4,sp
00018188 4E75                       		rts	
0001818A                            ; ===========================================================================
0001818A                            
0001818A                            loc_163D8:				; XREF: Obj6F_Index
0001818A 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00018190 4EB9 0000 B83E             		jsr	AnimateSprite
00018196 4A28 001A                  		tst.b	$1A(a0)
0001819A 6600                       		bne.s	loc_16404
0001819C 3F28 0008                  		move.w	8(a0),-(sp)
000181A0 6100 0000                  		bsr.w	loc_16424
000181A4 323C 001B                  		move.w	#$1B,d1
000181A8 343C 0007                  		move.w	#7,d2
000181AC 3602                       		move.w	d2,d3
000181AE 5243                       		addq.w	#1,d3
000181B0 381F                       		move.w	(sp)+,d4
000181B2 6000 8F98                  		bra.w	SolidObject
000181B6                            ; ===========================================================================
000181B6                            
000181B6                            loc_16404:
000181B6 0828 0003 0022             		btst	#3,$22(a0)
000181BC 6700                       		beq.s	loc_16420
000181BE 43F8 D000                  		lea	($FFFFD000).w,a1
000181C2 08A9 0003 0022             		bclr	#3,$22(a1)
000181C8 08A8 0003 0022             		bclr	#3,$22(a0)
000181CE 4228 0025                  		clr.b	$25(a0)
000181D2                            
000181D2                            loc_16420:
000181D2 6000 0002                  		bra.w	*+4
000181D6                            
000181D6                            loc_16424:
000181D6 3028 0008                  		move.w	8(a0),d0
000181DA B068 0034                  		cmp.w	$34(a0),d0
000181DE 6600                       		bne.s	loc_16484
000181E0 3028 000C                  		move.w	$C(a0),d0
000181E4 B068 0036                  		cmp.w	$36(a0),d0
000181E8 6600                       		bne.s	loc_16484
000181EA 7200                       		moveq	#0,d1
000181EC 1228 0038                  		move.b	$38(a0),d1
000181F0 D228 003A                  		add.b	$3A(a0),d1
000181F4 B228 0039                  		cmp.b	$39(a0),d1
000181F8 6500                       		bcs.s	loc_16456
000181FA 1001                       		move.b	d1,d0
000181FC 7200                       		moveq	#0,d1
000181FE 4A00                       		tst.b	d0
00018200 6A00                       		bpl.s	loc_16456
00018202 1228 0039                  		move.b	$39(a0),d1
00018206 5901                       		subq.b	#4,d1
00018208                            
00018208                            loc_16456:
00018208 1141 0038                  		move.b	d1,$38(a0)
0001820C 2268 003C                  		movea.l	$3C(a0),a1
00018210 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00018216 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001821C 4A41                       		tst.w	d1
0001821E 6600                       		bne.s	loc_16474
00018220 117C 0001 001C             		move.b	#1,$1C(a0)
00018226                            
00018226                            loc_16474:
00018226 0C41 0008                  		cmpi.w	#8,d1
0001822A 6600                       		bne.s	loc_16480
0001822C 117C 0000 001C             		move.b	#0,$1C(a0)
00018232                            
00018232                            loc_16480:
00018232 6100 BB36                  		bsr.w	Obj63_ChangeDir
00018236                            
00018236                            loc_16484:
00018236 4EF9 0000 E7C4             		jmp	SpeedToPos
0001823C                            ; ===========================================================================
0001823C                            Ani_obj6F:
0001823C                            	include "_anim\obj6F.asm"
0001823C                            ; ---------------------------------------------------------------------------
0001823C                            ; Animation script - platform on conveyor belt (SBZ)
0001823C                            ; ---------------------------------------------------------------------------
0001823C 0000                       		dc.w byte_1648E-Ani_obj6F
0001823E 0000                       		dc.w byte_164A2-Ani_obj6F
00018240 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001824D 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00018254 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00018258 00                         		even
00018258 00                         		even
00018258                            
00018258 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
0001825E 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00018264 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00018278 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001828C 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000182A0 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000182B4 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000182C8 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
000182DC                            ; ===========================================================================
000182DC                            ; ---------------------------------------------------------------------------
000182DC                            ; Object 70 - large girder block (SBZ)
000182DC                            ; ---------------------------------------------------------------------------
000182DC                            
000182DC                            Obj70:					; XREF: Obj_Index
000182DC 7000                       		moveq	#0,d0
000182DE 1028 0024                  		move.b	$24(a0),d0
000182E2 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
000182E6 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
000182EA                            ; ===========================================================================
000182EA 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
000182EC 0000                       		dc.w Obj70_Action-Obj70_Index
000182EE                            ; ===========================================================================
000182EE                            
000182EE                            Obj70_Main:				; XREF: Obj70_Index
000182EE 5428 0024                  		addq.b	#2,$24(a0)
000182F2 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000182FA 317C 42F0 0002             		move.w	#$42F0,2(a0)
00018300 0028 0004 0001             		ori.b	#4,1(a0)
00018306 117C 0004 0018             		move.b	#4,$18(a0)
0001830C 117C 0060 0019             		move.b	#$60,$19(a0)
00018312 117C 0018 0016             		move.b	#$18,$16(a0)
00018318 3168 0008 0032             		move.w	8(a0),$32(a0)
0001831E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00018324 6100 0000                  		bsr.w	Obj70_Move2
00018328                            
00018328                            Obj70_Action:				; XREF: Obj70_Index
00018328 3F28 0008                  		move.w	8(a0),-(sp)
0001832C 4A68 003A                  		tst.w	$3A(a0)
00018330 6700                       		beq.s	Obj70_Move
00018332 5368 003A                  		subq.w	#1,$3A(a0)
00018336 6600                       		bne.s	Obj70_Solid
00018338                            
00018338                            Obj70_Move:
00018338 4EB9 0000 E7C4             		jsr	SpeedToPos
0001833E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00018342 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00018344 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00018348                            
00018348                            Obj70_Solid:
00018348 381F                       		move.w	(sp)+,d4
0001834A 4A28 0001                  		tst.b	1(a0)
0001834E 6A00                       		bpl.s	Obj70_ChkDel
00018350 7200                       		moveq	#0,d1
00018352 1228 0019                  		move.b	$19(a0),d1
00018356 0641 000B                  		addi.w	#$B,d1
0001835A 7400                       		moveq	#0,d2
0001835C 1428 0016                  		move.b	$16(a0),d2
00018360 3602                       		move.w	d2,d3
00018362 5243                       		addq.w	#1,d3
00018364 6100 8DE6                  		bsr.w	SolidObject
00018368                            
00018368                            Obj70_ChkDel:
00018368 3028 0032                  		move.w	$32(a0),d0
0001836C 0240 FF80                  		andi.w	#$FF80,d0
00018370 3238 F700                  		move.w	($FFFFF700).w,d1
00018374 0441 0080                  		subi.w	#$80,d1
00018378 0241 FF80                  		andi.w	#$FF80,d1
0001837C 9041                       		sub.w	d1,d0
0001837E 0C40 0280                  		cmpi.w	#$280,d0
00018382 6300                       		bls.s	Obj70_NoDel
00018384                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00018384                            	;	beq.s	Obj70_Delete		; if it's zero, don't remember object
00018384                            	;	movea.w	d0,a2	; load address into a2
00018384                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018384 6000                       		bra.s	Obj70_Delete	; and delete object
00018386                            
00018386                            Obj70_NoDel:
00018386 4EF9 0000 E7DE             		jmp	DisplaySprite
0001838C                            ; ===========================================================================
0001838C                            
0001838C                            Obj70_Delete:
0001838C 4EF9 0000 E82E             		jmp	DeleteObject
00018392                            ; ===========================================================================
00018392                            
00018392                            Obj70_Move2:				; XREF: Obj70_Main
00018392 1028 0038                  		move.b	$38(a0),d0
00018396 0240 0018                  		andi.w	#$18,d0
0001839A 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000183A0 43F1 0000                  		lea	(a1,d0.w),a1
000183A4 3159 0010                  		move.w	(a1)+,$10(a0)
000183A8 3159 0012                  		move.w	(a1)+,$12(a0)
000183AC 3159 0034                  		move.w	(a1)+,$34(a0)
000183B0 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000183B4 317C 0007 003A             		move.w	#7,$3A(a0)
000183BA 4E75                       		rts	
000183BC                            ; ===========================================================================
000183BC 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
000183C4 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
000183CC FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
000183D4 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
000183DC                            ; ---------------------------------------------------------------------------
000183DC                            ; Sprite mappings - large girder block (SBZ)
000183DC                            ; ---------------------------------------------------------------------------
000183DC                            Map_obj70:
000183DC                            	include "_maps\obj70.asm"
000183DC                            ; ---------------------------------------------------------------------------
000183DC                            ; Sprite mappings - large girder block (SBZ)
000183DC                            ; ---------------------------------------------------------------------------
000183DC 0000                       		dc.w byte_1662A-Map_obj70
000183DE 0C                         byte_1662A:	dc.b $C
000183DF E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
000183E4 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
000183E9 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000183EE 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000183F3 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000183F8 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000183FD E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00018402 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00018407 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001840C 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00018411 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00018416 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001841C 00                         		even
0001841C 00                         		even
0001841C                            
0001841C                            ; ===========================================================================
0001841C                            ; ---------------------------------------------------------------------------
0001841C                            ; Object 72 - teleporter (SBZ)
0001841C                            ; ---------------------------------------------------------------------------
0001841C                            
0001841C                            Obj72:					; XREF: Obj_Index
0001841C 7000                       		moveq	#0,d0
0001841E 1028 0024                  		move.b	$24(a0),d0
00018422 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00018426 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
0001842A 3028 0008                  		move.w	8(a0),d0
0001842E 0240 FF80                  		andi.w	#$FF80,d0
00018432 3238 F700                  		move.w	($FFFFF700).w,d1
00018436 0441 0080                  		subi.w	#$80,d1
0001843A 0241 FF80                  		andi.w	#$FF80,d1
0001843E 9041                       		sub.w	d1,d0
00018440 0C40 0280                  		cmpi.w	#$280,d0
00018444 6300                       		bls.s	Obj72_NoDel
00018446                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00018446                            	;	beq.s	Obj72_Delete	; if it's zero, don't remember object
00018446                            	;	movea.w	d0,a2	; load address into a2
00018446                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018446 6000                       		bra.s	Obj72_Delete	; and delete object
00018448                            
00018448                            Obj72_NoDel:
00018448 4E75                       		rts	
0001844A                            ; ===========================================================================
0001844A                            
0001844A                            Obj72_Delete:
0001844A 4EF9 0000 E82E             		jmp	DeleteObject
00018450                            ; ===========================================================================
00018450 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00018452 0000                       		dc.w loc_166C8-Obj72_Index
00018454 0000                       		dc.w loc_1675E-Obj72_Index
00018456 0000                       		dc.w loc_16798-Obj72_Index
00018458                            ; ===========================================================================
00018458                            
00018458                            Obj72_Main:				; XREF: Obj72_Index
00018458 5428 0024                  		addq.b	#2,$24(a0)
0001845C 1028 0028                  		move.b	$28(a0),d0
00018460 D040                       		add.w	d0,d0
00018462 0240 001E                  		andi.w	#$1E,d0
00018466 45FA 0000                  		lea	Obj72_Data(pc),a2
0001846A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001846E 315A 003A                  		move.w	(a2)+,$3A(a0)
00018472 214A 003C                  		move.l	a2,$3C(a0)
00018476 315A 0036                  		move.w	(a2)+,$36(a0)
0001847A 315A 0038                  		move.w	(a2)+,$38(a0)
0001847E                            
0001847E                            loc_166C8:				; XREF: Obj72_Index
0001847E 43F8 D000                  		lea	($FFFFD000).w,a1
00018482 3029 0008                  		move.w	8(a1),d0
00018486 9068 0008                  		sub.w	8(a0),d0
0001848A 0828 0000 0022             		btst	#0,$22(a0)
00018490 6700                       		beq.s	loc_166E0
00018492 0640 000F                  		addi.w	#$F,d0
00018496                            
00018496                            loc_166E0:
00018496 0C40 0010                  		cmpi.w	#$10,d0
0001849A 6400                       		bcc.s	locret_1675C
0001849C 3229 000C                  		move.w	$C(a1),d1
000184A0 9268 000C                  		sub.w	$C(a0),d1
000184A4 0641 0020                  		addi.w	#$20,d1
000184A8 0C41 0040                  		cmpi.w	#$40,d1
000184AC 6400                       		bcc.s	locret_1675C
000184AE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000184B2 6600                       		bne.s	locret_1675C
000184B4 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000184BA 6600                       		bne.s	loc_1670E
000184BC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000184C2 6500                       		bcs.s	locret_1675C
000184C4                            
000184C4                            loc_1670E:
000184C4 5428 0024                  		addq.b	#2,$24(a0)
000184C8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000184CE 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000184D4 337C 0800 0020             		move.w	#$800,$20(a1)
000184DA 337C 0000 0010             		move.w	#0,$10(a1)
000184E0 337C 0000 0012             		move.w	#0,$12(a1)
000184E6 08A8 0005 0022             		bclr	#5,$22(a0)
000184EC 08A9 0005 0022             		bclr	#5,$22(a1)
000184F2 08E9 0001 0022             		bset	#1,$22(a1)
000184F8 3368 0008 0008             		move.w	8(a0),8(a1)
000184FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018504 4228 0032                  		clr.b	$32(a0)
00018508 303C 00BE                  		move.w	#$BE,d0
0001850C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00018512                            
00018512                            locret_1675C:
00018512 4E75                       		rts	
00018514                            ; ===========================================================================
00018514                            
00018514                            loc_1675E:				; XREF: Obj72_Index
00018514 43F8 D000                  		lea	($FFFFD000).w,a1
00018518 1028 0032                  		move.b	$32(a0),d0
0001851C 5428 0032                  		addq.b	#2,$32(a0)
00018520 4EB9 0000 29CC             		jsr	(CalcSine).l
00018526 EA40                       		asr.w	#5,d0
00018528 3428 000C                  		move.w	$C(a0),d2
0001852C 9440                       		sub.w	d0,d2
0001852E 3342 000C                  		move.w	d2,$C(a1)
00018532 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00018538 6600                       		bne.s	locret_16796
0001853A 6100 0000                  		bsr.w	sub_1681C
0001853E 5428 0024                  		addq.b	#2,$24(a0)
00018542 303C 00BC                  		move.w	#$BC,d0
00018546 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play teleport sound
0001854C                            
0001854C                            locret_16796:
0001854C 4E75                       		rts	
0001854E                            ; ===========================================================================
0001854E                            
0001854E                            loc_16798:				; XREF: Obj72_Index
0001854E 588F                       		addq.l	#4,sp
00018550 43F8 D000                  		lea	($FFFFD000).w,a1
00018554 5328 002E                  		subq.b	#1,$2E(a0)
00018558 6A00                       		bpl.s	loc_167DA
0001855A 3368 0036 0008             		move.w	$36(a0),8(a1)
00018560 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018566 7200                       		moveq	#0,d1
00018568 1228 003A                  		move.b	$3A(a0),d1
0001856C 5801                       		addq.b	#4,d1
0001856E B228 003B                  		cmp.b	$3B(a0),d1
00018572 6500                       		bcs.s	loc_167C2
00018574 7200                       		moveq	#0,d1
00018576 6000                       		bra.s	loc_16800
00018578                            ; ===========================================================================
00018578                            
00018578                            loc_167C2:
00018578 1141 003A                  		move.b	d1,$3A(a0)
0001857C 2468 003C                  		movea.l	$3C(a0),a2
00018580 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00018586 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001858C 6000 0000                  		bra.w	sub_1681C
00018590                            ; ===========================================================================
00018590                            
00018590                            loc_167DA:
00018590 2429 0008                  		move.l	8(a1),d2
00018594 2629 000C                  		move.l	$C(a1),d3
00018598 3029 0010                  		move.w	$10(a1),d0
0001859C 48C0                       		ext.l	d0
0001859E E180                       		asl.l	#8,d0
000185A0 D480                       		add.l	d0,d2
000185A2 3029 0012                  		move.w	$12(a1),d0
000185A6 48C0                       		ext.l	d0
000185A8 E180                       		asl.l	#8,d0
000185AA D680                       		add.l	d0,d3
000185AC 2342 0008                  		move.l	d2,8(a1)
000185B0 2343 000C                  		move.l	d3,$C(a1)
000185B4 4E75                       		rts	
000185B6                            ; ===========================================================================
000185B6                            
000185B6                            loc_16800:
000185B6 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000185BC 4228 0024                  		clr.b	$24(a0)
000185C0 4238 F7C8                  		clr.b	($FFFFF7C8).w
000185C4 337C 0000 0010             		move.w	#0,$10(a1)
000185CA 337C 0200 0012             		move.w	#$200,$12(a1)
000185D0 4E75                       		rts	
000185D2                            
000185D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000185D2                            
000185D2                            
000185D2                            sub_1681C:
000185D2 7000                       		moveq	#0,d0
000185D4 343C 1000                  		move.w	#$1000,d2
000185D8 3028 0036                  		move.w	$36(a0),d0
000185DC 9069 0008                  		sub.w	8(a1),d0
000185E0 6C00                       		bge.s	loc_16830
000185E2 4440                       		neg.w	d0
000185E4 4442                       		neg.w	d2
000185E6                            
000185E6                            loc_16830:
000185E6 7200                       		moveq	#0,d1
000185E8 363C 1000                  		move.w	#$1000,d3
000185EC 3228 0038                  		move.w	$38(a0),d1
000185F0 9269 000C                  		sub.w	$C(a1),d1
000185F4 6C00                       		bge.s	loc_16844
000185F6 4441                       		neg.w	d1
000185F8 4443                       		neg.w	d3
000185FA                            
000185FA                            loc_16844:
000185FA B240                       		cmp.w	d0,d1
000185FC 6500                       		bcs.s	loc_1687A
000185FE 7200                       		moveq	#0,d1
00018600 3228 0038                  		move.w	$38(a0),d1
00018604 9269 000C                  		sub.w	$C(a1),d1
00018608 4841                       		swap	d1
0001860A 83C3                       		divs.w	d3,d1
0001860C 7000                       		moveq	#0,d0
0001860E 3028 0036                  		move.w	$36(a0),d0
00018612 9069 0008                  		sub.w	8(a1),d0
00018616 6700                       		beq.s	loc_16866
00018618 4840                       		swap	d0
0001861A 81C1                       		divs.w	d1,d0
0001861C                            
0001861C                            loc_16866:
0001861C 3340 0010                  		move.w	d0,$10(a1)
00018620 3343 0012                  		move.w	d3,$12(a1)
00018624 4A41                       		tst.w	d1
00018626 6A00                       		bpl.s	loc_16874
00018628 4441                       		neg.w	d1
0001862A                            
0001862A                            loc_16874:
0001862A 3141 002E                  		move.w	d1,$2E(a0)
0001862E 4E75                       		rts	
00018630                            ; ===========================================================================
00018630                            
00018630                            loc_1687A:
00018630 7000                       		moveq	#0,d0
00018632 3028 0036                  		move.w	$36(a0),d0
00018636 9069 0008                  		sub.w	8(a1),d0
0001863A 4840                       		swap	d0
0001863C 81C2                       		divs.w	d2,d0
0001863E 7200                       		moveq	#0,d1
00018640 3228 0038                  		move.w	$38(a0),d1
00018644 9269 000C                  		sub.w	$C(a1),d1
00018648 6700                       		beq.s	loc_16898
0001864A 4841                       		swap	d1
0001864C 83C0                       		divs.w	d0,d1
0001864E                            
0001864E                            loc_16898:
0001864E 3341 0012                  		move.w	d1,$12(a1)
00018652 3342 0010                  		move.w	d2,$10(a1)
00018656 4A40                       		tst.w	d0
00018658 6A00                       		bpl.s	loc_168A6
0001865A 4440                       		neg.w	d0
0001865C                            
0001865C                            loc_168A6:
0001865C 3140 002E                  		move.w	d0,$2E(a0)
00018660 4E75                       		rts	
00018662                            ; End of function sub_1681C
00018662                            
00018662                            ; ===========================================================================
00018662 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00018668 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001866E 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00018672 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00018678 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001867E 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00018684 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001868A 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00018690 0884 0298 0894             		dc.w $884, $298, $894
00018696 0270 0894 0190             		dc.w $270, $894, $190
0001869C 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000186A2 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000186A8 1184 0498 1158             		dc.w $1184, $498, $1158
000186AE 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000186B4 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000186BA 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000186C0 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000186C6 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000186CC 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000186D2 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000186D8 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000186DE FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000186E4 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000186EA                            ; ===========================================================================
000186EA                            ; ---------------------------------------------------------------------------
000186EA                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000186EA                            ; ---------------------------------------------------------------------------
000186EA                            
000186EA                            Obj78:					; XREF: Obj_Index
000186EA 7000                       		moveq	#0,d0
000186EC 1028 0024                  		move.b	$24(a0),d0
000186F0 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000186F4 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000186F8                            ; ===========================================================================
000186F8 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000186FA 0000                       		dc.w Obj78_Action-Obj78_Index
000186FC 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000186FE 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00018700 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018702 0000                       		dc.w Obj78_Delete-Obj78_Index
00018704 0000                       		dc.w loc_16CC0-Obj78_Index
00018706                            ; ===========================================================================
00018706                            
00018706                            locret_16950:
00018706 4E75                       		rts	
00018708                            ; ===========================================================================
00018708                            
00018708                            Obj78_Main:				; XREF: Obj78_Index
00018708 117C 0007 0016             		move.b	#7,$16(a0)
0001870E 117C 0008 0017             		move.b	#8,$17(a0)
00018714 4EB9 0000 E7A4             		jsr	ObjectFall
0001871A 4EBA E4D6                  		jsr	ObjHitFloor
0001871E 4A41                       		tst.w	d1
00018720 6AE4                       		bpl.s	locret_16950
00018722 D368 000C                  		add.w	d1,$C(a0)
00018726 4268 0012                  		clr.w	$12(a0)
0001872A 5428 0024                  		addq.b	#2,$24(a0)
0001872E 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00018736 317C 22B0 0002             		move.w	#$22B0,2(a0)
0001873C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00018742 6700                       		beq.s	loc_16996
00018744 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001874A                            
0001874A                            loc_16996:
0001874A 0228 0003 0001             		andi.b	#3,1(a0)
00018750 0028 0004 0001             		ori.b	#4,1(a0)
00018756 1168 0001 0022             		move.b	1(a0),$22(a0)
0001875C 117C 0004 0018             		move.b	#4,$18(a0)
00018762 117C 0008 0019             		move.b	#8,$19(a0)
00018768 117C 000B 0020             		move.b	#$B,$20(a0)
0001876E 3428 0008                  		move.w	8(a0),d2
00018772 7A0C                       		moveq	#$C,d5
00018774 0828 0000 0022             		btst	#0,$22(a0)
0001877A 6700                       		beq.s	loc_169CA
0001877C 4445                       		neg.w	d5
0001877E                            
0001877E                            loc_169CA:
0001877E 1C3C 0004                  		move.b	#4,d6
00018782 7600                       		moveq	#0,d3
00018784 7804                       		moveq	#4,d4
00018786 2448                       		movea.l	a0,a2
00018788 7202                       		moveq	#2,d1
0001878A                            
0001878A                            Obj78_LoadBody:
0001878A 4EB9 0000 EF4A             		jsr	SingleObjLoad2
00018790 6600                       		bne.s	Obj78_QuitLoad
00018792 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00018796 1346 0024                  		move.b	d6,$24(a1)
0001879A 5406                       		addq.b	#2,d6
0001879C 2368 0004 0004             		move.l	4(a0),4(a1)
000187A2 3368 0002 0002             		move.w	2(a0),2(a1)
000187A8 137C 0005 0018             		move.b	#5,$18(a1)
000187AE 137C 0008 0019             		move.b	#8,$19(a1)
000187B4 137C 00CB 0020             		move.b	#$CB,$20(a1)
000187BA D445                       		add.w	d5,d2
000187BC 3342 0008                  		move.w	d2,8(a1)
000187C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000187C6 1368 0022 0022             		move.b	$22(a0),$22(a1)
000187CC 1368 0022 0001             		move.b	$22(a0),1(a1)
000187D2 137C 0008 001A             		move.b	#8,$1A(a1)
000187D8 234A 003C                  		move.l	a2,$3C(a1)
000187DC 1344 003C                  		move.b	d4,$3C(a1)
000187E0 5804                       		addq.b	#4,d4
000187E2 2449                       		movea.l	a1,a2
000187E4                            
000187E4                            Obj78_QuitLoad:
000187E4 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000187E8                            
000187E8 117C 0007 002A             		move.b	#7,$2A(a0)
000187EE 4228 003C                  		clr.b	$3C(a0)
000187F2                            
000187F2                            Obj78_Action:				; XREF: Obj78_Index
000187F2 4A28 0022                  		tst.b	$22(a0)
000187F6 6B00 0000                  		bmi.w	loc_16C96
000187FA 7000                       		moveq	#0,d0
000187FC 1028 0025                  		move.b	$25(a0),d0
00018800 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00018804 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018808 1228 002B                  		move.b	$2B(a0),d1
0001880C 6A00                       		bpl.s	Obj78_Display
0001880E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018814 1028 0026                  		move.b	$26(a0),d0
00018818 0240 007F                  		andi.w	#$7F,d0
0001881C 5828 0026                  		addq.b	#4,$26(a0)
00018820 1031 0000                  		move.b	(a1,d0.w),d0
00018824 6A00                       		bpl.s	Obj78_AniHead
00018826 08A8 0007 002B             		bclr	#7,$2B(a0)
0001882C 6000                       		bra.s	Obj78_Display
0001882E                            ; ===========================================================================
0001882E                            
0001882E                            Obj78_AniHead:
0001882E 0201 0010                  		andi.b	#$10,d1
00018832 D001                       		add.b	d1,d0
00018834 1140 001A                  		move.b	d0,$1A(a0)
00018838                            
00018838                            Obj78_Display:
00018838 3028 0008                  		move.w	8(a0),d0
0001883C 0240 FF80                  		andi.w	#$FF80,d0
00018840 3238 F700                  		move.w	($FFFFF700).w,d1
00018844 0441 0080                  		subi.w	#$80,d1
00018848 0241 FF80                  		andi.w	#$FF80,d1
0001884C 9041                       		sub.w	d1,d0
0001884E 0C40 0280                  		cmpi.w	#$280,d0
00018852 6200 0000                  		bhi.w	Obj78_ChkGone
00018856 4EF9 0000 E7DE             		jmp	DisplaySprite
0001885C                            ; ===========================================================================
0001885C                            
0001885C                            Obj78_ChkGone:
0001885C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018860 6700                       		beq.s	loc_16ABC		; if it's zero, don't remember object
00018862 3440                       		movea.w	d0,a2	; load address into a2
00018864 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018868                            
00018868                            loc_16ABC:
00018868 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001886E 4E75                       		rts	
00018870                            ; ===========================================================================
00018870                            
00018870                            Obj78_Delete:				; XREF: Obj78_Index
00018870 4EF9 0000 E82E             		jmp	DeleteObject
00018876                            ; ===========================================================================
00018876 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018878 0000                       		dc.w loc_16B02-Obj78_Index2
0001887A                            ; ===========================================================================
0001887A                            
0001887A                            Obj78_Move:				; XREF: Obj78_Index2
0001887A 5328 002A                  		subq.b	#1,$2A(a0)
0001887E 6B00                       		bmi.s	Obj78_Move2
00018880 4E75                       		rts	
00018882                            ; ===========================================================================
00018882                            
00018882                            Obj78_Move2:
00018882 5428 0025                  		addq.b	#2,$25(a0)
00018886 117C 0010 002A             		move.b	#$10,$2A(a0)
0001888C 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018892 317C 0040 001C             		move.w	#$40,$1C(a0)
00018898 0868 0004 002B             		bchg	#4,$2B(a0)
0001889E 6600                       		bne.s	loc_16AFC
000188A0 4268 0010                  		clr.w	$10(a0)
000188A4 4468 001C                  		neg.w	$1C(a0)
000188A8                            
000188A8                            loc_16AFC:
000188A8 08E8 0007 002B             		bset	#7,$2B(a0)
000188AE                            
000188AE                            loc_16B02:				; XREF: Obj78_Index2
000188AE 5328 002A                  		subq.b	#1,$2A(a0)
000188B2 6B00                       		bmi.s	loc_16B5E
000188B4 2F28 0008                  		move.l	8(a0),-(sp)
000188B8 2428 0008                  		move.l	8(a0),d2
000188BC 3028 0010                  		move.w	$10(a0),d0
000188C0 0828 0000 0022             		btst	#0,$22(a0)
000188C6 6700                       		beq.s	loc_16B1E
000188C8 4440                       		neg.w	d0
000188CA                            
000188CA                            loc_16B1E:
000188CA 48C0                       		ext.l	d0
000188CC E180                       		asl.l	#8,d0
000188CE D480                       		add.l	d0,d2
000188D0 2142 0008                  		move.l	d2,8(a0)
000188D4 4EBA E31C                  		jsr	ObjHitFloor
000188D8 241F                       		move.l	(sp)+,d2
000188DA 0C41 FFF8                  		cmpi.w	#-8,d1
000188DE 6D00                       		blt.s	loc_16B70
000188E0 0C41 000C                  		cmpi.w	#$C,d1
000188E4 6C00                       		bge.s	loc_16B70
000188E6 D368 000C                  		add.w	d1,$C(a0)
000188EA 4842                       		swap	d2
000188EC B468 0008                  		cmp.w	8(a0),d2
000188F0 6700                       		beq.s	locret_16B5C
000188F2 7000                       		moveq	#0,d0
000188F4 1028 003C                  		move.b	$3C(a0),d0
000188F8 5228 003C                  		addq.b	#1,$3C(a0)
000188FC 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018902 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018906                            
00018906                            locret_16B5C:
00018906 4E75                       		rts	
00018908                            ; ===========================================================================
00018908                            
00018908                            loc_16B5E:
00018908 5528 0025                  		subq.b	#2,$25(a0)
0001890C 117C 0007 002A             		move.b	#7,$2A(a0)
00018912 317C 0000 0010             		move.w	#0,$10(a0)
00018918 4E75                       		rts	
0001891A                            ; ===========================================================================
0001891A                            
0001891A                            loc_16B70:
0001891A 2142 0008                  		move.l	d2,8(a0)
0001891E 0868 0000 0022             		bchg	#0,$22(a0)
00018924 1168 0022 0001             		move.b	$22(a0),1(a0)
0001892A 7000                       		moveq	#0,d0
0001892C 1028 003C                  		move.b	$3C(a0),d0
00018930 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018936 5228 003C                  		addq.b	#1,$3C(a0)
0001893A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018940 4E75                       		rts	
00018942                            ; ===========================================================================
00018942                            
00018942                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018942 2268 003C                  		movea.l	$3C(a0),a1
00018946 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001894C 6A00                       		bpl.s	Obj78_BodySeg1
0001894E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018954 1028 0026                  		move.b	$26(a0),d0
00018958 0240 007F                  		andi.w	#$7F,d0
0001895C 5828 0026                  		addq.b	#4,$26(a0)
00018960 4A31 0004                  		tst.b	4(a1,d0.w)
00018964 6A00                       		bpl.s	Obj78_AniBody
00018966 5828 0026                  		addq.b	#4,$26(a0)
0001896A                            
0001896A                            Obj78_AniBody:
0001896A 1031 0000                  		move.b	(a1,d0.w),d0
0001896E 5000                       		addq.b	#8,d0
00018970 1140 001A                  		move.b	d0,$1A(a0)
00018974                            
00018974                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018974 2268 003C                  		movea.l	$3C(a0),a1
00018978 4A28 0022                  		tst.b	$22(a0)
0001897C 6B00 0000                  		bmi.w	loc_16C90
00018980 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018986 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001898C 6700 0000                  		beq.w	loc_16C64
00018990 3169 001C 001C             		move.w	$1C(a1),$1C(a0)
00018996 3029 0010                  		move.w	$10(a1),d0
0001899A D069 001C                  		add.w	$1C(a1),d0
0001899E 3140 0010                  		move.w	d0,$10(a0)
000189A2 2428 0008                  		move.l	8(a0),d2
000189A6 2602                       		move.l	d2,d3
000189A8 3028 0010                  		move.w	$10(a0),d0
000189AC 0828 0000 0022             		btst	#0,$22(a0)
000189B2 6700                       		beq.s	loc_16C0C
000189B4 4440                       		neg.w	d0
000189B6                            
000189B6                            loc_16C0C:
000189B6 48C0                       		ext.l	d0
000189B8 E180                       		asl.l	#8,d0
000189BA D480                       		add.l	d0,d2
000189BC 2142 0008                  		move.l	d2,8(a0)
000189C0 4843                       		swap	d3
000189C2 B668 0008                  		cmp.w	8(a0),d3
000189C6 6700                       		beq.s	loc_16C64
000189C8 7000                       		moveq	#0,d0
000189CA 1028 003C                  		move.b	$3C(a0),d0
000189CE 1231 002C                  		move.b	$2C(a1,d0.w),d1
000189D2 0C01 0080                  		cmpi.b	#-$80,d1
000189D6 6600                       		bne.s	loc_16C50
000189D8 4843                       		swap	d3
000189DA 2143 0008                  		move.l	d3,8(a0)
000189DE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000189E2 0868 0000 0022             		bchg	#0,$22(a0)
000189E8 1168 0022 0001             		move.b	$22(a0),1(a0)
000189EE 5228 003C                  		addq.b	#1,$3C(a0)
000189F2 0228 000F 003C             		andi.b	#$F,$3C(a0)
000189F8 6000                       		bra.s	loc_16C64
000189FA                            ; ===========================================================================
000189FA                            
000189FA                            loc_16C50:
000189FA 4881                       		ext.w	d1
000189FC D368 000C                  		add.w	d1,$C(a0)
00018A00 5228 003C                  		addq.b	#1,$3C(a0)
00018A04 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018A0A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018A0E                            
00018A0E                            loc_16C64:
00018A0E 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018A14 6700                       		beq.s	loc_16C90
00018A16 0C11 0027                  		cmpi.b	#$27,0(a1)
00018A1A 6700                       		beq.s	loc_16C7C
00018A1C 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018A22 6600                       		bne.s	loc_16C82
00018A24                            
00018A24                            loc_16C7C:
00018A24 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018A28 117C 000A 0024             		move.b	#$A,$24(a0)
00018A2E                            
00018A2E                            loc_16C82:
00018A2E 4EF9 0000 E7DE             		jmp	DisplaySprite
00018A34                            
00018A34                            ; ===========================================================================
00018A34 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018A3C                            ; ===========================================================================
00018A3C                            
00018A3C                            loc_16C90:
00018A3C 08E9 0007 0022             		bset	#7,$22(a1)
00018A42                            
00018A42                            loc_16C96:
00018A42 7000                       		moveq	#0,d0
00018A44 1028 0024                  		move.b	$24(a0),d0
00018A48 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018A4C 0828 0000 0022             		btst	#0,$22(a0)
00018A52 6700                       		beq.s	loc_16CAA
00018A54 4440                       		neg.w	d0
00018A56                            
00018A56                            loc_16CAA:
00018A56 3140 0010                  		move.w	d0,$10(a0)
00018A5A 317C FC00 0012             		move.w	#-$400,$12(a0)
00018A60 117C 000C 0024             		move.b	#$C,$24(a0)
00018A66 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018A6C                            
00018A6C                            loc_16CC0:				; XREF: Obj78_Index
00018A6C 4EB9 0000 E7A4             		jsr	ObjectFall
00018A72 4A68 0012                  		tst.w	$12(a0)
00018A76 6B00                       		bmi.s	loc_16CE0
00018A78 4EBA E178                  		jsr	ObjHitFloor
00018A7C 4A41                       		tst.w	d1
00018A7E 6A00                       		bpl.s	loc_16CE0
00018A80 D368 000C                  		add.w	d1,$C(a0)
00018A84 317C FC00 0012             		move.w	#-$400,$12(a0)
00018A8A                            
00018A8A                            loc_16CE0:
00018A8A 4A28 0001                  		tst.b	1(a0)
00018A8E 6A00 FDCC                  		bpl.w	Obj78_ChkGone
00018A92 4EF9 0000 E7DE             		jmp	DisplaySprite
00018A98                            ; ===========================================================================
00018A98                            Ani_obj78:
00018A98                            	include "_anim\obj78.asm"
00018A98                            ; ---------------------------------------------------------------------------
00018A98                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018A98                            ; ---------------------------------------------------------------------------
00018A98 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018AA8 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018AB8 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018AC8 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018AD8 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018AE8 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018AF8 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018B08 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018B18                            	even
00018B18                            	even
00018B18                            
00018B18                            ; ---------------------------------------------------------------------------
00018B18                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018B18                            ; ---------------------------------------------------------------------------
00018B18                            Map_obj78:
00018B18                            	include "_maps\obj78.asm"
00018B18                            ; ---------------------------------------------------------------------------
00018B18                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018B18                            ; ---------------------------------------------------------------------------
00018B18 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018B1C 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018B20 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018B24 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018B28 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018B2C 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018B30 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018B34 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018B38 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018B3C 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018B40 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018B44 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018B48 01                         byte_16D9E:	dc.b 1
00018B49 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018B4E 01                         byte_16DA4:	dc.b 1
00018B4F F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018B54 01                         byte_16DAA:	dc.b 1
00018B55 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018B5A 01                         byte_16DB0:	dc.b 1
00018B5B EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018B60 01                         byte_16DB6:	dc.b 1
00018B61 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018B66 01                         byte_16DBC:	dc.b 1
00018B67 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018B6C 01                         byte_16DC2:	dc.b 1
00018B6D EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018B72 01                         byte_16DC8:	dc.b 1
00018B73 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018B78 01                         byte_16DCE:	dc.b 1
00018B79 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018B7E 01                         byte_16DD4:	dc.b 1
00018B7F F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018B84 01                         byte_16DDA:	dc.b 1
00018B85 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018B8A 01                         byte_16DE0:	dc.b 1
00018B8B F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018B90 01                         byte_16DE6:	dc.b 1
00018B91 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018B96 01                         byte_16DEC:	dc.b 1
00018B97 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018B9C 01                         byte_16DF2:	dc.b 1
00018B9D F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018BA2 01                         byte_16DF8:	dc.b 1
00018BA3 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018BA8 01                         byte_16DFE:	dc.b 1
00018BA9 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018BAE 01                         byte_16E04:	dc.b 1
00018BAF F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018BB4 01                         byte_16E0A:	dc.b 1
00018BB5 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018BBA 01                         byte_16E10:	dc.b 1
00018BBB EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018BC0 01                         byte_16E16:	dc.b 1
00018BC1 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018BC6 01                         byte_16E1C:	dc.b 1
00018BC7 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00018BCC 01                         byte_16E22:	dc.b 1
00018BCD EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018BD2 01                         byte_16E28:	dc.b 1
00018BD3 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018BD8                            		even
00018BD8                            		even
00018BD8                            
00018BD8                            ; ===========================================================================
00018BD8                            ; ---------------------------------------------------------------------------
00018BD8                            ; Object 79 - lamppost
00018BD8                            ; ---------------------------------------------------------------------------
00018BD8                            
00018BD8                            Obj79:					; XREF: Obj_Index
00018BD8 7000                       		moveq	#0,d0
00018BDA 1028 0024                  		move.b	$24(a0),d0
00018BDE 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018BE2 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018BE6 4EFA 8240                  		jmp	MarkObjGone
00018BEA                            ; ===========================================================================
00018BEA 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018BEC 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018BEE 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018BF0 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018BF2                            ; ===========================================================================
00018BF2                            
00018BF2                            Obj79_Main:				; XREF: Obj79_Index
00018BF2 5428 0024                  		addq.b	#2,$24(a0)
00018BF6 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018BFE 317C 0571 0002             		move.w	#lamppostart,2(a0)
00018C04 117C 0004 0001             		move.b	#4,1(a0)
00018C0A 117C 0008 0019             		move.b	#8,$19(a0)
00018C10 117C 0005 0018             		move.b	#5,$18(a0)
00018C16 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018C1A 3440                       		movea.w	d0,a2	; load address into a2
00018C1C 0812 0000                  		btst	#0,(a2)
00018C20 6600                       		bne.s	Obj79_RedLamp
00018C22 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018C26 0201 007F                  		andi.b	#$7F,d1
00018C2A 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018C2E 0202 007F                  		andi.b	#$7F,d2
00018C32 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018C34 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018C36                            
00018C36                            Obj79_RedLamp:
00018C36 08D2 0000                  		bset	#0,(a2)
00018C3A 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018C40 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018C46 4E75                       		rts	
00018C48                            ; ===========================================================================
00018C48                            
00018C48                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018C48 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018C4C 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018C50 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018C54 6B00 0000                  		bmi.w	locret_16F90
00018C58 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018C5C 0201 007F                  		andi.b	#$7F,d1
00018C60 1428 0028                  		move.b	$28(a0),d2
00018C64 0202 007F                  		andi.b	#$7F,d2
00018C68 B202                       		cmp.b	d2,d1
00018C6A 6500                       		bcs.s	Obj79_HitLamp
00018C6C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018C70 3440                       		movea.w	d0,a2	; load address into a2
00018C72 08D2 0000                  		bset	#0,(a2)
00018C76 117C 0004 0024             		move.b	#4,$24(a0)
00018C7C 117C 0003 001A             		move.b	#3,$1A(a0)
00018C82 6000 0000                  		bra.w	locret_16F90
00018C86                            ; ===========================================================================
00018C86                            
00018C86                            Obj79_HitLamp:
00018C86 3038 D008                  		move.w	($FFFFD008).w,d0
00018C8A 9068 0008                  		sub.w	8(a0),d0
00018C8E 5040                       		addq.w	#8,d0
00018C90 0C40 0010                  		cmpi.w	#$10,d0
00018C94 6400 0000                  		bcc.w	locret_16F90
00018C98 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018C9C 9068 000C                  		sub.w	$C(a0),d0
00018CA0 0640 0040                  		addi.w	#$40,d0
00018CA4 0C40 0068                  		cmpi.w	#$68,d0
00018CA8 6400                       		bcc.s	locret_16F90
00018CAA 303C 00A1                  		move.w	#$A1,d0
00018CAE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lamppost sound
00018CB4 5428 0024                  		addq.b	#2,$24(a0)
00018CB8 4EB9 0000 EF34             		jsr	SingleObjLoad
00018CBE 6600                       		bne.s	loc_16F76
00018CC0 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018CC4 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018CCA 3368 0008 0030             		move.w	8(a0),$30(a1)
00018CD0 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018CD6 0469 0018 0032             		subi.w	#$18,$32(a1)
00018CDC 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018CE4 337C 0571 0002             		move.w	#lamppostart,2(a1)
00018CEA 137C 0004 0001             		move.b	#4,1(a1)
00018CF0 137C 0008 0019             		move.b	#8,$19(a1)
00018CF6 137C 0004 0018             		move.b	#4,$18(a1)
00018CFC 137C 0002 001A             		move.b	#2,$1A(a1)
00018D02 337C 0020 0036             		move.w	#$20,$36(a1)
00018D08                            
00018D08                            loc_16F76:
00018D08 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018D0E 6100 0000                  		bsr.w	Obj79_StoreInfo
00018D12 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018D16 3440                       		movea.w	d0,a2	; load address into a2
00018D18 08D2 0000                  		bset	#0,(a2)
00018D1C                            
00018D1C                            locret_16F90:
00018D1C 4E75                       		rts	
00018D1E                            ; ===========================================================================
00018D1E                            
00018D1E                            Obj79_AfterHit:				; XREF: Obj79_Index
00018D1E 4E75                       		rts	
00018D20                            ; ===========================================================================
00018D20                            
00018D20                            Obj79_Twirl:				; XREF: Obj79_Index
00018D20 5368 0036                  		subq.w	#1,$36(a0)
00018D24 6A00                       		bpl.s	loc_16FA0
00018D26 117C 0004 0024             		move.b	#4,$24(a0)
00018D2C                            
00018D2C                            loc_16FA0:
00018D2C 1028 0026                  		move.b	$26(a0),d0
00018D30 0428 0010 0026             		subi.b	#$10,$26(a0)
00018D36 0400 0040                  		subi.b	#$40,d0
00018D3A 4EB9 0000 29CC             		jsr	(CalcSine).l
00018D40 C3FC 0C00                  		muls.w	#$C00,d1
00018D44 4841                       		swap	d1
00018D46 D268 0030                  		add.w	$30(a0),d1
00018D4A 3141 0008                  		move.w	d1,8(a0)
00018D4E C1FC 0C00                  		muls.w	#$C00,d0
00018D52 4840                       		swap	d0
00018D54 D068 0032                  		add.w	$32(a0),d0
00018D58 3140 000C                  		move.w	d0,$C(a0)
00018D5C 4E75                       		rts	
00018D5E                            ; ===========================================================================
00018D5E                            ; ---------------------------------------------------------------------------
00018D5E                            ; Subroutine to	store information when you hit a lamppost
00018D5E                            ; ---------------------------------------------------------------------------
00018D5E                            
00018D5E                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00018D5E 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00018D64 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00018D6A 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00018D70 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00018D76 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00018D7C 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00018D82 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00018D88 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00018D8E 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00018D94 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00018D9A 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00018DA0 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00018DA6 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00018DAC 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00018DB2 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00018DB8 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00018DBE 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00018DC4 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00018DCA 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00018DD0 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00018DD6 4E75                       		rts	
00018DD8                            
00018DD8                            ; ---------------------------------------------------------------------------
00018DD8                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00018DD8                            ; ---------------------------------------------------------------------------
00018DD8                            
00018DD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DD8                            
00018DD8                            
00018DD8                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00018DD8 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00018DDE 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00018DE4 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018DEA 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00018DF0 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00018DF6 4278 FE20                  		clr.w	($FFFFFE20).w
00018DFA 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018DFE 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018E04 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018E0A 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018E0E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018E14 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018E1A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018E20 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00018E26 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018E2C 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00018E32 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00018E38 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00018E3E 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00018E44 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018E4A 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00018E50 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00018E56 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018E5C 6600                       		bne.s	loc_170E4
00018E5E 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00018E64 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018E6A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00018E70                            
00018E70                            loc_170E4:
00018E70 4A38 FE30                  		tst.b	($FFFFFE30).w
00018E74 6A00                       		bpl.s	locret_170F6
00018E76 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018E7A 0440 00A0                  		subi.w	#$A0,d0
00018E7E 31C0 F728                  		move.w	d0,($FFFFF728).w
00018E82                            
00018E82                            locret_170F6:
00018E82 4E75                       		rts	
00018E84                            ; End of function Obj79_LoadInfo
00018E84                            
00018E84                            ; ===========================================================================
00018E84                            ; ---------------------------------------------------------------------------
00018E84                            ; Sprite mappings - lamppost
00018E84                            ; ---------------------------------------------------------------------------
00018E84                            Map_obj79:
00018E84                            	include "_maps\obj79.asm"
00018E84                            ; ---------------------------------------------------------------------------
00018E84                            ; Sprite mappings - lamppost
00018E84                            ; ---------------------------------------------------------------------------
00018E84 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00018E88 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00018E8C 06                         byte_17100:	dc.b 6
00018E8D E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018E92 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018E97 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018E9C F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018EA1 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00018EA6 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00018EAB 04                         byte_1711F:	dc.b 4
00018EAC E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018EB1 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018EB6 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018EBB F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018EC0 02                         byte_17134:	dc.b 2
00018EC1 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00018EC6 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018ECB 06                         byte_1713F:	dc.b 6
00018ECC E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018ED1 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018ED6 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018EDB F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018EE0 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00018EE5 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018EEA                            		even
00018EEA                            		even
00018EEA                            
00018EEA                            ; ===========================================================================
00018EEA                            ; ---------------------------------------------------------------------------
00018EEA                            ; Object 7D - hidden points at the end of a level
00018EEA                            ; ---------------------------------------------------------------------------
00018EEA                            
00018EEA                            Obj7D:					; XREF: Obj_Index
00018EEA 7000                       		moveq	#0,d0
00018EEC 1028 0024                  		move.b	$24(a0),d0
00018EF0 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00018EF4 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00018EF8                            ; ===========================================================================
00018EF8 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00018EFA 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00018EFC                            ; ===========================================================================
00018EFC                            
00018EFC                            Obj7D_Main:				; XREF: Obj7D_Index
00018EFC 7410                       		moveq	#$10,d2
00018EFE 3602                       		move.w	d2,d3
00018F00 D643                       		add.w	d3,d3
00018F02 43F8 D000                  		lea	($FFFFD000).w,a1
00018F06 3029 0008                  		move.w	8(a1),d0
00018F0A 9068 0008                  		sub.w	8(a0),d0
00018F0E D042                       		add.w	d2,d0
00018F10 B043                       		cmp.w	d3,d0
00018F12 6400                       		bcc.s	Obj7D_ChkDel
00018F14 3229 000C                  		move.w	$C(a1),d1
00018F18 9268 000C                  		sub.w	$C(a0),d1
00018F1C D242                       		add.w	d2,d1
00018F1E B243                       		cmp.w	d3,d1
00018F20 6400                       		bcc.s	Obj7D_ChkDel
00018F22 4A78 FE08                  		tst.w	($FFFFFE08).w
00018F26 6600                       		bne.s	Obj7D_ChkDel
00018F28 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00018F2C 6600                       		bne.s	Obj7D_ChkDel
00018F2E 5428 0024                  		addq.b	#2,$24(a0)
00018F32 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00018F3A 317C 84B6 0002             		move.w	#$84B6,2(a0)
00018F40 0028 0004 0001             		ori.b	#4,1(a0)
00018F46 117C 0000 0018             		move.b	#0,$18(a0)
00018F4C 117C 0010 0019             		move.b	#$10,$19(a0)
00018F52 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00018F58 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018F5E 303C 00C9                  		move.w	#$C9,d0
00018F62 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play bonus sound
00018F68 7000                       		moveq	#0,d0
00018F6A 1028 0028                  		move.b	$28(a0),d0
00018F6E D040                       		add.w	d0,d0
00018F70 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00018F74 4EB9 0000 0000             		jsr	AddPoints
00018F7A                            
00018F7A                            Obj7D_ChkDel:
00018F7A 3028 0008                  		move.w	8(a0),d0
00018F7E 0240 FF80                  		andi.w	#$FF80,d0
00018F82 3238 F700                  		move.w	($FFFFF700).w,d1
00018F86 0441 0080                  		subi.w	#$80,d1
00018F8A 0241 FF80                  		andi.w	#$FF80,d1
00018F8E 9041                       		sub.w	d1,d0
00018F90 0C40 0280                  		cmpi.w	#$280,d0
00018F94 6300                       		bls.s	Obj7D_NoDel
00018F96 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018F9A 6700                       		beq.s	Obj7D_Delete		; if it's zero, don't remember object
00018F9C 3440                       		movea.w	d0,a2	; load address into a2
00018F9E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018FA2 6000                       		bra.s	Obj7D_Delete	; and delete object
00018FA4                            
00018FA4                            Obj7D_NoDel:
00018FA4 4E75                       		rts	
00018FA6                            ; ===========================================================================
00018FA6                            
00018FA6                            Obj7D_Delete:
00018FA6 4EF9 0000 E82E             		jmp	DeleteObject
00018FAC                            ; ===========================================================================
00018FAC 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00018FAE 03E8                       		dc.w 1000		; earn 1000*10 points for revealing 10000 object
00018FB0 0064                       		dc.w 100		; earn 100*10 points for revealing 1000 object
00018FB2 000A                       		dc.w 10			; earn 10*10 points for revealing 100 object
00018FB4                            ; ===========================================================================
00018FB4                            
00018FB4                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00018FB4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00018FB8 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00018FBA 3028 0008                  		move.w	8(a0),d0
00018FBE 0240 FF80                  		andi.w	#-$80,d0
00018FC2 3238 F700                  		move.w	($FFFFF700).w,d1
00018FC6 0441 0080                  		subi.w	#$80,d1
00018FCA 0241 FF80                  		andi.w	#-$80,d1
00018FCE 9041                       		sub.w	d1,d0
00018FD0 0C40 0280                  		cmpi.w	#$280,d0
00018FD4 6200                       		bhi.s	Obj7D_Delete2
00018FD6 4EF9 0000 E7DE             		jmp	DisplaySprite
00018FDC                            ; ===========================================================================
00018FDC                            
00018FDC                            Obj7D_Delete2:
00018FDC 4EF9 0000 E82E             		jmp	DeleteObject
00018FE2                            ; ===========================================================================
00018FE2                            ; ---------------------------------------------------------------------------
00018FE2                            ; Sprite mappings - hidden points at the end of	a level
00018FE2                            ; ---------------------------------------------------------------------------
00018FE2                            Map_obj7D:
00018FE2                            	include "_maps\obj7D.asm"
00018FE2                            ; ---------------------------------------------------------------------------
00018FE2                            ; Sprite mappings - hidden points at the end of	a level
00018FE2                            ; ---------------------------------------------------------------------------
00018FE2 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00018FE6 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00018FEA 00                         byte_17250:	dc.b 0
00018FEB 01                         byte_17251:	dc.b 1
00018FEC F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00018FF1 01                         byte_17257:	dc.b 1
00018FF2 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00018FF7 01                         byte_1725D:	dc.b 1
00018FF8 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00018FFE 00                         		even
00018FFE 00                         		even
00018FFE                            
00018FFE                            ; ===========================================================================
00018FFE                            ; ---------------------------------------------------------------------------
00018FFE                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00018FFE                            ; ---------------------------------------------------------------------------
00018FFE                            
00018FFE                            Obj8A:					; XREF: Obj_Index
00018FFE 7000                       		moveq	#0,d0
00019000 1028 0024                  		move.b	$24(a0),d0
00019004 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00019008 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001900C                            ; ===========================================================================
0001900C 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
0001900E 0000                       		dc.w Obj8A_Display-Obj8A_Index
00019010                            ; ===========================================================================
00019010                            
00019010                            Obj8A_Main:				; XREF: Obj8A_Index
00019010 5428 0024                  		addq.b	#2,$24(a0)
00019014 317C 0120 0008             		move.w	#$120,8(a0)
0001901A 317C 00F0 000A             		move.w	#$F0,$A(a0)
00019020 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00019028 317C 25A0 0002             		move.w	#$25A0,2(a0)
0001902E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00019032 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00019036 117C 0000 0001             		move.b	#0,1(a0)
0001903C 117C 0000 0018             		move.b	#0,$18(a0)
00019042 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00019048 6600                       		bne.s	Obj8A_Display	; if not, branch
0001904A 317C 20A6 0002             		move.w	#$20A6,2(a0)
00019050 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00019056 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001905A 6700                       		beq.s	Obj8A_Display	; if not, branch
0001905C 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00019062 6600                       		bne.s	Obj8A_Display	; if not, branch
00019064 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
0001906A 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00019070 4EF9 0000 E82E             		jmp	DeleteObject
00019076                            ; ===========================================================================
00019076                            
00019076                            Obj8A_Display:				; XREF: Obj8A_Index
00019076 4EF9 0000 E7DE             		jmp	DisplaySprite
0001907C                            ; ===========================================================================
0001907C                            ; ---------------------------------------------------------------------------
0001907C                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001907C                            ; ---------------------------------------------------------------------------
0001907C                            Map_obj8A:
0001907C                            	include "_maps\obj8A.asm"
0001907C                            ; ---------------------------------------------------------------------------
0001907C                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001907C                            ; ---------------------------------------------------------------------------
0001907C 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00019080 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00019084 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00019088 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
0001908C 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00019090 0000                       		dc.w byte_176A9-Map_obj8A
00019092 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00019093 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00019098 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001909D F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
000190A2 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
000190A7 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
000190AC F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
000190B1 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
000190B6 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000190BB F809 0008 08               		dc.b $F8, 9, 0,	8, 8
000190C0 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
000190C5 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
000190CA F805 0004 48               		dc.b $F8, 5, 0,	4, $48
000190CF F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
000190D4 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
000190D9 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
000190DA D805 0000 80               		dc.b $D8, 5, 0,	0, $80
000190DF D805 0004 90               		dc.b $D8, 5, 0,	4, $90
000190E4 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
000190E9 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
000190EE D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
000190F3 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
000190F8 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
000190FD D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00019102 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00019107 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
0001910C 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00019111 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00019116 0805 0016 08               		dc.b 8,	5, 0, $16, 8
0001911B 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00019120 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00019125 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
0001912A 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
0001912B D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00019130 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00019135 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
0001913A D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
0001913F D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00019144 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00019149 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
0001914E 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00019153 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00019158 0805 0036 08               		dc.b 8,	5, 0, $36, 8
0001915D 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
0001915E D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00019163 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00019168 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
0001916D D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00019172 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00019177 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
0001917C D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00019181 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00019186 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
0001918B D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00019190 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00019195 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
0001919A D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
0001919F D805 0000 58               		dc.b $D8, 5, 0,	0, $58
000191A4 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
000191A9 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
000191AE 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
000191B3 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
000191B8 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
000191BD 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
000191C2 0805 0016 00               		dc.b 8,	5, 0, $16, 0
000191C7 0805 0004 10               		dc.b 8,	5, 0, 4, $10
000191CC 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
000191D1 0805 0042 30               		dc.b 8,	5, 0, $42, $30
000191D6 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
000191D7 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
000191DC D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
000191E1 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
000191E6 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
000191EB D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
000191F0 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
000191F5 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
000191FA 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
000191FF 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00019204 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00019209 0005 0004 24               		dc.b 0,	5, 0, 4, $24
0001920E 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00019213 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00019218 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
0001921D 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00019222 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00019227 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
0001922C 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00019231 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00019236 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
0001923B 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
0001923C D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00019241 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00019246 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
0001924B D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00019250 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00019255 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
0001925A D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
0001925F D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00019264 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00019269 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
0001926E D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00019273 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00019278 0809 0008 88               		dc.b 8,	9, 0, 8, $88
0001927D 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00019282 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00019287 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
0001928C 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00019291 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00019296 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
0001929B 0805 0004 08               		dc.b 8,	5, 0, 4, 8
000192A0 0805 0058 18               		dc.b 8,	5, 0, $58, $18
000192A5 0805 0004 28               		dc.b 8,	5, 0, 4, $28
000192AA 0809 0008 38               		dc.b 8,	9, 0, 8, $38
000192AF 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
000192B4 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
000192B9 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
000192BE 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
000192BF D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
000192C4 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
000192C9 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
000192CE D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
000192D3 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
000192D8 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
000192DD D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
000192E2 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
000192E7 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
000192EC D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
000192F1 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
000192F6 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
000192FB 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00019300 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00019305 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001930A 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001930F 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00019314 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00019319 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001931E 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00019323 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00019328 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001932D 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00019332 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00019333 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
00019338 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
0001933D D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00019342 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00019347 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
0001934C D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00019351 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00019356 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
0001935B D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00019360 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00019365 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
0001936A D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
0001936F D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00019374 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00019379 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
0001937E 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00019383 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00019388 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
0001938D 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00019392 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00019397 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
0001939C 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
000193A1 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
000193A6 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
000193AB 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
000193B0 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
000193B5 0001 0046 74               		dc.b 0,	1, 0, $46, $74
000193BA 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
000193BF 2005 0004 08               		dc.b $20, 5, 0,	4, 8
000193C4 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
000193C9 2005 0004 28               		dc.b $20, 5, 0,	4, $28
000193CE 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
000193CF F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
000193D4 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
000193D9 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
000193DE F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
000193E3 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
000193E8 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
000193ED F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
000193F2 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
000193F7 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
000193FC F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00019401 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00019406 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
0001940B F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00019410 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00019415 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0001941A 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0001941B 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00019420 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00019425 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001942A 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001942F 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00019434 3005 0004 18               		dc.b $30, 5, 0,	4, $18
00019439 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001943E 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00019443 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
00019444 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
00019449 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
0001944E E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
00019453 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
00019458 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
0001945D E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00019462 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00019467 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
0001946C E809 0008 34               		dc.b $E8, 9, 0,	8, $34
00019471 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
00019476 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
0001947B 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
00019480 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00019485 0005 000E 00               		dc.b 0,	5, 0, $E, 0
0001948A 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
0001948F 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00019494 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
0001949A 00                         		even
0001949A 00                         		even
0001949A                            
0001949A                            ; ===========================================================================
0001949A                            ; ---------------------------------------------------------------------------
0001949A                            ; Object 3D - Eggman (GHZ)
0001949A                            ; ---------------------------------------------------------------------------
0001949A                            
0001949A                            Obj3D:					; XREF: Obj_Index
0001949A 7000                       		moveq	#0,d0
0001949C 1028 0024                  		move.b	$24(a0),d0
000194A0 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000194A4 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000194A8                            ; ===========================================================================
000194A8 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000194AA 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000194AC 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000194AE 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000194B0                            
000194B0 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000194B2 0401                       		dc.b 4,	1
000194B4 0607                       		dc.b 6,	7
000194B6                            ; ===========================================================================
000194B6                            
000194B6                            Obj3D_Main:				; XREF: Obj3D_Index
000194B6 45F9 0001 94B0             		lea	(Obj3D_ObjData).l,a2
000194BC 2248                       		movea.l	a0,a1
000194BE 7202                       		moveq	#2,d1
000194C0 6000                       		bra.s	Obj3D_LoadBoss
000194C2                            ; ===========================================================================
000194C2                            
000194C2                            Obj3D_Loop:
000194C2 4EB9 0000 EF4A             		jsr	SingleObjLoad2
000194C8 6600                       		bne.s	loc_17772
000194CA                            
000194CA                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000194CA 135A 0024                  		move.b	(a2)+,$24(a1)
000194CE 12BC 003D                  		move.b	#$3D,0(a1)
000194D2 3368 0008 0008             		move.w	8(a0),8(a1)
000194D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000194DE 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000194E6 337C 0400 0002             		move.w	#$400,2(a1)
000194EC 137C 0004 0001             		move.b	#4,1(a1)
000194F2 137C 0020 0019             		move.b	#$20,$19(a1)
000194F8 137C 0003 0018             		move.b	#3,$18(a1)
000194FE 135A 001C                  		move.b	(a2)+,$1C(a1)
00019502 2348 0034                  		move.l	a0,$34(a1)
00019506 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001950A                            
0001950A                            loc_17772:
0001950A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019510 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019516 117C 000F 0020             		move.b	#$F,$20(a0)
0001951C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019522                            
00019522                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00019522 7000                       		moveq	#0,d0
00019524 1028 0025                  		move.b	$25(a0),d0
00019528 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001952C 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00019530 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019536 4EB9 0000 B83E             		jsr	AnimateSprite
0001953C 1028 0022                  		move.b	$22(a0),d0
00019540 0200 0003                  		andi.b	#3,d0
00019544 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001954A 8128 0001                  		or.b	d0,1(a0)
0001954E 4EF9 0000 E7DE             		jmp	DisplaySprite
00019554                            ; ===========================================================================
00019554 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00019556 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00019558 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001955A 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001955C 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
0001955E 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00019560 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00019562                            ; ===========================================================================
00019562                            
00019562                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00019562 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00019568 6100 0000                  		bsr.w	BossMove
0001956C 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00019572 6600                       		bne.s	loc_177E6
00019574 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001957A 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001957E                            
0001957E                            loc_177E6:
0001957E 1028 003F                  		move.b	$3F(a0),d0
00019582 4EB9 0000 29CC             		jsr	(CalcSine).l
00019588 EC40                       		asr.w	#6,d0
0001958A D068 0038                  		add.w	$38(a0),d0
0001958E 3140 000C                  		move.w	d0,$C(a0)
00019592 3168 0030 0008             		move.w	$30(a0),8(a0)
00019598 5428 003F                  		addq.b	#2,$3F(a0)
0001959C 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000195A2 6400                       		bcc.s	locret_1784A
000195A4 4A28 0022                  		tst.b	$22(a0)
000195A8 6B00                       		bmi.s	loc_1784C
000195AA 4A28 0020                  		tst.b	$20(a0)
000195AE 6600                       		bne.s	locret_1784A
000195B0 4A28 003E                  		tst.b	$3E(a0)
000195B4 6600                       		bne.s	Obj3D_ShipFlash
000195B6 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000195BC 303C 00AC                  		move.w	#$AC,d0
000195C0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
000195C6                            
000195C6                            Obj3D_ShipFlash:
000195C6 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000195CA 7000                       		moveq	#0,d0		; move 0 (black) to d0
000195CC 4A51                       		tst.w	(a1)
000195CE 6600                       		bne.s	loc_1783C
000195D0 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000195D4                            
000195D4                            loc_1783C:
000195D4 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000195D6 5328 003E                  		subq.b	#1,$3E(a0)
000195DA 6600                       		bne.s	locret_1784A
000195DC 117C 000F 0020             		move.b	#$F,$20(a0)
000195E2                            
000195E2                            locret_1784A:
000195E2 4E75                       		rts	
000195E4                            ; ===========================================================================
000195E4                            
000195E4                            loc_1784C:				; XREF: loc_177E6
000195E4 7064                       		moveq	#100,d0
000195E6 6100 0000                  		bsr.w	AddPoints
000195EA 117C 0008 0025             		move.b	#8,$25(a0)
000195F0 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000195F6 4E75                       		rts	
000195F8                            
000195F8                            ; ---------------------------------------------------------------------------
000195F8                            ; Defeated boss	subroutine
000195F8                            ; ---------------------------------------------------------------------------
000195F8                            
000195F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000195F8                            
000195F8                            
000195F8                            BossDefeated:
000195F8 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
000195FE 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
00019604 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019608 0200 0007                  		andi.b	#7,d0
0001960C 6600                       		bne.s	locret_178A2
0001960E 4EB9 0000 EF34             		jsr	SingleObjLoad
00019614 6600                       		bne.s	locret_178A2
00019616 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001961A 3368 0008 0008             		move.w	8(a0),8(a1)
00019620 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019626 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001962C 3200                       		move.w	d0,d1
0001962E 7200                       		moveq	#0,d1
00019630 1200                       		move.b	d0,d1
00019632 E409                       		lsr.b	#2,d1
00019634 0441 0020                  		subi.w	#$20,d1
00019638 D369 0008                  		add.w	d1,8(a1)
0001963C E048                       		lsr.w	#8,d0
0001963E E608                       		lsr.b	#3,d0
00019640 D169 000C                  		add.w	d0,$C(a1)
00019644                            
00019644                            locret_178A2:
00019644 4E75                       		rts	
00019646                            ; End of function BossDefeated
00019646                            
00019646                            ; ---------------------------------------------------------------------------
00019646                            ; Subroutine to	move a boss
00019646                            ; ---------------------------------------------------------------------------
00019646                            
00019646                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019646                            
00019646                            
00019646                            BossMove:
00019646 2428 0030                  		move.l	$30(a0),d2
0001964A 2628 0038                  		move.l	$38(a0),d3
0001964E 3028 0010                  		move.w	$10(a0),d0
00019652 48C0                       		ext.l	d0
00019654 E180                       		asl.l	#8,d0
00019656 D480                       		add.l	d0,d2
00019658 3028 0012                  		move.w	$12(a0),d0
0001965C 48C0                       		ext.l	d0
0001965E E180                       		asl.l	#8,d0
00019660 D680                       		add.l	d0,d3
00019662 2142 0030                  		move.l	d2,$30(a0)
00019666 2143 0038                  		move.l	d3,$38(a0)
0001966A 4E75                       		rts	
0001966C                            ; End of function BossMove
0001966C                            
0001966C                            ; ===========================================================================
0001966C                            
0001966C                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
0001966C 317C FF00 0010             		move.w	#-$100,$10(a0)
00019672 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019678 6100 FFCC                  		bsr.w	BossMove
0001967C 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019682 6600                       		bne.s	loc_17916
00019684 317C 0000 0010             		move.w	#0,$10(a0)
0001968A 317C 0000 0012             		move.w	#0,$12(a0)
00019690 5428 0025                  		addq.b	#2,$25(a0)
00019694 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001969A 6600                       		bne.s	loc_17910
0001969C 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000196A0 3368 0030 0008             		move.w	$30(a0),8(a1)
000196A6 3368 0038 000C             		move.w	$38(a0),$C(a1)
000196AC 2348 0034                  		move.l	a0,$34(a1)
000196B0                            
000196B0                            loc_17910:
000196B0 317C 0077 003C             		move.w	#$77,$3C(a0)
000196B6                            
000196B6                            loc_17916:
000196B6 6000 FEC6                  		bra.w	loc_177E6
000196BA                            ; ===========================================================================
000196BA                            
000196BA                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
000196BA 5368 003C                  		subq.w	#1,$3C(a0)
000196BE 6A00                       		bpl.s	Obj3D_Reverse
000196C0 5428 0025                  		addq.b	#2,$25(a0)
000196C4 317C 003F 003C             		move.w	#$3F,$3C(a0)
000196CA 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
000196D0 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000196D6 6600                       		bne.s	Obj3D_Reverse
000196D8 317C 007F 003C             		move.w	#$7F,$3C(a0)
000196DE 317C 0040 0010             		move.w	#$40,$10(a0)
000196E4                            
000196E4                            Obj3D_Reverse:
000196E4 0828 0000 0022             		btst	#0,$22(a0)
000196EA 6600                       		bne.s	loc_17950
000196EC 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
000196F0                            
000196F0                            loc_17950:
000196F0 6000 FE8C                  		bra.w	loc_177E6
000196F4                            ; ===========================================================================
000196F4                            
000196F4                            loc_17954:				; XREF: Obj3D_ShipIndex
000196F4 5368 003C                  		subq.w	#1,$3C(a0)
000196F8 6B00                       		bmi.s	loc_17960
000196FA 6100 FF4A                  		bsr.w	BossMove
000196FE 6000                       		bra.s	loc_17976
00019700                            ; ===========================================================================
00019700                            
00019700                            loc_17960:
00019700 0868 0000 0022             		bchg	#0,$22(a0)
00019706 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001970C 5528 0025                  		subq.b	#2,$25(a0)
00019710 317C 0000 0010             		move.w	#0,$10(a0)
00019716                            
00019716                            loc_17976:
00019716 6000 FE66                  		bra.w	loc_177E6
0001971A                            ; ===========================================================================
0001971A                            
0001971A                            loc_1797A:				; XREF: Obj3D_ShipIndex
0001971A 5368 003C                  		subq.w	#1,$3C(a0)
0001971E 6B00                       		bmi.s	loc_17984
00019720 6000 FED6                  		bra.w	BossDefeated
00019724                            ; ===========================================================================
00019724                            
00019724                            loc_17984:
00019724 08E8 0000 0022             		bset	#0,$22(a0)
0001972A 08A8 0007 0022             		bclr	#7,$22(a0)
00019730 4268 0010                  		clr.w	$10(a0)
00019734 5428 0025                  		addq.b	#2,$25(a0)
00019738 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001973E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019742 6600                       		bne.s	locret_179AA
00019744 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001974A                            
0001974A                            locret_179AA:
0001974A 4E75                       		rts	
0001974C                            ; ===========================================================================
0001974C                            
0001974C                            loc_179AC:				; XREF: Obj3D_ShipIndex
0001974C 5268 003C                  		addq.w	#1,$3C(a0)
00019750 6700                       		beq.s	loc_179BC
00019752 6A00                       		bpl.s	loc_179C2
00019754 0668 0018 0012             		addi.w	#$18,$12(a0)
0001975A 6000                       		bra.s	loc_179EE
0001975C                            ; ===========================================================================
0001975C                            
0001975C                            loc_179BC:
0001975C 4268 0012                  		clr.w	$12(a0)
00019760 6000                       		bra.s	loc_179EE
00019762                            ; ===========================================================================
00019762                            
00019762                            loc_179C2:
00019762 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019768 6500                       		bcs.s	loc_179DA
0001976A 6700                       		beq.s	loc_179E0
0001976C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019772 6500                       		bcs.s	loc_179EE
00019774 5428 0025                  		addq.b	#2,$25(a0)
00019778 6000                       		bra.s	loc_179EE
0001977A                            ; ===========================================================================
0001977A                            
0001977A                            loc_179DA:
0001977A 5168 0012                  		subq.w	#8,$12(a0)
0001977E 6000                       		bra.s	loc_179EE
00019780                            ; ===========================================================================
00019780                            
00019780                            loc_179E0:
00019780 4268 0012                  		clr.w	$12(a0)
00019784 303C 0081                  		move.w	#$81,d0
00019788 4EB9 0000 11F0             		jsr	(PlaySound).l	; play GHZ music
0001978E                            
0001978E                            loc_179EE:
0001978E 6100 FEB6                  		bsr.w	BossMove
00019792 6000 FDEA                  		bra.w	loc_177E6
00019796                            ; ===========================================================================
00019796                            
00019796                            loc_179F6:				; XREF: Obj3D_ShipIndex
00019796 317C 0400 0010             		move.w	#$400,$10(a0)
0001979C 317C FFC0 0012             		move.w	#-$40,$12(a0)
000197A2 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000197A8 6700                       		beq.s	loc_17A10
000197AA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000197AE 6000                       		bra.s	loc_17A16
000197B0                            ; ===========================================================================
000197B0                            
000197B0                            loc_17A10:
000197B0 4A28 0001                  		tst.b	1(a0)
000197B4 6A00                       		bpl.s	Obj3D_ShipDel
000197B6                            
000197B6                            loc_17A16:
000197B6 6100 FE8E                  		bsr.w	BossMove
000197BA 6000 FDC2                  		bra.w	loc_177E6
000197BE                            ; ===========================================================================
000197BE                            
000197BE                            Obj3D_ShipDel:
000197BE 4EF9 0000 E82E             		jmp	DeleteObject
000197C4                            ; ===========================================================================
000197C4                            
000197C4                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000197C4 7000                       		moveq	#0,d0
000197C6 7201                       		moveq	#1,d1
000197C8 2268 0034                  		movea.l	$34(a0),a1
000197CC 1029 0025                  		move.b	$25(a1),d0
000197D0 5900                       		subq.b	#4,d0
000197D2 6600                       		bne.s	loc_17A3E
000197D4 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000197DA 6600                       		bne.s	loc_17A46
000197DC 7204                       		moveq	#4,d1
000197DE                            
000197DE                            loc_17A3E:
000197DE 5D00                       		subq.b	#6,d0
000197E0 6B00                       		bmi.s	loc_17A46
000197E2 720A                       		moveq	#$A,d1
000197E4 6000                       		bra.s	loc_17A5A
000197E6                            ; ===========================================================================
000197E6                            
000197E6                            loc_17A46:
000197E6 4A29 0020                  		tst.b	$20(a1)
000197EA 6600                       		bne.s	loc_17A50
000197EC 7205                       		moveq	#5,d1
000197EE 6000                       		bra.s	loc_17A5A
000197F0                            ; ===========================================================================
000197F0                            
000197F0                            loc_17A50:
000197F0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000197F6 6500                       		bcs.s	loc_17A5A
000197F8 7204                       		moveq	#4,d1
000197FA                            
000197FA                            loc_17A5A:
000197FA 1141 001C                  		move.b	d1,$1C(a0)
000197FE 5500                       		subq.b	#2,d0
00019800 6600                       		bne.s	Obj3D_FaceDisp
00019802 117C 0006 001C             		move.b	#6,$1C(a0)
00019808 4A28 0001                  		tst.b	1(a0)
0001980C 6A00                       		bpl.s	Obj3D_FaceDel
0001980E                            
0001980E                            Obj3D_FaceDisp:
0001980E 6000                       		bra.s	Obj3D_Display
00019810                            ; ===========================================================================
00019810                            
00019810                            Obj3D_FaceDel:
00019810 4EF9 0000 E82E             		jmp	DeleteObject
00019816                            ; ===========================================================================
00019816                            
00019816                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019816 117C 0007 001C             		move.b	#7,$1C(a0)
0001981C 2268 0034                  		movea.l	$34(a0),a1
00019820 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019826 6600                       		bne.s	loc_17A96
00019828 117C 000B 001C             		move.b	#$B,$1C(a0)
0001982E 4A28 0001                  		tst.b	1(a0)
00019832 6A00                       		bpl.s	Obj3D_FlameDel
00019834 6000                       		bra.s	Obj3D_FlameDisp
00019836                            ; ===========================================================================
00019836                            
00019836                            loc_17A96:
00019836 3029 0010                  		move.w	$10(a1),d0
0001983A 6700                       		beq.s	Obj3D_FlameDisp
0001983C 117C 0008 001C             		move.b	#8,$1C(a0)
00019842                            
00019842                            Obj3D_FlameDisp:
00019842 6000                       		bra.s	Obj3D_Display
00019844                            ; ===========================================================================
00019844                            
00019844                            Obj3D_FlameDel:
00019844 4EF9 0000 E82E             		jmp	DeleteObject
0001984A                            ; ===========================================================================
0001984A                            
0001984A                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
0001984A 2268 0034                  		movea.l	$34(a0),a1
0001984E 3169 0008 0008             		move.w	8(a1),8(a0)
00019854 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001985A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019860 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019866 4EB9 0000 B83E             		jsr	AnimateSprite
0001986C 1028 0022                  		move.b	$22(a0),d0
00019870 0200 0003                  		andi.b	#3,d0
00019874 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001987A 8128 0001                  		or.b	d0,1(a0)
0001987E 4EF9 0000 E7DE             		jmp	DisplaySprite
00019884                            ; ===========================================================================
00019884                            ; ---------------------------------------------------------------------------
00019884                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019884                            ; ---------------------------------------------------------------------------
00019884                            
00019884                            Obj48:					; XREF: Obj_Index
00019884 7000                       		moveq	#0,d0
00019886 1028 0024                  		move.b	$24(a0),d0
0001988A 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001988E 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00019892                            ; ===========================================================================
00019892 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019894 0000                       		dc.w Obj48_Base-Obj48_Index
00019896 0000                       		dc.w Obj48_Display2-Obj48_Index
00019898 0000                       		dc.w loc_17C68-Obj48_Index
0001989A 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
0001989C                            ; ===========================================================================
0001989C                            
0001989C                            Obj48_Main:				; XREF: Obj48_Index
0001989C 5428 0024                  		addq.b	#2,$24(a0)
000198A0 317C 4080 0026             		move.w	#$4080,$26(a0)
000198A6 317C FE00 003E             		move.w	#-$200,$3E(a0)
000198AC 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000198B4 317C 046C 0002             		move.w	#$46C,2(a0)
000198BA 45E8 0028                  		lea	$28(a0),a2
000198BE 14FC 0000                  		move.b	#0,(a2)+
000198C2 7205                       		moveq	#5,d1
000198C4 2248                       		movea.l	a0,a1
000198C6 6000                       		bra.s	loc_17B60
000198C8                            ; ===========================================================================
000198C8                            
000198C8                            Obj48_MakeLinks:
000198C8 4EB9 0000 EF4A             		jsr	SingleObjLoad2
000198CE 6600                       		bne.s	Obj48_MakeBall
000198D0 3368 0008 0008             		move.w	8(a0),8(a1)
000198D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000198DC 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000198E0 137C 0006 0024             		move.b	#6,$24(a1)
000198E6 237C 0000 8D66 0004        		move.l	#Map_obj15,4(a1)
000198EE 337C 0380 0002             		move.w	#$380,2(a1)
000198F4 137C 0001 001A             		move.b	#1,$1A(a1)
000198FA 5228 0028                  		addq.b	#1,$28(a0)
000198FE                            
000198FE                            loc_17B60:				; XREF: Obj48_Main
000198FE 3A09                       		move.w	a1,d5
00019900 0445 D000                  		subi.w	#$D000,d5
00019904 EC4D                       		lsr.w	#6,d5
00019906 0245 007F                  		andi.w	#$7F,d5
0001990A 14C5                       		move.b	d5,(a2)+
0001990C 137C 0004 0001             		move.b	#4,1(a1)
00019912 137C 0008 0019             		move.b	#8,$19(a1)
00019918 137C 0006 0018             		move.b	#6,$18(a1)
0001991E 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019924 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019928                            
00019928                            Obj48_MakeBall:
00019928 137C 0008 0024             		move.b	#8,$24(a1)
0001992E 237C 0000 92DE 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019936 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
0001993C 137C 0001 001A             		move.b	#1,$1A(a1)
00019942 137C 0005 0018             		move.b	#5,$18(a1)
00019948 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
0001994E 4E75                       		rts	
00019950                            ; ===========================================================================
00019950                            
00019950 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019956                            
00019956                            ; ===========================================================================
00019956                            
00019956                            Obj48_Base:				; XREF: Obj48_Index
00019956 47F9 0001 9950             		lea	(Obj48_PosData).l,a3
0001995C 45E8 0028                  		lea	$28(a0),a2
00019960 7C00                       		moveq	#0,d6
00019962 1C1A                       		move.b	(a2)+,d6
00019964                            
00019964                            loc_17BC6:
00019964 7800                       		moveq	#0,d4
00019966 181A                       		move.b	(a2)+,d4
00019968 ED4C                       		lsl.w	#6,d4
0001996A 0684 00FF D000             		addi.l	#$FFD000,d4
00019970 2244                       		movea.l	d4,a1
00019972 101B                       		move.b	(a3)+,d0
00019974 B029 003C                  		cmp.b	$3C(a1),d0
00019978 6700                       		beq.s	loc_17BE0
0001997A 5229 003C                  		addq.b	#1,$3C(a1)
0001997E                            
0001997E                            loc_17BE0:
0001997E 51CE FFE4                  		dbf	d6,loc_17BC6
00019982                            
00019982 B029 003C                  		cmp.b	$3C(a1),d0
00019986 6600                       		bne.s	loc_17BFA
00019988 2268 0034                  		movea.l	$34(a0),a1
0001998C 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019992 6600                       		bne.s	loc_17BFA
00019994 5428 0024                  		addq.b	#2,$24(a0)
00019998                            
00019998                            loc_17BFA:
00019998 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001999E 6700                       		beq.s	Obj48_Display
000199A0 5268 0032                  		addq.w	#1,$32(a0)
000199A4                            
000199A4                            Obj48_Display:
000199A4 6100 0000                  		bsr.w	sub_17C2A
000199A8 1028 0026                  		move.b	$26(a0),d0
000199AC 4EB9 0000 8CCC             		jsr	(Obj15_Move2).l
000199B2 4EF9 0000 E7DE             		jmp	DisplaySprite
000199B8                            ; ===========================================================================
000199B8                            
000199B8                            Obj48_Display2:				; XREF: Obj48_Index
000199B8 6100 0000                  		bsr.w	sub_17C2A
000199BC 4EB9 0000 8C8C             		jsr	(Obj48_Move).l
000199C2 4EF9 0000 E7DE             		jmp	DisplaySprite
000199C8                            
000199C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000199C8                            
000199C8                            
000199C8                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000199C8 2268 0034                  		movea.l	$34(a0),a1
000199CC 0628 0020 001B             		addi.b	#$20,$1B(a0)
000199D2 6400                       		bcc.s	loc_17C3C
000199D4 0868 0000 001A             		bchg	#0,$1A(a0)
000199DA                            
000199DA                            loc_17C3C:
000199DA 3169 0008 003A             		move.w	8(a1),$3A(a0)
000199E0 3029 000C                  		move.w	$C(a1),d0
000199E4 D068 0032                  		add.w	$32(a0),d0
000199E8 3140 0038                  		move.w	d0,$38(a0)
000199EC 1169 0022 0022             		move.b	$22(a1),$22(a0)
000199F2 4A29 0022                  		tst.b	$22(a1)
000199F6 6A00                       		bpl.s	locret_17C66
000199F8 10BC 003F                  		move.b	#$3F,0(a0)
000199FC 117C 0000 0024             		move.b	#0,$24(a0)
00019A02                            
00019A02                            locret_17C66:
00019A02 4E75                       		rts	
00019A04                            ; End of function sub_17C2A
00019A04                            
00019A04                            ; ===========================================================================
00019A04                            
00019A04                            loc_17C68:				; XREF: Obj48_Index
00019A04 2268 0034                  		movea.l	$34(a0),a1
00019A08 4A29 0022                  		tst.b	$22(a1)
00019A0C 6A00                       		bpl.s	Obj48_Display3
00019A0E 10BC 003F                  		move.b	#$3F,0(a0)
00019A12 117C 0000 0024             		move.b	#0,$24(a0)
00019A18                            
00019A18                            Obj48_Display3:
00019A18 4EF9 0000 E7DE             		jmp	DisplaySprite
00019A1E                            ; ===========================================================================
00019A1E                            
00019A1E                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019A1E 7000                       		moveq	#0,d0
00019A20 4A28 001A                  		tst.b	$1A(a0)
00019A24 6600                       		bne.s	Obj48_Vanish
00019A26 5200                       		addq.b	#1,d0
00019A28                            
00019A28                            Obj48_Vanish:
00019A28 1140 001A                  		move.b	d0,$1A(a0)
00019A2C 2268 0034                  		movea.l	$34(a0),a1
00019A30 4A29 0022                  		tst.b	$22(a1)
00019A34 6A00                       		bpl.s	Obj48_Display4
00019A36 117C 0000 0020             		move.b	#0,$20(a0)
00019A3C 6100 FBBA                  		bsr.w	BossDefeated
00019A40 5328 003C                  		subq.b	#1,$3C(a0)
00019A44 6A00                       		bpl.s	Obj48_Display4
00019A46 10BC 003F                  		move.b	#$3F,(a0)
00019A4A 117C 0000 0024             		move.b	#0,$24(a0)
00019A50                            
00019A50                            Obj48_Display4:
00019A50 4EF9 0000 E7DE             		jmp	DisplaySprite
00019A56                            ; ===========================================================================
00019A56                            Ani_Eggman:
00019A56                            	include "_anim\Eggman.asm"
00019A56                            ; ---------------------------------------------------------------------------
00019A56                            ; Animation script - Eggman (bosses)
00019A56                            ; ---------------------------------------------------------------------------
00019A56 0000                       		dc.w byte_17CD4-Ani_Eggman
00019A58 0000                       		dc.w byte_17CD8-Ani_Eggman
00019A5A 0000                       		dc.w byte_17CDC-Ani_Eggman
00019A5C 0000                       		dc.w byte_17CE0-Ani_Eggman
00019A5E 0000                       		dc.w byte_17CE4-Ani_Eggman
00019A60 0000                       		dc.w byte_17CE8-Ani_Eggman
00019A62 0000                       		dc.w byte_17CEC-Ani_Eggman
00019A64 0000                       		dc.w byte_17CF0-Ani_Eggman
00019A66 0000                       		dc.w byte_17CF4-Ani_Eggman
00019A68 0000                       		dc.w byte_17CF8-Ani_Eggman
00019A6A 0000                       		dc.w byte_17CFC-Ani_Eggman
00019A6C 0000                       		dc.w byte_17D00-Ani_Eggman
00019A6E 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019A72 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019A76 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019A7A 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019A7E 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019A82 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019A86 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019A8A 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019A8E 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019A92 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019A96 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019A9A 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019AA6                            		even
00019AA6                            		even
00019AA6                            
00019AA6                            ; ---------------------------------------------------------------------------
00019AA6                            ; Sprite mappings - Eggman (boss levels)
00019AA6                            ; ---------------------------------------------------------------------------
00019AA6                            Map_Eggman:
00019AA6                            	include "_maps\Eggman.asm"
00019AA6                            ; ---------------------------------------------------------------------------
00019AA6                            ; Sprite mappings - Eggman (boss levels)
00019AA6                            ; ---------------------------------------------------------------------------
00019AA6 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019AAA 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019AAE 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019AB2 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019AB6 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019ABA 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019ABE 0000                       		dc.w byte_17DC8-Map_Eggman
00019AC0 06                         byte_17D26:	dc.b 6
00019AC1 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019AC6 EC01 000E 14               		dc.b $EC, 1, 0,	$E, $14
00019ACB FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019AD0 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019AD5 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019ADA 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019ADF 02                         byte_17D45:	dc.b 2
00019AE0 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019AE5 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019AEA 02                         byte_17D50:	dc.b 2
00019AEB E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019AF0 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019AF5 03                         byte_17D5B:	dc.b 3
00019AF6 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019AFB EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019B00 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019B05 03                         byte_17D6B:	dc.b 3
00019B06 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019B0B EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019B10 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019B15 03                         byte_17D7B:	dc.b 3
00019B16 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019B1B EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019B20 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019B25 03                         byte_17D8B:	dc.b 3
00019B26 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019B2B E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019B30 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019B35 04                         byte_17D9B:	dc.b 4
00019B36 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019B3B E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019B40 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019B45 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019B4A 01                         byte_17DB0:	dc.b 1
00019B4B 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019B50 01                         byte_17DB6:	dc.b 1
00019B51 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019B56 00                         byte_17DBC:	dc.b 0
00019B57 02                         byte_17DBD:	dc.b 2
00019B58 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019B5D 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019B62 02                         byte_17DC8:	dc.b 2
00019B63 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019B68 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019B6E 00                         		even
00019B6E 00                         		even
00019B6E                            
00019B6E                            ; ---------------------------------------------------------------------------
00019B6E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019B6E                            ; ---------------------------------------------------------------------------
00019B6E                            Map_BossItems:
00019B6E                            	include "_maps\Boss items.asm"
00019B6E                            ; ---------------------------------------------------------------------------
00019B6E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019B6E                            ; ---------------------------------------------------------------------------
00019B6E 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019B72 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019B76 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019B7A 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019B7E 01                         byte_17DE4:	dc.b 1
00019B7F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019B84 02                         byte_17DEA:	dc.b 2
00019B85 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019B8A F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019B8F 00                         		dc.b 0
00019B90 01                         byte_17DF6:	dc.b 1
00019B91 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019B96 01                         byte_17DFC:	dc.b 1
00019B97 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019B9C 01                         byte_17E02:	dc.b 1
00019B9D 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019BA2 04                         byte_17E08:	dc.b 4
00019BA3 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019BA8 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019BAD F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019BB2 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019BB7 00                         		dc.b 0
00019BB8 02                         byte_17E1E:	dc.b 2
00019BB9 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019BBE 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019BC3 00                         		dc.b 0
00019BC4 02                         byte_17E2A:	dc.b 2
00019BC5 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00019BCA 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019BD0 00                         		even
00019BD0 00                         		even
00019BD0                            
00019BD0                            ; ===========================================================================
00019BD0                            ; ---------------------------------------------------------------------------
00019BD0                            ; Object 77 - Eggman (LZ)
00019BD0                            ; ---------------------------------------------------------------------------
00019BD0                            
00019BD0                            Obj77:					; XREF: Obj_Index
00019BD0 7000                       		moveq	#0,d0
00019BD2 1028 0024                  		move.b	$24(a0),d0
00019BD6 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019BDA 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019BDE                            ; ===========================================================================
00019BDE 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019BE0 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019BE2 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019BE4 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00019BE6                            
00019BE6 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019BE8 0401                       		dc.b 4,	1
00019BEA 0607                       		dc.b 6,	7
00019BEC                            ; ===========================================================================
00019BEC                            
00019BEC                            Obj77_Main:				; XREF: Obj77_Index
00019BEC 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019BF2 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019BF8 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BFE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C04 117C 000F 0020             		move.b	#$F,$20(a0)
00019C0A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C10 117C 0004 0018             		move.b	#4,$18(a0)
00019C16 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019C1A 2248                       		movea.l	a0,a1
00019C1C 7202                       		moveq	#2,d1
00019C1E 6000                       		bra.s	Obj77_LoadBoss
00019C20                            ; ===========================================================================
00019C20                            
00019C20                            Obj77_Loop:
00019C20 4EB9 0000 EF4A             		jsr	SingleObjLoad2
00019C26 6600                       		bne.s	Obj77_ShipMain
00019C28 12BC 0077                  		move.b	#$77,0(a1)
00019C2C 3368 0008 0008             		move.w	8(a0),8(a1)
00019C32 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C38                            
00019C38                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019C38 08A8 0000 0022             		bclr	#0,$22(a0)
00019C3E 4229 0025                  		clr.b	$25(a1)
00019C42 135A 0024                  		move.b	(a2)+,$24(a1)
00019C46 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C4A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019C50 237C 0001 9AA6 0004        		move.l	#Map_Eggman,4(a1)
00019C58 337C 0400 0002             		move.w	#$400,2(a1)
00019C5E 137C 0004 0001             		move.b	#4,1(a1)
00019C64 137C 0020 0019             		move.b	#$20,$19(a1)
00019C6A 2348 0034                  		move.l	a0,$34(a1)
00019C6E 51C9 FFB0                  		dbf	d1,Obj77_Loop
00019C72                            
00019C72                            Obj77_ShipMain:
00019C72 43F8 D000                  		lea	($FFFFD000).w,a1
00019C76 7000                       		moveq	#0,d0
00019C78 1028 0025                  		move.b	$25(a0),d0
00019C7C 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00019C80 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00019C84 43F9 0001 9A56             		lea	(Ani_Eggman).l,a1
00019C8A 4EB9 0000 B83E             		jsr	AnimateSprite
00019C90 7003                       		moveq	#3,d0
00019C92 C028 0022                  		and.b	$22(a0),d0
00019C96 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019C9C 8128 0001                  		or.b	d0,1(a0)
00019CA0 4EF9 0000 E7DE             		jmp	DisplaySprite
00019CA6                            ; ===========================================================================
00019CA6 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00019CAA 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00019CAE 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00019CB2 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00019CB6                            ; ===========================================================================
00019CB6                            
00019CB6                            loc_17F1E:				; XREF: Obj77_ShipIndex
00019CB6 3029 0008                  		move.w	8(a1),d0
00019CBA 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00019CBE 6500                       		bcs.s	loc_17F38
00019CC0 317C FE80 0012             		move.w	#-$180,$12(a0)
00019CC6 317C 0060 0010             		move.w	#$60,$10(a0)
00019CCC 5428 0025                  		addq.b	#2,$25(a0)
00019CD0                            
00019CD0                            loc_17F38:
00019CD0 6100 F974                  		bsr.w	BossMove
00019CD4 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019CDA 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CE0                            
00019CE0                            loc_17F48:
00019CE0 4A28 003D                  		tst.b	$3D(a0)
00019CE4 6600                       		bne.s	loc_17F8E
00019CE6 4A28 0022                  		tst.b	$22(a0)
00019CEA 6B00                       		bmi.s	loc_17F92
00019CEC 4A28 0020                  		tst.b	$20(a0)
00019CF0 6600                       		bne.s	locret_17F8C
00019CF2 4A28 003E                  		tst.b	$3E(a0)
00019CF6 6600                       		bne.s	loc_17F70
00019CF8 117C 0020 003E             		move.b	#$20,$3E(a0)
00019CFE 303C 00AC                  		move.w	#$AC,d0
00019D02 4EB9 0000 11F6             		jsr	(PlaySound_Special).l
00019D08                            
00019D08                            loc_17F70:
00019D08 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D0C 7000                       		moveq	#0,d0
00019D0E 4A51                       		tst.w	(a1)
00019D10 6600                       		bne.s	loc_17F7E
00019D12 303C 0EEE                  		move.w	#$EEE,d0
00019D16                            
00019D16                            loc_17F7E:
00019D16 3280                       		move.w	d0,(a1)
00019D18 5328 003E                  		subq.b	#1,$3E(a0)
00019D1C 6600                       		bne.s	locret_17F8C
00019D1E 117C 000F 0020             		move.b	#$F,$20(a0)
00019D24                            
00019D24                            locret_17F8C:
00019D24 4E75                       		rts	
00019D26                            ; ===========================================================================
00019D26                            
00019D26                            loc_17F8E:				; XREF: loc_17F48
00019D26 6000 F8D0                  		bra.w	BossDefeated
00019D2A                            ; ===========================================================================
00019D2A                            
00019D2A                            loc_17F92:				; XREF: loc_17F48
00019D2A 7064                       		moveq	#100,d0
00019D2C 6100 0000                  		bsr.w	AddPoints
00019D30 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019D36 4E75                       		rts	
00019D38                            ; ===========================================================================
00019D38                            
00019D38                            loc_17FA0:				; XREF: Obj77_ShipIndex
00019D38 70FE                       		moveq	#-2,d0
00019D3A 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00019D40 6500                       		bcs.s	loc_17FB6
00019D42 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00019D48 4268 0010                  		clr.w	$10(a0)
00019D4C 5240                       		addq.w	#1,d0
00019D4E                            
00019D4E                            loc_17FB6:
00019D4E 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00019D54 6E00                       		bgt.s	loc_17FCA
00019D56 317C 0500 0038             		move.w	#$500,$38(a0)
00019D5C 4268 0012                  		clr.w	$12(a0)
00019D60 5240                       		addq.w	#1,d0
00019D62                            
00019D62                            loc_17FCA:
00019D62 6600                       		bne.s	loc_17FDC
00019D64 317C 0140 0010             		move.w	#$140,$10(a0)
00019D6A 317C FE00 0012             		move.w	#-$200,$12(a0)
00019D70 5428 0025                  		addq.b	#2,$25(a0)
00019D74                            
00019D74                            loc_17FDC:
00019D74 6000 FF5A                  		bra.w	loc_17F38
00019D78                            ; ===========================================================================
00019D78                            
00019D78                            loc_17FE0:				; XREF: Obj77_ShipIndex
00019D78 70FE                       		moveq	#-2,d0
00019D7A 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00019D80 6500                       		bcs.s	loc_17FF6
00019D82 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00019D88 4268 0010                  		clr.w	$10(a0)
00019D8C 5240                       		addq.w	#1,d0
00019D8E                            
00019D8E                            loc_17FF6:
00019D8E 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00019D94 6E00                       		bgt.s	loc_1800A
00019D96 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00019D9C 4268 0012                  		clr.w	$12(a0)
00019DA0 5240                       		addq.w	#1,d0
00019DA2                            
00019DA2                            loc_1800A:
00019DA2 6600                       		bne.s	loc_1801A
00019DA4 317C FE80 0012             		move.w	#-$180,$12(a0)
00019DAA 5428 0025                  		addq.b	#2,$25(a0)
00019DAE 4228 003F                  		clr.b	$3F(a0)
00019DB2                            
00019DB2                            loc_1801A:
00019DB2 6000 FF1C                  		bra.w	loc_17F38
00019DB6                            ; ===========================================================================
00019DB6                            
00019DB6                            loc_1801E:				; XREF: Obj77_ShipIndex
00019DB6 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00019DBC 6E00                       		bgt.s	loc_1804E
00019DBE 317C 0100 0038             		move.w	#$100,$38(a0)
00019DC4 317C 0140 0010             		move.w	#$140,$10(a0)
00019DCA 317C FF80 0012             		move.w	#-$80,$12(a0)
00019DD0 4A28 003D                  		tst.b	$3D(a0)
00019DD4 6700                       		beq.s	loc_18046
00019DD6 E1E8 0010                  		asl	$10(a0)
00019DDA E1E8 0012                  		asl	$12(a0)
00019DDE                            
00019DDE                            loc_18046:
00019DDE 5428 0025                  		addq.b	#2,$25(a0)
00019DE2 6000 FEEC                  		bra.w	loc_17F38
00019DE6                            ; ===========================================================================
00019DE6                            
00019DE6                            loc_1804E:
00019DE6 08E8 0000 0022             		bset	#0,$22(a0)
00019DEC 5428 003F                  		addq.b	#2,$3F(a0)
00019DF0 1028 003F                  		move.b	$3F(a0),d0
00019DF4 4EB9 0000 29CC             		jsr	(CalcSine).l
00019DFA 4A41                       		tst.w	d1
00019DFC 6A00                       		bpl.s	loc_1806C
00019DFE 08A8 0000 0022             		bclr	#0,$22(a0)
00019E04                            
00019E04                            loc_1806C:
00019E04 E840                       		asr.w	#4,d0
00019E06 4840                       		swap	d0
00019E08 4240                       		clr.w	d0
00019E0A D0A8 0030                  		add.l	$30(a0),d0
00019E0E 4840                       		swap	d0
00019E10 3140 0008                  		move.w	d0,8(a0)
00019E14 3028 0012                  		move.w	$12(a0),d0
00019E18 3238 D00C                  		move.w	($FFFFD00C).w,d1
00019E1C 9268 000C                  		sub.w	$C(a0),d1
00019E20 6500                       		bcs.s	loc_180A2
00019E22 0441 0048                  		subi.w	#$48,d1
00019E26 6500                       		bcs.s	loc_180A2
00019E28 E240                       		asr.w	#1,d0
00019E2A 0441 0028                  		subi.w	#$28,d1
00019E2E 6500                       		bcs.s	loc_180A2
00019E30 E240                       		asr.w	#1,d0
00019E32 0441 0028                  		subi.w	#$28,d1
00019E36 6500                       		bcs.s	loc_180A2
00019E38 7000                       		moveq	#0,d0
00019E3A                            
00019E3A                            loc_180A2:
00019E3A 48C0                       		ext.l	d0
00019E3C E180                       		asl.l	#8,d0
00019E3E 4A28 003D                  		tst.b	$3D(a0)
00019E42 6700                       		beq.s	loc_180AE
00019E44 D080                       		add.l	d0,d0
00019E46                            
00019E46                            loc_180AE:
00019E46 D1A8 0038                  		add.l	d0,$38(a0)
00019E4A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019E50 6000 FE8E                  		bra.w	loc_17F48
00019E54                            ; ===========================================================================
00019E54                            
00019E54                            loc_180BC:				; XREF: Obj77_ShipIndex
00019E54 70FE                       		moveq	#-2,d0
00019E56 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00019E5C 6500                       		bcs.s	loc_180D2
00019E5E 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00019E64 4268 0010                  		clr.w	$10(a0)
00019E68 5240                       		addq.w	#1,d0
00019E6A                            
00019E6A                            loc_180D2:
00019E6A 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00019E70 6E00                       		bgt.s	loc_180E6
00019E72 317C 00C0 0038             		move.w	#$C0,$38(a0)
00019E78 4268 0012                  		clr.w	$12(a0)
00019E7C 5240                       		addq.w	#1,d0
00019E7E                            
00019E7E                            loc_180E6:
00019E7E 6600                       		bne.s	loc_180F2
00019E80 5428 0025                  		addq.b	#2,$25(a0)
00019E84 08A8 0000 0022             		bclr	#0,$22(a0)
00019E8A                            
00019E8A                            loc_180F2:
00019E8A 6000 FE44                  		bra.w	loc_17F38
00019E8E                            ; ===========================================================================
00019E8E                            
00019E8E                            loc_180F6:				; XREF: Obj77_ShipIndex
00019E8E 4A28 003D                  		tst.b	$3D(a0)
00019E92 6600                       		bne.s	loc_18112
00019E94 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00019E9A 6D00                       		blt.s	loc_18126
00019E9C 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00019EA2 6E00                       		bgt.s	loc_18126
00019EA4 117C 0032 003C             		move.b	#$32,$3C(a0)
00019EAA                            
00019EAA                            loc_18112:
00019EAA 303C 0082                  		move.w	#$82,d0
00019EAE 4EB9 0000 11F0             		jsr	(PlaySound).l	; play LZ music
00019EB4 08E8 0000 0022             		bset	#0,$22(a0)
00019EBA 5428 0025                  		addq.b	#2,$25(a0)
00019EBE                            
00019EBE                            loc_18126:
00019EBE 6000 FE10                  		bra.w	loc_17F38
00019EC2                            ; ===========================================================================
00019EC2                            
00019EC2                            loc_1812A:				; XREF: Obj77_ShipIndex
00019EC2 4A28 003D                  		tst.b	$3D(a0)
00019EC6 6600                       		bne.s	loc_18136
00019EC8 5328 003C                  		subq.b	#1,$3C(a0)
00019ECC 6600                       		bne.s	loc_1814E
00019ECE                            
00019ECE                            loc_18136:
00019ECE 4228 003C                  		clr.b	$3C(a0)
00019ED2 317C 0400 0010             		move.w	#$400,$10(a0)
00019ED8 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019EDE 4228 003D                  		clr.b	$3D(a0)
00019EE2 5428 0025                  		addq.b	#2,$25(a0)
00019EE6                            
00019EE6                            loc_1814E:
00019EE6 6000 FDE8                  		bra.w	loc_17F38
00019EEA                            ; ===========================================================================
00019EEA                            
00019EEA                            loc_18152:				; XREF: Obj77_ShipIndex
00019EEA 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00019EF0 6400                       		bcc.s	loc_18160
00019EF2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019EF6 6000                       		bra.s	loc_18166
00019EF8                            ; ===========================================================================
00019EF8                            
00019EF8                            loc_18160:
00019EF8 4A28 0001                  		tst.b	1(a0)
00019EFC 6A00                       		bpl.s	Obj77_ShipDel
00019EFE                            
00019EFE                            loc_18166:
00019EFE 6000 FDD0                  		bra.w	loc_17F38
00019F02                            ; ===========================================================================
00019F02                            
00019F02                            Obj77_ShipDel:
00019F02 4EF9 0000 E82E             		jmp	DeleteObject
00019F08                            ; ===========================================================================
00019F08                            
00019F08                            Obj77_FaceMain:				; XREF: Obj77_Index
00019F08 2268 0034                  		movea.l	$34(a0),a1
00019F0C 1011                       		move.b	(a1),d0
00019F0E B010                       		cmp.b	(a0),d0
00019F10 6600                       		bne.s	Obj77_FaceDel
00019F12 7000                       		moveq	#0,d0
00019F14 1029 0025                  		move.b	$25(a1),d0
00019F18 7201                       		moveq	#1,d1
00019F1A 4A28 003D                  		tst.b	$3D(a0)
00019F1E 6700                       		beq.s	loc_1818C
00019F20 720A                       		moveq	#$A,d1
00019F22 6000                       		bra.s	loc_181A0
00019F24                            ; ===========================================================================
00019F24                            
00019F24                            loc_1818C:
00019F24 4A29 0020                  		tst.b	$20(a1)
00019F28 6600                       		bne.s	loc_18196
00019F2A 7205                       		moveq	#5,d1
00019F2C 6000                       		bra.s	loc_181A0
00019F2E                            ; ===========================================================================
00019F2E                            
00019F2E                            loc_18196:
00019F2E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019F34 6500                       		bcs.s	loc_181A0
00019F36 7204                       		moveq	#4,d1
00019F38                            
00019F38                            loc_181A0:
00019F38 1141 001C                  		move.b	d1,$1C(a0)
00019F3C 0C00 000E                  		cmpi.b	#$E,d0
00019F40 6600                       		bne.s	loc_181B6
00019F42 117C 0006 001C             		move.b	#6,$1C(a0)
00019F48 4A28 0001                  		tst.b	1(a0)
00019F4C 6A00                       		bpl.s	Obj77_FaceDel
00019F4E                            
00019F4E                            loc_181B6:
00019F4E 6000                       		bra.s	Obj77_Display
00019F50                            ; ===========================================================================
00019F50                            
00019F50                            Obj77_FaceDel:
00019F50 4EF9 0000 E82E             		jmp	DeleteObject
00019F56                            ; ===========================================================================
00019F56                            
00019F56                            Obj77_FlameMain:			; XREF: Obj77_Index
00019F56 117C 0007 001C             		move.b	#7,$1C(a0)
00019F5C 2268 0034                  		movea.l	$34(a0),a1
00019F60 1011                       		move.b	(a1),d0
00019F62 B010                       		cmp.b	(a0),d0
00019F64 6600                       		bne.s	Obj77_FlameDel
00019F66 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00019F6C 6600                       		bne.s	loc_181F0
00019F6E 117C 000B 001C             		move.b	#$B,$1C(a0)
00019F74 4A28 0001                  		tst.b	1(a0)
00019F78 6A00                       		bpl.s	Obj77_FlameDel
00019F7A 6000                       		bra.s	loc_181F0
00019F7C                            ; ===========================================================================
00019F7C 4A69 0010                  		tst.w	$10(a1)
00019F80 6700                       		beq.s	loc_181F0
00019F82 117C 0008 001C             		move.b	#8,$1C(a0)
00019F88                            
00019F88                            loc_181F0:
00019F88 6000                       		bra.s	Obj77_Display
00019F8A                            ; ===========================================================================
00019F8A                            
00019F8A                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00019F8A 4EF9 0000 E82E             		jmp	DeleteObject
00019F90                            ; ===========================================================================
00019F90                            
00019F90                            Obj77_Display:
00019F90 43F9 0001 9A56             		lea	(Ani_Eggman).l,a1
00019F96 4EB9 0000 B83E             		jsr	AnimateSprite
00019F9C 2268 0034                  		movea.l	$34(a0),a1
00019FA0 3169 0008 0008             		move.w	8(a1),8(a0)
00019FA6 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019FAC 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019FB2 7003                       		moveq	#3,d0
00019FB4 C028 0022                  		and.b	$22(a0),d0
00019FB8 0228 00FC 0001             		andi.b	#-4,1(a0)
00019FBE 8128 0001                  		or.b	d0,1(a0)
00019FC2 4EF9 0000 E7DE             		jmp	DisplaySprite
00019FC8                            ; ===========================================================================
00019FC8                            ; ---------------------------------------------------------------------------
00019FC8                            ; Object 73 - Eggman (MZ)
00019FC8                            ; ---------------------------------------------------------------------------
00019FC8                            
00019FC8                            Obj73:					; XREF: Obj_Index
00019FC8 7000                       		moveq	#0,d0
00019FCA 1028 0024                  		move.b	$24(a0),d0
00019FCE 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00019FD2 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00019FD6                            ; ===========================================================================
00019FD6 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00019FD8 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00019FDA 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00019FDC 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00019FDE 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00019FE0                            
00019FE0 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019FE3 0401 04                    		dc.b 4,	1, 4
00019FE6 0607 04                    		dc.b 6,	7, 4
00019FE9 0800 03                    		dc.b 8,	0, 3
00019FEC                            ; ===========================================================================
00019FEC                            
00019FEC                            Obj73_Main:				; XREF: Obj73_Index
00019FEC 3168 0008 0030             		move.w	8(a0),$30(a0)
00019FF2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019FF8 117C 000F 0020             		move.b	#$F,$20(a0)
00019FFE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A004 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A008 2248                       		movea.l	a0,a1
0001A00A 7203                       		moveq	#3,d1
0001A00C 6000                       		bra.s	Obj73_LoadBoss
0001A00E                            ; ===========================================================================
0001A00E                            
0001A00E                            Obj73_Loop:
0001A00E 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001A014 6600                       		bne.s	Obj73_ShipMain
0001A016 12BC 0073                  		move.b	#$73,0(a1)
0001A01A 3368 0008 0008             		move.w	8(a0),8(a1)
0001A020 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A026                            
0001A026                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A026 08A8 0000 0022             		bclr	#0,$22(a0)
0001A02C 4229 0025                  		clr.b	$25(a1)
0001A030 135A 0024                  		move.b	(a2)+,$24(a1)
0001A034 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A038 135A 0018                  		move.b	(a2)+,$18(a1)
0001A03C 237C 0001 9AA6 0004        		move.l	#Map_Eggman,4(a1)
0001A044 337C 0400 0002             		move.w	#$400,2(a1)
0001A04A 137C 0004 0001             		move.b	#4,1(a1)
0001A050 137C 0020 0019             		move.b	#$20,$19(a1)
0001A056 2348 0034                  		move.l	a0,$34(a1)
0001A05A 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A05E                            
0001A05E                            Obj73_ShipMain:
0001A05E 7000                       		moveq	#0,d0
0001A060 1028 0025                  		move.b	$25(a0),d0
0001A064 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A068 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A06C 43F9 0001 9A56             		lea	(Ani_Eggman).l,a1
0001A072 4EB9 0000 B83E             		jsr	AnimateSprite
0001A078 7003                       		moveq	#3,d0
0001A07A C028 0022                  		and.b	$22(a0),d0
0001A07E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A084 8128 0001                  		or.b	d0,1(a0)
0001A088 4EF9 0000 E7DE             		jmp	DisplaySprite
0001A08E                            ; ===========================================================================
0001A08E 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A090 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A092 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A094 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A096 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A098                            ; ===========================================================================
0001A098                            
0001A098                            loc_18302:				; XREF: Obj73_ShipIndex
0001A098 1028 003F                  		move.b	$3F(a0),d0
0001A09C 5428 003F                  		addq.b	#2,$3F(a0)
0001A0A0 4EB9 0000 29CC             		jsr	(CalcSine).l
0001A0A6 E440                       		asr.w	#2,d0
0001A0A8 3140 0012                  		move.w	d0,$12(a0)
0001A0AC 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A0B2 6100 F592                  		bsr.w	BossMove
0001A0B6 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A0BC 6600                       		bne.s	loc_18334
0001A0BE 5428 0025                  		addq.b	#2,$25(a0)
0001A0C2 4228 0028                  		clr.b	$28(a0)
0001A0C6 42A8 0010                  		clr.l	$10(a0)
0001A0CA                            
0001A0CA                            loc_18334:
0001A0CA 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001A0D0 1140 0034                  		move.b	d0,$34(a0)
0001A0D4                            
0001A0D4                            loc_1833E:
0001A0D4 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A0DA 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A0E0 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A0E6 6400                       		bcc.s	locret_18390
0001A0E8 4A28 0022                  		tst.b	$22(a0)
0001A0EC 6B00                       		bmi.s	loc_18392
0001A0EE 4A28 0020                  		tst.b	$20(a0)
0001A0F2 6600                       		bne.s	locret_18390
0001A0F4 4A28 003E                  		tst.b	$3E(a0)
0001A0F8 6600                       		bne.s	loc_18374
0001A0FA 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A100 303C 00AC                  		move.w	#$AC,d0
0001A104 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A10A                            
0001A10A                            loc_18374:
0001A10A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A10E 7000                       		moveq	#0,d0
0001A110 4A51                       		tst.w	(a1)
0001A112 6600                       		bne.s	loc_18382
0001A114 303C 0EEE                  		move.w	#$EEE,d0
0001A118                            
0001A118                            loc_18382:
0001A118 3280                       		move.w	d0,(a1)
0001A11A 5328 003E                  		subq.b	#1,$3E(a0)
0001A11E 6600                       		bne.s	locret_18390
0001A120 117C 000F 0020             		move.b	#$F,$20(a0)
0001A126                            
0001A126                            locret_18390:
0001A126 4E75                       		rts	
0001A128                            ; ===========================================================================
0001A128                            
0001A128                            loc_18392:				; XREF: loc_1833E
0001A128 7064                       		moveq	#100,d0
0001A12A 6100 0000                  		bsr.w	AddPoints
0001A12E 117C 0004 0025             		move.b	#4,$25(a0)
0001A134 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A13A 4268 0010                  		clr.w	$10(a0)
0001A13E 4E75                       		rts	
0001A140                            ; ===========================================================================
0001A140                            
0001A140                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A140 7000                       		moveq	#0,d0
0001A142 1028 0028                  		move.b	$28(a0),d0
0001A146 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A14A 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A14E 0228 0006 0028             		andi.b	#6,$28(a0)
0001A154 6000 FF7E                  		bra.w	loc_1833E
0001A158                            ; ===========================================================================
0001A158 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A15A 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A15C 0000                       		dc.w loc_183CA-off_183C2
0001A15E 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A160                            ; ===========================================================================
0001A160                            
0001A160                            loc_183CA:				; XREF: off_183C2
0001A160 4A68 0010                  		tst.w	$10(a0)
0001A164 6600                       		bne.s	loc_183FE
0001A166 7040                       		moveq	#$40,d0
0001A168 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A16E 6700                       		beq.s	loc_183E6
0001A170 6500                       		bcs.s	loc_183DE
0001A172 4440                       		neg.w	d0
0001A174                            
0001A174                            loc_183DE:
0001A174 3140 0012                  		move.w	d0,$12(a0)
0001A178 6000 F4CC                  		bra.w	BossMove
0001A17C                            ; ===========================================================================
0001A17C                            
0001A17C                            loc_183E6:
0001A17C 317C 0200 0010             		move.w	#$200,$10(a0)
0001A182 317C 0100 0012             		move.w	#$100,$12(a0)
0001A188 0828 0000 0022             		btst	#0,$22(a0)
0001A18E 6600                       		bne.s	loc_183FE
0001A190 4468 0010                  		neg.w	$10(a0)
0001A194                            
0001A194                            loc_183FE:
0001A194 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A19A 6400                       		bcc.s	Obj73_MakeLava
0001A19C 6100 F4A8                  		bsr.w	BossMove
0001A1A0 5968 0012                  		subq.w	#4,$12(a0)
0001A1A4                            
0001A1A4                            Obj73_MakeLava:
0001A1A4 5328 0034                  		subq.b	#1,$34(a0)
0001A1A8 6400                       		bcc.s	loc_1845C
0001A1AA 4EB9 0000 EF34             		jsr	SingleObjLoad
0001A1B0 6600                       		bne.s	loc_1844A
0001A1B2 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A1B6 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A1BC 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001A1C2 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A1C8 80FC 0050                  		divu.w	#$50,d0
0001A1CC 4840                       		swap	d0
0001A1CE 0640 1878                  		addi.w	#$1878,d0
0001A1D2 3340 0008                  		move.w	d0,8(a1)
0001A1D6 EE09                       		lsr.b	#7,d1
0001A1D8 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A1DE                            
0001A1DE                            loc_1844A:
0001A1DE 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001A1E4 0200 001F                  		andi.b	#$1F,d0
0001A1E8 0600 0040                  		addi.b	#$40,d0
0001A1EC 1140 0034                  		move.b	d0,$34(a0)
0001A1F0                            
0001A1F0                            loc_1845C:
0001A1F0 0828 0000 0022             		btst	#0,$22(a0)
0001A1F6 6700                       		beq.s	loc_18474
0001A1F8 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A1FE 6D00                       		blt.s	locret_1849C
0001A200 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A206 6000                       		bra.s	loc_18482
0001A208                            ; ===========================================================================
0001A208                            
0001A208                            loc_18474:
0001A208 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A20E 6E00                       		bgt.s	locret_1849C
0001A210 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A216                            
0001A216                            loc_18482:
0001A216 4268 0010                  		clr.w	$10(a0)
0001A21A 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A220 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A226 6400                       		bcc.s	loc_18498
0001A228 4468 0012                  		neg.w	$12(a0)
0001A22C                            
0001A22C                            loc_18498:
0001A22C 5428 0028                  		addq.b	#2,$28(a0)
0001A230                            
0001A230                            locret_1849C:
0001A230 4E75                       		rts	
0001A232                            ; ===========================================================================
0001A232                            
0001A232                            Obj73_MakeLava2:			; XREF: off_183C2
0001A232 6100 F412                  		bsr.w	BossMove
0001A236 3028 0038                  		move.w	$38(a0),d0
0001A23A 0440 022C                  		subi.w	#$22C,d0
0001A23E 6E00                       		bgt.s	locret_184F4
0001A240 303C 022C                  		move.w	#$22C,d0
0001A244 4A68 0012                  		tst.w	$12(a0)
0001A248 6700                       		beq.s	loc_184EA
0001A24A 4268 0012                  		clr.w	$12(a0)
0001A24E 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A254 0868 0000 0022             		bchg	#0,$22(a0)
0001A25A 4EB9 0000 EF34             		jsr	SingleObjLoad
0001A260 6600                       		bne.s	loc_184EA
0001A262 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A268 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A26E 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A274 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A278 137C 0001 0028             		move.b	#1,$28(a1)
0001A27E                            
0001A27E                            loc_184EA:
0001A27E 5368 003C                  		subq.w	#1,$3C(a0)
0001A282 6600                       		bne.s	locret_184F4
0001A284 5428 0028                  		addq.b	#2,$28(a0)
0001A288                            
0001A288                            locret_184F4:
0001A288 4E75                       		rts	
0001A28A                            ; ===========================================================================
0001A28A                            
0001A28A                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A28A 5368 003C                  		subq.w	#1,$3C(a0)
0001A28E 6B00                       		bmi.s	loc_18500
0001A290 6000 F366                  		bra.w	BossDefeated
0001A294                            ; ===========================================================================
0001A294                            
0001A294                            loc_18500:
0001A294 08E8 0000 0022             		bset	#0,$22(a0)
0001A29A 08A8 0007 0022             		bclr	#7,$22(a0)
0001A2A0 4268 0010                  		clr.w	$10(a0)
0001A2A4 5428 0025                  		addq.b	#2,$25(a0)
0001A2A8 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A2AE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A2B2 6600                       		bne.s	locret_1852A
0001A2B4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A2BA 4268 0012                  		clr.w	$12(a0)
0001A2BE                            
0001A2BE                            locret_1852A:
0001A2BE 4E75                       		rts	
0001A2C0                            ; ===========================================================================
0001A2C0                            
0001A2C0                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A2C0 5268 003C                  		addq.w	#1,$3C(a0)
0001A2C4 6700                       		beq.s	loc_18544
0001A2C6 6A00                       		bpl.s	loc_1854E
0001A2C8 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A2CE 6400                       		bcc.s	loc_18544
0001A2D0 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A2D6 6000                       		bra.s	loc_1857A
0001A2D8                            ; ===========================================================================
0001A2D8                            
0001A2D8                            loc_18544:
0001A2D8 4268 0012                  		clr.w	$12(a0)
0001A2DC 4268 003C                  		clr.w	$3C(a0)
0001A2E0 6000                       		bra.s	loc_1857A
0001A2E2                            ; ===========================================================================
0001A2E2                            
0001A2E2                            loc_1854E:
0001A2E2 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A2E8 6500                       		bcs.s	loc_18566
0001A2EA 6700                       		beq.s	loc_1856C
0001A2EC 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A2F2 6500                       		bcs.s	loc_1857A
0001A2F4 5428 0025                  		addq.b	#2,$25(a0)
0001A2F8 6000                       		bra.s	loc_1857A
0001A2FA                            ; ===========================================================================
0001A2FA                            
0001A2FA                            loc_18566:
0001A2FA 5168 0012                  		subq.w	#8,$12(a0)
0001A2FE 6000                       		bra.s	loc_1857A
0001A300                            ; ===========================================================================
0001A300                            
0001A300                            loc_1856C:
0001A300 4268 0012                  		clr.w	$12(a0)
0001A304 303C 0083                  		move.w	#$83,d0
0001A308 4EB9 0000 11F0             		jsr	(PlaySound).l	; play MZ music
0001A30E                            
0001A30E                            loc_1857A:
0001A30E 6100 F336                  		bsr.w	BossMove
0001A312 6000 FDC0                  		bra.w	loc_1833E
0001A316                            ; ===========================================================================
0001A316                            
0001A316                            loc_18582:				; XREF: Obj73_ShipIndex
0001A316 317C 0500 0010             		move.w	#$500,$10(a0)
0001A31C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A322 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A328 6400                       		bcc.s	loc_1859C
0001A32A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A32E 6000                       		bra.s	loc_185A2
0001A330                            ; ===========================================================================
0001A330                            
0001A330                            loc_1859C:
0001A330 4A28 0001                  		tst.b	1(a0)
0001A334 6A00                       		bpl.s	Obj73_ShipDel
0001A336                            
0001A336                            loc_185A2:
0001A336 6100 F30E                  		bsr.w	BossMove
0001A33A 6000 FD98                  		bra.w	loc_1833E
0001A33E                            ; ===========================================================================
0001A33E                            
0001A33E                            Obj73_ShipDel:
0001A33E 4EF9 0000 E82E             		jmp	DeleteObject
0001A344                            ; ===========================================================================
0001A344                            
0001A344                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A344 7000                       		moveq	#0,d0
0001A346 7201                       		moveq	#1,d1
0001A348 2268 0034                  		movea.l	$34(a0),a1
0001A34C 1029 0025                  		move.b	$25(a1),d0
0001A350 5540                       		subq.w	#2,d0
0001A352 6600                       		bne.s	loc_185D2
0001A354 0829 0001 0028             		btst	#1,$28(a1)
0001A35A 6700                       		beq.s	loc_185DA
0001A35C 4A69 0012                  		tst.w	$12(a1)
0001A360 6600                       		bne.s	loc_185DA
0001A362 7204                       		moveq	#4,d1
0001A364 6000                       		bra.s	loc_185EE
0001A366                            ; ===========================================================================
0001A366                            
0001A366                            loc_185D2:
0001A366 5500                       		subq.b	#2,d0
0001A368 6B00                       		bmi.s	loc_185DA
0001A36A 720A                       		moveq	#$A,d1
0001A36C 6000                       		bra.s	loc_185EE
0001A36E                            ; ===========================================================================
0001A36E                            
0001A36E                            loc_185DA:
0001A36E 4A29 0020                  		tst.b	$20(a1)
0001A372 6600                       		bne.s	loc_185E4
0001A374 7205                       		moveq	#5,d1
0001A376 6000                       		bra.s	loc_185EE
0001A378                            ; ===========================================================================
0001A378                            
0001A378                            loc_185E4:
0001A378 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A37E 6500                       		bcs.s	loc_185EE
0001A380 7204                       		moveq	#4,d1
0001A382                            
0001A382                            loc_185EE:
0001A382 1141 001C                  		move.b	d1,$1C(a0)
0001A386 5900                       		subq.b	#4,d0
0001A388 6600                       		bne.s	loc_18602
0001A38A 117C 0006 001C             		move.b	#6,$1C(a0)
0001A390 4A28 0001                  		tst.b	1(a0)
0001A394 6A00                       		bpl.s	Obj73_FaceDel
0001A396                            
0001A396                            loc_18602:
0001A396 6000                       		bra.s	Obj73_Display
0001A398                            ; ===========================================================================
0001A398                            
0001A398                            Obj73_FaceDel:
0001A398 4EF9 0000 E82E             		jmp	DeleteObject
0001A39E                            ; ===========================================================================
0001A39E                            
0001A39E                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A39E 117C 0007 001C             		move.b	#7,$1C(a0)
0001A3A4 2268 0034                  		movea.l	$34(a0),a1
0001A3A8 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A3AE 6D00                       		blt.s	loc_1862A
0001A3B0 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A3B6 4A28 0001                  		tst.b	1(a0)
0001A3BA 6A00                       		bpl.s	Obj73_FlameDel
0001A3BC 6000                       		bra.s	loc_18636
0001A3BE                            ; ===========================================================================
0001A3BE                            
0001A3BE                            loc_1862A:
0001A3BE 4A69 0010                  		tst.w	$10(a1)
0001A3C2 6700                       		beq.s	loc_18636
0001A3C4 117C 0008 001C             		move.b	#8,$1C(a0)
0001A3CA                            
0001A3CA                            loc_18636:
0001A3CA 6000                       		bra.s	Obj73_Display
0001A3CC                            ; ===========================================================================
0001A3CC                            
0001A3CC                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A3CC 4EF9 0000 E82E             		jmp	DeleteObject
0001A3D2                            ; ===========================================================================
0001A3D2                            
0001A3D2                            Obj73_Display:
0001A3D2 43F9 0001 9A56             		lea	(Ani_Eggman).l,a1
0001A3D8 4EB9 0000 B83E             		jsr	AnimateSprite
0001A3DE                            
0001A3DE                            loc_1864A:
0001A3DE 2268 0034                  		movea.l	$34(a0),a1
0001A3E2 3169 0008 0008             		move.w	8(a1),8(a0)
0001A3E8 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A3EE 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A3F4 7003                       		moveq	#3,d0
0001A3F6 C028 0022                  		and.b	$22(a0),d0
0001A3FA 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A400 8128 0001                  		or.b	d0,1(a0)
0001A404 4EF9 0000 E7DE             		jmp	DisplaySprite
0001A40A                            ; ===========================================================================
0001A40A                            
0001A40A                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A40A 2268 0034                  		movea.l	$34(a0),a1
0001A40E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A414 6600                       		bne.s	loc_18688
0001A416 4A28 0001                  		tst.b	1(a0)
0001A41A 6A00                       		bpl.s	Obj73_TubeDel
0001A41C                            
0001A41C                            loc_18688:
0001A41C 217C 0001 9B6E 0004        		move.l	#Map_BossItems,4(a0)
0001A424 317C 246C 0002             		move.w	#$246C,2(a0)
0001A42A 117C 0004 001A             		move.b	#4,$1A(a0)
0001A430 60AC                       		bra.s	loc_1864A
0001A432                            ; ===========================================================================
0001A432                            
0001A432                            Obj73_TubeDel:
0001A432 4EF9 0000 E82E             		jmp	DeleteObject
0001A438                            ; ===========================================================================
0001A438                            ; ---------------------------------------------------------------------------
0001A438                            ; Object 74 - lava that	Eggman drops (MZ)
0001A438                            ; ---------------------------------------------------------------------------
0001A438                            
0001A438                            Obj74:					; XREF: Obj_Index
0001A438 7000                       		moveq	#0,d0
0001A43A 1028 0024                  		move.b	$24(a0),d0
0001A43E 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A442 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A446 4EF9 0000 E7DE             		jmp	DisplaySprite
0001A44C                            ; ===========================================================================
0001A44C 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A44E 0000                       		dc.w Obj74_Action-Obj74_Index
0001A450 0000                       		dc.w loc_18886-Obj74_Index
0001A452 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A454                            ; ===========================================================================
0001A454                            
0001A454                            Obj74_Main:				; XREF: Obj74_Index
0001A454 117C 0008 0016             		move.b	#8,$16(a0)
0001A45A 117C 0008 0017             		move.b	#8,$17(a0)
0001A460 217C 0000 C4D8 0004        		move.l	#Map_obj14,4(a0)
0001A468 317C 0345 0002             		move.w	#$345,2(a0)
0001A46E 117C 0004 0001             		move.b	#4,1(a0)
0001A474 117C 0005 0018             		move.b	#5,$18(a0)
0001A47A 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A480 117C 0008 0019             		move.b	#8,$19(a0)
0001A486 5428 0024                  		addq.b	#2,$24(a0)
0001A48A 4A28 0028                  		tst.b	$28(a0)
0001A48E 6600                       		bne.s	loc_1870A
0001A490 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A496 5428 0024                  		addq.b	#2,$24(a0)
0001A49A 6000 0000                  		bra.w	loc_18886
0001A49E                            ; ===========================================================================
0001A49E                            
0001A49E                            loc_1870A:
0001A49E 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A4A4 303C 00AE                  		move.w	#$AE,d0
0001A4A8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lava sound
0001A4AE                            
0001A4AE                            Obj74_Action:				; XREF: Obj74_Index
0001A4AE 7000                       		moveq	#0,d0
0001A4B0 1028 0025                  		move.b	$25(a0),d0
0001A4B4 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A4B8 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A4BC 4EB9 0000 E7C4             		jsr	SpeedToPos
0001A4C2 43F9 0000 FBEE             		lea	(Ani_obj14).l,a1
0001A4C8 4EB9 0000 B83E             		jsr	AnimateSprite
0001A4CE 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A4D4 6200                       		bhi.s	Obj74_Delete
0001A4D6 4E75                       		rts	
0001A4D8                            ; ===========================================================================
0001A4D8                            
0001A4D8                            Obj74_Delete:
0001A4D8 4EF9 0000 E82E             		jmp	DeleteObject
0001A4DE                            ; ===========================================================================
0001A4DE 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A4E0 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A4E2 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A4E4 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A4E6                            ; ===========================================================================
0001A4E6                            
0001A4E6                            Obj74_Drop:				; XREF: Obj74_Index2
0001A4E6 08E8 0001 0022             		bset	#1,$22(a0)
0001A4EC 5328 0029                  		subq.b	#1,$29(a0)
0001A4F0 6A00                       		bpl.s	locret_18780
0001A4F2 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A4F8 4228 0028                  		clr.b	$28(a0)
0001A4FC 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A502 08A8 0001 0022             		bclr	#1,$22(a0)
0001A508 6100 C6E8                  		bsr.w	ObjHitFloor
0001A50C 4A41                       		tst.w	d1
0001A50E 6A00                       		bpl.s	locret_18780
0001A510 5428 0025                  		addq.b	#2,$25(a0)
0001A514                            
0001A514                            locret_18780:
0001A514 4E75                       		rts	
0001A516                            ; ===========================================================================
0001A516                            
0001A516                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A516 5568 000C                  		subq.w	#2,$C(a0)
0001A51A 08E8 0007 0002             		bset	#7,2(a0)
0001A520 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A526 4268 0012                  		clr.w	$12(a0)
0001A52A 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A530 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A536 117C 0003 0029             		move.b	#3,$29(a0)
0001A53C 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001A542 6600                       		bne.s	loc_187CA
0001A544 47D1                       		lea	(a1),a3
0001A546 45D0                       		lea	(a0),a2
0001A548 7003                       		moveq	#3,d0
0001A54A                            
0001A54A                            Obj74_Loop:
0001A54A 26DA                       		move.l	(a2)+,(a3)+
0001A54C 26DA                       		move.l	(a2)+,(a3)+
0001A54E 26DA                       		move.l	(a2)+,(a3)+
0001A550 26DA                       		move.l	(a2)+,(a3)+
0001A552 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A556                            
0001A556 4469 0010                  		neg.w	$10(a1)
0001A55A 5429 0025                  		addq.b	#2,$25(a1)
0001A55E                            
0001A55E                            loc_187CA:
0001A55E 5428 0025                  		addq.b	#2,$25(a0)
0001A562 4E75                       		rts	
0001A564                            
0001A564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A564                            
0001A564                            
0001A564                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A564 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001A56A 6600                       		bne.s	locret_187EE
0001A56C 3368 0008 0008             		move.w	8(a0),8(a1)
0001A572 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A578 12BC 0074                  		move.b	#$74,(a1)
0001A57C 337C 0067 0028             		move.w	#$67,$28(a1)
0001A582                            
0001A582                            locret_187EE:
0001A582 4E75                       		rts	
0001A584                            ; End of function Obj74_Duplicate2
0001A584                            
0001A584                            ; ===========================================================================
0001A584                            
0001A584                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A584 6100 C66C                  		bsr.w	ObjHitFloor
0001A588 4A41                       		tst.w	d1
0001A58A 6A00                       		bpl.s	loc_18826
0001A58C 3028 0008                  		move.w	8(a0),d0
0001A590 0C40 1940                  		cmpi.w	#$1940,d0
0001A594 6E00                       		bgt.s	loc_1882C
0001A596 3228 0030                  		move.w	$30(a0),d1
0001A59A B240                       		cmp.w	d0,d1
0001A59C 6700                       		beq.s	loc_1881E
0001A59E 0240 0010                  		andi.w	#$10,d0
0001A5A2 0241 0010                  		andi.w	#$10,d1
0001A5A6 B240                       		cmp.w	d0,d1
0001A5A8 6700                       		beq.s	loc_1881E
0001A5AA 61B8                       		bsr.s	Obj74_Duplicate2
0001A5AC 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A5B2                            
0001A5B2                            loc_1881E:
0001A5B2 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A5B8 4E75                       		rts	
0001A5BA                            ; ===========================================================================
0001A5BA                            
0001A5BA                            loc_18826:
0001A5BA 5428 0025                  		addq.b	#2,$25(a0)
0001A5BE 4E75                       		rts	
0001A5C0                            ; ===========================================================================
0001A5C0                            
0001A5C0                            loc_1882C:
0001A5C0 5428 0024                  		addq.b	#2,$24(a0)
0001A5C4 4E75                       		rts	
0001A5C6                            ; ===========================================================================
0001A5C6                            
0001A5C6                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A5C6 08A8 0001 0022             		bclr	#1,$22(a0)
0001A5CC 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A5D2 3028 0008                  		move.w	8(a0),d0
0001A5D6 9068 0032                  		sub.w	$32(a0),d0
0001A5DA 6A00                       		bpl.s	loc_1884A
0001A5DC 4440                       		neg.w	d0
0001A5DE                            
0001A5DE                            loc_1884A:
0001A5DE 0C40 0012                  		cmpi.w	#$12,d0
0001A5E2 6600                       		bne.s	loc_18856
0001A5E4 08A8 0007 0002             		bclr	#7,2(a0)
0001A5EA                            
0001A5EA                            loc_18856:
0001A5EA 6100 C606                  		bsr.w	ObjHitFloor
0001A5EE 4A41                       		tst.w	d1
0001A5F0 6A00                       		bpl.s	locret_1887E
0001A5F2 5328 0029                  		subq.b	#1,$29(a0)
0001A5F6 6700                       		beq.s	Obj74_Delete2
0001A5F8 4268 0012                  		clr.w	$12(a0)
0001A5FC 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A602 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A608 08E8 0007 0002             		bset	#7,2(a0)
0001A60E 5528 0025                  		subq.b	#2,$25(a0)
0001A612                            
0001A612                            locret_1887E:
0001A612 4E75                       		rts	
0001A614                            ; ===========================================================================
0001A614                            
0001A614                            Obj74_Delete2:
0001A614 4EF9 0000 E82E             		jmp	DeleteObject
0001A61A                            ; ===========================================================================
0001A61A                            
0001A61A                            loc_18886:				; XREF: Obj74_Index
0001A61A 08E8 0007 0002             		bset	#7,2(a0)
0001A620 5328 0029                  		subq.b	#1,$29(a0)
0001A624 6600                       		bne.s	Obj74_Animate
0001A626 117C 0001 001C             		move.b	#1,$1C(a0)
0001A62C 5968 000C                  		subq.w	#4,$C(a0)
0001A630 4228 0020                  		clr.b	$20(a0)
0001A634                            
0001A634                            Obj74_Animate:
0001A634 43F9 0000 FBEE             		lea	(Ani_obj14).l,a1
0001A63A 4EF9 0000 B83E             		jmp	AnimateSprite
0001A640                            ; ===========================================================================
0001A640                            
0001A640                            Obj74_Delete3:				; XREF: Obj74_Index
0001A640 4EF9 0000 E82E             		jmp	DeleteObject
0001A646                            ; ===========================================================================
0001A646                            
0001A646                            Obj7A_Delete:
0001A646 4EF9 0000 E82E             		jmp	DeleteObject
0001A64C                            ; ===========================================================================
0001A64C                            ; ---------------------------------------------------------------------------
0001A64C                            ; Object 7A - Eggman (SLZ)
0001A64C                            ; ---------------------------------------------------------------------------
0001A64C                            
0001A64C                            Obj7A:					; XREF: Obj_Index
0001A64C 7000                       		moveq	#0,d0
0001A64E 1028 0024                  		move.b	$24(a0),d0
0001A652 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A656 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A65A                            ; ===========================================================================
0001A65A 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A65C 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A65E 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A660 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A662 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A664                            
0001A664 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A667 0401 04                    		dc.b 4,	1, 4
0001A66A 0607 04                    		dc.b 6,	7, 4
0001A66D 0800 03                    		dc.b 8,	0, 3
0001A670                            ; ===========================================================================
0001A670                            
0001A670                            Obj7A_Main:				; XREF: Obj7A_Index
0001A670 317C 2188 0008             		move.w	#$2188,8(a0)
0001A676 317C 0228 000C             		move.w	#$228,$C(a0)
0001A67C 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A682 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A688 117C 000F 0020             		move.b	#$F,$20(a0)
0001A68E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A694 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A698 2248                       		movea.l	a0,a1
0001A69A 7203                       		moveq	#3,d1
0001A69C 6000                       		bra.s	Obj7A_LoadBoss
0001A69E                            ; ===========================================================================
0001A69E                            
0001A69E                            Obj7A_Loop:
0001A69E 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001A6A4 6600                       		bne.s	loc_1895C
0001A6A6 12BC 007A                  		move.b	#$7A,0(a1)
0001A6AA 3368 0008 0008             		move.w	8(a0),8(a1)
0001A6B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A6B6                            
0001A6B6                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A6B6 08A8 0000 0022             		bclr	#0,$22(a0)
0001A6BC 4229 0025                  		clr.b	$25(a1)
0001A6C0 135A 0024                  		move.b	(a2)+,$24(a1)
0001A6C4 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A6C8 135A 0018                  		move.b	(a2)+,$18(a1)
0001A6CC 237C 0001 9AA6 0004        		move.l	#Map_Eggman,4(a1)
0001A6D4 337C 0400 0002             		move.w	#$400,2(a1)
0001A6DA 137C 0004 0001             		move.b	#4,1(a1)
0001A6E0 137C 0020 0019             		move.b	#$20,$19(a1)
0001A6E6 2348 0034                  		move.l	a0,$34(a1)
0001A6EA 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A6EE                            
0001A6EE                            loc_1895C:
0001A6EE 43F8 D040                  		lea	($FFFFD040).w,a1
0001A6F2 45E8 002A                  		lea	$2A(a0),a2
0001A6F6 705E                       		moveq	#$5E,d0
0001A6F8 723E                       		moveq	#$3E,d1
0001A6FA                            
0001A6FA                            loc_18968:
0001A6FA B011                       		cmp.b	(a1),d0
0001A6FC 6600                       		bne.s	loc_18974
0001A6FE 4A29 0028                  		tst.b	$28(a1)
0001A702 6700                       		beq.s	loc_18974
0001A704 34C9                       		move.w	a1,(a2)+
0001A706                            
0001A706                            loc_18974:
0001A706 D2FC 0040                  		adda.w	#$40,a1
0001A70A 51C9 FFEE                  		dbf	d1,loc_18968
0001A70E                            
0001A70E                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A70E 7000                       		moveq	#0,d0
0001A710 1028 0025                  		move.b	$25(a0),d0
0001A714 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A718 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001A71C 43F9 0001 9A56             		lea	(Ani_Eggman).l,a1
0001A722 4EB9 0000 B83E             		jsr	AnimateSprite
0001A728 7003                       		moveq	#3,d0
0001A72A C028 0022                  		and.b	$22(a0),d0
0001A72E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A734 8128 0001                  		or.b	d0,1(a0)
0001A738 4EF9 0000 E7DE             		jmp	DisplaySprite
0001A73E                            ; ===========================================================================
0001A73E 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001A740 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001A742 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001A744 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001A746 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001A748 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001A74A                            ; ===========================================================================
0001A74A                            
0001A74A                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001A74A 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A750 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001A756 6400                       		bcc.s	loc_189CA
0001A758 5428 0025                  		addq.b	#2,$25(a0)
0001A75C                            
0001A75C                            loc_189CA:
0001A75C 6100 EEE8                  		bsr.w	BossMove
0001A760 1028 003F                  		move.b	$3F(a0),d0
0001A764 5428 003F                  		addq.b	#2,$3F(a0)
0001A768 4EB9 0000 29CC             		jsr	(CalcSine).l
0001A76E EC40                       		asr.w	#6,d0
0001A770 D068 0038                  		add.w	$38(a0),d0
0001A774 3140 000C                  		move.w	d0,$C(a0)
0001A778 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A77E 6000                       		bra.s	loc_189FE
0001A780                            ; ===========================================================================
0001A780                            
0001A780                            loc_189EE:
0001A780 6100 EEC4                  		bsr.w	BossMove
0001A784 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A78A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A790                            
0001A790                            loc_189FE:
0001A790 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A796 6400                       		bcc.s	locret_18A44
0001A798 4A28 0022                  		tst.b	$22(a0)
0001A79C 6B00                       		bmi.s	loc_18A46
0001A79E 4A28 0020                  		tst.b	$20(a0)
0001A7A2 6600                       		bne.s	locret_18A44
0001A7A4 4A28 003E                  		tst.b	$3E(a0)
0001A7A8 6600                       		bne.s	loc_18A28
0001A7AA 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A7B0 303C 00AC                  		move.w	#$AC,d0
0001A7B4 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A7BA                            
0001A7BA                            loc_18A28:
0001A7BA 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A7BE 7000                       		moveq	#0,d0
0001A7C0 4A51                       		tst.w	(a1)
0001A7C2 6600                       		bne.s	loc_18A36
0001A7C4 303C 0EEE                  		move.w	#$EEE,d0
0001A7C8                            
0001A7C8                            loc_18A36:
0001A7C8 3280                       		move.w	d0,(a1)
0001A7CA 5328 003E                  		subq.b	#1,$3E(a0)
0001A7CE 6600                       		bne.s	locret_18A44
0001A7D0 117C 000F 0020             		move.b	#$F,$20(a0)
0001A7D6                            
0001A7D6                            locret_18A44:
0001A7D6 4E75                       		rts	
0001A7D8                            ; ===========================================================================
0001A7D8                            
0001A7D8                            loc_18A46:
0001A7D8 7064                       		moveq	#100,d0
0001A7DA 6100 0000                  		bsr.w	AddPoints
0001A7DE 117C 0006 0025             		move.b	#6,$25(a0)
0001A7E4 117C 0078 003C             		move.b	#$78,$3C(a0)
0001A7EA 4268 0010                  		clr.w	$10(a0)
0001A7EE 4E75                       		rts	
0001A7F0                            ; ===========================================================================
0001A7F0                            
0001A7F0                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001A7F0 3028 0030                  		move.w	$30(a0),d0
0001A7F4 317C 0200 0010             		move.w	#$200,$10(a0)
0001A7FA 0828 0000 0022             		btst	#0,$22(a0)
0001A800 6600                       		bne.s	loc_18A7C
0001A802 4468 0010                  		neg.w	$10(a0)
0001A806 0C40 2008                  		cmpi.w	#$2008,d0
0001A80A 6E00                       		bgt.s	loc_18A88
0001A80C 6000                       		bra.s	loc_18A82
0001A80E                            ; ===========================================================================
0001A80E                            
0001A80E                            loc_18A7C:
0001A80E 0C40 2138                  		cmpi.w	#$2138,d0
0001A812 6D00                       		blt.s	loc_18A88
0001A814                            
0001A814                            loc_18A82:
0001A814 0868 0000 0022             		bchg	#0,$22(a0)
0001A81A                            
0001A81A                            loc_18A88:
0001A81A 3028 0008                  		move.w	8(a0),d0
0001A81E 72FF                       		moveq	#-1,d1
0001A820 7402                       		moveq	#2,d2
0001A822 45E8 002A                  		lea	$2A(a0),a2
0001A826 7828                       		moveq	#$28,d4
0001A828 4A68 0010                  		tst.w	$10(a0)
0001A82C 6A00                       		bpl.s	loc_18A9E
0001A82E 4444                       		neg.w	d4
0001A830                            
0001A830                            loc_18A9E:
0001A830 321A                       		move.w	(a2)+,d1
0001A832 2641                       		movea.l	d1,a3
0001A834 082B 0003 0022             		btst	#3,$22(a3)
0001A83A 6600                       		bne.s	loc_18AB4
0001A83C 362B 0008                  		move.w	8(a3),d3
0001A840 D644                       		add.w	d4,d3
0001A842 9640                       		sub.w	d0,d3
0001A844 6700                       		beq.s	loc_18AC0
0001A846                            
0001A846                            loc_18AB4:
0001A846 51CA FFE8                  		dbf	d2,loc_18A9E
0001A84A                            
0001A84A 1142 0028                  		move.b	d2,$28(a0)
0001A84E 6000 FF0C                  		bra.w	loc_189CA
0001A852                            ; ===========================================================================
0001A852                            
0001A852                            loc_18AC0:
0001A852 1142 0028                  		move.b	d2,$28(a0)
0001A856 5428 0025                  		addq.b	#2,$25(a0)
0001A85A 117C 0028 003C             		move.b	#$28,$3C(a0)
0001A860 6000 FEFA                  		bra.w	loc_189CA
0001A864                            ; ===========================================================================
0001A864                            
0001A864                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001A864 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001A86A 6600                       		bne.s	loc_18B36
0001A86C 70FF                       		moveq	#-1,d0
0001A86E 1028 0028                  		move.b	$28(a0),d0
0001A872 4880                       		ext.w	d0
0001A874 6B00                       		bmi.s	loc_18B40
0001A876 5540                       		subq.w	#2,d0
0001A878 4440                       		neg.w	d0
0001A87A D040                       		add.w	d0,d0
0001A87C 43E8 002A                  		lea	$2A(a0),a1
0001A880 3031 0000                  		move.w	(a1,d0.w),d0
0001A884 2440                       		movea.l	d0,a2
0001A886 43F8 D040                  		lea	($FFFFD040).w,a1
0001A88A 723E                       		moveq	#$3E,d1
0001A88C                            
0001A88C                            loc_18AFA:
0001A88C B0A9 003C                  		cmp.l	$3C(a1),d0
0001A890 6700                       		beq.s	loc_18B40
0001A892 D2FC 0040                  		adda.w	#$40,a1
0001A896 51C9 FFF4                  		dbf	d1,loc_18AFA
0001A89A                            
0001A89A 2F08                       		move.l	a0,-(sp)
0001A89C 41D2                       		lea	(a2),a0
0001A89E 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001A8A4 205F                       		movea.l	(sp)+,a0
0001A8A6 6600                       		bne.s	loc_18B40
0001A8A8 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001A8AC 3368 0008 0008             		move.w	8(a0),8(a1)
0001A8B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A8B8 0669 0020 000C             		addi.w	#$20,$C(a1)
0001A8BE 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001A8C4 234A 003C                  		move.l	a2,$3C(a1)
0001A8C8                            
0001A8C8                            loc_18B36:
0001A8C8 5328 003C                  		subq.b	#1,$3C(a0)
0001A8CC 6700                       		beq.s	loc_18B40
0001A8CE 6000 FEC0                  		bra.w	loc_189FE
0001A8D2                            ; ===========================================================================
0001A8D2                            
0001A8D2                            loc_18B40:
0001A8D2 5528 0025                  		subq.b	#2,$25(a0)
0001A8D6 6000 FE84                  		bra.w	loc_189CA
0001A8DA                            ; ===========================================================================
0001A8DA                            
0001A8DA                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001A8DA 5328 003C                  		subq.b	#1,$3C(a0)
0001A8DE 6B00                       		bmi.s	loc_18B52
0001A8E0 6000 ED16                  		bra.w	BossDefeated
0001A8E4                            ; ===========================================================================
0001A8E4                            
0001A8E4                            loc_18B52:
0001A8E4 5428 0025                  		addq.b	#2,$25(a0)
0001A8E8 4268 0012                  		clr.w	$12(a0)
0001A8EC 08E8 0000 0022             		bset	#0,$22(a0)
0001A8F2 08A8 0007 0022             		bclr	#7,$22(a0)
0001A8F8 4268 0010                  		clr.w	$10(a0)
0001A8FC 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001A902 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A906 6600                       		bne.s	loc_18B7C
0001A908 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A90E                            
0001A90E                            loc_18B7C:
0001A90E 6000 FE80                  		bra.w	loc_189FE
0001A912                            ; ===========================================================================
0001A912                            
0001A912                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001A912 5228 003C                  		addq.b	#1,$3C(a0)
0001A916 6700                       		beq.s	loc_18B90
0001A918 6A00                       		bpl.s	loc_18B96
0001A91A 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A920 6000                       		bra.s	loc_18BC2
0001A922                            ; ===========================================================================
0001A922                            
0001A922                            loc_18B90:
0001A922 4268 0012                  		clr.w	$12(a0)
0001A926 6000                       		bra.s	loc_18BC2
0001A928                            ; ===========================================================================
0001A928                            
0001A928                            loc_18B96:
0001A928 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001A92E 6500                       		bcs.s	loc_18BAE
0001A930 6700                       		beq.s	loc_18BB4
0001A932 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001A938 6500                       		bcs.s	loc_18BC2
0001A93A 5428 0025                  		addq.b	#2,$25(a0)
0001A93E 6000                       		bra.s	loc_18BC2
0001A940                            ; ===========================================================================
0001A940                            
0001A940                            loc_18BAE:
0001A940 5168 0012                  		subq.w	#8,$12(a0)
0001A944 6000                       		bra.s	loc_18BC2
0001A946                            ; ===========================================================================
0001A946                            
0001A946                            loc_18BB4:
0001A946 4268 0012                  		clr.w	$12(a0)
0001A94A 303C 0084                  		move.w	#$84,d0
0001A94E 4EB9 0000 11F0             		jsr	(PlaySound).l	; play SLZ music
0001A954                            
0001A954                            loc_18BC2:
0001A954 6000 FE2A                  		bra.w	loc_189EE
0001A958                            ; ===========================================================================
0001A958                            
0001A958                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001A958 317C 0400 0010             		move.w	#$400,$10(a0)
0001A95E 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A964 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001A96A 6400                       		bcc.s	loc_18BE0
0001A96C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A970 6000                       		bra.s	loc_18BE8
0001A972                            ; ===========================================================================
0001A972                            
0001A972                            loc_18BE0:
0001A972 4A28 0001                  		tst.b	1(a0)
0001A976 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001A97A                            
0001A97A                            loc_18BE8:
0001A97A 6100 ECCA                  		bsr.w	BossMove
0001A97E 6000 FDDC                  		bra.w	loc_189CA
0001A982                            ; ===========================================================================
0001A982                            
0001A982                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001A982 7000                       		moveq	#0,d0
0001A984 7201                       		moveq	#1,d1
0001A986 2268 0034                  		movea.l	$34(a0),a1
0001A98A 1029 0025                  		move.b	$25(a1),d0
0001A98E 0C00 0006                  		cmpi.b	#6,d0
0001A992 6B00                       		bmi.s	loc_18C06
0001A994 720A                       		moveq	#$A,d1
0001A996 6000                       		bra.s	loc_18C1A
0001A998                            ; ===========================================================================
0001A998                            
0001A998                            loc_18C06:
0001A998 4A29 0020                  		tst.b	$20(a1)
0001A99C 6600                       		bne.s	loc_18C10
0001A99E 7205                       		moveq	#5,d1
0001A9A0 6000                       		bra.s	loc_18C1A
0001A9A2                            ; ===========================================================================
0001A9A2                            
0001A9A2                            loc_18C10:
0001A9A2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A9A8 6500                       		bcs.s	loc_18C1A
0001A9AA 7204                       		moveq	#4,d1
0001A9AC                            
0001A9AC                            loc_18C1A:
0001A9AC 1141 001C                  		move.b	d1,$1C(a0)
0001A9B0 0C00 000A                  		cmpi.b	#$A,d0
0001A9B4 6600                       		bne.s	loc_18C32
0001A9B6 117C 0006 001C             		move.b	#6,$1C(a0)
0001A9BC 4A28 0001                  		tst.b	1(a0)
0001A9C0 6A00 FC84                  		bpl.w	Obj7A_Delete
0001A9C4                            
0001A9C4                            loc_18C32:
0001A9C4 6000                       		bra.s	loc_18C6C
0001A9C6                            ; ===========================================================================
0001A9C6                            
0001A9C6                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001A9C6 117C 0008 001C             		move.b	#8,$1C(a0)
0001A9CC 2268 0034                  		movea.l	$34(a0),a1
0001A9D0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A9D6 6600                       		bne.s	loc_18C56
0001A9D8 4A28 0001                  		tst.b	1(a0)
0001A9DC 6A00 FC68                  		bpl.w	Obj7A_Delete
0001A9E0 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A9E6 6000                       		bra.s	loc_18C6C
0001A9E8                            ; ===========================================================================
0001A9E8                            
0001A9E8                            loc_18C56:
0001A9E8 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A9EE 6E00                       		bgt.s	loc_18C6C
0001A9F0 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A9F6 6D00                       		blt.s	loc_18C6C
0001A9F8 117C 0007 001C             		move.b	#7,$1C(a0)
0001A9FE                            
0001A9FE                            loc_18C6C:
0001A9FE 43F9 0001 9A56             		lea	(Ani_Eggman).l,a1
0001AA04 4EB9 0000 B83E             		jsr	AnimateSprite
0001AA0A                            
0001AA0A                            loc_18C78:
0001AA0A 2268 0034                  		movea.l	$34(a0),a1
0001AA0E 3169 0008 0008             		move.w	8(a1),8(a0)
0001AA14 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AA1A 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AA20 7003                       		moveq	#3,d0
0001AA22 C028 0022                  		and.b	$22(a0),d0
0001AA26 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AA2C 8128 0001                  		or.b	d0,1(a0)
0001AA30 4EF9 0000 E7DE             		jmp	DisplaySprite
0001AA36                            ; ===========================================================================
0001AA36                            
0001AA36                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001AA36 2268 0034                  		movea.l	$34(a0),a1
0001AA3A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AA40 6600                       		bne.s	loc_18CB8
0001AA42 4A28 0001                  		tst.b	1(a0)
0001AA46 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001AA4A                            
0001AA4A                            loc_18CB8:
0001AA4A 217C 0001 9B6E 0004        		move.l	#Map_BossItems,4(a0)
0001AA52 317C 246C 0002             		move.w	#$246C,2(a0)
0001AA58 117C 0003 001A             		move.b	#3,$1A(a0)
0001AA5E 60AA                       		bra.s	loc_18C78
0001AA60                            ; ===========================================================================
0001AA60                            ; ---------------------------------------------------------------------------
0001AA60                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001AA60                            ; ---------------------------------------------------------------------------
0001AA60                            
0001AA60                            Obj7B:					; XREF: Obj_Index
0001AA60 7000                       		moveq	#0,d0
0001AA62 1028 0024                  		move.b	$24(a0),d0
0001AA66 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001AA6A 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001AA6E 3028 0030                  		move.w	$30(a0),d0
0001AA72 0240 FF80                  		andi.w	#$FF80,d0
0001AA76 3238 F700                  		move.w	($FFFFF700).w,d1
0001AA7A 0441 0080                  		subi.w	#$80,d1
0001AA7E 0241 FF80                  		andi.w	#$FF80,d1
0001AA82 9041                       		sub.w	d1,d0
0001AA84 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001AA88 0C40 0280                  		cmpi.w	#$280,d0
0001AA8C 6300                       		bls.s	Obj7B_NoDel
0001AA8E                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
0001AA8E                            	;	beq.s	Obj7B_Delete		; if it's zero, don't remember object
0001AA8E                            	;	movea.w	d0,a2	; load address into a2
0001AA8E                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001AA8E                            
0001AA8E                            Obj7B_Delete:
0001AA8E 4EF9 0000 E82E             		jmp	DeleteObject	; and delete object
0001AA94                            
0001AA94                            Obj7B_NoDel:
0001AA94 4EF9 0000 E7DE             		jmp	DisplaySprite
0001AA9A                            ; ===========================================================================
0001AA9A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001AA9C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001AA9E 0000                       		dc.w loc_18DC6-Obj7B_Index
0001AAA0 0000                       		dc.w loc_18EAA-Obj7B_Index
0001AAA2 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001AAA4 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001AAA6                            ; ===========================================================================
0001AAA6                            
0001AAA6                            Obj7B_Main:				; XREF: Obj7B_Index
0001AAA6 217C 0001 31DA 0004        		move.l	#Map_obj5Ea,4(a0)
0001AAAE 317C 0518 0002             		move.w	#$518,2(a0)
0001AAB4 117C 0001 001A             		move.b	#1,$1A(a0)
0001AABA 0028 0004 0001             		ori.b	#4,1(a0)
0001AAC0 117C 0004 0018             		move.b	#4,$18(a0)
0001AAC6 117C 008B 0020             		move.b	#$8B,$20(a0)
0001AACC 117C 000C 0019             		move.b	#$C,$19(a0)
0001AAD2 2268 003C                  		movea.l	$3C(a0),a1
0001AAD6 3169 0008 0030             		move.w	8(a1),$30(a0)
0001AADC 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001AAE2 08E8 0000 0022             		bset	#0,$22(a0)
0001AAE8 3028 0008                  		move.w	8(a0),d0
0001AAEC B069 0008                  		cmp.w	8(a1),d0
0001AAF0 6E00                       		bgt.s	loc_18D68
0001AAF2 08A8 0000 0022             		bclr	#0,$22(a0)
0001AAF8 117C 0002 003A             		move.b	#2,$3A(a0)
0001AAFE                            
0001AAFE                            loc_18D68:
0001AAFE 5428 0024                  		addq.b	#2,$24(a0)
0001AB02                            
0001AB02                            Obj7B_Fall:				; XREF: Obj7B_Index
0001AB02 4EB9 0000 E7A4             		jsr	ObjectFall
0001AB08 2268 003C                  		movea.l	$3C(a0),a1
0001AB0C 45F9 0000 0000             		lea	(word_19018).l,a2
0001AB12 7000                       		moveq	#0,d0
0001AB14 1029 001A                  		move.b	$1A(a1),d0
0001AB18 3228 0008                  		move.w	8(a0),d1
0001AB1C 9268 0030                  		sub.w	$30(a0),d1
0001AB20 6400                       		bcc.s	loc_18D8E
0001AB22 5440                       		addq.w	#2,d0
0001AB24                            
0001AB24                            loc_18D8E:
0001AB24 D040                       		add.w	d0,d0
0001AB26 3228 0034                  		move.w	$34(a0),d1
0001AB2A D272 0000                  		add.w	(a2,d0.w),d1
0001AB2E B268 000C                  		cmp.w	$C(a0),d1
0001AB32 6E00                       		bgt.s	locret_18DC4
0001AB34 2268 003C                  		movea.l	$3C(a0),a1
0001AB38 7202                       		moveq	#2,d1
0001AB3A 0828 0000 0022             		btst	#0,$22(a0)
0001AB40 6700                       		beq.s	loc_18DAE
0001AB42 7200                       		moveq	#0,d1
0001AB44                            
0001AB44                            loc_18DAE:
0001AB44 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001AB4A 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001AB50 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AB56 6000 0000                  		bra.w	loc_18FA2
0001AB5A                            ; ===========================================================================
0001AB5A                            
0001AB5A                            locret_18DC4:
0001AB5A 4E75                       		rts	
0001AB5C                            ; ===========================================================================
0001AB5C                            
0001AB5C                            loc_18DC6:				; XREF: Obj7B_Index
0001AB5C 2268 003C                  		movea.l	$3C(a0),a1
0001AB60 7000                       		moveq	#0,d0
0001AB62 1028 003A                  		move.b	$3A(a0),d0
0001AB66 9029 003A                  		sub.b	$3A(a1),d0
0001AB6A 6700                       		beq.s	loc_18E2A
0001AB6C 6400                       		bcc.s	loc_18DDA
0001AB6E 4400                       		neg.b	d0
0001AB70                            
0001AB70                            loc_18DDA:
0001AB70 323C F7E8                  		move.w	#-$818,d1
0001AB74 343C FEEC                  		move.w	#-$114,d2
0001AB78 0C00 0001                  		cmpi.b	#1,d0
0001AB7C 6700                       		beq.s	loc_18E00
0001AB7E 323C F6A0                  		move.w	#-$960,d1
0001AB82 343C FF0C                  		move.w	#-$F4,d2
0001AB86 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001AB8C 6D00                       		blt.s	loc_18E00
0001AB8E 323C F5E0                  		move.w	#-$A20,d1
0001AB92 343C FF80                  		move.w	#-$80,d2
0001AB96                            
0001AB96                            loc_18E00:
0001AB96 3141 0012                  		move.w	d1,$12(a0)
0001AB9A 3142 0010                  		move.w	d2,$10(a0)
0001AB9E 3028 0008                  		move.w	8(a0),d0
0001ABA2 9068 0030                  		sub.w	$30(a0),d0
0001ABA6 6400                       		bcc.s	loc_18E16
0001ABA8 4468 0010                  		neg.w	$10(a0)
0001ABAC                            
0001ABAC                            loc_18E16:
0001ABAC 117C 0001 001A             		move.b	#1,$1A(a0)
0001ABB2 317C 0020 0028             		move.w	#$20,$28(a0)
0001ABB8 5428 0024                  		addq.b	#2,$24(a0)
0001ABBC 6000 0000                  		bra.w	loc_18EAA
0001ABC0                            ; ===========================================================================
0001ABC0                            
0001ABC0                            loc_18E2A:				; XREF: loc_18DC6
0001ABC0 45F9 0000 0000             		lea	(word_19018).l,a2
0001ABC6 7000                       		moveq	#0,d0
0001ABC8 1029 001A                  		move.b	$1A(a1),d0
0001ABCC 343C 0028                  		move.w	#$28,d2
0001ABD0 3228 0008                  		move.w	8(a0),d1
0001ABD4 9268 0030                  		sub.w	$30(a0),d1
0001ABD8 6400                       		bcc.s	loc_18E48
0001ABDA 4442                       		neg.w	d2
0001ABDC 5440                       		addq.w	#2,d0
0001ABDE                            
0001ABDE                            loc_18E48:
0001ABDE D040                       		add.w	d0,d0
0001ABE0 3228 0034                  		move.w	$34(a0),d1
0001ABE4 D272 0000                  		add.w	(a2,d0.w),d1
0001ABE8 3141 000C                  		move.w	d1,$C(a0)
0001ABEC D468 0030                  		add.w	$30(a0),d2
0001ABF0 3142 0008                  		move.w	d2,8(a0)
0001ABF4 4268 000E                  		clr.w	$E(a0)
0001ABF8 4268 000A                  		clr.w	$A(a0)
0001ABFC 5368 0028                  		subq.w	#1,$28(a0)
0001AC00 6600                       		bne.s	loc_18E7A
0001AC02 317C 0020 0028             		move.w	#$20,$28(a0)
0001AC08 117C 0008 0024             		move.b	#8,$24(a0)
0001AC0E 4E75                       		rts	
0001AC10                            ; ===========================================================================
0001AC10                            
0001AC10                            loc_18E7A:
0001AC10 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001AC16 6600                       		bne.s	loc_18E88
0001AC18 117C 0005 001F             		move.b	#5,$1F(a0)
0001AC1E                            
0001AC1E                            loc_18E88:
0001AC1E 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001AC24 6600                       		bne.s	loc_18E96
0001AC26 117C 0002 001F             		move.b	#2,$1F(a0)
0001AC2C                            
0001AC2C                            loc_18E96:
0001AC2C 5328 001E                  		subq.b	#1,$1E(a0)
0001AC30 6E00                       		bgt.s	locret_18EA8
0001AC32 0868 0000 001A             		bchg	#0,$1A(a0)
0001AC38 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AC3E                            
0001AC3E                            locret_18EA8:
0001AC3E 4E75                       		rts	
0001AC40                            ; ===========================================================================
0001AC40                            
0001AC40                            loc_18EAA:				; XREF: Obj7B_Index
0001AC40 43F8 D040                  		lea	($FFFFD040).w,a1
0001AC44 707A                       		moveq	#$7A,d0
0001AC46 7240                       		moveq	#$40,d1
0001AC48 743E                       		moveq	#$3E,d2
0001AC4A                            
0001AC4A                            loc_18EB4:
0001AC4A B011                       		cmp.b	(a1),d0
0001AC4C 6700                       		beq.s	loc_18EC0
0001AC4E D2C1                       		adda.w	d1,a1
0001AC50 51CA FFF8                  		dbf	d2,loc_18EB4
0001AC54                            
0001AC54 6000                       		bra.s	loc_18F38
0001AC56                            ; ===========================================================================
0001AC56                            
0001AC56                            loc_18EC0:
0001AC56 3029 0008                  		move.w	8(a1),d0
0001AC5A 3229 000C                  		move.w	$C(a1),d1
0001AC5E 3428 0008                  		move.w	8(a0),d2
0001AC62 3628 000C                  		move.w	$C(a0),d3
0001AC66 45FA 0000                  		lea	byte_19022(pc),a2
0001AC6A 47FA 0000                  		lea	byte_19026(pc),a3
0001AC6E 181A                       		move.b	(a2)+,d4
0001AC70 4884                       		ext.w	d4
0001AC72 D044                       		add.w	d4,d0
0001AC74 181B                       		move.b	(a3)+,d4
0001AC76 4884                       		ext.w	d4
0001AC78 D444                       		add.w	d4,d2
0001AC7A B440                       		cmp.w	d0,d2
0001AC7C 6500                       		bcs.s	loc_18F38
0001AC7E 181A                       		move.b	(a2)+,d4
0001AC80 4884                       		ext.w	d4
0001AC82 D044                       		add.w	d4,d0
0001AC84 181B                       		move.b	(a3)+,d4
0001AC86 4884                       		ext.w	d4
0001AC88 D444                       		add.w	d4,d2
0001AC8A B042                       		cmp.w	d2,d0
0001AC8C 6500                       		bcs.s	loc_18F38
0001AC8E 181A                       		move.b	(a2)+,d4
0001AC90 4884                       		ext.w	d4
0001AC92 D244                       		add.w	d4,d1
0001AC94 181B                       		move.b	(a3)+,d4
0001AC96 4884                       		ext.w	d4
0001AC98 D644                       		add.w	d4,d3
0001AC9A B641                       		cmp.w	d1,d3
0001AC9C 6500                       		bcs.s	loc_18F38
0001AC9E 181A                       		move.b	(a2)+,d4
0001ACA0 4884                       		ext.w	d4
0001ACA2 D244                       		add.w	d4,d1
0001ACA4 181B                       		move.b	(a3)+,d4
0001ACA6 4884                       		ext.w	d4
0001ACA8 D644                       		add.w	d4,d3
0001ACAA B243                       		cmp.w	d3,d1
0001ACAC 6500                       		bcs.s	loc_18F38
0001ACAE 5428 0024                  		addq.b	#2,$24(a0)
0001ACB2 4268 0028                  		clr.w	$28(a0)
0001ACB6 4229 0020                  		clr.b	$20(a1)
0001ACBA 5329 0021                  		subq.b	#1,$21(a1)
0001ACBE 6600                       		bne.s	loc_18F38
0001ACC0 08E9 0007 0022             		bset	#7,$22(a1)
0001ACC6 4268 0010                  		clr.w	$10(a0)
0001ACCA 4268 0012                  		clr.w	$12(a0)
0001ACCE                            
0001ACCE                            loc_18F38:
0001ACCE 4A68 0012                  		tst.w	$12(a0)
0001ACD2 6A00                       		bpl.s	loc_18F5C
0001ACD4 4EB9 0000 E7A4             		jsr	ObjectFall
0001ACDA 3028 0034                  		move.w	$34(a0),d0
0001ACDE 0440 002F                  		subi.w	#$2F,d0
0001ACE2 B068 000C                  		cmp.w	$C(a0),d0
0001ACE6 6E00                       		bgt.s	loc_18F58
0001ACE8 4EB9 0000 E7A4             		jsr	ObjectFall
0001ACEE                            
0001ACEE                            loc_18F58:
0001ACEE 6000 FF20                  		bra.w	loc_18E7A
0001ACF2                            ; ===========================================================================
0001ACF2                            
0001ACF2                            loc_18F5C:
0001ACF2 4EB9 0000 E7A4             		jsr	ObjectFall
0001ACF8 2268 003C                  		movea.l	$3C(a0),a1
0001ACFC 45F9 0000 0000             		lea	(word_19018).l,a2
0001AD02 7000                       		moveq	#0,d0
0001AD04 1029 001A                  		move.b	$1A(a1),d0
0001AD08 3228 0008                  		move.w	8(a0),d1
0001AD0C 9268 0030                  		sub.w	$30(a0),d1
0001AD10 6400                       		bcc.s	loc_18F7E
0001AD12 5440                       		addq.w	#2,d0
0001AD14                            
0001AD14                            loc_18F7E:
0001AD14 D040                       		add.w	d0,d0
0001AD16 3228 0034                  		move.w	$34(a0),d1
0001AD1A D272 0000                  		add.w	(a2,d0.w),d1
0001AD1E B268 000C                  		cmp.w	$C(a0),d1
0001AD22 6ECA                       		bgt.s	loc_18F58
0001AD24 2268 003C                  		movea.l	$3C(a0),a1
0001AD28 7202                       		moveq	#2,d1
0001AD2A 4A68 0010                  		tst.w	$10(a0)
0001AD2E 6B00                       		bmi.s	loc_18F9C
0001AD30 7200                       		moveq	#0,d1
0001AD32                            
0001AD32                            loc_18F9C:
0001AD32 317C 0000 0028             		move.w	#0,$28(a0)
0001AD38                            
0001AD38                            loc_18FA2:
0001AD38 1341 003A                  		move.b	d1,$3A(a1)
0001AD3C 1141 003A                  		move.b	d1,$3A(a0)
0001AD40 B229 001A                  		cmp.b	$1A(a1),d1
0001AD44 6700                       		beq.s	loc_19008
0001AD46 08A9 0003 0022             		bclr	#3,$22(a1)
0001AD4C 6700                       		beq.s	loc_19008
0001AD4E 4229 0025                  		clr.b	$25(a1)
0001AD52 137C 0002 0024             		move.b	#2,$24(a1)
0001AD58 45F8 D000                  		lea	($FFFFD000).w,a2
0001AD5C 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001AD62 446A 0012                  		neg.w	$12(a2)
0001AD66 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001AD6C 6600                       		bne.s	loc_18FDC
0001AD6E E0EA 0012                  		asr	$12(a2)
0001AD72                            
0001AD72                            loc_18FDC:
0001AD72 08EA 0001 0022             		bset	#1,$22(a2)
0001AD78 08AA 0003 0022             		bclr	#3,$22(a2)
0001AD7E 422A 003C                  		clr.b	$3C(a2)
0001AD82 2F08                       		move.l	a0,-(sp)
0001AD84 41D2                       		lea	(a2),a0
0001AD86 4EBA 9E92                  		jsr	Obj01_ChkRoll
0001AD8A 205F                       		movea.l	(sp)+,a0
0001AD8C 157C 0002 0024             		move.b	#2,$24(a2)
0001AD92 303C 00CC                  		move.w	#$CC,d0
0001AD96 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001AD9C                            
0001AD9C                            loc_19008:
0001AD9C 4268 0010                  		clr.w	$10(a0)
0001ADA0 4268 0012                  		clr.w	$12(a0)
0001ADA4 5428 0024                  		addq.b	#2,$24(a0)
0001ADA8 6000 FE66                  		bra.w	loc_18E7A
0001ADAC                            ; ===========================================================================
0001ADAC FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001ADB6                            		even
0001ADB6 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001ADBA                            		even
0001ADBA 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001ADBE                            		even
0001ADBE                            ; ===========================================================================
0001ADBE                            
0001ADBE                            Obj7B_Explode:				; XREF: Obj7B_Index
0001ADBE 10BC 003F                  		move.b	#$3F,(a0)
0001ADC2 4228 0024                  		clr.b	$24(a0)
0001ADC6 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001ADCC 6700                       		beq.s	Obj7B_MakeFrag
0001ADCE 4E75                       		rts	
0001ADD0                            ; ===========================================================================
0001ADD0                            
0001ADD0                            Obj7B_MakeFrag:
0001ADD0 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001ADD6 7203                       		moveq	#3,d1
0001ADD8 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001ADDC                            
0001ADDC                            Obj7B_Loop:
0001ADDC 4EB9 0000 EF34             		jsr	SingleObjLoad
0001ADE2 6600                       		bne.s	loc_1909A
0001ADE4 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001ADE8 137C 000A 0024             		move.b	#$A,$24(a1)
0001ADEE 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001ADF6 137C 0003 0018             		move.b	#3,$18(a1)
0001ADFC 337C 0518 0002             		move.w	#$518,2(a1)
0001AE02 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE08 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AE0E 335A 0010                  		move.w	(a2)+,$10(a1)
0001AE12 335A 0012                  		move.w	(a2)+,$12(a1)
0001AE16 137C 0098 0020             		move.b	#$98,$20(a1)
0001AE1C 0029 0004 0001             		ori.b	#4,1(a1)
0001AE22 08E9 0007 0001             		bset	#7,1(a1)
0001AE28 137C 000C 0019             		move.b	#$C,$19(a1)
0001AE2E                            
0001AE2E                            loc_1909A:
0001AE2E 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001AE32                            
0001AE32 4E75                       		rts	
0001AE34                            ; ===========================================================================
0001AE34 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001AE38 FF60 FDC0                  		dc.w $FF60, $FDC0
0001AE3C 0100 FCC0                  		dc.w $100, $FCC0
0001AE40 00A0 FDC0                  		dc.w $A0, $FDC0
0001AE44                            ; ===========================================================================
0001AE44                            
0001AE44                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001AE44 4EB9 0000 E7C4             		jsr	SpeedToPos
0001AE4A 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AE50 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001AE56 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AE5C 7004                       		moveq	#4,d0
0001AE5E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AE62 E448                       		lsr.w	#2,d0
0001AE64 1140 001A                  		move.b	d0,$1A(a0)
0001AE68 4A28 0001                  		tst.b	1(a0)
0001AE6C 6A00 F7D8                  		bpl.w	Obj7A_Delete
0001AE70 4E75                       		rts	
0001AE72                            ; ===========================================================================
0001AE72                            ; ---------------------------------------------------------------------------
0001AE72                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AE72                            ; ---------------------------------------------------------------------------
0001AE72                            Map_obj7B:
0001AE72                            	include "_maps\obj7B.asm"
0001AE72                            ; ---------------------------------------------------------------------------
0001AE72                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AE72                            ; ---------------------------------------------------------------------------
0001AE72 0000                       		dc.w byte_190E2-Map_obj7B
0001AE74 0000                       		dc.w byte_190E8-Map_obj7B
0001AE76 01                         byte_190E2:	dc.b 1
0001AE77 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001AE7C 01                         byte_190E8:	dc.b 1
0001AE7D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001AE82                            		even
0001AE82                            		even
0001AE82                            
0001AE82                            ; ===========================================================================
0001AE82                            ; ---------------------------------------------------------------------------
0001AE82                            ; Object 75 - Eggman (SYZ)
0001AE82                            ; ---------------------------------------------------------------------------
0001AE82                            
0001AE82                            Obj75:					; XREF: Obj_Index
0001AE82 7000                       		moveq	#0,d0
0001AE84 1028 0024                  		move.b	$24(a0),d0
0001AE88 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001AE8C 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001AE90                            ; ===========================================================================
0001AE90 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001AE92 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001AE94 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001AE96 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001AE98 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001AE9A                            
0001AE9A 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001AE9D 0401 05                    		dc.b 4,	1, 5
0001AEA0 0607 05                    		dc.b 6,	7, 5
0001AEA3 0800 05                    		dc.b 8,	0, 5
0001AEA6                            ; ===========================================================================
0001AEA6                            
0001AEA6                            Obj75_Main:				; XREF: Obj75_Index
0001AEA6 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001AEAC 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001AEB2 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AEB8 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AEBE 117C 000F 0020             		move.b	#$F,$20(a0)
0001AEC4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AECA 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001AECE 2248                       		movea.l	a0,a1
0001AED0 7203                       		moveq	#3,d1
0001AED2 6000                       		bra.s	Obj75_LoadBoss
0001AED4                            ; ===========================================================================
0001AED4                            
0001AED4                            Obj75_Loop:
0001AED4 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001AEDA 6600                       		bne.s	Obj75_ShipMain
0001AEDC 12BC 0075                  		move.b	#$75,(a1)
0001AEE0 3368 0008 0008             		move.w	8(a0),8(a1)
0001AEE6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AEEC                            
0001AEEC                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001AEEC 08A8 0000 0022             		bclr	#0,$22(a0)
0001AEF2 4229 0025                  		clr.b	$25(a1)
0001AEF6 135A 0024                  		move.b	(a2)+,$24(a1)
0001AEFA 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AEFE 135A 0018                  		move.b	(a2)+,$18(a1)
0001AF02 237C 0001 9AA6 0004        		move.l	#Map_Eggman,4(a1)
0001AF0A 337C 0400 0002             		move.w	#$400,2(a1)
0001AF10 137C 0004 0001             		move.b	#4,1(a1)
0001AF16 137C 0020 0019             		move.b	#$20,$19(a1)
0001AF1C 2348 0034                  		move.l	a0,$34(a1)
0001AF20 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001AF24                            
0001AF24                            Obj75_ShipMain:				; XREF: Obj75_Index
0001AF24 7000                       		moveq	#0,d0
0001AF26 1028 0025                  		move.b	$25(a0),d0
0001AF2A 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001AF2E 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001AF32 43F9 0001 9A56             		lea	(Ani_Eggman).l,a1
0001AF38 4EB9 0000 B83E             		jsr	AnimateSprite
0001AF3E 7003                       		moveq	#3,d0
0001AF40 C028 0022                  		and.b	$22(a0),d0
0001AF44 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AF4A 8128 0001                  		or.b	d0,1(a0)
0001AF4E 4EF9 0000 E7DE             		jmp	DisplaySprite
0001AF54                            ; ===========================================================================
0001AF54 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001AF58 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001AF5C 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001AF60                            ; ===========================================================================
0001AF60                            
0001AF60                            loc_191CC:				; XREF: Obj75_ShipIndex
0001AF60 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AF66 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001AF6C 6400                       		bcc.s	loc_191DE
0001AF6E 5428 0025                  		addq.b	#2,$25(a0)
0001AF72                            
0001AF72                            loc_191DE:
0001AF72 1028 003F                  		move.b	$3F(a0),d0
0001AF76 5428 003F                  		addq.b	#2,$3F(a0)
0001AF7A 4EB9 0000 29CC             		jsr	(CalcSine).l
0001AF80 E440                       		asr.w	#2,d0
0001AF82 3140 0012                  		move.w	d0,$12(a0)
0001AF86                            
0001AF86                            loc_191F2:
0001AF86 6100 E6BE                  		bsr.w	BossMove
0001AF8A 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AF90 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AF96                            
0001AF96                            loc_19202:
0001AF96 3028 0008                  		move.w	8(a0),d0
0001AF9A 0440 2C00                  		subi.w	#$2C00,d0
0001AF9E EA48                       		lsr.w	#5,d0
0001AFA0 1140 0034                  		move.b	d0,$34(a0)
0001AFA4 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001AFAA 6400                       		bcc.s	locret_19256
0001AFAC 4A28 0022                  		tst.b	$22(a0)
0001AFB0 6B00                       		bmi.s	loc_19258
0001AFB2 4A28 0020                  		tst.b	$20(a0)
0001AFB6 6600                       		bne.s	locret_19256
0001AFB8 4A28 003E                  		tst.b	$3E(a0)
0001AFBC 6600                       		bne.s	loc_1923A
0001AFBE 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AFC4 303C 00AC                  		move.w	#$AC,d0
0001AFC8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AFCE                            
0001AFCE                            loc_1923A:
0001AFCE 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001AFD2 7000                       		moveq	#0,d0
0001AFD4 4A51                       		tst.w	(a1)
0001AFD6 6600                       		bne.s	loc_19248
0001AFD8 303C 0EEE                  		move.w	#$EEE,d0
0001AFDC                            
0001AFDC                            loc_19248:
0001AFDC 3280                       		move.w	d0,(a1)
0001AFDE 5328 003E                  		subq.b	#1,$3E(a0)
0001AFE2 6600                       		bne.s	locret_19256
0001AFE4 117C 000F 0020             		move.b	#$F,$20(a0)
0001AFEA                            
0001AFEA                            locret_19256:
0001AFEA 4E75                       		rts	
0001AFEC                            ; ===========================================================================
0001AFEC                            
0001AFEC                            loc_19258:				; XREF: loc_19202
0001AFEC 7064                       		moveq	#100,d0
0001AFEE 6100 0000                  		bsr.w	AddPoints
0001AFF2 117C 0006 0025             		move.b	#6,$25(a0)
0001AFF8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001AFFE 4268 0010                  		clr.w	$10(a0)
0001B002 4E75                       		rts	
0001B004                            ; ===========================================================================
0001B004                            
0001B004                            loc_19270:				; XREF: Obj75_ShipIndex
0001B004 3028 0030                  		move.w	$30(a0),d0
0001B008 317C 0140 0010             		move.w	#$140,$10(a0)
0001B00E 0828 0000 0022             		btst	#0,$22(a0)
0001B014 6600                       		bne.s	loc_1928E
0001B016 4468 0010                  		neg.w	$10(a0)
0001B01A 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B01E 6E00                       		bgt.s	loc_1929E
0001B020 6000                       		bra.s	loc_19294
0001B022                            ; ===========================================================================
0001B022                            
0001B022                            loc_1928E:
0001B022 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B026 6D00                       		blt.s	loc_1929E
0001B028                            
0001B028                            loc_19294:
0001B028 0868 0000 0022             		bchg	#0,$22(a0)
0001B02E 4228 003D                  		clr.b	$3D(a0)
0001B032                            
0001B032                            loc_1929E:
0001B032 0440 2C10                  		subi.w	#$2C10,d0
0001B036 0240 001F                  		andi.w	#$1F,d0
0001B03A 0440 001F                  		subi.w	#$1F,d0
0001B03E 6A00                       		bpl.s	loc_192AE
0001B040 4440                       		neg.w	d0
0001B042                            
0001B042                            loc_192AE:
0001B042 5340                       		subq.w	#1,d0
0001B044 6E00                       		bgt.s	loc_192E8
0001B046 4A28 003D                  		tst.b	$3D(a0)
0001B04A 6600                       		bne.s	loc_192E8
0001B04C 3238 D008                  		move.w	($FFFFD008).w,d1
0001B050 0441 2C00                  		subi.w	#$2C00,d1
0001B054 EA41                       		asr.w	#5,d1
0001B056 B228 0034                  		cmp.b	$34(a0),d1
0001B05A 6600                       		bne.s	loc_192E8
0001B05C 7000                       		moveq	#0,d0
0001B05E 1028 0034                  		move.b	$34(a0),d0
0001B062 EB40                       		asl.w	#5,d0
0001B064 0640 2C10                  		addi.w	#$2C10,d0
0001B068 3140 0030                  		move.w	d0,$30(a0)
0001B06C 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B070 5428 0025                  		addq.b	#2,$25(a0)
0001B074 4268 0028                  		clr.w	$28(a0)
0001B078 4268 0010                  		clr.w	$10(a0)
0001B07C                            
0001B07C                            loc_192E8:
0001B07C 6000 FEF4                  		bra.w	loc_191DE
0001B080                            ; ===========================================================================
0001B080                            
0001B080                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B080 7000                       		moveq	#0,d0
0001B082 1028 0028                  		move.b	$28(a0),d0
0001B086 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B08A 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B08E                            ; ===========================================================================
0001B08E 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B090 0000                       		dc.w loc_19348-off_192FA
0001B092 0000                       		dc.w loc_1938E-off_192FA
0001B094 0000                       		dc.w loc_193D0-off_192FA
0001B096                            ; ===========================================================================
0001B096                            
0001B096                            loc_19302:				; XREF: off_192FA
0001B096 317C 0180 0012             		move.w	#$180,$12(a0)
0001B09C 3028 0038                  		move.w	$38(a0),d0
0001B0A0 0C40 0556                  		cmpi.w	#$556,d0
0001B0A4 6500                       		bcs.s	loc_19344
0001B0A6 317C 0556 0038             		move.w	#$556,$38(a0)
0001B0AC 4268 003C                  		clr.w	$3C(a0)
0001B0B0 70FF                       		moveq	#-1,d0
0001B0B2 3028 0036                  		move.w	$36(a0),d0
0001B0B6 6700                       		beq.s	loc_1933C
0001B0B8 2240                       		movea.l	d0,a1
0001B0BA 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B0C0 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B0C6 2348 0034                  		move.l	a0,$34(a1)
0001B0CA 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B0D0                            
0001B0D0                            loc_1933C:
0001B0D0 4268 0012                  		clr.w	$12(a0)
0001B0D4 5428 0028                  		addq.b	#2,$28(a0)
0001B0D8                            
0001B0D8                            loc_19344:
0001B0D8 6000 FEAC                  		bra.w	loc_191F2
0001B0DC                            ; ===========================================================================
0001B0DC                            
0001B0DC                            loc_19348:				; XREF: off_192FA
0001B0DC 5368 003C                  		subq.w	#1,$3C(a0)
0001B0E0 6A00                       		bpl.s	loc_19366
0001B0E2 5428 0028                  		addq.b	#2,$28(a0)
0001B0E6 317C F800 0012             		move.w	#-$800,$12(a0)
0001B0EC 4A68 0036                  		tst.w	$36(a0)
0001B0F0 6600                       		bne.s	loc_19362
0001B0F2 E0E8 0012                  		asr	$12(a0)
0001B0F6                            
0001B0F6                            loc_19362:
0001B0F6 7000                       		moveq	#0,d0
0001B0F8 6000                       		bra.s	loc_1937C
0001B0FA                            ; ===========================================================================
0001B0FA                            
0001B0FA                            loc_19366:
0001B0FA 7000                       		moveq	#0,d0
0001B0FC 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B102 6E00                       		bgt.s	loc_1937C
0001B104 7002                       		moveq	#2,d0
0001B106 0828 0001 003D             		btst	#1,$3D(a0)
0001B10C 6700                       		beq.s	loc_1937C
0001B10E 4440                       		neg.w	d0
0001B110                            
0001B110                            loc_1937C:
0001B110 D068 0038                  		add.w	$38(a0),d0
0001B114 3140 000C                  		move.w	d0,$C(a0)
0001B118 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B11E 6000 FE76                  		bra.w	loc_19202
0001B122                            ; ===========================================================================
0001B122                            
0001B122                            loc_1938E:				; XREF: off_192FA
0001B122 303C 04DA                  		move.w	#$4DA,d0
0001B126 4A68 0036                  		tst.w	$36(a0)
0001B12A 6700                       		beq.s	loc_1939C
0001B12C 0440 0018                  		subi.w	#$18,d0
0001B130                            
0001B130                            loc_1939C:
0001B130 B068 0038                  		cmp.w	$38(a0),d0
0001B134 6D00                       		blt.s	loc_193BE
0001B136 317C 0008 003C             		move.w	#8,$3C(a0)
0001B13C 4A68 0036                  		tst.w	$36(a0)
0001B140 6700                       		beq.s	loc_193B4
0001B142 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B148                            
0001B148                            loc_193B4:
0001B148 5428 0028                  		addq.b	#2,$28(a0)
0001B14C 4268 0012                  		clr.w	$12(a0)
0001B150 6000                       		bra.s	loc_193CC
0001B152                            ; ===========================================================================
0001B152                            
0001B152                            loc_193BE:
0001B152 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B158 6C00                       		bge.s	loc_193CC
0001B15A 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B160                            
0001B160                            loc_193CC:
0001B160 6000 FE24                  		bra.w	loc_191F2
0001B164                            ; ===========================================================================
0001B164                            
0001B164                            loc_193D0:				; XREF: off_192FA
0001B164 5368 003C                  		subq.w	#1,$3C(a0)
0001B168 6E00                       		bgt.s	loc_19406
0001B16A 6B00                       		bmi.s	loc_193EE
0001B16C 70FF                       		moveq	#-1,d0
0001B16E 3028 0036                  		move.w	$36(a0),d0
0001B172 6700                       		beq.s	loc_193E8
0001B174 2240                       		movea.l	d0,a1
0001B176 137C 000A 0029             		move.b	#$A,$29(a1)
0001B17C                            
0001B17C                            loc_193E8:
0001B17C 4268 0036                  		clr.w	$36(a0)
0001B180 6000                       		bra.s	loc_19406
0001B182                            ; ===========================================================================
0001B182                            
0001B182                            loc_193EE:
0001B182 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B188 6600                       		bne.s	loc_19406
0001B18A 4228 0029                  		clr.b	$29(a0)
0001B18E 5528 0025                  		subq.b	#2,$25(a0)
0001B192 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B198 6000                       		bra.s	loc_19446
0001B19A                            ; ===========================================================================
0001B19A                            
0001B19A                            loc_19406:
0001B19A 7001                       		moveq	#1,d0
0001B19C 4A68 0036                  		tst.w	$36(a0)
0001B1A0 6700                       		beq.s	loc_19410
0001B1A2 7002                       		moveq	#2,d0
0001B1A4                            
0001B1A4                            loc_19410:
0001B1A4 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B1AA 6700                       		beq.s	loc_19424
0001B1AC 6D00                       		blt.s	loc_1941C
0001B1AE 4440                       		neg.w	d0
0001B1B0                            
0001B1B0                            loc_1941C:
0001B1B0 4A68 0036                  		tst.w	$36(a0)
0001B1B4 D168 0038                  		add.w	d0,$38(a0)
0001B1B8                            
0001B1B8                            loc_19424:
0001B1B8 7000                       		moveq	#0,d0
0001B1BA 4A68 0036                  		tst.w	$36(a0)
0001B1BE 6700                       		beq.s	loc_19438
0001B1C0 7002                       		moveq	#2,d0
0001B1C2 0828 0000 003D             		btst	#0,$3D(a0)
0001B1C8 6700                       		beq.s	loc_19438
0001B1CA 4440                       		neg.w	d0
0001B1CC                            
0001B1CC                            loc_19438:
0001B1CC D068 0038                  		add.w	$38(a0),d0
0001B1D0 3140 000C                  		move.w	d0,$C(a0)
0001B1D4 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B1DA                            
0001B1DA                            loc_19446:
0001B1DA 6000 FDBA                  		bra.w	loc_19202
0001B1DE                            
0001B1DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B1DE                            
0001B1DE                            
0001B1DE                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B1DE 4268 0036                  		clr.w	$36(a0)
0001B1E2 43F8 D040                  		lea	($FFFFD040).w,a1
0001B1E6 703E                       		moveq	#$3E,d0
0001B1E8 7276                       		moveq	#$76,d1
0001B1EA 1428 0034                  		move.b	$34(a0),d2
0001B1EE                            
0001B1EE                            Obj75_FindLoop:
0001B1EE B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B1F0 6600                       		bne.s	loc_1946A	; if not, branch
0001B1F2 B429 0028                  		cmp.b	$28(a1),d2
0001B1F6 6600                       		bne.s	loc_1946A
0001B1F8 3149 0036                  		move.w	a1,$36(a0)
0001B1FC 6000                       		bra.s	locret_19472
0001B1FE                            ; ===========================================================================
0001B1FE                            
0001B1FE                            loc_1946A:
0001B1FE 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B202 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B206                            
0001B206                            locret_19472:
0001B206 4E75                       		rts	
0001B208                            ; End of function Obj75_FindBlocks
0001B208                            
0001B208                            ; ===========================================================================
0001B208                            
0001B208                            loc_19474:				; XREF: Obj75_ShipIndex
0001B208 5368 003C                  		subq.w	#1,$3C(a0)
0001B20C 6B00                       		bmi.s	loc_1947E
0001B20E 6000 E3E8                  		bra.w	BossDefeated
0001B212                            ; ===========================================================================
0001B212                            
0001B212                            loc_1947E:
0001B212 5428 0025                  		addq.b	#2,$25(a0)
0001B216 4268 0012                  		clr.w	$12(a0)
0001B21A 08E8 0000 0022             		bset	#0,$22(a0)
0001B220 08A8 0007 0022             		bclr	#7,$22(a0)
0001B226 4268 0010                  		clr.w	$10(a0)
0001B22A 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B230 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B234 6600                       		bne.s	loc_194A8
0001B236 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B23C                            
0001B23C                            loc_194A8:
0001B23C 6000 FD58                  		bra.w	loc_19202
0001B240                            ; ===========================================================================
0001B240                            
0001B240                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B240 5268 003C                  		addq.w	#1,$3C(a0)
0001B244 6700                       		beq.s	loc_194BC
0001B246 6A00                       		bpl.s	loc_194C2
0001B248 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B24E 6000                       		bra.s	loc_194EE
0001B250                            ; ===========================================================================
0001B250                            
0001B250                            loc_194BC:
0001B250 4268 0012                  		clr.w	$12(a0)
0001B254 6000                       		bra.s	loc_194EE
0001B256                            ; ===========================================================================
0001B256                            
0001B256                            loc_194C2:
0001B256 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B25C 6500                       		bcs.s	loc_194DA
0001B25E 6700                       		beq.s	loc_194E0
0001B260 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B266 6500                       		bcs.s	loc_194EE
0001B268 5428 0025                  		addq.b	#2,$25(a0)
0001B26C 6000                       		bra.s	loc_194EE
0001B26E                            ; ===========================================================================
0001B26E                            
0001B26E                            loc_194DA:
0001B26E 5168 0012                  		subq.w	#8,$12(a0)
0001B272 6000                       		bra.s	loc_194EE
0001B274                            ; ===========================================================================
0001B274                            
0001B274                            loc_194E0:
0001B274 4268 0012                  		clr.w	$12(a0)
0001B278 303C 0085                  		move.w	#$85,d0
0001B27C 4EB9 0000 11F0             		jsr	(PlaySound).l	; play SYZ music
0001B282                            
0001B282                            loc_194EE:
0001B282 6000 FD02                  		bra.w	loc_191F2
0001B286                            ; ===========================================================================
0001B286                            
0001B286                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B286 317C 0400 0010             		move.w	#$400,$10(a0)
0001B28C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B292 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B298 6400                       		bcc.s	loc_1950C
0001B29A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B29E 6000                       		bra.s	loc_19512
0001B2A0                            ; ===========================================================================
0001B2A0                            
0001B2A0                            loc_1950C:
0001B2A0 4A28 0001                  		tst.b	1(a0)
0001B2A4 6A00                       		bpl.s	Obj75_ShipDelete
0001B2A6                            
0001B2A6                            loc_19512:
0001B2A6 6100 E39E                  		bsr.w	BossMove
0001B2AA 6000 FCC6                  		bra.w	loc_191DE
0001B2AE                            ; ===========================================================================
0001B2AE                            
0001B2AE                            Obj75_ShipDelete:
0001B2AE 4EF9 0000 E82E             		jmp	DeleteObject
0001B2B4                            ; ===========================================================================
0001B2B4                            
0001B2B4                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B2B4 7201                       		moveq	#1,d1
0001B2B6 2268 0034                  		movea.l	$34(a0),a1
0001B2BA 7000                       		moveq	#0,d0
0001B2BC 1029 0025                  		move.b	$25(a1),d0
0001B2C0 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B2C4 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B2C8 1141 001C                  		move.b	d1,$1C(a0)
0001B2CC 1010                       		move.b	(a0),d0
0001B2CE B011                       		cmp.b	(a1),d0
0001B2D0 6600                       		bne.s	Obj75_FaceDelete
0001B2D2 6000                       		bra.s	loc_195BE
0001B2D4                            ; ===========================================================================
0001B2D4                            
0001B2D4                            Obj75_FaceDelete:
0001B2D4 4EF9 0000 E82E             		jmp	DeleteObject
0001B2DA                            ; ===========================================================================
0001B2DA 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B2DE 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B2E2 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B2E6                            ; ===========================================================================
0001B2E6                            
0001B2E6                            loc_19552:				; XREF: off_19546
0001B2E6 720A                       		moveq	#$A,d1
0001B2E8 4E75                       		rts	
0001B2EA                            ; ===========================================================================
0001B2EA                            
0001B2EA                            loc_19556:				; XREF: off_19546
0001B2EA 7206                       		moveq	#6,d1
0001B2EC 4E75                       		rts	
0001B2EE                            ; ===========================================================================
0001B2EE                            
0001B2EE                            loc_1955A:				; XREF: off_19546
0001B2EE 7000                       		moveq	#0,d0
0001B2F0 1029 0028                  		move.b	$28(a1),d0
0001B2F4 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B2F8 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B2FC                            ; ===========================================================================
0001B2FC 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B300 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B304                            ; ===========================================================================
0001B304                            
0001B304                            loc_19570:				; XREF: off_19568
0001B304 6000                       		bra.s	loc_19574
0001B306                            ; ===========================================================================
0001B306                            
0001B306                            loc_19572:				; XREF: off_19568
0001B306 7206                       		moveq	#6,d1
0001B308                            
0001B308                            loc_19574:				; XREF: off_19546
0001B308 4A29 0020                  		tst.b	$20(a1)
0001B30C 6600                       		bne.s	loc_1957E
0001B30E 7205                       		moveq	#5,d1
0001B310 4E75                       		rts	
0001B312                            ; ===========================================================================
0001B312                            
0001B312                            loc_1957E:
0001B312 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B318 6500                       		bcs.s	locret_19588
0001B31A 7204                       		moveq	#4,d1
0001B31C                            
0001B31C                            locret_19588:
0001B31C 4E75                       		rts	
0001B31E                            ; ===========================================================================
0001B31E                            
0001B31E                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B31E 117C 0007 001C             		move.b	#7,$1C(a0)
0001B324 2268 0034                  		movea.l	$34(a0),a1
0001B328 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B32E 6600                       		bne.s	loc_195AA
0001B330 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B336 4A28 0001                  		tst.b	1(a0)
0001B33A 6A00                       		bpl.s	Obj75_FlameDelete
0001B33C 6000                       		bra.s	loc_195B6
0001B33E                            ; ===========================================================================
0001B33E                            
0001B33E                            loc_195AA:
0001B33E 4A69 0010                  		tst.w	$10(a1)
0001B342 6700                       		beq.s	loc_195B6
0001B344 117C 0008 001C             		move.b	#8,$1C(a0)
0001B34A                            
0001B34A                            loc_195B6:
0001B34A 6000                       		bra.s	loc_195BE
0001B34C                            ; ===========================================================================
0001B34C                            
0001B34C                            Obj75_FlameDelete:
0001B34C 4EF9 0000 E82E             		jmp	DeleteObject
0001B352                            ; ===========================================================================
0001B352                            
0001B352                            loc_195BE:
0001B352 43F9 0001 9A56             		lea	(Ani_Eggman).l,a1
0001B358 4EB9 0000 B83E             		jsr	AnimateSprite
0001B35E 2268 0034                  		movea.l	$34(a0),a1
0001B362 3169 0008 0008             		move.w	8(a1),8(a0)
0001B368 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B36E                            
0001B36E                            loc_195DA:
0001B36E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B374 7003                       		moveq	#3,d0
0001B376 C028 0022                  		and.b	$22(a0),d0
0001B37A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B380 8128 0001                  		or.b	d0,1(a0)
0001B384 4EF9 0000 E7DE             		jmp	DisplaySprite
0001B38A                            ; ===========================================================================
0001B38A                            
0001B38A                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001B38A 217C 0001 9B6E 0004        		move.l	#Map_BossItems,4(a0)
0001B392 317C 246C 0002             		move.w	#$246C,2(a0)
0001B398 117C 0005 001A             		move.b	#5,$1A(a0)
0001B39E 2268 0034                  		movea.l	$34(a0),a1
0001B3A2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B3A8 6600                       		bne.s	loc_1961C
0001B3AA 4A28 0001                  		tst.b	1(a0)
0001B3AE 6A00                       		bpl.s	Obj75_SpikeDelete
0001B3B0                            
0001B3B0                            loc_1961C:
0001B3B0 3169 0008 0008             		move.w	8(a1),8(a0)
0001B3B6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B3BC 3028 003C                  		move.w	$3C(a0),d0
0001B3C0 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B3C6 6600                       		bne.s	loc_19652
0001B3C8 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001B3CE 6700                       		beq.s	loc_1964C
0001B3D0 4A29 0028                  		tst.b	$28(a1)
0001B3D4 6600                       		bne.s	loc_19658
0001B3D6 0C40 0094                  		cmpi.w	#$94,d0
0001B3DA 6C00                       		bge.s	loc_19658
0001B3DC 5E40                       		addq.w	#7,d0
0001B3DE 6000                       		bra.s	loc_19658
0001B3E0                            ; ===========================================================================
0001B3E0                            
0001B3E0                            loc_1964C:
0001B3E0 4A69 003C                  		tst.w	$3C(a1)
0001B3E4 6A00                       		bpl.s	loc_19658
0001B3E6                            
0001B3E6                            loc_19652:
0001B3E6 4A40                       		tst.w	d0
0001B3E8 6F00                       		ble.s	loc_19658
0001B3EA 5B40                       		subq.w	#5,d0
0001B3EC                            
0001B3EC                            loc_19658:
0001B3EC 3140 003C                  		move.w	d0,$3C(a0)
0001B3F0 E440                       		asr.w	#2,d0
0001B3F2 D168 000C                  		add.w	d0,$C(a0)
0001B3F6 117C 0008 0019             		move.b	#8,$19(a0)
0001B3FC 117C 000C 0016             		move.b	#$C,$16(a0)
0001B402 4228 0020                  		clr.b	$20(a0)
0001B406 2268 0034                  		movea.l	$34(a0),a1
0001B40A 4A29 0020                  		tst.b	$20(a1)
0001B40E 6700                       		beq.s	loc_19688
0001B410 4A29 0029                  		tst.b	$29(a1)
0001B414 6600                       		bne.s	loc_19688
0001B416 117C 0084 0020             		move.b	#$84,$20(a0)
0001B41C                            
0001B41C                            loc_19688:
0001B41C 6000 FF50                  		bra.w	loc_195DA
0001B420                            ; ===========================================================================
0001B420                            
0001B420                            Obj75_SpikeDelete:
0001B420 4EF9 0000 E82E             		jmp	DeleteObject
0001B426                            ; ===========================================================================
0001B426                            ; ---------------------------------------------------------------------------
0001B426                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B426                            ; ---------------------------------------------------------------------------
0001B426                            
0001B426                            Obj76:					; XREF: Obj_Index
0001B426 7000                       		moveq	#0,d0
0001B428 1028 0024                  		move.b	$24(a0),d0
0001B42C 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B430 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B434                            ; ===========================================================================
0001B434 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B436 0000                       		dc.w Obj76_Action-Obj76_Index
0001B438 0000                       		dc.w loc_19762-Obj76_Index
0001B43A                            ; ===========================================================================
0001B43A                            
0001B43A                            Obj76_Main:				; XREF: Obj76_Index
0001B43A 7800                       		moveq	#0,d4
0001B43C 3A3C 2C10                  		move.w	#$2C10,d5
0001B440 7C09                       		moveq	#9,d6
0001B442 43D0                       		lea	(a0),a1
0001B444 6000                       		bra.s	Obj76_MakeBlock
0001B446                            ; ===========================================================================
0001B446                            
0001B446                            Obj76_Loop:
0001B446 4EB9 0000 EF34             		jsr	SingleObjLoad
0001B44C 6600                       		bne.s	Obj76_ExitLoop
0001B44E                            
0001B44E                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B44E 12BC 0076                  		move.b	#$76,(a1)
0001B452 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B45A 337C 4000 0002             		move.w	#$4000,2(a1)
0001B460 137C 0004 0001             		move.b	#4,1(a1)
0001B466 137C 0010 0019             		move.b	#$10,$19(a1)
0001B46C 137C 0010 0016             		move.b	#$10,$16(a1)
0001B472 137C 0003 0018             		move.b	#3,$18(a1)
0001B478 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B47C 337C 0582 000C             		move.w	#$582,$C(a1)
0001B482 3344 0028                  		move.w	d4,$28(a1)
0001B486 0644 0101                  		addi.w	#$101,d4
0001B48A 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B48E 5429 0024                  		addq.b	#2,$24(a1)
0001B492 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B496                            
0001B496                            Obj76_ExitLoop:
0001B496 4E75                       		rts	
0001B498                            ; ===========================================================================
0001B498                            
0001B498                            Obj76_Action:				; XREF: Obj76_Index
0001B498 1028 0029                  		move.b	$29(a0),d0
0001B49C B028 0028                  		cmp.b	$28(a0),d0
0001B4A0 6700                       		beq.s	Obj76_Solid
0001B4A2 4A00                       		tst.b	d0
0001B4A4 6B00                       		bmi.s	loc_19718
0001B4A6                            
0001B4A6                            loc_19712:
0001B4A6 6100 0000                  		bsr.w	Obj76_Break
0001B4AA 6000                       		bra.s	Obj76_Display
0001B4AC                            ; ===========================================================================
0001B4AC                            
0001B4AC                            loc_19718:
0001B4AC 2268 0034                  		movea.l	$34(a0),a1
0001B4B0 4A29 0021                  		tst.b	$21(a1)
0001B4B4 67F0                       		beq.s	loc_19712
0001B4B6 3169 0008 0008             		move.w	8(a1),8(a0)
0001B4BC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B4C2 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B4C8 B2C8                       		cmpa.w	a0,a1
0001B4CA 6500                       		bcs.s	Obj76_Display
0001B4CC 3029 0012                  		move.w	$12(a1),d0
0001B4D0 48C0                       		ext.l	d0
0001B4D2 E080                       		asr.l	#8,d0
0001B4D4 D168 000C                  		add.w	d0,$C(a0)
0001B4D8 6000                       		bra.s	Obj76_Display
0001B4DA                            ; ===========================================================================
0001B4DA                            
0001B4DA                            Obj76_Solid:				; XREF: Obj76_Action
0001B4DA 323C 001B                  		move.w	#$1B,d1
0001B4DE 343C 0010                  		move.w	#$10,d2
0001B4E2 363C 0011                  		move.w	#$11,d3
0001B4E6 3828 0008                  		move.w	8(a0),d4
0001B4EA 4EB9 0001 114C             		jsr	SolidObject
0001B4F0                            
0001B4F0                            Obj76_Display:				; XREF: Obj76_Action
0001B4F0 4EF9 0000 E7DE             		jmp	DisplaySprite
0001B4F6                            ; ===========================================================================
0001B4F6                            
0001B4F6                            loc_19762:				; XREF: Obj76_Index
0001B4F6 4A28 0001                  		tst.b	1(a0)
0001B4FA 6A00                       		bpl.s	Obj76_Delete
0001B4FC 4EB9 0000 E7A4             		jsr	ObjectFall
0001B502 4EF9 0000 E7DE             		jmp	DisplaySprite
0001B508                            ; ===========================================================================
0001B508                            
0001B508                            Obj76_Delete:
0001B508 4EF9 0000 E82E             		jmp	DeleteObject
0001B50E                            
0001B50E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B50E                            
0001B50E                            
0001B50E                            Obj76_Break:				; XREF: Obj76_Action
0001B50E 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B512 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B516 7801                       		moveq	#1,d4
0001B518 7203                       		moveq	#3,d1
0001B51A 7438                       		moveq	#$38,d2
0001B51C 5428 0024                  		addq.b	#2,$24(a0)
0001B520 117C 0008 0019             		move.b	#8,$19(a0)
0001B526 117C 0008 0016             		move.b	#8,$16(a0)
0001B52C 43D0                       		lea	(a0),a1
0001B52E 6000                       		bra.s	Obj76_MakeFrag
0001B530                            ; ===========================================================================
0001B530                            
0001B530                            Obj76_LoopFrag:
0001B530 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001B536 6600                       		bne.s	loc_197D4
0001B538                            
0001B538                            Obj76_MakeFrag:
0001B538 45D0                       		lea	(a0),a2
0001B53A 47D1                       		lea	(a1),a3
0001B53C 7603                       		moveq	#3,d3
0001B53E                            
0001B53E                            loc_197AA:
0001B53E 26DA                       		move.l	(a2)+,(a3)+
0001B540 26DA                       		move.l	(a2)+,(a3)+
0001B542 26DA                       		move.l	(a2)+,(a3)+
0001B544 26DA                       		move.l	(a2)+,(a3)+
0001B546 51CB FFF6                  		dbf	d3,loc_197AA
0001B54A                            
0001B54A 335C 0010                  		move.w	(a4)+,$10(a1)
0001B54E 335C 0012                  		move.w	(a4)+,$12(a1)
0001B552 361D                       		move.w	(a5)+,d3
0001B554 D769 0008                  		add.w	d3,8(a1)
0001B558 361D                       		move.w	(a5)+,d3
0001B55A D769 000C                  		add.w	d3,$C(a1)
0001B55E 1344 001A                  		move.b	d4,$1A(a1)
0001B562 5244                       		addq.w	#1,d4
0001B564 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B568                            
0001B568                            loc_197D4:
0001B568 303C 00CB                  		move.w	#$CB,d0
0001B56C 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B572                            ; End of function Obj76_Break
0001B572                            
0001B572                            ; ===========================================================================
0001B572 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B576 0180 FE00                  		dc.w $180, $FE00
0001B57A FF00 FF00                  		dc.w $FF00, $FF00
0001B57E 0100 FF00                  		dc.w $100, $FF00
0001B582 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B586 0010 0000                  		dc.w $10, 0
0001B58A 0000 0010                  		dc.w 0,	$10
0001B58E 0010 0010                  		dc.w $10, $10
0001B592                            ; ---------------------------------------------------------------------------
0001B592                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B592                            ; ---------------------------------------------------------------------------
0001B592                            Map_obj76:
0001B592                            	include "_maps\obj76.asm"
0001B592                            ; ---------------------------------------------------------------------------
0001B592                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B592                            ; ---------------------------------------------------------------------------
0001B592 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B596 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B59A 0000                       		dc.w byte_19826-Map_obj76
0001B59C 02                         byte_19808:	dc.b 2
0001B59D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B5A2 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B5A7 00                         		dc.b 0
0001B5A8 01                         byte_19814:	dc.b 1
0001B5A9 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B5AE 01                         byte_1981A:	dc.b 1
0001B5AF F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B5B4 01                         byte_19820:	dc.b 1
0001B5B5 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B5BA 01                         byte_19826:	dc.b 1
0001B5BB F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B5C0                            		even
0001B5C0                            		even
0001B5C0                            
0001B5C0                            ; ===========================================================================
0001B5C0                            
0001B5C0                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B5C0 4EF9 0000 E82E             		jmp	DeleteObject
0001B5C6                            ; ===========================================================================
0001B5C6                            ; ---------------------------------------------------------------------------
0001B5C6                            ; Object 82 - Eggman (SBZ2)
0001B5C6                            ; ---------------------------------------------------------------------------
0001B5C6                            
0001B5C6                            Obj82:					; XREF: Obj_Index
0001B5C6 7000                       		moveq	#0,d0
0001B5C8 1028 0024                  		move.b	$24(a0),d0
0001B5CC 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B5D0 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B5D4                            ; ===========================================================================
0001B5D4 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B5D6 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B5D8 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B5DA                            
0001B5DA 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B5DD 0400 03                    		dc.b 4,	0, 3
0001B5E0                            ; ===========================================================================
0001B5E0                            
0001B5E0                            Obj82_Main:				; XREF: Obj82_Index
0001B5E0 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B5E4 317C 2160 0008             		move.w	#$2160,8(a0)
0001B5EA 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B5F0 117C 000F 0020             		move.b	#$F,$20(a0)
0001B5F6 117C 0010 0021             		move.b	#$10,$21(a0)
0001B5FC 08A8 0000 0022             		bclr	#0,$22(a0)
0001B602 4228 0025                  		clr.b	$25(a0)
0001B606 115A 0024                  		move.b	(a2)+,$24(a0)
0001B60A 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B60E 115A 0018                  		move.b	(a2)+,$18(a0)
0001B612 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B61A 317C 0400 0002             		move.w	#$400,2(a0)
0001B620 117C 0004 0001             		move.b	#4,1(a0)
0001B626 08E8 0007 0001             		bset	#7,1(a0)
0001B62C 117C 0020 0019             		move.b	#$20,$19(a0)
0001B632 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001B638 6600                       		bne.s	Obj82_Eggman
0001B63A 2348 0034                  		move.l	a0,$34(a1)
0001B63E 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B642 337C 2130 0008             		move.w	#$2130,8(a1)
0001B648 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B64E 4228 0025                  		clr.b	$25(a0)
0001B652 135A 0024                  		move.b	(a2)+,$24(a1)
0001B656 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B65A 135A 0018                  		move.b	(a2)+,$18(a1)
0001B65E 237C 0000 D048 0004        		move.l	#Map_obj32,4(a1)
0001B666 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B66C 137C 0004 0001             		move.b	#4,1(a1)
0001B672 08E9 0007 0001             		bset	#7,1(a1)
0001B678 137C 0010 0019             		move.b	#$10,$19(a1)
0001B67E 137C 0000 001A             		move.b	#0,$1A(a1)
0001B684                            
0001B684                            Obj82_Eggman:				; XREF: Obj82_Index
0001B684 7000                       		moveq	#0,d0
0001B686 1028 0025                  		move.b	$25(a0),d0
0001B68A 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B68E 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B692 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B696 4EB9 0000 B83E             		jsr	AnimateSprite
0001B69C 4EF9 0000 E7DE             		jmp	DisplaySprite
0001B6A2                            ; ===========================================================================
0001B6A2 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B6A4 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B6A6 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B6A8 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B6AA                            ; ===========================================================================
0001B6AA                            
0001B6AA                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B6AA 3028 0008                  		move.w	8(a0),d0
0001B6AE 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B6B2 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B6B6 6400                       		bcc.s	loc_19934	; if not, branch
0001B6B8 5428 0025                  		addq.b	#2,$25(a0)
0001B6BC 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B6C2 117C 0001 001C             		move.b	#1,$1C(a0)
0001B6C8                            
0001B6C8                            loc_19934:				; XREF: Obj82_EggIndex
0001B6C8 4EF9 0000 E7C4             		jmp	SpeedToPos
0001B6CE                            ; ===========================================================================
0001B6CE                            
0001B6CE                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B6CE 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B6D2 6600                       		bne.s	loc_19954	; if time remains, branch
0001B6D4 5428 0025                  		addq.b	#2,$25(a0)
0001B6D8 117C 0002 001C             		move.b	#2,$1C(a0)
0001B6DE 5868 000C                  		addq.w	#4,$C(a0)
0001B6E2 317C 000F 003C             		move.w	#15,$3C(a0)
0001B6E8                            
0001B6E8                            loc_19954:
0001B6E8 60DE                       		bra.s	loc_19934
0001B6EA                            ; ===========================================================================
0001B6EA                            
0001B6EA                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B6EA 5368 003C                  		subq.w	#1,$3C(a0)
0001B6EE 6E00                       		bgt.s	loc_199D0
0001B6F0 6600                       		bne.s	loc_1996A
0001B6F2 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B6F8 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B6FE                            
0001B6FE                            loc_1996A:
0001B6FE 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B704 6E00                       		bgt.s	loc_19976
0001B706 4268 0010                  		clr.w	$10(a0)
0001B70A                            
0001B70A                            loc_19976:
0001B70A 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B710 4A68 0012                  		tst.w	$12(a0)
0001B714 6B00                       		bmi.s	Obj82_FindBlocks
0001B716 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B71C 6500                       		bcs.s	Obj82_FindBlocks
0001B71E 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B724 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001B72A 6500                       		bcs.s	Obj82_FindBlocks
0001B72C 317C 059B 000C             		move.w	#$59B,$C(a0)
0001B732 4268 0012                  		clr.w	$12(a0)
0001B736                            
0001B736                            Obj82_FindBlocks:
0001B736 3028 0010                  		move.w	$10(a0),d0
0001B73A 8068 0012                  		or.w	$12(a0),d0
0001B73E 6600                       		bne.s	loc_199D0
0001B740 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001B744 703E                       		moveq	#$3E,d0
0001B746 7240                       		moveq	#$40,d1
0001B748                            
0001B748                            Obj82_FindLoop:	
0001B748 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001B74A 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001B74E 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001B752                            
0001B752 6600                       		bne.s	loc_199D0
0001B754 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001B75A 5428 0025                  		addq.b	#2,$25(a0)
0001B75E 117C 0001 001C             		move.b	#1,$1C(a0)
0001B764                            
0001B764                            loc_199D0:
0001B764 6000 FF62                  		bra.w	loc_19934
0001B768                            ; ===========================================================================
0001B768                            
0001B768                            Obj82_Switch:				; XREF: Obj82_Index
0001B768 7000                       		moveq	#0,d0
0001B76A 1028 0025                  		move.b	$25(a0),d0
0001B76E 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001B772 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001B776                            ; ===========================================================================
0001B776 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001B778 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001B77A                            ; ===========================================================================
0001B77A                            
0001B77A                            loc_199E6:				; XREF: Obj82_SwIndex
0001B77A 2268 0034                  		movea.l	$34(a0),a1
0001B77E 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001B784 6600                       		bne.s	Obj82_SwDisplay
0001B786 117C 0001 001A             		move.b	#1,$1A(a0)
0001B78C 5428 0025                  		addq.b	#2,$25(a0)
0001B790                            
0001B790                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001B790 4EF9 0000 E7DE             		jmp	DisplaySprite
0001B796                            ; ===========================================================================
0001B796                            Ani_obj82:
0001B796                            	include "_anim\obj82.asm"
0001B796                            ; ---------------------------------------------------------------------------
0001B796                            ; Animation script - Eggman (SBZ2)
0001B796                            ; ---------------------------------------------------------------------------
0001B796 0000                       		dc.w byte_19A10-Ani_obj82
0001B798 0000                       		dc.w byte_19A14-Ani_obj82
0001B79A 0000                       		dc.w byte_19A18-Ani_obj82
0001B79C 0000                       		dc.w byte_19A20-Ani_obj82
0001B79E 0000                       		dc.w byte_19A24-Ani_obj82
0001B7A0 0000                       		dc.w byte_19A2A-Ani_obj82
0001B7A2 0000                       		dc.w byte_19A30-Ani_obj82
0001B7A4 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001B7A8 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001B7AC 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001B7B4 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001B7B8 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001B7BE 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001B7C4 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001B7C8                            		even
0001B7C8                            		even
0001B7C8                            
0001B7C8                            ; ---------------------------------------------------------------------------
0001B7C8                            ; Sprite mappings - Eggman (SBZ2)
0001B7C8                            ; ---------------------------------------------------------------------------
0001B7C8                            Map_obj82:
0001B7C8                            	include "_maps\obj82.asm"
0001B7C8                            ; ---------------------------------------------------------------------------
0001B7C8                            ; Sprite mappings - Eggman (SBZ2)
0001B7C8                            ; ---------------------------------------------------------------------------
0001B7C8 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001B7CC 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001B7D0 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001B7D4 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001B7D8 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001B7DC 0000                       		dc.w byte_19B4F-Map_obj82
0001B7DE 03                         byte_19A4A:	dc.b 3
0001B7DF FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B7E4 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B7E9 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B7EE 04                         byte_19A5A:	dc.b 4
0001B7EF E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001B7F4 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B7F9 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B7FE FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B803 00                         		dc.b 0
0001B804 04                         byte_19A70:	dc.b 4
0001B805 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001B80A E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001B80F 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001B814 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001B819 00                         		dc.b 0
0001B81A 04                         byte_19A86:	dc.b 4
0001B81B F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001B820 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001B825 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001B82A EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001B82F 00                         		dc.b 0
0001B830 04                         byte_19A9C:	dc.b 4
0001B831 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B836 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B83B 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001B840 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B845 00                         		dc.b 0
0001B846 04                         byte_19AB2:	dc.b 4
0001B847 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B84C E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B851 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B856 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B85B 00                         		dc.b 0
0001B85C 07                         byte_19AC8:	dc.b 7
0001B85D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B862 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B867 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B86C 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B871 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B876 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001B87B F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001B880 05                         byte_19AEC:	dc.b 5
0001B881 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B886 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B88B 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B890 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B895 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B89A 06                         byte_19B06:	dc.b 6
0001B89B EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001B8A0 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001B8A5 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001B8AA 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001B8AF 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001B8B4 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001B8B9 00                         		dc.b 0
0001B8BA 08                         byte_19B26:	dc.b 8
0001B8BB E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B8C0 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B8C5 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B8CA 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B8CF E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001B8D4 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001B8D9 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001B8DE 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001B8E3 03                         byte_19B4F:	dc.b 3
0001B8E4 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001B8E9 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001B8EE EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001B8F4 00                         		even
0001B8F4 00                         		even
0001B8F4                            
0001B8F4                            ; ===========================================================================
0001B8F4                            ; ---------------------------------------------------------------------------
0001B8F4                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001B8F4                            ; ---------------------------------------------------------------------------
0001B8F4                            
0001B8F4                            Obj83:					; XREF: Obj_Index
0001B8F4 7000                       		moveq	#0,d0
0001B8F6 1028 0024                  		move.b	$24(a0),d0
0001B8FA 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001B8FE 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001B902                            ; ===========================================================================
0001B902 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001B904 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001B906 0000                       		dc.w loc_19C36-Obj83_Index
0001B908 0000                       		dc.w loc_19C62-Obj83_Index
0001B90A 0000                       		dc.w loc_19C72-Obj83_Index
0001B90C 0000                       		dc.w loc_19C80-Obj83_Index
0001B90E                            ; ===========================================================================
0001B90E                            
0001B90E                            Obj83_Main:				; XREF: Obj83_Index
0001B90E 317C 2080 0008             		move.w	#$2080,8(a0)
0001B914 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001B91A 117C 0080 0019             		move.b	#$80,$19(a0)
0001B920 117C 0010 0016             		move.b	#$10,$16(a0)
0001B926 117C 0004 0001             		move.b	#4,1(a0)
0001B92C 08E8 0007 0001             		bset	#7,1(a0)
0001B932 7800                       		moveq	#0,d4
0001B934 3A3C 2010                  		move.w	#$2010,d5
0001B938 7C07                       		moveq	#7,d6
0001B93A 45E8 0030                  		lea	$30(a0),a2
0001B93E                            
0001B93E                            Obj83_MakeBlock:
0001B93E 4EB9 0000 EF34             		jsr	SingleObjLoad
0001B944 6600                       		bne.s	Obj83_ExitMake
0001B946 34C9                       		move.w	a1,(a2)+
0001B948 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001B94C 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001B954 337C 4518 0002             		move.w	#$4518,2(a1)
0001B95A 137C 0004 0001             		move.b	#4,1(a1)
0001B960 137C 0010 0019             		move.b	#$10,$19(a1)
0001B966 137C 0010 0016             		move.b	#$10,$16(a1)
0001B96C 137C 0003 0018             		move.b	#3,$18(a1)
0001B972 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001B976 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001B97C 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001B980 137C 0008 0024             		move.b	#8,$24(a1)
0001B986 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001B98A                            
0001B98A                            Obj83_ExitMake:
0001B98A 5428 0024                  		addq.b	#2,$24(a0)
0001B98E 4E75                       		rts	
0001B990                            ; ===========================================================================
0001B990                            
0001B990                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001B990 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B996 6600                       		bne.s	Obj83_Solid	; if not, branch
0001B998 4228 001A                  		clr.b	$1A(a0)
0001B99C 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001B9A0                            
0001B9A0                            Obj83_Solid:
0001B9A0 7000                       		moveq	#0,d0
0001B9A2 1028 001A                  		move.b	$1A(a0),d0
0001B9A6 4400                       		neg.b	d0
0001B9A8 4880                       		ext.w	d0
0001B9AA 5040                       		addq.w	#8,d0
0001B9AC E940                       		asl.w	#4,d0
0001B9AE 383C 2100                  		move.w	#$2100,d4
0001B9B2 9840                       		sub.w	d0,d4
0001B9B4 1140 0019                  		move.b	d0,$19(a0)
0001B9B8 3144 0008                  		move.w	d4,8(a0)
0001B9BC 720B                       		moveq	#$B,d1
0001B9BE D240                       		add.w	d0,d1
0001B9C0 7410                       		moveq	#$10,d2
0001B9C2 7611                       		moveq	#$11,d3
0001B9C4 4EF9 0001 114C             		jmp	SolidObject
0001B9CA                            ; ===========================================================================
0001B9CA                            
0001B9CA                            loc_19C36:				; XREF: Obj83_Index
0001B9CA 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001B9D0 6400                       		bcc.s	Obj83_Solid2
0001B9D2 70FF                       		moveq	#-1,d0
0001B9D4 1028 001A                  		move.b	$1A(a0),d0
0001B9D8 4880                       		ext.w	d0
0001B9DA D040                       		add.w	d0,d0
0001B9DC 3030 0030                  		move.w	$30(a0,d0.w),d0
0001B9E0 2240                       		movea.l	d0,a1
0001B9E2 337C 474F 0028             		move.w	#$474F,$28(a1)
0001B9E8 5228 001A                  		addq.b	#1,$1A(a0)
0001B9EC 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001B9F2 6700                       		beq.s	loc_19C62
0001B9F4                            
0001B9F4                            Obj83_Solid2:
0001B9F4 60AA                       		bra.s	Obj83_Solid
0001B9F6                            ; ===========================================================================
0001B9F6                            
0001B9F6                            loc_19C62:				; XREF: Obj83_Index
0001B9F6 08A8 0003 0022             		bclr	#3,$22(a0)
0001B9FC 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BA02 6000 FBBC                  		bra.w	loc_1982C
0001BA06                            ; ===========================================================================
0001BA06                            
0001BA06                            loc_19C72:				; XREF: Obj83_Index
0001BA06 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BA0C 6700                       		beq.s	Obj83_Break	; if yes, branch
0001BA0E 4EF9 0000 E7DE             		jmp	DisplaySprite
0001BA14                            ; ===========================================================================
0001BA14                            
0001BA14                            loc_19C80:				; XREF: Obj83_Index
0001BA14 4A28 0001                  		tst.b	1(a0)
0001BA18 6A00 FBA6                  		bpl.w	loc_1982C
0001BA1C 4EB9 0000 E7A4             		jsr	ObjectFall
0001BA22 4EF9 0000 E7DE             		jmp	DisplaySprite
0001BA28                            ; ===========================================================================
0001BA28                            
0001BA28                            Obj83_Break:				; XREF: loc_19C72
0001BA28 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001BA2C 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001BA30 7801                       		moveq	#1,d4
0001BA32 7203                       		moveq	#3,d1
0001BA34 7438                       		moveq	#$38,d2
0001BA36 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001BA3C 31FC 0200 F5D0             		move.w	#$200,(SonimeSST+sonime_facetimer).w
0001BA42 5428 0024                  		addq.b	#2,$24(a0)
0001BA46 117C 0008 0019             		move.b	#8,$19(a0)
0001BA4C 117C 0008 0016             		move.b	#8,$16(a0)
0001BA52 43D0                       		lea	(a0),a1
0001BA54 6000                       		bra.s	Obj83_MakeFrag
0001BA56                            ; ===========================================================================
0001BA56                            
0001BA56                            Obj83_LoopFrag:
0001BA56 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001BA5C 6600                       		bne.s	Obj83_BreakSnd
0001BA5E                            
0001BA5E                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001BA5E 45D0                       		lea	(a0),a2
0001BA60 47D1                       		lea	(a1),a3
0001BA62 7603                       		moveq	#3,d3
0001BA64                            
0001BA64                            loc_19CC4:
0001BA64 26DA                       		move.l	(a2)+,(a3)+
0001BA66 26DA                       		move.l	(a2)+,(a3)+
0001BA68 26DA                       		move.l	(a2)+,(a3)+
0001BA6A 26DA                       		move.l	(a2)+,(a3)+
0001BA6C 51CB FFF6                  		dbf	d3,loc_19CC4
0001BA70                            
0001BA70 335C 0012                  		move.w	(a4)+,$12(a1)
0001BA74 361D                       		move.w	(a5)+,d3
0001BA76 D769 0008                  		add.w	d3,8(a1)
0001BA7A 361D                       		move.w	(a5)+,d3
0001BA7C D769 000C                  		add.w	d3,$C(a1)
0001BA80 1344 001A                  		move.b	d4,$1A(a1)
0001BA84 5244                       		addq.w	#1,d4
0001BA86 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001BA8A                            
0001BA8A                            Obj83_BreakSnd:
0001BA8A 303C 00CB                  		move.w	#$CB,d0
0001BA8E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play smashing sound
0001BA94 4EF9 0000 E7DE             		jmp	DisplaySprite
0001BA9A                            ; ===========================================================================
0001BA9A 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001BA9E 0120 00C0                  		dc.w $120, $C0
0001BAA2 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001BAA6 0010 0000                  		dc.w $10, 0
0001BAAA 0000 0010                  		dc.w 0,	$10
0001BAAE 0010 0010                  		dc.w $10, $10
0001BAB2                            ; ---------------------------------------------------------------------------
0001BAB2                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BAB2                            ; ---------------------------------------------------------------------------
0001BAB2                            Map_obj83:
0001BAB2                            	include "_maps\obj83.asm"
0001BAB2                            ; ---------------------------------------------------------------------------
0001BAB2                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BAB2                            ; ---------------------------------------------------------------------------
0001BAB2 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001BAB6 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001BABA 0000                       		dc.w byte_19D46-Map_obj83
0001BABC 01                         byte_19D1C:	dc.b 1
0001BABD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BAC2 02                         byte_19D22:	dc.b 2
0001BAC3 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001BAC8 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001BACD 00                         		dc.b 0
0001BACE 02                         byte_19D2E:	dc.b 2
0001BACF F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BAD4 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001BAD9 00                         		dc.b 0
0001BADA 02                         byte_19D3A:	dc.b 2
0001BADB F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001BAE0 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001BAE5 00                         		dc.b 0
0001BAE6 02                         byte_19D46:	dc.b 2
0001BAE7 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001BAEC F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001BAF2 00                         		even
0001BAF2 00                         		even
0001BAF2                            
0001BAF2                            ; ===========================================================================
0001BAF2                            ; ---------------------------------------------------------------------------
0001BAF2                            ; Object 85 - Eggman (FZ)
0001BAF2                            ; ---------------------------------------------------------------------------
0001BAF2                            
0001BAF2                            Obj85_Delete:
0001BAF2 4EF9 0000 E82E             		jmp	DeleteObject
0001BAF8                            ; ===========================================================================
0001BAF8                            
0001BAF8                            Obj85:					; XREF: Obj_Index
0001BAF8 7000                       		moveq	#0,d0
0001BAFA 1028 0024                  		move.b	$24(a0),d0
0001BAFE 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001BB02 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001BB06                            ; ===========================================================================
0001BB06 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001BB08 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001BB0A 0000                       		dc.w loc_1A38E-Obj85_Index
0001BB0C 0000                       		dc.w loc_1A346-Obj85_Index
0001BB0E 0000                       		dc.w loc_1A2C6-Obj85_Index
0001BB10 0000                       		dc.w loc_1A3AC-Obj85_Index
0001BB12 0000                       		dc.w loc_1A264-Obj85_Index
0001BB14                            
0001BB14 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001BB1A 0001 B7C8                  		dc.l Map_obj82		; mappings pointer
0001BB1E 25B0 0590 0300             		dc.w $25B0, $590, $300
0001BB24 0000 0000                  		dc.l Map_obj84
0001BB28 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001BB2E 0000 0000                  		dc.l Map_FZBoss
0001BB32 26E0 0596 0470             		dc.w $26E0, $596, $470
0001BB38 0001 B7C8                  		dc.l Map_obj82
0001BB3C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BB42 0001 9AA6                  		dc.l Map_Eggman
0001BB46 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BB4C 0001 9AA6                  		dc.l Map_Eggman
0001BB50                            
0001BB50 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001BB55 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001BB5A 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001BB5F 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001BB64 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001BB69 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001BB6E                            ; ===========================================================================
0001BB6E                            
0001BB6E                            Obj85_Main:				; XREF: Obj85_Index
0001BB6E 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001BB72 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001BB76 2248                       		movea.l	a0,a1
0001BB78 7205                       		moveq	#5,d1
0001BB7A 6000                       		bra.s	Obj85_LoadBoss
0001BB7C                            ; ===========================================================================
0001BB7C                            
0001BB7C                            Obj85_Loop:
0001BB7C 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001BB82 6600                       		bne.s	loc_19E20
0001BB84                            
0001BB84                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001BB84 12BC 0085                  		move.b	#$85,(a1)
0001BB88 335A 0008                  		move.w	(a2)+,8(a1)
0001BB8C 335A 000C                  		move.w	(a2)+,$C(a1)
0001BB90 335A 0002                  		move.w	(a2)+,2(a1)
0001BB94 235A 0004                  		move.l	(a2)+,4(a1)
0001BB98 135B 0024                  		move.b	(a3)+,$24(a1)
0001BB9C 135B 001C                  		move.b	(a3)+,$1C(a1)
0001BBA0 135B 0018                  		move.b	(a3)+,$18(a1)
0001BBA4 135B 0017                  		move.b	(a3)+,$17(a1)
0001BBA8 135B 0016                  		move.b	(a3)+,$16(a1)
0001BBAC 137C 0004 0001             		move.b	#4,1(a1)
0001BBB2 08E8 0007 0001             		bset	#7,1(a0)
0001BBB8 2348 0034                  		move.l	a0,$34(a1)
0001BBBC 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001BBC0                            
0001BBC0                            loc_19E20:
0001BBC0 45E8 0036                  		lea	$36(a0),a2
0001BBC4 4EB9 0000 EF34             		jsr	SingleObjLoad
0001BBCA 6600                       		bne.s	loc_19E5A
0001BBCC 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001BBD0 3489                       		move.w	a1,(a2)
0001BBD2 2348 0034                  		move.l	a0,$34(a1)
0001BBD6 45E8 0038                  		lea	$38(a0),a2
0001BBDA 7400                       		moveq	#0,d2
0001BBDC 7203                       		moveq	#3,d1
0001BBDE                            
0001BBDE                            loc_19E3E:
0001BBDE 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001BBE4 6600                       		bne.s	loc_19E5A
0001BBE6 34C9                       		move.w	a1,(a2)+
0001BBE8 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001BBEC 2348 0034                  		move.l	a0,$34(a1)
0001BBF0 1342 0028                  		move.b	d2,$28(a1)
0001BBF4 5442                       		addq.w	#2,d2
0001BBF6 51C9 FFE6                  		dbf	d1,loc_19E3E
0001BBFA                            
0001BBFA                            loc_19E5A:
0001BBFA 317C 0000 0034             		move.w	#0,$34(a0)
0001BC00 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001BC06 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BC0C                            
0001BC0C                            Obj85_Eggman:				; XREF: Obj85_Index
0001BC0C 7000                       		moveq	#0,d0
0001BC0E 1028 0034                  		move.b	$34(a0),d0
0001BC12 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001BC16 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001BC1A 4EF9 0000 E7DE             		jmp	DisplaySprite
0001BC20                            ; ===========================================================================
0001BC20 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001BC24 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001BC28 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001BC2C 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001BC30                            ; ===========================================================================
0001BC30                            
0001BC30                            loc_19E90:				; XREF: off_19E80
0001BC30 4AB8 F680                  		tst.l	($FFFFF680).w
0001BC34 6600                       		bne.s	loc_19EA2
0001BC36 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001BC3C 6500                       		bcs.s	loc_19EA2
0001BC3E 5428 0034                  		addq.b	#2,$34(a0)
0001BC42                            
0001BC42                            loc_19EA2:
0001BC42 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001BC46 4E75                       		rts	
0001BC48                            ; ===========================================================================
0001BC48                            
0001BC48                            loc_19EA8:				; XREF: off_19E80
0001BC48 4A68 0030                  		tst.w	$30(a0)
0001BC4C 6A00                       		bpl.s	loc_19F10
0001BC4E 4268 0030                  		clr.w	$30(a0)
0001BC52 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001BC58 0240 000C                  		andi.w	#$C,d0
0001BC5C 3200                       		move.w	d0,d1
0001BC5E 5441                       		addq.w	#2,d1
0001BC60 4A80                       		tst.l	d0
0001BC62 6A00                       		bpl.s	loc_19EC6
0001BC64 C141                       		exg	d1,d0
0001BC66                            
0001BC66                            loc_19EC6:
0001BC66 43FA 0000                  		lea	word_19FD6(pc),a1
0001BC6A 3031 0000                  		move.w	(a1,d0.w),d0
0001BC6E 3231 1000                  		move.w	(a1,d1.w),d1
0001BC72 3140 0030                  		move.w	d0,$30(a0)
0001BC76 74FF                       		moveq	#-1,d2
0001BC78 3430 0038                  		move.w	$38(a0,d0.w),d2
0001BC7C 2242                       		movea.l	d2,a1
0001BC7E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BC84 337C FFFF 0030             		move.w	#-1,$30(a1)
0001BC8A 3430 1038                  		move.w	$38(a0,d1.w),d2
0001BC8E 2242                       		movea.l	d2,a1
0001BC90 137C 0001 0029             		move.b	#1,$29(a1)
0001BC96 337C 0000 0030             		move.w	#0,$30(a1)
0001BC9C 317C 0001 0032             		move.w	#1,$32(a0)
0001BCA2 4228 0035                  		clr.b	$35(a0)
0001BCA6 303C 00B7                  		move.w	#$B7,d0
0001BCAA 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001BCB0                            
0001BCB0                            loc_19F10:
0001BCB0 4A68 0032                  		tst.w	$32(a0)
0001BCB4 6B00 0000                  		bmi.w	loc_19FA6
0001BCB8 08A8 0000 0022             		bclr	#0,$22(a0)
0001BCBE 3038 D008                  		move.w	($FFFFD008).w,d0
0001BCC2 9068 0008                  		sub.w	8(a0),d0
0001BCC6 6500                       		bcs.s	loc_19F2E
0001BCC8 08E8 0000 0022             		bset	#0,$22(a0)
0001BCCE                            
0001BCCE                            loc_19F2E:
0001BCCE 323C 002B                  		move.w	#$2B,d1
0001BCD2 343C 0014                  		move.w	#$14,d2
0001BCD6 363C 0014                  		move.w	#$14,d3
0001BCDA 3828 0008                  		move.w	8(a0),d4
0001BCDE 4EB9 0001 114C             		jsr	SolidObject
0001BCE4 4A44                       		tst.w	d4
0001BCE6 6E00                       		bgt.s	loc_19F50
0001BCE8                            
0001BCE8                            loc_19F48:
0001BCE8 4A28 0035                  		tst.b	$35(a0)
0001BCEC 6600                       		bne.s	loc_19F88
0001BCEE 6000                       		bra.s	loc_19F96
0001BCF0                            ; ===========================================================================
0001BCF0                            
0001BCF0                            loc_19F50:
0001BCF0 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001BCF4 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001BCFA 66EC                       		bne.s	loc_19F48
0001BCFC 303C 0300                  		move.w	#$300,d0
0001BD00 0828 0000 0022             		btst	#0,$22(a0)
0001BD06 6600                       		bne.s	loc_19F6A
0001BD08 4440                       		neg.w	d0
0001BD0A                            
0001BD0A                            loc_19F6A:
0001BD0A 31C0 D010                  		move.w	d0,($FFFFD010).w
0001BD0E 4A28 0035                  		tst.b	$35(a0)
0001BD12 6600                       		bne.s	loc_19F88
0001BD14 4A28 0021                  		tst.b	$21(a0)	;has the boss been defeated?
0001BD18 6700                       		beq.s	loc_19F9C	;if so, don't let it be hit again.		
0001BD1A 5328 0021                  		subq.b	#1,$21(a0)
0001BD1E 117C 00FF 0035             		move.b	#255,$35(a0)
0001BD24 303C 00AC                  		move.w	#$AC,d0
0001BD28 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BD2E                            
0001BD2E                            loc_19F88:
0001BD2E 5328 0035                  		subq.b	#1,$35(a0)
0001BD32 6700                       		beq.s	loc_19F96
0001BD34 117C 0003 001C             		move.b	#3,$1C(a0)
0001BD3A 6000                       		bra.s	loc_19F9C
0001BD3C                            ; ===========================================================================
0001BD3C                            
0001BD3C                            loc_19F96:
0001BD3C 117C 0001 001C             		move.b	#1,$1C(a0)
0001BD42                            
0001BD42                            loc_19F9C:
0001BD42 43FA FA52                  		lea	Ani_obj82(pc),a1
0001BD46 4EF9 0000 B83E             		jmp	AnimateSprite
0001BD4C                            ; ===========================================================================
0001BD4C                            
0001BD4C                            loc_19FA6:
0001BD4C 4A28 0021                  		tst.b	$21(a0)
0001BD50 6700                       		beq.s	loc_19FBC
0001BD52 5428 0034                  		addq.b	#2,$34(a0)
0001BD56 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BD5C 4268 0032                  		clr.w	$32(a0)
0001BD60 4E75                       		rts	
0001BD62                            ; ===========================================================================
0001BD62                            
0001BD62                            loc_19FBC:
0001BD62 117C 0006 0034             		move.b	#6,$34(a0)
0001BD68 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001BD6E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001BD74 117C 0014 0016             		move.b	#$14,$16(a0)
0001BD7A 4E75                       		rts	
0001BD7C                            ; ===========================================================================
0001BD7C 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001BD8C                            ; ===========================================================================
0001BD8C                            
0001BD8C                            loc_19FE6:				; XREF: off_19E80
0001BD8C 70FF                       		moveq	#-1,d0
0001BD8E 3028 0036                  		move.w	$36(a0),d0
0001BD92 2240                       		movea.l	d0,a1
0001BD94 4A68 0030                  		tst.w	$30(a0)
0001BD98 6A00                       		bpl.s	loc_1A000
0001BD9A 4268 0030                  		clr.w	$30(a0)
0001BD9E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BDA4 6100                       		bsr.s	loc_1A020
0001BDA6                            
0001BDA6                            loc_1A000:
0001BDA6 700F                       		moveq	#$F,d0
0001BDA8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001BDAC 6600                       		bne.s	loc_1A00A
0001BDAE 6100                       		bsr.s	loc_1A020
0001BDB0                            
0001BDB0                            loc_1A00A:
0001BDB0 4A68 0032                  		tst.w	$32(a0)
0001BDB4 6700                       		beq.s	locret_1A01E
0001BDB6 5528 0034                  		subq.b	#2,$34(a0)
0001BDBA 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BDC0 4268 0032                  		clr.w	$32(a0)
0001BDC4                            
0001BDC4                            locret_1A01E:
0001BDC4 4E75                       		rts	
0001BDC6                            ; ===========================================================================
0001BDC6                            
0001BDC6                            loc_1A020:
0001BDC6 303C 00B1                  		move.w	#$B1,d0
0001BDCA 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play electricity sound
0001BDD0                            ; ===========================================================================
0001BDD0                            
0001BDD0                            loc_1A02A:				; XREF: off_19E80
0001BDD0 117C 0030 0017             		move.b	#$30,$17(a0)
0001BDD6 08E8 0000 0022             		bset	#0,$22(a0)
0001BDDC 4EB9 0000 E7C4             		jsr	SpeedToPos
0001BDE2 117C 0006 001A             		move.b	#6,$1A(a0)
0001BDE8 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BDEE 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001BDF4 6500                       		bcs.s	loc_1A070
0001BDF6 317C 059C 000C             		move.w	#$59C,$C(a0)
0001BDFC 5428 0034                  		addq.b	#2,$34(a0)
0001BE00 117C 0020 0017             		move.b	#$20,$17(a0)
0001BE06 317C 0100 0010             		move.w	#$100,$10(a0)
0001BE0C 317C FF00 0012             		move.w	#-$100,$12(a0)
0001BE12 5438 F742                  		addq.b	#2,($FFFFF742).w
0001BE16                            
0001BE16                            loc_1A070:
0001BE16 6000 0000                  		bra.w	loc_1A166
0001BE1A                            ; ===========================================================================
0001BE1A                            
0001BE1A                            loc_1A074:				; XREF: off_19E80
0001BE1A 08E8 0000 0022             		bset	#0,$22(a0)
0001BE20 117C 0004 001C             		move.b	#4,$1C(a0)
0001BE26 4EB9 0000 E7C4             		jsr	SpeedToPos
0001BE2C 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BE32 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001BE38 6500                       		bcs.s	loc_1A09A
0001BE3A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001BE40                            
0001BE40                            loc_1A09A:
0001BE40 317C 0400 0010             		move.w	#$400,$10(a0)
0001BE46 3028 0008                  		move.w	8(a0),d0
0001BE4A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BE4E 6A00                       		bpl.s	loc_1A0B4
0001BE50 317C 0500 0010             		move.w	#$500,$10(a0)
0001BE56 6000 0000                  		bra.w	loc_1A0F2
0001BE5A                            ; ===========================================================================
0001BE5A                            
0001BE5A                            loc_1A0B4:
0001BE5A 0440 0070                  		subi.w	#$70,d0
0001BE5E 6500                       		bcs.s	loc_1A0F2
0001BE60 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BE66 5140                       		subq.w	#8,d0
0001BE68 6500                       		bcs.s	loc_1A0F2
0001BE6A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BE70 5140                       		subq.w	#8,d0
0001BE72 6500                       		bcs.s	loc_1A0F2
0001BE74 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BE7A 5140                       		subq.w	#8,d0
0001BE7C 6500                       		bcs.s	loc_1A0F2
0001BE7E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BE84 5140                       		subq.w	#8,d0
0001BE86 6500                       		bcs.s	loc_1A0F2
0001BE88 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BE8E 0440 0038                  		subi.w	#$38,d0
0001BE92 6500                       		bcs.s	loc_1A0F2
0001BE94 4268 0010                  		clr.w	$10(a0)
0001BE98                            
0001BE98                            loc_1A0F2:
0001BE98 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001BE9E 6500                       		bcs.s	loc_1A110
0001BEA0 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001BEA6 317C 0240 0010             		move.w	#$240,$10(a0)
0001BEAC 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001BEB2 5428 0034                  		addq.b	#2,$34(a0)
0001BEB6                            
0001BEB6                            loc_1A110:
0001BEB6 6000                       		bra.s	loc_1A15C
0001BEB8                            ; ===========================================================================
0001BEB8                            
0001BEB8                            loc_1A112:				; XREF: off_19E80
0001BEB8 4EB9 0000 E7C4             		jsr	SpeedToPos
0001BEBE 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001BEC4 6500                       		bcs.s	loc_1A124
0001BEC6 4268 0010                  		clr.w	$10(a0)
0001BECA                            
0001BECA                            loc_1A124:
0001BECA 0668 0034 0012             		addi.w	#$34,$12(a0)
0001BED0 4A68 0012                  		tst.w	$12(a0)
0001BED4 6B00                       		bmi.s	loc_1A142
0001BED6 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001BEDC 6500                       		bcs.s	loc_1A142
0001BEDE 317C 0592 000C             		move.w	#$592,$C(a0)
0001BEE4 4268 0012                  		clr.w	$12(a0)
0001BEE8                            
0001BEE8                            loc_1A142:
0001BEE8 3028 0010                  		move.w	$10(a0),d0
0001BEEC 8068 0012                  		or.w	$12(a0),d0
0001BEF0 6600                       		bne.s	loc_1A15C
0001BEF2 5428 0034                  		addq.b	#2,$34(a0)
0001BEF6 317C FE80 0012             		move.w	#-$180,$12(a0)
0001BEFC 117C 0001 0021             		move.b	#1,$21(a0)
0001BF02                            
0001BF02                            loc_1A15C:
0001BF02 43FA F892                  		lea	Ani_obj82(pc),a1
0001BF06 4EB9 0000 B83E             		jsr	AnimateSprite
0001BF0C                            
0001BF0C                            loc_1A166:
0001BF0C 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001BF12 6C00                       		bge.s	loc_1A172
0001BF14 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001BF18                            
0001BF18                            loc_1A172:
0001BF18 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001BF1E 6C00                       		bge.s	locret_1A190
0001BF20 323C 001B                  		move.w	#$1B,d1
0001BF24 343C 0070                  		move.w	#$70,d2
0001BF28 363C 0071                  		move.w	#$71,d3
0001BF2C 3828 0008                  		move.w	8(a0),d4
0001BF30 4EF9 0001 114C             		jmp	SolidObject
0001BF36                            ; ===========================================================================
0001BF36                            
0001BF36                            locret_1A190:
0001BF36 4E75                       		rts	
0001BF38                            ; ===========================================================================
0001BF38                            
0001BF38                            loc_1A192:				; XREF: off_19E80
0001BF38 217C 0001 9AA6 0004        		move.l	#Map_Eggman,4(a0)
0001BF40 317C 0400 0002             		move.w	#$400,2(a0)
0001BF46 117C 0000 001C             		move.b	#0,$1C(a0)
0001BF4C 08E8 0000 0022             		bset	#0,$22(a0)
0001BF52 4EB9 0000 E7C4             		jsr	SpeedToPos
0001BF58 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001BF5E 6400                       		bcc.s	loc_1A1D0
0001BF60 317C 0180 0010             		move.w	#$180,$10(a0)
0001BF66 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001BF6C 117C 000F 0020             		move.b	#$F,$20(a0)
0001BF72 5428 0034                  		addq.b	#2,$34(a0)
0001BF76                            
0001BF76                            loc_1A1D0:
0001BF76 6000 FF8A                  		bra.w	loc_1A15C
0001BF7A                            ; ===========================================================================
0001BF7A                            
0001BF7A                            loc_1A1D4:				; XREF: off_19E80
0001BF7A 08E8 0000 0022             		bset	#0,$22(a0)
0001BF80 4EB9 0000 E7C4             		jsr	SpeedToPos
0001BF86 4A68 0030                  		tst.w	$30(a0)
0001BF8A 6600                       		bne.s	loc_1A1FC
0001BF8C 4A28 0020                  		tst.b	$20(a0)
0001BF90 6600                       		bne.s	loc_1A216
0001BF92 317C 001E 0030             		move.w	#$1E,$30(a0)
0001BF98 303C 00AC                  		move.w	#$AC,d0
0001BF9C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BFA2                            
0001BFA2                            loc_1A1FC:
0001BFA2 5368 0030                  		subq.w	#1,$30(a0)
0001BFA6 6600                       		bne.s	loc_1A216
0001BFA8 4A28 0022                  		tst.b	$22(a0)
0001BFAC 6A00                       		bpl.s	loc_1A210
0001BFAE 317C 0060 0012             		move.w	#$60,$12(a0)
0001BFB4 6000                       		bra.s	loc_1A216
0001BFB6                            ; ===========================================================================
0001BFB6                            
0001BFB6                            loc_1A210:
0001BFB6 117C 000F 0020             		move.b	#$F,$20(a0)
0001BFBC                            
0001BFBC                            loc_1A216:
0001BFBC 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001BFC2 6D00                       		blt.s	loc_1A23A
0001BFC4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001BFCA 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001BFD0 4278 D020                  		clr.w	($FFFFD020).w
0001BFD4 4A68 0012                  		tst.w	$12(a0)
0001BFD8 6A00                       		bpl.s	loc_1A248
0001BFDA 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001BFE0                            
0001BFE0                            loc_1A23A:
0001BFE0 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001BFE6 6D00                       		blt.s	loc_1A248
0001BFE8 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001BFEE                            
0001BFEE                            loc_1A248:
0001BFEE 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001BFF4 6500                       		bcs.s	loc_1A260
0001BFF6 4A28 0001                  		tst.b	1(a0)
0001BFFA 6B00                       		bmi.s	loc_1A260
0001BFFC 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001C002 6000 FAEE                  		bra.w	Obj85_Delete
0001C006                            ; ===========================================================================
0001C006                            
0001C006                            loc_1A260:
0001C006 6000 FEFA                  		bra.w	loc_1A15C
0001C00A                            ; ===========================================================================
0001C00A                            
0001C00A                            loc_1A264:				; XREF: Obj85_Index
0001C00A 2268 0034                  		movea.l	$34(a0),a1
0001C00E 1011                       		move.b	(a1),d0
0001C010 B010                       		cmp.b	(a0),d0
0001C012 6600 FADE                  		bne.w	Obj85_Delete
0001C016 117C 0007 001C             		move.b	#7,$1C(a0)
0001C01C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C022 6C00                       		bge.s	loc_1A280
0001C024 6000                       		bra.s	loc_1A2A6
0001C026                            ; ===========================================================================
0001C026                            
0001C026                            loc_1A280:
0001C026 4A69 0010                  		tst.w	$10(a1)
0001C02A 6700                       		beq.s	loc_1A28C
0001C02C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C032                            
0001C032                            loc_1A28C:
0001C032 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001C036 4EB9 0000 B83E             		jsr	AnimateSprite
0001C03C                            
0001C03C                            loc_1A296:
0001C03C 2268 0034                  		movea.l	$34(a0),a1
0001C040 3169 0008 0008             		move.w	8(a1),8(a0)
0001C046 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C04C                            
0001C04C                            loc_1A2A6:
0001C04C 2268 0034                  		movea.l	$34(a0),a1
0001C050 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C056 7003                       		moveq	#3,d0
0001C058 C028 0022                  		and.b	$22(a0),d0
0001C05C 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C062 8128 0001                  		or.b	d0,1(a0)
0001C066 4EF9 0000 E7DE             		jmp	DisplaySprite
0001C06C                            ; ===========================================================================
0001C06C                            
0001C06C                            loc_1A2C6:				; XREF: Obj85_Index
0001C06C 2268 0034                  		movea.l	$34(a0),a1
0001C070 1011                       		move.b	(a1),d0
0001C072 B010                       		cmp.b	(a0),d0
0001C074 6600 FA7C                  		bne.w	Obj85_Delete
0001C078 0CA9 0001 9AA6 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C080 6700                       		beq.s	loc_1A2E4
0001C082 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C088 60C2                       		bra.s	loc_1A2A6
0001C08A                            ; ===========================================================================
0001C08A                            
0001C08A                            loc_1A2E4:
0001C08A 117C 0001 001C             		move.b	#1,$1C(a0)
0001C090 4A29 0021                  		tst.b	$21(a1)
0001C094 6F00                       		ble.s	loc_1A312
0001C096 117C 0006 001C             		move.b	#6,$1C(a0)
0001C09C 217C 0001 9AA6 0004        		move.l	#Map_Eggman,4(a0)
0001C0A4 317C 0400 0002             		move.w	#$400,2(a0)
0001C0AA 43FA D9AA                  		lea	Ani_Eggman(pc),a1
0001C0AE 4EB9 0000 B83E             		jsr	AnimateSprite
0001C0B4 6000 FF86                  		bra.w	loc_1A296
0001C0B8                            ; ===========================================================================
0001C0B8                            
0001C0B8                            loc_1A312:
0001C0B8 4A28 0001                  		tst.b	1(a0)
0001C0BC 6A00 FA34                  		bpl.w	Obj85_Delete
0001C0C0 6100 D536                  		bsr.w	BossDefeated
0001C0C4 117C 0002 0018             		move.b	#2,$18(a0)
0001C0CA 117C 0000 001C             		move.b	#0,$1C(a0)
0001C0D0 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C0D8 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C0DE 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C0E2 4EB9 0000 B83E             		jsr	AnimateSprite
0001C0E8 6000 FF52                  		bra.w	loc_1A296
0001C0EC                            ; ===========================================================================
0001C0EC                            
0001C0EC                            loc_1A346:				; XREF: Obj85_Index
0001C0EC 08E8 0000 0022             		bset	#0,$22(a0)
0001C0F2 2268 0034                  		movea.l	$34(a0),a1
0001C0F6 0CA9 0001 9AA6 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C0FE 6700                       		beq.s	loc_1A35E
0001C100 6000 FF4A                  		bra.w	loc_1A2A6
0001C104                            ; ===========================================================================
0001C104                            
0001C104                            loc_1A35E:
0001C104 3169 0008 0008             		move.w	8(a1),8(a0)
0001C10A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C110 4A28 001E                  		tst.b	$1E(a0)
0001C114 6600                       		bne.s	loc_1A376
0001C116 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C11C                            
0001C11C                            loc_1A376:
0001C11C 5328 001E                  		subq.b	#1,$1E(a0)
0001C120 6E00                       		bgt.s	loc_1A38A
0001C122 5228 001A                  		addq.b	#1,$1A(a0)
0001C126 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C12C 6E00 F9C4                  		bgt.w	Obj85_Delete
0001C130                            
0001C130                            loc_1A38A:
0001C130 6000 FF0A                  		bra.w	loc_1A296
0001C134                            ; ===========================================================================
0001C134                            
0001C134                            loc_1A38E:				; XREF: Obj85_Index
0001C134 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C13A 3038 D008                  		move.w	($FFFFD008).w,d0
0001C13E 9068 0008                  		sub.w	8(a0),d0
0001C142 6500                       		bcs.s	loc_1A3A6
0001C144 4A28 0001                  		tst.b	1(a0)
0001C148 6A00 F9A8                  		bpl.w	Obj85_Delete
0001C14C                            
0001C14C                            loc_1A3A6:
0001C14C 4EF9 0000 E7DE             		jmp	DisplaySprite
0001C152                            ; ===========================================================================
0001C152                            
0001C152                            loc_1A3AC:				; XREF: Obj85_Index
0001C152 117C 0000 001A             		move.b	#0,$1A(a0)
0001C158 08E8 0000 0022             		bset	#0,$22(a0)
0001C15E 2268 0034                  		movea.l	$34(a0),a1
0001C162 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C168 6600                       		bne.s	loc_1A3D0
0001C16A 0CA9 0001 9AA6 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C172 6700 F97E                  		beq.w	Obj85_Delete
0001C176                            
0001C176                            loc_1A3D0:
0001C176 6000 FED4                  		bra.w	loc_1A2A6
0001C17A                            ; ===========================================================================
0001C17A                            Ani_obj85:
0001C17A                            	include "_anim\obj85.asm"
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A                            ; Animation script - Eggman (FZ)
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C17C 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C180                            		even
0001C180                            		even
0001C180                            
0001C180                            Map_Eggman2:
0001C180                            	include "_maps\Eggman2.asm"
0001C180                            ; ---------------------------------------------------------------------------
0001C180                            ; Sprite mappings - Eggman (FZ)
0001C180                            ; ---------------------------------------------------------------------------
0001C180 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C182 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C184 06                         byte_1A3DE:	dc.b 6
0001C185 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C18A EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C18F EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C194 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C199 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C19E 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C1A3 06                         byte_1A3FD:	dc.b 6
0001C1A4 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C1A9 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C1AE EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C1B3 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C1B8 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C1BD 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C1C2                            		even
0001C1C2                            		even
0001C1C2                            
0001C1C2                            Map_FZBoss:
0001C1C2                            	include "_maps\FZ boss.asm"
0001C1C2                            ; ---------------------------------------------------------------------------
0001C1C2                            ; Sprite mappings - boss (FZ)
0001C1C2                            ; ---------------------------------------------------------------------------
0001C1C2 0000                       		dc.w byte_1A422-Map_FZBoss
0001C1C4 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C1C6 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C1C8 02                         byte_1A422:	dc.b 2
0001C1C9 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C1CE 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C1D3 03                         byte_1A42D:	dc.b 3
0001C1D4 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C1D9 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C1DE 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C1E3 02                         byte_1A43D:	dc.b 2
0001C1E4 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C1E9 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C1EE                            		even
0001C1EE                            		even
0001C1EE                            
0001C1EE                            ; ===========================================================================
0001C1EE                            
0001C1EE                            Obj84_Delete:
0001C1EE 4EF9 0000 E82E             		jmp	DeleteObject
0001C1F4                            ; ===========================================================================
0001C1F4                            ; ---------------------------------------------------------------------------
0001C1F4                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C1F4                            ; ---------------------------------------------------------------------------
0001C1F4                            
0001C1F4                            Obj84:					; XREF: Obj_Index
0001C1F4 7000                       		moveq	#0,d0
0001C1F6 1028 0024                  		move.b	$24(a0),d0
0001C1FA 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C1FE 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C202                            ; ===========================================================================
0001C202 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C204 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C206 0000                       		dc.w loc_1A57E-Obj84_Index
0001C208                            
0001C208 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C20C 2550 0620                  		dc.w $2550, $620
0001C210 2490 04C0                  		dc.w $2490, $4C0
0001C214 2510 04C0                  		dc.w $2510, $4C0
0001C218                            ; ===========================================================================
0001C218                            
0001C218                            Obj84_Main:				; XREF: Obj84_Index
0001C218 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C21C 7000                       		moveq	#0,d0
0001C21E 1028 0028                  		move.b	$28(a0),d0
0001C222 D040                       		add.w	d0,d0
0001C224 D2C0                       		adda.w	d0,a1
0001C226 117C 0004 0001             		move.b	#4,1(a0)
0001C22C 08E8 0007 0001             		bset	#7,1(a0)
0001C232 08E8 0004 0001             		bset	#4,1(a0)
0001C238 317C 0300 0002             		move.w	#$300,2(a0)
0001C23E 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C246 3159 0008                  		move.w	(a1)+,8(a0)
0001C24A 3151 000C                  		move.w	(a1),$C(a0)
0001C24E 3159 0038                  		move.w	(a1)+,$38(a0)
0001C252 117C 0020 0016             		move.b	#$20,$16(a0)
0001C258 117C 0060 0017             		move.b	#$60,$17(a0)
0001C25E 117C 0020 0019             		move.b	#$20,$19(a0)
0001C264 117C 0060 0016             		move.b	#$60,$16(a0)
0001C26A 117C 0003 0018             		move.b	#3,$18(a0)
0001C270 5428 0024                  		addq.b	#2,$24(a0)
0001C274                            
0001C274                            loc_1A4CE:				; XREF: Obj84_Index
0001C274 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C27A 6F00                       		ble.s	loc_1A4DC
0001C27C 08E8 0001 0001             		bset	#1,1(a0)
0001C282                            
0001C282                            loc_1A4DC:
0001C282 42A8 003C                  		clr.l	$3C(a0)
0001C286 4A28 0029                  		tst.b	$29(a0)
0001C28A 6700                       		beq.s	loc_1A4EA
0001C28C 5428 0024                  		addq.b	#2,$24(a0)
0001C290                            
0001C290                            loc_1A4EA:
0001C290 2028 003C                  		move.l	$3C(a0),d0
0001C294 2228 0038                  		move.l	$38(a0),d1
0001C298 D280                       		add.l	d0,d1
0001C29A 4841                       		swap	d1
0001C29C 3141 000C                  		move.w	d1,$C(a0)
0001C2A0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C2A6 6600                       		bne.s	loc_1A524
0001C2A8 4A68 0030                  		tst.w	$30(a0)
0001C2AC 6A00                       		bpl.s	loc_1A524
0001C2AE 70F6                       		moveq	#-$A,d0
0001C2B0 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C2B6 6F00                       		ble.s	loc_1A514
0001C2B8 700E                       		moveq	#$E,d0
0001C2BA                            
0001C2BA                            loc_1A514:
0001C2BA D240                       		add.w	d0,d1
0001C2BC 2268 0034                  		movea.l	$34(a0),a1
0001C2C0 3341 000C                  		move.w	d1,$C(a1)
0001C2C4 3368 0008 0008             		move.w	8(a0),8(a1)
0001C2CA                            
0001C2CA                            loc_1A524:
0001C2CA 323C 002B                  		move.w	#$2B,d1
0001C2CE 343C 0060                  		move.w	#$60,d2
0001C2D2 363C 0061                  		move.w	#$61,d3
0001C2D6 3828 0008                  		move.w	8(a0),d4
0001C2DA 4EB9 0001 114C             		jsr	SolidObject
0001C2E0 7000                       		moveq	#0,d0
0001C2E2 3228 003C                  		move.w	$3C(a0),d1
0001C2E6 6A00                       		bpl.s	loc_1A550
0001C2E8 4441                       		neg.w	d1
0001C2EA 5141                       		subq.w	#8,d1
0001C2EC 6500                       		bcs.s	loc_1A55C
0001C2EE 5200                       		addq.b	#1,d0
0001C2F0 E841                       		asr.w	#4,d1
0001C2F2 D041                       		add.w	d1,d0
0001C2F4 6000                       		bra.s	loc_1A55C
0001C2F6                            ; ===========================================================================
0001C2F6                            
0001C2F6                            loc_1A550:
0001C2F6 0441 0027                  		subi.w	#$27,d1
0001C2FA 6500                       		bcs.s	loc_1A55C
0001C2FC 5200                       		addq.b	#1,d0
0001C2FE E841                       		asr.w	#4,d1
0001C300 D041                       		add.w	d1,d0
0001C302                            
0001C302                            loc_1A55C:
0001C302 1140 001A                  		move.b	d0,$1A(a0)
0001C306 3038 D008                  		move.w	($FFFFD008).w,d0
0001C30A 9068 0008                  		sub.w	8(a0),d0
0001C30E 6B00                       		bmi.s	loc_1A578
0001C310 0440 0140                  		subi.w	#$140,d0
0001C314 6B00                       		bmi.s	loc_1A578
0001C316 4A28 0001                  		tst.b	1(a0)
0001C31A 6A00 FED2                  		bpl.w	Obj84_Delete
0001C31E                            
0001C31E                            loc_1A578:
0001C31E 4EF9 0000 E7DE             		jmp	DisplaySprite
0001C324                            ; ===========================================================================
0001C324                            
0001C324                            loc_1A57E:				; XREF: Obj84_Index
0001C324 7000                       		moveq	#0,d0
0001C326 1028 0028                  		move.b	$28(a0),d0
0001C32A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C32E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C332 6000 FF5C                  		bra.w	loc_1A4EA
0001C336                            ; ===========================================================================
0001C336 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C338 0000                       		dc.w loc_1A598-off_1A590
0001C33A 0000                       		dc.w loc_1A604-off_1A590
0001C33C 0000                       		dc.w loc_1A604-off_1A590
0001C33E                            ; ===========================================================================
0001C33E                            
0001C33E                            loc_1A598:				; XREF: off_1A590
0001C33E 4A28 0029                  		tst.b	$29(a0)
0001C342 6600                       		bne.s	loc_1A5D4
0001C344 2268 0034                  		movea.l	$34(a0),a1
0001C348 4A29 0021                  		tst.b	$21(a1)
0001C34C 6600                       		bne.s	loc_1A5B4
0001C34E 6100 D2A8                  		bsr.w	BossDefeated
0001C352 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C35A                            
0001C35A                            loc_1A5B4:
0001C35A 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C362 6400                       		bcc.s	locret_1A602
0001C364 42A8 003C                  		clr.l	$3C(a0)
0001C368 2268 0034                  		movea.l	$34(a0),a1
0001C36C 5369 0032                  		subq.w	#1,$32(a1)
0001C370 4269 0030                  		clr.w	$30(a1)
0001C374 5528 0024                  		subq.b	#2,$24(a0)
0001C378 4E75                       		rts	
0001C37A                            ; ===========================================================================
0001C37A                            
0001C37A                            loc_1A5D4:
0001C37A 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001C380 6C00                       		bge.s	loc_1A5E4
0001C382 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001C38A                            
0001C38A                            loc_1A5E4:
0001C38A 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001C392 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001C398 6E00                       		bgt.s	locret_1A602
0001C39A 4268 003E                  		clr.w	$3E(a0)
0001C39E 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001C3A4 4228 0029                  		clr.b	$29(a0)
0001C3A8                            
0001C3A8                            locret_1A602:
0001C3A8 4E75                       		rts	
0001C3AA                            ; ===========================================================================
0001C3AA                            
0001C3AA                            loc_1A604:				; XREF: off_1A590
0001C3AA 08E8 0001 0001             		bset	#1,1(a0)
0001C3B0 4A28 0029                  		tst.b	$29(a0)
0001C3B4 6600                       		bne.s	loc_1A646
0001C3B6 2268 0034                  		movea.l	$34(a0),a1
0001C3BA 4A29 0021                  		tst.b	$21(a1)
0001C3BE 6600                       		bne.s	loc_1A626
0001C3C0 6100 D236                  		bsr.w	BossDefeated
0001C3C4 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001C3CC                            
0001C3CC                            loc_1A626:
0001C3CC 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001C3D4 6400                       		bcc.s	locret_1A674
0001C3D6 42A8 003C                  		clr.l	$3C(a0)
0001C3DA 2268 0034                  		movea.l	$34(a0),a1
0001C3DE 5369 0032                  		subq.w	#1,$32(a1)
0001C3E2 4269 0030                  		clr.w	$30(a1)
0001C3E6 5528 0024                  		subq.b	#2,$24(a0)
0001C3EA 4E75                       		rts	
0001C3EC                            ; ===========================================================================
0001C3EC                            
0001C3EC                            loc_1A646:
0001C3EC 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C3F2 6D00                       		blt.s	loc_1A656
0001C3F4 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C3FC                            
0001C3FC                            loc_1A656:
0001C3FC 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C404 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C40A 6D00                       		blt.s	locret_1A674
0001C40C 4268 003E                  		clr.w	$3E(a0)
0001C410 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C416 4228 0029                  		clr.b	$29(a0)
0001C41A                            
0001C41A                            locret_1A674:
0001C41A 4E75                       		rts	
0001C41C                            ; ===========================================================================
0001C41C                            ; ---------------------------------------------------------------------------
0001C41C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C41C                            ; ---------------------------------------------------------------------------
0001C41C                            Map_obj84:
0001C41C                            	include "_maps\obj84.asm"
0001C41C                            ; ---------------------------------------------------------------------------
0001C41C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C41C                            ; ---------------------------------------------------------------------------
0001C41C 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C420 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C424 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C428 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C42C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C430 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C434 06                         byte_1A68E:	dc.b 6
0001C435 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C43A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C43F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C444 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C449 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C44E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C453 08                         byte_1A6AD:	dc.b 8
0001C454 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C459 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C45E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C463 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C468 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C46D B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C472 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C477 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C47C 0A                         byte_1A6D6:	dc.b $A
0001C47D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C482 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C487 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C48C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C491 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C496 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C49B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C4A0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C4A5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C4AA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C4AF 0C                         byte_1A709:	dc.b $C
0001C4B0 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C4B5 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C4BA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C4BF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C4C4 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C4C9 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C4CE D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C4D3 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C4D8 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C4DD F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C4E2 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C4E7 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C4EC 0D                         byte_1A746:	dc.b $D
0001C4ED A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C4F2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C4F7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C4FC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C501 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C506 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C50B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C510 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C515 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C51A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C51F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C524 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C529 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C52E 0E                         byte_1A788:	dc.b $E
0001C52F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C534 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C539 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C53E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C543 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C548 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C54D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C552 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C557 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C55C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C561 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C566 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C56B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C570 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C575 02                         byte_1A7CF:	dc.b 2
0001C576 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C57B 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C580                            		even
0001C580                            		even
0001C580                            
0001C580                            ; ===========================================================================
0001C580                            ; ---------------------------------------------------------------------------
0001C580                            ; Object 86 - energy balls (FZ)
0001C580                            ; ---------------------------------------------------------------------------
0001C580                            
0001C580                            Obj86:					; XREF: Obj_Index
0001C580 7000                       		moveq	#0,d0
0001C582 1028 0024                  		move.b	$24(a0),d0
0001C586 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C58A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C58E                            ; ===========================================================================
0001C58E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C590 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C592 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C594 0000                       		dc.w loc_1A962-Obj86_Index
0001C596 0000                       		dc.w loc_1A982-Obj86_Index
0001C598                            ; ===========================================================================
0001C598                            
0001C598                            Obj86_Main:				; XREF: Obj86_Index
0001C598 317C 2588 0008             		move.w	#$2588,8(a0)
0001C59E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C5A4 317C 0300 0002             		move.w	#$300,2(a0)
0001C5AA 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C5B2 117C 0000 001C             		move.b	#0,$1C(a0)
0001C5B8 117C 0003 0018             		move.b	#3,$18(a0)
0001C5BE 117C 0008 0017             		move.b	#8,$17(a0)
0001C5C4 117C 0008 0016             		move.b	#8,$16(a0)
0001C5CA 117C 0004 0001             		move.b	#4,1(a0)
0001C5D0 08E8 0007 0001             		bset	#7,1(a0)
0001C5D6 5428 0024                  		addq.b	#2,$24(a0)
0001C5DA                            
0001C5DA                            Obj86_Generator:			; XREF: Obj86_Index
0001C5DA 2268 0034                  		movea.l	$34(a0),a1
0001C5DE 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C5E4 6600                       		bne.s	loc_1A850
0001C5E6 10BC 003F                  		move.b	#$3F,(a0)
0001C5EA 117C 0000 0024             		move.b	#0,$24(a0)
0001C5F0 4EF9 0000 E7DE             		jmp	DisplaySprite
0001C5F6                            ; ===========================================================================
0001C5F6                            
0001C5F6                            loc_1A850:
0001C5F6 117C 0000 001C             		move.b	#0,$1C(a0)
0001C5FC 4A28 0029                  		tst.b	$29(a0)
0001C600 6700                       		beq.s	loc_1A86C
0001C602 5428 0024                  		addq.b	#2,$24(a0)
0001C606 117C 0001 001C             		move.b	#1,$1C(a0)
0001C60C 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C612                            
0001C612                            loc_1A86C:
0001C612 323C 0013                  		move.w	#$13,d1
0001C616 343C 0008                  		move.w	#8,d2
0001C61A 363C 0011                  		move.w	#$11,d3
0001C61E 3828 0008                  		move.w	8(a0),d4
0001C622 4EB9 0001 114C             		jsr	SolidObject
0001C628 3038 D008                  		move.w	($FFFFD008).w,d0
0001C62C 9068 0008                  		sub.w	8(a0),d0
0001C630 6B00                       		bmi.s	loc_1A89A
0001C632 0440 0140                  		subi.w	#$140,d0
0001C636 6B00                       		bmi.s	loc_1A89A
0001C638 4A28 0001                  		tst.b	1(a0)
0001C63C 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C640                            
0001C640                            loc_1A89A:
0001C640 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C644 4EB9 0000 B83E             		jsr	AnimateSprite
0001C64A 4EF9 0000 E7DE             		jmp	DisplaySprite
0001C650                            ; ===========================================================================
0001C650                            
0001C650                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C650 4A28 0029                  		tst.b	$29(a0)
0001C654 6700 0000                  		beq.w	loc_1A954
0001C658 4228 0029                  		clr.b	$29(a0)
0001C65C D068 0030                  		add.w	$30(a0),d0
0001C660 0240 001E                  		andi.w	#$1E,d0
0001C664 D4C0                       		adda.w	d0,a2
0001C666 5868 0030                  		addq.w	#4,$30(a0)
0001C66A 4268 0032                  		clr.w	$32(a0)
0001C66E 7403                       		moveq	#3,d2
0001C670                            
0001C670                            Obj86_Loop:
0001C670 4EB9 0000 EF4A             		jsr	SingleObjLoad2
0001C676 6600 0000                  		bne.w	loc_1A954
0001C67A 12BC 0086                  		move.b	#$86,(a1)
0001C67E 3368 0008 0008             		move.w	8(a0),8(a1)
0001C684 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C68A 137C 0008 0024             		move.b	#8,$24(a1)
0001C690 337C 2300 0002             		move.w	#$2300,2(a1)
0001C696 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C69E 137C 000C 0016             		move.b	#$C,$16(a1)
0001C6A4 137C 000C 0017             		move.b	#$C,$17(a1)
0001C6AA 137C 0000 0020             		move.b	#0,$20(a1)
0001C6B0 137C 0003 0018             		move.b	#3,$18(a1)
0001C6B6 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C6BC 137C 0004 0001             		move.b	#4,1(a1)
0001C6C2 08E9 0007 0001             		bset	#7,1(a1)
0001C6C8 2348 0034                  		move.l	a0,$34(a1)
0001C6CC 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001C6D2 3228 0032                  		move.w	$32(a0),d1
0001C6D6 C3FC FFB1                  		muls.w	#-$4F,d1
0001C6DA 0641 2578                  		addi.w	#$2578,d1
0001C6DE 0240 001F                  		andi.w	#$1F,d0
0001C6E2 0440 0010                  		subi.w	#$10,d0
0001C6E6 D041                       		add.w	d1,d0
0001C6E8 3340 0030                  		move.w	d0,$30(a1)
0001C6EC 5268 0032                  		addq.w	#1,$32(a0)
0001C6F0 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C6F6 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C6FA                            
0001C6FA                            loc_1A954:
0001C6FA 4A68 0032                  		tst.w	$32(a0)
0001C6FE 6600                       		bne.s	loc_1A95E
0001C700 5428 0024                  		addq.b	#2,$24(a0)
0001C704                            
0001C704                            loc_1A95E:
0001C704 6000 FF0C                  		bra.w	loc_1A86C
0001C708                            ; ===========================================================================
0001C708                            
0001C708                            loc_1A962:				; XREF: Obj86_Index
0001C708 117C 0002 001C             		move.b	#2,$1C(a0)
0001C70E 4A68 0038                  		tst.w	$38(a0)
0001C712 6600                       		bne.s	loc_1A97E
0001C714 117C 0002 0024             		move.b	#2,$24(a0)
0001C71A 2268 0034                  		movea.l	$34(a0),a1
0001C71E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C724                            
0001C724                            loc_1A97E:
0001C724 6000 FEEC                  		bra.w	loc_1A86C
0001C728                            ; ===========================================================================
0001C728                            
0001C728                            loc_1A982:				; XREF: Obj86_Index
0001C728 7000                       		moveq	#0,d0
0001C72A 1028 0025                  		move.b	$25(a0),d0
0001C72E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C732 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C736 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C73A 4EB9 0000 B83E             		jsr	AnimateSprite
0001C740 4EF9 0000 E7DE             		jmp	DisplaySprite
0001C746                            ; ===========================================================================
0001C746 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001C748 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001C74A 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001C74C                            ; ===========================================================================
0001C74C                            
0001C74C                            loc_1A9A6:				; XREF: Obj86_Index2
0001C74C 3028 0030                  		move.w	$30(a0),d0
0001C750 9068 0008                  		sub.w	8(a0),d0
0001C754 E940                       		asl.w	#4,d0
0001C756 3140 0010                  		move.w	d0,$10(a0)
0001C75A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C760 5428 0025                  		addq.b	#2,$25(a0)
0001C764 4E75                       		rts	
0001C766                            ; ===========================================================================
0001C766                            
0001C766                            loc_1A9C0:				; XREF: Obj86_Index2
0001C766 4A68 0010                  		tst.w	$10(a0)
0001C76A 6700                       		beq.s	loc_1A9E6
0001C76C 4EB9 0000 E7C4             		jsr	SpeedToPos
0001C772 3028 0008                  		move.w	8(a0),d0
0001C776 9068 0030                  		sub.w	$30(a0),d0
0001C77A 6400                       		bcc.s	loc_1A9E6
0001C77C 4268 0010                  		clr.w	$10(a0)
0001C780 D168 0008                  		add.w	d0,8(a0)
0001C784 2268 0034                  		movea.l	$34(a0),a1
0001C788 5369 0032                  		subq.w	#1,$32(a1)
0001C78C                            
0001C78C                            loc_1A9E6:
0001C78C 117C 0000 001C             		move.b	#0,$1C(a0)
0001C792 5368 0028                  		subq.w	#1,$28(a0)
0001C796 6600                       		bne.s	locret_1AA1C
0001C798 5428 0025                  		addq.b	#2,$25(a0)
0001C79C 117C 0001 001C             		move.b	#1,$1C(a0)
0001C7A2 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C7A8 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C7AE 7000                       		moveq	#0,d0
0001C7B0 3038 D008                  		move.w	($FFFFD008).w,d0
0001C7B4 9068 0008                  		sub.w	8(a0),d0
0001C7B8 3140 0010                  		move.w	d0,$10(a0)
0001C7BC 317C 0140 0012             		move.w	#$140,$12(a0)
0001C7C2                            
0001C7C2                            locret_1AA1C:
0001C7C2 4E75                       		rts	
0001C7C4                            ; ===========================================================================
0001C7C4                            
0001C7C4                            loc_1AA1E:				; XREF: Obj86_Index2
0001C7C4 4EB9 0000 E7C4             		jsr	SpeedToPos
0001C7CA 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001C7D0 6400                       		bcc.s	loc_1AA34
0001C7D2 5368 0028                  		subq.w	#1,$28(a0)
0001C7D6 6700                       		beq.s	loc_1AA34
0001C7D8 4E75                       		rts	
0001C7DA                            ; ===========================================================================
0001C7DA                            
0001C7DA                            loc_1AA34:
0001C7DA 2268 0034                  		movea.l	$34(a0),a1
0001C7DE 5369 0038                  		subq.w	#1,$38(a1)
0001C7E2 6000 FA0A                  		bra.w	Obj84_Delete
0001C7E6                            ; ===========================================================================
0001C7E6                            Ani_obj86:
0001C7E6                            	include "_anim\obj86.asm"
0001C7E6                            ; ---------------------------------------------------------------------------
0001C7E6                            ; Animation script - energy ball launcher (FZ)
0001C7E6                            ; ---------------------------------------------------------------------------
0001C7E6 0000                       		dc.w byte_1AA46-Ani_obj86
0001C7E8 0000                       		dc.w byte_1AA4A-Ani_obj86
0001C7EA 0000                       		dc.w byte_1AA50-Ani_obj86
0001C7EC 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001C7F0 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001C7F6 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001C7FC                            		even
0001C7FC                            		even
0001C7FC                            
0001C7FC                            ; ---------------------------------------------------------------------------
0001C7FC                            ; Sprite mappings - energy ball	launcher (FZ)
0001C7FC                            ; ---------------------------------------------------------------------------
0001C7FC                            Map_obj86:
0001C7FC                            	include "_maps\obj86.asm"
0001C7FC                            ; ---------------------------------------------------------------------------
0001C7FC                            ; Sprite mappings - energy ball	launcher (FZ)
0001C7FC                            ; ---------------------------------------------------------------------------
0001C7FC 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001C800 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001C804 01                         byte_1AA5E:	dc.b 1
0001C805 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001C80A 01                         byte_1AA64:	dc.b 1
0001C80B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001C810 01                         byte_1AA6A:	dc.b 1
0001C811 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001C816 01                         byte_1AA70:	dc.b 1
0001C817 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001C81C                            		even
0001C81C                            		even
0001C81C                            
0001C81C                            Ani_obj86a:
0001C81C                            	include "_anim\obj86a.asm"
0001C81C                            ; ---------------------------------------------------------------------------
0001C81C                            ; Animation script - energy balls (FZ)
0001C81C                            ; ---------------------------------------------------------------------------
0001C81C 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001C81E 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001C820 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001C82F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001C83E 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001C842 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001C84C                            		even
0001C84C                            		even
0001C84C                            
0001C84C                            ; ---------------------------------------------------------------------------
0001C84C                            ; Sprite mappings - energy balls (FZ)
0001C84C                            ; ---------------------------------------------------------------------------
0001C84C                            Map_obj86a:
0001C84C                            	include "_maps\obj86a.asm"
0001C84C                            ; ---------------------------------------------------------------------------
0001C84C                            ; Sprite mappings - energy balls (FZ)
0001C84C                            ; ---------------------------------------------------------------------------
0001C84C 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001C850 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001C854 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001C858 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001C85C 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001C860 0000                       		dc.w byte_1AB20-Map_obj86a
0001C862 02                         byte_1AABC:	dc.b 2
0001C863 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001C868 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001C86D 02                         byte_1AAC7:	dc.b 2
0001C86E F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001C873 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001C878 02                         byte_1AAD2:	dc.b 2
0001C879 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001C87E 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001C883 02                         byte_1AADD:	dc.b 2
0001C884 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001C889 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001C88E 02                         byte_1AAE8:	dc.b 2
0001C88F F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001C894 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001C899 02                         byte_1AAF3:	dc.b 2
0001C89A F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001C89F F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001C8A4 01                         byte_1AAFE:	dc.b 1
0001C8A5 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001C8AA 01                         byte_1AB04:	dc.b 1
0001C8AB F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001C8B0 02                         byte_1AB0A:	dc.b 2
0001C8B1 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001C8B6 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001C8BB 02                         byte_1AB15:	dc.b 2
0001C8BC F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001C8C1 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001C8C6 00                         byte_1AB20:	dc.b 0
0001C8C8 00                         		even
0001C8C8 00                         		even
0001C8C8                            
0001C8C8                            ; ===========================================================================
0001C8C8                            ; ---------------------------------------------------------------------------
0001C8C8                            ; Object 3E - prison capsule
0001C8C8                            ; ---------------------------------------------------------------------------
0001C8C8                            
0001C8C8                            Obj3E:					; XREF: Obj_Index
0001C8C8 7000                       		moveq	#0,d0
0001C8CA 1028 0024                  		move.b	$24(a0),d0
0001C8CE 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001C8D2 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001C8D6 3028 0008                  		move.w	8(a0),d0
0001C8DA 0240 FF80                  		andi.w	#$FF80,d0
0001C8DE 3238 F700                  		move.w	($FFFFF700).w,d1
0001C8E2 0441 0080                  		subi.w	#$80,d1
0001C8E6 0241 FF80                  		andi.w	#$FF80,d1
0001C8EA 9041                       		sub.w	d1,d0
0001C8EC 0C40 0280                  		cmpi.w	#$280,d0
0001C8F0 6300                       		bls.s	Obj3E_NoDel
0001C8F2                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
0001C8F2                            	;	beq.s	Obj3E_Delete		; if it's zero, don't remember object
0001C8F2                            	;	movea.w	d0,a2	; load address into a2
0001C8F2                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001C8F2 6000                       		bra.s	Obj3E_Delete	; and delete object
0001C8F4                            
0001C8F4                            Obj3E_NoDel:
0001C8F4 4EF9 0000 E7DE             		jmp	DisplaySprite
0001C8FA                            ; ===========================================================================
0001C8FA                            
0001C8FA                            Obj3E_Delete:
0001C8FA 4EF9 0000 E82E             		jmp	DeleteObject
0001C900                            ; ===========================================================================
0001C900 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001C902 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001C904 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001C906 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C908 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C90A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C90C 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001C90E 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001C910                            
0001C910 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001C914 040C 0501                  		dc.b 4,	$C, 5, 1
0001C918 0610 0403                  		dc.b 6,	$10, 4,	3
0001C91C 0810 0305                  		dc.b 8,	$10, 3,	5
0001C920                            ; ===========================================================================
0001C920                            
0001C920                            Obj3E_Main:				; XREF: Obj3E_Index
0001C920 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001C928 317C 049D 0002             		move.w	#$49D,2(a0)
0001C92E 117C 0004 0001             		move.b	#4,1(a0)
0001C934 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001C93A 7000                       		moveq	#0,d0
0001C93C 1028 0028                  		move.b	$28(a0),d0
0001C940 E548                       		lsl.w	#2,d0
0001C942 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001C946 1159 0024                  		move.b	(a1)+,$24(a0)
0001C94A 1159 0019                  		move.b	(a1)+,$19(a0)
0001C94E 1159 0018                  		move.b	(a1)+,$18(a0)
0001C952 1159 001A                  		move.b	(a1)+,$1A(a0)
0001C956 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001C95A 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001C95C 117C 0006 0020             		move.b	#6,$20(a0)
0001C962 117C 0008 0021             		move.b	#8,$21(a0)
0001C968                            
0001C968                            Obj3E_Not02:
0001C968 4E75                       		rts	
0001C96A                            ; ===========================================================================
0001C96A                            
0001C96A                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001C96A 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001C970 6700                       		beq.s	Obj3E_ChkOpened
0001C972 323C 002B                  		move.w	#$2B,d1
0001C976 343C 0018                  		move.w	#$18,d2
0001C97A 363C 0018                  		move.w	#$18,d3
0001C97E 3828 0008                  		move.w	8(a0),d4
0001C982 4EF9 0001 114C             		jmp	SolidObject
0001C988                            ; ===========================================================================
0001C988                            
0001C988                            Obj3E_ChkOpened:
0001C988 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001C98C 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001C98E 4228 0025                  		clr.b	$25(a0)
0001C992 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C998 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C99E                            
0001C99E                            Obj3E_DoOpen:
0001C99E 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001C9A4 4E75                       		rts	
0001C9A6                            ; ===========================================================================
0001C9A6                            
0001C9A6                            Obj3E_Switched:				; XREF: Obj3E_Index
0001C9A6 323C 0017                  		move.w	#$17,d1
0001C9AA 343C 0008                  		move.w	#8,d2
0001C9AE 363C 0008                  		move.w	#8,d3
0001C9B2 3828 0008                  		move.w	8(a0),d4
0001C9B6 4EB9 0001 114C             		jsr	SolidObject
0001C9BC 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001C9C2 4EB9 0000 B83E             		jsr	AnimateSprite
0001C9C8 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001C9CE 4A28 0025                  		tst.b	$25(a0)
0001C9D2 6700                       		beq.s	locret_1AC60
0001C9D4 5068 000C                  		addq.w	#8,$C(a0)
0001C9D8 117C 000A 0024             		move.b	#$A,$24(a0)
0001C9DE 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001C9E4 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001C9E8 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001C9EC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001C9F2 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001C9F8 4228 0025                  		clr.b	$25(a0)
0001C9FC 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CA02 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CA08                            
0001CA08                            locret_1AC60:
0001CA08 4E75                       		rts	
0001CA0A                            ; ===========================================================================
0001CA0A                            
0001CA0A                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001CA0A 7007                       		moveq	#7,d0
0001CA0C C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CA10 6600                       		bne.s	loc_1ACA0
0001CA12 4EB9 0000 EF34             		jsr	SingleObjLoad
0001CA18 6600                       		bne.s	loc_1ACA0
0001CA1A 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001CA1E 3368 0008 0008             		move.w	8(a0),8(a1)
0001CA24 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CA2A 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001CA30 7200                       		moveq	#0,d1
0001CA32 1200                       		move.b	d0,d1
0001CA34 E409                       		lsr.b	#2,d1
0001CA36 0441 0020                  		subi.w	#$20,d1
0001CA3A D369 0008                  		add.w	d1,8(a1)
0001CA3E E048                       		lsr.w	#8,d0
0001CA40 E608                       		lsr.b	#3,d0
0001CA42 D169 000C                  		add.w	d0,$C(a1)
0001CA46                            
0001CA46                            loc_1ACA0:
0001CA46 5368 001E                  		subq.w	#1,$1E(a0)
0001CA4A 6700                       		beq.s	Obj3E_MakeAnimal
0001CA4C 4E75                       		rts	
0001CA4E                            ; ===========================================================================
0001CA4E                            
0001CA4E                            Obj3E_MakeAnimal:
0001CA4E 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001CA54 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001CA5A 117C 0006 001A             		move.b	#6,$1A(a0)
0001CA60 317C 0096 001E             		move.w	#$96,$1E(a0)
0001CA66 0668 0020 000C             		addi.w	#$20,$C(a0)
0001CA6C 7C07                       		moveq	#7,d6
0001CA6E 3A3C 009A                  		move.w	#$9A,d5
0001CA72 78E4                       		moveq	#-$1C,d4
0001CA74                            
0001CA74                            Obj3E_Loop:
0001CA74 4EB9 0000 EF34             		jsr	SingleObjLoad
0001CA7A 6600                       		bne.s	locret_1ACF8
0001CA7C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CA80 3368 0008 0008             		move.w	8(a0),8(a1)
0001CA86 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CA8C D969 0008                  		add.w	d4,8(a1)
0001CA90 5E44                       		addq.w	#7,d4
0001CA92 3345 0036                  		move.w	d5,$36(a1)
0001CA96 5145                       		subq.w	#8,d5
0001CA98 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001CA9C                            
0001CA9C                            locret_1ACF8:
0001CA9C 4E75                       		rts	
0001CA9E                            ; ===========================================================================
0001CA9E                            
0001CA9E                            Obj3E_Animals:				; XREF: Obj3E_Index
0001CA9E 7007                       		moveq	#7,d0
0001CAA0 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CAA4 6600                       		bne.s	loc_1AD38
0001CAA6 4EB9 0000 EF34             		jsr	SingleObjLoad
0001CAAC 6600                       		bne.s	loc_1AD38
0001CAAE 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CAB2 3368 0008 0008             		move.w	8(a0),8(a1)
0001CAB8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CABE 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001CAC4 0240 001F                  		andi.w	#$1F,d0
0001CAC8 5D40                       		subq.w	#6,d0
0001CACA 4A41                       		tst.w	d1
0001CACC 6A00                       		bpl.s	loc_1AD2E
0001CACE 4440                       		neg.w	d0
0001CAD0                            
0001CAD0                            loc_1AD2E:
0001CAD0 D169 0008                  		add.w	d0,8(a1)
0001CAD4 337C 000C 0036             		move.w	#$C,$36(a1)
0001CADA                            
0001CADA                            loc_1AD38:
0001CADA 5368 001E                  		subq.w	#1,$1E(a0)
0001CADE 6600                       		bne.s	locret_1AD48
0001CAE0 5428 0024                  		addq.b	#2,$24(a0)
0001CAE4 317C 00B4 001E             		move.w	#180,$1E(a0)
0001CAEA                            
0001CAEA                            locret_1AD48:
0001CAEA 4E75                       		rts	
0001CAEC                            ; ===========================================================================
0001CAEC                            
0001CAEC                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001CAEC 703E                       		moveq	#$3E,d0
0001CAEE 7228                       		moveq	#$28,d1
0001CAF0 7440                       		moveq	#$40,d2
0001CAF2 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001CAF6                            
0001CAF6                            Obj3E_FindObj28:
0001CAF6 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001CAF8 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001CAFA D2C2                       		adda.w	d2,a1		; next object RAM
0001CAFC 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001CB00                            
0001CB00 4EB9 0001 03EA             		jsr	GotThroughAct
0001CB06 4EF9 0000 E82E             		jmp	DeleteObject
0001CB0C                            ; ===========================================================================
0001CB0C                            
0001CB0C                            Obj3E_Obj28Found:
0001CB0C 4E75                       		rts	
0001CB0E                            ; ===========================================================================
0001CB0E                            Ani_obj3E:
0001CB0E                            	include "_anim\obj3E.asm"
0001CB0E                            ; ---------------------------------------------------------------------------
0001CB0E                            ; Animation script - prison capsule
0001CB0E                            ; ---------------------------------------------------------------------------
0001CB0E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CB10 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CB12 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001CB16                            		even
0001CB16                            		even
0001CB16                            
0001CB16                            ; ---------------------------------------------------------------------------
0001CB16                            ; Sprite mappings - prison capsule
0001CB16                            ; ---------------------------------------------------------------------------
0001CB16                            Map_obj3E:
0001CB16                            	include "_maps\obj3E.asm"
0001CB16                            ; ---------------------------------------------------------------------------
0001CB16                            ; Sprite mappings - prison capsule
0001CB16                            ; ---------------------------------------------------------------------------
0001CB16 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001CB1A 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001CB1E 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001CB22 0000                       		dc.w byte_1ADE2-Map_obj3E
0001CB24 07                         byte_1AD82:	dc.b 7
0001CB25 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001CB2A E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001CB2F E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001CB34 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001CB39 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001CB3E 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CB43 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CB48 01                         byte_1ADA6:	dc.b 1
0001CB49 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001CB4E 06                         byte_1ADAC:	dc.b 6
0001CB4F 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001CB54 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001CB59 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001CB5E 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001CB63 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CB68 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CB6D 01                         byte_1ADCB:	dc.b 1
0001CB6E F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001CB73 02                         byte_1ADD1:	dc.b 2
0001CB74 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001CB79 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001CB7E 01                         byte_1ADDC:	dc.b 1
0001CB7F F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001CB84 00                         byte_1ADE2:	dc.b 0
0001CB86 00                         		even
0001CB86 00                         		even
0001CB86                            
0001CB86                            ; ---------------------------------------------------------------------------
0001CB86                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001CB86                            ; ---------------------------------------------------------------------------
0001CB86                            
0001CB86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB86                            
0001CB86                            
0001CB86                            TouchResponse:				; XREF: Obj01
0001CB86 4E71                       		nop	
0001CB88 4EB9 0000 F03C             		jsr	(Touch_Rings).l
0001CB8E 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001CB92 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001CB96 5142                       		subq.w	#8,d2
0001CB98 7A00                       		moveq	#0,d5
0001CB9A 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001CB9E 5705                       		subq.b	#3,d5
0001CBA0 9645                       		sub.w	d5,d3
0001CBA2 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001CBA8 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001CBAA 0643 000C                  		addi.w	#$C,d3
0001CBAE 7A0A                       		moveq	#$A,d5
0001CBB0                            
0001CBB0                            Touch_NoDuck:
0001CBB0 383C 0010                  		move.w	#$10,d4
0001CBB4 DA45                       		add.w	d5,d5
0001CBB6 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001CBBA 3C3C 005F                  		move.w	#$5F,d6
0001CBBE                            
0001CBBE                            Touch_Loop:
0001CBBE 4A29 0001                  		tst.b	1(a1)
0001CBC2 6A00                       		bpl.s	Touch_NextObj
0001CBC4 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001CBC8 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001CBCA                            
0001CBCA                            Touch_NextObj:
0001CBCA 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001CBCE 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001CBD2                            
0001CBD2 7000                       		moveq	#0,d0
0001CBD4 4E75                       		rts	
0001CBD6                            ; ===========================================================================
0001CBD6 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001CBD8 0C14                       		dc.b   $C, $14
0001CBDA 140C                       		dc.b  $14,  $C
0001CBDC 0410                       		dc.b	4, $10
0001CBDE 0C12                       		dc.b   $C, $12
0001CBE0 1010                       		dc.b  $10, $10
0001CBE2 0606                       		dc.b	6,   6
0001CBE4 180C                       		dc.b  $18,  $C
0001CBE6 0C10                       		dc.b   $C, $10
0001CBE8 100C                       		dc.b  $10,  $C
0001CBEA 0808                       		dc.b	8,   8
0001CBEC 1410                       		dc.b  $14, $10
0001CBEE 1408                       		dc.b  $14,   8
0001CBF0 0E0E                       		dc.b   $E,  $E
0001CBF2 1818                       		dc.b  $18, $18
0001CBF4 2810                       		dc.b  $28, $10
0001CBF6 1018                       		dc.b  $10, $18
0001CBF8 0810                       		dc.b	8, $10
0001CBFA 2070                       		dc.b  $20, $70
0001CBFC 4020                       		dc.b  $40, $20
0001CBFE 8020                       		dc.b  $80, $20
0001CC00 2020                       		dc.b  $20, $20
0001CC02 0808                       		dc.b	8,   8
0001CC04 0404                       		dc.b	4,   4
0001CC06 2008                       		dc.b  $20,   8
0001CC08 0C0C                       		dc.b   $C,  $C
0001CC0A 0804                       		dc.b	8,   4
0001CC0C 1804                       		dc.b  $18,   4
0001CC0E 2804                       		dc.b  $28,   4
0001CC10 0408                       		dc.b	4,   8
0001CC12 0418                       		dc.b	4, $18
0001CC14 0428                       		dc.b	4, $28
0001CC16 0420                       		dc.b	4, $20
0001CC18 1818                       		dc.b  $18, $18
0001CC1A 0C18                       		dc.b   $C, $18
0001CC1C 4808                       		dc.b  $48,   8
0001CC1E                            ; ===========================================================================
0001CC1E                            
0001CC1E                            Touch_Height:				; XREF: TouchResponse
0001CC1E 0240 003F                  		andi.w	#$3F,d0
0001CC22 D040                       		add.w	d0,d0
0001CC24 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001CC28 7200                       		moveq	#0,d1
0001CC2A 121A                       		move.b	(a2)+,d1
0001CC2C 3029 0008                  		move.w	8(a1),d0
0001CC30 9041                       		sub.w	d1,d0
0001CC32 9042                       		sub.w	d2,d0
0001CC34 6400                       		bcc.s	loc_1AE98
0001CC36 D241                       		add.w	d1,d1
0001CC38 D041                       		add.w	d1,d0
0001CC3A 6500                       		bcs.s	Touch_Width
0001CC3C 6000 FF8C                  		bra.w	Touch_NextObj
0001CC40                            ; ===========================================================================
0001CC40                            
0001CC40                            loc_1AE98:
0001CC40 B044                       		cmp.w	d4,d0
0001CC42 6200 FF86                  		bhi.w	Touch_NextObj
0001CC46                            
0001CC46                            Touch_Width:
0001CC46 7200                       		moveq	#0,d1
0001CC48 121A                       		move.b	(a2)+,d1
0001CC4A 3029 000C                  		move.w	$C(a1),d0
0001CC4E 9041                       		sub.w	d1,d0
0001CC50 9043                       		sub.w	d3,d0
0001CC52 6400                       		bcc.s	loc_1AEB6
0001CC54 D241                       		add.w	d1,d1
0001CC56 D240                       		add.w	d0,d1
0001CC58 6500                       		bcs.s	Touch_ChkValue
0001CC5A 6000 FF6E                  		bra.w	Touch_NextObj
0001CC5E                            ; ===========================================================================
0001CC5E                            
0001CC5E                            loc_1AEB6:
0001CC5E B045                       		cmp.w	d5,d0
0001CC60 6200 FF68                  		bhi.w	Touch_NextObj
0001CC64                            
0001CC64                            Touch_ChkValue:
0001CC64 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001CC68 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001CC6C 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001CC70 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001CC74 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001CC78 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001CC7A 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001CC7E                            
0001CC7E                            ; touch	response is $40-$7F
0001CC7E                            
0001CC7E 1029 0020                  		move.b	$20(a1),d0
0001CC82 0200 003F                  		andi.b	#$3F,d0
0001CC86 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001CC8A 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001CC8C 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001CC92 6400 0000                  		bcc.w	locret_1AEF2
0001CC96 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001CC9A                            
0001CC9A                            locret_1AEF2:
0001CC9A 4E75                       		rts	
0001CC9C                            ; ===========================================================================
0001CC9C                            
0001CC9C                            Touch_Monitor:
0001CC9C 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001CCA0 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001CCA2 3028 000C                  		move.w	$C(a0),d0
0001CCA6 0440 0010                  		subi.w	#$10,d0
0001CCAA B069 000C                  		cmp.w	$C(a1),d0
0001CCAE 6500 0000                  		bcs.w	locret_1AF2E
0001CCB2 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CCB6 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001CCBA 337C FE80 0012             		move.w	#-$180,$12(a1)
0001CCC0 4A29 0025                  		tst.b	$25(a1)
0001CCC4 6600 0000                  		bne.w	locret_1AF2E
0001CCC8 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001CCCC 4E75                       		rts	
0001CCCE                            ; ===========================================================================
0001CCCE                            
0001CCCE                            loc_1AF1E:
0001CCCE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001CCD4 6600 0000                  		bne.w	locret_1AF2E
0001CCD8 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CCDC 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001CCE0 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001CCE6 6E00                       		bgt.s	@happy
0001CCE8 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001CCEE 6D00                       		blt.s	@happy
0001CCF0 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001CCF6 6E00                       		bgt.s	@happy
0001CCF8 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001CCFE 6C00                       		bge.s	locret_1AF2E
0001CD00                            
0001CD00                            	@happy:
0001CD00 0828 0001 0022             		btst	#1,$22(a0)
0001CD06 6700                       		beq.s	locret_1AF2E
0001CD08 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001CD0E 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001CD14 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHappy2
0001CD6A                            
0001CD6A                            locret_1AF2E:
0001CD6A 4E75                       		rts	
0001CD6C                            ; ===========================================================================
0001CD6C                            
0001CD6C                            Touch_Enemy:				; XREF: Touch_ChkValue
0001CD6C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001CD70 6600                       		bne.s	loc_1AF40	; if yes, branch
0001CD72 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001CD78 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001CD7C                            
0001CD7C                            loc_1AF40:
0001CD7C 4A29 0021                  		tst.b	$21(a1)
0001CD80 6700                       		beq.s	Touch_KillEnemy
0001CD82 4468 0010                  		neg.w	$10(a0)
0001CD86 4468 0012                  		neg.w	$12(a0)
0001CD8A 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001CD8E E0E8 0010                  		asr	$10(a0)
0001CD92 E0E8 0012                  		asr	$12(a0)
0001CD96 137C 0000 0020             		move.b	#0,$20(a1)
0001CD9C 5329 0021                  		subq.b	#1,$21(a1)
0001CDA0 6600                       		bne.s	locret_1AF68
0001CDA2 08E9 0007 0022             		bset	#7,$22(a1)
0001CDA8                            
0001CDA8                            locret_1AF68:
0001CDA8 4E75                       		rts	
0001CDAA                            ; ===========================================================================
0001CDAA                            
0001CDAA                            Touch_KillEnemy:
0001CDAA 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001CDB0 6E00                       		bgt.s	@happy
0001CDB2 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001CDB8 6D00                       		blt.s	@happy
0001CDBA 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001CDC0 6E00                       		bgt.s	@happy
0001CDC2 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001CDC8 6C00                       		bge.s	@nothappy
0001CDCA                            
0001CDCA                            	@happy:
0001CDCA 0828 0001 0022             		btst	#1,$22(a0)
0001CDD0 6700                       		beq.s	@nothappy
0001CDD2 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001CDD8 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001CDDE                            
0001CDDE                            	@nothappy:
0001CDDE 08E9 0007 0022             		bset	#7,$22(a1)
0001CDE4 7000                       		moveq	#0,d0
0001CDE6 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001CDEA 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001CDEE 0C40 0006                  		cmpi.w	#6,d0
0001CDF2 6500                       		bcs.s	loc_1AF82
0001CDF4 7006                       		moveq	#6,d0
0001CDF6                            
0001CDF6                            loc_1AF82:
0001CDF6 3340 003E                  		move.w	d0,$3E(a1)
0001CDFA 4A40                       		tst.w	d0
0001CDFC 6700                       		beq.s	@nocombo
0001CDFE 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001CE04 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001CE0A                            
0001CE0A                            	@nocombo:
0001CE0A 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001CE0E 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001CE14 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001CE16 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001CE1A 337C 000A 003E             		move.w	#$A,$3E(a1)
0001CE20                            
0001CE20                            loc_1AF9C:
0001CE20 6100 0000                  		bsr.w	AddPoints
0001CE24 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001CE28 137C 0000 0024             		move.b	#0,$24(a1)
0001CE2E 4A68 0012                  		tst.w	$12(a0)
0001CE32 6B00                       		bmi.s	loc_1AFC2
0001CE34 3028 000C                  		move.w	$C(a0),d0
0001CE38 B069 000C                  		cmp.w	$C(a1),d0
0001CE3C 6400                       		bcc.s	loc_1AFCA
0001CE3E 4468 0012                  		neg.w	$12(a0)
0001CE42 4E75                       		rts	
0001CE44                            ; ===========================================================================
0001CE44                            
0001CE44                            loc_1AFC2:
0001CE44 0668 0100 0012             		addi.w	#$100,$12(a0)
0001CE4A 4E75                       		rts	
0001CE4C                            ; ===========================================================================
0001CE4C                            
0001CE4C                            loc_1AFCA:
0001CE4C 0468 0100 0012             		subi.w	#$100,$12(a0)
0001CE52 4E75                       		rts	
0001CE54                            ; ===========================================================================
0001CE54 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001CE5C                            ; ===========================================================================
0001CE5C                            
0001CE5C                            loc_1AFDA:				; XREF: Touch_CatKiller
0001CE5C 08E9 0007 0022             		bset	#7,$22(a1)
0001CE62                            
0001CE62                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001CE62 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001CE66 6700                       		beq.s	Touch_Hurt	; if not, branch
0001CE68                            
0001CE68                            loc_1AFE6:				; XREF: Touch_Hurt
0001CE68 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0001CE6E 6E00                       		bgt.s	locret_1AFE6
0001CE70                            
0001CE70                            loc2_1AFE6:				; XREF: Touch_Hurt
0001CE70 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0001CE76 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001CE7C                            
0001CE7C                            locret_1AFE6:
0001CE7C 70FF                       		moveq	#-1,d0
0001CE7E 4E75                       		rts	
0001CE80                            ; ===========================================================================
0001CE80                            
0001CE80                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001CE80 4E71                       		nop	
0001CE82 4A68 0030                  		tst.w	$30(a0)
0001CE86 66E8                       		bne.s	loc2_1AFE6
0001CE88 2449                       		movea.l	a1,a2
0001CE8A                            
0001CE8A                            ; End of function TouchResponse
0001CE8A                            ; continue straight to HurtSonic
0001CE8A                            
0001CE8A                            ; ---------------------------------------------------------------------------
0001CE8A                            ; Hurting Sonic	subroutine
0001CE8A                            ; ---------------------------------------------------------------------------
0001CE8A                            
0001CE8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE8A                            
0001CE8A                            
0001CE8A                            HurtSonic:
0001CE8A 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001CE90 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001CE96 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHurt
0001CEEC 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001CEF0 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001CEF2 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001CEF6 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001CEFA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001CF00 6500                       		bcs.s	@notbad
0001CF02 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001CF08                            
0001CF08                            	@notbad:
0001CF08 4EB9 0000 EF34             		jsr	SingleObjLoad
0001CF0E 6600                       		bne.s	Hurt_Shield
0001CF10 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001CF14 3368 0008 0008             		move.w	8(a0),8(a1)
0001CF1A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CF20                            
0001CF20                            Hurt_Shield:
0001CF20 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001CF26 117C 0004 0024             		move.b	#4,$24(a0)
0001CF2C 6100 80F4                  		bsr.w	Sonic_ResetOnFloor
0001CF30 08E8 0001 0022             		bset	#1,$22(a0)
0001CF36 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001CF3C 317C FE00 0010             		move.w	#-$200,$10(a0)
0001CF42 0828 0006 0022             		btst	#6,$22(a0)
0001CF48 6700                       		beq.s	Hurt_Reverse
0001CF4A 317C FE00 0012             		move.w	#-$200,$12(a0)
0001CF50 317C FF00 0010             		move.w	#-$100,$10(a0)
0001CF56                            
0001CF56                            Hurt_Reverse:
0001CF56 3028 0008                  		move.w	8(a0),d0
0001CF5A B06A 0008                  		cmp.w	8(a2),d0
0001CF5E 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001CF60 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001CF64                            
0001CF64                            Hurt_ChkSpikes:
0001CF64 317C 0000 0020             		move.w	#0,$20(a0)
0001CF6A 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001CF70 317C 0078 0030             		move.w	#$78,$30(a0)
0001CF76 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001CF7A 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001CF7E 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CF80 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001CF84 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CF86 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001CF8A                            
0001CF8A                            Hurt_Sound:
0001CF8A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l
0001CF90 70FF                       		moveq	#-1,d0
0001CF92 4E75                       		rts	
0001CF94                            ; ===========================================================================
0001CF94                            
0001CF94                            Hurt_NoRings:
0001CF94 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001CF98 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001CF9C 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeDies
0001CFF2                            ; End of function HurtSonic
0001CFF2                            
0001CFF2                            ; ---------------------------------------------------------------------------
0001CFF2                            ; Subroutine to	kill Sonic
0001CFF2                            ; ---------------------------------------------------------------------------
0001CFF2                            
0001CFF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFF2                            
0001CFF2                            
0001CFF2                            KillSonic:
0001CFF2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001CFF6 6600 0000                  		bne.w	Kill_NoDeath	; if yes, branch
0001CFFA 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001D000 117C 0006 0024             		move.b	#6,$24(a0)
0001D006 6100 801A                  		bsr.w	Sonic_ResetOnFloor
0001D00A 08E8 0001 0022             		bset	#1,$22(a0)
0001D010 317C F900 0012             		move.w	#-$700,$12(a0)
0001D016 317C 0000 0010             		move.w	#0,$10(a0)
0001D01C 317C 0000 0020             		move.w	#0,$20(a0)
0001D022 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D028 117C 0018 001C             		move.b	#$18,$1C(a0)
0001D02E 08E8 0007 0002             		bset	#7,2(a0)
0001D034 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001D038 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeFrustrated		
0001D08E 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001D092 6600                       		bne.s	Kill_Sound
0001D094 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001D098 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpikey
0001D0EE                            
0001D0EE                            Kill_Sound:
0001D0EE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l
0001D0F4                            
0001D0F4                            Kill_NoDeath:
0001D0F4 70FF                       		moveq	#-1,d0
0001D0F6 4E75                       		rts	
0001D0F8                            ; End of function KillSonic
0001D0F8                            
0001D0F8                            
0001D0F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0F8                            
0001D0F8                            
0001D0F8                            Touch_Special:				; XREF: Touch_ChkValue
0001D0F8 1229 0020                  		move.b	$20(a1),d1
0001D0FC 0201 003F                  		andi.b	#$3F,d1
0001D100 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001D104 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001D106 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001D10A 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001D10C 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001D110 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D112 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001D116 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D118 4E75                       		rts	
0001D11A                            ; ===========================================================================
0001D11A                            
0001D11A                            Touch_CatKiller:			; XREF: Touch_Special
0001D11A 6000 FD40                  		bra.w	loc_1AFDA
0001D11E                            ; ===========================================================================
0001D11E                            
0001D11E                            Touch_Yadrin:				; XREF: Touch_Special
0001D11E 9A40                       		sub.w	d0,d5
0001D120 0C45 0008                  		cmpi.w	#8,d5
0001D124 6400                       		bcc.s	loc_1B144
0001D126 3029 0008                  		move.w	8(a1),d0
0001D12A 5940                       		subq.w	#4,d0
0001D12C 0829 0000 0022             		btst	#0,$22(a1)
0001D132 6700                       		beq.s	loc_1B130
0001D134 0440 0010                  		subi.w	#$10,d0
0001D138                            
0001D138                            loc_1B130:
0001D138 9042                       		sub.w	d2,d0
0001D13A 6400                       		bcc.s	loc_1B13C
0001D13C 0640 0018                  		addi.w	#$18,d0
0001D140 6500                       		bcs.s	loc_1B140
0001D142 6000                       		bra.s	loc_1B144
0001D144                            ; ===========================================================================
0001D144                            
0001D144                            loc_1B13C:
0001D144 B044                       		cmp.w	d4,d0
0001D146 6200                       		bhi.s	loc_1B144
0001D148                            
0001D148                            loc_1B140:
0001D148 6000 FD18                  		bra.w	Touch_ChkHurt
0001D14C                            ; ===========================================================================
0001D14C                            
0001D14C                            loc_1B144:
0001D14C 6000 FC1E                  		bra.w	Touch_Enemy
0001D150                            ; ===========================================================================
0001D150                            
0001D150                            Touch_D7orE1:				; XREF: Touch_Special
0001D150 5229 0021                  		addq.b	#1,$21(a1)
0001D154 4E75                       		rts	
0001D156                            ; End of function Touch_Special
0001D156                            
0001D156                            ; ---------------------------------------------------------------------------
0001D156                            ; Subroutine to	show the special stage layout
0001D156                            ; ---------------------------------------------------------------------------
0001D156                            
0001D156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D156                            
0001D156                            
0001D156                            SS_ShowLayout:				; XREF: SpecialStage
0001D156 4A78 F63A                  		tst.w	($FFFFF63A).w
0001D15A 6600                       		bne.s	@noanimate
0001D15C 6100 0000                  		bsr.w	SS_AniWallsRings
0001D160 6100 0000                  		bsr.w	SS_AniItems
0001D164                            
0001D164                            	@noanimate:
0001D164 3F05                       		move.w	d5,-(sp)
0001D166 43F8 8000                  		lea	($FFFF8000).w,a1
0001D16A 1038 F780                  		move.b	($FFFFF780).w,d0
0001D16E 0200 00FC                  		andi.b	#$FC,d0
0001D172 4EB9 0000 29CC             		jsr	(CalcSine).l
0001D178 3800                       		move.w	d0,d4
0001D17A 3A01                       		move.w	d1,d5
0001D17C C9FC 0018                  		muls.w	#$18,d4
0001D180 CBFC 0018                  		muls.w	#$18,d5
0001D184 7400                       		moveq	#0,d2
0001D186 3438 F700                  		move.w	($FFFFF700).w,d2
0001D18A 84FC 0018                  		divu.w	#$18,d2
0001D18E 4842                       		swap	d2
0001D190 4442                       		neg.w	d2
0001D192 0642 FF4C                  		addi.w	#-$B4,d2
0001D196 7600                       		moveq	#0,d3
0001D198 3638 F704                  		move.w	($FFFFF704).w,d3
0001D19C 86FC 0018                  		divu.w	#$18,d3
0001D1A0 4843                       		swap	d3
0001D1A2 4443                       		neg.w	d3
0001D1A4 0643 FF4C                  		addi.w	#-$B4,d3
0001D1A8 3E3C 000F                  		move.w	#$F,d7
0001D1AC                            
0001D1AC                            loc_1B19E:
0001D1AC 48A7 E000                  		movem.w	d0-d2,-(sp)
0001D1B0 48A7 C000                  		movem.w	d0-d1,-(sp)
0001D1B4 4440                       		neg.w	d0
0001D1B6 C3C2                       		muls.w	d2,d1
0001D1B8 C1C3                       		muls.w	d3,d0
0001D1BA 2C00                       		move.l	d0,d6
0001D1BC DC81                       		add.l	d1,d6
0001D1BE 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001D1C2 C1C2                       		muls.w	d2,d0
0001D1C4 C3C3                       		muls.w	d3,d1
0001D1C6 D280                       		add.l	d0,d1
0001D1C8 2406                       		move.l	d6,d2
0001D1CA 3C3C 000F                  		move.w	#$F,d6
0001D1CE                            
0001D1CE                            loc_1B1C0:
0001D1CE 2002                       		move.l	d2,d0
0001D1D0 E080                       		asr.l	#8,d0
0001D1D2 32C0                       		move.w	d0,(a1)+
0001D1D4 2001                       		move.l	d1,d0
0001D1D6 E080                       		asr.l	#8,d0
0001D1D8 32C0                       		move.w	d0,(a1)+
0001D1DA D485                       		add.l	d5,d2
0001D1DC D284                       		add.l	d4,d1
0001D1DE 51CE FFEE                  		dbf	d6,loc_1B1C0
0001D1E2                            
0001D1E2 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001D1E6 0643 0018                  		addi.w	#$18,d3
0001D1EA 51CF FFC0                  		dbf	d7,loc_1B19E
0001D1EE                            
0001D1EE 3A1F                       		move.w	(sp)+,d5
0001D1F0 41F9 00FF 0000             		lea	($FF0000).l,a0
0001D1F6 7000                       		moveq	#0,d0
0001D1F8 3038 F704                  		move.w	($FFFFF704).w,d0
0001D1FC 80FC 0018                  		divu.w	#$18,d0
0001D200 C0FC 0080                  		mulu.w	#$80,d0
0001D204 D1C0                       		adda.l	d0,a0
0001D206 7000                       		moveq	#0,d0
0001D208 3038 F700                  		move.w	($FFFFF700).w,d0
0001D20C 80FC 0018                  		divu.w	#$18,d0
0001D210 D0C0                       		adda.w	d0,a0
0001D212 49F8 8000                  		lea	($FFFF8000).w,a4
0001D216 3E3C 000F                  		move.w	#$F,d7
0001D21A                            
0001D21A                            loc_1B20C:
0001D21A 3C3C 000F                  		move.w	#$F,d6
0001D21E                            
0001D21E                            loc_1B210:
0001D21E 7000                       		moveq	#0,d0
0001D220 1018                       		move.b	(a0)+,d0
0001D222 6700                       		beq.s	loc_1B268
0001D224 0C00 004E                  		cmpi.b	#$4E,d0
0001D228 6200                       		bhi.s	loc_1B268
0001D22A 3614                       		move.w	(a4),d3
0001D22C 0643 0120                  		addi.w	#$120,d3
0001D230 0C43 0070                  		cmpi.w	#$70,d3
0001D234 6500                       		bcs.s	loc_1B268
0001D236 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D23A 6400                       		bcc.s	loc_1B268
0001D23C 342C 0002                  		move.w	2(a4),d2
0001D240 0642 00F0                  		addi.w	#$F0,d2
0001D244 0C42 0070                  		cmpi.w	#$70,d2
0001D248 6500                       		bcs.s	loc_1B268
0001D24A 0C42 0170                  		cmpi.w	#$170,d2
0001D24E 6400                       		bcc.s	loc_1B268
0001D250 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D256 E748                       		lsl.w	#3,d0
0001D258 4BF5 0000                  		lea	(a5,d0.w),a5
0001D25C 225D                       		movea.l	(a5)+,a1
0001D25E 321D                       		move.w	(a5)+,d1
0001D260 D241                       		add.w	d1,d1
0001D262 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D266 365D                       		movea.w	(a5)+,a3
0001D268 7200                       		moveq	#0,d1
0001D26A 1219                       		move.b	(a1)+,d1
0001D26C 5301                       		subq.b	#1,d1
0001D26E 6B00                       		bmi.s	loc_1B268
0001D270 4EB9 0000 EA88             		jsr	sub_D762
0001D276                            
0001D276                            loc_1B268:
0001D276 584C                       		addq.w	#4,a4
0001D278 51CE FFA4                  		dbf	d6,loc_1B210
0001D27C                            
0001D27C 41E8 0070                  		lea	$70(a0),a0
0001D280 51CF FF98                  		dbf	d7,loc_1B20C
0001D284                            
0001D284 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D288 0C05 0050                  		cmpi.b	#$50,d5
0001D28C 6700                       		beq.s	loc_1B288
0001D28E 24BC 0000 0000             		move.l	#0,(a2)
0001D294 4E75                       		rts	
0001D296                            ; ===========================================================================
0001D296                            
0001D296                            loc_1B288:
0001D296 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D29C 4E75                       		rts	
0001D29E                            ; End of function SS_ShowLayout
0001D29E                            
0001D29E                            ; ---------------------------------------------------------------------------
0001D29E                            ; Subroutine to	animate	walls and rings	in the special stage
0001D29E                            ; ---------------------------------------------------------------------------
0001D29E                            
0001D29E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D29E                            
0001D29E                            
0001D29E                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D29E 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D2A4 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D2A8 6A00                       		bpl.s	loc_1B2C8
0001D2AA 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D2B0 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D2B4 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D2BA                            
0001D2BA                            loc_1B2C8:
0001D2BA 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D2C0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D2C4 6A00                       		bpl.s	loc_1B2E4
0001D2C6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D2CC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D2D0 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D2D6                            
0001D2D6                            loc_1B2E4:
0001D2D6 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D2DA 1340 0138                  		move.b	d0,$138(a1)
0001D2DE 1340 0160                  		move.b	d0,$160(a1)
0001D2E2 1340 0148                  		move.b	d0,$148(a1)
0001D2E6 1340 0150                  		move.b	d0,$150(a1)
0001D2EA 1340 01D8                  		move.b	d0,$1D8(a1)
0001D2EE 1340 01E0                  		move.b	d0,$1E0(a1)
0001D2F2 1340 01E8                  		move.b	d0,$1E8(a1)
0001D2F6 1340 01F0                  		move.b	d0,$1F0(a1)
0001D2FA 1340 01F8                  		move.b	d0,$1F8(a1)
0001D2FE 1340 0200                  		move.b	d0,$200(a1)
0001D302 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001D306 6A00                       		bpl.s	loc_1B326
0001D308 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001D30E 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001D312 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001D318                            
0001D318                            loc_1B326:
0001D318 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001D31C 1340 0168                  		move.b	d0,$168(a1)
0001D320 1340 0170                  		move.b	d0,$170(a1)
0001D324 1340 0178                  		move.b	d0,$178(a1)
0001D328 1340 0180                  		move.b	d0,$180(a1)
0001D32C 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001D330 6A00                       		bpl.s	loc_1B350
0001D332 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001D338 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001D33C 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001D342                            
0001D342                            loc_1B350:
0001D342 43F9 00FF 4016             		lea	($FF4016).l,a1
0001D348 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001D34E 7000                       		moveq	#0,d0
0001D350 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001D354 D040                       		add.w	d0,d0
0001D356 41F0 0000                  		lea	(a0,d0.w),a0
0001D35A 3290                       		move.w	(a0),(a1)
0001D35C 3368 0002 0008             		move.w	2(a0),8(a1)
0001D362 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D368 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D36E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D374 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D37A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D380 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D386 D0FC 0020                  		adda.w	#$20,a0
0001D38A D2FC 0048                  		adda.w	#$48,a1
0001D38E 3290                       		move.w	(a0),(a1)
0001D390 3368 0002 0008             		move.w	2(a0),8(a1)
0001D396 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D39C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D3A2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D3A8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D3AE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D3B4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D3BA D0FC 0020                  		adda.w	#$20,a0
0001D3BE D2FC 0048                  		adda.w	#$48,a1
0001D3C2 3290                       		move.w	(a0),(a1)
0001D3C4 3368 0002 0008             		move.w	2(a0),8(a1)
0001D3CA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D3D0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D3D6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D3DC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D3E2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D3E8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D3EE D0FC 0020                  		adda.w	#$20,a0
0001D3F2 D2FC 0048                  		adda.w	#$48,a1
0001D3F6 3290                       		move.w	(a0),(a1)
0001D3F8 3368 0002 0008             		move.w	2(a0),8(a1)
0001D3FE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D404 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D40A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D410 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D416 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D41C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D422 D0FC 0020                  		adda.w	#$20,a0
0001D426 D2FC 0048                  		adda.w	#$48,a1
0001D42A 4E75                       		rts	
0001D42C                            ; End of function SS_AniWallsRings
0001D42C                            
0001D42C                            SS_LoadWalls:
0001D42C 7000                       		moveq	#0,d0
0001D42E 1038 F780                  		move.b	($FFFFF780).w,d0	; get the Special Stage angle
0001D432 E408                       		lsr.b	#2,d0			; modify so it can be used as a frame ID
0001D434 0240 000F                  		andi.w	#$F,d0
0001D438 B038 FFF9                  		cmp.b	(v_ssangleprev).w,d0	; does the modified angle match the recorded value?
0001D43C 6700                       		beq.s	@return			; if so, branch
0001D43E                            
0001D43E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D444 43F9 0000 0000             		lea	(Art_SSWalls).l,a1	; load wall art
0001D44A 3200                       		move.w	d0,d1
0001D44C E149                       		lsl.w	#8,d1
0001D44E D241                       		add.w	d1,d1
0001D450 D2C1                       		add.w	d1,a1
0001D452                            
0001D45C                            
0001D45C 323C 000F                  		move.w	#$F,d1			; number of 8x8 tiles
0001D460 4EB9 0000 0000             		jsr	LoadTiles
0001D466 11C0 FFF9                  		move.b	d0,(v_ssangleprev).w	; record the modified angle for comparison
0001D46A                            
0001D46A                            	@return:
0001D46A 4E75                       		rts
0001D46C                            
0001D46C                            ; ===========================================================================
0001D46C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D47C 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D48C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D49C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D4AC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D4BC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D4CC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D4DC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D4EC                            ; ---------------------------------------------------------------------------
0001D4EC                            ; Subroutine to	remove items when you collect them in the special stage
0001D4EC                            ; ---------------------------------------------------------------------------
0001D4EC                            
0001D4EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4EC                            
0001D4EC                            
0001D4EC                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001D4EC 45F9 00FF 4400             		lea	($FF4400).l,a2
0001D4F2 303C 001F                  		move.w	#$1F,d0
0001D4F6                            
0001D4F6                            loc_1B4C4:
0001D4F6 4A12                       		tst.b	(a2)
0001D4F8 6700                       		beq.s	locret_1B4CE
0001D4FA 504A                       		addq.w	#8,a2
0001D4FC 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001D500                            
0001D500                            locret_1B4CE:
0001D500 4E75                       		rts	
0001D502                            ; End of function SS_RemoveCollectedItem
0001D502                            
0001D502                            ; ---------------------------------------------------------------------------
0001D502                            ; Subroutine to	animate	special	stage items when you touch them
0001D502                            ; ---------------------------------------------------------------------------
0001D502                            
0001D502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D502                            
0001D502                            
0001D502                            SS_AniItems:				; XREF: SS_ShowLayout
0001D502 41F9 00FF 4400             		lea	($FF4400).l,a0
0001D508 3E3C 001F                  		move.w	#$1F,d7
0001D50C                            
0001D50C                            loc_1B4DA:
0001D50C 7000                       		moveq	#0,d0
0001D50E 1010                       		move.b	(a0),d0
0001D510 6700                       		beq.s	loc_1B4E8
0001D512 E548                       		lsl.w	#2,d0
0001D514 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001D518 4E91                       		jsr	(a1)
0001D51A                            
0001D51A                            loc_1B4E8:
0001D51A 5048                       		addq.w	#8,a0
0001D51C                            
0001D51C                            loc_1B4EA:
0001D51C 51CF FFEE                  		dbf	d7,loc_1B4DA
0001D520                            
0001D520 4E75                       		rts	
0001D522                            ; End of function SS_AniItems
0001D522                            
0001D522                            ; ===========================================================================
0001D522 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001D526 0000 0000                  		dc.l SS_AniBumper
0001D52A 0000 0000                  		dc.l SS_Ani1Up
0001D52E 0000 0000                  		dc.l SS_AniReverse
0001D532 0000 0000                  		dc.l SS_AniEmeraldSparks
0001D536 0000 0000                  		dc.l SS_AniGlassBlock
0001D53A                            ; ===========================================================================
0001D53A                            
0001D53A                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001D53A 5328 0002                  		subq.b	#1,2(a0)
0001D53E 6A00                       		bpl.s	locret_1B530
0001D540 117C 0005 0002             		move.b	#5,2(a0)
0001D546 7000                       		moveq	#0,d0
0001D548 1028 0003                  		move.b	3(a0),d0
0001D54C 5228 0003                  		addq.b	#1,3(a0)
0001D550 2268 0004                  		movea.l	4(a0),a1
0001D554 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001D558 1280                       		move.b	d0,(a1)
0001D55A 6600                       		bne.s	locret_1B530
0001D55C 4290                       		clr.l	(a0)
0001D55E 42A8 0004                  		clr.l	4(a0)
0001D562                            
0001D562                            locret_1B530:
0001D562 4E75                       		rts	
0001D564                            ; ===========================================================================
0001D564 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001D56A                            ; ===========================================================================
0001D56A                            
0001D56A                            SS_AniBumper:				; XREF: SS_AniIndex
0001D56A 5328 0002                  		subq.b	#1,2(a0)
0001D56E 6A00                       		bpl.s	locret_1B566
0001D570 117C 0007 0002             		move.b	#7,2(a0)
0001D576 7000                       		moveq	#0,d0
0001D578 1028 0003                  		move.b	3(a0),d0
0001D57C 5228 0003                  		addq.b	#1,3(a0)
0001D580 2268 0004                  		movea.l	4(a0),a1
0001D584 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001D588 6600                       		bne.s	loc_1B564
0001D58A 4290                       		clr.l	(a0)
0001D58C 42A8 0004                  		clr.l	4(a0)
0001D590 12BC 0025                  		move.b	#$25,(a1)
0001D594 4E75                       		rts	
0001D596                            ; ===========================================================================
0001D596                            
0001D596                            loc_1B564:
0001D596 1280                       		move.b	d0,(a1)
0001D598                            
0001D598                            locret_1B566:
0001D598 4E75                       		rts	
0001D59A                            ; ===========================================================================
0001D59A 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001D5A0                            ; ===========================================================================
0001D5A0                            
0001D5A0                            SS_Ani1Up:				; XREF: SS_AniIndex
0001D5A0 5328 0002                  		subq.b	#1,2(a0)
0001D5A4 6A00                       		bpl.s	locret_1B596
0001D5A6 117C 0005 0002             		move.b	#5,2(a0)
0001D5AC 7000                       		moveq	#0,d0
0001D5AE 1028 0003                  		move.b	3(a0),d0
0001D5B2 5228 0003                  		addq.b	#1,3(a0)
0001D5B6 2268 0004                  		movea.l	4(a0),a1
0001D5BA 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001D5BE 1280                       		move.b	d0,(a1)
0001D5C0 6600                       		bne.s	locret_1B596
0001D5C2 4290                       		clr.l	(a0)
0001D5C4 42A8 0004                  		clr.l	4(a0)
0001D5C8                            
0001D5C8                            locret_1B596:
0001D5C8 4E75                       		rts	
0001D5CA                            ; ===========================================================================
0001D5CA 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001D5D0                            ; ===========================================================================
0001D5D0                            
0001D5D0                            SS_AniReverse:				; XREF: SS_AniIndex
0001D5D0 5328 0002                  		subq.b	#1,2(a0)
0001D5D4 6A00                       		bpl.s	locret_1B5CC
0001D5D6 117C 0007 0002             		move.b	#7,2(a0)
0001D5DC 7000                       		moveq	#0,d0
0001D5DE 1028 0003                  		move.b	3(a0),d0
0001D5E2 5228 0003                  		addq.b	#1,3(a0)
0001D5E6 2268 0004                  		movea.l	4(a0),a1
0001D5EA 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001D5EE 6600                       		bne.s	loc_1B5CA
0001D5F0 4290                       		clr.l	(a0)
0001D5F2 42A8 0004                  		clr.l	4(a0)
0001D5F6 12BC 002B                  		move.b	#$2B,(a1)
0001D5FA 4E75                       		rts	
0001D5FC                            ; ===========================================================================
0001D5FC                            
0001D5FC                            loc_1B5CA:
0001D5FC 1280                       		move.b	d0,(a1)
0001D5FE                            
0001D5FE                            locret_1B5CC:
0001D5FE 4E75                       		rts	
0001D600                            ; ===========================================================================
0001D600 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001D606                            ; ===========================================================================
0001D606                            
0001D606                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001D606 5328 0002                  		subq.b	#1,2(a0)
0001D60A 6A00                       		bpl.s	locret_1B60C
0001D60C 117C 0005 0002             		move.b	#5,2(a0)
0001D612 7000                       		moveq	#0,d0
0001D614 1028 0003                  		move.b	3(a0),d0
0001D618 5228 0003                  		addq.b	#1,3(a0)
0001D61C 2268 0004                  		movea.l	4(a0),a1
0001D620 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001D624 1280                       		move.b	d0,(a1)
0001D626 6600                       		bne.s	locret_1B60C
0001D628 4290                       		clr.l	(a0)
0001D62A 42A8 0004                  		clr.l	4(a0)
0001D62E 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001D634 303C 00A8                  		move.w	#$A8,d0
0001D638 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001D63E                            
0001D63E                            locret_1B60C:
0001D63E 4E75                       		rts	
0001D640                            ; ===========================================================================
0001D640 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001D646                            ; ===========================================================================
0001D646                            
0001D646                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001D646 5328 0002                  		subq.b	#1,2(a0)
0001D64A 6A00                       		bpl.s	locret_1B640
0001D64C 117C 0001 0002             		move.b	#1,2(a0)
0001D652 7000                       		moveq	#0,d0
0001D654 1028 0003                  		move.b	3(a0),d0
0001D658 5228 0003                  		addq.b	#1,3(a0)
0001D65C 2268 0004                  		movea.l	4(a0),a1
0001D660 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D664 1280                       		move.b	d0,(a1)
0001D666 6600                       		bne.s	locret_1B640
0001D668 12A8 0004                  		move.b	4(a0),(a1)
0001D66C 4290                       		clr.l	(a0)
0001D66E 42A8 0004                  		clr.l	4(a0)
0001D672                            
0001D672                            locret_1B640:
0001D672 4E75                       		rts	
0001D674                            ; ===========================================================================
0001D674 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D67E                            ; ---------------------------------------------------------------------------
0001D67E                            ; Special stage	layout pointers
0001D67E                            ; ---------------------------------------------------------------------------
0001D67E                            SS_LayoutIndex:
0001D67E                            	include "_inc\Special stage layout pointers.asm"
0001D67E                            ; ---------------------------------------------------------------------------
0001D67E                            ; Special stage	layout pointers
0001D67E                            ; ---------------------------------------------------------------------------
0001D67E 0000 0000                  	dc.l SS_1
0001D682 0000 0000                  	dc.l SS_2
0001D686 0000 0000                  	dc.l SS_3
0001D68A 0000 0000                  	dc.l SS_4
0001D68E 0000 0000                  	dc.l SS_5
0001D692 0000 0000                  	dc.l SS_6
0001D696                            	even
0001D696                            	even
0001D696                            
0001D696                            ; ---------------------------------------------------------------------------
0001D696                            ; Special stage	start locations
0001D696                            ; ---------------------------------------------------------------------------
0001D696                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D6AE                            		even
0001D6AE                            
0001D6AE                            ; ---------------------------------------------------------------------------
0001D6AE                            ; Subroutine to	load special stage layout
0001D6AE                            ; ---------------------------------------------------------------------------
0001D6AE                            
0001D6AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6AE                            
0001D6AE                            
0001D6AE                            SS_Load:				; XREF: SpecialStage
0001D6AE 7000                       		moveq	#0,d0
0001D6B0 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D6B4 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D6B8 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D6BE 6500                       		bcs.s	SS_ChkEmldNum
0001D6C0 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D6C6                            
0001D6C6                            SS_ChkEmldNum:
0001D6C6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D6CC 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D6CE 7200                       		moveq	#0,d1
0001D6D0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D6D4 5301                       		subq.b	#1,d1
0001D6D6 6500                       		bcs.s	SS_LoadData
0001D6D8 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D6DC                            
0001D6DC                            SS_ChkEmldLoop:	
0001D6DC B033 1000                  		cmp.b	(a3,d1.w),d0
0001D6E0 6600                       		bne.s	SS_ChkEmldRepeat
0001D6E2 60CA                       		bra.s	SS_Load
0001D6E4                            ; ===========================================================================
0001D6E4                            
0001D6E4                            SS_ChkEmldRepeat:
0001D6E4 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D6E8                            
0001D6E8                            SS_LoadData:
0001D6E8 E548                       		lsl.w	#2,d0
0001D6EA 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D6EE 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D6F2 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D6F6 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D6FA 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D700 303C 0000                  		move.w	#0,d0
0001D704 4EB9 0000 15D2             		jsr	(EniDec).l
0001D70A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D710 303C 0FFF                  		move.w	#$FFF,d0
0001D714                            
0001D714                            SS_ClrRAM3:
0001D714 4299                       		clr.l	(a1)+
0001D716 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D71A                            
0001D71A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D720 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D726 723F                       		moveq	#$3F,d1
0001D728                            
0001D728                            loc_1B6F6:
0001D728 743F                       		moveq	#$3F,d2
0001D72A                            
0001D72A                            loc_1B6F8:
0001D72A 12D8                       		move.b	(a0)+,(a1)+
0001D72C 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D730                            
0001D730 43E9 0040                  		lea	$40(a1),a1
0001D734 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D738                            
0001D738 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D73E 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D744 724D                       		moveq	#$4D,d1
0001D746                            
0001D746                            loc_1B714:
0001D746 22D8                       		move.l	(a0)+,(a1)+
0001D748 32FC 0000                  		move.w	#0,(a1)+
0001D74C 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D752 32D8                       		move.w	(a0)+,(a1)+
0001D754 51C9 FFF0                  		dbf	d1,loc_1B714
0001D758                            
0001D758 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D75E 323C 003F                  		move.w	#$3F,d1
0001D762                            
0001D762                            loc_1B730:
0001D762                            
0001D762 4299                       		clr.l	(a1)+
0001D764 51C9 FFFC                  		dbf	d1,loc_1B730
0001D768                            
0001D768 4E75                       		rts	
0001D76A                            ; End of function SS_Load
0001D76A                            
0001D76A                            ; ===========================================================================
0001D76A                            ; ---------------------------------------------------------------------------
0001D76A                            ; Special stage	mappings and VRAM pointers
0001D76A                            ; ---------------------------------------------------------------------------
0001D76A                            SS_MapIndex:
0001D76A                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D76A                            ; ---------------------------------------------------------------------------
0001D76A                            ; Special stage	mappings and VRAM pointers
0001D76A                            ; ---------------------------------------------------------------------------
0001D76A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D76E 0142                       	dc.w $142		; VRAM setting
0001D770 0000 0000                  	dc.l Map_SSWalls
0001D774 0142                       	dc.w $142
0001D776 0000 0000                  	dc.l Map_SSWalls
0001D77A 0142                       	dc.w $142
0001D77C 0000 0000                  	dc.l Map_SSWalls
0001D780 0142                       	dc.w $142
0001D782 0000 0000                  	dc.l Map_SSWalls
0001D786 0142                       	dc.w $142
0001D788 0000 0000                  	dc.l Map_SSWalls
0001D78C 0142                       	dc.w $142
0001D78E 0000 0000                  	dc.l Map_SSWalls
0001D792 0142                       	dc.w $142
0001D794 0000 0000                  	dc.l Map_SSWalls
0001D798 0142                       	dc.w $142
0001D79A 0000 0000                  	dc.l Map_SSWalls
0001D79E 0142                       	dc.w $142
0001D7A0 0000 0000                  	dc.l Map_SSWalls
0001D7A4 2142                       	dc.w $2142
0001D7A6 0000 0000                  	dc.l Map_SSWalls
0001D7AA 2142                       	dc.w $2142
0001D7AC 0000 0000                  	dc.l Map_SSWalls
0001D7B0 2142                       	dc.w $2142
0001D7B2 0000 0000                  	dc.l Map_SSWalls
0001D7B6 2142                       	dc.w $2142
0001D7B8 0000 0000                  	dc.l Map_SSWalls
0001D7BC 2142                       	dc.w $2142
0001D7BE 0000 0000                  	dc.l Map_SSWalls
0001D7C2 2142                       	dc.w $2142
0001D7C4 0000 0000                  	dc.l Map_SSWalls
0001D7C8 2142                       	dc.w $2142
0001D7CA 0000 0000                  	dc.l Map_SSWalls
0001D7CE 2142                       	dc.w $2142
0001D7D0 0000 0000                  	dc.l Map_SSWalls
0001D7D4 2142                       	dc.w $2142
0001D7D6 0000 0000                  	dc.l Map_SSWalls
0001D7DA 4142                       	dc.w $4142
0001D7DC 0000 0000                  	dc.l Map_SSWalls
0001D7E0 4142                       	dc.w $4142
0001D7E2 0000 0000                  	dc.l Map_SSWalls
0001D7E6 4142                       	dc.w $4142
0001D7E8 0000 0000                  	dc.l Map_SSWalls
0001D7EC 4142                       	dc.w $4142
0001D7EE 0000 0000                  	dc.l Map_SSWalls
0001D7F2 4142                       	dc.w $4142
0001D7F4 0000 0000                  	dc.l Map_SSWalls
0001D7F8 4142                       	dc.w $4142
0001D7FA 0000 0000                  	dc.l Map_SSWalls
0001D7FE 4142                       	dc.w $4142
0001D800 0000 0000                  	dc.l Map_SSWalls
0001D804 4142                       	dc.w $4142
0001D806 0000 0000                  	dc.l Map_SSWalls
0001D80A 4142                       	dc.w $4142
0001D80C 0000 0000                  	dc.l Map_SSWalls
0001D810 6142                       	dc.w $6142
0001D812 0000 0000                  	dc.l Map_SSWalls
0001D816 6142                       	dc.w $6142
0001D818 0000 0000                  	dc.l Map_SSWalls
0001D81C 6142                       	dc.w $6142
0001D81E 0000 0000                  	dc.l Map_SSWalls
0001D822 6142                       	dc.w $6142
0001D824 0000 0000                  	dc.l Map_SSWalls
0001D828 6142                       	dc.w $6142
0001D82A 0000 0000                  	dc.l Map_SSWalls
0001D82E 6142                       	dc.w $6142
0001D830 0000 0000                  	dc.l Map_SSWalls
0001D834 6142                       	dc.w $6142
0001D836 0000 0000                  	dc.l Map_SSWalls
0001D83A 6142                       	dc.w $6142
0001D83C 0000 0000                  	dc.l Map_SSWalls
0001D840 6142                       	dc.w $6142
0001D842 0001 0252                  	dc.l Map_obj47
0001D846 023B                       	dc.w $23B
0001D848 0000 0000                  	dc.l Map_SS_R
0001D84C 0570                       	dc.w $570
0001D84E 0000 0000                  	dc.l Map_SS_R
0001D852 0251                       	dc.w $251
0001D854 0000 0000                  	dc.l Map_SS_R
0001D858 0370                       	dc.w $370
0001D85A 0000 0000                  	dc.l Map_SS_Up
0001D85E 0263                       	dc.w $263
0001D860 0000 0000                  	dc.l Map_SS_Down
0001D864 0263                       	dc.w $263
0001D866 0000 0000                  	dc.l Map_SS_R
0001D86A 22F0                       	dc.w $22F0
0001D86C 0000 0000                  	dc.l Map_SS_Glass
0001D870 0470                       	dc.w $470
0001D872 0000 0000                  	dc.l Map_SS_Glass
0001D876 05F0                       	dc.w $5F0
0001D878 0000 0000                  	dc.l Map_SS_Glass
0001D87C 65F0                       	dc.w $65F0
0001D87E 0000 0000                  	dc.l Map_SS_Glass
0001D882 25F0                       	dc.w $25F0
0001D884 0000 0000                  	dc.l Map_SS_Glass
0001D888 45F0                       	dc.w $45F0
0001D88A 0000 0000                  	dc.l Map_SS_R
0001D88E 02F0                       	dc.w $2F0
0001D890 0101 0252                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D894 023B                       	dc.w $23B
0001D896 0201 0252                  	dc.l Map_obj47+$2000000
0001D89A 023B                       	dc.w $23B
0001D89C 0000 0000                  	dc.l Map_SS_R
0001D8A0 0797                       	dc.w $797
0001D8A2 0000 0000                  	dc.l Map_SS_R
0001D8A6 07A0                       	dc.w $7A0
0001D8A8 0000 0000                  	dc.l Map_SS_R
0001D8AC 07A9                       	dc.w $7A9
0001D8AE 0000 0000                  	dc.l Map_SS_R
0001D8B2 0797                       	dc.w $797
0001D8B4 0000 0000                  	dc.l Map_SS_R
0001D8B8 07A0                       	dc.w $7A0
0001D8BA 0000 0000                  	dc.l Map_SS_R
0001D8BE 07A9                       	dc.w $7A9
0001D8C0 0000 B0E8                  	dc.l Map_obj25
0001D8C4 222D                       	dc.w $2000+ssringart
0001D8C6 0000 0000                  	dc.l Map_SS_Chaos3
0001D8CA 0770                       	dc.w $770
0001D8CC 0000 0000                  	dc.l Map_SS_Chaos3
0001D8D0 2770                       	dc.w $2770
0001D8D2 0000 0000                  	dc.l Map_SS_Chaos3
0001D8D6 4770                       	dc.w $4770
0001D8D8 0000 0000                  	dc.l Map_SS_Chaos3
0001D8DC 6770                       	dc.w $6770
0001D8DE 0000 0000                  	dc.l Map_SS_Chaos1
0001D8E2 0770                       	dc.w $770
0001D8E4 0000 0000                  	dc.l Map_SS_Chaos2
0001D8E8 0770                       	dc.w $770
0001D8EA 0000 0000                  	dc.l Map_SS_R
0001D8EE 04F0                       	dc.w $4F0
0001D8F0 0400 B0E8                  	dc.l Map_obj25+$4000000
0001D8F4 222D                       	dc.w $2000+ssringart
0001D8F6 0500 B0E8                  	dc.l Map_obj25+$5000000
0001D8FA 222D                       	dc.w $2000+ssringart
0001D8FC 0600 B0E8                  	dc.l Map_obj25+$6000000
0001D900 222D                       	dc.w $2000+ssringart
0001D902 0700 B0E8                  	dc.l Map_obj25+$7000000
0001D906 222D                       	dc.w $2000+ssringart
0001D908 0000 0000                  	dc.l Map_SS_Glass
0001D90C 23F0                       	dc.w $23F0
0001D90E 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001D912 23F0                       	dc.w $23F0
0001D914 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001D918 23F0                       	dc.w $23F0
0001D91A 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001D91E 23F0                       	dc.w $23F0
0001D920 0000 0000                  	dc.l Map_SS_R+$2000000
0001D924 04F0                       	dc.w $4F0
0001D926 0000 0000                  	dc.l Map_SS_Glass
0001D92A 05F0                       	dc.w $5F0
0001D92C 0000 0000                  	dc.l Map_SS_Glass
0001D930 65F0                       	dc.w $65F0
0001D932 0000 0000                  	dc.l Map_SS_Glass
0001D936 25F0                       	dc.w $25F0
0001D938 0000 0000                  	dc.l Map_SS_Glass
0001D93C 45F0                       	dc.w $45F0
0001D93C 45F0                       	dc.w $45F0
0001D93E                            
0001D93E                            ; ---------------------------------------------------------------------------
0001D93E                            ; Sprite mappings - special stage "R" block
0001D93E                            ; ---------------------------------------------------------------------------
0001D93E                            Map_SS_R:
0001D93E                            	include "_maps\SSRblock.asm"
0001D93E                            ; ---------------------------------------------------------------------------
0001D93E                            ; Sprite mappings - special stage "R" block
0001D93E                            ; ---------------------------------------------------------------------------
0001D93E 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001D942 0000                       		dc.w byte_1B91E-Map_SS_R
0001D944 01                         byte_1B912:	dc.b 1
0001D945 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D94A 01                         byte_1B918:	dc.b 1
0001D94B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D950 00                         byte_1B91E:	dc.b 0
0001D952 00                         		even
0001D952 00                         		even
0001D952                            
0001D952                            ; ---------------------------------------------------------------------------
0001D952                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D952                            ; ---------------------------------------------------------------------------
0001D952                            Map_SS_Glass:
0001D952                            	include "_maps\SSglassblock.asm"
0001D952                            ; ---------------------------------------------------------------------------
0001D952                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D952                            ; ---------------------------------------------------------------------------
0001D952 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001D956 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001D95A 01                         byte_1B928:	dc.b 1
0001D95B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D960 01                         byte_1B92E:	dc.b 1
0001D961 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001D966 01                         byte_1B934:	dc.b 1
0001D967 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001D96C 01                         byte_1B93A:	dc.b 1
0001D96D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001D972                            		even
0001D972                            		even
0001D972                            
0001D972                            ; ---------------------------------------------------------------------------
0001D972                            ; Sprite mappings - special stage "UP" block
0001D972                            ; ---------------------------------------------------------------------------
0001D972                            Map_SS_Up:
0001D972                            	include "_maps\SSUPblock.asm"
0001D972                            ; ---------------------------------------------------------------------------
0001D972                            ; Sprite mappings - special stage "UP" block
0001D972                            ; ---------------------------------------------------------------------------
0001D972 0000                       		dc.w byte_1B944-Map_SS_Up
0001D974 0000                       		dc.w byte_1B94A-Map_SS_Up
0001D976 01                         byte_1B944:	dc.b 1
0001D977 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D97C 01                         byte_1B94A:	dc.b 1
0001D97D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D982                            		even
0001D982                            		even
0001D982                            
0001D982                            ; ---------------------------------------------------------------------------
0001D982                            ; Sprite mappings - special stage "DOWN" block
0001D982                            ; ---------------------------------------------------------------------------
0001D982                            Map_SS_Down:
0001D982                            	include "_maps\SSDOWNblock.asm"
0001D982                            ; ---------------------------------------------------------------------------
0001D982                            ; Sprite mappings - special stage "DOWN" block
0001D982                            ; ---------------------------------------------------------------------------
0001D982 0000                       		dc.w byte_1B954-Map_SS_Down
0001D984 0000                       		dc.w byte_1B95A-Map_SS_Down
0001D986 01                         byte_1B954:	dc.b 1
0001D987 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D98C 01                         byte_1B95A:	dc.b 1
0001D98D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D992                            		even
0001D992                            		even
0001D992                            
0001D992                            ; ---------------------------------------------------------------------------
0001D992                            ; Sprite mappings - special stage chaos	emeralds
0001D992                            ; ---------------------------------------------------------------------------
0001D992 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001D994 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001D996 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001D998 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001D99A 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001D99C 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001D99E 01                         byte_1B96C:	dc.b 1
0001D99F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001D9A4 01                         byte_1B972:	dc.b 1
0001D9A5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001D9AA 01                         byte_1B978:	dc.b 1
0001D9AB F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001D9B0 01                         byte_1B97E:	dc.b 1
0001D9B1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001D9B6                            		even
0001D9B6                            ; ===========================================================================
0001D9B6                            ; ---------------------------------------------------------------------------
0001D9B6                            ; Object 09 - Sonic (special stage)
0001D9B6                            ; ---------------------------------------------------------------------------
0001D9B6                            
0001D9B6                            Obj09:					; XREF: Obj_Index
0001D9B6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001D9BA 6700                       		beq.s	Obj09_Normal	; if not, branch
0001D9BC 6100 0000                  		bsr.w	SS_FixCamera
0001D9C0 6000 0000                  		bra.w	DebugMode
0001D9C4                            ; ===========================================================================
0001D9C4                            
0001D9C4                            Obj09_Normal:
0001D9C4 7000                       		moveq	#0,d0
0001D9C6 1028 0024                  		move.b	$24(a0),d0
0001D9CA 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001D9CE 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001D9D2                            ; ===========================================================================
0001D9D2 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001D9D4 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001D9D6 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001D9D8 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001D9DA                            ; ===========================================================================
0001D9DA                            
0001D9DA                            Obj09_Main:				; XREF: Obj09_Index
0001D9DA 5428 0024                  		addq.b	#2,$24(a0)
0001D9DE 117C 000E 0016             		move.b	#$E,$16(a0)
0001D9E4 117C 0007 0017             		move.b	#7,$17(a0)
0001D9EA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001D9F2 317C 0780 0002             		move.w	#$780,2(a0)
0001D9F8 117C 0004 0001             		move.b	#4,1(a0)
0001D9FE 117C 0000 0018             		move.b	#0,$18(a0)
0001DA04 117C 0002 001C             		move.b	#2,$1C(a0)
0001DA0A 08E8 0002 0022             		bset	#2,$22(a0)
0001DA10 08E8 0001 0022             		bset	#1,$22(a0)
0001DA16                            
0001DA16                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001DA16 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001DA1A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DA1C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DA22 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DA24 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001DA2A                            
0001DA2A                            Obj09_NoDebug:
0001DA2A 117C 0000 0030             		move.b	#0,$30(a0)
0001DA30 7000                       		moveq	#0,d0
0001DA32 1028 0022                  		move.b	$22(a0),d0
0001DA36 0240 0002                  		andi.w	#2,d0
0001DA3A 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001DA3E 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001DA42 4EB9 0001 54E0             		jsr	LoadSonicDynPLC
0001DA48 4EF9 0000 E7DE             		jmp	DisplaySprite
0001DA4E                            ; ===========================================================================
0001DA4E 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001DA50 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001DA52                            ; ===========================================================================
0001DA52                            
0001DA52                            Obj09_OnWall:				; XREF: Obj09_Modes
0001DA52 6100 0000                  		bsr.w	Obj09_Jump
0001DA56 6100 0000                  		bsr.w	Obj09_Move
0001DA5A 6100 0000                  		bsr.w	Obj09_Fall
0001DA5E 6000                       		bra.s	Obj09_Display
0001DA60                            ; ===========================================================================
0001DA60                            
0001DA60                            Obj09_InAir:				; XREF: Obj09_Modes
0001DA60 6100 0000                  		bsr.w	nullsub_2
0001DA64 6100 0000                  		bsr.w	Obj09_Move
0001DA68 6100 0000                  		bsr.w	Obj09_Fall
0001DA6C                            
0001DA6C                            Obj09_Display:				; XREF: Obj09_OnWall
0001DA6C 6100 0000                  		bsr.w	Obj09_ChkItems
0001DA70 6100 0000                  		bsr.w	Obj09_ChkItems2
0001DA74 4EB9 0000 E7C4             		jsr	SpeedToPos
0001DA7A 6100 0000                  		bsr.w	SS_FixCamera
0001DA7E 3038 F780                  		move.w	($FFFFF780).w,d0
0001DA82 D078 F782                  		add.w	($FFFFF782).w,d0
0001DA86 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DA8A 4EB9 0001 5266             		jsr	Sonic_Animate
0001DA90 4E75                       		rts	
0001DA92                            
0001DA92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA92                            
0001DA92                            
0001DA92                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001DA92 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001DA98 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001DA9A 6100 0000                  		bsr.w	Obj09_MoveLeft
0001DA9E                            
0001DA9E                            Obj09_ChkRight:
0001DA9E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001DAA4 6700                       		beq.s	loc_1BA78	; if not, branch
0001DAA6 6100 0000                  		bsr.w	Obj09_MoveRight
0001DAAA                            
0001DAAA                            loc_1BA78:
0001DAAA 1038 F602                  		move.b	($FFFFF602).w,d0
0001DAAE 0200 000C                  		andi.b	#$C,d0
0001DAB2 6600                       		bne.s	loc_1BAA8
0001DAB4 3028 0020                  		move.w	$20(a0),d0
0001DAB8 6700                       		beq.s	loc_1BAA8
0001DABA 6B00                       		bmi.s	loc_1BA9A
0001DABC 0440 000C                  		subi.w	#$C,d0
0001DAC0 6400                       		bcc.s	loc_1BA94
0001DAC2 303C 0000                  		move.w	#0,d0
0001DAC6                            
0001DAC6                            loc_1BA94:
0001DAC6 3140 0020                  		move.w	d0,$20(a0)
0001DACA 6000                       		bra.s	loc_1BAA8
0001DACC                            ; ===========================================================================
0001DACC                            
0001DACC                            loc_1BA9A:
0001DACC 0640 000C                  		addi.w	#$C,d0
0001DAD0 6400                       		bcc.s	loc_1BAA4
0001DAD2 303C 0000                  		move.w	#0,d0
0001DAD6                            
0001DAD6                            loc_1BAA4:
0001DAD6 3140 0020                  		move.w	d0,$20(a0)
0001DADA                            
0001DADA                            loc_1BAA8:
0001DADA 1038 F780                  		move.b	($FFFFF780).w,d0
0001DADE 0600 0020                  		addi.b	#$20,d0
0001DAE2 0200 00C0                  		andi.b	#$C0,d0
0001DAE6 4400                       		neg.b	d0
0001DAE8 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DAEE C3E8 0020                  		muls.w	$20(a0),d1
0001DAF2 D3A8 0008                  		add.l	d1,8(a0)
0001DAF6 C1E8 0020                  		muls.w	$20(a0),d0
0001DAFA D1A8 000C                  		add.l	d0,$C(a0)
0001DAFE 48E7 C000                  		movem.l	d0-d1,-(sp)
0001DB02 2428 000C                  		move.l	$C(a0),d2
0001DB06 2628 0008                  		move.l	8(a0),d3
0001DB0A 6100 0000                  		bsr.w	sub_1BCE8
0001DB0E 6700                       		beq.s	loc_1BAF2
0001DB10 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DB14 93A8 0008                  		sub.l	d1,8(a0)
0001DB18 91A8 000C                  		sub.l	d0,$C(a0)
0001DB1C 317C 0000 0020             		move.w	#0,$20(a0)
0001DB22 4E75                       		rts	
0001DB24                            ; ===========================================================================
0001DB24                            
0001DB24                            loc_1BAF2:
0001DB24 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DB28 4E75                       		rts	
0001DB2A                            ; End of function Obj09_Move
0001DB2A                            
0001DB2A                            
0001DB2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB2A                            
0001DB2A                            
0001DB2A                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001DB2A 08E8 0000 0022             		bset	#0,$22(a0)
0001DB30 3028 0020                  		move.w	$20(a0),d0
0001DB34 6700                       		beq.s	loc_1BB06
0001DB36 6A00                       		bpl.s	loc_1BB1A
0001DB38                            
0001DB38                            loc_1BB06:
0001DB38 0440 000C                  		subi.w	#$C,d0
0001DB3C 0C40 F800                  		cmpi.w	#-$800,d0
0001DB40 6E00                       		bgt.s	loc_1BB14
0001DB42 303C F800                  		move.w	#-$800,d0
0001DB46                            
0001DB46                            loc_1BB14:
0001DB46 3140 0020                  		move.w	d0,$20(a0)
0001DB4A 4E75                       		rts	
0001DB4C                            ; ===========================================================================
0001DB4C                            
0001DB4C                            loc_1BB1A:
0001DB4C 0440 0040                  		subi.w	#$40,d0
0001DB50 6400                       		bcc.s	loc_1BB22
0001DB52 4E71                       		nop	
0001DB54                            
0001DB54                            loc_1BB22:
0001DB54 3140 0020                  		move.w	d0,$20(a0)
0001DB58 4E75                       		rts	
0001DB5A                            ; End of function Obj09_MoveLeft
0001DB5A                            
0001DB5A                            
0001DB5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB5A                            
0001DB5A                            
0001DB5A                            Obj09_MoveRight:			; XREF: Obj09_Move
0001DB5A 08A8 0000 0022             		bclr	#0,$22(a0)
0001DB60 3028 0020                  		move.w	$20(a0),d0
0001DB64 6B00                       		bmi.s	loc_1BB48
0001DB66 0640 000C                  		addi.w	#$C,d0
0001DB6A 0C40 0800                  		cmpi.w	#$800,d0
0001DB6E 6D00                       		blt.s	loc_1BB42
0001DB70 303C 0800                  		move.w	#$800,d0
0001DB74                            
0001DB74                            loc_1BB42:
0001DB74 3140 0020                  		move.w	d0,$20(a0)
0001DB78 6000                       		bra.s	locret_1BB54
0001DB7A                            ; ===========================================================================
0001DB7A                            
0001DB7A                            loc_1BB48:
0001DB7A 0640 0040                  		addi.w	#$40,d0
0001DB7E 6400                       		bcc.s	loc_1BB50
0001DB80 4E71                       		nop	
0001DB82                            
0001DB82                            loc_1BB50:
0001DB82 3140 0020                  		move.w	d0,$20(a0)
0001DB86                            
0001DB86                            locret_1BB54:
0001DB86 4E75                       		rts	
0001DB88                            ; End of function Obj09_MoveRight
0001DB88                            
0001DB88                            
0001DB88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB88                            
0001DB88                            
0001DB88                            Obj09_Jump:				; XREF: Obj09_OnWall
0001DB88 1038 F603                  		move.b	($FFFFF603).w,d0
0001DB8C 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001DB90 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001DB92 1038 F780                  		move.b	($FFFFF780).w,d0
0001DB96 0200 00FC                  		andi.b	#$FC,d0
0001DB9A 4400                       		neg.b	d0
0001DB9C 0400 0040                  		subi.b	#$40,d0
0001DBA0 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DBA6 C3FC 0680                  		muls.w	#$680,d1
0001DBAA E081                       		asr.l	#8,d1
0001DBAC 3141 0010                  		move.w	d1,$10(a0)
0001DBB0 C1FC 0680                  		muls.w	#$680,d0
0001DBB4 E080                       		asr.l	#8,d0
0001DBB6 3140 0012                  		move.w	d0,$12(a0)
0001DBBA 08E8 0001 0022             		bset	#1,$22(a0)
0001DBC0 303C 00A0                  		move.w	#$A0,d0
0001DBC4 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play jumping sound
0001DBCA                            
0001DBCA                            Obj09_NoJump:
0001DBCA 4E75                       		rts	
0001DBCC                            ; End of function Obj09_Jump
0001DBCC                            
0001DBCC                            
0001DBCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBCC                            
0001DBCC                            
0001DBCC                            nullsub_2:				; XREF: Obj09_InAir
0001DBCC 4E75                       		rts	
0001DBCE                            ; End of function nullsub_2
0001DBCE                            
0001DBCE                            ; ===========================================================================
0001DBCE                            ; ---------------------------------------------------------------------------
0001DBCE                            ; unused subroutine to limit Sonic's upward vertical speed
0001DBCE                            ; ---------------------------------------------------------------------------
0001DBCE 323C FC00                  		move.w	#-$400,d1
0001DBD2 B268 0012                  		cmp.w	$12(a0),d1
0001DBD6 6F00                       		ble.s	locret_1BBB4
0001DBD8 1038 F602                  		move.b	($FFFFF602).w,d0
0001DBDC 0200 0070                  		andi.b	#$70,d0
0001DBE0 6600                       		bne.s	locret_1BBB4
0001DBE2 3141 0012                  		move.w	d1,$12(a0)
0001DBE6                            
0001DBE6                            locret_1BBB4:
0001DBE6 4E75                       		rts	
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            
0001DBE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBE8                            
0001DBE8                            
0001DBE8                            SS_FixCamera:				; XREF: Obj09
0001DBE8 3428 000C                  		move.w	$C(a0),d2
0001DBEC 3628 0008                  		move.w	8(a0),d3
0001DBF0 3038 F700                  		move.w	($FFFFF700).w,d0
0001DBF4 0443 00A0                  		subi.w	#$A0,d3
0001DBF8 6500                       		bcs.s	loc_1BBCE
0001DBFA 9043                       		sub.w	d3,d0
0001DBFC 9178 F700                  		sub.w	d0,($FFFFF700).w
0001DC00                            
0001DC00                            loc_1BBCE:
0001DC00 3038 F704                  		move.w	($FFFFF704).w,d0
0001DC04 0442 0070                  		subi.w	#$70,d2
0001DC08 6500                       		bcs.s	locret_1BBDE
0001DC0A 9042                       		sub.w	d2,d0
0001DC0C 9178 F704                  		sub.w	d0,($FFFFF704).w
0001DC10                            
0001DC10                            locret_1BBDE:
0001DC10 4E75                       		rts	
0001DC12                            ; End of function SS_FixCamera
0001DC12                            
0001DC12                            ; ===========================================================================
0001DC12                            
0001DC12                            Obj09_ExitStage:			; XREF: Obj09_Index
0001DC12 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001DC18 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001DC1E 6600                       		bne.s	loc_1BBF4
0001DC20 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DC26                            
0001DC26                            loc_1BBF4:
0001DC26 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001DC2C 6D00                       		blt.s	loc_1BC12
0001DC2E 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001DC34 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001DC3A 5428 0024                  		addq.b	#2,$24(a0)
0001DC3E 317C 003C 0038             		move.w	#$3C,$38(a0)
0001DC44                            
0001DC44                            loc_1BC12:
0001DC44 3038 F780                  		move.w	($FFFFF780).w,d0
0001DC48 D078 F782                  		add.w	($FFFFF782).w,d0
0001DC4C 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DC50 4EB9 0001 5266             		jsr	Sonic_Animate
0001DC56 4EB9 0001 54E0             		jsr	LoadSonicDynPLC
0001DC5C 6100 FF8A                  		bsr.w	SS_FixCamera
0001DC60 4EF9 0000 E7DE             		jmp	DisplaySprite
0001DC66                            ; ===========================================================================
0001DC66                            
0001DC66                            Obj09_Exit2:				; XREF: Obj09_Index
0001DC66 5368 0038                  		subq.w	#1,$38(a0)
0001DC6A 6600                       		bne.s	loc_1BC40
0001DC6C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DC72                            
0001DC72                            loc_1BC40:
0001DC72 4EB9 0001 5266             		jsr	Sonic_Animate
0001DC78 4EB9 0001 54E0             		jsr	LoadSonicDynPLC
0001DC7E 6100 FF68                  		bsr.w	SS_FixCamera
0001DC82 4EF9 0000 E7DE             		jmp	DisplaySprite
0001DC88                            
0001DC88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC88                            
0001DC88                            
0001DC88                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001DC88 2428 000C                  		move.l	$C(a0),d2
0001DC8C 2628 0008                  		move.l	8(a0),d3
0001DC90 1038 F780                  		move.b	($FFFFF780).w,d0
0001DC94 0200 00FC                  		andi.b	#$FC,d0
0001DC98 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DC9E 3828 0010                  		move.w	$10(a0),d4
0001DCA2 48C4                       		ext.l	d4
0001DCA4 E184                       		asl.l	#8,d4
0001DCA6 C1FC 002A                  		muls.w	#$2A,d0
0001DCAA D084                       		add.l	d4,d0
0001DCAC 3828 0012                  		move.w	$12(a0),d4
0001DCB0 48C4                       		ext.l	d4
0001DCB2 E184                       		asl.l	#8,d4
0001DCB4 C3FC 002A                  		muls.w	#$2A,d1
0001DCB8 D284                       		add.l	d4,d1
0001DCBA D680                       		add.l	d0,d3
0001DCBC 6100 0000                  		bsr.w	sub_1BCE8
0001DCC0 6700                       		beq.s	loc_1BCB0
0001DCC2 9680                       		sub.l	d0,d3
0001DCC4 7000                       		moveq	#0,d0
0001DCC6 3140 0010                  		move.w	d0,$10(a0)
0001DCCA 08A8 0001 0022             		bclr	#1,$22(a0)
0001DCD0 D481                       		add.l	d1,d2
0001DCD2 6100 0000                  		bsr.w	sub_1BCE8
0001DCD6 6700                       		beq.s	loc_1BCC6
0001DCD8 9481                       		sub.l	d1,d2
0001DCDA 7200                       		moveq	#0,d1
0001DCDC 3141 0012                  		move.w	d1,$12(a0)
0001DCE0 4E75                       		rts	
0001DCE2                            ; ===========================================================================
0001DCE2                            
0001DCE2                            loc_1BCB0:
0001DCE2 D481                       		add.l	d1,d2
0001DCE4 6100 0000                  		bsr.w	sub_1BCE8
0001DCE8 6700                       		beq.s	loc_1BCD4
0001DCEA 9481                       		sub.l	d1,d2
0001DCEC 7200                       		moveq	#0,d1
0001DCEE 3141 0012                  		move.w	d1,$12(a0)
0001DCF2 08A8 0001 0022             		bclr	#1,$22(a0)
0001DCF8                            
0001DCF8                            loc_1BCC6:
0001DCF8 E080                       		asr.l	#8,d0
0001DCFA E081                       		asr.l	#8,d1
0001DCFC 3140 0010                  		move.w	d0,$10(a0)
0001DD00 3141 0012                  		move.w	d1,$12(a0)
0001DD04 4E75                       		rts	
0001DD06                            ; ===========================================================================
0001DD06                            
0001DD06                            loc_1BCD4:
0001DD06 E080                       		asr.l	#8,d0
0001DD08 E081                       		asr.l	#8,d1
0001DD0A 3140 0010                  		move.w	d0,$10(a0)
0001DD0E 3141 0012                  		move.w	d1,$12(a0)
0001DD12 08E8 0001 0022             		bset	#1,$22(a0)
0001DD18 4E75                       		rts	
0001DD1A                            ; End of function Obj09_Fall
0001DD1A                            
0001DD1A                            
0001DD1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD1A                            
0001DD1A                            
0001DD1A                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001DD1A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DD20 7800                       		moveq	#0,d4
0001DD22 4842                       		swap	d2
0001DD24 3802                       		move.w	d2,d4
0001DD26 4842                       		swap	d2
0001DD28 0644 0044                  		addi.w	#$44,d4
0001DD2C 88FC 0018                  		divu.w	#$18,d4
0001DD30 C8FC 0080                  		mulu.w	#$80,d4
0001DD34 D3C4                       		adda.l	d4,a1
0001DD36 7800                       		moveq	#0,d4
0001DD38 4843                       		swap	d3
0001DD3A 3803                       		move.w	d3,d4
0001DD3C 4843                       		swap	d3
0001DD3E 0644 0014                  		addi.w	#$14,d4
0001DD42 88FC 0018                  		divu.w	#$18,d4
0001DD46 D2C4                       		adda.w	d4,a1
0001DD48 7A00                       		moveq	#0,d5
0001DD4A 1819                       		move.b	(a1)+,d4
0001DD4C 6100                       		bsr.s	sub_1BD30
0001DD4E 1819                       		move.b	(a1)+,d4
0001DD50 6100                       		bsr.s	sub_1BD30
0001DD52 D2FC 007E                  		adda.w	#$7E,a1
0001DD56 1819                       		move.b	(a1)+,d4
0001DD58 6100                       		bsr.s	sub_1BD30
0001DD5A 1819                       		move.b	(a1)+,d4
0001DD5C 6100                       		bsr.s	sub_1BD30
0001DD5E 4A05                       		tst.b	d5
0001DD60 4E75                       		rts	
0001DD62                            ; End of function sub_1BCE8
0001DD62                            
0001DD62                            
0001DD62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD62                            
0001DD62                            
0001DD62                            sub_1BD30:				; XREF: sub_1BCE8
0001DD62 6700                       		beq.s	locret_1BD44
0001DD64 0C04 0028                  		cmpi.b	#$28,d4
0001DD68 6700                       		beq.s	locret_1BD44
0001DD6A 0C04 003A                  		cmpi.b	#$3A,d4
0001DD6E 6500                       		bcs.s	loc_1BD46
0001DD70 0C04 004B                  		cmpi.b	#$4B,d4
0001DD74 6400                       		bcc.s	loc_1BD46
0001DD76                            
0001DD76                            locret_1BD44:
0001DD76 4E75                       		rts	
0001DD78                            ; ===========================================================================
0001DD78                            
0001DD78                            loc_1BD46:
0001DD78 1144 0030                  		move.b	d4,$30(a0)
0001DD7C 2149 0032                  		move.l	a1,$32(a0)
0001DD80 7AFF                       		moveq	#-1,d5
0001DD82 4E75                       		rts	
0001DD84                            ; End of function sub_1BD30
0001DD84                            
0001DD84                            
0001DD84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD84                            
0001DD84                            
0001DD84                            Obj09_ChkItems:				; XREF: Obj09_Display
0001DD84 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DD8A 7800                       		moveq	#0,d4
0001DD8C 3828 000C                  		move.w	$C(a0),d4
0001DD90 0644 0050                  		addi.w	#$50,d4
0001DD94 88FC 0018                  		divu.w	#$18,d4
0001DD98 C8FC 0080                  		mulu.w	#$80,d4
0001DD9C D3C4                       		adda.l	d4,a1
0001DD9E 7800                       		moveq	#0,d4
0001DDA0 3828 0008                  		move.w	8(a0),d4
0001DDA4 0644 0020                  		addi.w	#$20,d4
0001DDA8 88FC 0018                  		divu.w	#$18,d4
0001DDAC D2C4                       		adda.w	d4,a1
0001DDAE 1811                       		move.b	(a1),d4
0001DDB0 6600                       		bne.s	Obj09_ChkCont
0001DDB2 4A28 003A                  		tst.b	$3A(a0)
0001DDB6 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001DDBA 7800                       		moveq	#0,d4
0001DDBC 4E75                       		rts	
0001DDBE                            ; ===========================================================================
0001DDBE                            
0001DDBE                            Obj09_ChkCont:
0001DDBE 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001DDC2 6600                       		bne.s	Obj09_Chk1Up
0001DDC4 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001DDC8 6600                       		bne.s	Obj09_GetCont
0001DDCA 14BC 0001                  		move.b	#1,(a2)
0001DDCE 2549 0004                  		move.l	a1,4(a2)
0001DDD2                            
0001DDD2                            Obj09_GetCont:
0001DDD2 4EB9 0000 AD90             		jsr	CollectRing
0001DDD8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001DDDE 6500                       		bcs.s	Obj09_NoCont
0001DDE0 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001DDE6 6600                       		bne.s	Obj09_NoCont
0001DDE8 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001DDEE 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001DDF4 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001DDF8 303C 00BF                  		move.w	#$BF,d0
0001DDFC 4EB9 0000 11F0             		jsr	(PlaySound).l	; play extra continue sound
0001DE02                            
0001DE02                            Obj09_NoCont:
0001DE02 7800                       		moveq	#0,d4
0001DE04 4E75                       		rts	
0001DE06                            ; ===========================================================================
0001DE06                            
0001DE06                            Obj09_Chk1Up:
0001DE06 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001DE0A 6600                       		bne.s	Obj09_ChkEmer
0001DE0C 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001DE10 6600                       		bne.s	Obj09_Get1Up
0001DE12 14BC 0003                  		move.b	#3,(a2)
0001DE16 2549 0004                  		move.l	a1,4(a2)
0001DE1A                            
0001DE1A                            Obj09_Get1Up:
0001DE1A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001DE1E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001DE22 303C 0088                  		move.w	#$88,d0
0001DE26 4EB9 0000 11F0             		jsr	(PlaySound).l	; play extra life music
0001DE2C 7800                       		moveq	#0,d4
0001DE2E 4E75                       		rts	
0001DE30                            ; ===========================================================================
0001DE30                            
0001DE30                            Obj09_ChkEmer:
0001DE30 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001DE34 6500                       		bcs.s	Obj09_ChkGhost
0001DE36 0C04 0040                  		cmpi.b	#$40,d4
0001DE3A 6200                       		bhi.s	Obj09_ChkGhost
0001DE3C 6100 F6AE                  		bsr.w	SS_RemoveCollectedItem
0001DE40 6600                       		bne.s	Obj09_GetEmer
0001DE42 14BC 0005                  		move.b	#5,(a2)
0001DE46 2549 0004                  		move.l	a1,4(a2)
0001DE4A                            
0001DE4A                            Obj09_GetEmer:
0001DE4A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001DE50 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001DE52 0404 003B                  		subi.b	#$3B,d4
0001DE56 7000                       		moveq	#0,d0
0001DE58 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001DE5C 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001DE60 1584 0000                  		move.b	d4,(a2,d0.w)
0001DE64 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001DE68 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001DE6E 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001DE74                            
0001DE74                            Obj09_NoEmer:
0001DE74 303C 0093                  		move.w	#$93,d0
0001DE78 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play emerald music
0001DE7E 7800                       		moveq	#0,d4
0001DE80 4E75                       		rts	
0001DE82                            ; ===========================================================================
0001DE82                            
0001DE82                            Obj09_ChkGhost:
0001DE82 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001DE86 6600                       		bne.s	Obj09_ChkGhostTag
0001DE88 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001DE8E                            
0001DE8E                            Obj09_ChkGhostTag:
0001DE8E 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001DE92 6600                       		bne.s	Obj09_NoGhost
0001DE94 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001DE9A 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001DE9C 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001DEA2                            
0001DEA2                            Obj09_NoGhost:
0001DEA2 78FF                       		moveq	#-1,d4
0001DEA4 4E75                       		rts	
0001DEA6                            ; ===========================================================================
0001DEA6                            
0001DEA6                            Obj09_MakeGhostSolid:
0001DEA6 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001DEAC 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001DEAE 43F9 00FF 1020             		lea	($FF1020).l,a1
0001DEB4 723F                       		moveq	#$3F,d1
0001DEB6                            
0001DEB6                            Obj09_GhostLoop2:
0001DEB6 743F                       		moveq	#$3F,d2
0001DEB8                            
0001DEB8                            Obj09_GhostLoop:
0001DEB8 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001DEBC 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001DEBE 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001DEC2                            
0001DEC2                            Obj09_NoReplace:
0001DEC2 5249                       		addq.w	#1,a1
0001DEC4 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001DEC8 43E9 0040                  		lea	$40(a1),a1
0001DECC 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001DED0                            
0001DED0                            Obj09_GhostNotSolid:
0001DED0 4228 003A                  		clr.b	$3A(a0)
0001DED4 7800                       		moveq	#0,d4
0001DED6 4E75                       		rts	
0001DED8                            ; End of function Obj09_ChkItems
0001DED8                            
0001DED8                            
0001DED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DED8                            
0001DED8                            
0001DED8                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001DED8 1028 0030                  		move.b	$30(a0),d0
0001DEDC 6600                       		bne.s	Obj09_ChkBumper
0001DEDE 5328 0036                  		subq.b	#1,$36(a0)
0001DEE2 6A00                       		bpl.s	loc_1BEA0
0001DEE4 117C 0000 0036             		move.b	#0,$36(a0)
0001DEEA                            
0001DEEA                            loc_1BEA0:
0001DEEA 5328 0037                  		subq.b	#1,$37(a0)
0001DEEE 6A00                       		bpl.s	locret_1BEAC
0001DEF0 117C 0000 0037             		move.b	#0,$37(a0)
0001DEF6                            
0001DEF6                            locret_1BEAC:
0001DEF6 4E75                       		rts	
0001DEF8                            ; ===========================================================================
0001DEF8                            
0001DEF8                            Obj09_ChkBumper:
0001DEF8 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001DEFC 6600                       		bne.s	Obj09_GOAL	
0001DEFE 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
0001DF04 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001DF0A 2228 0032                  		move.l	$32(a0),d1
0001DF0E 0481 00FF 0001             		subi.l	#$FF0001,d1
0001DF14 3401                       		move.w	d1,d2
0001DF16 0241 007F                  		andi.w	#$7F,d1
0001DF1A C2FC 0018                  		mulu.w	#$18,d1
0001DF1E 0441 0014                  		subi.w	#$14,d1
0001DF22 EE4A                       		lsr.w	#7,d2
0001DF24 0242 007F                  		andi.w	#$7F,d2
0001DF28 C4FC 0018                  		mulu.w	#$18,d2
0001DF2C 0442 0044                  		subi.w	#$44,d2
0001DF30 9268 0008                  		sub.w	8(a0),d1
0001DF34 9468 000C                  		sub.w	$C(a0),d2
0001DF38 4EB9 0000 2C94             		jsr	(CalcAngle).l
0001DF3E 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DF44 C3FC F900                  		muls.w	#-$700,d1
0001DF48 E081                       		asr.l	#8,d1
0001DF4A 3141 0010                  		move.w	d1,$10(a0)
0001DF4E C1FC F900                  		muls.w	#-$700,d0
0001DF52 E080                       		asr.l	#8,d0
0001DF54 3140 0012                  		move.w	d0,$12(a0)
0001DF58 08E8 0001 0022             		bset	#1,$22(a0)
0001DF5E 6100 F58C                  		bsr.w	SS_RemoveCollectedItem
0001DF62 6600                       		bne.s	Obj09_BumpSnd
0001DF64 14BC 0002                  		move.b	#2,(a2)
0001DF68 2028 0032                  		move.l	$32(a0),d0
0001DF6C 5380                       		subq.l	#1,d0
0001DF6E 2540 0004                  		move.l	d0,4(a2)
0001DF72                            
0001DF72                            Obj09_BumpSnd:
0001DF72 303C 00B4                  		move.w	#$B4,d0
0001DF76 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play bumper sound
0001DF7C                            ; ===========================================================================
0001DF7C                            
0001DF7C                            Obj09_GOAL:
0001DF7C 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001DF80 6600                       		bne.s	Obj09_UPblock
0001DF82 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001DF86 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001DF8C 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001DF92 303C 00A8                  		move.w	#$A8,d0		; change item
0001DF96 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001DF9C 4E75                       		rts	
0001DF9E                            ; ===========================================================================
0001DF9E                            
0001DF9E                            Obj09_UPblock:
0001DF9E 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001DFA2 6600                       		bne.s	Obj09_DOWNblock
0001DFA4 4A28 0036                  		tst.b	$36(a0)
0001DFA8 6600 0000                  		bne.w	Obj09_NoGlass
0001DFAC 117C 001E 0036             		move.b	#$1E,$36(a0)
0001DFB2 0838 0006 F783             		btst	#6,($FFFFF783).w
0001DFB8 6700                       		beq.s	Obj09_UPsnd
0001DFBA E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001DFBE 2268 0032                  		movea.l	$32(a0),a1
0001DFC2 5389                       		subq.l	#1,a1
0001DFC4 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001DFC8                            
0001DFC8                            Obj09_UPsnd:
0001DFC8 303C 00A9                  		move.w	#$A9,d0
0001DFCC 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play up/down sound
0001DFD2                            ; ===========================================================================
0001DFD2                            
0001DFD2                            Obj09_DOWNblock:
0001DFD2 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001DFD6 6600                       		bne.s	Obj09_Rblock
0001DFD8 4A28 0036                  		tst.b	$36(a0)
0001DFDC 6600 0000                  		bne.w	Obj09_NoGlass
0001DFE0 117C 001E 0036             		move.b	#$1E,$36(a0)
0001DFE6 0838 0006 F783             		btst	#6,($FFFFF783).w
0001DFEC 6600                       		bne.s	Obj09_DOWNsnd
0001DFEE E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001DFF2 2268 0032                  		movea.l	$32(a0),a1
0001DFF6 5389                       		subq.l	#1,a1
0001DFF8 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001DFFC                            
0001DFFC                            Obj09_DOWNsnd:
0001DFFC 303C 00A9                  		move.w	#$A9,d0
0001E000 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E006                            ; ===========================================================================
0001E006                            
0001E006                            Obj09_Rblock:
0001E006 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001E00A 6600                       		bne.s	Obj09_ChkGlass
0001E00C 4A28 0037                  		tst.b	$37(a0)
0001E010 6600 0000                  		bne.w	Obj09_NoGlass
0001E014 117C 001E 0037             		move.b	#$1E,$37(a0)
0001E01A 6100 F4D0                  		bsr.w	SS_RemoveCollectedItem
0001E01E 6600                       		bne.s	Obj09_RevStage
0001E020 14BC 0004                  		move.b	#4,(a2)
0001E024 2028 0032                  		move.l	$32(a0),d0
0001E028 5380                       		subq.l	#1,d0
0001E02A 2540 0004                  		move.l	d0,4(a2)
0001E02E                            
0001E02E                            Obj09_RevStage:
0001E02E 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001E032 303C 00A9                  		move.w	#$A9,d0
0001E036 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play sound
0001E03C                            ; ===========================================================================
0001E03C                            
0001E03C                            Obj09_ChkGlass:
0001E03C 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001E040 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001E042 0C00 002E                  		cmpi.b	#$2E,d0
0001E046 6700                       		beq.s	Obj09_Glass
0001E048 0C00 002F                  		cmpi.b	#$2F,d0
0001E04C 6700                       		beq.s	Obj09_Glass
0001E04E 0C00 0030                  		cmpi.b	#$30,d0
0001E052 6600 0000                  		bne.w	Obj09_NoGlass	; if not, branch
0001E056                            
0001E056                            Obj09_Glass:
0001E056 0C38 0007 F5CE             		cmpi.b	#face_happy,(SonimeSST+sonime_face).w
0001E05C 6700                       		beq.s	@happy
0001E05E 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
0001E064 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E06A 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
0001E0C0                            
0001E0C0                            	@happy:
0001E0C0 6100 F42A                  		bsr.w	SS_RemoveCollectedItem
0001E0C4 6600                       		bne.s	Obj09_GlassSnd
0001E0C6 14BC 0006                  		move.b	#6,(a2)
0001E0CA 2268 0032                  		movea.l	$32(a0),a1
0001E0CE 5389                       		subq.l	#1,a1
0001E0D0 2549 0004                  		move.l	a1,4(a2)
0001E0D4 1011                       		move.b	(a1),d0
0001E0D6 5200                       		addq.b	#1,d0		; change glass type when touched
0001E0D8 0C00 0030                  		cmpi.b	#$30,d0
0001E0DC 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001E0DE 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001E0E0                            
0001E0E0                            Obj09_GlassUpdate:
0001E0E0 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001E0E4                            
0001E0E4                            Obj09_GlassSnd:
0001E0E4 303C 00BA                  		move.w	#$BA,d0
0001E0E8 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play glass block sound
0001E0EE                            ; ===========================================================================
0001E0EE                            
0001E0EE                            Obj09_NoGlass:
0001E0EE 4E75                       		rts	
0001E0F0                            ; End of function Obj09_ChkItems2
0001E0F0                            
0001E0F0                            ; ===========================================================================
0001E0F0                            ; ---------------------------------------------------------------------------
0001E0F0                            ; Object 10 - blank
0001E0F0                            ; ---------------------------------------------------------------------------
0001E0F0                            
0001E0F0                            Obj10:					; XREF: Obj_Index
0001E0F0 4E75                       		rts	
0001E0F2                            ; ---------------------------------------------------------------------------
0001E0F2                            ; Subroutine to	animate	level graphics
0001E0F2                            ; ---------------------------------------------------------------------------
0001E0F2                            
0001E0F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E0F2                            
0001E0F2                            
0001E0F2                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001E0F2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E0F6 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001E0F8 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E0FE 6100 0000                  		bsr.w	AniArt_GiantRing
0001E102 7000                       		moveq	#0,d0
0001E104 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E108 D040                       		add.w	d0,d0
0001E10A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001E10E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001E112                            ; ===========================================================================
0001E112                            
0001E112                            AniArt_Pause:
0001E112 4E75                       		rts	
0001E114                            ; End of function AniArt_Load
0001E114                            
0001E114                            ; ===========================================================================
0001E114 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001E118 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001E11C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001E120 0000                       		dc.w AniArt_Ending-AniArt_Index
0001E122                            ; ===========================================================================
0001E122                            ; ---------------------------------------------------------------------------
0001E122                            ; Animated pattern routine - Green Hill
0001E122                            ; ---------------------------------------------------------------------------
0001E122                            
0001E122                            AniArt_GHZ:				; XREF: AniArt_Index
0001E122 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E126 6A00                       		bpl.s	loc_1C08A
0001E128 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001E12E 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001E134 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E138 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E13C 0240 0001                  		andi.w	#1,d0
0001E140 6700                       		beq.s	loc_1C078
0001E142 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001E146                            
0001E146                            loc_1C078:
0001E146 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001E150 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001E154 6000 0000                  		bra.w	LoadTiles
0001E158                            ; ===========================================================================
0001E158                            
0001E158                            loc_1C08A:
0001E158 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E15C 6A00                       		bpl.s	loc_1C0C0
0001E15E 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001E164 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E16A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E16E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E172 0240 0001                  		andi.w	#1,d0
0001E176 6700                       		beq.s	loc_1C0AE
0001E178 43E9 0200                  		lea	$200(a1),a1
0001E17C                            
0001E17C                            loc_1C0AE:
0001E17C 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E186 323C 000F                  		move.w	#$F,d1
0001E18A 6000 0000                  		bra.w	LoadTiles
0001E18E                            ; ===========================================================================
0001E18E                            
0001E18E                            loc_1C0C0:
0001E18E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E192 6A00                       		bpl.s	locret_1C10C
0001E194 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E19A 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E19E 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E1A2 0240 0003                  		andi.w	#3,d0
0001E1A6 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001E1AA 0800 0000                  		btst	#0,d0
0001E1AE 6600                       		bne.s	loc_1C0E8
0001E1B0 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001E1B6                            
0001E1B6                            loc_1C0E8:
0001E1B6 EF48                       		lsl.w	#7,d0
0001E1B8 3200                       		move.w	d0,d1
0001E1BA D040                       		add.w	d0,d0
0001E1BC D041                       		add.w	d1,d0
0001E1BE 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E1C8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E1CE 43F1 0000                  		lea	(a1,d0.w),a1
0001E1D2 323C 000B                  		move.w	#$B,d1
0001E1D6 6100 0000                  		bsr.w	LoadTiles
0001E1DA                            
0001E1DA                            locret_1C10C:
0001E1DA 4E75                       		rts	
0001E1DC                            ; ===========================================================================
0001E1DC 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001E1E0                            ; ===========================================================================
0001E1E0                            ; ---------------------------------------------------------------------------
0001E1E0                            ; Animated pattern routine - Marble
0001E1E0                            ; ---------------------------------------------------------------------------
0001E1E0                            
0001E1E0                            AniArt_MZ:				; XREF: AniArt_Index
0001E1E0 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E1E4 6A00                       		bpl.s	loc_1C150
0001E1E6 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001E1EC 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001E1F2 7000                       		moveq	#0,d0
0001E1F4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E1F8 5200                       		addq.b	#1,d0
0001E1FA 0C00 0003                  		cmpi.b	#3,d0
0001E1FE 6600                       		bne.s	loc_1C134
0001E200 7000                       		moveq	#0,d0
0001E202                            
0001E202                            loc_1C134:
0001E202 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001E206 C0FC 0100                  		mulu.w	#$100,d0
0001E20A D2C0                       		adda.w	d0,a1
0001E20C 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001E216 323C 0007                  		move.w	#7,d1
0001E21A 6100 0000                  		bsr.w	LoadTiles
0001E21E                            
0001E21E                            loc_1C150:
0001E21E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E222 6A00                       		bpl.s	loc_1C1AE
0001E224 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001E22A 7000                       		moveq	#0,d0
0001E22C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E230 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001E236 EE58                       		ror.w	#7,d0
0001E238 D8C0                       		adda.w	d0,a4
0001E23A 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001E244 7600                       		moveq	#0,d3
0001E246 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001E24A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E24E 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001E252 343C 0003                  		move.w	#3,d2
0001E256                            
0001E256                            loc_1C188:
0001E256 3003                       		move.w	d3,d0
0001E258 D040                       		add.w	d0,d0
0001E25A 0240 001E                  		andi.w	#$1E,d0
0001E25E 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001E264 3033 0000                  		move.w	(a3,d0.w),d0
0001E268 47F3 0000                  		lea	(a3,d0.w),a3
0001E26C 224C                       		movea.l	a4,a1
0001E26E 323C 001F                  		move.w	#$1F,d1
0001E272 4E93                       		jsr	(a3)
0001E274 5843                       		addq.w	#4,d3
0001E276 51CA FFDE                  		dbf	d2,loc_1C188
0001E27A 4E75                       		rts	
0001E27C                            ; ===========================================================================
0001E27C                            
0001E27C                            loc_1C1AE:
0001E27C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E280 6A00 0000                  		bpl.w	locret_1C1EA
0001E284 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E28A 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E290 7000                       		moveq	#0,d0
0001E292 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E296 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E29A 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E2A0 C0FC 00C0                  		mulu.w	#$C0,d0
0001E2A4 D2C0                       		adda.w	d0,a1
0001E2A6 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E2B0 323C 0005                  		move.w	#5,d1
0001E2B4 6000 0000                  		bra.w	LoadTiles
0001E2B8                            ; ===========================================================================
0001E2B8                            
0001E2B8                            locret_1C1EA:
0001E2B8 4E75                       		rts	
0001E2BA                            ; ===========================================================================
0001E2BA                            ; ---------------------------------------------------------------------------
0001E2BA                            ; Animated pattern routine - Scrap Brain
0001E2BA                            ; ---------------------------------------------------------------------------
0001E2BA                            
0001E2BA                            AniArt_SBZ:				; XREF: AniArt_Index
0001E2BA 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E2BE 6700                       		beq.s	loc_1C1F8
0001E2C0 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E2C4 6000                       		bra.s	loc_1C250
0001E2C6                            ; ===========================================================================
0001E2C6                            
0001E2C6                            loc_1C1F8:
0001E2C6 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E2CA 6A00                       		bpl.s	loc_1C250
0001E2CC 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E2D2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E2D8 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E2E2 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E2E6 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E2EA 0240 0007                  		andi.w	#7,d0
0001E2EE 6700                       		beq.s	loc_1C234
0001E2F0 5340                       		subq.w	#1,d0
0001E2F2 C0FC 0180                  		mulu.w	#$180,d0
0001E2F6 43F1 0000                  		lea	(a1,d0.w),a1
0001E2FA 323C 000B                  		move.w	#$B,d1
0001E2FE 6000 0000                  		bra.w	LoadTiles
0001E302                            ; ===========================================================================
0001E302                            
0001E302                            loc_1C234:
0001E302 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001E308                            
0001E308                            loc_1C23A:
0001E308 323C 0005                  		move.w	#5,d1
0001E30C 6100 0000                  		bsr.w	LoadTiles
0001E310 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E316 323C 0005                  		move.w	#5,d1
0001E31A 6000 0000                  		bra.w	LoadTiles
0001E31E                            ; ===========================================================================
0001E31E                            
0001E31E                            loc_1C250:
0001E31E 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001E322 6700                       		beq.s	loc_1C25C
0001E324 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E328 6000                       		bra.s	locret_1C2A0
0001E32A                            ; ===========================================================================
0001E32A                            
0001E32A                            loc_1C25C:
0001E32A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E32E 6A00                       		bpl.s	locret_1C2A0
0001E330 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E336 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E33C 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001E346 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E34A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E34E 0240 0007                  		andi.w	#7,d0
0001E352 6700                       		beq.s	loc_1C298
0001E354 5340                       		subq.w	#1,d0
0001E356 C0FC 0180                  		mulu.w	#$180,d0
0001E35A 43F1 0000                  		lea	(a1,d0.w),a1
0001E35E 323C 000B                  		move.w	#$B,d1
0001E362 6000 0000                  		bra.w	LoadTiles
0001E366                            ; ===========================================================================
0001E366                            
0001E366                            loc_1C298:
0001E366 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001E36C 609A                       		bra.s	loc_1C23A
0001E36E                            ; ===========================================================================
0001E36E                            
0001E36E                            locret_1C2A0:
0001E36E 4E75                       		rts	
0001E370                            ; ===========================================================================
0001E370                            ; ---------------------------------------------------------------------------
0001E370                            ; Animated pattern routine - ending sequence
0001E370                            ; ---------------------------------------------------------------------------
0001E370                            
0001E370                            AniArt_Ending:				; XREF: AniArt_Index
0001E370 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E374 6A00                       		bpl.s	loc_1C2F4
0001E376 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E37C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E382 45F8 9400                  		lea	($FFFF9400).w,a2
0001E386 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E38A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E38E 0240 0001                  		andi.w	#1,d0
0001E392 6700                       		beq.s	loc_1C2CE
0001E394 43E9 0200                  		lea	$200(a1),a1
0001E398 45EA 0200                  		lea	$200(a2),a2
0001E39C                            
0001E39C                            loc_1C2CE:
0001E39C 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E3A6 323C 000F                  		move.w	#$F,d1
0001E3AA 6100 0000                  		bsr.w	LoadTiles
0001E3AE 224A                       		movea.l	a2,a1
0001E3B0 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001E3BA 323C 000F                  		move.w	#$F,d1
0001E3BE 6000 0000                  		bra.w	LoadTiles
0001E3C2                            ; ===========================================================================
0001E3C2                            
0001E3C2                            loc_1C2F4:
0001E3C2 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E3C6 6A00                       		bpl.s	loc_1C33C
0001E3C8 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E3CE 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E3D2 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E3D6 0240 0007                  		andi.w	#7,d0
0001E3DA 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001E3DE EF48                       		lsl.w	#7,d0
0001E3E0 3200                       		move.w	d0,d1
0001E3E2 D040                       		add.w	d0,d0
0001E3E4 D041                       		add.w	d1,d0
0001E3E6 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E3F0 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E3F6 43F1 0000                  		lea	(a1,d0.w),a1
0001E3FA 323C 000B                  		move.w	#$B,d1
0001E3FE 6000 0000                  		bra.w	LoadTiles
0001E402                            ; ===========================================================================
0001E402 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001E40A                            ; ===========================================================================
0001E40A                            
0001E40A                            loc_1C33C:
0001E40A 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001E40E 6A00                       		bpl.s	loc_1C37A
0001E410 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001E416 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001E41A 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001E41E 0240 0003                  		andi.w	#3,d0
0001E422 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001E426 E148                       		lsl.w	#8,d0
0001E428 D040                       		add.w	d0,d0
0001E42A 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001E434 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001E438 43F1 0000                  		lea	(a1,d0.w),a1
0001E43C 323C 000F                  		move.w	#$F,d1
0001E440 6000 0000                  		bra.w	LoadTiles
0001E444                            ; ===========================================================================
0001E444 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001E448                            ; ===========================================================================
0001E448                            
0001E448                            loc_1C37A:
0001E448 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001E44C 6A00                       		bpl.s	locret_1C3B4
0001E44E 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001E454 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001E458 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001E45C 0240 0003                  		andi.w	#3,d0
0001E460 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001E464 E148                       		lsl.w	#8,d0
0001E466 D040                       		add.w	d0,d0
0001E468 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001E472 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001E476 43F1 0000                  		lea	(a1,d0.w),a1
0001E47A 323C 000F                  		move.w	#$F,d1
0001E47E 6000 0000                  		bra.w	LoadTiles
0001E482                            ; ===========================================================================
0001E482                            
0001E482                            locret_1C3B4:
0001E482 4E75                       		rts	
0001E484                            ; ===========================================================================
0001E484                            
0001E484                            AniArt_none:				; XREF: AniArt_Index
0001E484 4E75                       		rts	
0001E486                            
0001E486                            ; ---------------------------------------------------------------------------
0001E486                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001E486                            ; ---------------------------------------------------------------------------
0001E486                            
0001E486                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E486                            
0001E486                            
0001E486                            LoadTiles:
0001E486 2C99                       		move.l	(a1)+,(a6)
0001E488 2C99                       		move.l	(a1)+,(a6)
0001E48A 2C99                       		move.l	(a1)+,(a6)
0001E48C 2C99                       		move.l	(a1)+,(a6)
0001E48E 2C99                       		move.l	(a1)+,(a6)
0001E490 2C99                       		move.l	(a1)+,(a6)
0001E492 2C99                       		move.l	(a1)+,(a6)
0001E494 2C99                       		move.l	(a1)+,(a6)
0001E496 51C9 FFEE                  		dbf	d1,LoadTiles
0001E49A 4E75                       		rts	
0001E49C                            ; End of function LoadTiles
0001E49C                            
0001E49C                            ; ===========================================================================
0001E49C                            ; ---------------------------------------------------------------------------
0001E49C                            ; Animated pattern routine - more Marble Zone
0001E49C                            ; ---------------------------------------------------------------------------
0001E49C 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001E4A0 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001E4A4 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001E4A8 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001E4AC 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001E4B0 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001E4B4 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001E4B8 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001E4BC                            ; ===========================================================================
0001E4BC                            
0001E4BC                            loc_1C3EE:				; XREF: AniArt_MZextra
0001E4BC 2C91                       		move.l	(a1),(a6)
0001E4BE 43E9 0010                  		lea	$10(a1),a1
0001E4C2 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001E4C6 4E75                       		rts	
0001E4C8                            ; ===========================================================================
0001E4C8                            
0001E4C8                            loc_1C3FA:				; XREF: AniArt_MZextra
0001E4C8 2029 0002                  		move.l	2(a1),d0
0001E4CC 1029 0001                  		move.b	1(a1),d0
0001E4D0 E098                       		ror.l	#8,d0
0001E4D2 2C80                       		move.l	d0,(a6)
0001E4D4 43E9 0010                  		lea	$10(a1),a1
0001E4D8 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001E4DC 4E75                       		rts	
0001E4DE                            ; ===========================================================================
0001E4DE                            
0001E4DE                            loc_1C410:				; XREF: AniArt_MZextra
0001E4DE 2CA9 0002                  		move.l	2(a1),(a6)
0001E4E2 43E9 0010                  		lea	$10(a1),a1
0001E4E6 51C9 FFF6                  		dbf	d1,loc_1C410
0001E4EA 4E75                       		rts	
0001E4EC                            ; ===========================================================================
0001E4EC                            
0001E4EC                            loc_1C41E:				; XREF: AniArt_MZextra
0001E4EC 2029 0004                  		move.l	4(a1),d0
0001E4F0 1029 0003                  		move.b	3(a1),d0
0001E4F4 E098                       		ror.l	#8,d0
0001E4F6 2C80                       		move.l	d0,(a6)
0001E4F8 43E9 0010                  		lea	$10(a1),a1
0001E4FC 51C9 FFEE                  		dbf	d1,loc_1C41E
0001E500 4E75                       		rts	
0001E502                            ; ===========================================================================
0001E502                            
0001E502                            loc_1C434:				; XREF: AniArt_MZextra
0001E502 2CA9 0004                  		move.l	4(a1),(a6)
0001E506 43E9 0010                  		lea	$10(a1),a1
0001E50A 51C9 FFF6                  		dbf	d1,loc_1C434
0001E50E 4E75                       		rts	
0001E510                            ; ===========================================================================
0001E510                            
0001E510                            loc_1C442:				; XREF: AniArt_MZextra
0001E510 2029 0006                  		move.l	6(a1),d0
0001E514 1029 0005                  		move.b	5(a1),d0
0001E518 E098                       		ror.l	#8,d0
0001E51A 2C80                       		move.l	d0,(a6)
0001E51C 43E9 0010                  		lea	$10(a1),a1
0001E520 51C9 FFEE                  		dbf	d1,loc_1C442
0001E524 4E75                       		rts	
0001E526                            ; ===========================================================================
0001E526                            
0001E526                            loc_1C458:				; XREF: AniArt_MZextra
0001E526 2CA9 0006                  		move.l	6(a1),(a6)
0001E52A 43E9 0010                  		lea	$10(a1),a1
0001E52E 51C9 FFF6                  		dbf	d1,loc_1C458
0001E532 4E75                       		rts	
0001E534                            ; ===========================================================================
0001E534                            
0001E534                            loc_1C466:				; XREF: AniArt_MZextra
0001E534 2029 0008                  		move.l	8(a1),d0
0001E538 1029 0007                  		move.b	7(a1),d0
0001E53C E098                       		ror.l	#8,d0
0001E53E 2C80                       		move.l	d0,(a6)
0001E540 43E9 0010                  		lea	$10(a1),a1
0001E544 51C9 FFEE                  		dbf	d1,loc_1C466
0001E548 4E75                       		rts	
0001E54A                            ; ===========================================================================
0001E54A                            
0001E54A                            loc_1C47C:				; XREF: AniArt_MZextra
0001E54A 2CA9 0008                  		move.l	8(a1),(a6)
0001E54E 43E9 0010                  		lea	$10(a1),a1
0001E552 51C9 FFF6                  		dbf	d1,loc_1C47C
0001E556 4E75                       		rts	
0001E558                            ; ===========================================================================
0001E558                            
0001E558                            loc_1C48A:				; XREF: AniArt_MZextra
0001E558 2029 000A                  		move.l	$A(a1),d0
0001E55C 1029 0009                  		move.b	9(a1),d0
0001E560 E098                       		ror.l	#8,d0
0001E562 2C80                       		move.l	d0,(a6)
0001E564 43E9 0010                  		lea	$10(a1),a1
0001E568 51C9 FFEE                  		dbf	d1,loc_1C48A
0001E56C 4E75                       		rts	
0001E56E                            ; ===========================================================================
0001E56E                            
0001E56E                            loc_1C4A0:				; XREF: AniArt_MZextra
0001E56E 2CA9 000A                  		move.l	$A(a1),(a6)
0001E572 43E9 0010                  		lea	$10(a1),a1
0001E576 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001E57A 4E75                       		rts	
0001E57C                            ; ===========================================================================
0001E57C                            
0001E57C                            loc_1C4AE:				; XREF: AniArt_MZextra
0001E57C 2029 000C                  		move.l	$C(a1),d0
0001E580 1029 000B                  		move.b	$B(a1),d0
0001E584 E098                       		ror.l	#8,d0
0001E586 2C80                       		move.l	d0,(a6)
0001E588 43E9 0010                  		lea	$10(a1),a1
0001E58C 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001E590 4E75                       		rts	
0001E592                            ; ===========================================================================
0001E592                            
0001E592                            loc_1C4C4:				; XREF: AniArt_MZextra
0001E592 2CA9 000C                  		move.l	$C(a1),(a6)
0001E596 43E9 0010                  		lea	$10(a1),a1
0001E59A 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001E59E 4E75                       		rts	
0001E5A0                            ; ===========================================================================
0001E5A0                            
0001E5A0                            loc_1C4D2:				; XREF: AniArt_MZextra
0001E5A0 2029 000C                  		move.l	$C(a1),d0
0001E5A4 E198                       		rol.l	#8,d0
0001E5A6 1011                       		move.b	0(a1),d0
0001E5A8 2C80                       		move.l	d0,(a6)
0001E5AA 43E9 0010                  		lea	$10(a1),a1
0001E5AE 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001E5B2 4E75                       		rts	
0001E5B4                            ; ===========================================================================
0001E5B4                            
0001E5B4                            loc_1C4E8:				; XREF: AniArt_MZextra
0001E5B4 3CA9 000E                  		move.w	$E(a1),(a6)
0001E5B8 3C91                       		move.w	0(a1),(a6)
0001E5BA 43E9 0010                  		lea	$10(a1),a1
0001E5BE 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001E5C2 4E75                       		rts	
0001E5C4                            ; ===========================================================================
0001E5C4                            
0001E5C4                            loc_1C4FA:				; XREF: AniArt_MZextra
0001E5C4 2011                       		move.l	0(a1),d0
0001E5C6 1029 000F                  		move.b	$F(a1),d0
0001E5CA E098                       		ror.l	#8,d0
0001E5CC 2C80                       		move.l	d0,(a6)
0001E5CE 43E9 0010                  		lea	$10(a1),a1
0001E5D2 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001E5D6 4E75                       		rts	
0001E5D8                            
0001E5D8                            ; ---------------------------------------------------------------------------
0001E5D8                            ; Animated pattern routine - giant ring
0001E5D8                            ; ---------------------------------------------------------------------------
0001E5D8                            
0001E5D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E5D8                            
0001E5D8                            
0001E5D8                            AniArt_GiantRing:			; XREF: AniArt_Load
0001E5D8 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001E5DC 6600                       		bne.s	loc_1C518
0001E5DE 4E75                       		rts	
0001E5E0                            ; ===========================================================================
0001E5E0                            
0001E5E0                            loc_1C518:
0001E5E0 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001E5E6 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001E5EC 7000                       		moveq	#0,d0
0001E5EE 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001E5F2 43F1 0000                  		lea	(a1,d0.w),a1
0001E5F6 0640 8000                  		addi.w	#$8000,d0
0001E5FA E588                       		lsl.l	#2,d0
0001E5FC E448                       		lsr.w	#2,d0
0001E5FE 0040 4000                  		ori.w	#$4000,d0
0001E602 4840                       		swap	d0
0001E604 2D40 0004                  		move.l	d0,4(a6)
0001E608 323C 000D                  		move.w	#$D,d1
0001E60C 6000 FE78                  		bra.w	LoadTiles
0001E610                            ; End of function AniArt_GiantRing
0001E610                            
0001E610                            ; ===========================================================================
0001E610                            Obj21:                    ; XREF: Obj_Index
0001E610 4E75                               rts
0001E612                            ; ===========================================================================
0001E612                            ; ---------------------------------------------------------------------------
0001E612                            ; HUD Object code - SCORE, TIME, RINGS
0001E612                            ; ---------------------------------------------------------------------------
0001E612                            loc_40804:
0001E612 4A78 FE20                      tst.w    ($FFFFFE20).w
0001E616 6700                           beq.s    loc_40820
0001E618 7200                           moveq    #0,d1
0001E61A 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001E620 6600                           bne.s    BranchTo_loc_40836
0001E622 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001E628 6600                           bne.s    BranchTo_loc_40836
0001E62A 5441                           addq.w    #2,d1
0001E62C                            
0001E62C                            BranchTo_loc_40836
0001E62C 6000                           bra.s    loc_40836
0001E62E                            ; ===========================================================================
0001E62E                            
0001E62E                            loc_40820:
0001E62E 7200                           moveq    #0,d1
0001E630 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001E636 6600                           bne.s    loc_40836
0001E638 5241                           addq.w    #1,d1
0001E63A 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001E640 6600                           bne.s    loc_40836
0001E642 5441                           addq.w    #2,d1
0001E644                            
0001E644                            loc_40836:
0001E644 363C 0090                      move.w    #$90,d3
0001E648 343C 0108                      move.w    #$108,d2
0001E64C 43F9 0000 0000                 lea    (Map_Obj21).l,a1
0001E652 367C 06CA                      movea.w    #$6CA,a3
0001E656 D241                           add.w    d1,d1
0001E658 D2F1 1000                      adda.w    (a1,d1.w),a1
0001E65C 7200                           moveq    #0,d1
0001E65E 1219                           move.b    (a1)+,d1
0001E660 5301                           subq.b    #1,d1
0001E662 6B00                           bmi.s    return_40858
0001E664 4EB9 0000 EA88                 jsr    sub_D762
0001E66A                            
0001E66A                            return_40858:
0001E66A 4E75                           rts
0001E66C                            ; End of function h
0001E66C                            ; ===========================================================================
0001E66C                            ; ---------------------------------------------------------------------------
0001E66C                            ; Sprite mappings - SCORE, TIME, RINGS
0001E66C                            ; ---------------------------------------------------------------------------
0001E66C                            Map_obj21:
0001E66C                            	include "_maps\obj21.asm"
0001E66C                            ; ---------------------------------------------------------------------------
0001E66C                            ; Sprite mappings - SCORE, TIME, RINGS
0001E66C                            ; ---------------------------------------------------------------------------
0001E66C 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001E670 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001E674 0A                         byte_1C5BC:	dc.b $A
0001E675 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E67A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E67F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E684 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001E689 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E68E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001E693 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001E698 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E69D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E6A2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E6A7 00                         		dc.b 0
0001E6A8 0A                         byte_1C5F0:	dc.b $A
0001E6A9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E6AE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E6B3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E6B8 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001E6BD 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E6C2 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001E6C7 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001E6CC A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E6D1 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E6D6 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E6DB 00                         		dc.b 0
0001E6DC 0A                         byte_1C624:	dc.b $A
0001E6DD 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E6E2 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E6E7 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E6EC 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001E6F1 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E6F6 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001E6FB A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001E700 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E705 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E70A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E70F 00                         		dc.b 0
0001E710 0A                         byte_1C658:	dc.b $A
0001E711 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E716 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E71B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E720 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001E725 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E72A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001E72F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001E734 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E739 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E73E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E744 00                         		even
0001E744 00                         		even
0001E744                            
0001E744                            ; ---------------------------------------------------------------------------
0001E744                            ; Add points subroutine
0001E744                            ; ---------------------------------------------------------------------------
0001E744                            
0001E744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E744                            
0001E744                            
0001E744                            AddPoints:                      ; ...
0001E744 11FC 0001 FE1F                     move.b    #1,($FFFFFE1F).w
0001E74A 47F8 FE26                          lea    ($FFFFFE26).w,a3
0001E74E D193                               add.l    d0,(a3)
0001E750 223C 000F 423F                     move.l    #999999,d1
0001E756 B293                               cmp.l    (a3),d1
0001E758 6200                               bhi.s    loc_1C6AC
0001E75A 2681                               move.l    d1,(a3)
0001E75C                            
0001E75C                            loc_1C6AC:                      ; ...
0001E75C 2013                               move.l    (a3),d0
0001E75E B0B8 FFC0                          cmp.l    ($FFFFFFC0).w,d0
0001E762 6500                               blo.s    locret_1C6B6
0001E764 06B8 0000 1388 FFC0                add.l    #$1388,($FFFFFFC0).w
0001E76C 4EF9 0000 B4BC                     jmp        ExtraLife
0001E772                            
0001E772                            locret_1C6B6:
0001E772 4E75                       		rts
0001E774                            ; End of function AddPoints
0001E774                            
0001E774                            ; ---------------------------------------------------------------------------
0001E774                            ; Subroutine to	update the HUD
0001E774                            ; ---------------------------------------------------------------------------
0001E774                            
0001E774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E774                            
0001E774                            
0001E774                            HudUpdate:
0001E774 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E778 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E77C 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E780 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E782 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E786 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001E78C 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E790 6100 0000                  		bsr.w	Hud_Score
0001E794                            
0001E794                            Hud_ChkRings:
0001E794 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E798 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E79A 6A00                       		bpl.s	loc_1C6E4
0001E79C 6100 0000                  		bsr.w	Hud_LoadZero
0001E7A0                            
0001E7A0                            loc_1C6E4:
0001E7A0 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E7A4 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E7AA 7200                       		moveq	#0,d1
0001E7AC 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E7B0 6100 0000                  		bsr.w	Hud_Rings
0001E7B4                            
0001E7B4                            Hud_ChkTime:
0001E7B4 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001E7B8 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001E7BA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E7BE 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001E7C0 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001E7C4 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001E7CA 6700                       		beq.s	TimeOver	; if yes, branch
0001E7CC 5221                       		addq.b	#1,-(a1)
0001E7CE 0C11 003C                  		cmpi.b	#60,(a1)
0001E7D2 6500                       		bcs.s	Hud_ChkLives
0001E7D4 12BC 0000                  		move.b	#0,(a1)
0001E7D8 5221                       		addq.b	#1,-(a1)
0001E7DA 0C11 003C                  		cmpi.b	#60,(a1)
0001E7DE 6500                       		bcs.s	loc_1C734
0001E7E0 12BC 0000                  		move.b	#0,(a1)
0001E7E4 5221                       		addq.b	#1,-(a1)
0001E7E6 0C11 0009                  		cmpi.b	#9,(a1)
0001E7EA 6500                       		bcs.s	loc_1C734
0001E7EC 12BC 0009                  		move.b	#9,(a1)
0001E7F0                            
0001E7F0                            loc_1C734:
0001E7F0 203C 5E40 0003             		move.l	#$5E400003,d0
0001E7F6 7200                       		moveq	#0,d1
0001E7F8 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001E7FC 6100 0000                  		bsr.w	Hud_Mins
0001E800 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001E806 7200                       		moveq	#0,d1
0001E808 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001E80C 6100 0000                  		bsr.w	Hud_Secs
0001E810                            
0001E810                            Hud_ChkLives:
0001E810 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E814 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001E816 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001E81A 6100 0000                  		bsr.w	Hud_Lives
0001E81E                            
0001E81E                            Hud_ChkBonus:
0001E81E 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001E822 6700                       		beq.s	Hud_End		; if not, branch
0001E824 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E828 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001E832 7200                       		moveq	#0,d1
0001E834 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E838 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E83C 7200                       		moveq	#0,d1
0001E83E 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E842 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E846                            
0001E846                            Hud_End:
0001E846 4E75                       		rts	
0001E848                            ; ===========================================================================
0001E848                            
0001E848                            TimeOver:				; XREF: Hud_ChkTime
0001E848 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001E84C 41F8 D000                  		lea	($FFFFD000).w,a0
0001E850 2448                       		movea.l	a0,a2
0001E852 6100 E79E                  		bsr.w	KillSonic
0001E856 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001E85C 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001E862 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001E868 4E75                       		rts	
0001E86A                            ; ===========================================================================
0001E86A                            
0001E86A                            HudDebug:				; XREF: HudUpdate
0001E86A 6100 0000                  		bsr.w	HudDb_XY
0001E86E 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E872 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001E874 6A00                       		bpl.s	HudDb_Rings
0001E876 6100 0000                  		bsr.w	Hud_LoadZero
0001E87A                            
0001E87A                            HudDb_Rings:
0001E87A 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E87E 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E884 7200                       		moveq	#0,d1
0001E886 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E88A 6100 0000                  		bsr.w	Hud_Rings
0001E88E                            
0001E88E                            HudDb_ObjCount:
0001E88E 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001E894 7200                       		moveq	#0,d1
0001E896 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001E89A 6100 0000                  		bsr.w	Hud_Secs
0001E89E 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E8A2 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001E8A4 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001E8A8 6100 0000                  		bsr.w	Hud_Lives
0001E8AC                            
0001E8AC                            HudDb_ChkBonus:
0001E8AC 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001E8B0 6700                       		beq.s	HudDb_End	; if not, branch
0001E8B2 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E8B6 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001E8C0 7200                       		moveq	#0,d1
0001E8C2 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E8C6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E8CA 7200                       		moveq	#0,d1
0001E8CC 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E8D0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E8D4                            
0001E8D4                            HudDb_End:
0001E8D4 4E75                       		rts	
0001E8D6                            ; End of function HudUpdate
0001E8D6                            
0001E8D6                            ; ---------------------------------------------------------------------------
0001E8D6                            ; Subroutine to	load "0" on the	HUD
0001E8D6                            ; ---------------------------------------------------------------------------
0001E8D6                            
0001E8D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8D6                            
0001E8D6                            
0001E8D6                            Hud_LoadZero:				; XREF: HudUpdate
0001E8D6 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001E8E0 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001E8E4 343C 0002                  		move.w	#2,d2
0001E8E8 6000                       		bra.s	loc_1C83E
0001E8EA                            ; End of function Hud_LoadZero
0001E8EA                            
0001E8EA                            ; ---------------------------------------------------------------------------
0001E8EA                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001E8EA                            ; ---------------------------------------------------------------------------
0001E8EA                            
0001E8EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8EA                            
0001E8EA                            
0001E8EA                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001E8EA 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E8F0 6100 0000                  		bsr.w	Hud_Lives
0001E8F4 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001E8FE 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001E902 343C 000E                  		move.w	#$E,d2
0001E906                            
0001E906                            loc_1C83E:				; XREF: Hud_LoadZero
0001E906 43FA 0000                  		lea	Art_Hud(pc),a1
0001E90A                            
0001E90A                            loc_1C842:
0001E90A 323C 000F                  		move.w	#$F,d1
0001E90E 101A                       		move.b	(a2)+,d0
0001E910 6B00                       		bmi.s	loc_1C85E
0001E912 4880                       		ext.w	d0
0001E914 EB48                       		lsl.w	#5,d0
0001E916 47F1 0000                  		lea	(a1,d0.w),a3
0001E91A                            
0001E91A                            loc_1C852:
0001E91A 2C9B                       		move.l	(a3)+,(a6)
0001E91C 51C9 FFFC                  		dbf	d1,loc_1C852
0001E920                            
0001E920                            loc_1C858:
0001E920 51CA FFE8                  		dbf	d2,loc_1C842
0001E924                            
0001E924 4E75                       		rts	
0001E926                            ; ===========================================================================
0001E926                            
0001E926                            loc_1C85E:
0001E926 2CBC 0000 0000             		move.l	#0,(a6)
0001E92C 51C9 FFF8                  		dbf	d1,loc_1C85E
0001E930                            
0001E930 60EE                       		bra.s	loc_1C858
0001E932                            ; End of function Hud_Base
0001E932                            
0001E932                            ; ===========================================================================
0001E932 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001E93E FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001E942                            ; ---------------------------------------------------------------------------
0001E942                            ; Subroutine to	load debug mode	numbers	patterns
0001E942                            ; ---------------------------------------------------------------------------
0001E942                            
0001E942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E942                            
0001E942                            
0001E942                            HudDb_XY:				; XREF: HudDebug
0001E942 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001E94C 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001E950 4841                       		swap	d1
0001E952 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001E956 6100                       		bsr.s	HudDb_XY2
0001E958 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001E95C 4841                       		swap	d1
0001E95E 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001E962                            ; End of function HudDb_XY
0001E962                            
0001E962                            
0001E962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E962                            
0001E962                            
0001E962                            HudDb_XY2:
0001E962 7C07                       		moveq	#7,d6
0001E964 43F9 0000 0550             		lea	(Art_Text).l,a1
0001E96A                            
0001E96A                            HudDb_XYLoop:
0001E96A E959                       		rol.w	#4,d1
0001E96C 3401                       		move.w	d1,d2
0001E96E 0242 000F                  		andi.w	#$F,d2
0001E972 0C42 000A                  		cmpi.w	#$A,d2
0001E976 6500                       		bcs.s	loc_1C8B2
0001E978 5E42                       		addq.w	#7,d2
0001E97A                            
0001E97A                            loc_1C8B2:
0001E97A EB4A                       		lsl.w	#5,d2
0001E97C 47F1 2000                  		lea	(a1,d2.w),a3
0001E980 2C9B                       		move.l	(a3)+,(a6)
0001E982 2C9B                       		move.l	(a3)+,(a6)
0001E984 2C9B                       		move.l	(a3)+,(a6)
0001E986 2C9B                       		move.l	(a3)+,(a6)
0001E988 2C9B                       		move.l	(a3)+,(a6)
0001E98A 2C9B                       		move.l	(a3)+,(a6)
0001E98C 2C9B                       		move.l	(a3)+,(a6)
0001E98E 2C9B                       		move.l	(a3)+,(a6)
0001E990 4841                       		swap	d1
0001E992 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001E996                            
0001E996 4E75                       		rts	
0001E998                            ; End of function HudDb_XY2
0001E998                            
0001E998                            ; ---------------------------------------------------------------------------
0001E998                            ; Subroutine to	load rings numbers patterns
0001E998                            ; ---------------------------------------------------------------------------
0001E998                            
0001E998                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E998                            
0001E998                            
0001E998                            Hud_Rings:				; XREF: HudUpdate
0001E998 45F9 0000 0000             		lea	(Hud_100).l,a2
0001E99E 7C02                       		moveq	#2,d6
0001E9A0 6000                       		bra.s	Hud_LoadArt
0001E9A2                            ; End of function Hud_Rings
0001E9A2                            
0001E9A2                            ; ---------------------------------------------------------------------------
0001E9A2                            ; Subroutine to	load score numbers patterns
0001E9A2                            ; ---------------------------------------------------------------------------
0001E9A2                            
0001E9A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9A2                            
0001E9A2                            
0001E9A2                            Hud_Score:				; XREF: HudUpdate
0001E9A2 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001E9A8 7C05                       		moveq	#5,d6
0001E9AA                            
0001E9AA                            Hud_LoadArt:
0001E9AA 7800                       		moveq	#0,d4
0001E9AC 43FA 0000                  		lea	Art_Hud(pc),a1
0001E9B0                            
0001E9B0                            Hud_ScoreLoop:
0001E9B0 7400                       		moveq	#0,d2
0001E9B2 261A                       		move.l	(a2)+,d3
0001E9B4                            
0001E9B4                            loc_1C8EC:
0001E9B4 9283                       		sub.l	d3,d1
0001E9B6 6500                       		bcs.s	loc_1C8F4
0001E9B8 5242                       		addq.w	#1,d2
0001E9BA 60F8                       		bra.s	loc_1C8EC
0001E9BC                            ; ===========================================================================
0001E9BC                            
0001E9BC                            loc_1C8F4:
0001E9BC D283                       		add.l	d3,d1
0001E9BE 4A42                       		tst.w	d2
0001E9C0 6700                       		beq.s	loc_1C8FE
0001E9C2 383C 0001                  		move.w	#1,d4
0001E9C6                            
0001E9C6                            loc_1C8FE:
0001E9C6 4A44                       		tst.w	d4
0001E9C8 6700                       		beq.s	loc_1C92C
0001E9CA ED4A                       		lsl.w	#6,d2
0001E9CC 2D40 0004                  		move.l	d0,4(a6)
0001E9D0 47F1 2000                  		lea	(a1,d2.w),a3
0001E9D4 2C9B                       		move.l	(a3)+,(a6)
0001E9D6 2C9B                       		move.l	(a3)+,(a6)
0001E9D8 2C9B                       		move.l	(a3)+,(a6)
0001E9DA 2C9B                       		move.l	(a3)+,(a6)
0001E9DC 2C9B                       		move.l	(a3)+,(a6)
0001E9DE 2C9B                       		move.l	(a3)+,(a6)
0001E9E0 2C9B                       		move.l	(a3)+,(a6)
0001E9E2 2C9B                       		move.l	(a3)+,(a6)
0001E9E4 2C9B                       		move.l	(a3)+,(a6)
0001E9E6 2C9B                       		move.l	(a3)+,(a6)
0001E9E8 2C9B                       		move.l	(a3)+,(a6)
0001E9EA 2C9B                       		move.l	(a3)+,(a6)
0001E9EC 2C9B                       		move.l	(a3)+,(a6)
0001E9EE 2C9B                       		move.l	(a3)+,(a6)
0001E9F0 2C9B                       		move.l	(a3)+,(a6)
0001E9F2 2C9B                       		move.l	(a3)+,(a6)
0001E9F4                            
0001E9F4                            loc_1C92C:
0001E9F4 0680 0040 0000             		addi.l	#$400000,d0
0001E9FA 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001E9FE                            
0001E9FE 4E75                       		rts	
0001EA00                            ; End of function Hud_Score
0001EA00                            
0001EA00                            ; ---------------------------------------------------------------------------
0001EA00                            ; Subroutine to	load countdown numbers on the continue screen
0001EA00                            ; ---------------------------------------------------------------------------
0001EA00                            
0001EA00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA00                            
0001EA00                            
0001EA00                            ContScrCounter:				; XREF: ContinueScreen
0001EA00 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001EA0A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EA10 45F9 0000 0000             		lea	(Hud_10).l,a2
0001EA16 7C01                       		moveq	#1,d6
0001EA18 7800                       		moveq	#0,d4
0001EA1A 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001EA1E                            
0001EA1E                            ContScr_Loop:
0001EA1E 7400                       		moveq	#0,d2
0001EA20 261A                       		move.l	(a2)+,d3
0001EA22                            
0001EA22                            loc_1C95A:
0001EA22 9283                       		sub.l	d3,d1
0001EA24 6500                       		bcs.s	loc_1C962
0001EA26 5242                       		addq.w	#1,d2
0001EA28 60F8                       		bra.s	loc_1C95A
0001EA2A                            ; ===========================================================================
0001EA2A                            
0001EA2A                            loc_1C962:
0001EA2A D283                       		add.l	d3,d1
0001EA2C ED4A                       		lsl.w	#6,d2
0001EA2E 47F1 2000                  		lea	(a1,d2.w),a3
0001EA32 2C9B                       		move.l	(a3)+,(a6)
0001EA34 2C9B                       		move.l	(a3)+,(a6)
0001EA36 2C9B                       		move.l	(a3)+,(a6)
0001EA38 2C9B                       		move.l	(a3)+,(a6)
0001EA3A 2C9B                       		move.l	(a3)+,(a6)
0001EA3C 2C9B                       		move.l	(a3)+,(a6)
0001EA3E 2C9B                       		move.l	(a3)+,(a6)
0001EA40 2C9B                       		move.l	(a3)+,(a6)
0001EA42 2C9B                       		move.l	(a3)+,(a6)
0001EA44 2C9B                       		move.l	(a3)+,(a6)
0001EA46 2C9B                       		move.l	(a3)+,(a6)
0001EA48 2C9B                       		move.l	(a3)+,(a6)
0001EA4A 2C9B                       		move.l	(a3)+,(a6)
0001EA4C 2C9B                       		move.l	(a3)+,(a6)
0001EA4E 2C9B                       		move.l	(a3)+,(a6)
0001EA50 2C9B                       		move.l	(a3)+,(a6)
0001EA52 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001EA56                            
0001EA56 4E75                       		rts	
0001EA58                            ; End of function ContScrCounter
0001EA58                            
0001EA58                            ; ===========================================================================
0001EA58                            ; ---------------------------------------------------------------------------
0001EA58                            ; HUD counter sizes
0001EA58                            ; ---------------------------------------------------------------------------
0001EA58 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001EA5C 0000 2710                  Hud_10000:	dc.l 10000
0001EA60 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001EA64 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001EA68 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001EA6C 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001EA70                            
0001EA70                            ; ---------------------------------------------------------------------------
0001EA70                            ; Subroutine to	load time numbers patterns
0001EA70                            ; ---------------------------------------------------------------------------
0001EA70                            
0001EA70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA70                            
0001EA70                            
0001EA70                            Hud_Mins:				; XREF: Hud_ChkTime
0001EA70 45F9 0001 EA6C             		lea	(Hud_1).l,a2
0001EA76 7C00                       		moveq	#0,d6
0001EA78 6000                       		bra.s	loc_1C9BA
0001EA7A                            ; End of function Hud_Mins
0001EA7A                            
0001EA7A                            
0001EA7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA7A                            
0001EA7A                            
0001EA7A                            Hud_Secs:				; XREF: Hud_ChkTime
0001EA7A 45F9 0001 EA68             		lea	(Hud_10).l,a2
0001EA80 7C01                       		moveq	#1,d6
0001EA82                            
0001EA82                            loc_1C9BA:
0001EA82 7800                       		moveq	#0,d4
0001EA84 43FA 0000                  		lea	Art_Hud(pc),a1
0001EA88                            
0001EA88                            Hud_TimeLoop:
0001EA88 7400                       		moveq	#0,d2
0001EA8A 261A                       		move.l	(a2)+,d3
0001EA8C                            
0001EA8C                            loc_1C9C4:
0001EA8C 9283                       		sub.l	d3,d1
0001EA8E 6500                       		bcs.s	loc_1C9CC
0001EA90 5242                       		addq.w	#1,d2
0001EA92 60F8                       		bra.s	loc_1C9C4
0001EA94                            ; ===========================================================================
0001EA94                            
0001EA94                            loc_1C9CC:
0001EA94 D283                       		add.l	d3,d1
0001EA96 4A42                       		tst.w	d2
0001EA98 6700                       		beq.s	loc_1C9D6
0001EA9A 383C 0001                  		move.w	#1,d4
0001EA9E                            
0001EA9E                            loc_1C9D6:
0001EA9E ED4A                       		lsl.w	#6,d2
0001EAA0 2D40 0004                  		move.l	d0,4(a6)
0001EAA4 47F1 2000                  		lea	(a1,d2.w),a3
0001EAA8 2C9B                       		move.l	(a3)+,(a6)
0001EAAA 2C9B                       		move.l	(a3)+,(a6)
0001EAAC 2C9B                       		move.l	(a3)+,(a6)
0001EAAE 2C9B                       		move.l	(a3)+,(a6)
0001EAB0 2C9B                       		move.l	(a3)+,(a6)
0001EAB2 2C9B                       		move.l	(a3)+,(a6)
0001EAB4 2C9B                       		move.l	(a3)+,(a6)
0001EAB6 2C9B                       		move.l	(a3)+,(a6)
0001EAB8 2C9B                       		move.l	(a3)+,(a6)
0001EABA 2C9B                       		move.l	(a3)+,(a6)
0001EABC 2C9B                       		move.l	(a3)+,(a6)
0001EABE 2C9B                       		move.l	(a3)+,(a6)
0001EAC0 2C9B                       		move.l	(a3)+,(a6)
0001EAC2 2C9B                       		move.l	(a3)+,(a6)
0001EAC4 2C9B                       		move.l	(a3)+,(a6)
0001EAC6 2C9B                       		move.l	(a3)+,(a6)
0001EAC8 0680 0040 0000             		addi.l	#$400000,d0
0001EACE 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001EAD2                            
0001EAD2 4E75                       		rts	
0001EAD4                            ; End of function Hud_Secs
0001EAD4                            
0001EAD4                            ; ---------------------------------------------------------------------------
0001EAD4                            ; Subroutine to	load time/ring bonus numbers patterns
0001EAD4                            ; ---------------------------------------------------------------------------
0001EAD4                            
0001EAD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EAD4                            
0001EAD4                            
0001EAD4                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001EAD4 45F9 0001 EA60             		lea	(Hud_1000).l,a2
0001EADA 7C03                       		moveq	#3,d6
0001EADC 7800                       		moveq	#0,d4
0001EADE 43FA 0000                  		lea	Art_Hud(pc),a1
0001EAE2                            
0001EAE2                            Hud_BonusLoop:
0001EAE2 7400                       		moveq	#0,d2
0001EAE4 261A                       		move.l	(a2)+,d3
0001EAE6                            
0001EAE6                            loc_1CA1E:
0001EAE6 9283                       		sub.l	d3,d1
0001EAE8 6500                       		bcs.s	loc_1CA26
0001EAEA 5242                       		addq.w	#1,d2
0001EAEC 60F8                       		bra.s	loc_1CA1E
0001EAEE                            ; ===========================================================================
0001EAEE                            
0001EAEE                            loc_1CA26:
0001EAEE D283                       		add.l	d3,d1
0001EAF0 4A42                       		tst.w	d2
0001EAF2 6700                       		beq.s	loc_1CA30
0001EAF4 383C 0001                  		move.w	#1,d4
0001EAF8                            
0001EAF8                            loc_1CA30:
0001EAF8 4A44                       		tst.w	d4
0001EAFA 6700                       		beq.s	Hud_ClrBonus
0001EAFC ED4A                       		lsl.w	#6,d2
0001EAFE 47F1 2000                  		lea	(a1,d2.w),a3
0001EB02 2C9B                       		move.l	(a3)+,(a6)
0001EB04 2C9B                       		move.l	(a3)+,(a6)
0001EB06 2C9B                       		move.l	(a3)+,(a6)
0001EB08 2C9B                       		move.l	(a3)+,(a6)
0001EB0A 2C9B                       		move.l	(a3)+,(a6)
0001EB0C 2C9B                       		move.l	(a3)+,(a6)
0001EB0E 2C9B                       		move.l	(a3)+,(a6)
0001EB10 2C9B                       		move.l	(a3)+,(a6)
0001EB12 2C9B                       		move.l	(a3)+,(a6)
0001EB14 2C9B                       		move.l	(a3)+,(a6)
0001EB16 2C9B                       		move.l	(a3)+,(a6)
0001EB18 2C9B                       		move.l	(a3)+,(a6)
0001EB1A 2C9B                       		move.l	(a3)+,(a6)
0001EB1C 2C9B                       		move.l	(a3)+,(a6)
0001EB1E 2C9B                       		move.l	(a3)+,(a6)
0001EB20 2C9B                       		move.l	(a3)+,(a6)
0001EB22                            
0001EB22                            loc_1CA5A:
0001EB22 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001EB26                            
0001EB26 4E75                       		rts	
0001EB28                            ; ===========================================================================
0001EB28                            
0001EB28                            Hud_ClrBonus:
0001EB28 7A0F                       		moveq	#$F,d5
0001EB2A                            
0001EB2A                            Hud_ClrBonusLoop:
0001EB2A 2CBC 0000 0000             		move.l	#0,(a6)
0001EB30 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001EB34                            
0001EB34 60EC                       		bra.s	loc_1CA5A
0001EB36                            ; End of function Hud_TimeRingBonus
0001EB36                            
0001EB36                            ; ---------------------------------------------------------------------------
0001EB36                            ; Subroutine to	load uncompressed lives	counter	patterns
0001EB36                            ; ---------------------------------------------------------------------------
0001EB36                            
0001EB36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB36                            
0001EB36                            
0001EB36                            Hud_Lives:				; XREF: Hud_ChkLives
0001EB36 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001EB3C 7200                       		moveq	#0,d1
0001EB3E 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001EB42 45F9 0001 EA68             		lea	(Hud_10).l,a2
0001EB48 7C01                       		moveq	#1,d6
0001EB4A 7800                       		moveq	#0,d4
0001EB4C 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001EB50                            
0001EB50                            Hud_LivesLoop:
0001EB50 2D40 0004                  		move.l	d0,4(a6)
0001EB54 7400                       		moveq	#0,d2
0001EB56 261A                       		move.l	(a2)+,d3
0001EB58                            
0001EB58                            loc_1CA90:
0001EB58 9283                       		sub.l	d3,d1
0001EB5A 6500                       		bcs.s	loc_1CA98
0001EB5C 5242                       		addq.w	#1,d2
0001EB5E 60F8                       		bra.s	loc_1CA90
0001EB60                            ; ===========================================================================
0001EB60                            
0001EB60                            loc_1CA98:
0001EB60 D283                       		add.l	d3,d1
0001EB62 4A42                       		tst.w	d2
0001EB64 6700                       		beq.s	loc_1CAA2
0001EB66 383C 0001                  		move.w	#1,d4
0001EB6A                            
0001EB6A                            loc_1CAA2:
0001EB6A 4A44                       		tst.w	d4
0001EB6C 6700                       		beq.s	Hud_ClrLives
0001EB6E                            
0001EB6E                            loc_1CAA6:
0001EB6E EB4A                       		lsl.w	#5,d2
0001EB70 47F1 2000                  		lea	(a1,d2.w),a3
0001EB74 2C9B                       		move.l	(a3)+,(a6)
0001EB76 2C9B                       		move.l	(a3)+,(a6)
0001EB78 2C9B                       		move.l	(a3)+,(a6)
0001EB7A 2C9B                       		move.l	(a3)+,(a6)
0001EB7C 2C9B                       		move.l	(a3)+,(a6)
0001EB7E 2C9B                       		move.l	(a3)+,(a6)
0001EB80 2C9B                       		move.l	(a3)+,(a6)
0001EB82 2C9B                       		move.l	(a3)+,(a6)
0001EB84                            
0001EB84                            loc_1CABC:
0001EB84 0680 0040 0000             		addi.l	#$400000,d0
0001EB8A 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001EB8E                            
0001EB8E 4E75                       		rts	
0001EB90                            ; ===========================================================================
0001EB90                            
0001EB90                            Hud_ClrLives:
0001EB90 4A46                       		tst.w	d6
0001EB92 67DA                       		beq.s	loc_1CAA6
0001EB94 7A07                       		moveq	#7,d5
0001EB96                            
0001EB96                            Hud_ClrLivesLoop:
0001EB96 2CBC 0000 0000             		move.l	#0,(a6)
0001EB9C 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001EBA0 60E2                       		bra.s	loc_1CABC
0001EBA2                            ; End of function Hud_Lives
0001EBA2                            
0001EBA2                            ; ===========================================================================
0001EBA2                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001EEA2                            		even
0001EEA2                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001EFE2                            		even
0001EFE2                            ; ===========================================================================
0001EFE2                            ; ---------------------------------------------------------------------------
0001EFE2                            ; When debug mode is currently in use
0001EFE2                            ; ---------------------------------------------------------------------------
0001EFE2                            
0001EFE2                            DebugMode:				; XREF: Obj01; Obj09
0001EFE2 7000                       		moveq	#0,d0
0001EFE4 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001EFE8 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001EFEC 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001EFF0                            ; ===========================================================================
0001EFF0 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001EFF2 0000                       		dc.w Debug_Skip-Debug_Index
0001EFF4                            ; ===========================================================================
0001EFF4                            
0001EFF4                            Debug_Main:				; XREF: Debug_Index
0001EFF4 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001EFF8 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001EFFE 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001F004 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001F00A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001F010 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001F016 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001F01C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001F022 117C 0000 001A             		move.b	#0,$1A(a0)
0001F028 117C 0000 001C             		move.b	#0,$1C(a0)
0001F02E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001F034 6600                       		bne.s	Debug_Zone	; if not, branch
0001F036 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001F03C 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001F042 7006                       		moveq	#6,d0		; use 6th debug	item list
0001F044 6000                       		bra.s	Debug_UseList
0001F046                            ; ===========================================================================
0001F046                            
0001F046                            Debug_Zone:
0001F046 7000                       		moveq	#0,d0
0001F048 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F04C                            
0001F04C                            Debug_UseList:
0001F04C 45F9 0000 0000             		lea	(DebugList).l,a2
0001F052 D040                       		add.w	d0,d0
0001F054 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F058 3C1A                       		move.w	(a2)+,d6
0001F05A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F05E 6200                       		bhi.s	loc_1CF9E
0001F060 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001F066                            
0001F066                            loc_1CF9E:
0001F066 6100 0000                  		bsr.w	Debug_ShowItem
0001F06A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F070 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001F076                            
0001F076                            Debug_Skip:				; XREF: Debug_Index
0001F076 7006                       		moveq	#6,d0
0001F078 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001F07E 6700                       		beq.s	loc_1CFBE
0001F080 7000                       		moveq	#0,d0
0001F082 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F086                            
0001F086                            loc_1CFBE:
0001F086 45F9 0000 0000             		lea	(DebugList).l,a2
0001F08C D040                       		add.w	d0,d0
0001F08E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F092 3C1A                       		move.w	(a2)+,d6
0001F094 6100 0000                  		bsr.w	Debug_Control
0001F098 4EF9 0000 E7DE             		jmp	DisplaySprite
0001F09E                            
0001F09E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F09E                            
0001F09E                            
0001F09E                            Debug_Control:
0001F09E 7800                       		moveq	#0,d4
0001F0A0 323C 0001                  		move.w	#1,d1
0001F0A4 1838 F605                  		move.b	($FFFFF605).w,d4
0001F0A8 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001F0AC 6600                       		bne.s	loc_1D018	; if yes, branch
0001F0AE 1038 F604                  		move.b	($FFFFF604).w,d0
0001F0B2 0240 000F                  		andi.w	#$F,d0
0001F0B6 6600                       		bne.s	loc_1D000
0001F0B8 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F0BE 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001F0C4 6000 0000                  		bra.w	Debug_BackItem
0001F0C8                            ; ===========================================================================
0001F0C8                            
0001F0C8                            loc_1D000:
0001F0C8 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001F0CC 6600                       		bne.s	loc_1D01C
0001F0CE 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001F0D4 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001F0D8 6600                       		bne.s	loc_1D018
0001F0DA 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001F0E0                            
0001F0E0                            loc_1D018:
0001F0E0 1838 F604                  		move.b	($FFFFF604).w,d4
0001F0E4                            
0001F0E4                            loc_1D01C:
0001F0E4 7200                       		moveq	#0,d1
0001F0E6 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001F0EA 5241                       		addq.w	#1,d1
0001F0EC 4841                       		swap	d1
0001F0EE E881                       		asr.l	#4,d1
0001F0F0 2428 000C                  		move.l	$C(a0),d2
0001F0F4 2628 0008                  		move.l	8(a0),d3
0001F0F8 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001F0FC 6700                       		beq.s	loc_1D03C	; if not, branch
0001F0FE 9481                       		sub.l	d1,d2
0001F100 6400                       		bcc.s	loc_1D03C
0001F102 7400                       		moveq	#0,d2
0001F104                            
0001F104                            loc_1D03C:
0001F104 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001F108 6700                       		beq.s	loc_1D052	; if not, branch
0001F10A D481                       		add.l	d1,d2
0001F10C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001F112 6500                       		bcs.s	loc_1D052
0001F114 243C 07FF 0000             		move.l	#$7FF0000,d2
0001F11A                            
0001F11A                            loc_1D052:
0001F11A 0804 0002                  		btst	#2,d4
0001F11E 6700                       		beq.s	loc_1D05E
0001F120 9681                       		sub.l	d1,d3
0001F122 6400                       		bcc.s	loc_1D05E
0001F124 7600                       		moveq	#0,d3
0001F126                            
0001F126                            loc_1D05E:
0001F126 0804 0003                  		btst	#3,d4
0001F12A 6700                       		beq.s	loc_1D066
0001F12C D681                       		add.l	d1,d3
0001F12E                            
0001F12E                            loc_1D066:
0001F12E 2142 000C                  		move.l	d2,$C(a0)
0001F132 2143 0008                  		move.l	d3,8(a0)
0001F136                            
0001F136                            Debug_BackItem:
0001F136 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001F13C 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F13E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F144 6700                       		beq.s	Debug_NextItem	; if not, branch
0001F146 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001F14A 6400                       		bcc.s	Debug_NoLoop
0001F14C DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001F150 6000                       		bra.s	Debug_NoLoop
0001F152                            ; ===========================================================================
0001F152                            
0001F152                            Debug_NextItem:
0001F152 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001F158 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F15A 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001F15E BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F162 6200                       		bhi.s	Debug_NoLoop
0001F164 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001F16A                            
0001F16A                            Debug_NoLoop:
0001F16A 6000 0000                  		bra.w	Debug_ShowItem
0001F16E                            ; ===========================================================================
0001F16E                            
0001F16E                            Debug_MakeItem:
0001F16E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F174 6700                       		beq.s	Debug_Exit	; if not, branch
0001F176 4EB9 0000 EF34             		jsr	SingleObjLoad
0001F17C 6600                       		bne.s	Debug_Exit
0001F17E 3368 0008 0008             		move.w	8(a0),8(a1)
0001F184 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F18A 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001F18E 1368 0001 0001             		move.b	1(a0),1(a1)
0001F194 1368 0001 0022             		move.b	1(a0),$22(a1)
0001F19A 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001F1A0 7000                       		moveq	#0,d0
0001F1A2 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F1A6 E748                       		lsl.w	#3,d0
0001F1A8 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001F1AE 4E75                       		rts	
0001F1B0                            ; ===========================================================================
0001F1B0                            
0001F1B0                            Debug_Exit:
0001F1B0 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F1B6 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001F1B8 7000                       		moveq	#0,d0
0001F1BA 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001F1BE 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F1C6 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F1CC 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001F1D0 3140 000A                  		move.w	d0,$A(a0)
0001F1D4 3140 000E                  		move.w	d0,$E(a0)
0001F1D8 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001F1DE 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001F1E4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001F1EA 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001F1EC 4278 F780                  		clr.w	($FFFFF780).w
0001F1F0 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001F1F6 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F1FE 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F204 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001F20A 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001F210 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F216                            
0001F216                            Debug_DoNothing:
0001F216 4E75                       		rts	
0001F218                            ; End of function Debug_Control
0001F218                            
0001F218                            
0001F218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F218                            
0001F218                            
0001F218                            Debug_ShowItem:				; XREF: Debug_Main
0001F218 7000                       		moveq	#0,d0
0001F21A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F21E E748                       		lsl.w	#3,d0
0001F220 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001F226 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001F22C 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001F232 4E75                       		rts	
0001F234                            ; End of function Debug_ShowItem
0001F234                            
0001F234                            ; ===========================================================================
0001F234                            ; ---------------------------------------------------------------------------
0001F234                            ; Debug	list pointers
0001F234                            ; ---------------------------------------------------------------------------
0001F234                            DebugList:
0001F234                            	include "_inc\Debug list pointers.asm"
0001F234                            ; ---------------------------------------------------------------------------
0001F234                            ; Debug	list pointers
0001F234                            ; ---------------------------------------------------------------------------
0001F234 0000                       	dc.w Debug_GHZ-DebugList
0001F236 0000                       	dc.w Debug_LZ-DebugList
0001F238 0000                       	dc.w Debug_MZ-DebugList
0001F23A 0000                       	dc.w Debug_SLZ-DebugList
0001F23C 0000                       	dc.w Debug_SYZ-DebugList
0001F23E 0000                       	dc.w Debug_SBZ-DebugList
0001F240 0000                       	dc.w Debug_Ending-DebugList
0001F240 0000                       	dc.w Debug_Ending-DebugList
0001F242                            
0001F242                            ; ---------------------------------------------------------------------------
0001F242                            ; Debug	list - Green Hill
0001F242                            ; ---------------------------------------------------------------------------
0001F242                            Debug_GHZ:
0001F242                            	include "_inc\Debug list - GHZ.asm"
0001F242                            ; ---------------------------------------------------------------------------
0001F242                            ; Debug	list - Green Hill
0001F242                            ; ---------------------------------------------------------------------------
0001F242 0010                       	dc.w $10			; number of items in list
0001F244 2500 B0E8                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001F248 0000 26BA                  	dc.w 0, ringart+$2000		; subtype, frame, VRAM setting (2 bytes)
0001F24C 2600 B6CE                  	dc.l Map_obj26+$26000000
0001F250 0000 0680                  	dc.b 0,	0, 6, $80
0001F254 1F00 A948                  	dc.l Map_obj1F+$1F000000
0001F258 0000 0400                  	dc.b 0,	0, 4, 0
0001F25C 2200 AC28                  	dc.l Map_obj22+$22000000
0001F260 0000 0444                  	dc.b 0,	0, 4, $44
0001F264 2B00 BCF0                  	dc.l Map_obj2B+$2B000000
0001F268 0000 047B                  	dc.b 0,	0, 4, $7B
0001F26C 3600 E1B6                  	dc.l Map_obj36+$36000000
0001F270 0000 051B                  	dc.b 0,	0, 5, $1B
0001F274 1800 9270                  	dc.l Map_obj18+$18000000
0001F278 0000 4000                  	dc.b 0,	0, $40,	0
0001F27C 3B00 E2FC                  	dc.l Map_obj3B+$3B000000
0001F280 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F284 4001 0F16                  	dc.l Map_obj40+$40000000
0001F288 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F28C 4100 F42E                  	dc.l Map_obj41+$41000000
0001F290 0000 0523                  	dc.b 0,	0, 5, $23
0001F294 4200 F654                  	dc.l Map_obj42+$42000000
0001F298 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F29C 4400 F96C                  	dc.l Map_obj44+$44000000
0001F2A0 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F2A4 1900 92DE                  	dc.l Map_obj48+$19000000
0001F2A8 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F2AC 7901 8E84                  	dc.l Map_obj79+$79000000
0001F2B0 0100 0571                  	dc.w $100, lamppostart
0001F2B4 4B00 B128                  	dc.l Map_obj4B+$4B000000
0001F2B8 0000 222D                  	dc.w 0, ssringart+$2000
0001F2BC 7D01 8FE2                  	dc.l Map_obj7D+$7D000000
0001F2C0 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F2C4                            	even
0001F2C4                            	even
0001F2C4                            
0001F2C4                            ; ---------------------------------------------------------------------------
0001F2C4                            ; Debug	list - Labyrinth
0001F2C4                            ; ---------------------------------------------------------------------------
0001F2C4                            Debug_LZ:
0001F2C4                            	include "_inc\Debug list - LZ.asm"
0001F2C4                            ; ---------------------------------------------------------------------------
0001F2C4                            ; Debug	list - Labyrinth
0001F2C4                            ; ---------------------------------------------------------------------------
0001F2C4 0019                       	dc.w $19
0001F2C6 2500 B0E8                  	dc.l Map_obj25+$25000000
0001F2CA 0000 26BA                  	dc.w 0, ringart+$2000
0001F2CE 2600 B6CE                  	dc.l Map_obj26+$26000000
0001F2D2 0000 0680                  	dc.b 0,	0, 6, $80
0001F2D6 4100 F42E                  	dc.l Map_obj41+$41000000
0001F2DA 0000 0523                  	dc.b 0,	0, 5, $23
0001F2DE 2C00 BD96                  	dc.l Map_obj2C+$2C000000
0001F2E2 0800 2486                  	dc.b 8,	0, $24,	$86
0001F2E6 2D00 BFAA                  	dc.l Map_obj2D+$2D000000
0001F2EA 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F2EE 1601 377C                  	dc.l Map_obj16+$16000000
0001F2F2 0000 03CC                  	dc.b 0,	0, 3, $CC
0001F2F6 1601 377C                  	dc.l Map_obj16+$16000000
0001F2FA 0203 03CC                  	dc.b 2,	3, 3, $CC
0001F2FE 3300 D484                  	dc.l Map_obj33+$33000000
0001F302 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F306 3200 D048                  	dc.l Map_obj32+$32000000
0001F30A 0000 0513                  	dc.b 0,	0, 5, $13
0001F30E 3600 E1B6                  	dc.l Map_obj36+$36000000
0001F312 0000 051B                  	dc.b 0,	0, 5, $1B
0001F316 5201 184A                  	dc.l Map_obj52a+$52000000
0001F31A 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001F31E 6101 39B2                  	dc.l Map_obj61+$61000000
0001F322 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001F326 6101 39B2                  	dc.l Map_obj61+$61000000
0001F32A 1301 43E6                  	dc.b $13, 1, $43, $E6
0001F32E 6101 39B2                  	dc.l Map_obj61+$61000000
0001F332 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001F336 6201 3B06                  	dc.l Map_obj62+$62000000
0001F33A 0000 443E                  	dc.b 0,	0, $44,	$3E
0001F33E 6101 39B2                  	dc.l Map_obj61+$61000000
0001F342 2702 43E6                  	dc.b $27, 2, $43, $E6
0001F346 6101 39B2                  	dc.l Map_obj61+$61000000
0001F34A 3003 43E6                  	dc.b $30, 3, $43, $E6
0001F34E 6301 3E76                  	dc.l Map_obj63+$63000000
0001F352 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001F356 6001 36C6                  	dc.l Map_obj60+$60000000
0001F35A 0000 0467                  	dc.b 0,	0, 4, $67
0001F35E 6401 41CC                  	dc.l Map_obj64+$64000000
0001F362 8413 8348                  	dc.b $84, $13, $83, $48
0001F366 6501 4354                  	dc.l Map_obj65+$65000000
0001F36A 0202 C259                  	dc.b 2,	2, $C2,	$59
0001F36E 6501 4354                  	dc.l Map_obj65+$65000000
0001F372 0909 C259                  	dc.b 9,	9, $C2,	$59
0001F376 0B01 2AF0                  	dc.l Map_obj0B+$B000000
0001F37A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F37E 0C01 2BC0                  	dc.l Map_obj0C+$C000000
0001F382 0200 4328                  	dc.b 2,	0, $43,	$28
0001F386 7901 8E84                  	dc.l Map_obj79+$79000000
0001F38A 0100 0571                  	dc.w $100, lamppostart
0001F38E                            	even
0001F38E                            	even
0001F38E                            
0001F38E                            ; ---------------------------------------------------------------------------
0001F38E                            ; Debug	list - Marble
0001F38E                            ; ---------------------------------------------------------------------------
0001F38E                            Debug_MZ:
0001F38E                            	include "_inc\Debug list - MZ.asm"
0001F38E                            ; ---------------------------------------------------------------------------
0001F38E                            ; Debug	list - Marble
0001F38E                            ; ---------------------------------------------------------------------------
0001F38E 0012                       	dc.w $12
0001F390 2500 B0E8                  	dc.l Map_obj25+$25000000
0001F394 0000 26BA                  	dc.w 0, ringart+$2000
0001F398 2600 B6CE                  	dc.l Map_obj26+$26000000
0001F39C 0000 0680                  	dc.b 0,	0, 6, $80
0001F3A0 2200 AC28                  	dc.l Map_obj22+$22000000
0001F3A4 0000 0444                  	dc.b 0,	0, 4, $44
0001F3A8 3600 E1B6                  	dc.l Map_obj36+$36000000
0001F3AC 0000 051B                  	dc.b 0,	0, 5, $1B
0001F3B0 4100 F42E                  	dc.l Map_obj41+$41000000
0001F3B4 0000 0523                  	dc.b 0,	0, 5, $23
0001F3B8 1300 C4D8                  	dc.l Map_obj14+$13000000
0001F3BC 0000 0345                  	dc.b 0,	0, 3, $45
0001F3C0 4601 004C                  	dc.l Map_obj46+$46000000
0001F3C4 0000 4000                  	dc.b 0,	0, $40,	0
0001F3C8 4C01 09C6                  	dc.l Map_obj4C+$4C000000
0001F3CC 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F3D0 4E01 0CAA                  	dc.l Map_obj4E+$4E000000
0001F3D4 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F3D8 3300 D484                  	dc.l Map_obj33+$33000000
0001F3DC 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F3E0 5001 10A4                  	dc.l Map_obj50+$50000000
0001F3E4 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F3E8 5101 1570                  	dc.l Map_obj51+$51000000
0001F3EC 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F3F0 5201 17F4                  	dc.l Map_obj52+$52000000
0001F3F4 0000 02B8                  	dc.b 0,	0, 2, $B8
0001F3F8 5300 9876                  	dc.l Map_obj53+$53000000
0001F3FC 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001F400 5401 098C                  	dc.l Map_obj54+$54000000
0001F404 0000 8680                  	dc.b 0,	0, $86,	$80
0001F408 5501 19E8                  	dc.l Map_obj55+$55000000
0001F40C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F410 7801 8B18                  	dc.l Map_obj78+$78000000
0001F414 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F418 7901 8E84                  	dc.l Map_obj79+$79000000
0001F41C 0100 0571                  	dc.w $100, lamppostart
0001F420                            	even
0001F420                            	even
0001F420                            
0001F420                            ; ---------------------------------------------------------------------------
0001F420                            ; Debug	list - Star Light
0001F420                            ; ---------------------------------------------------------------------------
0001F420                            Debug_SLZ:
0001F420                            	include "_inc\Debug list - SLZ.asm"
0001F420                            ; ---------------------------------------------------------------------------
0001F420                            ; Debug	list - Star Light
0001F420                            ; ---------------------------------------------------------------------------
0001F420 000F                       	dc.w $F
0001F422 2500 B0E8                  	dc.l Map_obj25+$25000000
0001F426 0000 26BA                  	dc.w 0, ringart+$2000
0001F42A 2600 B6CE                  	dc.l Map_obj26+$26000000
0001F42E 0000 0680                  	dc.b 0,	0, 6, $80
0001F432 5901 24FC                  	dc.l Map_obj59+$59000000
0001F436 0000 4000                  	dc.b 0,	0, $40,	0
0001F43A 5300 9876                  	dc.l Map_obj53+$53000000
0001F43E 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F442 1800 92CE                  	dc.l Map_obj18b+$18000000
0001F446 0000 4000                  	dc.b 0,	0, $40,	0
0001F44A 5A01 2644                  	dc.l Map_obj5A+$5A000000
0001F44E 0000 4000                  	dc.b 0,	0, $40,	0
0001F452 5B01 280A                  	dc.l Map_obj5B+$5B000000
0001F456 0000 4000                  	dc.b 0,	0, $40,	0
0001F45A 5D01 2DF8                  	dc.l Map_obj5D+$5D000000
0001F45E 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F462 5E01 3198                  	dc.l Map_obj5E+$5E000000
0001F466 0000 0374                  	dc.b 0,	0, 3, $74
0001F46A 4100 F42E                  	dc.l Map_obj41+$41000000
0001F46E 0000 0523                  	dc.b 0,	0, 5, $23
0001F472 1300 C4D8                  	dc.l Map_obj14+$13000000
0001F476 0000 0480                  	dc.b 0,	0, 4, $80
0001F47A 1C00 99BC                  	dc.l Map_obj1C+$1C000000
0001F47E 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F482 5F01 3416                  	dc.l Map_obj5F+$5F000000
0001F486 0000 0400                  	dc.b 0,	0, 4, 0
0001F48A 6001 36C6                  	dc.l Map_obj60+$60000000
0001F48E 0000 2429                  	dc.b 0,	0, $24,	$29
0001F492 7901 8E84                  	dc.l Map_obj79+$79000000
0001F496 0100 0571                  	dc.w $100, lamppostart
0001F49A                            	even
0001F49A                            	even
0001F49A                            
0001F49A                            ; ---------------------------------------------------------------------------
0001F49A                            ; Debug	list - Spring Yard
0001F49A                            ; ---------------------------------------------------------------------------
0001F49A                            Debug_SYZ:
0001F49A                            	include "_inc\Debug list - SYZ.asm"
0001F49A                            ; ---------------------------------------------------------------------------
0001F49A                            ; Debug	list - Spring Yard
0001F49A                            ; ---------------------------------------------------------------------------
0001F49A 000F                       	dc.w $F
0001F49C 2500 B0E8                  	dc.l Map_obj25+$25000000
0001F4A0 0000 26BA                  	dc.w 0, ringart+$2000
0001F4A4 2600 B6CE                  	dc.l Map_obj26+$26000000
0001F4A8 0000 0680                  	dc.b 0,	0, 6, $80
0001F4AC 3600 E1B6                  	dc.l Map_obj36+$36000000
0001F4B0 0000 051B                  	dc.b 0,	0, 5, $1B
0001F4B4 4100 F42E                  	dc.l Map_obj41+$41000000
0001F4B8 0000 0523                  	dc.b 0,	0, 5, $23
0001F4BC 4300 F8AE                  	dc.l Map_obj43+$43000000
0001F4C0 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F4C4 1201 00D8                  	dc.l Map_obj12+$12000000
0001F4C8 0000 0000                  	dc.b 0,	0, 0, 0
0001F4CC 4701 0252                  	dc.l Map_obj47+$47000000
0001F4D0 0000 0380                  	dc.b 0,	0, 3, $80
0001F4D4 1F00 A948                  	dc.l Map_obj1F+$1F000000
0001F4D8 0000 0400                  	dc.b 0,	0, 4, 0
0001F4DC 2200 AC28                  	dc.l Map_obj22+$22000000
0001F4E0 0000 0444                  	dc.b 0,	0, 4, $44
0001F4E4 5001 10A4                  	dc.l Map_obj50+$50000000
0001F4E8 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F4EC 1800 92BC                  	dc.l Map_obj18a+$18000000
0001F4F0 0000 4000                  	dc.b 0,	0, $40,	0
0001F4F4 5601 1E98                  	dc.l Map_obj56+$56000000
0001F4F8 0000 4000                  	dc.b 0,	0, $40,	0
0001F4FC 3200 D048                  	dc.l Map_obj32+$32000000
0001F500 0000 0513                  	dc.b 0,	0, 5, $13
0001F504 7801 8B18                  	dc.l Map_obj78+$78000000
0001F508 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F50C 7901 8E84                  	dc.l Map_obj79+$79000000
0001F510 0100 0571                  	dc.w $100, lamppostart
0001F514                            	even
0001F514                            	even
0001F514                            
0001F514                            ; ---------------------------------------------------------------------------
0001F514                            ; Debug	list - Scrap Brain
0001F514                            ; ---------------------------------------------------------------------------
0001F514                            Debug_SBZ:
0001F514                            	include "_inc\Debug list - SBZ.asm"
0001F514                            ; ---------------------------------------------------------------------------
0001F514                            ; Debug	list - Scrap Brain
0001F514                            ; ---------------------------------------------------------------------------
0001F514 001D                       	dc.w $1D
0001F516 2500 B0E8                  	dc.l Map_obj25+$25000000
0001F51A 0000 26BA                  	dc.w 0, ringart+$2000
0001F51E 2600 B6CE                  	dc.l Map_obj26+$26000000
0001F522 0000 0680                  	dc.b 0,	0, 6, $80
0001F526 5F01 3416                  	dc.l Map_obj5F+$5F000000
0001F52A 0000 0400                  	dc.b 0,	0, 4, 0
0001F52E 6001 36C6                  	dc.l Map_obj60+$60000000
0001F532 0000 0429                  	dc.b 0,	0, 4, $29
0001F536 7801 8B18                  	dc.l Map_obj78+$78000000
0001F53A 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001F53E 1501 224A                  	dc.l Map_obj15b+$15000000
0001F542 0702 4391                  	dc.b 7,	2, $43,	$91
0001F546 6701 745E                  	dc.l Map_obj67+$67000000
0001F54A E000 C344                  	dc.b $E0, 0, $C3, $44
0001F54E 5201 17F4                  	dc.l Map_obj52+$52000000
0001F552 2802 22C0                  	dc.b $28, 2, $22, $C0
0001F556 3200 D048                  	dc.l Map_obj32+$32000000
0001F55A 0000 0513                  	dc.b 0,	0, 5, $13
0001F55E 6901 76BA                  	dc.l Map_obj69+$69000000
0001F562 0300 4492                  	dc.b 3,	0, $44,	$92
0001F566 6901 7714                  	dc.l Map_obj69a+$69000000
0001F56A 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001F56E 6A01 7974                  	dc.l Map_obj6A+$6A000000
0001F572 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001F576 5300 9876                  	dc.l Map_obj53+$53000000
0001F57A 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001F57E 5201 17F4                  	dc.l Map_obj52+$52000000
0001F582 3903 4460                  	dc.b $39, 3, $44, $60
0001F586 6B01 7D1A                  	dc.l Map_obj6B+$6B000000
0001F58A 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001F58E 2A00 9BF2                  	dc.l Map_obj2A+$2A000000
0001F592 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001F596 6B01 7D1A                  	dc.l Map_obj6B+$6B000000
0001F59A 1301 22C0                  	dc.b $13, 1, $22, $C0
0001F59E 6A01 7974                  	dc.l Map_obj6A+$6A000000
0001F5A2 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001F5A6 6B01 7D1A                  	dc.l Map_obj6B+$6B000000
0001F5AA 2401 22C0                  	dc.b $24, 1, $22, $C0
0001F5AE 6A01 7974                  	dc.l Map_obj6A+$6A000000
0001F5B2 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001F5B6 6B01 7D1A                  	dc.l Map_obj6B+$6B000000
0001F5BA 3401 22C0                  	dc.b $34, 1, $22, $C0
0001F5BE 6C01 7EDC                  	dc.l Map_obj6C+$6C000000
0001F5C2 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001F5C6 6D00 FD2C                  	dc.l Map_obj6D+$6D000000
0001F5CA 6400 83D9                  	dc.b $64, 0, $83, $D9
0001F5CE 6D00 FD2C                  	dc.l Map_obj6D+$6D000000
0001F5D2 640B 83D9                  	dc.b $64, $B, $83, $D9
0001F5D6 6E01 7F92                  	dc.l Map_obj6E+$6E000000
0001F5DA 0400 047E                  	dc.b 4,	0, 4, $7E
0001F5DE 7001 83DC                  	dc.l Map_obj70+$70000000
0001F5E2 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001F5E6 7101 2C8E                  	dc.l Map_obj71+$71000000
0001F5EA 1100 8680                  	dc.b $11, 0, $86, $80
0001F5EE 1E00 A060                  	dc.l Map_obj1E+$1E000000
0001F5F2 0400 2302                  	dc.b 4,	0, $23,	2
0001F5F6 7901 8E84                  	dc.l Map_obj79+$79000000
0001F5FA 0100 0571                  	dc.w $100, lamppostart
0001F5FE                            	even
0001F5FE                            	even
0001F5FE                            
0001F5FE                            ; ---------------------------------------------------------------------------
0001F5FE                            ; Debug	list - ending sequence / special stage
0001F5FE                            ; ---------------------------------------------------------------------------
0001F5FE                            Debug_Ending:
0001F5FE                            	include "_inc\Debug list - Ending and SS.asm"
0001F5FE                            ; ---------------------------------------------------------------------------
0001F5FE                            ; Debug	list - ending sequence / special stage
0001F5FE                            ; ---------------------------------------------------------------------------
0001F5FE 000D                       	dc.w $D
0001F600 2500 B0E8                  	dc.l Map_obj25+$25000000
0001F604 0000 26BA                  	dc.w 0, ringart+$2000
0001F608 4701 0252                  	dc.l Map_obj47+$47000000
0001F60C 0000 0380                  	dc.b 0,	0, 3, $80
0001F610 2800 A67A                  	dc.l Map_obj28a+$28000000
0001F614 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001F618 2800 A67A                  	dc.l Map_obj28a+$28000000
0001F61C 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001F620 2800 A67A                  	dc.l Map_obj28a+$28000000
0001F624 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F628 2800 A662                  	dc.l Map_obj28+$28000000
0001F62C 0D00 0553                  	dc.b $D, 0, 5, $53
0001F630 2800 A662                  	dc.l Map_obj28+$28000000
0001F634 0E00 0553                  	dc.b $E, 0, 5, $53
0001F638 2800 A662                  	dc.l Map_obj28+$28000000
0001F63C 0F00 0573                  	dc.b $F, 0, 5, $73
0001F640 2800 A662                  	dc.l Map_obj28+$28000000
0001F644 1000 0573                  	dc.b $10, 0, 5,	$73
0001F648 2800 A67A                  	dc.l Map_obj28a+$28000000
0001F64C 1100 0585                  	dc.b $11, 0, 5,	$85
0001F650 2800 A692                  	dc.l Map_obj28b+$28000000
0001F654 1200 0593                  	dc.b $12, 0, 5,	$93
0001F658 2800 A67A                  	dc.l Map_obj28a+$28000000
0001F65C 1300 0565                  	dc.b $13, 0, 5,	$65
0001F660 2800 A692                  	dc.l Map_obj28b+$28000000
0001F664 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F668                            	even
0001F668                            	even
0001F668                            
0001F668                            ; ---------------------------------------------------------------------------
0001F668                            ; Main level load blocks
0001F668                            ; ---------------------------------------------------------------------------
0001F668                            MainLoadBlocks:
0001F668                            	include "_inc\Main level load blocks.asm"
0001F668                            ; ---------------------------------------------------------------------------
0001F668                            ; Main level load blocks
0001F668                            ;
0001F668                            ; ===FORMAT===
0001F668                            ; level	patterns + (1st	PLC num	* 10^6)
0001F668                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F668                            ; 256x256 mappings
0001F668                            ; blank, music (unused), pal index (unused), pal index
0001F668                            ; ---------------------------------------------------------------------------
0001F668 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001F66C 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F670 0000 0000                  	dc.l Blk256_GHZ
0001F674 0081 0404                  	dc.b 0,	$81, 4,	4
0001F678 0000 0000                  	dc.l Nem_LZ+$6000000
0001F67C 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F680 0000 0000                  	dc.l Blk256_LZ
0001F684 0082 0505                  	dc.b 0,	$82, 5,	5
0001F688 0000 0000                  	dc.l Nem_MZ+$8000000
0001F68C 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F690 0000 0000                  	dc.l Blk256_MZ
0001F694 0083 0606                  	dc.b 0,	$83, 6,	6
0001F698 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F69C 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F6A0 0000 0000                  	dc.l Blk256_SLZ
0001F6A4 0084 0707                  	dc.b 0,	$84, 7,	7
0001F6A8 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F6AC 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F6B0 0000 0000                  	dc.l Blk256_SYZ
0001F6B4 0085 0808                  	dc.b 0,	$85, 8,	8
0001F6B8 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F6BC 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F6C0 0000 0000                  	dc.l Blk256_SBZ
0001F6C4 0086 0909                  	dc.b 0,	$86, 9,	9
0001F6C8 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001F6CC 0000 0000                  	dc.l Blk16_GHZ
0001F6D0 0000 0000                  	dc.l Blk256_GHZ
0001F6D4 0086 1313                  	dc.b 0,	$86, $13, $13
0001F6D8                            	even
0001F6D8                            	even
0001F6D8                            
0001F6D8                            ; ---------------------------------------------------------------------------
0001F6D8                            ; Pattern load cues
0001F6D8                            ; ---------------------------------------------------------------------------
0001F6D8                            ArtLoadCues:
0001F6D8                            	include "_inc\Pattern load cues.asm"
0001F6D8                            ; ---------------------------------------------------------------------------
0001F6D8                            ; Pattern load cues - index
0001F6D8                            ; ---------------------------------------------------------------------------
0001F6D8 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F6DC 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F6E0 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F6E4 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F6E8 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F6EC 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F6F0 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F6F4 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F6F8 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F6FC 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F700 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F704 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F708 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F70C 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F710 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F714 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F718                            ; ---------------------------------------------------------------------------
0001F718                            ; Pattern load cues - standard block 1
0001F718                            ; ---------------------------------------------------------------------------
0001F718 0002                       PLC_Main:	dc.w 2
0001F71A 0000 0000                  		dc.l Nem_Hud		; HUD
0001F71E D940                       		dc.w $D940
0001F720 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F724 FA80                       		dc.w $FA80
0001F726 0000 0000                  		dc.l Nem_Ring		; rings
0001F72A D740                       		dc.w ringart*$20
0001F72C                            ; ---------------------------------------------------------------------------
0001F72C                            ; Pattern load cues - standard block 2
0001F72C                            ; ---------------------------------------------------------------------------
0001F72C 0002                       PLC_Main2:	dc.w 2
0001F72E 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F732 AE20                       		dc.w lamppostart*$20
0001F734 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F738 AD00                       		dc.w pointsart*$20
0001F73A 0000 0000                  		dc.l Nem_Monitors	; monitors
0001F73E D000                       		dc.w $D000
0001F740                            ; ---------------------------------------------------------------------------
0001F740                            ; Pattern load cues - explosion
0001F740                            ; ---------------------------------------------------------------------------
0001F740 0000                       PLC_Explode:	dc.w 0
0001F742 0000 0000                  		dc.l Nem_Explode	; explosion
0001F746 B400                       		dc.w $B400
0001F748                            ; ---------------------------------------------------------------------------
0001F748                            ; Pattern load cues - game/time	over
0001F748                            ; ---------------------------------------------------------------------------
0001F748 0000                       PLC_GameOver:	dc.w 0
0001F74A 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F74E ABC0                       		dc.w $ABC0
0001F750                            ; ---------------------------------------------------------------------------
0001F750                            ; Pattern load cues - Green Hill
0001F750                            ; ---------------------------------------------------------------------------
0001F750 0009                       PLC_GHZ:	dc.w $9
0001F752 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F756 6B00                       		dc.w $6B00
0001F758 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001F75C 7A00                       		dc.w $7A00
0001F75E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F762 8000                       		dc.w $8000
0001F764 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F768 8880                       		dc.w $8880
0001F76A 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001F76E 8F60                       		dc.w $8F60
0001F770 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001F774 9360                       		dc.w $9360
0001F776 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001F77A 9E00                       		dc.w $9E00
0001F77C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F780 A360                       		dc.w $A360
0001F782 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F786 A460                       		dc.w $A460
0001F788 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F78C A660                       		dc.w $A660
0001F78E 0005                       PLC_GHZ2:	dc.w 5
0001F790 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F794 7000                       		dc.w $7000
0001F796 0000 0000                  		dc.l Nem_Bridge		; bridge
0001F79A 71C0                       		dc.w $71C0
0001F79C 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001F7A0 7300                       		dc.w $7300
0001F7A2 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001F7A6 7540                       		dc.w $7540
0001F7A8 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001F7AC A1E0                       		dc.w $A1E0
0001F7AE 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001F7B2 6980                       		dc.w $6980
0001F7B4                            ; ---------------------------------------------------------------------------
0001F7B4                            ; Pattern load cues - Labyrinth
0001F7B4                            ; ---------------------------------------------------------------------------
0001F7B4 000A                       PLC_LZ:		dc.w $A
0001F7B6 0000 0000                  		dc.l Nem_LzBlock1	; block
0001F7BA 3C00                       		dc.w $3C00
0001F7BC 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001F7C0 3E00                       		dc.w $3E00
0001F7C2 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001F7C6 4B20                       		dc.w $4B20
0001F7C8 0000 0000                  		dc.l Nem_Water		; water	surface
0001F7CC 6000                       		dc.w $6000
0001F7CE 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001F7D2 6200                       		dc.w $6200
0001F7D4 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001F7D8 6500                       		dc.w $6500
0001F7DA 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001F7DE 6900                       		dc.w $6900
0001F7E0 0000 0000                  		dc.l Nem_LzBlock3	; block
0001F7E4 7780                       		dc.w $7780
0001F7E6 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001F7EA 7880                       		dc.w $7880
0001F7EC 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001F7F0 7980                       		dc.w $7980
0001F7F2 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001F7F6 94C0                       		dc.w $94C0
0001F7F8 000C                       PLC_LZ2:	dc.w $C
0001F7FA 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001F7FE 7BC0                       		dc.w $7BC0
0001F800 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001F804 7CC0                       		dc.w $7CC0
0001F806 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001F80A 7EC0                       		dc.w $7EC0
0001F80C 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001F810 5D20                       		dc.w $5D20
0001F812 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001F816 8800                       		dc.w $8800
0001F818 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001F81C 89E0                       		dc.w $89E0
0001F81E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F822 8CE0                       		dc.w $8CE0
0001F824 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001F828 90C0                       		dc.w $90C0
0001F82A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F82E A1E0                       		dc.w $A1E0
0001F830 0000 0000                  		dc.l Nem_Cork		; cork block
0001F834 A000                       		dc.w $A000
0001F836 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F83A A360                       		dc.w $A360
0001F83C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F840 A460                       		dc.w $A460
0001F842 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F846 A660                       		dc.w $A660
0001F848                            ; ---------------------------------------------------------------------------
0001F848                            ; Pattern load cues - Marble
0001F848                            ; ---------------------------------------------------------------------------
0001F848 0008                       PLC_MZ:		dc.w 8
0001F84A 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001F84E 6000                       		dc.w $6000
0001F850 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F854 68A0                       		dc.w $68A0
0001F856 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F85A 7000                       		dc.w $7000
0001F85C 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001F860 71C0                       		dc.w $71C0
0001F862 0000 0000                  		dc.l Nem_Lava		; lava
0001F866 7500                       		dc.w $7500
0001F868 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F86C 8880                       		dc.w $8880
0001F86E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F872 8F60                       		dc.w $8F60
0001F874 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001F878 9700                       		dc.w $9700
0001F87A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F87E 9FE0                       		dc.w $9FE0
0001F880 0004                       PLC_MZ2:	dc.w 4
0001F882 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001F886 A260                       		dc.w $A260
0001F888 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F88C A360                       		dc.w $A360
0001F88E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F892 A460                       		dc.w $A460
0001F894 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F898 A660                       		dc.w $A660
0001F89A 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001F89E 5700                       		dc.w $5700
0001F8A0                            ; ---------------------------------------------------------------------------
0001F8A0                            ; Pattern load cues - Star Light
0001F8A0                            ; ---------------------------------------------------------------------------
0001F8A0 0007                       PLC_SLZ:	dc.w 7
0001F8A2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F8A6 8000                       		dc.w $8000
0001F8A8 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F8AC 8520                       		dc.w $8520
0001F8AE 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F8B2 9000                       		dc.w $9000
0001F8B4 0000 0000                  		dc.l Nem_SlzBlock	; block
0001F8B8 9C00                       		dc.w $9C00
0001F8BA 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001F8BE A260                       		dc.w $A260
0001F8C0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F8C4 A360                       		dc.w $A360
0001F8C6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F8CA A460                       		dc.w $A460
0001F8CC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F8D0 A660                       		dc.w $A660
0001F8D2 0005                       PLC_SLZ2:	dc.w 5
0001F8D4 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001F8D8 6E80                       		dc.w $6E80
0001F8DA 0000 0000                  		dc.l Nem_Fan		; fan
0001F8DE 7400                       		dc.w $7400
0001F8E0 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001F8E4 7980                       		dc.w $7980
0001F8E6 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001F8EA 7B80                       		dc.w $7B80
0001F8EC 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001F8F0 9B00                       		dc.w $9B00
0001F8F2 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001F8F6 9E00                       		dc.w $9E00
0001F8F8                            ; ---------------------------------------------------------------------------
0001F8F8                            ; Pattern load cues - Spring Yard
0001F8F8                            ; ---------------------------------------------------------------------------
0001F8F8 0003                       PLC_SYZ:	dc.w 3
0001F8FA 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F8FE 8000                       		dc.w $8000
0001F900 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F904 8880                       		dc.w $8880
0001F906 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F90A 8F60                       		dc.w $8F60
0001F90C 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001F910 9700                       		dc.w $9700
0001F912 0006                       PLC_SYZ2:	dc.w 6
0001F914 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F918 7000                       		dc.w $7000
0001F91A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F91E 72C0                       		dc.w $72C0
0001F920 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001F924 7740                       		dc.w $7740
0001F926 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F92A A1E0                       		dc.w $A1E0
0001F92C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F930 A360                       		dc.w $A360
0001F932 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F936 A460                       		dc.w $A460
0001F938 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F93C A660                       		dc.w $A660
0001F93E                            ; ---------------------------------------------------------------------------
0001F93E                            ; Pattern load cues - Scrap Brain
0001F93E                            ; ---------------------------------------------------------------------------
0001F93E 000A                       PLC_SBZ:	dc.w $A
0001F940 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001F944 5800                       		dc.w $5800
0001F946 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001F94A 5D00                       		dc.w $5D00
0001F94C 0000 0000                  		dc.l Nem_Girder		; girder
0001F950 5E00                       		dc.w $5E00
0001F952 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001F956 6040                       		dc.w $6040
0001F958 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001F95C 6880                       		dc.w $6880
0001F95E 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001F962 6900                       		dc.w $6900
0001F964 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F968 7220                       		dc.w $7220
0001F96A 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001F96E 76A0                       		dc.w $76A0
0001F970 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001F974 7B20                       		dc.w $7B20
0001F976 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F97A 7EA0                       		dc.w $7EA0
0001F97C 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001F980 9860                       		dc.w $9860
0001F982 000C                       PLC_SBZ2:	dc.w $C
0001F984 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F988 5600                       		dc.w $5600
0001F98A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F98E 8000                       		dc.w $8000
0001F990 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F994 8520                       		dc.w $8520
0001F996 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001F99A 8C00                       		dc.w $8C00
0001F99C 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001F9A0 8DE0                       		dc.w $8DE0
0001F9A2 0000 0000                  		dc.l Nem_Electric	; electric orb
0001F9A6 8FC0                       		dc.w $8FC0
0001F9A8 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001F9AC 9240                       		dc.w $9240
0001F9AE 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F9B2 7F20                       		dc.w $7F20
0001F9B4 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001F9B8 9BE0                       		dc.w $9BE0
0001F9BA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F9BE A1E0                       		dc.w $A1E0
0001F9C0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F9C4 A360                       		dc.w $A360
0001F9C6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F9CA A460                       		dc.w $A460
0001F9CC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F9D0 A660                       		dc.w $A660
0001F9D2                            ; ---------------------------------------------------------------------------
0001F9D2                            ; Pattern load cues - title card
0001F9D2                            ; ---------------------------------------------------------------------------
0001F9D2 0000                       PLC_TitleCard:	dc.w 0
0001F9D4 0000 0000                  		dc.l Nem_TitleCard
0001F9D8 B000                       		dc.w $B000
0001F9DA                            ; ---------------------------------------------------------------------------
0001F9DA                            ; Pattern load cues - act 3 boss
0001F9DA                            ; ---------------------------------------------------------------------------
0001F9DA 0005                       PLC_Boss:	dc.w 5
0001F9DC 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F9E0 8000                       		dc.w $8000
0001F9E2 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001F9E6 8D80                       		dc.w $8D80
0001F9E8 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001F9EC 93A0                       		dc.w $93A0
0001F9EE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001F9F2 A300                       		dc.w $A300
0001F9F4 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001F9F8 A300                       		dc.w $A300
0001F9FA 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F9FE A540                       		dc.w $A540
0001FA00                            ; ---------------------------------------------------------------------------
0001FA00                            ; Pattern load cues - act 1/2 signpost
0001FA00                            ; ---------------------------------------------------------------------------
0001FA00 0002                       PLC_Signpost:	dc.w 2
0001FA02 0000 0000                  		dc.l Nem_SignPost	; signpost
0001FA06 D000                       		dc.w $D000
0001FA08 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001FA0C 96C0                       		dc.w $96C0
0001FA0E 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001FA12 8C40                       		dc.w $8C40
0001FA14                            ; ---------------------------------------------------------------------------
0001FA14                            ; Pattern load cues - beta special stage warp effect
0001FA14                            ; ---------------------------------------------------------------------------
0001FA14 0000                       PLC_Warp:	dc.w 0
0001FA16 0000 0000                  		dc.l Nem_Warp
0001FA1A A820                       		dc.w $A820
0001FA1C                            ; ---------------------------------------------------------------------------
0001FA1C                            ; Pattern load cues - special stage
0001FA1C                            ; ---------------------------------------------------------------------------
0001FA1C 000C                       PLC_SpeStage:	dc.w $C
0001FA1E 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001FA22 0000                       		dc.w 0
0001FA24 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001FA28 0A20                       		dc.w $A20
0001FA2A 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FA2E 4760                       		dc.w $4760
0001FA30 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001FA34 4A20                       		dc.w $4A20
0001FA36 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001FA3A 4C60                       		dc.w $4C60
0001FA3C 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001FA40 5E00                       		dc.w $5E00
0001FA42 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001FA46 6E00                       		dc.w $6E00
0001FA48 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001FA4C 7E00                       		dc.w $7E00
0001FA4E 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001FA52 8E00                       		dc.w $8E00
0001FA54 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001FA58 9E00                       		dc.w $9E00
0001FA5A 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001FA5E BE00                       		dc.w $BE00
0001FA60 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001FA64 EE00                       		dc.w $EE00
0001FA66 0000 0000                  		dc.l Nem_Ring		; rings
0001FA6A 45A0                       		dc.w ssringart*$20
0001FA6C                            ; ---------------------------------------------------------------------------
0001FA6C                            ; Pattern load cues - GHZ animals
0001FA6C                            ; ---------------------------------------------------------------------------
0001FA6C 0001                       PLC_GHZAnimals:	dc.w 1
0001FA6E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FA72 B000                       		dc.w $B000
0001FA74 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FA78 B240                       		dc.w $B240
0001FA7A                            ; ---------------------------------------------------------------------------
0001FA7A                            ; Pattern load cues - LZ animals
0001FA7A                            ; ---------------------------------------------------------------------------
0001FA7A 0001                       PLC_LZAnimals:	dc.w 1
0001FA7C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FA80 B000                       		dc.w $B000
0001FA82 0000 0000                  		dc.l Nem_Seal		; seal
0001FA86 B240                       		dc.w $B240
0001FA88                            ; ---------------------------------------------------------------------------
0001FA88                            ; Pattern load cues - MZ animals
0001FA88                            ; ---------------------------------------------------------------------------
0001FA88 0001                       PLC_MZAnimals:	dc.w 1
0001FA8A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FA8E B000                       		dc.w $B000
0001FA90 0000 0000                  		dc.l Nem_Seal		; seal
0001FA94 B240                       		dc.w $B240
0001FA96                            ; ---------------------------------------------------------------------------
0001FA96                            ; Pattern load cues - SLZ animals
0001FA96                            ; ---------------------------------------------------------------------------
0001FA96 0001                       PLC_SLZAnimals:	dc.w 1
0001FA98 0000 0000                  		dc.l Nem_Pig		; pig
0001FA9C B000                       		dc.w $B000
0001FA9E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FAA2 B240                       		dc.w $B240
0001FAA4                            ; ---------------------------------------------------------------------------
0001FAA4                            ; Pattern load cues - SYZ animals
0001FAA4                            ; ---------------------------------------------------------------------------
0001FAA4 0001                       PLC_SYZAnimals:	dc.w 1
0001FAA6 0000 0000                  		dc.l Nem_Pig		; pig
0001FAAA B000                       		dc.w $B000
0001FAAC 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FAB0 B240                       		dc.w $B240
0001FAB2                            ; ---------------------------------------------------------------------------
0001FAB2                            ; Pattern load cues - SBZ animals
0001FAB2                            ; ---------------------------------------------------------------------------
0001FAB2 0001                       PLC_SBZAnimals:	dc.w 1
0001FAB4 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FAB8 B000                       		dc.w $B000
0001FABA 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FABE B240                       		dc.w $B240
0001FAC0                            ; ---------------------------------------------------------------------------
0001FAC0                            ; Pattern load cues - special stage results screen
0001FAC0                            ; ---------------------------------------------------------------------------
0001FAC0 0001                       PLC_SpeStResult:dc.w 1
0001FAC2 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001FAC6 A820                       		dc.w $A820
0001FAC8 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001FACC AA20                       		dc.w $AA20
0001FACE                            ; ---------------------------------------------------------------------------
0001FACE                            ; Pattern load cues - ending sequence
0001FACE                            ; ---------------------------------------------------------------------------
0001FACE 000C                       PLC_Ending:	dc.w $C
0001FAD0 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FAD4 6B00                       		dc.w $6B00
0001FAD6 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001FADA 7400                       		dc.w $7400
0001FADC 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FAE0 78A0                       		dc.w $78A0
0001FAE2 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001FAE6 7C20                       		dc.w $7C20
0001FAE8 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001FAEC A480                       		dc.w $A480
0001FAEE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FAF2 AA60                       		dc.w $AA60
0001FAF4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FAF8 ACA0                       		dc.w $ACA0
0001FAFA 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FAFE AE60                       		dc.w $AE60
0001FB00 0000 0000                  		dc.l Nem_Seal		; seal
0001FB04 B0A0                       		dc.w $B0A0
0001FB06 0000 0000                  		dc.l Nem_Pig		; pig
0001FB0A B260                       		dc.w $B260
0001FB0C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FB10 B4A0                       		dc.w $B4A0
0001FB12 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FB16 B660                       		dc.w $B660
0001FB18 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001FB1C B8A0                       		dc.w $B8A0
0001FB1E                            ; ---------------------------------------------------------------------------
0001FB1E                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001FB1E                            ; ---------------------------------------------------------------------------
0001FB1E 0002                       PLC_TryAgain:	dc.w 2
0001FB20 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FB24 78A0                       		dc.w $78A0
0001FB26 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001FB2A 7C20                       		dc.w $7C20
0001FB2C 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001FB30 B400                       		dc.w $B400
0001FB32                            ; ---------------------------------------------------------------------------
0001FB32                            ; Pattern load cues - Eggman on SBZ 2
0001FB32                            ; ---------------------------------------------------------------------------
0001FB32 0002                       PLC_EggmanSBZ2:	dc.w 2
0001FB34 0000 0000                  		dc.l Nem_SbzBlock	; block
0001FB38 A300                       		dc.w $A300
0001FB3A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001FB3E 8000                       		dc.w $8000
0001FB40 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FB44 9400                       		dc.w $9400
0001FB46                            ; ---------------------------------------------------------------------------
0001FB46                            ; Pattern load cues - final boss
0001FB46                            ; ---------------------------------------------------------------------------
0001FB46 0004                       PLC_FZBoss:	dc.w 4
0001FB48 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001FB4C 7400                       		dc.w $7400
0001FB4E 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001FB52 6000                       		dc.w $6000
0001FB54 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FB58 8000                       		dc.w $8000
0001FB5A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001FB5E 8E00                       		dc.w $8E00
0001FB60 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FB64 A540                       		dc.w $A540
0001FB66                            		even
0001FB66                            		even
0001FB66                            
0001FB66                            		incbin	misc\padding.bin
0001FC54                            		even
0001FC54                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
000200B6                            		even
000200B6                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
000201AE                            		even
000201AE                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
000202A8                            		even
000202A8                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00021274                            		even
00021274                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022C1E 00                         		even
00022C1E                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022C60                            		even
00022C60                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022D1E                            		even
00022D1E                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000231C6                            		even
000231C6                            ; ---------------------------------------------------------------------------
000231C6                            ; Sprite mappings - Sonic
000231C6                            ; ---------------------------------------------------------------------------
000231C6                            Map_Sonic:
000231C6                            	include "_maps\Sonic.asm"
000231C6                            ; ---------------------------------------------------------------------------
000231C6                            ; Sprite mappings - Sonic
000231C6                            ; ---------------------------------------------------------------------------
000231C6 0000 0000                  		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
000231CA 0000 0000                  		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
000231CE 0000 0000                  		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
000231D2 0000 0000                  		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
000231D6 0000 0000                  		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
000231DA 0000 0000                  		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
000231DE 0000 0000                  		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
000231E2 0000 0000                  		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
000231E6 0000 0000                  		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
000231EA 0000 0000                  		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
000231EE 0000 0000                  		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
000231F2 0000 0000                  		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
000231F6 0000 0000                  		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
000231FA 0000 0000                  		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
000231FE 0000 0000                  		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
00023202 0000 0000                  		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
00023206 0000 0000                  		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
0002320A 0000 0000                  		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
0002320E 0000 0000                  		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
00023212 0000 0000                  		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
00023216 0000 0000                  		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
0002321A 0000 0000                  		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
0002321E 0000 0000                  		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
00023222 0000 0000                  		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
00023226 0000 0000                  		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
0002322A 0000 0000                  		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
0002322E 0000 0000                  		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
00023232 0000 0000                  		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
00023236 0000 0000                  		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
0002323A 0000 0000                  		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
0002323E 0000 0000                  		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
00023242 0000 0000                  		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
00023246 0000 0000                  		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
0002324A 0000 0000                  		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
0002324E 0000 0000                  		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
00023252 0000 0000                  		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
00023256 0000 0000                  		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
0002325A 0000 0000                  		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
0002325E 0000 0000                  		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
00023262 0000 0000                  		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
00023266 0000 0000                  		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
0002326A 0000 0000                  		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
0002326E 0000 0000                  		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
00023272 0000 0000                  		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
00023276 00                         byte_21292:	dc.b 0
00023277 04                         byte_21293:	dc.b 4			; standing
00023278 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
0002327D F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
00023282 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
00023287 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
0002328C 03                         byte_212A8:	dc.b 3			; waiting 1
0002328D EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023292 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00023297 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
0002329C 03                         byte_212B8:	dc.b 3			; waiting 2
0002329D EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000232A2 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000232A7 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000232AC 03                         byte_212C8:	dc.b 3			; waiting 3
000232AD EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000232B2 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000232B7 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000232BC 03                         byte_212D8:	dc.b 3			; looking up
000232BD EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
000232C2 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
000232C7 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000232CC 04                         byte_212E8:	dc.b 4			; walking 1-1
000232CD EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
000232D2 FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
000232D7 FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
000232DC 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
000232E1 02                         byte_212FD:	dc.b 2			; walking 1-2
000232E2 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
000232E7 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
000232EC 02                         byte_21308:	dc.b 2			; walking 1-3
000232ED ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
000232F2 FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
000232F7 04                         byte_21313:	dc.b 4			; walking 1-4
000232F8 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
000232FD FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
00023302 FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
00023307 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
0002330C 02                         byte_21328:	dc.b 2			; walking 1-5
0002330D EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
00023312 FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
00023317 03                         byte_21333:	dc.b 3			; walking 1-6
00023318 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
0002331D FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
00023322 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
00023327 05                         byte_21343:	dc.b 5			; walking 2-1
00023328 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
0002332D EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
00023332 FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
00023337 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
0002333C 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
00023341 06                         byte_2135D:	dc.b 6			; walking 2-2
00023342 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00023347 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
0002334C FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
00023351 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
00023356 FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
0002335B F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
00023360 04                         byte_2137C:	dc.b 4			; walking 2-3
00023361 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00023366 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
0002336B FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
00023370 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
00023375 05                         byte_21391:	dc.b 5			; walking 2-4
00023376 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
0002337B EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
00023380 FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
00023385 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
0002338A 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
0002338F 04                         byte_213AB:	dc.b 4			; walking 2-5
00023390 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00023395 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
0002339A FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
0002339F 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
000233A4 05                         byte_213C0:	dc.b 5			; walking 2-6
000233A5 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
000233AA ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
000233AF FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
000233B4 FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
000233B9 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
000233BE 04                         byte_213DA:	dc.b 4			; walking 3-1
000233BF F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
000233C4 EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
000233C9 FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
000233CE 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
000233D3 02                         byte_213EF:	dc.b 2			; walking 3-2
000233D4 F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
000233D9 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
000233DE 02                         byte_213FA:	dc.b 2			; walking 3-3
000233DF F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
000233E4 F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
000233E9 04                         byte_21405:	dc.b 4			; walking 3-4
000233EA F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
000233EF EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
000233F4 FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
000233F9 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
000233FE 02                         byte_2141A:	dc.b 2			; walking 3-5
000233FF F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
00023404 F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
00023409 03                         byte_21425:	dc.b 3			; walking 3-6
0002340A F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
0002340F EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
00023414 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
00023419 06                         byte_21435:	dc.b 6			; walking 4-1
0002341A FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
0002341F ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
00023424 F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
00023429 F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
0002342E 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
00023433 FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
00023438 06                         byte_21454:	dc.b 6			; walking 4-2
00023439 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
0002343E E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
00023443 EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
00023448 F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
0002344D F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
00023452 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
00023457 04                         byte_21473:	dc.b 4			; walking 4-3
00023458 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
0002345D F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
00023462 EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
00023467 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
0002346C 05                         byte_21488:	dc.b 5			; walking 4-4
0002346D FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00023472 ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
00023477 F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
0002347C F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
00023481 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
00023486 04                         byte_214A2:	dc.b 4			; walking 4-5
00023487 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
0002348C F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
00023491 EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
00023496 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
0002349B 05                         byte_214B7:	dc.b 5			; walking 4-6
0002349C FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
000234A1 EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
000234A6 F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
000234AB 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
000234B0 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
000234B5 02                         byte_214D1:	dc.b 2			; running 1-1
000234B6 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000234BB FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000234C0 02                         byte_214DC:	dc.b 2			; running 1-2
000234C1 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000234C6 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000234CB 02                         byte_214E7:	dc.b 2			; running 1-3
000234CC EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000234D1 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000234D6 02                         byte_214F2:	dc.b 2			; running 1-4
000234D7 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000234DC FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000234E1 04                         byte_214FD:	dc.b 4			; running 2-1
000234E2 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000234E7 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000234EC FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000234F1 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
000234F6 03                         byte_21512:	dc.b 3			; running 2-2
000234F7 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000234FC EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023501 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023506 04                         byte_21522:	dc.b 4			; running 2-3
00023507 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002350C EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023511 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023516 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
0002351B 03                         byte_21537:	dc.b 3			; running 2-4
0002351C EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00023521 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023526 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
0002352B 02                         byte_21547:	dc.b 2			; running 3-1
0002352C F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023531 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023536 02                         byte_21552:	dc.b 2			; running 3-2
00023537 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
0002353C F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023541 02                         byte_2155D:	dc.b 2			; running 3-3
00023542 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023547 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
0002354C 02                         byte_21568:	dc.b 2			; running 3-4
0002354D F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023552 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023557 04                         byte_21573:	dc.b 4			; running 4-1
00023558 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
0002355D F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00023562 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023567 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
0002356C 02                         byte_21588:	dc.b 2			; running 4-2
0002356D F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00023572 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023577 04                         byte_21593:	dc.b 4			; running 4-3
00023578 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
0002357D F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00023582 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023587 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
0002358C 02                         byte_215A8:	dc.b 2			; running 4-4
0002358D F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00023592 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023597 01                         byte_215B3:	dc.b 1			; rolling 1
00023598 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002359D 01                         byte_215B9:	dc.b 1			; rolling 2
0002359E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000235A3 01                         byte_215BF:	dc.b 1			; rolling 3
000235A4 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000235A9 01                         byte_215C5:	dc.b 1			; rolling 4
000235AA F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000235AF 01                         byte_215CB:	dc.b 1			; rolling 5
000235B0 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000235B5 02                         byte_215D1:	dc.b 2			; warped 1 (unused)
000235B6 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
000235BB F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
000235C0 01                         byte_215DC:	dc.b 1			; warped 2 (unused)
000235C1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000235C6 02                         byte_215E2:	dc.b 2			; warped 3 (unused)
000235C7 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
000235CC 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
000235D1 01                         byte_215ED:	dc.b 1			; warped 4 (unused)
000235D2 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000235D7 02                         byte_215F3:	dc.b 2			; stopping 1
000235D8 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
000235DD FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
000235E2 04                         byte_215FE:	dc.b 4			; stopping 2
000235E3 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
000235E8 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
000235ED 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
000235F2 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
000235F7 04                         byte_21613:	dc.b 4			; ducking
000235F8 F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
000235FD FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
00023602 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
00023607 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
0002360C 03                         byte_21628:	dc.b 3			; balancing 1
0002360D EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
00023612 F402 0803 00               		dc.b $F4, 2, 8,	3, 0
00023617 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
0002361C 03                         byte_21638:	dc.b 3			; balancing 2
0002361D EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
00023622 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
00023627 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
0002362C 03                         byte_21648:	dc.b 3			; spinning 1 (LZ)
0002362D F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00023632 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00023637 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
0002363C 02                         byte_21658:	dc.b 2			; spinning 2 (LZ)
0002363D F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
00023642 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
00023647 03                         byte_21663:	dc.b 3			; spinning 3 (LZ)
00023648 F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
0002364D FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
00023652 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
00023657 03                         byte_21673:	dc.b 3			; spinning 4 (LZ)
00023658 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
0002365D FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00023662 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00023667 03                         byte_21683:	dc.b 3			; bouncing
00023668 E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
0002366D 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
00023672 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
00023677 04                         byte_21693:	dc.b 4			; hanging 1 (LZ)
00023678 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
0002367D 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00023682 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00023687 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
0002368C 04                         byte_216A8:	dc.b 4			; hanging 2 (LZ)
0002368D F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023692 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00023697 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
0002369C F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
000236A1 05                         byte_216BD:	dc.b 5			; celebration leap 1 (unused)
000236A2 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
000236A7 F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
000236AC 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
000236B1 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
000236B6 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
000236BB 05                         byte_216D7:	dc.b 5			; celebration leap 2 (unused)
000236BC E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
000236C1 E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
000236C6 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
000236CB 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
000236D0 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
000236D5 02                         byte_216F1:	dc.b 2			; pushing 1
000236D6 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
000236DB 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
000236E0 03                         byte_216FC:	dc.b 3			; pushing 2
000236E1 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
000236E6 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
000236EB 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
000236F0 02                         byte_2170C:	dc.b 2			; pushing 3
000236F1 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
000236F6 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
000236FB 03                         byte_21717:	dc.b 3			; pushing 4
000236FC EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00023701 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00023706 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
0002370B 02                         byte_21727:	dc.b 2			; surfing or sliding (unused)
0002370C EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023711 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
00023716 03                         byte_21732:	dc.b 3			; collecting bubble (unused)
00023717 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0002371C 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
00023721 E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
00023726 03                         byte_21742:	dc.b 3			; death	1
00023727 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
0002372C E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023731 F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
00023736 05                         byte_21752:	dc.b 5			; drowning
00023737 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
0002373C E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023741 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00023746 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
0002374B 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00023750 05                         byte_2176C:	dc.b 5			; death	2
00023751 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023756 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
0002375B F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00023760 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00023765 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
0002376A 02                         byte_21786:	dc.b 2			; shrinking 1 (unused)
0002376B EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023770 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
00023775 03                         byte_21791:	dc.b 3			; shrinking 2 (unused)
00023776 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
0002377B F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
00023780 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
00023785 01                         byte_217A1:	dc.b 1			; shrinking 3 (unused)
00023786 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
0002378B 01                         byte_217A7:	dc.b 1			; shrinking 4 (unused)
0002378C F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00023791 01                         byte_217AD:	dc.b 1			; shrinking 5 (unused)
00023792 F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
00023797 03                         byte_217B3:	dc.b 3			; injury
00023798 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
0002379D FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
000237A2 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
000237A7 03                         byte_217C3:	dc.b 3			; spinning 5 (LZ)
000237A8 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
000237AD FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
000237B2 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
000237B7 03                         byte_217D3:	dc.b 3			; spinning 6 (LZ)
000237B8 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
000237BD F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000237C2 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
000237C7 03                         byte_217E3:	dc.b 3			; collecting bubble (LZ)
000237C8 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
000237CD FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
000237D2 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
000237D7 02                         byte_217F3:	dc.b 2			; water	slide (LZ)
000237D8 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
000237DD F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
000237E2                            		even
000237E2                            		even
000237E2                            
000237E2                            ; ---------------------------------------------------------------------------
000237E2                            ; Uncompressed graphics	loading	array for Sonic
000237E2                            ; ---------------------------------------------------------------------------
000237E2                            SonicDynPLC:
000237E2                            	include "_inc\Sonic dynamic pattern load cues.asm"
000237E2                            ; ---------------------------------------------------------------------------
000237E2                            ; Uncompressed graphics	loading	array for Sonic
000237E2                            ; ---------------------------------------------------------------------------
000237E2 0000                       		dc.w SonPLC_Blank-SonicDynPLC
000237E4 0000                       		dc.w SonPLC_Stand-SonicDynPLC
000237E6 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
000237E8 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
000237EA 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
000237EC 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
000237EE 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
000237F0 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
000237F2 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
000237F4 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
000237F6 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
000237F8 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
000237FA 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
000237FC 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
000237FE 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
00023800 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
00023802 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
00023804 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
00023806 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
00023808 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
0002380A 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
0002380C 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
0002380E 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
00023810 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
00023812 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
00023814 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
00023816 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
00023818 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
0002381A 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
0002381C 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
0002381E 0000                       		dc.w SonPLC_Run11-SonicDynPLC
00023820 0000                       		dc.w SonPLC_Run12-SonicDynPLC
00023822 0000                       		dc.w SonPLC_Run13-SonicDynPLC
00023824 0000                       		dc.w SonPLC_Run14-SonicDynPLC
00023826 0000                       		dc.w SonPLC_Run21-SonicDynPLC
00023828 0000                       		dc.w SonPLC_Run22-SonicDynPLC
0002382A 0000                       		dc.w SonPLC_Run23-SonicDynPLC
0002382C 0000                       		dc.w SonPLC_Run24-SonicDynPLC
0002382E 0000                       		dc.w SonPLC_Run31-SonicDynPLC
00023830 0000                       		dc.w SonPLC_Run32-SonicDynPLC
00023832 0000                       		dc.w SonPLC_Run33-SonicDynPLC
00023834 0000                       		dc.w SonPLC_Run34-SonicDynPLC
00023836 0000                       		dc.w SonPLC_Run41-SonicDynPLC
00023838 0000                       		dc.w SonPLC_Run42-SonicDynPLC
0002383A 0000                       		dc.w SonPLC_Run43-SonicDynPLC
0002383C 0000                       		dc.w SonPLC_Run44-SonicDynPLC
0002383E 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
00023840 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
00023842 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
00023844 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
00023846 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
00023848 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
0002384A 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
0002384C 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
0002384E 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
00023850 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
00023852 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
00023854 0000                       		dc.w SonPLC_Duck-SonicDynPLC
00023856 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
00023858 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
0002385A 0000                       		dc.w SonPLC_Float1-SonicDynPLC
0002385C 0000                       		dc.w SonPLC_Float2-SonicDynPLC
0002385E 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023860 0000                       		dc.w SonPLC_Float4-SonicDynPLC
00023862 0000                       		dc.w SonPLC_Spring-SonicDynPLC
00023864 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
00023866 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
00023868 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
0002386A 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
0002386C 0000                       		dc.w SonPLC_Push1-SonicDynPLC
0002386E 0000                       		dc.w SonPLC_Push2-SonicDynPLC
00023870 0000                       		dc.w SonPLC_Push3-SonicDynPLC
00023872 0000                       		dc.w SonPLC_Push4-SonicDynPLC
00023874 0000                       		dc.w SonPLC_Slide-SonicDynPLC
00023876 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
00023878 0000                       		dc.w SonPLC_Death1-SonicDynPLC
0002387A 0000                       		dc.w SonPLC_Drown-SonicDynPLC
0002387C 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
0002387E 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
00023880 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
00023882 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
00023884 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
00023886 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
00023888 0000                       		dc.w SonPLC_Float1-SonicDynPLC
0002388A 0000                       		dc.w SonPLC_Float3-SonicDynPLC
0002388C 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
0002388E 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
00023890 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
00023892 00                         SonPLC_Blank:	dc.b 0
00023893 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
0002389C 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
000238A3 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
000238AA 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
000238B1 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
000238B8 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
000238C1 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
000238C6 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
000238CB 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
000238D4 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
000238D9 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
000238E0 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
000238EB 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
000238F8 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
00023901 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
0002390C 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
00023915 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
00023920 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
00023929 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
0002392E 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
00023933 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
0002393C 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
00023941 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
00023948 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
00023955 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
00023962 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
0002396B 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00023976 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
0002397F 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
0002398A 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
0002398F 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
00023994 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
00023999 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
0002399E 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
000239A7 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
000239AE 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
000239B7 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
000239BE 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
000239C3 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
000239C8 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
000239CD 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
000239D2 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
000239DB 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
000239E0 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
000239E9 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
000239EE 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
000239F1 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
000239F4 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
000239F7 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
000239FA 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
000239FD 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
00023A02 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
00023A05 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
00023A0A 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
00023A0D 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
00023A12 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
00023A1B 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
00023A24 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
00023A2B 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
00023A32 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
00023A39 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
00023A3C 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
00023A43 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
00023A4A 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
00023A51 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
00023A5A 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
00023A63 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
00023A6E 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
00023A79 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
00023A7E 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
00023A85 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
00023A8A 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
00023A91 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
00023A96 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
00023A9D 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
00023AA4 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
00023AAF 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
00023ABA 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
00023ABF 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
00023AC6 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
00023AC9 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
00023ACC 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
00023ACF 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
00023AD6 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
00023ADD 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
00023AE2                            		even
00023AE2                            		even
00023AE2                            
00023AE2                            ; ---------------------------------------------------------------------------
00023AE2                            ; Uncompressed graphics	- Sonic
00023AE2                            ; ---------------------------------------------------------------------------
00023AE2                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002DC02                            		even
0002DC02                            
0002DC02                            ; ---------------------------------------------------------------------------
0002DC02                            ; Uncompressed graphics	- Sonime
0002DC02                            ; ---------------------------------------------------------------------------
0002DC02                            Art_Sonime_Torso:	incbin	artunc\sonime_torso.bin
0002DD82                            		even
0002DD82                            Art_Sonime_Head:	incbin	artunc\sonime_head.bin
0002E002                            		even
0002E002                            Art_Sonime_Hair:	incbin	artunc\sonime_hair.bin
0002E102                            		even
0002E102                            Art_Sonime_Faces:	incbin	artunc\sonime_faces.bin
0002EA02                            		even
0002EA02                            Art_Sonime_LeftEar:	incbin	artunc\sonime_leftear.bin
0002EA42                            		even
0002EA42                            Art_Sonime_RightEar:	incbin	artunc\sonime_rightear.bin
0002EAC2                            		even
0002EAC2                            
0002EAC2                            ; ---------------------------------------------------------------------------
0002EAC2                            ; Compressed graphics - various
0002EAC2                            ; ---------------------------------------------------------------------------
0002EAC2                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002EBC6                            		even
0002EBC6                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002EC00                            		even
0002EC00                            UnC_Shield:	incbin	artunc\shield.bin	; shield
0002EF60                            		even
0002EF60                            ArtUnc_InvStars:	incbin	artunc\invstars.bin	; invincibility stars
0002F360                            		even
0002F360                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002F46A                            		even
0002F46A                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002F4BC                            		even
0002F4BC                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002F704                            		even
0002F704                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002F88A                            		even
0002F88A                            ; ---------------------------------------------------------------------------
0002F88A                            ; Sprite mappings - walls of the special stage
0002F88A                            ; ---------------------------------------------------------------------------
0002F88A                            Map_SSWalls:
0002F88A                            	include "_maps\SSwalls.asm"
0002F88A                            ; ---------------------------------------------------------------------------
0002F88A                            ; Sprite mappings - walls of the special stage
0002F88A                            ; ---------------------------------------------------------------------------
0002F88A 0000                       Map_SSWalls2:	dc.w byte_2C584-Map_SSWalls2
0002F88C 01                         byte_2C584:	dc.b 1
0002F88D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002F892                            		even
0002F892                            		even
0002F892                            ; ---------------------------------------------------------------------------
0002F892                            ; Compressed graphics - special stage
0002F892                            ; ---------------------------------------------------------------------------
0002F892                            Art_SSWalls:	incbin	artunc\sswalls.bin	; special stage walls
00031892                            		even
00031892                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000319C6                            		even
000319C6                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032656                            		even
00032656                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032956                            		even
00032956                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00032E4A                            		even
00032E4A                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00032F38                            		even
00032F38                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033008                            		even
00033008                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000330FE                            		even
000330FE                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003315C                            		even
0003315C                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000331EE                            		even
000331EE                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000332B0                            		even
000332B0                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003337E                            		even
0003337E                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003344A                            		even
0003344A                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033512                            		even
00033512                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000335DC                            		even
000335DC                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000336AC                            		even
000336AC                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000338A0                            		even
000338A0                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033A08                            		even
00033A08                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00033AB8                            		even
00033AB8                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00033B92                            		even
00033B92                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00033C16                            		even
00033C16                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00033D94                            		even
00033D94                            ; ---------------------------------------------------------------------------
00033D94                            ; Compressed graphics - GHZ stuff
00033D94                            ; ---------------------------------------------------------------------------
00033D94                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00033DDE                            		even
00033DDE                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00033EF8                            		even
00033EF8                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00033FE4                            		even
00033FE4                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0003402C                            		even
0003402C                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000341CA                            		even
000341CA                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034246                            		even
00034246                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003445A                            		even
0003445A                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034586                            		even
00034586                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
000346B4                            		even
000346B4                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034752                            		even
00034752                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
000347B2                            		even
000347B2                            ; ---------------------------------------------------------------------------
000347B2                            ; Compressed graphics - LZ stuff
000347B2                            ; ---------------------------------------------------------------------------
000347B2                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000348D6                            		even
000348D6                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000350CA                            		even
000350CA                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003524A                            		even
0003524A                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
000353B4                            		even
000353B4                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003599E 00                         		even
0003599E                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00035A54                            		even
00035A54                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00035AF6                            		even
00035AF6                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00035C52                            		even
00035C52                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00035CB6                            		even
00035CB6                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00035E08                            		even
00035E08                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000362EA                            		even
000362EA                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003645A                            		even
0003645A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036712                            		even
00036712                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003684A                            		even
0003684A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036974                            		even
00036974                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00036A84                            		even
00036A84                            ; ---------------------------------------------------------------------------
00036A84                            ; Compressed graphics - MZ stuff
00036A84                            ; ---------------------------------------------------------------------------
00036A84                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00036D12                            		even
00036D12                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00036DD0                            		even
00036DD0                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00036E88                            		even
00036E88                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00036EDC                            		even
00036EDC                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000371BA                            		even
000371BA                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00037AD0                            		even
00037AD0                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00037C34                            		even
00037C34                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00037CBC                            		even
00037CBC                            ; ---------------------------------------------------------------------------
00037CBC                            ; Compressed graphics - SLZ stuff
00037CBC                            ; ---------------------------------------------------------------------------
00037CBC                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00037EF8                            		even
00037EF8                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0003803E                            		even
0003803E                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038282                            		even
00038282                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000382E4                            		even
000382E4                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000383C6                            		even
000383C6                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000385A8                            		even
000385A8                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000386B4                            		even
000386B4                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038758                            		even
00038758                            ; ---------------------------------------------------------------------------
00038758                            ; Compressed graphics - SYZ stuff
00038758                            ; ---------------------------------------------------------------------------
00038758                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000388C2                            		even
000388C2                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038924                            		even
00038924                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00038A06                            		even
00038A06                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00038C94                            		even
00038C94                            ; ---------------------------------------------------------------------------
00038C94                            ; Compressed graphics - SBZ stuff
00038C94                            ; ---------------------------------------------------------------------------
00038C94                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00038CE8                            		even
00038CE8                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00038F84                            		even
00038F84                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039188                            		even
00039188                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039326                            		even
00039326                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039656                            		even
00039656                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039834                            		even
00039834                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003988C                            		even
0003988C                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00039A0C                            		even
00039A0C                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00039B0A                            		even
00039B0A                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00039C96                            		even
00039C96                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00039CE6                            		even
00039CE6                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00039D3E                            		even
00039D3E                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00039E3A                            		even
00039E3A                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00039F50                            		even
00039F50                            ; ---------------------------------------------------------------------------
00039F50                            ; Compressed graphics - enemies
00039F50                            ; ---------------------------------------------------------------------------
00039F50                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A310                            		even
0003A310                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003A7FE                            		even
0003A7FE                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003ABA4                            		even
0003ABA4                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003AD8C                            		even
0003AD8C                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B476                            		even
0003B476                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B6DE                            		even
0003B6DE                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B95A 00                         		even
0003B95A                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BE7E                            		even
0003BE7E                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C108                            		even
0003C108                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C726                            		even
0003C726                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CB0E                            		even
0003CB0E                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CE0A                            		even
0003CE0A                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D052                            		even
0003D052                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D2EA                            		even
0003D2EA                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D4C8                            		even
0003D4C8                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D656                            		even
0003D656                            ; ---------------------------------------------------------------------------
0003D656                            ; Compressed graphics - various
0003D656                            ; ---------------------------------------------------------------------------
0003D656                            Nem_TitleCard:      incbin  artnem\ttlcards.bin ; title cards
0003E656                            Nem_TitleCard_End:  even
0003E656                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E74C                            		even
0003E74C                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003E852                            		even
0003E852                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E946                            		even
0003E946                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003ECF8 00                         		even
0003ECF8                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003F35E                            		even
0003F35E                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003F40E                            		even
0003F40E                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F5A0                            		even
0003F5A0                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F6A2                            		even
0003F6A2                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F77E                            		even
0003F77E                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003FBFA                            		even
0003FBFA                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003FCBA                            		even
0003FCBA                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003FE2E                            		even
0003FE2E                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00040130                            		even
00040130                            ; ---------------------------------------------------------------------------
00040130                            ; Compressed graphics - continue screen
00040130                            ; ---------------------------------------------------------------------------
00040130                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
000403E0                            		even
000403E0                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0004061A                            		even
0004061A                            ; ---------------------------------------------------------------------------
0004061A                            ; Compressed graphics - animals
0004061A                            ; ---------------------------------------------------------------------------
0004061A                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040772                            		even
00040772                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
000408CE                            		even
000408CE                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040A4A                            		even
00040A4A                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040B66                            		even
00040B66                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040C9C                            		even
00040C9C                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040DD6                            		even
00040DD6                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040F32                            		even
00040F32                            ; ---------------------------------------------------------------------------
00040F32                            ; Compressed graphics - primary patterns and block mappings
00040F32                            ; ---------------------------------------------------------------------------
00040F32                            Blk16_GHZ:	incbin	map16\ghz.bin
00041860                            		even
00041860                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042EC0                            		even
00042EC0                            Nem_GHZ_2nd:	incbin	artkos\8x8ghz.kos	; GHZ secondary patterns
00045290                            		even
00045290                            Blk256_GHZ:	incbin	map256_u\ghz.bin
0004F690                            		even
0004F690                            Blk16_LZ:	incbin	map16\lz.bin
0004FA54                            		even
0004FA54                            Nem_LZ:		incbin	artkos\8x8lz.kos	; LZ primary patterns
00051476                            		even
00051476                            Blk256_LZ:	incbin	map256_u\lz.bin
0005B876                            		even
0005B876                            Blk16_MZ:	incbin	map16\mz.bin
0005C080                            		even
0005C080                            Nem_MZ:		incbin	artkos\8x8mz.kos	; MZ primary patterns
0005E03A                            		even
0005E03A                            Blk256_MZ:	incbin	map256_u\mz.bin
0006843A                            		even
0006843A                            Blk16_SLZ:	incbin	map16\slz.bin
00068C1E                            		even
00068C1E                            Nem_SLZ:	incbin	artkos\8x8slz.kos	; SLZ primary patterns
0006B318                            		even
0006B318                            Blk256_SLZ:	incbin	map256_u\slz.bin
00075718                            		even
00075718                            Blk16_SYZ:	incbin	map16\syz.bin
00075FC6                            		even
00075FC6                            Nem_SYZ:	incbin	artkos\8x8syz.kos	; SYZ primary patterns
0007863A                            		even
0007863A                            Blk256_SYZ:	incbin	map256_u\syz.bin
00082A3A                            		even
00082A3A                            Blk16_SBZ:	incbin	map16\sbz.bin
000837FA                            		even
000837FA                            Nem_SBZ:	incbin	artkos\8x8sbz.kos	; SBZ primary patterns
00085A28                            		even
00085A28                            Blk256_SBZ:	incbin	map256_u\sbz.bin
0008FE28                            		even
0008FE28                            ; ---------------------------------------------------------------------------
0008FE28                            ; Compressed graphics - bosses and ending sequence
0008FE28                            ; ---------------------------------------------------------------------------
0008FE28                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0009068C                            		even
0009068C                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00090976                            		even
00090976                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000911FA                            		even
000911FA                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00091A26                            		even
00091A26                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0009218E                            		even
0009218E                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0009270E                            		even
0009270E                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0009282E                            		even
0009282E                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00092A2C                            		even
00092A2C                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00093C0A                            		even
00093C0A                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0009454E                            		even
0009454E                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00094924                            		even
00094924                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00094EB4                            		even
00094EB4                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0009513C                            		even
0009513C                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0009573A                            		even
0009573A                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000959C2                            		even
000959C2                            		incbin	misc\padding2.bin
00095AC6                            		even
00095AC6                            ; ---------------------------------------------------------------------------
00095AC6                            ; Collision data
00095AC6                            ; ---------------------------------------------------------------------------
00095AC6                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00095BC6                            		even
00095BC6                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00096BC6                            		even
00096BC6                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00097BC6                            		even
00097BC6                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00097D60                            		even
00097D60                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00097E3C                            		even
00097E3C                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00097FCC                            		even
00097FCC                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000981C0                            		even
000981C0                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000983B4                            		even
000983B4                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0009860C                            		even
0009860C                            ; ---------------------------------------------------------------------------
0009860C                            ; Special layouts
0009860C                            ; ---------------------------------------------------------------------------
0009860C                            SS_1:		incbin	sslayout\1.bin
00098886                            		even
00098886                            SS_2:		incbin	sslayout\2.bin
00098C98                            		even
00098C98                            SS_3:		incbin	sslayout\3.bin
00098FF4                            		even
00098FF4                            SS_4:		incbin	sslayout\4.bin
000994CE                            		even
000994CE                            SS_5:		incbin	sslayout\5.bin
000999A0                            		even
000999A0                            SS_6:		incbin	sslayout\6.bin
00099CB0                            		even
00099CB0                            ; ---------------------------------------------------------------------------
00099CB0                            ; Animated uncompressed graphics
00099CB0                            ; ---------------------------------------------------------------------------
00099CB0                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00099EB0                            		even
00099EB0                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0009A2B0                            		even
0009A2B0                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0009A730                            		even
0009A730                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0009AA30                            		even
0009AA30                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0009B030                            		even
0009B030                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0009B330                            		even
0009B330                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0009BDB0                            		even
0009BDB0                            
0009BDB0                            ; ---------------------------------------------------------------------------
0009BDB0                            ; Level	layout index
0009BDB0                            ; ---------------------------------------------------------------------------
0009BDB0 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0009BDB6 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0009BDBC 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0009BDC2 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0009BDC8 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0009BDCE 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0009BDD4 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0009BDDA 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0009BDE0 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0009BDE6 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0009BDEC 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0009BDF2 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0009BDF8 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009BDFE 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009BE04 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009BE0A 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0009BE10 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0009BE16 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0009BE1C 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0009BE22 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0009BE28 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0009BE2E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0009BE34 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0009BE3A 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0009BE40 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009BE46 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009BE4C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009BE52 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009BE58                            
0009BE58                            Level_GHZ1:	incbin	levels\ghz1.bin
0009BF4A                            		even
0009BF4A 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0009BF4E                            Level_GHZ2:	incbin	levels\ghz2.bin
0009C016                            		even
0009C016 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0009C01A                            Level_GHZ3:	incbin	levels\ghz3.bin
0009C13C                            		even
0009C13C                            Level_GHZbg:	incbin	levels\ghzbg.bin
0009C15E                            		even
0009C15E 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0009C162 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0009C166                            
0009C166                            Level_LZ1:	incbin	levels\lz1.bin
0009C268                            		even
0009C268                            Level_LZbg:	incbin	levels\lzbg.bin
0009C36A                            		even
0009C36A 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0009C36E                            Level_LZ2:	incbin	levels\lz2.bin
0009C408                            		even
0009C408 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0009C40C                            Level_LZ3:	incbin	levels\lz3.bin
0009C526                            		even
0009C526 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0009C52A                            Level_SBZ3:	incbin	levels\sbz3.bin
0009C5E4                            		even
0009C5E4 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0009C5E8                            
0009C5E8                            Level_MZ1:	incbin	levels\mz1.bin
0009C686                            		even
0009C686                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0009C700                            		even
0009C700                            Level_MZ2:	incbin	levels\mz2.bin
0009C7A4                            		even
0009C7A4                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0009C836                            		even
0009C836 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0009C83A                            Level_MZ3:	incbin	levels\mz3.bin
0009C91C                            		even
0009C91C                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0009C9C0                            		even
0009C9C0 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0009C9C4 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0009C9C8                            
0009C9C8                            Level_SLZ1:	incbin	levels\slz1.bin
0009CADA                            		even
0009CADA                            Level_SLZbg:	incbin	levels\slzbg.bin
0009CB54                            		even
0009CB54                            Level_SLZ2:	incbin	levels\slz2.bin
0009CC44                            		even
0009CC44                            Level_SLZ3:	incbin	levels\slz3.bin
0009CD5E                            		even
0009CD5E 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0009CD62                            
0009CD62                            Level_SYZ1:	incbin	levels\syz1.bin
0009CE1E                            		even
0009CE1E                            Level_SYZbg:	incbin	levels\syzbg.bin
0009CE58                            		even
0009CE58 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0009CE5C                            Level_SYZ2:	incbin	levels\syz2.bin
0009CF60                            		even
0009CF60 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0009CF64                            Level_SYZ3:	incbin	levels\syz3.bin
0009D0BE                            		even
0009D0BE 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0009D0C2 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0009D0C6                            
0009D0C6                            Level_SBZ1:	incbin	levels\sbz1.bin
0009D1E8                            		even
0009D1E8                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0009D226                            		even
0009D226                            Level_SBZ2:	incbin	levels\sbz2.bin
0009D368                            		even
0009D368                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0009D4D2                            		even
0009D4D2 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0009D4D6 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0009D4DA                            Level_End:	incbin	levels\ending.bin
0009D4FA                            		even
0009D4FA 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0009D4FE                            
0009D4FE                            ; ---------------------------------------------------------------------------
0009D4FE                            ; Animated uncompressed giant ring graphics
0009D4FE                            ; ---------------------------------------------------------------------------
0009D4FE                            Art_BigRing:	incbin	artunc\bigring.bin
0009E13E                            		even
0009E13E                            
0009E13E                            		incbin	misc\padding3.bin
0009E1DA                            		even
0009E1DA                            
0009E1DA                            ; ---------------------------------------------------------------------------
0009E1DA                            ; Sprite locations index
0009E1DA                            ; ---------------------------------------------------------------------------
0009E1DA 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E1DE 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E1E2 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E1E6 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E1EA 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E1EE 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E1F2 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E1F6 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E1FA 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E1FE 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E202 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E206 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E20A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E20E 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E212 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E216 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E21A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E21E 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E222 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E226 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E22A 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E22E 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E232 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E236 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E23A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E23E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E242 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E246 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E24A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E24E 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0009E252 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009E256 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E25A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E25E 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0009E262 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009E266 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E26A FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0009E270                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0009E58E                            		even
0009E58E                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0009E990                            		even
0009E990                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0009EE8E                            		even
0009EE8E                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0009F25A                            		even
0009F25A                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0009F542                            		even
0009F542                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0009FB00                            		even
0009FB00                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0009FEF0                            		even
0009FEF0                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0009FF22                            		even
0009FF22                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0009FF54                            		even
0009FF54                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0009FF86                            		even
0009FF86                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0009FFB8                            		even
0009FFB8                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000A0002                            		even
000A0002                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000A0040                            		even
000A0040                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000A02DA                            		even
000A02DA                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000A06FA                            		even
000A06FA                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000A0BB6                            		even
000A0BB6                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000A0FB2                            		even
000A0FB2                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000A1294                            		even
000A1294                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000A16F0                            		even
000A16F0                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000A1A80                            		even
000A1A80                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000A1E58                            		even
000A1E58                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000A234A                            		even
000A234A                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000A297A                            		even
000A297A                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000A2EF6                            		even
000A2EF6                            ObjPos_FZ:	incbin	objpos\fz.bin
000A2F08                            		even
000A2F08                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000A2F3A                            		even
000A2F3A                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000A2F6C                            		even
000A2F6C                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000A2F9E                            		even
000A2F9E                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000A2FD0                            		even
000A2FD0                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000A3002                            		even
000A3002                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000A303A                            		even
000A303A                            ObjPos_End:	incbin	objpos\ending.bin
000A3196                            		even
000A3196 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000A319C                            ; ---------------------------------------------------------------------------
000A319C                            ; Sprite locations index
000A319C                            ; ---------------------------------------------------------------------------
000A319C 0000 0000                  RingPos_Index:	dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A31A0 0000 0000                  		dc.w Rings_GHZ2-RingPos_Index, Rings_Null-RingPos_Index
000A31A4 0000 0000                  		dc.w Rings_GHZ3-RingPos_Index, Rings_Null-RingPos_Index
000A31A8 0000 0000                  		dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A31AC 0000 0000                  		dc.w Rings_LZ1-RingPos_Index, Rings_Null-RingPos_Index
000A31B0 0000 0000                  		dc.w Rings_LZ2-RingPos_Index, Rings_Null-RingPos_Index
000A31B4 0000 0000                  		dc.w Rings_LZ3-RingPos_Index, Rings_Null-RingPos_Index
000A31B8 0000 0000                  		dc.w Rings_SBZ3-RingPos_Index, Rings_Null-RingPos_Index
000A31BC 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A31C0 0000 0000                  		dc.w Rings_MZ2-RingPos_Index, Rings_Null-RingPos_Index
000A31C4 0000 0000                  		dc.w Rings_MZ3-RingPos_Index, Rings_Null-RingPos_Index
000A31C8 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A31CC 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A31D0 0000 0000                  		dc.w Rings_SLZ2-RingPos_Index, Rings_Null-RingPos_Index
000A31D4 0000 0000                  		dc.w Rings_SLZ3-RingPos_Index, Rings_Null-RingPos_Index
000A31D8 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A31DC 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A31E0 0000 0000                  		dc.w Rings_SYZ2-RingPos_Index, Rings_Null-RingPos_Index
000A31E4 0000 0000                  		dc.w Rings_SYZ3-RingPos_Index, Rings_Null-RingPos_Index
000A31E8 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A31EC 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A31F0 0000 0000                  		dc.w Rings_SBZ2-RingPos_Index, Rings_Null-RingPos_Index
000A31F4 0000 0000                  		dc.w Rings_FZ-RingPos_Index, Rings_Null-RingPos_Index
000A31F8 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A31FC 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3200 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3204 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3208 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A320C                            Rings_GHZ1:	incbin	rings\ghz1_INDIVIDUAL.bin
000A347E                            		even
000A347E                            Rings_GHZ2:	incbin	rings\ghz2_INDIVIDUAL.bin
000A3670                            		even
000A3670                            Rings_GHZ3:	incbin	rings\ghz3_INDIVIDUAL.bin
000A3862                            		even
000A3862                            Rings_LZ1:	incbin	rings\lz1_INDIVIDUAL.bin
000A397C                            		even
000A397C                            Rings_LZ2:	incbin	rings\lz2_INDIVIDUAL.bin
000A3A66                            		even
000A3A66                            Rings_LZ3:	incbin	rings\lz3_INDIVIDUAL.bin
000A3ADC                            		even
000A3ADC                            Rings_SBZ3:	incbin	rings\sbz3_INDIVIDUAL.bin
000A3C92                            		even
000A3C92                            Rings_MZ1:	incbin	rings\mz1_INDIVIDUAL.bin
000A3D90                            		even
000A3D90                            Rings_MZ2:	incbin	rings\mz2_INDIVIDUAL.bin
000A3E72                            		even
000A3E72                            Rings_MZ3:	incbin	rings\mz3_INDIVIDUAL.bin
000A3F98                            		even
000A3F98                            Rings_SLZ1:	incbin	rings\slz1_INDIVIDUAL.bin
000A41DA                            		even
000A41DA                            Rings_SLZ2:	incbin	rings\slz2_INDIVIDUAL.bin
000A44AC                            		even
000A44AC                            Rings_SLZ3:	incbin	rings\slz3_INDIVIDUAL.bin
000A477E                            		even
000A477E                            Rings_SYZ1:	incbin	rings\syz1_INDIVIDUAL.bin
000A49F8                            		even
000A49F8                            Rings_SYZ2:	incbin	rings\syz2_INDIVIDUAL.bin
000A4D76                            		even
000A4D76                            Rings_SYZ3:	incbin	rings\syz3_INDIVIDUAL.bin
000A5008                            		even
000A5008                            Rings_SBZ1:	incbin	rings\sbz1_INDIVIDUAL.bin
000A5322                            		even
000A5322                            Rings_SBZ2:	incbin	rings\sbz2_INDIVIDUAL.bin
000A558C                            		even
000A558C                            Rings_FZ:	incbin	rings\fz_INDIVIDUAL.bin
000A5592                            		even
000A5592                            Rings_End:	incbin	rings\ending_INDIVIDUAL.bin
000A5598                            		even
000A5598 FFFF 0000                  Rings_Null:	dc.b $FF, $FF, 0, 0
000A559C                            ; ---------------------------------------------------------------------------
000A559C                            ; ---------------------------------------------------------------------------
000A559C                            		incbin	misc\padding4.bin
000A5BC6                            		even
000A5BC6 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000A5BCA 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000A5BCE 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000A5BD2 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000A5BD6 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000A5BDA 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000A5BDE                            ; ---------------------------------------------------------------------------
000A5BDE                            ; PSG instruments used in music
000A5BDE                            ; ---------------------------------------------------------------------------
000A5BDE 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000A5BEA 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000A5BF6 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000A5C02                            PSG1:		incbin	sound\psg1.bin
000A5C19                            PSG2:		incbin	sound\psg2.bin
000A5C20                            PSG3:		incbin	sound\psg3.bin
000A5C31                            PSG4:		incbin	sound\psg4.bin
000A5C3C                            PSG6:		incbin	sound\psg6.bin
000A5C4B                            PSG5:		incbin	sound\psg5.bin
000A5C75                            PSG7:		incbin	sound\psg7.bin
000A5C91                            PSG8:		incbin	sound\psg8.bin
000A5CB9                            PSG9:		incbin	sound\psg9.bin
000A5CCA                            
000A5CCA 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000A5CD2                            ; ---------------------------------------------------------------------------
000A5CD2                            ; Music	Pointers
000A5CD2                            ; ---------------------------------------------------------------------------
000A5CD2 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000A5CDA 0000 0000 0000 0000        		dc.l Music83, Music84
000A5CE2 0000 0000 0000 0000        		dc.l Music85, Music86
000A5CEA 0000 0000 0000 0000        		dc.l Music87, Music88
000A5CF2 0000 0000 0000 0000        		dc.l Music89, Music8A
000A5CFA 0000 0000 0000 0000        		dc.l Music8B, Music8C
000A5D02 0000 0000 0000 0000        		dc.l Music8D, Music8E
000A5D0A 0000 0000 0000 0000        		dc.l Music8F, Music90
000A5D12 0000 0000 0000 0000        		dc.l Music91, Music92
000A5D1A 0000 0000                  		dc.l Music93
000A5D1E                            ; ---------------------------------------------------------------------------
000A5D1E                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000A5D1E                            ; ---------------------------------------------------------------------------
000A5D1E 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000A5D2E 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000A5D3E 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000A5D4E 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000A5D5E 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000A5D6E 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000A5D7E 9090 9090                  		dc.b $90, $90, $90, $90
000A5D82                            
000A5D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A5D82                            
000A5D82                            sub_71B4C:	
000A5D82 4DF9 00FF F000             		lea	($FFF000).l,a6
000A5D88                            
000A5D88 41F9 00A0 0C68             		lea	($A00000+YM_Buffer).l,a0		; CHG: load buffer ID address
000A5D8E 33FC 0100 00A1 1100 0839+  		StopZ80						; CHG: request Z80 stop on
000A5DA0 1010                       		move.b	(a0),d0					; CHG: load buffer ID
000A5DA2 33FC 0000 00A1 1100        		StartZ80					; CHG: request Z80 stop off
000A5DAA B02E 0010                  		cmp.b	$10(a6),d0				; CHG: has the 68k recently written to this buffer?
000A5DAE 6600                       		bne.s	SD_ValidList				; CHG: if not, branch
000A5DB0 4E75                       		rts						; CHG: return (cannot write to YM cue until Z80 is finished with it)
000A5DB2                            
000A5DB2                            SD_ValidList:
000A5DB2 2D7C 00A0 1000 0010        		move.l	#$A00000+YM_Buffer1,$10(a6)		; set the cue address to buffer 1
000A5DBA 4A00                       		tst.b	d0					; is the Z80 accessing buffer 1?
000A5DBC 6600                       		bne.s	SD_WriteBuffer1				; if not, branch
000A5DBE 2D7C 00A0 1400 0010        		move.l	#$A00000+YM_Buffer2,$10(a6)		; set the cue address to buffer 2
000A5DC6                            
000A5DC6                            SD_WriteBuffer1:
000A5DC6 1D40 0010                  		move.b	d0,$10(a6)				; set buffer ID the 68k is writing to
000A5DCA 422E 000E                  		clr.b	$E(a6)
000A5DCE 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000A5DD2 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000A5DD6 532E 0001                  		subq.b	#1,1(a6)
000A5DDA 6600                       		bne.s	loc_71B9E
000A5DDC 4EBA 0000                  		jsr	sub_7260C(pc)
000A5DE0                            
000A5DE0                            loc_71B9E:
000A5DE0 102E 0004                  		move.b	4(a6),d0
000A5DE4 6700                       		beq.s	loc_71BA8
000A5DE6 4EBA 0000                  		jsr	sub_72504(pc)
000A5DEA                            
000A5DEA                            loc_71BA8:
000A5DEA 4A2E 0024                  		tst.b	$24(a6)
000A5DEE 6700                       		beq.s	loc_71BB2
000A5DF0 4EBA 0000                  		jsr	sub_7267C(pc)
000A5DF4                            
000A5DF4                            loc_71BB2:
000A5DF4 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000A5DF8 6700                       		beq.s	loc_71BBC	; if not, branch
000A5DFA 4EBA 0000                  		jsr	Sound_Play(pc)
000A5DFE                            
000A5DFE                            loc_71BBC:
000A5DFE 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A5E04 6700                       		beq.s	loc_71BC8
000A5E06 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000A5E0A                            
000A5E0A                            loc_71BC8:
000A5E0A 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
000A5E0E 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
000A5E10 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
000A5E16                            
000A5E16                            SD_NextPCM:
000A5E16 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
000A5E1A 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
000A5E1E 4A15                       		tst.b	(a5)
000A5E20 6A00                       		bpl.s	loc_71BD4
000A5E22 4EBA 0000                  		jsr	sub_71C4E(pc)
000A5E26                            
000A5E26                            loc_71BD4:
000A5E26 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
000A5E2A 422E 0008                  		clr.b	8(a6)
000A5E2E 7E05                       		moveq	#5,d7
000A5E30                            
000A5E30                            loc_71BDA:
000A5E30 DAFC 0030                  		adda.w	#$30,a5
000A5E34 4A15                       		tst.b	(a5)
000A5E36 6A00                       		bpl.s	loc_71BE6
000A5E38 4EBA 0000                  		jsr	sub_71CCA(pc)
000A5E3C                            
000A5E3C                            loc_71BE6:
000A5E3C 51CF FFF2                  		dbf	d7,loc_71BDA
000A5E40                            
000A5E40 7E02                       		moveq	#2,d7
000A5E42                            
000A5E42                            loc_71BEC:
000A5E42 DAFC 0030                  		adda.w	#$30,a5
000A5E46 4A15                       		tst.b	(a5)
000A5E48 6A00                       		bpl.s	loc_71BF8
000A5E4A 4EBA 0000                  		jsr	sub_72850(pc)
000A5E4E                            
000A5E4E                            loc_71BF8:
000A5E4E 51CF FFF2                  		dbf	d7,loc_71BEC
000A5E52                            
000A5E52 1D7C 0080 000E             		move.b	#$80,$E(a6)
000A5E58 7E02                       		moveq	#2,d7
000A5E5A                            
000A5E5A                            loc_71C04:
000A5E5A DAFC 0030                  		adda.w	#$30,a5
000A5E5E 4A15                       		tst.b	(a5)
000A5E60 6A00                       		bpl.s	loc_71C10
000A5E62 4EBA 0000                  		jsr	sub_71CCA(pc)
000A5E66                            
000A5E66                            loc_71C10:
000A5E66 51CF FFF2                  		dbf	d7,loc_71C04
000A5E6A                            
000A5E6A 7E02                       		moveq	#2,d7
000A5E6C                            
000A5E6C                            loc_71C16:
000A5E6C DAFC 0030                  		adda.w	#$30,a5
000A5E70 4A15                       		tst.b	(a5)
000A5E72 6A00                       		bpl.s	loc_71C22
000A5E74 4EBA 0000                  		jsr	sub_72850(pc)
000A5E78                            
000A5E78                            loc_71C22:
000A5E78 51CF FFF2                  		dbf	d7,loc_71C16
000A5E7C 1D7C 0040 000E             		move.b	#$40,$E(a6)
000A5E82 DAFC 0030                  		adda.w	#$30,a5
000A5E86 4A15                       		tst.b	(a5)
000A5E88 6A00                       		bpl.s	loc_71C38
000A5E8A 4EBA 0000                  		jsr	sub_71CCA(pc)
000A5E8E                            
000A5E8E                            loc_71C38:
000A5E8E DAFC 0030                  		adda.w	#$30,a5
000A5E92 4A15                       		tst.b	(a5)
000A5E94 6A00                       		bpl.s	loc_71C44
000A5E96 4EBA 0000                  		jsr	sub_72850(pc)
000A5E9A                            
000A5E9A                            loc_71C44:
000A5E9A 4E75                       		rts	
000A5E9C                            
000A5E9C                            ; End of function sub_71B4C
000A5E9C                            
000A5E9C                            
000A5E9C                            ; ===========================================================================
000A5E9C                            ; ---------------------------------------------------------------------------
000A5E9C                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A5E9C                            ; ---------------------------------------------------------------------------
000A5E9C                            
000A5E9C                            SDAC_CheckMute:
000A5E9C 102D 0021                  	move.b	$21(a5),d0
000A5EA0 B02D 0022                  	cmp.b	$22(a5),d0
000A5EA4 6700                       	beq.s	S71C4E_NoCHG
000A5EA6 4A00                       	tst.b	d0
000A5EA8 6A00                       	bpl.s	S71C4E_NoMute
000A5EAA                            
000A5EAA 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A5EAC 49F9 0000 0000             		lea	(StopSample).l,a4		; MUTE
000A5EB2 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A5EB8 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A5EBE 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A5EC4 6600                       		bne.s	SDAC_CM_NotePCM2				; if not, branch for PCM 2 writing
000A5EC6 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A5ECC 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A5ED2                            
000A5ED2                            SDAC_CM_NotePCM2:
000A5ED2 33FC 0100 00A1 1100 0839+  		StopZ80
000A5EE4 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A5EE6 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5EE8 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5EEA 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A5EEC 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5EEE 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5EF0 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A5EF2 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5EF4 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5EF6 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A5EF8 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5EFA 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5EFC 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A5EFE 33FC 0000 00A1 1100        		StartZ80
000A5F06                            
000A5F06                            ;	jsr	sub_726FE(pc)
000A5F06                            ;	move.b	$0A(a5),d1
000A5F06                            ;	andi.b	#%00111111,d1
000A5F06                            ;	move.b	#$B4,d0
000A5F06                            ;	jsr	loc_72716
000A5F06 08D5 0006                  	bset.b	#$06,(a5)
000A5F0A 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A5F10                            
000A5F10                            S71C4E_NoCHG:
000A5F10 4E75                       	rts
000A5F12                            
000A5F12                            S71C4E_NoMute:
000A5F12 1B40 0022                  	move.b	d0,$22(a5)
000A5F16                            ;	move.b	$0B(a5),d0
000A5F16                            ;	jsr	SFM_UpdateVoice(pc)
000A5F16                            ;	move.b	$0A(a5),d1
000A5F16                            ;	move.b	#$B4,d0
000A5F16                            ;	jsr	loc_72716
000A5F16 08D5 0006                  	bset.b	#$06,(a5)
000A5F1A 4E75                       	rts
000A5F1C                            
000A5F1C                            ; ===========================================================================
000A5F1C                            ; ---------------------------------------------------------------------------
000A5F1C                            ; Subroutine to run a DAC channel ; CHG: The entire routine...
000A5F1C                            ; ---------------------------------------------------------------------------
000A5F1C                            
000A5F1C                            sub_71C4E:
000A5F1C 6100 FF7E                  	bsr.w	SDAC_CheckMute			; EXTRA - ON/OFF
000A5F20                            
000A5F20                            	; Volume is being done first, as it'll update with a single
000A5F20                            	; frame delay, the PCM playback is a frame behind, as is the
000A5F20                            	; pitch control, but the volume change happens immediately,
000A5F20                            	; thus, a delay is needed.
000A5F20                            
000A5F20                            	; *VOLUME DELAY WAS HERE*
000A5F20                            
000A5F20                            		; And now back to the normal DAC
000A5F20                            		; SMPS routine
000A5F20                            
000A5F20 532D 000E                  		subq.b	#$01,$0E(a5)				; decrease note timer
000A5F24 6600 0000                  		bne.w	SDAC_HoldNote				; if still running, branch
000A5F28 0895 0004                  		bclr.b	#$04,(a5)				; disable softkey
000A5F2C 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A5F30 286D 0004                  		movea.l	$04(a5),a4				; load tracker address
000A5F34 6000                       		bra.s	SDAC_ReadTracker			; continue into loop
000A5F36                            
000A5F36                            SDAC_ReadFlag:
000A5F36 4EBA 0000                  		jsr	sub_72A5A(pc)				; run flags subroutine
000A5F3A                            
000A5F3A                            SDAC_ReadTracker:
000A5F3A 7A00                       		moveq	#$00,d5					; clear d5
000A5F3C 1A1C                       		move.b	(a4)+,d5				; load byte from SMPS track
000A5F3E 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A5F42 0C05 00E0                  		cmpi.b	#$E0,d5					; is it a flag?
000A5F46 64EE                       		bcc.s	SDAC_ReadFlag				; if so, branch
000A5F48 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A5F4C                            
000A5F4C                            	SDAC_Update:				; EXTRA
000A5F4C 08D5 0001                  		bset.b	#$01,(a5)				; set channel as resting
000A5F50 0405 0080                  		subi.b	#$80,d5					; minus starting note
000A5F54 6700                       		beq.s	SDAC_NoFrequency			; if it's mute, branch
000A5F56 5515                       		subq.b	#$02,(a5)				; set channel as NOT resting
000A5F58 DA2D 0008                  		add.b	$08(a5),d5				; add pitch to it
000A5F5C DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A5F60 DA45                       		add.w	d5,d5					; multiply by size of word
000A5F62 3B7B 5000 0010             		move.w	(FrequenciesPCM-2)(pc,d5.w),$10(a5)	; save frequency to use
000A5F68                            
000A5F68                            SDAC_NoFrequency:
000A5F68                            
000A5F68 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A5F6C 6600 0000                  	bne.w	SDAC_Frequency			; EXTRA
000A5F70 1A1C                       		move.b	(a4)+,d5				; load next note
000A5F72 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A5F76 534C                       		subq.w	#$01,a4					; move back (it's not a timer after all)
000A5F78 1B6D 000F 000E             		move.b	$0F(a5),$0E(a5)				; reset timer
000A5F7E 6000 0000                  		bra.w	SDAC_PlayNote				; continue
000A5F82                            
000A5F82                            ; ---------------------------------------------------------------------------
000A5F82                            ; Note to PCM frequency conversion table
000A5F82                            ; ---------------------------------------------------------------------------
000A5F82                            ; The octave numbers below assume the samples are playing a default pitch/note
000A5F82                            ; of C3 (A5)
000A5F82                            ; ---------------------------------------------------------------------------
000A5F82                            
000A5F82                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000A5F82                            
000A5F82 0010 0011 0012 0013 0014+  FrequenciesPCM:	dc.w	$0010,$0011,$0012,$0013,$0014,$0015,$0017,$0018,$0019,$001B,$001D,$001E   ; Octave 0 - (81 - 8C)
000A5F9A 0020 0022 0024 0026 0028+  		dc.w	$0020,$0022,$0024,$0026,$0028,$002B,$002D,$0030,$0033,$0036,$0039,$003C   ; Octave 1 - (8D - 98)
000A5FB2 0040 0044 0048 004C 0051+  		dc.w	$0040,$0044,$0048,$004C,$0051,$0055,$005B,$0060,$0066,$006C,$0072,$0079   ; Octave 2 - (99 - A4)
000A5FCA 0080 0088 0090 0098 00A1+  		dc.w	$0080,$0088,$0090,$0098,$00A1,$00AB,$00B5,$00C0,$00CB,$00D7,$00E4,$00F2   ; Octave 3 - (A5 - B0)
000A5FE2 0100 010F 011F 0130 0143+  		dc.w	$0100,$010F,$011F,$0130,$0143,$0156,$016A,$0180,$0196,$01AF,$01C8,$01E3   ; Octave 4 - (B1 - BC)
000A5FFA 0200 021E 023F 0261 0285+  		dc.w	$0200,$021E,$023F,$0261,$0285,$02AB,$02D4,$02FF,$032D,$035D,$0390,$03C7   ; Octave 5 - (BD - C8)
000A6012 0400 043D 047D 04C2 050A+  		dc.w	$0400,$043D,$047D,$04C2,$050A,$0557,$05A8,$05FE,$0659,$06BA,$0721,$078D   ; Octave 6 - (C9 - D4)
000A602A 0800 087A 08FB 0983 0A14+  		dc.w	$0800,$087A,$08FB,$0983,$0A14,$0AAE,$0B50,$0BFD,$0CB3,$0D74,$0E41,$0F1A   ; Octave 7 - (D5 - DF)
000A6042                            
000A6042                            ; ---------------------------------------------------------------------------
000A6042                            ; Writing the sample to Dual PCM
000A6042                            ; ---------------------------------------------------------------------------
000A6042                            
000A6042                            SDAC_Timer:
000A6042 4EBA 0000                  		jsr	sub_71D40(pc)				; correct timer
000A6046                            
000A6046                            SDAC_PlayNote:
000A6046 2B4C 0004                  		move.l	a4,$04(a5)				; update tracker address
000A604A                            
000A604A                            	SDAC_MuteNote:
000A604A 49F9 0000 0000             		lea	(StopSample).l,a4			; load "stop sample" address
000A6050 4A2D 0022                  	tst.b	$22(a5)
000A6054 6B00                       	bmi.s	SDAC_Rest
000A6056 1015                       		move.b	(a5),d0					; load flags
000A6058 0800 0004                  		btst	#$04,d0					; is soft key set?
000A605C 6600                       		bne.s	SDAC_SoftKey				; if so, branch
000A605E E610                       		roxr.b	#$03,d0					; rotate around
000A6060 6500 0000                  		bcs.w	SDAC_Return				; if the channel is being interrupted (bit 2), branch
000A6064 6B00                       		bmi.s	SDAC_Rest				; if the rest bit was set, branch
000A6066 7000                       		moveq	#$00,d0					; clear d0
000A6068 102D 000B                  		move.b	$0B(a5),d0				; load sample ID
000A606C D040                       		add.w	d0,d0					; multiply by 4 (long-word size)
000A606E D040                       		add.w	d0,d0					; ''
000A6070 49F9 0000 0000             		lea	(SampleList).l,a4			; load sample list
000A6076 2874 0000                  		move.l	(a4,d0.w),a4				; load correct sample z80 pointer address
000A607A                            
000A607A                            SDAC_Rest:
000A607A 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A607C 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A6082 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A6088 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A608E 6600                       		bne.s	SDAC_NotePCM2				; if not, branch for PCM 2 writing
000A6090 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A6096 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A609C                            
000A609C                            SDAC_NotePCM2:
000A609C 33FC 0100 00A1 1100 0839+  		StopZ80
000A60AE 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A60B0 12DC                       		move.b	(a4)+,(a1)+				; ''
000A60B2 12DC                       		move.b	(a4)+,(a1)+				; ''
000A60B4 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A60B6 12DC                       		move.b	(a4)+,(a1)+				; ''
000A60B8 12DC                       		move.b	(a4)+,(a1)+				; ''
000A60BA 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A60BC 12DC                       		move.b	(a4)+,(a1)+				; ''
000A60BE 12DC                       		move.b	(a4)+,(a1)+				; ''
000A60C0 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A60C2 12DC                       		move.b	(a4)+,(a1)+				; ''
000A60C4 12DC                       		move.b	(a4)+,(a1)+				; ''
000A60C6 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A60C8 33FC 0000 00A1 1100        		StartZ80
000A60D0                            
000A60D0                            SDAC_SoftKey:
000A60D0                            
000A60D0                            	SDAC_Frequency:
000A60D0                            
000A60D0 102D 0009                  		move.b	$09(a5),d0				; load current volume
000A60D4 7200                       	moveq	#$00,d1				; EXTRA
000A60D6 122E 0016                  	move.b	$16(a6),d1			; EXTRA
000A60DA                            ;	lea	(FOP_VolumeList).l,a0		; EXTRA
000A60DA                            ;	move.b	(a0,d1.w),d1			; EXTRA
000A60DA D201                       	add.b	d1,d1
000A60DC D001                       	add.b	d1,d0
000A60DE                            
000A60DE 1200                       		move.b	d0,d1					; copy volume to d1
000A60E0 6A00                       		bpl.s	SDAC_ValidVolume			; if it is between 00 and 80, branch
000A60E2 7080                       		moveq	#$FFFFFF80,d0				; set volume to mute (81 - FF is out of bounds)
000A60E4                            
000A60E4                            SDAC_ValidVolume:
000A60E4 B02D 000C                  		cmp.b	$0C(a5),d0				; has the volume changed?
000A60E8 6700                       		beq.s	SDAC_NoVolume				; if not, branch (don't bother)
000A60EA 1B40 000C                  		move.b	d0,$0C(a5)				; update volume
000A60EE 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A60F0 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; load volume change instruction address
000A60F6 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; load PCM 2 volume address
000A60FC 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A6102 6600                       		bne.s	SDAC_VolumePCM2				; if not, branch for PCM 2 writing
000A6104 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; load PCM 1 volume address
000A610A                            
000A610A                            SDAC_VolumePCM2:
000A610A 33FC 0100 00A1 1100 0839+  		StopZ80
000A611C 1080                       		move.b	d0,(a0)					; change PCM volume
000A611E 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A6120 33FC 0000 00A1 1100        		StartZ80
000A6128                            
000A6128                            SDAC_NoVolume:
000A6128                            
000A6128 3C2D 0010                  		move.w	$10(a5),d6				; load frequency
000A612C 0815 0003                  		btst	#$03,(a5)				; is modulation turned on?
000A6130 6700                       		beq.s	SDAC_WriteFrequency			; if not, branch
000A6132 286D 0014                  		movea.l	$14(a5),a4				; load modulation address
000A6136 43ED 0018                  		lea	$18(a5),a1				; load modulation settings RAM
000A613A 0815 0004                  		btst.b	#$04,(a5)				; is soft key set?
000A613E 6600                       		bne.s	SDAC_NoResetModulation			; if so, branch
000A6140 12DC                       		move.b	(a4)+,(a1)+				; reset settings...
000A6142 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6144 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6146 101C                       		move.b	(a4)+,d0				; ''
000A6148 E208                       		lsr.b	#$01,d0					; ''
000A614A 12C0                       		move.b	d0,(a1)+				; ''
000A614C 4259                       		clr.w	(a1)+					; clear modulation frequency
000A614E                            
000A614E                            SDAC_NoResetModulation:
000A614E DC6D 001C                  		add.w	$1C(a5),d6				; add modulation pitch
000A6152 6000                       		bra.s	SDAC_WriteFrequency			; continue
000A6154                            
000A6154                            ; ---------------------------------------------------------------------------
000A6154                            ; Holding a note...
000A6154                            ; ---------------------------------------------------------------------------
000A6154                            
000A6154                            SDAC_HoldNote:
000A6154 1015                       		move.b	(a5),d0					; load flags
000A6156 0200 0003                  		andi.b	#%00000011,d0				; is the channel being interrupted by an SFX, or is resting?
000A615A 6600 0000                  		bne.w	SDAC_Return				; if so, branch
000A615E                            
000A615E 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A6162 6700                       	beq.s	SDAC_NoUpdate			; EXTRA
000A6164 7A00                       	moveq	#$00,d5				; EXTRA
000A6166 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A616A 6000 FDE0                  	bra.w	SDAC_Update			; EXTRA
000A616E                            
000A616E                            	SDAC_NoUpdate:				; EXTRA
000A616E 4EBA 0000                  		jsr	sub_71D9E(pc)				; check for release
000A6172 4EBA 0000                  		jsr	sub_71DC6(pc)				; run modulation and get right frequency to d6
000A6176                            
000A6176                            	; d6 = frequency
000A6176                            
000A6176                            SDAC_WriteFrequency:
000A6176 102D 001E                  		move.b	$1E(a5),d0				; load detune
000A617A 4880                       		ext.w	d0					; sign extend to word
000A617C D046                       		add.w	d6,d0					; add to frequency (move it up or down subtly)
000A617E 0815 0005                  		btst.b	#$05,(a5)				; is the reverse flag set?
000A6182 6700                       		beq.s	SDAC_NoReverse				; if not, branch
000A6184 4440                       		neg.w	d0					; reverse
000A6186                            	;	subi.w	#$0100*2,d0				; move back to Dual PCM's neutral
000A6186                            
000A6186                            SDAC_NoReverse:
000A6186                            	;	move.w	d0,d3					; copy to d3
000A6186                            	;	smi	d2					; set extend byte if value is negative
000A6186                            	;	addi.w	#$0100,d3				; convert to true neutral (for overflow)
000A6186                            	;	muls.w	#Z80E_Read,d3				; multiply by number of reads the Z80 performs (read 18 vs playback 10)
000A6186                            	;	move.b	d3,d5					; load fraction to d5
000A6186                            	;	asr.l	#$08,d3					; divide by 100
000A6186                            	;	move.w	d3,-(sp)				; get upper byte of overflow value
000A6186                            	;	move.b	(sp),d4					; ''
000A6186                            	;	move.w	d0,(sp)					; get upper byte of pitch/frequency
000A6186                            	;	move.b	(sp),d1					; ''
000A6186                            	;	addq.w	#$02,sp					; move stack forwards (would've done via increment and back...
000A6186                            								; ...index, but interrupts could be a problem).
000A6186                            	; d0 = XXXX.DD
000A6186                            	; d1 = XXQQ.XX
000A6186                            	; d2 = QQXX.XX
000A6186                            	; d3 = XXVV.XX
000A6186                            	; d4 = VVXX.XX
000A6186                            	; d5 = XXXX.OO
000A6186                            
000A6186 74D2                       		moveq	#$FFFFFF00|%11010010,d2
000A6188 1200                       		move.b	d0,d1
000A618A E048                       		lsr.w	#$08,d0
000A618C 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A6192 6600                       		bne.s	SDAC_FrequePCM2				; if not, branch for PCM 2 writing
000A6194 33FC 0100 00A1 1100 0839+  		StopZ80
000A61A6                            	;	move.b	d0,($A00000+PCM1_RateDiv+1)		; write pitch main dividend
000A61A6                            	;	move.b	d1,($A00000+PCM1_RateQuo+1)		; write pitch quotient low
000A61A6                            	;	move.b	d2,($A00000+PCM1_RateQuo+2)		; write pitch quotient high
000A61A6                            	;	move.b	d3,($A00000+PCM1_Overflow+1)		; write low overflow
000A61A6                            	;	move.b	d4,($A00000+PCM1_Overflow+2)		; write high overflow
000A61A6                            	;	move.b	d5,($A00000+PCM1_OverDiv+1)		; write dividend overflow
000A61A6                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A61A6                            
000A61A6 13C0 00A0 05DD             		move.b	d0,($A00000+PCM1_PitchHigh+1)
000A61AC 13C1 00A0 05E8             		move.b	d1,($A00000+PCM1_PitchLow+1)
000A61B2 13C2 00A0 05D2             		move.b	d2,($A00000+PCM1_ChangePitch)		; change "JP C" to "JP NC"
000A61B8 33FC 0000 00A1 1100        		StartZ80
000A61C0                            
000A61C0                            SDAC_Return:
000A61C0 4E75                       		rts						; return
000A61C2                            
000A61C2                            SDAC_FrequePCM2:
000A61C2 33FC 0100 00A1 1100 0839+  		StopZ80
000A61D4                            	;	move.b	d0,($A00000+PCM2_RateDiv+1)		; write pitch main dividend
000A61D4                            	;	move.b	d1,($A00000+PCM2_RateQuo+1)		; write pitch quotient low
000A61D4                            	;	move.b	d2,($A00000+PCM2_RateQuo+2)		; write pitch quotient high
000A61D4                            	;	move.b	d3,($A00000+PCM2_Overflow+1)		; write low overflow
000A61D4                            	;	move.b	d4,($A00000+PCM2_Overflow+2)		; write high overflow
000A61D4                            	;	move.b	d5,($A00000+PCM2_OverDiv+1)		; write dividend overflow
000A61D4                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A61D4                            
000A61D4 13C0 00A0 060E             		move.b	d0,($A00000+PCM2_PitchHigh+1)
000A61DA 13C1 00A0 0619             		move.b	d1,($A00000+PCM2_PitchLow+1)
000A61E0 13C2 00A0 0603             		move.b	d2,($A00000+PCM2_ChangePitch)		; change "JP C" to "JP NC"
000A61E6 33FC 0000 00A1 1100        		StartZ80
000A61EE 4E75                       		rts						; return
000A61F0                            
000A61F0                            ; ===========================================================================
000A61F0                            ; ---------------------------------------------------------------------------
000A61F0                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A61F0                            ; ---------------------------------------------------------------------------
000A61F0                            
000A61F0                            SFM_CheckMute:
000A61F0 4A2E 000E                  	tst.b	$0E(a6)
000A61F4 6600                       	bne.s	S71CCA_NoCHG
000A61F6 102D 0021                  	move.b	$21(a5),d0
000A61FA B02D 0022                  	cmp.b	$22(a5),d0
000A61FE 6700                       	beq.s	S71CCA_NoCHG
000A6200 4A00                       	tst.b	d0
000A6202 6A00                       	bpl.s	S71CCA_NoMute
000A6204 4EBA 0000                  	jsr	sub_726FE(pc)
000A6208 122D 000A                  	move.b	$0A(a5),d1
000A620C 0201 003F                  	andi.b	#%00111111,d1
000A6210 103C 00B4                  	move.b	#$B4,d0
000A6214 4EB9 0000 0000             	jsr	loc_72716
000A621A 08D5 0006                  	bset.b	#$06,(a5)
000A621E 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A6224                            
000A6224                            S71CCA_NoCHG:
000A6224 4E75                       	rts
000A6226                            
000A6226                            S71CCA_NoMute:
000A6226 1B40 0022                  	move.b	d0,$22(a5)
000A622A 102D 000B                  	move.b	$0B(a5),d0
000A622E 4EBA 0000                  	jsr	SFM_UpdateVoice(pc)
000A6232                            ;	jsr	loc_726E2(pc)
000A6232 122D 000A                  	move.b	$0A(a5),d1
000A6236 103C 00B4                  	move.b	#$B4,d0
000A623A 4EB9 0000 0000             	jsr	loc_72716
000A6240 08D5 0006                  	bset.b	#$06,(a5)
000A6244 4E75                       	rts
000A6246                            
000A6246                            ; ===========================================================================
000A6246                            ; ---------------------------------------------------------------------------
000A6246                            ; Subroutine to run an FM channel
000A6246                            ; ---------------------------------------------------------------------------
000A6246                            
000A6246                            sub_71CCA:				; XREF: sub_71B4C
000A6246 61A8                       	bsr.s	SFM_CheckMute			; EXTRA - ON/OFF
000A6248                            
000A6248 532D 000E                  		subq.b	#1,$E(a5)
000A624C 6600                       		bne.s	loc_71CE0
000A624E 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6252 0895 0004                  		bclr	#4,(a5)
000A6256 4EBA 0000                  		jsr	sub_71CEC(pc)
000A625A 4EBA 0000                  		jsr	sub_71E18(pc)
000A625E 6000 0000                  		bra.w	loc_726E2
000A6262                            ; ===========================================================================
000A6262                            
000A6262                            loc_71CE0:
000A6262 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6266 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A6268 4EB9 0000 0000             	jsr	sub_72CB4			; EXTRA
000A626E 7A00                       	moveq	#$00,d5				; EXTRA
000A6270 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A6274 0405 0080                  	subi.b	#$80,d5				; EXTRA
000A6278 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A627A 4EB9 0000 0000             	jsr	SFM_UpdateFreque		; EXTRA
000A6280 6000 0000                  	bra.w	loc_71E24			; EXTRA
000A6284                            
000A6284                            	SFM_NoUpdate:				; EXTRA
000A6284 4EBA 0000                  		jsr	sub_71D9E(pc)
000A6288 4EBA 0000                  		jsr	sub_71DC6(pc)
000A628C 6000 0000                  		bra.w	loc_71E24
000A6290                            ; End of function sub_71CCA
000A6290                            
000A6290                            
000A6290                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6290                            
000A6290                            
000A6290                            sub_71CEC:				; XREF: sub_71CCA
000A6290 286D 0004                  		movea.l	4(a5),a4
000A6294 0895 0001                  		bclr	#1,(a5)
000A6298                            
000A6298                            loc_71CF4:
000A6298 7A00                       		moveq	#0,d5
000A629A 1A1C                       		move.b	(a4)+,d5
000A629C 0C05 00E0                  		cmpi.b	#-$20,d5
000A62A0 6500                       		bcs.s	loc_71D04
000A62A2 4EBA 0000                  		jsr	sub_72A5A(pc)
000A62A6 60F0                       		bra.s	loc_71CF4
000A62A8                            ; ===========================================================================
000A62A8                            
000A62A8                            loc_71D04:
000A62A8 4EBA 0000                  		jsr	sub_726FE(pc)
000A62AC 4A05                       		tst.b	d5
000A62AE 6A00                       		bpl.s	loc_71D1A
000A62B0 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A62B4 4EBA 0000                  		jsr	sub_71D22(pc)
000A62B8 1A1C                       		move.b	(a4)+,d5
000A62BA 6A00                       		bpl.s	loc_71D1A
000A62BC 534C                       		subq.w	#1,a4
000A62BE 6000 0000                  		bra.w	sub_71D60
000A62C2                            ; ===========================================================================
000A62C2                            
000A62C2                            loc_71D1A:
000A62C2 4EBA 0000                  		jsr	sub_71D40(pc)
000A62C6 6000 0000                  		bra.w	sub_71D60
000A62CA                            ; End of function sub_71CEC
000A62CA                            
000A62CA                            
000A62CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A62CA                            
000A62CA                            
000A62CA                            sub_71D22:				; XREF: sub_71CEC
000A62CA 0405 0080                  		subi.b	#$80,d5
000A62CE 6700                       		beq.s	loc_71D58
000A62D0                            
000A62D0                            	SFM_UpdateFreque:			; EXTRA
000A62D0 DA2D 0008                  		add.b	8(a5),d5
000A62D4 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A62D8 0245 007F                  		andi.w	#$7F,d5
000A62DC E34D                       		lsl.w	#1,d5
000A62DE 41FA 0000                  		lea	word_72790(pc),a0
000A62E2 3C30 5000                  		move.w	(a0,d5.w),d6
000A62E6 3B46 0010                  		move.w	d6,$10(a5)
000A62EA 4E75                       		rts	
000A62EC                            ; End of function sub_71D22
000A62EC                            
000A62EC                            
000A62EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A62EC                            
000A62EC                            
000A62EC                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A62EC 1005                       		move.b	d5,d0
000A62EE 122D 0002                  		move.b	2(a5),d1
000A62F2                            
000A62F2                            loc_71D46:
000A62F2 5301                       		subq.b	#1,d1
000A62F4 6700                       		beq.s	loc_71D4E
000A62F6 D005                       		add.b	d5,d0
000A62F8 60F8                       		bra.s	loc_71D46
000A62FA                            ; ===========================================================================
000A62FA                            
000A62FA                            loc_71D4E:
000A62FA 1B40 000F                  		move.b	d0,$F(a5)
000A62FE 1B40 000E                  		move.b	d0,$E(a5)
000A6302 4E75                       		rts	
000A6304                            ; End of function sub_71D40
000A6304                            
000A6304                            ; ===========================================================================
000A6304                            
000A6304                            loc_71D58:				; XREF: sub_71D22
000A6304 08D5 0001                  		bset	#1,(a5)
000A6308 426D 0010                  		clr.w	$10(a5)
000A630C                            
000A630C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A630C                            
000A630C                            
000A630C                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000A630C 2B4C 0004                  		move.l	a4,4(a5)
000A6310 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000A6316 0815 0004                  		btst	#4,(a5)
000A631A 6600                       		bne.s	locret_71D9C
000A631C 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000A6322 422D 000C                  		clr.b	$C(a5)
000A6326 0815 0003                  		btst	#3,(a5)
000A632A 6700                       		beq.s	locret_71D9C
000A632C 206D 0014                  		movea.l	$14(a5),a0
000A6330 1B58 0018                  		move.b	(a0)+,$18(a5)
000A6334 1B58 0019                  		move.b	(a0)+,$19(a5)
000A6338 1B58 001A                  		move.b	(a0)+,$1A(a5)
000A633C 1018                       		move.b	(a0)+,d0
000A633E E208                       		lsr.b	#1,d0
000A6340 1B40 001B                  		move.b	d0,$1B(a5)
000A6344 426D 001C                  		clr.w	$1C(a5)
000A6348                            
000A6348                            locret_71D9C:
000A6348 4E75                       		rts	
000A634A                            ; End of function sub_71D60
000A634A                            
000A634A                            
000A634A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A634A                            
000A634A                            
000A634A                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000A634A 4A2D 0012                  		tst.b	$12(a5)
000A634E 6700                       		beq.s	locret_71DC4
000A6350 532D 0012                  		subq.b	#1,$12(a5)
000A6354 6600                       		bne.s	locret_71DC4
000A6356 4A2E 0008                  		tst.b	$08(a6)						; CHG: is this a PCM channel?
000A635A 6B00                       		bmi.s	SDCR_StopPCM					; if so, branch (skipping rest flag setting)
000A635C 08D5 0001                  		bset	#1,(a5)
000A6360 4A2D 0001                  		tst.b	1(a5)
000A6364 6B00 0000                  		bmi.w	loc_71DBE
000A6368 4EBA 0000                  		jsr	sub_726FE(pc)
000A636C 584F                       		addq.w	#4,sp
000A636E 4E75                       		rts	
000A6370                            ; ===========================================================================
000A6370                            
000A6370                            loc_71DBE:
000A6370 4EBA 0000                  		jsr	sub_729A0(pc)
000A6374 584F                       		addq.w	#4,sp
000A6376                            
000A6376                            locret_71DC4:
000A6376 4E75                       		rts	
000A6378                            ; End of function sub_71D9E
000A6378                            
000A6378                            SDCR_StopPCM:
000A6378 33FC 0100 00A1 1100 0839+  		StopZ80
000A638A 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6390 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A6396 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6398 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A639A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A639C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A639E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63A0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63A2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A63A4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63A6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63A8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A63AA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63AC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63AE 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A63B6 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A63BC 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A63C2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A63C4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63C6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63C8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A63CA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63CC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63CE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A63D0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63D2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63D4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A63D6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63D8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A63DA 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A63E2 33FC 0000 00A1 1100        		StartZ80
000A63EA 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A63EC 4E75                       		rts							; CHG: return
000A63EE                            
000A63EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A63EE                            
000A63EE                            
000A63EE                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000A63EE 0815 0003                  		btst	#3,(a5)
000A63F2 6700                       		beq.s	locret_71E16
000A63F4 4A2D 0018                  		tst.b	$18(a5)
000A63F8 6700                       		beq.s	loc_71DDA
000A63FA 532D 0018                  		subq.b	#1,$18(a5)
000A63FE 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6400 4E75                       		rts	
000A6402                            ; ===========================================================================
000A6402                            
000A6402                            loc_71DDA:
000A6402 532D 0019                  		subq.b	#1,$19(a5)
000A6406 6700                       		beq.s	loc_71DE2
000A6408 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A640A 4E75                       		rts	
000A640C                            ; ===========================================================================
000A640C                            
000A640C                            loc_71DE2:
000A640C 206D 0014                  		movea.l	$14(a5),a0
000A6410 1B68 0001 0019             		move.b	1(a0),$19(a5)
000A6416 4A2D 001B                  		tst.b	$1B(a5)
000A641A 6600                       		bne.s	loc_71DFE
000A641C 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000A6422 442D 001A                  		neg.b	$1A(a5)
000A6426 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6428 4E75                       		rts	
000A642A                            ; ===========================================================================
000A642A                            
000A642A                            loc_71DFE:
000A642A 532D 001B                  		subq.b	#1,$1B(a5)
000A642E 1C2D 001A                  		move.b	$1A(a5),d6
000A6432 4886                       		ext.w	d6
000A6434 DC6D 001C                  		add.w	$1C(a5),d6
000A6438 3B46 001C                  		move.w	d6,$1C(a5)
000A643C DC6D 0010                  		add.w	$10(a5),d6
000A6440 4E75                       		rts							; CHG: return (don't skip)
000A6442                            
000A6442                            locret_71E16:
000A6442 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6444 4E75                       		rts	
000A6446                            ; End of function sub_71DC6
000A6446                            
000A6446                            
000A6446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6446                            
000A6446                            
000A6446                            sub_71E18:				; XREF: sub_71CCA
000A6446 0815 0001                  		btst	#1,(a5)
000A644A 6600                       		bne.s	locret_71E48
000A644C 3C2D 0010                  		move.w	$10(a5),d6
000A6450 6700                       		beq.s	loc_71E4A
000A6452                            
000A6452                            loc_71E24:				; XREF: sub_71CCA
000A6452 102D 001E                  		move.b	$1E(a5),d0
000A6456 4880                       		ext.w	d0
000A6458 DC40                       		add.w	d0,d6
000A645A 0815 0002                  		btst	#2,(a5)
000A645E 6600                       		bne.s	locret_71E48
000A6460 4A2E 000E                  	tst.b	$0E(a6)
000A6464 6600                       	bne.s	locret_71E48_2
000A6466 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A646A 6600                       	bne.s	locret_71E48
000A646C                            
000A646C                            	locret_71E48_2:
000A646C 3206                       		move.w	d6,d1
000A646E E049                       		lsr.w	#8,d1
000A6470 103C 00A4                  		move.b	#-$5C,d0
000A6474 4EBA 0000                  		jsr	sub_72722(pc)
000A6478 1206                       		move.b	d6,d1
000A647A 103C 00A0                  		move.b	#-$60,d0
000A647E 4EBA 0000                  		jsr	sub_72722(pc)
000A6482                            
000A6482                            locret_71E48:
000A6482 4E75                       		rts	
000A6484                            ; ===========================================================================
000A6484                            
000A6484                            loc_71E4A:
000A6484 08D5 0001                  		bset	#1,(a5)
000A6488 4E75                       		rts	
000A648A                            ; End of function sub_71E18
000A648A                            
000A648A                            ; ===========================================================================
000A648A                            
000A648A                            loc_71E50:				; XREF: sub_71B4C
000A648A 6B00                       		bmi.s	loc_71E94
000A648C 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000A6492 6700 0000                  		beq.w	loc_71EFE
000A6496 1D7C 0002 0003             		move.b	#2,3(a6)
000A649C 7602                       		moveq	#2,d3
000A649E 103C 00B4                  		move.b	#-$4C,d0
000A64A2 7200                       		moveq	#0,d1
000A64A4                            
000A64A4                            loc_71E6A:
000A64A4 4EBA 0000                  		jsr	sub_7272E(pc)
000A64A8 4EBA 0000                  		jsr	sub_72764(pc)
000A64AC 5200                       		addq.b	#1,d0
000A64AE 51CB FFF4                  		dbf	d3,loc_71E6A
000A64B2                            
000A64B2 7602                       		moveq	#2,d3
000A64B4 7028                       		moveq	#$28,d0
000A64B6                            
000A64B6                            loc_71E7C:
000A64B6 1203                       		move.b	d3,d1
000A64B8 4EBA 0000                  		jsr	sub_7272E(pc)
000A64BC 5801                       		addq.b	#4,d1
000A64BE 4EBA 0000                  		jsr	sub_7272E(pc)
000A64C2 51CB FFF2                  		dbf	d3,loc_71E7C
000A64C6                            
000A64C6 4EBA 0000                  		jsr	sub_729B6(pc)
000A64CA 6000 F9CE                  		bra.w	loc_71C44
000A64CE                            ; ===========================================================================
000A64CE                            
000A64CE                            loc_71E94:				; XREF: loc_71E50
000A64CE 422E 0003                  		clr.b	3(a6)
000A64D2 7630                       		moveq	#$30,d3
000A64D4 4BEE 0040                  		lea	$40(a6),a5
000A64D8 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
000A64DA                            
000A64DA                            loc_71EA0:
000A64DA 0815 0007                  		btst	#7,(a5)
000A64DE 6700                       		beq.s	loc_71EB8
000A64E0 0815 0002                  		btst	#2,(a5)
000A64E4 6600                       		bne.s	loc_71EB8
000A64E6 4A2E 000E                  	tst.b	$0E(a6)
000A64EA 6600                       	bne.s	loc_71EB8_2
000A64EC 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A64F0 6600                       	bne.s	loc_71EB8
000A64F2                            
000A64F2                            	loc_71EB8_2:
000A64F2 103C 00B4                  		move.b	#-$4C,d0
000A64F6 122D 000A                  		move.b	$A(a5),d1
000A64FA 4EBA 0000                  		jsr	sub_72722(pc)
000A64FE                            
000A64FE                            loc_71EB8:
000A64FE DAC3                       		adda.w	d3,a5
000A6500 51CC FFD8                  		dbf	d4,loc_71EA0
000A6504                            
000A6504 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6508 7802                       		moveq	#2,d4
000A650A                            
000A650A                            loc_71EC4:
000A650A 0815 0007                  		btst	#7,(a5)
000A650E 6700                       		beq.s	loc_71EDC
000A6510 0815 0002                  		btst	#2,(a5)
000A6514 6600                       		bne.s	loc_71EDC
000A6516 4A2E 000E                  	tst.b	$0E(a6)
000A651A 6600                       	bne.s	loc_71EDC_2
000A651C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6520 6600                       	bne.s	loc_71EDC
000A6522                            
000A6522                            	loc_71EDC_2:
000A6522 103C 00B4                  		move.b	#-$4C,d0
000A6526 122D 000A                  		move.b	$A(a5),d1
000A652A 4EBA 0000                  		jsr	sub_72722(pc)
000A652E                            
000A652E                            loc_71EDC:
000A652E DAC3                       		adda.w	d3,a5
000A6530 51CC FFD8                  		dbf	d4,loc_71EC4
000A6534                            
000A6534 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6538 0815 0007                  		btst	#7,(a5)
000A653C 6700                       		beq.s	loc_71EFE
000A653E 0815 0002                  		btst	#2,(a5)
000A6542 6600                       		bne.s	loc_71EFE
000A6544 4A2E 000E                  	tst.b	$0E(a6)
000A6548 6600                       	bne.s	loc_71EFE_2
000A654A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A654E 6600                       	bne.s	loc_71EFE
000A6550                            
000A6550                            	loc_71EFE_2:
000A6550 103C 00B4                  		move.b	#-$4C,d0
000A6554 122D 000A                  		move.b	$A(a5),d1
000A6558 4EBA 0000                  		jsr	sub_72722(pc)
000A655C                            
000A655C                            loc_71EFE:
000A655C 6000 F93C                  		bra.w	loc_71C44
000A6560                            
000A6560                            ; ---------------------------------------------------------------------------
000A6560                            ; Subroutine to	play a sound or	music track
000A6560                            ; ---------------------------------------------------------------------------
000A6560                            
000A6560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6560                            
000A6560                            
000A6560                            Sound_Play:				; XREF: sub_71B4C
000A6560 2079 000A 5BC6             		movea.l	(Go_SoundTypes).l,a0
000A6566 43EE 000A                  		lea	$A(a6),a1	; load music track number
000A656A 1616                       		move.b	0(a6),d3
000A656C 7802                       		moveq	#2,d4
000A656E                            
000A656E                            loc_71F12:
000A656E 1011                       		move.b	(a1),d0		; move track number to d0
000A6570 1200                       		move.b	d0,d1
000A6572 4219                       		clr.b	(a1)+
000A6574 0400 0081                  		subi.b	#$81,d0
000A6578 6500                       		bcs.s	loc_71F3E
000A657A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A6580 6700                       		beq.s	loc_71F2C
000A6582 1D41 000A                  		move.b	d1,$A(a6)
000A6586 6000                       		bra.s	loc_71F3E
000A6588                            ; ===========================================================================
000A6588                            
000A6588                            loc_71F2C:
000A6588 0240 007F                  		andi.w	#$7F,d0
000A658C 1430 0000                  		move.b	(a0,d0.w),d2
000A6590 B403                       		cmp.b	d3,d2
000A6592 6500                       		bcs.s	loc_71F3E
000A6594 1602                       		move.b	d2,d3
000A6596 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000A659A                            
000A659A                            loc_71F3E:
000A659A 51CC FFD2                  		dbf	d4,loc_71F12
000A659E                            
000A659E 4A03                       		tst.b	d3
000A65A0 6B00                       		bmi.s	locret_71F4A
000A65A2 1C83                       		move.b	d3,0(a6)
000A65A4                            
000A65A4                            locret_71F4A:
000A65A4 4E75                       		rts	
000A65A6                            ; End of function Sound_Play
000A65A6                            
000A65A6                            
000A65A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A65A6                            
000A65A6                            
000A65A6                            Sound_ChkValue:				; XREF: sub_71B4C
000A65A6 7E00                       		moveq	#0,d7
000A65A8 1E2E 0009                  		move.b	9(a6),d7
000A65AC 6700 0000                  		beq.w	Sound_E4
000A65B0 6A00                       		bpl.s	locret_71F8C
000A65B2 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000A65B8 0C07 009F                  		cmpi.b	#$9F,d7
000A65BC 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000A65C0 0C07 00A0                  		cmpi.b	#$A0,d7
000A65C4 6500 0000                  		bcs.w	locret_71F8C
000A65C8 0C07 00CF                  		cmpi.b	#$CF,d7
000A65CC 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000A65D0 0C07 00D0                  		cmpi.b	#$D0,d7
000A65D4 6500 0000                  		bcs.w	locret_71F8C
000A65D8 0C07 00E0                  		cmpi.b	#$E0,d7
000A65DC 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000A65E0 0C07 00E4                  		cmpi.b	#$E4,d7
000A65E4 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
000A65E6                            
000A65E6                            locret_71F8C:
000A65E6 4E75                       		rts	
000A65E8                            ; ===========================================================================
000A65E8                            
000A65E8                            Sound_E0toE4:				; XREF: Sound_ChkValue
000A65E8 0407 00E0                  		subi.b	#$E0,d7
000A65EC E54F                       		lsl.w	#2,d7
000A65EE 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000A65F2                            ; ===========================================================================
000A65F2                            
000A65F2                            Sound_ExIndex:
000A65F2 6000 0000                  		bra.w	Sound_E0
000A65F6                            ; ===========================================================================
000A65F6 6000 0000                  		bra.w	Sound_E1
000A65FA                            ; ===========================================================================
000A65FA 6000 0000                  		bra.w	Sound_E2
000A65FE                            ; ===========================================================================
000A65FE 6000 0000                  		bra.w	Sound_E3
000A6602                            ; ===========================================================================
000A6602 6000 0000                  		bra.w	Sound_E4
000A6606                            ; ===========================================================================
000A6606                            ; ---------------------------------------------------------------------------
000A6606                            ; Play "Say-gaa" PCM sound
000A6606                            ; ---------------------------------------------------------------------------
000A6606                            
000A6606                            Sound_E1:
000A6606 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
000A6618 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
000A661E 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
000A6624 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
000A6628 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
000A662E 3604                       		move.w	d4,d3					; MJ: get lower word size
000A6630 4844                       		swap	d4					; MJ: get upper word size
000A6632                            
000A6632                            PlayPCM_Loop:
000A6632 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
000A6634 702B                       		moveq	#$2B,d0					; MJ: set delay time
000A6636 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
000A663A 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
000A663E 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
000A6642 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
000A6646 584F                       		addq.w	#$04,sp					; MJ: skip return address
000A6648 534B                       		subq.w	#$01,a3					; MJ: move back to address port
000A664A 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
000A664C 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
000A664E 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
000A6652 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
000A665A 4E75                       		rts						; MJ: return
000A665C                            
000A665C                            ; ===========================================================================
000A665C                            ; ---------------------------------------------------------------------------
000A665C                            ; Play music track $81-$9F
000A665C                            ; ---------------------------------------------------------------------------
000A665C                            
000A665C                            Sound_81to9F:
000A665C 33FC 0100 00A1 1100 0839+  		StopZ80
000A666E 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6674 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A667A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A667C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A667E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6680 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6682 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6684 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6686 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6688 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A668A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A668C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A668E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6690 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6692 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A669A 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A66A0 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A66A6 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A66A8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66AA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66AC 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A66AE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66B0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66B2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A66B4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66B6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66B8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A66BA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66BC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A66BE 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A66C6 33FC 0000 00A1 1100        		StartZ80
000A66CE                            
000A66CE 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000A66D2 6600                       		bne.s	loc_72024	; if not, branch
000A66D4 4A2E 0027                  		tst.b	$27(a6)
000A66D8 6600 0000                  		bne.w	loc_721B6
000A66DC 4BEE 0040                  		lea	$40(a6),a5
000A66E0 700A                       		moveq	#10,d0					; MJ: number of channels in total
000A66E2                            
000A66E2                            loc_71FE6:
000A66E2 0895 0002                  		bclr	#2,(a5)
000A66E6 DAFC 0030                  		adda.w	#$30,a5
000A66EA 51C8 FFF6                  		dbf	d0,loc_71FE6
000A66EE                            
000A66EE 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A66F2 7005                       		moveq	#5,d0
000A66F4                            
000A66F4                            loc_71FF8:
000A66F4 0895 0007                  		bclr	#7,(a5)
000A66F8 DAFC 0030                  		adda.w	#$30,a5
000A66FC 51C8 FFF6                  		dbf	d0,loc_71FF8
000A6700 4216                       		clr.b	0(a6)
000A6702 204E                       		movea.l	a6,a0
000A6704 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A6708 303C 0087                  		move.w	#$87,d0
000A670C                            
000A670C                            loc_72012:
000A670C 22D8                       		move.l	(a0)+,(a1)+
000A670E 51C8 FFFC                  		dbf	d0,loc_72012
000A6712                            
000A6712 1D7C 0080 0027             		move.b	#$80,$27(a6)
000A6718 4216                       		clr.b	0(a6)
000A671A 6000                       		bra.s	loc_7202C
000A671C                            ; ===========================================================================
000A671C                            
000A671C                            loc_72024:
000A671C 422E 0027                  		clr.b	$27(a6)
000A6720 422E 0026                  		clr.b	$26(a6)
000A6724                            
000A6724                            loc_7202C:
000A6724 4EBA 0000                  		jsr	sub_725CA(pc)
000A6728                            
000A6728 2879 000A 5BD6             		movea.l	(off_719A0).l,a4
000A672E 0407 0081                  		subi.b	#$81,d7
000A6732 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000A6738 2879 000A 5BCE             		movea.l	(Go_MusicIndex).l,a4
000A673E E54F                       		lsl.w	#2,d7
000A6740 2874 7000                  		movea.l	(a4,d7.w),a4
000A6744 7000                       		moveq	#0,d0
000A6746 3014                       		move.w	(a4),d0
000A6748 D08C                       		add.l	a4,d0
000A674A 2D40 0018                  		move.l	d0,$18(a6)
000A674E 102C 0005                  		move.b	5(a4),d0
000A6752 1D40 0028                  		move.b	d0,$28(a6)
000A6756 4A2E 002A                  		tst.b	$2A(a6)
000A675A 6700                       		beq.s	loc_72068
000A675C 102E 0029                  		move.b	$29(a6),d0
000A6760                            
000A6760                            loc_72068:
000A6760 1D40 0002                  		move.b	d0,2(a6)
000A6764 1D40 0001                  		move.b	d0,1(a6)
000A6768 7200                       		moveq	#0,d1
000A676A 264C                       		movea.l	a4,a3
000A676C 5C4C                       		addq.w	#6,a4
000A676E 7E00                       		moveq	#0,d7
000A6770 1E2B 0002                  		move.b	2(a3),d7
000A6774 6700 0000                  		beq.w	loc_72114
000A6778 5307                       		subq.b	#1,d7
000A677A 123C 00C0                  		move.b	#-$40,d1
000A677E 182B 0004                  		move.b	4(a3),d4
000A6782 7C30                       		moveq	#$30,d6
000A6784 1A3C 0001                  		move.b	#1,d5
000A6788 43EE 0040                  		lea	$40(a6),a1
000A678C 45FA 0000                  		lea	byte_721BA(pc),a2
000A6790                            
000A6790                            loc_72098:
000A6790 08D1 0007                  		bset	#7,(a1)
000A6794 135A 0001                  		move.b	(a2)+,1(a1)
000A6798 1344 0002                  		move.b	d4,2(a1)
000A679C 1346 000D                  		move.b	d6,$D(a1)
000A67A0 1341 000A                  		move.b	d1,$A(a1)
000A67A4 1345 000E                  		move.b	d5,$E(a1)
000A67A8 7000                       		moveq	#0,d0
000A67AA 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
000A67AE 137C 0080 000C             		move.b	#$80,$0C(a1)				; MJ: set last frame's volume to something impossible (volume is from C0 - 40)
000A67B4 301C                       		move.w	(a4)+,d0
000A67B6 D08B                       		add.l	a3,d0
000A67B8 2340 0004                  		move.l	d0,4(a1)
000A67BC 335C 0008                  		move.w	(a4)+,8(a1)
000A67C0 D2C6                       		adda.w	d6,a1
000A67C2 51CF FFCC                  		dbf	d7,loc_72098
000A67C6 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
000A67C8 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
000A67CC 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
000A67D2 6600                       		bne.s	loc_720D8
000A67D4                            	;	moveq	#$2B,d0					; MJ: removed...
000A67D4 7200                       		moveq	#0,d1
000A67D6 4EBA 0000                  		jsr	sub_7272E(pc)
000A67DA 6000 0000                  		bra.w	loc_72114
000A67DE                            ; ===========================================================================
000A67DE                            
000A67DE                            loc_720D8:
000A67DE 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
000A67E2                            
000A67E2                            	; --- Key off FM 6 ---
000A67E2                            
000A67E2 7028                       		moveq	#$28,d0
000A67E4 7206                       		moveq	#6,d1
000A67E6 4EBA 0000                  		jsr	sub_7272E(pc)
000A67EA                            
000A67EA                            	; --- Sets FM 6 to mute ---
000A67EA                            
000A67EA 103C 0042                  		move.b	#$42,d0
000A67EE 727F                       		moveq	#$7F,d1
000A67F0 4EBA 0000                  		jsr	sub_72764(pc)
000A67F4 103C 004A                  		move.b	#$4A,d0
000A67F8 727F                       		moveq	#$7F,d1
000A67FA 4EBA 0000                  		jsr	sub_72764(pc)
000A67FE 103C 0046                  		move.b	#$46,d0
000A6802 727F                       		moveq	#$7F,d1
000A6804 4EBA 0000                  		jsr	sub_72764(pc)
000A6808 103C 004E                  		move.b	#$4E,d0
000A680C 727F                       		moveq	#$7F,d1
000A680E 4EBA 0000                  		jsr	sub_72764(pc)
000A6812 103C 00B6                  		move.b	#-$4A,d0
000A6816 123C 00C0                  		move.b	#-$40,d1
000A681A 4EBA 0000                  		jsr	sub_72764(pc)
000A681E                            
000A681E                            loc_72114:
000A681E 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A6820 7E00                       		moveq	#0,d7
000A6822 1E2B 0003                  		move.b	3(a3),d7
000A6826 6700                       		beq.s	loc_72154
000A6828 5307                       		subq.b	#1,d7
000A682A 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
000A682E 45FA 0000                  		lea	byte_721C2(pc),a2
000A6832                            
000A6832                            loc_72126:
000A6832 08D1 0007                  		bset	#7,(a1)
000A6836 135A 0001                  		move.b	(a2)+,1(a1)
000A683A 1344 0002                  		move.b	d4,2(a1)
000A683E 1346 000D                  		move.b	d6,$D(a1)
000A6842 1345 000E                  		move.b	d5,$E(a1)
000A6846 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
000A684C 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
000A6852 7000                       		moveq	#0,d0
000A6854 301C                       		move.w	(a4)+,d0
000A6856 D08B                       		add.l	a3,d0
000A6858 2340 0004                  		move.l	d0,4(a1)
000A685C 335C 0008                  		move.w	(a4)+,8(a1)
000A6860 101C                       		move.b	(a4)+,d0
000A6862 135C 000B                  		move.b	(a4)+,$B(a1)
000A6866 D2C6                       		adda.w	d6,a1
000A6868 51CF FFC8                  		dbf	d7,loc_72126
000A686C                            
000A686C                            loc_72154:
000A686C 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000A6870 7E05                       		moveq	#5,d7
000A6872                            
000A6872                            loc_7215A:
000A6872 4A11                       		tst.b	(a1)
000A6874 6A00 0000                  		bpl.w	loc_7217C
000A6878 7000                       		moveq	#0,d0
000A687A 1029 0001                  		move.b	1(a1),d0
000A687E 6B00                       		bmi.s	loc_7216E
000A6880 5500                       		subq.b	#2,d0
000A6882 E508                       		lsl.b	#2,d0
000A6884 6000                       		bra.s	loc_72170
000A6886                            ; ===========================================================================
000A6886                            
000A6886                            loc_7216E:
000A6886 E608                       		lsr.b	#3,d0
000A6888                            
000A6888                            loc_72170:
000A6888 41FA 0000                  		lea	dword_722CC(pc),a0
000A688C 2070 0000                  		movea.l	(a0,d0.w),a0
000A6890 08D0 0002                  		bset	#2,(a0)
000A6894                            
000A6894                            loc_7217C:
000A6894 D2C6                       		adda.w	d6,a1
000A6896 51CF FFDA                  		dbf	d7,loc_7215A
000A689A                            
000A689A 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
000A689E 6A00                       		bpl.s	loc_7218E
000A68A0 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A68A6                            
000A68A6                            loc_7218E:
000A68A6 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
000A68AA 6A00                       		bpl.s	loc_7219A
000A68AC 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A68B2                            
000A68B2                            
000A68B2                            loc_7219A:
000A68B2 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000A68B6 7805                       		moveq	#5,d4
000A68B8                            
000A68B8                            loc_721A0:
000A68B8 4EBA 0000                  		jsr	sub_726FE(pc)
000A68BC DAC6                       		adda.w	d6,a5
000A68BE 51CC FFF8                  		dbf	d4,loc_721A0
000A68C2 7802                       		moveq	#2,d4
000A68C4                            
000A68C4                            loc_721AC:
000A68C4 4EBA 0000                  		jsr	sub_729A0(pc)
000A68C8 DAC6                       		adda.w	d6,a5
000A68CA 51CC FFF8                  		dbf	d4,loc_721AC
000A68CE                            
000A68CE                            loc_721B6:
000A68CE 584F                       		addq.w	#4,sp
000A68D0 4E75                       		rts	
000A68D2                            ; ===========================================================================
000A68D2 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
000A68DC 00                         		even
000A68DC 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000A68E0                            		even
000A68E0                            ; ===========================================================================
000A68E0                            ; ---------------------------------------------------------------------------
000A68E0                            ; Play normal sound effect
000A68E0                            ; ---------------------------------------------------------------------------
000A68E0                            
000A68E0                            Sound_A0toCF:				; XREF: Sound_ChkValue
000A68E0 4A2E 0027                  		tst.b	$27(a6)
000A68E4 6600 0000                  		bne.w	loc_722C6
000A68E8 4A2E 0004                  		tst.b	4(a6)
000A68EC 6600 0000                  		bne.w	loc_722C6
000A68F0 4A2E 0024                  		tst.b	$24(a6)
000A68F4 6600 0000                  		bne.w	loc_722C6
000A68F8 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000A68FC 6600                       		bne.s	Sound_notB5	; if not, branch
000A68FE 4A2E 002B                  		tst.b	$2B(a6)
000A6902 6600                       		bne.s	loc_721EE
000A6904 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000A6908                            
000A6908                            loc_721EE:
000A6908 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000A690E                            
000A690E                            Sound_notB5:
000A690E 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000A6912 6600                       		bne.s	Sound_notA7	; if not, branch
000A6914 4A2E 002C                  		tst.b	$2C(a6)
000A6918 6600 0000                  		bne.w	locret_722C4
000A691C 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000A6922                            
000A6922                            Sound_notA7:
000A6922 2079 000A 5BD2             		movea.l	(Go_SoundIndex).l,a0
000A6928 0407 00A0                  		subi.b	#$A0,d7
000A692C E54F                       		lsl.w	#2,d7
000A692E 2670 7000                  		movea.l	(a0,d7.w),a3
000A6932 224B                       		movea.l	a3,a1
000A6934 7200                       		moveq	#0,d1
000A6936 3219                       		move.w	(a1)+,d1
000A6938 D28B                       		add.l	a3,d1
000A693A 1A19                       		move.b	(a1)+,d5
000A693C 1E19                       		move.b	(a1)+,d7
000A693E 5307                       		subq.b	#1,d7
000A6940 7C30                       		moveq	#$30,d6
000A6942                            
000A6942                            loc_72228:
000A6942 7600                       		moveq	#0,d3
000A6944 1629 0001                  		move.b	1(a1),d3
000A6948 7403                       		moveq	#$03,d2					; EXT: set PSG to delay for 2 extra frames (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A694A 1803                       		move.b	d3,d4
000A694C 6B00                       		bmi.s	loc_72244
000A694E 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
000A6952 5543                       		subq.w	#2,d3
000A6954 E54B                       		lsl.w	#2,d3
000A6956 4BFA 0000                  		lea	dword_722CC(pc),a5
000A695A 2A75 3000                  		movea.l	(a5,d3.w),a5
000A695E 08D5 0002                  		bset	#2,(a5)
000A6962 6000                       		bra.s	loc_7226E
000A6964                            ; ===========================================================================
000A6964                            
000A6964                            loc_72244:
000A6964 E64B                       		lsr.w	#3,d3
000A6966 4BFA 0000                  		lea	dword_722CC(pc),a5
000A696A 2A75 3000                  		movea.l	(a5,d3.w),a5
000A696E 08D5 0002                  		bset	#2,(a5)
000A6972 0C04 00C0                  		cmpi.b	#$C0,d4
000A6976 6600                       		bne.s	loc_7226E
000A6978 1004                       		move.b	d4,d0
000A697A 0000 001F                  		ori.b	#$1F,d0
000A697E 13C0 00C0 0011             		move.b	d0,($C00011).l
000A6984 0840 0005                  		bchg	#5,d0
000A6988 13C0 00C0 0011             		move.b	d0,($C00011).l
000A698E                            
000A698E                            loc_7226E:
000A698E 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000A6992 244D                       		movea.l	a5,a2
000A6994 700B                       		moveq	#$B,d0
000A6996                            
000A6996                            loc_72276:
000A6996 429A                       		clr.l	(a2)+
000A6998 51C8 FFFC                  		dbf	d0,loc_72276
000A699C                            
000A699C 3A99                       		move.w	(a1)+,(a5)
000A699E 1B45 0002                  		move.b	d5,2(a5)
000A69A2 7000                       		moveq	#0,d0
000A69A4 3019                       		move.w	(a1)+,d0
000A69A6 D08B                       		add.l	a3,d0
000A69A8 2B40 0004                  		move.l	d0,4(a5)
000A69AC 3B59 0008                  		move.w	(a1)+,8(a5)
000A69B0 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
000A69B4 1B46 000D                  		move.b	d6,$D(a5)
000A69B8 3B7C FFFF 0010             		move.w	#$FFFF,$10(a5)				; CHG: clear PSG's frequency (ensures no frequency writing)
000A69BE 4A04                       		tst.b	d4
000A69C0 6B00                       		bmi.s	loc_722A8
000A69C2 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A69C8 2B41 0020                  		move.l	d1,$20(a5)
000A69CC                            
000A69CC                            loc_722A8:
000A69CC 51CF FF74                  		dbf	d7,loc_72228
000A69D0                            
000A69D0 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A69D4 6A00                       		bpl.s	loc_722B8
000A69D6 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A69DC                            
000A69DC                            loc_722B8:
000A69DC 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A69E0 6A00                       		bpl.s	locret_722C4
000A69E2 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A69E8                            
000A69E8                            locret_722C4:
000A69E8 4E75                       		rts	
000A69EA                            ; ===========================================================================
000A69EA                            
000A69EA                            loc_722C6:
000A69EA 4216                       		clr.b	0(a6)
000A69EC 4E75                       		rts	
000A69EE                            ; ===========================================================================
000A69EE 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
000A69F2 0000 0000                  		dc.l 0
000A69F6 00FF F130                  		dc.l $FFF100+$30
000A69FA 00FF F160                  		dc.l $FFF130+$30
000A69FE 00FF F1C0                  		dc.l $FFF190+$30
000A6A02 00FF F1F0                  		dc.l $FFF1C0+$30
000A6A06 00FF F220                  		dc.l $FFF1F0+$30
000A6A0A 00FF F220                  		dc.l $FFF1F0+$30
000A6A0E 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000A6A12 0000 0000                  		dc.l 0
000A6A16 00FF F280                  		dc.l $FFF250+$30
000A6A1A 00FF F2B0                  		dc.l $FFF280+$30
000A6A1E 00FF F2E0                  		dc.l $FFF2B0+$30
000A6A22 00FF F310                  		dc.l $FFF2E0+$30
000A6A26 00FF F340                  		dc.l $FFF310+$30
000A6A2A 00FF F340                  		dc.l $FFF310+$30
000A6A2E                            ; ===========================================================================
000A6A2E                            ; ---------------------------------------------------------------------------
000A6A2E                            ; Play GHZ waterfall sound
000A6A2E                            ; ---------------------------------------------------------------------------
000A6A2E                            
000A6A2E                            Sound_D0toDF:				; XREF: Sound_ChkValue
000A6A2E 4A2E 0027                  		tst.b	$27(a6)
000A6A32 6600 0000                  		bne.w	locret_723C6
000A6A36 4A2E 0004                  		tst.b	4(a6)
000A6A3A 6600 0000                  		bne.w	locret_723C6
000A6A3E 4A2E 0024                  		tst.b	$24(a6)
000A6A42 6600 0000                  		bne.w	locret_723C6
000A6A46 2079 000A 5BCA             		movea.l	(Go_SoundD0).l,a0
000A6A4C 0407 00D0                  		subi.b	#$D0,d7
000A6A50 E54F                       		lsl.w	#2,d7
000A6A52 2670 7000                  		movea.l	(a0,d7.w),a3
000A6A56 224B                       		movea.l	a3,a1
000A6A58 7000                       		moveq	#0,d0
000A6A5A 3019                       		move.w	(a1)+,d0
000A6A5C D08B                       		add.l	a3,d0
000A6A5E 2D40 0020                  		move.l	d0,$20(a6)
000A6A62 1A19                       		move.b	(a1)+,d5
000A6A64 1E19                       		move.b	(a1)+,d7
000A6A66 5307                       		subq.b	#1,d7
000A6A68 7C30                       		moveq	#$30,d6
000A6A6A                            
000A6A6A                            loc_72348:
000A6A6A 1829 0001                  		move.b	1(a1),d4
000A6A6E 6B00                       		bmi.s	loc_7235A
000A6A70 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A6A76 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6A7A 6000                       		bra.s	loc_72364
000A6A7C                            ; ===========================================================================
000A6A7C                            
000A6A7C                            loc_7235A:
000A6A7C 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A6A82 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A6A86                            
000A6A86                            loc_72364:
000A6A86 244D                       		movea.l	a5,a2
000A6A88 700B                       		moveq	#$B,d0
000A6A8A                            
000A6A8A                            loc_72368:
000A6A8A 429A                       		clr.l	(a2)+
000A6A8C 51C8 FFFC                  		dbf	d0,loc_72368
000A6A90                            
000A6A90 3A99                       		move.w	(a1)+,(a5)
000A6A92 1B45 0002                  		move.b	d5,2(a5)
000A6A96 7000                       		moveq	#0,d0
000A6A98 3019                       		move.w	(a1)+,d0
000A6A9A D08B                       		add.l	a3,d0
000A6A9C 2B40 0004                  		move.l	d0,4(a5)
000A6AA0 3B59 0008                  		move.w	(a1)+,8(a5)
000A6AA4 1B7C 0001 000E             		move.b	#1,$E(a5)
000A6AAA 1B46 000D                  		move.b	d6,$D(a5)
000A6AAE 4A04                       		tst.b	d4
000A6AB0 6B00                       		bmi.s	loc_72396
000A6AB2 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A6AB8                            
000A6AB8                            loc_72396:
000A6AB8 51CF FFB0                  		dbf	d7,loc_72348
000A6ABC                            
000A6ABC 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A6AC0 6A00                       		bpl.s	loc_723A6
000A6AC2 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A6AC8                            
000A6AC8                            loc_723A6:
000A6AC8 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A6ACC 6A00                       		bpl.s	locret_723C6
000A6ACE 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A6AD4 0004 001F                  		ori.b	#$1F,d4
000A6AD8 13C4 00C0 0011             		move.b	d4,($C00011).l
000A6ADE 0844 0005                  		bchg	#5,d4
000A6AE2 13C4 00C0 0011             		move.b	d4,($C00011).l
000A6AE8                            
000A6AE8                            locret_723C6:
000A6AE8 4E75                       		rts	
000A6AEA                            ; End of function Sound_ChkValue
000A6AEA                            
000A6AEA                            ; ===========================================================================
000A6AEA 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
000A6AEE 00FF F220                  		dc.l $FFF1F0+$30
000A6AF2 00FF F280                  		dc.l $FFF250+$30
000A6AF6 00FF F340                  		dc.l $FFF310+$30
000A6AFA 00FF F370                  		dc.l $FFF340+$30
000A6AFE 00FF F3A0                  		dc.l $FFF370+$30
000A6B02                            
000A6B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6B02                            
000A6B02                            
000A6B02                            Snd_FadeOut1:				; XREF: Sound_E0
000A6B02 4216                       		clr.b	0(a6)
000A6B04 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6B08 7E05                       		moveq	#5,d7
000A6B0A                            
000A6B0A                            loc_723EA:
000A6B0A 4A15                       		tst.b	(a5)
000A6B0C 6A00 0000                  		bpl.w	loc_72472
000A6B10 0895 0007                  		bclr	#7,(a5)
000A6B14 7600                       		moveq	#0,d3
000A6B16 162D 0001                  		move.b	1(a5),d3
000A6B1A 6B00                       		bmi.s	loc_7243C
000A6B1C 4EBA 0000                  		jsr	sub_726FE(pc)
000A6B20 0C03 0004                  		cmpi.b	#4,d3
000A6B24 6600                       		bne.s	loc_72416
000A6B26 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A6B2A 6A00                       		bpl.s	loc_72416
000A6B2C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6B30 226E 0020                  		movea.l	$20(a6),a1
000A6B34 6000                       		bra.s	loc_72428
000A6B36                            ; ===========================================================================
000A6B36                            
000A6B36                            loc_72416:
000A6B36 5503                       		subq.b	#2,d3
000A6B38 E50B                       		lsl.b	#2,d3
000A6B3A 41FA FEB2                  		lea	dword_722CC(pc),a0
000A6B3E 264D                       		movea.l	a5,a3
000A6B40 2A70 3000                  		movea.l	(a0,d3.w),a5
000A6B44 226E 0018                  		movea.l	$18(a6),a1
000A6B48                            
000A6B48                            loc_72428:
000A6B48 0895 0002                  		bclr	#2,(a5)
000A6B4C 08D5 0001                  		bset	#1,(a5)
000A6B50 102D 000B                  		move.b	$B(a5),d0
000A6B54 4EBA 0000                  		jsr	sub_72C4E(pc)
000A6B58 2A4B                       		movea.l	a3,a5
000A6B5A 6000                       		bra.s	loc_72472
000A6B5C                            ; ===========================================================================
000A6B5C                            
000A6B5C                            loc_7243C:
000A6B5C 4EBA 0000                  		jsr	sub_729A0(pc)
000A6B60 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A6B64 0C03 00E0                  		cmpi.b	#$E0,d3
000A6B68 6700                       		beq.s	loc_7245A
000A6B6A 0C03 00C0                  		cmpi.b	#$C0,d3
000A6B6E 6700                       		beq.s	loc_7245A
000A6B70 E60B                       		lsr.b	#3,d3
000A6B72 41FA FE7A                  		lea	dword_722CC(pc),a0
000A6B76 2070 3000                  		movea.l	(a0,d3.w),a0
000A6B7A                            
000A6B7A                            loc_7245A:
000A6B7A 0890 0002                  		bclr	#2,(a0)
000A6B7E 08D0 0001                  		bset	#1,(a0)
000A6B82 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A6B88 6600                       		bne.s	loc_72472
000A6B8A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A6B92                            
000A6B92                            loc_72472:
000A6B92 DAFC 0030                  		adda.w	#$30,a5
000A6B96 51CF FF72                  		dbf	d7,loc_723EA
000A6B9A                            
000A6B9A 4E75                       		rts	
000A6B9C                            ; End of function Snd_FadeOut1
000A6B9C                            
000A6B9C                            
000A6B9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6B9C                            
000A6B9C                            
000A6B9C                            Snd_FadeOut2:				; XREF: Sound_E0
000A6B9C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6BA0 4A15                       		tst.b	(a5)
000A6BA2 6A00                       		bpl.s	loc_724AE
000A6BA4 0895 0007                  		bclr	#7,(a5)
000A6BA8 0815 0002                  		btst	#2,(a5)
000A6BAC 6600                       		bne.s	loc_724AE
000A6BAE 4A2E 000E                  	tst.b	$0E(a6)
000A6BB2 6600                       	bne.s	loc_724AE_2
000A6BB4 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6BB8 6600                       	bne.s	loc_724AE
000A6BBA                            
000A6BBA                            	loc_724AE_2:
000A6BBA 4EBA 0000                  		jsr	loc_7270A(pc)
000A6BBE 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A6BC2 0895 0002                  		bclr	#2,(a5)
000A6BC6 08D5 0001                  		bset	#1,(a5)
000A6BCA 4A15                       		tst.b	(a5)
000A6BCC 6A00                       		bpl.s	loc_724AE
000A6BCE 226E 0018                  		movea.l	$18(a6),a1
000A6BD2 102D 000B                  		move.b	$B(a5),d0
000A6BD6 4EBA 0000                  		jsr	sub_72C4E(pc)
000A6BDA                            
000A6BDA                            loc_724AE:
000A6BDA 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A6BDE 4A15                       		tst.b	(a5)
000A6BE0 6A00                       		bpl.s	locret_724E4
000A6BE2 0895 0007                  		bclr	#7,(a5)
000A6BE6 0815 0002                  		btst	#2,(a5)
000A6BEA 6600                       		bne.s	locret_724E4
000A6BEC 4A2E 000E                  	tst.b	$0E(a6)
000A6BF0 6600                       	bne.s	locret_724E4_2
000A6BF2 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6BF6 6600                       	bne.s	locret_724E4
000A6BF8                            
000A6BF8                            	locret_724E4_2:
000A6BF8 4EBA 0000                  		jsr	loc_729A6(pc)
000A6BFC 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
000A6C00 0895 0002                  		bclr	#2,(a5)
000A6C04 08D5 0001                  		bset	#1,(a5)
000A6C08 4A15                       		tst.b	(a5)
000A6C0A 6A00                       		bpl.s	locret_724E4
000A6C0C 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000A6C12 6600                       		bne.s	locret_724E4
000A6C14 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000A6C1C                            
000A6C1C                            locret_724E4:
000A6C1C 4E75                       		rts	
000A6C1E                            ; End of function Snd_FadeOut2
000A6C1E                            
000A6C1E                            ; ===========================================================================
000A6C1E                            ; ---------------------------------------------------------------------------
000A6C1E                            ; Fade out music
000A6C1E                            ; ---------------------------------------------------------------------------
000A6C1E                            
000A6C1E                            Sound_E0:				; XREF: Sound_ExIndex
000A6C1E 4EBA FEE2                  		jsr	Snd_FadeOut1(pc)
000A6C22 4EBA FF78                  		jsr	Snd_FadeOut2(pc)
000A6C26 1D7C 0003 0006             		move.b	#3,6(a6)
000A6C2C 1D7C 0028 0004             		move.b	#$28,4(a6)
000A6C32                            	;	clr.b	$40(a6)
000A6C32                            	;	clr.b	$70(a6)					; MJ: stop PCM 2 as well
000A6C32 422E 002A                  		clr.b	$2A(a6)
000A6C36 4E75                       		rts	
000A6C38                            
000A6C38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6C38                            
000A6C38                            
000A6C38                            sub_72504:				; XREF: sub_71B4C
000A6C38 102E 0006                  		move.b	6(a6),d0
000A6C3C 6700                       		beq.s	loc_72510
000A6C3E 532E 0006                  		subq.b	#1,6(a6)
000A6C42 4E75                       		rts	
000A6C44                            ; ===========================================================================
000A6C44                            
000A6C44                            loc_72510:
000A6C44 532E 0004                  		subq.b	#1,4(a6)
000A6C48 6700 0000                  		beq.w	Sound_E4
000A6C4C 1D7C 0003 0006             		move.b	#3,6(a6)
000A6C52                            
000A6C52                            
000A6C52 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; CHG: load volume change instruction address
000A6C58 7C00                       		moveq	#$00,d6					; CHG: clear d6
000A6C5A 1C2E 0004                  		move.b	$04(a6),d6				; CHG: load fade counter
000A6C5E 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A6C60 4BEE 0040                  		lea	$40(a6),a5				; CHG: load PCM 1 address
000A6C64 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; CHG: load PCM 1 volume address
000A6C6A 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 1
000A6C6C 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; CHG: load PCM 2 volume address
000A6C72 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 2
000A6C74 6000 0000                  		bra.w	FadeOut_FM				; CHG: continue to FM fade out
000A6C78                            
000A6C78                            FadeOut_PCM:
000A6C78 4A15                       		tst.b	(a5)					; CHG: is the channel running?
000A6C7A 6A00                       		bpl.s	FOP_NotRunning				; CHG: if not, branch
000A6C7C 7000                       		moveq	#$00,d0					; CHG: clear d0
000A6C7E 102D 0009                  		move.b	$09(a5),d0				; CHG: load volume
000A6C82 6A00                       		bpl.s	FOP_NoMute				; CHG: if the channel is not mute (not from 80 - FF), branch
000A6C84 7080                       		moveq	#$FFFFFF80,d0				; CHG: force volume 80 (mute)
000A6C86 0895 0007                  		bclr	#$07,(a5)				; CHG: stop PCM channel
000A6C8A 6000                       		bra.s	FOP_Mute				; CHG: continue to mute the channel
000A6C8C                            
000A6C8C                            FOP_NoMute:
000A6C8C                            	;	add.b	FOP_FadeList(pc,d0.w),d0		; CHG: reduce the volume
000A6C8C 5400                       	addq.b	#$02,d0					; reduce the volume
000A6C8E                            
000A6C8E                            FOP_Mute:
000A6C8E 1B40 0009                  		move.b	d0,$09(a5)				; CHG: update
000A6C92 B02D 000C                  		cmp.b	$0C(a5),d0				; CHG: has the volume changed?
000A6C96 6700                       		beq.s	FOP_NotRunning				; CHG: if not, branch
000A6C98 1B40 000C                  		move.b	d0,$0C(a5)				; CHG: update volume
000A6C9C 142E 0004                  	move.b	$04(a6),d2				; CHG: load fade timer
000A6CA0 0202 0003                  	andi.b	#$03,d2					; CHG: has it been four frames?
000A6CA4 6600                       	bne.s	FOP_NotRunning				; CHG: if not, branch (temp until Z80 volume struggling is fixed)
000A6CA6 33FC 0100 00A1 1100 0839+  		StopZ80
000A6CB8 1080                       		move.b	d0,(a0)					; change PCM volume
000A6CBA 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A6CBC 33FC 0000 00A1 1100        		StartZ80
000A6CC4                            
000A6CC4                            FOP_NotRunning:
000A6CC4 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A6CC8 4E75                       		rts						; CHG: return
000A6CCA                            
000A6CCA                            ;FOP_FadeList:	dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A6CCA                            ;		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A6CCA                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A6CCA                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A6CCA                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A6CCA                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A6CCA                            ;		dc.b	$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000A6CCA                            ;		dc.b	$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
000A6CCA                            
000A6CCA                            ;FOP_VolumeList:	dc.b	$00,$0C,$18,$20,$28,$30,$34,$38,$3C,$40,$44,$48,$4C,$50,$56,$5A
000A6CCA                            ;		dc.b	$60,$63,$66,$69,$6B,$6D,$6F,$70,$71,$72,$73,$74,$75,$76,$76,$77
000A6CCA                            ;		dc.b	$77,$78,$78,$79,$79,$79,$7A,$7A,$7A,$7B,$7B,$7B,$7C,$7C,$7C,$7C
000A6CCA                            ;		dc.b	$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7E,$7E,$7E,$7E,$7E,$7E,$7E,$7E
000A6CCA                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A6CCA                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A6CCA                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A6CCA                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A6CCA                            
000A6CCA                            ; ===========================================================================
000A6CCA                            
000A6CCA                            FadeOut_FM:
000A6CCA 7E05                       		moveq	#5,d7
000A6CCC                            
000A6CCC                            loc_72524:
000A6CCC 4A15                       		tst.b	(a5)
000A6CCE 6A00                       		bpl.s	loc_72538
000A6CD0 522D 0009                  		addq.b	#1,9(a5)
000A6CD4 6A00                       		bpl.s	loc_72534
000A6CD6 0895 0007                  		bclr	#7,(a5)
000A6CDA 6000                       		bra.s	loc_72538
000A6CDC                            ; ===========================================================================
000A6CDC                            
000A6CDC                            loc_72534:
000A6CDC 4EBA 0000                  		jsr	sub_72CB4(pc)
000A6CE0                            
000A6CE0                            loc_72538:
000A6CE0 DAFC 0030                  		adda.w	#$30,a5
000A6CE4 51CF FFE6                  		dbf	d7,loc_72524
000A6CE8                            
000A6CE8 7E02                       		moveq	#2,d7
000A6CEA                            
000A6CEA                            loc_72542:
000A6CEA 4A15                       		tst.b	(a5)
000A6CEC 6A00                       		bpl.s	loc_72560
000A6CEE 522D 0009                  		addq.b	#1,9(a5)
000A6CF2 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000A6CF8 6500                       		bcs.s	loc_72558
000A6CFA 0895 0007                  		bclr	#7,(a5)
000A6CFE 6000                       		bra.s	loc_72560
000A6D00                            ; ===========================================================================
000A6D00                            
000A6D00                            loc_72558:
000A6D00 1C2D 0009                  		move.b	9(a5),d6
000A6D04 DC2E 0016                  	add.b	$16(a6),d6			; EXTRA
000A6D08 4EBA 0000                  		jsr	sub_7296A(pc)
000A6D0C                            
000A6D0C                            loc_72560:
000A6D0C DAFC 0030                  		adda.w	#$30,a5
000A6D10 51CF FFD8                  		dbf	d7,loc_72542
000A6D14                            
000A6D14 4E75                       		rts	
000A6D16                            ; End of function sub_72504
000A6D16                            
000A6D16                            
000A6D16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6D16                            
000A6D16                            
000A6D16                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000A6D16 7602                       		moveq	#2,d3
000A6D18 7028                       		moveq	#$28,d0
000A6D1A                            
000A6D1A                            loc_7256E:
000A6D1A 1203                       		move.b	d3,d1
000A6D1C 4EBA 0000                  		jsr	sub_7272E(pc)
000A6D20 5801                       		addq.b	#4,d1
000A6D22 4EBA 0000                  		jsr	sub_7272E(pc)
000A6D26 51CB FFF2                  		dbf	d3,loc_7256E
000A6D2A                            
000A6D2A 7040                       		moveq	#$40,d0
000A6D2C 727F                       		moveq	#$7F,d1
000A6D2E 7802                       		moveq	#2,d4
000A6D30                            
000A6D30                            loc_72584:
000A6D30 7603                       		moveq	#3,d3
000A6D32                            
000A6D32                            loc_72586:
000A6D32 4EBA 0000                  		jsr	sub_7272E(pc)
000A6D36 4EBA 0000                  		jsr	sub_72764(pc)
000A6D3A 5840                       		addq.w	#4,d0
000A6D3C 51CB FFF4                  		dbf	d3,loc_72586
000A6D40                            
000A6D40 0400 000F                  		subi.b	#$F,d0
000A6D44 51CC FFEA                  		dbf	d4,loc_72584
000A6D48                            
000A6D48 4E75                       		rts	
000A6D4A                            ; End of function sub_7256A
000A6D4A                            
000A6D4A                            ; ===========================================================================
000A6D4A                            ; ---------------------------------------------------------------------------
000A6D4A                            ; Stop music
000A6D4A                            ; ---------------------------------------------------------------------------
000A6D4A                            
000A6D4A                            Sound_E4:
000A6D4A 33FC 0100 00A1 1100 0839+  		StopZ80
000A6D5C 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6D62 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A6D68 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6D6A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D6C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D6E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6D70 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D72 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D74 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6D76 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D78 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D7A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6D7C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D7E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D80 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6D88 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6D8E 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A6D94 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6D96 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D98 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D9A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6D9C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6D9E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DA0 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6DA2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DA4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DA6 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6DA8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DAA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6DAC 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6DB4 33FC 0000 00A1 1100        		StartZ80
000A6DBC                            
000A6DBC 702B                       		moveq	#$2B,d0
000A6DBE 123C 0080                  		move.b	#$80,d1
000A6DC2 4EBA 0000                  		jsr	sub_7272E(pc)
000A6DC6 7027                       		moveq	#$27,d0
000A6DC8 7200                       		moveq	#0,d1
000A6DCA 4EBA 0000                  		jsr	sub_7272E(pc)
000A6DCE 204E                       		movea.l	a6,a0
000A6DD0 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A6DD4 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A6DD8 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
000A6DDC                            
000A6DDC                            loc_725B6:
000A6DDC 4298                       		clr.l	(a0)+
000A6DDE 51C8 FFFC                  		dbf	d0,loc_725B6
000A6DE2                            
000A6DE2 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A6DE6 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A6DEA 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000A6DF0 4EBA FF24                  		jsr	sub_7256A(pc)
000A6DF4 6000 0000                  		bra.w	sub_729B6
000A6DF8                            
000A6DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6DF8                            
000A6DF8                            
000A6DF8                            sub_725CA:				; XREF: Sound_ChkValue
000A6DF8 204E                       		movea.l	a6,a0
000A6DFA 1216                       		move.b	0(a6),d1
000A6DFC 142E 0027                  		move.b	$27(a6),d2
000A6E00 162E 002A                  		move.b	$2A(a6),d3
000A6E04 182E 0026                  		move.b	$26(a6),d4
000A6E08 3A2E 000A                  		move.w	$A(a6),d5
000A6E0C 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A6E10 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A6E14 303C 0093                  		move.w	#$93,d0						; MJ: new size
000A6E18                            
000A6E18                            loc_725E4:
000A6E18 4298                       		clr.l	(a0)+
000A6E1A 51C8 FFFC                  		dbf	d0,loc_725E4
000A6E1E                            
000A6E1E 1C81                       		move.b	d1,0(a6)
000A6E20 1D42 0027                  		move.b	d2,$27(a6)
000A6E24 1D43 002A                  		move.b	d3,$2A(a6)
000A6E28 1D44 0026                  		move.b	d4,$26(a6)
000A6E2C 3D45 000A                  		move.w	d5,$A(a6)
000A6E30 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A6E34 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A6E38 1D7C 0080 0009             		move.b	#$80,9(a6)
000A6E3E 4EBA FED6                  		jsr	sub_7256A(pc)
000A6E42 6000 0000                  		bra.w	sub_729B6
000A6E46                            ; End of function sub_725CA
000A6E46                            
000A6E46                            
000A6E46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6E46                            
000A6E46                            
000A6E46                            sub_7260C:				; XREF: sub_71B4C
000A6E46                            	;	move.b	2(a6),1(a6)
000A6E46 102E 0015                  	move.b	$15(a6),d0			; EXTRA
000A6E4A 6A00                       	bpl.s	STempo_CheckMax			; EXTRA
000A6E4C D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A6E50 0C00 0002                  	cmpi.b	#$02,d0				; EXTRA
000A6E54 6A00                       	bpl.s	STempo_Valid			; EXTRA
000A6E56 7002                       	moveq	#$02,d0				; EXTRA
000A6E58 6000                       	bra.s	STempo_Valid			; EXTRA
000A6E5A                            
000A6E5A                            STempo_CheckMax:
000A6E5A D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A6E5E                            
000A6E5E                            STempo_Valid:
000A6E5E 1D40 0001                  	move.b	d0,$01(a6)			; EXTRA
000A6E62                            
000A6E62 41EE 004E                  		lea	$4E(a6),a0
000A6E66 7030                       		moveq	#$30,d0
000A6E68 720A                       		moveq	#10,d1						; MJ: new number of channels
000A6E6A                            
000A6E6A                            loc_7261A:
000A6E6A 5210                       		addq.b	#1,(a0)
000A6E6C D0C0                       		adda.w	d0,a0
000A6E6E 51C9 FFFA                  		dbf	d1,loc_7261A
000A6E72                            
000A6E72 4E75                       		rts	
000A6E74                            ; End of function sub_7260C
000A6E74                            
000A6E74                            ; ===========================================================================
000A6E74                            ; ---------------------------------------------------------------------------
000A6E74                            ; Speed	up music
000A6E74                            ; ---------------------------------------------------------------------------
000A6E74                            
000A6E74                            Sound_E2:				; XREF: Sound_ExIndex
000A6E74 4A2E 0027                  		tst.b	$27(a6)
000A6E78 6600                       		bne.s	loc_7263E
000A6E7A 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000A6E80 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000A6E86 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000A6E8C 4E75                       		rts	
000A6E8E                            ; ===========================================================================
000A6E8E                            
000A6E8E                            loc_7263E:
000A6E8E 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
000A6E94 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
000A6E9A 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
000A6EA0 4E75                       		rts	
000A6EA2                            ; ===========================================================================
000A6EA2                            ; ---------------------------------------------------------------------------
000A6EA2                            ; Change music back to normal speed
000A6EA2                            ; ---------------------------------------------------------------------------
000A6EA2                            
000A6EA2                            Sound_E3:				; XREF: Sound_ExIndex
000A6EA2 4A2E 0027                  		tst.b	$27(a6)
000A6EA6 6600                       		bne.s	loc_7266A
000A6EA8 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000A6EAE 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000A6EB4 422E 002A                  		clr.b	$2A(a6)
000A6EB8 4E75                       		rts	
000A6EBA                            ; ===========================================================================
000A6EBA                            
000A6EBA                            loc_7266A:
000A6EBA 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
000A6EC0 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
000A6EC6 422E 03FA                  		clr.b	$3FA(a6)
000A6ECA 4E75                       		rts	
000A6ECC                            
000A6ECC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6ECC                            
000A6ECC                            
000A6ECC                            sub_7267C:				; XREF: sub_71B4C
000A6ECC 4A2E 0025                  		tst.b	$25(a6)
000A6ED0 6700                       		beq.s	loc_72688
000A6ED2 532E 0025                  		subq.b	#1,$25(a6)
000A6ED6 4E75                       		rts	
000A6ED8                            ; ===========================================================================
000A6ED8                            
000A6ED8                            loc_72688:
000A6ED8 4A2E 0026                  		tst.b	$26(a6)
000A6EDC 6700                       		beq.s	loc_726D6
000A6EDE 532E 0026                  		subq.b	#1,$26(a6)
000A6EE2 1D7C 0002 0025             		move.b	#2,$25(a6)
000A6EE8                            
000A6EE8 4BEE 0040                  		lea	$40(a6),a5				; CHG: load starting from PCM channels
000A6EEC 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to alter
000A6EEE                            
000A6EEE                            FadeIn_NextPCM:
000A6EEE 4A15                       		tst.b	(a5)					; CHG: is this channel running?
000A6EF0 6A00                       		bpl.s	FadeIn_NoPCM				; CHG: if not, branch
000A6EF2 572D 0009                  		subq.b	#$03,$09(a5)				; CHG: increase volume
000A6EF6                            
000A6EF6                            FadeIn_NoPCM:
000A6EF6 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A6EFA 51CF FFF2                  		dbf	d7,FadeIn_NextPCM			; CHG: repeat for all channels
000A6EFE                            
000A6EFE                            	;	lea	$A0(a6),a5				; MJ: new SFX location
000A6EFE                            
000A6EFE 7E05                       		moveq	#5,d7
000A6F00                            
000A6F00                            loc_7269E:
000A6F00 4A15                       		tst.b	(a5)
000A6F02 6A00                       		bpl.s	loc_726AA
000A6F04 532D 0009                  		subq.b	#1,9(a5)
000A6F08 4EBA 0000                  		jsr	sub_72CB4(pc)
000A6F0C                            
000A6F0C                            loc_726AA:
000A6F0C DAFC 0030                  		adda.w	#$30,a5
000A6F10 51CF FFEE                  		dbf	d7,loc_7269E
000A6F14 7E02                       		moveq	#2,d7
000A6F16                            
000A6F16                            loc_726B4:
000A6F16 4A15                       		tst.b	(a5)
000A6F18 6A00                       		bpl.s	loc_726CC
000A6F1A 532D 0009                  		subq.b	#1,9(a5)
000A6F1E 1C2D 0009                  		move.b	9(a5),d6
000A6F22 0C06 0010                  		cmpi.b	#$10,d6
000A6F26 6500                       		bcs.s	loc_726C8
000A6F28 7C0F                       		moveq	#$F,d6
000A6F2A                            
000A6F2A                            loc_726C8:
000A6F2A 4EBA 0000                  		jsr	sub_7296A(pc)
000A6F2E                            
000A6F2E                            loc_726CC:
000A6F2E DAFC 0030                  		adda.w	#$30,a5
000A6F32 51CF FFE2                  		dbf	d7,loc_726B4
000A6F36 4E75                       		rts	
000A6F38                            ; ===========================================================================
000A6F38                            
000A6F38                            loc_726D6:
000A6F38                            	;	bclr	#2,$40(a6)
000A6F38                            	;	bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
000A6F38 422E 0024                  		clr.b	$24(a6)
000A6F3C 4E75                       		rts	
000A6F3E                            ; End of function sub_7267C
000A6F3E                            
000A6F3E                            ; ===========================================================================
000A6F3E                            
000A6F3E                            loc_726E2:				; XREF: sub_71CCA
000A6F3E 0815 0001                  		btst	#1,(a5)
000A6F42 6600                       		bne.s	locret_726FC
000A6F44 0815 0002                  		btst	#2,(a5)
000A6F48 6600                       		bne.s	locret_726FC
000A6F4A 4A2E 000E                  	tst.b	$0E(a6)
000A6F4E 6600                       	bne.s	locret_726FC_2
000A6F50 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6F54 6600                       	bne.s	locret_726FC
000A6F56                            
000A6F56                            	locret_726FC_2:
000A6F56 7028                       		moveq	#$28,d0
000A6F58 122D 0001                  		move.b	1(a5),d1
000A6F5C 0001 00F0                  		ori.b	#-$10,d1
000A6F60 6000 0000                  		bra.w	sub_7272E
000A6F64                            ; ===========================================================================
000A6F64                            
000A6F64                            locret_726FC:
000A6F64 4E75                       		rts	
000A6F66                            
000A6F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6F66                            
000A6F66                            
000A6F66                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000A6F66 0815 0004                  		btst	#4,(a5)
000A6F6A 6600                       		bne.s	locret_72714
000A6F6C 0815 0002                  		btst	#2,(a5)
000A6F70 6600                       		bne.s	locret_72714
000A6F72 4A2E 000E                  	tst.b	$0E(a6)
000A6F76 6600                       	bne.s	loc_7270A
000A6F78 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6F7C 6600                       	bne.s	locret_72714
000A6F7E                            
000A6F7E                            loc_7270A:				; XREF: Snd_FadeOut2
000A6F7E 7028                       		moveq	#$28,d0
000A6F80 122D 0001                  		move.b	1(a5),d1
000A6F84 6000 0000                  		bra.w	sub_7272E
000A6F88                            ; ===========================================================================
000A6F88                            
000A6F88                            locret_72714:
000A6F88 4E75                       		rts	
000A6F8A                            ; End of function sub_726FE
000A6F8A                            
000A6F8A                            ; ===========================================================================
000A6F8A                            
000A6F8A                            loc_72716:				; XREF: sub_72A5A
000A6F8A 0815 0002                  		btst	#2,(a5)
000A6F8E 6600                       		bne.s	locret_72720
000A6F90 4A2E 000E                  	tst.b	$0E(a6)
000A6F94 6600                       	bne.s	sub_72722
000A6F96 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6F9A 6600                       	bne.s	locret_72720
000A6F9C 6000 0000                  		bra.w	sub_72722
000A6FA0                            ; ===========================================================================
000A6FA0                            
000A6FA0                            locret_72720:
000A6FA0 4E75                       		rts	
000A6FA2                            
000A6FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6FA2                            
000A6FA2                            
000A6FA2                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000A6FA2 082D 0002 0001             		btst	#2,1(a5)
000A6FA8 6600                       		bne.s	loc_7275A
000A6FAA D02D 0001                  		add.b	1(a5),d0
000A6FAE                            ; End of function sub_72722
000A6FAE                            
000A6FAE                            
000A6FAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6FAE                            
000A6FAE                            sub_7272E:
000A6FAE 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A6FB2 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A6FB6 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
000A6FBA 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A6FCC 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A6FCE 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A6FD0 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A6FD2 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A6FD4 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A6FDC 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A6FE0 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A6FE4 4E75                       		rts						; EXT: return
000A6FE6                            
000A6FE6                            ; ===========================================================================
000A6FE6                            
000A6FE6                            loc_7275A:				; XREF: sub_72722
000A6FE6 142D 0001                  		move.b	1(a5),d2
000A6FEA 0882 0002                  		bclr	#2,d2
000A6FEE D002                       		add.b	d2,d0
000A6FF0                            
000A6FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6FF0                            
000A6FF0                            
000A6FF0                            sub_72764:
000A6FF0 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A6FF4 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A6FF8 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
000A6FFC 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A700E 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A7010 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A7012 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A7014 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A7016 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A701E 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A7022 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A7026 4E75                       		rts						; EXT: return
000A7028                            
000A7028                            ; ===========================================================================
000A7028 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000A703A 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000A704C 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000A705C 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000A706C 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000A707C 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000A708C 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000A709C 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000A70AC 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000A70BC 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000A70CC 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000A70DC 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000A70E8                            
000A70E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A70E8                            
000A70E8                            
000A70E8                            ; ===========================================================================
000A70E8                            ; ---------------------------------------------------------------------------
000A70E8                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A70E8                            ; ---------------------------------------------------------------------------
000A70E8                            
000A70E8                            SPSG_CheckMute:
000A70E8 4A2E 000E                  	tst.b	$0E(a6)
000A70EC 6600                       	bne.s	S72850_NoCHG
000A70EE 102D 0021                  	move.b	$21(a5),d0
000A70F2 B02D 0022                  	cmp.b	$22(a5),d0
000A70F6 6700                       	beq.s	S72850_NoCHG
000A70F8 4A00                       	tst.b	d0
000A70FA 6A00                       	bpl.s	S72850_NoMute
000A70FC 08D5 0006                  	bset.b	#$06,(a5)
000A7100 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A7106 4EB9 0000 0000             	jsr	SPSG_UpdateTone
000A710C                            
000A710C                            S72850_NoCHG:
000A710C 4E75                       	rts
000A710E                            
000A710E                            S72850_NoMute:
000A710E 1B40 0022                  	move.b	d0,$22(a5)
000A7112 08D5 0006                  	bset.b	#$06,(a5)
000A7116 4EB9 0000 0000             	jsr	loc_7292E
000A711C 4E75                       	rts
000A711E                            
000A711E                            ; ===========================================================================
000A711E                            ; ---------------------------------------------------------------------------
000A711E                            ; Subroutine to run a PSG channel
000A711E                            ; ---------------------------------------------------------------------------
000A711E                            
000A711E                            sub_72850:				; XREF: sub_71B4C
000A711E 61C8                       	bsr.s	SPSG_CheckMute			; EXTRA - ON/OFF
000A7120 532D 000E                  		subq.b	#1,$E(a5)
000A7124 6600                       		bne.s	loc_72866
000A7126 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A712A 0895 0004                  		bclr	#4,(a5)
000A712E 4EBA 0000                  		jsr	sub_72878(pc)
000A7132 4EBA 0000                  		jsr	sub_728DC(pc)
000A7136 6000 0000                  		bra.w	loc_7292E
000A713A                            ; ===========================================================================
000A713A                            
000A713A                            loc_72866:
000A713A 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A713E 6700                       	beq.s	SPSG_NoUpdate			; EXTRA
000A7140 7A00                       	moveq	#$00,d5				; EXTRA
000A7142 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A7146 0405 0081                  	subi.b	#$81,d5				; EXTRA
000A714A 6500                       	bcs.s	SPSG_NoUpdate			; EXTRA
000A714C 4EB9 0000 0000             	jsr	SPSG_UpdateFreque		; EXTRA
000A7152 3C2D 0010                  	move.w	$10(a5),d6			; EXTRA
000A7156 6000 0000                  	bra.w	SPSG_Update			; EXTRA
000A715A                            
000A715A                            	SPSG_NoUpdate:				; EXTRA
000A715A 4EBA F1EE                  		jsr	sub_71D9E(pc)
000A715E 4EBA 0000                  		jsr	sub_72926(pc)
000A7162 4EBA F28A                  		jsr	sub_71DC6(pc)
000A7166                            
000A7166                            	SPSG_Update:				; EXTRA
000A7166 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A716A 4EBA 0000                  		jsr	sub_728E2(pc)
000A716E 4E75                       		rts	
000A7170                            ; End of function sub_72850
000A7170                            
000A7170                            
000A7170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7170                            
000A7170                            
000A7170                            sub_72878:				; XREF: sub_72850
000A7170 0895 0001                  		bclr	#1,(a5)
000A7174 286D 0004                  		movea.l	4(a5),a4
000A7178                            
000A7178                            loc_72880:
000A7178 7A00                       		moveq	#0,d5
000A717A 1A1C                       		move.b	(a4)+,d5
000A717C 0C05 00E0                  		cmpi.b	#$E0,d5
000A7180 6500                       		bcs.s	loc_72890
000A7182 4EBA 0000                  		jsr	sub_72A5A(pc)
000A7186 60F0                       		bra.s	loc_72880
000A7188                            ; ===========================================================================
000A7188                            
000A7188                            loc_72890:
000A7188 4A05                       		tst.b	d5
000A718A 6A00                       		bpl.s	loc_728A4
000A718C 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A7190 4EBA 0000                  		jsr	sub_728AC(pc)
000A7194 1A1C                       		move.b	(a4)+,d5
000A7196 4A05                       		tst.b	d5
000A7198 6A00                       		bpl.s	loc_728A4
000A719A 534C                       		subq.w	#1,a4
000A719C 6000 F16E                  		bra.w	sub_71D60
000A71A0                            ; ===========================================================================
000A71A0                            
000A71A0                            loc_728A4:
000A71A0 4EBA F14A                  		jsr	sub_71D40(pc)
000A71A4 6000 F166                  		bra.w	sub_71D60
000A71A8                            ; End of function sub_72878
000A71A8                            
000A71A8                            
000A71A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A71A8                            
000A71A8                            
000A71A8                            sub_728AC:				; XREF: sub_72878
000A71A8 0405 0081                  		subi.b	#$81,d5
000A71AC 6500                       		bcs.s	loc_728CA
000A71AE                            
000A71AE                            	SPSG_UpdateFreque:			; EXTRA
000A71AE DA2D 0008                  		add.b	8(a5),d5
000A71B2 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A71B6 0245 007F                  		andi.w	#$7F,d5
000A71BA E34D                       		lsl.w	#1,d5
000A71BC 41FA 0000                  		lea	word_729CE(pc),a0
000A71C0 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000A71C6 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A71CA 669A                       	bne.s	SPSG_Update			; EXTRA
000A71CC 6000 F13E                  		bra.w	sub_71D60
000A71D0                            ; ===========================================================================
000A71D0                            
000A71D0                            loc_728CA:
000A71D0 08D5 0001                  		bset	#1,(a5)
000A71D4 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000A71DA 4EBA F130                  		jsr	sub_71D60(pc)
000A71DE 6000 0000                  		bra.w	sub_729A0
000A71E2                            ; End of function sub_728AC
000A71E2                            
000A71E2                            
000A71E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A71E2                            
000A71E2                            
000A71E2                            sub_728DC:				; XREF: sub_72850
000A71E2 3C2D 0010                  		move.w	$10(a5),d6
000A71E6 6B00                       		bmi.s	loc_72920
000A71E8                            ; End of function sub_728DC
000A71E8                            
000A71E8                            
000A71E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A71E8                            
000A71E8                            
000A71E8                            sub_728E2:				; XREF: sub_72850
000A71E8 102D 001E                  		move.b	$1E(a5),d0
000A71EC 4880                       		ext.w	d0
000A71EE DC40                       		add.w	d0,d6
000A71F0 0815 0002                  		btst	#2,(a5)
000A71F4 6600                       		bne.s	locret_7291E
000A71F6 4A2E 000E                  	tst.b	$0E(a6)
000A71FA 6600                       	bne.s	locret_7291E_2
000A71FC 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7200 6600                       	bne.s	locret_7291E
000A7202                            
000A7202                            	locret_7291E_2:
000A7202 0815 0001                  		btst	#1,(a5)
000A7206 6600                       		bne.s	locret_7291E
000A7208 102D 0001                  		move.b	1(a5),d0
000A720C 0C00 00E0                  		cmpi.b	#$E0,d0
000A7210 6600                       		bne.s	loc_72904
000A7212 103C 00C0                  		move.b	#$C0,d0
000A7216                            
000A7216                            loc_72904:
000A7216 3206                       		move.w	d6,d1
000A7218 0201 000F                  		andi.b	#$F,d1
000A721C 8001                       		or.b	d1,d0
000A721E E84E                       		lsr.w	#4,d6
000A7220 0206 003F                  		andi.b	#$3F,d6
000A7224 13C0 00C0 0011             		move.b	d0,($C00011).l
000A722A 13C6 00C0 0011             		move.b	d6,($C00011).l
000A7230                            
000A7230                            locret_7291E:
000A7230 4E75                       		rts	
000A7232                            ; End of function sub_728E2
000A7232                            
000A7232                            ; ===========================================================================
000A7232                            
000A7232                            loc_72920:				; XREF: sub_728DC
000A7232 08D5 0001                  		bset	#1,(a5)
000A7236 4E75                       		rts	
000A7238                            
000A7238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7238                            
000A7238                            
000A7238                            sub_72926:				; XREF: sub_72850
000A7238 4A2D 000B                  		tst.b	$B(a5)
000A723C 6700 0000                  		beq.w	locret_7298A
000A7240                            
000A7240                            loc_7292E:				; XREF: sub_72850
000A7240                            	;	move.b	9(a5),d6
000A7240 1C2E 0016                  	move.b	$16(a6),d6			; EXTRA
000A7244 E406                       	asr.b	#$02,d6				; EXTRA
000A7246 DC2D 0009                  	add.b	$09(a5),d6			; EXTRA
000A724A 7000                       		moveq	#0,d0
000A724C 102D 000B                  		move.b	$B(a5),d0
000A7250 6700                       		beq.s	sub_7296A
000A7252 2079 000A 5BDA             		movea.l	(Go_PSGIndex).l,a0
000A7258 5340                       		subq.w	#1,d0
000A725A E548                       		lsl.w	#2,d0
000A725C 2070 0000                  		movea.l	(a0,d0.w),a0
000A7260 102D 000C                  		move.b	$C(a5),d0
000A7264 1030 0000                  		move.b	(a0,d0.w),d0
000A7268 522D 000C                  		addq.b	#1,$C(a5)
000A726C 0800 0007                  		btst	#7,d0
000A7270 6700                       		beq.s	loc_72960
000A7272 0C00 0080                  		cmpi.b	#$80,d0
000A7276 6700                       		beq.s	loc_7299A
000A7278                            
000A7278                            loc_72960:
000A7278 DC40                       		add.w	d0,d6
000A727A 0C06 0010                  		cmpi.b	#$10,d6
000A727E 6500                       		bcs.s	sub_7296A
000A7280 7C0F                       		moveq	#$F,d6
000A7282                            ; End of function sub_72926
000A7282                            
000A7282                            
000A7282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7282                            
000A7282                            
000A7282                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000A7282 0815 0001                  		btst	#1,(a5)
000A7286 6600                       		bne.s	locret_7298A
000A7288                            
000A7288                            	SPSG_UpdateTone:
000A7288 0815 0002                  		btst	#2,(a5)
000A728C 6600                       		bne.s	locret_7298A
000A728E 4A2E 000E                  	tst.b	$0E(a6)
000A7292 6600                       	bne.s	locret_7298A_2
000A7294 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7298 6700                       	beq.s	locret_7298A_2
000A729A 1C2D 0001                  	move.b	$01(a5),d6
000A729E 0606 0010                  	addi.b	#$10,d6
000A72A2 0006 000F                  	ori.b	#$0F,d6
000A72A6 13C6 00C0 0011             	move.b	d6,($C00011).l
000A72AC 4E75                       	rts
000A72AE                            
000A72AE                            	locret_7298A_2:
000A72AE 0815 0004                  		btst	#4,(a5)
000A72B2 6600                       		bne.s	loc_7298C
000A72B4                            
000A72B4                            loc_7297C:
000A72B4 8C2D 0001                  		or.b	1(a5),d6
000A72B8 0606 0010                  		addi.b	#$10,d6
000A72BC 13C6 00C0 0011             		move.b	d6,($C00011).l
000A72C2                            
000A72C2                            locret_7298A:
000A72C2 4E75                       		rts	
000A72C4                            ; ===========================================================================
000A72C4                            
000A72C4                            loc_7298C:
000A72C4 4A2D 0013                  		tst.b	$13(a5)
000A72C8 67EA                       		beq.s	loc_7297C
000A72CA 4A2D 0012                  		tst.b	$12(a5)
000A72CE 66E4                       		bne.s	loc_7297C
000A72D0 4E75                       		rts	
000A72D2                            ; End of function sub_7296A
000A72D2                            
000A72D2                            ; ===========================================================================
000A72D2                            
000A72D2                            loc_7299A:				; XREF: sub_72926
000A72D2 532D 000C                  		subq.b	#1,$C(a5)
000A72D6 4E75                       		rts	
000A72D8                            
000A72D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A72D8                            
000A72D8                            
000A72D8                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000A72D8 0815 0002                  		btst	#2,(a5)
000A72DC 6600                       		bne.s	locret_729B4
000A72DE 4A2E 000E                  	tst.b	$0E(a6)
000A72E2 6600                       	bne.s	loc_729A6
000A72E4 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A72E8 6600                       	bne.s	locret_729B4
000A72EA                            
000A72EA                            loc_729A6:				; XREF: Snd_FadeOut2
000A72EA 102D 0001                  		move.b	1(a5),d0
000A72EE 0000 001F                  		ori.b	#$1F,d0
000A72F2 13C0 00C0 0011             		move.b	d0,($C00011).l
000A72F8                            
000A72F8                            locret_729B4:
000A72F8 4E75                       		rts	
000A72FA                            ; End of function sub_729A0
000A72FA                            
000A72FA                            
000A72FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A72FA                            
000A72FA                            
000A72FA                            sub_729B6:				; XREF: loc_71E7C
000A72FA 41F9 00C0 0011             		lea	($C00011).l,a0
000A7300 10BC 009F                  		move.b	#$9F,(a0)
000A7304 10BC 00BF                  		move.b	#$BF,(a0)
000A7308 10BC 00DF                  		move.b	#$DF,(a0)
000A730C 10BC 00FF                  		move.b	#$FF,(a0)
000A7310 4E75                       		rts	
000A7312                            ; End of function sub_729B6
000A7312                            
000A7312                            ; ===========================================================================
000A7312 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000A7324 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000A7336 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000A734A 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000A735E 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000A7372 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000A7386 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000A739A 0011 0000                  		dc.w $11, 0
000A739E                            
000A739E                            	; PSG can overflow here by accident (SYZ does when it plays low notes
000A739E                            	; but the pitch of the channel is low, and wraps to high).
000A739E                            
000A739E                            	; The flag pointers have been altered slightly, causing the frequencies
000A739E                            	; to be different, even though it's wrong in the first place, this
000A739E                            	; table will ensure it's put back the original way (not correct, just
000A739E                            	; original).
000A739E                            
000A739E 0445 00E0 E54D 4EFB 5002+  		dc.w	$0445,$00E0,$E54D,$4EFB,$5002,$6000,$0066,$6000	; CHG: end of table
000A73AE 0082 6000 0084 6000 0086+  		dc.w	$0082,$6000,$0084,$6000,$0086,$6000,$009E,$6000
000A73BE 0124 6000 0126 6000 012C+  		dc.w	$0124,$6000,$0126,$6000,$012C,$6000,$012E,$6000
000A73CE 0134 6000 0138 6000 013E+  		dc.w	$0134,$6000,$0138,$6000,$013E,$6000,$0150,$6000
000A73DE 0154 6000 0156 6000 0184+  		dc.w	$0154,$6000,$0156,$6000,$0184,$6000,$028A,$6000
000A73EE 02A8 6000 02AA 6000 0354+  		dc.w	$02A8,$6000,$02AA,$6000,$0354,$6000,$036A,$6000
000A73FE 036C 6000 036E 6000 0376+  		dc.w	$036C,$6000,$036E,$6000,$0376,$6000,$038C,$6000
000A740E 039A 121C                  		dc.w	$039A,$121C
000A7412                            
000A7412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7412                            
000A7412                            
000A7412                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A7412 0445 00E0                  		subi.w	#$E0,d5
000A7416 E54D                       		lsl.w	#2,d5
000A7418 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000A741C                            ; End of function sub_72A5A
000A741C                            
000A741C                            ; ===========================================================================
000A741C                            
000A741C                            loc_72A64:
000A741C 6000 0000                  		bra.w	loc_72ACC			; E0
000A7420                            ; ===========================================================================
000A7420 6000 0000                  		bra.w	loc_72AEC			; E1
000A7424                            ; ===========================================================================
000A7424 6000 0000                  		bra.w	loc_72AF2			; E2
000A7428                            ; ===========================================================================
000A7428 6000 0000                  		bra.w	loc_72AF8			; E3
000A742C                            ; ===========================================================================
000A742C 6000 0000                  		bra.w	loc_72B14			; E4
000A7430                            ; ===========================================================================
000A7430 6000 0000                  		bra.w	loc_72B9E			; E5
000A7434                            ; ===========================================================================
000A7434 6000 0000                  		bra.w	loc_72BA4			; E6
000A7438                            ; ===========================================================================
000A7438 6000 0000                  		bra.w	loc_72BAE			; E7
000A743C                            ; ===========================================================================
000A743C 6000 0000                  		bra.w	loc_72BB4			; E8
000A7440                            ; ===========================================================================
000A7440 6000 0000                  		bra.w	loc_72BBE			; E9
000A7444                            ; ===========================================================================
000A7444 6000 0000                  		bra.w	loc_72BC6			; EA
000A7448                            ; ===========================================================================
000A7448 6000 0000                  		bra.w	loc_72BD0			; EB
000A744C                            ; ===========================================================================
000A744C 6000 0000                  		bra.w	loc_72BE6			; EC
000A7450                            ; ===========================================================================
000A7450 6000 0000                  		bra.w	loc_72BEE			; ED
000A7454                            ; ===========================================================================
000A7454 6000 0000                  		bra.w	loc_72BF4			; EE
000A7458                            ; ===========================================================================
000A7458 6000 0000                  		bra.w	loc_72C26			; EF
000A745C                            ; ===========================================================================
000A745C 6000 0000                  		bra.w	loc_72D30			; F0
000A7460                            ; ===========================================================================
000A7460 6000 0000                  		bra.w	loc_72D52			; F1
000A7464                            ; ===========================================================================
000A7464 6000 0000                  		bra.w	loc_72D58			; F2
000A7468                            ; ===========================================================================
000A7468 6000 0000                  		bra.w	loc_72E06			; F3
000A746C                            ; ===========================================================================
000A746C 6000 0000                  		bra.w	loc_72E20			; F4
000A7470                            ; ===========================================================================
000A7470 6000 0000                  		bra.w	loc_72E26			; F5
000A7474                            ; ===========================================================================
000A7474 6000 0000                  		bra.w	loc_72E2C			; F6
000A7478                            ; ===========================================================================
000A7478 6000 0000                  		bra.w	loc_72E38			; F7
000A747C                            ; ===========================================================================
000A747C 6000 0000                  		bra.w	loc_72E52			; F8
000A7480                            ; ===========================================================================
000A7480 6000 0000                  		bra.w	loc_72E64			; F9
000A7484                            ; ===========================================================================
000A7484                            ; ---------------------------------------------------------------------------
000A7484                            ; Flag FA - Reverse flag
000A7484                            ; ---------------------------------------------------------------------------
000A7484                            
000A7484                            FlagFA:
000A7484 0855 0005                  		bchg.b	#$05,(a5)			; CHG: change reverse flag
000A7488 4E75                       		rts					; CHG: return
000A748A                            
000A748A                            ; ===========================================================================
000A748A                            
000A748A                            loc_72ACC:				; XREF: loc_72A64
000A748A 121C                       		move.b	(a4)+,d1
000A748C 4A2D 0001                  		tst.b	1(a5)
000A7490 6B00                       		bmi.s	locret_72AEA
000A7492 102D 000A                  		move.b	$A(a5),d0
000A7496 0200 0037                  		andi.b	#$37,d0
000A749A 8200                       		or.b	d0,d1
000A749C 1B41 000A                  		move.b	d1,$A(a5)
000A74A0 103C 00B4                  		move.b	#$B4,d0
000A74A4 6000 FAE4                  		bra.w	loc_72716
000A74A8                            ; ===========================================================================
000A74A8                            
000A74A8                            locret_72AEA:
000A74A8 4E75                       		rts	
000A74AA                            ; ===========================================================================
000A74AA                            
000A74AA                            loc_72AEC:				; XREF: loc_72A64
000A74AA 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000A74AE 4E75                       		rts	
000A74B0                            ; ===========================================================================
000A74B0                            
000A74B0                            loc_72AF2:				; XREF: loc_72A64
000A74B0 1D5C 0007                  		move.b	(a4)+,7(a6)
000A74B4 4E75                       		rts	
000A74B6                            ; ===========================================================================
000A74B6                            
000A74B6                            loc_72AF8:				; XREF: loc_72A64
000A74B6 7000                       		moveq	#0,d0
000A74B8 102D 000D                  		move.b	$D(a5),d0
000A74BC 2875 0000                  		movea.l	(a5,d0.w),a4
000A74C0 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000A74C8 544C                       		addq.w	#2,a4
000A74CA 5800                       		addq.b	#4,d0
000A74CC 1B40 000D                  		move.b	d0,$D(a5)
000A74D0 4E75                       		rts	
000A74D2                            ; ===========================================================================
000A74D2                            
000A74D2                            loc_72B14:				; XREF: loc_72A64
000A74D2 204E                       		movea.l	a6,a0
000A74D4 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A74D8 236E 0010 0010             	move.l	$10(a6),$10(a1)				; CHG: copy buffer address across
000A74DE 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
000A74E2                            
000A74E2                            loc_72B1E:
000A74E2 20D9                       		move.l	(a1)+,(a0)+
000A74E4 51C8 FFFC                  		dbf	d0,loc_72B1E
000A74E8                            
000A74E8                            	;	bset	#2,$40(a6)
000A74E8                            	;	bset	#2,$70(a6)				; MJ: enable PCM 2
000A74E8 264D                       		movea.l	a5,a3
000A74EA 1C3C 0028                  		move.b	#$28,d6
000A74EE 9C2E 0026                  		sub.b	$26(a6),d6
000A74F2 1A06                       	move.b	d6,d5
000A74F4 DA05                       	add.b	d5,d5
000A74F6 DA06                       	add.b	d6,d5
000A74F8                            
000A74F8 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to do
000A74FA 4BEE 0040                  		lea	$40(a6),a5				; CHG: start from PCM 1
000A74FE                            
000A74FE                            FE4_NextPCM:
000A74FE 0815 0007                  		btst	#$07,(a5)				; CHG: is the channel running?
000A7502 6700                       		beq.s	FE4_NoPCM				; CHG: if not, branch
000A7504                            	;	bset	#$01,(a5)				; CHG: set the channel as resting
000A7504 DB2D 0009                  		add.b	d5,$09(a5)				; CHG: reduce its volume
000A7508                            
000A7508                            FE4_NoPCM:
000A7508 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A750C 51CF FFF0                  		dbf	d7,FE4_NextPCM				; CHG: repeat for all channels
000A7510                            
000A7510 7E05                       		moveq	#5,d7
000A7512                            	;	lea	$A0(a6),a5				; MJ: new FM location
000A7512                            
000A7512                            loc_72B3A:
000A7512 0815 0007                  		btst	#7,(a5)
000A7516 6700                       		beq.s	loc_72B5C
000A7518 08D5 0001                  		bset	#1,(a5)
000A751C DD2D 0009                  		add.b	d6,9(a5)
000A7520 0815 0002                  		btst	#2,(a5)
000A7524 6600                       		bne.s	loc_72B5C
000A7526 4A2E 000E                  	tst.b	$0E(a6)
000A752A 6600                       	bne.s	locret_72B5C_2
000A752C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7530 6600                       	bne.s	loc_72B5C
000A7532                            
000A7532                            	locret_72B5C_2:
000A7532 7000                       		moveq	#0,d0
000A7534 102D 000B                  		move.b	$B(a5),d0
000A7538 226E 0018                  		movea.l	$18(a6),a1
000A753C 4EBA 0000                  		jsr	sub_72C4E(pc)
000A7540                            
000A7540                            loc_72B5C:
000A7540 DAFC 0030                  		adda.w	#$30,a5
000A7544 51CF FFCC                  		dbf	d7,loc_72B3A
000A7548                            
000A7548 7E02                       		moveq	#2,d7
000A754A                            
000A754A                            loc_72B66:
000A754A 0815 0007                  		btst	#7,(a5)
000A754E 6700                       		beq.s	loc_72B78
000A7550 08D5 0001                  		bset	#1,(a5)
000A7554 4EBA FD82                  		jsr	sub_729A0(pc)
000A7558 DD2D 0009                  		add.b	d6,9(a5)
000A755C                            
000A755C                            loc_72B78:
000A755C DAFC 0030                  		adda.w	#$30,a5
000A7560 51CF FFE8                  		dbf	d7,loc_72B66
000A7564 2A4B                       		movea.l	a3,a5
000A7566 1D7C 0080 0024             		move.b	#$80,$24(a6)
000A756C 1D7C 0028 0026             		move.b	#$28,$26(a6)
000A7572 422E 0027                  		clr.b	$27(a6)
000A7576 504F                       		addq.w	#8,sp
000A7578 4E75                       		rts	
000A757A                            ; ===========================================================================
000A757A                            
000A757A                            loc_72B9E:				; XREF: loc_72A64
000A757A 1B5C 0002                  		move.b	(a4)+,2(a5)
000A757E 4E75                       		rts	
000A7580                            ; ===========================================================================
000A7580                            
000A7580                            loc_72BA4:				; XREF: loc_72A64
000A7580 101C                       		move.b	(a4)+,d0
000A7582 D12D 0009                  		add.b	d0,9(a5)
000A7586 6000 0000                  		bra.w	sub_72CB4
000A758A                            ; ===========================================================================
000A758A                            
000A758A                            loc_72BAE:				; XREF: loc_72A64
000A758A 08D5 0004                  		bset	#4,(a5)
000A758E 4E75                       		rts	
000A7590                            ; ===========================================================================
000A7590                            
000A7590                            loc_72BB4:				; XREF: loc_72A64
000A7590 1B54 0012                  		move.b	(a4),$12(a5)
000A7594 1B5C 0013                  		move.b	(a4)+,$13(a5)
000A7598 4E75                       		rts	
000A759A                            ; ===========================================================================
000A759A                            
000A759A                            loc_72BBE:				; XREF: loc_72A64
000A759A 101C                       		move.b	(a4)+,d0
000A759C D12D 0008                  		add.b	d0,8(a5)
000A75A0 4E75                       		rts	
000A75A2                            ; ===========================================================================
000A75A2                            
000A75A2                            loc_72BC6:				; XREF: loc_72A64
000A75A2 1D54 0002                  		move.b	(a4),2(a6)
000A75A6 1D5C 0001                  		move.b	(a4)+,1(a6)
000A75AA 4E75                       		rts	
000A75AC                            ; ===========================================================================
000A75AC                            
000A75AC                            loc_72BD0:				; XREF: loc_72A64
000A75AC 41EE 0040                  		lea	$40(a6),a0
000A75B0 101C                       		move.b	(a4)+,d0
000A75B2 7230                       		moveq	#$30,d1
000A75B4 740A                       		moveq	#10,d2				; MJ: extra channel
000A75B6                            
000A75B6                            loc_72BDA:
000A75B6 1140 0002                  		move.b	d0,2(a0)
000A75BA D0C1                       		adda.w	d1,a0
000A75BC 51CA FFF8                  		dbf	d2,loc_72BDA
000A75C0                            
000A75C0 4E75                       		rts	
000A75C2                            ; ===========================================================================
000A75C2                            
000A75C2                            loc_72BE6:				; XREF: loc_72A64
000A75C2 101C                       		move.b	(a4)+,d0
000A75C4 D12D 0009                  		add.b	d0,9(a5)
000A75C8 4E75                       		rts	
000A75CA                            ; ===========================================================================
000A75CA                            
000A75CA                            loc_72BEE:				; XREF: loc_72A64
000A75CA 422E 002C                  		clr.b	$2C(a6)
000A75CE 4E75                       		rts	
000A75D0                            ; ===========================================================================
000A75D0                            
000A75D0                            loc_72BF4:				; XREF: loc_72A64
000A75D0 0895 0007                  		bclr	#7,(a5)
000A75D4 0895 0004                  		bclr	#4,(a5)
000A75D8 4EBA F98C                  		jsr	sub_726FE(pc)
000A75DC 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A75E0 6B00                       		bmi.s	loc_72C22
000A75E2 264D                       		movea.l	a5,a3
000A75E4 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A75E8 226E 0018                  		movea.l	$18(a6),a1
000A75EC 0895 0002                  		bclr	#2,(a5)
000A75F0 08D5 0001                  		bset	#1,(a5)
000A75F4 102D 000B                  		move.b	$B(a5),d0
000A75F8 4EBA 0000                  		jsr	sub_72C4E(pc)
000A75FC 2A4B                       		movea.l	a3,a5
000A75FE                            
000A75FE                            loc_72C22:
000A75FE 504F                       		addq.w	#8,sp
000A7600 4E75                       		rts	
000A7602                            ; ===========================================================================
000A7602                            
000A7602                            loc_72C26:				; XREF: loc_72A64
000A7602 7000                       		moveq	#0,d0
000A7604 101C                       		move.b	(a4)+,d0
000A7606 1B40 000B                  		move.b	d0,$B(a5)
000A760A                            
000A760A                            SFM_UpdateVoice:
000A760A 0815 0002                  		btst	#2,(a5)
000A760E 6600 0000                  		bne.w	locret_72CAA
000A7612 4A2E 000E                  	tst.b	$0E(a6)
000A7616 6600                       	bne.s	locret_72CAA_2
000A7618 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A761C 6600                       	bne.s	locret_72CAA
000A761E                            
000A761E                            	locret_72CAA_2:
000A761E                            
000A761E 226E 0018                  		movea.l	$18(a6),a1
000A7622 4A2E 000E                  		tst.b	$E(a6)
000A7626 6700                       		beq.s	sub_72C4E
000A7628 226D 0020                  		movea.l	$20(a5),a1	; ERROR HERE...
000A762C 4A2E 000E                  		tst.b	$E(a6)
000A7630 6B00                       		bmi.s	sub_72C4E
000A7632 226E 0020                  		movea.l	$20(a6),a1
000A7636                            
000A7636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7636                            
000A7636                            
000A7636                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000A7636 5340                       		subq.w	#1,d0
000A7638 6B00                       		bmi.s	loc_72C5C
000A763A 323C 0019                  		move.w	#$19,d1
000A763E                            
000A763E                            loc_72C56:
000A763E D2C1                       		adda.w	d1,a1
000A7640 51C8 FFFC                  		dbf	d0,loc_72C56
000A7644                            
000A7644                            loc_72C5C:
000A7644 1219                       		move.b	(a1)+,d1
000A7646 1B41 001F                  		move.b	d1,$1F(a5)
000A764A 1801                       		move.b	d1,d4
000A764C 103C 00B0                  		move.b	#$B0,d0
000A7650 4EBA F950                  		jsr	sub_72722(pc)
000A7654 45FA 0000                  		lea	byte_72D18(pc),a2
000A7658 7613                       		moveq	#$13,d3
000A765A                            
000A765A                            loc_72C72:
000A765A 101A                       		move.b	(a2)+,d0
000A765C 1219                       		move.b	(a1)+,d1
000A765E 4EBA F942                  		jsr	sub_72722(pc)
000A7662 51CB FFF6                  		dbf	d3,loc_72C72
000A7666 7A03                       		moveq	#3,d5
000A7668 0244 0007                  		andi.w	#7,d4
000A766C 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000A7670 162D 0009                  		move.b	9(a5),d3
000A7674 D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A7678                            
000A7678                            loc_72C8C:
000A7678 101A                       		move.b	(a2)+,d0
000A767A 1219                       		move.b	(a1)+,d1
000A767C E20C                       		lsr.b	#1,d4
000A767E 6400                       		bcc.s	loc_72C96
000A7680 D203                       		add.b	d3,d1
000A7682                            
000A7682                            loc_72C96:
000A7682 4EBA F91E                  		jsr	sub_72722(pc)
000A7686 51CD FFF0                  		dbf	d5,loc_72C8C
000A768A 103C 00B4                  		move.b	#$B4,d0
000A768E 122D 000A                  		move.b	$A(a5),d1
000A7692 4EBA F90E                  		jsr	sub_72722(pc)
000A7696                            
000A7696                            locret_72CAA:
000A7696 4E75                       		rts	
000A7698                            ; End of function sub_72C4E
000A7698                            
000A7698                            ; ===========================================================================
000A7698 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000A76A0                            
000A76A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A76A0                            
000A76A0                            
000A76A0                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000A76A0 0815 0002                  		btst	#2,(a5)
000A76A4 6600                       		bne.s	locret_72D16
000A76A6                            
000A76A6 4A2E 000E                  	tst.b	$0E(a6)
000A76AA 6600                       	bne.s	locret_72D16_2
000A76AC 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A76B0 6600                       	bne.s	locret_72D16
000A76B2                            
000A76B2                            	locret_72D16_2:
000A76B2 7000                       		moveq	#0,d0
000A76B4 102D 000B                  		move.b	$B(a5),d0
000A76B8 226E 0018                  		movea.l	$18(a6),a1
000A76BC 4A2E 000E                  		tst.b	$E(a6)
000A76C0 6700                       		beq.s	loc_72CD8
000A76C2 226D 0020                  		movea.l	$20(a5),a1
000A76C6 4A2E 000E                  		tst.b	$E(a6)
000A76CA 6B00                       		bmi.s	loc_72CD8
000A76CC 226E 0020                  		movea.l	$20(a6),a1
000A76D0                            
000A76D0                            loc_72CD8:
000A76D0 5340                       		subq.w	#1,d0
000A76D2 6B00                       		bmi.s	loc_72CE6
000A76D4 323C 0019                  		move.w	#$19,d1
000A76D8                            
000A76D8                            loc_72CE0:
000A76D8 D2C1                       		adda.w	d1,a1
000A76DA 51C8 FFFC                  		dbf	d0,loc_72CE0
000A76DE                            
000A76DE                            loc_72CE6:
000A76DE D2FC 0015                  		adda.w	#$15,a1
000A76E2 45FA 0000                  		lea	byte_72D2C(pc),a2
000A76E6 102D 001F                  		move.b	$1F(a5),d0
000A76EA 0240 0007                  		andi.w	#7,d0
000A76EE 183B 00A8                  		move.b	byte_72CAC(pc,d0.w),d4
000A76F2 162D 0009                  		move.b	9(a5),d3
000A76F6 D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A76FA 6B00                       		bmi.s	locret_72D16
000A76FC 7A03                       		moveq	#3,d5
000A76FE                            
000A76FE                            loc_72D02:
000A76FE 101A                       		move.b	(a2)+,d0
000A7700 1219                       		move.b	(a1)+,d1
000A7702 E20C                       		lsr.b	#1,d4
000A7704 6400                       		bcc.s	loc_72D12
000A7706 D203                       		add.b	d3,d1
000A7708 6500                       		bcs.s	loc_72D12
000A770A 4EBA F896                  		jsr	sub_72722(pc)
000A770E                            
000A770E                            loc_72D12:
000A770E 51CD FFEE                  		dbf	d5,loc_72D02
000A7712                            
000A7712                            locret_72D16:
000A7712 4E75                       		rts	
000A7714                            ; End of function sub_72CB4
000A7714                            
000A7714                            ; ===========================================================================
000A7714 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000A771E 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000A7728 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000A772C                            ; ===========================================================================
000A772C                            
000A772C                            loc_72D30:				; XREF: loc_72A64
000A772C 08D5 0003                  		bset	#3,(a5)
000A7730 2B4C 0014                  		move.l	a4,$14(a5)
000A7734 1B5C 0018                  		move.b	(a4)+,$18(a5)
000A7738 1B5C 0019                  		move.b	(a4)+,$19(a5)
000A773C 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000A7740 101C                       		move.b	(a4)+,d0
000A7742 E208                       		lsr.b	#1,d0
000A7744 1B40 001B                  		move.b	d0,$1B(a5)
000A7748 426D 001C                  		clr.w	$1C(a5)
000A774C 4E75                       		rts	
000A774E                            ; ===========================================================================
000A774E                            
000A774E                            loc_72D52:				; XREF: loc_72A64
000A774E 08D5 0003                  		bset	#3,(a5)
000A7752 206D 0014                  		movea.l	$14(a5),a0				; CHG: load modulation address
000A7756 43ED 0018                  		lea	$18(a5),a1				; CHG: load modulation settings RAM
000A775A 12D8                       		move.b	(a0)+,(a1)+				; CHG: reset settings...
000A775C 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A775E 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A7760 1018                       		move.b	(a0)+,d0				; CHG: ''
000A7762 E208                       		lsr.b	#$01,d0					; CHG: ''
000A7764 12C0                       		move.b	d0,(a1)+				; CHG: ''
000A7766 4259                       		clr.w	(a1)+					; CHG: clear modulation frequency
000A7768 4E75                       		rts	
000A776A                            ; ===========================================================================
000A776A                            
000A776A                            loc_72D58:				; XREF: loc_72A64
000A776A 0895 0007                  		bclr	#7,(a5)
000A776E 0895 0004                  		bclr	#4,(a5)
000A7772 4A2D 0001                  		tst.b	1(a5)
000A7776 6B00                       		bmi.s	loc_72D74
000A7778 4A2E 0008                  		tst.b	8(a6)
000A777C 6B00 0000                  		bmi.w	SF2_MutePCM				; CHG: for PCM, branch to a differen mute routine
000A7780 4EBA F7E4                  		jsr	sub_726FE(pc)
000A7784 6000                       		bra.s	loc_72D78
000A7786                            ; ===========================================================================
000A7786                            
000A7786                            loc_72D74:
000A7786 4EBA FB50                  		jsr	sub_729A0(pc)
000A778A                            
000A778A                            loc_72D78:
000A778A 4A2E 000E                  		tst.b	$E(a6)
000A778E 6A00 0000                  		bpl.w	loc_72E02
000A7792 4216                       		clr.b	0(a6)
000A7794 7000                       		moveq	#0,d0
000A7796 102D 0001                  		move.b	1(a5),d0
000A779A 6B00                       		bmi.s	loc_72DCC
000A779C 41FA F250                  		lea	dword_722CC(pc),a0
000A77A0 264D                       		movea.l	a5,a3
000A77A2 0C00 0004                  		cmpi.b	#4,d0
000A77A6 6600                       		bne.s	loc_72DA8
000A77A8 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A77AC 6A00                       		bpl.s	loc_72DA8
000A77AE 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A77B2 226E 0020                  		movea.l	$20(a6),a1
000A77B6 6000                       		bra.s	loc_72DB8
000A77B8                            ; ===========================================================================
000A77B8                            
000A77B8                            loc_72DA8:
000A77B8 5500                       		subq.b	#2,d0
000A77BA E508                       		lsl.b	#2,d0
000A77BC 2A70 0000                  		movea.l	(a0,d0.w),a5
000A77C0 4A15                       		tst.b	(a5)
000A77C2 6A00                       		bpl.s	loc_72DC8
000A77C4 226E 0018                  		movea.l	$18(a6),a1
000A77C8                            
000A77C8                            loc_72DB8:
000A77C8 0895 0002                  		bclr	#2,(a5)
000A77CC 08D5 0001                  		bset	#1,(a5)
000A77D0 102D 000B                  		move.b	$B(a5),d0
000A77D4 4EBA FE60                  		jsr	sub_72C4E(pc)
000A77D8                            
000A77D8                            loc_72DC8:
000A77D8 2A4B                       		movea.l	a3,a5
000A77DA 6000                       		bra.s	loc_72E02
000A77DC                            ; ===========================================================================
000A77DC                            
000A77DC                            loc_72DCC:
000A77DC 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A77E0 4A10                       		tst.b	(a0)
000A77E2 6A00                       		bpl.s	loc_72DE0
000A77E4 0C00 00E0                  		cmpi.b	#$E0,d0
000A77E8 6700                       		beq.s	loc_72DEA
000A77EA 0C00 00C0                  		cmpi.b	#$C0,d0
000A77EE 6700                       		beq.s	loc_72DEA
000A77F0                            
000A77F0                            loc_72DE0:
000A77F0 41FA F1FC                  		lea	dword_722CC(pc),a0
000A77F4 E608                       		lsr.b	#3,d0
000A77F6 2070 0000                  		movea.l	(a0,d0.w),a0
000A77FA                            
000A77FA                            loc_72DEA:
000A77FA 0890 0002                  		bclr	#2,(a0)
000A77FE 08D0 0001                  		bset	#1,(a0)
000A7802 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A7808 6600                       		bne.s	loc_72E02
000A780A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A7812                            
000A7812                            loc_72E02:
000A7812 504F                       		addq.w	#$04*2,sp					; CHG: skip return addresses (returns back outside of the sound driver)
000A7814 4E75                       		rts	
000A7816                            
000A7816                            SF2_MutePCM:
000A7816 584F                       		addq.w	#4,sp						; CHG: go back, but not out of sound driver
000A7818 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)					; CHG: is this PCM 1?
000A781E 6600                       		bne.s	SF2_MutePCM2					; CHG: if not, branch to mute PCM 2
000A7820 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7826 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A782C 33FC 0100 00A1 1100 0839+  		StopZ80
000A783E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7840 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7842 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7844 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7846 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7848 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A784A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A784C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A784E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7850 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7852 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7854 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7856 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A785E 33FC 0000 00A1 1100        		StartZ80
000A7866 4E75                       		rts							; CHG: return
000A7868                            
000A7868                            SF2_MutePCM2:
000A7868 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A786E 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 1 slot address
000A7874 33FC 0100 00A1 1100 0839+  		StopZ80
000A7886 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7888 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A788A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A788C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A788E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7890 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7892 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7894 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7896 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7898 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A789A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A789C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A789E 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A78A6 33FC 0000 00A1 1100        		StartZ80
000A78AE 4E75                       		rts							; CHG: return
000A78B0                            
000A78B0                            ; ===========================================================================
000A78B0                            
000A78B0                            loc_72E06:				; XREF: loc_72A64
000A78B0 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000A78B6 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000A78BA 0815 0002                  		btst	#2,(a5)
000A78BE 6600                       		bne.s	locret_72E1E 
000A78C0 4A2E 000E                  	tst.b	$0E(a6)
000A78C4 6600                       	bne.s	locret_72E1E_2
000A78C6 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A78CA 6600                       	bne.s	locret_72E1E 
000A78CC                            
000A78CC                            	locret_72E1E_2:
000A78CC 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
000A78D0 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
000A78D6 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
000A78DA 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
000A78DE 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
000A78E0 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
000A78E8                            
000A78E8                            locret_72E1E:
000A78E8 4E75                       		rts	
000A78EA                            ; ===========================================================================
000A78EA                            
000A78EA                            loc_72E20:				; XREF: loc_72A64
000A78EA 0895 0003                  		bclr	#3,(a5)
000A78EE 4E75                       		rts	
000A78F0                            ; ===========================================================================
000A78F0                            
000A78F0                            loc_72E26:				; XREF: loc_72A64
000A78F0 1B5C 000B                  		move.b	(a4)+,$B(a5)
000A78F4 4E75                       		rts	
000A78F6                            ; ===========================================================================
000A78F6                            
000A78F6                            loc_72E2C:				; XREF: loc_72A64
000A78F6 101C                       		move.b	(a4)+,d0
000A78F8 E148                       		lsl.w	#8,d0
000A78FA 101C                       		move.b	(a4)+,d0
000A78FC D8C0                       		adda.w	d0,a4
000A78FE 534C                       		subq.w	#1,a4
000A7900 4E75                       		rts	
000A7902                            ; ===========================================================================
000A7902                            
000A7902                            loc_72E38:				; XREF: loc_72A64
000A7902 7000                       		moveq	#0,d0
000A7904 101C                       		move.b	(a4)+,d0
000A7906 121C                       		move.b	(a4)+,d1
000A7908 4A35 0024                  		tst.b	$24(a5,d0.w)
000A790C 6600                       		bne.s	loc_72E48
000A790E 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000A7912                            
000A7912                            loc_72E48:
000A7912 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000A7916 66DE                       		bne.s	loc_72E2C
000A7918 544C                       		addq.w	#2,a4
000A791A 4E75                       		rts	
000A791C                            ; ===========================================================================
000A791C                            
000A791C                            loc_72E52:				; XREF: loc_72A64
000A791C 7000                       		moveq	#0,d0
000A791E 102D 000D                  		move.b	$D(a5),d0
000A7922 5900                       		subq.b	#4,d0
000A7924 2B8C 0000                  		move.l	a4,(a5,d0.w)
000A7928 1B40 000D                  		move.b	d0,$D(a5)
000A792C 60C8                       		bra.s	loc_72E2C
000A792E                            ; ===========================================================================
000A792E                            
000A792E                            loc_72E64:				; XREF: loc_72A64
000A792E 103C 0088                  		move.b	#$88,d0
000A7932 123C 000F                  		move.b	#$F,d1
000A7936 4EBA F676                  		jsr	sub_7272E(pc)
000A793A 103C 008C                  		move.b	#$8C,d0
000A793E 123C 000F                  		move.b	#$F,d1
000A7942 6000 F66A                  		bra.w	sub_7272E
000A7946                            ; ===========================================================================
000A7946                            Music81:	incbin	sound\music81.bin
000A8124 00                         		even
000A8124                            Music82:	incbin	sound\music82.bin
000A8652 00                         		even
000A8652                            Music83:	incbin	sound\music83.bin
000A8ACC 00                         		even
000A8ACC                            Music84:	incbin	sound\music84.bin
000A8F4A 00                         		even
000A8F4A                            Music85:	incbin	sound\music85.bin
000A94A2 00                         		even
000A94A2                            Music86:	incbin	sound\music86.bin
000A9BD6                            		even
000A9BD6                            Music87:	incbin	sound\music87.bin
000A9E7C 00                         		even
000A9E7C                            Music88:	incbin	sound\music88.bin
000A9F88 00                         		even
000A9F88                            Music89:	incbin	sound\music89.bin
000AA2BC 00                         		even
000AA2BC                            Music8A:	incbin	sound\music8A.bin
000AA4D4                            		even
000AA4D4                            Music8B:	incbin	sound\music8B.bin
000AA800                            		even
000AA800                            Music8C:	incbin	sound\music8C.bin
000AAABE 00                         		even
000AAABE                            Music8D:	incbin	sound\music8D.bin
000AAD60                            		even
000AAD60                            Music8E:	incbin	sound\music8E.bin
000AAEF6 00                         		even
000AAEF6                            Music8F:	incbin	sound\music8F.bin
000AB058 00                         		even
000AB058                            Music90:	incbin	sound\music90.bin
000AB1D8 00                         		even
000AB1D8                            Music91:	incbin	sound\music91.bin
000AC800 00                         		even
000AC800                            Music92:	incbin	sound\music92.bin
000AC948 00                         		even
000AC948                            Music93:	incbin	sound\music93.bin
000ACA20 00                         		even
000ACA20                            ; ---------------------------------------------------------------------------
000ACA20                            ; Sound	effect pointers
000ACA20                            ; ---------------------------------------------------------------------------
000ACA20 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000ACA2C 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000ACA38 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000ACA44 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000ACA50 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000ACA5C 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000ACA68 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000ACA74 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000ACA80 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000ACA8C 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000ACA98 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000ACAA4 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000ACAB0 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000ACABC 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000ACAC8 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000ACAD4 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000ACAE0 0000 0000                  SoundD0Index:	dc.l SoundD0
000ACAE4                            SoundA0:	incbin	sound\soundA0.bin
000ACAFA                            		even
000ACAFA                            SoundA1:	incbin	sound\soundA1.bin
000ACB24                            		even
000ACB24                            SoundA2:	incbin	sound\soundA2.bin
000ACB44                            		even
000ACB44                            SoundA3:	incbin	sound\soundA3.bin
000ACB76                            		even
000ACB76                            SoundA4:	incbin	sound\soundA4.bin
000ACBAC                            		even
000ACBAC                            SoundA5:	incbin	sound\soundA5.bin
000ACBD8                            		even
000ACBD8                            SoundA6:	incbin	sound\soundA6.bin
000ACC08                            		even
000ACC08                            SoundA7:	incbin	sound\soundA7.bin
000ACC38                            		even
000ACC38                            SoundA8:	incbin	sound\soundA8.bin
000ACC6C                            		even
000ACC6C                            SoundA9:	incbin	sound\soundA9.bin
000ACC7E                            		even
000ACC7E                            SoundAA:	incbin	sound\soundAA.bin
000ACCC0                            		even
000ACCC0                            SoundAB:	incbin	sound\soundAB.bin
000ACCE0                            		even
000ACCE0                            SoundAC:	incbin	sound\soundAC.bin
000ACD14                            		even
000ACD14                            SoundAD:	incbin	sound\soundAD.bin
000ACD4A                            		even
000ACD4A                            SoundAE:	incbin	sound\soundAE.bin
000ACD94                            		even
000ACD94                            SoundAF:	incbin	sound\soundAF.bin
000ACDC2                            		even
000ACDC2                            SoundB0:	incbin	sound\soundB0.bin
000ACDF4                            		even
000ACDF4                            SoundB1:	incbin	sound\soundB1.bin
000ACE20                            		even
000ACE20                            SoundB2:	incbin	sound\soundB2.bin
000ACE70                            		even
000ACE70                            SoundB3:	incbin	sound\soundB3.bin
000ACEBA                            		even
000ACEBA                            SoundB4:	incbin	sound\soundB4.bin
000ACF16                            		even
000ACF16                            SoundB5:	incbin	sound\soundB5.bin
000ACF44                            		even
000ACF44                            SoundB6:	incbin	sound\soundB6.bin
000ACF62                            		even
000ACF62                            SoundB7:	incbin	sound\soundB7.bin
000ACF9E                            		even
000ACF9E                            SoundB8:	incbin	sound\soundB8.bin
000ACFBC                            		even
000ACFBC                            SoundB9:	incbin	sound\soundB9.bin
000AD020                            		even
000AD020                            SoundBA:	incbin	sound\soundBA.bin
000AD048                            		even
000AD048                            SoundBB:	incbin	sound\soundBB.bin
000AD074                            		even
000AD074                            SoundBC:	incbin	sound\soundBC.bin
000AD0B6                            		even
000AD0B6                            SoundBD:	incbin	sound\soundBD.bin
000AD10A                            		even
000AD10A                            SoundBE:	incbin	sound\soundBE.bin
000AD144                            		even
000AD144                            SoundBF:	incbin	sound\soundBF.bin
000AD1B6                            		even
000AD1B6                            SoundC0:	incbin	sound\soundC0.bin
000AD1E4                            		even
000AD1E4                            SoundC1:	incbin	sound\soundC1.bin
000AD21E                            		even
000AD21E                            SoundC2:	incbin	sound\soundC2.bin
000AD248                            		even
000AD248                            SoundC3:	incbin	sound\soundC3.bin
000AD2C2                            		even
000AD2C2                            SoundC4:	incbin	sound\soundC4.bin
000AD2EA                            		even
000AD2EA                            SoundC5:	incbin	sound\soundC5.bin
000AD352                            		even
000AD352                            SoundC6:	incbin	sound\soundC6.bin
000AD394                            		even
000AD394                            SoundC7:	incbin	sound\soundC7.bin
000AD3C2                            		even
000AD3C2                            SoundC8:	incbin	sound\soundC8.bin
000AD3D4                            		even
000AD3D4                            SoundC9:	incbin	sound\soundC9.bin
000AD402                            		even
000AD402                            SoundCA:	incbin	sound\soundCA.bin
000AD430                            		even
000AD430                            SoundCB:	incbin	sound\soundCB.bin
000AD47C                            		even
000AD47C                            SoundCC:	incbin	sound\soundCC.bin
000AD4B6                            		even
000AD4B6                            SoundCD:	incbin	sound\soundCD.bin
000AD4C4                            		even
000AD4C4                            SoundCE:	incbin	sound\soundCE.bin
000AD4F2                            		even
000AD4F2                            SoundCF:	incbin	sound\soundCF.bin
000AD52A                            		even
000AD52A                            SoundD0:	incbin	sound\soundD0.bin
000AD564                            		even
000AD564                            SegaPCM:	incbin	"Dual PCM\Samples\incswf\Sega.swf",$3A
000B33AA                            SegaPCM_End:	even
000B33AA                            
000B33AA                            ; ===========================================================================
000B33AA                            ; ---------------------------------------------------------------------------
000B33AA                            ; Z80 ROM address
000B33AA                            ; ---------------------------------------------------------------------------
000B33AA                            
000B33AA                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
000B4EE2 00                         Z80ROM_End:	even
000B4EE2                            
000B4EE2                            ; ===========================================================================
000B4EE2                            ; ---------------------------------------------------------------------------
000B4EE2                            ; Sample 68k PCM list
000B4EE2                            ; ---------------------------------------------------------------------------
000B4EE2                            ; SampleList:
000B4EE2                            		include	"Dual PCM\Samples.asm"
000B4EE2                            ; ===========================================================================
000B4EE2                            ; ---------------------------------------------------------------------------
000B4EE2                            ; Sample 68k PCM list
000B4EE2                            ; ---------------------------------------------------------------------------
000B4EE2                            
000B4EE2                            SampleList:
000B4EE2                            
000B4EE2                            	; --- Sonic 1 Samples ---
000B4EE2                            
000B4EE2 0000 0000                  		dc.l	Sonic1Kick			; 00
000B4EE6 0000 0000                  		dc.l	Sonic1Snare			; 01
000B4EEA 0000 0000                  		dc.l	Sonic1Timpani		; 02
000B4EEE 0000 0000                  		dc.l	SonimeDies			; 03
000B4EF2 0000 0000                  		dc.l	SonimeFrustrated	; 04
000B4EF6 0000 0000                  		dc.l	SonimeHappy			; 05
000B4EFA 0000 0000                  		dc.l	SonimeHappy2		; 06
000B4EFE 0000 0000                  		dc.l	SonimeHurt			; 07
000B4F02 0000 0000                  		dc.l	SonimeImpatient		; 08
000B4F06 0000 0000                  		dc.l	SonimeInvincibility	; 09
000B4F0A 0000 0000                  		dc.l	SonimeSpikey	; 0A
000B4F0E 0000 0000                  		dc.l	SonimeSpeed	; 0B
000B4F12                            		
000B4F12                            ; ---------------------------------------------------------------------------
000B4F12                            ; Sample z80 pointers
000B4F12                            ; ---------------------------------------------------------------------------
000B4F12 =000036B0                  Sec	=	14000	; Hz per second
000B4F12 =000003E8                  Mil	=	1000	; centi-seconds per second
000B4F12                            
000B4F12                            	; --- Stop Sample (used by note 80) ---
000B4F12                            
000B4F12 0000 0000 0000 0000 0000+  StopSample:				dcz80	SWF_StopSample,		SWF_StopSample_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4F1E                            
000B4F1E                            	; --- Sonic 1 Samples ---
000B4F1E                            
000B4F1E 0000 0000 0000 0000 0000+  Sonic1Kick:				dcz80	SWF_S1_Kick,		SWF_S1_Kick_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4F2A 0000 0000 0000 0000 0000+  Sonic1Snare:			dcz80	SWF_S1_Snare,		SWF_S1_Snare_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4F36 0000 0000 0000 0000 0000+  Sonic1Timpani:			dcz80	SWF_S1_Timpani,		SWF_S1_Timpani,			SWF_StopSample,		SWF_StopSample_Rev
000B4F42 0000 0000 0000 0000 0000+  SonimeDies:				dcz80	SWF_Dies,			SWF_Dies_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B4F4E 0000 0000 0000 0000 0000+  SonimeFrustrated:		dcz80	SWF_Frustrated,		SWF_Frustrated_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4F5A 0000 0000 0000 0000 0000+  SonimeHappy:			dcz80	SWF_Happy,			SWF_Happy_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B4F66 0000 0000 0000 0000 0000+  SonimeHappy2:			dcz80	SWF_Happy2,			SWF_Happy2_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B4F72 0000 0000 0000 0000 0000+  SonimeHurt:				dcz80	SWF_Hurt,			SWF_Hurt_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B4F7E 0000 0000 0000 0000 0000+  SonimeImpatient:		dcz80	SWF_Impatient,		SWF_Impatient_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4F8A 0000 0000 0000 0000 0000+  SonimeInvincibility:	dcz80	SWF_Invincibility,	SWF_Invincibility_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B4F96 0000 0000 0000 0000 0000+  SonimeSpikey:	dcz80	SWF_Spikey,	SWF_Spikey_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B4FA2 0000 0000 0000 0000 0000+  SonimeSpeed:		dcz80	SWF_Speed,		SWF_Speed_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4FAE                            ; ---------------------------------------------------------------------------
000B4FAE                            ; Sample file includes
000B4FAE                            ; ---------------------------------------------------------------------------
000B4FAE                            			align	$8000,$FF
000B8000                            ; ---------------------------------------------------------------------------
000B8000                            
000B8000                            	; --- Volume tables ---
000B8000                            
000B8000                            PCM_Volumes:		incbin	"Dual PCM\Volume Maker\Volumes.bin"
000C0000                            
000C0000                            	; --- Stop Sample (used by note 80) ---
000C0000                            
000C0000                            			EndMarker
000C0198                            SWF_StopSample:		dcb.b	$8000-((Z80E_Read*(($1000+$100)/$100))*2),$80
000C7E68                            SWF_StopSample_Rev:	EndMarker
000C8000                            
000C8000                            	; --- Sonic 1 Samples ---
000C8000                            
000C8000                            SWF_S1_Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
000C8894                            SWF_S1_Kick_Rev:	EndMarker
000C8A2C                            SWF_S1_Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
000C9303                            SWF_S1_Snare_Rev:	EndMarker
000C949B                            SWF_S1_Timpani:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani.swf"
000CC41F                            SWF_S1_Timpani_Rev:	EndMarker
000CC5B7                            SWF_Dies:			incbin	"Dual PCM\Samples\incswf\dies.swf"
000D0D24                            SWF_Dies_Rev:		EndMarker
000D0EBC                            SWF_Frustrated:		incbin	"Dual PCM\Samples\incswf\frustrated.swf"
000D8283                            SWF_Frustrated_Rev:	EndMarker
000D841B                            SWF_Happy:			incbin	"Dual PCM\Samples\incswf\happy.swf"
000DF3D3                            SWF_Happy_Rev:		EndMarker
000DF56B                            SWF_Happy2:			incbin	"Dual PCM\Samples\incswf\happy 2.swf"
000ECBB7                            SWF_Happy2_Rev:		EndMarker
000ECD4F                            SWF_Hurt:			incbin	"Dual PCM\Samples\incswf\hurt.swf"
000EF942                            SWF_Hurt_Rev:		EndMarker
000EFADA                            SWF_Impatient:		incbin	"Dual PCM\Samples\incswf\impatient.swf"
000F922E                            SWF_Impatient_Rev:	EndMarker
000F93C6                            SWF_Invincibility:	incbin	"Dual PCM\Samples\incswf\invincibility.swf"
001107C1                            SWF_Invincibility_Rev:	EndMarker
00110959                            SWF_Spikey:	incbin	"Dual PCM\Samples\incswf\spikey.swf"
00114934                            SWF_Spikey_Rev:	EndMarker
00114ACC                            SWF_Speed:	incbin	"Dual PCM\Samples\incswf\goingatsupersonicspeed.swf"
0011F331                            SWF_Speed_Rev:	EndMarker
0011F4C9                            ; ===========================================================================
0011F4C9                            ; ===========================================================================
0011F4CA 00                         		even
0011F4CA                            
0011F4CA                            ; ===========================================================================
0011F4CA                            
0011F4CA                            SHC2021:    incbin "SHC21_Lite_Sonic12.bin"
0012572E                                        even
0012572E                            
0012572E                            ; ===============================================================
0012572E                            ; ---------------------------------------------------------------
0012572E                            ; Error handling module
0012572E                            ; ---------------------------------------------------------------
0012572E                            
0012572E 4EBA 0000                  BusError:	jsr	ErrorHandler(pc)
00125732 4255 5320 4552 524F 5200   		dc.b	"BUS ERROR",0			; text
0012573C 01                         		dc.b	1				; extended stack frame
0012573E 00                         		even
0012573E                            
0012573E 4EBA 0000                  AddressError:	jsr	ErrorHandler(pc)
00125742 4144 4452 4553 5320 4552+  		dc.b	"ADDRESS ERROR",0		; text
00125750 01                         		dc.b	1				; extended stack frame
00125752 00                         		even
00125752                            
00125752 4EBA 0000                  IllegalInstr:	jsr	ErrorHandler(pc)
00125756 494C 4C45 4741 4C20 494E+  		dc.b	"ILLEGAL INSTRUCTION",0		; text
0012576A 00                         		dc.b	0				; extended stack frame
0012576C 00                         		even
0012576C                            
0012576C 4EBA 0000                  ZeroDivide:	jsr	ErrorHandler(pc)
00125770 5A45 524F 2044 4956 4944+  		dc.b	"ZERO DIVIDE",0  		; text
0012577C 00                         		dc.b	0				; extended stack frame
0012577E 00                         		even
0012577E                            
0012577E 4EBA 0000                  ChkInstr:	jsr	ErrorHandler(pc)
00125782 4348 4B20 494E 5354 5255+  		dc.b	"CHK INSTRUCTION",0  		; text
00125792 00                         		dc.b	0				; extended stack frame
00125794 00                         		even
00125794                            
00125794 4EBA 0000                  TrapvInstr:	jsr	ErrorHandler(pc)
00125798 5452 4150 5620 494E 5354+  		dc.b	"TRAPV INSTRUCTION",0  		; text
001257AA 00                         		dc.b	0				; extended stack frame
001257AC 00                         		even
001257AC                            
001257AC 4EBA 0000                  PrivilegeViol:	jsr	ErrorHandler(pc)
001257B0 5052 4956 494C 4547 4520+  		dc.b	"PRIVILEGE VIOLATION",0  	; text
001257C4 00                         		dc.b	0				; extended stack frame
001257C6 00                         		even
001257C6                            
001257C6 4EBA 0000                  Trace:		jsr	ErrorHandler(pc)
001257CA 5452 4143 4500             		dc.b	"TRACE",0 	  		; text
001257D0 00                         		dc.b	0				; extended stack frame
001257D2 00                         		even
001257D2                            
001257D2 4EBA 0000                  Line1010Emu:	jsr	ErrorHandler(pc)
001257D6 4C49 4E45 2031 3031 3020+  		dc.b	"LINE 1010 EMULATOR",0  	; text
001257E9 00                         		dc.b	0				; extended stack frame
001257EA                            		even
001257EA                            
001257EA 4EBA 0000                  Line1111Emu:	jsr	ErrorHandler(pc)
001257EE 4C49 4E45 2031 3131 3120+  		dc.b	"LINE 1111 EMULATOR",0  	; text
00125801 00                         		dc.b	0				; extended stack frame
00125802                            		even
00125802                            
00125802 4EBA 0000                  ErrorExcept:	jsr	ErrorHandler(pc)
00125806 4552 524F 5220 4558 4345+  		dc.b	"ERROR EXCEPTION",0    		; text
00125816 00                         		dc.b	0				; extended stack frame
00125818 00                         		even
00125818                            
00125818                            ErrorHandler:	incbin	"ErrorHandler.bin"
0012722C                            
0012722C                            ; end of 'ROM'
0012722C                            EndOfRom:
0012722C                            
0012722C                            
